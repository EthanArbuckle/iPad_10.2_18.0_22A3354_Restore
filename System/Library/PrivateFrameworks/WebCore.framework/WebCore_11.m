void WebCore::StyledMarkedText::computeStyleForUnmarkedMarkedText(WebCore::StyledMarkedText *this, const WebCore::RenderText *a2, const WebCore::RenderStyle *a3, int a4, const WebCore::PaintInfo *a5)
{
  const WebCore::RenderStyle *v5;
  WebCore::ShadowData *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v20;
  const WebCore::RenderStyle *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  const WebCore::PaintInfo *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  WebCore::Widget *v49;
  const WebCore::Length *v50;
  const WebCore::RenderStyle *v51;
  uint64_t v52;
  float v53;
  unsigned int v54;
  int v55;
  uint64_t (**v56)();
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v61;
  int v62;
  int v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;
  unint64_t v75;
  unint64_t v77;
  const WebCore::ShadowData *v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int *v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  WTF *v100;
  void *v101;
  WTF *v102;
  void *v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  const WebCore::RenderText *v111;
  _BOOL4 v112;
  float v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  float v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  float v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  unsigned int *v132;
  unsigned int v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 v143;
  unsigned int *v144;
  unsigned int v145;
  BOOL v146;
  void *v147;
  const WebCore::RenderStyle *v148;
  void *v149;
  WebCore *v150;
  int v151;
  unsigned int v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  float v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int *v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  unsigned int *v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int *v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int *v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int *v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int *v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int v201;
  _BOOL4 v202;
  _BOOL4 v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int v206;
  _BOOL4 v207;
  _BOOL4 v208;
  _BOOL4 v209;
  unsigned int *v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int v216;
  _BOOL4 v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  _BOOL4 v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int *v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int *v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int *v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  WebCore::ShadowData *v269;
  const WebCore::RenderStyle *v270;
  unsigned int v272[4];
  _BYTE v273[24];
  unsigned int v274;
  __int16 v275;
  unsigned int *v276;
  char v277;
  uint64_t v278;
  __int128 v279;
  uint64_t v280;
  __int128 v281;
  uint64_t *v282;
  uint64_t *v283;
  uint64_t v284[2];

  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 11) = 1082130432;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  v9 = (WebCore::StyledMarkedText *)((char *)this + 104);
  *((_BYTE *)this + 168) = 0;
  *((_DWORD *)this + 44) = 1065353216;
  v10 = *((unsigned int *)a3 + 10);
  v11 = (v10 >> 15) & 0xF;
  v12 = *((_DWORD *)a5 + 5);
  *(_QWORD *)v272 = 0;
  LOBYTE(v272[2]) = 0;
  *(_QWORD *)v273 = 0;
  v273[8] = 0;
  *(_QWORD *)&v273[16] = 0;
  LOBYTE(v274) = 0;
  LOBYTE(v275) = 0;
  if ((_DWORD)v11)
  {
    WebCore::collectStylesForRenderer((int *)v272, (uint64_t)a2, (v10 >> 15) & 0xF, 0, v12);
    if (a4)
      WebCore::collectStylesForRenderer((int *)v272, (uint64_t)a2, v11, 1, v12);
    v111 = a2;
    if ((*((_BYTE *)a2 + 45) & 2) != 0)
      v111 = *(const WebCore::RenderText **)(*((_QWORD *)a2 + 4) + 8);
    LOBYTE(v275) = (*(_DWORD *)(*((_QWORD *)v111 + 13) + 232) >> 28) & 3;
    v13 = *((_QWORD *)this + 6);
    v14 = *(_QWORD *)v272;
    v15 = (*(_QWORD *)v272 & 0x8000000000000) == 0;
    if ((v13 & 0x8000000000000) != 0)
    {
      if ((*(_QWORD *)v272 & 0x8000000000000) != 0)
      {
        v281 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
        v279 = *(_OWORD *)((*(_QWORD *)v272 & 0xFFFFFFFFFFFFLL) + 4);
        v112 = WebCore::operator==<float,4ul>((float *)&v281, (float *)&v279);
        v13 = *((_QWORD *)this + 6);
        if (v112 && HIBYTE(v13) == HIBYTE(v272[1]) && BYTE6(v13) == BYTE2(v272[1]))
          goto LABEL_7;
      }
      goto LABEL_5;
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 1;
  }
  if (v13 == v14 && v15)
    goto LABEL_7;
LABEL_5:
  if ((v13 & 0x8000000000000) != 0)
  {
    v166 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v167 = __ldaxr(v166);
      v168 = v167 - 1;
    }
    while (__stlxr(v168, v166));
    if (!v168)
    {
      atomic_store(1u, v166);
      WTF::fastFree((WTF *)v166, a2);
    }
  }
  *((_QWORD *)this + 6) = *(_QWORD *)v272;
  *(_QWORD *)v272 = 0;
LABEL_7:
  *((_BYTE *)this + 56) = v272[2];
  v16 = *((_QWORD *)this + 8);
  if ((v16 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)v273 & 0x8000000000000) != 0)
    {
      v281 = *(_OWORD *)((v16 & 0xFFFFFFFFFFFFLL) + 4);
      v279 = *(_OWORD *)((*(_QWORD *)v273 & 0xFFFFFFFFFFFFLL) + 4);
      v202 = WebCore::operator==<float,4ul>((float *)&v281, (float *)&v279);
      v16 = *((_QWORD *)this + 8);
      if (v202 && HIBYTE(v16) == v273[7] && BYTE6(v16) == v273[6])
        goto LABEL_14;
    }
  }
  else
  {
    v17 = v16 == *(_QWORD *)v273 && (*(_QWORD *)v273 & 0x8000000000000) == 0;
    if (v17)
      goto LABEL_14;
  }
  if ((v16 & 0x8000000000000) != 0)
  {
    v160 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v161 = __ldaxr(v160);
      v162 = v161 - 1;
    }
    while (__stlxr(v162, v160));
    if (!v162)
    {
      atomic_store(1u, v160);
      WTF::fastFree((WTF *)v160, a2);
    }
  }
  *((_QWORD *)this + 8) = *(_QWORD *)v273;
  *(_QWORD *)v273 = 0;
LABEL_14:
  *((_BYTE *)this + 72) = v273[8];
  v18 = *((_QWORD *)this + 10);
  if ((v18 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)&v273[16] & 0x8000000000000) == 0
      || (v281 = *(_OWORD *)((v18 & 0xFFFFFFFFFFFFLL) + 4),
          v279 = *(_OWORD *)((*(_QWORD *)&v273[16] & 0xFFFFFFFFFFFFLL) + 4),
          v203 = WebCore::operator==<float,4ul>((float *)&v281, (float *)&v279),
          v18 = *((_QWORD *)this + 10),
          !v203)
      || HIBYTE(v18) != HIBYTE(*(_QWORD *)&v273[16])
      || BYTE6(v18) != v273[22])
    {
LABEL_19:
      if ((v18 & 0x8000000000000) != 0)
      {
        v163 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
        do
        {
          v164 = __ldaxr(v163);
          v165 = v164 - 1;
        }
        while (__stlxr(v165, v163));
        if (!v165)
        {
          atomic_store(1u, v163);
          WTF::fastFree((WTF *)v163, a2);
        }
      }
      *((_QWORD *)this + 10) = *(_QWORD *)&v273[16];
      *(_QWORD *)&v273[16] = 0;
      *((_BYTE *)this + 88) = v274;
      *((_BYTE *)this + 96) = v275;
      goto LABEL_21;
    }
    v18 = *(_QWORD *)&v273[16];
  }
  else if (v18 != *(_QWORD *)&v273[16] || (*(_QWORD *)&v273[16] & 0x8000000000000) != 0)
  {
    goto LABEL_19;
  }
  *((_BYTE *)this + 88) = v274;
  *((_BYTE *)this + 96) = v275;
  if ((v18 & 0x8000000000000) != 0)
  {
    v204 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v205 = __ldaxr(v204);
      v206 = v205 - 1;
    }
    while (__stlxr(v206, v204));
    if (!v206)
    {
      atomic_store(1u, v204);
      WTF::fastFree((WTF *)v204, a2);
    }
  }
LABEL_21:
  if ((*(_QWORD *)v273 & 0x8000000000000) != 0)
  {
    v187 = (unsigned int *)(*(_QWORD *)v273 & 0xFFFFFFFFFFFFLL);
    do
    {
      v188 = __ldaxr(v187);
      v189 = v188 - 1;
    }
    while (__stlxr(v189, v187));
    if (!v189)
    {
      atomic_store(1u, v187);
      WTF::fastFree((WTF *)v187, a2);
    }
  }
  if ((*(_QWORD *)v272 & 0x8000000000000) != 0)
  {
    v190 = (unsigned int *)(*(_QWORD *)v272 & 0xFFFFFFFFFFFFLL);
    do
    {
      v191 = __ldaxr(v190);
      v192 = v191 - 1;
    }
    while (__stlxr(v192, v190));
    if (!v192)
    {
      atomic_store(1u, v190);
      WTF::fastFree((WTF *)v190, a2);
    }
  }
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 528);
  if (v20)
    v21 = *(const WebCore::RenderStyle **)(v20 + 8);
  else
    v21 = 0;
  *(_OWORD *)v272 = 0u;
  memset(v273, 0, 17);
  *(_DWORD *)&v273[20] = 1082130432;
  v22 = *((_QWORD *)v21 + 37);
  v270 = a3;
  if (!v22)
  {
    LOBYTE(v125) = 0;
    v44 = a5;
    goto LABEL_68;
  }
  v23 = *((_QWORD *)a3 + 3);
  v24 = *(unsigned __int8 *)(v23 + 302);
  if (!*(_BYTE *)(v23 + 302))
    v24 = *(unsigned __int8 *)(v22 + 3372);
  if ((v24 & 2) != 0 && (v24 & 1) == 0)
  {
    LOBYTE(v125) = 1;
    v44 = a5;
    goto LABEL_68;
  }
  v25 = *(_QWORD *)(v22 + 528);
  if (!v25)
  {
    v125 = 0;
    goto LABEL_215;
  }
  v26 = *(_QWORD *)(v25 + 8);
  if (!v26 || (v27 = *(_QWORD *)(v26 + 24)) == 0)
  {
    v125 = 0;
    goto LABEL_61;
  }
  v269 = v9;
  v28 = *(_QWORD *)(v27 + 8);
  if (!v28)
  {
    v125 = 0;
    goto LABEL_61;
  }
  ++*(_DWORD *)v28;
  v29 = *(_QWORD *)(v28 + 160);
  if (v29)
    v30 = *(_BYTE *)(v29 + 144) == 0;
  else
    v30 = 0;
  if (v30)
  {
    v31 = (unsigned int *)(v29 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    v33 = *(_QWORD *)(v29 + 288);
    if (!v33)
    {
      v125 = 0;
      v9 = v269;
      do
      {
LABEL_57:
        v40 = __ldaxr(v31);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v31));
      if (!v41)
      {
        atomic_store(1u, v31);
        v126 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v126 = off_1E31FE290;
        v126[1] = v31;
        *(_QWORD *)&v281 = v126;
        WTF::ensureOnMainThread();
        v127 = v281;
        *(_QWORD *)&v281 = 0;
        if (v127)
          (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
      }
      goto LABEL_59;
    }
    ++*(_DWORD *)(v33 + 8);
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v33 + 328) + 280) + 16)
                                                   + 896))(&v281);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v128 = *(_QWORD *)(*(_QWORD *)(v33 + 328) + 24);
      if (v128)
      {
        v129 = *(_QWORD *)(v128 + 8);
        if (v129)
        {
          v130 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v129 + 80) + 8) + 200);
          if (v130)
          {
            v36 = *(WTF::StringImpl **)(v130 + 136);
            if (v36)
            {
              if (*((_DWORD *)v36 + 1))
              {
                v5 = v21;
                *(_DWORD *)v36 += 2;
                v131 = (WTF::StringImpl *)v281;
                *(_QWORD *)&v281 = v36;
                if (!v131)
                  goto LABEL_45;
                if (*(_DWORD *)v131 == 2)
                  WTF::StringImpl::destroy(v131, v34);
                else
                  *(_DWORD *)v131 -= 2;
              }
            }
          }
        }
      }
    }
    v36 = (WTF::StringImpl *)v281;
    if ((_QWORD)v281)
    {
      v5 = v21;
    }
    else
    {
      v36 = *(WTF::StringImpl **)(v33 + 1040);
      if (!v36)
      {
        if (WebCore::screenAtomData)
        {
LABEL_305:
          v125 = 0;
          v9 = v269;
          goto LABEL_55;
        }
LABEL_49:
        if (*(_BYTE *)(v28 + 454))
        {
          v125 = *(_BYTE *)(v28 + 453) != 0;
          v9 = v269;
        }
        else
        {
          v38 = *(_QWORD *)(*(_QWORD *)(v29 + 280) + 88);
          v9 = v269;
          if (v38)
          {
            v39 = *(_DWORD *)(v38 + 24);
            *(_DWORD *)(v38 + 24) = v39 + 1;
            if (*(_BYTE *)(v38 + 3529))
            {
              v125 = *(unsigned __int8 *)(v38 + 3529) == 2;
              if (v39)
                *(_DWORD *)(v38 + 24) = v39;
              else
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
              v9 = v269;
              goto LABEL_55;
            }
            if (v39)
              *(_DWORD *)(v38 + 24) = v39;
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v38 + 24))(v38);
          }
          v125 = *(_BYTE *)(v28 + 452) != 0;
        }
LABEL_55:
        if (*(_DWORD *)(v33 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        else
          --*(_DWORD *)(v33 + 8);
        goto LABEL_57;
      }
      v5 = v21;
      *(_DWORD *)v36 += 2;
    }
LABEL_45:
    v37 = WebCore::screenAtomData;
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v34);
    else
      *(_DWORD *)v36 -= 2;
    v17 = v36 == (WTF::StringImpl *)v37;
    v21 = v5;
    if (!v17)
      goto LABEL_305;
    goto LABEL_49;
  }
  v125 = 0;
  v9 = v269;
LABEL_59:
  if (*(_DWORD *)v28 == 1)
  {
    WebCore::Page::~Page(v28);
    WTF::fastFree(v100, v101);
  }
  else
  {
    --*(_DWORD *)v28;
  }
LABEL_61:
  v42 = *(_QWORD *)(v22 + 528);
  if (!v42)
  {
LABEL_215:
    v44 = a5;
    goto LABEL_67;
  }
  v43 = *(_QWORD *)(v42 + 8);
  v44 = a5;
  if (!v43)
    goto LABEL_67;
  v45 = *(_QWORD *)(v43 + 24);
  if (!v45)
    goto LABEL_67;
  v46 = *(_QWORD *)(v45 + 8);
  if (!v46)
    goto LABEL_67;
  v47 = (*(_DWORD *)v46)++;
  v48 = *(unsigned __int8 *)(v46 + 450);
  if (v47)
  {
    *(_DWORD *)v46 = v47;
    if (v48)
      goto LABEL_68;
    goto LABEL_67;
  }
  WebCore::Page::~Page(v46);
  WTF::fastFree(v102, v103);
  if (!v48)
LABEL_67:
    v125 &= v24 >> 1;
LABEL_68:
  v273[13] = v125;
  v49 = (WebCore::Widget *)*((_QWORD *)v21 + 36);
  if (v49)
    WebCore::Widget::frameRect(v49);
  else
    v50 = 0;
  v51 = v270;
  v52 = *((_QWORD *)v270 + 3);
  if ((*(_BYTE *)(v52 + 238) & 8) != 0)
  {
    v150 = (WebCore *)(v52 + 244);
    v151 = *(unsigned __int8 *)(v52 + 248);
    if (v151 == 11 || v151 == 4)
    {
      v53 = WebCore::floatValueForLength(v150, v50, (float)(int)v50);
      v52 = *((_QWORD *)v270 + 3);
    }
    else
    {
      v53 = 0.0;
      if (v151 == 3)
      {
        if (*(_BYTE *)(v52 + 250))
          v159 = *(float *)v150;
        else
          v159 = (float)*(int *)v150;
        v53 = (float)(v159 * (float)(HIDWORD(v50) + (int)v50)) / 200.0;
      }
    }
    v44 = a5;
  }
  else
  {
    v53 = *(float *)(v52 + 4);
  }
  *(float *)&v273[8] = v53;
  v54 = *(_DWORD *)(v52 + 236);
  v273[14] = (v54 >> 11) & 7;
  v273[15] = BYTE2(v54) & 3;
  v273[16] = (unsigned __int16)v54 >> 14;
  *(_DWORD *)&v273[20] = *(_DWORD *)(v52 + 208);
  v55 = *((_DWORD *)v44 + 5);
  if ((v55 & 0xC) == 0)
  {
    if ((*((_BYTE *)v270 + 45) & 0x10) != 0)
    {
      v141 = *((_QWORD *)v21 + 3);
      if (v141)
      {
        v142 = *(_QWORD *)(v141 + 8);
        if (v142)
        {
          if ((*(_WORD *)(*(_QWORD *)(v142 + 72) + 26) & 1) != 0)
          {
            v143 = 2 * *(_BYTE *)(v142 + 450);
            {
              v243 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
              *(_OWORD *)(v243 + 40) = 0u;
              *(_OWORD *)(v243 + 24) = 0u;
              *(_QWORD *)v243 = &off_1E335BC30;
            }
            WebCore::RenderTheme::defaultButtonTextColor((uint64_t)&WebCore::RenderTheme::singleton(void)::theme, v143, &v281);
            WebCore::Color::operator=((unint64_t *)v272, &v281);
            if ((v281 & 0x8000000000000) == 0)
              goto LABEL_373;
            v144 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFLL);
            do
            {
              v145 = __ldaxr(v144);
              v146 = --v145 == 0;
            }
            while (__stlxr(v145, v144));
LABEL_595:
            if (v146)
            {
              atomic_store(1u, v144);
              WTF::fastFree((WTF *)v144, v50);
            }
LABEL_373:
            v44 = a5;
            goto LABEL_129;
          }
        }
      }
    }
    v56 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix;
    if (*(_DWORD *)(*(_QWORD *)(v52 + 320) + 20))
    {
      WebCore::RenderStyle::visitedDependentColor((uint64_t)v270, 342, *((_DWORD *)v44 + 5), (uint64_t *)&v281);
      WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)v270, (const WebCore::Color *)&v281, (unint64_t *)v284);
      if ((v281 & 0x8000000000000) != 0)
      {
        v263 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFLL);
        do
        {
          v264 = __ldaxr(v263);
          v265 = v264 - 1;
        }
        while (__stlxr(v265, v263));
        if (!v265)
        {
          atomic_store(1u, v263);
          WTF::fastFree((WTF *)v263, v58);
        }
      }
      v44 = a5;
LABEL_83:
      v59 = *(_QWORD *)v272;
      if ((*(_QWORD *)v272 & 0x8000000000000) == 0)
      {
        if (*(_QWORD *)v272 != v284[0] || (v284[0] & 0x8000000000000) != 0)
          goto LABEL_88;
LABEL_517:
        if ((v59 & 0x8000000000000) != 0)
        {
          v214 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
          do
          {
            v215 = __ldaxr(v214);
            v216 = v215 - 1;
          }
          while (__stlxr(v216, v214));
          v44 = a5;
          if (!v216)
          {
            atomic_store(1u, v214);
            WTF::fastFree((WTF *)v214, v58);
          }
        }
LABEL_90:
        v61 = *((_QWORD *)v21 + 37);
        if (!v61 || !*(_BYTE *)(v61 + 3382))
        {
          v62 = 0;
          goto LABEL_93;
        }
        v5 = v270;
        v148 = v21;
        v62 = 0;
        if ((*(_QWORD *)(*((_QWORD *)v148 + 17) + 696) & 0x400000) == 0)
        {
          v44 = a5;
          if ((*((_DWORD *)v270 + 11) & 0x20) != 0)
            goto LABEL_93;
          *(_QWORD *)&v279 = 0x11040000FFFFFFFFLL;
          WebCore::adjustColorForVisibilityOnBackground((WebCore *)&v281, (const WebCore::Color *)v272, (const WebCore::Color *)&v279);
          WebCore::Color::operator=((unint64_t *)v272, &v281);
          if ((v281 & 0x8000000000000) != 0)
          {
            v250 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFLL);
            do
            {
              v251 = __ldaxr(v250);
              v252 = v251 - 1;
            }
            while (__stlxr(v252, v250));
            if (!v252)
            {
              atomic_store(1u, v250);
              WTF::fastFree((WTF *)v250, v149);
            }
          }
          if ((v279 & 0x8000000000000) != 0)
          {
            v253 = (unsigned int *)(v279 & 0xFFFFFFFFFFFFLL);
            do
            {
              v254 = __ldaxr(v253);
              v255 = v254 - 1;
            }
            while (__stlxr(v255, v253));
            if (!v255)
            {
              atomic_store(1u, v253);
              WTF::fastFree((WTF *)v253, v149);
            }
          }
          v62 = 1;
        }
        v44 = a5;
LABEL_93:
        if ((*(_DWORD *)(*((_QWORD *)v270 + 3) + 236) & 0x80000) != 0)
          v63 = 235;
        else
          v63 = 344;
        WebCore::RenderStyle::colorResolvingCurrentColor(v270, v63, 0, (WebCore::Color *)&v281);
        if ((*((_DWORD *)v270 + 11) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)v270 + 3) + 239) & 2) != 0)
        {
          v280 = v281;
        }
        else
        {
          WebCore::RenderStyle::colorResolvingCurrentColor(v270, v63, 1, (WebCore::Color *)&v279);
          if ((v281 & 0x8000000000000) != 0)
            v113 = *(float *)((v281 & 0xFFFFFFFFFFFFLL) + 0x10);
          else
            v113 = (float)v281 / 255.0;
          WebCore::Color::colorWithAlpha((uint64_t)&v279, v113, &v280);
          if ((v279 & 0x8000000000000) != 0)
          {
            v231 = (unsigned int *)(v279 & 0xFFFFFFFFFFFFLL);
            do
            {
              v232 = __ldaxr(v231);
              v233 = v232 - 1;
            }
            while (__stlxr(v233, v231));
            v44 = a5;
            if (!v233)
            {
              atomic_store(1u, v231);
              WTF::fastFree((WTF *)v231, v64);
            }
          }
          if ((v281 & 0x8000000000000) != 0)
          {
            v114 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFLL);
            do
            {
              v115 = __ldaxr(v114);
              v116 = v115 - 1;
            }
            while (__stlxr(v116, v114));
            v44 = a5;
            if (!v116)
            {
              atomic_store(1u, v114);
              WTF::fastFree((WTF *)v114, v64);
            }
          }
        }
        v65 = v280;
        v284[0] = v280;
        if ((v280 & 0x8000000000000) != 0)
        {
          v132 = (unsigned int *)(v280 & 0xFFFFFFFFFFFFLL);
          do
            v133 = __ldaxr(v132);
          while (__stlxr(v133 + 1, v132));
          v65 = v284[0];
        }
        v66 = *(_QWORD *)(*((_QWORD *)v270 + 3) + 320);
        if (*(_DWORD *)(v66 + 20))
          v67 = (v65 & 0x5000000000000) == 0x4000000000000;
        else
          v67 = 0;
        if (v67)
        {
          v5 = v9;
          LODWORD(v281) = WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>((unint64_t *)v284);
          *(_QWORD *)((char *)&v281 + 4) = __PAIR64__(v154, v153);
          HIDWORD(v281) = v155;
          v156 = *(unsigned int *)(v66 + 20);
          if ((_DWORD)v156)
          {
            v157 = *(_QWORD **)(v66 + 8);
            v158 = 8 * v156;
            while (((*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*v157 + 40))(*v157, &v281) & 1) != 0)
            {
              ++v157;
              v158 -= 8;
              if (!v158)
                goto LABEL_393;
            }
          }
          else
          {
LABEL_393:
            *(_QWORD *)&v279 = bswap32(WebCore::convertColor<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>((float *)&v281)) | 0x1104000000000000;
            WebCore::Color::operator=((unint64_t *)v284, &v279);
            if ((v279 & 0x8000000000000) != 0)
            {
              v260 = (unsigned int *)(v279 & 0xFFFFFFFFFFFFLL);
              do
              {
                v261 = __ldaxr(v260);
                v262 = v261 - 1;
              }
              while (__stlxr(v262, v260));
              if (!v262)
              {
                atomic_store(1u, v260);
                WTF::fastFree((WTF *)v260, v64);
              }
            }
          }
          v65 = v284[0];
          v9 = v5;
          v44 = a5;
        }
        v68 = *(_QWORD *)&v272[2];
        if ((*(_QWORD *)&v272[2] & 0x8000000000000) == 0)
        {
          if (*(_QWORD *)&v272[2] != v65 || (v65 & 0x8000000000000) != 0)
            goto LABEL_108;
LABEL_526:
          if ((v65 & 0x8000000000000) != 0)
          {
            v218 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFLL);
            do
            {
              v219 = __ldaxr(v218);
              v220 = v219 - 1;
            }
            while (__stlxr(v220, v218));
            v44 = a5;
            if (!v220)
            {
              atomic_store(1u, v218);
              WTF::fastFree((WTF *)v218, v64);
            }
          }
LABEL_110:
          if ((v280 & 0x8000000000000) != 0)
          {
            v199 = (unsigned int *)(v280 & 0xFFFFFFFFFFFFLL);
            do
            {
              v200 = __ldaxr(v199);
              v201 = v200 - 1;
            }
            while (__stlxr(v201, v199));
            v44 = a5;
            if (!v201)
            {
              atomic_store(1u, v199);
              WTF::fastFree((WTF *)v199, v64);
            }
          }
          if (v62)
          {
            *(_QWORD *)&v279 = 0x11040000FFFFFFFFLL;
            WebCore::adjustColorForVisibilityOnBackground((WebCore *)&v281, (const WebCore::Color *)&v272[2], (const WebCore::Color *)&v279);
            WebCore::Color::operator=((unint64_t *)&v272[2], &v281);
            if ((v281 & 0x8000000000000) != 0)
            {
              v244 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFLL);
              do
              {
                v245 = __ldaxr(v244);
                v246 = v245 - 1;
              }
              while (__stlxr(v246, v244));
              if (!v246)
              {
                atomic_store(1u, v244);
                WTF::fastFree((WTF *)v244, v147);
              }
            }
            if ((v279 & 0x8000000000000) != 0)
            {
              v247 = (unsigned int *)(v279 & 0xFFFFFFFFFFFFLL);
              do
              {
                v248 = __ldaxr(v247);
                v249 = v248 - 1;
              }
              while (__stlxr(v249, v247));
              if (!v249)
              {
                atomic_store(1u, v247);
                WTF::fastFree((WTF *)v247, v147);
              }
            }
            v44 = a5;
          }
          v70 = *((_QWORD *)v270 + 3);
          if (*(_DWORD *)(*(_QWORD *)(v70 + 320) + 20))
          {
            WebCore::RenderStyle::visitedDependentColor((uint64_t)v270, 259, 0, (uint64_t *)&v281);
            WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)v270, (const WebCore::Color *)&v281, (unint64_t *)v284);
            if ((v281 & 0x8000000000000) != 0)
            {
              v266 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFLL);
              do
              {
                v267 = __ldaxr(v266);
                v268 = v267 - 1;
              }
              while (__stlxr(v268, v266));
              if (!v268)
              {
                atomic_store(1u, v266);
                WTF::fastFree((WTF *)v266, v50);
              }
            }
            v44 = a5;
LABEL_121:
            v72 = *(_QWORD *)v273;
            if ((*(_QWORD *)v273 & 0x8000000000000) == 0)
            {
              if (*(_QWORD *)v273 != v284[0] || (v284[0] & 0x8000000000000) != 0)
                goto LABEL_126;
LABEL_536:
              if ((v72 & 0x8000000000000) != 0)
              {
                v222 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v223 = __ldaxr(v222);
                  v224 = v223 - 1;
                }
                while (__stlxr(v224, v222));
                v44 = a5;
                if (!v224)
                {
                  atomic_store(1u, v222);
                  WTF::fastFree((WTF *)v222, v50);
                }
              }
              goto LABEL_128;
            }
            if ((v284[0] & 0x8000000000000) != 0)
            {
              v281 = *(_OWORD *)((*(_QWORD *)v273 & 0xFFFFFFFFFFFFLL) + 4);
              v279 = *(_OWORD *)((v284[0] & 0xFFFFFFFFFFFFLL) + 4);
              v221 = WebCore::operator==<float,4ul>((float *)&v281, (float *)&v279);
              v72 = *(_QWORD *)v273;
              if (v221 && v273[7] == HIBYTE(v284[0]))
              {
                v44 = a5;
                if (v273[6] == BYTE6(v284[0]))
                {
                  v72 = v284[0];
                  goto LABEL_536;
                }
              }
              else
              {
                v44 = a5;
              }
            }
LABEL_126:
            if ((v72 & 0x8000000000000) != 0)
            {
              v184 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFLL);
              do
              {
                v185 = __ldaxr(v184);
                v186 = v185 - 1;
              }
              while (__stlxr(v186, v184));
              v44 = a5;
              if (!v186)
              {
                atomic_store(1u, v184);
                WTF::fastFree((WTF *)v184, v50);
              }
            }
            *(_QWORD *)v273 = v284[0];
LABEL_128:
            if (!v62)
              goto LABEL_129;
            *(_QWORD *)&v279 = 0x11040000FFFFFFFFLL;
            WebCore::adjustColorForVisibilityOnBackground((WebCore *)&v281, (const WebCore::Color *)v273, (const WebCore::Color *)&v279);
            WebCore::Color::operator=((unint64_t *)v273, &v281);
            if ((v281 & 0x8000000000000) != 0)
            {
              v256 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFLL);
              do
              {
                v257 = __ldaxr(v256);
                v258 = v257 - 1;
              }
              while (__stlxr(v258, v256));
              if (!v258)
              {
                atomic_store(1u, v256);
                WTF::fastFree((WTF *)v256, v50);
              }
            }
            if ((v279 & 0x8000000000000) == 0)
              goto LABEL_373;
            v144 = (unsigned int *)(v279 & 0xFFFFFFFFFFFFLL);
            do
            {
              v259 = __ldaxr(v144);
              v146 = --v259 == 0;
            }
            while (__stlxr(v259, v144));
            goto LABEL_595;
          }
          *(_QWORD *)&v281 = &v280;
          *((_QWORD *)&v281 + 1) = &v280;
          v282 = &v280;
          v283 = &v280;
          v71 = *(unsigned int *)(v70 + 56);
          if ((_DWORD)v71 != -1)
          {
            v284[0] = (uint64_t)&v281;
            ((void (*)(__int128 *__return_ptr, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v71])(&v279, v284, v70 + 48);
            if (DWORD2(v279) == 1)
            {
              v97 = *(_QWORD *)(*((_QWORD *)v270 + 4) + 328);
              v278 = v97;
              if ((v97 & 0x8000000000000) != 0)
              {
                v98 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFLL);
                do
                  v99 = __ldaxr(v98);
                while (__stlxr(v99 + 1, v98));
              }
              goto LABEL_117;
            }
            v280 = *((_QWORD *)v270 + 4) + 328;
            *(_QWORD *)&v281 = &v280;
            *((_QWORD *)&v281 + 1) = &v280;
            v282 = &v280;
            v283 = &v280;
            if (DWORD2(v279) != -1)
            {
              v284[0] = (uint64_t)&v281;
              ((void (*)(uint64_t *__return_ptr, uint64_t *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[DWORD2(v279)])(&v278, v284, &v279);
LABEL_117:
              if (DWORD2(v279) != -1)
                ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[DWORD2(v279)])(&v281, &v279);
              if ((*((_DWORD *)v270 + 11) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)v270 + 3) + 239) & 2) != 0)
              {
                v284[0] = v278;
              }
              else
              {
                WebCore::RenderStyle::colorResolvingCurrentColor(v270, 259, 1, (WebCore::Color *)&v281);
                if ((v278 & 0x8000000000000) != 0)
                  v121 = *(float *)((v278 & 0xFFFFFFFFFFFFLL) + 0x10);
                else
                  v121 = (float)v278 / 255.0;
                WebCore::Color::colorWithAlpha((uint64_t)&v281, v121, v284);
                if ((v281 & 0x8000000000000) != 0)
                {
                  v225 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v226 = __ldaxr(v225);
                    v227 = v226 - 1;
                  }
                  while (__stlxr(v227, v225));
                  v44 = a5;
                  if (!v227)
                  {
                    atomic_store(1u, v225);
                    WTF::fastFree((WTF *)v225, v50);
                  }
                }
                if ((v278 & 0x8000000000000) != 0)
                {
                  v122 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v123 = __ldaxr(v122);
                    v124 = v123 - 1;
                  }
                  while (__stlxr(v124, v122));
                  v44 = a5;
                  if (!v124)
                  {
                    atomic_store(1u, v122);
                    WTF::fastFree((WTF *)v122, v50);
                  }
                }
              }
              goto LABEL_121;
            }
          }
          goto LABEL_350;
        }
        if ((v65 & 0x8000000000000) != 0)
        {
          v281 = *(_OWORD *)((*(_QWORD *)&v272[2] & 0xFFFFFFFFFFFFLL) + 4);
          v279 = *(_OWORD *)((v65 & 0xFFFFFFFFFFFFLL) + 4);
          v217 = WebCore::operator==<float,4ul>((float *)&v281, (float *)&v279);
          v68 = *(_QWORD *)&v272[2];
          if (v217 && (v65 = v284[0], HIBYTE(v272[3]) == HIBYTE(v284[0])))
          {
            v44 = a5;
            if (BYTE2(v272[3]) == BYTE6(v284[0]))
              goto LABEL_526;
          }
          else
          {
            v44 = a5;
          }
        }
LABEL_108:
        if ((v68 & 0x8000000000000) != 0)
        {
          v181 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
          do
          {
            v182 = __ldaxr(v181);
            v183 = v182 - 1;
          }
          while (__stlxr(v183, v181));
          v44 = a5;
          if (!v183)
          {
            atomic_store(1u, v181);
            WTF::fastFree((WTF *)v181, v64);
          }
        }
        *(_QWORD *)&v272[2] = v284[0];
        v284[0] = 0;
        goto LABEL_110;
      }
      if ((v284[0] & 0x8000000000000) != 0)
      {
        v281 = *(_OWORD *)((*(_QWORD *)v272 & 0xFFFFFFFFFFFFLL) + 4);
        v279 = *(_OWORD *)((v284[0] & 0xFFFFFFFFFFFFLL) + 4);
        v213 = WebCore::operator==<float,4ul>((float *)&v281, (float *)&v279);
        v59 = *(_QWORD *)v272;
        if (v213 && HIBYTE(v272[1]) == HIBYTE(v284[0]))
        {
          v44 = a5;
          if (BYTE2(v272[1]) == BYTE6(v284[0]))
          {
            v59 = v284[0];
            goto LABEL_517;
          }
        }
        else
        {
          v44 = a5;
        }
      }
LABEL_88:
      if ((v59 & 0x8000000000000) != 0)
      {
        v178 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
        do
        {
          v179 = __ldaxr(v178);
          v180 = v179 - 1;
        }
        while (__stlxr(v180, v178));
        v44 = a5;
        if (!v180)
        {
          atomic_store(1u, v178);
          WTF::fastFree((WTF *)v178, v58);
        }
      }
      *(_QWORD *)v272 = v284[0];
      goto LABEL_90;
    }
    *(_QWORD *)&v281 = &v280;
    *((_QWORD *)&v281 + 1) = &v280;
    v282 = &v280;
    v283 = &v280;
    v57 = *(unsigned int *)(v52 + 40);
    if ((_DWORD)v57 != -1)
    {
      v284[0] = (uint64_t)&v281;
      ((void (*)(__int128 *__return_ptr, uint64_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v57])(&v279, v284, v52 + 32);
      if (DWORD2(v279) == 1)
      {
        v94 = *(_QWORD *)(*((_QWORD *)v270 + 4) + 328);
        v278 = v94;
        if ((v94 & 0x8000000000000) != 0)
        {
          v95 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFLL);
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 + 1, v95));
        }
        goto LABEL_79;
      }
      v280 = *((_QWORD *)v270 + 4) + 328;
      *(_QWORD *)&v281 = &v280;
      *((_QWORD *)&v281 + 1) = &v280;
      v282 = &v280;
      v283 = &v280;
      if (DWORD2(v279) != -1)
      {
        v284[0] = (uint64_t)&v281;
        ((void (*)(uint64_t *__return_ptr, uint64_t *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[DWORD2(v279)])(&v278, v284, &v279);
LABEL_79:
        if (DWORD2(v279) != -1)
          ((void (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[DWORD2(v279)])(&v281, &v279);
        if ((*((_DWORD *)v270 + 11) & 0xC00) != 0x800
          || (v55 & 0x20000) != 0
          || (*(_BYTE *)(*((_QWORD *)v270 + 3) + 239) & 2) != 0)
        {
          v284[0] = v278;
        }
        else
        {
          WebCore::RenderStyle::colorResolvingCurrentColor(v270, 342, 1, (WebCore::Color *)&v281);
          if ((v278 & 0x8000000000000) != 0)
            v117 = *(float *)((v278 & 0xFFFFFFFFFFFFLL) + 0x10);
          else
            v117 = (float)v278 / 255.0;
          WebCore::Color::colorWithAlpha((uint64_t)&v281, v117, v284);
          if ((v281 & 0x8000000000000) != 0)
          {
            v228 = (unsigned int *)(v281 & 0xFFFFFFFFFFFFLL);
            do
            {
              v229 = __ldaxr(v228);
              v230 = v229 - 1;
            }
            while (__stlxr(v230, v228));
            v44 = a5;
            if (!v230)
            {
              atomic_store(1u, v228);
              WTF::fastFree((WTF *)v228, v58);
            }
          }
          if ((v278 & 0x8000000000000) != 0)
          {
            v118 = (unsigned int *)(v278 & 0xFFFFFFFFFFFFLL);
            do
            {
              v119 = __ldaxr(v118);
              v120 = v119 - 1;
            }
            while (__stlxr(v120, v118));
            v44 = a5;
            if (!v120)
            {
              atomic_store(1u, v118);
              WTF::fastFree((WTF *)v118, v58);
            }
          }
        }
        goto LABEL_83;
      }
    }
LABEL_350:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_351;
  }
  v56 = (uint64_t (**)())v270;
  v5 = v9;
  v134 = *((_DWORD *)v44 + 5) & 4;
  if ((v55 & 4) != 0)
    v135 = -16777216;
  else
    v135 = -1;
  v136 = bswap32(v135) | 0x1104000000000000;
  if (*(_QWORD *)v272 != v136 || (*(_QWORD *)v272 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)v272 & 0x8000000000000) != 0)
    {
      v234 = (unsigned int *)(*(_QWORD *)v272 & 0xFFFFFFFFFFFFLL);
      do
      {
        v235 = __ldaxr(v234);
        v236 = v235 - 1;
      }
      while (__stlxr(v236, v234));
      if (!v236)
      {
        atomic_store(1u, v234);
        WTF::fastFree((WTF *)v234, v50);
      }
    }
    *(_QWORD *)v272 = v136;
    v44 = a5;
    v134 = *((_DWORD *)a5 + 5) & 4;
    goto LABEL_336;
  }
LABEL_351:
  v44 = a5;
LABEL_336:
  if (v134)
    v137 = -16777216;
  else
    v137 = -1;
  v138 = bswap32(v137) | 0x1104000000000000;
  if ((*(_QWORD *)&v272[2] & 0x8000000000000) != 0 || *(_QWORD *)&v272[2] != v138)
  {
    if ((*(_QWORD *)&v272[2] & 0x8000000000000) != 0)
    {
      v237 = (unsigned int *)(*(_QWORD *)&v272[2] & 0xFFFFFFFFFFFFLL);
      do
      {
        v238 = __ldaxr(v237);
        v239 = v238 - 1;
      }
      while (__stlxr(v239, v237));
      v44 = a5;
      if (!v239)
      {
        atomic_store(1u, v237);
        WTF::fastFree((WTF *)v237, v50);
      }
    }
    *(_QWORD *)&v272[2] = v138;
    v134 = *((_DWORD *)v44 + 5) & 4;
  }
  if (v134)
    v139 = -16777216;
  else
    v139 = -1;
  v140 = bswap32(v139) | 0x1104000000000000;
  v9 = v5;
  v51 = (const WebCore::RenderStyle *)v56;
  if ((*(_QWORD *)v273 & 0x8000000000000) != 0 || *(_QWORD *)v273 != v140)
  {
    if ((*(_QWORD *)v273 & 0x8000000000000) != 0)
    {
      v240 = (unsigned int *)(*(_QWORD *)v273 & 0xFFFFFFFFFFFFLL);
      do
      {
        v241 = __ldaxr(v240);
        v242 = v241 - 1;
      }
      while (__stlxr(v242, v240));
      v9 = v5;
      v51 = (const WebCore::RenderStyle *)v56;
      v44 = a5;
      if (!v242)
      {
        atomic_store(1u, v240);
        WTF::fastFree((WTF *)v240, v50);
      }
    }
    *(_QWORD *)v273 = v140;
  }
LABEL_129:
  v74 = *((_QWORD *)this + 1);
  if ((v74 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)v272 & 0x8000000000000) != 0)
    {
      v281 = *(_OWORD *)((v74 & 0xFFFFFFFFFFFFLL) + 4);
      v279 = *(_OWORD *)((*(_QWORD *)v272 & 0xFFFFFFFFFFFFLL) + 4);
      v207 = WebCore::operator==<float,4ul>((float *)&v281, (float *)&v279);
      v74 = *((_QWORD *)this + 1);
      if (v207 && HIBYTE(v74) == HIBYTE(v272[1]))
      {
        v44 = a5;
        if (BYTE6(v74) == BYTE2(v272[1]))
          goto LABEL_134;
      }
      else
      {
        v44 = a5;
      }
    }
  }
  else if (v74 == *(_QWORD *)v272 && (*(_QWORD *)v272 & 0x8000000000000) == 0)
  {
    goto LABEL_134;
  }
  if ((v74 & 0x8000000000000) != 0)
  {
    v169 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFLL);
    do
    {
      v170 = __ldaxr(v169);
      v171 = v170 - 1;
    }
    while (__stlxr(v171, v169));
    v44 = a5;
    if (!v171)
    {
      atomic_store(1u, v169);
      WTF::fastFree((WTF *)v169, v50);
    }
  }
  *((_QWORD *)this + 1) = *(_QWORD *)v272;
  *(_QWORD *)v272 = 0;
LABEL_134:
  v75 = *((_QWORD *)this + 2);
  if ((v75 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)&v272[2] & 0x8000000000000) != 0)
    {
      v281 = *(_OWORD *)((v75 & 0xFFFFFFFFFFFFLL) + 4);
      v279 = *(_OWORD *)((*(_QWORD *)&v272[2] & 0xFFFFFFFFFFFFLL) + 4);
      v208 = WebCore::operator==<float,4ul>((float *)&v281, (float *)&v279);
      v75 = *((_QWORD *)this + 2);
      if (v208 && HIBYTE(v75) == HIBYTE(v272[3]))
      {
        v44 = a5;
        if (BYTE6(v75) == BYTE2(v272[3]))
          goto LABEL_141;
      }
      else
      {
        v44 = a5;
      }
    }
  }
  else if (v75 == *(_QWORD *)&v272[2] && (*(_QWORD *)&v272[2] & 0x8000000000000) == 0)
  {
    goto LABEL_141;
  }
  if ((v75 & 0x8000000000000) != 0)
  {
    v172 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL);
    do
    {
      v173 = __ldaxr(v172);
      v174 = v173 - 1;
    }
    while (__stlxr(v174, v172));
    v44 = a5;
    if (!v174)
    {
      atomic_store(1u, v172);
      WTF::fastFree((WTF *)v172, v50);
    }
  }
  *((_QWORD *)this + 2) = *(_QWORD *)&v272[2];
  *(_QWORD *)&v272[2] = 0;
LABEL_141:
  v77 = *((_QWORD *)this + 3);
  if ((v77 & 0x8000000000000) != 0)
  {
    if ((*(_QWORD *)v273 & 0x8000000000000) != 0)
    {
      v281 = *(_OWORD *)((v77 & 0xFFFFFFFFFFFFLL) + 4);
      v279 = *(_OWORD *)((*(_QWORD *)v273 & 0xFFFFFFFFFFFFLL) + 4);
      v209 = WebCore::operator==<float,4ul>((float *)&v281, (float *)&v279);
      v77 = *((_QWORD *)this + 3);
      if (v209 && HIBYTE(v77) == v273[7])
      {
        v44 = a5;
        if (BYTE6(v77) == v273[6])
        {
          v77 = *(_QWORD *)v273;
          goto LABEL_507;
        }
      }
      else
      {
        v44 = a5;
      }
    }
LABEL_146:
    if ((v77 & 0x8000000000000) != 0)
    {
      v175 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
      do
      {
        v176 = __ldaxr(v175);
        v177 = v176 - 1;
      }
      while (__stlxr(v177, v175));
      v44 = a5;
      if (!v177)
      {
        atomic_store(1u, v175);
        WTF::fastFree((WTF *)v175, v50);
      }
    }
    *((_QWORD *)this + 3) = *(_QWORD *)v273;
    *(_QWORD *)v273 = 0;
    *((_OWORD *)this + 2) = *(_OWORD *)&v273[8];
    goto LABEL_148;
  }
  if (v77 != *(_QWORD *)v273 || (*(_QWORD *)v273 & 0x8000000000000) != 0)
    goto LABEL_146;
LABEL_507:
  *((_OWORD *)this + 2) = *(_OWORD *)&v273[8];
  if ((v77 & 0x8000000000000) != 0)
  {
    v210 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
    do
    {
      v211 = __ldaxr(v210);
      v212 = v211 - 1;
    }
    while (__stlxr(v212, v210));
    v44 = a5;
    if (!v212)
    {
      atomic_store(1u, v210);
      WTF::fastFree((WTF *)v210, v50);
    }
  }
LABEL_148:
  if ((*(_QWORD *)&v272[2] & 0x8000000000000) != 0)
  {
    v193 = (unsigned int *)(*(_QWORD *)&v272[2] & 0xFFFFFFFFFFFFLL);
    do
    {
      v194 = __ldaxr(v193);
      v195 = v194 - 1;
    }
    while (__stlxr(v195, v193));
    v44 = a5;
    if (!v195)
    {
      atomic_store(1u, v193);
      WTF::fastFree((WTF *)v193, v50);
    }
  }
  if ((*(_QWORD *)v272 & 0x8000000000000) != 0)
  {
    v196 = (unsigned int *)(*(_QWORD *)v272 & 0xFFFFFFFFFFFFLL);
    do
    {
      v197 = __ldaxr(v196);
      v198 = v197 - 1;
    }
    while (__stlxr(v198, v196));
    v44 = a5;
    if (!v198)
    {
      atomic_store(1u, v196);
      WTF::fastFree((WTF *)v196, v50);
    }
  }
  if ((*((_BYTE *)v44 + 20) & 0xC) == 0 && (v79 = *(const WebCore::ShadowData **)(*((_QWORD *)v51 + 3) + 160)) != 0)
  {
    WebCore::ShadowData::ShadowData((WebCore::ShadowData *)v272, v79);
    v80 = 1;
  }
  else
  {
    v80 = 0;
    LOBYTE(v272[0]) = 0;
  }
  v277 = v80;
  if (*((unsigned __int8 *)this + 168) != v80)
  {
    if (*((_BYTE *)this + 168))
    {
      v91 = *((_QWORD *)this + 20);
      if (v91)
      {
        *((_QWORD *)this + 20) = 0;
        do
        {
          v109 = *(_QWORD *)(v91 + 56);
          *(_QWORD *)(v91 + 56) = 0;
          *(_QWORD *)&v281 = v109;
          std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)&v281, (unsigned int *)v91);
          v91 = v281;
        }
        while ((_QWORD)v281);
      }
      std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)this + 20, 0);
      v92 = *((unsigned int *)this + 36);
      if ((_DWORD)v92 != -1)
        ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v92])(&v281, (char *)this + 136);
      *((_DWORD *)this + 36) = -1;
      if (*((_BYTE *)this + 132) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 32));
      }
      if (*((_BYTE *)this + 124) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 30));
      }
      if (*((_BYTE *)this + 116) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 28));
      }
      if (*((_BYTE *)this + 108) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v9);
      }
      *((_BYTE *)this + 168) = 0;
    }
    else
    {
      WebCore::ShadowData::ShadowData(v9, (const WebCore::ShadowData *)v272);
      *((_BYTE *)this + 168) = 1;
    }
    goto LABEL_186;
  }
  if (!*((_BYTE *)this + 168))
    return;
  if (v9 != (WebCore::ShadowData *)v272)
  {
    if (*((_BYTE *)this + 108) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v9);
    }
    v81 = LOBYTE(v272[1]);
    *((_WORD *)this + 54) = v272[1];
    if (v81 - 2 < 9)
    {
      v82 = BYTE2(v272[1]);
      *((_BYTE *)this + 110) = BYTE2(v272[1]);
      if (v82)
      {
        *(_DWORD *)v9 = v272[0];
        goto LABEL_160;
      }
      v104 = v272[0];
      goto LABEL_217;
    }
    if (v81 <= 0xD)
    {
      if (((1 << v81) & 0x3003) != 0)
      {
        *(_DWORD *)v9 = 0;
      }
      else if (v81 == 11)
      {
        v104 = v272[0];
        v272[0] = 0;
LABEL_217:
        *(_DWORD *)v9 = v104;
      }
    }
LABEL_160:
    LOBYTE(v272[1]) = 0;
    if (*((_BYTE *)this + 116) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 28));
    }
    v83 = LOBYTE(v272[3]);
    *((_WORD *)this + 58) = v272[3];
    if (v83 - 2 < 9)
    {
      v84 = BYTE2(v272[3]);
      *((_BYTE *)this + 118) = BYTE2(v272[3]);
      if (v84)
      {
        *((_DWORD *)this + 28) = v272[2];
        goto LABEL_164;
      }
      v105 = v272[2];
      goto LABEL_219;
    }
    if (v83 <= 0xD)
    {
      if (((1 << v83) & 0x3003) != 0)
      {
        *((_DWORD *)this + 28) = 0;
      }
      else if (v83 == 11)
      {
        v105 = v272[2];
        v272[2] = 0;
LABEL_219:
        *((_DWORD *)this + 28) = v105;
      }
    }
LABEL_164:
    LOBYTE(v272[3]) = 0;
    if (*((_BYTE *)this + 124) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 30));
    }
    v85 = v273[4];
    *((_WORD *)this + 62) = *(_WORD *)&v273[4];
    if (v85 - 2 < 9)
    {
      v86 = v273[6];
      *((_BYTE *)this + 126) = v273[6];
      if (v86)
      {
        *((_DWORD *)this + 30) = *(_DWORD *)v273;
        goto LABEL_168;
      }
      v106 = *(_DWORD *)v273;
      goto LABEL_221;
    }
    if (v85 <= 0xD)
    {
      if (((1 << v85) & 0x3003) != 0)
      {
        *((_DWORD *)this + 30) = 0;
      }
      else if (v85 == 11)
      {
        v106 = *(_DWORD *)v273;
        *(_DWORD *)v273 = 0;
LABEL_221:
        *((_DWORD *)this + 30) = v106;
      }
    }
LABEL_168:
    v273[4] = 0;
    if (*((_BYTE *)this + 132) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 32));
    }
    v87 = v273[12];
    *((_WORD *)this + 66) = *(_WORD *)&v273[12];
    if (v87 - 2 >= 9)
    {
      if (v87 > 0xD)
        goto LABEL_172;
      if (((1 << v87) & 0x3003) != 0)
      {
        *((_DWORD *)this + 32) = 0;
        goto LABEL_172;
      }
      if (v87 != 11)
        goto LABEL_172;
      v107 = *(_DWORD *)&v273[8];
      *(_DWORD *)&v273[8] = 0;
    }
    else
    {
      v88 = v273[14];
      *((_BYTE *)this + 134) = v273[14];
      if (v88)
      {
        *((_DWORD *)this + 32) = *(_DWORD *)&v273[8];
LABEL_172:
        v273[12] = 0;
        goto LABEL_173;
      }
      v107 = *(_DWORD *)&v273[8];
    }
    *((_DWORD *)this + 32) = v107;
    goto LABEL_172;
  }
LABEL_173:
  v89 = *((unsigned int *)this + 36);
  if ((_DWORD)v89 == -1)
  {
    if (v274 == -1)
      goto LABEL_176;
  }
  else if (v274 == -1)
  {
    ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v89])(&v281, (char *)this + 136);
    *((_DWORD *)this + 36) = -1;
    goto LABEL_176;
  }
  *(_QWORD *)&v281 = (char *)this + 136;
  ((void (*)(__int128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                    + v274))(&v281);
LABEL_176:
  *((_WORD *)this + 76) = v275;
  v90 = v276;
  v276 = 0;
  std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)this + 20, v90);
LABEL_186:
  if (v277)
  {
    v93 = v276;
    if (v276)
    {
      v276 = 0;
      do
      {
        v108 = *((_QWORD *)v93 + 7);
        *((_QWORD *)v93 + 7) = 0;
        *(_QWORD *)&v281 = v108;
        std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)&v281, v93);
        v93 = (unsigned int *)v281;
      }
      while ((_QWORD)v281);
    }
    std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100](&v276, 0);
    if (v274 != -1)
      ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v274])(&v281, &v273[16]);
    v274 = -1;
    if (v273[12] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)&v273[8]);
    }
    if (v273[4] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v273);
    }
    if (LOBYTE(v272[3]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v272[2]);
    }
    if (LOBYTE(v272[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v272[0]);
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(__int128 *, __int128 *);
  uint64_t v16;
  char v17;
  uint64_t (*v18)(__int128 *, __int128 *);
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t (*v22)(__int128 *, __int128 *);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t (*v32)(__int128 *, __int128 *);
  uint64_t v33;
  __int128 v34;
  __int128 *v35;
  char *v36;
  uint64_t (*v37)(__int128 *, __int128 *);
  uint64_t v38;
  char v39;
  uint64_t (*v40)(__int128 *, __int128 *);
  __int128 v41;
  __int128 v42;
  uint64_t (*v43)(__int128 *, __int128 *);
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t (*v50)(__int128 *, __int128 *);
  uint64_t v51;
  __int128 v52;
  __int128 *v53;
  __int128 *v54;
  char *v55;
  uint64_t (*v56)(__int128 *, __int128 *);
  uint64_t v57;
  char v58;
  uint64_t (*v59)(__int128 *, __int128 *);
  __int128 v60;
  __int128 v61;
  uint64_t (*v62)(__int128 *, __int128 *);
  uint64_t v63;
  __int128 v64;
  uint64_t (*v65)(__int128 *, __int128 *);
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  uint64_t (*v70)(__int128 *, __int128 *);
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t (*v75)(__int128 *, __int128 *);
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t (*v79)(__int128 *, __int128 *);
  uint64_t v80;
  __int128 v81;
  uint64_t (*v82)(__int128 *, __int128 *);
  uint64_t v83;
  __int128 v84;
  uint64_t (*v85)(__int128 *, __int128 *);
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t (*v89)(__int128 *, __int128 *);
  uint64_t v90;
  __int128 v91;
  uint64_t (*v92)(__int128 *, __int128 *);
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  uint64_t (*v97)(__int128 *, __int128 *);
  uint64_t v98;
  __int128 v99;
  uint64_t (*v100)(__int128 *, __int128 *);
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t (*v104)(__int128 *, __int128 *);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(__int128 *, __int128 *);
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(__int128 *, __int128 *);
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t (*v126)(__int128 *, __int128 *);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 *v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  BOOL v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;

LABEL_1:
  result = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = v9;
    v11 = (uint64_t)a2 - result;
    v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - result) >> 3);
    if (v12 < 2)
      return result;
    a1 = result;
    switch(v12)
    {
      case 2uLL:
        v22 = *a3;
        v23 = *((_QWORD *)a2 - 1);
        v141 = *(__int128 *)((char *)a2 - 24);
        v142 = v23;
        v24 = *(_QWORD *)(result + 16);
        v139 = *(_OWORD *)result;
        v140 = v24;
        result = v22(&v141, &v139);
        if ((_DWORD)result)
        {
          v25 = (char *)a2 - 24;
          v26 = *(_OWORD *)a1;
          v160 = *(_QWORD *)(a1 + 16);
          v159 = v26;
          v27 = *(__int128 *)((char *)a2 - 24);
          *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 - 2);
          *(_OWORD *)a1 = v27;
          *(_OWORD *)v25 = v159;
          *((_DWORD *)v25 + 4) = v160;
        }
        return result;
      case 3uLL:
        v13 = result + 24;
        v14 = (char *)a2 - 24;
        v15 = *a3;
        v157 = *(_OWORD *)(result + 24);
        v158 = *(_QWORD *)(result + 40);
        v16 = *(_QWORD *)(result + 16);
        v155 = *(_OWORD *)result;
        v156 = v16;
        v17 = v15(&v157, &v155);
        v18 = *a3;
        if ((v17 & 1) != 0)
        {
          v19 = *(_OWORD *)v14;
          v154 = *((_QWORD *)v14 + 2);
          v153 = v19;
          v151 = *(_OWORD *)v13;
          v152 = *(_QWORD *)(a1 + 40);
          result = v18(&v153, &v151);
          if ((_DWORD)result)
          {
            v20 = *(_OWORD *)a1;
            v160 = *(_QWORD *)(a1 + 16);
            v159 = v20;
            v21 = *(_OWORD *)v14;
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v14 + 4);
            *(_OWORD *)a1 = v21;
            *(_OWORD *)v14 = v159;
            *((_DWORD *)v14 + 4) = v160;
          }
          else
          {
            v42 = *(_OWORD *)a1;
            v160 = *(_QWORD *)(a1 + 16);
            v159 = v42;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *(_OWORD *)v13 = v159;
            *(_DWORD *)(a1 + 40) = v160;
            v43 = *a3;
            v44 = *((_QWORD *)v14 + 2);
            v159 = *(_OWORD *)v14;
            v160 = v44;
            v149 = *(_OWORD *)v13;
            v150 = *(_QWORD *)(a1 + 40);
            result = v43(&v159, &v149);
            if ((_DWORD)result)
            {
              v45 = *(_OWORD *)v13;
              v46 = *(_QWORD *)(a1 + 40);
              v47 = *((_DWORD *)v14 + 4);
              *(_OWORD *)v13 = *(_OWORD *)v14;
              *(_DWORD *)(a1 + 40) = v47;
              *((_DWORD *)v14 + 4) = v46;
              *(_OWORD *)v14 = v45;
            }
          }
        }
        else
        {
          v28 = *(_OWORD *)v14;
          v154 = *((_QWORD *)v14 + 2);
          v153 = v28;
          v151 = *(_OWORD *)v13;
          v152 = *(_QWORD *)(a1 + 40);
          result = v18(&v153, &v151);
          if ((_DWORD)result)
          {
            v29 = *(_OWORD *)v13;
            v30 = *(_QWORD *)(a1 + 40);
            v31 = *((_DWORD *)v14 + 4);
            *(_OWORD *)v13 = *(_OWORD *)v14;
            *(_DWORD *)(a1 + 40) = v31;
            *((_DWORD *)v14 + 4) = v30;
            *(_OWORD *)v14 = v29;
            v32 = *a3;
            v149 = *(_OWORD *)v13;
            v150 = *(_QWORD *)(a1 + 40);
            goto LABEL_13;
          }
        }
        return result;
      case 4uLL:
        v13 = result + 24;
        v35 = (__int128 *)(result + 48);
        v36 = (char *)a2 - 24;
        v37 = *a3;
        v157 = *(_OWORD *)(result + 24);
        v158 = *(_QWORD *)(result + 40);
        v38 = *(_QWORD *)(result + 16);
        v155 = *(_OWORD *)result;
        v156 = v38;
        v39 = v37(&v157, &v155);
        v40 = *a3;
        if ((v39 & 1) != 0)
        {
          v153 = *v35;
          v154 = *(_QWORD *)(a1 + 64);
          v151 = *(_OWORD *)v13;
          v152 = *(_QWORD *)(a1 + 40);
          if (v40(&v153, &v151))
          {
            v41 = *(_OWORD *)a1;
            v160 = *(_QWORD *)(a1 + 16);
            v159 = v41;
            *(_OWORD *)a1 = *v35;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
            *v35 = v159;
            *(_DWORD *)(a1 + 64) = v160;
          }
          else
          {
            v61 = *(_OWORD *)a1;
            v160 = *(_QWORD *)(a1 + 16);
            v159 = v61;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *(_OWORD *)v13 = v159;
            *(_DWORD *)(a1 + 40) = v160;
            v62 = *a3;
            v159 = *v35;
            v160 = *(_QWORD *)(a1 + 64);
            v150 = *(_QWORD *)(a1 + 40);
            v149 = *(_OWORD *)v13;
            if (v62(&v159, &v149))
            {
              v63 = *(_QWORD *)(a1 + 40);
              v64 = *(_OWORD *)v13;
              *(_OWORD *)v13 = *v35;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
              *v35 = v64;
              *(_DWORD *)(a1 + 64) = v63;
            }
          }
        }
        else
        {
          v153 = *v35;
          v154 = *(_QWORD *)(a1 + 64);
          v151 = *(_OWORD *)v13;
          v152 = *(_QWORD *)(a1 + 40);
          if (v40(&v153, &v151))
          {
            v48 = *(_QWORD *)(a1 + 40);
            v49 = *(_OWORD *)v13;
            *(_OWORD *)v13 = *v35;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
            *v35 = v49;
            *(_DWORD *)(a1 + 64) = v48;
            v50 = *a3;
            v150 = *(_QWORD *)(a1 + 40);
            v149 = *(_OWORD *)v13;
            v51 = *(_QWORD *)(a1 + 16);
            v147 = *(_OWORD *)a1;
            v148 = v51;
            if (v50(&v149, &v147))
            {
              v52 = *(_OWORD *)a1;
              v160 = *(_QWORD *)(a1 + 16);
              v159 = v52;
              *(_OWORD *)a1 = *(_OWORD *)v13;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
              *(_OWORD *)v13 = v159;
              *(_DWORD *)(a1 + 40) = v160;
            }
          }
        }
        v65 = *a3;
        v66 = *((_QWORD *)v36 + 2);
        v157 = *(_OWORD *)v36;
        v158 = v66;
        v155 = *v35;
        v156 = *(_QWORD *)(a1 + 64);
        result = v65(&v157, &v155);
        if ((_DWORD)result)
        {
          v67 = *v35;
          v68 = *(_QWORD *)(a1 + 64);
          v69 = *((_DWORD *)v36 + 4);
          *v35 = *(_OWORD *)v36;
          *(_DWORD *)(a1 + 64) = v69;
          *((_DWORD *)v36 + 4) = v68;
          *(_OWORD *)v36 = v67;
          v70 = *a3;
          v153 = *v35;
          v154 = *(_QWORD *)(a1 + 64);
          v151 = *(_OWORD *)v13;
          v152 = *(_QWORD *)(a1 + 40);
          result = v70(&v153, &v151);
          if ((_DWORD)result)
          {
            v71 = *(_QWORD *)(a1 + 40);
            v72 = *(_OWORD *)v13;
            *(_OWORD *)v13 = *v35;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
            *v35 = v72;
            *(_DWORD *)(a1 + 64) = v71;
            v32 = *a3;
            v150 = *(_QWORD *)(a1 + 40);
            v149 = *(_OWORD *)v13;
LABEL_13:
            v33 = *(_QWORD *)(a1 + 16);
            v147 = *(_OWORD *)a1;
            v148 = v33;
            result = v32(&v149, &v147);
            goto LABEL_14;
          }
        }
        return result;
      case 5uLL:
        v13 = result + 24;
        v53 = (__int128 *)(result + 48);
        v54 = (__int128 *)(result + 72);
        v55 = (char *)a2 - 24;
        v56 = *a3;
        v157 = *(_OWORD *)(result + 24);
        v158 = *(_QWORD *)(result + 40);
        v57 = *(_QWORD *)(result + 16);
        v155 = *(_OWORD *)result;
        v156 = v57;
        v58 = v56(&v157, &v155);
        v59 = *a3;
        if ((v58 & 1) != 0)
        {
          v153 = *v53;
          v154 = *(_QWORD *)(a1 + 64);
          v151 = *(_OWORD *)v13;
          v152 = *(_QWORD *)(a1 + 40);
          if (v59(&v153, &v151))
          {
            v60 = *(_OWORD *)a1;
            v160 = *(_QWORD *)(a1 + 16);
            v159 = v60;
            *(_OWORD *)a1 = *v53;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 64);
            *v53 = v159;
            *(_DWORD *)(a1 + 64) = v160;
          }
          else
          {
            v78 = *(_OWORD *)a1;
            v160 = *(_QWORD *)(a1 + 16);
            v159 = v78;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *(_OWORD *)v13 = v159;
            *(_DWORD *)(a1 + 40) = v160;
            v79 = *a3;
            v159 = *v53;
            v160 = *(_QWORD *)(a1 + 64);
            v150 = *(_QWORD *)(a1 + 40);
            v149 = *(_OWORD *)v13;
            if (v79(&v159, &v149))
            {
              v80 = *(_QWORD *)(a1 + 40);
              v81 = *(_OWORD *)v13;
              *(_OWORD *)v13 = *v53;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
              *v53 = v81;
              *(_DWORD *)(a1 + 64) = v80;
            }
          }
        }
        else
        {
          v153 = *v53;
          v154 = *(_QWORD *)(a1 + 64);
          v151 = *(_OWORD *)v13;
          v152 = *(_QWORD *)(a1 + 40);
          if (v59(&v153, &v151))
          {
            v73 = *(_QWORD *)(a1 + 40);
            v74 = *(_OWORD *)v13;
            *(_OWORD *)v13 = *v53;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
            *v53 = v74;
            *(_DWORD *)(a1 + 64) = v73;
            v75 = *a3;
            v150 = *(_QWORD *)(a1 + 40);
            v149 = *(_OWORD *)v13;
            v76 = *(_QWORD *)(a1 + 16);
            v147 = *(_OWORD *)a1;
            v148 = v76;
            if (v75(&v149, &v147))
            {
              v77 = *(_OWORD *)a1;
              v160 = *(_QWORD *)(a1 + 16);
              v159 = v77;
              *(_OWORD *)a1 = *(_OWORD *)v13;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
              *(_OWORD *)v13 = v159;
              *(_DWORD *)(a1 + 40) = v160;
            }
          }
        }
        v82 = *a3;
        v157 = *v54;
        v158 = *(_QWORD *)(a1 + 88);
        v156 = *(_QWORD *)(a1 + 64);
        v155 = *v53;
        if (v82(&v157, &v155))
        {
          v83 = *(_QWORD *)(a1 + 64);
          v84 = *v53;
          *v53 = *v54;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
          *v54 = v84;
          *(_DWORD *)(a1 + 88) = v83;
          v85 = *a3;
          v154 = *(_QWORD *)(a1 + 64);
          v153 = *v53;
          v86 = *(_OWORD *)v13;
          v152 = *(_QWORD *)(a1 + 40);
          v151 = v86;
          if (v85(&v153, &v151))
          {
            v87 = *(_QWORD *)(a1 + 40);
            v88 = *(_OWORD *)v13;
            *(_OWORD *)v13 = *v53;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
            *v53 = v88;
            *(_DWORD *)(a1 + 64) = v87;
            v89 = *a3;
            v150 = *(_QWORD *)(a1 + 40);
            v149 = *(_OWORD *)v13;
            v90 = *(_QWORD *)(a1 + 16);
            v147 = *(_OWORD *)a1;
            v148 = v90;
            if (v89(&v149, &v147))
            {
              v91 = *(_OWORD *)a1;
              v160 = *(_QWORD *)(a1 + 16);
              v159 = v91;
              *(_OWORD *)a1 = *(_OWORD *)v13;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
              *(_OWORD *)v13 = v159;
              *(_DWORD *)(a1 + 40) = v160;
            }
          }
        }
        v92 = *a3;
        v93 = *((_QWORD *)v55 + 2);
        v157 = *(_OWORD *)v55;
        v158 = v93;
        v155 = *v54;
        v156 = *(_QWORD *)(a1 + 88);
        result = v92(&v157, &v155);
        if ((_DWORD)result)
        {
          v94 = *v54;
          v95 = *(_QWORD *)(a1 + 88);
          v96 = *((_DWORD *)v55 + 4);
          *v54 = *(_OWORD *)v55;
          *(_DWORD *)(a1 + 88) = v96;
          *((_DWORD *)v55 + 4) = v95;
          *(_OWORD *)v55 = v94;
          v97 = *a3;
          v153 = *v54;
          v154 = *(_QWORD *)(a1 + 88);
          v151 = *v53;
          v152 = *(_QWORD *)(a1 + 64);
          result = v97(&v153, &v151);
          if ((_DWORD)result)
          {
            v98 = *(_QWORD *)(a1 + 64);
            v99 = *v53;
            *v53 = *v54;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
            *v54 = v99;
            *(_DWORD *)(a1 + 88) = v98;
            v100 = *a3;
            v150 = *(_QWORD *)(a1 + 64);
            v149 = *v53;
            v101 = *(_OWORD *)v13;
            v148 = *(_QWORD *)(a1 + 40);
            v147 = v101;
            result = v100(&v149, &v147);
            if ((_DWORD)result)
            {
              v102 = *(_QWORD *)(a1 + 40);
              v103 = *(_OWORD *)v13;
              *(_OWORD *)v13 = *v53;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
              *v53 = v103;
              *(_DWORD *)(a1 + 64) = v102;
              v104 = *a3;
              v146 = *(_QWORD *)(a1 + 40);
              v145 = *(_OWORD *)v13;
              v105 = *(_QWORD *)(a1 + 16);
              v143 = *(_OWORD *)a1;
              v144 = v105;
              result = v104(&v145, &v143);
LABEL_14:
              if ((_DWORD)result)
              {
                v34 = *(_OWORD *)a1;
                v160 = *(_QWORD *)(a1 + 16);
                v159 = v34;
                *(_OWORD *)a1 = *(_OWORD *)v13;
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(v13 + 16);
                *(_OWORD *)v13 = v159;
                *(_DWORD *)(v13 + 16) = v160;
              }
            }
          }
        }
        return result;
      default:
        v106 = a5;
        if (v11 > 575)
        {
          if (v10 == 1)
          {
            if ((__int128 *)result != a2)
              return (uint64_t)std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,WebCore::Style::MatchedRule*>(result, a2, a2, a3);
            return result;
          }
          v121 = (__int128 *)((char *)a2 - 24);
          v122 = v12 >> 1;
          v123 = result + 24 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>((__int128 *)result, (__int128 *)(result + 24 * v122), v121, a3);
            v129 = 3 * v122;
            v130 = (__int128 *)(a1 + 24 * v122 - 24);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>((__int128 *)(a1 + 24), v130, a2 - 3, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 8 * v129), (__int128 *)((char *)a2 - 72), a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>(v130, (__int128 *)v123, (__int128 *)(a1 + 24 + 8 * v129), a3);
            v131 = *(_OWORD *)a1;
            v160 = *(_QWORD *)(a1 + 16);
            v159 = v131;
            v132 = *(_OWORD *)v123;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v123 + 16);
            *(_OWORD *)a1 = v132;
            v133 = v159;
            *(_DWORD *)(v123 + 16) = v160;
            *(_OWORD *)v123 = v133;
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>((__int128 *)(result + 24 * v122), (__int128 *)result, v121, a3);
          }
          if ((v106 & 1) == 0)
          {
            v126 = *a3;
            v127 = *(_QWORD *)(a1 - 8);
            v137 = *(_OWORD *)(a1 - 24);
            v138 = v127;
            v128 = *(_QWORD *)(a1 + 16);
            v135 = *(_OWORD *)a1;
            v136 = v128;
            if ((v126(&v137, &v135) & 1) == 0)
            {
              result = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::MatchedRule *,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule)>((__int128 *)a1, a2, a3);
              goto LABEL_70;
            }
          }
          v124 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::MatchedRule *,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule)>(a1, a2, a3);
          LOBYTE(a5) = v106;
          if ((v125 & 1) == 0)
            goto LABEL_64;
          v134 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>(a1, v124, a3);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>(v124 + 24, (uint64_t)a2, a3);
          if (!(_DWORD)result)
          {
            v9 = v10 + 1;
            a5 = v106;
            result = v124 + 24;
            if (!v134)
            {
LABEL_64:
              std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(a1, v124, a3, -v10, a5 & 1);
              result = v124 + 24;
LABEL_70:
              a5 = 0;
              a4 = -v10;
              continue;
            }
            goto LABEL_3;
          }
          a4 = -v10;
          a2 = (__int128 *)v124;
          a5 = v106;
          if (v134)
            return result;
          goto LABEL_1;
        }
        if ((a5 & 1) == 0)
          return std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>(result, (uint64_t)a2, a3);
        if ((__int128 *)result != a2)
        {
          v107 = result + 24;
          if ((__int128 *)(result + 24) != a2)
          {
            v108 = 0;
            v109 = result;
            do
            {
              v110 = v109;
              v109 = v107;
              v111 = *a3;
              v112 = *(_QWORD *)(v109 + 16);
              v159 = *(_OWORD *)v109;
              v160 = v112;
              v113 = *(_QWORD *)(v110 + 16);
              v157 = *(_OWORD *)v110;
              v158 = v113;
              result = v111(&v159, &v157);
              if ((_DWORD)result)
              {
                v114 = *(_OWORD *)v109;
                v156 = *(_QWORD *)(v109 + 16);
                v155 = v114;
                v115 = v108;
                while (1)
                {
                  v116 = a1 + v115;
                  *(_OWORD *)(v116 + 24) = *(_OWORD *)(a1 + v115);
                  *(_DWORD *)(v116 + 40) = *(_DWORD *)(a1 + v115 + 16);
                  if (!v115)
                    break;
                  v117 = *a3;
                  v153 = v155;
                  v154 = v156;
                  v118 = *(_QWORD *)(v116 - 8);
                  v151 = *(_OWORD *)(v116 - 24);
                  v152 = v118;
                  result = v117(&v153, &v151);
                  v115 -= 24;
                  if ((result & 1) == 0)
                  {
                    v119 = a1 + v115 + 24;
                    goto LABEL_56;
                  }
                }
                v119 = a1;
LABEL_56:
                v120 = v155;
                *(_DWORD *)(v119 + 16) = v156;
                *(_OWORD *)v119 = v120;
              }
              v107 = v109 + 24;
              v108 += 24;
            }
            while ((__int128 *)(v109 + 24) != a2);
          }
        }
        return result;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v65 = a2[-1].n128_u64[0];
        --a2;
        if (v65 < v12->n128_u64[0])
          goto LABEL_109;
        return result;
      case 3:
        v40 = v12 + 1;
        v66 = v12[1].n128_u64[0];
        v68 = a2[-1].n128_u64[0];
        --a2;
        v67 = v68;
        if (v66 < v12->n128_u64[0])
        {
          if (v67 >= v66)
            goto LABEL_189;
LABEL_109:
          v136 = *v12;
          *v12 = *a2;
          result = v136;
          goto LABEL_110;
        }
        if (v67 < v66)
        {
          result = *v40;
          *v40 = *a2;
          *a2 = result;
          goto LABEL_197;
        }
        return result;
      case 4:
        v40 = v12 + 1;
        v69 = v12[1].n128_u64[0];
        v70 = v12 + 2;
        v71 = v12[2].n128_u64[0];
        if (v69 >= v12->n128_u64[0])
        {
          if (v71 < v69)
          {
            result = *v40;
            *v40 = *v70;
            *v70 = result;
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v139 = *v12;
              *v12 = *v40;
              result = v139;
              *v40 = v139;
            }
          }
        }
        else
        {
          if (v71 >= v69)
          {
            v141 = *v12;
            *v12 = *v40;
            result = v141;
            *v40 = v141;
            if (v71 >= v12[1].n128_u64[0])
              goto LABEL_194;
            result = *v40;
            *v40 = *v70;
          }
          else
          {
            v137 = *v12;
            *v12 = *v70;
            result = v137;
          }
          *v70 = result;
        }
LABEL_194:
        if (v9->n128_u64[0] < v70->n128_u64[0])
        {
          result = *v70;
          *v70 = *v9;
          *v9 = result;
          if (v70->n128_u64[0] < v40->n128_u64[0])
          {
            result = *v40;
            *v40 = *v70;
            *v70 = result;
LABEL_197:
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v142 = *v12;
              *v12 = *v40;
              result = v142;
              *v40 = v142;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(v12, v12 + 1, v12[2].n128_u64, (__n128 *)v12[3].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      default:
        if (v13 <= 383)
        {
          v40 = v12 + 1;
          v73 = v12 == a2 || v40 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v73)
            {
              v74 = 0;
              v75 = v12;
              do
              {
                v76 = v40;
                v77 = v40->n128_u64[0];
                if (v77 < v75->n128_u64[0])
                {
                  v78 = v75[1].n128_i64[1];
                  v79 = v74;
                  while (1)
                  {
                    result = *(__n128 *)((char *)v12 + v79);
                    *(__n128 *)((char *)v12 + v79 + 16) = result;
                    if (!v79)
                      break;
                    v80 = *(unint64_t *)((char *)v12[-1].n128_u64 + v79);
                    v79 -= 16;
                    if (v77 >= v80)
                    {
                      v81 = (__n128 *)((char *)v12 + v79 + 16);
                      goto LABEL_130;
                    }
                  }
                  v81 = v12;
LABEL_130:
                  v81->n128_u64[0] = v77;
                  v81->n128_u64[1] = v78;
                }
                v40 = v76 + 1;
                v74 += 16;
                v75 = v76;
              }
              while (&v76[1] != a2);
            }
          }
          else if (!v73)
          {
            v108 = -2;
            v109 = 1;
            v110 = v12;
            while (1)
            {
              v111 = v40->n128_u64[0];
              if (v40->n128_u64[0] < v110->n128_u64[0])
                break;
LABEL_186:
              v110 = &v12[v109++];
              ++v40;
              --v108;
              if (v40 == a2)
                return result;
            }
            v112 = v110[1].n128_u64[1];
            v113 = v108;
            v114 = v40;
            while (1)
            {
              result = v114[-1];
              *v114 = result;
              v87 = __CFADD__(v113++, 1);
              if (v87)
                break;
              v115 = v114 - 1;
              v116 = v114[-2].n128_u64[0];
              --v114;
              if (v111 >= v116)
              {
                v115->n128_u64[0] = v111;
                v115->n128_u64[1] = v112;
                goto LABEL_186;
              }
            }
LABEL_188:
            __break(1u);
LABEL_189:
            v140 = *a1;
            *a1 = *v40;
            result = v140;
            *v40 = v140;
            if (a2->n128_u64[0] < a1[1].n128_u64[0])
            {
              result = *v40;
              *v40 = *a2;
LABEL_110:
              *a2 = result;
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v12 != a2)
          {
            v82 = (unint64_t)(v14 - 2) >> 1;
            v83 = v82;
            do
            {
              if (v82 >= v83)
              {
                v84 = (2 * v83) | 1;
                v85 = &v12[v84];
                if (2 * v83 + 2 >= v14)
                {
                  v86 = v85->n128_u64[0];
                }
                else
                {
                  v86 = v85[1].n128_u64[0];
                  v87 = v85->n128_u64[0] >= v86;
                  if (v85->n128_u64[0] > v86)
                    v86 = v85->n128_u64[0];
                  if (!v87)
                  {
                    ++v85;
                    v84 = 2 * v83 + 2;
                  }
                }
                v88 = &v12[v83];
                v89 = v88->n128_u64[0];
                if (v86 >= v88->n128_u64[0])
                {
                  v90 = v88->n128_i64[1];
                  do
                  {
                    v91 = v88;
                    v88 = v85;
                    *v91 = *v85;
                    if (v82 < v84)
                      break;
                    v92 = (2 * v84) | 1;
                    v85 = &v12[v92];
                    v84 = 2 * v84 + 2;
                    if (v84 >= v14)
                    {
                      v93 = v85->n128_u64[0];
                      v84 = v92;
                    }
                    else
                    {
                      v93 = v85->n128_u64[0];
                      v94 = v85[1].n128_u64[0];
                      if (v85->n128_u64[0] <= v94)
                        v93 = v85[1].n128_u64[0];
                      if (v85->n128_u64[0] >= v94)
                        v84 = v92;
                      else
                        ++v85;
                    }
                  }
                  while (v93 >= v89);
                  v88->n128_u64[0] = v89;
                  v88->n128_u64[1] = v90;
                }
              }
              v95 = v83-- <= 0;
            }
            while (!v95);
            v96 = (unint64_t)v13 >> 4;
            do
            {
              v97 = 0;
              v138 = *v12;
              v98 = v12;
              do
              {
                v99 = &v98[v97 + 1];
                v100 = (2 * v97) | 1;
                v101 = 2 * v97 + 2;
                if (v101 < v96 && v99->n128_u64[0] < v99[1].n128_u64[0])
                {
                  ++v99;
                  v100 = v101;
                }
                *v98 = *v99;
                v98 = v99;
                v97 = v100;
              }
              while (v100 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
              if (v99 == --a2)
              {
                result = v138;
                *v99 = v138;
              }
              else
              {
                *v99 = *a2;
                result = v138;
                *a2 = v138;
                v102 = (char *)v99 - (char *)v12 + 16;
                if (v102 >= 17)
                {
                  v103 = (((unint64_t)v102 >> 4) - 2) >> 1;
                  v104 = &v12[v103];
                  v105 = v99->n128_u64[0];
                  if (v104->n128_u64[0] < v99->n128_u64[0])
                  {
                    v106 = v99->n128_u64[1];
                    do
                    {
                      v107 = v99;
                      v99 = v104;
                      result = *v104;
                      *v107 = *v104;
                      if (!v103)
                        break;
                      v103 = (v103 - 1) >> 1;
                      v104 = &v12[v103];
                    }
                    while (v104->n128_u64[0] < v105);
                    v99->n128_u64[0] = v105;
                    v99->n128_u64[1] = v106;
                  }
                }
              }
              v95 = v96-- <= 2;
            }
            while (!v95);
          }
          return result;
        }
        v15 = (unint64_t)v14 >> 1;
        v16 = &v12[(unint64_t)v14 >> 1];
        v17 = v9->n128_u64[0];
        if ((unint64_t)v13 >= 0x801)
        {
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= v12->n128_u64[0])
          {
            if (v17 < v18)
            {
              v119 = *v16;
              *v16 = *v9;
              *v9 = v119;
              if (v16->n128_u64[0] < v12->n128_u64[0])
              {
                v120 = *v12;
                *v12 = *v16;
                *v16 = v120;
              }
            }
          }
          else
          {
            if (v17 < v18)
            {
              v117 = *v12;
              *v12 = *v9;
              goto LABEL_20;
            }
            v123 = *v12;
            *v12 = *v16;
            *v16 = v123;
            if (v9->n128_u64[0] < v16->n128_u64[0])
            {
              v117 = *v16;
              *v16 = *v9;
LABEL_20:
              *v9 = v117;
            }
          }
          v20 = v12 + 1;
          v21 = &v12[v15];
          v24 = v21[-1].n128_u64[0];
          v22 = v21 - 1;
          v23 = v24;
          v25 = v10->n128_u64[0];
          if (v24 >= v12[1].n128_u64[0])
          {
            if (v25 < v23)
            {
              v124 = *v22;
              *v22 = *v10;
              *v10 = v124;
              if (v22->n128_u64[0] < v20->n128_u64[0])
              {
                v27 = *v20;
                *v20 = *v22;
                *v22 = v27;
              }
            }
          }
          else
          {
            if (v25 < v23)
            {
              v26 = *v20;
              *v20 = *v10;
              goto LABEL_32;
            }
            v28 = *v20;
            *v20 = *v22;
            *v22 = v28;
            if (v10->n128_u64[0] < v22->n128_u64[0])
            {
              v126 = *v22;
              *v22 = *v10;
              v26 = v126;
LABEL_32:
              *v10 = v26;
            }
          }
          v29 = v12 + 2;
          v30 = &v12[v15];
          v33 = v30[1].n128_u64[0];
          v31 = v30 + 1;
          v32 = v33;
          v34 = v11->n128_u64[0];
          if (v33 >= v12[2].n128_u64[0])
          {
            if (v34 < v32)
            {
              v127 = *v31;
              *v31 = *v11;
              *v11 = v127;
              if (v31->n128_u64[0] < v29->n128_u64[0])
              {
                v36 = *v29;
                *v29 = *v31;
                *v31 = v36;
              }
            }
          }
          else
          {
            if (v34 < v32)
            {
              v35 = *v29;
              *v29 = *v11;
              goto LABEL_41;
            }
            v37 = *v29;
            *v29 = *v31;
            *v31 = v37;
            if (v11->n128_u64[0] < v31->n128_u64[0])
            {
              v128 = *v31;
              *v31 = *v11;
              v35 = v128;
LABEL_41:
              *v11 = v35;
            }
          }
          v38 = v16->n128_u64[0];
          v39 = v31->n128_u64[0];
          if (v16->n128_u64[0] >= v22->n128_u64[0])
          {
            if (v39 < v38)
            {
              v130 = *v16;
              *v16 = *v31;
              *v31 = v130;
              if (v16->n128_u64[0] < v22->n128_u64[0])
              {
                v131 = *v22;
                *v22 = *v16;
                *v16 = v131;
              }
            }
          }
          else
          {
            if (v39 < v38)
            {
              v129 = *v22;
              *v22 = *v31;
              goto LABEL_50;
            }
            v132 = *v22;
            *v22 = *v16;
            *v16 = v132;
            if (v31->n128_u64[0] < v16->n128_u64[0])
            {
              v129 = *v16;
              *v16 = *v31;
LABEL_50:
              *v31 = v129;
            }
          }
          v133 = *v12;
          *v12 = *v16;
          result = v133;
          *v16 = v133;
          goto LABEL_52;
        }
        v19 = v12->n128_u64[0];
        if (v12->n128_u64[0] >= v16->n128_u64[0])
        {
          if (v17 < v19)
          {
            v121 = *v12;
            *v12 = *v9;
            result = v121;
            *v9 = v121;
            if (v12->n128_u64[0] < v16->n128_u64[0])
            {
              v122 = *v16;
              *v16 = *v12;
              result = v122;
              *v12 = v122;
            }
          }
        }
        else
        {
          if (v17 >= v19)
          {
            v125 = *v16;
            *v16 = *v12;
            result = v125;
            *v12 = v125;
            if (v9->n128_u64[0] >= v12->n128_u64[0])
              goto LABEL_52;
            v118 = *v12;
            *v12 = *v9;
          }
          else
          {
            v118 = *v16;
            *v16 = *v9;
          }
          result = v118;
          *v9 = v118;
        }
LABEL_52:
        --a3;
        v40 = (__n128 *)v12->n128_u64[0];
        if ((a4 & 1) == 0 && v12[-1].n128_u64[0] >= (unint64_t)v40)
        {
          v55 = v12->n128_u64[1];
          if ((unint64_t)v40 >= v9->n128_u64[0])
          {
            n128_u64 = (unint64_t)v12[1].n128_u64;
            do
            {
              v12 = (__n128 *)n128_u64;
              if (n128_u64 >= (unint64_t)a2)
                break;
              n128_u64 += 16;
            }
            while ((unint64_t)v40 >= v12->n128_u64[0]);
          }
          else
          {
            v56 = v12 + 1;
            do
            {
              if (v56 == a2)
                goto LABEL_188;
              v57 = v56->n128_u64[0];
              ++v56;
            }
            while ((unint64_t)v40 >= v57);
            v12 = v56 - 1;
          }
          v59 = a2;
          if (v12 < a2)
          {
            v59 = a2;
            while (v59 != a1)
            {
              v60 = v59[-1].n128_u64[0];
              --v59;
              if ((unint64_t)v40 >= v60)
                goto LABEL_98;
            }
            goto LABEL_188;
          }
LABEL_98:
          if (v12 < v59)
          {
            v135 = *v12;
            *v12 = *v59;
            result = v135;
            *v59 = v135;
            v61 = v12 + 1;
            while (v61 != a2)
            {
              v62 = v61->n128_u64[0];
              ++v61;
              if ((unint64_t)v40 < v62)
              {
                v12 = v61 - 1;
                while (v59 != a1)
                {
                  v63 = v59[-1].n128_u64[0];
                  --v59;
                  if ((unint64_t)v40 >= v63)
                    goto LABEL_98;
                }
                goto LABEL_188;
              }
            }
            goto LABEL_188;
          }
          v64 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v64;
            *a1 = *v64;
          }
          a4 = 0;
          v12[-1].n128_u64[0] = (unint64_t)v40;
          v12[-1].n128_u64[1] = v55;
          continue;
        }
        v41 = 0;
        v42 = v12->n128_u64[1];
        do
        {
          v43 = &v12[v41 + 1];
          if (v43 == a2)
            goto LABEL_188;
          ++v41;
        }
        while (v43->n128_u64[0] < (unint64_t)v40);
        v44 = &v12[v41];
        v45 = a2;
        if (v41 != 1)
        {
          while (v45 != v12)
          {
            v46 = v45[-1].n128_u64[0];
            --v45;
            if (v46 < (unint64_t)v40)
              goto LABEL_64;
          }
          goto LABEL_188;
        }
        v45 = a2;
        do
        {
          if (v44 >= v45)
            break;
          v47 = v45[-1].n128_u64[0];
          --v45;
        }
        while (v47 >= (unint64_t)v40);
LABEL_64:
        v12 = (__n128 *)((char *)v12 + v41 * 16);
        if (v44 < v45)
        {
          v48 = v45;
          do
          {
            v134 = *v12;
            *v12 = *v48;
            result = v134;
            *v48 = v134;
            v49 = v12 + 1;
            do
            {
              if (v49 == a2)
                goto LABEL_188;
              v50 = v49->n128_u64[0];
              ++v49;
            }
            while (v50 < (unint64_t)v40);
            v12 = v49 - 1;
            do
            {
              if (v48 == a1)
                goto LABEL_188;
              v51 = v48[-1].n128_u64[0];
              --v48;
            }
            while (v51 >= (unint64_t)v40);
          }
          while (v12 < v48);
        }
        v52 = v12 - 1;
        if (&v12[-1] != a1)
        {
          result = *v52;
          *a1 = *v52;
        }
        v12[-1].n128_u64[0] = (unint64_t)v40;
        v12[-1].n128_u64[1] = v42;
        if (v44 < v45)
        {
LABEL_78:
          std::__introsort<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*,false>(a1, &v12[-1], a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v53 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(a1, v12 - 1, result);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WTF::RangeSet<WTF::Range<unsigned long>>::compact(void)::{lambda(WTF::Range<unsigned long> const&,WTF::Range<unsigned long> const&)#1} &,WTF::Range<unsigned long>*>(v12, a2, v54))
        {
          if (v53)
            continue;
          goto LABEL_78;
        }
        a2 = v12 - 1;
        if (!v53)
          goto LABEL_1;
        return result;
    }
  }
}

  v9 = a2 - 56;
  v348 = (__int128 *)(a2 - 112);
  v10 = (__int128 *)(a2 - 168);
  v11 = a1;
  while (2)
  {
    a1 = v11;
    v12 = a2 - v11;
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v11) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)(a2 - 56), (__int128 *)v11))
          goto LABEL_87;
        return;
      case 3uLL:
        a2 = v11 + 56;
        v258 = (*a3)((__int128 *)(v11 + 56), (__int128 *)v11);
        v259 = (*a3)((__int128 *)v9, (__int128 *)(v11 + 56));
        if ((v258 & 1) != 0)
        {
          if (!v259)
            goto LABEL_128;
LABEL_87:
          v260 = *(_OWORD *)v11;
          v261 = *(_OWORD *)(v11 + 16);
          v262 = *(_OWORD *)(v11 + 32);
          v357 = *(_QWORD *)(v11 + 48);
          v355 = v261;
          v356 = v262;
          v354 = v260;
          v263 = *(_OWORD *)v9;
          v264 = *(_OWORD *)(v9 + 16);
          v265 = *(_OWORD *)(v9 + 32);
          *(_QWORD *)(v11 + 48) = *(_QWORD *)(v9 + 48);
          *(_OWORD *)(v11 + 16) = v264;
          *(_OWORD *)(v11 + 32) = v265;
          *(_OWORD *)v11 = v263;
          v266 = v354;
          v267 = v355;
          v268 = v356;
          *(_QWORD *)(v9 + 48) = v357;
          *(_OWORD *)(v9 + 32) = v268;
          goto LABEL_88;
        }
        if (v259)
        {
          v306 = *(_OWORD *)(v11 + 72);
          v354 = *(_OWORD *)a2;
          v305 = v354;
          v355 = v306;
          v356 = *(_OWORD *)(v11 + 88);
          v307 = v356;
          v357 = *(_QWORD *)(v11 + 104);
          v308 = v357;
          v309 = *(_QWORD *)(v9 + 48);
          v311 = *(_OWORD *)(v9 + 16);
          v310 = *(_OWORD *)(v9 + 32);
          *(_OWORD *)a2 = *(_OWORD *)v9;
          *(_OWORD *)(v11 + 72) = v311;
          *(_OWORD *)(v11 + 88) = v310;
          *(_QWORD *)(v11 + 104) = v309;
          *(_OWORD *)(v9 + 16) = v306;
          *(_OWORD *)(v9 + 32) = v307;
          *(_QWORD *)(v9 + 48) = v308;
          *(_OWORD *)v9 = v305;
          goto LABEL_116;
        }
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>((__int128 *)v11, (__int128 *)(v11 + 56), (__int128 *)(v11 + 112), (__int128 *)(a2 - 56), a3);
        return;
      case 5uLL:
        a2 = v11 + 56;
        v269 = (__int128 *)(v11 + 112);
        v270 = (__int128 *)(v11 + 168);
        v271 = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>((__int128 *)a1, (__int128 *)(a1 + 56), (__int128 *)(a1 + 112), (__int128 *)(a1 + 168), a3);
        if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v9, a1 + 168, v271))
        {
          v273 = *(_OWORD *)(a1 + 184);
          v354 = *v270;
          v272 = v354;
          v355 = v273;
          v356 = *(_OWORD *)(a1 + 200);
          v274 = v356;
          v357 = *(_QWORD *)(a1 + 216);
          v275 = v357;
          v276 = *(_QWORD *)(v9 + 48);
          v278 = *(_OWORD *)(v9 + 16);
          v277 = *(_OWORD *)(v9 + 32);
          *v270 = *(_OWORD *)v9;
          *(_OWORD *)(a1 + 184) = v278;
          *(_OWORD *)(a1 + 200) = v277;
          *(_QWORD *)(a1 + 216) = v276;
          *(_OWORD *)(v9 + 16) = v273;
          *(_OWORD *)(v9 + 32) = v274;
          *(_QWORD *)(v9 + 48) = v275;
          *(_OWORD *)v9 = v272;
          if ((*a3)((__int128 *)(a1 + 168), (__int128 *)(a1 + 112)))
          {
            v279 = *(_QWORD *)(a1 + 160);
            v281 = *(_OWORD *)(a1 + 128);
            v280 = *(_OWORD *)(a1 + 144);
            v282 = *v269;
            v283 = *(_OWORD *)(a1 + 184);
            *v269 = *v270;
            *(_OWORD *)(a1 + 128) = v283;
            *(_OWORD *)(a1 + 144) = *(_OWORD *)(a1 + 200);
            *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 216);
            *v270 = v282;
            *(_OWORD *)(a1 + 184) = v281;
            *(_OWORD *)(a1 + 200) = v280;
            *(_QWORD *)(a1 + 216) = v279;
            if ((*a3)((__int128 *)(a1 + 112), (__int128 *)(a1 + 56)))
            {
              v284 = *(_QWORD *)(a1 + 104);
              v286 = *(_OWORD *)(a1 + 72);
              v285 = *(_OWORD *)(a1 + 88);
              v287 = *(_OWORD *)a2;
              v288 = *(_OWORD *)(a1 + 128);
              *(_OWORD *)a2 = *v269;
              *(_OWORD *)(a1 + 72) = v288;
              *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 144);
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 160);
              *v269 = v287;
              *(_OWORD *)(a1 + 128) = v286;
              *(_OWORD *)(a1 + 144) = v285;
              *(_QWORD *)(a1 + 160) = v284;
LABEL_116:
              if ((*a3)((__int128 *)a2, (__int128 *)a1))
              {
                v312 = *(_OWORD *)a1;
                v313 = *(_OWORD *)(a1 + 16);
                v314 = *(_OWORD *)(a1 + 32);
                v357 = *(_QWORD *)(a1 + 48);
                v355 = v313;
                v356 = v314;
                v354 = v312;
                v315 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)a1 = *(_OWORD *)a2;
                *(_OWORD *)(a1 + 16) = v315;
                *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
                *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
                v316 = v354;
                v317 = v355;
                v318 = v356;
                *(_QWORD *)(a2 + 48) = v357;
                *(_OWORD *)(a2 + 16) = v317;
                *(_OWORD *)(a2 + 32) = v318;
                *(_OWORD *)a2 = v316;
              }
            }
          }
        }
        return;
      default:
        if (v12 <= 1343)
        {
          v289 = v11 + 56;
          v291 = v11 == a2 || v289 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v291)
            {
              v292 = 0;
              v293 = a1;
              do
              {
                v294 = (__int128 *)v293;
                v293 = v289;
                if ((*a3)((__int128 *)v289, v294))
                {
                  v295 = *(_OWORD *)v289;
                  v296 = *(_OWORD *)(v289 + 16);
                  v297 = *(_OWORD *)(v289 + 32);
                  v357 = *(_QWORD *)(v289 + 48);
                  v355 = v296;
                  v356 = v297;
                  v354 = v295;
                  v298 = v292;
                  while (1)
                  {
                    v299 = a1 + v298;
                    v300 = *(_OWORD *)(a1 + v298 + 16);
                    *(_OWORD *)(v299 + 56) = *(_OWORD *)(a1 + v298);
                    *(_OWORD *)(v299 + 72) = v300;
                    *(_OWORD *)(v299 + 88) = *(_OWORD *)(a1 + v298 + 32);
                    *(_QWORD *)(v299 + 104) = *(_QWORD *)(a1 + v298 + 48);
                    if (!v298)
                      break;
                    v298 -= 56;
                    if (((*a3)(&v354, (__int128 *)(v298 + a1)) & 1) == 0)
                    {
                      v301 = a1 + v298 + 56;
                      goto LABEL_109;
                    }
                  }
                  v301 = a1;
LABEL_109:
                  v302 = v354;
                  v303 = v355;
                  v304 = v356;
                  *(_QWORD *)(v301 + 48) = v357;
                  *(_OWORD *)(v301 + 16) = v303;
                  *(_OWORD *)(v301 + 32) = v304;
                  *(_OWORD *)v301 = v302;
                }
                v289 = v293 + 56;
                v292 += 56;
              }
              while (v293 + 56 != a2);
            }
          }
          else if (!v291)
          {
            v319 = 0;
            v320 = v11 - 56;
            v321 = -2;
            v322 = 1;
            while (1)
            {
              v323 = (__int128 *)(a1 + 56 * v319);
              v319 = v322;
              if ((*a3)((__int128 *)v289, v323))
                break;
LABEL_125:
              v322 = v319 + 1;
              v289 = a1 + 56 * (v319 + 1);
              v320 += 56;
              --v321;
              if (v289 == a2)
                return;
            }
            v324 = *(_OWORD *)v289;
            v325 = *(_OWORD *)(v289 + 16);
            v326 = *(_OWORD *)(v289 + 32);
            v357 = *(_QWORD *)(v289 + 48);
            v355 = v325;
            v356 = v326;
            v354 = v324;
            v9 = v321;
            v327 = v320;
            while (1)
            {
              v328 = *(_OWORD *)(v327 + 72);
              *(_OWORD *)(v327 + 112) = *(_OWORD *)(v327 + 56);
              *(_OWORD *)(v327 + 128) = v328;
              *(_OWORD *)(v327 + 144) = *(_OWORD *)(v327 + 88);
              *(_QWORD *)(v327 + 160) = *(_QWORD *)(v327 + 104);
              if (__CFADD__(v9++, 1))
                break;
              v330 = v327 - 56;
              v331 = ((uint64_t (*)(__int128 *))*a3)(&v354);
              v327 = v330;
              if ((v331 & 1) == 0)
              {
                v332 = v354;
                v333 = v355;
                v334 = v356;
                *(_QWORD *)(v330 + 160) = v357;
                *(_OWORD *)(v330 + 128) = v333;
                *(_OWORD *)(v330 + 144) = v334;
                *(_OWORD *)(v330 + 112) = v332;
                goto LABEL_125;
              }
            }
LABEL_127:
            __break(1u);
LABEL_128:
            v335 = *(_OWORD *)a1;
            v336 = *(_OWORD *)(a1 + 16);
            v337 = *(_OWORD *)(a1 + 32);
            v357 = *(_QWORD *)(a1 + 48);
            v355 = v336;
            v356 = v337;
            v354 = v335;
            v338 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v338;
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
            v339 = v354;
            v340 = v355;
            v341 = v356;
            *(_QWORD *)(a2 + 48) = v357;
            *(_OWORD *)(a2 + 16) = v340;
            *(_OWORD *)(a2 + 32) = v341;
            *(_OWORD *)a2 = v339;
            if ((*a3)((__int128 *)v9, (__int128 *)a2))
            {
              v266 = *(_OWORD *)a2;
              v267 = *(_OWORD *)(a2 + 16);
              v354 = *(_OWORD *)a2;
              v355 = v267;
              v356 = *(_OWORD *)(a2 + 32);
              v342 = v356;
              v357 = *(_QWORD *)(a2 + 48);
              v343 = v357;
              v344 = *(_QWORD *)(v9 + 48);
              v346 = *(_OWORD *)(v9 + 16);
              v345 = *(_OWORD *)(v9 + 32);
              *(_OWORD *)a2 = *(_OWORD *)v9;
              *(_OWORD *)(a2 + 16) = v346;
              *(_OWORD *)(a2 + 32) = v345;
              *(_QWORD *)(a2 + 48) = v344;
              *(_OWORD *)(v9 + 32) = v342;
              *(_QWORD *)(v9 + 48) = v343;
LABEL_88:
              *(_OWORD *)v9 = v266;
              *(_OWORD *)(v9 + 16) = v267;
            }
          }
          return;
        }
        if (!a4)
        {
          if (v11 != a2)
            std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>(v11, (__int128 *)a2, (__int128 *)a2, (unsigned int (**)(uint64_t, char *))a3);
          return;
        }
        v14 = v13 >> 1;
        v15 = v11 + 56 * (v13 >> 1);
        v16 = *a3;
        if ((unint64_t)v12 >= 0x1C01)
        {
          v17 = v16((__int128 *)v15, (__int128 *)v11);
          v18 = (*a3)((__int128 *)(a2 - 56), (__int128 *)v15);
          v347 = a4;
          if ((v17 & 1) != 0)
          {
            if (v18)
            {
              v19 = *(_OWORD *)v11;
              v20 = *(_OWORD *)(v11 + 16);
              v21 = *(_OWORD *)(v11 + 32);
              v357 = *(_QWORD *)(v11 + 48);
              v355 = v20;
              v356 = v21;
              v354 = v19;
              v22 = *(_OWORD *)v9;
              v23 = *(_OWORD *)(a2 - 40);
              v24 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v11 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v11 + 16) = v23;
              *(_OWORD *)(v11 + 32) = v24;
              *(_OWORD *)v11 = v22;
              goto LABEL_20;
            }
            v69 = *(_OWORD *)v11;
            v70 = *(_OWORD *)(v11 + 16);
            v71 = *(_OWORD *)(v11 + 32);
            v357 = *(_QWORD *)(v11 + 48);
            v355 = v70;
            v356 = v71;
            v354 = v69;
            v72 = *(_OWORD *)v15;
            v73 = *(_OWORD *)(v15 + 16);
            v74 = *(_OWORD *)(v15 + 32);
            *(_QWORD *)(v11 + 48) = *(_QWORD *)(v15 + 48);
            *(_OWORD *)(v11 + 16) = v73;
            *(_OWORD *)(v11 + 32) = v74;
            *(_OWORD *)v11 = v72;
            v75 = v354;
            v76 = v355;
            v77 = v356;
            *(_QWORD *)(v15 + 48) = v357;
            *(_OWORD *)(v15 + 16) = v76;
            *(_OWORD *)(v15 + 32) = v77;
            *(_OWORD *)v15 = v75;
            if ((*a3)((__int128 *)(a2 - 56), (__int128 *)v15))
            {
              v78 = *(_OWORD *)v15;
              v79 = *(_OWORD *)(v15 + 16);
              v80 = *(_OWORD *)(v15 + 32);
              v357 = *(_QWORD *)(v15 + 48);
              v355 = v79;
              v356 = v80;
              v354 = v78;
              v81 = *(_OWORD *)v9;
              v82 = *(_OWORD *)(a2 - 40);
              v83 = *(_OWORD *)(a2 - 24);
              *(_QWORD *)(v15 + 48) = *(_QWORD *)(a2 - 8);
              *(_OWORD *)(v15 + 16) = v82;
              *(_OWORD *)(v15 + 32) = v83;
              *(_OWORD *)v15 = v81;
LABEL_20:
              v84 = v354;
              v85 = v355;
              v86 = v356;
              *(_QWORD *)(a2 - 8) = v357;
              *(_OWORD *)(a2 - 40) = v85;
              *(_OWORD *)(a2 - 24) = v86;
              *(_OWORD *)v9 = v84;
            }
          }
          else if (v18)
          {
            v33 = *(_OWORD *)v15;
            v34 = *(_OWORD *)(v15 + 16);
            v35 = *(_OWORD *)(v15 + 32);
            v357 = *(_QWORD *)(v15 + 48);
            v355 = v34;
            v356 = v35;
            v354 = v33;
            v36 = *(_OWORD *)v9;
            v37 = *(_OWORD *)(a2 - 40);
            v38 = *(_OWORD *)(a2 - 24);
            *(_QWORD *)(v15 + 48) = *(_QWORD *)(a2 - 8);
            *(_OWORD *)(v15 + 16) = v37;
            *(_OWORD *)(v15 + 32) = v38;
            *(_OWORD *)v15 = v36;
            v39 = v354;
            v40 = v355;
            v41 = v356;
            *(_QWORD *)(a2 - 8) = v357;
            *(_OWORD *)(a2 - 40) = v40;
            *(_OWORD *)(a2 - 24) = v41;
            *(_OWORD *)v9 = v39;
            if ((*a3)((__int128 *)v15, (__int128 *)v11))
            {
              v42 = *(_OWORD *)v11;
              v43 = *(_OWORD *)(v11 + 16);
              v44 = *(_OWORD *)(v11 + 32);
              v357 = *(_QWORD *)(v11 + 48);
              v355 = v43;
              v356 = v44;
              v354 = v42;
              v45 = *(_OWORD *)v15;
              v46 = *(_OWORD *)(v15 + 16);
              v47 = *(_OWORD *)(v15 + 32);
              *(_QWORD *)(v11 + 48) = *(_QWORD *)(v15 + 48);
              *(_OWORD *)(v11 + 16) = v46;
              *(_OWORD *)(v11 + 32) = v47;
              *(_OWORD *)v11 = v45;
              v48 = v354;
              v49 = v355;
              v50 = v356;
              *(_QWORD *)(v15 + 48) = v357;
              *(_OWORD *)(v15 + 16) = v49;
              *(_OWORD *)(v15 + 32) = v50;
              *(_OWORD *)v15 = v48;
            }
          }
          v87 = (__int128 *)(v11 + 56);
          v88 = a1 + 56 * v14 - 56;
          v89 = (*a3)((__int128 *)v88, (__int128 *)(a1 + 56));
          v90 = (*a3)(v348, (__int128 *)v88);
          if ((v89 & 1) != 0)
          {
            if (v90)
            {
              v92 = *(_OWORD *)(a1 + 72);
              v354 = *v87;
              v91 = v354;
              v355 = v92;
              v356 = *(_OWORD *)(a1 + 88);
              v93 = v356;
              v357 = *(_QWORD *)(a1 + 104);
              v94 = v357;
              v95 = *(_QWORD *)(a2 - 64);
              v97 = *(_OWORD *)(a2 - 96);
              v96 = *(_OWORD *)(a2 - 80);
              *v87 = *v348;
              *(_OWORD *)(a1 + 72) = v97;
              *(_OWORD *)(a1 + 88) = v96;
              *(_QWORD *)(a1 + 104) = v95;
              *(_OWORD *)(a2 - 96) = v92;
              *(_OWORD *)(a2 - 80) = v93;
              *(_QWORD *)(a2 - 64) = v94;
              *v348 = v91;
            }
            else
            {
              v133 = *(_OWORD *)(a1 + 72);
              v354 = *v87;
              v132 = v354;
              v355 = v133;
              v356 = *(_OWORD *)(a1 + 88);
              v134 = v356;
              v357 = *(_QWORD *)(a1 + 104);
              v135 = v357;
              v136 = *(_QWORD *)(a1 + 56 * v14 - 8);
              v138 = *(_OWORD *)(a1 + 56 * v14 - 40);
              v137 = *(_OWORD *)(a1 + 56 * v14 - 24);
              *v87 = *(_OWORD *)v88;
              *(_OWORD *)(a1 + 72) = v138;
              *(_OWORD *)(a1 + 88) = v137;
              *(_QWORD *)(a1 + 104) = v136;
              *(_OWORD *)(a1 + 56 * v14 - 40) = v133;
              *(_OWORD *)(a1 + 56 * v14 - 24) = v134;
              *(_QWORD *)(a1 + 56 * v14 - 8) = v135;
              *(_OWORD *)v88 = v132;
              if ((*a3)(v348, (__int128 *)(a1 + 56 * v14 - 56)))
              {
                v139 = *(_OWORD *)v88;
                v140 = *(_OWORD *)(a1 + 56 * v14 - 40);
                v141 = *(_OWORD *)(a1 + 56 * v14 - 24);
                v357 = *(_QWORD *)(a1 + 56 * v14 - 8);
                v355 = v140;
                v356 = v141;
                v354 = v139;
                v142 = *v348;
                v143 = *(_OWORD *)(a2 - 96);
                v144 = *(_OWORD *)(a2 - 80);
                *(_QWORD *)(a1 + 56 * v14 - 8) = *(_QWORD *)(a2 - 64);
                *(_OWORD *)(a1 + 56 * v14 - 40) = v143;
                *(_OWORD *)(a1 + 56 * v14 - 24) = v144;
                *(_OWORD *)v88 = v142;
                v145 = v354;
                v146 = v355;
                v147 = v356;
                *(_QWORD *)(a2 - 64) = v357;
                *(_OWORD *)(a2 - 96) = v146;
                *(_OWORD *)(a2 - 80) = v147;
                *v348 = v145;
              }
            }
          }
          else if (v90)
          {
            v98 = *(_OWORD *)v88;
            v99 = *(_OWORD *)(a1 + 56 * v14 - 40);
            v100 = *(_OWORD *)(a1 + 56 * v14 - 24);
            v357 = *(_QWORD *)(a1 + 56 * v14 - 8);
            v355 = v99;
            v356 = v100;
            v354 = v98;
            v101 = *v348;
            v102 = *(_OWORD *)(a2 - 96);
            v103 = *(_OWORD *)(a2 - 80);
            *(_QWORD *)(a1 + 56 * v14 - 8) = *(_QWORD *)(a2 - 64);
            *(_OWORD *)(a1 + 56 * v14 - 40) = v102;
            *(_OWORD *)(a1 + 56 * v14 - 24) = v103;
            *(_OWORD *)v88 = v101;
            v104 = v354;
            v105 = v355;
            v106 = v356;
            *(_QWORD *)(a2 - 64) = v357;
            *(_OWORD *)(a2 - 96) = v105;
            *(_OWORD *)(a2 - 80) = v106;
            *v348 = v104;
            if ((*a3)((__int128 *)(a1 + 56 * v14 - 56), (__int128 *)(a1 + 56)))
            {
              v108 = *(_OWORD *)(a1 + 72);
              v354 = *v87;
              v107 = v354;
              v355 = v108;
              v356 = *(_OWORD *)(a1 + 88);
              v109 = v356;
              v357 = *(_QWORD *)(a1 + 104);
              v110 = v357;
              v111 = *(_QWORD *)(a1 + 56 * v14 - 8);
              v113 = *(_OWORD *)(a1 + 56 * v14 - 40);
              v112 = *(_OWORD *)(a1 + 56 * v14 - 24);
              *v87 = *(_OWORD *)v88;
              *(_OWORD *)(a1 + 72) = v113;
              *(_OWORD *)(a1 + 88) = v112;
              *(_QWORD *)(a1 + 104) = v111;
              *(_OWORD *)(a1 + 56 * v14 - 40) = v108;
              *(_OWORD *)(a1 + 56 * v14 - 24) = v109;
              *(_QWORD *)(a1 + 56 * v14 - 8) = v110;
              *(_OWORD *)v88 = v107;
            }
          }
          v148 = (__int128 *)(a1 + 112);
          v149 = a1 + 56 * v14 + 56;
          v150 = (*a3)((__int128 *)v149, (__int128 *)(a1 + 112));
          v151 = (*a3)((__int128 *)(a2 - 168), (__int128 *)v149);
          if ((v150 & 1) != 0)
          {
            if (v151)
            {
              v152 = *v148;
              v153 = *(_OWORD *)(a1 + 128);
              v354 = *v148;
              v355 = v153;
              v356 = *(_OWORD *)(a1 + 144);
              v154 = v356;
              v357 = *(_QWORD *)(a1 + 160);
              v155 = v357;
              v156 = *(_QWORD *)(a2 - 120);
              v158 = *(_OWORD *)(a2 - 152);
              v157 = *(_OWORD *)(a2 - 136);
              *v148 = *v10;
              *(_OWORD *)(a1 + 128) = v158;
              *(_OWORD *)(a1 + 144) = v157;
              *(_QWORD *)(a1 + 160) = v156;
              *(_OWORD *)(a2 - 136) = v154;
              *(_QWORD *)(a2 - 120) = v155;
              goto LABEL_40;
            }
            v176 = *(_OWORD *)(a1 + 128);
            v354 = *v148;
            v175 = v354;
            v355 = v176;
            v356 = *(_OWORD *)(a1 + 144);
            v177 = v356;
            v357 = *(_QWORD *)(a1 + 160);
            v178 = v357;
            v179 = *(_QWORD *)(v149 + 48);
            v181 = *(_OWORD *)(v149 + 16);
            v180 = *(_OWORD *)(v149 + 32);
            *v148 = *(_OWORD *)v149;
            *(_OWORD *)(a1 + 128) = v181;
            *(_OWORD *)(a1 + 144) = v180;
            *(_QWORD *)(a1 + 160) = v179;
            *(_OWORD *)(v149 + 16) = v176;
            *(_OWORD *)(v149 + 32) = v177;
            *(_QWORD *)(v149 + 48) = v178;
            *(_OWORD *)v149 = v175;
            if ((*a3)((__int128 *)(a2 - 168), (__int128 *)v149))
            {
              v182 = *(_OWORD *)v149;
              v183 = *(_OWORD *)(v149 + 16);
              v184 = *(_OWORD *)(v149 + 32);
              v357 = *(_QWORD *)(v149 + 48);
              v355 = v183;
              v356 = v184;
              v354 = v182;
              v185 = *v10;
              v186 = *(_OWORD *)(a2 - 152);
              v187 = *(_OWORD *)(a2 - 136);
              *(_QWORD *)(v149 + 48) = *(_QWORD *)(a2 - 120);
              *(_OWORD *)(v149 + 16) = v186;
              *(_OWORD *)(v149 + 32) = v187;
              *(_OWORD *)v149 = v185;
              v152 = v354;
              v153 = v355;
              v188 = v356;
              *(_QWORD *)(a2 - 120) = v357;
              *(_OWORD *)(a2 - 136) = v188;
LABEL_40:
              *v10 = v152;
              *(_OWORD *)(a2 - 152) = v153;
            }
          }
          else if (v151)
          {
            v159 = *(_OWORD *)v149;
            v160 = *(_OWORD *)(v149 + 16);
            v161 = *(_OWORD *)(v149 + 32);
            v357 = *(_QWORD *)(v149 + 48);
            v355 = v160;
            v356 = v161;
            v354 = v159;
            v162 = *v10;
            v163 = *(_OWORD *)(a2 - 152);
            v164 = *(_OWORD *)(a2 - 136);
            *(_QWORD *)(v149 + 48) = *(_QWORD *)(a2 - 120);
            *(_OWORD *)(v149 + 16) = v163;
            *(_OWORD *)(v149 + 32) = v164;
            *(_OWORD *)v149 = v162;
            v165 = v354;
            v166 = v355;
            v167 = v356;
            *(_QWORD *)(a2 - 120) = v357;
            *(_OWORD *)(a2 - 152) = v166;
            *(_OWORD *)(a2 - 136) = v167;
            *v10 = v165;
            if ((*a3)((__int128 *)v149, (__int128 *)(a1 + 112)))
            {
              v169 = *(_OWORD *)(a1 + 128);
              v354 = *v148;
              v168 = v354;
              v355 = v169;
              v356 = *(_OWORD *)(a1 + 144);
              v170 = v356;
              v357 = *(_QWORD *)(a1 + 160);
              v171 = v357;
              v172 = *(_QWORD *)(v149 + 48);
              v174 = *(_OWORD *)(v149 + 16);
              v173 = *(_OWORD *)(v149 + 32);
              *v148 = *(_OWORD *)v149;
              *(_OWORD *)(a1 + 128) = v174;
              *(_OWORD *)(a1 + 144) = v173;
              *(_QWORD *)(a1 + 160) = v172;
              *(_OWORD *)(v149 + 16) = v169;
              *(_OWORD *)(v149 + 32) = v170;
              *(_QWORD *)(v149 + 48) = v171;
              *(_OWORD *)v149 = v168;
            }
          }
          v189 = (*a3)((__int128 *)v15, (__int128 *)v88);
          v190 = (*a3)((__int128 *)v149, (__int128 *)v15);
          if ((v189 & 1) != 0)
          {
            if (v190)
            {
              v191 = *(_OWORD *)v88;
              v192 = *(_OWORD *)(v88 + 16);
              v193 = *(_OWORD *)(v88 + 32);
              v357 = *(_QWORD *)(v88 + 48);
              v355 = v192;
              v356 = v193;
              v354 = v191;
              v194 = *(_OWORD *)(v149 + 16);
              *(_OWORD *)v88 = *(_OWORD *)v149;
              *(_OWORD *)(v88 + 16) = v194;
              *(_OWORD *)(v88 + 32) = *(_OWORD *)(v149 + 32);
              *(_QWORD *)(v88 + 48) = *(_QWORD *)(v149 + 48);
              goto LABEL_49;
            }
            v209 = *(_OWORD *)v88;
            v210 = *(_OWORD *)(v88 + 16);
            v211 = *(_OWORD *)(v88 + 32);
            v357 = *(_QWORD *)(v88 + 48);
            v355 = v210;
            v356 = v211;
            v354 = v209;
            v212 = *(_OWORD *)(v15 + 16);
            *(_OWORD *)v88 = *(_OWORD *)v15;
            *(_OWORD *)(v88 + 16) = v212;
            *(_OWORD *)(v88 + 32) = *(_OWORD *)(v15 + 32);
            *(_QWORD *)(v88 + 48) = *(_QWORD *)(v15 + 48);
            v213 = v357;
            v214 = v356;
            v215 = v354;
            *(_OWORD *)(v15 + 16) = v355;
            *(_OWORD *)(v15 + 32) = v214;
            *(_QWORD *)(v15 + 48) = v213;
            *(_OWORD *)v15 = v215;
            if ((*a3)((__int128 *)v149, (__int128 *)v15))
            {
              v216 = *(_OWORD *)v15;
              v217 = *(_OWORD *)(v15 + 16);
              v218 = *(_OWORD *)(v15 + 32);
              v357 = *(_QWORD *)(v15 + 48);
              v355 = v217;
              v356 = v218;
              v354 = v216;
              v219 = *(_OWORD *)(v149 + 16);
              *(_OWORD *)v15 = *(_OWORD *)v149;
              *(_OWORD *)(v15 + 16) = v219;
              *(_OWORD *)(v15 + 32) = *(_OWORD *)(v149 + 32);
              *(_QWORD *)(v15 + 48) = *(_QWORD *)(v149 + 48);
LABEL_49:
              v220 = v357;
              v221 = v356;
              v222 = v354;
              *(_OWORD *)(v149 + 16) = v355;
              *(_OWORD *)(v149 + 32) = v221;
              *(_QWORD *)(v149 + 48) = v220;
              *(_OWORD *)v149 = v222;
            }
          }
          else if (v190)
          {
            v195 = *(_OWORD *)v15;
            v196 = *(_OWORD *)(v15 + 16);
            v197 = *(_OWORD *)(v15 + 32);
            v357 = *(_QWORD *)(v15 + 48);
            v355 = v196;
            v356 = v197;
            v354 = v195;
            v198 = *(_OWORD *)(v149 + 16);
            *(_OWORD *)v15 = *(_OWORD *)v149;
            *(_OWORD *)(v15 + 16) = v198;
            *(_OWORD *)(v15 + 32) = *(_OWORD *)(v149 + 32);
            *(_QWORD *)(v15 + 48) = *(_QWORD *)(v149 + 48);
            v199 = v357;
            v200 = v356;
            v201 = v354;
            *(_OWORD *)(v149 + 16) = v355;
            *(_OWORD *)(v149 + 32) = v200;
            *(_QWORD *)(v149 + 48) = v199;
            *(_OWORD *)v149 = v201;
            if ((*a3)((__int128 *)v15, (__int128 *)v88))
            {
              v202 = *(_OWORD *)v88;
              v203 = *(_OWORD *)(v88 + 16);
              v204 = *(_OWORD *)(v88 + 32);
              v357 = *(_QWORD *)(v88 + 48);
              v355 = v203;
              v356 = v204;
              v354 = v202;
              v205 = *(_OWORD *)(v15 + 16);
              *(_OWORD *)v88 = *(_OWORD *)v15;
              *(_OWORD *)(v88 + 16) = v205;
              *(_OWORD *)(v88 + 32) = *(_OWORD *)(v15 + 32);
              *(_QWORD *)(v88 + 48) = *(_QWORD *)(v15 + 48);
              v206 = v357;
              v207 = v356;
              v208 = v354;
              *(_OWORD *)(v15 + 16) = v355;
              *(_OWORD *)(v15 + 32) = v207;
              *(_QWORD *)(v15 + 48) = v206;
              *(_OWORD *)v15 = v208;
            }
          }
          v223 = *(_OWORD *)a1;
          v224 = *(_OWORD *)(a1 + 16);
          v225 = *(_OWORD *)(a1 + 32);
          v357 = *(_QWORD *)(a1 + 48);
          v355 = v224;
          v356 = v225;
          v354 = v223;
          v226 = *(_OWORD *)v15;
          v227 = *(_OWORD *)(v15 + 16);
          v228 = *(_OWORD *)(v15 + 32);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v15 + 48);
          *(_OWORD *)(a1 + 16) = v227;
          *(_OWORD *)(a1 + 32) = v228;
          *(_OWORD *)a1 = v226;
          v229 = v354;
          v230 = v355;
          v231 = v356;
          *(_QWORD *)(v15 + 48) = v357;
          *(_OWORD *)(v15 + 16) = v230;
          *(_OWORD *)(v15 + 32) = v231;
          *(_OWORD *)v15 = v229;
          a4 = v347;
          goto LABEL_51;
        }
        v25 = v16((__int128 *)v11, (__int128 *)v15);
        v26 = (*a3)((__int128 *)(a2 - 56), (__int128 *)v11);
        if ((v25 & 1) != 0)
        {
          if (v26)
          {
            v27 = *(_OWORD *)v15;
            v28 = *(_OWORD *)(v15 + 16);
            v29 = *(_OWORD *)(v15 + 32);
            v357 = *(_QWORD *)(v15 + 48);
            v355 = v28;
            v356 = v29;
            v354 = v27;
            v30 = *(_OWORD *)v9;
            v31 = *(_OWORD *)(a2 - 40);
            v32 = *(_OWORD *)(a2 - 24);
            *(_QWORD *)(v15 + 48) = *(_QWORD *)(a2 - 8);
            *(_OWORD *)(v15 + 16) = v31;
            *(_OWORD *)(v15 + 32) = v32;
            *(_OWORD *)v15 = v30;
          }
          else
          {
            v114 = *(_OWORD *)v15;
            v115 = *(_OWORD *)(v15 + 16);
            v116 = *(_OWORD *)(v15 + 32);
            v357 = *(_QWORD *)(v15 + 48);
            v355 = v115;
            v356 = v116;
            v354 = v114;
            v117 = *(_OWORD *)v11;
            v118 = *(_OWORD *)(v11 + 16);
            v119 = *(_OWORD *)(v11 + 32);
            *(_QWORD *)(v15 + 48) = *(_QWORD *)(v11 + 48);
            *(_OWORD *)(v15 + 16) = v118;
            *(_OWORD *)(v15 + 32) = v119;
            *(_OWORD *)v15 = v117;
            v120 = v354;
            v121 = v355;
            v122 = v356;
            *(_QWORD *)(v11 + 48) = v357;
            *(_OWORD *)(v11 + 16) = v121;
            *(_OWORD *)(v11 + 32) = v122;
            *(_OWORD *)v11 = v120;
            if (!(*a3)((__int128 *)(a2 - 56), (__int128 *)v11))
              goto LABEL_51;
            v123 = *(_OWORD *)v11;
            v124 = *(_OWORD *)(v11 + 16);
            v125 = *(_OWORD *)(v11 + 32);
            v357 = *(_QWORD *)(v11 + 48);
            v355 = v124;
            v356 = v125;
            v354 = v123;
            v126 = *(_OWORD *)v9;
            v127 = *(_OWORD *)(a2 - 40);
            v128 = *(_OWORD *)(a2 - 24);
            *(_QWORD *)(v11 + 48) = *(_QWORD *)(a2 - 8);
            *(_OWORD *)(v11 + 16) = v127;
            *(_OWORD *)(v11 + 32) = v128;
            *(_OWORD *)v11 = v126;
          }
          v129 = v354;
          v130 = v355;
          v131 = v356;
          *(_QWORD *)(a2 - 8) = v357;
          *(_OWORD *)(a2 - 40) = v130;
          *(_OWORD *)(a2 - 24) = v131;
          *(_OWORD *)v9 = v129;
        }
        else if (v26)
        {
          v51 = *(_OWORD *)v11;
          v52 = *(_OWORD *)(v11 + 16);
          v53 = *(_OWORD *)(v11 + 32);
          v357 = *(_QWORD *)(v11 + 48);
          v355 = v52;
          v356 = v53;
          v354 = v51;
          v54 = *(_OWORD *)v9;
          v55 = *(_OWORD *)(a2 - 40);
          v56 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v11 + 48) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v11 + 16) = v55;
          *(_OWORD *)(v11 + 32) = v56;
          *(_OWORD *)v11 = v54;
          v57 = v354;
          v58 = v355;
          v59 = v356;
          *(_QWORD *)(a2 - 8) = v357;
          *(_OWORD *)(a2 - 40) = v58;
          *(_OWORD *)(a2 - 24) = v59;
          *(_OWORD *)v9 = v57;
          if ((*a3)((__int128 *)v11, (__int128 *)v15))
          {
            v60 = *(_OWORD *)v15;
            v61 = *(_OWORD *)(v15 + 16);
            v62 = *(_OWORD *)(v15 + 32);
            v357 = *(_QWORD *)(v15 + 48);
            v355 = v61;
            v356 = v62;
            v354 = v60;
            v63 = *(_OWORD *)v11;
            v64 = *(_OWORD *)(v11 + 16);
            v65 = *(_OWORD *)(v11 + 32);
            *(_QWORD *)(v15 + 48) = *(_QWORD *)(v11 + 48);
            *(_OWORD *)(v15 + 16) = v64;
            *(_OWORD *)(v15 + 32) = v65;
            *(_OWORD *)v15 = v63;
            v66 = v354;
            v67 = v355;
            v68 = v356;
            *(_QWORD *)(v11 + 48) = v357;
            *(_OWORD *)(v11 + 16) = v67;
            *(_OWORD *)(v11 + 32) = v68;
            *(_OWORD *)v11 = v66;
          }
        }
LABEL_51:
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 56), (__int128 *)a1) & 1) == 0)
        {
          v11 = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> *,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&)>((__int128 *)a1, a2, (uint64_t (**)(__int128 *, uint64_t))a3);
          a5 = 0;
          continue;
        }
        v232 = 0;
        v233 = *(_OWORD *)a1;
        v234 = *(_OWORD *)(a1 + 16);
        v235 = *(_OWORD *)(a1 + 32);
        v353 = *(_QWORD *)(a1 + 48);
        v351 = v234;
        v352 = v235;
        v350 = v233;
        do
        {
          v236 = a1 + v232 + 56;
          if (v236 == a2)
            goto LABEL_127;
          v232 += 56;
        }
        while (((*a3)((__int128 *)v236, &v350) & 1) != 0);
        v237 = a1 + v232;
        v238 = (__int128 *)a2;
        if (v232 != 56)
        {
          while (v238 != (__int128 *)a1)
          {
            v238 = (__int128 *)((char *)v238 - 56);
            if ((*a3)(v238, &v350))
              goto LABEL_63;
          }
          goto LABEL_127;
        }
        v238 = (__int128 *)a2;
        do
        {
          if (v237 >= (unint64_t)v238)
            break;
          v238 = (__int128 *)((char *)v238 - 56);
        }
        while (((*a3)(v238, &v350) & 1) == 0);
LABEL_63:
        if (v237 >= (unint64_t)v238)
        {
          v250 = v237 - 56;
        }
        else
        {
          v239 = a1 + v232;
          v240 = v238;
          do
          {
            v241 = *(_OWORD *)v239;
            v242 = *(_OWORD *)(v239 + 16);
            v243 = *(_OWORD *)(v239 + 32);
            v357 = *(_QWORD *)(v239 + 48);
            v355 = v242;
            v356 = v243;
            v354 = v241;
            v244 = *v240;
            v245 = v240[1];
            v246 = v240[2];
            *(_QWORD *)(v239 + 48) = *((_QWORD *)v240 + 6);
            *(_OWORD *)(v239 + 16) = v245;
            *(_OWORD *)(v239 + 32) = v246;
            *(_OWORD *)v239 = v244;
            v247 = v354;
            v248 = v355;
            v249 = v356;
            *((_QWORD *)v240 + 6) = v357;
            v240[1] = v248;
            v240[2] = v249;
            *v240 = v247;
            do
            {
              v239 += 56;
              if (v239 == a2)
                goto LABEL_127;
            }
            while (((*a3)((__int128 *)v239, &v350) & 1) != 0);
            do
            {
              if (v240 == (__int128 *)a1)
                goto LABEL_127;
              v240 = (__int128 *)((char *)v240 - 56);
            }
            while (!(*a3)(v240, &v350));
          }
          while (v239 < (unint64_t)v240);
          v250 = v239 - 56;
        }
        if (v250 != a1)
        {
          v251 = *(_OWORD *)v250;
          v252 = *(_OWORD *)(v250 + 16);
          v253 = *(_OWORD *)(v250 + 32);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v250 + 48);
          *(_OWORD *)(a1 + 16) = v252;
          *(_OWORD *)(a1 + 32) = v253;
          *(_OWORD *)a1 = v251;
        }
        v254 = v350;
        v255 = v351;
        v256 = v352;
        *(_QWORD *)(v250 + 48) = v353;
        *(_OWORD *)(v250 + 16) = v255;
        *(_OWORD *)(v250 + 32) = v256;
        *(_OWORD *)v250 = v254;
        if (v237 < (unint64_t)v238)
        {
LABEL_78:
          std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*,false>(a1, v250, a3, a4, a5 & 1);
          a5 = 0;
          v11 = v250 + 56;
          continue;
        }
        v257 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>(a1, v250, a3);
        v11 = v250 + 56;
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&,WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *> const&),WebCore::PODInterval<WTF::MediaTime,WebCore::TextTrackCue *>*>(v250 + 56, a2, a3))
        {
          if (v257)
            continue;
          goto LABEL_78;
        }
        a2 = v250;
        if (!v257)
          goto LABEL_1;
        return;
    }
  }
}

  v250 = a2 - 3;
  v242 = a2 - 1;
  v244 = a2 - 9;
  v245 = a2 - 6;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(v250, v9))
        {
          v251 = *(_OWORD *)v9;
          v146 = *v250;
          *(_QWORD *)(v9 + 5) = *(uint64_t *)((char *)a2 - 19);
          *(_QWORD *)v9 = v146;
          v147 = v251;
          *(uint64_t *)((char *)a2 - 19) = *(_QWORD *)((char *)&v251 + 5);
          *v250 = v147;
          v148 = *(_QWORD *)(v9 + 16);
          *(_QWORD *)(v9 + 16) = *(a2 - 1);
          *(a2 - 1) = v148;
        }
        return;
      case 3uLL:
        a4 = (uint64_t *)(v9 + 24);
        v149 = (*a3)((uint64_t *)(v9 + 24), v9);
        v150 = (*a3)(v250, v9 + 24);
        if ((v149 & 1) != 0)
        {
          if (!v150)
            goto LABEL_253;
          v151 = (uint64_t *)(v9 + 16);
          v251 = *(_OWORD *)v9;
          v152 = *v250;
          *(_QWORD *)(v9 + 5) = *(uint64_t *)((char *)a2 - 19);
          *(_QWORD *)v9 = v152;
          v153 = v251;
          *(uint64_t *)((char *)a2 - 19) = *(_QWORD *)((char *)&v251 + 5);
          *v250 = v153;
          goto LABEL_255;
        }
        if (v150)
        {
          v251 = *(_OWORD *)a4;
          v214 = *v250;
          *(_QWORD *)(v9 + 29) = *(uint64_t *)((char *)a2 - 19);
          *a4 = v214;
          v215 = v251;
          *(uint64_t *)((char *)a2 - 19) = *(_QWORD *)((char *)&v251 + 5);
          *v250 = v215;
          v216 = *(_QWORD *)(v9 + 40);
          v242 = (uint64_t *)(v9 + 40);
          *(_QWORD *)(v9 + 40) = *(a2 - 1);
          *(a2 - 1) = v216;
          if ((*a3)((uint64_t *)(v9 + 24), v9))
          {
            v251 = *(_OWORD *)v9;
            *(_QWORD *)v9 = *a4;
            *(_QWORD *)(v9 + 5) = *(_QWORD *)(v9 + 29);
            *a4 = v251;
            *(_QWORD *)(v9 + 29) = *(_QWORD *)((char *)&v251 + 5);
            v151 = (uint64_t *)(v9 + 16);
            goto LABEL_255;
          }
        }
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(v9, (_QWORD *)(v9 + 24), (_QWORD *)(v9 + 48), v250, (uint64_t (**)(_QWORD *, uint64_t))a3);
        return;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(v9, (_QWORD *)(v9 + 24), (_QWORD *)(v9 + 48), (_QWORD *)(v9 + 72), v250, a3);
        return;
      default:
        if (v10 > 575)
        {
          if (!a4)
          {
            if ((uint64_t *)v9 == a2)
              return;
            v170 = (v11 - 2) >> 1;
            v250 = (uint64_t *)v170;
            do
            {
              v171 = v170;
              if ((uint64_t)v250 >= v170)
              {
                v248 = v170;
                v172 = (2 * v170) | 1;
                v173 = (_QWORD *)(a1 + 24 * v172);
                v174 = 2 * v170 + 2;
                if (v174 < (uint64_t)v11 && (*a3)((uint64_t *)(a1 + 24 * v172), (uint64_t)(v173 + 3)))
                {
                  v173 += 3;
                  v172 = v174;
                }
                v171 = v248;
                a4 = (uint64_t *)(a1 + 24 * v248);
                if ((((uint64_t (*)(uint64_t *, uint64_t *))*a3)(v173, a4) & 1) == 0)
                {
                  v251 = *(_OWORD *)a4;
                  v175 = a1 + 24 * v248;
                  v176 = *(_DWORD **)(v175 + 16);
                  *(_QWORD *)(v175 + 16) = 0;
                  v252 = v176;
                  do
                  {
                    v177 = v173;
                    v178 = *v173;
                    *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)((char *)v173 + 5);
                    *a4 = v178;
                    v179 = v173[2];
                    v173[2] = 0;
                    v180 = (_DWORD *)a4[2];
                    a4[2] = v179;
                    if (v180)
                    {
                      if (v180[6] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v180 + 72))(v180);
                      else
                        --v180[6];
                    }
                    if ((uint64_t)v250 < v172)
                      break;
                    v181 = (2 * v172) | 1;
                    v173 = (_QWORD *)(a1 + 24 * v181);
                    v182 = 2 * v172 + 2;
                    if (v182 < (uint64_t)v11 && (*a3)((uint64_t *)(a1 + 24 * v181), (uint64_t)(v173 + 3)))
                    {
                      v173 += 3;
                      v181 = v182;
                    }
                    a4 = v177;
                    v172 = v181;
                  }
                  while (!(*a3)(v173, (uint64_t)&v251));
                  v183 = v251;
                  *(uint64_t *)((char *)v177 + 5) = *(_QWORD *)((char *)&v251 + 5);
                  *v177 = v183;
                  v184 = v252;
                  v252 = 0;
                  v185 = (_DWORD *)v177[2];
                  v177[2] = (uint64_t)v184;
                  if (v185)
                  {
                    if (v185[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v185 + 72))(v185);
                    else
                      --v185[6];
                  }
                  v186 = v252;
                  v252 = 0;
                  v171 = v248;
                  if (v186)
                  {
                    if (v186[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v186 + 72))(v186);
                    else
                      --v186[6];
                  }
                }
              }
              v170 = v171 - 1;
            }
            while (v171);
            v187 = v10 / 0x18uLL;
            while (1)
            {
              if (v187 <= 0)
                goto LABEL_252;
              if (v187 == 1)
                return;
              a4 = a2;
              v250 = (uint64_t *)(v187 - 1);
              v188 = 0;
              v253 = *(_OWORD *)a1;
              v249 = *(_QWORD *)(a1 + 16);
              *(_QWORD *)(a1 + 16) = 0;
              v189 = (uint64_t *)a1;
              do
              {
                v190 = v189;
                v189 += 3 * v188 + 3;
                v191 = 2 * v188;
                v188 = (2 * v188) | 1;
                v192 = v191 + 2;
                if (v191 + 2 < v187 && (*a3)(v189, (uint64_t)(v189 + 3)))
                {
                  v189 += 3;
                  v188 = v192;
                }
                v193 = *v189;
                *(_QWORD *)((char *)v190 + 5) = *(uint64_t *)((char *)v189 + 5);
                *v190 = v193;
                v194 = v189[2];
                v189[2] = 0;
                v195 = (_DWORD *)v190[2];
                v190[2] = v194;
                if (v195)
                {
                  if (v195[6] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v195 + 72))(v195);
                  else
                    --v195[6];
                }
              }
              while (v188 <= (uint64_t)((unint64_t)(v187 - 2) >> 1));
              a2 -= 3;
              if (v189 == a4 - 3)
              {
                v212 = v253;
                *(uint64_t *)((char *)v189 + 5) = *(_QWORD *)((char *)&v253 + 5);
                *v189 = v212;
                v210 = (_DWORD *)v189[2];
                v189[2] = v249;
                if (!v210)
                  goto LABEL_224;
                goto LABEL_222;
              }
              v196 = *a2;
              *(uint64_t *)((char *)v189 + 5) = *(uint64_t *)((char *)a4 - 19);
              *v189 = v196;
              v197 = *(a4 - 1);
              *(a4 - 1) = 0;
              v198 = (_DWORD *)v189[2];
              v189[2] = v197;
              if (v198)
              {
                if (v198[6] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v198 + 72))(v198);
                else
                  --v198[6];
              }
              v199 = v253;
              *(uint64_t *)((char *)a4 - 19) = *(_QWORD *)((char *)&v253 + 5);
              *a2 = v199;
              v200 = (_DWORD *)*(a4 - 1);
              *(a4 - 1) = v249;
              if (v200)
              {
                if (v200[6] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v200 + 72))(v200);
                else
                  --v200[6];
              }
              v201 = (uint64_t)v189 - a1 + 24;
              if (v201 >= 25)
              {
                v202 = (v201 / 0x18uLL - 2) >> 1;
                a4 = (uint64_t *)(a1 + 24 * v202);
                if ((*a3)(a4, (uint64_t)v189))
                  break;
              }
LABEL_224:
              if ((unint64_t)v187-- <= 2)
                return;
            }
            v251 = *(_OWORD *)v189;
            v203 = (_DWORD *)v189[2];
            v189[2] = 0;
            v252 = v203;
            while (1)
            {
              v204 = a4;
              v205 = *a4;
              *(uint64_t *)((char *)v189 + 5) = *(uint64_t *)((char *)a4 + 5);
              *v189 = v205;
              v206 = a4[2];
              a4[2] = 0;
              v207 = (_DWORD *)v189[2];
              v189[2] = v206;
              if (!v207)
                goto LABEL_213;
              if (v207[6] != 1)
                break;
              (*(void (**)(_DWORD *))(*(_QWORD *)v207 + 72))(v207);
              if (!v202)
              {
LABEL_217:
                v208 = v251;
                *(uint64_t *)((char *)v204 + 5) = *(_QWORD *)((char *)&v251 + 5);
                *v204 = v208;
                v209 = v252;
                v252 = 0;
                v210 = (_DWORD *)v204[2];
                v204[2] = (uint64_t)v209;
                if (!v210)
                  goto LABEL_224;
                v211 = v210[6] - 1;
                if (v210[6] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v210 + 72))(v210);
                  v210 = v252;
                  v252 = 0;
                  if (!v210)
                    goto LABEL_224;
LABEL_222:
                  v211 = v210[6] - 1;
                  if (v210[6] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v210 + 72))(v210);
                    goto LABEL_224;
                  }
                }
                v210[6] = v211;
                goto LABEL_224;
              }
LABEL_214:
              v202 = (v202 - 1) >> 1;
              a4 = (uint64_t *)(a1 + 24 * v202);
              v189 = v204;
              if ((((uint64_t (*)(uint64_t *, __int128 *))*a3)(a4, &v251) & 1) == 0)
                goto LABEL_217;
            }
            --v207[6];
LABEL_213:
            if (!v202)
              goto LABEL_217;
            goto LABEL_214;
          }
          v247 = a4;
          v12 = v11 >> 1;
          v13 = (uint64_t *)(v9 + 24 * (v11 >> 1));
          v14 = *a3;
          if ((unint64_t)v10 >= 0xC01)
          {
            v15 = v14((uint64_t *)(a1 + 24 * (v11 >> 1)), a1);
            v16 = (*a3)(v250, (uint64_t)v13);
            if ((v15 & 1) != 0)
            {
              if (v16)
              {
                v17 = (_QWORD *)(a1 + 16);
                v251 = *(_OWORD *)a1;
                v18 = a2 - 3;
                v19 = *v250;
                *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 - 19);
                *(_QWORD *)a1 = v19;
              }
              else
              {
                v251 = *(_OWORD *)a1;
                v38 = *v13;
                *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)v13 + 5);
                *(_QWORD *)a1 = v38;
                v39 = v251;
                *(uint64_t *)((char *)v13 + 5) = *(_QWORD *)((char *)&v251 + 5);
                v40 = *(_QWORD *)(a1 + 16);
                *v13 = v39;
                v17 = (_QWORD *)(a1 + 16 + 24 * v12);
                *(_QWORD *)(a1 + 16) = *v17;
                *v17 = v40;
                if (!(*a3)(v250, (uint64_t)v13))
                  goto LABEL_22;
                v251 = *(_OWORD *)v13;
                v18 = a2 - 3;
                v41 = *v250;
                *(uint64_t *)((char *)v13 + 5) = *(uint64_t *)((char *)a2 - 19);
                *v13 = v41;
              }
              v42 = v251;
              *(_QWORD *)((char *)v18 + 5) = *(_QWORD *)((char *)&v251 + 5);
              *v18 = v42;
              v28 = a2 - 1;
            }
            else
            {
              if (!v16)
                goto LABEL_22;
              v251 = *(_OWORD *)v13;
              v25 = *v250;
              *(uint64_t *)((char *)v13 + 5) = *(uint64_t *)((char *)a2 - 19);
              *v13 = v25;
              v26 = v251;
              *(uint64_t *)((char *)a2 - 19) = *(_QWORD *)((char *)&v251 + 5);
              *v250 = v26;
              v27 = a1 + 24 * v12;
              v29 = *(_QWORD *)(v27 + 16);
              v28 = (_QWORD *)(v27 + 16);
              *v28 = *(a2 - 1);
              *(a2 - 1) = v29;
              if (!(*a3)(v13, a1))
              {
LABEL_22:
                v44 = (__int128 *)(a1 + 24);
                v45 = (uint64_t *)(a1 + 24 * (v12 - 1));
                v46 = (*a3)(v45, a1 + 24);
                v47 = (*a3)(v245, (uint64_t)v45);
                v241 = v12 - 1;
                if ((v46 & 1) != 0)
                {
                  if (v47)
                  {
                    v48 = (uint64_t *)(a1 + 40);
                    v251 = *v44;
                    v49 = a2 - 6;
                    v50 = *v245;
                    *(_QWORD *)(a1 + 29) = *(uint64_t *)((char *)a2 - 43);
                    *(_QWORD *)v44 = v50;
                  }
                  else
                  {
                    v251 = *v44;
                    v63 = *v45;
                    *(_QWORD *)(a1 + 29) = *(uint64_t *)((char *)v45 + 5);
                    *(_QWORD *)v44 = v63;
                    v64 = v251;
                    *(uint64_t *)((char *)v45 + 5) = *(_QWORD *)((char *)&v251 + 5);
                    *v45 = v64;
                    v65 = a1 + 24 * (v12 - 1);
                    v66 = *(_QWORD *)(v65 + 16);
                    v48 = (uint64_t *)(v65 + 16);
                    v67 = *(_QWORD *)(a1 + 40);
                    *(_QWORD *)(a1 + 40) = v66;
                    *v48 = v67;
                    if (!(*a3)(v245, a1 + 24 * (v12 - 1)))
                      goto LABEL_35;
                    v251 = *(_OWORD *)v45;
                    v49 = a2 - 6;
                    v68 = *v245;
                    *(uint64_t *)((char *)v45 + 5) = *(uint64_t *)((char *)a2 - 43);
                    *v45 = v68;
                  }
                  v69 = v251;
                  *(_QWORD *)((char *)v49 + 5) = *(_QWORD *)((char *)&v251 + 5);
                  *v49 = v69;
                  v54 = a2 - 4;
                }
                else
                {
                  if (!v47)
                    goto LABEL_35;
                  v251 = *(_OWORD *)v45;
                  v51 = *v245;
                  *(uint64_t *)((char *)v45 + 5) = *(uint64_t *)((char *)a2 - 43);
                  *v45 = v51;
                  v52 = v251;
                  *(uint64_t *)((char *)a2 - 43) = *(_QWORD *)((char *)&v251 + 5);
                  *v245 = v52;
                  v53 = a1 + 24 * v241;
                  v55 = *(_QWORD *)(v53 + 16);
                  v54 = (uint64_t *)(v53 + 16);
                  *v54 = *(a2 - 4);
                  *(a2 - 4) = v55;
                  if (!(*a3)((uint64_t *)(a1 + 24 * (v12 - 1)), a1 + 24))
                  {
LABEL_35:
                    v71 = (__int128 *)(a1 + 48);
                    v243 = v12 + 1;
                    v72 = (uint64_t *)(a1 + 24 * (v12 + 1));
                    v73 = (*a3)(v72, a1 + 48);
                    v74 = (*a3)(v244, (uint64_t)v72);
                    if ((v73 & 1) != 0)
                    {
                      if (v74)
                      {
                        v75 = (uint64_t *)(a1 + 64);
                        v251 = *v71;
                        v76 = a2 - 9;
                        v77 = *v244;
                        *(_QWORD *)(a1 + 53) = *(uint64_t *)((char *)a2 - 67);
                        *(_QWORD *)v71 = v77;
                      }
                      else
                      {
                        v251 = *v71;
                        v85 = *v72;
                        *(_QWORD *)(a1 + 53) = *(uint64_t *)((char *)v72 + 5);
                        *(_QWORD *)v71 = v85;
                        v86 = v251;
                        *(uint64_t *)((char *)v72 + 5) = *(_QWORD *)((char *)&v251 + 5);
                        *v72 = v86;
                        v87 = a1 + 24 * v243;
                        v88 = *(_QWORD *)(v87 + 16);
                        v75 = (uint64_t *)(v87 + 16);
                        v89 = *(_QWORD *)(a1 + 64);
                        *(_QWORD *)(a1 + 64) = v88;
                        *v75 = v89;
                        if (!(*a3)(v244, a1 + 24 * (v12 + 1)))
                          goto LABEL_45;
                        v251 = *(_OWORD *)v72;
                        v76 = a2 - 9;
                        v90 = *v244;
                        *(uint64_t *)((char *)v72 + 5) = *(uint64_t *)((char *)a2 - 67);
                        *v72 = v90;
                      }
                      v91 = v251;
                      *(_QWORD *)((char *)v76 + 5) = *(_QWORD *)((char *)&v251 + 5);
                      *v76 = v91;
                      v81 = a2 - 7;
                    }
                    else
                    {
                      if (!v74)
                        goto LABEL_45;
                      v251 = *(_OWORD *)v72;
                      v78 = *v244;
                      *(uint64_t *)((char *)v72 + 5) = *(uint64_t *)((char *)a2 - 67);
                      *v72 = v78;
                      v79 = v251;
                      *(uint64_t *)((char *)a2 - 67) = *(_QWORD *)((char *)&v251 + 5);
                      *v244 = v79;
                      v80 = a1 + 24 * v243;
                      v82 = *(_QWORD *)(v80 + 16);
                      v81 = (uint64_t *)(v80 + 16);
                      *v81 = *(a2 - 7);
                      *(a2 - 7) = v82;
                      if (!(*a3)((uint64_t *)(a1 + 24 * (v12 + 1)), a1 + 48))
                      {
LABEL_45:
                        v93 = (*a3)(v13, a1 + 24 * (v12 - 1));
                        v94 = (*a3)((uint64_t *)(a1 + 24 * (v12 + 1)), (uint64_t)v13);
                        if ((v93 & 1) != 0)
                        {
                          v95 = (uint64_t *)(a1 + 24 * v241 + 16);
                          if (v94)
                          {
                            v251 = *(_OWORD *)v45;
                            *v45 = *v72;
                            *(uint64_t *)((char *)v45 + 5) = *(uint64_t *)((char *)v72 + 5);
                            v96 = v251;
                            *(uint64_t *)((char *)v72 + 5) = *(_QWORD *)((char *)&v251 + 5);
                            *v72 = v96;
                            v97 = (uint64_t *)(a1 + 24 * v243 + 16);
                          }
                          else
                          {
                            v251 = *(_OWORD *)v45;
                            *v45 = *v13;
                            *(uint64_t *)((char *)v45 + 5) = *(uint64_t *)((char *)v13 + 5);
                            v103 = v251;
                            *(uint64_t *)((char *)v13 + 5) = *(_QWORD *)((char *)&v251 + 5);
                            *v13 = v103;
                            v104 = a1 + 24 * v12;
                            v106 = *(_QWORD *)(v104 + 16);
                            v105 = (uint64_t *)(v104 + 16);
                            v107 = *v95;
                            *v95 = v106;
                            *v105 = v107;
                            if (!(*a3)((uint64_t *)(a1 + 24 * (v12 + 1)), (uint64_t)v13))
                            {
LABEL_54:
                              v251 = *(_OWORD *)a1;
                              v110 = *v13;
                              *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)v13 + 5);
                              *(_QWORD *)a1 = v110;
                              v111 = v251;
                              *(uint64_t *)((char *)v13 + 5) = *(_QWORD *)((char *)&v251 + 5);
                              *v13 = v111;
                              v22 = (uint64_t *)(a1 + 16);
                              v35 = (uint64_t *)(a1 + 16 + 24 * v12);
                              goto LABEL_55;
                            }
                            v251 = *(_OWORD *)v13;
                            *v13 = *v72;
                            *(uint64_t *)((char *)v13 + 5) = *(uint64_t *)((char *)v72 + 5);
                            v108 = v251;
                            *(uint64_t *)((char *)v72 + 5) = *(_QWORD *)((char *)&v251 + 5);
                            *v72 = v108;
                            v97 = (uint64_t *)(a1 + 24 * v243 + 16);
                            v95 = v105;
                          }
                        }
                        else
                        {
                          if (!v94)
                            goto LABEL_54;
                          v251 = *(_OWORD *)v13;
                          *v13 = *v72;
                          *(uint64_t *)((char *)v13 + 5) = *(uint64_t *)((char *)v72 + 5);
                          v98 = v251;
                          *(uint64_t *)((char *)v72 + 5) = *(_QWORD *)((char *)&v251 + 5);
                          v99 = a1 + 24 * v12;
                          v100 = *(_QWORD *)(v99 + 16);
                          v97 = (uint64_t *)(v99 + 16);
                          *v72 = v98;
                          v101 = a1 + 24 * v243;
                          *v97 = *(_QWORD *)(v101 + 16);
                          *(_QWORD *)(v101 + 16) = v100;
                          if (!(*a3)(v13, a1 + 24 * (v12 - 1)))
                            goto LABEL_54;
                          v251 = *(_OWORD *)v45;
                          *v45 = *v13;
                          *(uint64_t *)((char *)v45 + 5) = *(uint64_t *)((char *)v13 + 5);
                          v102 = v251;
                          *(uint64_t *)((char *)v13 + 5) = *(_QWORD *)((char *)&v251 + 5);
                          *v13 = v102;
                          v95 = (uint64_t *)(a1 + 24 * v241 + 16);
                        }
                        v109 = *v95;
                        *v95 = *v97;
                        *v97 = v109;
                        goto LABEL_54;
                      }
                      v251 = *v71;
                      v83 = *v72;
                      *(_QWORD *)(a1 + 53) = *(uint64_t *)((char *)v72 + 5);
                      *(_QWORD *)v71 = v83;
                      v84 = v251;
                      *(uint64_t *)((char *)v72 + 5) = *(_QWORD *)((char *)&v251 + 5);
                      *v72 = v84;
                      v75 = (uint64_t *)(a1 + 64);
                    }
                    v92 = *v75;
                    *v75 = *v81;
                    *v81 = v92;
                    goto LABEL_45;
                  }
                  v251 = *v44;
                  v56 = *v45;
                  *(_QWORD *)(a1 + 29) = *(uint64_t *)((char *)v45 + 5);
                  *(_QWORD *)v44 = v56;
                  v57 = v251;
                  *(uint64_t *)((char *)v45 + 5) = *(_QWORD *)((char *)&v251 + 5);
                  *v45 = v57;
                  v48 = (uint64_t *)(a1 + 40);
                }
                v70 = *v48;
                *v48 = *v54;
                *v54 = v70;
                goto LABEL_35;
              }
              v251 = *(_OWORD *)a1;
              v30 = *v13;
              *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)v13 + 5);
              *(_QWORD *)a1 = v30;
              v31 = v251;
              *(uint64_t *)((char *)v13 + 5) = *(_QWORD *)((char *)&v251 + 5);
              *v13 = v31;
              v17 = (_QWORD *)(a1 + 16);
            }
            v43 = *v17;
            *v17 = *v28;
            *v28 = v43;
            goto LABEL_22;
          }
          v20 = v14((uint64_t *)a1, a1 + 24 * (v11 >> 1));
          v21 = (*a3)(v250, a1);
          if ((v20 & 1) != 0)
          {
            v22 = (uint64_t *)(a1 + 24 * v12 + 16);
            if (v21)
            {
              v251 = *(_OWORD *)v13;
              v23 = *v250;
              *(uint64_t *)((char *)v13 + 5) = *(uint64_t *)((char *)a2 - 19);
              *v13 = v23;
              v24 = v251;
              *(uint64_t *)((char *)a2 - 19) = *(_QWORD *)((char *)&v251 + 5);
              *v250 = v24;
LABEL_30:
              v35 = a2 - 1;
              goto LABEL_55;
            }
            v251 = *(_OWORD *)v13;
            v58 = *(_QWORD *)a1;
            *(uint64_t *)((char *)v13 + 5) = *(_QWORD *)(a1 + 5);
            *v13 = v58;
            v59 = v251;
            *(_QWORD *)(a1 + 5) = *(_QWORD *)((char *)&v251 + 5);
            *(_QWORD *)a1 = v59;
            v60 = *v22;
            *v22 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v60;
            if ((*a3)(v250, a1))
            {
              v251 = *(_OWORD *)a1;
              v61 = *v250;
              *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 - 19);
              *(_QWORD *)a1 = v61;
              v62 = v251;
              *(uint64_t *)((char *)a2 - 19) = *(_QWORD *)((char *)&v251 + 5);
              *v250 = v62;
              v22 = (uint64_t *)(a1 + 16);
              goto LABEL_30;
            }
          }
          else if (v21)
          {
            v251 = *(_OWORD *)a1;
            v32 = *v250;
            *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 - 19);
            *(_QWORD *)a1 = v32;
            v33 = v251;
            *(uint64_t *)((char *)a2 - 19) = *(_QWORD *)((char *)&v251 + 5);
            *v250 = v33;
            v35 = (uint64_t *)(a1 + 16);
            v34 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 16) = *(a2 - 1);
            *(a2 - 1) = v34;
            if ((*a3)((uint64_t *)a1, (uint64_t)v13))
            {
              v251 = *(_OWORD *)v13;
              v36 = *(_QWORD *)a1;
              *(uint64_t *)((char *)v13 + 5) = *(_QWORD *)(a1 + 5);
              *v13 = v36;
              v37 = v251;
              *(_QWORD *)(a1 + 5) = *(_QWORD *)((char *)&v251 + 5);
              *(_QWORD *)a1 = v37;
              v22 = (uint64_t *)(a1 + 24 * v12 + 16);
LABEL_55:
              v112 = *v22;
              *v22 = *v35;
              *v35 = v112;
            }
          }
          a4 = (uint64_t *)((char *)v247 - 1);
          if ((a5 & 1) == 0 && (((uint64_t (*)(uint64_t, uint64_t))*a3)(a1 - 24, a1) & 1) == 0)
          {
            v251 = *(_OWORD *)a1;
            v131 = *(_DWORD **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = 0;
            v252 = v131;
            if ((((uint64_t (*)(__int128 *, uint64_t *))*a3)(&v251, v250) & 1) != 0)
            {
              v9 = a1;
              while (1)
              {
                v9 += 24;
                if ((uint64_t *)v9 == a2)
                  break;
                if ((((uint64_t (*)(__int128 *, unint64_t))*a3)(&v251, v9) & 1) != 0)
                  goto LABEL_102;
              }
            }
            else
            {
              v132 = a1 + 24;
              do
              {
                v9 = v132;
                if (v132 >= (unint64_t)a2)
                  break;
                v133 = (*a3)((uint64_t *)&v251, v132);
                v132 = v9 + 24;
              }
              while (!v133);
LABEL_102:
              v134 = a2;
              if (v9 >= (unint64_t)a2)
              {
LABEL_112:
                if (v9 >= (unint64_t)v134)
                {
                  v138 = (uint64_t *)(v9 - 24);
                  if (v9 - 24 != a1)
                  {
                    v139 = *v138;
                    *(_QWORD *)(a1 + 5) = *(_QWORD *)(v9 - 19);
                    *(_QWORD *)a1 = v139;
                    v140 = *(_QWORD *)(v9 - 8);
                    *(_QWORD *)(v9 - 8) = 0;
                    v141 = *(_DWORD **)(a1 + 16);
                    *(_QWORD *)(a1 + 16) = v140;
                    if (v141)
                    {
                      if (v141[6] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v141 + 72))(v141);
                      else
                        --v141[6];
                    }
                  }
                  v142 = v251;
                  *(_QWORD *)(v9 - 19) = *(_QWORD *)((char *)&v251 + 5);
                  *v138 = v142;
                  v143 = v252;
                  v252 = 0;
                  v144 = *(_DWORD **)(v9 - 8);
                  *(_QWORD *)(v9 - 8) = v143;
                  if (v144)
                  {
                    if (v144[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v144 + 72))(v144);
                    else
                      --v144[6];
                  }
                  v145 = v252;
                  v252 = 0;
                  if (v145)
                  {
                    if (v145[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v145 + 72))(v145);
                    else
                      --v145[6];
                  }
                  goto LABEL_90;
                }
                v253 = *(_OWORD *)v9;
                v135 = *v134;
                *(_QWORD *)(v9 + 5) = *(uint64_t *)((char *)v134 + 5);
                *(_QWORD *)v9 = v135;
                v136 = v253;
                *(uint64_t *)((char *)v134 + 5) = *(_QWORD *)((char *)&v253 + 5);
                *v134 = v136;
                v137 = *(_QWORD *)(v9 + 16);
                *(_QWORD *)(v9 + 16) = v134[2];
                v134[2] = v137;
                while (1)
                {
                  v9 += 24;
                  if ((uint64_t *)v9 == a2)
                    break;
                  if ((*a3)((uint64_t *)&v251, v9))
                  {
                    while (v134 != (uint64_t *)a1)
                    {
                      v134 -= 3;
                      if ((((uint64_t (*)(__int128 *, uint64_t *))*a3)(&v251, v134) & 1) == 0)
                        goto LABEL_112;
                    }
                    break;
                  }
                }
              }
              else
              {
                v134 = a2;
                while (v134 != (uint64_t *)a1)
                {
                  v134 -= 3;
                  if ((((uint64_t (*)(__int128 *, uint64_t *))*a3)(&v251, v134) & 1) == 0)
                    goto LABEL_112;
                }
              }
            }
LABEL_252:
            __break(1u);
LABEL_253:
            v251 = *(_OWORD *)a1;
            *(_QWORD *)a1 = *a4;
            *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a4 + 5);
            *a4 = v251;
            *(uint64_t *)((char *)a4 + 5) = *(_QWORD *)((char *)&v251 + 5);
            v236 = *(_QWORD *)(a1 + 40);
            v235 = (uint64_t *)(a1 + 40);
            v237 = *(v235 - 3);
            *(v235 - 3) = v236;
            *v235 = v237;
            if ((*a3)(v250, (uint64_t)a4))
            {
              v251 = *(_OWORD *)a4;
              v238 = *v250;
              *(uint64_t *)((char *)a4 + 5) = *(uint64_t *)((char *)v250 + 5);
              *a4 = v238;
              v239 = v251;
              *(uint64_t *)((char *)v250 + 5) = *(_QWORD *)((char *)&v251 + 5);
              *v250 = v239;
              v151 = v235;
LABEL_255:
              v240 = *v151;
              *v151 = *v242;
              *v242 = v240;
            }
            return;
          }
          v113 = 0;
          v251 = *(_OWORD *)a1;
          v114 = *(_DWORD **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = 0;
          v252 = v114;
          do
          {
            v115 = a1 + v113 + 24;
            if ((uint64_t *)v115 == a2)
              goto LABEL_252;
            v113 += 24;
          }
          while ((((uint64_t (*)(uint64_t, __int128 *))*a3)(v115, &v251) & 1) != 0);
          v116 = a1 + v113;
          v117 = a2;
          if (v113 != 24)
          {
            while (v117 != (uint64_t *)a1)
            {
              v117 -= 3;
              if ((*a3)(v117, (uint64_t)&v251))
                goto LABEL_68;
            }
            goto LABEL_252;
          }
          v117 = a2;
          do
          {
            if (v116 >= (unint64_t)v117)
              break;
            v117 -= 3;
          }
          while ((((uint64_t (*)(uint64_t *, __int128 *))*a3)(v117, &v251) & 1) == 0);
LABEL_68:
          v9 = a1 + v113;
          if (v116 < (unint64_t)v117)
          {
            v118 = v117;
            do
            {
              v253 = *(_OWORD *)v9;
              v119 = *v118;
              *(_QWORD *)(v9 + 5) = *(uint64_t *)((char *)v118 + 5);
              *(_QWORD *)v9 = v119;
              v120 = v253;
              *(uint64_t *)((char *)v118 + 5) = *(_QWORD *)((char *)&v253 + 5);
              *v118 = v120;
              v121 = *(_QWORD *)(v9 + 16);
              *(_QWORD *)(v9 + 16) = v118[2];
              v118[2] = v121;
              do
              {
                v9 += 24;
                if ((uint64_t *)v9 == a2)
                  goto LABEL_252;
              }
              while ((((uint64_t (*)(unint64_t, __int128 *))*a3)(v9, &v251) & 1) != 0);
              do
              {
                if (v118 == (uint64_t *)a1)
                  goto LABEL_252;
                v118 -= 3;
              }
              while (!(*a3)(v118, (uint64_t)&v251));
            }
            while (v9 < (unint64_t)v118);
          }
          v122 = (uint64_t *)(v9 - 24);
          if (v9 - 24 != a1)
          {
            v123 = *v122;
            *(_QWORD *)(a1 + 5) = *(_QWORD *)(v9 - 19);
            *(_QWORD *)a1 = v123;
            v124 = *(_QWORD *)(v9 - 8);
            *(_QWORD *)(v9 - 8) = 0;
            v125 = *(_DWORD **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v124;
            if (v125)
            {
              if (v125[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v125 + 72))(v125);
              else
                --v125[6];
            }
          }
          v126 = v251;
          *(_QWORD *)(v9 - 19) = *(_QWORD *)((char *)&v251 + 5);
          *v122 = v126;
          v127 = v252;
          v252 = 0;
          v128 = *(_DWORD **)(v9 - 8);
          *(_QWORD *)(v9 - 8) = v127;
          if (v128)
          {
            if (v128[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v128 + 72))(v128);
            else
              --v128[6];
          }
          v129 = v252;
          v252 = 0;
          if (v129)
          {
            if (v129[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v129 + 72))(v129);
            else
              --v129[6];
          }
          if (v116 < (unint64_t)v117)
            goto LABEL_89;
          v130 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(a1, (_QWORD *)(v9 - 24), (unsigned int (**)(uint64_t, uint64_t))a3);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*>(v9, a2, (unsigned int (**)(uint64_t, uint64_t))a3))
          {
            if (v130)
              continue;
LABEL_89:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&,std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>> const&),std::pair<WTF::MediaTime,WTF::RefPtr<WebCore::TextTrackCue,WTF::RawPtrTraits<WebCore::TextTrackCue>,WTF::DefaultRefDerefTraits<WebCore::TextTrackCue>>>*,false>(a1, v9 - 24, a3, a4, a5 & 1);
LABEL_90:
            a5 = 0;
            continue;
          }
          a2 = (uint64_t *)(v9 - 24);
          if (v130)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) == 0)
        {
          if ((uint64_t *)v9 == a2)
            return;
          v217 = (__int128 *)(v9 + 24);
          if ((uint64_t *)(v9 + 24) == a2)
            return;
          v218 = (_QWORD *)(v9 - 24);
          v219 = -2;
          v220 = 1;
          v221 = v9;
          while (1)
          {
            if ((*a3)((uint64_t *)v217, v221))
            {
              v251 = *v217;
              v222 = *(_DWORD **)(v221 + 40);
              *(_QWORD *)(v221 + 40) = 0;
              v252 = v222;
              a4 = (uint64_t *)v219;
              v223 = v218;
              do
              {
                v224 = v223[3];
                v225 = *(_QWORD *)((char *)v223 + 29);
                v226 = v223[5];
                v223[5] = 0;
                v223[6] = v224;
                *(_QWORD *)((char *)v223 + 53) = v225;
                v227 = (_DWORD *)v223[8];
                v223[8] = v226;
                if (v227)
                {
                  if (v227[6] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v227 + 72))(v227);
                  else
                    --v227[6];
                }
                v228 = __CFADD__(a4, 1);
                a4 = (uint64_t *)((char *)a4 + 1);
                if (v228)
                  goto LABEL_252;
                v229 = v223 - 3;
                v230 = (*a3)((uint64_t *)&v251, (uint64_t)v223);
                v223 -= 3;
              }
              while ((v230 & 1) != 0);
              v231 = v251;
              *(_QWORD *)((char *)v229 + 53) = *(_QWORD *)((char *)&v251 + 5);
              v229[6] = v231;
              v232 = v252;
              v252 = 0;
              v233 = (_DWORD *)v229[8];
              v229[8] = v232;
              if (v233)
              {
                v234 = v233[6] - 1;
                if (v233[6] == 1)
                {
                  (*(void (**)(_DWORD *))(*(_QWORD *)v233 + 72))(v233);
                  v233 = v252;
                  v252 = 0;
                  if (!v233)
                    goto LABEL_247;
                  v234 = v233[6] - 1;
                  if (v233[6] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v233 + 72))(v233);
                    goto LABEL_247;
                  }
                }
                v233[6] = v234;
              }
            }
LABEL_247:
            v221 = v9 + 24 * v220++;
            v217 = (__int128 *)(v221 + 24);
            v218 += 3;
            --v219;
            if ((uint64_t *)(v221 + 24) == a2)
              return;
          }
        }
        if ((uint64_t *)v9 == a2)
          return;
        v154 = (_OWORD *)(v9 + 24);
        if ((uint64_t *)(v9 + 24) == a2)
          return;
        v155 = 0;
        v156 = (_OWORD *)v9;
        do
        {
          v157 = v154;
          if (!(*a3)((uint64_t *)v154, (uint64_t)v156))
            goto LABEL_156;
          v251 = *v157;
          v158 = (_DWORD *)*((_QWORD *)v156 + 5);
          *((_QWORD *)v156 + 5) = 0;
          v252 = v158;
          v159 = v155;
          while (1)
          {
            v160 = (_QWORD *)(v9 + v159);
            v161 = *(_QWORD *)(v9 + v159);
            v162 = *(_QWORD *)(v9 + v159 + 5);
            v163 = *(_QWORD *)(v9 + v159 + 16);
            v160[2] = 0;
            v160[3] = v161;
            *(_QWORD *)((char *)v160 + 29) = v162;
            v164 = *(_DWORD **)(v9 + v159 + 40);
            v160[5] = v163;
            if (!v164)
              goto LABEL_145;
            if (v164[6] == 1)
              break;
            --v164[6];
LABEL_145:
            if (!v159)
              goto LABEL_149;
LABEL_146:
            v159 -= 24;
            if ((((uint64_t (*)(__int128 *, unint64_t))*a3)(&v251, v159 + v9) & 1) == 0)
            {
              v165 = (_QWORD *)(v9 + v159 + 24);
              goto LABEL_150;
            }
          }
          (*(void (**)(_DWORD *))(*(_QWORD *)v164 + 72))(v164);
          if (v159)
            goto LABEL_146;
LABEL_149:
          v165 = (_QWORD *)v9;
LABEL_150:
          v166 = v251;
          *(_QWORD *)((char *)v165 + 5) = *(_QWORD *)((char *)&v251 + 5);
          *v165 = v166;
          v167 = v252;
          v252 = 0;
          v168 = (_DWORD *)v165[2];
          v165[2] = v167;
          if (v168)
          {
            if (v168[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v168 + 72))(v168);
            else
              --v168[6];
            v169 = v252;
            v252 = 0;
            if (v169)
            {
              if (v169[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v169 + 72))(v169);
              else
                --v169[6];
            }
          }
LABEL_156:
          v154 = (_OWORD *)((char *)v157 + 24);
          v155 += 24;
          v156 = v157;
        }
        while ((uint64_t *)((char *)v157 + 24) != a2);
        return;
    }
  }
}

  v263 = a2 - 10;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v8) >> 4);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        LODWORD(v27) = *((unsigned __int8 *)a2 - 40);
        v21 = *(unsigned __int8 *)(a1 + 40);
        if ((_DWORD)v27 != 1 || v21 == 1)
        {
          if ((_DWORD)v27 != 1 && v21 == 1)
            goto LABEL_738;
          if (!*((_BYTE *)a2 - 20))
            goto LABEL_728;
          v113 = *((_DWORD *)a2 - 6);
          goto LABEL_731;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1, a1 + 80, (uint64_t)v263);
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1, a1 + 80, a1 + 160, (uint64_t)v263);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *,0>(a1, a1 + 80, a1 + 160, a1 + 240, (uint64_t)v263);
        return;
      default:
        if (v9 <= 1919)
        {
          if ((a4 & 1) != 0)
          {
            if ((uint64_t *)a1 != a2)
            {
              v114 = a1 + 80;
              if ((uint64_t *)(a1 + 80) != a2)
              {
                v115 = 0;
                v116 = a1;
                do
                {
                  v117 = v116;
                  v116 = v114;
                  v118 = *(unsigned __int8 *)(v117 + 120);
                  v119 = *(unsigned __int8 *)(v117 + 40);
                  if (v118 != 1 || v119 == 1)
                  {
                    v121 = v118 != 1 && v119 == 1;
                    if (v121
                      || (!*(_BYTE *)(v117 + 140)
                        ? ((((_BYTE)v118 - 2) & 0xFD) != 0
                         ? (v122 = 0)
                         : (v122 = 60))
                        : (v122 = *(_DWORD *)(v117 + 136)),
                          !*(_BYTE *)(v117 + 60)
                        ? ((((_BYTE)v119 - 2) & 0xFD) != 0
                         ? (v123 = 0)
                         : (v123 = 60))
                        : (v123 = *(_DWORD *)(v117 + 56)),
                          v123 <= v122 && (v123 < v122 || (v118 == 4 || v119 != 4) && v118 == 4 && v119 != 4)))
                    {
                      v124 = *(_QWORD *)(v117 + 80);
                      *(_QWORD *)(v117 + 80) = 0;
                      v272 = v124;
                      v125 = *(_OWORD *)(v117 + 104);
                      *(_OWORD *)v273 = *(_OWORD *)(v117 + 88);
                      *(_OWORD *)&v273[16] = v125;
                      *(_DWORD *)(v117 + 88) = *(_DWORD *)v273 & 0xFFFFFFFE;
                      v274 = v118;
                      v126 = *(_OWORD *)(v117 + 128);
                      *(_QWORD *)(v117 + 128) = 0;
                      v275 = v126;
                      v276 = *(_QWORD *)(v117 + 144);
                      *(_QWORD *)&v126 = *(_QWORD *)(v117 + 152);
                      *(_QWORD *)(v117 + 144) = 0;
                      *(_QWORD *)(v117 + 152) = 0;
                      v277 = v126;
                      WebCore::LinkIcon::operator=(v116, (uint64_t *)v117);
                      v127 = a1;
                      if (v117 != a1)
                      {
                        v128 = v115;
                        while (1)
                        {
                          v127 = a1 + v128;
                          v129 = *(unsigned __int8 *)(a1 + v128 - 40);
                          if (v274 == 1 && v129 != 1)
                            break;
                          if (v274 == 1 || v129 != 1)
                          {
                            if (BYTE12(v275))
                              v132 = DWORD2(v275);
                            else
                              v132 = ((v274 - 2) & 0xFD) != 0 ? 0 : 60;
                            if (*(_BYTE *)(a1 + v128 - 20))
                              v133 = *(_DWORD *)(a1 + v128 - 24);
                            else
                              v133 = (((_BYTE)v129 - 2) & 0xFD) != 0 ? 0 : 60;
                            if (v133 > v132 || v133 >= v132 && (v274 != 4 && v129 == 4 || v274 != 4 || v129 == 4))
                            {
                              v127 = v117;
                              break;
                            }
                          }
                          v117 -= 80;
                          WebCore::LinkIcon::operator=(v127, (uint64_t *)(v127 - 80));
                          v128 -= 80;
                          if (!v128)
                          {
                            v127 = a1;
                            break;
                          }
                        }
                      }
                      WebCore::LinkIcon::operator=(v127, &v272);
                      WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v272, v134);
                    }
                  }
                  v114 = v116 + 80;
                  v115 += 80;
                }
                while ((uint64_t *)(v116 + 80) != a2);
              }
            }
          }
          else if ((uint64_t *)a1 != a2)
          {
            v231 = (uint64_t *)(a1 + 80);
            if ((uint64_t *)(a1 + 80) != a2)
            {
              v232 = 0;
              v233 = -1;
              v234 = 1;
              v235 = a1;
              do
              {
                v236 = v232;
                v232 = v234;
                v237 = *(unsigned __int8 *)(v235 + 120);
                v238 = *(unsigned __int8 *)(a1 + 80 * v236 + 40);
                if (v237 != 1 || v238 == 1)
                {
                  v240 = v237 != 1 && v238 == 1;
                  if (v240
                    || (!*(_BYTE *)(a1 + 80 * v232 + 60)
                      ? ((((_BYTE)v237 - 2) & 0xFD) != 0
                       ? (v241 = 0)
                       : (v241 = 60))
                      : (v241 = *(_DWORD *)(a1 + 80 * v232 + 56)),
                        !*(_BYTE *)(a1 + 80 * v236 + 60)
                      ? ((((_BYTE)v238 - 2) & 0xFD) != 0
                       ? (v242 = 0)
                       : (v242 = 60))
                      : (v242 = *(_DWORD *)(a1 + 80 * v236 + 56)),
                        v242 <= v241 && (v242 < v241 || (v237 == 4 || v238 != 4) && v237 == 4 && v238 != 4)))
                  {
                    v243 = *v231;
                    *v231 = 0;
                    v272 = v243;
                    v244 = *(_OWORD *)(v235 + 104);
                    *(_OWORD *)v273 = *(_OWORD *)(v235 + 88);
                    *(_OWORD *)&v273[16] = v244;
                    *(_DWORD *)(v235 + 88) = *(_DWORD *)v273 & 0xFFFFFFFE;
                    v274 = v237;
                    v245 = *(_OWORD *)(v235 + 128);
                    *(_QWORD *)(v235 + 128) = 0;
                    v275 = v245;
                    v276 = *(_QWORD *)(v235 + 144);
                    *(_QWORD *)&v245 = *(_QWORD *)(v235 + 152);
                    *(_QWORD *)(v235 + 144) = 0;
                    *(_QWORD *)(v235 + 152) = 0;
                    v277 = v245;
                    WebCore::LinkIcon::operator=((uint64_t)v231, (uint64_t *)(a1 + 80 * v236));
                    v246 = v233;
                    v247 = v235;
                    while (1)
                    {
                      v248 = *(unsigned __int8 *)(v247 - 40);
                      if (v274 == 1 && v248 != 1)
                        break;
                      if (v274 == 1 || v248 != 1)
                      {
                        if (BYTE12(v275))
                          v251 = DWORD2(v275);
                        else
                          v251 = ((v274 - 2) & 0xFD) != 0 ? 0 : 60;
                        if (*(_BYTE *)(v247 - 20))
                          v252 = *(_DWORD *)(v247 - 24);
                        else
                          v252 = (((_BYTE)v248 - 2) & 0xFD) != 0 ? 0 : 60;
                        if (v252 > v251 || v252 >= v251 && (v274 != 4 && v248 == 4 || v274 != 4 || v248 == 4))
                          break;
                      }
                      v253 = v247 - 80;
                      WebCore::LinkIcon::operator=(v247, (uint64_t *)(v247 - 80));
                      v247 = v253;
                      v36 = __CFADD__(v246++, 1);
                      if (v36)
                        goto LABEL_727;
                    }
                    WebCore::LinkIcon::operator=(v247, &v272);
                    WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v272, v254);
                  }
                }
                v235 += 80;
                v234 = v232 + 1;
                v231 = (uint64_t *)(a1 + 80 * (v232 + 1));
                --v233;
              }
              while (v231 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((uint64_t *)a1 == a2)
            return;
          v135 = (unint64_t)(v10 - 2) >> 1;
          v136 = v135;
          do
          {
            v137 = v136;
            if (v135 >= v136)
            {
              v138 = (2 * v136) | 1;
              v139 = a1 + 80 * v138;
              if (2 * v136 + 2 < v10)
              {
                v140 = *(unsigned __int8 *)(a1 + 80 * v138 + 40);
                v141 = *(unsigned __int8 *)(v139 + 120);
                if (v140 != 1 || v141 == 1)
                {
                  v143 = v140 != 1 && v141 == 1;
                  if (v143
                    || (!*(_BYTE *)(a1 + 80 * v138 + 60)
                      ? (((v140 - 2) & 0xFD) != 0
                       ? (v144 = 0)
                       : (v144 = 60))
                      : (v144 = *(_DWORD *)(a1 + 80 * v138 + 56)),
                        !*(_BYTE *)(v139 + 140)
                      ? (((v141 - 2) & 0xFD) != 0
                       ? (v145 = 0)
                       : (v145 = 60))
                      : (v145 = *(_DWORD *)(v139 + 136)),
                        v145 <= v144 && (v145 < v144 || (v140 == 4 || v141 != 4) && v140 == 4 && v141 != 4)))
                  {
                    v139 += 80;
                    v138 = 2 * v136 + 2;
                  }
                }
              }
              v146 = *(unsigned __int8 *)(v139 + 40);
              v147 = *(unsigned __int8 *)(a1 + 80 * v137 + 40);
              v148 = v146 != 1 || v147 == 1;
              if (!v148
                || (v146 != 1 ? (v149 = v147 == 1) : (v149 = 0),
                    !v149
                 && (!*(_BYTE *)(v139 + 60)
                   ? (((v146 - 2) & 0xFD) != 0
                    ? (v150 = 0)
                    : (v150 = 60))
                   : (v150 = *(_DWORD *)(v139 + 56)),
                     !*(_BYTE *)(a1 + 80 * v137 + 60)
                   ? (((v147 - 2) & 0xFD) != 0
                    ? (v151 = 0)
                    : (v151 = 60))
                   : (v151 = *(_DWORD *)(a1 + 80 * v137 + 56)),
                     v151 > v150 || v151 >= v150 && (v146 != 4 && v147 == 4 || v146 != 4 || v147 == 4))))
              {
                v152 = a1 + 80 * v137;
                v153 = *(_QWORD *)v152;
                *(_QWORD *)v152 = 0;
                v272 = v153;
                *(_DWORD *)v273 = *(_DWORD *)(v152 + 8);
                *(_OWORD *)&v273[4] = *(_OWORD *)(v152 + 12);
                *(_QWORD *)&v273[20] = *(_QWORD *)(v152 + 28);
                *(_DWORD *)&v273[28] = *(_DWORD *)(v152 + 36);
                *(_DWORD *)(v152 + 8) = *(_DWORD *)v273 & 0xFFFFFFFE;
                v274 = v147;
                v154 = *(_QWORD *)(v152 + 48);
                *(_QWORD *)(v152 + 48) = 0;
                *(_QWORD *)&v275 = v154;
                v155 = *(_QWORD *)(v152 + 56);
                *((_QWORD *)&v275 + 1) = v155;
                v156 = *(_QWORD *)(v152 + 64);
                *(_QWORD *)(v152 + 64) = 0;
                v276 = v156;
                LODWORD(v156) = *(_DWORD *)(v152 + 72);
                *(_DWORD *)(v152 + 72) = 0;
                LODWORD(v277) = v156;
                LODWORD(v156) = *(_DWORD *)(v152 + 76);
                *(_DWORD *)(v152 + 76) = 0;
                HIDWORD(v277) = v156;
                if (((v147 - 2) & 0xFD) != 0)
                  v157 = 0;
                else
                  v157 = 60;
                if ((v155 & 0xFF00000000) != 0)
                  v158 = v155;
                else
                  v158 = v157;
                while (1)
                {
                  WebCore::LinkIcon::operator=(v152, (uint64_t *)v139);
                  if (v135 < v138)
                    goto LABEL_524;
                  v152 = v139;
                  v159 = 2 * v138;
                  v138 = (2 * v138) | 1;
                  v139 = a1 + 80 * v138;
                  v160 = v159 + 2;
                  if (v159 + 2 < v10)
                  {
                    v161 = *(unsigned __int8 *)(a1 + 80 * v138 + 40);
                    v162 = *(unsigned __int8 *)(v139 + 120);
                    if (v161 != 1 || v162 == 1)
                    {
                      v164 = v161 != 1 && v162 == 1;
                      if (v164
                        || (!*(_BYTE *)(a1 + 80 * v138 + 60)
                          ? (((v161 - 2) & 0xFD) != 0
                           ? (v165 = 0)
                           : (v165 = 60))
                          : (v165 = *(_DWORD *)(a1 + 80 * v138 + 56)),
                            !*(_BYTE *)(v139 + 140)
                          ? (((v162 - 2) & 0xFD) != 0
                           ? (v166 = 0)
                           : (v166 = 60))
                          : (v166 = *(_DWORD *)(v139 + 136)),
                            v166 <= v165
                         && (v166 < v165
                          || (v161 != 4 ? (v173 = v162 == 4) : (v173 = 0),
                              !v173 ? (v174 = v161 == 4) : (v174 = 0),
                              v174 ? (v175 = v162 == 4) : (v175 = 1),
                              !v175))))
                      {
                        v139 += 80;
                        v138 = v160;
                      }
                    }
                  }
                  v167 = *(unsigned __int8 *)(v139 + 40);
                  if (v167 != 1 || v147 == 1)
                  {
                    if (v147 == 1 && v167 != 1)
                      break;
                    if (*(_BYTE *)(v139 + 60))
                      v169 = *(_DWORD *)(v139 + 56);
                    else
                      v169 = ((v167 - 2) & 0xFD) != 0 ? 0 : 60;
                    if (v158 <= v169)
                    {
                      if (v158 < v169)
                        break;
                      v170 = v147 != 4 || v167 == 4;
                      v171 = !v170 || v147 == 4;
                      if (!v171 && v167 == 4)
                        break;
                    }
                  }
                }
                v139 = v152;
LABEL_524:
                WebCore::LinkIcon::operator=(v139, &v272);
                WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v272, v176);
              }
            }
            v136 = v137 - 1;
          }
          while (v137);
          v177 = v9 / 0x50uLL;
          while (2)
          {
            v178 = 0;
            v179 = *(_QWORD *)a1;
            *(_QWORD *)a1 = 0;
            v264 = v179;
            v180 = *(_OWORD *)(a1 + 24);
            v265 = *(_OWORD *)(a1 + 8);
            v266 = v180;
            *(_DWORD *)(a1 + 8) = v265 & 0xFFFFFFFE;
            v267 = *(_BYTE *)(a1 + 40);
            v181 = *(_QWORD *)(a1 + 48);
            v182 = *(_QWORD *)(a1 + 56);
            *(_QWORD *)(a1 + 48) = 0;
            v268 = v181;
            v269 = v182;
            v183 = *(_QWORD *)(a1 + 64);
            *(_QWORD *)(a1 + 64) = 0;
            v270 = v183;
            v184 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 72) = 0;
            v185 = a1;
            v271 = v184;
            do
            {
              v186 = v185;
              v187 = v178 + 1;
              v185 += 80 * (v178 + 1);
              v188 = 2 * v178;
              v178 = (2 * v178) | 1;
              v189 = v188 + 2;
              if (v189 < v177)
              {
                v190 = *(unsigned __int8 *)(v186 + 80 * v187 + 40);
                v191 = *(unsigned __int8 *)(v185 + 120);
                if (v190 != 1 || v191 == 1)
                {
                  v193 = v190 != 1 && v191 == 1;
                  if (v193
                    || (!*(_BYTE *)(v186 + 80 * v187 + 60)
                      ? ((((_BYTE)v190 - 2) & 0xFD) != 0
                       ? (v194 = 0)
                       : (v194 = 60))
                      : (v194 = *(_DWORD *)(v186 + 80 * v187 + 56)),
                        !*(_BYTE *)(v185 + 140)
                      ? ((((_BYTE)v191 - 2) & 0xFD) != 0
                       ? (v195 = 0)
                       : (v195 = 60))
                      : (v195 = *(_DWORD *)(v185 + 136)),
                        v195 <= v194
                     && (v195 < v194
                      || (v190 != 4 ? (v196 = v191 == 4) : (v196 = 0),
                          !v196 ? (v197 = v190 == 4) : (v197 = 0),
                          v197 ? (v198 = v191 == 4) : (v198 = 1),
                          !v198))))
                  {
                    v185 += 80;
                    v178 = v189;
                  }
                }
              }
              WebCore::LinkIcon::operator=(v186, (uint64_t *)v185);
            }
            while (v178 <= (uint64_t)((unint64_t)(v177 - 2) >> 1));
            a2 -= 10;
            if ((uint64_t *)v185 == a2)
            {
              WebCore::LinkIcon::operator=(v185, &v264);
            }
            else
            {
              WebCore::LinkIcon::operator=(v185, a2);
              WebCore::LinkIcon::operator=((uint64_t)a2, &v264);
              v200 = v185 - a1 + 80;
              if (v200 >= 81)
              {
                v201 = v200 / 0x50uLL - 2;
                v202 = v201 >> 1;
                v203 = a1 + 80 * (v201 >> 1);
                v204 = *(unsigned __int8 *)(v203 + 40);
                v205 = *(unsigned __int8 *)(v185 + 40);
                if (v204 != 1 || v205 == 1)
                {
                  v207 = v204 != 1 && v205 == 1;
                  if (v207
                    || (!*(_BYTE *)(a1 + 80 * v202 + 60)
                      ? (((v204 - 2) & 0xFD) != 0
                       ? (v208 = 0)
                       : (v208 = 60))
                      : (v208 = *(_DWORD *)(a1 + 80 * v202 + 56)),
                        !*(_BYTE *)(v185 + 60)
                      ? (((v205 - 2) & 0xFD) != 0
                       ? (v209 = 0)
                       : (v209 = 60))
                      : (v209 = *(_DWORD *)(v185 + 56)),
                        v209 <= v208
                     && (v209 < v208
                      || (v204 != 4 ? (v227 = v205 == 4) : (v227 = 0),
                          !v227 ? (v228 = v204 == 4) : (v228 = 0),
                          v228 ? (v229 = v205 == 4) : (v229 = 1),
                          !v229))))
                  {
                    v210 = *(_QWORD *)v185;
                    *(_QWORD *)v185 = 0;
                    v272 = v210;
                    *(_DWORD *)v273 = *(_DWORD *)(v185 + 8);
                    *(_OWORD *)&v273[4] = *(_OWORD *)(v185 + 12);
                    *(_QWORD *)&v273[20] = *(_QWORD *)(v185 + 28);
                    *(_DWORD *)&v273[28] = *(_DWORD *)(v185 + 36);
                    *(_DWORD *)(v185 + 8) = *(_DWORD *)v273 & 0xFFFFFFFE;
                    v274 = v205;
                    v211 = *(_QWORD *)(v185 + 48);
                    *(_QWORD *)(v185 + 48) = 0;
                    *(_QWORD *)&v275 = v211;
                    v212 = *(_QWORD *)(v185 + 56);
                    *((_QWORD *)&v275 + 1) = v212;
                    v213 = *(_QWORD *)(v185 + 64);
                    *(_QWORD *)(v185 + 64) = 0;
                    v276 = v213;
                    LODWORD(v213) = *(_DWORD *)(v185 + 72);
                    *(_DWORD *)(v185 + 72) = 0;
                    LODWORD(v277) = v213;
                    LODWORD(v213) = *(_DWORD *)(v185 + 76);
                    *(_DWORD *)(v185 + 76) = 0;
                    HIDWORD(v277) = v213;
                    if (((v205 - 2) & 0xFD) != 0)
                      v214 = 0;
                    else
                      v214 = 60;
                    if ((v212 & 0xFF00000000) != 0)
                    {
                      if (v205 == 1)
                      {
                        WebCore::LinkIcon::operator=(v185, (uint64_t *)(a1 + 80 * (v201 >> 1)));
                        if (v201 >= 2)
                        {
                          while (1)
                          {
                            v215 = v202 - 1;
                            v202 = (v202 - 1) >> 1;
                            v216 = a1 + 80 * v202;
                            if (*(_BYTE *)(v216 + 40) == 1
                              && (!*(_BYTE *)(a1 + 80 * v202 + 60)
                               || *(_DWORD *)(a1 + 80 * v202 + 56) <= v212))
                            {
                              break;
                            }
                            WebCore::LinkIcon::operator=(v203, (uint64_t *)(a1 + 80 * v202));
                            v203 = a1 + 80 * v202;
                            if (v215 < 2)
                              goto LABEL_629;
                          }
                        }
                        goto LABEL_628;
                      }
                      do
                      {
                        v216 = v203;
                        WebCore::LinkIcon::operator=(v185, (uint64_t *)v203);
                        if (!v202)
                          break;
                        v202 = (v202 - 1) >> 1;
                        v203 = a1 + 80 * v202;
                        v217 = *(unsigned __int8 *)(v203 + 40);
                        if (v217 == 1)
                          break;
                        if (*(_BYTE *)(a1 + 80 * v202 + 60))
                          v218 = *(_DWORD *)(a1 + 80 * v202 + 56);
                        else
                          v218 = ((v217 - 2) & 0xFD) != 0 ? 0 : 60;
                        if (v218 < v212)
                          break;
                        v219 = v217 != 4 || v205 == 4;
                        v220 = !v219 || v218 > v212;
                        v185 = v216;
                      }
                      while (v220);
                    }
                    else
                    {
                      v221 = v214;
                      if (v205 == 1)
                      {
                        WebCore::LinkIcon::operator=(v185, (uint64_t *)(a1 + 80 * (v201 >> 1)));
                        if (v201 >= 2)
                        {
                          while (1)
                          {
                            v230 = v202 - 1;
                            v202 = (v202 - 1) >> 1;
                            v216 = a1 + 80 * v202;
                            if (*(_BYTE *)(v216 + 40) == 1
                              && (!*(_BYTE *)(a1 + 80 * v202 + 60) || v221 >= *(_DWORD *)(a1 + 80 * v202 + 56)))
                            {
                              break;
                            }
                            WebCore::LinkIcon::operator=(v203, (uint64_t *)(a1 + 80 * v202));
                            v203 = a1 + 80 * v202;
                            if (v230 < 2)
                              goto LABEL_629;
                          }
                        }
LABEL_628:
                        v216 = v203;
                      }
                      else
                      {
                        do
                        {
                          v216 = v203;
                          WebCore::LinkIcon::operator=(v185, (uint64_t *)v203);
                          if (!v202)
                            break;
                          v202 = (v202 - 1) >> 1;
                          v203 = a1 + 80 * v202;
                          v223 = *(unsigned __int8 *)(v203 + 40);
                          if (v223 == 1)
                            break;
                          if (*(_BYTE *)(a1 + 80 * v202 + 60))
                            v224 = *(_DWORD *)(a1 + 80 * v202 + 56);
                          else
                            v224 = ((v223 - 2) & 0xFD) != 0 ? 0 : 60;
                          if (v221 > v224)
                            break;
                          v225 = v223 != 4 || v205 == 4;
                          v226 = v225 && v221 >= v224;
                          v185 = v216;
                        }
                        while (!v226);
                      }
                    }
LABEL_629:
                    WebCore::LinkIcon::operator=(v216, &v272);
                    WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v272, v222);
                  }
                }
              }
            }
            WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v264, v199);
            v220 = v177-- <= 2;
            if (v220)
              return;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (uint64_t *)(a1 + 80 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x2801)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>((uint64_t)v12, a1, (uint64_t)v263);
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1, (uint64_t)v12, (uint64_t)v263);
          v13 = 5 * v11;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1 + 80, a1 + 16 * v13 - 80, (uint64_t)(a2 - 20));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1 + 160, a1 + 80 + 16 * v13, (uint64_t)(a2 - 30));
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1 + 16 * v13 - 80, (uint64_t)v12, a1 + 80 + 16 * v13);
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = 0;
          v272 = v14;
          v15 = *(_OWORD *)(a1 + 24);
          *(_OWORD *)v273 = *(_OWORD *)(a1 + 8);
          *(_OWORD *)&v273[16] = v15;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)v273 & 0xFFFFFFFE;
          v274 = *(_BYTE *)(a1 + 40);
          v16 = *(_QWORD *)(a1 + 48);
          v17 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)&v275 = v16;
          *((_QWORD *)&v275 + 1) = v17;
          v18 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 64) = 0;
          v276 = v18;
          v19 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 72) = 0;
          v277 = v19;
          WebCore::LinkIcon::operator=(a1, v12);
          WebCore::LinkIcon::operator=((uint64_t)v12, &v272);
          WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v272, v20);
        }
        --a3;
        if ((a4 & 1) != 0)
        {
          v21 = *(unsigned __int8 *)(a1 + 40);
          goto LABEL_31;
        }
        v22 = *(unsigned __int8 *)(a1 - 40);
        v21 = *(unsigned __int8 *)(a1 + 40);
        if (v22 == 1 && *(_BYTE *)(a1 + 40) != 1)
          goto LABEL_162;
        if (v22 != 1 && *(_BYTE *)(a1 + 40) == 1)
        {
          v21 = 1;
LABEL_31:
          v25 = *(_QWORD *)a1;
          *(_QWORD *)a1 = 0;
          v264 = v25;
          v26 = *(_OWORD *)(a1 + 24);
          v265 = *(_OWORD *)(a1 + 8);
          v266 = v26;
          *(_DWORD *)(a1 + 8) = v265 & 0xFFFFFFFE;
          v267 = v21;
          v28 = *(_QWORD *)(a1 + 48);
          v27 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 48) = 0;
          v268 = v28;
          v269 = v27;
          v29 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 64) = 0;
          v270 = v29;
          v30 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 72) = 0;
          v31 = a1 + 80;
          v271 = v30;
          if ((uint64_t *)(a1 + 80) == a2)
            goto LABEL_727;
          if ((((_BYTE)v21 - 2) & 0xFD) != 0)
            v32 = 0;
          else
            v32 = 60;
          if ((v27 & 0xFF00000000) == 0)
            LODWORD(v27) = v32;
          if (v21 == 1)
          {
            while (*(_BYTE *)(v31 + 40) != 1 || *(_BYTE *)(v31 + 60) && v27 < *(_DWORD *)(v31 + 56))
            {
              v31 += 80;
              if ((uint64_t *)v31 == a2)
                goto LABEL_727;
            }
          }
          else
          {
            while (1)
            {
              v33 = *(unsigned __int8 *)(v31 + 40);
              if (v33 == 1)
                break;
              if (*(_BYTE *)(v31 + 60))
                v34 = *(_DWORD *)(v31 + 56);
              else
                v34 = (((_BYTE)v33 - 2) & 0xFD) != 0 ? 0 : 60;
              if (v27 > v34)
                break;
              v35 = v33 != 4 || v21 == 4;
              v36 = v35 && v27 >= v34;
              if (v36)
                break;
              v31 += 80;
              if ((uint64_t *)v31 == a2)
                goto LABEL_727;
            }
          }
          if (v31 - 80 == a1)
          {
            i = a2;
            if (v31 < (unint64_t)a2)
            {
              for (i = a2 - 10; ; i -= 10)
              {
                v43 = *((unsigned __int8 *)i + 40);
                if (v21 == 1 || v43 != 1)
                {
                  if (v21 == 1 && v43 != 1)
                    break;
                  if (*((_BYTE *)i + 60))
                    v45 = *((_DWORD *)i + 14);
                  else
                    v45 = (((_BYTE)v43 - 2) & 0xFD) != 0 ? 0 : 60;
                  if (v27 <= v45)
                  {
                    if (v27 < v45)
                      break;
                    if (v43 == 4 && v21 != 4)
                      break;
                  }
                }
                if (v31 >= (unint64_t)i)
                  break;
              }
            }
          }
          else
          {
            v37 = a2;
            if (a2 == (uint64_t *)a1)
              goto LABEL_727;
            while (1)
            {
              i = v37 - 10;
              v39 = *((unsigned __int8 *)v37 - 40);
              if (v21 == 1 || v39 != 1)
              {
                if (v21 == 1 && v39 != 1)
                  break;
                if (*((_BYTE *)v37 - 20))
                  v41 = *((_DWORD *)v37 - 6);
                else
                  v41 = (((_BYTE)v39 - 2) & 0xFD) != 0 ? 0 : 60;
                if (v27 <= v41)
                {
                  v42 = v39 != 4 || v21 == 4;
                  if (!v42 || v27 < v41)
                    break;
                }
              }
              v37 = i;
              if (i == (uint64_t *)a1)
                goto LABEL_727;
            }
          }
          v8 = v31;
          if (v31 < (unint64_t)i)
          {
            v8 = v31;
            v47 = i;
            do
            {
              v48 = *(_QWORD *)v8;
              *(_QWORD *)v8 = 0;
              v272 = v48;
              v49 = *(_OWORD *)(v8 + 24);
              *(_OWORD *)v273 = *(_OWORD *)(v8 + 8);
              *(_OWORD *)&v273[16] = v49;
              *(_DWORD *)(v8 + 8) = *(_DWORD *)v273 & 0xFFFFFFFE;
              v274 = *(_BYTE *)(v8 + 40);
              v50 = *(_QWORD *)(v8 + 48);
              v51 = *(_QWORD *)(v8 + 56);
              *(_QWORD *)(v8 + 48) = 0;
              *(_QWORD *)&v275 = v50;
              *((_QWORD *)&v275 + 1) = v51;
              v52 = *(_QWORD *)(v8 + 64);
              *(_QWORD *)(v8 + 64) = 0;
              v276 = v52;
              v53 = *(_QWORD *)(v8 + 72);
              *(_QWORD *)(v8 + 72) = 0;
              v277 = v53;
              WebCore::LinkIcon::operator=(v8, v47);
              WebCore::LinkIcon::operator=((uint64_t)v47, &v272);
              WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v272, v54);
              v8 += 80;
              if ((uint64_t *)v8 == a2)
                goto LABEL_727;
              v21 = v267;
              v55 = ((v267 - 2) & 0xFD) != 0 ? 0 : 60;
              LODWORD(v27) = BYTE4(v269) ? v269 : v55;
              if (v267 == 1)
              {
                while (*(_BYTE *)(v8 + 40) != 1 || *(_BYTE *)(v8 + 60) && v27 < *(_DWORD *)(v8 + 56))
                {
                  v8 += 80;
                  if ((uint64_t *)v8 == a2)
                    goto LABEL_727;
                }
              }
              else
              {
                while (1)
                {
                  v56 = *(unsigned __int8 *)(v8 + 40);
                  if (v56 == 1)
                    break;
                  if (*(_BYTE *)(v8 + 60))
                    v57 = *(_DWORD *)(v8 + 56);
                  else
                    v57 = (((_BYTE)v56 - 2) & 0xFD) != 0 ? 0 : 60;
                  if (v27 > v57)
                    break;
                  v58 = v56 != 4 || v267 == 4;
                  if (v58 && v27 >= v57)
                    break;
                  v8 += 80;
                  if ((uint64_t *)v8 == a2)
                    goto LABEL_727;
                }
              }
              if (v47 == (uint64_t *)a1)
                goto LABEL_727;
              while (1)
              {
                v60 = v47 - 10;
                v61 = *((unsigned __int8 *)v47 - 40);
                if (v267 == 1 || v61 != 1)
                {
                  if (v267 == 1 && v61 != 1)
                    break;
                  if (*((_BYTE *)v47 - 20))
                    v63 = *((_DWORD *)v47 - 6);
                  else
                    v63 = (((_BYTE)v61 - 2) & 0xFD) != 0 ? 0 : 60;
                  if (v27 <= v63)
                  {
                    v64 = v61 != 4 || v267 == 4;
                    if (!v64 || v27 < v63)
                      break;
                  }
                }
                v47 -= 10;
                if (v60 == (uint64_t *)a1)
                  goto LABEL_727;
              }
              v47 -= 10;
            }
            while (v8 < (unint64_t)v60);
          }
          if (v8 - 80 != a1)
            WebCore::LinkIcon::operator=(a1, (uint64_t *)(v8 - 80));
          WebCore::LinkIcon::operator=(v8 - 80, &v264);
          WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v264, v65);
          if (v31 < (unint64_t)i)
          {
LABEL_161:
            std::__introsort<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *,false>(a1, v8 - 80, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          v66 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(a1, v8 - 80);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::LinkIconCollector::iconsOfTypes(WTF::OptionSet<WebCore::LinkIconType>)::$_0 &,WebCore::LinkIcon *>(v8, (uint64_t)a2))
          {
            if ((v66 & 1) != 0)
              continue;
            goto LABEL_161;
          }
          a2 = (uint64_t *)(v8 - 80);
          if ((v66 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (*(_BYTE *)(a1 - 20))
        {
          v23 = *(_DWORD *)(a1 - 24);
        }
        else if ((((_BYTE)v22 - 2) & 0xFD) != 0)
        {
          v23 = 0;
        }
        else
        {
          v23 = 60;
        }
        if (*(_BYTE *)(a1 + 60))
        {
          v24 = *(_DWORD *)(a1 + 56);
        }
        else if ((((_BYTE)v21 - 2) & 0xFD) != 0)
        {
          v24 = 0;
        }
        else
        {
          v24 = 60;
        }
        if (v24 <= v23 && (v24 < v23 || (v22 == 4 || *(_BYTE *)(a1 + 40) != 4) && v22 == 4 && *(_BYTE *)(a1 + 40) != 4))
          goto LABEL_31;
LABEL_162:
        v67 = *(_QWORD *)a1;
        *(_QWORD *)a1 = 0;
        v264 = v67;
        v68 = *(_OWORD *)(a1 + 24);
        v265 = *(_OWORD *)(a1 + 8);
        v266 = v68;
        *(_DWORD *)(a1 + 8) = v265 & 0xFFFFFFFE;
        v267 = v21;
        v69 = *(_QWORD *)(a1 + 48);
        v27 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 48) = 0;
        v268 = v69;
        v269 = v27;
        v70 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 64) = 0;
        v270 = v70;
        v71 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = 0;
        v271 = v71;
        v72 = *((unsigned __int8 *)a2 - 40);
        if (v21 == 1 && v72 != 1)
          goto LABEL_177;
        if (v21 != 1 && v72 == 1)
          goto LABEL_296;
        if ((((_BYTE)v21 - 2) & 0xFD) != 0)
          v73 = 0;
        else
          v73 = 60;
        if (BYTE4(v27))
          v73 = v27;
        if (*((_BYTE *)a2 - 20))
          v74 = *((_DWORD *)a2 - 6);
        else
          v74 = (((_BYTE)v72 - 2) & 0xFD) != 0 ? 0 : 60;
        if (v74 <= v73
          && (v74 < v73 || (v21 == 4 || v72 != 4) && v21 == 4 && v72 != 4))
        {
LABEL_296:
          v8 = a1 + 80;
          if ((uint64_t *)(a1 + 80) == a2)
            goto LABEL_727;
          if ((((_BYTE)v21 - 2) & 0xFD) != 0)
            v106 = 0;
          else
            v106 = 60;
          if (BYTE4(v27))
            v106 = v27;
          while (1)
          {
            v107 = *(unsigned __int8 *)(v8 + 40);
            if (v21 != 1 || v107 == 1)
            {
              if (v21 != 1 && v107 == 1)
                break;
              if (*(_BYTE *)(v8 + 60))
                v109 = *(_DWORD *)(v8 + 56);
              else
                v109 = (((_BYTE)v107 - 2) & 0xFD) != 0 ? 0 : 60;
              if (v109 <= v106)
              {
                if (v109 < v106)
                  break;
                v110 = v107 != 4 || v21 == 4;
                if (v110 && v21 == 4 && v107 != 4)
                  break;
              }
            }
            v8 += 80;
            if ((uint64_t *)v8 == a2)
              goto LABEL_727;
          }
        }
        else
        {
LABEL_177:
          v8 = a1 + 80;
          if (a1 + 80 < (unint64_t)a2)
          {
            if ((((_BYTE)v21 - 2) & 0xFD) != 0)
              v75 = 0;
            else
              v75 = 60;
            if (BYTE4(v27))
              v75 = v27;
            do
            {
              v76 = *(unsigned __int8 *)(v8 + 40);
              if (v21 != 1 || v76 == 1)
              {
                if (v21 != 1 && v76 == 1)
                  break;
                if (*(_BYTE *)(v8 + 60))
                  v78 = *(_DWORD *)(v8 + 56);
                else
                  v78 = (((_BYTE)v76 - 2) & 0xFD) != 0 ? 0 : 60;
                if (v78 <= v75)
                {
                  if (v78 < v75)
                    break;
                  v79 = v76 != 4 || v21 == 4;
                  if (v79 && v21 == 4 && v76 != 4)
                    break;
                }
              }
              v8 += 80;
            }
            while (v8 < (unint64_t)a2);
          }
        }
        v80 = a2;
        if (v8 < (unint64_t)a2)
        {
          if (a2 == (uint64_t *)a1)
            goto LABEL_727;
          if ((((_BYTE)v21 - 2) & 0xFD) != 0)
            v81 = 0;
          else
            v81 = 60;
          if (!BYTE4(v27))
            LODWORD(v27) = v81;
          v82 = a2;
          if (v21 == 1)
          {
            while (1)
            {
              v80 = v82 - 10;
              if (*((_BYTE *)v82 - 40) != 1)
                break;
              v21 = *((unsigned __int8 *)v82 - 20);
              if (*((_BYTE *)v82 - 20))
              {
                v21 = *((_DWORD *)v82 - 6);
                if (v21 > v27)
                  break;
              }
              if (v21 >= v27)
                break;
              v82 -= 10;
              if (v80 == (uint64_t *)a1)
                goto LABEL_727;
            }
          }
          else
          {
            v83 = a2;
            while (1)
            {
              v80 = v83 - 10;
              v84 = *((unsigned __int8 *)v83 - 40);
              if (v84 != 1)
              {
                if (*((_BYTE *)v83 - 20))
                  v85 = *((_DWORD *)v83 - 6);
                else
                  v85 = (((_BYTE)v84 - 2) & 0xFD) != 0 ? 0 : 60;
                if (v85 > v27)
                  break;
                v86 = v84 != 4 && v21 == 4;
                if (!v86 && v85 >= v27)
                  break;
              }
              v83 = v80;
              if (v80 == (uint64_t *)a1)
                goto LABEL_727;
            }
          }
        }
        if (v8 >= (unint64_t)v80)
        {
LABEL_292:
          if (v8 - 80 != a1)
            WebCore::LinkIcon::operator=(a1, (uint64_t *)(v8 - 80));
          WebCore::LinkIcon::operator=(v8 - 80, &v264);
          WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v264, v105);
          a4 = 0;
          continue;
        }
        while (1)
        {
          v88 = *(_QWORD *)v8;
          *(_QWORD *)v8 = 0;
          v272 = v88;
          v89 = *(_OWORD *)(v8 + 24);
          *(_OWORD *)v273 = *(_OWORD *)(v8 + 8);
          *(_OWORD *)&v273[16] = v89;
          *(_DWORD *)(v8 + 8) = *(_DWORD *)v273 & 0xFFFFFFFE;
          v274 = *(_BYTE *)(v8 + 40);
          v90 = *(_QWORD *)(v8 + 48);
          v91 = *(_QWORD *)(v8 + 56);
          *(_QWORD *)(v8 + 48) = 0;
          *(_QWORD *)&v275 = v90;
          *((_QWORD *)&v275 + 1) = v91;
          v92 = *(_QWORD *)(v8 + 64);
          *(_QWORD *)(v8 + 64) = 0;
          v276 = v92;
          v93 = *(_QWORD *)(v8 + 72);
          *(_QWORD *)(v8 + 72) = 0;
          v277 = v93;
          WebCore::LinkIcon::operator=(v8, v80);
          WebCore::LinkIcon::operator=((uint64_t)v80, &v272);
          WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v272, v94);
          v8 += 80;
          if ((uint64_t *)v8 == a2)
            break;
          LODWORD(v27) = v267;
          v95 = ((v267 - 2) & 0xFD) != 0 ? 0 : 60;
          v21 = BYTE4(v269) ? v269 : v95;
          while (1)
          {
            v96 = *(unsigned __int8 *)(v8 + 40);
            if (v267 != 1 || v96 == 1)
            {
              if (v267 != 1 && v96 == 1)
                break;
              if (*(_BYTE *)(v8 + 60))
                v98 = *(_DWORD *)(v8 + 56);
              else
                v98 = (((_BYTE)v96 - 2) & 0xFD) != 0 ? 0 : 60;
              if (v98 <= v21)
              {
                if (v98 < v21)
                  break;
                v99 = v96 != 4 || v267 == 4;
                if (v99 && v267 == 4 && v96 != 4)
                  break;
              }
            }
            v8 += 80;
            if ((uint64_t *)v8 == a2)
              goto LABEL_727;
          }
          if (v80 == (uint64_t *)a1)
            break;
          if (v267 == 1)
          {
            while (1)
            {
              v100 = v80 - 10;
              if (*((_BYTE *)v80 - 40) != 1)
                break;
              LODWORD(v27) = *((unsigned __int8 *)v80 - 20);
              if (*((_BYTE *)v80 - 20))
              {
                LODWORD(v27) = *((_DWORD *)v80 - 6);
                if (v27 > v21)
                  break;
              }
              if (v27 >= v21)
                break;
              v80 -= 10;
              if (v100 == (uint64_t *)a1)
                goto LABEL_727;
            }
          }
          else
          {
            while (1)
            {
              v100 = v80 - 10;
              v101 = *((unsigned __int8 *)v80 - 40);
              if (v101 != 1)
              {
                if (*((_BYTE *)v80 - 20))
                  v102 = *((_DWORD *)v80 - 6);
                else
                  v102 = (((_BYTE)v101 - 2) & 0xFD) != 0 ? 0 : 60;
                if (v102 > v21)
                  break;
                v103 = v101 != 4 && v267 == 4;
                if (!v103 && v102 >= v21)
                  break;
              }
              v80 -= 10;
              if (v100 == (uint64_t *)a1)
                goto LABEL_727;
            }
          }
          v80 = v100;
          if (v8 >= (unint64_t)v100)
            goto LABEL_292;
        }
LABEL_727:
        __break(1u);
LABEL_728:
        if ((((_DWORD)v27 - 2) & 0xFD) != 0)
          v113 = 0;
        else
          v113 = 60;
LABEL_731:
        if (*(_BYTE *)(a1 + 60))
        {
          v255 = *(_DWORD *)(a1 + 56);
        }
        else if (((v21 - 2) & 0xFD) != 0)
        {
          v255 = 0;
        }
        else
        {
          v255 = 60;
        }
        if (v255 <= v113 && (v255 < v113 || ((_DWORD)v27 == 4 || v21 != 4) && (_DWORD)v27 == 4 && v21 != 4))
        {
LABEL_738:
          v256 = *(_QWORD *)a1;
          *(_QWORD *)a1 = 0;
          v272 = v256;
          v257 = *(_OWORD *)(a1 + 24);
          *(_OWORD *)v273 = *(_OWORD *)(a1 + 8);
          *(_OWORD *)&v273[16] = v257;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)v273 & 0xFFFFFFFE;
          v274 = v21;
          v258 = *(_QWORD *)(a1 + 48);
          v259 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)&v275 = v258;
          *((_QWORD *)&v275 + 1) = v259;
          v260 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 64) = 0;
          v276 = v260;
          v261 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 72) = 0;
          v277 = v261;
          WebCore::LinkIcon::operator=(a1, v263);
          WebCore::LinkIcon::operator=((uint64_t)v263, &v272);
          WebCore::LinkIcon::~LinkIcon((WebCore::LinkIcon *)&v272, v262);
        }
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((float)(a2[-1].n128_f32[2] * a2[-1].n128_f32[3]) > (float)(v12->n128_f32[2] * v12->n128_f32[3]))
        {
          v148 = *v12;
          *v12 = a2[-1];
          a2[-1] = v148;
        }
        return;
      case 3:
        v67 = v12 + 1;
        v68 = v12[1].n128_f32[2] * v12[1].n128_f32[3];
        v69 = a2[-1].n128_f32[2] * a2[-1].n128_f32[3];
        if (v68 <= (float)(v12->n128_f32[2] * v12->n128_f32[3]))
        {
          if (v69 > v68)
          {
            v116 = *v67;
            *v67 = *v9;
            *v9 = v116;
            if ((float)(v12[1].n128_f32[2] * v12[1].n128_f32[3]) > (float)(v12->n128_f32[2] * v12->n128_f32[3]))
            {
              v152 = *v12;
              *v12 = *v67;
              *v67 = v152;
            }
          }
        }
        else
        {
          if (v69 > v68)
            goto LABEL_117;
          v149 = *v12;
          *v12 = *v67;
          *v67 = v149;
          if ((float)(a2[-1].n128_f32[2] * a2[-1].n128_f32[3]) > (float)(v12[1].n128_f32[2] * v12[1].n128_f32[3]))
          {
            v70 = *v67;
            *v67 = *v9;
            goto LABEL_118;
          }
        }
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *>(v12, v12 + 1, v12 + 2, a2 - 1, a5);
        return;
      case 5:
        v9 = v12 + 1;
        v71 = v12 + 2;
        v72 = v12 + 3;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *>(v12, v12 + 1, v12 + 2, v12 + 3, a5);
        if ((float)(a2[-1].n128_f32[2] * a2[-1].n128_f32[3]) > (float)(v12[3].n128_f32[2] * v12[3].n128_f32[3]))
        {
          v73 = *v72;
          *v72 = a2[-1];
          a2[-1] = v73;
          if ((float)(v12[3].n128_f32[2] * v12[3].n128_f32[3]) > (float)(v12[2].n128_f32[2] * v12[2].n128_f32[3]))
          {
            v74 = *v71;
            *v71 = *v72;
            *v72 = v74;
            if ((float)(v12[2].n128_f32[2] * v12[2].n128_f32[3]) > (float)(v12[1].n128_f32[2] * v12[1].n128_f32[3]))
            {
              v75 = *v9;
              *v9 = *v71;
              *v71 = v75;
              if ((float)(v12[1].n128_f32[2] * v12[1].n128_f32[3]) > (float)(v12->n128_f32[2] * v12->n128_f32[3]))
              {
LABEL_117:
                v150 = *v12;
                *v12 = *v9;
                v70 = v150;
LABEL_118:
                *v9 = v70;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v89 = (unint64_t)(v14 - 2) >> 1;
              v90 = v89;
              do
              {
                if (v89 >= v90)
                {
                  v91 = (2 * v90) | 1;
                  v92 = &v12[v91];
                  if (2 * v90 + 2 < v14
                    && (float)(v92->n128_f32[2] * v92->n128_f32[3]) > (float)(v92[1].n128_f32[2] * v92[1].n128_f32[3]))
                  {
                    ++v92;
                    v91 = 2 * v90 + 2;
                  }
                  v93 = (int32x4_t *)&v12[v90];
                  v94 = *(int8x16_t *)v93;
                  v95 = (float32x2_t)vdup_laneq_s32(*v93, 2);
                  v95.i32[0] = v92->n128_i32[2];
                  v96 = vextq_s8(v94, v94, 8uLL);
                  v96.i32[0] = v92->n128_i32[3];
                  v97 = vmul_f32(v95, *(float32x2_t *)v96.i8);
                  if (v97.f32[0] <= v97.f32[1])
                  {
                    do
                    {
                      v98 = (int8x16_t *)v92;
                      *v93 = *(int32x4_t *)v92;
                      if (v89 < v91)
                        break;
                      v99 = 2 * v91;
                      v91 = (2 * v91) | 1;
                      v92 = &v12[v91];
                      v100 = v99 + 2;
                      if (v100 < v14
                        && (float)(v92->n128_f32[2] * v92->n128_f32[3]) > (float)(v92[1].n128_f32[2] * v92[1].n128_f32[3]))
                      {
                        ++v92;
                        v91 = v100;
                      }
                      v93 = (int32x4_t *)v98;
                    }
                    while ((float)(v92->n128_f32[2] * v92->n128_f32[3]) <= v97.f32[1]);
                    *v98 = v94;
                  }
                }
                v101 = v90-- <= 0;
              }
              while (!v101);
              v102 = (unint64_t)v13 >> 4;
              do
              {
                v103 = 0;
                v151 = *v12;
                v104 = v12;
                do
                {
                  v105 = v104;
                  v104 += v103 + 1;
                  v106 = 2 * v103;
                  v103 = (2 * v103) | 1;
                  v107 = v106 + 2;
                  if (v107 < v102
                    && (float)(v104->n128_f32[2] * v104->n128_f32[3]) > (float)(v104[1].n128_f32[2] * v104[1].n128_f32[3]))
                  {
                    ++v104;
                    v103 = v107;
                  }
                  *v105 = *v104;
                }
                while (v103 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
                if (v104 == --a2)
                {
                  *v104 = v151;
                }
                else
                {
                  *v104 = *a2;
                  *a2 = v151;
                  v108 = (char *)v104 - (char *)v12 + 16;
                  if (v108 >= 17)
                  {
                    v109 = (((unint64_t)v108 >> 4) - 2) >> 1;
                    v110 = &v12[v109];
                    v111 = v104->n128_f32[2];
                    v112 = v104->n128_f32[3];
                    if ((float)(v110->n128_f32[2] * v110->n128_f32[3]) > (float)(v111 * v112))
                    {
                      v113 = v104->n128_u32[0];
                      v114 = v104->n128_u32[1];
                      do
                      {
                        v115 = v110;
                        *v104 = *v110;
                        if (!v109)
                          break;
                        v109 = (v109 - 1) >> 1;
                        v110 = &v12[v109];
                        v104 = v115;
                      }
                      while ((float)(v110->n128_f32[2] * v110->n128_f32[3]) > (float)(v111 * v112));
                      v115->n128_u32[0] = v113;
                      v115->n128_u32[1] = v114;
                      v115->n128_f32[2] = v111;
                      v115->n128_f32[3] = v112;
                    }
                  }
                }
                v101 = v102-- <= 2;
              }
              while (!v101);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_f32[2] * a2[-1].n128_f32[3];
          if ((unint64_t)v13 >= 0x801)
          {
            v18 = v16->n128_f32[2] * v16->n128_f32[3];
            if (v18 <= (float)(v12->n128_f32[2] * v12->n128_f32[3]))
            {
              if (v17 > v18)
              {
                v131 = *v16;
                *v16 = *v9;
                *v9 = v131;
                if ((float)(v16->n128_f32[2] * v16->n128_f32[3]) > (float)(v12->n128_f32[2] * v12->n128_f32[3]))
                {
                  v132 = *v12;
                  *v12 = *v16;
                  *v16 = v132;
                }
              }
            }
            else
            {
              if (v17 <= v18)
              {
                v135 = *v12;
                *v12 = *v16;
                *v16 = v135;
                if ((float)(a2[-1].n128_f32[2] * a2[-1].n128_f32[3]) <= (float)(v16->n128_f32[2] * v16->n128_f32[3]))
                  goto LABEL_21;
                v129 = *v16;
                *v16 = *v9;
              }
              else
              {
                v129 = *v12;
                *v12 = *v9;
              }
              *v9 = v129;
            }
LABEL_21:
            v20 = v12 + 1;
            v21 = &v12[v15];
            v22 = v21 - 1;
            v23 = v21[-1].n128_f32[2] * v21[-1].n128_f32[3];
            v24 = a2[-2].n128_f32[2] * a2[-2].n128_f32[3];
            if (v23 <= (float)(v12[1].n128_f32[2] * v12[1].n128_f32[3]))
            {
              if (v24 > v23)
              {
                v136 = *v22;
                *v22 = *v10;
                *v10 = v136;
                if ((float)(v21[-1].n128_f32[2] * v21[-1].n128_f32[3]) > (float)(v12[1].n128_f32[2] * v12[1].n128_f32[3]))
                {
                  v26 = *v20;
                  *v20 = *v22;
                  *v22 = v26;
                }
              }
            }
            else
            {
              if (v24 <= v23)
              {
                v27 = *v20;
                *v20 = *v22;
                *v22 = v27;
                if ((float)(a2[-2].n128_f32[2] * a2[-2].n128_f32[3]) <= (float)(v21[-1].n128_f32[2]
                                                                               * v21[-1].n128_f32[3]))
                  goto LABEL_33;
                v138 = *v22;
                *v22 = *v10;
                v25 = v138;
              }
              else
              {
                v25 = *v20;
                *v20 = *v10;
              }
              *v10 = v25;
            }
LABEL_33:
            v28 = v12 + 2;
            v29 = &v12[v15];
            v30 = v29 + 1;
            v31 = v29[1].n128_f32[2] * v29[1].n128_f32[3];
            v32 = a2[-3].n128_f32[2] * a2[-3].n128_f32[3];
            if (v31 <= (float)(v12[2].n128_f32[2] * v12[2].n128_f32[3]))
            {
              if (v32 > v31)
              {
                v139 = *v30;
                *v30 = *v11;
                *v11 = v139;
                if ((float)(v29[1].n128_f32[2] * v29[1].n128_f32[3]) > (float)(v12[2].n128_f32[2] * v12[2].n128_f32[3]))
                {
                  v34 = *v28;
                  *v28 = *v30;
                  *v30 = v34;
                }
              }
            }
            else
            {
              if (v32 <= v31)
              {
                v35 = *v28;
                *v28 = *v30;
                *v30 = v35;
                if ((float)(a2[-3].n128_f32[2] * a2[-3].n128_f32[3]) <= (float)(v29[1].n128_f32[2] * v29[1].n128_f32[3]))
                  goto LABEL_42;
                v140 = *v30;
                *v30 = *v11;
                v33 = v140;
              }
              else
              {
                v33 = *v28;
                *v28 = *v11;
              }
              *v11 = v33;
            }
LABEL_42:
            v36 = v16->n128_f32[2] * v16->n128_f32[3];
            v37 = v29[1].n128_f32[2] * v29[1].n128_f32[3];
            if (v36 <= (float)(v22->n128_f32[2] * v22->n128_f32[3]))
            {
              if (v37 > v36)
              {
                v142 = *v16;
                *v16 = *v30;
                *v30 = v142;
                if ((float)(v16->n128_f32[2] * v16->n128_f32[3]) > (float)(v22->n128_f32[2] * v22->n128_f32[3]))
                {
                  v143 = *v22;
                  *v22 = *v16;
                  *v16 = v143;
                }
              }
              goto LABEL_51;
            }
            if (v37 <= v36)
            {
              v144 = *v22;
              *v22 = *v16;
              *v16 = v144;
              if ((float)(v29[1].n128_f32[2] * v29[1].n128_f32[3]) <= (float)(v16->n128_f32[2] * v16->n128_f32[3]))
              {
LABEL_51:
                v145 = *v12;
                *v12 = *v16;
                a5 = v145;
                *v16 = v145;
                goto LABEL_52;
              }
              v141 = *v16;
              *v16 = *v30;
            }
            else
            {
              v141 = *v22;
              *v22 = *v30;
            }
            *v30 = v141;
            goto LABEL_51;
          }
          v19 = v12->n128_f32[2] * v12->n128_f32[3];
          if (v19 <= (float)(v16->n128_f32[2] * v16->n128_f32[3]))
          {
            if (v17 > v19)
            {
              v133 = *v12;
              *v12 = *v9;
              a5 = v133;
              *v9 = v133;
              if ((float)(v12->n128_f32[2] * v12->n128_f32[3]) > (float)(v16->n128_f32[2] * v16->n128_f32[3]))
              {
                v134 = *v16;
                *v16 = *v12;
                a5 = v134;
                *v12 = v134;
              }
            }
          }
          else
          {
            if (v17 <= v19)
            {
              v137 = *v16;
              *v16 = *v12;
              a5 = v137;
              *v12 = v137;
              if ((float)(a2[-1].n128_f32[2] * a2[-1].n128_f32[3]) <= (float)(v12->n128_f32[2] * v12->n128_f32[3]))
                goto LABEL_52;
              v130 = *v12;
              *v12 = *v9;
            }
            else
            {
              v130 = *v16;
              *v16 = *v9;
            }
            a5 = v130;
            *v9 = v130;
          }
LABEL_52:
          --a3;
          a5.n128_u32[0] = v12->n128_u32[0];
          if ((a4 & 1) == 0)
          {
            v39 = v12->n128_u32[1];
            v38 = v12->n128_f32[2];
            v40 = v12->n128_f32[3];
            v41 = v38 * v40;
            if ((float)(v12[-1].n128_f32[2] * v12[-1].n128_f32[3]) > (float)(v38 * v40))
              goto LABEL_55;
            v57 = v12 + 1;
            if (v41 <= (float)(a2[-1].n128_f32[2] * a2[-1].n128_f32[3]))
            {
              do
              {
                v12 = v57;
                if (v57 >= a2)
                  break;
                v59 = v57->n128_f32[2] * v57->n128_f32[3];
                ++v57;
              }
              while (v41 <= v59);
            }
            else
            {
              do
              {
                if (v57 == a2)
                  goto LABEL_181;
                v58 = v57->n128_f32[2] * v57->n128_f32[3];
                ++v57;
              }
              while (v41 <= v58);
              v12 = v57 - 1;
            }
            v60 = a2;
            if (v12 < a2)
            {
              v61 = a2;
              while (v61 != a1)
              {
                v60 = v61 - 1;
                v62 = v61[-1].n128_f32[2] * v61[-1].n128_f32[3];
                --v61;
                if (v41 <= v62)
                  goto LABEL_92;
              }
              goto LABEL_181;
            }
LABEL_92:
            if (v12 < v60)
            {
              do
              {
                v147 = *v12;
                *v12 = *v60;
                *v60 = v147;
                v63 = v12 + 1;
                do
                {
                  if (v63 == a2)
                    goto LABEL_181;
                  v64 = v63->n128_f32[2] * v63->n128_f32[3];
                  ++v63;
                }
                while (v41 <= v64);
                v12 = v63 - 1;
                do
                {
                  if (v60 == a1)
                    goto LABEL_181;
                  v65 = v60 - 1;
                  v66 = v60[-1].n128_f32[2] * v60[-1].n128_f32[3];
                  --v60;
                }
                while (v41 > v66);
                v60 = v65;
              }
              while (v12 < v65);
            }
            if (&v12[-1] != a1)
              *a1 = v12[-1];
            a4 = 0;
            v12[-1].n128_u32[0] = a5.n128_u32[0];
            v12[-1].n128_u32[1] = v39;
            v12[-1].n128_f32[2] = v38;
            v12[-1].n128_f32[3] = v40;
            continue;
          }
          v39 = v12->n128_u32[1];
          v38 = v12->n128_f32[2];
          v40 = v12->n128_f32[3];
          v41 = v38 * v40;
LABEL_55:
          v42 = 0;
          do
          {
            v43 = &v12[v42];
            if (&v12[v42 + 1] == a2)
              goto LABEL_181;
            ++v42;
          }
          while ((float)(v43[1].n128_f32[2] * v43[1].n128_f32[3]) > v41);
          v44 = &v12[v42];
          v45 = a2;
          if (v42 != 1)
          {
            while (v45 != v12)
            {
              v46 = v45 - 1;
              v47 = v45[-1].n128_f32[2] * v45[-1].n128_f32[3];
              --v45;
              if (v47 > v41)
                goto LABEL_67;
            }
            goto LABEL_181;
          }
          v48 = a2;
          while (v44 < v48)
          {
            v46 = v48 - 1;
            v49 = v48[-1].n128_f32[2] * v48[-1].n128_f32[3];
            --v48;
            if (v49 > v41)
              goto LABEL_67;
          }
          v46 = v48;
LABEL_67:
          v12 = v44;
          if (v44 < v46)
          {
            v50 = v46;
            do
            {
              v146 = *v12;
              *v12 = *v50;
              *v50 = v146;
              v51 = v12 + 1;
              do
              {
                if (v51 == a2)
                  goto LABEL_181;
                v52 = v51->n128_f32[2] * v51->n128_f32[3];
                ++v51;
              }
              while (v52 > v41);
              v12 = v51 - 1;
              do
              {
                if (v50 == a1)
                  goto LABEL_181;
                v53 = v50 - 1;
                v54 = v50[-1].n128_f32[2] * v50[-1].n128_f32[3];
                --v50;
              }
              while (v54 <= v41);
              v50 = v53;
            }
            while (v12 < v53);
          }
          if (&v12[-1] != a1)
            *a1 = v12[-1];
          v12[-1].n128_u32[0] = a5.n128_u32[0];
          v12[-1].n128_u32[1] = v39;
          v12[-1].n128_f32[2] = v38;
          v12[-1].n128_f32[3] = v40;
          if (v44 < v46)
            goto LABEL_81;
          v55 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *>(a1, v12 - 1, a5);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *>(v12, a2, v56))
          {
            if (v55)
              continue;
LABEL_81:
            std::__introsort<std::_ClassicAlgPolicy,WebCore::ElementTargetingController::numberOfVisibilityAdjustmentRects(void)::$_0 &,WebCore::FloatRect *,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v55)
            return;
          goto LABEL_1;
        }
        v76 = v12 + 1;
        v78 = v12 == a2 || v76 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v78)
          {
            v79 = 0;
            v80 = v12;
            do
            {
              v81 = v76;
              v82 = v80[1].n128_f32[2];
              v83 = v80[1].n128_f32[3];
              if ((float)(v82 * v83) > (float)(v80->n128_f32[2] * v80->n128_f32[3]))
              {
                v84 = v76->n128_u32[0];
                v85 = v80[1].n128_u32[1];
                v86 = v79;
                while (1)
                {
                  *(__n128 *)((char *)v12 + v86 + 16) = *(__n128 *)((char *)v12 + v86);
                  if (!v86)
                    break;
                  v87 = *(float *)((char *)&v12->n128_f32[-2] + v86) * *(float *)((char *)&v12->n128_f32[-1] + v86);
                  v86 -= 16;
                  if ((float)(v82 * v83) <= v87)
                  {
                    v88 = (uint64_t)&v12[1] + v86;
                    goto LABEL_134;
                  }
                }
                v88 = (uint64_t)v12;
LABEL_134:
                *(_DWORD *)v88 = v84;
                *(_DWORD *)(v88 + 4) = v85;
                *(float *)(v88 + 8) = v82;
                *(float *)(v88 + 12) = v83;
              }
              v76 = v81 + 1;
              v79 += 16;
              v80 = v81;
            }
            while (&v81[1] != a2);
          }
        }
        else if (!v78)
        {
          v117 = 0;
          v118 = -1;
          v119 = 1;
          v120 = v12;
          while (1)
          {
            v121 = &v12[v117];
            v117 = v119;
            v122 = *(float32x2_t *)&v120[1].n128_i8[8];
            v123 = vmul_lane_f32(v122, v122, 1).f32[0];
            if (v123 > (float)(v121->n128_f32[2] * v121->n128_f32[3]))
              break;
LABEL_179:
            v120 = &v12[v117];
            v119 = v117 + 1;
            ++v76;
            --v118;
            if (v76 == a2)
              return;
          }
          LODWORD(v124) = v76->n128_u32[0];
          v125 = v120[1].n128_u32[1];
          v126 = (float *)v76;
          v127 = v118;
          while (1)
          {
            *(_OWORD *)v126 = *((_OWORD *)v126 - 1);
            if (!v127)
              break;
            v128 = *(v126 - 6) * *(v126 - 5);
            ++v127;
            v126 -= 4;
            if (v123 <= v128)
            {
              DWORD1(v124) = v125;
              *((float32x2_t *)&v124 + 1) = v122;
              *(_OWORD *)v126 = v124;
              goto LABEL_179;
            }
          }
LABEL_181:
          __break(1u);
        }
        return;
    }
  }
}

  v9 = (float *)&a2[-1];
  v10 = (float *)&a2[-2];
  v11 = (float *)&a2[-3];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return a5.n128_f32[0];
      case 2:
        v59 = a2[-1].n128_f32[0];
        --a2;
        a5.n128_f32[0] = v59;
        if (v59 < v12->n128_f32[0])
          goto LABEL_108;
        return a5.n128_f32[0];
      case 3:
        v44 = v12 + 1;
        a5.n128_u32[0] = v12[1].n128_u32[0];
        v60 = a2[-1].n128_f32[0];
        --a2;
        v61 = v60;
        if (a5.n128_f32[0] < v12->n128_f32[0])
        {
          if (v61 >= a5.n128_f32[0])
            goto LABEL_179;
LABEL_108:
          v129 = *v12;
          *v12 = *a2;
          a5 = v129;
          goto LABEL_109;
        }
        if (v61 < a5.n128_f32[0])
        {
          a5 = *v44;
          *v44 = *a2;
          *a2 = a5;
          a5.n128_u32[0] = v12[1].n128_u32[0];
          if (a5.n128_f32[0] < v12->n128_f32[0])
          {
            v132 = *v12;
            *v12 = *v44;
            a5.n128_u32[0] = v132.n128_u32[0];
            *v44 = v132;
          }
        }
        return a5.n128_f32[0];
      case 4:
        a5.n128_u32[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*>(v12, (float *)&v12[1], (float *)&v12[2], (unsigned __int32 *)&a2[-1], a5).n128_u32[0];
        return a5.n128_f32[0];
      case 5:
        v62 = v12 + 1;
        v63 = v12 + 2;
        v64 = v12 + 3;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*>(v12, (float *)&v12[1], (float *)&v12[2], (unsigned __int32 *)&v12[3], a5);
        v66 = a2[-1].n128_f32[0];
        v65 = a2 - 1;
        a5.n128_f32[0] = v66;
        if (v66 < v12[3].n128_f32[0])
        {
          a5 = *v64;
          *v64 = *v65;
          *v65 = a5;
          a5.n128_u32[0] = v64->n128_u32[0];
          if (v64->n128_f32[0] < v63->n128_f32[0])
          {
            a5 = *v63;
            *v63 = *v64;
            *v64 = a5;
            a5.n128_u32[0] = v63->n128_u32[0];
            if (v63->n128_f32[0] < v62->n128_f32[0])
            {
              a5 = *v62;
              *v62 = *v63;
              *v63 = a5;
              a5.n128_u32[0] = v12[1].n128_u32[0];
              if (a5.n128_f32[0] < v12->n128_f32[0])
              {
                v130 = *v12;
                *v12 = *v62;
                a5.n128_u32[0] = v130.n128_u32[0];
                *v62 = v130;
              }
            }
          }
        }
        return a5.n128_f32[0];
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v77 = (unint64_t)(v14 - 2) >> 1;
              v78 = v77;
              do
              {
                if (v77 >= v78)
                {
                  v79 = (2 * v78) | 1;
                  v80 = (float *)&v12[v79];
                  if (2 * v78 + 2 < v14 && *v80 < v80[4])
                  {
                    v80 += 4;
                    v79 = 2 * v78 + 2;
                  }
                  v81 = &v12[v78];
                  v82 = *v81;
                  if (*v80 >= COERCE_FLOAT(*v81))
                  {
                    do
                    {
                      v83 = v80;
                      *v81 = *(__n128 *)v80;
                      if (v77 < v79)
                        break;
                      v84 = 2 * v79;
                      v79 = (2 * v79) | 1;
                      v80 = (float *)&v12[v79];
                      v85 = v84 + 2;
                      if (v85 < v14 && *v80 < v80[4])
                      {
                        v80 += 4;
                        v79 = v85;
                      }
                      v81 = (__n128 *)v83;
                    }
                    while (*v80 >= v82.n128_f32[0]);
                    *(__n128 *)v83 = v82;
                  }
                }
                v86 = v78-- <= 0;
              }
              while (!v86);
              v87 = (unint64_t)v13 >> 4;
              do
              {
                v88 = 0;
                v131 = *v12;
                v89 = v12;
                do
                {
                  v90 = v89;
                  v89 += v88 + 1;
                  v91 = 2 * v88;
                  v88 = (2 * v88) | 1;
                  v92 = v91 + 2;
                  if (v92 < v87 && v89->n128_f32[0] < v89[1].n128_f32[0])
                  {
                    ++v89;
                    v88 = v92;
                  }
                  *v90 = *v89;
                }
                while (v88 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
                if (v89 == --a2)
                {
                  a5.n128_u32[0] = v131.n128_u32[0];
                  *v89 = v131;
                }
                else
                {
                  *v89 = *a2;
                  a5.n128_u32[0] = v131.n128_u32[0];
                  *a2 = v131;
                  v93 = (char *)v89 - (char *)v12 + 16;
                  if (v93 >= 17)
                  {
                    v94 = (((unint64_t)v93 >> 4) - 2) >> 1;
                    v95 = &v12[v94];
                    a5.n128_u32[0] = v89->n128_u32[0];
                    if (v95->n128_f32[0] < v89->n128_f32[0])
                    {
                      v96 = *(unint64_t *)((char *)v89->n128_u64 + 4);
                      v97 = v89->n128_u32[3];
                      do
                      {
                        v98 = v95;
                        *v89 = *v95;
                        if (!v94)
                          break;
                        v94 = (v94 - 1) >> 1;
                        v95 = &v12[v94];
                        v89 = v98;
                      }
                      while (v95->n128_f32[0] < a5.n128_f32[0]);
                      v98->n128_u32[0] = a5.n128_u32[0];
                      *(unint64_t *)((char *)v98->n128_u64 + 4) = v96;
                      v98->n128_u32[3] = v97;
                    }
                  }
                }
                v86 = v87-- <= 2;
              }
              while (!v86);
            }
            return a5.n128_f32[0];
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (float *)&v12[(unint64_t)v14 >> 1];
          v17 = *v9;
          if ((unint64_t)v13 >= 0x801)
          {
            v18 = *v16;
            if (*v16 >= v12->n128_f32[0])
            {
              if (v17 < v18)
              {
                v112 = *(__n128 *)v16;
                *(_OWORD *)v16 = *(_OWORD *)v9;
                *(__n128 *)v9 = v112;
                if (*v16 < v12->n128_f32[0])
                {
                  v113 = *v12;
                  *v12 = *(__n128 *)v16;
                  *(__n128 *)v16 = v113;
                }
              }
            }
            else
            {
              if (v17 >= v18)
              {
                v116 = *v12;
                *v12 = *(__n128 *)v16;
                *(__n128 *)v16 = v116;
                if (*v9 >= *v16)
                  goto LABEL_21;
                v110 = *(__n128 *)v16;
                *(_OWORD *)v16 = *(_OWORD *)v9;
              }
              else
              {
                v110 = *v12;
                *v12 = *(__n128 *)v9;
              }
              *(__n128 *)v9 = v110;
            }
LABEL_21:
            v20 = v12 + 1;
            v21 = &v12[v15];
            v23 = v21[-1].n128_f32[0];
            v22 = v21 - 1;
            v24 = v23;
            v25 = *v10;
            if (v23 >= v12[1].n128_f32[0])
            {
              if (v25 < v24)
              {
                v117 = *v22;
                *v22 = *(__n128 *)v10;
                *(__n128 *)v10 = v117;
                if (v22->n128_f32[0] < v20->n128_f32[0])
                {
                  v27 = *v20;
                  *v20 = *v22;
                  *v22 = v27;
                }
              }
            }
            else
            {
              if (v25 >= v24)
              {
                v28 = *v20;
                *v20 = *v22;
                *v22 = v28;
                if (*v10 >= v22->n128_f32[0])
                  goto LABEL_33;
                v119 = *v22;
                *v22 = *(__n128 *)v10;
                v26 = v119;
              }
              else
              {
                v26 = *v20;
                *v20 = *(__n128 *)v10;
              }
              *(__n128 *)v10 = v26;
            }
LABEL_33:
            v29 = v12 + 2;
            v30 = &v12[v15];
            v32 = v30[1].n128_f32[0];
            v31 = v30 + 1;
            v33 = v32;
            v34 = *v11;
            if (v32 >= v12[2].n128_f32[0])
            {
              if (v34 < v33)
              {
                v120 = *v31;
                *v31 = *(__n128 *)v11;
                *(__n128 *)v11 = v120;
                if (v31->n128_f32[0] < v29->n128_f32[0])
                {
                  v36 = *v29;
                  *v29 = *v31;
                  *v31 = v36;
                }
              }
            }
            else
            {
              if (v34 >= v33)
              {
                v37 = *v29;
                *v29 = *v31;
                *v31 = v37;
                if (*v11 >= v31->n128_f32[0])
                  goto LABEL_42;
                v121 = *v31;
                *v31 = *(__n128 *)v11;
                v35 = v121;
              }
              else
              {
                v35 = *v29;
                *v29 = *(__n128 *)v11;
              }
              *(__n128 *)v11 = v35;
            }
LABEL_42:
            v38 = *v16;
            v39 = v31->n128_f32[0];
            if (*v16 >= v22->n128_f32[0])
            {
              if (v39 < v38)
              {
                v123 = *(__n128 *)v16;
                *(__n128 *)v16 = *v31;
                *v31 = v123;
                if (*v16 < v22->n128_f32[0])
                {
                  v124 = *v22;
                  *v22 = *(__n128 *)v16;
                  *(__n128 *)v16 = v124;
                }
              }
              goto LABEL_51;
            }
            if (v39 >= v38)
            {
              v125 = *v22;
              *v22 = *(__n128 *)v16;
              *(__n128 *)v16 = v125;
              if (v31->n128_f32[0] >= *v16)
              {
LABEL_51:
                v126 = *v12;
                *v12 = *(__n128 *)v16;
                a5 = v126;
                *(__n128 *)v16 = v126;
                goto LABEL_52;
              }
              v122 = *(__n128 *)v16;
              *(__n128 *)v16 = *v31;
            }
            else
            {
              v122 = *v22;
              *v22 = *v31;
            }
            *v31 = v122;
            goto LABEL_51;
          }
          v19 = v12->n128_f32[0];
          if (v12->n128_f32[0] >= *v16)
          {
            if (v17 < v19)
            {
              v114 = *v12;
              *v12 = *(__n128 *)v9;
              a5 = v114;
              *(__n128 *)v9 = v114;
              if (v12->n128_f32[0] < *v16)
              {
                v115 = *(__n128 *)v16;
                *(__n128 *)v16 = *v12;
                a5 = v115;
                *v12 = v115;
              }
            }
          }
          else
          {
            if (v17 >= v19)
            {
              v118 = *(__n128 *)v16;
              *(__n128 *)v16 = *v12;
              a5 = v118;
              *v12 = v118;
              if (*v9 >= v12->n128_f32[0])
                goto LABEL_52;
              v111 = *v12;
              *v12 = *(__n128 *)v9;
            }
            else
            {
              v111 = *(__n128 *)v16;
              *(_OWORD *)v16 = *(_OWORD *)v9;
            }
            a5 = v111;
            *(__n128 *)v9 = v111;
          }
LABEL_52:
          --a3;
          a5.n128_u32[0] = v12->n128_u32[0];
          if ((a4 & 1) == 0)
          {
            v41 = v12->n128_u32[1];
            v40 = v12->n128_u32[2];
            v42 = v12->n128_u32[3];
            if (v12[-1].n128_f32[0] < a5.n128_f32[0])
              goto LABEL_55;
            v44 = v12 + 1;
            if (a5.n128_f32[0] >= *v9)
            {
              do
              {
                v12 = v44;
                if (v44 >= a2)
                  break;
                ++v44;
              }
              while (a5.n128_f32[0] >= v12->n128_f32[0]);
            }
            else
            {
              do
              {
                if (v44 == a2)
                  goto LABEL_178;
                v54 = v44->n128_f32[0];
                ++v44;
              }
              while (a5.n128_f32[0] >= v54);
              v12 = v44 - 1;
            }
            v44 = a2;
            if (v12 < a2)
            {
              v44 = a2;
              while (v44 != a1)
              {
                v55 = v44[-1].n128_f32[0];
                --v44;
                if (a5.n128_f32[0] >= v55)
                  goto LABEL_97;
              }
              goto LABEL_178;
            }
LABEL_97:
            if (v12 < v44)
            {
              v128 = *v12;
              *v12 = *v44;
              *v44 = v128;
              v56 = (float *)&v12[1];
              while (v56 != (float *)a2)
              {
                v57 = *v56;
                v56 += 4;
                if (a5.n128_f32[0] < v57)
                {
                  v12 = (__n128 *)(v56 - 4);
                  while (v44 != a1)
                  {
                    v58 = v44[-1].n128_f32[0];
                    --v44;
                    if (a5.n128_f32[0] >= v58)
                      goto LABEL_97;
                  }
                  goto LABEL_178;
                }
              }
              goto LABEL_178;
            }
            if (&v12[-1] != a1)
              *a1 = v12[-1];
            a4 = 0;
            v12[-1].n128_u32[0] = a5.n128_u32[0];
            v12[-1].n128_u32[1] = v41;
            v12[-1].n128_u32[2] = v40;
            v12[-1].n128_u32[3] = v42;
            continue;
          }
          v41 = v12->n128_u32[1];
          v40 = v12->n128_u32[2];
          v42 = v12->n128_u32[3];
LABEL_55:
          v43 = 0;
          do
          {
            v44 = &v12[v43 + 1];
            if (v44 == a2)
              goto LABEL_178;
            ++v43;
          }
          while (v44->n128_f32[0] < a5.n128_f32[0]);
          v44 = &v12[v43];
          v45 = a2;
          if (v43 != 1)
          {
            while (v45 != v12)
            {
              v46 = v45[-1].n128_f32[0];
              --v45;
              if (v46 < a5.n128_f32[0])
                goto LABEL_65;
            }
            goto LABEL_178;
          }
          v45 = a2;
          do
          {
            if (v44 >= v45)
              break;
            v47 = v45[-1].n128_f32[0];
            --v45;
          }
          while (v47 >= a5.n128_f32[0]);
LABEL_65:
          v12 = (__n128 *)((char *)v12 + v43 * 16);
          if (v44 < v45)
          {
            v48 = v45;
            do
            {
              v127 = *v12;
              *v12 = *v48;
              *v48 = v127;
              v49 = (float *)&v12[1];
              do
              {
                if (v49 == (float *)a2)
                  goto LABEL_178;
                v50 = *v49;
                v49 += 4;
              }
              while (v50 < a5.n128_f32[0]);
              v12 = (__n128 *)(v49 - 4);
              do
              {
                if (v48 == a1)
                  goto LABEL_178;
                v51 = v48[-1].n128_f32[0];
                --v48;
              }
              while (v51 >= a5.n128_f32[0]);
            }
            while (v12 < v48);
          }
          if (&v12[-1] != a1)
            *a1 = v12[-1];
          v12[-1].n128_u32[0] = a5.n128_u32[0];
          v12[-1].n128_u32[1] = v41;
          v12[-1].n128_u32[2] = v40;
          v12[-1].n128_u32[3] = v42;
          if (v44 < v45)
            goto LABEL_79;
          v52 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*>(a1, v12 - 1, a5);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*>(v12, a2, v53))
          {
            if (v52)
              continue;
LABEL_79:
            std::__introsort<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_0 &,WebCore::FloatRect*,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v52)
            return a5.n128_f32[0];
          goto LABEL_1;
        }
        v44 = v12 + 1;
        v68 = v12 == a2 || v44 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v68)
          {
            v69 = 0;
            v70 = v12;
            do
            {
              v71 = v44;
              a5.n128_u32[0] = v44->n128_u32[0];
              if (v44->n128_f32[0] < v70->n128_f32[0])
              {
                v72 = *(uint64_t *)((char *)v70[1].n128_i64 + 4);
                v73 = v70[1].n128_u32[3];
                v74 = v69;
                while (1)
                {
                  *(__n128 *)((char *)v12 + v74 + 16) = *(__n128 *)((char *)v12 + v74);
                  if (!v74)
                    break;
                  v75 = *(float *)((char *)v12[-1].n128_f32 + v74);
                  v74 -= 16;
                  if (a5.n128_f32[0] >= v75)
                  {
                    v76 = (uint64_t)&v12[1] + v74;
                    goto LABEL_131;
                  }
                }
                v76 = (uint64_t)v12;
LABEL_131:
                *(_DWORD *)v76 = a5.n128_u32[0];
                *(_QWORD *)(v76 + 4) = v72;
                *(_DWORD *)(v76 + 12) = v73;
              }
              v44 = v71 + 1;
              v69 += 16;
              v70 = v71;
            }
            while (&v71[1] != a2);
          }
        }
        else if (!v68)
        {
          v99 = -2;
          v100 = 1;
          v101 = v12;
          while (1)
          {
            a5.n128_u32[0] = v44->n128_u32[0];
            if (v44->n128_f32[0] < v101->n128_f32[0])
              break;
LABEL_176:
            v101 = &v12[v100++];
            ++v44;
            --v99;
            if (v44 == a2)
              return a5.n128_f32[0];
          }
          v102 = *(unint64_t *)((char *)v101[1].n128_u64 + 4);
          v103 = v101[1].n128_u32[3];
          v104 = v99;
          v105 = v44;
          while (1)
          {
            *v105 = v105[-1];
            if (__CFADD__(v104++, 1))
              break;
            v107 = v105 - 1;
            v108 = v105[-2].n128_f32[0];
            --v105;
            if (a5.n128_f32[0] >= v108)
            {
              v107->n128_u32[0] = a5.n128_u32[0];
              *(unint64_t *)((char *)v107->n128_u64 + 4) = v102;
              v107->n128_u32[3] = v103;
              goto LABEL_176;
            }
          }
LABEL_178:
          __break(1u);
LABEL_179:
          v133 = *a1;
          *a1 = *v44;
          *v44 = v133;
          a5.n128_u32[0] = a2->n128_u32[0];
          if (a2->n128_f32[0] < a1[1].n128_f32[0])
          {
            a5 = *v44;
            *v44 = *a2;
LABEL_109:
            *a2 = a5;
          }
        }
        return a5.n128_f32[0];
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (a2[-1].n128_f32[1] < v12->n128_f32[1])
        {
          v144 = *v12;
          *v12 = a2[-1];
          a2[-1] = v144;
        }
        return;
      case 3:
        v66 = v12 + 1;
        v67 = v12[1].n128_f32[1];
        v68 = a2[-1].n128_f32[1];
        if (v67 >= v12->n128_f32[1])
        {
          if (v68 < v67)
          {
            v111 = *v66;
            *v66 = *v9;
            *v9 = v111;
            if (v12[1].n128_f32[1] < v12->n128_f32[1])
            {
              v148 = *v12;
              *v12 = *v66;
              *v66 = v148;
            }
          }
        }
        else
        {
          if (v68 < v67)
            goto LABEL_117;
          v145 = *v12;
          *v12 = *v66;
          *v66 = v145;
          if (a2[-1].n128_f32[1] < v12[1].n128_f32[1])
          {
            v69 = *v66;
            *v66 = *v9;
            goto LABEL_118;
          }
        }
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*>(v12, v12 + 1, v12 + 2, a2 - 1, a5);
        return;
      case 5:
        v9 = v12 + 1;
        v70 = v12 + 2;
        v71 = v12 + 3;
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*>(v12, v12 + 1, v12 + 2, v12 + 3, a5);
        if (a2[-1].n128_f32[1] < v12[3].n128_f32[1])
        {
          v72 = *v71;
          *v71 = a2[-1];
          a2[-1] = v72;
          if (v12[3].n128_f32[1] < v12[2].n128_f32[1])
          {
            v73 = *v70;
            *v70 = *v71;
            *v71 = v73;
            if (v12[2].n128_f32[1] < v12[1].n128_f32[1])
            {
              v74 = *v9;
              *v9 = *v70;
              *v70 = v74;
              if (v12[1].n128_f32[1] < v12->n128_f32[1])
              {
LABEL_117:
                v146 = *v12;
                *v12 = *v9;
                v69 = v146;
LABEL_118:
                *v9 = v69;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 != a2)
            {
              v87 = (unint64_t)(v14 - 2) >> 1;
              v88 = v87;
              do
              {
                if (v87 >= v88)
                {
                  v89 = (2 * v88) | 1;
                  v90 = &v12[v89];
                  if (2 * v88 + 2 < v14 && v90->n128_f32[1] < v90[1].n128_f32[1])
                  {
                    ++v90;
                    v89 = 2 * v88 + 2;
                  }
                  v91 = &v12[v88];
                  v92 = *v91;
                  LODWORD(v93) = HIDWORD(v91->n128_u64[0]);
                  if (v90->n128_f32[1] >= v93)
                  {
                    do
                    {
                      v94 = v90;
                      *v91 = *v90;
                      if (v87 < v89)
                        break;
                      v95 = 2 * v89;
                      v89 = (2 * v89) | 1;
                      v90 = &v12[v89];
                      v96 = v95 + 2;
                      if (v96 < v14 && v90->n128_f32[1] < v90[1].n128_f32[1])
                      {
                        ++v90;
                        v89 = v96;
                      }
                      v91 = v94;
                    }
                    while (v90->n128_f32[1] >= v93);
                    *v94 = v92;
                  }
                }
                v97 = v88-- <= 0;
              }
              while (!v97);
              v98 = (unint64_t)v13 >> 4;
              do
              {
                v99 = 0;
                v147 = *v12;
                v100 = v12;
                do
                {
                  v101 = v100;
                  v100 += v99 + 1;
                  v102 = 2 * v99;
                  v99 = (2 * v99) | 1;
                  v103 = v102 + 2;
                  if (v103 < v98 && v100->n128_f32[1] < v100[1].n128_f32[1])
                  {
                    ++v100;
                    v99 = v103;
                  }
                  *v101 = *v100;
                }
                while (v99 <= (uint64_t)((unint64_t)(v98 - 2) >> 1));
                if (v100 == --a2)
                {
                  *v100 = v147;
                }
                else
                {
                  *v100 = *a2;
                  *a2 = v147;
                  v104 = (char *)v100 - (char *)v12 + 16;
                  if (v104 >= 17)
                  {
                    v105 = (((unint64_t)v104 >> 4) - 2) >> 1;
                    v106 = &v12[v105];
                    v107 = v100->n128_f32[1];
                    if (v106->n128_f32[1] < v107)
                    {
                      v108 = v100->n128_u32[0];
                      v109 = v100->n128_u64[1];
                      do
                      {
                        v110 = v106;
                        *v100 = *v106;
                        if (!v105)
                          break;
                        v105 = (v105 - 1) >> 1;
                        v106 = &v12[v105];
                        v100 = v110;
                      }
                      while (v106->n128_f32[1] < v107);
                      v110->n128_u32[0] = v108;
                      v110->n128_f32[1] = v107;
                      v110->n128_u64[1] = v109;
                    }
                  }
                }
                v97 = v98-- <= 2;
              }
              while (!v97);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = a2[-1].n128_f32[1];
          if ((unint64_t)v13 >= 0x801)
          {
            v18 = v16->n128_f32[1];
            if (v18 >= v12->n128_f32[1])
            {
              if (v17 < v18)
              {
                v127 = *v16;
                *v16 = *v9;
                *v9 = v127;
                if (v16->n128_f32[1] < v12->n128_f32[1])
                {
                  v128 = *v12;
                  *v12 = *v16;
                  *v16 = v128;
                }
              }
            }
            else
            {
              if (v17 >= v18)
              {
                v131 = *v12;
                *v12 = *v16;
                *v16 = v131;
                if (a2[-1].n128_f32[1] >= v16->n128_f32[1])
                  goto LABEL_21;
                v125 = *v16;
                *v16 = *v9;
              }
              else
              {
                v125 = *v12;
                *v12 = *v9;
              }
              *v9 = v125;
            }
LABEL_21:
            v20 = v12 + 1;
            v21 = &v12[v15];
            v22 = v21 - 1;
            v23 = v21[-1].n128_f32[1];
            v24 = a2[-2].n128_f32[1];
            if (v23 >= v12[1].n128_f32[1])
            {
              if (v24 < v23)
              {
                v132 = *v22;
                *v22 = *v10;
                *v10 = v132;
                if (v21[-1].n128_f32[1] < v12[1].n128_f32[1])
                {
                  v26 = *v20;
                  *v20 = *v22;
                  *v22 = v26;
                }
              }
            }
            else
            {
              if (v24 >= v23)
              {
                v27 = *v20;
                *v20 = *v22;
                *v22 = v27;
                if (a2[-2].n128_f32[1] >= v21[-1].n128_f32[1])
                  goto LABEL_33;
                v134 = *v22;
                *v22 = *v10;
                v25 = v134;
              }
              else
              {
                v25 = *v20;
                *v20 = *v10;
              }
              *v10 = v25;
            }
LABEL_33:
            v28 = v12 + 2;
            v29 = &v12[v15];
            v30 = v29 + 1;
            v31 = v29[1].n128_f32[1];
            v32 = a2[-3].n128_f32[1];
            if (v31 >= v12[2].n128_f32[1])
            {
              if (v32 < v31)
              {
                v135 = *v30;
                *v30 = *v11;
                *v11 = v135;
                if (v29[1].n128_f32[1] < v12[2].n128_f32[1])
                {
                  v34 = *v28;
                  *v28 = *v30;
                  *v30 = v34;
                }
              }
            }
            else
            {
              if (v32 >= v31)
              {
                v35 = *v28;
                *v28 = *v30;
                *v30 = v35;
                if (a2[-3].n128_f32[1] >= v29[1].n128_f32[1])
                  goto LABEL_42;
                v136 = *v30;
                *v30 = *v11;
                v33 = v136;
              }
              else
              {
                v33 = *v28;
                *v28 = *v11;
              }
              *v11 = v33;
            }
LABEL_42:
            v36 = v16->n128_f32[1];
            v37 = v29[1].n128_f32[1];
            if (v36 >= v22->n128_f32[1])
            {
              if (v37 < v36)
              {
                v138 = *v16;
                *v16 = *v30;
                *v30 = v138;
                if (v16->n128_f32[1] < v22->n128_f32[1])
                {
                  v139 = *v22;
                  *v22 = *v16;
                  *v16 = v139;
                }
              }
              goto LABEL_51;
            }
            if (v37 >= v36)
            {
              v140 = *v22;
              *v22 = *v16;
              *v16 = v140;
              if (v29[1].n128_f32[1] >= v16->n128_f32[1])
              {
LABEL_51:
                v141 = *v12;
                *v12 = *v16;
                a5 = v141;
                *v16 = v141;
                goto LABEL_52;
              }
              v137 = *v16;
              *v16 = *v30;
            }
            else
            {
              v137 = *v22;
              *v22 = *v30;
            }
            *v30 = v137;
            goto LABEL_51;
          }
          v19 = v12->n128_f32[1];
          if (v19 >= v16->n128_f32[1])
          {
            if (v17 < v19)
            {
              v129 = *v12;
              *v12 = *v9;
              a5 = v129;
              *v9 = v129;
              if (v12->n128_f32[1] < v16->n128_f32[1])
              {
                v130 = *v16;
                *v16 = *v12;
                a5 = v130;
                *v12 = v130;
              }
            }
          }
          else
          {
            if (v17 >= v19)
            {
              v133 = *v16;
              *v16 = *v12;
              a5 = v133;
              *v12 = v133;
              if (a2[-1].n128_f32[1] >= v12->n128_f32[1])
                goto LABEL_52;
              v126 = *v12;
              *v12 = *v9;
            }
            else
            {
              v126 = *v16;
              *v16 = *v9;
            }
            a5 = v126;
            *v9 = v126;
          }
LABEL_52:
          --a3;
          a5.n128_u32[0] = v12->n128_u32[0];
          if ((a4 & 1) == 0)
          {
            v39 = v12->n128_f32[1];
            v38 = v12->n128_u32[2];
            v40 = v12->n128_u32[3];
            if (v12[-1].n128_f32[1] < v39)
              goto LABEL_55;
            v56 = v12 + 1;
            if (v39 >= a2[-1].n128_f32[1])
            {
              do
              {
                v12 = v56;
                if (v56 >= a2)
                  break;
                v58 = v56->n128_f32[1];
                ++v56;
              }
              while (v39 >= v58);
            }
            else
            {
              do
              {
                if (v56 == a2)
                  goto LABEL_181;
                v57 = v56->n128_f32[1];
                ++v56;
              }
              while (v39 >= v57);
              v12 = v56 - 1;
            }
            v59 = a2;
            if (v12 < a2)
            {
              v60 = a2;
              while (v60 != a1)
              {
                v59 = v60 - 1;
                v61 = v60[-1].n128_f32[1];
                --v60;
                if (v39 >= v61)
                  goto LABEL_92;
              }
              goto LABEL_181;
            }
LABEL_92:
            if (v12 < v59)
            {
              do
              {
                v143 = *v12;
                *v12 = *v59;
                *v59 = v143;
                v62 = v12 + 1;
                do
                {
                  if (v62 == a2)
                    goto LABEL_181;
                  v63 = v62->n128_f32[1];
                  ++v62;
                }
                while (v39 >= v63);
                v12 = v62 - 1;
                do
                {
                  if (v59 == a1)
                    goto LABEL_181;
                  v64 = v59 - 1;
                  v65 = v59[-1].n128_f32[1];
                  --v59;
                }
                while (v39 < v65);
                v59 = v64;
              }
              while (v12 < v64);
            }
            if (&v12[-1] != a1)
              *a1 = v12[-1];
            a4 = 0;
            v12[-1].n128_u32[0] = a5.n128_u32[0];
            v12[-1].n128_f32[1] = v39;
            v12[-1].n128_u32[2] = v38;
            v12[-1].n128_u32[3] = v40;
            continue;
          }
          v39 = v12->n128_f32[1];
          v38 = v12->n128_u32[2];
          v40 = v12->n128_u32[3];
LABEL_55:
          v41 = 0;
          do
          {
            if (&v12[v41 + 1] == a2)
              goto LABEL_181;
            v42 = v12[++v41].n128_f32[1];
          }
          while (v42 < v39);
          v43 = &v12[v41];
          v44 = a2;
          if (v41 != 1)
          {
            while (v44 != v12)
            {
              v45 = v44 - 1;
              v46 = v44[-1].n128_f32[1];
              --v44;
              if (v46 < v39)
                goto LABEL_67;
            }
            goto LABEL_181;
          }
          v47 = a2;
          while (v43 < v47)
          {
            v45 = v47 - 1;
            v48 = v47[-1].n128_f32[1];
            --v47;
            if (v48 < v39)
              goto LABEL_67;
          }
          v45 = v47;
LABEL_67:
          v12 = v43;
          if (v43 < v45)
          {
            v49 = v45;
            do
            {
              v142 = *v12;
              *v12 = *v49;
              *v49 = v142;
              v50 = v12 + 1;
              do
              {
                if (v50 == a2)
                  goto LABEL_181;
                v51 = v50->n128_f32[1];
                ++v50;
              }
              while (v51 < v39);
              v12 = v50 - 1;
              do
              {
                if (v49 == a1)
                  goto LABEL_181;
                v52 = v49 - 1;
                v53 = v49[-1].n128_f32[1];
                --v49;
              }
              while (v53 >= v39);
              v49 = v52;
            }
            while (v12 < v52);
          }
          if (&v12[-1] != a1)
            *a1 = v12[-1];
          v12[-1].n128_u32[0] = a5.n128_u32[0];
          v12[-1].n128_f32[1] = v39;
          v12[-1].n128_u32[2] = v38;
          v12[-1].n128_u32[3] = v40;
          if (v43 < v45)
            goto LABEL_81;
          v54 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*>(a1, v12 - 1, a5);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*>(v12, a2, v55))
          {
            if (v54)
              continue;
LABEL_81:
            std::__introsort<std::_ClassicAlgPolicy,WebCore::polygonsForRect(WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::FloatPointGraph &)::$_1 &,WebCore::FloatRect*,false>(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v54)
            return;
          goto LABEL_1;
        }
        v75 = v12 + 1;
        v77 = v12 == a2 || v75 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v77)
          {
            v78 = 0;
            v79 = v12;
            do
            {
              v80 = v75;
              v81 = v79[1].n128_f32[1];
              if (v81 < v79->n128_f32[1])
              {
                v82 = v75->n128_u32[0];
                v83 = v79[1].n128_u64[1];
                v84 = v78;
                while (1)
                {
                  *(__n128 *)((char *)v12 + v84 + 16) = *(__n128 *)((char *)v12 + v84);
                  if (!v84)
                    break;
                  v85 = *(float *)((char *)&v12->n128_f32[-3] + v84);
                  v84 -= 16;
                  if (v81 >= v85)
                  {
                    v86 = (uint64_t)&v12[1] + v84;
                    goto LABEL_134;
                  }
                }
                v86 = (uint64_t)v12;
LABEL_134:
                *(_DWORD *)v86 = v82;
                *(float *)(v86 + 4) = v81;
                *(_QWORD *)(v86 + 8) = v83;
              }
              v75 = v80 + 1;
              v78 += 16;
              v79 = v80;
            }
            while (&v80[1] != a2);
          }
        }
        else if (!v77)
        {
          v112 = 0;
          v113 = -2;
          v114 = 1;
          v115 = v12;
          while (1)
          {
            v116 = &v12[v112];
            v112 = v114;
            v117 = v115[1].n128_f32[1];
            if (v117 < v116->n128_f32[1])
              break;
LABEL_179:
            v115 = &v12[v112];
            v114 = v112 + 1;
            ++v75;
            --v113;
            if (v75 == a2)
              return;
          }
          v118 = v75->n128_u32[0];
          v119 = v115[1].n128_u64[1];
          v120 = (float *)v75;
          v121 = v113;
          while (1)
          {
            *(_OWORD *)v120 = *((_OWORD *)v120 - 1);
            if (__CFADD__(v121++, 1))
              break;
            v123 = v120 - 4;
            v124 = *(v120 - 7);
            v120 -= 4;
            if (v117 >= v124)
            {
              *(_DWORD *)v123 = v118;
              v123[1] = v117;
              *((_QWORD *)v123 + 1) = v119;
              goto LABEL_179;
            }
          }
LABEL_181:
          __break(1u);
        }
        return;
    }
  }
}

  n128_u64 = a2[-1].n128_u64;
  n128_f64 = a2[-2].n128_f64;
  v12 = a2[-3].n128_f64;
  v13 = a1;
  while (2)
  {
    a1 = v13;
    v14 = (uint64_t)a2 - v13;
    v15 = (uint64_t)((uint64_t)a2 - v13) >> 4;
    switch(v15)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v59 = a2[-1].n128_f64[0];
        --a2;
        result.n128_f64[0] = v59;
        if (v59 < *(double *)v13)
          goto LABEL_107;
        return result;
      case 3:
        v43 = (__n128 *)(v13 + 16);
        result.n128_u64[0] = *(_QWORD *)(v13 + 16);
        v60 = a2[-1].n128_f64[0];
        --a2;
        v61 = v60;
        if (result.n128_f64[0] < *(double *)v13)
        {
          if (v61 >= result.n128_f64[0])
            goto LABEL_179;
LABEL_107:
          v125 = *(__n128 *)v13;
          *(__n128 *)v13 = *a2;
          result = v125;
          goto LABEL_108;
        }
        if (v61 < result.n128_f64[0])
        {
          result = *v43;
          *v43 = *a2;
          *a2 = result;
          goto LABEL_187;
        }
        return result;
      case 4:
        v43 = (__n128 *)(v13 + 16);
        v62 = *(double *)(v13 + 16);
        v63 = (__n128 *)(v13 + 32);
        v64 = *(double *)(v13 + 32);
        if (v62 >= *(double *)v13)
        {
          if (v64 < v62)
          {
            result = *v43;
            *v43 = *v63;
            *v63 = result;
            if (*(double *)(v13 + 16) < *(double *)v13)
            {
              v128 = *(__n128 *)v13;
              *(__n128 *)v13 = *v43;
              result.n128_u64[1] = v128.n128_u64[1];
              *v43 = v128;
            }
          }
        }
        else
        {
          if (v64 >= v62)
          {
            v130 = *(__n128 *)v13;
            *(__n128 *)v13 = *v43;
            *v43 = v130;
            if (v64 >= *(double *)(v13 + 16))
              goto LABEL_184;
            result = *v43;
            *v43 = *v63;
          }
          else
          {
            v126 = *(__n128 *)v13;
            *(__n128 *)v13 = *v63;
            result = v126;
          }
          *v63 = result;
        }
LABEL_184:
        result.n128_u64[0] = *n128_u64;
        if (*(double *)n128_u64 < v63->n128_f64[0])
        {
          result = *v63;
          *v63 = *(__n128 *)n128_u64;
          *(__n128 *)n128_u64 = result;
          result.n128_u64[0] = v63->n128_u64[0];
          if (v63->n128_f64[0] < v43->n128_f64[0])
          {
            result = *v43;
            *v43 = *v63;
            *v63 = result;
LABEL_187:
            result.n128_u64[0] = *(_QWORD *)(v13 + 16);
            if (result.n128_f64[0] < *(double *)v13)
            {
              v131 = *(__n128 *)v13;
              *(__n128 *)v13 = *v43;
              result = v131;
              *v43 = v131;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = _ZNSt3__17__sort5B8sn180100INS_17_ClassicAlgPolicyERZN7WebCore11VideoPreset19sortFrameRateRangesEvEUlRKT_RKT0_E_PNS2_14FrameRateRangeEEEvT1_SE_SE_SE_SE_S7_((__n128 *)v13, (double *)(v13 + 16), (double *)(v13 + 32), (_OWORD *)(v13 + 48), a2[-1].n128_u64, result).n128_u64[0];
        return result;
      default:
        if (v14 <= 383)
        {
          v43 = (__n128 *)(v13 + 16);
          v66 = (__n128 *)v13 == a2 || v43 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v66)
            {
              v67 = 0;
              v68 = v13;
              do
              {
                v69 = v43;
                result.n128_u64[0] = v43->n128_u64[0];
                if (v43->n128_f64[0] < *(double *)v68)
                {
                  v70 = *(_QWORD *)(v68 + 24);
                  v71 = v67;
                  while (1)
                  {
                    *(_OWORD *)(v13 + v71 + 16) = *(_OWORD *)(v13 + v71);
                    if (!v71)
                      break;
                    v72 = *(double *)(v13 + v71 - 16);
                    v71 -= 16;
                    if (result.n128_f64[0] >= v72)
                    {
                      v73 = (_QWORD *)(v13 + v71 + 16);
                      goto LABEL_128;
                    }
                  }
                  v73 = (_QWORD *)v13;
LABEL_128:
                  *v73 = result.n128_u64[0];
                  v73[1] = v70;
                }
                v43 = v69 + 1;
                v67 += 16;
                v68 = (unint64_t)v69;
              }
              while (&v69[1] != a2);
            }
          }
          else if (!v66)
          {
            v96 = -2;
            v97 = 1;
            v98 = v13;
            while (1)
            {
              result.n128_u64[0] = v43->n128_u64[0];
              if (v43->n128_f64[0] < *(double *)v98)
                break;
LABEL_176:
              v98 = v13 + 16 * v97++;
              ++v43;
              --v96;
              if (v43 == a2)
                return result;
            }
            v99 = *(_QWORD *)(v98 + 24);
            v100 = v96;
            v101 = v43;
            while (1)
            {
              *v101 = v101[-1];
              if (__CFADD__(v100++, 1))
                break;
              v103 = v101 - 1;
              v104 = v101[-2].n128_f64[0];
              --v101;
              if (result.n128_f64[0] >= v104)
              {
                v103->n128_u64[0] = result.n128_u64[0];
                v103->n128_u64[1] = v99;
                goto LABEL_176;
              }
            }
LABEL_178:
            __break(1u);
LABEL_179:
            v129 = *(__n128 *)a1;
            *(__n128 *)a1 = *v43;
            result.n128_u64[1] = v129.n128_u64[1];
            *v43 = v129;
            result.n128_u64[0] = a2->n128_u64[0];
            if (a2->n128_f64[0] < *(double *)(a1 + 16))
            {
              result = *v43;
              *v43 = *a2;
LABEL_108:
              *a2 = result;
            }
          }
          return result;
        }
        if (!a4)
        {
          if ((__n128 *)v13 != a2)
          {
            v74 = (unint64_t)(v15 - 2) >> 1;
            v75 = v74;
            do
            {
              if (v74 >= v75)
              {
                v76 = (2 * v75) | 1;
                v77 = (double *)(v13 + 16 * v76);
                if (2 * v75 + 2 < v15 && *v77 < v77[2])
                {
                  v77 += 2;
                  v76 = 2 * v75 + 2;
                }
                v78 = (double *)(v13 + 16 * v75);
                v79 = *v78;
                if (*v77 >= *v78)
                {
                  v80 = *((_QWORD *)v78 + 1);
                  do
                  {
                    v81 = v78;
                    v78 = v77;
                    *(_OWORD *)v81 = *(_OWORD *)v77;
                    if (v74 < v76)
                      break;
                    v82 = 2 * v76;
                    v76 = (2 * v76) | 1;
                    v77 = (double *)(v13 + 16 * v76);
                    v83 = v82 + 2;
                    if (v83 < v15 && *v77 < v77[2])
                    {
                      v77 += 2;
                      v76 = v83;
                    }
                  }
                  while (*v77 >= v79);
                  *v78 = v79;
                  *((_QWORD *)v78 + 1) = v80;
                }
              }
              v84 = v75-- <= 0;
            }
            while (!v84);
            v85 = (unint64_t)v14 >> 4;
            do
            {
              v86 = 0;
              v127 = *(__n128 *)v13;
              v87 = (__n128 *)v13;
              do
              {
                v88 = v87;
                v87 += v86 + 1;
                v89 = 2 * v86;
                v86 = (2 * v86) | 1;
                v90 = v89 + 2;
                if (v90 < v85 && v87->n128_f64[0] < v87[1].n128_f64[0])
                {
                  ++v87;
                  v86 = v90;
                }
                *v88 = *v87;
              }
              while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
              if (v87 == --a2)
              {
                result = v127;
                *v87 = v127;
              }
              else
              {
                *v87 = *a2;
                result = v127;
                *a2 = v127;
                v91 = (uint64_t)&v87[1] - v13;
                if (v91 >= 17)
                {
                  v92 = (((unint64_t)v91 >> 4) - 2) >> 1;
                  v93 = (__n128 *)(v13 + 16 * v92);
                  result.n128_u64[0] = v87->n128_u64[0];
                  if (v93->n128_f64[0] < v87->n128_f64[0])
                  {
                    v94 = v87->n128_i64[1];
                    do
                    {
                      v95 = v87;
                      v87 = v93;
                      *v95 = *v93;
                      if (!v92)
                        break;
                      v92 = (v92 - 1) >> 1;
                      v93 = (__n128 *)(v13 + 16 * v92);
                    }
                    while (v93->n128_f64[0] < result.n128_f64[0]);
                    v87->n128_u64[0] = result.n128_u64[0];
                    v87->n128_u64[1] = v94;
                  }
                }
              }
              v84 = v85-- <= 2;
            }
            while (!v84);
          }
          return result;
        }
        v16 = (unint64_t)v15 >> 1;
        v17 = (double *)(v13 + 16 * ((unint64_t)v15 >> 1));
        v18 = *(double *)n128_u64;
        if ((unint64_t)v14 >= 0x801)
        {
          v19 = *v17;
          if (*v17 >= *(double *)v13)
          {
            if (v18 < v19)
            {
              v108 = *(__n128 *)v17;
              *(_OWORD *)v17 = *(_OWORD *)n128_u64;
              *(__n128 *)n128_u64 = v108;
              if (*v17 < *(double *)v13)
              {
                v109 = *(__n128 *)v13;
                *(_OWORD *)v13 = *(_OWORD *)v17;
                *(__n128 *)v17 = v109;
              }
            }
          }
          else
          {
            if (v18 < v19)
            {
              v106 = *(__n128 *)v13;
              *(_OWORD *)v13 = *(_OWORD *)n128_u64;
              goto LABEL_20;
            }
            v112 = *(__n128 *)v13;
            *(_OWORD *)v13 = *(_OWORD *)v17;
            *(__n128 *)v17 = v112;
            if (*(double *)n128_u64 < *v17)
            {
              v106 = *(__n128 *)v17;
              *(_OWORD *)v17 = *(_OWORD *)n128_u64;
LABEL_20:
              *(__n128 *)n128_u64 = v106;
            }
          }
          v21 = (__n128 *)(v13 + 16);
          v22 = v13 + 16 * v16;
          v24 = *(double *)(v22 - 16);
          v23 = (__n128 *)(v22 - 16);
          v25 = v24;
          v26 = *n128_f64;
          if (v24 >= *(double *)(v13 + 16))
          {
            if (v26 < v25)
            {
              v113 = *v23;
              *v23 = *(__n128 *)n128_f64;
              *(__n128 *)n128_f64 = v113;
              if (v23->n128_f64[0] < v21->n128_f64[0])
              {
                v28 = *v21;
                *v21 = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v26 < v25)
            {
              v27 = *v21;
              *v21 = *(__n128 *)n128_f64;
              goto LABEL_32;
            }
            v29 = *v21;
            *v21 = *v23;
            *v23 = v29;
            if (*n128_f64 < v23->n128_f64[0])
            {
              v115 = *v23;
              *v23 = *(__n128 *)n128_f64;
              v27 = v115;
LABEL_32:
              *(__n128 *)n128_f64 = v27;
            }
          }
          v30 = (__n128 *)(v13 + 32);
          v31 = v13 + 16 * v16;
          v33 = *(double *)(v31 + 16);
          v32 = (__n128 *)(v31 + 16);
          v34 = v33;
          v35 = *v12;
          if (v33 >= *(double *)(v13 + 32))
          {
            if (v35 < v34)
            {
              v116 = *v32;
              *v32 = *(__n128 *)v12;
              *(__n128 *)v12 = v116;
              if (v32->n128_f64[0] < v30->n128_f64[0])
              {
                v37 = *v30;
                *v30 = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v35 < v34)
            {
              v36 = *v30;
              *v30 = *(__n128 *)v12;
              goto LABEL_41;
            }
            v38 = *v30;
            *v30 = *v32;
            *v32 = v38;
            if (*v12 < v32->n128_f64[0])
            {
              v117 = *v32;
              *v32 = *(__n128 *)v12;
              v36 = v117;
LABEL_41:
              *(__n128 *)v12 = v36;
            }
          }
          v39 = *v17;
          v40 = v32->n128_f64[0];
          if (*v17 >= v23->n128_f64[0])
          {
            if (v40 < v39)
            {
              v119 = *(__n128 *)v17;
              *(__n128 *)v17 = *v32;
              *v32 = v119;
              if (*v17 < v23->n128_f64[0])
              {
                v120 = *v23;
                *v23 = *(__n128 *)v17;
                *(__n128 *)v17 = v120;
              }
            }
          }
          else
          {
            if (v40 < v39)
            {
              v118 = *v23;
              *v23 = *v32;
              goto LABEL_50;
            }
            v121 = *v23;
            *v23 = *(__n128 *)v17;
            *(__n128 *)v17 = v121;
            if (v32->n128_f64[0] < *v17)
            {
              v118 = *(__n128 *)v17;
              *(__n128 *)v17 = *v32;
LABEL_50:
              *v32 = v118;
            }
          }
          v122 = *(__n128 *)v13;
          *(_OWORD *)v13 = *(_OWORD *)v17;
          result.n128_u64[1] = v122.n128_u64[1];
          *(__n128 *)v17 = v122;
          goto LABEL_52;
        }
        v20 = *(double *)v13;
        if (*(double *)v13 >= *v17)
        {
          if (v18 < v20)
          {
            v110 = *(__n128 *)v13;
            *(_OWORD *)v13 = *(_OWORD *)n128_u64;
            result.n128_u64[1] = v110.n128_u64[1];
            *(__n128 *)n128_u64 = v110;
            if (*(double *)v13 < *v17)
            {
              v111 = *(__n128 *)v17;
              *(_OWORD *)v17 = *(_OWORD *)v13;
              result.n128_u64[1] = v111.n128_u64[1];
              *(__n128 *)v13 = v111;
            }
          }
        }
        else
        {
          if (v18 >= v20)
          {
            v114 = *(__n128 *)v17;
            *(_OWORD *)v17 = *(_OWORD *)v13;
            result.n128_u64[1] = v114.n128_u64[1];
            *(__n128 *)v13 = v114;
            if (*(double *)n128_u64 >= *(double *)v13)
              goto LABEL_52;
            v107 = *(__n128 *)v13;
            *(_OWORD *)v13 = *(_OWORD *)n128_u64;
          }
          else
          {
            v107 = *(__n128 *)v17;
            *(_OWORD *)v17 = *(_OWORD *)n128_u64;
          }
          result.n128_u64[1] = v107.n128_u64[1];
          *(__n128 *)n128_u64 = v107;
        }
LABEL_52:
        --a4;
        result.n128_u64[0] = *(_QWORD *)v13;
        if ((a5 & 1) == 0 && *(double *)(v13 - 16) >= result.n128_f64[0])
        {
          v53 = *(_QWORD *)(v13 + 8);
          v43 = (__n128 *)(v13 + 16);
          if (result.n128_f64[0] >= *(double *)n128_u64)
          {
            do
            {
              v13 = (unint64_t)v43;
              if (v43 >= a2)
                break;
              ++v43;
            }
            while (result.n128_f64[0] >= *(double *)v13);
          }
          else
          {
            do
            {
              if (v43 == a2)
                goto LABEL_178;
              v54 = v43->n128_f64[0];
              ++v43;
            }
            while (result.n128_f64[0] >= v54);
            v13 = (unint64_t)v43[-1].n128_u64;
          }
          v43 = a2;
          if (v13 < (unint64_t)a2)
          {
            v43 = a2;
            while (v43 != (__n128 *)a1)
            {
              v55 = v43[-1].n128_f64[0];
              --v43;
              if (result.n128_f64[0] >= v55)
                goto LABEL_96;
            }
            goto LABEL_178;
          }
LABEL_96:
          if (v13 < (unint64_t)v43)
          {
            v124 = *(__n128 *)v13;
            *(__n128 *)v13 = *v43;
            *v43 = v124;
            v56 = (double *)(v13 + 16);
            while (v56 != (double *)a2)
            {
              v57 = *v56;
              v56 += 2;
              if (result.n128_f64[0] < v57)
              {
                v13 = (unint64_t)(v56 - 2);
                while (v43 != (__n128 *)a1)
                {
                  v58 = v43[-1].n128_f64[0];
                  --v43;
                  if (result.n128_f64[0] >= v58)
                    goto LABEL_96;
                }
                goto LABEL_178;
              }
            }
            goto LABEL_178;
          }
          if (v13 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v13 - 16);
          a5 = 0;
          *(_QWORD *)(v13 - 16) = result.n128_u64[0];
          *(_QWORD *)(v13 - 8) = v53;
          continue;
        }
        v41 = 0;
        v42 = *(_QWORD *)(v13 + 8);
        do
        {
          v43 = (__n128 *)(v13 + v41 + 16);
          if (v43 == a2)
            goto LABEL_178;
          v41 += 16;
        }
        while (v43->n128_f64[0] < result.n128_f64[0]);
        v43 = (__n128 *)(v13 + v41);
        v44 = a2;
        if (v41 != 16)
        {
          while (v44 != (__n128 *)v13)
          {
            v45 = v44[-1].n128_f64[0];
            --v44;
            if (v45 < result.n128_f64[0])
              goto LABEL_64;
          }
          goto LABEL_178;
        }
        v44 = a2;
        do
        {
          if (v43 >= v44)
            break;
          v46 = v44[-1].n128_f64[0];
          --v44;
        }
        while (v46 >= result.n128_f64[0]);
LABEL_64:
        v13 += v41;
        if (v43 < v44)
        {
          v47 = v44;
          do
          {
            v123 = *(__n128 *)v13;
            *(__n128 *)v13 = *v47;
            *v47 = v123;
            v48 = (double *)(v13 + 16);
            do
            {
              if (v48 == (double *)a2)
                goto LABEL_178;
              v49 = *v48;
              v48 += 2;
            }
            while (v49 < result.n128_f64[0]);
            v13 = (unint64_t)(v48 - 2);
            do
            {
              if (v47 == (__n128 *)a1)
                goto LABEL_178;
              v50 = v47[-1].n128_f64[0];
              --v47;
            }
            while (v50 >= result.n128_f64[0]);
          }
          while (v13 < (unint64_t)v47);
        }
        if (v13 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v13 - 16);
        *(_QWORD *)(v13 - 16) = result.n128_u64[0];
        *(_QWORD *)(v13 - 8) = v42;
        if (v43 < v44)
        {
LABEL_78:
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN7WebCore11VideoPreset19sortFrameRateRangesEvEUlRKT_RKT0_E_PNS2_14FrameRateRangeELb0EEEvT1_SE_S7_NS_15iterator_traitsISE_E15difference_typeEb(a1, v13 - 16, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v51 = _ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore11VideoPreset19sortFrameRateRangesEvEUlRKT_RKT0_E_PNS2_14FrameRateRangeEEEbT1_SE_S7_(a1, (__n128 *)(v13 - 16), result);
        if (!_ZNSt3__127__insertion_sort_incompleteB8sn180100INS_17_ClassicAlgPolicyERZN7WebCore11VideoPreset19sortFrameRateRangesEvEUlRKT_RKT0_E_PNS2_14FrameRateRangeEEEbT1_SE_S7_(v13, a2, v52))
        {
          if (v51)
            continue;
          goto LABEL_78;
        }
        a2 = (__n128 *)(v13 - 16);
        if (!v51)
          goto LABEL_1;
        return result;
    }
  }
}

  v7 = a1;
LABEL_2:
  v8 = 1 - a3;
  while (2)
  {
    v9 = v8;
    v10 = (char *)a2 - (char *)v7;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v7) >> 3);
    if (v11 < 2)
      return;
    a1 = v7;
    switch(v11)
    {
      case 2uLL:
        if (*((_DWORD *)a2 - 3) - *((_DWORD *)a2 - 4) < (*((_DWORD *)v7 + 3) - *((_DWORD *)v7 + 2)))
        {
          v53 = *((_QWORD *)v7 + 2);
          v47 = (__n128)*v7;
          v12 = *(__int128 *)((char *)a2 - 24);
          *((_DWORD *)v7 + 4) = *((_DWORD *)a2 - 2);
          *v7 = v12;
          *(__int128 *)((char *)a2 - 24) = (__int128)v47;
          *((_DWORD *)a2 - 2) = v53;
        }
        return;
      case 3uLL:
        v20 = (__int128 *)((char *)v7 + 24);
        v21 = (__int128 *)((char *)a2 - 24);
        v22 = *((_DWORD *)v7 + 9) - *((_DWORD *)v7 + 8);
        v23 = *((_DWORD *)a2 - 3) - *((_DWORD *)a2 - 4);
        if (v22 >= *((_DWORD *)v7 + 3) - *((_DWORD *)v7 + 2))
        {
          if (v23 < v22)
          {
            v35 = *v20;
            v36 = *((_QWORD *)v7 + 5);
            v37 = *((_DWORD *)a2 - 2);
            *v20 = *v21;
            *((_DWORD *)v7 + 10) = v37;
            *((_DWORD *)a2 - 2) = v36;
            *v21 = v35;
            if (*((_DWORD *)v7 + 9) - *((_DWORD *)v7 + 8) < (*((_DWORD *)v7 + 3) - *((_DWORD *)v7 + 2)))
            {
              v57 = *((_QWORD *)v7 + 2);
              v51 = *v7;
              *v7 = *v20;
              *((_DWORD *)v7 + 4) = *((_DWORD *)v7 + 10);
              *v20 = v51;
              *((_DWORD *)v7 + 10) = v57;
            }
          }
        }
        else if (v23 >= v22)
        {
          v58 = *((_QWORD *)v7 + 2);
          v52 = *v7;
          *v7 = *v20;
          *((_DWORD *)v7 + 4) = *((_DWORD *)v7 + 10);
          *v20 = v52;
          *((_DWORD *)v7 + 10) = v58;
          if (*((_DWORD *)a2 - 3) - *((_DWORD *)a2 - 4) < (*((_DWORD *)v7 + 9) - *((_DWORD *)v7 + 8)))
          {
            v43 = *v20;
            v44 = *((_QWORD *)v7 + 5);
            v45 = *((_DWORD *)a2 - 2);
            *v20 = *v21;
            *((_DWORD *)v7 + 10) = v45;
            *((_DWORD *)a2 - 2) = v44;
            *v21 = v43;
          }
        }
        else
        {
          v55 = *((_QWORD *)v7 + 2);
          v49 = *v7;
          v24 = *v21;
          *((_DWORD *)v7 + 4) = *((_DWORD *)a2 - 2);
          *v7 = v24;
          *v21 = v49;
          *((_DWORD *)a2 - 2) = v55;
        }
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>((__n128 *)v7, (__n128 *)((char *)v7 + 24), (__n128 *)v7 + 3, (__n128 *)((char *)a2 - 24), a5);
        return;
      case 5uLL:
        v25 = (__n128 *)((char *)v7 + 24);
        v26 = (__n128 *)(v7 + 3);
        v27 = (__int128 *)((char *)a1 + 72);
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>((__n128 *)a1, (__n128 *)((char *)a1 + 24), (__n128 *)a1 + 3, (__n128 *)((char *)a1 + 72), a5);
        if (*((_DWORD *)a2 - 3) - *((_DWORD *)a2 - 4) < (*((_DWORD *)a1 + 21) - *((_DWORD *)a1 + 20)))
        {
          v28 = *v27;
          v29 = *((_QWORD *)a1 + 11);
          v30 = *((_DWORD *)a2 - 2);
          *v27 = *(__int128 *)((char *)a2 - 24);
          *((_DWORD *)a1 + 22) = v30;
          *((_DWORD *)a2 - 2) = v29;
          *(__int128 *)((char *)a2 - 24) = v28;
          if (*((_DWORD *)a1 + 21) - *((_DWORD *)a1 + 20) < (*((_DWORD *)a1 + 15) - *((_DWORD *)a1 + 14)))
          {
            v31 = *((_QWORD *)a1 + 8);
            v32 = *v26;
            *v26 = (__n128)*v27;
            *((_DWORD *)a1 + 16) = *((_DWORD *)a1 + 22);
            *v27 = (__int128)v32;
            *((_DWORD *)a1 + 22) = v31;
            if (*((_DWORD *)a1 + 15) - *((_DWORD *)a1 + 14) < (*((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 8)))
            {
              v33 = *((_QWORD *)a1 + 5);
              v34 = *v25;
              *v25 = *v26;
              *((_DWORD *)a1 + 10) = *((_DWORD *)a1 + 16);
              *v26 = v34;
              *((_DWORD *)a1 + 16) = v33;
              if (*((_DWORD *)a1 + 9) - *((_DWORD *)a1 + 8) < (*((_DWORD *)a1 + 3) - *((_DWORD *)a1 + 2)))
              {
                v56 = *((_QWORD *)a1 + 2);
                v50 = (__n128)*a1;
                *a1 = (__int128)*v25;
                *((_DWORD *)a1 + 4) = *((_DWORD *)a1 + 10);
                *v25 = v50;
                *((_DWORD *)a1 + 10) = v56;
              }
            }
          }
        }
        return;
      default:
        v46 = v9;
        v13 = a4;
        if (v10 <= 575)
        {
          if ((a4 & 1) != 0)
            std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>((uint64_t)v7, a2);
          else
            std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>(v7, a2);
          return;
        }
        if (v9 != 1)
        {
          v14 = (__int128 *)((char *)a2 - 24);
          v15 = v11 >> 1;
          v16 = (__int128 *)((char *)v7 + 24 * (v11 >> 1));
          if ((unint64_t)v10 < 0xC01)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>((__int128 *)((char *)v7 + 24 * v15), v7, v14);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>(v7, (__int128 *)((char *)v7 + 24 * v15), v14);
            v17 = 3 * v15;
            v18 = (__int128 *)((char *)v7 + 24 * v15 - 24);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>((__int128 *)((char *)v7 + 24), v18, a2 - 3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>(v7 + 3, (__int128 *)((char *)v7 + 8 * v17 + 24), (__int128 *)((char *)a2 - 72));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>(v18, v16, (__int128 *)((char *)v7 + 8 * v17 + 24));
            v54 = *((_QWORD *)v7 + 2);
            v48 = (__n128)*v7;
            v19 = *((_DWORD *)v16 + 4);
            *v7 = *v16;
            *((_DWORD *)v7 + 4) = v19;
            *((_DWORD *)v16 + 4) = v54;
            *v16 = (__int128)v48;
          }
          if ((v13 & 1) == 0
            && *((_DWORD *)v7 - 3) - *((_DWORD *)v7 - 4) >= (*((_DWORD *)v7 + 3) - *((_DWORD *)v7 + 2)))
          {
            v7 = std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::GridItemWithSpan *,std::__less<void,void> &>(v7, a2);
            goto LABEL_31;
          }
          v38 = std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::GridItemWithSpan *,std::__less<void,void> &>(v7, a2);
          LOBYTE(a4) = v13;
          if ((v40 & 1) == 0)
            goto LABEL_30;
          v41 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>((uint64_t)v7, (uint64_t)v38, v39);
          v7 = (__int128 *)((char *)v38 + 24);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *>((uint64_t)v38 + 24, (uint64_t)a2, v42))
          {
            v8 = v46 + 1;
            a4 = v13;
            if (v41)
              continue;
LABEL_30:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *,false>(a1, v38, -v46, a4 & 1);
            v7 = (__int128 *)((char *)v38 + 24);
LABEL_31:
            a4 = 0;
            a3 = -v46;
            goto LABEL_2;
          }
          a3 = -v46;
          a2 = v38;
          a4 = v13;
          if (v41)
            return;
          goto LABEL_1;
        }
        if (v7 != a2)
          std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::GridItemWithSpan *,WebCore::GridItemWithSpan *>((uint64_t)v7, a2, a2);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    if (v13 < 2)
      return;
    a1 = v9;
    switch(v13)
    {
      case 2uLL:
        if ((*a3)(*(a2 - 2), *(a2 - 1), *v9, v9[1]))
        {
          v14 = *(_DWORD *)v9;
          *v9 = *(a2 - 2);
          *((_DWORD *)a2 - 2) = v14;
          v15 = *((_DWORD *)v9 + 1);
          v9[1] = *(a2 - 1);
          *((_DWORD *)a2 - 1) = v15;
        }
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(v9, v9 + 2, a2 - 2, a3);
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(v9, v9 + 2, v9 + 4, a2 - 2, a3);
        return;
      case 5uLL:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2, a3);
        return;
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>((uint64_t)v9, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>((uint64_t)v9, a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v16 = a2 - 2;
          v17 = v13 >> 1;
          v18 = &a1[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(&a1[2 * (v13 >> 1)], a1, v16, a3);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1, v18, v16, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1 + 2, v18 - 2, a2 - 4, a3);
            v19 = &a1[2 * v17 + 2];
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1 + 4, v19, a2 - 6, a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(v18 - 2, v18, v19, a3);
            v20 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v18;
            *(_QWORD *)v18 = v20;
          }
          if ((a5 & 1) == 0 && ((*a3)(*(a1 - 2), *(a1 - 1), *a1, a1[1]) & 1) == 0)
          {
            v9 = (float *)std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,std::pair<float,float> *,BOOL (*&)(std::pair<float,float>,std::pair<float,float>)>(a1, a2, a3);
            goto LABEL_22;
          }
          v21 = (float *)std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,std::pair<float,float> *,BOOL (*&)(std::pair<float,float>,std::pair<float,float>)>((uint64_t)a1, a2, a3);
          if ((v22 & 1) == 0)
            goto LABEL_21;
          v23 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(a1, v21, a3);
          v9 = v21 + 2;
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*>(v21 + 2, a2, a3))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_21:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 2;
LABEL_22:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<float,float>,std::pair<float,float>),std::pair<float,float>*,std::pair<float,float>*>((uint64_t)v9, a2, a2, (unsigned int (**)(float, float, float, float))a3);
        return;
    }
  }
}

unsigned __int8 *WebCore::HTMLInputElement::setChecked(unsigned __int8 *result, int a2)
{
  __int16 v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WebCore::AXObjectCache *v21;
  WebCore::AXObjectCache *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  _BYTE v28[20];
  __int128 v29;
  char v30;

  v2 = *((_WORD *)result + 115);
  *((_WORD *)result + 115) = v2 | 2;
  if ((v2 & 1) == a2)
    return result;
  v4 = (uint64_t)result;
  (*(void (**)(_QWORD))(**((_QWORD **)result + 30) + 848))(*((_QWORD *)result + 30));
  if ((*(_BYTE *)(v4 + 22) & 8) == 0)
    goto LABEL_22;
  v5 = *(uint64_t **)(v4 + 40);
  v6 = v5[1];
  if (!*(_QWORD *)(v6 + 1944) || *(_BYTE *)(v6 + 3405))
    goto LABEL_22;
  if ((*(_BYTE *)(v4 + 70) & 4) != 0)
  {
    v10 = *v5;
    v11 = (*(_WORD *)(v10 + 28) & 0x80) == 0 || v10 == 0;
    v12 = v10 + 216;
    if (v11)
      v12 = v6 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v12 + 236))
      goto LABEL_22;
  }
  v7 = *(_QWORD *)(v6 + 1272);
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 70) & 4) != 0)
    {
LABEL_22:
      LOBYTE(v24) = 0;
      v26 = 0;
      v27 = 0;
      v25 = v4;
      goto LABEL_23;
    }
  }
  if (*(_BYTE *)(v6 + 3362)
    || (v8 = *(unsigned __int8 *)(v6 + 3390), !*(_BYTE *)(v6 + 3390))
    && (*(_BYTE *)(v6 + 70) & 8) == 0
    && !*(_QWORD *)(v6 + 1560)
    && (v9 = *(_QWORD *)(v6 + 1328), !*(_BYTE *)(v9 + 233))
    && !*(_BYTE *)(v9 + 234))
  {
    LOBYTE(v24) = 1;
    v26 = 0;
    v27 = 0;
    v25 = v4;
LABEL_43:
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v24, (WTF::StringImpl *)0x10, a2, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v25, &v26);
    goto LABEL_23;
  }
  v15 = *(unsigned __int8 *)(v6 + 3391);
  if (v8)
    v16 = v15 == 0;
  else
    v16 = 0;
  v17 = !v16;
  LOBYTE(v24) = v17;
  v26 = 0;
  v27 = 0;
  v25 = v4;
  if (!v16)
    goto LABEL_43;
LABEL_23:
  *(_WORD *)(v4 + 230) = *(_WORD *)(v4 + 230) & 0xFFFE | a2;
  if (*(_DWORD *)(*(_QWORD *)(v4 + 240) + 12) != 4096)
    goto LABEL_24;
  v18 = *(_QWORD *)(v4 + 120);
  if (v18 && (v20 = *(_QWORD *)(v18 + 8)) != 0)
  {
    v19 = (uint64_t *)(v20 + 160);
  }
  else
  {
    if ((*(_BYTE *)(v4 + 22) & 0x18) == 0)
      goto LABEL_24;
    v19 = WebCore::TreeScope::radioButtonGroups(*(WebCore::TreeScope **)(v4 + 40));
  }
  WebCore::RadioButtonGroups::updateCheckedState(v19, (WebCore::HTMLInputElement *)v4);
LABEL_24:
  v13 = *(_QWORD *)(v4 + 64);
  if ((v13 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v13 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_57;
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x58) + 32) + 148) & 0x1FC000) != 0
      && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v29) = 0;
      v30 = 0;
      v28[0] = 0;
      v28[16] = 0;
      WebCore::RenderObject::issueRepaint(v13 & 0xFFFFFFFFFFFFLL, &v29, 0, 0, (uint64_t)v28);
    }
  }
  WebCore::ValidatedFormListedElement::updateValidity(v4 + 112);
  if ((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_30;
  if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1944ABDC4);
  }
  if (!WebCore::Document::hasEverCreatedAnAXObjectCache)
    goto LABEL_30;
  v21 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40) + 8));
  if (!v21)
    goto LABEL_30;
  v22 = v21;
  ++*((_DWORD *)v21 + 2);
  WebCore::AXObjectCache::checkedStateChanged(v21, (WebCore::Node *)v4);
  v23 = *((_DWORD *)v22 + 2);
  if (!v23)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x1944ABDA4);
  }
  *((_DWORD *)v22 + 2) = v23 - 1;
LABEL_30:
  if ((_BYTE)v24)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v25, &v27);
  if (v27)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v27, v14);
  result = v26;
  if (v26)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v26, v14);
  return result;
}

unsigned int *WebCore::CheckboxInputType::willUpdateCheckedness(unsigned int *this, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (this[3] == 2)
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        if ((*(_WORD *)(v4 + 232) & 0x2000) != 0)
        {
          if (a3)
          {
            *((_QWORD *)this + 6) = 0;
            *((_QWORD *)this + 7) = 0;
            return WebCore::CheckboxInputType::stopSwitchPointerTracking(this);
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ValidatedFormListedElement::updateValidity(uint64_t this)
{
  WebCore::ValidatedFormListedElement *v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  void *v6;
  const WebCore::HTMLElement *v7;
  unsigned int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  BOOL v22;
  char v23;
  int v24;
  const WebCore::HTMLElement *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::HTMLFieldSetElement *v30;
  const WebCore::HTMLElement *v31;
  uint64_t v32;
  WebCore::HTMLFormElement *v33;
  WebCore::Element *v34;
  WebCore::AXObjectCache *v35;
  WebCore::Element *v36;
  WebCore::AXObjectCache *v37;
  int v38;
  int v39;
  const WebCore::HTMLElement *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;

  if (*(_DWORD *)(this + 52))
    return this;
  v1 = (WebCore::ValidatedFormListedElement *)this;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 272))(this);
  v3 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)v1 + 224))(v1);
  if (((v3 ^ ((*((_BYTE *)v1 + 48) & 1) == 0)) & 1) == 0)
  {
    v4 = v3;
    v5 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)v1 + 16))(v1);
    v7 = (const WebCore::HTMLElement *)v5;
    v8 = *((unsigned __int8 *)v1 + 48);
    if ((v8 & 0x40) != 0)
      v9 = v4;
    else
      v9 = 0;
    if ((*(_BYTE *)(v5 + 22) & 8) == 0)
      goto LABEL_27;
    v10 = *(uint64_t **)(v5 + 40);
    v11 = v10[1];
    if (!*(_QWORD *)(v11 + 1944) || *(_BYTE *)(v11 + 3405))
      goto LABEL_27;
    if ((*(_BYTE *)(v5 + 70) & 4) != 0)
    {
      v14 = *v10;
      v15 = (*(_WORD *)(v14 + 28) & 0x80) == 0 || v14 == 0;
      v16 = v14 + 216;
      if (v15)
        v16 = v11 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v16 + 236))
        goto LABEL_27;
    }
    v12 = *(_QWORD *)(v11 + 1272);
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 70) & 4) != 0)
      {
LABEL_27:
        LOBYTE(v42) = 0;
        v44 = 0;
        v45 = 0;
        v43 = v5;
        goto LABEL_28;
      }
    }
    v39 = v9;
    v40 = (const WebCore::HTMLElement *)v5;
    if (!*(_BYTE *)(v11 + 3362)
      && (*(_BYTE *)(v11 + 3390)
       || (*(_BYTE *)(v11 + 70) & 8) != 0
       || *(_QWORD *)(v11 + 1560)
       || (v13 = *(_QWORD *)(v11 + 1328), *(_BYTE *)(v13 + 233))
       || *(_BYTE *)(v13 + 234)))
    {
      if (*(_BYTE *)(v11 + 3390))
        v22 = *(_BYTE *)(v11 + 3391) == 0;
      else
        v22 = 0;
      v23 = !v22;
      LOBYTE(v42) = v23;
      v44 = 0;
      v45 = 0;
      v7 = (const WebCore::HTMLElement *)v5;
      v43 = v5;
      if (v22)
      {
LABEL_28:
        v17 = v8 & 0xFE | v4;
        *((_BYTE *)v1 + 48) = v17;
        if (!v2)
          goto LABEL_34;
        if ((v4 & 1) != 0)
        {
          v25 = v7;
          if ((v17 & 0x80000000) == 0)
          {
            v26 = *((_QWORD *)v7 + 4);
            if (v26)
            {
              if ((*(_WORD *)(v26 + 28) & 8) != 0)
              {
                v27 = WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(v26);
                if (v27)
                {
                  v30 = (WebCore::HTMLFieldSetElement *)v27;
                  do
                  {
                    WebCore::HTMLFieldSetElement::removeInvalidDescendant(v30, v25);
                    v30 = (WebCore::HTMLFieldSetElement *)WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v30);
                  }
                  while (v30);
                }
              }
            }
          }
          v28 = *((_QWORD *)v1 + 1);
          v7 = v25;
          if (!v28)
            goto LABEL_34;
          v29 = *(_QWORD *)(v28 + 8);
          if (!v29)
            goto LABEL_34;
          WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v29, v25);
LABEL_75:
          v7 = v25;
LABEL_34:
          if (WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            v34 = v7;
            v35 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)v7 + 5) + 8));
            if (v35)
            {
              v36 = v34;
              v37 = v35;
              ++*((_DWORD *)v35 + 2);
              WebCore::AXObjectCache::onValidityChange(v35, v36);
              v38 = *((_DWORD *)v37 + 2);
              if (!v38)
              {
                this = 286;
                __break(0xC471u);
                return this;
              }
              *((_DWORD *)v37 + 2) = v38 - 1;
            }
          }
          if ((_BYTE)v42)
            WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v43, &v45);
          if (v45)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v45, v6);
          if (v44)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v44, v6);
          goto LABEL_3;
        }
        if ((v17 & 0x80000000) == 0)
        {
          v18 = *((_QWORD *)v7 + 4);
          if (v18)
          {
            v19 = *(_WORD *)(v18 + 28);
            if ((v19 & 8) != 0)
            {
              if ((v19 & 0x10) == 0
                || *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
              {
                v18 = *(_QWORD *)(v18 + 32);
                if (!v18)
                  goto LABEL_33;
                v21 = *(_WORD *)(v18 + 28);
                if ((v21 & 8) == 0)
                  goto LABEL_33;
                while ((v21 & 0x10) == 0
                     || *(_QWORD *)(*(_QWORD *)(v18 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
                {
                  v18 = *(_QWORD *)(v18 + 32);
                  if (v18)
                  {
                    v21 = *(_WORD *)(v18 + 28);
                    if ((v21 & 8) != 0)
                      continue;
                  }
                  goto LABEL_33;
                }
              }
              do
              {
                v31 = v7;
                WebCore::HTMLFieldSetElement::addInvalidDescendant((WebCore::HTMLFieldSetElement *)v18, v7);
                v32 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(v18);
                v7 = v31;
                v18 = v32;
              }
              while (v32);
            }
          }
        }
LABEL_33:
        v20 = *((_QWORD *)v1 + 1);
        if (!v20)
          goto LABEL_34;
        v33 = *(WebCore::HTMLFormElement **)(v20 + 8);
        if (!v33)
          goto LABEL_34;
        v25 = v7;
        WebCore::HTMLFormElement::addInvalidFormControl(v33, v7);
        goto LABEL_75;
      }
    }
    else
    {
      LOBYTE(v42) = 1;
      v44 = 0;
      v45 = 0;
      v43 = v5;
    }
    v24 = (v4 ^ 1) & (v8 >> 6);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v42, (WTF::StringImpl *)0x4E, v4, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v42, (WTF::StringImpl *)0x29, v4 ^ 1, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v42, (WTF::StringImpl *)0x4D, v39, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v42, (WTF::StringImpl *)0x4C, v24, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v43, &v44);
    v7 = v40;
    LOBYTE(v8) = *((_BYTE *)v1 + 48);
    goto LABEL_28;
  }
LABEL_3:
  this = *((_QWORD *)v1 + 5);
  if (this)
  {
    this = WebCore::ValidationMessage::isVisible((WebCore::ValidationMessage *)this);
    if ((_DWORD)this)
    {
      this = WebCore::ValidatedFormListedElement::focusableValidationAnchorElement(v1, &v42);
      if (v42)
      {
        v41 = v42;
        WebCore::ValidatedFormListedElement::updateVisibleValidationMessage(v1, &v41);
        return (uint64_t)WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v41);
      }
    }
  }
  return this;
}

uint64_t WebCore::ValidatedFormListedElement::willValidate(WebCore::ValidatedFormListedElement *this)
{
  unsigned int v2;
  int v4;
  int v5;

  v2 = *((unsigned __int8 *)this + 48);
  if ((v2 & 4) == 0 || (*((_BYTE *)this + 50) & 3) == 2)
  {
    *((_BYTE *)this + 48) = v2 | 4;
    v4 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 336))(this);
    v2 = *((unsigned __int8 *)this + 48);
    if (((v4 ^ ((v2 & 2) == 0)) & 1) == 0)
    {
      if (v4)
        v5 = 2;
      else
        v5 = 0;
      v2 = v2 & 0xFFFFFFFD | v5;
      *((_BYTE *)this + 48) = v2;
    }
  }
  return (v2 >> 1) & 1;
}

BOOL `non-virtual thunk to'WebCore::HTMLInputElement::computeValidity(WebCore::HTMLInputElement *this)
{
  return WebCore::HTMLInputElement::computeValidity((WebCore::HTMLInputElement *)((char *)this - 112));
}

BOOL WebCore::HTMLInputElement::computeValidity(WebCore::HTMLInputElement *this)
{
  _DWORD *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  char isInvalid;
  WTF::StringImpl *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _BOOL8 v18;
  WTF::StringImpl *v20;

  v2 = (_DWORD *)*((_QWORD *)this + 30);
  if (v2[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v2, &v20);
    goto LABEL_13;
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v20 = v3;
    goto LABEL_13;
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 + 40);
      LODWORD(v7) = *(_DWORD *)(v4 + 52);
      if ((_DWORD)v7)
      {
LABEL_6:
        v7 = v7;
        v8 = (_QWORD *)(v6 + 8);
        while (1)
        {
          v9 = *(v8 - 1);
          if (v9 == WebCore::HTMLNames::valueAttr
            || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
            && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
          {
            goto LABEL_11;
          }
          v8 += 2;
          if (!--v7)
          {
            v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            goto LABEL_11;
          }
        }
      }
    }
    else
    {
      v6 = v4 + 32;
      LODWORD(v7) = v5 >> 5;
      if ((_DWORD)v7)
        goto LABEL_6;
    }
  }
  v8 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_11:
  if (!*v8)
  {
LABEL_12:
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v2 + 64))(&v20);
    goto LABEL_13;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v2 + 296))(&v20);
  if (!v20)
  {
    v20 = 0;
    v2 = (_DWORD *)*((_QWORD *)this + 30);
    goto LABEL_12;
  }
LABEL_13:
  isInvalid = WebCore::InputType::isInvalid(*((WebCore::InputType **)this + 30), (const WTF::String *)&v20);
  v12 = v20;
  if ((isInvalid & 1) != 0)
    goto LABEL_41;
  v13 = v20 ? *((_DWORD *)v20 + 1) : 0;
  if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8820) != 0)
  {
    v14 = *((_DWORD *)this + 44);
    if (v14 >= 1 && *((_QWORD *)this + 27) && (*((_WORD *)this + 116) & 0x100) != 0 && v13 && v14 > v13)
      goto LABEL_41;
  }
  v15 = v20 ? *((_DWORD *)v20 + 1) : 0;
  if ((*(_DWORD *)(*((_QWORD *)this + 30) + 12) & 0x2A8820) == 0)
    goto LABEL_24;
  v16 = *((_DWORD *)this + 43);
  if (v16 >= 0x80000)
    v16 = 0x80000;
  if (*((_QWORD *)this + 27) && (*((_WORD *)this + 116) & 0x100) != 0 && v16 < v15)
  {
LABEL_41:
    v18 = 0;
  }
  else
  {
LABEL_24:
    v17 = *((_QWORD *)this + 18);
    if (v17)
      v18 = *(_DWORD *)(v17 + 4) == 0;
    else
      v18 = 1;
  }
  v20 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v18;
}

uint64_t WebCore::InputType::isInvalid(WebCore::InputType *this, const WTF::String *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int isValid;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  BOOL v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WebCore::HTMLInputElement *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  char *v35;
  char v36[8];
  WTF::StringImpl *v37;

  result = 0;
  v5 = *((_DWORD *)this + 3);
  if (v5 <= 63)
  {
    switch(v5)
    {
      case 1:
      case 4:
        goto LABEL_123;
      case 2:
        v6 = *((_QWORD *)this + 3);
        if (!v6)
          return 0;
        v7 = *(_QWORD *)(v6 + 8);
        if ((*(_BYTE *)(v7 + 168) & 1) == 0)
          return 0;
        return (*(_WORD *)(v7 + 230) & 1) == 0;
      case 3:
      case 5:
      case 6:
      case 7:
        return result;
      case 8:
        goto LABEL_65;
      default:
        if (v5 == 16)
          goto LABEL_65;
        if (v5 != 32)
          return result;
        if ((WebCore::EmailInputType::typeMismatch(this) & 1) == 0)
          goto LABEL_105;
        return 1;
    }
  }
  if (v5 >= 0x80000)
  {
    if (v5 == 0x200000)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 104);
      if (v8
        && ((v9 = *(_DWORD *)(v8 + 4), (v9 & 1) != 0)
          ? (v10 = *(_QWORD *)(v8 + 40), LODWORD(v11) = *(_DWORD *)(v8 + 52))
          : (v10 = v8 + 32, LODWORD(v11) = v9 >> 5),
            (_DWORD)v11))
      {
        v11 = v11;
        v12 = (WTF::StringImpl **)(v10 + 8);
        while (1)
        {
          v13 = (uint64_t)*(v12 - 1);
          if (v13 == WebCore::HTMLNames::patternAttr
            || *(_QWORD *)(v13 + 24) == *(_QWORD *)(WebCore::HTMLNames::patternAttr + 24)
            && *(_QWORD *)(v13 + 32) == *(_QWORD *)(WebCore::HTMLNames::patternAttr + 32))
          {
            break;
          }
          v12 += 2;
          if (!--v11)
          {
            v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v12 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      }
      if (*v12)
      {
        if (*(_QWORD *)a2)
        {
          if (*(_DWORD *)(*(_QWORD *)a2 + 4))
          {
            JSC::Yarr::RegularExpression::RegularExpression();
            isValid = JSC::Yarr::RegularExpression::isValid((JSC::Yarr::RegularExpression *)&v30);
            JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)&v30);
            if (isValid)
            {
              v18 = *v12;
              if (*v12)
                *(_DWORD *)v18 += 2;
              v37 = v18;
              WTF::makeString<WTF::ASCIILiteral,WTF::AtomString,WTF::ASCIILiteral>((int8x16_t *)"^(?:", 5, (uint64_t *)&v37, (int8x16_t *)")$", 3, &v33);
              v20 = v37;
              v37 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, v19);
                else
                  *(_DWORD *)v20 -= 2;
              }
              JSC::Yarr::RegularExpression::RegularExpression();
              v35 = v36;
              if (*((_DWORD *)this + 3) == 32
                && ((v27 = *((_QWORD *)this + 3)) == 0 ? (v28 = 0) : (v28 = *(WebCore::HTMLInputElement **)(v27 + 8)),
                    WebCore::HTMLInputElement::multiple(v28)))
              {
                WTF::String::split();
                v21 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::findIf<WebCore::BaseTextInputType::patternMismatch(WTF::String const&)::$_0>((uint64_t)&v30) != -1;
                WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v29);
              }
              else
              {
                v21 = WebCore::BaseTextInputType::patternMismatch(WTF::String const&)const::$_0::operator()<WTF::String const>((uint64_t)v36, *(_QWORD *)a2);
              }
              JSC::Yarr::RegularExpression::~RegularExpression((JSC::Yarr::RegularExpression *)v36);
              v23 = v33;
              v33 = 0;
              if (v23)
              {
                if (*(_DWORD *)v23 == 2)
                  WTF::StringImpl::destroy(v23, v22);
                else
                  *(_DWORD *)v23 -= 2;
              }
              if (v21)
                return 1;
            }
          }
        }
      }
      goto LABEL_19;
    }
    if (v5 != 0x80000)
    {
      if (v5 != 0x100000)
        return result;
LABEL_110:
      if (!WebCore::BaseDateAndTimeInputType::typeMismatch(this, a2)
        && !WebCore::InputType::stepMismatch(this, a2)
        && !WebCore::InputType::rangeUnderflow(this, a2)
        && !WebCore::InputType::rangeOverflow(this, a2)
        && !WebCore::BaseDateAndTimeInputType::valueMissing(this, a2))
      {
        return WebCore::BaseDateAndTimeInputType::hasBadInput(this, v26);
      }
      return 1;
    }
    if (WebCore::URLInputType::typeMismatch(this, a2))
      return 1;
LABEL_105:
    if (!WebCore::InputType::stepMismatch(this, a2)
      && !WebCore::InputType::rangeUnderflow(this, a2)
      && !WebCore::InputType::rangeOverflow(this, a2)
      && !WebCore::BaseTextInputType::patternMismatch(this, a2))
    {
      return WebCore::TextFieldInputType::valueMissing(this, a2);
    }
    return 1;
  }
  if (v5 <= 4095)
  {
    if (v5 > 511)
    {
      if (v5 == 1024)
      {
        v30 = 0;
        v31 = 0;
        v32 = 2;
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, const WTF::String *, uint64_t *))(*(_QWORD *)this + 856))(&v33, this, a2, &v30);
        if ((v34 & 0xFFFFFFFD) == 0
          || ((*(void (**)(uint64_t *__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(&v30, this, 0), !WebCore::StepRange::stepMismatch((WebCore::StepRange *)&v30, (const WebCore::Decimal *)&v33)))
        {
          if (!WebCore::InputType::rangeUnderflow(this, a2) && !WebCore::InputType::rangeOverflow(this, a2))
          {
            v16 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
            if ((*(_BYTE *)(v16 + 160) & 0x18) != 0
              || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v16 + 112) + 288))(v16 + 112)
              && (*(_BYTE *)(v16 + 160) & 0x20) != 0)
            {
              return WebCore::NumberInputType::hasBadInput(this);
            }
            if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 168) & 1) == 0
              || *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
            {
              return WebCore::NumberInputType::hasBadInput(this);
            }
          }
        }
        return 1;
      }
      if (v5 == 512)
        goto LABEL_110;
      if (v5 != 2048)
        return result;
      goto LABEL_105;
    }
    if (v5 == 128)
    {
LABEL_87:
      if (!WebCore::InputType::rangeUnderflow(this, a2))
        return WebCore::InputType::rangeOverflow(this, a2);
      return 1;
    }
    if (v5 == 64)
    {
      if (WebCore::InputType::stepMismatch(this, a2)
        || WebCore::InputType::rangeUnderflow(this, a2)
        || WebCore::InputType::rangeOverflow(this, a2))
      {
        return 1;
      }
      goto LABEL_22;
    }
    if (v5 != 256)
      return result;
LABEL_123:
    if (WebCore::InputType::stepMismatch(this, a2))
      return 1;
    goto LABEL_87;
  }
  if (v5 < 0x8000)
  {
    if (v5 == 4096)
    {
      if (!WebCore::InputType::rangeUnderflow(this, a2) && !WebCore::InputType::rangeOverflow(this, a2))
        return WebCore::RadioInputType::valueMissing(this, a2);
      return 1;
    }
    if (v5 == 0x2000)
    {
      v30 = 0;
      v31 = 0;
      v32 = 2;
      (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, const WTF::String *, uint64_t *))(*(_QWORD *)this + 856))(&v33, this, a2, &v30);
      if ((v34 & 0xFFFFFFFD) == 0
        || ((*(void (**)(uint64_t *__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(&v30, this, 0), !WebCore::StepRange::stepMismatch((WebCore::StepRange *)&v30, (const WebCore::Decimal *)&v33)))
      {
        if (!WebCore::InputType::rangeUnderflow(this, a2))
          return WebCore::InputType::rangeOverflow(this, a2);
      }
      return 1;
    }
    if (v5 != 0x4000)
      return result;
    goto LABEL_123;
  }
  if (v5 >= 0x40000)
  {
    if (v5 != 0x40000)
      return result;
LABEL_65:
    if (!WebCore::BaseDateAndTimeInputType::typeMismatch(this, a2))
    {
      if ((*((_DWORD *)this + 3) & 0x142618) == 0
        || (v30 = 0,
            v31 = 0,
            v32 = 2,
            (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::InputType *, const WTF::String *, uint64_t *))(*(_QWORD *)this + 856))(&v33, this, a2, &v30), (v34 & 0xFFFFFFFD) == 0)|| ((*(void (**)(uint64_t *__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(&v30, this, 0), !WebCore::StepRange::stepMismatch((WebCore::StepRange *)&v30, (const WebCore::Decimal *)&v33)))
      {
        if (!WebCore::InputType::rangeUnderflow(this, a2) && !WebCore::InputType::rangeOverflow(this, a2))
        {
          v25 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
          if ((*(_BYTE *)(v25 + 160) & 0x18) != 0
            || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v25 + 112) + 288))(v25 + 112)
            && (*(_BYTE *)(v25 + 160) & 0x20) != 0)
          {
            return WebCore::BaseDateAndTimeInputType::hasBadInput(this, v24);
          }
          if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 168) & 1) == 0
            || *(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4))
          {
            return WebCore::BaseDateAndTimeInputType::hasBadInput(this, v24);
          }
        }
      }
    }
    return 1;
  }
  if (v5 != 0x8000)
  {
    if (v5 != 0x10000)
    {
      if (v5 != 0x20000)
        return result;
      goto LABEL_105;
    }
    goto LABEL_123;
  }
  if (WebCore::InputType::rangeUnderflow(this, a2)
    || WebCore::InputType::rangeOverflow(this, a2)
    || WebCore::BaseTextInputType::patternMismatch(this, a2))
  {
    return 1;
  }
LABEL_19:
  v14 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v14 + 160) & 0x18) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v14 + 112) + 288))(v14 + 112)
    && (*(_BYTE *)(v14 + 160) & 0x20) != 0)
  {
    return 0;
  }
LABEL_22:
  if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 168) & 1) == 0)
    return 0;
  if (!*(_QWORD *)a2)
    return 1;
  return *(_DWORD *)(*(_QWORD *)a2 + 4) == 0;
}

void WebCore::BaseCheckableInputType::fallbackValue(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = WebCore::onAtomData;
  if (WebCore::onAtomData)
    *(_DWORD *)WebCore::onAtomData += 2;
  *a1 = v2;
}

BOOL WebCore::InputType::rangeUnderflow(WebCore::InputType *this, const WTF::String *a2)
{
  _BOOL8 result;
  __int128 *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;

  if ((*((_DWORD *)this + 3) & 0x142618) == 0)
    return 0;
  *(_QWORD *)v9 = 0;
  *(_WORD *)&v9[8] = 0;
  *(_QWORD *)&v9[12] = 2;
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this + 856))(&v13);
  result = 0;
  if ((HIDWORD(v13) & 0xFFFFFFFD) != 0)
  {
    (*(void (**)(_BYTE *__return_ptr, WebCore::InputType *, _QWORD))(*(_QWORD *)this + 208))(v9, this, 0);
    if (!v12
      || (v7 = *(_OWORD *)v9, v8 = *(_QWORD *)&v9[16], v5 = v10, v6 = v11, !WebCore::Decimal::operator<(&v7, &v5)))
    {
      v7 = v10;
      v8 = v11;
      v4 = &v7;
      return WebCore::Decimal::operator<(&v13, v4);
    }
    v7 = *(_OWORD *)v9;
    v8 = *(_QWORD *)&v9[16];
    result = WebCore::Decimal::operator>(&v13, &v7);
    if ((_DWORD)result)
    {
      v5 = v10;
      v6 = v11;
      v4 = &v5;
      return WebCore::Decimal::operator<(&v13, v4);
    }
  }
  return result;
}

void WebCore::LocalFrame::injectUserScriptImmediately(_QWORD *a1, WebCore::DOMWrapperWorld *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 v15;
  void *v16;
  _DWORD *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  int v20;
  int32x2_t v21;
  WTF::StringImpl *v22;
  __int128 v23;
  __int128 v24;
  _OWORD buf[2];
  unsigned int *v26[2];

  v26[1] = *(unsigned int **)MEMORY[0x1E0C80C00];
  v6 = a1[35];
  ++*(_DWORD *)v6;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 1176))(*(_QWORD *)(v6 + 16)))
  {
    v7 = a1[37];
    if (v7)
    {
      *(_DWORD *)(v7 + 24) += 2;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WebCore::Document::addConsoleMessage((_QWORD *)v7, 8, 1, (WTF::StringImpl **)buf, 0);
      v9 = *(WTF::StringImpl **)&buf[0];
      *(_QWORD *)&buf[0] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    v10 = qword_1ECE7C478;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C478, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 134217984;
      *(_QWORD *)((char *)buf + 4) = a1;
      _os_log_error_impl(&dword_1940B8000, v10, OS_LOG_TYPE_ERROR, "%p - Frame::injectUserScriptImmediately: Ignoring user script injection for non app-bound domain", (uint8_t *)buf, 0xCu);
    }
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 1184))(*(_QWORD *)(v6 + 16));
    v12 = a1[37];
    if (v12)
    {
      *(_DWORD *)(v12 + 24) += 2;
      if ((!*(_BYTE *)(a3 + 81) || *(_QWORD **)(a1[16] + 8) == a1)
        && WebCore::UserContentURLPattern::matchesPatterns((const WTF::URL *)(v12 + 736), a3 + 48, a3 + 64))
      {
        WebCore::Document::setAsRunningUserScripts((unsigned int *)v12, v11);
        (*(void (**)(_QWORD, WebCore::DOMWrapperWorld *))(**(_QWORD **)(v6 + 16) + 1040))(*(_QWORD *)(v6 + 16), a2);
        v13 = a1[38];
        ++*(_DWORD *)(v13 + 8);
        v14 = *(WTF::StringImpl **)(a3 + 8);
        if (v14)
          *(_DWORD *)v14 += 2;
        v21 = 0;
        v22 = v14;
        v15 = *(_OWORD *)(a3 + 32);
        v23 = *(_OWORD *)(a3 + 16);
        v24 = v15;
        WebCore::ScriptSourceCode::ScriptSourceCode((int32x2_t *)buf, (_DWORD **)a3, 0, &v22, &v21);
        WebCore::ScriptController::evaluateInWorldIgnoringException(v13, (uint64_t)buf, a2);
        WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v26, v16);
        v17 = (_DWORD *)*((_QWORD *)&buf[0] + 1);
        *((_QWORD *)&buf[0] + 1) = 0;
        if (v17)
        {
          if (v17[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
          else
            --v17[2];
        }
        v18 = *(_DWORD **)&buf[0];
        *(_QWORD *)&buf[0] = 0;
        if (v18)
        {
          if (v18[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          else
            --v18[2];
        }
        v19 = v22;
        v22 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = *(_DWORD *)(v13 + 8);
        if (!v20)
        {
          __break(0xC471u);
          JUMPOUT(0x1944AD1CCLL);
        }
        *(_DWORD *)(v13 + 8) = v20 - 1;
      }
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v11);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
  }
  if (!*(_DWORD *)v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1944AD19CLL);
  }
  --*(_DWORD *)v6;
}

int32x2_t *WebCore::ScriptSourceCode::ScriptSourceCode(int32x2_t *a1, _DWORD **a2, uint64_t a3, WTF::StringImpl **a4, int32x2_t *a5)
{
  WTF::StringImpl *v8;
  int v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  _DWORD *v13;
  int32x2_t v14;
  __int32 v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v8 = *a4;
  if (*a4)
  {
    v9 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    v18 = v8;
    *(_DWORD *)v8 = v9 + 4;
  }
  else
  {
    v18 = 0;
  }
  v17 = v8;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
  JSC::SourceProvider::SourceProvider();
  *v10 = off_1E33948F0;
  v12 = *a2;
  if (!*a2)
    v12 = (_DWORD *)MEMORY[0x1E0CBEF70];
  *v12 += 2;
  v10[15] = v12;
  *a1 = (int32x2_t)v10;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v11);
    else
      *(_DWORD *)v17 -= 2;
  }
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v11);
    else
      *(_DWORD *)v18 -= 2;
  }
  v13 = (_DWORD *)*a1;
  v13[2] = *(_DWORD *)(*(_QWORD *)a1 + 8) + 1;
  a1[1] = (int32x2_t)v13;
  a1[2].i32[0] = 0;
  v14 = *a5;
  (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 24))(v13);
  a1[2].i32[1] = v15;
  a1[3] = vmax_s32(v14, 0);
  a1[4] = 0;
  return a1;
}

uint64_t WebCore::ScriptController::evaluateInWorldIgnoringException(uint64_t a1, uint64_t a2, WebCore::DOMWrapperWorld *a3)
{
  uint64_t v3;
  _QWORD v5[4];
  int v6;
  char v7;

  WebCore::ScriptController::evaluateInWorld(a1, a2, a3, (uint64_t)v5);
  v3 = 0;
  if (v6 != -1)
  {
    if (!v6)
      v3 = v5[0];
    ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3JSC7JSValueEN7WebCore16ExceptionDetailsEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix[v6])(&v7, v5);
  }
  return v3;
}

unsigned int *WebCore::Document::setAsRunningUserScripts(unsigned int *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*((_BYTE *)this + 3362) || *((_BYTE *)this + 3405))
  {
    v10 = *((_QWORD *)this + 66);
    if (!v10 || (v11 = *(_QWORD *)(v10 + 8)) == 0 || (v12 = *(_QWORD *)(v11 + 120)) == 0)
    {
LABEL_11:
      v7 = (int *)(this + 6);
      v8 = this[6] + 2;
      this[6] = v8;
LABEL_12:
      *((_BYTE *)this + 3432) = 1;
      goto LABEL_13;
    }
    v13 = *(_QWORD *)(v12 + 8);
    for (i = (uint64_t)this; v13; v13 = *(_QWORD *)(v16 + 8))
    {
      i = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8);
      v14 = *(_QWORD *)(i + 528);
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15)
        break;
      v16 = *(_QWORD *)(v15 + 120);
      if (!v16)
        break;
    }
  }
  else
  {
    v2 = *((_QWORD *)this + 66);
    if (!v2)
      goto LABEL_11;
    v3 = *(_QWORD *)(v2 + 8);
    if (!v3)
      goto LABEL_11;
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
    if (!v4 || *(_BYTE *)(v4 + 144) != 0)
      goto LABEL_11;
    i = *(_QWORD *)(v4 + 296);
    if (!i)
      goto LABEL_11;
  }
  v7 = (int *)(i + 24);
  v8 = *(_DWORD *)(i + 24) + 2;
  *(_DWORD *)(i + 24) = v8;
  if ((unsigned int *)i == this)
    goto LABEL_12;
  WebCore::Document::setAsRunningUserScripts((WebCore::Document *)i);
  v8 = *(_DWORD *)(i + 24);
  this = (unsigned int *)i;
LABEL_13:
  v9 = v8 - 2;
  if (v9)
  {
    *v7 = v9;
  }
  else if ((*((_WORD *)this + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
  }
  return this;
}

uint64_t WebCore::UserContentURLPattern::matchesPatterns(const WTF::URL *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t i;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  __int16 v38;

  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(uint64_t **)a2;
    v7 = 8 * v5 - 8;
    while (1)
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = *(unsigned int *)(v8 + 16);
        v10 = *(const char **)(v8 + 8);
        v8 = *(unsigned int *)(v8 + 4);
        v11 = (v9 >> 2) & 1;
      }
      else
      {
        v10 = 0;
        v11 = 1;
      }
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 1;
      v12 = WebCore::UserContentURLPattern::parse((uint64_t)&v35, v10, v8 | (v11 << 32));
      LOBYTE(v38) = v12;
      if (v12)
        goto LABEL_8;
      if (MEMORY[0x19AEA53F4](v35, "*", 1))
      {
        if ((*((_BYTE *)a1 + 8) & 2) == 0)
          goto LABEL_8;
      }
      else if (!WTF::URL::protocolIs())
      {
        goto LABEL_8;
      }
      if (WebCore::UserContentURLPattern::matchesHost(&v35, a1))
      {
        v14 = WebCore::UserContentURLPattern::matchesPath((WebCore::UserContentURLPattern *)&v35, a1);
        goto LABEL_9;
      }
LABEL_8:
      v14 = 0;
LABEL_9:
      v15 = v37;
      v37 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v13);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v36;
      v36 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v13);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v35;
      v35 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v13);
        else
          *(_DWORD *)v17 -= 2;
      }
      ++v6;
      if (v7)
        v18 = v14;
      else
        v18 = 1;
      v7 -= 8;
      if (v18 == 1)
        goto LABEL_31;
    }
  }
  v14 = 1;
LABEL_31:
  v19 = *(unsigned int *)(a3 + 12);
  v20 = 1;
  if ((_DWORD)v19)
  {
    v21 = *(uint64_t **)a3;
    for (i = 8 * v19 - 8; ; i -= 8)
    {
      v23 = *v21;
      if (*v21)
      {
        v24 = *(unsigned int *)(v23 + 16);
        v25 = *(const char **)(v23 + 8);
        v23 = *(unsigned int *)(v23 + 4);
        v26 = (v24 >> 2) & 1;
      }
      else
      {
        v25 = 0;
        v26 = 1;
      }
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = 1;
      v27 = WebCore::UserContentURLPattern::parse((uint64_t)&v35, v25, v23 | (v26 << 32));
      LOBYTE(v38) = v27;
      if (v27)
        goto LABEL_38;
      if (MEMORY[0x19AEA53F4](v35, "*", 1))
      {
        if ((*((_BYTE *)a1 + 8) & 2) == 0)
          goto LABEL_38;
      }
      else if (!WTF::URL::protocolIs())
      {
        goto LABEL_38;
      }
      if (WebCore::UserContentURLPattern::matchesHost(&v35, a1))
      {
        v29 = WebCore::UserContentURLPattern::matchesPath((WebCore::UserContentURLPattern *)&v35, a1);
        goto LABEL_39;
      }
LABEL_38:
      v29 = 0;
LABEL_39:
      v30 = v37;
      v37 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v28);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = v36;
      v36 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v28);
        else
          *(_DWORD *)v31 -= 2;
      }
      v32 = v35;
      v35 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v28);
        else
          *(_DWORD *)v32 -= 2;
      }
      ++v21;
      if (i)
        v33 = v29;
      else
        v33 = 1;
      if (v33 == 1)
      {
        v20 = v29 ^ 1;
        return v14 & v20;
      }
    }
  }
  return v14 & v20;
}

uint64_t WebCore::SQLiteDatabase::setIsDatabaseOpeningForbidden(uint64_t this)
{
  char v1;
  int v3;

  v1 = this;
  if (__ldaxr(byte_1ECE841D9))
  {
    __clrex();
  }
  else if (!__stxr(1u, byte_1ECE841D9))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](byte_1ECE841D9);
LABEL_5:
  _MergedGlobals_246 = v1;
  v3 = __ldxr(byte_1ECE841D9);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)byte_1ECE841D9);
  }
  if (__stlxr(0, byte_1ECE841D9))
    return WTF::Lock::unlockSlow((WTF::Lock *)byte_1ECE841D9);
  return this;
}

uint64_t WebCore::JSCSSStyleDeclaration::put(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  char **v11;
  BOOL v12;
  WebCore::JSDOMGlobalObject *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  JSC::VM *v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t result;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  JSC::VM *v33;
  int OwnProperty;
  int v35;
  char v36[16];
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v8 = *(_QWORD *)(a5 + 8);
  if (v8 != a1)
    return JSC::JSObject::put();
  v9 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMGlobalObject::s_info && v11 != 0);
  }
  if (v10)
    v13 = (WebCore::JSDOMGlobalObject *)a2;
  else
    v13 = 0;
  v14 = WebCore::JSDOMGlobalObject::scriptExecutionContext(v13);
  if (v14)
  {
    v15 = v14;
    if (!*(_BYTE *)(v14 + 274))
    {
      v23 = *(_BYTE **)(v14 + 496);
      if (!v23)
        v23 = (_BYTE *)WebCore::Document::ensureQuirks((WebCore::Document *)(v15 - 192));
      if (*(_QWORD *)v23)
      {
        v24 = *(_QWORD *)(*(_QWORD *)v23 + 8);
        if (v24)
        {
          v25 = *(_QWORD *)(v24 + 680);
          if (*(_BYTE *)(v25 + 243))
          {
            if (!*(_BYTE *)(v25 + 242))
              goto LABEL_12;
          }
          else if ((*(_QWORD *)(v25 + 688) & 0x80000) == 0)
          {
            goto LABEL_12;
          }
          if (v23[65])
            return JSC::JSObject::put();
        }
      }
    }
  }
LABEL_12:
  if (!a3)
    return JSC::JSObject::put();
  v16 = *(_DWORD *)(a3 + 16);
  if ((v16 & 0x20) != 0)
    return JSC::JSObject::put();
  v17 = *(JSC::VM **)(a2 + 56);
  v18 = *(_BYTE **)(a3 + 8);
  v19 = *(unsigned int *)(a3 + 4);
  if ((v16 & 4) != 0)
  {
    if (!(_DWORD)v19)
      return JSC::JSObject::put();
    v20 = *v18 - 48;
    if (v20 > 9 || v19 >= 2 && *v18 == 48)
      return JSC::JSObject::put();
    v30 = v19 - 1;
    v31 = v18 + 1;
    while (v30)
    {
      if (v20 <= 0x19999999)
      {
        v32 = *v31 - 48;
        if (v32 <= 9)
        {
          v29 = __CFADD__(v32, 10 * v20);
          v20 = v32 + 10 * v20;
          --v30;
          ++v31;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  else
  {
    if (!(_DWORD)v19)
      return JSC::JSObject::put();
    v20 = *(unsigned __int16 *)v18 - 48;
    if (v20 > 9 || v19 >= 2 && *(_WORD *)v18 == 48)
      return JSC::JSObject::put();
    v26 = (unsigned __int16 *)(v18 + 2);
    v27 = v19 - 1;
    while (v27)
    {
      if (v20 <= 0x19999999)
      {
        v28 = *v26 - 48;
        if (v28 <= 9)
        {
          v29 = __CFADD__(v28, 10 * v20);
          v20 = v28 + 10 * v20;
          ++v26;
          --v27;
          if (!v29)
            continue;
        }
      }
      return JSC::JSObject::put();
    }
  }
  if (v20 == -1)
    return JSC::JSObject::put();
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 14;
  v37 = 0xFFFFFFFF00000000;
  v39 = 0;
  v40 = 0;
  v38 = v8;
  v41 = 0x20000;
  v42 = 0;
  LOBYTE(v43) = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v33 = v17;
  OwnProperty = WebCore::JSCSSStyleDeclaration::legacyPlatformObjectGetOwnProperty(a1, a2, a3, (uint64_t)v36);
  if (*((_DWORD *)v33 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) != 0
    || OwnProperty
    && (JSC::PropertyDescriptor::setPropertySlot(), *((_DWORD *)v33 + 20))
    && (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) != 0)
  {
    result = 0;
  }
  else
  {
    result = JSC::ordinarySetWithOwnDescriptor();
  }
  if (v44)
  {
    v35 = *(_DWORD *)(v43 + 4);
    if (!v35)
    {
      __break(0xC471u);
      JUMPOUT(0x1944ADBCCLL);
    }
    *(_DWORD *)(v43 + 4) = v35 - 1;
  }
  return result;
}

void WebCore::PowerSourceNotifier::~PowerSourceNotifier(WebCore::PowerSourceNotifier *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*((_BYTE *)this + 12))
    notify_cancel(*((_DWORD *)this + 2));
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 0;
    v4 = *(unsigned int **)this;
    *(_QWORD *)this = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void sub_1944ADC68(_Unwind_Exception *exception_object, void *a2)
{
  unsigned int **v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v4 = v2[2];
  v2[2] = 0;
  if (v4)
    (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  if (*v2)
  {
    *((_QWORD *)*v2 + 1) = 0;
    v5 = *v2;
    *v2 = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *v2 = 0;
  }
  _Unwind_Resume(exception_object);
}

WTF *WebCore::IPAddress::fromString@<X0>(uint64_t a1@<X8>)
{
  const char *v4;
  void *v5;
  int v6;
  WTF *result;
  const char *v8;
  void *v9;
  int v10;
  char v11;
  int v12;
  WTF *v13;
  __int128 v14;

  WTF::String::utf8();
  if (v13)
    v4 = (char *)v13 + 16;
  else
    v4 = 0;
  v6 = inet_pton(30, v4, &v14);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v5);
    else
      --*(_DWORD *)result;
  }
  if (v6)
  {
    *(_OWORD *)a1 = v14;
    *(_DWORD *)(a1 + 16) = 2;
    v11 = 1;
  }
  else
  {
    WTF::String::utf8();
    if (v13)
      v8 = (char *)v13 + 16;
    else
      v8 = 0;
    v10 = inet_pton(2, v8, &v12);
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF *)WTF::fastFree(result, v9);
      else
        --*(_DWORD *)result;
    }
    if (v10)
    {
      *(_DWORD *)a1 = v12;
      v11 = 1;
      *(_DWORD *)(a1 + 16) = 1;
    }
    else
    {
      v11 = 0;
      *(_BYTE *)a1 = 0;
    }
  }
  *(_BYTE *)(a1 + 20) = v11;
  return result;
}

uint64_t WebCore::CSSPropertyParser::consumeBorderImage(uint64_t a1, int a2, int a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  int *v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;

  v27 = 0;
  v28 = 0;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v7 = WebCore::CSSPropertyParserHelpers::consumeBorderImageComponents(a2, (__int128 **)a1, *(WebCore::CSSParserTokenRange **)(a1 + 16), &v28, &v27, &v26, &v25, &v24);
  if ((_DWORD)v7)
  {
    if (a2 == 548)
      v8 = 165;
    else
      v8 = 75;
    if (a2 == 548)
      v9 = 164;
    else
      v9 = 74;
    if (a2 == 548)
      v10 = 166;
    else
      v10 = 76;
    if (a2 == 548)
      v11 = 162;
    else
      v11 = 72;
    if (a2 == 548)
      v12 = 163;
    else
      v12 = 73;
    if (a2 == 510)
      v13 = 165;
    else
      v13 = v8;
    if (a2 == 510)
      v14 = 164;
    else
      v14 = v9;
    if (a2 == 510)
      v15 = 166;
    else
      v15 = v10;
    if (a2 == 510)
      v16 = 162;
    else
      v16 = v11;
    if (a2 == 510)
      v17 = 163;
    else
      v17 = v12;
    WebCore::CSSPropertyParser::addProperty(a1, v13, a2, &v28, a3, 0);
    WebCore::CSSPropertyParser::addProperty(a1, v14, a2, &v27, a3, 0);
    WebCore::CSSPropertyParser::addProperty(a1, v15, a2, &v26, a3, 0);
    WebCore::CSSPropertyParser::addProperty(a1, v16, a2, &v25, a3, 0);
    WebCore::CSSPropertyParser::addProperty(a1, v17, a2, &v24, a3, 0);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    if (*v18 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v6);
    else
      *v18 -= 2;
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    if (*v19 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v6);
    else
      *v19 -= 2;
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    if (*v20 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v6);
    else
      *v20 -= 2;
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    if (*v21 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v6);
    else
      *v21 -= 2;
  }
  v22 = v28;
  v28 = 0;
  if (v22)
  {
    if (*v22 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v6);
    else
      *v22 -= 2;
  }
  return v7;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeBorderImageComponents(int a1, __int128 **a2, WebCore::CSSParserTokenRange *a3, _QWORD *a4, _QWORD *a5, int **a6, int **a7, _QWORD *a8)
{
  WTF::StringImpl *v16;
  int *v17;
  _DWORD *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 *v22;
  char v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  int *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  int *v29;
  _DWORD *v30;
  WTF::StringImpl *v31;
  int *v32;
  __int128 *v33;
  __int128 *v34;
  int *v35;
  __int128 *v36;
  __int128 *v37;
  char v38;
  unsigned int v39;
  WTF::StringImpl *v40;
  int *v41;
  uint64_t result;
  WTF::StringImpl *v43;
  _DWORD *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  _QWORD v49[4];
  int *v50;

  do
  {
    if (*a4)
      goto LABEL_2;
    WebCore::CSSPropertyParserHelpers::consumeImageOrNone(a2, a3, 13, (WTF::StringImpl *)&v50);
    v26 = v50;
    v27 = (_DWORD *)*a4;
    *a4 = v50;
    if (!v27)
      goto LABEL_24;
    if (*v27 != 2)
    {
      *v27 -= 2;
LABEL_24:
      if (v26)
        continue;
      goto LABEL_2;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v25);
    if (*a4)
      continue;
LABEL_2:
    if (*a8)
      goto LABEL_3;
    WebCore::CSSPropertyParserHelpers::consumeBorderImageRepeat((WebCore::CSSPropertyParserHelpers *)a2, (uint64_t *)&v50);
    v29 = v50;
    v30 = (_DWORD *)*a8;
    *a8 = v50;
    if (!v30)
      goto LABEL_29;
    if (*v30 != 2)
    {
      *v30 -= 2;
LABEL_29:
      if (v29)
        continue;
      goto LABEL_3;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v30, v28);
    if (*a8)
      continue;
LABEL_3:
    if (*a5)
      return 0;
    WebCore::CSSPropertyParserHelpers::consumeBorderImageSlice(a1, a2, &v50);
    v17 = v50;
    v18 = (_DWORD *)*a5;
    *a5 = v50;
    if (!v18)
      goto LABEL_7;
    if (*v18 != 2)
    {
      *v18 -= 2;
LABEL_7:
      if (!v17)
        return 0;
      goto LABEL_8;
    }
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v16);
    if (!*a5)
      return 0;
LABEL_8:
    v20 = *a2;
    v19 = a2[1];
    if (*a2 >= v19)
    {
      v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      {
        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
        v20 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      }
    }
    if ((*(_DWORD *)v20 & 0x3F) == 6 && *((_WORD *)v20 + 8) == 47)
    {
      v21 = *a2;
      if (*a2 == v19)
      {
        v23 = 1;
        {
          v22 = v19;
        }
        else
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v22 = *a2;
        }
      }
      else
      {
        v22 = (__int128 *)((char *)v21 + 24);
        *a2 = (__int128 *)((char *)v21 + 24);
      }
      while (1)
      {
        if (v22 < v19 || (v23 & 1) != 0)
        {
          if (v22 >= v19)
            v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          v24 = *(_DWORD *)v22;
        }
        else
        {
          v24 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v24;
          v23 = 1;
        }
        if ((v24 & 0x3F) != 0x10)
          break;
        v22 = (__int128 *)((char *)*a2 + 24);
        *a2 = v22;
      }
      WebCore::CSSPropertyParserHelpers::consumeBorderImageWidth(a1, a2, (WebCore::CSSPrimitiveValue **)&v50);
      v32 = *a6;
      *a6 = v50;
      if (v32)
      {
        if (*v32 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v31);
        else
          *v32 -= 2;
      }
      v34 = *a2;
      v33 = a2[1];
      if (*a2 >= v33)
      {
        v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        {
          *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
          *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
          v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
        }
      }
      if ((*(_DWORD *)v34 & 0x3F) == 6 && *((_WORD *)v34 + 8) == 47)
      {
        v36 = *a2;
        if (*a2 == v33)
        {
          v38 = 1;
          {
            v37 = v33;
          }
          else
          {
            *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
            *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
            v37 = *a2;
          }
        }
        else
        {
          v37 = (__int128 *)((char *)v36 + 24);
          *a2 = (__int128 *)((char *)v36 + 24);
        }
        while (1)
        {
          if (v37 < v33 || (v38 & 1) != 0)
          {
            if (v37 >= v33)
              v37 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
            v39 = *(_DWORD *)v37;
          }
          else
          {
            v39 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
            WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v39;
            v38 = 1;
          }
          if ((v39 & 0x3F) != 0x10)
            break;
          v37 = (__int128 *)((char *)*a2 + 24);
          *a2 = v37;
        }
        WebCore::CSSPropertyParserHelpers::consumeBorderImageOutset(a2, &v50);
        v35 = v50;
        v41 = *a7;
        *a7 = v50;
        if (v41)
        {
          if (*v41 == 2)
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, v40);
            v35 = *a7;
          }
          else
          {
            *v41 -= 2;
          }
        }
      }
      else
      {
        v35 = *a6;
      }
      if (!v35)
        return 0;
    }
  }
  while (*a2 != a2[1]);
  result = 1;
  if (a1 == 548 && !*a5)
  {
    dword_1ECE8ABE8 += 8;
    v49[0] = &WebCore::staticCSSValuePool[2064];
    v49[1] = v49[0];
    v49[2] = v49[0];
    v49[3] = v49[0];
    WebCore::CSSBorderImageSliceValue::create((uint64_t)v49, 1, (uint64_t *)&v50);
    v44 = (_DWORD *)*a5;
    *a5 = v50;
    if (v44)
    {
      if (*v44 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v43);
      else
        *v44 -= 2;
    }
    v45 = dword_1ECE8ABE8 - 2;
    if (dword_1ECE8ABE8 == 2)
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)&WebCore::staticCSSValuePool[2064], v43);
      v45 = dword_1ECE8ABE8;
    }
    else
    {
      dword_1ECE8ABE8 -= 2;
    }
    v46 = v45 - 2;
    if (v46)
    {
      dword_1ECE8ABE8 = v46;
    }
    else
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)&WebCore::staticCSSValuePool[2064], v43);
      v46 = dword_1ECE8ABE8;
    }
    v47 = v46 - 2;
    if (v47)
    {
      dword_1ECE8ABE8 = v47;
    }
    else
    {
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)&WebCore::staticCSSValuePool[2064], v43);
      v47 = dword_1ECE8ABE8;
    }
    v48 = v47 - 2;
    if (v48)
      dword_1ECE8ABE8 = v48;
    else
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)&WebCore::staticCSSValuePool[2064], v43);
    return 1;
  }
  return result;
}

int *WebCore::CSSPropertyParserHelpers::consumeBorderImageRepeat@<X0>(WebCore::CSSPropertyParserHelpers *this@<X0>, uint64_t *a2@<X8>)
{
  int *result;
  int *v6;
  int *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  int *v11;
  int *v12;
  int *v13;

  result = (int *)WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)499,(WebCore::CSSValueID)231,(WebCore::CSSValueID)572,(WebCore::CSSValueID)596>((uint64_t)this, &v13);
  if (v13)
  {
    WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)499,(WebCore::CSSValueID)231,(WebCore::CSSValueID)572,(WebCore::CSSValueID)596>((uint64_t)this, &v12);
    v6 = v12;
    if (!v12)
    {
      WTF::RefPtr<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>::operator=(&v12, (WTF::StringImpl *)&v13);
      v6 = v12;
    }
    v7 = v13;
    v12 = 0;
    v13 = 0;
    v8 = WTF::fastCompactMalloc((WTF *)0x18);
    *(_DWORD *)v8 = 2;
    v10 = (*(unsigned __int8 *)(v8 + 6) << 16) & 0xFC0000 | 0x10000;
    *(_BYTE *)(v8 + 7) = 1;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(v8 + 16) = v6;
    *(_WORD *)(v8 + 4) = -18432;
    *(_BYTE *)(v8 + 6) = BYTE2(v10);
    *a2 = v8;
    v11 = v12;
    v12 = 0;
    if (v11)
    {
      if (*v11 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v11, v9);
      else
        *v11 -= 2;
    }
    result = v13;
    v13 = 0;
    if (result)
    {
      if (*result == 2)
        return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v9);
      else
        *result -= 2;
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::CSSPropertyParserHelpers::consumeIdent<(WebCore::CSSValueID)499,(WebCore::CSSValueID)231,(WebCore::CSSValueID)572,(WebCore::CSSValueID)596>@<X0>(uint64_t result@<X0>, int **a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  __int128 *v5;
  __int128 *v6;
  int *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  char v11;
  unsigned int v12;

  v2 = result;
  v5 = *(__int128 **)result;
  v4 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)result >= v4)
  {
    v5 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_BYTE *)v5 & 0x3F) != 0)
    goto LABEL_5;
  v6 = *(__int128 **)result;
  if (*(_QWORD *)result >= v4)
  {
    v6 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
    }
  }
  if ((*(_DWORD *)v6 & 0x3F) != 0)
  {
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  result = *((unsigned int *)v6 + 4);
  if ((result & 0x80000000) != 0)
  {
    result = WebCore::cssValueKeywordID(*((_QWORD *)v6 + 1), *((unsigned int *)v6 + 1) | ((unint64_t)((*(_DWORD *)v6 >> 22) & 1) << 32));
    *((_DWORD *)v6 + 4) = result;
  }
  v7 = 0;
  if ((unsigned __int16)result > 0x23Bu)
  {
    if ((unsigned __int16)result != 596 && (unsigned __int16)result != 572)
      goto LABEL_6;
  }
  else if ((unsigned __int16)result != 231 && (unsigned __int16)result != 499)
  {
    goto LABEL_6;
  }
  v9 = *(__int128 **)v2;
  v8 = *(_QWORD *)(v2 + 8);
  if (*(_QWORD *)v2 == v8)
  {
    v11 = 1;
    {
      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1Eu;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (unint64_t)WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
    }
    v10 = *(__int128 **)v2;
    v9 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  }
  else
  {
    v10 = (__int128 *)((char *)v9 + 24);
    *(_QWORD *)v2 = (char *)v9 + 24;
  }
  while (1)
  {
    if ((unint64_t)v10 < v8 || (v11 & 1) != 0)
    {
      if ((unint64_t)v10 >= v8)
        v10 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      v12 = *(_DWORD *)v10;
    }
    else
    {
      v12 = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v12;
      v11 = 1;
    }
    if ((v12 & 0x3F) != 0x10)
      break;
    v10 = (__int128 *)(*(_QWORD *)v2 + 24);
    *(_QWORD *)v2 = v10;
  }
  if ((*(_DWORD *)v9 & 0x3F) != 0)
  {
    result = 0;
  }
  else
  {
    result = *((unsigned int *)v9 + 4);
    if ((result & 0x80000000) != 0)
    {
      result = WebCore::cssValueKeywordID(*((_QWORD *)v9 + 1), *((unsigned int *)v9 + 1) | ((unint64_t)((*(_DWORD *)v9 >> 22) & 1) << 32));
      *((_DWORD *)v9 + 4) = result;
    }
    if ((unsigned __int16)result >= 0x48Eu)
    {
      __break(0xC471u);
      JUMPOUT(0x1944AE7D8);
    }
  }
  v7 = &WebCore::staticCSSValuePool[4 * (unsigned __int16)result + 3088];
  *v7 += 2;
LABEL_6:
  *a2 = v7;
  return result;
}

uint64_t WebCore::DocumentLoader::applyPoliciesToSettings(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(this + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_QWORD *)(*(_QWORD *)(v2 + 128) + 8) == v2)
      {
        v3 = this;
        *(_QWORD *)(*(_QWORD *)(v2 + 136) + 688) = *(_QWORD *)(*(_QWORD *)(v2 + 136) + 688) & 0xFFFFFFFFFFFFFBFFLL | ((unint64_t)(*(_BYTE *)(this + 3524) == 2) << 10);
        v4 = *(_QWORD *)(this + 16);
        if (*(_BYTE *)(this + 3526) == 1)
        {
          v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 136);
          v6 = *(_QWORD *)(v5 + 712);
          if ((v6 & 0x4000000000) != 0)
          {
            v7 = *(unsigned int *)(v5 + 720) | ((unint64_t)*(unsigned __int8 *)(v5 + 724) << 32);
            v8 = *(_QWORD *)(v5 + 704);
            v9 = *(_QWORD *)(v5 + 696);
            v10 = *(_QWORD *)(v5 + 688);
            v11 = *(_QWORD *)(v5 + 680);
            v12 = *(_QWORD *)(v5 + 672);
            *(_QWORD *)(v5 + 664) = *(_QWORD *)(v5 + 664);
            *(_QWORD *)(v5 + 672) = v12;
            *(_QWORD *)(v5 + 680) = v11;
            *(_QWORD *)(v5 + 688) = v10;
            *(_QWORD *)(v5 + 696) = v9;
            *(_QWORD *)(v5 + 704) = v8;
            *(_QWORD *)(v5 + 712) = v6 & 0xFFFFFFBFFFFFFFFFLL;
            *(_DWORD *)(v5 + 720) = v7;
            *(_BYTE *)(v5 + 724) = BYTE4(v7);
            WebCore::SettingsBase::setNeedsRelayoutAllFrames(v5);
            v4 = *(_QWORD *)(v3 + 16);
          }
        }
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 136) + 712) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 8)
                                                                                              + 136)
                                                                                  + 712) & 0xFFFFFBFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v3 + 3531) << 42);
        return WebCore::DocumentLoader::updateAdditionalSettingsIfNeeded((WebCore::DocumentLoader *)v3);
      }
    }
  }
  return this;
}

BOOL WebCore::PlatformCAAnimation::isValidKeyPath(WTF::StringImpl **a1, int a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int16x8_t *v21;
  int16x8_t *v22;
  int16x8_t v23;
  int8x16_t v24;
  int16x8_t *v25;
  char *v26;
  uint64_t v27;
  int16x8_t v28;
  WTF::StringImpl *v29;

  v3 = *a1;
  if (a2 == 1)
  {
    if (v3)
      return *((_DWORD *)v3 + 1) == 0;
    return 1;
  }
  if ((MEMORY[0x19AEA53F4](v3, "transform", 9) & 1) != 0
    || (MEMORY[0x19AEA53F4](*a1, "opacity", 7) & 1) != 0
    || (MEMORY[0x19AEA53F4](*a1, "backgroundColor", 15) & 1) != 0
    || (MEMORY[0x19AEA53F4](*a1, "backdropFilters", 15) & 1) != 0)
  {
    return 1;
  }
  if (!*a1)
    return 0;
  if (!WTF::StringImpl::startsWith())
    return 0;
  v7 = *a1;
  if (!*a1)
    return 0;
  v8 = *((_QWORD *)v7 + 1);
  v9 = *((unsigned int *)v7 + 1);
  if ((*((_BYTE *)v7 + 16) & 4) == 0)
  {
    if (v9 >= 0x10)
    {
      v21 = (int16x8_t *)(v8 + 30);
      v22 = (int16x8_t *)(v8 + 2 * v9);
      if ((unint64_t)(2 * v9 - 93) >= 0xFFFFFFFFFFFFFFC1)
      {
        v27 = 2 * v9 - 30;
        while (v21->i16[0] != 46)
        {
          v4 = 0;
          v21 = (int16x8_t *)((char *)v21 + 2);
          v27 -= 2;
          if (!v27)
            return v4;
        }
      }
      else
      {
        if (v9 < 0x17)
        {
          v25 = (int16x8_t *)(v8 + 30);
LABEL_64:
          if (v25 >= v22)
            return 0;
          v21 = v22 - 1;
          v28.i64[0] = 0x2E002E002E002ELL;
          v28.i64[1] = 0x2E002E002E002ELL;
          v24 = (int8x16_t)vceqq_s16(v22[-1], v28);
          v28.i16[0] = vmaxvq_u16((uint16x8_t)v24);
          if (!v28.i32[0])
            return 0;
        }
        else
        {
          v23.i64[0] = 0x2E002E002E002ELL;
          v23.i64[1] = 0x2E002E002E002ELL;
          while (1)
          {
            v24 = (int8x16_t)vceqq_s16(*v21, v23);
            LOWORD(v6) = vmaxvq_u16((uint16x8_t)v24);
            if (v6)
              break;
            v25 = v21 + 1;
            v26 = &v21[1].i8[14];
            ++v21;
            if (v26 >= (char *)v22)
              goto LABEL_64;
          }
        }
        v21 = (int16x8_t *)((char *)v21
                          + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v24)));
      }
      if (v21 != v22)
      {
        v14 = ((uint64_t)v21->i64 - *((_QWORD *)v7 + 1)) >> 1;
        goto LABEL_24;
      }
    }
    return 0;
  }
  if (v9 < 0x10)
    return 0;
  v10 = v9 - 15;
  v11 = 16;
  if ((unint64_t)(v9 - 15) < 0x10)
    v11 = v9 - 15;
  if (v11)
  {
    v12 = v11;
    v13 = (_BYTE *)(v8 + 15);
    while (*v13 != 46)
    {
      ++v13;
      if (!--v12)
        goto LABEL_21;
    }
  }
  else
  {
LABEL_21:
    if (v10 < 0x11)
      return 0;
    v13 = memchr((void *)(v8 + 15 + v11), 46, v10 - v11);
    if (!v13)
      return 0;
  }
  v14 = (uint64_t)&v13[-v8];
LABEL_24:
  if ((unint64_t)(v14 - 16) > 0xFFFFFFFFFFFFFFEELL)
    return 0;
  WTF::StringImpl::substring(v7);
  v15 = v29;
  if (!v29)
  {
    v16 = 0;
    v17 = 0;
    goto LABEL_27;
  }
  v16 = *((_QWORD *)v29 + 1);
  v17 = *((unsigned int *)v29 + 1);
  if ((*((_BYTE *)v29 + 16) & 4) != 0)
  {
LABEL_27:
    v18 = WTF::parseInteger<unsigned int,unsigned char>(v16, v17, 10, 0);
    goto LABEL_28;
  }
  v18 = WTF::parseInteger<unsigned int,char16_t>(v16, v17, 10, 0);
LABEL_28:
  if ((v18 & 0xFF00000000) == 0)
  {
    v4 = 0;
    goto LABEL_42;
  }
  v20 = *a1;
  if (*a1)
  {
    if ((_DWORD)v14 != -1 || (*((_DWORD *)v20 + 1) & 0x80000000) != 0)
    {
      WTF::StringImpl::substring(v20);
    }
    else
    {
      *(_DWORD *)v20 += 2;
      v29 = v20;
    }
  }
  else
  {
    v29 = 0;
  }
  if ((MEMORY[0x19AEA53F4]() & 1) != 0
    || (MEMORY[0x19AEA53F4](v29, "inputColorMatrix", 16) & 1) != 0
    || (MEMORY[0x19AEA53F4](v29, "inputAngle", 10) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v4 = MEMORY[0x19AEA53F4](v29, "inputRadius", 11);
  }
  if (!v29)
  {
LABEL_42:
    if (!v15)
      return v4;
    goto LABEL_43;
  }
  if (*(_DWORD *)v29 == 2)
  {
    WTF::StringImpl::destroy(v29, v19);
    if (!v15)
      return v4;
  }
  else
  {
    *(_DWORD *)v29 -= 2;
    if (!v15)
      return v4;
  }
LABEL_43:
  if (*(_DWORD *)v15 == 2)
    WTF::StringImpl::destroy(v15, v19);
  else
    *(_DWORD *)v15 -= 2;
  return v4;
}

WTF::StringImpl *WebCore::KeyframeEffect::animationDidChangeTimingProperties(WTF::StringImpl **this)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  WebCore::KeyframeEffect::computeSomeKeyframesUseStepsOrLinearTimingFunctionWithPoints((uint64_t)this);
  WebCore::KeyframeEffect::updateAcceleratedAnimationIfNecessary((WebCore::KeyframeEffect *)this);
  result = this[33];
  if (result)
  {
    if (*((_BYTE *)this + 288) && (v3 = this[35]) != 0)
    {
      *(_DWORD *)v3 += 2;
      result = (WTF::StringImpl *)WebCore::Node::invalidateStyle((uint64_t)result, 1u, 0);
      if (*(_DWORD *)v3 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v3, v4);
      else
        *(_DWORD *)v3 -= 2;
    }
    else
    {
      return (WTF::StringImpl *)WebCore::Node::invalidateStyle((uint64_t)result, 1u, 0);
    }
  }
  return result;
}

uint64_t WebCore::KeyframeEffect::computeSomeKeyframesUseStepsOrLinearTimingFunctionWithPoints(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  _DWORD *v8;
  BOOL v9;
  _DWORD *v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v21;
  int v22;

  v1 = this;
  *(_WORD *)(this + 329) = 0;
  v2 = *(_QWORD *)(this + 96);
  if (v2)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (v3)
    {
      this = (*(uint64_t (**)(_QWORD *))(*v3 + 112))(v3);
      if ((_DWORD)this)
      {
        v10 = *(_DWORD **)(v3[27] + 96);
        if (v10)
        {
          v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10) == 2;
          this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 24))(v10);
          if (!(_DWORD)this)
          {
            v12 = v10[7] != 0;
            goto LABEL_25;
          }
        }
        else
        {
          v11 = 0;
        }
        v12 = 0;
LABEL_25:
        if ((v11 & 1) == 0 && !v12)
          goto LABEL_4;
        v13 = *(_DWORD *)(v1 + 156);
        if (!v13)
          return this;
        v14 = *(_QWORD *)(v1 + 144);
        v15 = v14 + 48 * v13;
        v22 = v12;
        v21 = v15;
        while (1)
        {
          v16 = *(_DWORD **)(v14 + 32);
          if (v11 && !*(_BYTE *)(v1 + 330))
          {
            v17 = v14;
            if (v16)
            {
              this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 24))(*(_QWORD *)(v14 + 32));
              v19 = (_DWORD)this == 2;
            }
            else
            {
              v19 = 1;
            }
            *(_BYTE *)(v1 + 330) = v19;
          }
          else
          {
            if (!v12 || *(_BYTE *)(v1 + 329))
              goto LABEL_40;
            v17 = v14;
            if (v16)
            {
              this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 24))(*(_QWORD *)(v14 + 32));
              if ((_DWORD)this)
                v18 = 0;
              else
                v18 = v16[7] != 0;
            }
            else
            {
              v18 = 1;
            }
            *(_BYTE *)(v1 + 329) = v18;
          }
          v12 = v22;
          v14 = v17;
          v15 = v21;
LABEL_40:
          if (*(unsigned __int8 *)(v1 + 330) == v11)
          {
            v14 += 48;
            if (*(unsigned __int8 *)(v1 + 329) == v12 || v14 == v15)
              return this;
          }
          else
          {
            v14 += 48;
            if (v14 == v15)
              return this;
          }
        }
      }
    }
  }
LABEL_4:
  v4 = *(_DWORD *)(v1 + 156);
  if (v4)
  {
    v5 = *(_QWORD *)(v1 + 144);
    v6 = v5 + 48 * v4;
    v7 = *(_BYTE *)(v1 + 330) == 0;
    while (1)
    {
      v8 = *(_DWORD **)(v5 + 32);
      if (!v7)
        goto LABEL_10;
      if (v8)
        break;
LABEL_17:
      v7 = *(_BYTE *)(v1 + 330) == 0;
      if (!*(_BYTE *)(v1 + 330) || !*(_BYTE *)(v1 + 329))
      {
        v5 += 48;
        if (v5 != v6)
          continue;
      }
      return this;
    }
    this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 24))(*(_QWORD *)(v5 + 32));
    if ((_DWORD)this == 2)
      *(_BYTE *)(v1 + 330) = 1;
LABEL_10:
    if (*(_BYTE *)(v1 + 329))
      v9 = 1;
    else
      v9 = v8 == 0;
    if (!v9)
    {
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 24))(v8);
      if (!(_DWORD)this)
      {
        if (v8[7])
          *(_BYTE *)(v1 + 329) = 1;
      }
    }
    goto LABEL_17;
  }
  return this;
}

uint64_t WebCore::KeyframeEffect::updateAcceleratedAnimationIfNecessary(WebCore::KeyframeEffect *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::WebAnimation *v9;
  _BYTE v10[40];

  v2 = *((_QWORD *)this + 15);
  if ((!v2 || (v3 = *(_QWORD *)(v2 + 8)) == 0)
    && ((v6 = *((_QWORD *)this + 33)) == 0 || (v3 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 8)) == 0)
    || (*(_QWORD *)(*(_QWORD *)(v3 + 680) + 712) & 0x800000000000) == 0)
  {
    if ((v2 && (v4 = *(_QWORD *)(v2 + 8)) != 0
       || (v7 = *((_QWORD *)this + 33)) != 0 && (v4 = *(_QWORD *)(*(_QWORD *)(v7 + 40) + 8)) != 0)
      && (*(_QWORD *)(*(_QWORD *)(v4 + 680) + 712) & 0x800000000000) != 0)
    {
      if (!*((_BYTE *)this + 328)
        || !WebCore::KeyframeEffect::canBeAccelerated(this)
        || (v9 = *(WebCore::WebAnimation **)(*((_QWORD *)this + 12) + 8), *((_BYTE *)v9 + 156))
        || WebCore::WebAnimation::playState(v9) != 1)
      {
LABEL_8:
        if (!*((_BYTE *)this + 308) || *((_BYTE *)this + 304) == 4)
        {
          result = WebCore::KeyframeEffect::canBeAccelerated(this);
          if ((_DWORD)result)
            *((_BYTE *)this + 310) = 0;
          return result;
        }
      }
    }
    else if (*((_BYTE *)this + 310) != 1)
    {
      goto LABEL_8;
    }
    if (WebCore::KeyframeEffect::canBeAccelerated(this))
      return WebCore::KeyframeEffect::addPendingAcceleratedAction((uint64_t)this, 2);
    WebCore::KeyframeEffect::abilityToBeAcceleratedDidChange(this);
    return WebCore::KeyframeEffect::addPendingAcceleratedAction((uint64_t)this, 4);
  }
  result = WebCore::KeyframeEffect::canBeAccelerated(this);
  if ((_DWORD)result)
  {
    v10[0] = 0;
    v10[32] = 0;
    WebCore::KeyframeEffect::updateAssociatedThreadedEffectStack(this, v10);
    return std::optional<WebCore::Styleable const>::~optional((uint64_t)v10, v8);
  }
  return result;
}

_QWORD *WebCore::JSUserMessageHandlersNamespaceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
  --v3[6];
  return result;
}

_QWORD *WebCore::JSCredentialsContainerOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
  --v3[2];
  return result;
}

_QWORD *WebCore::JSUserMessageHandlerOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 24))(v3);
  --v3[6];
  return result;
}

void WebCore::JSMediaCapabilitiesOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::MediaCapabilities *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::MediaCapabilities *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::MediaCapabilities **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::MediaCapabilities **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WebCore::MediaCapabilities **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::MediaCapabilities::~MediaCapabilities(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

_QWORD *WebCore::JSWebKitNamespaceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[4];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[4] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[4];
  return result;
}

_QWORD *WebCore::JSDOMCacheStorageOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

_QWORD *WebCore::JSWebLockManagerOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

void WebCore::JSStorageManagerOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  bmalloc::api *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  bmalloc::api *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v3 = *(bmalloc::api **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(bmalloc::api **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(bmalloc::api **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (unsigned int *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, a2);
      }
    }
    bmalloc::api::isoDeallocate(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

_QWORD *WebCore::JSMediaSessionOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[6];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[6] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[6];
  return result;
}

_QWORD *WebCore::JSWakeLockOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[4];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[4] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[4];
  return result;
}

uint64_t *WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::ContainerNode *,WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>>,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContainerNode *>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v27 = 0;
        v26 = v8 + 16 * v28;
        goto LABEL_18;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24)
      goto LABEL_17;
LABEL_20:
    result = (uint64_t *)WTF::HashTable<WebCore::ContainerNode *,WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>>,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContainerNode *>>::expand(v6, v16);
    v16 = result;
    v22 = *v6;
    if (*v6)
      v25 = *(unsigned int *)(v22 - 4);
    else
      v25 = 0;
    goto LABEL_17;
  }
  if (3 * v25 <= 4 * v24)
    goto LABEL_20;
LABEL_17:
  v26 = v22 + 16 * v25;
  v27 = 1;
LABEL_18:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v26;
  *(_BYTE *)(a4 + 16) = v27;
  return result;
}

_OWORD *WTF::HashTable<WebCore::ContainerNode *,WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>>,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContainerNode *>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _OWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v12 = (_QWORD *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        v13 = (_OWORD *)WTF::HashTable<WebCore::ContainerNode *,WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>>,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContainerNode *>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ContainerNode *>>,WebCore::ContainerNode *>(a1, v12);
        *v13 = *(_OWORD *)v12;
        if (v12 == a3)
          v11 = v13;
      }
      v12 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

_OWORD *WTF::HashTable<WebCore::ContainerNode *,WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>>,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContainerNode *>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::ContainerNode *,WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ContainerNode *,unsigned int>>,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashMap<WebCore::ContainerNode *,unsigned int,WTF::DefaultHash<WebCore::ContainerNode *>,WTF::HashTraits<WebCore::ContainerNode *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ContainerNode *>>::rehash(a1, v5, a2);
}

void WebCore::JSMutationObserverOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WebCore::MutationObserver *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::MutationObserver *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  bmalloc::api *v24;
  void *v25;

  v3 = *(WebCore::MutationObserver **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::MutationObserver **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WebCore::MutationObserver **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::MutationObserver::~MutationObserver(v3, a2);
    bmalloc::api::isoDeallocate(v24, v25);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unsigned int *WebCore::JSDOMTokenListOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int **v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int **v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *result;
  int v24;

  v3 = *(unsigned int ***)(*(_QWORD *)a2 + 24);
  (*v3)[6] += 2;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(unsigned int ***)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v24 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v24) & v7;
        v12 = *(unsigned int ***)(v5 + 16 * v11);
        ++v24;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  result = *v3;
  if ((*v3)[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  else
  {
    result[6] = (*v3)[6] - 2;
  }
  return result;
}

void WebCore::JSDOMURLOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::DOMURL *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::DOMURL *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v23;
  WTF *v24;
  void *v25;

  v3 = *(WebCore::DOMURL **)(*(_QWORD *)a2 + 24);
  ++*((_DWORD *)v3 + 2);
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WebCore::DOMURL **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v23 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v23) & v7;
        v12 = *(WebCore::DOMURL **)(v5 + 16 * v11);
        ++v23;
        if (v12 == v3)
          goto LABEL_3;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_3:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v13 = (_QWORD *)(v5 + 16 * v11);
      *v13 = -1;
      v16 = v13[1];
      v15 = v13 + 1;
      v14 = v16;
      if (v16)
      {
        *(_QWORD *)(v14 + 8) = 3;
        *v15 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v17 = *v4;
      if (*v4)
        v18 = *(_DWORD *)(v17 - 12) - 1;
      else
        v18 = -1;
      *(_DWORD *)(v17 - 12) = v18;
      v19 = *v4;
      if (*v4)
      {
        v20 = 6 * *(_DWORD *)(v19 - 12);
        v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v21 >> 1, 0);
      }
    }
  }
  if (*((_DWORD *)v3 + 2) == 1)
  {
    WebCore::DOMURL::~DOMURL(v3, a2);
    WTF::fastFree(v24, v25);
  }
  else
  {
    --*((_DWORD *)v3 + 2);
  }
}

WebCore::Page *WebCore::LocalFrame::setPageAndTextZoomFactors(WebCore::Page *this, float a2, float a3)
{
  WebCore::Page *v5;
  uint64_t v6;
  WebCore::Page *v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  _BOOL4 v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  _DWORD v27[2];
  char v28;

  v5 = this;
  if (*((float *)this + 148) != a2 || *((float *)this + 149) != a3)
  {
    v6 = *((_QWORD *)this + 3);
    if (v6)
    {
      v7 = *(WebCore::Page **)(v6 + 8);
      if (v7)
      {
        ++*(_DWORD *)v7;
        v8 = *((_QWORD *)this + 37);
        if (!v8)
          return WTF::RefCounted<WebCore::Page>::deref(v7);
        *(_DWORD *)(v8 + 24) += 2;
        v9 = (_DWORD *)WebCore::Document::editor((WebCore::Document *)v8);
        ++*v9;
        JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(v9);
        if (*v9)
        {
          --*v9;
          if ((*(_WORD *)(v8 + 3358) & 0x20) != 0)
          {
            *(_DWORD *)(v8 + 24) += 2;
            v11 = WebCore::SVGDocument::zoomAndPanEnabled((WebCore::SVGDocument *)v8, v10);
            v13 = *(_DWORD *)(v8 + 24) - 2;
            if (!v11)
            {
              if (*(_DWORD *)(v8 + 24) == 2)
              {
                if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
              }
              else
              {
                *(_DWORD *)(v8 + 24) = v13;
              }
              goto LABEL_35;
            }
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
            }
            else
            {
              *(_DWORD *)(v8 + 24) = v13;
            }
          }
          LOBYTE(v27[0]) = 0;
          v28 = 0;
          if (*((float *)v5 + 148) != a2)
          {
            v14 = *((_QWORD *)v5 + 36);
            if (v14)
            {
              v15 = *(_QWORD *)(v14 + 64);
              ++*(_DWORD *)(v14 + 8);
              v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v15 + 832))(v14 + 64, 0, 1);
              v28 = 1;
              v17 = a2 / *((float *)v5 + 148);
              v27[0] = llroundf(v17 * (float)(int)v16);
              v27[1] = llroundf(v17 * (float)SHIDWORD(v16));
              if (*(_DWORD *)(v14 + 8) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
              else
                --*(_DWORD *)(v14 + 8);
            }
          }
          *((float *)v5 + 148) = a2;
          *((float *)v5 + 149) = a3;
          WebCore::Document::resolveStyle(v8, 1);
          v18 = *((_QWORD *)v5 + 11);
          if (v18)
          {
            v19 = (unsigned int *)(v18 + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 + 1, v19));
            *(_QWORD *)&v26 = v18;
            do
            {
              if (!*(_BYTE *)(v18 + 144))
              {
                v21 = (unsigned int *)(v18 + 8);
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 + 1, v21));
                WebCore::LocalFrame::setPageAndTextZoomFactors((WebCore::LocalFrame *)v18, *((float *)v5 + 148), *((float *)v5 + 149));
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v21);
                v18 = v26;
              }
              WTF::RefPtr<WebCore::Frame,WTF::RawPtrTraits<WebCore::Frame>,WTF::DefaultRefDerefTraits<WebCore::Frame>>::operator=((uint64_t *)&v26, *(_QWORD *)(v18 + 72));
              v18 = v26;
            }
            while ((_QWORD)v26);
          }
          v23 = *((_QWORD *)v5 + 36);
          if (!v23)
          {
LABEL_35:
            if (*(_DWORD *)(v8 + 24) == 2)
            {
              if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v8, v12);
            }
            else
            {
              *(_DWORD *)(v8 + 24) -= 2;
            }
            return WTF::RefCounted<WebCore::Page>::deref(v7);
          }
          ++*(_DWORD *)(v23 + 8);
          v24 = *(_QWORD *)(v8 + 1944);
          if (!v24 || (*(_BYTE *)(v24 + 20) & 0xF8) == 0 || *(_BYTE *)(v23 + 475))
          {
LABEL_29:
            if (v28)
            {
              v26 = xmmword_1968DF820;
              WebCore::LocalFrameView::setScrollPosition((WebCore::LocalFrameView *)v23, (WTF::StringImpl *)v27, &v26);
            }
            if (*(_DWORD *)(v23 + 8) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            else
              --*(_DWORD *)(v23 + 8);
            goto LABEL_35;
          }
          ++*(_DWORD *)(v23 + 336);
          WebCore::LocalFrameViewLayoutContext::layout((WebCore::LocalFrameViewLayoutContext *)(v23 + 336));
          v25 = *(_DWORD *)(v23 + 336);
          if (v25)
          {
            *(_DWORD *)(v23 + 336) = v25 - 1;
            goto LABEL_29;
          }
          __break(0xC471u);
        }
        else
        {
          __break(0xC471u);
        }
        JUMPOUT(0x1944B0964);
      }
    }
  }
  return this;
}

void WebCore::NetworkStorageSession::createCFStorageSessionForIdentifier(int a1@<W1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  WebCore::NetworkStorageSession *v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  const void *v11;
  const void *v12;

  v4 = _CFURLStorageSessionCreate();
  if (v4)
  {
    v5 = (const void *)v4;
    if (a1)
    {
      v6 = (WebCore::NetworkStorageSession *)_CFURLStorageSessionDisableCache();
    }
    else
    {
      v10 = _CFURLStorageSessionCopyCache();
      if (!v10)
        goto LABEL_13;
      v11 = (const void *)v10;
      CFURLCacheSetDiskCapacity();
      v12 = (const void *)CFURLCacheCopySharedURLCache();
      CFURLCacheMemoryCapacity();
      CFURLCacheSetMemoryCapacity();
      if (v12)
        CFRelease(v12);
      CFRelease(v11);
    }
    if ((WebCore::NetworkStorageSession::processMayUseCookieAPI(v6) & 1) != 0)
    {
      v7 = _CFURLStorageSessionCopyCookieStorage();
      if (v7)
      {
        v8 = (const void *)v7;
        _CFHTTPCookieStorageGetDefault();
        CFHTTPCookieStorageGetCookieAcceptPolicy();
        CFHTTPCookieStorageSetCookieAcceptPolicy();
        *a2 = v5;
        v9 = v8;
LABEL_7:
        CFRelease(v9);
        return;
      }
LABEL_13:
      *a2 = 0;
      v9 = v5;
      goto LABEL_7;
    }
    *a2 = v5;
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WebCore::jsCSSStyleDeclaration_propertyValueForCamelCasedIDLAttribute(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v3 = a3;
  v5 = *(_QWORD *)(a2 + 24);
  if (a3)
    *(_DWORD *)a3 += 2;
  v15 = a3;
  v6 = WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(&v15);
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 144))(&v16, v5, v6);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v16;
  if (!v16 || (v9 = *((_DWORD *)v16 + 1)) == 0)
  {
    v10 = *(_QWORD *)(v7 + 41968);
LABEL_9:
    v16 = 0;
    if (!v8)
      goto LABEL_12;
    goto LABEL_10;
  }
  if (v9 != 1)
    goto LABEL_6;
  v12 = (unsigned __int8 *)*((_QWORD *)v16 + 1);
  if ((*((_BYTE *)v16 + 16) & 4) != 0)
  {
    v13 = *v12;
LABEL_21:
    v10 = *(_QWORD *)(v7 + 8 * v13 + 42216);
    goto LABEL_22;
  }
  v14 = *(unsigned __int16 *)v12;
  if (v14 <= 0xFF)
  {
    v13 = v14;
    goto LABEL_21;
  }
LABEL_6:
  v10 = *(_QWORD *)(v7 + 64760);
  if (!v10 || v16 != *(WTF::StringImpl **)(v10 + 8))
  {
    v10 = JSC::jsStringWithCacheSlowCase();
    v8 = v16;
    goto LABEL_9;
  }
LABEL_22:
  v16 = 0;
LABEL_10:
  if (*(_DWORD *)v8 == 2)
  {
    WTF::StringImpl::destroy(v8, v8);
    v3 = v15;
  }
  else
  {
    *(_DWORD *)v8 -= 2;
  }
LABEL_12:
  v15 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v8);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v10;
}

uint64_t WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::StringImpl **a1)
{
  WTF::StringImpl *v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  char v14;
  int v15;
  char *v16;
  unsigned __int16 *v17;
  char v18;
  int v19;
  char *v20;
  char v21;
  int64_t v22;
  size_t v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  int j;
  unsigned int v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41[33];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  {
    v2 = *a1;
    if (WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache)
    {
      v3 = 0;
      for (i = *((_DWORD *)v2 + 4) >> 8; ; i = v3 + v5)
      {
        v5 = i & *(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                           - 8);
        v6 = *(WTF::StringImpl **)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                                 + 16 * v5);
        if (!v6)
          break;
        if (v6 != (WTF::StringImpl *)-1 && v6 == v2)
        {
          v8 = WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
             + 16 * v5;
          v9 = *(unsigned __int16 *)(v8 + 8);
          if (!*(_WORD *)(v8 + 8))
            break;
          return v9;
        }
        ++v3;
      }
    }
  }
  else
  {
    WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache = 0;
    v2 = *a1;
  }
  if (v2)
  {
    v11 = *((unsigned int *)v2 + 1);
    if ((*((_BYTE *)v2 + 16) & 4) != 0)
    {
      if ((_DWORD)v11)
      {
        v12 = (unsigned __int8 *)*((_QWORD *)v2 + 1);
        v13 = &v40;
        do
        {
          v15 = *v12++;
          v14 = v15;
          if ((v15 - 65) <= 0x19)
          {
            v16 = v13 + 2;
            v13[1] = v14 | 0x20;
            v14 = 45;
          }
          else
          {
            v16 = v13 + 1;
          }
          *v13 = v14;
          v13 = v16;
          --v11;
        }
        while (v11);
        goto LABEL_30;
      }
    }
    else if ((_DWORD)v11)
    {
      v17 = (unsigned __int16 *)*((_QWORD *)v2 + 1);
      v16 = &v40;
      do
      {
        v19 = *v17++;
        v18 = v19;
        if ((v19 - 65) > 0x19)
        {
          v21 = v18;
          v20 = v16;
        }
        else
        {
          v16[1] = v18 | 0x20;
          v20 = v16 + 1;
          v21 = 45;
        }
        *v16 = v21;
        v16 = v20 + 1;
        --v11;
      }
      while (v11);
      goto LABEL_30;
    }
  }
  v16 = &v40;
LABEL_30:
  v22 = v16 - &v40;
  v23 = v16 - &v40 - 1;
  if (v23 > 0x21
    || (v24 = WebCore::CSSPropertyNamesHash::hash((WebCore::CSSPropertyNamesHash *)&v40, (const char *)(v16 - &v40)),
        v24 > 0x1E3E)
    || (__int16)WebCore::lookup[v24] < 0
    || (v25 = WebCore::lookup[v24], v26 = (&WebCore::wordlist)[2 * v25], v40 != *v26)
    || strncmp(v41, v26 + 1, v23)
    || v26[v22])
  {
    v9 = 0;
  }
  else
  {
    v9 = LOWORD((&WebCore::wordlist)[2 * v25 + 1]);
  }
  v27 = WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache;
  if (WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(&WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache, 0), (v27 = WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache) != 0))
  {
    v28 = *(_DWORD *)(v27 - 8);
  }
  else
  {
    v28 = 0;
  }
  v29 = 0;
  v30 = *a1;
  v31 = *((_DWORD *)*a1 + 4) >> 8;
  for (j = 1; ; ++j)
  {
    v33 = v31 & v28;
    v34 = (WTF::StringImpl **)(v27 + 16 * v33);
    v35 = *v34;
    if (!*v34)
      break;
    if (v35 != (WTF::StringImpl *)-1)
    {
      v34 = v29;
      if (v35 == v30)
        return v9;
    }
    v31 = j + v33;
    v29 = v34;
  }
  if (v29)
  {
    *v29 = 0;
    v29[1] = 0;
    --*(_DWORD *)(v27 - 16);
    v30 = *a1;
    v34 = v29;
  }
  if (v30)
    *(_DWORD *)v30 += 2;
  *v34 = v30;
  *((_WORD *)v34 + 4) = v9;
  if (WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache)
    v36 = *(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                    - 12)
        + 1;
  else
    v36 = 1;
  *(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
            - 12) = v36;
  if (WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache)
    v37 = *(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                    - 12);
  else
    v37 = 0;
  v38 = (*(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                                 - 16)
                     + v37);
  v39 = *(unsigned int *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                        - 4);
  if (v39 > 0x400)
  {
    if (v39 > 2 * v38)
      return v9;
    goto LABEL_54;
  }
  if (3 * v39 <= 4 * v38)
LABEL_54:
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(&WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache, v34);
  return v9;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::getPropertyValueInternal@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t result;
  WTF::StringBuilder *v7;
  WTF::String *v8;
  __n128 v9;
  const WebCore::StyleProperties *v10;
  uint64_t v11;
  WTF::StringBuilder *v12;
  WTF::String *v13;
  WTF::StringBuilder *v14;
  WTF::String *v15;
  __n128 v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  _QWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;

  result = WebCore::PropertySetCSSStyleDeclaration::isExposed(a1, a2);
  if ((result & 1) == 0)
    goto LABEL_5;
  v10 = *(const WebCore::StyleProperties **)(a1 + 24);
  if ((a2 - 2) <= 0x1C8)
  {
    WebCore::StyleProperties::serializeLonghandValue((uint64_t)v10, a2, v7, v8, (WebCore *)&v19, v9);
  }
  else
  {
    v20[0] = WebCore::shorthandForProperty(a2);
    v20[1] = v11;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0;
    v31 = WebCore::ShorthandSerializer::commonSerializationChecks((uint64_t)v20, v10, v12, v13, (__n128)0);
    WebCore::ShorthandSerializer::serialize((WebCore::ShorthandSerializer *)v20, v14, v15, (WebCore::ShorthandSerializer *)&v19, v16);
    WebCore::ShorthandSerializer::~ShorthandSerializer((WebCore::ShorthandSerializer *)v20, v17);
  }
  result = (uint64_t)v19;
  if (v19)
  {
    if (*((_DWORD *)v19 + 1))
    {
      *a3 = v19;
    }
    else
    {
      *a3 = 0;
      v19 = 0;
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
LABEL_5:
    *a3 = 0;
  }
  return result;
}

uint64_t WebCore::PropertySetCSSStyleDeclaration::isExposed(uint64_t a1, int a2)
{
  _BOOL8 v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  char v11;
  char v12;
  unsigned int v13;

  if (!a2)
    return 0;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 184))(&v9);
  if (v12)
    v3 = v11 != 1;
  else
    v3 = 0;
  if (WebCore::isExposed(a2, &v13))
  {
    v5 = 1;
    if (a2 <= 193)
    {
      if (((a2 - 112) > 0x3F || ((1 << (a2 - 112)) & 0x8000000300004001) == 0)
        && a2 != 40
        && a2 != 67)
      {
        goto LABEL_14;
      }
    }
    else if (((a2 - 194) > 0x34 || ((1 << (a2 + 62)) & 0x1E002800004403) == 0)
           && a2 != 286)
    {
      goto LABEL_14;
    }
    v5 = v3;
  }
  else
  {
    v5 = 0;
  }
LABEL_14:
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v4);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v5;
}

void WebCore::StyleProperties::serializeLonghandValue(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringBuilder *a3@<X2>, WTF::String *a4@<X3>, WebCore *a5@<X8>, __n128 a6@<Q0>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  unsigned __int16 *v13;
  void *v14;
  unint64_t v15;
  WTF *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  WebCore *v20;
  WTF *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;

  v6 = *(unsigned int *)(a1 + 4);
  if ((v6 & 8) != 0)
  {
    LODWORD(v7) = *(_DWORD *)(a1 + 28);
    while (1)
    {
      LODWORD(v7) = v7 - 1;
      if ((int)v7 < 0)
        goto LABEL_18;
      if ((*(_WORD *)(*(_QWORD *)(a1 + 16) + 16 * v7) & 0x3FF) == (_DWORD)a2)
        goto LABEL_5;
    }
  }
  v7 = v6 >> 4;
  do
  {
    if (v7-- < 1)
      goto LABEL_18;
  }
  while ((*(_WORD *)(a1 + 8 + 2 * v7) & 0x3FF) != (_DWORD)a2);
  if ((_DWORD)v7 == -1)
    goto LABEL_18;
LABEL_5:
  if ((v6 & 8) != 0)
  {
    if (*(_DWORD *)(a1 + 28) <= v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1944B1318);
    }
    v8 = *(_QWORD *)(a1 + 16) + 16 * v7;
    v10 = *(_QWORD *)(v8 + 8);
  }
  else
  {
    v8 = a1 + 8 + 2 * v7;
    v9 = (unsigned int *)(a1 + 8 + ((v6 >> 3) & 0x1FFFFFFE) + 5 * v7);
    v10 = *v9 | ((unint64_t)*((unsigned __int8 *)v9 + 4) << 32);
  }
  if ((*(_WORD *)v8 & 0x400) == 0)
    goto LABEL_8;
  v20 = a5;
  v19 = a2;
  v13 = (unsigned __int16 *)v8;
  WebCore::matchingShorthandsForLonghand(*(_WORD *)v8 & 0x3FF, (uint64_t)&v21);
  v15 = ((unint64_t)*v13 >> 11) & 3;
  if (v23 <= v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1944B1334);
  }
  v16 = v21;
  v17 = *((unsigned __int16 *)v21 + 8 * v15 + 6);
  if (&v24 != (uint64_t *)v21)
  {
    v21 = 0;
    v22 = 0;
    WTF::fastFree(v16, v14);
  }
  if (v17 != 492)
  {
    a2 = v19;
    a5 = v20;
LABEL_8:
    if (!v10)
      goto LABEL_18;
    goto LABEL_9;
  }
  a2 = v19;
  a5 = v20;
  if (v10)
  {
    if (((*(unsigned __int16 *)(v10 + 4) | (*(unsigned __int8 *)(v10 + 6) << 16)) & 0x3F800) != 0
      || ((*(_WORD *)(v10 + 4) & 0x7F) == 0x50
        ? (v18 = *(unsigned __int16 *)(v10 + 8) - 16 >= 0x1A)
        : (v18 = 1),
          v18))
    {
LABEL_9:
      *(_DWORD *)v10 += 2;
      WebCore::serializeLonghandValue(a2, v10, a3, a4, a5, a6);
      if (*(_DWORD *)v10 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v10, v11);
      else
        *(_DWORD *)v10 -= 2;
      return;
    }
  }
LABEL_18:
  *(_QWORD *)a5 = 0;
}

void WebCore::CSSComputedStyleDeclaration::getPropertyValue(WebCore::ShorthandSerializer *a1, uint64_t a2, uint64_t a3)
{
  WTF::StringBuilder *v4;
  WTF::String *v5;
  __n128 v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v9;
  char v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  _DWORD *v16;
  char v17;
  char v18;

  if (*(_BYTE *)(a2 + 64))
    goto LABEL_18;
  if ((a3 - 459) <= 0x5E && (a3 - 495) <= 5 && (_DWORD)a3 != 496)
  {
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_BYTE *)(a2 + 65);
    if (v9)
      *(_DWORD *)(v9 + 24) += 2;
    v14 = (_DWORD *)v9;
    LOBYTE(v15) = 0;
    v17 = 0;
    if (*(_BYTE *)(a2 + 56))
    {
      v15 = *(_DWORD *)(a2 + 40);
      v11 = *(_DWORD **)(a2 + 48);
      if (v11)
        *v11 += 2;
      v16 = v11;
      v17 = 1;
    }
    v18 = v10;
    WebCore::serializeShorthandValue((uint64_t)&v14, a3, a1);
    WebCore::ComputedStyleExtractor::~ComputedStyleExtractor((WebCore::ComputedStyleExtractor *)&v14, v12);
    return;
  }
  WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue((unsigned int *)&v14, a2, a3);
  if (!v14)
  {
LABEL_18:
    v13 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v13 += 2;
    *(_QWORD *)a1 = v13;
  }
  else
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a1, (uint64_t)v14, v4, v5, v6);
    v8 = v14;
    v14 = 0;
    if (v8)
    {
      if (*v8 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v7);
      else
        *v8 -= 2;
    }
  }
}

void WebCore::CSSPrimitiveValue::customCSSText(WebCore::CSSPrimitiveValue *this@<X0>, const WTF::String *a2@<X1>, WTF::StringBuilder *a3@<X2>, WebCore *a4@<X8>, __n128 a5@<Q0>)
{
  __int16 v7;
  int v8;
  unint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::CSSPrimitiveValue *v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  WebCore *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  WebCore::CSSPrimitiveValue **v31;
  WebCore::CSSPrimitiveValue *v32;
  WebCore::CSSPrimitiveValue **v33;
  int v34;
  WebCore::CSSPrimitiveValue *v35;
  WTF::StringImpl *v36;
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52[2];
  int v53;
  char v54;

  v7 = *((_WORD *)this + 2);
  v8 = v7 & 0x7F;
  if (v8 == 80)
  {
    v9 = *((unsigned __int16 *)this + 4);
    if (v9 > 0x48D)
    {
      v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    }
    else
    {
      {
        bzero(&WebCore::nameStringForSerialization(WebCore::CSSValueID)::strings, 0x2470uLL);
      }
      v10 = (WTF::StringImpl **)((char *)&WebCore::nameStringForSerialization(WebCore::CSSValueID)::strings + 8 * v9);
      v11 = *v10;
      if (*v10)
        goto LABEL_6;
      if ((unint64_t)*(&WebCore::valueListForSerialization + 2 * v9 + 1) <= 1)
      {
        v11 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
        *(_DWORD *)v11 = *(_DWORD *)*MEMORY[0x1E0CBF3B8] + 2;
        *v10 = v11;
LABEL_6:
        *(_DWORD *)v11 += 2;
LABEL_7:
        *(_QWORD *)a4 = v11;
        return;
      }
      WTF::AtomStringImpl::add();
      v11 = v52[0];
      v50 = *v10;
      *v10 = v52[0];
      if (!v50)
      {
LABEL_17:
        if (!v11)
          goto LABEL_7;
        goto LABEL_6;
      }
      if (*(_DWORD *)v50 == 2)
        WTF::StringImpl::destroy(v50, v49);
      else
        *(_DWORD *)v50 -= 2;
    }
    v11 = *v10;
    goto LABEL_17;
  }
  if (v8 == 79)
  {
    v11 = (WTF::StringImpl *)*WebCore::nameString(*((unsigned __int16 *)this + 4));
    goto LABEL_17;
  }
  if ((v7 & 0x7F) == 0)
  {
    *(_QWORD *)a4 = 0;
    return;
  }
  if ((_MergedGlobals_161 & 1) == 0)
  {
    qword_1ECE82940 = 0;
    _MergedGlobals_161 = 1;
    v7 = *((_WORD *)this + 2);
  }
  if ((v7 & 0x80) != 0)
  {
    v11 = (WTF::StringImpl *)qword_1ECE82940;
    if (!qword_1ECE82940)
      goto LABEL_7;
    v12 = *(_DWORD *)(qword_1ECE82940 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::CSSPrimitiveValue **)(qword_1ECE82940 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::CSSPrimitiveValue **)(qword_1ECE82940 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_16;
      }
      v11 = 0;
      goto LABEL_7;
    }
LABEL_16:
    v11 = *(WTF::StringImpl **)(qword_1ECE82940 + 16 * v16 + 8);
    goto LABEL_17;
  }
  switch(v7 & 0x7F)
  {
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x3D:
    case 0x3E:
    case 0x40:
    case 0x41:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x47:
    case 0x48:
      v19 = WebCore::CSSPrimitiveValue::unitTypeString(v7 & 0x7F);
      v21 = v20;
      a5.n128_u64[0] = *((_QWORD *)this + 1);
      v22 = a4;
      v23 = v19;
      v24 = v21;
      goto LABEL_25;
    case 2:
      WebCore::CSSPrimitiveValue::formatIntegerValue(a4, *((double *)this + 1));
      break;
    case 0x13:
      a5.n128_u64[0] = *((_QWORD *)this + 1);
      v23 = (const char *)&str_1_37;
      v22 = a4;
      v24 = 1;
      goto LABEL_25;
    case 0x14:
      v43 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      if (v43)
        *(_DWORD *)v43 += 2;
      v52[0] = v43;
      WebCore::serializeString((WebCore *)v52, a3, (WTF::StringImpl **)a4);
      goto LABEL_55;
    case 0x15:
      v44 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      if (v44)
        *(_DWORD *)v44 += 2;
      v52[0] = v44;
      WebCore::serializeURL((WebCore *)v52, (WTF::StringImpl **)a4);
      goto LABEL_55;
    case 0x17:
      WTF::makeString<WTF::ASCIILiteral,WTF::StringImpl *,char>((uint64_t)a4, *((_QWORD *)this + 1));
      break;
    case 0x18:
      WebCore::serializationForCSS((WebCore::CSSPrimitiveValue *)((char *)this + 8), a4);
      break;
    case 0x3F:
      v52[0] = 0;
      v52[1] = 0;
      v53 = 0;
      v54 = 1;
      v45 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      if (v45)
        *(_DWORD *)v45 += 2;
      v51 = v45;
      WebCore::serializeIdentifier((WTF::String *)&v51, (const WTF::String *)v52, 0);
      v47 = v51;
      v51 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v46);
        else
          *(_DWORD *)v47 -= 2;
      }
      WTF::StringBuilder::toString((WTF::StringBuilder *)v52, a4);
      WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v52, v48);
      break;
    case 0x49:
      _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a4);
      break;
    case 0x4C:
      WebCore::CSSAnchorValue::customCSSText(*((WebCore::CSSAnchorValue **)this + 1), a4);
      break;
    case 0x4D:
      v41 = (WTF::StringImpl *)*((_QWORD *)this + 1);
      if (v41)
        *(_DWORD *)v41 += 2;
      v52[0] = v41;
      WebCore::serializeFontFamily((unsigned __int8 ***)v52, a2, (WTF::StringImpl **)a4);
LABEL_55:
      v42 = v52[0];
      v52[0] = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, a2);
        else
          *(_DWORD *)v42 -= 2;
      }
      break;
    case 0x4E:
      WebCore::CSSUnresolvedColor::serializationForCSS(*((WebCore::CSSUnresolvedColor **)this + 1));
      break;
    case 0x51:
      a5.n128_u64[0] = *((_QWORD *)this + 1);
      v23 = "em";
      v22 = a4;
      v24 = 3;
LABEL_25:
      WebCore::CSSPrimitiveValue::formatNumberValue(v22, v23, v24, a5);
      break;
    default:
      *(_QWORD *)a4 = 0;
      break;
  }
  *((_WORD *)this + 2) |= 0x80u;
  v25 = qword_1ECE82940;
  if (qword_1ECE82940
    || (WTF::HashTable<WebCore::CSSPrimitiveValue const*,WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashMap<WebCore::CSSPrimitiveValue const*,WTF::String,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>>::expand(),
        (v25 = qword_1ECE82940) != 0))
  {
    v26 = *(_DWORD *)(v25 - 8);
  }
  else
  {
    v26 = 0;
  }
  v27 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
  v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
  v30 = v26 & ((v29 >> 31) ^ v29);
  v31 = (WebCore::CSSPrimitiveValue **)(v25 + 16 * v30);
  v32 = *v31;
  if (!*v31)
  {
LABEL_36:
    *v31 = this;
    v35 = *(WebCore::CSSPrimitiveValue **)a4;
    if (*(_QWORD *)a4)
      *(_DWORD *)v35 += 2;
    v36 = v31[1];
    v31[1] = v35;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, a2);
      else
        *(_DWORD *)v36 -= 2;
    }
    if (qword_1ECE82940)
      v37 = *(_DWORD *)(qword_1ECE82940 - 12) + 1;
    else
      v37 = 1;
    *(_DWORD *)(qword_1ECE82940 - 12) = v37;
    if (qword_1ECE82940)
      v38 = *(_DWORD *)(qword_1ECE82940 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(qword_1ECE82940 - 16) + v38);
    v40 = *(unsigned int *)(qword_1ECE82940 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39)
        return;
    }
    else if (3 * v40 > 4 * v39)
    {
      return;
    }
    WTF::HashTable<WebCore::CSSPrimitiveValue const*,WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSPrimitiveValue const*,WTF::String>>,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashMap<WebCore::CSSPrimitiveValue const*,WTF::String,WTF::DefaultHash<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSPrimitiveValue const*>>::expand();
    return;
  }
  v33 = 0;
  v34 = 1;
  while (v32 != this)
  {
    if (v32 == (WebCore::CSSPrimitiveValue *)-1)
      v33 = v31;
    v30 = (v30 + v34) & v26;
    v31 = (WebCore::CSSPrimitiveValue **)(v25 + 16 * v30);
    v32 = *v31;
    ++v34;
    if (!*v31)
    {
      if (v33)
      {
        *v33 = 0;
        v33[1] = 0;
        --*(_DWORD *)(v25 - 16);
        v31 = v33;
      }
      goto LABEL_36;
    }
  }
}

uint64_t WebCore::isExposedNotInvalidAndNotInternal(int a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  result = 1;
  if (a1 <= 202)
  {
    if (a1 <= 111)
    {
      if (a1 > 53)
      {
        v10 = (a3 >> 20) & 1;
        v11 = (a3 >> 7) & 1;
        v12 = (a3 >> 10) & 1;
        if (a1 != 109)
          LODWORD(v12) = 1;
        if (a1 != 102)
          LODWORD(v11) = v12;
        if (a1 == 70)
          LODWORD(v11) = (a3 >> 20) & 1;
        if (a1 != 69)
          LODWORD(v10) = 1;
        if (a1 == 54)
          LODWORD(v10) = (a5 >> 55) & 1;
        if (a1 <= 69)
          return v10;
        else
          return v11;
      }
      else
      {
        switch(a1)
        {
          case '"':
            result = (a8 >> 44) & 1;
            break;
          case '#':
          case '$':
          case ')':
          case '*':
          case '+':
          case ',':
            return result;
          case '%':
          case '&':
            result = (a3 >> 31) & 1;
            break;
          case '\'':
            result = (a2 >> 7) & 1;
            break;
          case '(':
LABEL_21:
            result = (a3 >> 9) & 1;
            break;
          case '-':
LABEL_61:
            result = (a3 >> 5) & 1;
            break;
          default:
            v21 = a1 == 23;
            v22 = (a3 >> 13) & 1;
LABEL_71:
            if (v21)
              result = v22;
            else
              result = 1;
            break;
        }
      }
    }
    else
    {
      if (a1 <= 157)
      {
        v13 = (a3 >> 9) & 1;
        v14 = (a3 >> 11) & 1;
        v15 = (a3 >> 14) & 1;
        if (a1 != 146)
          LODWORD(v15) = 1;
        if (a1 != 113)
          LODWORD(v14) = v15;
        v16 = a1 == 112;
        goto LABEL_66;
      }
      switch(a1)
      {
        case 172:
          result = (a5 >> 4) & 1;
          break;
        case 173:
        case 174:
        case 176:
        case 177:
        case 183:
        case 184:
        case 185:
        case 186:
        case 187:
        case 188:
        case 189:
          return result;
        case 175:
          goto LABEL_21;
        case 178:
        case 179:
        case 180:
        case 181:
        case 182:
          result = (a3 >> 17) & 1;
          break;
        case 190:
          result = (a3 >> 22) & 1;
          break;
        default:
          v13 = (a3 >> 16) & 1;
          v14 = (a3 >> 9) & 1;
          if (a1 != 195)
            LODWORD(v14) = 1;
          v16 = a1 == 158;
          goto LABEL_66;
      }
    }
  }
  else
  {
    if (a1 > 263)
    {
      if (a1 > 350)
      {
        if (a1 > 511)
        {
          v17 = (a5 >> 55) & 1;
          if (a1 == 539)
            v18 = (a5 >> 55) & 1;
          else
            v18 = 1;
          if (a1 != 532)
            LODWORD(v17) = v18;
          v19 = (a3 >> 17) & 1;
          v20 = (a5 >> 23) & 1;
          if (a1 != 515)
            LODWORD(v20) = 1;
          if (a1 != 512)
            LODWORD(v19) = v20;
          if (a1 <= 531)
            return v19;
          else
            return v17;
        }
        else
        {
          switch(a1)
          {
            case 419:
            case 420:
            case 421:
            case 422:
              result = (a5 >> 23) & 1;
              break;
            default:
              v21 = a1 == 351;
              v22 = (a3 >> 36) & 1;
              goto LABEL_71;
          }
        }
        return result;
      }
      if (a1 > 288)
      {
        switch(a1)
        {
          case 289:
          case 290:
          case 291:
            goto LABEL_19;
          case 292:
            result = (a7 >> 10) & 1;
            break;
          default:
            v13 = (a2 >> 54) & 1;
            v14 = (a8 >> 38) & 1;
            if (a1 != 338)
              LODWORD(v14) = 1;
            v16 = a1 == 301;
            goto LABEL_66;
        }
        return result;
      }
      v13 = (a3 >> 30) & 1;
      v14 = (a3 >> 34) & 1;
      if (a1 != 271)
        LODWORD(v14) = 1;
      v16 = a1 == 264;
LABEL_66:
      if (v16)
        return v13;
      else
        return v14;
    }
    if (a1 > 228)
    {
      switch(a1)
      {
        case 243:
        case 244:
        case 246:
          goto LABEL_21;
        case 245:
        case 247:
        case 248:
        case 249:
        case 250:
        case 251:
          return result;
        case 252:
        case 253:
          result = (a3 >> 28) & 1;
          break;
        default:
          v13 = (a3 >> 12) & 1;
          v14 = (a3 >> 29) & 1;
          if (a1 != 262)
            LODWORD(v14) = 1;
          v16 = a1 == 229;
          goto LABEL_66;
      }
    }
    else
    {
      switch(a1)
      {
        case 203:
          goto LABEL_61;
        case 204:
        case 208:
          goto LABEL_21;
        case 215:
          result = (a2 >> 1) & 1;
          break;
        case 219:
        case 220:
LABEL_19:
          result = (a5 >> 55) & 1;
          break;
        case 221:
          result = (a3 >> 23) & 1;
          break;
        case 222:
          result = (a3 >> 24) & 1;
          break;
        case 223:
          result = (a3 >> 25) & 1;
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

void WebCore::CSSComputedStyleDeclaration::getPropertyValueInternal(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore::ShorthandSerializer *a3@<X8>)
{
  WebCore::CSSComputedStyleDeclaration::getPropertyValue(a3, a1, a2);
}

void WebCore::serializeLonghandValue(uint64_t a1@<X0>, uint64_t a2@<X1>, WTF::StringBuilder *a3@<X2>, WTF::String *a4@<X3>, WebCore *a5@<X8>, __n128 a6@<Q0>)
{
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  _QWORD v22[2];
  int v23;
  char v24;

  if (((a1 - 183) <= 0x3A && ((1 << (a1 + 73)) & 0x404000000000001) != 0
     || (_DWORD)a1 == 125
     || (_DWORD)a1 == 115)
    && ((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F800) == 0
    && WebCore::CSSPrimitiveValue::primitiveType((WebCore::CSSPrimitiveValue *)a2) == 3)
  {
    WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)a2);
    WTF::makeString<double>(a5);
  }
  else if (((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F800) == 0x1D800
         && (*(_WORD *)(a2 + 4) & 0x600) == 0x200)
  {
    v22[0] = 0;
    v22[1] = 0;
    v23 = 0;
    v24 = 1;
    v9 = *(_DWORD *)(a2 + 8);
    if (v9)
    {
      WebCore::serializeLonghandValue(&v21, a1, *(_QWORD *)(a2 + 16));
      WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>((WTF::StringBuilder *)v22, (uint64_t)"", 1, (uint64_t)v21);
      v11 = v21;
      v21 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v10);
        else
          *(_DWORD *)v11 -= 2;
      }
      if (v9 != 1)
      {
        v15 = 1;
        v16 = 1;
        do
        {
          if (v16 > 3)
          {
            v17 = v15;
            if (*(_DWORD *)(a2 + 8) <= v16)
            {
              __break(0xC471u);
              JUMPOUT(0x1944B1F58);
            }
            v18 = (_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * (v15 - 4));
          }
          else
          {
            v17 = v15;
            v18 = (_QWORD *)(a2 + 16 + 8 * v15);
          }
          WebCore::serializeLonghandValue(&v21, a1, *v18);
          WTF::StringBuilder::append<WTF::ASCIILiteral,WTF::String>((WTF::StringBuilder *)v22, (uint64_t)", ", 3, (uint64_t)v21);
          v20 = v21;
          v21 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v19);
            else
              *(_DWORD *)v20 -= 2;
          }
          v16 = v17 + 1;
          v15 = (v17 + 1);
        }
        while (v9 != v17 + 1);
      }
    }
    WTF::StringBuilder::toString((WTF::StringBuilder *)v22, a5);
    WTF::StringBuilder::~StringBuilder((WTF::StringBuilder *)v22, v12);
  }
  else if ((*(_WORD *)(a2 + 4) & 0x100) != 0)
  {
    v13 = WebCore::initialValueTextForLonghand(a1);
    WTF::String::String(a5, v13, v14);
  }
  else
  {
    _ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_7cssTextEvE3__0EEDcOT_EUlRS5_E_EES4_S6_(a5, a2, a3, a4, a6);
  }
}

const char *WebCore::CSSPrimitiveValue::unitTypeString(int a1)
{
  const char *result;

  result = "cap";
  switch(a1)
  {
    case 3:
      result = "%";
      break;
    case 4:
      result = "em";
      break;
    case 5:
      result = "ex";
      break;
    case 6:
      result = "px";
      break;
    case 7:
      result = "cm";
      break;
    case 8:
      result = "mm";
      break;
    case 9:
      result = "in";
      break;
    case 10:
      result = "pt";
      break;
    case 11:
      result = "pc";
      break;
    case 12:
      result = "deg";
      break;
    case 13:
      result = "rad";
      break;
    case 14:
      result = "grad";
      break;
    case 15:
      result = "ms";
      break;
    case 16:
      result = "s";
      break;
    case 17:
      result = "hz";
      break;
    case 18:
      result = "khz";
      break;
    case 25:
      result = "vw";
      break;
    case 26:
      result = "vh";
      break;
    case 27:
      result = "vmin";
      break;
    case 28:
      result = "vmax";
      break;
    case 29:
      result = "vb";
      break;
    case 30:
      result = "vi";
      break;
    case 31:
      result = "svw";
      break;
    case 32:
      result = "svh";
      break;
    case 33:
      result = "svmin";
      break;
    case 34:
      result = "svmax";
      break;
    case 35:
      result = "svb";
      break;
    case 36:
      result = "svi";
      break;
    case 37:
      result = "lvw";
      break;
    case 38:
      result = "lvh";
      break;
    case 39:
      result = "lvmin";
      break;
    case 40:
      result = "lvmax";
      break;
    case 41:
      result = "lvb";
      break;
    case 42:
      result = "lvi";
      break;
    case 43:
      result = "dvw";
      break;
    case 44:
      result = "dvh";
      break;
    case 45:
      result = "dvmin";
      break;
    case 46:
      result = "dvmax";
      break;
    case 47:
      result = "dvb";
      break;
    case 48:
      result = "dvi";
      break;
    case 49:
      result = "cqw";
      break;
    case 50:
      result = "cqh";
      break;
    case 51:
      result = "cqi";
      break;
    case 52:
      result = "cqb";
      break;
    case 53:
      result = "cqmin";
      break;
    case 54:
      result = "cqmax";
      break;
    case 55:
      result = "dppx";
      break;
    case 56:
      result = "x";
      break;
    case 57:
      result = "dpi";
      break;
    case 58:
      result = "dpcm";
      break;
    case 59:
      result = "fr";
      break;
    case 60:
      result = "q";
      break;
    case 61:
      result = "lh";
      break;
    case 62:
      result = "rlh";
      break;
    case 64:
      result = "turn";
      break;
    case 65:
      result = "rem";
      break;
    case 66:
      result = "rex";
      break;
    case 67:
      return result;
    case 68:
      result = "rcap";
      break;
    case 69:
      result = "ch";
      break;
    case 70:
      result = "rch";
      break;
    case 71:
      result = "ic";
      break;
    case 72:
      result = "ric";
      break;
    default:
      result = (const char *)&str_1_37;
      break;
  }
  return result;
}

uint64_t WebCore::VisitedLinkStore::invalidateStylesForLink(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = this;
  v4 = *(_QWORD *)(this + 16);
  if (!v4)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = (uint64_t *)(v4 + 8 * v6);
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v4 - 4);
  v5 = (uint64_t *)(v4 + 8 * v6);
  if (!*(_DWORD *)(v4 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v16 = 0;
    v7 = *(uint64_t **)(this + 16);
    goto LABEL_44;
  }
  v15 = 8 * v6;
  v7 = *(uint64_t **)(this + 16);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v15 -= 8;
    if (!v15)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v4)
  {
    v8 = 0;
    goto LABEL_6;
  }
  v16 = *(unsigned int *)(v4 - 4);
LABEL_44:
  v8 = (uint64_t *)(v4 + 8 * v16);
LABEL_6:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v9 = v7 + 1;
      v7 = v5;
      if (v9 != v5)
      {
        v7 = v9;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v4)
    v10 = (uint64_t *)(v4 + 8 * *(unsigned int *)(v4 - 4));
  else
    v10 = 0;
  while (v7 != v10)
  {
    v12 = *v7;
    v11 = v7 + 1;
    this = WebCore::Page::invalidateStylesForLink(*(WebCore::Page **)(v12 + 8), a2);
    v13 = v5;
    if (v11 != v5)
    {
      v13 = v11;
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        if (++v13 == v5)
        {
          v13 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v13 != v8)
    {
      v7 = v13;
      if (!*(_QWORD *)(*v13 + 8))
      {
        while (1)
        {
          v14 = v7 + 1;
          v7 = v5;
          if (v14 != v5)
          {
            v7 = v14;
            while ((unint64_t)(*v7 + 1) <= 1)
            {
              if (++v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_25;
        }
        v7 = v8;
      }
    }
LABEL_25:
    ++*(_DWORD *)(v3 + 24);
  }
  return this;
}

_BYTE *WebCore::jsDocumentPrototypeFunction_createElement(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  WebCore::Document *v6;
  int32x4_t v7;
  int v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WebCore::Node *v12;
  void *v13;
  unint64_t v14;
  WebCore::Node *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSValue v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSValue v23;
  uint64_t v24;
  JSC::VM *v25;
  WTF::StringImpl *v26;
  int v27[2];
  WTF::StringImpl *v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  int v31;
  WebCore::Node *v32;
  WTF::StringImpl *v33;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 249)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "Document", "createElement");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v6 = *(WebCore::Document **)(v5 + 24);
  WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(this, *((_QWORD *)a2 + 6), (uint64_t)&v30);
  v8 = v31;
  if (v31)
  {
    v14 = 0;
LABEL_11:
    if (v8 != -1)
      ((void (*)(int *, WTF::StringImpl **))off_1E325A6F0[v8])(v27, &v30);
    return (_BYTE *)v14;
  }
  v9 = *(JSC::VM **)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  v10 = v30;
  v30 = 0;
  v26 = v10;
  WebCore::Document::createElementForBindings(v6, (const WTF::AtomString *)&v26, (uint64_t)v27, v7);
  v11 = v29;
  if (!v29)
  {
    v12 = *(WebCore::Node **)v27;
    *(_QWORD *)v27 = 0;
    v32 = v12;
    v14 = WebCore::toJSNewlyCreated((int)this, v9, (WebCore::JSDOMGlobalObject *)&v32);
    v15 = v32;
    v32 = 0;
    if (v15)
    {
      if (*((_DWORD *)v15 + 6) == 2)
      {
        if ((*((_WORD *)v15 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v15, v13);
      }
      else
      {
        *((_DWORD *)v15 + 6) -= 2;
      }
    }
LABEL_7:
    ((void (*)(WebCore::Node **, int *))off_1E3269420[v11])(&v32, v27);
    v29 = -1;
    v17 = v26;
    v26 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v8 = v31;
    goto LABEL_11;
  }
  if (v29 == 1)
  {
    v21 = (WTF::StringImpl *)LOBYTE(v27[0]);
    LOBYTE(v32) = v27[0];
    v22 = v28;
    v28 = 0;
    v33 = v22;
    if (!*((_QWORD *)v4 + 2))
    {
      v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v27[0]), (JSC::JSGlobalObject *)&v33);
      JSC::VM::throwException(v4, this, v23);
      v22 = v33;
    }
    v33 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    v14 = 0;
    goto LABEL_7;
  }
  v24 = std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::setJSCSSStyleDeclaration_propertyValueForCamelCasedIDLAttribute(v24);
}

BOOL WebCore::setJSCSSStyleDeclaration_propertyValueForCamelCasedIDLAttribute(JSC::JSGlobalObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  unsigned int i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF *v24;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  JSValue v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  char *v37;
  char v38;
  int v39;
  char *v40;
  unsigned __int16 *v41;
  char v42;
  int v43;
  char *v44;
  char v45;
  uint64_t v46;
  size_t v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  WTF::StringImpl **v53;
  unsigned int v54;
  int j;
  unsigned int v56;
  WTF::StringImpl **v57;
  WTF::StringImpl *v58;
  int v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  int v64;
  WTF *v65;
  uint64_t v66;
  _BYTE v67[40];
  uint64_t v68;
  JSC::JSGlobalObject *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v6 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSCSSStyleDeclaration::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSCSSStyleDeclaration::s_info && v9 != 0);
  }
  if (!v8)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD *)(a2 + 24);
  v65 = (WTF *)v67;
  v66 = 4;
  v67[32] = 0;
  v68 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v69 = a1;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v65;
  if (a3 == 2)
  {
    v34 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v34 += 2;
    v63 = v34;
    v64 = 0;
    goto LABEL_13;
  }
  WebCore::valueToUSVString(a1, a3, (uint64_t)&v72);
  LOBYTE(v63) = 0;
  v64 = -1;
  v13 = (int)v73;
  if ((_DWORD)v73 != -1)
  {
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **, uint64_t *))off_1E3247F70[v73])(&v70, &v63, &v72);
    v64 = v13;
    if ((_DWORD)v73 != -1)
    {
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3238AF8[v73])(&v70, &v72);
      v13 = v64;
    }
    if (v13)
    {
      v23 = 0;
LABEL_33:
      if (v13 != -1)
        ((void (*)(uint64_t *, WTF::StringImpl **))off_1E3238AF8[v13])(&v72, &v63);
      goto LABEL_35;
    }
LABEL_13:
    if (a4)
      *(_DWORD *)a4 += 2;
    v14 = v63;
    v63 = 0;
    v70 = v14;
    {
      if (WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache)
      {
        v15 = 0;
        for (i = *(_DWORD *)(a4 + 16) >> 8; ; i = v15 + v17)
        {
          v17 = i & *(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                              - 8);
          v18 = *(_QWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                          + 16 * v17);
          if (!v18)
            break;
          if (v18 != -1 && v18 == a4)
          {
            v20 = WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                + 16 * v17;
            v21 = *(unsigned __int16 *)(v20 + 8);
            if (!*(_WORD *)(v20 + 8))
              break;
            goto LABEL_25;
          }
          ++v15;
        }
      }
    }
    else
    {
      WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache = 0;
    }
    if (a4)
    {
      v35 = *(unsigned int *)(a4 + 4);
      if ((*(_BYTE *)(a4 + 16) & 4) != 0)
      {
        if ((_DWORD)v35)
        {
          v36 = *(unsigned __int8 **)(a4 + 8);
          v37 = (char *)&v72;
          do
          {
            v39 = *v36++;
            v38 = v39;
            if ((v39 - 65) <= 0x19)
            {
              v40 = v37 + 2;
              v37[1] = v38 | 0x20;
              v38 = 45;
            }
            else
            {
              v40 = v37 + 1;
            }
            *v37 = v38;
            v37 = v40;
            --v35;
          }
          while (v35);
          goto LABEL_91;
        }
      }
      else if ((_DWORD)v35)
      {
        v41 = *(unsigned __int16 **)(a4 + 8);
        v40 = (char *)&v72;
        do
        {
          v43 = *v41++;
          v42 = v43;
          if ((v43 - 65) > 0x19)
          {
            v45 = v42;
            v44 = v40;
          }
          else
          {
            v40[1] = v42 | 0x20;
            v44 = v40 + 1;
            v45 = 45;
          }
          *v40 = v45;
          v40 = v44 + 1;
          --v35;
        }
        while (v35);
        goto LABEL_91;
      }
    }
    v40 = (char *)&v72;
LABEL_91:
    v46 = v40 - (char *)&v72;
    v47 = v40 - &v72 - 1;
    if (v47 > 0x21
      || (v48 = WebCore::CSSPropertyNamesHash::hash((WebCore::CSSPropertyNamesHash *)&v72, (const char *)(v40 - (char *)&v72)), v48 > 0x1E3E)|| (__int16)WebCore::lookup[v48] < 0)
    {
      v21 = 0;
    }
    else
    {
      v49 = WebCore::lookup[v48];
      v50 = (&WebCore::wordlist)[2 * v49];
      if (v72 == *v50
        && !strncmp((const char *)&v72 + 1, v50 + 1, v47)
        && !v50[v46])
      {
        v21 = LOWORD((&WebCore::wordlist)[2 * v49 + 1]);
      }
      else
      {
        v21 = 0;
      }
    }
    v51 = WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache;
    if (WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(&WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache, 0), (v51 = WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache) != 0))
    {
      v52 = *(_DWORD *)(v51 - 8);
    }
    else
    {
      v52 = 0;
    }
    v53 = 0;
    v54 = *(_DWORD *)(a4 + 16) >> 8;
    for (j = 1; ; ++j)
    {
      v56 = v54 & v52;
      v57 = (WTF::StringImpl **)(v51 + 16 * v56);
      v58 = *v57;
      if (!*v57)
        break;
      if (v58 != (WTF::StringImpl *)-1)
      {
        v57 = v53;
        if (v58 == (WTF::StringImpl *)a4)
          goto LABEL_25;
      }
      v54 = j + v56;
      v53 = v57;
    }
    if (v53)
    {
      *v53 = 0;
      v53[1] = 0;
      --*(_DWORD *)(v51 - 16);
      v57 = v53;
    }
    if (a4)
      *(_DWORD *)a4 += 2;
    *v57 = (WTF::StringImpl *)a4;
    *((_WORD *)v57 + 4) = v21;
    if (WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache)
      v59 = *(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                      - 12)
          + 1;
    else
      v59 = 1;
    *(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
              - 12) = v59;
    if (WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache)
      v60 = *(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                      - 12);
    else
      v60 = 0;
    v61 = (*(_DWORD *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                                   - 16)
                       + v60);
    v62 = *(unsigned int *)(WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache
                          - 4);
    if (v62 > 0x400)
    {
      if (v62 > 2 * v61)
        goto LABEL_25;
    }
    else if (3 * v62 > 4 * v61)
    {
LABEL_25:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v11
                                                                                                  + 152))(&v72, v11, v21, &v70, 0);
      v22 = v70;
      v70 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v12);
        else
          *(_DWORD *)v22 -= 2;
      }
      if (a4)
      {
        if (*(_DWORD *)a4 == 2)
          WTF::StringImpl::destroy((WTF::StringImpl *)a4, v12);
        else
          *(_DWORD *)a4 -= 2;
      }
      if (v74)
      {
        v12 = (WTF::StringImpl *)v72;
        LOBYTE(v70) = v72;
        v31 = v73;
        v73 = 0;
        v71 = v31;
        if (!*((_QWORD *)v6 + 2))
        {
          v32.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v72, (JSC::JSGlobalObject *)&v71);
          JSC::VM::throwException(v6, a1, v32);
          v31 = v71;
        }
        v71 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v12);
          else
            *(_DWORD *)v31 -= 2;
        }
        if (v74)
        {
          v33 = v73;
          v73 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v12);
            else
              *(_DWORD *)v33 -= 2;
          }
        }
      }
      v23 = 1;
      v13 = v64;
      goto LABEL_33;
    }
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::CSSPropertyID>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::CSSPropertyID,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(&WebCore::lookupCSSPropertyFromIDLAttribute<(WebCore::CSSPropertyLookupMode)1>(WTF::AtomString const&)::cache, v57);
    goto LABEL_25;
  }
  v23 = 0;
LABEL_35:
  if (HIDWORD(v66))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v65, v69);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v68;
    if (HIDWORD(v66))
    {
      v28 = v65;
      v29 = 8 * HIDWORD(v66);
      do
      {
        v30 = *(_QWORD *)v28;
        *(_QWORD *)v28 = 0;
        if (v30)
        {
          if (*(_DWORD *)(v30 + 24) == 2)
          {
            if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v30, v12);
          }
          else
          {
            *(_DWORD *)(v30 + 24) -= 2;
          }
        }
        v28 = (WTF *)((char *)v28 + 8);
        v29 -= 8;
      }
      while (v29);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v68;
  }
  v24 = v65;
  if (v67 != (_BYTE *)v65 && v65 != 0)
  {
    v65 = 0;
    LODWORD(v66) = 0;
    WTF::fastFree(v24, v12);
  }
  return v23;
}

WTF::StringImpl *WebCore::PropertySetCSSStyleDeclaration::setPropertyInternal@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  WTF::String *v10;
  __n128 v11;
  _BOOL4 isOldValueRequested;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::String *v20;
  __n128 v21;
  _BOOL4 v22;
  int v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  _QWORD *v33;
  _DWORD *v34;
  _BOOL4 v35;
  void *v36;
  WebCore::MutationObserver **v37;
  WTF *v38;
  WebCore::MutationObserver ***v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  void (*v43)(_QWORD *, uint64_t);
  WebCore::Node *v44;
  WTF::StringImpl *result;
  WebCore::MutationObserver ***v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  WTF::StringImpl *Attribute;
  _WORD *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WebCore::MutationObserver ***v64;
  WTF::StringImpl *v65;
  WTF::StringImpl **v66;
  const WTF::AtomString *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  char v70;
  unsigned int v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WebCore::Node *v74;
  __int16 v75;
  WTF::StringImpl *v76[5];
  WTF::StringImpl *v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81[2];

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v72 = 0;
  v73 = 0;
  if (v8)
    *(_DWORD *)(v8 + 24) += 2;
  v74 = (WebCore::Node *)v8;
  v75 = 0;
  if (WebCore::StyleAttributeMutationScope::s_scopeCount++)
    goto LABEL_13;
  WebCore::StyleAttributeMutationScope::s_currentScope = (uint64_t)&v72;
  if (!v8)
    goto LABEL_13;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 3364) & 2) != 0)
  {
    WebCore::Node::registeredMutationObservers(v8, 2, (uint64_t)&WebCore::HTMLNames::styleAttr, v76);
    v37 = (WebCore::MutationObserver **)v76[0];
    if (v76[0])
    {
      if (*((_DWORD *)v76[0] - 3))
      {
        v38 = (WTF *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v38 = 0;
        v63 = v76[0];
        v76[0] = 0;
        *(_QWORD *)v38 = v63;
        *((_BYTE *)v38 + 8) = 32;
        v37 = (WebCore::MutationObserver **)v76[0];
        if (!v76[0])
          goto LABEL_49;
      }
      else
      {
        v38 = 0;
      }
      WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(v37, v36);
    }
    else
    {
      v38 = 0;
    }
LABEL_49:
    v39 = (WebCore::MutationObserver ***)v72;
    v72 = v38;
    if (v39)
    {
      if (*v39)
      {
        v64 = v39;
        WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(*v39, v36);
        v39 = v64;
      }
      WTF::fastFree((WTF *)v39, v36);
      v38 = v72;
    }
    if (v38)
      isOldValueRequested = WebCore::MutationObserverInterestGroup::isOldValueRequested(v38);
    else
      isOldValueRequested = 0;
    goto LABEL_7;
  }
  isOldValueRequested = 0;
  v72 = 0;
LABEL_7:
  v14 = *((_QWORD *)v74 + 9);
  v16 = (v14 & 0x3000000000000000) == 0x2000000000000000;
  v15 = v14 & 0xFFFFFFFFFFFFLL;
  v16 = !v16 || v15 == 0;
  if (!v16)
  {
    v47 = *(_QWORD *)(v15 + 96);
    if (v47)
    {
      v48 = *(_QWORD *)(v47 + 8);
      v49 = *(_QWORD *)(v48 + 136);
      if (v49)
      {
        v50 = *(_DWORD *)(v48 + 144);
        v51 = v50 - 1;
        v52 = *(_DWORD *)(v48 + 152);
        v53 = *(_QWORD *)(WebCore::HTMLNames::styleAttr + 24);
        v54 = *(_DWORD *)(v53 + 16);
        v55 = (v52 ^ (v54 >> 8)) & (v50 - 1);
        v56 = *(_QWORD *)(v49 + 8 * v55);
        if (v56)
        {
          v57 = v54 >> 8;
          v58 = -1;
          do
          {
            v59 = *(_DWORD *)(v56 + 16);
            v10 = (WTF::String *)(v55 + v50);
            v9 = (v10 - ((v52 ^ (v59 >> 8)) & v51)) & v51;
            if (++v58 > v9)
              break;
            if (v56 == v53 && v59 >> 8 == v57)
            {
              LOBYTE(v75) = 1;
              goto LABEL_98;
            }
            v55 = (v55 + 1) & v51;
            v56 = *(_QWORD *)(v49 + 8 * v55);
          }
          while (v56);
        }
      }
    }
  }
  if (isOldValueRequested)
  {
LABEL_98:
    Attribute = (WTF::StringImpl *)WebCore::Element::getAttribute(v74, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v9, v10, v11);
    WTF::AtomString::operator=(&v73, Attribute);
  }
LABEL_13:
  v17 = (*(uint64_t (**)(_QWORD *))(*a1 + 192))(a1);
  if ((_DWORD)a2 && v17)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a1 + 184))(v76, a1);
    v22 = v79 && v78 != 1;
    if (WebCore::isExposed(a2, &v80))
    {
      v23 = 1;
      if ((int)a2 <= 111)
      {
        if ((_DWORD)a2 == 40 || (_DWORD)a2 == 67)
LABEL_20:
          v23 = v22;
      }
      else
      {
        switch((int)a2)
        {
          case 112:
          case 126:
          case 144:
          case 145:
          case 175:
          case 194:
          case 195:
          case 204:
          case 208:
          case 229:
          case 231:
          case 243:
          case 244:
          case 245:
          case 246:
            goto LABEL_20;
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 123:
          case 124:
          case 125:
          case 127:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 205:
          case 206:
          case 207:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 230:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
            break;
          default:
            if ((_DWORD)a2 == 286)
              goto LABEL_20;
            break;
        }
      }
    }
    else
    {
      v23 = 0;
    }
    v24 = v77;
    v77 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v18);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v76[0];
    v76[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v18);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v23)
    {
      v26 = a1[3];
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a1 + 184))(&v68, a1);
      if ((WebCore::isExposed(a2, &v71) & 1) != 0 || WebCore::isInternal(a2))
      {
        if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
        {
          v70 = *(_BYTE *)(v26 + 4) & 7;
          v35 = WebCore::CSSParser::parseValue(v26, a2) == 0;
LABEL_57:
          v41 = v69;
          v69 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v27);
            else
              *(_DWORD *)v41 -= 2;
          }
          v42 = v68;
          v68 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v27);
            else
              *(_DWORD *)v42 -= 2;
          }
          v43 = *(void (**)(_QWORD *, uint64_t))(*a1 + 200);
          if (v35)
          {
            v43(a1, 2);
            HIBYTE(v75) = 1;
          }
          else
          {
            v43(a1, 0);
          }
          goto LABEL_65;
        }
        if ((a2 - 2) > 0x1C8)
        {
          v40 = WebCore::shorthandForProperty(a2);
          if (*(_DWORD *)(v26 + 28))
          {
            v81[0] = 0;
            if ((_DWORD)v27)
            {
              v61 = (_WORD *)v40;
              v62 = 2 * v27;
              do
              {
                WTF::HashTable<WebCore::CSSPropertyID,WebCore::CSSPropertyID,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>,WTF::HashTraits<WebCore::CSSPropertyID>>::add(v81, v61++, (uint64_t)v76);
                v62 -= 2;
              }
              while (v62);
            }
            v76[0] = (WTF::StringImpl *)v81;
            v35 = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::MutableStyleProperties::removeProperties(std::span<WebCore::CSSPropertyID const,18446744073709551615ul>)::$_0>(v26 + 16, (uint64_t **)v76) != 0;
            if (v81[0])
              WTF::fastFree((WTF *)(v81[0] - 16), v27);
            goto LABEL_57;
          }
        }
        else
        {
          v28 = *(_QWORD *)(v26 + 16);
          v29 = *(_DWORD *)(v26 + 28);
          v30 = v29 - 1;
          while ((v30 & 0x80000000) == 0)
          {
            v31 = v30;
            v32 = *(_WORD *)(v28 + 16 * v30--) & 0x3FF;
            if (v32 == (_DWORD)a2)
            {
              v33 = (_QWORD *)(v28 + 16 * v31);
              v34 = (_DWORD *)v33[1];
              v33[1] = 0;
              if (v34)
              {
                if (*v34 == 2)
                {
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v34, v27);
                  v29 = *(_DWORD *)(v26 + 28);
                }
                else
                {
                  *v34 -= 2;
                }
              }
              memmove(v33, v33 + 2, *(_QWORD *)(v26 + 16) + 16 * v29 - (_QWORD)(v33 + 2));
              --*(_DWORD *)(v26 + 28);
              v35 = 1;
              goto LABEL_57;
            }
          }
        }
      }
      v35 = 0;
      goto LABEL_57;
    }
  }
LABEL_65:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (!--WebCore::StyleAttributeMutationScope::s_scopeCount)
  {
    WebCore::StyleAttributeMutationScope::s_currentScope = 0;
    if (HIBYTE(v75))
    {
      if (!v74)
      {
        v74 = 0;
        goto LABEL_74;
      }
      if (v72)
      {
        WebCore::MutationRecord::createAttributes((uint64_t)v74, (uint64_t)&WebCore::HTMLNames::styleAttr, (_DWORD **)&v73, (uint64_t *)v76);
        WebCore::MutationObserverInterestGroup::enqueueMutationRecord((uint64_t *)v72, v76);
        v65 = v76[0];
        v76[0] = 0;
        if (v65)
        {
          if (*((_DWORD *)v65 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v65 + 8))(v65);
          else
            --*((_DWORD *)v65 + 2);
        }
      }
      if ((_BYTE)v75)
      {
        v66 = (WTF::StringImpl **)WebCore::Element::getAttribute(v74, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v19, v20, v21);
        WebCore::CustomElementReactionQueue::enqueueAttributeChangedCallbackIfNeeded(v74, (WTF::StringImpl ***)&WebCore::HTMLNames::styleAttr, &v73, v66, v67);
      }
    }
  }
  v44 = v74;
  v74 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 2)
    {
      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v44, v18);
    }
    else
    {
      *((_DWORD *)v44 + 6) -= 2;
    }
  }
LABEL_74:
  result = v73;
  v73 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  v46 = (WebCore::MutationObserver ***)v72;
  v72 = 0;
  if (v46)
  {
    if (*v46)
      WTF::HashTable<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>>>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashMap<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::OptionSet<WebCore::MutationObserverOptionType>,WTF::DefaultHash<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::OptionSet<WebCore::MutationObserverOptionType>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::deallocateTable(*v46, v18);
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v46, v18);
  }
  return result;
}

WebCore::CSSParserContext *WebCore::InlineCSSStyleDeclaration::cssParserContext@<X0>(WebCore::InlineCSSStyleDeclaration *this@<X0>, WebCore::CSSParserContext *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::CSSParserContext *result;

  v4 = *((_QWORD *)this + 5);
  if (!v4)
    return WebCore::PropertySetCSSStyleDeclaration::cssParserContext(this, (uint64_t)a2);
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    return WebCore::PropertySetCSSStyleDeclaration::cssParserContext(this, (uint64_t)a2);
  result = WebCore::CSSParserContext::CSSParserContext(a2, *(const WebCore::Document **)(*(_QWORD *)(v5 + 40) + 8));
  *((_BYTE *)result + 48) = *(_BYTE *)(*((_QWORD *)this + 3) + 4) & 7;
  return result;
}

void WebCore::InlineCSSStyleDeclaration::didMutate(uint64_t a1, uint64_t a2, __n128 a3, uint64_t a4, WTF::String *a5)
{
  uint64_t AssignedSlot;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int *v15;
  unint64_t v16;
  int v17;
  uint64_t (*v18)();
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  _QWORD *v34;
  BOOL v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  WebCore::Element *v39;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  __int16 v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::InspectorDOMAgent *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const WebCore::CSSSelector *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v77;
  WebCore::StyledElement *v78;
  WTF *v79;
  uint64_t v80;
  WebCore::StyleProperties *v81;
  const WTF::AtomString *v82;
  void *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF *v87;
  int v88;
  unsigned int v89;
  uint64_t v90;

  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 1)
    {
      v77 = *(_QWORD *)(a1 + 40);
      if (v77)
      {
        v78 = *(WebCore::StyledElement **)(v77 + 8);
        if (v78)
        {
          WebCore::StyledElement::dirtyStyleAttribute(v78);
          return;
        }
      }
    }
    AssignedSlot = *(_QWORD *)(a1 + 32);
    if (AssignedSlot)
    {
      *(_QWORD *)(a1 + 32) = 0;
      AssignedSlot = WTF::HashTable<WebCore::CSSValue *,WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashMap<WebCore::CSSValue *,WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebCore::CSSValue *>,WTF::HashTraits<WebCore::CSSValue *>,WTF::HashTraits<WTF::WeakPtr<WebCore::DeprecatedCSSOMValue,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::CSSValue *>>::deallocateTable(AssignedSlot, (void *)a2);
    }
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 104);
        if (!v9)
          goto LABEL_30;
        v10 = *(_QWORD *)(v9 + 8);
        if (!v10)
          goto LABEL_30;
        v11 = *(unsigned int *)(v10 + 4);
        if ((v11 & 8) != 0)
        {
          LODWORD(v12) = *(_DWORD *)(v10 + 28);
          while (1)
          {
            LODWORD(v12) = v12 - 1;
            if ((int)v12 < 0)
              goto LABEL_27;
            if ((*(_WORD *)(*(_QWORD *)(v10 + 16) + 16 * v12) & 0x3FF) == 0x15C)
              goto LABEL_13;
          }
        }
        v12 = v11 >> 4;
        do
        {
          if (v12-- < 1)
            goto LABEL_27;
        }
        while ((*(_WORD *)(v10 + 8 + 2 * v12) & 0x3FF) != 0x15C);
        if ((_DWORD)v12 == -1)
          goto LABEL_27;
LABEL_13:
        if ((v11 & 8) != 0)
        {
          if (*(_DWORD *)(v10 + 28) <= v12)
          {
            __break(0xC471u);
            goto LABEL_176;
          }
          v14 = (unsigned __int16 *)(*(_QWORD *)(v10 + 16) + 16 * v12);
          v16 = *((_QWORD *)v14 + 1);
        }
        else
        {
          v13 = v10 + 8;
          v14 = (unsigned __int16 *)(v13 + 2 * v12);
          v15 = (unsigned int *)(v13 + ((v11 >> 3) & 0x1FFFFFFE) + 5 * v12);
          v16 = *v15 | ((unint64_t)*((unsigned __int8 *)v15 + 4) << 32);
        }
        if ((*v14 & 0x400) == 0)
          goto LABEL_16;
        WebCore::matchingShorthandsForLonghand(*v14 & 0x3FF, (uint64_t)&v87);
        v74 = ((unint64_t)*v14 >> 11) & 3;
        if (v89 > v74)
        {
          AssignedSlot = (uint64_t)v87;
          v75 = *((unsigned __int16 *)v87 + 8 * v74 + 6);
          if (&v90 != (uint64_t *)v87)
          {
            v87 = 0;
            v88 = 0;
            AssignedSlot = WTF::fastFree((WTF *)AssignedSlot, (void *)a2);
          }
          if (v75 == 492)
          {
            if (v16)
            {
              if (((*(unsigned __int16 *)(v16 + 4) | (*(unsigned __int8 *)(v16 + 6) << 16)) & 0x3F800) != 0)
                goto LABEL_17;
              if ((*(_WORD *)(v16 + 4) & 0x7F) != 0x50 || *(unsigned __int16 *)(v16 + 8) - 16 >= 0x1A)
                goto LABEL_17;
            }
            goto LABEL_27;
          }
LABEL_16:
          if (v16)
          {
LABEL_17:
            v17 = *(_DWORD *)v16;
            *(_DWORD *)v16 += 2;
            if (v17)
              *(_DWORD *)v16 = v17;
            else
              AssignedSlot = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v16, (WTF::StringImpl *)a2);
            v18 = WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>::unspecifiedBoolTypeInstance;
LABEL_28:
            if (v18)
            {
              v79 = *(WTF **)(*(_QWORD *)(v8 + 40) + 8);
              *((_DWORD *)v79 + 6) += 2;
              v87 = v79;
              WebCore::Document::setHasElementUsingStyleBasedEditability((uint64_t)v79);
              AssignedSlot = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v87);
            }
LABEL_30:
            *(_DWORD *)(*(_QWORD *)(v8 + 104) + 4) |= 8u;
            if ((*(_BYTE *)(v8 + 22) & 8) == 0)
              goto LABEL_68;
            v20 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
            if (!*(_QWORD *)(v20 + 1944))
              goto LABEL_68;
            if (*(_BYTE *)(v20 + 3405))
              goto LABEL_68;
            if (*(_BYTE *)(v20 + 3392))
              goto LABEL_68;
            *(_WORD *)(v8 + 30) |= 0x10u;
            v21 = *(_QWORD *)(v8 + 64);
            v22 = HIWORD(v21) & 7;
            if (v22 > 1)
              goto LABEL_68;
            *(_QWORD *)(v8 + 64) = v21 & 0xFFF8FFFFFFFFFFFFLL | 0x2000000000000;
            if ((_DWORD)v22)
              goto LABEL_68;
            *(_DWORD *)(v8 + 24) += 2;
            v23 = *(unsigned __int16 *)(v8 + 28);
            if ((v23 & 0x80) != 0)
            {
              v28 = *(_QWORD *)(v8 + 200);
              if (!v28)
                goto LABEL_59;
            }
            else if ((~v23 & 0x408) == 0
                   && (AssignedSlot = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 368))(v8),
                       (_DWORD)AssignedSlot))
            {
              v28 = *(_QWORD *)(v8 + 112);
              if (!v28)
                goto LABEL_59;
            }
            else
            {
              a2 = *(_QWORD *)(v8 + 32);
              if (!a2)
                goto LABEL_59;
              v24 = *(_WORD *)(a2 + 28);
              if ((v24 & 0x80) == 0)
              {
                if ((v24 & 8) != 0)
                {
                  if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) == 0)
                    goto LABEL_43;
                  AssignedSlot = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                  if (!AssignedSlot)
                    goto LABEL_43;
                  AssignedSlot = WebCore::ShadowRoot::findAssignedSlot((WebCore::ShadowRoot *)AssignedSlot, (const WebCore::Node *)v8);
                  a2 = AssignedSlot;
LABEL_107:
                  if (!a2)
                    goto LABEL_59;
LABEL_43:
                  *(_QWORD *)(a2 + 64) |= 0x10000000000000uLL;
                  do
                  {
                    if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      v27 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                      if (v27)
                        *(_QWORD *)(v27 + 64) |= 0x8000000000000uLL;
                    }
                    v25 = *(_QWORD *)(a2 + 64);
                    if ((v25 & 0x8000000000000) != 0)
                      break;
                    *(_QWORD *)(a2 + 64) = v25 | 0x8000000000000;
                    AssignedSlot = *(_QWORD *)(a2 + 32);
                    if (!AssignedSlot)
                      break;
                    v26 = *(_WORD *)(AssignedSlot + 28);
                    if ((v26 & 0x80) != 0)
                    {
                      v47 = *(_QWORD *)(AssignedSlot + 200);
                      if (!v47)
                        break;
                      AssignedSlot = *(_QWORD *)(v47 + 8);
                    }
                    else
                    {
                      if ((v26 & 8) == 0)
                        break;
                      if ((*(_QWORD *)(AssignedSlot + 72) & 0xFFFFFFFFFFFFLL) != 0
                        && *(_QWORD *)((*(_QWORD *)(AssignedSlot + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
                      {
                        AssignedSlot = WebCore::ShadowRoot::findAssignedSlot(*(WebCore::ShadowRoot **)((*(_QWORD *)(AssignedSlot + 72) & 0xFFFFFFFFFFFFLL)+ 0x58), (const WebCore::Node *)a2);
                      }
                    }
                    a2 = AssignedSlot;
                  }
                  while (AssignedSlot);
                }
LABEL_59:
                if (*(_DWORD *)(v8 + 24) == 2)
                {
                  v42 = *(_WORD *)(v8 + 30);
                  if ((v42 & 0x400) == 0)
                  {
                    v43 = *(_WORD *)(v8 + 28);
                    if ((v43 & 0xF000) == 0x9000)
                    {
                      AssignedSlot = (uint64_t)WebCore::Document::removedLastRef((WebCore::Document *)v8, (void *)a2);
                    }
                    else
                    {
                      if ((v43 & 0x20) != 0)
                      {
                        (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 160) + 16))(*(_QWORD *)(v8 + 160));
                        v42 = *(_WORD *)(v8 + 30);
                      }
                      *(_WORD *)(v8 + 30) = v42 | 0x400;
                      AssignedSlot = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
                    }
                  }
                }
                else
                {
                  *(_DWORD *)(v8 + 24) -= 2;
                }
                v29 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
                v30 = *(_QWORD *)(v29 + 1272);
                if (v30)
                {
                  v31 = *(_QWORD *)(v30 + 64);
                  if ((v31 & 0x8000000000000) != 0
                    || (v31 & 0x7000000000000) != 0
                    || (*(_WORD *)(v30 + 30) & 0x20) != 0)
                  {
                    *(_DWORD *)(v29 + 24) += 2;
                    *(_QWORD *)(v29 + 64) |= 0x8000000000000uLL;
                    if ((*(_QWORD *)(v29 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                      || (a3.n128_u64[0] = *(_QWORD *)((*(_QWORD *)(v29 + 1536) & 0xFFFFFFFFFFFFLL) + 8),
                          a3.n128_f64[0] == 0.0))
                    {
                      if (!*(_BYTE *)(v29 + 3362))
                      {
                        *(_QWORD *)(v29 + 1528) = 0;
                        WTF::MonotonicTime::now((WTF::MonotonicTime *)AssignedSlot);
                        WebCore::TimerBase::setNextFireTime(v29 + 1504, v32 + 0.0);
                        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                        {
                          v64 = *(_QWORD *)(v29 + 528);
                          if (v64)
                          {
                            v65 = *(_QWORD *)(v64 + 8);
                            if (v65)
                            {
                              v66 = *(_QWORD *)(v65 + 24);
                              if (v66)
                              {
                                v67 = *(_QWORD *)(v66 + 8);
                                if (v67)
                                  goto LABEL_134;
                              }
                            }
                          }
                          v69 = *(_QWORD *)(v29 + 2632);
                          if (v69)
                          {
                            v70 = *(_QWORD *)(v69 + 8);
                            if (v70)
                            {
                              v71 = *(_QWORD *)(v70 + 528);
                              if (v71)
                              {
                                v72 = *(_QWORD *)(v71 + 8);
                                if (v72)
                                {
                                  v73 = *(_QWORD *)(v72 + 24);
                                  if (v73)
                                  {
                                    v67 = *(_QWORD *)(v73 + 8);
                                    if (v67)
                                    {
LABEL_134:
                                      v68 = *(WTF::StringImpl **)(*(_QWORD *)(v67 + 80) + 8);
                                      if (v68)
                                        WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(v68, (WebCore::Document *)v29);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    if (*(_DWORD *)(v29 + 24) == 2)
                    {
                      v44 = *(_WORD *)(v29 + 30);
                      if ((v44 & 0x400) == 0)
                      {
                        v45 = *(_WORD *)(v29 + 28);
                        if ((v45 & 0xF000) == 0x9000)
                        {
                          WebCore::Document::removedLastRef((WebCore::Document *)v29, (void *)a2);
                        }
                        else
                        {
                          if ((v45 & 0x20) != 0)
                          {
                            (*(void (**)(_QWORD))(**(_QWORD **)(v29 + 160) + 16))(*(_QWORD *)(v29 + 160));
                            v44 = *(_WORD *)(v29 + 30);
                          }
                          *(_WORD *)(v29 + 30) = v44 | 0x400;
                          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 72))(v29);
                        }
                      }
                    }
                    else
                    {
                      *(_DWORD *)(v29 + 24) -= 2;
                    }
                  }
                }
LABEL_68:
                v34 = *(_QWORD **)(v8 + 40);
                if (*v34)
                  v35 = (*(_WORD *)(*v34 + 28) & 0x80) == 0;
                else
                  v35 = 1;
                if (v35)
                  v41 = v34[1] + 1328;
                else
                  v41 = *v34 + 216;
                v36 = *(_QWORD *)v41;
                if (!*(_QWORD *)(*(_QWORD *)v41 + 32))
                {
                  if (*(_QWORD *)(v36 + 24))
                    WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v36);
                  else
                    WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v36);
                  v46 = *(_QWORD *)(v36 + 32);
                  if (*(_DWORD *)(v46 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                    WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v46 + 32), (WTF::StringImpl *)a2);
                  if (*(_BYTE *)(v46 + 242)
                    || *(_BYTE *)(v46 + 243)
                    || *(_BYTE *)(v46 + 244)
                    || *(_BYTE *)(v46 + 245)
                    || *(_BYTE *)(v46 + 246)
                    || *(_BYTE *)(v46 + 247)
                    || *(_BYTE *)(v46 + 248))
                  {
                    *(_BYTE *)(v36 + 236) = 1;
                  }
                }
                v37 = *(_BYTE **)(v36 + 32);
                if (v37[337])
                {
                  if (!v37[336])
                    goto LABEL_77;
                }
                else
                {
                  v59 = WebCore::Style::ScopeRuleSets::attributeInvalidationRuleSets((WebCore::Style::ScopeRuleSets *)(v37 + 32), (WTF::StringImpl **)(WebCore::HTMLNames::styleAttr + 24));
                  if (!v59 || (v60 = *((unsigned int *)v59 + 3), !(_DWORD)v60))
                  {
LABEL_129:
                    *((_WORD *)v37 + 168) = 256;
LABEL_77:
                    v38 = *(_QWORD *)(a1 + 40);
                    if (v38)
                      v39 = *(WebCore::Element **)(v38 + 8);
                    else
                      v39 = 0;
                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                    {
                      v48 = *(_QWORD *)(*((_QWORD *)v39 + 5) + 8);
                      v49 = *(_QWORD *)(v48 + 528);
                      if (v49)
                      {
                        v50 = *(_QWORD *)(v49 + 8);
                        if (v50)
                        {
                          v51 = *(_QWORD *)(v50 + 24);
                          if (v51)
                          {
                            v52 = *(_QWORD *)(v51 + 8);
                            if (v52)
                              goto LABEL_115;
                          }
                        }
                      }
                      v54 = *(_QWORD *)(v48 + 2632);
                      if (v54)
                      {
                        v55 = *(_QWORD *)(v54 + 8);
                        if (v55)
                        {
                          v56 = *(_QWORD *)(v55 + 528);
                          if (v56)
                          {
                            v57 = *(_QWORD *)(v56 + 8);
                            if (v57)
                            {
                              v58 = *(_QWORD *)(v57 + 24);
                              if (v58)
                              {
                                v52 = *(_QWORD *)(v58 + 8);
                                if (v52)
                                {
LABEL_115:
                                  v53 = *(WebCore::InspectorDOMAgent **)(*(_QWORD *)(*(_QWORD *)(v52 + 80) + 8) + 40);
                                  if (v53)
                                    WebCore::InspectorDOMAgent::didInvalidateStyleAttr(v53, v39);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    return;
                  }
                  v61 = 32 * v60;
                  v62 = (unsigned __int8 *)(*(_QWORD *)v59 + 24);
                  while (1)
                  {
                    v63 = *v62;
                    v62 += 32;
                    if (v63)
                      break;
                    v61 -= 32;
                    if (!v61)
                      goto LABEL_129;
                  }
                  *((_WORD *)v37 + 168) = 257;
                }
                v80 = *(_QWORD *)(v8 + 104);
                if (v80)
                {
                  v81 = *(WebCore::StyleProperties **)(v80 + 8);
                  if (v81)
                  {
                    *(_DWORD *)(v80 + 4) &= ~8u;
                    WebCore::StyleProperties::asTextAtom(v81, (unsigned __int8 *)a2, a5, (WTF::AtomString *)&v86, a3);
                    v82 = (const WTF::AtomString *)WebCore::Element::attributeWithoutSynchronization(v8, &WebCore::HTMLNames::styleAttr);
                    WebCore::Style::AttributeChangeInvalidation::AttributeChangeInvalidation((WebCore::Style::AttributeChangeInvalidation *)&v87, (WebCore::Element *)v8, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v82, (const WTF::AtomString *)&v86);
                    WebCore::Element::setSynchronizedLazyAttribute((WTF::StringImpl **)v8, (WebCore::QualifiedName::QualifiedNameImpl **)&WebCore::HTMLNames::styleAttr, &v86);
                    WebCore::Style::AttributeChangeInvalidation::~AttributeChangeInvalidation((WebCore::Style::AttributeChangeInvalidation *)&v87, v83);
                    v85 = v86;
                    v86 = 0;
                    if (v85)
                    {
                      if (*(_DWORD *)v85 == 2)
                        WTF::StringImpl::destroy(v85, v84);
                      else
                        *(_DWORD *)v85 -= 2;
                    }
                  }
                }
                goto LABEL_77;
              }
              v28 = *(_QWORD *)(a2 + 200);
              if (!v28)
                goto LABEL_59;
            }
            a2 = *(_QWORD *)(v28 + 8);
            goto LABEL_107;
          }
LABEL_27:
          v18 = 0;
          goto LABEL_28;
        }
        __break(0xC471u);
LABEL_176:
        JUMPOUT(0x1944B3C44);
      }
    }
  }
}

uint64_t WebCore::StyledElement::invalidateStyleAttribute(uint64_t this, uint64_t a2, __n128 a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int *v12;
  unint64_t v13;
  int v14;
  uint64_t (*v15)();
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  WTF *v58;
  uint64_t v59;
  const WTF::AtomString *v60;
  void *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF *v64;
  int v65;
  unsigned int v66;
  uint64_t v67;

  v5 = this;
  v6 = *(_QWORD *)(this + 104);
  if (!v6)
    goto LABEL_24;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_24;
  v8 = *(unsigned int *)(v7 + 4);
  if ((v8 & 8) != 0)
  {
    LODWORD(v9) = *(_DWORD *)(v7 + 28);
    while (1)
    {
      LODWORD(v9) = v9 - 1;
      if ((int)v9 < 0)
        goto LABEL_21;
      if ((*(_WORD *)(*(_QWORD *)(v7 + 16) + 16 * v9) & 0x3FF) == 0x15C)
        goto LABEL_7;
    }
  }
  v9 = v8 >> 4;
  do
  {
    if (v9-- < 1)
      goto LABEL_21;
  }
  while ((*(_WORD *)(v7 + 8 + 2 * v9) & 0x3FF) != 0x15C);
  if ((_DWORD)v9 == -1)
    goto LABEL_21;
LABEL_7:
  if ((v8 & 8) != 0)
  {
    if (*(_DWORD *)(v7 + 28) <= v9)
    {
      __break(0xC471u);
      goto LABEL_152;
    }
    v11 = (unsigned __int16 *)(*(_QWORD *)(v7 + 16) + 16 * v9);
    v13 = *((_QWORD *)v11 + 1);
  }
  else
  {
    v10 = v7 + 8;
    v11 = (unsigned __int16 *)(v10 + 2 * v9);
    v12 = (unsigned int *)(v10 + ((v8 >> 3) & 0x1FFFFFFE) + 5 * v9);
    v13 = *v12 | ((unint64_t)*((unsigned __int8 *)v12 + 4) << 32);
  }
  if ((*v11 & 0x400) == 0)
    goto LABEL_10;
  WebCore::matchingShorthandsForLonghand(*v11 & 0x3FF, (uint64_t)&v64);
  v55 = ((unint64_t)*v11 >> 11) & 3;
  if (v66 <= v55)
  {
    __break(0xC471u);
LABEL_152:
    JUMPOUT(0x1944B4358);
  }
  this = (uint64_t)v64;
  v56 = *((unsigned __int16 *)v64 + 8 * v55 + 6);
  if (&v67 != (uint64_t *)v64)
  {
    v64 = 0;
    v65 = 0;
    this = WTF::fastFree((WTF *)this, (void *)a2);
  }
  if (v56 == 492)
  {
    if (v13)
    {
      if (((*(unsigned __int16 *)(v13 + 4) | (*(unsigned __int8 *)(v13 + 6) << 16)) & 0x3F800) != 0)
        goto LABEL_11;
      if ((*(_WORD *)(v13 + 4) & 0x7F) != 0x50 || *(unsigned __int16 *)(v13 + 8) - 16 >= 0x1A)
        goto LABEL_11;
    }
LABEL_21:
    v15 = 0;
    goto LABEL_22;
  }
LABEL_10:
  if (!v13)
    goto LABEL_21;
LABEL_11:
  v14 = *(_DWORD *)v13;
  *(_DWORD *)v13 += 2;
  if (v14)
    *(_DWORD *)v13 = v14;
  else
    this = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v13, (WTF::StringImpl *)a2);
  v15 = WTF::RefPtr<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>::unspecifiedBoolTypeInstance;
LABEL_22:
  if (v15)
  {
    v58 = *(WTF **)(*(_QWORD *)(v5 + 40) + 8);
    *((_DWORD *)v58 + 6) += 2;
    v64 = v58;
    WebCore::Document::setHasElementUsingStyleBasedEditability((uint64_t)v58);
    this = (uint64_t)WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v64);
  }
LABEL_24:
  *(_DWORD *)(*(_QWORD *)(v5 + 104) + 4) |= 8u;
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
    goto LABEL_69;
  v17 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  if (!*(_QWORD *)(v17 + 1944))
    goto LABEL_69;
  if (*(_BYTE *)(v17 + 3405))
    goto LABEL_69;
  if (*(_BYTE *)(v17 + 3392))
    goto LABEL_69;
  *(_WORD *)(v5 + 30) |= 0x10u;
  v18 = *(_QWORD *)(v5 + 64);
  v19 = HIWORD(v18) & 7;
  if (v19 > 1)
    goto LABEL_69;
  *(_QWORD *)(v5 + 64) = v18 & 0xFFF8FFFFFFFFFFFFLL | 0x2000000000000;
  if ((_DWORD)v19)
    goto LABEL_69;
  *(_DWORD *)(v5 + 24) += 2;
  v20 = *(unsigned __int16 *)(v5 + 28);
  if ((v20 & 0x80) != 0)
  {
    v25 = *(_QWORD *)(v5 + 200);
    if (!v25)
      goto LABEL_60;
LABEL_53:
    a2 = *(_QWORD *)(v25 + 8);
    goto LABEL_54;
  }
  if ((~v20 & 0x408) == 0)
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 368))(v5);
    if ((_DWORD)this)
    {
      v25 = *(_QWORD *)(v5 + 112);
      if (!v25)
        goto LABEL_60;
      goto LABEL_53;
    }
  }
  a2 = *(_QWORD *)(v5 + 32);
  if (!a2)
    goto LABEL_60;
  v21 = *(_WORD *)(a2 + 28);
  if ((v21 & 0x80) != 0)
  {
    v25 = *(_QWORD *)(a2 + 200);
    if (!v25)
      goto LABEL_60;
    goto LABEL_53;
  }
  if ((v21 & 8) == 0)
    goto LABEL_60;
  if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) == 0
    || (this = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) == 0)
  {
LABEL_37:
    *(_QWORD *)(a2 + 64) |= 0x10000000000000uLL;
    do
    {
      if ((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v24 = *(_QWORD *)((*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v24)
          *(_QWORD *)(v24 + 64) |= 0x8000000000000uLL;
      }
      v22 = *(_QWORD *)(a2 + 64);
      if ((v22 & 0x8000000000000) != 0)
        break;
      *(_QWORD *)(a2 + 64) = v22 | 0x8000000000000;
      this = *(_QWORD *)(a2 + 32);
      if (!this)
        break;
      v23 = *(_WORD *)(this + 28);
      if ((v23 & 0x80) != 0)
      {
        v26 = *(_QWORD *)(this + 200);
        if (!v26)
          break;
        this = *(_QWORD *)(v26 + 8);
      }
      else
      {
        if ((v23 & 8) == 0)
          break;
        if ((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) != 0
          && *(_QWORD *)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
        {
          this = WebCore::ShadowRoot::findAssignedSlot(*(WebCore::ShadowRoot **)((*(_QWORD *)(this + 72) & 0xFFFFFFFFFFFFLL) + 0x58), (const WebCore::Node *)a2);
        }
      }
      a2 = this;
    }
    while (this);
    if (!v5)
      goto LABEL_62;
    goto LABEL_60;
  }
  this = WebCore::ShadowRoot::findAssignedSlot((WebCore::ShadowRoot *)this, (const WebCore::Node *)v5);
  a2 = this;
LABEL_54:
  if (a2)
    goto LABEL_37;
LABEL_60:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    v39 = *(_WORD *)(v5 + 30);
    if ((v39 & 0x400) == 0)
    {
      v40 = *(_WORD *)(v5 + 28);
      if ((v40 & 0xF000) == 0x9000)
      {
        this = WebCore::Document::removedLastRef((WebCore::Document *)v5);
      }
      else
      {
        if ((v40 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 160) + 16))(*(_QWORD *)(v5 + 160));
          v39 = *(_WORD *)(v5 + 30);
        }
        *(_WORD *)(v5 + 30) = v39 | 0x400;
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
      }
    }
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
LABEL_62:
  v27 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  v28 = *(_QWORD *)(v27 + 1272);
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 64);
    if ((v29 & 0x8000000000000) != 0 || (v29 & 0x7000000000000) != 0 || (*(_WORD *)(v28 + 30) & 0x20) != 0)
    {
      *(_DWORD *)(v27 + 24) += 2;
      *(_QWORD *)(v27 + 64) |= 0x8000000000000uLL;
      if ((*(_QWORD *)(v27 + 1536) & 0xFFFFFFFFFFFFLL) == 0
        || (a3.n128_u64[0] = *(_QWORD *)((*(_QWORD *)(v27 + 1536) & 0xFFFFFFFFFFFFLL) + 8), a3.n128_f64[0] == 0.0))
      {
        if (!*(_BYTE *)(v27 + 3362))
        {
          *(_QWORD *)(v27 + 1528) = 0;
          WTF::MonotonicTime::now((WTF::MonotonicTime *)this);
          this = WebCore::TimerBase::setNextFireTime(v27 + 1504, v30 + 0.0);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v46 = *(_QWORD *)(v27 + 528);
            if (v46)
            {
              v47 = *(_QWORD *)(v46 + 8);
              if (v47)
              {
                v48 = *(_QWORD *)(v47 + 24);
                if (v48)
                {
                  v49 = *(_QWORD *)(v48 + 8);
                  if (v49)
                    goto LABEL_114;
                }
              }
            }
            v50 = *(_QWORD *)(v27 + 2632);
            if (v50)
            {
              v51 = *(_QWORD *)(v50 + 8);
              if (v51)
              {
                v52 = *(_QWORD *)(v51 + 528);
                if (v52)
                {
                  v53 = *(_QWORD *)(v52 + 8);
                  if (v53)
                  {
                    v54 = *(_QWORD *)(v53 + 24);
                    if (v54)
                    {
                      v49 = *(_QWORD *)(v54 + 8);
                      if (v49)
                      {
LABEL_114:
                        this = *(_QWORD *)(*(_QWORD *)(v49 + 80) + 8);
                        if (this)
                          this = (uint64_t)WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl((WTF::StringImpl *)this, (WebCore::Document *)v27);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (*(_DWORD *)(v27 + 24) == 2)
      {
        v37 = *(_WORD *)(v27 + 30);
        if ((v37 & 0x400) == 0)
        {
          v38 = *(_WORD *)(v27 + 28);
          if ((v38 & 0xF000) == 0x9000)
          {
            this = WebCore::Document::removedLastRef((WebCore::Document *)v27);
          }
          else
          {
            if ((v38 & 0x20) != 0)
            {
              (*(void (**)(_QWORD))(**(_QWORD **)(v27 + 160) + 16))(*(_QWORD *)(v27 + 160));
              v37 = *(_WORD *)(v27 + 30);
            }
            *(_WORD *)(v27 + 30) = v37 | 0x400;
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 72))(v27);
          }
        }
      }
      else
      {
        *(_DWORD *)(v27 + 24) -= 2;
      }
    }
  }
LABEL_69:
  v32 = *(_QWORD **)(v5 + 40);
  if (*v32)
    v33 = (*(_WORD *)(*v32 + 28) & 0x80) == 0;
  else
    v33 = 1;
  if (v33)
    v36 = v32[1] + 1328;
  else
    v36 = *v32 + 216;
  v34 = *(_QWORD *)v36;
  if (!*(_QWORD *)(*(_QWORD *)v36 + 32))
  {
    if (*(_QWORD *)(v34 + 24))
      this = (uint64_t)WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v34);
    else
      this = WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v34);
    v41 = *(_QWORD *)(v34 + 32);
    if (*(_DWORD *)(v41 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      this = WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v41 + 32));
    if (*(_BYTE *)(v41 + 242)
      || *(_BYTE *)(v41 + 243)
      || *(_BYTE *)(v41 + 244)
      || *(_BYTE *)(v41 + 245)
      || *(_BYTE *)(v41 + 246)
      || *(_BYTE *)(v41 + 247)
      || *(_BYTE *)(v41 + 248))
    {
      *(_BYTE *)(v34 + 236) = 1;
    }
  }
  v35 = *(_BYTE **)(v34 + 32);
  if (v35[337])
  {
    if (!v35[336])
      return this;
  }
  else
  {
    this = (uint64_t)WebCore::Style::ScopeRuleSets::attributeInvalidationRuleSets((WebCore::Style::ScopeRuleSets *)(v35 + 32), (WTF::StringImpl **)(WebCore::HTMLNames::styleAttr + 24));
    if (!this || (v42 = *(unsigned int *)(this + 12), !(_DWORD)v42))
    {
LABEL_108:
      *((_WORD *)v35 + 168) = 256;
      return this;
    }
    v43 = 32 * v42;
    v44 = (unsigned __int8 *)(*(_QWORD *)this + 24);
    while (1)
    {
      v45 = *v44;
      v44 += 32;
      if (v45)
        break;
      v43 -= 32;
      if (!v43)
        goto LABEL_108;
    }
    *((_WORD *)v35 + 168) = 257;
  }
  v59 = *(_QWORD *)(v5 + 104);
  if (v59)
  {
    this = *(_QWORD *)(v59 + 8);
    if (this)
    {
      *(_DWORD *)(v59 + 4) &= ~8u;
      WebCore::StyleProperties::asTextAtom((WebCore::StyleProperties *)this, (unsigned __int8 *)a2, a5, (WTF::AtomString *)&v63, a3);
      v60 = (const WTF::AtomString *)WebCore::Element::attributeWithoutSynchronization(v5, &WebCore::HTMLNames::styleAttr);
      WebCore::Style::AttributeChangeInvalidation::AttributeChangeInvalidation((WebCore::Style::AttributeChangeInvalidation *)&v64, (WebCore::Element *)v5, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, v60, (const WTF::AtomString *)&v63);
      WebCore::Element::setSynchronizedLazyAttribute((WebCore::Element *)v5, (const WebCore::QualifiedName *)&WebCore::HTMLNames::styleAttr, (const WTF::AtomString *)&v63);
      WebCore::Style::AttributeChangeInvalidation::~AttributeChangeInvalidation((WebCore::Style::AttributeChangeInvalidation *)&v64, v61);
      this = (uint64_t)v63;
      v63 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)this, v62);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

uint64_t WebCore::CSSParser::parseValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _UNKNOWN *__ptr32 *v4;
  int16x8_t v5;
  int16x8_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int **v14;
  unsigned int **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  WebCore::CSSValue *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  _DWORD **v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  __int128 v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF *v47;
  unsigned int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  _DWORD **v58;
  _DWORD *v59;
  uint64_t v61;
  WTF **v62;
  unsigned int *v63;
  _DWORD *v64;
  unint64_t *v65;
  unsigned int *v66;
  WebCore::CSSValue *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  const WTF::StringImpl *v76;
  char *v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned __int16 *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  WTF::StringImpl *v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  BOOL v94;
  int v95;
  int v96;
  _DWORD *v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  char *v101;
  _DWORD *v102;
  char *v103;
  char v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  WTF *v108;
  WTF::StringImpl *v109;
  uint64_t v110;
  WTF *v111;
  WTF *v112;
  WTF *v114;
  WebCore::StyleSheetContents *v115;
  WTF *v116;
  WTF *v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  WTF *v121;
  uint64_t v123;
  _DWORD **v124;
  _DWORD *v125;
  WTF *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  int v129;
  unsigned int v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t (*v136)();
  int v137;
  uint64_t v138;
  __int128 v139;
  void *v140;
  void *v141;
  WTF *v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int16 *v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  uint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v159;
  __int16 v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  _DWORD *v164;
  WTF::StringImpl **v165;
  uint64_t v166;
  WTF::StringImpl *v167;
  WTF *v168;
  WTF *v169;
  uint64_t v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  WTF *v173;
  WTF *v174;
  WTF *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _DWORD *v181;
  _DWORD **v182;
  uint64_t v183;
  _DWORD *v184;
  uint64_t v185;
  _DWORD *v186;
  WebCore::CSSValueContainingVector *v187;
  const WebCore::CSSValue *v188;
  WebCore::CSSValueContainingVector *v189;
  WTF::StringImpl **v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  WTF::StringImpl ***v193;
  uint64_t v194;
  unsigned int v195;
  __int16 *v196;
  WTF::StringImpl *v197;
  __int128 v198;
  __int128 v199;
  WTF::StringImpl *v200;
  uint64_t v201;
  __int16 v202;
  const WebCore::CSSLinearGradientValue **v203[2];
  WTF *v204;
  uint64_t v205;
  _BYTE v206[16];
  WTF *v207;
  uint64_t v208;
  WTF::StringImpl **v209;
  WebCore::StyleSheetContents *v210;
  WTF *v211;
  WTF *v212;
  WebCore::CSSValue *v213;
  __int128 v214;
  _QWORD v215[512];
  __int128 v216;
  uint64_t v217;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = v3;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v18 = v2;
  v217 = *MEMORY[0x1E0C80C00];
  v19 = *v14;
  if (*v14)
  {
    v20 = v19[4];
    v21 = *((_QWORD *)v19 + 1);
    LODWORD(v19) = v19[1];
    v22 = (v20 >> 2) & 1;
  }
  else
  {
    v21 = 0;
    v22 = 1;
  }
  WebCore::CSSParserFastPaths::maybeParseValue(v17, v21, v19 | (unint64_t)(v22 << 32), v3, v4, (unint64_t)&v213, v5, v6, v7, v8, v9, v10);
  v25 = v213;
  if (v213)
  {
    v26 = WebCore::isInheritedPropertyTable[v17] != 0;
    v27 = v17 & 0x3FF;
    if (v13)
      v28 = 0x2000;
    else
      v28 = 0;
    v29 = v28 & 0xFFFFFC00 | (v26 << 15) | v17 & 0x3FF;
    LOWORD(v214) = v28 & 0xFC00 | ((_WORD)v26 << 15) | v17 & 0x3FF;
    *((_QWORD *)&v214 + 1) = v213;
    if (v27 == 1)
    {
      if (((*((unsigned __int16 *)v213 + 2) | (*((unsigned __int8 *)v213 + 6) << 16)) & 0x3F800) != 0xE800)
      {
        __break(0xC471u);
        JUMPOUT(0x1944B53D0);
      }
      if (WebCore::StyleProperties::customPropertyIsImportant((WebCore::StyleProperties *)v18, (WebCore::CSSValue *)((char *)v213 + 8))&& !v13)
      {
LABEL_291:
        v41 = 1;
      }
      else
      {
        v41 = WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v18, (unsigned __int16 *)&v214, 0) ^ 1;
      }
    }
    else
    {
      v30 = (uint64_t *)(v18 + 16);
      v31 = *(_QWORD *)(v18 + 16);
      v32 = *(unsigned int *)(v18 + 28);
      LODWORD(v33) = *(_DWORD *)(v18 + 28);
      do
      {
        v33 = (WTF::StringImpl *)((_DWORD)v33 - 1);
        if ((int)v33 < 0)
        {
LABEL_192:
          v150 = v32;
          if ((_DWORD)v32 == *(_DWORD *)(v18 + 24))
          {
            v155 = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 16, v32 + 1, (unint64_t)&v214);
            v156 = *(unsigned int *)(v18 + 28);
            v157 = *(_QWORD *)(v18 + 16);
            *(_WORD *)(v157 + 16 * v156) = *(_WORD *)v155;
            v152 = *(_DWORD **)(v155 + 8);
            if (v152)
              *v152 += 2;
            v41 = 0;
            v153 = v157 + 16 * v156;
          }
          else
          {
            v151 = *v30;
            *(_WORD *)(*v30 + 16 * v150) = v29;
            v152 = (_DWORD *)*((_QWORD *)&v214 + 1);
            if (*((_QWORD *)&v214 + 1))
              **((_DWORD **)&v214 + 1) += 2;
            v41 = 0;
            v153 = v151 + 16 * v150;
          }
          *(_QWORD *)(v153 + 8) = v152;
          ++*(_DWORD *)(v18 + 28);
          goto LABEL_197;
        }
        v34 = *(unsigned __int16 *)(v31 + 16 * v33);
      }
      while ((v34 & 0x3FF) != v27);
      if (v32 <= v33)
      {
        __break(0xC471u);
        JUMPOUT(0x1944B5454);
      }
      switch(v27)
      {
        case 354:
        case 355:
        case 356:
        case 357:
        case 358:
        case 359:
        case 360:
        case 361:
        case 362:
        case 363:
        case 364:
        case 365:
        case 366:
        case 367:
        case 368:
        case 369:
        case 370:
        case 371:
        case 372:
        case 373:
        case 374:
        case 375:
        case 376:
        case 377:
        case 378:
        case 379:
        case 380:
        case 381:
        case 382:
        case 383:
        case 384:
        case 385:
        case 386:
        case 387:
        case 389:
        case 390:
        case 391:
        case 392:
        case 393:
        case 394:
        case 395:
        case 396:
        case 397:
        case 398:
        case 399:
        case 400:
        case 401:
        case 402:
        case 403:
        case 404:
        case 405:
        case 406:
        case 407:
        case 411:
        case 412:
        case 413:
        case 414:
        case 415:
        case 416:
        case 417:
        case 418:
        case 419:
        case 420:
        case 421:
        case 422:
        case 423:
        case 424:
        case 425:
        case 426:
        case 427:
        case 428:
        case 429:
        case 430:
        case 431:
        case 432:
        case 433:
        case 434:
        case 435:
        case 436:
        case 437:
        case 438:
        case 439:
        case 440:
        case 441:
        case 442:
        case 443:
        case 444:
        case 445:
        case 446:
        case 447:
        case 449:
        case 450:
          v147 = (__int16 *)(v31 + 16 * v33 + 16);
          v148 = 16 * v32 - 16 * v33 - 16;
          do
          {
            if (!v148)
              goto LABEL_13;
            v149 = *v147;
            v147 += 8;
            v148 -= 16;
          }
          while ((WebCore::CSSProperty::areInSameLogicalPropertyGroupWithDifferentMappingLogic(v27, v149 & 0x3FF) & 1) == 0);
          WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(v18 + 16, v33);
          LODWORD(v32) = *(_DWORD *)(v18 + 28);
          goto LABEL_192;
        default:
LABEL_13:
          if (v34 != v29)
            goto LABEL_18;
          v35 = *(_QWORD *)(v31 + 16 * (_QWORD)v33 + 8);
          if (!v35)
            goto LABEL_18;
          v36 = *(unsigned __int16 *)(v35 + 4) | (*(unsigned __int8 *)(v35 + 6) << 16);
          v37 = *((unsigned __int16 *)v25 + 2) | (*((unsigned __int8 *)v25 + 6) << 16);
          if (((v37 ^ v36) & 0x3F800) != 0)
          {
            if ((v36 & 0x3F800) == 0x1D800)
            {
              v187 = *(WebCore::CSSValueContainingVector **)(v31 + 16 * (_QWORD)v33 + 8);
              v188 = v25;
            }
            else
            {
              if ((v37 & 0x3F800) != 0x1D800)
                goto LABEL_18;
              v187 = v25;
              v188 = *(const WebCore::CSSValue **)(v31 + 16 * (_QWORD)v33 + 8);
            }
            if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v187, v188, v24) & 1) != 0)
              goto LABEL_291;
          }
          else
          {
            v197 = v25;
            v203[0] = &v197;
            if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v35, v203, v24) & 1) != 0)goto LABEL_291;
            LOWORD(v29) = v214;
          }
LABEL_18:
          *(_WORD *)(v31 + 16 * (_QWORD)v33) = v29;
          v38 = (_DWORD **)(v31 + 16 * (_QWORD)v33 + 8);
          v39 = (_DWORD *)*((_QWORD *)&v214 + 1);
          if (*((_QWORD *)&v214 + 1))
            **((_DWORD **)&v214 + 1) += 2;
          v40 = *v38;
          *v38 = v39;
          if (v40)
          {
            if (*v40 != 2)
            {
              v41 = 0;
              *v40 -= 2;
              break;
            }
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v23);
          }
          v41 = 0;
          break;
      }
    }
LABEL_197:
    v128 = (WTF::StringImpl *)*((_QWORD *)&v214 + 1);
    *((_QWORD *)&v214 + 1) = 0;
    if (v128)
    {
      v129 = *(_DWORD *)v128 - 2;
      if (*(_DWORD *)v128 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v128, v23);
        return v41;
      }
      goto LABEL_199;
    }
    return v41;
  }
  v42 = *(WTF::StringImpl **)v11;
  if (*(_QWORD *)v11)
    *(_DWORD *)v42 += 2;
  v195 = v13;
  v197 = v42;
  v43 = *(_OWORD *)(v11 + 24);
  v198 = *(_OWORD *)(v11 + 8);
  v199 = v43;
  v44 = *(WTF::StringImpl **)(v11 + 40);
  if (v44)
    *(_DWORD *)v44 += 2;
  v45 = *(_QWORD *)(v11 + 48);
  v200 = v44;
  v201 = v45;
  v202 = *(_WORD *)(v11 + 56);
  LOBYTE(v203[0]) = 0;
  HIDWORD(v203[0]) = 0;
  v203[1] = 0;
  v204 = (WTF *)v206;
  v205 = 16;
  *(_QWORD *)&v214 = v215;
  *((_QWORD *)&v214 + 1) = 256;
  v216 = 0u;
  v207 = 0;
  v208 = 0;
  v47 = (WTF *)WTF::fastMalloc((WTF *)0x1020);
  LODWORD(v208) = 1;
  v207 = v47;
  v48 = HIDWORD(v208);
  v49 = (char *)v47 + 4128 * HIDWORD(v208);
  v50 = HIDWORD(v214);
  v51 = (uint64_t)(v49 + 16);
  *(_QWORD *)v49 = v49 + 16;
  *((_DWORD *)v49 + 2) = 256;
  *((_DWORD *)v49 + 3) = v50;
  if (v50 >= 0x101)
  {
    if (v50 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1944B5494);
    }
    v51 = WTF::fastMalloc((WTF *)(16 * v50));
    *((_DWORD *)v49 + 2) = v50;
    *(_QWORD *)v49 = v51;
  }
  if (HIDWORD(v214))
  {
    v162 = v214;
    v163 = v214 + 16 * HIDWORD(v214);
    do
    {
      *(_WORD *)v51 = *(_WORD *)v162;
      v164 = *(_DWORD **)(v162 + 8);
      if (v164)
        *v164 += 2;
      *(_QWORD *)(v51 + 8) = v164;
      v162 += 16;
      v51 += 16;
    }
    while (v162 != v163);
  }
  v52 = (char *)v47 + 4128 * v48;
  v53 = HIDWORD(v216);
  *((_OWORD *)v52 + 257) = 0u;
  *((_DWORD *)v52 + 1031) = v53;
  if ((_DWORD)v53)
  {
    if (v53 >> 29)
    {
      __break(0xC471u);
LABEL_319:
      JUMPOUT(0x1944B4FE4);
    }
    v177 = (uint64_t *)(v52 + 4112);
    v178 = WTF::fastMalloc((WTF *)(8 * v53));
    *((_DWORD *)v47 + 1032 * v48 + 1030) = v53;
    *v177 = v178;
    v54 = HIDWORD(v216);
    v55 = (WTF *)v216;
    if (!HIDWORD(v216))
    {
      ++HIDWORD(v208);
      goto LABEL_32;
    }
    v179 = 0;
    v180 = 8 * HIDWORD(v216);
    do
    {
      v181 = *(_DWORD **)((char *)v55 + v179);
      ++*v181;
      *(_QWORD *)(v178 + v179) = v181;
      v179 += 8;
    }
    while (v180 != v179);
  }
  else
  {
    v54 = HIDWORD(v216);
    v55 = (WTF *)v216;
  }
  ++HIDWORD(v208);
  if (v54)
  {
    v185 = 8 * v54;
    do
    {
      v186 = *(_DWORD **)v55;
      *(_QWORD *)v55 = 0;
      if (v186)
      {
        if (*v186 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v186, v46);
        else
          --*v186;
      }
      v55 = (WTF *)((char *)v55 + 8);
      v185 -= 8;
    }
    while (v185);
    v55 = (WTF *)v216;
  }
LABEL_32:
  if (v55)
  {
    *(_QWORD *)&v216 = 0;
    DWORD2(v216) = 0;
    WTF::fastFree(v55, v46);
  }
  v56 = (WTF *)v214;
  if (HIDWORD(v214))
  {
    v57 = 16 * HIDWORD(v214);
    v58 = (_DWORD **)(v214 + 8);
    do
    {
      v59 = *v58;
      *v58 = 0;
      if (v59)
      {
        if (*v59 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v59, v46);
        else
          *v59 -= 2;
      }
      v58 += 2;
      v57 -= 16;
    }
    while (v57);
    v56 = (WTF *)v214;
  }
  if ((v215 != (_QWORD *)v56 || v56 == 0) && v215 != (_QWORD *)v56 && v56 != 0)
  {
    *(_QWORD *)&v214 = 0;
    DWORD2(v214) = 0;
    WTF::fastFree(v56, v46);
  }
  v209 = &v197;
  v210 = 0;
  v61 = WTF::fastMalloc((WTF *)0x368);
  *(_QWORD *)v61 = v61 + 16;
  *(_QWORD *)(v61 + 8) = 8;
  *(_QWORD *)(v61 + 48) = v61 + 64;
  v62 = (WTF **)(v61 + 48);
  *(_QWORD *)(v61 + 56) = 32;
  v63 = (unsigned int *)(v61 + 56);
  v64 = (_DWORD *)(v61 + 60);
  v193 = (WTF::StringImpl ***)(v61 + 832);
  *(_OWORD *)(v61 + 832) = 0u;
  v65 = (unint64_t *)(v61 + 848);
  v66 = *v15;
  if (*v15)
  {
    WTF::StringImpl::replace();
    v67 = (WebCore::CSSValue *)v214;
  }
  else
  {
    v67 = 0;
  }
  v213 = v67;
  WTF::replaceUnpairedSurrogatesWithReplacementCharacter();
  v69 = v213;
  v213 = (WebCore::CSSValue *)v214;
  *(_QWORD *)&v214 = 0;
  if (v69)
  {
    v70 = *(_DWORD *)v69 - 2;
    if (*(_DWORD *)v69 != 2)
    {
LABEL_50:
      *(_DWORD *)v69 = v70;
      goto LABEL_51;
    }
    WTF::StringImpl::destroy(v69, v68);
    v69 = (WTF::StringImpl *)v214;
    *(_QWORD *)&v214 = 0;
    if (v69)
    {
      v70 = *(_DWORD *)v69 - 2;
      if (*(_DWORD *)v69 != 2)
        goto LABEL_50;
      WTF::StringImpl::destroy(v69, v68);
    }
  }
LABEL_51:
  if (v213 != (WebCore::CSSValue *)v66)
  {
    WebCore::CSSTokenizer::registerString((WebCore::CSSTokenizer *)v61, (const WTF::String *)&v213);
    v66 = (unsigned int *)v213;
  }
  *v65 = 0;
  if (v66)
  {
    v71 = v66[1];
    *v66 += 2;
    v72 = (unint64_t *)(v61 + 856);
    *(_QWORD *)(v61 + 856) = v71;
    *(_QWORD *)(v61 + 864) = v66;
    v213 = 0;
    if (*v66 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v66, v68);
    else
      *v66 -= 2;
  }
  else
  {
    v72 = (unint64_t *)(v61 + 856);
    *(_QWORD *)(v61 + 864) = 0;
    *(_QWORD *)(v61 + 856) = 0;
  }
  if (*v15 && (v130 = (*v15)[1]) != 0)
  {
    if (v130 < 0x63)
    {
LABEL_150:
      v131 = *v65;
      v132 = *(_QWORD *)(v61 + 856);
      while (1)
      {
        if (v131 >= v132)
        {
          v135 = 0;
          *v65 = v131 + 1;
        }
        else
        {
          v133 = *(_QWORD *)(v61 + 864);
          if (*(_DWORD *)(v133 + 4) <= v131)
          {
            __break(0xC471u);
            goto LABEL_319;
          }
          v134 = *(_QWORD *)(v133 + 8);
          if ((*(_BYTE *)(v133 + 16) & 4) != 0)
            v135 = *(unsigned __int8 *)(v134 + v131);
          else
            v135 = *(unsigned __int16 *)(v134 + 2 * v131);
          *v65 = v131 + 1;
          if (v135 > 0x7F)
          {
            ((void (*)(__int128 *__return_ptr, uint64_t))WebCore::CSSTokenizer::nameStart)(&v214, v61);
LABEL_158:
            v137 = v214 & 0x3F;
            if (v137 == 30)
              goto LABEL_57;
            if (v137 == 31)
              goto LABEL_162;
            goto LABEL_160;
          }
        }
        v136 = WebCore::CSSTokenizer::codePoints[2 * v135];
        if (v136)
        {
          ((void (*)(__int128 *__return_ptr, uint64_t))v136)(&v214, v61);
          goto LABEL_158;
        }
        v214 = 6uLL;
        LOWORD(v215[0]) = v135;
LABEL_160:
        if (*v64 == *v63)
        {
          if (!WTF::Vector<WebCore::CSSParserToken,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)1,WebCore::CSSParserToken&>((uint64_t)v62, (unint64_t)&v214))goto LABEL_243;
        }
        else
        {
          v138 = (uint64_t)*v62 + 24 * *v64;
          v139 = v214;
          *(_QWORD *)(v138 + 16) = v215[0];
          *(_OWORD *)v138 = v139;
          ++*v64;
        }
LABEL_162:
        v132 = *v72;
        v131 = *v65;
      }
    }
    if (v130 <= 0x20000000)
    {
      v168 = (WTF *)(24 * (v130 / 3uLL));
      WTF::tryFastMalloc(v168);
      v169 = (WTF *)v214;
      if ((_QWORD)v214)
      {
        *v63 = v168 / 0x18;
        *v62 = v169;
        goto LABEL_150;
      }
    }
LABEL_243:
    v211 = 0;
    v171 = *(WTF::StringImpl **)(v61 + 864);
    *(_QWORD *)(v61 + 864) = 0;
    if (v171)
    {
      if (*(_DWORD *)v171 == 2)
        WTF::StringImpl::destroy(v171, v68);
      else
        *(_DWORD *)v171 -= 2;
    }
    v172 = *(unsigned int *)(v61 + 844);
    if ((_DWORD)v172)
    {
      v190 = *v193;
      v191 = 8 * v172;
      do
      {
        v192 = *v190;
        *v190 = 0;
        if (v192)
        {
          if (*(_DWORD *)v192 == 2)
            WTF::StringImpl::destroy(v192, v68);
          else
            *(_DWORD *)v192 -= 2;
        }
        ++v190;
        v191 -= 8;
      }
      while (v191);
    }
    v173 = (WTF *)*v193;
    if (*v193)
    {
      *v193 = 0;
      *(_DWORD *)(v61 + 840) = 0;
      WTF::fastFree(v173, v68);
    }
    v174 = *v62;
    if ((WTF *)(v61 + 64) != *v62 && v174 != 0)
    {
      *v62 = 0;
      *v63 = 0;
      WTF::fastFree(v174, v68);
    }
    v176 = *(WTF **)v61;
    if (v61 + 16 != *(_QWORD *)v61 && v176)
    {
      *(_QWORD *)v61 = 0;
      *(_DWORD *)(v61 + 8) = 0;
      WTF::fastFree(v176, v68);
    }
    WTF::fastFree((WTF *)v61, v68);
    v61 = (uint64_t)v211;
  }
  else
  {
LABEL_57:
    v211 = (WTF *)v61;
  }
  v212 = 0;
  v73 = *(_QWORD *)(v61 + 48) + 24 * *(unsigned int *)(v61 + 60);
  *(_QWORD *)&v214 = *(_QWORD *)(v61 + 48);
  *((_QWORD *)&v214 + 1) = v73;
  if (!HIDWORD(v208))
  {
    __break(0xC471u);
    JUMPOUT(0x1944B545CLL);
  }
  if (BYTE2(v201))
    v74 = BYTE1(v201);
  else
    v74 = 1;
  WebCore::CSSPropertyParser::parseValue(v17, (WebCore::CSSParserTokenRange *)v195, &v214, (uint64_t)v209, (uint64_t)v207 + 4128 * HIDWORD(v208) - 4128, v74);
  if (!HIDWORD(v208))
  {
    __break(0xC471u);
    JUMPOUT(0x1944B5464);
  }
  v77 = (char *)v207 + 4128 * HIDWORD(v208) - 4128;
  v78 = *((unsigned int *)v207 + 1032 * HIDWORD(v208) - 1029);
  if ((_DWORD)v78)
  {
    v79 = (void **)(v18 + 16);
    v80 = *(unsigned int *)(v18 + 28);
    v81 = v78 + v80;
    if (v78 + v80 > (unint64_t)*(unsigned int *)(v18 + 24))
    {
      v140 = *v79;
      if (v81 < 5)
      {
        v141 = (void *)(v18 + 32);
        *(_QWORD *)(v18 + 16) = v18 + 32;
        *(_DWORD *)(v18 + 24) = 4;
      }
      else
      {
        if (v81 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x1944B5474);
        }
        v141 = (void *)WTF::fastMalloc((WTF *)(16 * v81));
        *(_DWORD *)(v18 + 24) = v81;
        *(_QWORD *)(v18 + 16) = v141;
      }
      memcpy(v141, v140, 16 * v80);
      if ((void *)(v18 + 32) != v140 && v140)
      {
        if (*v79 == v140)
        {
          *(_QWORD *)(v18 + 16) = 0;
          *(_DWORD *)(v18 + 24) = 0;
        }
        WTF::fastFree((WTF *)v140, (void *)v75);
      }
    }
    v82 = *((unsigned int *)v77 + 3);
    if ((_DWORD)v82)
    {
      v83 = 0;
      v84 = *(unsigned __int16 **)v77;
      v85 = *(_QWORD *)v77 + 16 * v82;
      while (1)
      {
        v86 = *v84;
        if ((v86 & 0x3FF) == 1)
        {
          v170 = *((_QWORD *)v84 + 1);
          if (v170)
          {
            if (((*(unsigned __int16 *)(v170 + 4) | (*(unsigned __int8 *)(v170 + 6) << 16)) & 0x3F800) != 0xE800)
            {
              __break(0xC471u);
              JUMPOUT(0x1944B5430);
            }
            if (!WebCore::StyleProperties::customPropertyIsImportant((WebCore::StyleProperties *)v18, (const WTF::String *)(v170 + 8)))
            {
LABEL_241:
              v104 = WebCore::MutableStyleProperties::setProperty((WebCore::MutableStyleProperties *)v18, v84, 0);
              goto LABEL_92;
            }
            LOWORD(v86) = *v84;
          }
          if ((v86 & 0x2000) != 0)
            goto LABEL_241;
LABEL_94:
          v104 = 0;
        }
        else
        {
          v87 = *(_QWORD *)(v18 + 16);
          v88 = *(unsigned int *)(v18 + 28);
          v89 = v88 - 1;
          LODWORD(v90) = *(_DWORD *)(v18 + 28);
          do
          {
            v90 = (WTF::StringImpl *)((_DWORD)v90 - 1);
            if ((int)v90 < 0)
            {
LABEL_86:
              v100 = v88;
              if ((_DWORD)v88 == *(_DWORD *)(v18 + 24))
              {
                v144 = WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v18 + 16, v88 + 1, (unint64_t)v84);
                v145 = *(unsigned int *)(v18 + 28);
                v146 = *(_QWORD *)(v18 + 16);
                *(_WORD *)(v146 + 16 * v145) = *(_WORD *)v144;
                v102 = *(_DWORD **)(v144 + 8);
                if (v102)
                  *v102 += 2;
                v103 = (char *)(v146 + 16 * v145);
              }
              else
              {
                v101 = (char *)*v79;
                *((_WORD *)*v79 + 8 * v100) = *v84;
                v102 = (_DWORD *)*((_QWORD *)v84 + 1);
                if (v102)
                  *v102 += 2;
                v103 = &v101[16 * v100];
              }
              *((_QWORD *)v103 + 1) = v102;
              ++*(_DWORD *)(v18 + 28);
              goto LABEL_91;
            }
            v91 = v89;
            v92 = *(unsigned __int16 *)(v87 + 16 * v90);
            --v89;
          }
          while ((v92 & 0x3FF) != (v86 & 0x3FF));
          if (v88 <= v90)
          {
            __break(0xC471u);
            JUMPOUT(0x1944B546CLL);
          }
          switch(v86 & 0x3FF)
          {
            case 0x162:
            case 0x163:
            case 0x164:
            case 0x165:
            case 0x166:
            case 0x167:
            case 0x168:
            case 0x169:
            case 0x16A:
            case 0x16B:
            case 0x16C:
            case 0x16D:
            case 0x16E:
            case 0x16F:
            case 0x170:
            case 0x171:
            case 0x172:
            case 0x173:
            case 0x174:
            case 0x175:
            case 0x176:
            case 0x177:
            case 0x178:
            case 0x179:
            case 0x17A:
            case 0x17B:
            case 0x17C:
            case 0x17D:
            case 0x17E:
            case 0x17F:
            case 0x180:
            case 0x181:
            case 0x182:
            case 0x183:
            case 0x185:
            case 0x186:
            case 0x187:
            case 0x188:
            case 0x189:
            case 0x18A:
            case 0x18B:
            case 0x18C:
            case 0x18D:
            case 0x18E:
            case 0x18F:
            case 0x190:
            case 0x191:
            case 0x192:
            case 0x193:
            case 0x194:
            case 0x195:
            case 0x196:
            case 0x197:
            case 0x19B:
            case 0x19C:
            case 0x19D:
            case 0x19E:
            case 0x19F:
            case 0x1A0:
            case 0x1A1:
            case 0x1A2:
            case 0x1A3:
            case 0x1A4:
            case 0x1A5:
            case 0x1A6:
            case 0x1A7:
            case 0x1A8:
            case 0x1A9:
            case 0x1AA:
            case 0x1AB:
            case 0x1AC:
            case 0x1AD:
            case 0x1AE:
            case 0x1AF:
            case 0x1B0:
            case 0x1B1:
            case 0x1B2:
            case 0x1B3:
            case 0x1B4:
            case 0x1B5:
            case 0x1B6:
            case 0x1B7:
            case 0x1B8:
            case 0x1B9:
            case 0x1BA:
            case 0x1BB:
            case 0x1BC:
            case 0x1BD:
            case 0x1BE:
            case 0x1BF:
            case 0x1C1:
            case 0x1C2:
              v196 = (__int16 *)(v87 + 16 * v91 + 16);
              v159 = 16 * v88 - 16 * v91 - 16;
              do
              {
                if (!v159)
                  goto LABEL_73;
                v194 = v159;
                v160 = *v196;
                v196 += 8;
                v161 = WebCore::CSSProperty::areInSameLogicalPropertyGroupWithDifferentMappingLogic(v86 & 0x3FF, v160 & 0x3FF);
                v159 = v194 - 16;
              }
              while ((v161 & 1) == 0);
              WTF::Vector<WebCore::CSSProperty,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(v18 + 16, v90);
              LODWORD(v88) = *(_DWORD *)(v18 + 28);
              goto LABEL_86;
            default:
LABEL_73:
              if (v92 != v86)
                goto LABEL_81;
              v93 = *(_QWORD *)(v87 + 16 * (_QWORD)v90 + 8);
              v75 = *((_QWORD *)v84 + 1);
              if (v93)
                v94 = v75 == 0;
              else
                v94 = 1;
              if (!v94)
              {
                v95 = *(unsigned __int16 *)(v93 + 4) | (*(unsigned __int8 *)(v93 + 6) << 16);
                v96 = *(unsigned __int16 *)(v75 + 4) | (*(unsigned __int8 *)(v75 + 6) << 16);
                if (((v96 ^ v95) & 0x3F800) == 0)
                {
                  v213 = (WebCore::CSSValue *)*((_QWORD *)v84 + 1);
                  *(_QWORD *)&v214 = &v213;
                  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v93, (const WebCore::CSSLinearGradientValue ***)&v214, v76) & 1) != 0)goto LABEL_94;
                  goto LABEL_80;
                }
                if ((v95 & 0x3F800) == 0x1D800)
                {
                  v189 = *(WebCore::CSSValueContainingVector **)(v87 + 16 * (_QWORD)v90 + 8);
                }
                else
                {
                  if ((v96 & 0x3F800) != 0x1D800)
                  {
LABEL_80:
                    LOWORD(v86) = *v84;
                    goto LABEL_81;
                  }
                  v189 = (WebCore::CSSValueContainingVector *)*((_QWORD *)v84 + 1);
                  v75 = *(_QWORD *)(v87 + 16 * (_QWORD)v90 + 8);
                }
                if ((WebCore::CSSValueContainingVector::containsSingleEqualItem(v189, (const WebCore::CSSValue *)v75, v76) & 1) != 0)goto LABEL_94;
                goto LABEL_80;
              }
              if (!(v93 | v75))
                goto LABEL_94;
LABEL_81:
              *(_WORD *)(v87 + 16 * (_QWORD)v90) = v86;
              v97 = (_DWORD *)*((_QWORD *)v84 + 1);
              if (v97)
                *v97 += 2;
              v98 = v87 + 16 * (_QWORD)v90;
              v99 = *(_DWORD **)(v98 + 8);
              *(_QWORD *)(v98 + 8) = v97;
              if (v99)
              {
                if (*v99 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v99, (WTF::StringImpl *)v75);
                else
                  *v99 -= 2;
              }
              break;
          }
LABEL_91:
          v104 = 1;
        }
LABEL_92:
        v83 |= v104;
        v84 += 8;
        if (v84 == (unsigned __int16 *)v85)
          goto LABEL_96;
      }
    }
    v83 = 0;
LABEL_96:
    v41 = (v83 & 1) == 0;
  }
  else
  {
    v41 = 2;
  }
  v105 = (unsigned int *)v212;
  v212 = 0;
  if (v105)
  {
    do
    {
      v106 = __ldaxr(v105);
      v107 = v106 - 1;
    }
    while (__stlxr(v107, v105));
    if (!v107)
    {
      atomic_store(1u, v105);
      WTF::fastFree((WTF *)v105, (void *)v75);
    }
  }
  v108 = v211;
  v211 = 0;
  if (v108)
  {
    v109 = (WTF::StringImpl *)*((_QWORD *)v108 + 108);
    *((_QWORD *)v108 + 108) = 0;
    if (v109)
    {
      if (*(_DWORD *)v109 == 2)
        WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v75);
      else
        *(_DWORD *)v109 -= 2;
    }
    v110 = *((unsigned int *)v108 + 211);
    if ((_DWORD)v110)
    {
      v165 = (WTF::StringImpl **)*((_QWORD *)v108 + 104);
      v166 = 8 * v110;
      do
      {
        v167 = *v165;
        *v165 = 0;
        if (v167)
        {
          if (*(_DWORD *)v167 == 2)
            WTF::StringImpl::destroy(v167, (WTF::StringImpl *)v75);
          else
            *(_DWORD *)v167 -= 2;
        }
        ++v165;
        v166 -= 8;
      }
      while (v166);
    }
    v111 = (WTF *)*((_QWORD *)v108 + 104);
    if (v111)
    {
      *((_QWORD *)v108 + 104) = 0;
      *((_DWORD *)v108 + 210) = 0;
      WTF::fastFree(v111, (void *)v75);
    }
    v112 = (WTF *)*((_QWORD *)v108 + 6);
    if ((WTF *)((char *)v108 + 64) != v112 && v112 != 0)
    {
      *((_QWORD *)v108 + 6) = 0;
      *((_DWORD *)v108 + 14) = 0;
      WTF::fastFree(v112, (void *)v75);
    }
    v114 = *(WTF **)v108;
    if ((WTF *)((char *)v108 + 16) != *(WTF **)v108 && v114)
    {
      *(_QWORD *)v108 = 0;
      *((_DWORD *)v108 + 2) = 0;
      WTF::fastFree(v114, (void *)v75);
    }
    WTF::fastFree(v108, (void *)v75);
  }
  v115 = v210;
  v210 = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v115, (void *)v75);
      WTF::fastFree(v142, v143);
    }
    else
    {
      --*(_DWORD *)v115;
    }
  }
  v116 = v207;
  if (HIDWORD(v208))
  {
    v117 = (WTF *)((char *)v207 + 4128 * HIDWORD(v208));
    while (1)
    {
      v118 = *((unsigned int *)v116 + 1031);
      if ((_DWORD)v118)
      {
        v182 = (_DWORD **)*((_QWORD *)v116 + 514);
        v183 = 8 * v118;
        do
        {
          v184 = *v182;
          *v182 = 0;
          if (v184)
          {
            if (*v184 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v184, (WTF::StringImpl *)v75);
            else
              --*v184;
          }
          ++v182;
          v183 -= 8;
        }
        while (v183);
      }
      v119 = (WTF *)*((_QWORD *)v116 + 514);
      if (v119)
      {
        *((_QWORD *)v116 + 514) = 0;
        *((_DWORD *)v116 + 1030) = 0;
        WTF::fastFree(v119, (void *)v75);
      }
      v120 = *((unsigned int *)v116 + 3);
      if ((_DWORD)v120)
        break;
LABEL_124:
      v121 = *(WTF **)v116;
      if ((WTF *)((char *)v116 + 16) != *(WTF **)v116 && v121 != 0)
      {
        *(_QWORD *)v116 = 0;
        *((_DWORD *)v116 + 2) = 0;
        WTF::fastFree(v121, (void *)v75);
      }
      v116 = (WTF *)((char *)v116 + 4128);
      if (v116 == v117)
      {
        v116 = v207;
        goto LABEL_139;
      }
    }
    v123 = 16 * v120;
    v124 = (_DWORD **)(*(_QWORD *)v116 + 8);
    while (1)
    {
      while (1)
      {
        v125 = *v124;
        *v124 = 0;
        if (v125)
          break;
LABEL_135:
        v124 += 2;
        v123 -= 16;
        if (!v123)
          goto LABEL_124;
      }
      if (*v125 != 2)
      {
        *v125 -= 2;
        goto LABEL_135;
      }
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v125, (WTF::StringImpl *)v75);
      v124 += 2;
      v123 -= 16;
      if (!v123)
        goto LABEL_124;
    }
  }
LABEL_139:
  if (v116)
  {
    v207 = 0;
    LODWORD(v208) = 0;
    WTF::fastFree(v116, (void *)v75);
  }
  v126 = v204;
  if (v206 != (_BYTE *)v204 && v204)
  {
    v204 = 0;
    LODWORD(v205) = 0;
    WTF::fastFree(v126, (void *)v75);
  }
  v127 = v200;
  v200 = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
      WTF::StringImpl::destroy(v127, (WTF::StringImpl *)v75);
    else
      *(_DWORD *)v127 -= 2;
  }
  v128 = v197;
  v197 = 0;
  if (v128)
  {
    v129 = *(_DWORD *)v128 - 2;
    if (*(_DWORD *)v128 != 2)
    {
LABEL_199:
      *(_DWORD *)v128 = v129;
      return v41;
    }
    WTF::StringImpl::destroy(v128, (WTF::StringImpl *)v75);
  }
  return v41;
}

uint64_t WebCore::InlineCSSStyleDeclaration::willMutate(WebCore::InlineCSSStyleDeclaration *this)
{
  uint64_t v1;
  WebCore::Element *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Inspector::InspectorDebuggerAgent **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v2 = *(WebCore::Element **)(v1 + 8);
    if (v2)
    {
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
        v5 = *(_QWORD *)(*((_QWORD *)v2 + 5) + 8);
        v6 = *(_QWORD *)(v5 + 528);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 24);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 8);
              if (v9)
                goto LABEL_9;
            }
          }
        }
        v11 = *(_QWORD *)(v5 + 2632);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 528);
            if (v13)
            {
              v14 = *(_QWORD *)(v13 + 8);
              if (v14)
              {
                v15 = *(_QWORD *)(v14 + 24);
                if (v15)
                {
                  v9 = *(_QWORD *)(v15 + 8);
                  if (v9)
                  {
LABEL_9:
                    v10 = *(Inspector::InspectorDebuggerAgent ***)(*(_QWORD *)(*(_QWORD *)(v9 + 80) + 8) + 152);
                    if (v10)
                      WebCore::PageDOMDebuggerAgent::willModifyDOMAttr(v10, v2);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

uint64_t WebCore::CSSParserFastPaths::maybeParseValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _UNKNOWN *__ptr32 *a5@<X5>, unint64_t a6@<X8>, int16x8_t a7@<Q0>, int16x8_t a8@<Q1>, double a9@<D2>, double a10@<D3>, double a11@<D4>, double a12@<D5>)
{
  _UNKNOWN *__ptr32 *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int **v18;
  WTF *v19;
  unsigned int v20;
  unint64_t v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  WTF *v40;
  unint64_t v41;
  int v42;
  double v43;
  double v44;
  __int16 v46;
  int *v47;
  char v48;
  int *v49;
  int v50;
  uint64_t v51;
  int **v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  WTF *v56;
  WTF *v57;
  void *v58;
  unsigned __int8 *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  unint64_t v64;
  WTF *v65;
  WTF *v66;
  int **v67;
  WTF *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v73;
  int v74;
  unint64_t v75;
  __int16 v76;
  WTF *v77;
  unint64_t v78;
  WTF *v79;
  WTF *v80;
  WTF *v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  _DWORD *v85;
  WTF *v86;
  WTF *v87;
  WTF *v89;
  uint64_t v90;
  _DWORD *v91;
  unint64_t v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  uint64_t *v97;
  int v98;
  WTF *v99;
  unint64_t v100;
  WTF *v101;
  WTF *v102;
  WTF *v103;
  _UNKNOWN *__ptr32 *v104;
  uint64_t v105;
  WTF *v106;
  WTF *v107;
  uint64_t v108;
  int v109;
  WTF *v110;
  WTF *v111;
  unint64_t v112;
  WTF *v113;
  unsigned int v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  _DWORD *v118;
  WTF *v119;
  WTF *v121;
  unsigned int v122;
  WTF *v123;
  uint64_t v124;
  _DWORD *v125;
  WTF *v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  int v134;
  _UNKNOWN *__ptr32 *v135;
  WTF *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  WTF *v141;
  WTF *v142;
  WTF *v143;
  uint64_t v144;
  _DWORD *v145;
  WTF *v146;
  uint64_t v147;
  _DWORD *v148;
  WTF *v149;
  int v151;
  int v152;
  int *v153;
  int v154;
  int *v155;
  int v156;
  int v157;
  unsigned int v158;
  WTF *v159;
  WTF *v160;
  WTF *v161;
  int16x8_t v162;
  int8x16_t v163;
  char *v164;
  unsigned int v165;
  _UNKNOWN *__ptr32 *v167;
  WTF *v168;
  WTF *v169;
  unsigned int v170;
  uint64_t v171;
  WTF *v172;
  _DWORD *v173;
  uint64_t v174;
  WTF *v175;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  __int16 v181;
  char *v182;
  _UNKNOWN *__ptr32 *v183;
  WTF *v184;
  WTF *v185;
  unsigned int v186;
  WTF *v187;
  _DWORD *v188;
  uint64_t v189;
  WTF *v190;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  int8x16_t v200;
  uint64_t v201;
  uint64_t v202;
  int16x8_t v203;
  WTF *v204;
  _DWORD *v205;
  uint64_t v206;
  WTF *v207;
  uint64_t v209;
  uint64_t v210;
  _WORD *v211;
  WTF *v212;
  _DWORD *v213;
  uint64_t v214;
  WTF *v215;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  int16x8_t *v223;
  int16x8_t *v224;
  __int8 *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unsigned int v232;
  int v234;
  unsigned int v235;
  int *v237;
  int *v238;
  int v239;
  char v240;
  int v241;
  _DWORD *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v247;
  int v248;
  uint64_t v249;
  __int16 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  uint64_t v256;
  int v257;
  WTF *v258;
  uint64_t v259;
  _DWORD *v260;
  _UNKNOWN *__ptr32 *v261;
  uint64_t *v263;
  WTF *v264;
  unsigned int v265;
  uint64_t v266;
  WTF::StringImpl *v267;
  WTF *v268;
  _DWORD *v269;
  WTF *v270;
  int v272;
  int v273;
  int v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  WTF *v278;
  WTF *v279;
  void *v280;
  WTF *v281;
  WTF *v282;
  uint64_t v283;
  _DWORD *v284;
  WTF *v285;
  WTF *v287;
  WTF *v288;
  uint64_t v289;
  _DWORD *v290;
  WTF *v291;
  WTF *v293;
  uint64_t v294;
  _DWORD *v295;
  BOOL v296;
  int v297;
  uint64_t v298;
  int v299;
  WTF *v300;
  uint64_t v301;
  _DWORD *v302;
  uint64_t v304;
  double v305;
  uint64_t v306;
  double v307;
  unsigned int v308;
  int *v309;
  int v310;
  unsigned int v311;
  unsigned int v312;
  char v313;
  int v314;
  int v315;
  int v316;
  char v317;
  int v318;
  int v319;
  int v320;
  unsigned int v321;
  WTF *v322;
  WTF *v323;
  WTF *v324;
  __int16 v325;
  __int16 v326;
  WTF *v327;
  WTF *v328;
  WTF *v329;
  WTF *v330;
  int v331;
  uint64_t v332;
  __int16 v333;
  int v334;
  __int16 __src;
  void *__srca;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  int8x16_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int v343;
  WTF *v344;
  void *v345;
  void *v346;
  void *v347;
  WTF *v348;
  WTF *__dst;
  WTF *__dsta;
  WTF *v351;
  WTF *v352;
  WTF *v353;
  WTF *v354;
  uint64_t v355;
  uint64_t v356;
  _BYTE v357[32];
  unint64_t v358;
  WTF *v359;
  int v360;
  unsigned int v361;
  _BYTE v362[32];
  WTF *v363;
  int v364;
  unsigned int v365;
  _BYTE v366[32];
  WTF *v367;
  int v368;
  unsigned int v369;
  _BYTE v370[32];
  WTF *v371;
  uint64_t v372;
  _BYTE v373[32];
  uint64_t v374[2];

  v14 = a4;
  v15 = a3;
  v16 = a2;
  LODWORD(v17) = result;
  v18 = (int **)a6;
  if ((int)result <= 82)
  {
    if ((_DWORD)result == 7)
    {
      result = WebCore::cssValueKeywordID(a2, a3);
      if ((result - 366) < 0x12
        || (result - 385) < 3
        || (_DWORD)result == 6
        || (result - 1) <= 4)
      {
        v155 = &WebCore::staticCSSValuePool[4 * result + 3088];
        *v155 += 2;
      }
      else
      {
        v155 = 0;
      }
      *v18 = v155;
      return result;
    }
    if ((_DWORD)result != 39)
    {
LABEL_288:
      if (result >= 0x240)
      {
LABEL_732:
        __break(1u);
LABEL_733:
        if ((_DWORD)a6 != 72
          || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x45
          || (*(_BYTE *)(v16 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(v16 + 5) & 0xDF) != 0x49)
        {
          goto LABEL_293;
        }
        v315 = *(unsigned __int8 *)(v16 + 6);
LABEL_707:
        if ((v315 & 0xFFFFFFDF) != 0x54)
          goto LABEL_293;
LABEL_708:
        WebCore::shorthandForProperty(v17);
        if (v316)
          v317 = 1;
        else
          v317 = v13;
        if ((v317 & 1) == 0)
        {
          v312 = WebCore::cssValueKeywordID(v16, v15);
          if (v312)
            goto LABEL_713;
        }
        goto LABEL_293;
      }
LABEL_289:
      if (((*(_QWORD *)((char *)&WebCore::CSSProperty::colorProperties
                       + (((unint64_t)v17 >> 3) & 0x1FF8)) >> v17) & 1) != 0)
        return WebCore::parseColor(v18, (unsigned __int8 *)v16, v15, *(_BYTE *)(v14 + 48), *(double *)a7.i64, *(double *)a8.i64, a9, a10, a11, a12);
      LOBYTE(v367) = 0;
      if (!WebCore::CSSParserFastPaths::isSimpleLengthPropertyID(v17, (char *)&v367))
      {
LABEL_668:
        if (*(_BYTE *)(v14 + 50))
          LOBYTE(v13) = *(_BYTE *)(v14 + 49) != 1;
        else
          LOBYTE(v13) = 0;
        if ((WebCore::CSSPropertyParsing::isKeywordFastPathEligibleStyleProperty(v17) & 1) == 0)
        {
          result = 0;
          switch((int)v15)
          {
            case 5:
              if ((v15 & 0xFF00000000) != 0)
              {
                if ((*(_BYTE *)v16 & 0xDF) == 0x55
                  && (*(_BYTE *)(v16 + 1) & 0xDF) == 0x4E
                  && (*(_BYTE *)(v16 + 2) & 0xDF) == 0x53
                  && (*(_BYTE *)(v16 + 3) & 0xDF) == 0x45)
                {
                  v315 = *(unsigned __int8 *)(v16 + 4);
                  goto LABEL_707;
                }
              }
              else if ((*(_WORD *)v16 & 0xFFDF) == 0x55
                     && (*(_WORD *)(v16 + 2) & 0xFFDF) == 0x4E
                     && (*(_WORD *)(v16 + 4) & 0xFFDF) == 0x53
                     && (*(_WORD *)(v16 + 6) & 0xFFDF) == 0x45)
              {
                v315 = *(unsigned __int16 *)(v16 + 8);
                goto LABEL_707;
              }
              goto LABEL_293;
            case 6:
              if ((v15 & 0xFF00000000) != 0)
              {
                if ((*(_BYTE *)v16 & 0xDF) == 0x52
                  && (*(_BYTE *)(v16 + 1) & 0xDF) == 0x45
                  && (*(_BYTE *)(v16 + 2) & 0xDF) == 0x56
                  && (*(_BYTE *)(v16 + 3) & 0xDF) == 0x45
                  && (*(_BYTE *)(v16 + 4) & 0xDF) == 0x52)
                {
                  v315 = *(unsigned __int8 *)(v16 + 5);
                  goto LABEL_707;
                }
              }
              else if ((*(_WORD *)v16 & 0xFFDF) == 0x52
                     && (*(_WORD *)(v16 + 2) & 0xFFDF) == 0x45
                     && (*(_WORD *)(v16 + 4) & 0xFFDF) == 0x56
                     && (*(_WORD *)(v16 + 6) & 0xFFDF) == 0x45
                     && (*(_WORD *)(v16 + 8) & 0xFFDF) == 0x52)
              {
                v315 = *(unsigned __int16 *)(v16 + 10);
                goto LABEL_707;
              }
              goto LABEL_293;
            case 7:
              if ((v15 & 0xFF00000000) != 0)
              {
                if ((*(_BYTE *)v16 & 0xDF) != 0x49 || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x4E)
                  goto LABEL_293;
                LODWORD(a6) = *(_BYTE *)(v16 + 2) & 0xDF;
                if ((_DWORD)a6 != 73)
                  goto LABEL_733;
                if ((*(_BYTE *)(v16 + 3) & 0xDF) != 0x54
                  || (*(_BYTE *)(v16 + 4) & 0xDF) != 0x49
                  || (*(_BYTE *)(v16 + 5) & 0xDF) != 0x41)
                {
                  goto LABEL_293;
                }
                v314 = *(unsigned __int8 *)(v16 + 6);
              }
              else
              {
                if ((*(_WORD *)v16 & 0xFFDF) != 0x49 || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x4E)
                  goto LABEL_293;
                v320 = *(_WORD *)(v16 + 4) & 0xFFDF;
                if (v320 != 73)
                {
                  if (v320 == 72
                    && (*(_WORD *)(v16 + 6) & 0xFFDF) == 0x45
                    && (*(_WORD *)(v16 + 8) & 0xFFDF) == 0x52
                    && (*(_WORD *)(v16 + 10) & 0xFFDF) == 0x49)
                  {
                    v315 = *(unsigned __int16 *)(v16 + 12);
                    goto LABEL_707;
                  }
                  goto LABEL_293;
                }
                if ((*(_WORD *)(v16 + 6) & 0xFFDF) != 0x54
                  || (*(_WORD *)(v16 + 8) & 0xFFDF) != 0x49
                  || (*(_WORD *)(v16 + 10) & 0xFFDF) != 0x41)
                {
                  goto LABEL_293;
                }
                v314 = *(unsigned __int16 *)(v16 + 12);
              }
              if ((v314 & 0xFFFFFFDF) == 0x4C)
                goto LABEL_708;
              goto LABEL_293;
            case 12:
              if ((v15 & 0xFF00000000) != 0)
              {
                if ((*(_BYTE *)v16 & 0xDF) != 0x52
                  || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x45
                  || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x56
                  || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x45
                  || (*(_BYTE *)(v16 + 4) & 0xDF) != 0x52
                  || (*(_BYTE *)(v16 + 5) & 0xDF) != 0x54
                  || (*(_BYTE *)(v16 + 6) & 0xDF) != 0xD
                  || (*(_BYTE *)(v16 + 7) & 0xDF) != 0x4C
                  || (*(_BYTE *)(v16 + 8) & 0xDF) != 0x41
                  || (*(_BYTE *)(v16 + 9) & 0xDF) != 0x59
                  || (*(_BYTE *)(v16 + 10) & 0xDF) != 0x45)
                {
                  goto LABEL_293;
                }
                v319 = *(unsigned __int8 *)(v16 + 11);
              }
              else
              {
                if ((*(_WORD *)v16 & 0xFFDF) != 0x52
                  || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x45
                  || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x56
                  || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x45
                  || (*(_WORD *)(v16 + 8) & 0xFFDF) != 0x52
                  || (*(_WORD *)(v16 + 10) & 0xFFDF) != 0x54
                  || (*(_WORD *)(v16 + 12) & 0xFFDF) != 0xD
                  || (*(_WORD *)(v16 + 14) & 0xFFDF) != 0x4C
                  || (*(_WORD *)(v16 + 16) & 0xFFDF) != 0x41
                  || (*(_WORD *)(v16 + 18) & 0xFFDF) != 0x59
                  || (*(_WORD *)(v16 + 20) & 0xFFDF) != 0x45)
                {
                  goto LABEL_293;
                }
                v319 = *(unsigned __int16 *)(v16 + 22);
              }
              if ((v319 & 0xFFFFFFDF) != 0x52)
                goto LABEL_293;
              goto LABEL_708;
            default:
              goto LABEL_672;
          }
        }
        v311 = WebCore::cssValueKeywordID(v16, v15);
        if (v311)
        {
          v312 = v311;
          if ((v13 & 1) != 0)
          {
LABEL_714:
            WebCore::CSSPropertyParsing::isKeywordValidForStyleProperty(v17, v312, v14);
            if (!v318)
              goto LABEL_293;
            if (v312 >= 0x48E)
            {
              __break(0xC471u);
              JUMPOUT(0x1944B8574);
            }
LABEL_716:
            result = (uint64_t)&WebCore::staticCSSValuePool[4 * v312 + 3088];
            *(_DWORD *)result += 2;
            goto LABEL_672;
          }
LABEL_713:
          if (v312 - 1 < 5)
            goto LABEL_716;
          goto LABEL_714;
        }
LABEL_293:
        result = 0;
LABEL_672:
        *v18 = (int *)result;
        return result;
      }
      v156 = *(unsigned __int8 *)(v14 + 48);
      if (v156 == 3)
        goto LABEL_293;
      v297 = v367;
      v298 = v15;
      if ((v15 & 0xFF00000000) != 0)
      {
        if (v15 < 3uLL)
        {
          if (!(_DWORD)v15)
          {
            v299 = 1;
            goto LABEL_659;
          }
        }
        else if ((*(_BYTE *)(v16 + v15 - 2) & 0xDF) == 0x50
               && (*(_BYTE *)(v15 + v16 - 1) & 0xDF) == 0x58)
        {
          v299 = 6;
          v298 = v15 - 2;
          goto LABEL_657;
        }
        v306 = v15 - 1;
        if (*(_BYTE *)(v16 + v306) == 37)
        {
          v299 = 3;
          if (v15 == 1)
            goto LABEL_659;
LABEL_658:
          if (*(_BYTE *)(v306 + v16 - 1) != 46)
          {
LABEL_659:
            LOBYTE(v371) = 0;
            WTF::charactersToDouble();
LABEL_660:
            if ((_BYTE)v371)
            {
              v307 = v305;
              if (v299 != 1 || (v299 = 6, v156 == 2) || v305 == 0.0)
              {
                if ((v297 != 1 || v305 >= 0.0) && fabs(v305) != INFINITY)
                {
                  if (v299 == 6)
                  {
                    v308 = (int)v305;
                    if ((int)v305 <= 0xFF && *(_QWORD *)&v305 == COERCE__INT64((double)v308))
                    {
                      v309 = &WebCore::staticCSSValuePool[4 * v308];
                      v310 = v309[16];
                      result = (uint64_t)(v309 + 16);
                      *(_DWORD *)result = v310 + 2;
                      goto LABEL_672;
                    }
                  }
                  else
                  {
                    v321 = (int)v305;
                    if ((int)v305 <= 0xFF && *(_QWORD *)&v305 == COERCE__INT64((double)v321))
                    {
                      result = (uint64_t)&WebCore::staticCSSValuePool[4 * v321 + 1040];
                      *(_DWORD *)result += 2;
                      goto LABEL_672;
                    }
                  }
                  result = WTF::fastCompactMalloc((WTF *)0x10);
                  *(_DWORD *)result = 2;
                  v313 = *(_BYTE *)(result + 6);
                  *(_WORD *)(result + 4) = v299;
                  *(_BYTE *)(result + 6) = v313 & 0xFC;
                  *(double *)(result + 8) = v307;
                  goto LABEL_672;
                }
              }
            }
          }
LABEL_667:
          *v18 = 0;
          goto LABEL_668;
        }
        v299 = 1;
LABEL_657:
        v306 = v298;
        goto LABEL_658;
      }
      if (v15 < 3uLL)
      {
        if (!(_DWORD)v15)
        {
          v299 = 1;
          goto LABEL_653;
        }
      }
      else if ((*(_WORD *)(v16 + 2 * (v15 - 2)) & 0xFFDF) == 0x50
             && (*(_WORD *)(v16 + 2 * v15 - 2) & 0xFFDF) == 0x58)
      {
        v299 = 6;
        v298 = v15 - 2;
        goto LABEL_651;
      }
      v304 = v15 - 1;
      if (*(_WORD *)(v16 + 2 * v304) == 37)
      {
        v299 = 3;
        if (v15 == 1)
          goto LABEL_653;
        goto LABEL_652;
      }
      v299 = 1;
LABEL_651:
      v304 = v298;
LABEL_652:
      if (*(_WORD *)(v16 + 2 * v304 - 2) == 46)
        goto LABEL_667;
LABEL_653:
      LOBYTE(v371) = 0;
      WTF::charactersToDouble();
      goto LABEL_660;
    }
LABEL_277:
    if (WebCore::isExposed(result, (unsigned int *)(a4 + 54)))
    {
      result = WebCore::cssValueKeywordID(v16, v15);
      if ((_DWORD)result == 394)
      {
        v153 = &WebCore::staticCSSValuePool[4664];
        *v153 += 2;
        *v18 = v153;
        return result;
      }
      return WebCore::parseColor(v18, (unsigned __int8 *)v16, v15, *(_BYTE *)(v14 + 48), *(double *)a7.i64, *(double *)a8.i64, a9, a10, a11, a12);
    }
    goto LABEL_289;
  }
  if ((_DWORD)result == 83)
    goto LABEL_277;
  if ((_DWORD)result == 183)
  {
    if ((a3 & 0xFF00000000) != 0)
    {
      if ((_DWORD)a3)
      {
        v154 = *(unsigned __int8 *)(a2 + a3 - 1);
        if (v154 == 37)
        {
          if (a3 == 1)
            goto LABEL_621;
          v154 = *(unsigned __int8 *)(a3 + a2 - 2);
        }
        if (v154 == 46)
        {
LABEL_631:
          *v18 = 0;
          return result;
        }
      }
LABEL_621:
      LOBYTE(v371) = 0;
      result = WTF::charactersToDouble();
      goto LABEL_631;
    }
    if ((_DWORD)a3)
    {
      v157 = *(unsigned __int16 *)(a2 + 2 * (a3 - 1));
      if (v157 == 37)
      {
        if (a3 == 1)
          goto LABEL_629;
        v157 = *(unsigned __int16 *)(a2 + 2 * a3 - 4);
      }
      if (v157 == 46)
        goto LABEL_631;
    }
LABEL_629:
    LOBYTE(v371) = 0;
    result = WTF::charactersToDouble();
    goto LABEL_631;
  }
  if ((_DWORD)result != 273)
    goto LABEL_288;
  if ((a3 & 0xFF00000000) == 0)
  {
    v14 = (uint64_t)v357;
    v354 = (WTF *)v357;
    v356 = 4;
    if (!(_DWORD)a3)
      goto LABEL_618;
    v158 = 0;
    v15 = a2 + 2 * a3;
    a2 = (uint64_t)v373;
    v159 = (WTF *)v362;
    v160 = (WTF *)v366;
    v161 = (WTF *)v370;
    v162.i64[0] = 0x29002900290029;
    v162.i64[1] = 0x29002900290029;
    v163 = (int8x16_t)xmmword_196881010;
    while (1)
    {
      if (v16 >= v15)
        goto LABEL_595;
      v164 = 0;
      while (1)
      {
        v165 = *(unsigned __int16 *)&v164[v16];
        if (v165 > 0x20 || ((1 << v165) & 0x100000600) == 0)
          break;
        v164 += 2;
        if ((unint64_t)&v164[v16] >= v15)
          goto LABEL_595;
      }
      v348 = v161;
      __dsta = v160;
      v352 = v159;
      if ((uint64_t)(v15 - v16 - (_QWORD)v164) < 18)
        goto LABEL_674;
      switch(v165 | (32 * (v165 - 65 < 0x1A)))
      {
        case 'm':
          if ((*(unsigned __int16 *)&v164[v16 + 2] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 2] - 65 < 0x1A))) != 0x61
            || (*(unsigned __int16 *)&v164[v16 + 4] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 4] - 65 < 0x1A))) != 0x74
            || (*(unsigned __int16 *)&v164[v16 + 6] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 6] - 65 < 0x1A))) != 0x72
            || (*(unsigned __int16 *)&v164[v16 + 8] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 8] - 65 < 0x1A))) != 0x69
            || (*(unsigned __int16 *)&v164[v16 + 10] | (32
                                                      * (*(unsigned __int16 *)&v164[v16 + 10] - 65 < 0x1A))) != 0x78
            || *(_WORD *)&v164[v16 + 12] != 51
            || (*(unsigned __int16 *)&v164[v16 + 14] | (32
                                                      * (*(unsigned __int16 *)&v164[v16 + 14] - 65 < 0x1A))) != 0x64
            || *(_WORD *)&v164[v16 + 16] != 40)
          {
            goto LABEL_674;
          }
          v167 = v12;
          v340 = v163;
          v358 = (unint64_t)&v164[v16 + 18];
          v371 = (WTF *)a2;
          v372 = 4;
          v168 = (WTF *)a2;
          if (WebCore::parseTransformNumberArguments<char16_t const>((uint64_t *)&v358, v15, 16, (uint64_t)&v371, *(double *)a7.i64, *(double *)a8.i64, *(float *)&a9))
          {
            v363 = __dsta;
            v364 = 4;
            v169 = v371;
            if (v371 == v168)
            {
              v170 = HIDWORD(v372);
              memcpy(__dsta, v168, 8 * HIDWORD(v372));
            }
            else
            {
              v371 = v168;
              v363 = v169;
              v273 = v372;
              v170 = HIDWORD(v372);
              LODWORD(v372) = 4;
              v364 = v273;
            }
            HIDWORD(v372) = 0;
            v365 = v170;
            WebCore::CSSFunctionValue::create(841, (uint64_t)&v363, v374);
            v171 = v374[0];
            v374[0] = 0;
            a2 = (uint64_t)v168;
            v160 = __dsta;
            v159 = v352;
            v162.i64[0] = 0x29002900290029;
            v162.i64[1] = 0x29002900290029;
            v163 = v340;
            v12 = v167;
            if (v365)
            {
              v172 = v363;
              v13 = 8 * v365;
              do
              {
                v173 = *(_DWORD **)v172;
                *(_QWORD *)v172 = 0;
                if (v173)
                {
                  if (*v173 == 2)
                  {
                    v174 = a2;
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v173, (WTF::StringImpl *)a2);
                    v12 = v167;
                    v163 = v340;
                    v162.i64[0] = 0x29002900290029;
                    v162.i64[1] = 0x29002900290029;
                    v160 = __dsta;
                    v159 = v352;
                    a2 = v174;
                  }
                  else
                  {
                    *v173 -= 2;
                  }
                }
                v172 = (WTF *)((char *)v172 + 8);
                v13 -= 8;
              }
              while (v13);
            }
            v175 = v363;
            if (v160 != v363 && v363 != 0)
            {
              v363 = 0;
              v364 = 0;
              v177 = a2;
              WTF::fastFree(v175, (void *)a2);
              v12 = v167;
              v163 = v340;
              v162.i64[0] = 0x29002900290029;
              v162.i64[1] = 0x29002900290029;
              v160 = __dsta;
              v159 = v352;
              a2 = v177;
            }
          }
          else
          {
            v171 = 0;
            a2 = (uint64_t)v168;
            v160 = __dsta;
            v159 = v352;
            v162.i64[0] = 0x29002900290029;
            v162.i64[1] = 0x29002900290029;
            v163 = v340;
            v12 = v167;
          }
          if (HIDWORD(v372))
          {
            v212 = v371;
            v13 = 8 * HIDWORD(v372);
            do
            {
              v213 = *(_DWORD **)v212;
              *(_QWORD *)v212 = 0;
              if (v213)
              {
                if (*v213 == 2)
                {
                  v214 = a2;
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v213, (WTF::StringImpl *)a2);
                  v12 = v167;
                  v163 = v340;
                  v162.i64[0] = 0x29002900290029;
                  v162.i64[1] = 0x29002900290029;
                  v160 = __dsta;
                  v159 = v352;
                  a2 = v214;
                }
                else
                {
                  *v213 -= 2;
                }
              }
              v212 = (WTF *)((char *)v212 + 8);
              v13 -= 8;
            }
            while (v13);
          }
          v215 = v371;
          if ((WTF *)a2 == v371 || v371 == 0)
            goto LABEL_532;
          v371 = 0;
          LODWORD(v372) = 0;
          v209 = a2;
          WTF::fastFree(v215, (void *)a2);
          v12 = v167;
          goto LABEL_555;
        case 'r':
          if ((*(unsigned __int16 *)&v164[v16 + 2] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 2] - 65 < 0x1A))) != 0x6F
            || (*(unsigned __int16 *)&v164[v16 + 4] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 4] - 65 < 0x1A))) != 0x74
            || (*(unsigned __int16 *)&v164[v16 + 6] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 6] - 65 < 0x1A))) != 0x61
            || (*(unsigned __int16 *)&v164[v16 + 8] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 8] - 65 < 0x1A))) != 0x74
            || (*(unsigned __int16 *)&v164[v16 + 10] | (32
                                                      * (*(unsigned __int16 *)&v164[v16 + 10] - 65 < 0x1A))) != 0x65)
          {
            goto LABEL_674;
          }
          v178 = *(unsigned __int16 *)&v164[v16 + 12] | (32
                                                       * (*(unsigned __int16 *)&v164[v16 + 12] - 65 < 0x1A));
          if (v178 == 40)
          {
            v333 = 843;
            a6 = 7;
          }
          else
          {
            if (v178 != 122 || *(_WORD *)&v164[v16 + 14] != 40)
              goto LABEL_674;
            v333 = 846;
            a6 = 8;
          }
          v193 = v15 - v16 - 2 * a6 - (_QWORD)v164;
          if (v193 <= -2)
            goto LABEL_732;
          v194 = v16 + 2 * a6;
          v195 = &v164[v194];
          if (&v164[v194] == (char *)v15)
            goto LABEL_674;
          v196 = v193 >> 1;
          v197 = 2 * a6;
          v198 = (unint64_t)&v164[2 * a6 + 2 * (v193 >> 1) + v16];
          if ((unint64_t)v193 <= 0x3E)
          {
            v210 = 2 * v196;
            v211 = v195;
            while (*v211 != 41)
            {
              ++v211;
              v210 -= 2;
              if (!v210)
                goto LABEL_674;
            }
          }
          else
          {
            v199 = (unint64_t)&v164[v194];
            if (v193 < 15)
            {
LABEL_385:
              if (v199 >= v198)
                goto LABEL_674;
              v201 = (uint64_t)&v164[2 * v196 + v16 + v197];
              v203 = *(int16x8_t *)(v201 - 16);
              v202 = v201 - 16;
              v200 = (int8x16_t)vceqq_s16(v203, v162);
              a8.i16[0] = vmaxvq_u16((uint16x8_t)v200);
              if (!a8.i32[0])
                goto LABEL_674;
            }
            else
            {
              while (1)
              {
                v200 = (int8x16_t)vceqq_s16(*(int16x8_t *)&v164[v194], v162);
                a8.i16[0] = vmaxvq_u16((uint16x8_t)v200);
                if (a8.i32[0])
                  break;
                v194 += 16;
                v199 = (unint64_t)&v164[v194];
                if ((unint64_t)&v164[v194 + 14] >= v198)
                  goto LABEL_385;
              }
              v202 = (uint64_t)&v164[v194];
            }
            v211 = (_WORD *)(v202 + 2 * vminvq_u16((uint16x8_t)vornq_s8(v163, v200)));
          }
          if ((_WORD *)v198 == v211)
            goto LABEL_674;
          v243 = (char *)v211 - v16 + -2 * a6;
          v244 = v243 - v164;
          v31 = v243 + 2 == v164;
          v245 = ((unint64_t)(v243 - v164) >> 1);
          if (v31 || v245 < 4)
            goto LABEL_674;
          v247 = (uint64_t)&v164[2 * v245 + v16 + v197];
          v248 = *(unsigned __int16 *)(v247 - 6) | 0x20;
          if (v248 == 114)
          {
            if ((*(_WORD *)(v247 - 4) & 0xFFDF) != 0x41
              || (*(_WORD *)&v164[2 * v245 - 2 + v16 + v197] & 0xFFDF) != 0x44)
            {
              goto LABEL_674;
            }
            v250 = 13;
          }
          else
          {
            if (v248 != 100)
              goto LABEL_674;
            v249 = (uint64_t)&v164[2 * v245 + v16 + v197];
            if ((*(_WORD *)(v249 - 4) & 0xFFDF) != 0x45 || (*(_WORD *)(v249 - 2) & 0xFFDF) != 0x47)
              goto LABEL_674;
            v250 = 12;
          }
          v326 = v250;
          if (*(_WORD *)&v164[2 * v245 - 8 + v16 + v197] == 46)
            goto LABEL_674;
          v251 = a2;
          LOBYTE(v371) = 0;
          v341 = v163;
          v13 = (unint64_t)v12;
          v332 = v244;
          WTF::charactersToDouble();
          if (!(_BYTE)v371)
            goto LABEL_674;
          v253 = v252;
          v358 = (unint64_t)&v164[2 * (v332 >> 1) + 2 + v16 + v197];
          v254 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v254 = 2;
          v255 = *(_BYTE *)(v254 + 6);
          *(_WORD *)(v254 + 4) = v326;
          *(_BYTE *)(v254 + 6) = v255 & 0xFC;
          *(_QWORD *)(v254 + 8) = v253;
          v256 = WTF::fastCompactMalloc((WTF *)0x40);
          v12 = (_UNKNOWN *__ptr32 *)v13;
          v163 = v341;
          v162.i64[0] = 0x29002900290029;
          v162.i64[1] = 0x29002900290029;
          a2 = v251;
          v171 = v256;
          *(_DWORD *)v256 = 2;
          v257 = (*(unsigned __int8 *)(v256 + 6) << 16) & 0xFC0000;
          *(_DWORD *)(v256 + 8) = 1;
          *(_WORD *)(v256 + 4) = -7680;
          *(_BYTE *)(v256 + 6) = (v257 | 0x10000u) >> 16;
          *(_QWORD *)(v256 + 16) = v254;
          *(_WORD *)(v256 + 56) = v333;
          v160 = __dsta;
          v159 = v352;
          goto LABEL_533;
        case 's':
          if ((*(unsigned __int16 *)&v164[v16 + 2] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 2] - 65 < 0x1A))) != 0x63)
            goto LABEL_674;
          if ((*(unsigned __int16 *)&v164[v16 + 4] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 4] - 65 < 0x1A))) != 0x61)
            goto LABEL_674;
          if ((*(unsigned __int16 *)&v164[v16 + 6] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 6] - 65 < 0x1A))) != 0x6C)
            goto LABEL_674;
          if ((*(unsigned __int16 *)&v164[v16 + 8] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 8] - 65 < 0x1A))) != 0x65)
            goto LABEL_674;
          if (*(_WORD *)&v164[v16 + 10] != 51)
            goto LABEL_674;
          if ((*(unsigned __int16 *)&v164[v16 + 12] | (32
                                                      * (*(unsigned __int16 *)&v164[v16 + 12] - 65 < 0x1A))) != 0x64)
            goto LABEL_674;
          v182 = &v164[v16];
          if (*(_WORD *)&v164[v16 + 14] != 40)
            goto LABEL_674;
          v183 = v12;
          v340 = v163;
          v358 = (unint64_t)(v182 + 16);
          v371 = (WTF *)a2;
          v372 = 4;
          v184 = (WTF *)a2;
          if (WebCore::parseTransformNumberArguments<char16_t const>((uint64_t *)&v358, v15, 3, (uint64_t)&v371, *(double *)a7.i64, *(double *)a8.i64, *(float *)&a9))
          {
            v359 = v352;
            v360 = 4;
            v185 = v371;
            if (v371 == v184)
            {
              v186 = HIDWORD(v372);
              memcpy(v352, v184, 8 * HIDWORD(v372));
            }
            else
            {
              v371 = v184;
              v359 = v185;
              v272 = v372;
              v186 = HIDWORD(v372);
              LODWORD(v372) = 4;
              v360 = v272;
            }
            HIDWORD(v372) = 0;
            v361 = v186;
            WebCore::CSSFunctionValue::create(852, (uint64_t)&v359, v374);
            v171 = v374[0];
            v374[0] = 0;
            a2 = (uint64_t)v184;
            v160 = __dsta;
            v159 = v352;
            v162.i64[0] = 0x29002900290029;
            v162.i64[1] = 0x29002900290029;
            v163 = v340;
            v12 = v183;
            if (v361)
            {
              v187 = v359;
              v13 = 8 * v361;
              do
              {
                v188 = *(_DWORD **)v187;
                *(_QWORD *)v187 = 0;
                if (v188)
                {
                  if (*v188 == 2)
                  {
                    v189 = a2;
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v188, (WTF::StringImpl *)a2);
                    v12 = v183;
                    v163 = v340;
                    v162.i64[0] = 0x29002900290029;
                    v162.i64[1] = 0x29002900290029;
                    v160 = __dsta;
                    v159 = v352;
                    a2 = v189;
                  }
                  else
                  {
                    *v188 -= 2;
                  }
                }
                v187 = (WTF *)((char *)v187 + 8);
                v13 -= 8;
              }
              while (v13);
            }
            v190 = v359;
            if (v159 != v359 && v359 != 0)
            {
              v359 = 0;
              v360 = 0;
              v192 = a2;
              WTF::fastFree(v190, (void *)a2);
              v12 = v183;
              v163 = v340;
              v162.i64[0] = 0x29002900290029;
              v162.i64[1] = 0x29002900290029;
              v160 = __dsta;
              v159 = v352;
              a2 = v192;
            }
          }
          else
          {
            v171 = 0;
            a2 = (uint64_t)v184;
            v160 = __dsta;
            v159 = v352;
            v162.i64[0] = 0x29002900290029;
            v162.i64[1] = 0x29002900290029;
            v163 = v340;
            v12 = v183;
          }
          if (HIDWORD(v372))
          {
            v204 = v371;
            v13 = 8 * HIDWORD(v372);
            do
            {
              v205 = *(_DWORD **)v204;
              *(_QWORD *)v204 = 0;
              if (v205)
              {
                if (*v205 == 2)
                {
                  v206 = a2;
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v205, (WTF::StringImpl *)a2);
                  v12 = v183;
                  v163 = v340;
                  v162.i64[0] = 0x29002900290029;
                  v162.i64[1] = 0x29002900290029;
                  v160 = __dsta;
                  v159 = v352;
                  a2 = v206;
                }
                else
                {
                  *v205 -= 2;
                }
              }
              v204 = (WTF *)((char *)v204 + 8);
              v13 -= 8;
            }
            while (v13);
          }
          v207 = v371;
          if ((WTF *)a2 == v371 || v371 == 0)
            goto LABEL_532;
          v371 = 0;
          LODWORD(v372) = 0;
          v209 = a2;
          WTF::fastFree(v207, (void *)a2);
          v12 = v183;
          goto LABEL_555;
        case 't':
          if ((*(unsigned __int16 *)&v164[v16 + 2] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 2] - 65 < 0x1A))) != 0x72
            || (*(unsigned __int16 *)&v164[v16 + 4] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 4] - 65 < 0x1A))) != 0x61
            || (*(unsigned __int16 *)&v164[v16 + 6] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 6] - 65 < 0x1A))) != 0x6E
            || (*(unsigned __int16 *)&v164[v16 + 8] | (32
                                                     * (*(unsigned __int16 *)&v164[v16 + 8] - 65 < 0x1A))) != 0x73
            || (*(unsigned __int16 *)&v164[v16 + 10] | (32
                                                      * (*(unsigned __int16 *)&v164[v16 + 10] - 65 < 0x1A))) != 0x6C
            || (*(unsigned __int16 *)&v164[v16 + 12] | (32
                                                      * (*(unsigned __int16 *)&v164[v16 + 12] - 65 < 0x1A))) != 0x61
            || (*(unsigned __int16 *)&v164[v16 + 14] | (32
                                                      * (*(unsigned __int16 *)&v164[v16 + 14] - 65 < 0x1A))) != 0x74
            || (*(unsigned __int16 *)&v164[v16 + 16] | (32
                                                      * (*(unsigned __int16 *)&v164[v16 + 16] - 65 < 0x1A))) != 0x65)
          {
            goto LABEL_674;
          }
          v179 = *(unsigned __int16 *)&v164[v16 + 18] | (32
                                                       * (*(unsigned __int16 *)&v164[v16 + 18] - 65 < 0x1A));
          if (v179 <= 119)
          {
            if (v179 == 40)
            {
              v334 = 0;
              v331 = 0;
              v180 = 2;
              v325 = 856;
              v217 = 10;
            }
            else
            {
              if (v179 != 51
                || (*(unsigned __int16 *)&v164[v16 + 20] | (32
                                                          * (*(unsigned __int16 *)&v164[v16 + 20] - 65 < 0x1A))) != 0x64
                || *(_WORD *)&v164[v16 + 22] != 40)
              {
                goto LABEL_674;
              }
              v334 = 0;
              v180 = 3;
              v325 = 860;
              v331 = 1;
              v217 = 12;
            }
          }
          else
          {
            if (v179 == 122)
            {
              if (*(_WORD *)&v164[v16 + 20] != 40)
                goto LABEL_674;
              v331 = 0;
              v334 = 1;
              v325 = 859;
              v180 = 1;
            }
            else
            {
              if (v179 == 121)
              {
                if (*(_WORD *)&v164[v16 + 20] != 40)
                  goto LABEL_674;
                v334 = 0;
                v331 = 0;
                v180 = 1;
                v181 = 858;
              }
              else
              {
                if (v179 != 120 || *(_WORD *)&v164[v16 + 20] != 40)
                  goto LABEL_674;
                v334 = 0;
                v331 = 0;
                v180 = 1;
                v181 = 857;
              }
              v325 = v181;
            }
            v217 = 11;
          }
          v371 = (WTF *)a2;
          v372 = 4;
          a6 = v16 + 2 * v217;
          v218 = (unint64_t)&v164[a6];
          v340 = v163;
          __srca = (void *)a2;
          break;
        default:
          goto LABEL_674;
      }
      do
      {
        v219 = v15 - v218;
        if ((uint64_t)(v15 - v218) <= -2)
          goto LABEL_732;
        if (v180 == 1)
          v220 = 41;
        else
          v220 = 44;
        if (v218 == v15)
        {
          v218 = v15;
LABEL_515:
          v160 = __dsta;
          v159 = v352;
          goto LABEL_518;
        }
        v221 = v219 >> 1;
        v222 = v218 + 2 * (v219 >> 1);
        if ((unint64_t)v219 <= 0x3E)
        {
          v227 = 0;
          v228 = 2 * v221;
          while (*(unsigned __int16 *)(v218 + v227) != v220)
          {
            v227 += 2;
            if (v228 == v227)
            {
              v171 = 0;
              v358 = v218;
              v160 = __dsta;
              v159 = v352;
              goto LABEL_519;
            }
          }
          v226 = (char *)(v218 + v227);
        }
        else
        {
          a7 = vdupq_n_s16(v220);
          v223 = (int16x8_t *)v218;
          if (v219 < 15)
          {
LABEL_441:
            if ((unint64_t)v223 >= v222)
              goto LABEL_515;
            v224 = (int16x8_t *)(v222 - 16);
            a8 = vceqq_s16(*(int16x8_t *)(v222 - 16), a7);
            a7.i16[0] = vmaxvq_u16((uint16x8_t)a8);
            if (!a7.i32[0])
              goto LABEL_515;
          }
          else
          {
            v224 = (int16x8_t *)v218;
            while (1)
            {
              a8 = vceqq_s16(*v224, a7);
              LOWORD(a9) = vmaxvq_u16((uint16x8_t)a8);
              if (LODWORD(a9))
                break;
              v223 = v224 + 1;
              v225 = &v224[1].i8[14];
              ++v224;
              if ((unint64_t)v225 >= v222)
                goto LABEL_441;
            }
          }
          a7 = (int16x8_t)vornq_s8(v163, (int8x16_t)a8);
          a7.i16[0] = vminvq_u16((uint16x8_t)a7);
          v226 = &v224->i8[2 * a7.u8[0]];
        }
        if (v226 == (char *)v222)
          goto LABEL_515;
        v16 = (unint64_t)&v226[-v218];
        if (&v226[-v218] == (char *)-2)
          goto LABEL_515;
        v229 = (v16 >> 1);
        if (v229 < 3)
        {
          if (!(v16 >> 1))
          {
            v17 = (uint64_t)v12;
            LODWORD(v13) = 1;
            goto LABEL_457;
          }
        }
        else if ((*(_WORD *)(v218 + 2 * (v229 - 2)) & 0xFFDF) == 0x50
               && (*(_WORD *)(v218 + 2 * v229 - 2) & 0xFFDF) == 0x58)
        {
          LODWORD(v13) = 6;
          v229 -= 2;
          goto LABEL_455;
        }
        v230 = v229 - 1;
        if (*(_WORD *)(v218 + 2 * (v229 - 1)) == 37)
        {
          v17 = (uint64_t)v12;
          LODWORD(v13) = 3;
          if (v229 == 1)
            goto LABEL_457;
          goto LABEL_456;
        }
        LODWORD(v13) = 1;
LABEL_455:
        v230 = v229;
LABEL_456:
        v17 = (uint64_t)v12;
        if (*(_WORD *)(v218 + 2 * v230 - 2) == 46)
          goto LABEL_516;
LABEL_457:
        LOBYTE(v374[0]) = 0;
        WTF::charactersToDouble();
        if (!LOBYTE(v374[0]))
        {
LABEL_516:
          a2 = (uint64_t)__srca;
          v160 = __dsta;
          v159 = v352;
          v162.i64[0] = 0x29002900290029;
          v162.i64[1] = 0x29002900290029;
          v163 = v340;
LABEL_517:
          v12 = (_UNKNOWN *__ptr32 *)v17;
LABEL_518:
          v171 = 0;
          v358 = v218;
          goto LABEL_519;
        }
        v231 = a7.i64[0];
        if ((_DWORD)v13 != 1 || *(double *)a7.i64 != 0.0)
        {
          a2 = (uint64_t)__srca;
          v162.i64[0] = 0x29002900290029;
          v162.i64[1] = 0x29002900290029;
          v12 = (_UNKNOWN *__ptr32 *)v17;
          if ((_DWORD)v13 == 3)
          {
            v234 = v331;
            if (v180 != 1)
              v234 = 0;
            v163 = v340;
            if (((v334 | v234) & 1) != 0)
              goto LABEL_515;
            v235 = (int)*(double *)a7.i64;
            *(double *)a7.i64 = (double)(int)*(double *)a7.i64;
            if (v235 <= 0xFF && v231 == COERCE__INT64((double)v235))
            {
              v237 = &WebCore::staticCSSValuePool[4 * v235 + 1040];
              *v237 += 2;
              goto LABEL_480;
            }
            LOWORD(v13) = 3;
            goto LABEL_478;
          }
          if ((_DWORD)v13 == 1)
          {
            a2 = (uint64_t)__srca;
            v160 = __dsta;
            v159 = v352;
            v163 = v340;
            goto LABEL_517;
          }
        }
        v232 = (int)*(double *)a7.i64;
        *(double *)a7.i64 = (double)(int)*(double *)a7.i64;
        if (v232 > 0xFF || v231 != COERCE__INT64((double)v232))
        {
          LOWORD(v13) = 6;
LABEL_478:
          v237 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
          *v237 = 2;
          v240 = *((_BYTE *)v237 + 6);
          *((_WORD *)v237 + 2) = v13;
          *((_BYTE *)v237 + 6) = v240 & 0xFC;
          *((_QWORD *)v237 + 1) = v231;
          goto LABEL_479;
        }
        v238 = &WebCore::staticCSSValuePool[4 * v232];
        v239 = v238[16];
        v237 = v238 + 16;
        *v237 = v239 + 2;
LABEL_479:
        a2 = (uint64_t)__srca;
        v162.i64[0] = 0x29002900290029;
        v162.i64[1] = 0x29002900290029;
        v163 = v340;
        v12 = (_UNKNOWN *__ptr32 *)v17;
LABEL_480:
        v374[0] = (uint64_t)v237;
        v241 = HIDWORD(v372);
        if (HIDWORD(v372) == (_DWORD)v372)
        {
          v17 = a2;
          v13 = (unint64_t)v12;
          WTF::Vector<WTF::Ref<WebCore::CSSValue,WTF::RawPtrTraits<WebCore::CSSValue>,WTF::DefaultRefDerefTraits<WebCore::CSSValue>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>((uint64_t)&v371, v374);
          v12 = (_UNKNOWN *__ptr32 *)v13;
          v163 = v340;
          v162.i64[0] = 0x29002900290029;
          v162.i64[1] = 0x29002900290029;
          a2 = v17;
        }
        else
        {
          v374[0] = 0;
          *((_QWORD *)v371 + HIDWORD(v372)) = v237;
          HIDWORD(v372) = v241 + 1;
        }
        v242 = (_DWORD *)v374[0];
        v374[0] = 0;
        if (v242)
        {
          if (*v242 == 2)
          {
            v17 = a2;
            v13 = (unint64_t)v12;
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v242, (WTF::StringImpl *)a2);
            v12 = (_UNKNOWN *__ptr32 *)v13;
            v163 = v340;
            v162.i64[0] = 0x29002900290029;
            v162.i64[1] = 0x29002900290029;
            a2 = v17;
          }
          else
          {
            *v242 -= 2;
          }
        }
        LODWORD(a6) = ((uint64_t)v16 >> 1) + 1;
        v218 += 2 * a6;
        --v180;
      }
      while (v180);
      v358 = v218;
      v367 = v348;
      v368 = 4;
      v264 = v371;
      if (v371 == (WTF *)a2)
      {
        v265 = HIDWORD(v372);
        v266 = a2;
        memcpy(v348, (const void *)a2, 8 * HIDWORD(v372));
      }
      else
      {
        v266 = a2;
        v371 = (WTF *)a2;
        v367 = v264;
        v274 = v372;
        v265 = HIDWORD(v372);
        LODWORD(v372) = 4;
        v368 = v274;
      }
      HIDWORD(v372) = 0;
      v369 = v265;
      WebCore::CSSFunctionValue::create(v325, (uint64_t)&v367, v374);
      v171 = v374[0];
      v374[0] = 0;
      if (v369)
      {
        v268 = v367;
        v13 = 8 * v369;
        do
        {
          v269 = *(_DWORD **)v268;
          *(_QWORD *)v268 = 0;
          if (v269)
          {
            if (*v269 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v269, v267);
            else
              *v269 -= 2;
          }
          v268 = (WTF *)((char *)v268 + 8);
          v13 -= 8;
        }
        while (v13);
      }
      v270 = v367;
      if (v348 != v367 && v367 != 0)
      {
        v367 = 0;
        v368 = 0;
        WTF::fastFree(v270, v267);
      }
      a2 = v266;
      v160 = __dsta;
      v159 = v352;
      v162.i64[0] = 0x29002900290029;
      v162.i64[1] = 0x29002900290029;
      v163 = v340;
      v12 = &jpt_1944B68C8;
LABEL_519:
      v258 = v371;
      if (HIDWORD(v372))
      {
        v259 = 8 * HIDWORD(v372);
        do
        {
          v260 = *(_DWORD **)v258;
          *(_QWORD *)v258 = 0;
          if (v260)
          {
            if (*v260 == 2)
            {
              v13 = a2;
              v261 = v12;
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v260, (WTF::StringImpl *)a2);
              v12 = v261;
              v163 = v340;
              v162.i64[0] = 0x29002900290029;
              v162.i64[1] = 0x29002900290029;
              v160 = __dsta;
              v159 = v352;
              a2 = v13;
            }
            else
            {
              *v260 -= 2;
            }
          }
          v258 = (WTF *)((char *)v258 + 8);
          v259 -= 8;
        }
        while (v259);
        v258 = v371;
      }
      if ((WTF *)a2 == v258 || v258 == 0)
      {
LABEL_532:
        if (!v171)
          goto LABEL_674;
      }
      else
      {
        v371 = 0;
        LODWORD(v372) = 0;
        v209 = a2;
        v13 = (unint64_t)v12;
        WTF::fastFree(v258, (void *)a2);
        v12 = (_UNKNOWN *__ptr32 *)v13;
LABEL_555:
        v163 = v340;
        v162.i64[0] = 0x29002900290029;
        v162.i64[1] = 0x29002900290029;
        v160 = __dsta;
        v159 = v352;
        a2 = v209;
        if (!v171)
        {
LABEL_674:
          *v18 = 0;
          goto LABEL_610;
        }
      }
LABEL_533:
      LODWORD(v17) = HIDWORD(v356);
      if (HIDWORD(v356) == (_DWORD)v356)
      {
        v342 = v163;
        v275 = a2;
        v276 = HIDWORD(v356) + ((unint64_t)HIDWORD(v356) >> 2);
        if (v276 >= 0x10)
          v277 = v276 + 1;
        else
          v277 = 16;
        if (v277 <= (unint64_t)HIDWORD(v356) + 1)
          v13 = HIDWORD(v356) + 1;
        else
          v13 = v277;
        v278 = v354;
        if (v13 < 5)
        {
          v354 = (WTF *)v357;
          LODWORD(v356) = 4;
          v279 = (WTF *)v357;
        }
        else
        {
          if (v13 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1944B85ACLL);
          }
          v279 = (WTF *)WTF::fastMalloc((WTF *)(8 * v13));
          LODWORD(v356) = v13;
          v354 = v279;
        }
        memcpy(v279, v278, 8 * HIDWORD(v356));
        if (v357 != (_BYTE *)v278 && v278)
        {
          if (v354 == v278)
          {
            v354 = 0;
            LODWORD(v356) = 0;
          }
          WTF::fastFree(v278, v280);
        }
        LODWORD(v17) = HIDWORD(v356);
        v159 = v352;
        v263 = (uint64_t *)((char *)v354 + 8 * HIDWORD(v356));
        a2 = v275;
        v160 = __dsta;
        v162.i64[0] = 0x29002900290029;
        v162.i64[1] = 0x29002900290029;
        v163 = v342;
        v12 = &jpt_1944B68C8;
      }
      else
      {
        v263 = (uint64_t *)((char *)v354 + 8 * HIDWORD(v356));
      }
      *v263 = v171;
      v158 = v17 + 1;
      HIDWORD(v356) = v17 + 1;
      v16 = v358;
      v161 = v348;
      if (v358 >= v15)
      {
LABEL_595:
        if (v158)
        {
          v371 = (WTF *)v373;
          LODWORD(v372) = 4;
          v287 = v354;
          if (v354 == (WTF *)v357)
          {
            memcpy(v373, v357, 8 * v158);
          }
          else
          {
            v354 = (WTF *)v357;
            v371 = v287;
            LODWORD(v372) = v356;
          }
          HIDWORD(v356) = 0;
          HIDWORD(v372) = v158;
          WebCore::CSSTransformListValue::create((uint64_t)&v371, &v367);
          *v18 = (int *)v367;
          v367 = 0;
          if (HIDWORD(v372))
          {
            v288 = v371;
            v289 = 8 * HIDWORD(v372);
            do
            {
              v290 = *(_DWORD **)v288;
              *(_QWORD *)v288 = 0;
              if (v290)
              {
                if (*v290 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v290, (WTF::StringImpl *)a2);
                else
                  *v290 -= 2;
              }
              v288 = (WTF *)((char *)v288 + 8);
              v289 -= 8;
            }
            while (v289);
          }
          v291 = v371;
          if (v373 != (_BYTE *)v371 && v371 != 0)
          {
            v371 = 0;
            LODWORD(v372) = 0;
            WTF::fastFree(v291, (void *)a2);
          }
LABEL_610:
          if (HIDWORD(v356))
          {
            v293 = v354;
            v294 = 8 * HIDWORD(v356);
            do
            {
              v295 = *(_DWORD **)v293;
              *(_QWORD *)v293 = 0;
              if (v295)
              {
                if (*v295 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v295, (WTF::StringImpl *)a2);
                else
                  *v295 -= 2;
              }
              v293 = (WTF *)((char *)v293 + 8);
              v294 -= 8;
            }
            while (v294);
          }
LABEL_619:
          result = (uint64_t)v354;
          v296 = v357 == (_BYTE *)v354;
          goto LABEL_642;
        }
LABEL_618:
        *v18 = 0;
        goto LABEL_619;
      }
    }
  }
  v19 = (WTF *)v357;
  v353 = (WTF *)v357;
  v355 = 4;
  if (!(_DWORD)a3)
  {
LABEL_589:
    *v18 = 0;
    goto LABEL_641;
  }
  v20 = 0;
  v21 = a2 + a3;
  v22 = (WTF *)v373;
  v23 = (WTF *)v362;
  v24 = (WTF *)v366;
  v25 = (WTF *)v370;
  LOBYTE(v13) = 1;
  v26 = MEMORY[0x1E0CBF868];
  do
  {
    if (v16 >= v21)
      break;
    v17 = 0;
    a2 = -(uint64_t)v16;
    a6 = v21 - v16;
    v15 = -(int)v16;
    v27 = 1 - v16;
    v28 = v16;
    v29 = v21 - v16;
    while (1)
    {
      v30 = *(unsigned __int8 *)(v16 + v17);
      v31 = v30 > 0x20 || ((1 << v30) & 0x100000600) == 0;
      if (v31)
        break;
      ++v17;
      v15 = (v15 - 1);
      --v27;
      --v29;
      ++v28;
      if (a6 == v17)
        goto LABEL_574;
    }
    __dst = v24;
    v351 = v19;
    if ((uint64_t)(a6 - v17) < 9)
    {
LABEL_632:
      v19 = v351;
LABEL_633:
      *v18 = 0;
      goto LABEL_634;
    }
    switch(*(_BYTE *)(v26 + v30))
    {
      case 'm':
        if (*(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 1)) != 97
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 2)) != 116
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 3)) != 114
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 4)) != 105
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 5)) != 120
          || *(_BYTE *)(v16 + v17 + 6) != 51
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 7)) != 100
          || *(_BYTE *)(v16 + v17 + 8) != 40)
        {
          goto LABEL_632;
        }
        v329 = v25;
        v110 = v23;
        v358 = v16 + v17 + 9;
        v111 = v22;
        v371 = v22;
        v372 = 4;
        v112 = v21;
        if (WebCore::parseTransformNumberArguments<unsigned char const>((uint64_t)&v358, v21, 16, (uint64_t)&v371))
        {
          v363 = __dst;
          v364 = 4;
          v113 = v371;
          if (v371 == v111)
          {
            v114 = HIDWORD(v372);
            memcpy(__dst, v111, 8 * HIDWORD(v372));
          }
          else
          {
            v371 = v111;
            v363 = v113;
            v151 = v372;
            v114 = HIDWORD(v372);
            LODWORD(v372) = 4;
            v364 = v151;
          }
          HIDWORD(v372) = 0;
          v365 = v114;
          WebCore::CSSFunctionValue::create(841, (uint64_t)&v363, v374);
          v115 = v374[0];
          v374[0] = 0;
          if (v365)
          {
            v116 = v363;
            v117 = 8 * v365;
            do
            {
              v118 = *(_DWORD **)v116;
              *(_QWORD *)v116 = 0;
              if (v118)
              {
                if (*v118 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v118, (WTF::StringImpl *)a2);
                else
                  *v118 -= 2;
              }
              v116 = (WTF *)((char *)v116 + 8);
              v117 -= 8;
            }
            while (v117);
          }
          v119 = v363;
          if (__dst != v363 && v363 != 0)
          {
            v363 = 0;
            v364 = 0;
            WTF::fastFree(v119, (void *)a2);
          }
        }
        else
        {
          v115 = 0;
        }
        if (HIDWORD(v372))
        {
          v146 = v371;
          v147 = 8 * HIDWORD(v372);
          do
          {
            v148 = *(_DWORD **)v146;
            *(_QWORD *)v146 = 0;
            if (v148)
            {
              if (*v148 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v148, (WTF::StringImpl *)a2);
              else
                *v148 -= 2;
            }
            v146 = (WTF *)((char *)v146 + 8);
            v147 -= 8;
          }
          while (v147);
        }
        goto LABEL_267;
      case 'r':
        if (*(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 1)) != 111
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 2)) != 116
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 3)) != 97
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 4)) != 116
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 5)) != 101)
        {
          goto LABEL_632;
        }
        v32 = *(unsigned __int8 *)(v26 + *(unsigned __int8 *)(v16 + v17 + 6));
        if (v32 == 122)
        {
          if (*(_BYTE *)(v16 + v17 + 7) != 40)
            goto LABEL_632;
          __src = 846;
          v33 = 8;
        }
        else
        {
          if (v32 != 40)
            goto LABEL_632;
          __src = 843;
          v33 = 7;
        }
        if ((uint64_t)(a6 - v33 - v17) < 0)
          goto LABEL_732;
        if (v16 + v33 + v17 == v21)
          goto LABEL_632;
        v59 = (unsigned __int8 *)(v28 + v33);
        v60 = v29 - v33;
        v61 = v60 >= 0x10 ? 16 : v60;
        v62 = v59;
        do
        {
          v63 = *v62++;
          if (v63 == 41)
            goto LABEL_121;
          v59 = v62;
          --v61;
        }
        while (v61);
        if (a6 - v33 - v17 < 0x11)
          goto LABEL_632;
        if (v60 >= 0x10)
          v60 = 16;
        v64 = v21;
        v338 = v33;
        v65 = v22;
        v66 = v23;
        v67 = v18;
        v68 = v25;
        v69 = (unsigned __int8 *)memchr((void *)(v16 + v17 + v60 + v33), 41, a6 - (v60 + v33) - v17);
        a2 = -(uint64_t)v16;
        v25 = v68;
        v18 = v67;
        v26 = MEMORY[0x1E0CBF868];
        v23 = v66;
        v22 = v65;
        v33 = v338;
        v21 = v64;
        v59 = v69;
        if (!v69)
          goto LABEL_632;
LABEL_121:
        v70 = (uint64_t)&v59[a2 - v33];
        v31 = v70 + 1 == v17;
        v71 = (v70 - v17);
        if (v31 || v71 < 4)
          goto LABEL_632;
        v323 = v23;
        v328 = v25;
        v344 = v22;
        v339 = v21;
        v73 = v16 + v33 + v17;
        v74 = *(unsigned __int8 *)(v73 + ((_DWORD)v59 - v33 + v15) - 3) | 0x20;
        if (v74 == 114)
        {
          if ((*(_BYTE *)(v73 + ((_DWORD)v59 - v33 + v15) - 2) & 0xDF) != 0x41
            || (*(_BYTE *)(v16 + v33 + v17 + ((_DWORD)v59 - v33 + v15) - 1) & 0xDF) != 0x44)
          {
            goto LABEL_632;
          }
          v76 = 13;
        }
        else
        {
          if (v74 != 100)
            goto LABEL_632;
          v75 = v16 + v33 + v17;
          if ((*(_BYTE *)(v75 + ((_DWORD)v59 - v33 + v15) - 2) & 0xDF) != 0x45
            || (*(_BYTE *)(v75 + ((_DWORD)v59 - v33 + v15) - 1) & 0xDF) != 0x47)
          {
            goto LABEL_632;
          }
          v76 = 12;
        }
        v128 = v33;
        if (*(_BYTE *)(v16 + v33 + v17 + ((_DWORD)v59 - v33 + v15) - 4) != 46)
        {
          LOBYTE(v371) = 0;
          WTF::charactersToDouble();
          if ((_BYTE)v371)
          {
            v130 = v129;
            v358 = v16 + v128 + v17 + ((_DWORD)v59 - v128 + v27);
            v131 = WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v131 = 2;
            v132 = *(_BYTE *)(v131 + 6);
            *(_WORD *)(v131 + 4) = v76;
            *(_BYTE *)(v131 + 6) = v132 & 0xFC;
            *(_QWORD *)(v131 + 8) = v130;
            v133 = WTF::fastCompactMalloc((WTF *)0x40);
            a5 = &jpt_1944B56A0;
            v23 = v323;
            v25 = v328;
            v22 = v344;
            v21 = v339;
            v82 = v133;
            *(_DWORD *)v133 = 2;
            v134 = (*(unsigned __int8 *)(v133 + 6) << 16) & 0xFC0000;
            *(_DWORD *)(v133 + 8) = 1;
            *(_WORD *)(v133 + 4) = -7680;
            *(_BYTE *)(v133 + 6) = (v134 | 0x10000u) >> 16;
            *(_QWORD *)(v133 + 16) = v131;
            *(_WORD *)(v133 + 56) = __src;
            v19 = v351;
            goto LABEL_159;
          }
        }
        goto LABEL_632;
      case 's':
        if (*(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 1)) != 99
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 2)) != 97
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 3)) != 108
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 4)) != 101
          || *(_BYTE *)(v16 + v17 + 5) != 51
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 6)) != 100
          || *(_BYTE *)(v16 + v17 + 7) != 40)
        {
          goto LABEL_632;
        }
        v329 = v25;
        v110 = v23;
        v358 = v16 + v17 + 8;
        v111 = v22;
        v371 = v22;
        v372 = 4;
        v112 = v21;
        if (WebCore::parseTransformNumberArguments<unsigned char const>((uint64_t)&v358, v21, 3, (uint64_t)&v371))
        {
          v359 = v110;
          v360 = 4;
          v121 = v371;
          if (v371 == v111)
          {
            v122 = HIDWORD(v372);
            memcpy(v110, v111, 8 * HIDWORD(v372));
          }
          else
          {
            v371 = v111;
            v359 = v121;
            v152 = v372;
            v122 = HIDWORD(v372);
            LODWORD(v372) = 4;
            v360 = v152;
          }
          HIDWORD(v372) = 0;
          v361 = v122;
          WebCore::CSSFunctionValue::create(852, (uint64_t)&v359, v374);
          v115 = v374[0];
          v374[0] = 0;
          if (v361)
          {
            v123 = v359;
            v124 = 8 * v361;
            do
            {
              v125 = *(_DWORD **)v123;
              *(_QWORD *)v123 = 0;
              if (v125)
              {
                if (*v125 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v125, (WTF::StringImpl *)a2);
                else
                  *v125 -= 2;
              }
              v123 = (WTF *)((char *)v123 + 8);
              v124 -= 8;
            }
            while (v124);
          }
          v126 = v359;
          if (v110 != v359 && v359 != 0)
          {
            v359 = 0;
            v360 = 0;
            WTF::fastFree(v126, (void *)a2);
          }
        }
        else
        {
          v115 = 0;
        }
        if (HIDWORD(v372))
        {
          v143 = v371;
          v144 = 8 * HIDWORD(v372);
          do
          {
            v145 = *(_DWORD **)v143;
            *(_QWORD *)v143 = 0;
            if (v145)
            {
              if (*v145 == 2)
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v145, (WTF::StringImpl *)a2);
              else
                *v145 -= 2;
            }
            v143 = (WTF *)((char *)v143 + 8);
            v144 -= 8;
          }
          while (v144);
        }
LABEL_267:
        v149 = v371;
        if (v111 != v371 && v371 != 0)
        {
          v371 = 0;
          LODWORD(v372) = 0;
          WTF::fastFree(v149, (void *)a2);
        }
        v21 = v112;
        v22 = v111;
        v23 = v110;
        v25 = v329;
        a5 = &jpt_1944B56A0;
        v82 = v115;
        goto LABEL_158;
      case 't':
        if (*(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 1)) != 114
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 2)) != 97
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 3)) != 110
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 4)) != 115
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 5)) != 108
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 6)) != 97
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 7)) != 116
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 8)) != 101)
        {
          goto LABEL_632;
        }
        v34 = *(unsigned __int8 *)(v26 + *(unsigned __int8 *)(v16 + v17 + 9));
        if (v34 == 40)
        {
          v35 = 2;
          v343 = 856;
          v36 = 10;
          goto LABEL_36;
        }
        if (*(unsigned __int8 *)(v26 + *(unsigned __int8 *)(v16 + v17 + 9)) > 0x78u)
        {
          if (v34 == 121)
          {
            if (*(_BYTE *)(v16 + v17 + 10) != 40)
              goto LABEL_632;
            v35 = 1;
            v109 = 858;
          }
          else
          {
            if (v34 != 122 || *(_BYTE *)(v16 + v17 + 10) != 40)
              goto LABEL_632;
            v35 = 1;
            v109 = 859;
          }
          goto LABEL_229;
        }
        if (v34 == 120)
        {
          if (*(_BYTE *)(v16 + v17 + 10) != 40)
            goto LABEL_632;
          v35 = 1;
          v109 = 857;
LABEL_229:
          v343 = v109;
          v36 = 11;
          goto LABEL_36;
        }
        if (v34 != 51
          || *(_BYTE *)(v26 + *(unsigned __int8 *)(v16 + v17 + 10)) != 100
          || *(_BYTE *)(v16 + v17 + 11) != 40)
        {
          goto LABEL_632;
        }
        v35 = 3;
        v343 = 860;
        v36 = 12;
LABEL_36:
        v371 = v22;
        v372 = 4;
        v16 += v36 + v17;
        v358 = v16;
        v322 = v23;
        v327 = v25;
        break;
      default:
        goto LABEL_632;
    }
    while (1)
    {
      a6 = v21 - v16;
      if ((uint64_t)(v21 - v16) < 0)
        goto LABEL_732;
      if (v35 == 1)
        a2 = 41;
      else
        a2 = 44;
      if (v16 == v21)
        goto LABEL_163;
      v37 = a6 >= 0x10 ? 16 : v21 - v16;
      v38 = v37;
      v39 = (unsigned __int8 *)v16;
      do
      {
        if (*v39 == (_DWORD)a2)
        {
          v40 = v22;
          v15 = v21;
          goto LABEL_52;
        }
        ++v39;
        --v38;
      }
      while (v38);
      if (a6 < 0x11)
      {
LABEL_163:
        v82 = 0;
        goto LABEL_145;
      }
      v40 = v22;
      v15 = v21;
      v39 = (unsigned __int8 *)memchr((void *)(v16 + v37), a2, a6 - v37);
      if (!v39)
      {
LABEL_215:
        v82 = 0;
        goto LABEL_217;
      }
LABEL_52:
      LODWORD(v17) = (_DWORD)v39 - v16;
      if (&v39[-v16] == (unsigned __int8 *)-1)
        goto LABEL_215;
      v41 = ((_DWORD)v39 - v16);
      if (v41 < 3)
      {
        if ((_DWORD)v39 == (_DWORD)v16)
        {
          v42 = 1;
          goto LABEL_62;
        }
      }
      else if ((*(_BYTE *)(v16 + v41 - 2) & 0xDF) == 0x50 && (*(_BYTE *)(v41 + v16 - 1) & 0xDF) == 0x58)
      {
        v42 = 6;
        v41 -= 2;
LABEL_60:
        a2 = v41;
        goto LABEL_61;
      }
      a2 = v41 - 1;
      if (*(_BYTE *)(v16 + v41 - 1) != 37)
      {
        v42 = 1;
        goto LABEL_60;
      }
      v42 = 3;
      if (v41 == 1)
      {
        v19 = v351;
        goto LABEL_62;
      }
      v19 = v351;
LABEL_61:
      if (*(_BYTE *)(a2 + v16 - 1) == 46)
        goto LABEL_215;
LABEL_62:
      LOBYTE(v374[0]) = 0;
      WTF::charactersToDouble();
      if (!LOBYTE(v374[0]))
        goto LABEL_215;
      v44 = v43;
      if (v43 != 0.0)
        break;
      if (v42 != 6 && v42 != 1)
        goto LABEL_80;
LABEL_65:
      if ((int)v43 <= 0xFF && *(_QWORD *)&v43 == COERCE__INT64((double)(int)v43))
      {
        v49 = &WebCore::staticCSSValuePool[4 * (int)v43];
        v50 = v49[16];
        v47 = v49 + 16;
        *v47 = v50 + 2;
        goto LABEL_74;
      }
      v46 = 6;
LABEL_72:
      v47 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v47 = 2;
      v48 = *((_BYTE *)v47 + 6);
      *((_WORD *)v47 + 2) = v46;
      *((_BYTE *)v47 + 6) = v48 & 0xFC;
      *((double *)v47 + 1) = v44;
LABEL_74:
      v51 = HIDWORD(v372);
      v21 = v15;
      v22 = v40;
      v23 = v322;
      v25 = v327;
      a5 = &jpt_1944B56A0;
      if (HIDWORD(v372) == (_DWORD)v372)
      {
        v337 = v15;
        v54 = HIDWORD(v372) + ((unint64_t)HIDWORD(v372) >> 2);
        if (v54 >= 0x10)
          v55 = v54 + 1;
        else
          v55 = 16;
        if (v55 <= (unint64_t)HIDWORD(v372) + 1)
          v15 = HIDWORD(v372) + 1;
        else
          v15 = v55;
        v56 = v371;
        if (v15 < 5)
        {
          v57 = v40;
          v371 = v40;
          LODWORD(v372) = 4;
        }
        else
        {
          if (v15 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1944B859CLL);
          }
          v57 = (WTF *)WTF::fastMalloc((WTF *)(8 * v15));
          LODWORD(v372) = v15;
          v371 = v57;
        }
        memcpy(v57, v56, 8 * v51);
        if (v40 != v56 && v56)
        {
          if (v371 == v56)
          {
            v371 = 0;
            LODWORD(v372) = 0;
          }
          WTF::fastFree(v56, v58);
        }
        LODWORD(v51) = HIDWORD(v372);
        v52 = (int **)((char *)v371 + 8 * HIDWORD(v372));
        v21 = v337;
        v22 = v40;
        v23 = v322;
        v25 = v327;
        v26 = MEMORY[0x1E0CBF868];
        a5 = &jpt_1944B56A0;
      }
      else
      {
        v52 = (int **)((char *)v371 + 8 * HIDWORD(v372));
      }
      *v52 = v47;
      v14 = (v51 + 1);
      HIDWORD(v372) = v14;
      v16 += (v17 + 1);
      v358 = v16;
      --v35;
      v19 = v351;
      if (!v35)
      {
        v77 = v23;
        v78 = v21;
        v367 = v25;
        v368 = 4;
        v79 = v371;
        v80 = v25;
        v81 = v22;
        if (v371 == v22)
        {
          memcpy(v25, v22, 8 * v14);
        }
        else
        {
          v371 = v22;
          v367 = v79;
          v98 = v372;
          LODWORD(v372) = 4;
          v368 = v98;
        }
        HIDWORD(v372) = 0;
        v369 = v14;
        WebCore::CSSFunctionValue::create(v343, (uint64_t)&v367, v374);
        v82 = v374[0];
        v374[0] = 0;
        v21 = v78;
        v22 = v81;
        v23 = v77;
        v25 = v80;
        a5 = &jpt_1944B56A0;
        if (v369)
        {
          v83 = v367;
          v84 = 8 * v369;
          do
          {
            v85 = *(_DWORD **)v83;
            *(_QWORD *)v83 = 0;
            if (v85)
            {
              if (*v85 == 2)
              {
                v86 = v22;
                v345 = (void *)v82;
                WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v85, (WTF::StringImpl *)a2);
                v82 = (uint64_t)v345;
                a5 = &jpt_1944B56A0;
                v25 = v327;
                v23 = v77;
                v22 = v86;
                v21 = v78;
              }
              else
              {
                *v85 -= 2;
              }
            }
            v83 = (WTF *)((char *)v83 + 8);
            v84 -= 8;
          }
          while (v84);
        }
        v87 = v367;
        if (v25 != v367 && v367 != 0)
        {
          v367 = 0;
          v368 = 0;
          v106 = v22;
          v107 = v25;
          v108 = v82;
          WTF::fastFree(v87, (void *)a2);
          v82 = v108;
          a5 = &jpt_1944B56A0;
          v25 = v107;
          v23 = v77;
          v22 = v106;
          v21 = v78;
        }
        goto LABEL_145;
      }
    }
    if (v42 == 6)
      goto LABEL_65;
    if (v42 != 3)
      goto LABEL_216;
LABEL_80:
    if (v343 != 859 && (v343 != 860 || v35 != 1))
    {
      v53 = (int)v43;
      v46 = 3;
      if ((int)v43 <= 0xFF && *(_QWORD *)&v43 == COERCE__INT64((double)v53))
      {
        v47 = &WebCore::staticCSSValuePool[4 * v53 + 1040];
        *v47 += 2;
        goto LABEL_74;
      }
      goto LABEL_72;
    }
LABEL_216:
    v82 = 0;
    v19 = v351;
LABEL_217:
    v21 = v15;
    v22 = v40;
    v23 = v322;
    v25 = v327;
    a5 = &jpt_1944B56A0;
LABEL_145:
    v89 = v371;
    if (HIDWORD(v372))
    {
      v90 = 8 * HIDWORD(v372);
      do
      {
        v91 = *(_DWORD **)v89;
        *(_QWORD *)v89 = 0;
        if (v91)
        {
          if (*v91 == 2)
          {
            v92 = v21;
            v93 = v22;
            v94 = v23;
            v95 = v25;
            v346 = (void *)v82;
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v91, (WTF::StringImpl *)a2);
            v82 = (uint64_t)v346;
            a5 = &jpt_1944B56A0;
            v25 = v95;
            v23 = v94;
            v22 = v93;
            v21 = v92;
          }
          else
          {
            *v91 -= 2;
          }
        }
        v89 = (WTF *)((char *)v89 + 8);
        v90 -= 8;
      }
      while (v90);
      v89 = v371;
    }
    if (v22 != v89 && v89 != 0)
    {
      v371 = 0;
      LODWORD(v372) = 0;
      v99 = v89;
      v100 = v21;
      v101 = v22;
      v102 = v23;
      v103 = v25;
      v104 = a5;
      v105 = v82;
      WTF::fastFree(v99, (void *)a2);
      v82 = v105;
      a5 = v104;
      v25 = v103;
      v23 = v102;
      v22 = v101;
      v21 = v100;
    }
LABEL_158:
    if (!v82)
      goto LABEL_633;
LABEL_159:
    v14 = HIDWORD(v355);
    if (HIDWORD(v355) == (_DWORD)v355)
    {
      v347 = (void *)v82;
      v135 = a5;
      v324 = v23;
      v330 = v25;
      v136 = v22;
      v137 = v21;
      v138 = HIDWORD(v355) + ((unint64_t)HIDWORD(v355) >> 2);
      if (v138 >= 0x10)
        v139 = v138 + 1;
      else
        v139 = 16;
      if (v139 <= (unint64_t)HIDWORD(v355) + 1)
        v140 = HIDWORD(v355) + 1;
      else
        v140 = v139;
      v141 = v353;
      if (v140 < 5)
      {
        v142 = v351;
        v353 = v351;
        LODWORD(v355) = 4;
      }
      else
      {
        if (v140 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1944B85A4);
        }
        v142 = (WTF *)WTF::fastMalloc((WTF *)(8 * v140));
        LODWORD(v355) = v140;
        v353 = v142;
      }
      memcpy(v142, v141, 8 * HIDWORD(v355));
      if (v351 != v141 && v141)
      {
        if (v353 == v141)
        {
          v353 = 0;
          LODWORD(v355) = 0;
        }
        WTF::fastFree(v141, (void *)a2);
      }
      v14 = HIDWORD(v355);
      v19 = v351;
      v97 = (uint64_t *)((char *)v353 + 8 * HIDWORD(v355));
      v21 = v137;
      v22 = v136;
      v23 = v324;
      v25 = v330;
      a5 = v135;
      v82 = (uint64_t)v347;
    }
    else
    {
      v97 = (uint64_t *)((char *)v353 + 8 * HIDWORD(v355));
    }
    *v97 = v82;
    v20 = v14 + 1;
    HIDWORD(v355) = v14 + 1;
    v16 = v358;
    v24 = __dst;
  }
  while (v358 < v21);
LABEL_574:
  if (!v20)
    goto LABEL_589;
  v371 = (WTF *)v373;
  LODWORD(v372) = 4;
  v281 = v353;
  if (v353 == v19)
  {
    memcpy(v373, v19, 8 * v20);
  }
  else
  {
    v353 = v19;
    v371 = v281;
    LODWORD(v372) = v355;
  }
  HIDWORD(v355) = 0;
  HIDWORD(v372) = v20;
  WebCore::CSSTransformListValue::create((uint64_t)&v371, &v367);
  *v18 = (int *)v367;
  v367 = 0;
  if (HIDWORD(v372))
  {
    v282 = v371;
    v283 = 8 * HIDWORD(v372);
    do
    {
      v284 = *(_DWORD **)v282;
      *(_QWORD *)v282 = 0;
      if (v284)
      {
        if (*v284 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v284, (WTF::StringImpl *)a2);
        else
          *v284 -= 2;
      }
      v282 = (WTF *)((char *)v282 + 8);
      v283 -= 8;
    }
    while (v283);
  }
  v285 = v371;
  if (v373 != (_BYTE *)v371 && v371 != 0)
  {
    v371 = 0;
    LODWORD(v372) = 0;
    WTF::fastFree(v285, (void *)a2);
  }
LABEL_634:
  if (HIDWORD(v355))
  {
    v300 = v353;
    v301 = 8 * HIDWORD(v355);
    do
    {
      v302 = *(_DWORD **)v300;
      *(_QWORD *)v300 = 0;
      if (v302)
      {
        if (*v302 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v302, (WTF::StringImpl *)a2);
        else
          *v302 -= 2;
      }
      v300 = (WTF *)((char *)v300 + 8);
      v301 -= 8;
    }
    while (v301);
  }
LABEL_641:
  result = (uint64_t)v353;
  v296 = v19 == v353;
LABEL_642:
  if (!v296 && result != 0)
    return WTF::fastFree((WTF *)result, (void *)a2);
  return result;
}

_DWORD **WebCore::Style::Resolver::keyframeRulesForName@<X0>(_DWORD **this@<X0>, const WTF::AtomString *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  void *v14;
  int v15;
  unsigned int j;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t ***v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int k;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  BOOL v36;
  WebCore::StyleRuleKeyframe *v38;
  WebCore::MutableStyleProperties *v39;
  const WTF::StringImpl *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  WebCore::StyleRuleKeyframe *v46;
  WebCore::MutableStyleProperties *v47;
  const WTF::StringImpl *v48;
  WebCore::StyleRuleKeyframe *v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int m;
  uint64_t v54;
  uint64_t v55;
  double v56;
  char *v57;
  BOOL v58;
  uint64_t v60;
  _DWORD *v61;
  char *v62;
  _DWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  WebCore::StyleRuleKeyframe **v70;
  uint64_t v71;
  WebCore::StyleRuleKeyframe *v72;
  WebCore::StyleRuleKeyframe *v73;
  uint64_t v74;
  uint64_t ***v75;
  uint64_t v76;
  int v77;
  WebCore::StyleRuleKeyframe *v78;
  char *v79;
  uint64_t v80;
  uint64_t **v81;
  char *v82;
  _QWORD *v83;
  uint64_t *v84;
  _QWORD v85[2];
  _DWORD **v86;
  __int16 v87;
  uint64_t **v88;

  v4 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v4 + 4))
    goto LABEL_2;
  v5 = (uint64_t)this[44];
  if (v5)
  {
    v6 = 0;
    for (i = *(_DWORD *)(v4 + 16) >> 8; ; i = v6 + v8)
    {
      v8 = i & *(_DWORD *)(v5 - 8);
      v9 = *(_QWORD *)(v5 + 16 * v8);
      if (!v9)
        break;
      if (v9 != -1 && v9 == v4)
      {
        v11 = *(unsigned int *)(v5 - 4);
        goto LABEL_14;
      }
      ++v6;
    }
    v11 = *(unsigned int *)(v5 - 4);
    v8 = v11;
LABEL_14:
    if (v11 != v8)
      goto LABEL_15;
  }
  if (_MergedGlobals_266 != 1)
  {
    qword_1ECE84C58 = 0;
    _MergedGlobals_266 = 1;
LABEL_2:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    return this;
  }
  v5 = qword_1ECE84C58;
  if (!qword_1ECE84C58)
    goto LABEL_2;
  v15 = 0;
  for (j = *(_DWORD *)(v4 + 16) >> 8; ; j = ++v15 + v8)
  {
    v8 = j & *(_DWORD *)(qword_1ECE84C58 - 8);
    v17 = *(_QWORD *)(qword_1ECE84C58 + 16 * v8);
    if (!v17)
      break;
    if (v17 != -1 && v17 == v4)
      goto LABEL_125;
  }
  v8 = *(unsigned int *)(qword_1ECE84C58 - 4);
LABEL_125:
  if (v8 == *(_DWORD *)(qword_1ECE84C58 - 4))
    goto LABEL_2;
LABEL_15:
  v87 = 0;
  v85[0] = &v87;
  v85[1] = &v86;
  v86 = 0;
  v12 = WebCore::StyleRuleKeyframes::keyframes(*(WebCore::StyleRuleKeyframes **)(v5 + 16 * v8 + 8));
  v81 = &v84;
  v82 = (char *)&v87 + 1;
  v83 = v85;
  v84 = (uint64_t *)v12;
  if ((WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_2::operator()(&v81) & 1) != 0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v80 = 0;
    v19 = *((unsigned int *)v84 + 3);
    if (!(_DWORD)v19)
      goto LABEL_122;
    v20 = *v84;
    v74 = *v84 + 8 * v19;
    while (1)
    {
      v21 = *(_DWORD **)v20;
      *v21 = **(_DWORD **)v20 + 1;
      v77 = WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_3::operator()(*((_QWORD *)v21 + 1));
      if (*v21 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v21, v22);
      else
        --*v21;
      v23 = *(_DWORD **)v20;
      *v23 = **(_DWORD **)v20 + 1;
      WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_0::operator()(&v79, (uint64_t)v85, (uint64_t)v23);
      if (*v23 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v23, v13);
      else
        --*v23;
      v76 = v20;
      v24 = *(unsigned int *)(*(_QWORD *)v20 + 28);
      v25 = v79;
      if (!(_DWORD)v24)
        goto LABEL_113;
      v26 = *(uint64_t ****)(*(_QWORD *)v20 + 16);
      v75 = &v26[v24];
      do
      {
        v27 = *v26;
        v81 = *v26;
        if (v25)
          ++*((_DWORD *)v25 + 2);
        v28 = v27;
        v82 = v25;
        LOBYTE(v83) = v77;
        v29 = v80;
        if (v80)
        {
          v30 = *(_DWORD *)(v80 - 8);
          v31 = WTF::IdentityHashTranslator<WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::hash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>((uint64_t)&v81);
          for (k = 0; ; v31 = k + v33)
          {
            v33 = v31 & v30;
            v34 = v29 + 32 * v33;
            v35 = *(char **)(v34 + 8);
            if (*(uint64_t ***)v34 == v28 && v35 == v25 && *(unsigned __int8 *)(v34 + 16) == v77)
              break;
            v36 = *(double *)v34 == INFINITY && v35 == 0;
            if (v36 && !*(_BYTE *)(v34 + 16))
              goto LABEL_55;
            ++k;
          }
          v38 = *(WebCore::StyleRuleKeyframe **)(v29 + 32 * v33 + 24);
          if (v38)
          {
            v39 = WebCore::StyleRuleKeyframe::mutableProperties(v38);
            WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(v39, *(const WebCore::StyleProperties **)(*(_QWORD *)v76 + 8), v40);
            v41 = v25;
            goto LABEL_97;
          }
        }
LABEL_55:
        v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x60);
        *v42 = 0x900000001;
        v42[1] = 0;
        v42[2] = v42 + 4;
        v42[3] = 4;
        v43 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)v43 = 1;
        *(_BYTE *)(v43 + 4) = *(_BYTE *)(v43 + 4) & 0xC0 | 8;
        *(_QWORD *)(v43 + 8) = v42;
        *(_QWORD *)(v43 + 24) = 0;
        *(_QWORD *)(v43 + 16) = 0;
        v78 = (WebCore::StyleRuleKeyframe *)v43;
        v88 = v28;
        v44 = (_QWORD *)WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v43 + 16, 1uLL, (unint64_t)&v88);
        v45 = *(unsigned int *)(v43 + 28);
        *(_QWORD *)(*(_QWORD *)(v43 + 16) + 8 * v45) = *v44;
        v46 = v78;
        *(_DWORD *)(v43 + 28) = v45 + 1;
        v47 = WebCore::StyleRuleKeyframe::mutableProperties(v46);
        WebCore::MutableStyleProperties::mergeAndOverrideOnConflict(v47, *(const WebCore::StyleProperties **)(*(_QWORD *)v76 + 8), v48);
        v49 = v78;
        if (v29
          || (WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::KeyValuePair<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashMap<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::rehash(&v80, 8u), (v29 = v80) != 0))
        {
          v50 = *(_DWORD *)(v29 - 8);
        }
        else
        {
          v50 = 0;
        }
        v51 = WTF::IdentityHashTranslator<WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::hash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>((uint64_t)&v81);
        v52 = 0;
        for (m = 1; ; ++m)
        {
          v54 = v51 & v50;
          v55 = v29 + 32 * v54;
          v56 = *(double *)v55;
          v57 = *(char **)(v55 + 8);
          v58 = *(double *)v55 == INFINITY && v57 == 0;
          if (v58 && !*(_BYTE *)(v55 + 16))
          {
            v62 = v25;
            if (v52)
            {
              *(_QWORD *)v52 = 0x7FF0000000000000;
              *(_QWORD *)(v52 + 8) = 0;
              *(_BYTE *)(v52 + 16) = 0;
              *(_QWORD *)(v52 + 24) = 0;
              v28 = v81;
              --*(_DWORD *)(v80 - 16);
              v62 = v82;
              v55 = v52;
            }
            *(_QWORD *)v55 = v28;
            WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>::operator=((_DWORD **)(v55 + 8), v62);
            *(_BYTE *)(v55 + 16) = (_BYTE)v83;
            if (v49)
              ++*(_DWORD *)v49;
            v63 = *(_DWORD **)(v55 + 24);
            *(_QWORD *)(v55 + 24) = v49;
            if (v63)
            {
              if (*v63 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v63, v13);
              else
                --*v63;
            }
            v64 = v80;
            if (v80)
              v65 = *(_DWORD *)(v80 - 12) + 1;
            else
              v65 = 1;
            *(_DWORD *)(v80 - 12) = v65;
            v66 = (*(_DWORD *)(v64 - 16) + v65);
            v67 = *(unsigned int *)(v64 - 4);
            if (v67 > 0x400)
            {
              if (v67 > 2 * v66)
                goto LABEL_92;
LABEL_90:
              v68 = (_DWORD)v67 << (6 * v65 >= (2 * v67));
            }
            else
            {
              if (3 * v67 > 4 * v66)
                goto LABEL_92;
              if ((_DWORD)v67)
                goto LABEL_90;
              v68 = 8;
            }
            WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::KeyValuePair<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashMap<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::rehash(&v80, v68);
            goto LABEL_92;
          }
          if (v28 == *(uint64_t ***)&v56 && v57 == v25 && *(unsigned __int8 *)(v55 + 16) == v77)
            break;
          if (v56 == -INFINITY)
            v52 = v29 + 32 * v54;
          v51 = m + v54;
        }
        if (v49)
          ++*(_DWORD *)v49;
        v60 = v29 + 32 * v54;
        v61 = *(_DWORD **)(v60 + 24);
        *(_QWORD *)(v60 + 24) = v49;
        if (v61)
        {
          if (*v61 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v61, v13);
          else
            --*v61;
        }
LABEL_92:
        v69 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v69 == *(_DWORD *)(a3 + 8))
        {
          v70 = (WebCore::StyleRuleKeyframe **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v69 + 1, (unint64_t)&v78);
          v69 = *(unsigned int *)(a3 + 12);
          v71 = *(_QWORD *)a3;
          v72 = *v70;
          ++*(_DWORD *)*v70;
        }
        else
        {
          v71 = *(_QWORD *)a3;
          v72 = v78;
          ++*(_DWORD *)v78;
        }
        *(_QWORD *)(v71 + 8 * v69) = v72;
        *(_DWORD *)(a3 + 12) = v69 + 1;
        v73 = v78;
        v78 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v73, v13);
          else
            --*(_DWORD *)v73;
        }
        v41 = v82;
LABEL_97:
        if (v41)
        {
          if (*((_DWORD *)v41 + 2) == 1)
            (*(void (**)(char *))(*(_QWORD *)v41 + 16))(v41);
          else
            --*((_DWORD *)v41 + 2);
        }
        ++v26;
      }
      while (v26 != v75);
LABEL_113:
      if (v25)
      {
        if (*((_DWORD *)v25 + 2) == 1)
          (*(void (**)(char *))(*(_QWORD *)v25 + 16))(v25);
        else
          --*((_DWORD *)v25 + 2);
      }
      v20 = v76 + 8;
      if (v76 + 8 == v74)
      {
LABEL_122:
        WTF::HashMap<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>,WTF::HashTableTraits>::~HashMap(&v80, v13);
        goto LABEL_17;
      }
    }
  }
  WTF::Vector<WTF::Ref<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a3, (uint64_t)v84);
LABEL_17:
  this = v86;
  if (v86)
    return (_DWORD **)WTF::HashTable<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>>::deallocateTable(v86, v14);
  return this;
}

uint64_t WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_2::operator()(uint64_t ***a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int i;
  unsigned int v30;
  double v31;
  _DWORD *v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t result;
  int v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;

  v45 = 0;
  v1 = **a1;
  v2 = *((unsigned int *)v1 + 3);
  if (!(_DWORD)v2)
    return 0;
  v4 = *v1;
  v43 = *v1 + 8 * v2;
  do
  {
    v5 = *(_DWORD **)v4;
    *v5 = **(_DWORD **)v4 + 1;
    v7 = WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_3::operator()(*((_QWORD *)v5 + 1));
    if (*v5 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v5, v6);
    else
      --*v5;
    v8 = (uint64_t)a1[2];
    v9 = *(_DWORD **)v4;
    *v9 = **(_DWORD **)v4 + 1;
    WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_0::operator()(&v44, v8, (uint64_t)v9);
    if (*v9 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v9, (WTF::StringImpl *)v10);
    else
      --*v9;
    v11 = *(unsigned int *)(*(_QWORD *)v4 + 28);
    v12 = v44;
    if (!(_DWORD)v11)
      goto LABEL_37;
    v13 = *(uint64_t **)(*(_QWORD *)v4 + 16);
    v14 = &v13[v11];
    v15 = ((unint64_t)v44 + ~((_QWORD)v44 << 32)) ^ (((unint64_t)v44 + ~((_QWORD)v44 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = 9 * ((~(v7 << 15) + v7) ^ ((~(v7 << 15) + v7) >> 10));
    v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
    v20 = 95187966
        * ((0xD7862706ELL
          * (unint64_t)(95187966 * (v19 ^ HIWORD(v19))
                             + 277951225 * ((v17 >> 31) ^ v17))) >> 4);
    while (2)
    {
      v21 = *v13;
      if (v12)
        ++v12[2];
      v22 = v45;
      if (v45
        || (WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::expand(&v45),
            (v22 = v45) != 0))
      {
        v23 = *(_DWORD *)(v22 - 8);
      }
      else
      {
        v23 = 0;
      }
      v24 = 0;
      v25 = (~(v21 << 32) + v21) ^ ((unint64_t)(~(v21 << 32) + v21) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = (0xD7862706ELL
           * (unint64_t)(v20 + 277951225 * ((v27 >> 31) ^ v27))) >> 4;
      for (i = 1; ; ++i)
      {
        v30 = v28 & v23;
        v10 = v22 + 24 * v30;
        v31 = *(double *)v10;
        v32 = *(_DWORD **)(v10 + 8);
        v33 = *(double *)v10 == INFINITY && v32 == 0;
        if (v33 && !*(_BYTE *)(v10 + 16))
          break;
        if (v21 == *(_QWORD *)&v31 && v32 == v12 && *(unsigned __int8 *)(v10 + 16) == v7)
        {
          if (v12)
          {
            v41 = v12[2] - 1;
            if (v12[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
              v41 = v12[2];
            }
            else
            {
              v12[2] = v41;
            }
            v42 = v41 - 1;
            if (v42)
              v12[2] = v42;
            else
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
          }
          v38 = 1;
          goto LABEL_46;
        }
        if (v31 == -INFINITY)
          v24 = v22 + 24 * v30;
        LODWORD(v28) = i + v30;
      }
      if (v24)
      {
        *(_QWORD *)v24 = 0x7FF0000000000000;
        *(_QWORD *)(v24 + 8) = 0;
        *(_BYTE *)(v24 + 16) = 0;
        --*(_DWORD *)(v45 - 16);
        v10 = v24;
      }
      *(_QWORD *)v10 = v21;
      *(_QWORD *)(v10 + 8) = v12;
      *(_BYTE *)(v10 + 16) = v7;
      v34 = v45;
      if (v45)
        v35 = *(_DWORD *)(v45 - 12) + 1;
      else
        v35 = 1;
      *(_DWORD *)(v45 - 12) = v35;
      v36 = (*(_DWORD *)(v34 - 16) + v35);
      v37 = *(unsigned int *)(v34 - 4);
      if (v37 > 0x400)
      {
        if (v37 > 2 * v36)
          goto LABEL_30;
      }
      else if (3 * v37 > 4 * v36)
      {
        goto LABEL_30;
      }
      WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::expand(&v45);
LABEL_30:
      if (++v13 != v14)
        continue;
      break;
    }
LABEL_37:
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
      else
        --v12[2];
    }
    v4 += 8;
  }
  while (v4 != v43);
  v38 = 0;
  result = 0;
  v22 = v45;
  if (v45)
  {
LABEL_46:
    WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::deallocateTable(v22, (void *)v10);
    return v38;
  }
  return result;
}

uint64_t WebCore::StyleRuleKeyframes::keyframes(WebCore::StyleRuleKeyframes *this)
{
  return (uint64_t)this + 8;
}

uint64_t WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _DWORD *v12;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::allocateTable(a2);
  *a1 = result;
  *(_DWORD *)(result - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = v4;
    v10 = v5;
    do
    {
      if (*(double *)v9 != -INFINITY)
      {
        v11 = *(double *)v9 == INFINITY && *(_QWORD *)(v9 + 8) == 0;
        if (!v11 || *(_BYTE *)(v9 + 16))
        {
          WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::reinsert(*a1, v9);
          v12 = *(_DWORD **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v12)
          {
            if (v12[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
            else
              --v12[2];
          }
        }
        else
        {
          *(_QWORD *)(v9 + 8) = 0;
        }
      }
      v9 += 24;
      --v10;
    }
    while (v10);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  double *v4;
  _DWORD *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (double *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -INFINITY)
      {
        v5 = *(_DWORD **)v4;
        *v4 = 0.0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
          else
            --v5[2];
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE *v5;

  v2 = WTF::fastMalloc((WTF *)(24 * a1 + 16));
  result = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = (_BYTE *)(v2 + 32);
    do
    {
      *((_QWORD *)v5 - 2) = 0x7FF0000000000000;
      *((_QWORD *)v5 - 1) = 0;
      *v5 = 0;
      v5 += 24;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  _DWORD *v8;
  uint64_t result;
  unsigned int v10;
  _DWORD **v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  int v22;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = (_DWORD *)*a3;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v10 = result & v7;
  v11 = (_DWORD **)(v6 + 8 * (result & v7));
  v12 = *v11;
  if (*v11)
  {
    v21 = 0;
    v22 = 1;
    do
    {
      if (v12 == v8)
      {
        v20 = 0;
        v19 = v6 + 8 * *(unsigned int *)(v6 - 4);
        goto LABEL_12;
      }
      if (v12 == (_DWORD *)-1)
        v21 = v11;
      v10 = (v10 + v22) & v7;
      v11 = (_DWORD **)(v6 + 8 * v10);
      v12 = *v11;
      ++v22;
    }
    while (*v11);
    if (v21)
    {
      *v21 = 0;
      --*(_DWORD *)(*a2 - 16);
      v8 = (_DWORD *)*a3;
      v11 = (_DWORD **)v21;
    }
  }
  result = (uint64_t)WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>::operator=(v11, v8);
  v13 = *a2;
  if (*a2)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *a2;
  if (*a2)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_11;
LABEL_16:
    result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>>::expand(a2, (uint64_t *)v11);
    v11 = (_DWORD **)result;
    v15 = *a2;
    if (*a2)
      v18 = *(unsigned int *)(v15 - 4);
    else
      v18 = 0;
    goto LABEL_11;
  }
  if (3 * v18 <= 4 * v17)
    goto LABEL_16;
LABEL_11:
  v19 = v15 + 8 * v18;
  v20 = 1;
LABEL_12:
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v19;
  *(_BYTE *)(a1 + 16) = v20;
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _DWORD *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (uint64_t *)v6;
    do
    {
      if (*v14 != -1)
      {
        if (*v14)
        {
          v15 = WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::reinsert(*a1, v14);
          v16 = (_DWORD *)*v14;
          *v14 = 0;
          if (v16)
          {
            if (v16[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
            else
              --v16[2];
          }
          if (v14 == a3)
            v11 = v15;
        }
        else
        {
          *v14 = 0;
        }
      }
      ++v14;
      --v13;
    }
    while (v13);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>>::deallocateTable(_DWORD **a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (_DWORD *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
          else
            --v5[2];
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

_DWORD **WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>::operator=(_DWORD **a1, _DWORD *a2)
{
  _DWORD *v3;

  if (a2)
    ++a2[2];
  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  return a1;
}

void WebCore::HTMLInputElement::attributeChanged(_QWORD *a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  _DWORD *v11;
  WTF::StringImpl *v12;
  __n128 v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  _BOOL4 v16;
  __int16 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  uint64_t *v30;
  unint64_t v31;
  int v32;
  int v33;
  WebCore::RenderObject *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  BOOL v41;
  char v42;
  __int16 v43;
  __int16 v44;
  int v45;
  WTF::StringImpl *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  WTF::StringImpl *v50;
  WebCore::FormController *v51;
  WTF *v52;
  void *v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _WORD *v68;
  __int16 v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  __int16 v74;
  __int16 v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WebCore::Node *ElementSibling;
  WebCore::Element *v81;
  uint64_t v82;
  _QWORD *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  char v86;

  if (*(WTF::StringImpl **)a3 != *a4)
  {
    v11 = (_DWORD *)a1[30];
    ++v11[2];
    if (*(_QWORD *)a2 == WebCore::HTMLNames::placeholderAttr)
    {
      (*(void (**)(_QWORD *))(*a1 + 1448))(a1);
      WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextFormControlElement *)a1);
    }
    else
    {
      WebCore::HTMLFormControlElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5, a6);
    }
    v14 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
    if (v14 > 0x3B7)
    {
      if (v14 != 952)
        goto LABEL_87;
      if (!a5)
      {
        WebCore::HTMLInputElement::updateType((WebCore::HTMLInputElement *)a1, (const WTF::AtomString *)a4);
        goto LABEL_87;
      }
LABEL_88:
      if (v11[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
      else
        --v11[2];
      return;
    }
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) > 0x353u)
    {
      if (v14 == 899)
      {
        if (a5)
          goto LABEL_88;
        if ((*((_WORD *)a1 + 115) & 0xC0) == 0x80)
        {
          WebCore::HTMLInputElement::unregisterForSuspensionCallbackIfNeeded((WebCore::HTMLInputElement *)a1);
          WebCore::HTMLInputElement::registerForSuspensionCallbackIfNeeded((WebCore::HTMLInputElement *)a1);
        }
        if (!a1[27])
        {
          WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextFormControlElement *)a1);
          WebCore::Node::invalidateStyle((uint64_t)a1, 4u, 0);
          if ((*((_BYTE *)a1 + 71) & 1) != 0)
          {
            v79 = a1[4];
            if (!v79 || (*(_WORD *)(v79 + 28) & 8) == 0 || (*(_BYTE *)(v79 + 70) & 4) == 0)
            {
              ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling((uint64_t)a1);
              WebCore::invalidateForSiblingCombinators(ElementSibling, v81);
            }
          }
          *((_BYTE *)a1 + 168) &= ~2u;
        }
        WebCore::ValidatedFormListedElement::updateValidity((uint64_t)(a1 + 14));
        *((_WORD *)a1 + 116) = ((2 * *((_WORD *)a1 + 116)) & 0x80 | a1[29] & 0xFF7F) ^ 0x80;
LABEL_87:
        (*(void (**)(_QWORD, WTF::StringImpl *))(*(_QWORD *)a1[30] + 752))(a1[30], a2);
        if (!v11)
          return;
        goto LABEL_88;
      }
      if (v14 != 852)
      {
        if (v14 == 871 && (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 680) + 696) & 0x1000000000000) != 0)
        {
          *((_WORD *)a1 + 116) = a1[29] & 0xDFFF | ((*a4 != 0) << 13);
          v23 = a1[30];
          if (*(_DWORD *)(v23 + 12) == 2)
          {
            v24 = *(_QWORD *)(v23 + 24);
            if (v24 && (v25 = *(_QWORD *)(v24 + 8)) != 0 && (*(_WORD *)(v25 + 232) & 0x2000) != 0)
              WebCore::InputType::createShadowSubtreeIfNeeded(v23);
            else
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 520))(v23);
          }
          if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x1944B9FA4);
            }
            WebCore::Node::invalidateStyle((uint64_t)a1, 4u, 2);
          }
          WebCore::HTMLInputElement::updateTouchEventHandler((uint64_t)a1);
        }
        goto LABEL_87;
      }
LABEL_101:
      WebCore::ValidatedFormListedElement::updateValidity((uint64_t)(a1 + 14));
      goto LABEL_87;
    }
    if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) > 0x206u)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)a2 + 10) <= 0x2FFu)
      {
        switch(*(_WORD *)(*(_QWORD *)a2 + 10))
        {
          case 0x207:
            goto LABEL_55;
          case 0x228:
            if (*a4)
            {
              v68 = a1 + 29;
              v69 = *((_WORD *)a1 + 116);
              if (*((_DWORD *)*a4 + 1))
              {
                *((_WORD *)a1 + 116) = v69 | 0x10;
                WebCore::HTMLInputElement::resetListAttributeTargetObserver((WebCore::HTMLInputElement *)a1);
                WebCore::HTMLInputElement::dataListMayHaveChanged((WebCore::HTMLInputElement *)a1[30]);
                goto LABEL_87;
              }
            }
            else
            {
              v68 = a1 + 29;
              v69 = *((_WORD *)a1 + 116);
            }
            *v68 = v69 & 0xFFEF;
            goto LABEL_87;
          case 0x242:
          case 0x249:
          case 0x24E:
            goto LABEL_101;
          case 0x243:
            WebCore::HTMLInputElement::maxLengthAttributeChanged((WebCore::HTMLInputElement *)a1, *a4);
            goto LABEL_87;
          case 0x24A:
            WebCore::HTMLInputElement::minLengthAttributeChanged((WebCore::HTMLInputElement *)a1, *a4);
            goto LABEL_87;
          case 0x250:
            if (*(_DWORD *)(a1[30] + 12) != 4096)
              goto LABEL_45;
            v70 = a1[15];
            if (v70 && (v77 = *(_QWORD *)(v70 + 8)) != 0)
            {
              v71 = (_QWORD *)(v77 + 160);
            }
            else
            {
              if ((*((_BYTE *)a1 + 22) & 0x18) == 0)
                goto LABEL_45;
              v71 = WebCore::TreeScope::radioButtonGroups((WebCore::TreeScope *)a1[5]);
            }
            WebCore::RadioButtonGroups::removeButton((uint64_t)v71, (WebCore::HTMLInputElement *)a1);
LABEL_45:
            v26 = *a4;
            if (*a4)
              *(_DWORD *)v26 += 2;
            v27 = (WTF::StringImpl *)a1[26];
            a1[26] = v26;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2)
                WTF::StringImpl::destroy(v27, v12);
              else
                *(_DWORD *)v27 -= 2;
            }
            if (*(_DWORD *)(a1[30] + 12) != 4096)
              goto LABEL_51;
            v72 = a1[15];
            if (v72 && (v78 = *(_QWORD *)(v72 + 8)) != 0)
            {
              v73 = (uint64_t *)(v78 + 160);
            }
            else
            {
              if ((*((_BYTE *)a1 + 22) & 0x18) == 0)
                goto LABEL_51;
              v73 = WebCore::TreeScope::radioButtonGroups((WebCore::TreeScope *)a1[5]);
            }
            WebCore::RadioButtonGroups::addButton(v73, (WebCore::HTMLInputElement *)a1);
LABEL_51:
            if (*(_QWORD *)a2 == WebCore::HTMLNames::placeholderAttr)
            {
              (*(void (**)(_QWORD *))(*a1 + 1448))(a1);
              WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility((WebCore::HTMLTextFormControlElement *)a1);
            }
            else
            {
              WebCore::HTMLFormControlElement::attributeChanged((uint64_t)a1, a2, a3, a4, a5, v13);
            }
            goto LABEL_87;
          default:
            goto LABEL_87;
        }
      }
      if (v14 != 768)
      {
        if (v14 == 804)
        {
          if (*a4)
          {
            WebCore::parseHTMLInteger(*((uint64_t **)*a4 + 1), *((unsigned int *)*a4 + 1) | ((unint64_t)((*((_DWORD *)*a4 + 4) >> 2) & 1) << 32), &v82);
            v74 = v82;
            if ((int)v82 >= 256)
              v74 = 256;
            if (HIDWORD(v82))
              v75 = 0;
            else
              v75 = v74;
          }
          else
          {
            v75 = -1;
          }
          *((_WORD *)a1 + 114) = v75;
        }
        else if (v14 == 834)
        {
          v28 = *((_DWORD *)a1 + 56);
          v29 = *a4;
          if (*a4)
          {
            v30 = (uint64_t *)*((_QWORD *)v29 + 1);
            v31 = *((unsigned int *)v29 + 1) | ((unint64_t)((*((_DWORD *)v29 + 4) >> 2) & 1) << 32);
          }
          else
          {
            v30 = 0;
            v31 = 0x100000000;
          }
          WebCore::parseHTMLNonNegativeInteger(v30, v31, &v82);
          v32 = v82;
          if (!(_DWORD)v82)
            v32 = 20;
          if (HIDWORD(v82))
            v33 = 20;
          else
            v33 = v32;
          *((_DWORD *)a1 + 56) = v33;
          if (v33 != v28)
          {
            v34 = (WebCore::RenderObject *)(a1[8] & 0xFFFFFFFFFFFFLL);
            if (v34)
            {
              if ((*(_BYTE *)((a1[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1944B9F84);
              }
              WebCore::RenderObject::setNeedsLayoutAndPrefWidthsRecalc(v34);
            }
          }
        }
        goto LABEL_87;
      }
      goto LABEL_101;
    }
    if (v14 == 389)
    {
      v15 = *a4;
      v16 = *a4 != 0;
      v17 = *((_WORD *)a1 + 115);
      if (v16 == ((v17 & 4) == 0))
      {
        v86 = 0;
        if ((*(_WORD *)(a1[30] + 12) & 0x1002) != 0)
        {
          if ((*((_BYTE *)a1 + 22) & 8) == 0)
            goto LABEL_76;
          v18 = (uint64_t *)a1[5];
          v19 = v18[1];
          if (!*(_QWORD *)(v19 + 1944) || *(_BYTE *)(v19 + 3405))
            goto LABEL_76;
          if ((*((_BYTE *)a1 + 70) & 4) != 0)
          {
            v35 = *v18;
            v36 = (*(_WORD *)(v35 + 28) & 0x80) == 0 || v35 == 0;
            v37 = v35 + 216;
            if (v36)
              v37 = v19 + 1328;
            if (!*(_BYTE *)(*(_QWORD *)v37 + 236))
              goto LABEL_76;
          }
          v20 = *(_QWORD *)(v19 + 1272);
          if (v20 && (*(_BYTE *)(v20 + 70) & 4) != 0)
          {
LABEL_76:
            LOBYTE(v82) = 0;
            v84 = 0;
            v85 = 0;
            v83 = a1;
          }
          else
          {
            if (*(_BYTE *)(v19 + 3362)
              || (v21 = *(unsigned __int8 *)(v19 + 3390), !*(_BYTE *)(v19 + 3390))
              && (*(_BYTE *)(v19 + 70) & 8) == 0
              && !*(_QWORD *)(v19 + 1560)
              && (v22 = *(_QWORD *)(v19 + 1328), !*(_BYTE *)(v22 + 233))
              && !*(_BYTE *)(v22 + 234))
            {
              LOBYTE(v82) = 1;
              v84 = 0;
              v85 = 0;
              v83 = a1;
              goto LABEL_99;
            }
            v40 = *(unsigned __int8 *)(v19 + 3391);
            if (v21)
              v41 = v40 == 0;
            else
              v41 = 0;
            v42 = !v41;
            LOBYTE(v82) = v42;
            v84 = 0;
            v85 = 0;
            v83 = a1;
            if (!v41)
            {
LABEL_99:
              v43 = v15 != 0;
              WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v82, (WTF::StringImpl *)0x13, v16, 0);
              WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v83, &v84);
              v44 = *((_WORD *)a1 + 115);
              v45 = v82;
              v86 = 1;
              *((_WORD *)a1 + 115) = v44 & 0xFFFB | (4 * v43);
              if (v45)
                WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)v83, &v85);
              goto LABEL_78;
            }
          }
          v86 = 1;
          *((_WORD *)a1 + 115) = v17 & 0xFFFB | (4 * (v15 != 0));
LABEL_78:
          if (v85)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v85, v12);
          if (v84)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v84, v12);
          goto LABEL_82;
        }
        *((_WORD *)a1 + 115) = v17 & 0xFFFB | (4 * (v15 != 0));
      }
LABEL_82:
      if ((a1[29] & 0x40) == 0)
        goto LABEL_85;
      v38 = *(_QWORD *)(a1[5] + 8);
      v39 = *(_QWORD **)(v38 + 1352);
      if (!v39)
      {
        v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v39 = 0;
        v39[1] = 0;
        v51 = *(WebCore::FormController **)(v38 + 1352);
        *(_QWORD *)(v38 + 1352) = v39;
        if (v51)
        {
          WebCore::FormController::~FormController(v51, v50);
          WTF::fastFree(v52, v53);
          v39 = *(_QWORD **)(v38 + 1352);
        }
      }
      if (!*v39 || !*(_DWORD *)(*v39 - 12))
      {
LABEL_85:
        if ((*((_WORD *)a1 + 115) & 2) == 0)
        {
          WebCore::HTMLInputElement::setChecked((unsigned __int8 *)a1, *a4 != 0);
          *((_WORD *)a1 + 115) &= ~2u;
        }
      }
      goto LABEL_87;
    }
    if (v14 != 359)
    {
      if (v14 == 364)
LABEL_55:
        WebCore::Element::invalidateStyleForSubtree((WebCore::Element *)a1);
      goto LABEL_87;
    }
    v46 = *a4;
    if (!*a4)
    {
      v47 = *((_WORD *)a1 + 115);
      v48 = v47 & 0xC0;
      v49 = v47 & 0xFF3F;
      goto LABEL_105;
    }
    v54 = *((_DWORD *)v46 + 1);
    if (v54 != 3)
    {
      v55 = *((_WORD *)a1 + 115);
      v56 = v55 & 0xC0;
      v57 = v55 & 0xFF3F;
      if (v54)
        v57 |= 0x40u;
      *((_WORD *)a1 + 115) = v57;
      if (v56 != 128)
        goto LABEL_87;
LABEL_106:
      WebCore::HTMLInputElement::unregisterForSuspensionCallbackIfNeeded((WebCore::HTMLInputElement *)a1);
      goto LABEL_87;
    }
    v58 = *((_QWORD *)v46 + 1);
    if ((*((_BYTE *)v46 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v58 & 0xDF) == 0x4F && (*(_BYTE *)(v58 + 1) & 0xDF) == 0x46)
      {
        v59 = *(unsigned __int8 *)(v58 + 2);
        goto LABEL_119;
      }
    }
    else if ((*(_WORD *)v58 & 0xFFDF) == 0x4F && (*(_WORD *)(v58 + 2) & 0xFFDF) == 0x46)
    {
      v59 = *(unsigned __int16 *)(v58 + 4);
LABEL_119:
      if ((v59 & 0xFFFFFFDF) == 0x46)
      {
        *((_WORD *)a1 + 115) = *((_WORD *)a1 + 115) & 0xFF3F | 0x80;
        v60 = a1[30];
        if (v60)
        {
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 696))(v60) & 1) != 0)
            goto LABEL_134;
          if ((*((_WORD *)a1 + 115) & 0xC0) == 0x80)
          {
            if ((*(_DWORD *)(a1[30] + 12) & 0x2A8820) == 0)
              goto LABEL_134;
            v61 = a1[13];
            if (v61
              && ((v62 = *(_DWORD *)(v61 + 4), (v62 & 1) != 0)
                ? (v63 = *(_QWORD *)(v61 + 40), LODWORD(v64) = *(_DWORD *)(v61 + 52))
                : (v63 = v61 + 32, LODWORD(v64) = v62 >> 5),
                  (_DWORD)v64))
            {
              v64 = v64;
              v65 = (uint64_t *)(v63 + 8);
              while (1)
              {
                v66 = *(v65 - 1);
                if (v66 == WebCore::HTMLNames::valueAttr
                  || *(_QWORD *)(v66 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
                  && *(_QWORD *)(v66 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
                {
                  break;
                }
                v65 += 2;
                if (!--v64)
                {
                  v65 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                  break;
                }
              }
            }
            else
            {
              v65 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            }
            v67 = *v65;
            if (!v67 || !*(_DWORD *)(v67 + 4))
LABEL_134:
              WTF::WeakHashSet<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>(*(_QWORD *)(a1[5] + 8) + 1840, a1, (uint64_t)&v82);
          }
        }
        goto LABEL_87;
      }
    }
    v76 = *((_WORD *)a1 + 115);
    v48 = v76 & 0xC0;
    v49 = v76 & 0xFF3F | 0x40;
LABEL_105:
    *((_WORD *)a1 + 115) = v49;
    if (v48 != 128)
      goto LABEL_87;
    goto LABEL_106;
  }
}

void WebCore::HTMLFormControlElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::StringImpl **a4, int a5, __n128 a6)
{
  unsigned int *v11;
  const WTF::StringImpl *v12;
  WebCore::Node *v13;
  WTF::StringBuilder *v14;
  __n128 v15;
  unsigned int *AssignedSlot;
  uint64_t v17;
  unsigned int v18;
  int *v19;
  unsigned int v20;
  uint64_t v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int i;
  uint64_t v37;
  int *v38;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t *v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  __int16 v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  _BOOL4 v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  WebCore::HTMLMaybeFormAssociatedCustomElement *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  int v79;
  BOOL v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  WebCore::HTMLMaybeFormAssociatedCustomElement *v89;
  WTF::StringImpl **v90;
  WTF::StringImpl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WebCore::Page *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  WTF::StringImpl **v100;
  uint64_t v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;

  if (*(_QWORD *)a2 == WebCore::HTMLNames::requiredAttr)
  {
    v58 = *a4 != 0;
    v59 = *(unsigned __int8 *)(a1 + 168);
    if ((((*a4 == 0) ^ v59) & 1) != 0)
      return;
    if ((*(_BYTE *)(a1 + 22) & 8) == 0)
      goto LABEL_145;
    v60 = *(uint64_t **)(a1 + 40);
    v61 = v60[1];
    if (!*(_QWORD *)(v61 + 1944) || *(_BYTE *)(v61 + 3405))
      goto LABEL_145;
    if ((*(_BYTE *)(a1 + 70) & 4) != 0)
    {
      v70 = *v60;
      v71 = (*(_WORD *)(v70 + 28) & 0x80) == 0 || v70 == 0;
      v72 = v70 + 216;
      if (v71)
        v72 = v61 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v72 + 236))
        goto LABEL_145;
    }
    v62 = *(_QWORD *)(v61 + 1272);
    if (v62 && (*(_BYTE *)(v62 + 70) & 4) != 0)
    {
LABEL_145:
      LOBYTE(v100) = 0;
      v102 = 0;
      v103 = 0;
      v101 = a1;
    }
    else
    {
      if (!*(_BYTE *)(v61 + 3362)
        && ((v63 = *(unsigned __int8 *)(v61 + 3390), *(_BYTE *)(v61 + 3390))
         || (*(_BYTE *)(v61 + 70) & 8) != 0
         || *(_QWORD *)(v61 + 1560)
         || (v64 = *(_QWORD *)(v61 + 1328), *(_BYTE *)(v64 + 233))
         || *(_BYTE *)(v64 + 234)))
      {
        v79 = *(unsigned __int8 *)(v61 + 3391);
        if (v63)
          v80 = v79 == 0;
        else
          v80 = 0;
        v81 = !v80;
        LOBYTE(v100) = v81;
        v102 = 0;
        v103 = 0;
        v101 = a1;
        if (v80)
          goto LABEL_146;
      }
      else
      {
        LOBYTE(v100) = 1;
        v102 = 0;
        v103 = 0;
        v101 = a1;
      }
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v100, (WTF::StringImpl *)0x43, v58, 0);
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v100, (WTF::StringImpl *)0x39, !v58, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v101, &v102);
      LOBYTE(v59) = *(_BYTE *)(a1 + 168);
    }
LABEL_146:
    *(_BYTE *)(a1 + 168) = v59 & 0xFE | v58;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1320))(a1);
    if ((_BYTE)v100)
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v101, &v103);
    if (v103)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v103, v73);
    if (v102)
      WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v102, v73);
    return;
  }
  WebCore::Element::attributeChanged(a1, a2, a3, a4, a5, a6);
  if (*(WTF::StringImpl **)a3 == *a4)
    goto LABEL_5;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::styleAttr)
  {
    WebCore::StyledElement::styleAttributeChanged((WebCore::StyledElement *)a1, (WTF::StringImpl *)a4, a5);
    goto LABEL_5;
  }
  AssignedSlot = (unsigned int *)(*(uint64_t (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)a1 + 1144))(a1, a2);
  if ((_DWORD)AssignedSlot)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4) |= 4u;
    if ((*(_BYTE *)(a1 + 22) & 8) != 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (*(_QWORD *)(v26 + 1944))
      {
        if (!*(_BYTE *)(v26 + 3405) && !*(_BYTE *)(v26 + 3392))
        {
          *(_WORD *)(a1 + 30) |= 0x10u;
          v27 = *(_QWORD *)(a1 + 64);
          v28 = HIWORD(v27) & 7;
          if (v28 <= 2)
          {
            *(_QWORD *)(a1 + 64) = v27 & 0xFFF8FFFFFFFFFFFFLL | 0x3000000000000;
            if (!(_DWORD)v28)
            {
              *(_DWORD *)(a1 + 24) += 2;
              v29 = *(unsigned __int16 *)(a1 + 28);
              if ((v29 & 0x80) != 0)
              {
                v48 = *(_QWORD *)(a1 + 200);
                if (!v48)
                  goto LABEL_89;
              }
              else if ((~v29 & 0x408) == 0
                     && (AssignedSlot = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1),
                         (_DWORD)AssignedSlot))
              {
                v48 = *(_QWORD *)(a1 + 112);
                if (!v48)
                  goto LABEL_89;
              }
              else
              {
                v11 = *(unsigned int **)(a1 + 32);
                if (!v11)
                  goto LABEL_89;
                v30 = *((_WORD *)v11 + 14);
                if ((v30 & 0x80) == 0)
                {
                  if ((v30 & 8) != 0)
                  {
                    if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) == 0)
                      goto LABEL_42;
                    AssignedSlot = *(unsigned int **)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                    if (!AssignedSlot)
                      goto LABEL_42;
                    AssignedSlot = (unsigned int *)WebCore::ShadowRoot::findAssignedSlot((WebCore::ShadowRoot *)AssignedSlot, (const WebCore::Node *)a1);
                    v11 = AssignedSlot;
LABEL_112:
                    if (!v11)
                      goto LABEL_89;
LABEL_42:
                    *((_QWORD *)v11 + 8) |= 0x10000000000000uLL;
                    do
                    {
                      if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) != 0)
                      {
                        v33 = *(_QWORD *)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
                        if (v33)
                          *(_QWORD *)(v33 + 64) |= 0x8000000000000uLL;
                      }
                      v31 = *((_QWORD *)v11 + 8);
                      if ((v31 & 0x8000000000000) != 0)
                        break;
                      *((_QWORD *)v11 + 8) = v31 | 0x8000000000000;
                      AssignedSlot = (unsigned int *)*((_QWORD *)v11 + 4);
                      if (!AssignedSlot)
                        break;
                      v32 = *((_WORD *)AssignedSlot + 14);
                      if ((v32 & 0x80) != 0)
                      {
                        v69 = *((_QWORD *)AssignedSlot + 25);
                        if (!v69)
                          break;
                        AssignedSlot = *(unsigned int **)(v69 + 8);
                      }
                      else
                      {
                        if ((v32 & 8) == 0)
                          break;
                        if ((*((_QWORD *)AssignedSlot + 9) & 0xFFFFFFFFFFFFLL) != 0
                          && *(_QWORD *)((*((_QWORD *)AssignedSlot + 9) & 0xFFFFFFFFFFFFLL) + 0x58))
                        {
                          AssignedSlot = (unsigned int *)WebCore::ShadowRoot::findAssignedSlot(*(WebCore::ShadowRoot **)((*((_QWORD *)AssignedSlot + 9) & 0xFFFFFFFFFFFFLL)+ 0x58), (const WebCore::Node *)v11);
                        }
                      }
                      v11 = AssignedSlot;
                    }
                    while (AssignedSlot);
                  }
LABEL_89:
                  if (*(_DWORD *)(a1 + 24) == 2)
                  {
                    v54 = *(_WORD *)(a1 + 30);
                    if ((v54 & 0x400) == 0)
                    {
                      v55 = *(_WORD *)(a1 + 28);
                      if ((v55 & 0xF000) == 0x9000)
                      {
                        AssignedSlot = WebCore::Document::removedLastRef((WebCore::Document *)a1, v11);
                      }
                      else
                      {
                        if ((v55 & 0x20) != 0)
                        {
                          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
                          v54 = *(_WORD *)(a1 + 30);
                        }
                        *(_WORD *)(a1 + 30) = v54 | 0x400;
                        AssignedSlot = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
                      }
                    }
                  }
                  else
                  {
                    *(_DWORD *)(a1 + 24) -= 2;
                  }
                  v49 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
                  v50 = *(_QWORD *)(v49 + 1272);
                  if (v50)
                  {
                    v51 = *(_QWORD *)(v50 + 64);
                    if ((v51 & 0x8000000000000) != 0
                      || (v51 & 0x7000000000000) != 0
                      || (*(_WORD *)(v50 + 30) & 0x20) != 0)
                    {
                      *(_DWORD *)(v49 + 24) += 2;
                      *(_QWORD *)(v49 + 64) |= 0x8000000000000uLL;
                      if ((*(_QWORD *)(v49 + 1536) & 0xFFFFFFFFFFFFLL) == 0
                        || (v15.n128_u64[0] = *(_QWORD *)((*(_QWORD *)(v49 + 1536) & 0xFFFFFFFFFFFFLL) + 8),
                            v15.n128_f64[0] == 0.0))
                      {
                        if (!*(_BYTE *)(v49 + 3362))
                        {
                          *(_QWORD *)(v49 + 1528) = 0;
                          WTF::MonotonicTime::now((WTF::MonotonicTime *)AssignedSlot);
                          WebCore::TimerBase::setNextFireTime(v49 + 1504, v52 + 0.0);
                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                          {
                            v74 = *(_QWORD *)(v49 + 528);
                            if (v74)
                            {
                              v75 = *(_QWORD *)(v74 + 8);
                              if (v75)
                              {
                                v76 = *(_QWORD *)(v75 + 24);
                                if (v76)
                                {
                                  v77 = *(_QWORD *)(v76 + 8);
                                  if (v77)
                                    goto LABEL_156;
                                }
                              }
                            }
                            v82 = *(_QWORD *)(v49 + 2632);
                            if (v82)
                            {
                              v83 = *(_QWORD *)(v82 + 8);
                              if (v83)
                              {
                                v84 = *(_QWORD *)(v83 + 528);
                                if (v84)
                                {
                                  v85 = *(_QWORD *)(v84 + 8);
                                  if (v85)
                                  {
                                    v86 = *(_QWORD *)(v85 + 24);
                                    if (v86)
                                    {
                                      v77 = *(_QWORD *)(v86 + 8);
                                      if (v77)
                                      {
LABEL_156:
                                        v78 = *(WTF::StringImpl **)(*(_QWORD *)(v77 + 80) + 8);
                                        if (v78)
                                          WebCore::InspectorInstrumentation::didScheduleStyleRecalculationImpl(v78, (WebCore::Document *)v49);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      if (*(_DWORD *)(v49 + 24) == 2)
                      {
                        v56 = *(_WORD *)(v49 + 30);
                        if ((v56 & 0x400) == 0)
                        {
                          v57 = *(_WORD *)(v49 + 28);
                          if ((v57 & 0xF000) == 0x9000)
                          {
                            WebCore::Document::removedLastRef((WebCore::Document *)v49, v11);
                          }
                          else
                          {
                            if ((v57 & 0x20) != 0)
                            {
                              (*(void (**)(_QWORD))(**(_QWORD **)(v49 + 160) + 16))(*(_QWORD *)(v49 + 160));
                              v56 = *(_WORD *)(v49 + 30);
                            }
                            *(_WORD *)(v49 + 30) = v56 | 0x400;
                            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 72))(v49);
                          }
                        }
                      }
                      else
                      {
                        *(_DWORD *)(v49 + 24) -= 2;
                      }
                    }
                  }
                  goto LABEL_5;
                }
                v48 = *((_QWORD *)v11 + 25);
                if (!v48)
                  goto LABEL_89;
              }
              v11 = *(unsigned int **)(v48 + 8);
              goto LABEL_112;
            }
          }
        }
      }
    }
  }
LABEL_5:
  v17 = *(_QWORD *)a2;
  v18 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  if (v18 > 0x30C)
  {
    switch(v18)
    {
      case 0x36Au:
        v42 = *a4;
        if (*a4)
        {
          v43 = (uint64_t *)*((_QWORD *)v42 + 1);
          v44 = *((unsigned int *)v42 + 1) | ((unint64_t)((*((_DWORD *)v42 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v43 = 0;
          v44 = 0x100000000;
        }
        WebCore::parseHTMLInteger(v43, v44, (uint64_t *)&v100);
        if (HIDWORD(v100))
        {
          *(_QWORD *)(a1 + 72) &= 0xF3FFFFFFFFFFFFFFLL;
        }
        else
        {
          v45 = (int)v100;
          if ((_DWORD)v100)
          {
            if ((_DWORD)v100 == -1)
            {
              v46 = 0x800000000000000;
            }
            else
            {
              v47 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL;
              if (!v47)
              {
                WebCore::Node::materializeRareData((WebCore::Node *)a1);
                v47 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFLL;
              }
              *(_DWORD *)(v47 + 28) = v45;
              v46 = 0xC00000000000000;
            }
          }
          else
          {
            v46 = 0x400000000000000;
          }
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 72) & 0xF3FFFFFFFFFFFFFFLL | v46;
        }
        goto LABEL_22;
      case 0x34Au:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 3421))
        {
          v87 = WTF::equalLettersIgnoringASCIICase((uint64_t *)a3, "false", 6uLL);
          v88 = WTF::equalLettersIgnoringASCIICase((uint64_t *)a4, "false", 6uLL);
          if (v87 != v88)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 1240))(a1, v88 ^ 1u);
        }
        goto LABEL_22;
      case 0x30Du:
        if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 688) & 0x20000000) != 0)
          WebCore::HTMLElement::popoverAttributeChanged((WebCore::HTMLElement *)a1, a4, v12);
        goto LABEL_22;
    }
LABEL_14:
    {
      WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::$_0::operator()((uint64_t *)&v100);
      v90 = v100;
      v100 = 0;
      WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map = (uint64_t)v90;
      WTF::HashMap<WTF::AtomString,WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::~HashMap(&v100, v91);
      v17 = *(_QWORD *)a2;
    }
    if (*(_QWORD *)(v17 + 32))
      goto LABEL_20;
    v19 = *(int **)(v17 + 24);
    if (v19[1] < 3)
      goto LABEL_20;
    v20 = v19[4];
    v21 = *((_QWORD *)v19 + 1);
    if ((v20 & 4) != 0)
    {
      if (*(_BYTE *)v21 != 111)
      {
LABEL_20:
        v22 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_21:
        if (*v22)
        {
          WebCore::JSLazyEventListener::create((WebCore::JSLazyEventListener *)a1, a2, (const WebCore::QualifiedName *)a4, (uint64_t *)&v100);
          {
            v67 = WebCore::mainThreadNormalWorld(void)::cachedNormalWorld;
          }
          else
          {
            v99 = WebCore::g_commonVMOrNull;
            if (!WebCore::g_commonVMOrNull)
              v99 = WebCore::commonVMSlow(0);
            v67 = *(_QWORD *)(*(_QWORD *)(v99 + 41456) + 16);
            WebCore::mainThreadNormalWorld(void)::cachedNormalWorld = v67;
          }
          WebCore::EventTarget::setAttributeEventListener((WebCore::InspectorInstrumentation *)a1, v22, (const WTF::AtomString **)&v100, v67);
          v68 = v100;
          v100 = 0;
          if (v68)
          {
            if (*((_DWORD *)v68 + 4) == 1)
              (*((void (**)(WTF::StringImpl **))*v68 + 1))(v68);
            else
              --*((_DWORD *)v68 + 4);
          }
        }
        goto LABEL_22;
      }
      v25 = *(unsigned __int8 *)(v21 + 1);
    }
    else
    {
      if (*(_WORD *)v21 != 111)
        goto LABEL_20;
      v25 = *(unsigned __int16 *)(v21 + 2);
    }
    v22 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    if (v25 == 110)
    {
      v34 = *v19;
      *v19 += 2;
      if (WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map)
      {
        v35 = 0;
        for (i = v20 >> 8; ; i = v35 + v37)
        {
          v37 = i & *(_DWORD *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                              - 8);
          v38 = *(int **)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                        + 16 * v37);
          if (!v38)
            break;
          if (v38 != (int *)-1 && v38 == v19)
            goto LABEL_68;
          ++v35;
        }
        v37 = *(unsigned int *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                              - 4);
LABEL_68:
        v40 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map + 16 * v37;
      }
      else
      {
        v40 = 0;
      }
      if (v34)
        *v19 = v34;
      else
        WTF::StringImpl::destroy((WTF::StringImpl *)v19, (WTF::StringImpl *)v11);
      v41 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map;
      if (WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map)
        v41 = WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
            + 16
            * *(unsigned int *)(WebCore::HTMLElement::eventNameForEventHandlerAttribute(WebCore::QualifiedName const&)::map
                              - 4);
      if (v40 != v41)
        v22 = (WTF::StringImpl **)(v40 + 8);
    }
    goto LABEL_21;
  }
  switch(v18)
  {
    case 0x1B0u:
      WebCore::HTMLElement::dirAttributeChanged((WebCore::HTMLElement *)a1, (const WTF::AtomString *)a4, (uint64_t)v12, v13, v14, v15);
      break;
    case 0x208u:
      WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)a1);
      break;
    case 0x209u:
      v92 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      *(_DWORD *)(v92 + 24) += 2;
      v100 = (WTF::StringImpl **)v92;
      if (*(_QWORD *)(v92 + 1248) == a1)
      {
        v93 = *(_QWORD *)(v92 + 528);
        if (v93)
        {
          v94 = *(_QWORD *)(v93 + 8);
          if (v94)
          {
            v95 = *(_QWORD *)(v94 + 24);
            if (v95)
            {
              v96 = *(WebCore::Page **)(v95 + 8);
              if (v96)
              {
                ++*(_DWORD *)v96;
                v97 = *(_QWORD *)(*((_QWORD *)v96 + 6) + 16);
                v98 = WebCore::HTMLElement::canonicalInputMode((WebCore::HTMLElement *)a1, (const WTF::AtomString *)v11, v12);
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v97 + 872))(v97, a1, v98);
                WTF::RefCounted<WebCore::Page>::deref(v96);
              }
            }
          }
        }
      }
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v100);
      break;
    default:
      goto LABEL_14;
  }
LABEL_22:
  v23 = a1 + 112;
  v24 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::disabledAttr)
  {
    v65 = (WebCore::HTMLMaybeFormAssociatedCustomElement *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(a1 + 112);
    v66 = *(_QWORD *)(*((_QWORD *)v65 + 12) + 24);
    if (v66 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24)
      || v66 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
      || v66 == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24)
      || v66 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24)
      || v66 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
      || v66 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24)
      || v66 == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24)
      || (v89 = v65,
          (*(unsigned int (**)(WebCore::HTMLMaybeFormAssociatedCustomElement *))(*(_QWORD *)v65 + 856))(v65))
      && WebCore::HTMLMaybeFormAssociatedCustomElement::isFormAssociatedCustomElement(v89))
    {
      WebCore::ValidatedFormListedElement::setDisabledInternal((_BYTE *)(a1 + 112), *a4 != 0, (*(unsigned __int8 *)(a1 + 160) >> 4) & 1);
      return;
    }
    v24 = *(_QWORD *)a2;
  }
  if (v24 == WebCore::HTMLNames::readonlyAttr)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 344))(a1 + 112) & 1) != 0)
    {
      WebCore::ValidatedFormListedElement::parseReadOnlyAttribute((unsigned __int8 *)(a1 + 112), (const WTF::AtomString *)a4);
      return;
    }
    v24 = *(_QWORD *)a2;
  }
  if (v24 == WebCore::HTMLNames::formAttr)
    WebCore::FormListedElement::parseFormAttribute((WebCore::FormListedElement *)(a1 + 112), (const WTF::AtomString *)a4);
}

BOOL WebCore::HTMLInputElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _BOOL8 result;
  unsigned int v7;

  v3 = *(unsigned __int16 *)(*(_QWORD *)a2 + 10);
  result = 1;
  if (v3 > 0x1F7)
  {
    if (v3 - 912 <= 0x25 && ((1 << (v3 + 112)) & 0x2800000401) != 0)
      return result;
    v7 = v3 - 504;
    if (v7 <= 7 && ((1 << v7) & 0x83) != 0)
      return result;
    return 0;
  }
  if (v3 - 411 > 0x20 || ((1 << (v3 + 101)) & 0x100200001) == 0)
  {
    if (v3 == 375)
      return *(_DWORD *)(*(_QWORD *)(a1 + 240) + 12) == 256;
    if (v3 != 286)
      return 0;
  }
  return result;
}

WebCore::AudioSession *WebCore::JSDOMAudioSessionOwner::finalize(WebCore::AudioSession *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  WebCore::AudioSessionIOS *v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;
  bmalloc::api *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;

  v3 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v4 = v3 - 4;
  v5 = *((_DWORD *)v3 - 2);
  *((_DWORD *)v3 - 2) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v18 = *(_QWORD *)(a3 + 32);
    v16 = (uint64_t *)(a3 + 32);
    v17 = v18;
    if (v18)
    {
      v19 = *(_DWORD *)(v17 - 8);
      v20 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
      v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
      v23 = v19 & ((v22 >> 31) ^ v22);
      v24 = *(_QWORD **)(v17 + 16 * v23);
      if (v24 != v4)
      {
        v25 = 1;
        while (v24)
        {
          v23 = ((_DWORD)v23 + v25) & v19;
          v24 = *(_QWORD **)(v17 + 16 * v23);
          ++v25;
          if (v24 == v4)
            goto LABEL_18;
        }
        v23 = *(unsigned int *)(v17 - 4);
      }
LABEL_18:
      if (v23 != *(_DWORD *)(v17 - 4))
      {
        v26 = (_QWORD *)(v17 + 16 * v23);
        *v26 = -1;
        v29 = v26[1];
        v28 = v26 + 1;
        v27 = v29;
        if (v29)
        {
          *(_QWORD *)(v27 + 8) = 3;
          *v28 = 0;
        }
        ++*(_DWORD *)(*v16 - 16);
        v30 = *v16;
        if (*v16)
          v31 = *(_DWORD *)(v30 - 12) - 1;
        else
          v31 = -1;
        *(_DWORD *)(v30 - 12) = v31;
        v32 = *v16;
        if (*v16)
        {
          v33 = 6 * *(_DWORD *)(v32 - 12);
          v34 = *(_DWORD *)(v32 - 4);
          if (v33 < v34 && v34 >= 9)
            result = (WebCore::AudioSession *)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v16, v34 >> 1, 0);
        }
      }
    }
    v5 = *((_DWORD *)v3 - 2) - 1;
  }
  else
  {
    v6 = v3[1];
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      v3[1] = 0;
    }
  }
  if (v5)
  {
    *((_DWORD *)v3 - 2) = v5;
  }
  else
  {
    v7 = WebCore::AudioSession::sharedSession(result);
    (*(void (**)(WebCore::AudioSessionIOS *, _QWORD *))(*(_QWORD *)v7 + 216))(v7, v3 + 3);
    v9 = v3[4];
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 0;
      v10 = (unsigned int *)v3[4];
      v3[4] = 0;
      if (v10)
      {
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v10);
          WTF::fastFree((WTF *)v10, v8);
        }
      }
    }
    else
    {
      v3[4] = 0;
    }
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)v3, v8);
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::ActiveDOMObject *)(v3 - 4), v13);
    return (WebCore::AudioSession *)bmalloc::api::isoDeallocate(v14, v15);
  }
  return result;
}

void WebCore::JSMediaDevicesOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  WebCore::MediaDevices *v4;
  int v5;
  uint64_t v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::MediaDevices *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::MediaDevices *)(v3 - 32);
  v5 = *(_DWORD *)(v3 - 8);
  *(_DWORD *)(v3 - 8) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v9 = (uint64_t *)(a3 + 32);
    v10 = v11;
    if (v11)
    {
      v12 = *(_DWORD *)(v10 - 8);
      v13 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
      v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
      v16 = v12 & ((v15 >> 31) ^ v15);
      v17 = *(WebCore::MediaDevices **)(v10 + 16 * v16);
      if (v17 != v4)
      {
        v18 = 1;
        while (v17)
        {
          v16 = ((_DWORD)v16 + v18) & v12;
          v17 = *(WebCore::MediaDevices **)(v10 + 16 * v16);
          ++v18;
          if (v17 == v4)
            goto LABEL_12;
        }
        v16 = *(unsigned int *)(v10 - 4);
      }
LABEL_12:
      if (v16 != *(_DWORD *)(v10 - 4))
      {
        v19 = (_QWORD *)(v10 + 16 * v16);
        *v19 = -1;
        v22 = v19[1];
        v21 = v19 + 1;
        v20 = v22;
        if (v22)
        {
          *(_QWORD *)(v20 + 8) = 3;
          *v21 = 0;
        }
        ++*(_DWORD *)(*v9 - 16);
        v23 = *v9;
        if (*v9)
          v24 = *(_DWORD *)(v23 - 12) - 1;
        else
          v24 = -1;
        *(_DWORD *)(v23 - 12) = v24;
        v25 = *v9;
        if (*v9)
        {
          v26 = 6 * *(_DWORD *)(v25 - 12);
          v27 = *(_DWORD *)(v25 - 4);
          if (v26 < v27 && v27 >= 9)
          {
            v29 = v3;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v9, v27 >> 1, 0);
            v3 = v29;
          }
        }
      }
    }
    v5 = *(_DWORD *)(v3 - 8) - 1;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8);
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      *(_QWORD *)(v3 + 8) = 0;
    }
  }
  if (v5)
  {
    *(_DWORD *)(v3 - 8) = v5;
  }
  else
  {
    WebCore::MediaDevices::~MediaDevices(v4, a2);
    bmalloc::api::isoDeallocate(v7, v8);
  }
}

uint64_t WebCore::RenderFlexibleBox::allowedLayoutOverflow@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  _DWORD *v3;
  _BYTE *v4;
  _BYTE *v5;
  _DWORD *v6;
  _BYTE *v7;
  int v8;
  int v9;
  _BYTE *v10;
  _DWORD *v11;
  char v12;
  int *v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;

  *a2 = 0;
  a2[4] = 0;
  v2 = a2 + 4;
  a2[8] = 0;
  v3 = a2 + 8;
  a2[12] = 0;
  v4 = a2 + 12;
  a2[16] = 0;
  a2[20] = 0;
  v5 = a2 + 20;
  a2[24] = 0;
  v6 = a2 + 24;
  a2[28] = 0;
  v7 = a2 + 28;
  v8 = *(_DWORD *)(this + 20);
  if ((v8 & 0x1000) != 0)
  {
    a2[28] = 1;
    *((_DWORD *)a2 + 6) = 0;
    v9 = *(_DWORD *)(this + 120);
    if ((v9 & 0x4000000) != 0)
      v10 = a2 + 20;
    else
      v10 = a2 + 4;
    if ((v9 & 0x4000000) != 0)
      v11 = a2 + 16;
    else
      v11 = a2;
  }
  else
  {
    a2[4] = 1;
    *(_DWORD *)a2 = 0;
    v9 = *(_DWORD *)(this + 120);
    if ((v9 & 0x4000000) != 0)
      v10 = a2 + 12;
    else
      v10 = a2 + 28;
    if ((v9 & 0x4000000) != 0)
      v11 = a2 + 8;
    else
      v11 = a2 + 24;
  }
  *v10 = 1;
  *v11 = 0;
  v12 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 88) + 32) + 16) + 20);
  if ((v8 & 0x1000) != 0)
  {
    v17 = 388;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 88) + 32) + 16) + 20) & 2) == 0)
      v17 = 384;
    v18 = *(_DWORD *)(this + v17);
    if (!*v7)
      *v7 = 1;
    *v6 = v18;
    v19 = 384;
    if ((v12 & 2) == 0)
      v19 = 388;
    v20 = *(_DWORD *)(this + v19);
    if ((v9 & 0x4000000) != 0)
    {
      if (!*v5)
        *v5 = 1;
      *((_DWORD *)a2 + 4) = v20;
    }
    else
    {
      if (!*v2)
        *v2 = 1;
      *(_DWORD *)a2 = v20;
    }
  }
  else
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 88) + 32) + 16) + 20) & 2) != 0)
      v13 = (int *)(this + 388);
    else
      v13 = (int *)(this + 384);
    v14 = *v13;
    if (!*v2)
      *v2 = 1;
    *(_DWORD *)a2 = v14;
    if ((v9 & 0x4000000) != 0)
    {
      v21 = 384;
      if ((v12 & 2) == 0)
        v21 = 388;
      v22 = *(_DWORD *)(this + v21);
      if (!*v4)
        *v4 = 1;
      *v3 = v22;
    }
    else
    {
      if ((v12 & 2) != 0)
        v15 = (int *)(this + 384);
      else
        v15 = (int *)(this + 388);
      v16 = *v15;
      if (!*v7)
        *v7 = 1;
      *v6 = v16;
    }
  }
  return this;
}

void WebCore::ScriptExecutionContext::~ScriptExecutionContext(WebCore::ScriptExecutionContext *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  WTF *v8;
  uint64_t v9;
  WebCore::ServiceWorker *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void (***v16)(_QWORD);
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  WebCore::ContentSecurityPolicy *v23;
  WTF *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WebCore::ServiceWorker *v32;
  uint64_t v33;
  WTF *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  WebCore::RejectedPromiseTracker *v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  WTF **v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WebCore::ContentSecurityPolicy *v59;
  WTF *v60;
  uint64_t *v62;
  bmalloc::api *v63;
  void *v64;
  bmalloc::api *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  WTF *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  WebCore::DOMTimer **v75;
  WebCore::DOMTimer *v76;
  WTF *v77;
  void *v78;
  uint64_t v79;
  WTF *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  unsigned int *v86;
  unsigned int v87;
  unsigned int v88;
  WTF *v89;
  void *v90;
  uint64_t v91;
  _DWORD **v92;
  _DWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  WTF *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;

  v3 = 0;
  v4 = 0;
  *(_QWORD *)this = off_1E33A73D8;
  *((_QWORD *)this + 12) = &unk_1E33A7598;
  v5 = (_QWORD *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (!v5)
    goto LABEL_2;
  v4 = *((unsigned int *)v5 - 1);
  v6 = &v5[2 * v4];
  if (!*((_DWORD *)v5 - 3))
  {
    v3 = &v5[2 * v4];
LABEL_2:
    v6 = &v5[2 * v4];
    goto LABEL_3;
  }
  v3 = v5;
  if ((_DWORD)v4)
  {
    v96 = 16 * v4;
    v3 = v5;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      v3 += 2;
      v96 -= 16;
      if (!v96)
      {
        v3 = v6;
        break;
      }
    }
  }
LABEL_3:
  if (v5)
    v7 = &v5[2 * *((unsigned int *)v5 - 1)];
  else
    v7 = 0;
  while (v3 != v7)
  {
    v94 = v3[1];
    v3[1] = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    v95 = v3 + 2;
    v3 = v6;
    if (v95 != v6)
    {
      v3 = v95;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        v3 += 2;
        if (v3 == v6)
        {
          v3 = v6;
          break;
        }
      }
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 23);
  v9 = *((unsigned int *)this + 49);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  if ((_DWORD)v9)
  {
    v97 = 8 * v9;
    v98 = v8;
    do
    {
      v99 = *(_QWORD *)v98;
      *(_QWORD *)v98 = 0;
      v98 = (WTF *)((char *)v98 + 8);
      (*(void (**)(uint64_t))(*(_QWORD *)v99 + 16))(v99);
      (*(void (**)(uint64_t))(*(_QWORD *)v99 + 8))(v99);
      v97 -= 8;
    }
    while (v97);
  }
  v10 = (WebCore::ServiceWorker *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 1)
    {
      WebCore::ServiceWorker::~ServiceWorker(v10, a2);
      bmalloc::api::isoDeallocate(v63, v64);
    }
    else
    {
      --*((_DWORD *)v10 + 6);
    }
  }
  v12 = (_QWORD *)((char *)this + 120);
  v11 = (_QWORD *)*((_QWORD *)this + 15);
  if (v11)
  {
    do
    {
      if (!*((_DWORD *)v11 - 3))
        break;
      v13 = *((unsigned int *)v11 - 1);
      v14 = v11;
      if ((_DWORD)v13)
      {
        v15 = 8 * v13;
        v14 = v11;
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          ++v14;
          v15 -= 8;
          if (!v15)
            goto LABEL_28;
        }
      }
      if (&v11[v13] == v14)
        break;
      v16 = (void (***)(_QWORD))*v14;
      *v14 = -1;
      ++*(_DWORD *)(*v12 - 16);
      v17 = (_QWORD *)*v12;
      if (*v12)
        v18 = *((_DWORD *)v17 - 3) - 1;
      else
        v18 = -1;
      *((_DWORD *)v17 - 3) = v18;
      v19 = (_QWORD *)*v12;
      if (*v12)
      {
        v20 = 6 * *((_DWORD *)v19 - 3);
        v21 = *((_DWORD *)v19 - 1);
        if (v20 < v21 && v21 >= 9)
          WTF::HashTable<WebCore::ContextDestructionObserver *,WebCore::ContextDestructionObserver *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>,WTF::HashTraits<WebCore::ContextDestructionObserver *>>::rehash((uint64_t *)this + 15, v21 >> 1, 0);
      }
      if (!v16)
        break;
      (**v16)(v16);
      v11 = (_QWORD *)*v12;
    }
    while (*v12);
  }
LABEL_28:
  v23 = (WebCore::ContentSecurityPolicy *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v23)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v23, (WTF::StringImpl *)a2);
    if (atomic_load((unsigned int *)v24))
    {
      *((_OWORD *)v24 + 13) = 0u;
      *((_OWORD *)v24 + 14) = 0u;
      *((_OWORD *)v24 + 11) = 0u;
      *((_OWORD *)v24 + 12) = 0u;
      *((_OWORD *)v24 + 9) = 0u;
      *((_OWORD *)v24 + 10) = 0u;
      *((_OWORD *)v24 + 7) = 0u;
      *((_OWORD *)v24 + 8) = 0u;
      *((_OWORD *)v24 + 5) = 0u;
      *((_OWORD *)v24 + 6) = 0u;
      *((_OWORD *)v24 + 3) = 0u;
      *((_OWORD *)v24 + 4) = 0u;
      *((_OWORD *)v24 + 1) = 0u;
      *((_OWORD *)v24 + 2) = 0u;
      *(_OWORD *)v24 = 0u;
    }
    else
    {
      WTF::fastFree(v24, a2);
    }
  }
  *((_BYTE *)this + 89) = 0;
  if ((_DWORD)v9)
  {
    v79 = 8 * v9;
    v80 = v8;
    do
    {
      v81 = *(_QWORD *)v80;
      *(_QWORD *)v80 = 0;
      if (v81)
        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
      v80 = (WTF *)((char *)v80 + 8);
      v79 -= 8;
    }
    while (v79);
  }
  if (v8)
    WTF::fastFree(v8, a2);
  if (v5)
  {
    v100 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v100)
    {
      v101 = v5 + 1;
      do
      {
        if (*(v101 - 1) != -1)
        {
          v102 = *v101;
          *v101 = 0;
          if (v102)
            (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
        }
        v101 += 2;
        --v100;
      }
      while (v100);
    }
    WTF::fastFree((WTF *)(v5 - 2), a2);
  }
  v26 = *((_QWORD *)this + 37);
  if (v26)
  {
    v84 = *(unsigned int *)(v26 - 4);
    if ((_DWORD)v84)
    {
      for (i = 0; i != v84; ++i)
      {
        v86 = *(unsigned int **)(v26 + 8 * i);
        if (v86 != (unsigned int *)-1)
        {
          *(_QWORD *)(v26 + 8 * i) = 0;
          if (v86)
          {
            do
            {
              v87 = __ldaxr(v86);
              v88 = v87 - 1;
            }
            while (__stlxr(v88, v86));
            if (!v88)
            {
              atomic_store(1u, v86);
              WTF::fastFree((WTF *)v86, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v26 - 16), a2);
  }
  v27 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
  v28 = *((_QWORD *)this + 33);
  if (v28)
  {
    v91 = *(unsigned int *)(v28 - 4);
    if ((_DWORD)v91)
    {
      v92 = (_DWORD **)*((_QWORD *)this + 33);
      do
      {
        v93 = *v92;
        if (*v92 != (_DWORD *)-1)
        {
          *v92 = 0;
          if (v93)
          {
            if (v93[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v93 + 16))(v93);
            else
              --v93[4];
          }
        }
        ++v92;
        --v91;
      }
      while (v91);
    }
    WTF::fastFree((WTF *)(v28 - 16), a2);
  }
  v29 = *((_QWORD *)this + 32);
  if (v29)
  {
    v103 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v103)
    {
      v104 = (uint64_t *)(v29 + 8);
      do
      {
        if (*(v104 - 1) != -1)
        {
          v105 = *v104;
          *v104 = 0;
          if (v105)
            (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
        }
        v104 += 2;
        --v103;
      }
      while (v103);
    }
    WTF::fastFree((WTF *)(v29 - 16), a2);
  }
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = *((_QWORD *)this + 26);
  if (v31)
    WTF::fastFree((WTF *)(v31 - 16), a2);
  v32 = (WebCore::ServiceWorker *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v32)
  {
    if (*((_DWORD *)v32 + 6) == 1)
    {
      WebCore::ServiceWorker::~ServiceWorker(v32, a2);
      bmalloc::api::isoDeallocate(v65, v66);
    }
    else
    {
      --*((_DWORD *)v32 + 6);
    }
  }
  v33 = *((unsigned int *)this + 49);
  v34 = (WTF *)*((_QWORD *)this + 23);
  if ((_DWORD)v33)
  {
    v82 = 8 * v33;
    do
    {
      v83 = *(_QWORD *)v34;
      *(_QWORD *)v34 = 0;
      if (v83)
        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
      v34 = (WTF *)((char *)v34 + 8);
      v82 -= 8;
    }
    while (v82);
    v34 = (WTF *)*((_QWORD *)this + 23);
  }
  if (v34)
  {
    *((_QWORD *)this + 23) = 0;
    *((_DWORD *)this + 48) = 0;
    WTF::fastFree(v34, a2);
  }
  v35 = (unsigned int *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v35)
  {
    v36 = v35 + 6;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v35 + 6);
      WebCore::DatabaseContext::~DatabaseContext((WebCore::DatabaseContext *)v35, a2);
      WTF::fastFree(v89, v90);
    }
  }
  v39 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v39)
  {
    if (*(_DWORD *)(v39 + 24) == 1)
    {
      *(_QWORD *)v39 = &off_1E33A0540;
      v67 = *(_QWORD *)(v39 + 8);
      if (v67)
      {
        v68 = *(_QWORD *)(v67 + 8);
        if (v68)
        {
          v69 = *(unsigned __int8 *)(v68 + 178);
          if (*(_BYTE *)(v68 + 178))
          {
            if (v69 == 1 || v69 == 2)
              ++*(_DWORD *)(v68 + 216);
          }
          else
          {
            *(_DWORD *)(v68 - 264) += 2;
          }
          WebCore::ScriptExecutionContext::willDestroyActiveDOMObject((WebCore::ScriptExecutionContext *)(v68 - 96), (WebCore::ActiveDOMObject *)v39);
          v70 = *(unsigned __int8 *)(v68 + 178);
          if (*(_BYTE *)(v68 + 178))
          {
            if (v70 == 1)
            {
              if (*(_DWORD *)(v68 + 216) == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)(v68 - 96) + 40))(v68 - 96);
              else
                --*(_DWORD *)(v68 + 216);
            }
            else if (v70 == 2)
            {
              WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v68 + 216));
            }
          }
          else if (*(_DWORD *)(v68 - 264) == 2)
          {
            if ((*(_WORD *)(v68 - 258) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)(v68 - 288));
          }
          else
          {
            *(_DWORD *)(v68 - 264) -= 2;
          }
        }
      }
      WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::ContextDestructionObserver *)v39, a2);
      WTF::fastFree(v71, v72);
    }
    else
    {
      --*(_DWORD *)(v39 + 24);
    }
  }
  v40 = (WebCore::RejectedPromiseTracker *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v40)
  {
    WebCore::RejectedPromiseTracker::~RejectedPromiseTracker(v40);
    if (*(_DWORD *)v41)
    {
      *(_QWORD *)(v41 + 48) = 0;
      *(_OWORD *)(v41 + 16) = 0u;
      *(_OWORD *)(v41 + 32) = 0u;
      *(_OWORD *)v41 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v41, a2);
    }
  }
  v42 = (WTF *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v42)
  {
    v43 = *((unsigned int *)v42 + 3);
    if ((_DWORD)v43)
    {
      v44 = *(WTF ***)v42;
      v45 = 8 * v43;
      do
      {
        v46 = *v44;
        *v44 = 0;
        if (v46)
          std::default_delete<WebCore::ScriptExecutionContext::PendingException>::operator()[abi:sn180100](v46, (WTF::StringImpl *)a2);
        ++v44;
        v45 -= 8;
      }
      while (v45);
    }
    v47 = *(WTF **)v42;
    if (*(_QWORD *)v42)
    {
      *(_QWORD *)v42 = 0;
      *((_DWORD *)v42 + 2) = 0;
      WTF::fastFree(v47, a2);
    }
    WTF::fastFree(v42, a2);
  }
  v48 = *((_QWORD *)this + 17);
  if (v48)
  {
    v74 = *(unsigned int *)(v48 - 4);
    if ((_DWORD)v74)
    {
      v75 = (WebCore::DOMTimer **)(v48 + 8);
      do
      {
        if (*((_DWORD *)v75 - 2) != -1)
        {
          v76 = *v75;
          *v75 = 0;
          if (v76)
          {
            if (*((_DWORD *)v76 + 6) == 1)
            {
              WebCore::DOMTimer::~DOMTimer(v76, a2);
              WTF::fastFree(v77, v78);
            }
            else
            {
              --*((_DWORD *)v76 + 6);
            }
          }
        }
        v75 += 2;
        --v74;
      }
      while (v74);
    }
    WTF::fastFree((WTF *)(v48 - 16), a2);
  }
  v49 = *((_QWORD *)this + 16);
  if (v49)
    WTF::fastFree((WTF *)(v49 - 16), a2);
  if (*v12)
    WTF::fastFree((WTF *)(*v12 - 16), a2);
  v50 = *((_QWORD *)this + 14);
  if (v50)
    WTF::fastFree((WTF *)(v50 - 16), a2);
  v51 = *((_QWORD *)this + 13);
  if (v51)
  {
    *(_QWORD *)(v51 + 8) = 0;
    v52 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v52)
    {
      do
      {
        v53 = __ldaxr(v52);
        v54 = v53 - 1;
      }
      while (__stlxr(v54, v52));
      if (!v54)
      {
        atomic_store(1u, v52);
        WTF::fastFree((WTF *)v52, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  *(_QWORD *)this = off_1E33A76E0;
  v55 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = (WebCore::ContentSecurityPolicy *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v59)
  {
    WebCore::ContentSecurityPolicy::~ContentSecurityPolicy(v59, (WTF::StringImpl *)a2);
    if (atomic_load((unsigned int *)v60))
    {
      *((_OWORD *)v60 + 13) = 0u;
      *((_OWORD *)v60 + 14) = 0u;
      *((_OWORD *)v60 + 11) = 0u;
      *((_OWORD *)v60 + 12) = 0u;
      *((_OWORD *)v60 + 9) = 0u;
      *((_OWORD *)v60 + 10) = 0u;
      *((_OWORD *)v60 + 7) = 0u;
      *((_OWORD *)v60 + 8) = 0u;
      *((_OWORD *)v60 + 5) = 0u;
      *((_OWORD *)v60 + 6) = 0u;
      *((_OWORD *)v60 + 3) = 0u;
      *((_OWORD *)v60 + 4) = 0u;
      *((_OWORD *)v60 + 1) = 0u;
      *((_OWORD *)v60 + 2) = 0u;
      *(_OWORD *)v60 = 0u;
    }
    else
    {
      WTF::fastFree(v60, a2);
    }
  }
  v62 = (uint64_t *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 1)
    {
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v62 + 1, (WTF::StringImpl *)a2);
      WTF::fastFree((WTF *)v62, v73);
    }
    else
    {
      --*(_DWORD *)v62;
    }
  }
}

unsigned int *WebCore::ContextDestructionObserver::contextDestroyed(WebCore::ContextDestructionObserver *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *WebCore::Performance::contextDestroyed(WebCore::Performance *this, void *a2)
{
  if ((*((_QWORD *)this + 15) & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::Performance *)((char *)this + 88));
  return WebCore::ContextDestructionObserver::contextDestroyed(this, a2);
}

uint64_t *WebCore::CachedFont::finishLoading(WebCore::CachedFont *this, const WebCore::FragmentedSharedBuffer *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  void *v18;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  char v53;
  char *v54;

  if (!a2)
  {
    v20 = *((_QWORD *)this + 49);
    *((_QWORD *)this + 49) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr((unsigned int *)v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unsigned int *)v20));
      if (!v22)
      {
        atomic_store(1u, (unsigned int *)v20);
        v23 = *(unsigned int *)(v20 + 20);
        if ((_DWORD)v23)
        {
          v24 = *(_QWORD *)(v20 + 8);
          v25 = v24 + 16 * v23;
          do
          {
            v26 = *(unsigned int **)(v24 + 8);
            *(_QWORD *)(v24 + 8) = 0;
            if (v26)
            {
              do
              {
                v27 = __ldaxr(v26);
                v28 = v27 - 1;
              }
              while (__stlxr(v28, v26));
              if (!v28)
              {
                v46 = v24;
                v48 = v25;
                v44 = v20;
                atomic_store(1u, v26);
                v50 = (WTF *)v26;
                v29 = v26[6];
                if ((_DWORD)v29 != -1)
                  ((void (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v29])(&v54, v26 + 2);
                *((_DWORD *)v50 + 6) = -1;
                WTF::fastFree(v50, a2);
                v20 = v44;
                v24 = v46;
                v25 = v48;
              }
            }
            v24 += 16;
          }
          while (v24 != v25);
        }
        v30 = *(WTF **)(v20 + 8);
        if ((WTF *)(v20 + 24) != v30 && v30 != 0)
        {
          *(_QWORD *)(v20 + 8) = 0;
          *(_DWORD *)(v20 + 16) = 0;
          v41 = v20;
          WTF::fastFree(v30, a2);
          v20 = v41;
        }
        WTF::fastFree((WTF *)v20, a2);
      }
    }
    WebCore::CachedResource::setEncodedSize(this, 0);
    goto LABEL_18;
  }
  WebCore::FragmentedSharedBuffer::makeContiguous(a2, &v52);
  v5 = *((_QWORD *)this + 48);
  if (!v5 || (v6 = *(_QWORD *)(v5 + 32)) == 0)
  {
    *((_BYTE *)this + 658) = 0;
    goto LABEL_13;
  }
  v7 = v52;
  if (*(_DWORD *)(v52 + 20))
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v52 + 8) + 8);
    v9 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v9 == -1)
    {
      v43 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebCore::JSHTMLVideoElementOwner::finalize(v43);
    }
    v54 = &v53;
    v10 = (const void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v54, v8 + 8);
    v6 = *(_QWORD *)(*((_QWORD *)this + 48) + 32);
  }
  else
  {
    v10 = 0;
  }
  v11 = WebCore::fontBinaryParsingPolicy(v10, *(_QWORD *)(v7 + 48), *(unsigned __int8 *)(*(_QWORD *)(v6 + 136) + 368));
  *((_BYTE *)this + 658) = v11;
  if (!v11)
  {
LABEL_13:
    *((_BYTE *)this + 659) = 1;
    WebCore::CachedFont::setErrorAndDeleteData(this);
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v52, v18);
  }
  v13 = v52;
  v52 = 0;
  v14 = *((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = v13;
  if (v14)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)v14);
      v32 = *(unsigned int *)(v14 + 20);
      if ((_DWORD)v32)
      {
        v33 = *(_QWORD *)(v14 + 8);
        v34 = v33 + 16 * v32;
        do
        {
          v35 = *(unsigned int **)(v33 + 8);
          *(_QWORD *)(v33 + 8) = 0;
          if (v35)
          {
            do
            {
              v36 = __ldaxr(v35);
              v37 = v36 - 1;
            }
            while (__stlxr(v37, v35));
            if (!v37)
            {
              v47 = v33;
              v49 = v34;
              v45 = v14;
              atomic_store(1u, v35);
              v51 = (WTF *)v35;
              v38 = v35[6];
              if ((_DWORD)v38 != -1)
                ((void (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_5[v38])(&v54, v35 + 2);
              *((_DWORD *)v51 + 6) = -1;
              WTF::fastFree(v51, v12);
              v14 = v45;
              v33 = v47;
              v34 = v49;
            }
          }
          v33 += 16;
        }
        while (v33 != v34);
      }
      v39 = *(WTF **)(v14 + 8);
      if ((WTF *)(v14 + 24) != v39 && v39 != 0)
      {
        *(_QWORD *)(v14 + 8) = 0;
        *(_DWORD *)(v14 + 16) = 0;
        v42 = v14;
        WTF::fastFree(v39, v12);
        v14 = v42;
      }
      WTF::fastFree((WTF *)v14, v12);
    }
  }
  WebCore::CachedResource::setEncodedSize(this, *(_DWORD *)(*((_QWORD *)this + 49) + 48));
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v52, v17);
LABEL_18:
  *(_WORD *)((char *)this + 557) &= ~0x400u;
  return (uint64_t *)(*(uint64_t (**)(WebCore::CachedFont *, const WebCore::NetworkLoadMetrics *, _QWORD))(*(_QWORD *)this + 200))(this, a3, 0);
}

unsigned int *WebCore::JSHTMLVideoElementOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int *result;
  int v4;
  unsigned int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v26;

  result = *(unsigned int **)(*(_QWORD *)a2 + 24);
  v4 = result[6];
  result[6] = v4 + 2;
  v5 = result + 2;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = ((unint64_t)result + ~((_QWORD)result << 32)) ^ (((unint64_t)result + ~((_QWORD)result << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(unsigned int **)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(unsigned int **)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_16;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_16:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = result[6] - 2;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    result[6] = v4;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  return result;
}

unsigned int *WebCore::JSHTMLAudioElementOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  unsigned int *result;
  int v4;
  unsigned int *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v26;

  result = *(unsigned int **)(*(_QWORD *)a2 + 24);
  v4 = result[6];
  result[6] = v4 + 2;
  v5 = result + 2;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = ((unint64_t)result + ~((_QWORD)result << 32)) ^ (((unint64_t)result + ~((_QWORD)result << 32)) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(unsigned int **)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(unsigned int **)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_16;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_16:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = result[6] - 2;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (v4)
  {
    result[6] = v4;
  }
  else if ((*((_WORD *)result + 15) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  return result;
}

JSC::VM *JSC::reifyStaticProperties<5u>(JSC::VM *result, uint64_t a2, _QWORD *a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  v8 = a3[1];
  if (v8)
  {
    if (v8 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v9 = v24;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v24, (uint64_t)a3, (unsigned __int8 *)this);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v11 = a3[6];
  if (v11)
  {
    if (v11 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v12 = v24;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v24, (uint64_t)(a3 + 5), (unsigned __int8 *)this);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v14 = a3[11];
  if (v14)
  {
    if (v14 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v15 = v24;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v24, (uint64_t)(a3 + 10), (unsigned __int8 *)this);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v17 = a3[16];
  if (v17)
  {
    if (v17 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v18 = v24;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v24, (uint64_t)(a3 + 15), (unsigned __int8 *)this);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  v20 = a3[21];
  if (v20)
  {
    v21 = (uint64_t)(a3 + 20);
    if (v20 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v22 = v24;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v24, v21, (unsigned __int8 *)this);
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        return (JSC::VM *)WTF::StringImpl::destroy(v22, v23);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::JSXMLHttpRequest::prototype(WebCore::JSXMLHttpRequest *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  JSC::JSCell *v13;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v15;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;
  int v20;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_4;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSXMLHttpRequest::s_info + ~((_QWORD)&WebCore::JSXMLHttpRequest::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLHttpRequest::s_info + ~((_QWORD)&WebCore::JSXMLHttpRequest::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSXMLHttpRequest::s_info)
  {
    v20 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v20) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v20;
      if (v11 == &WebCore::JSXMLHttpRequest::s_info)
        goto LABEL_3;
    }
    goto LABEL_4;
  }
LABEL_3:
  v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v12)
  {
LABEL_4:
    v13 = (JSC::JSCell *)WebCore::JSXMLHttpRequestEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSXMLHttpRequestPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v13);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSXMLHttpRequestPrototype::create(this, Structure, v15, v16);
    v18 = WebCore::JSXMLHttpRequest::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v12 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSXMLHttpRequest::s_info);
  }
  return *(_QWORD *)(v12 + 48);
}

uint64_t WebCore::JSXMLHttpRequestEventTarget::prototype(WebCore::JSXMLHttpRequestEventTarget *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  JSC::JSObject *Object;
  uint64_t *v19;
  unint64_t SlowCase;
  uint64_t v21;
  int v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  JSC::Structure *v27;
  int v28;
  JSC::JSObject *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35[6];
  int v36;
  int v37;
  JSC::Structure *v38;
  int v39;

  v5 = *((_QWORD *)a2 + 412);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSXMLHttpRequestEventTarget::s_info
        + ~((_QWORD)&WebCore::JSXMLHttpRequestEventTarget::s_info << 32)) ^ (((unint64_t)&WebCore::JSXMLHttpRequestEventTarget::s_info
                                                                            + ~((_QWORD)&WebCore::JSXMLHttpRequestEventTarget::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSXMLHttpRequestEventTarget::s_info)
    {
LABEL_3:
      v12 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v12)
        return *(_QWORD *)(v12 + 48);
    }
    else
    {
      v14 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v14) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v14;
        if (v11 == &WebCore::JSXMLHttpRequestEventTarget::s_info)
          goto LABEL_3;
      }
    }
  }
  v15 = (unint64_t *)((char *)this + 40136);
  v16 = WebCore::JSEventTarget::prototype(this, a2, a3);
  v17 = v16;
  LODWORD(v35[0]) = 23;
  if ((v16 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v16);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, this);
  }
  v19 = (uint64_t *)((char *)this + 38904);
  SlowCase = *v15;
  if (*v15 < *((_QWORD *)this + 5018))
    goto LABEL_13;
  SlowCase = *((_QWORD *)this + 5019);
  if ((SlowCase & 1) == 0)
  {
    v31 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = SlowCase + HIDWORD(v31);
    *((_QWORD *)this + 5019) = SlowCase + (int)v31;
LABEL_13:
    *v15 = SlowCase + 128;
    goto LABEL_14;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_14:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, this, a2, v17, v35, &WebCore::JSXMLHttpRequestEventTargetPrototype::s_info, 0, 0);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v21 = *v19;
  if (*((_QWORD *)this + 4863) < *((_QWORD *)this + 4864))
    goto LABEL_17;
  v21 = *((_QWORD *)this + 4865);
  if ((v21 & 1) == 0)
  {
    v32 = *(_QWORD *)(v21 + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = v21 + HIDWORD(v32);
    *((_QWORD *)this + 4865) = v21 + (int)v32;
LABEL_17:
    *v19 = v21 + 16;
    goto LABEL_18;
  }
  JSC::sanitizeStackForVM();
  v21 = JSC::LocalAllocator::allocateSlowCase();
LABEL_18:
  *(_DWORD *)v21 = 0;
  v22 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v21 = SlowCase >> 4;
  *(_DWORD *)(v21 + 4) = v22;
  v34 = SlowCase;
  *(_QWORD *)(v21 + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<8u>(this, (uint64_t)&WebCore::JSXMLHttpRequestEventTarget::s_info, (uint64_t)&WebCore::JSXMLHttpRequestEventTargetPrototypeTableValues, (JSC::JSObject *)v21);
  v23 = *(_QWORD *)(*((_QWORD *)this + 5244) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v25 = JSC::JSString::create((uint64_t)this, v35);
  v26 = v35[0];
  v35[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (JSC::Structure *)(16 * (*(_DWORD *)v21 & 0xFFFFFFFE));
  v39 = *(_DWORD *)v21;
  v38 = v27;
  v28 = JSC::Structure::outOfLineCapacity(v27);
  v36 = 0;
  v37 = v28;
  v35[0] = (WTF::StringImpl *)&v37;
  v35[1] = (WTF::StringImpl *)v21;
  v35[2] = this;
  v35[3] = (WTF::StringImpl *)&v39;
  v35[4] = (WTF::StringImpl *)&v38;
  v35[5] = (WTF::StringImpl *)&v36;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v27, this, v23, 6, (uint64_t)v35);
  if ((*(_BYTE *)((16 * *(unsigned int *)v21) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v21, (uint64_t)this, v36, v25);
  *((_DWORD *)v27 + 4) |= 0x10u;
  LODWORD(v35[0]) = 23;
  if ((v21 & 0xFFFE000000000002) == 0)
  {
    v29 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v21);
    if (v29)
      JSC::JSObject::didBecomePrototype(v29, this);
  }
  v30 = *v15;
  if (*v15 >= *((_QWORD *)this + 5018))
  {
    v30 = *((_QWORD *)this + 5019);
    if ((v30 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v30 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_28;
    }
    v33 = *(_QWORD *)(v30 + 8) ^ *((_QWORD *)this + 5020);
    *((_QWORD *)this + 5018) = v30 + HIDWORD(v33);
    *((_QWORD *)this + 5019) = v30 + (int)v33;
  }
  *v15 = v30 + 128;
LABEL_28:
  *(_DWORD *)v30 = 0;
  MEMORY[0x19AEA4278](v30, this, a2, v21, v35, &WebCore::JSXMLHttpRequestEventTarget::s_info, 0, 0, v34);
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v12 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSXMLHttpRequestEventTarget::s_info);
  return *(_QWORD *)(v12 + 48);
}

unint64_t WebCore::JSXMLHttpRequestPrototype::create(WebCore::JSXMLHttpRequestPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  BOOL v10;
  char **v11;
  BOOL v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  JSC::Structure *v17;
  int v18;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  WTF::StringImpl *v25[6];
  int v26;
  int v27;
  JSC::Structure *v28;
  int v29;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v24 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v24);
    *((_QWORD *)this + 4865) = SlowCase + (int)v24;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<25u>(this, (uint64_t)&WebCore::JSXMLHttpRequest::s_info, (uint64_t)&WebCore::JSXMLHttpRequestPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(unsigned int *)(16 * (**(_DWORD **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) & 0xFFFFFFFE) + 0x4C);
  v10 = *(_DWORD *)(16 * (**(_DWORD **)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x28) & 0xFFFFFFFE) + 0x4C) != 0;
  v11 = (char **)(16 * v9);
  if ((_DWORD)v9)
    v12 = v11 == &WebCore::JSDOMWindowBase::s_info;
  else
    v12 = 1;
  if (!v12)
  {
    do
    {
      v11 = (char **)v11[2];
      v10 = v11 != 0;
    }
    while (v11 != &WebCore::JSDOMWindowBase::s_info && v11 != 0);
  }
  if (!v10)
  {
    WTF::AtomStringImpl::addLiteral();
    v21 = v25[0];
    v22 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v25[0]) = -1;
    WORD2(v25[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v22;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v23);
      else
        *(_DWORD *)v21 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v13 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = JSC::JSString::create((uint64_t)this, v25);
  v16 = v25[0];
  v25[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v29 = *(_DWORD *)SlowCase;
  v28 = v17;
  v18 = JSC::Structure::outOfLineCapacity(v17);
  v26 = 0;
  v27 = v18;
  v25[0] = (WTF::StringImpl *)&v27;
  v25[1] = (WTF::StringImpl *)SlowCase;
  v25[2] = this;
  v25[3] = (WTF::StringImpl *)&v29;
  v25[4] = (WTF::StringImpl *)&v28;
  v25[5] = (WTF::StringImpl *)&v26;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v17, this, v13, 6, (uint64_t)v25);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v26, v15);
  *((_DWORD *)v17 + 4) |= 0x10u;
  return SlowCase;
}

uint64_t WebCore::JSXMLHttpRequestPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSXMLHttpRequest::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

JSC::VM *JSC::reifyStaticProperties<25u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t i;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  for (i = 0; i != 1000; i += 40)
  {
    v9 = *(_QWORD *)(a3 + i + 8);
    if (v9)
    {
      if (v9 == 2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v10 = v12;
      result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v12, a3 + i, (unsigned __int8 *)this);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          result = (JSC::VM *)WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderDeprecatedFlexibleBox::computePreferredLogicalWidths(WebCore::RenderDeprecatedFlexibleBox *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t result;
  float *v12;
  float v13;
  int v14;

  *((_DWORD *)this + 47) = 0;
  *((_DWORD *)this + 46) = 0;
  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  if (*(_BYTE *)(v2 + 8) == 4
    && ((v12 = (float *)(v2 + 4), *(_BYTE *)(v2 + 10)) ? (v13 = *v12) : (v13 = (float)*(int *)v12), v13 > 0.0))
  {
    v14 = WebCore::RenderBox::adjustContentBoxLogicalWidthForBoxSizing(this, (uint64_t)v12);
    *((_DWORD *)this + 46) = v14;
    *((_DWORD *)this + 47) = v14;
  }
  else
  {
    WebCore::RenderDeprecatedFlexibleBox::computeIntrinsicLogicalWidths(this, (WebCore::RenderDeprecatedFlexibleBox *)((char *)this + 184), (WebCore::RenderDeprecatedFlexibleBox *)((char *)this + 188));
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v4 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1064))(this);
  v5 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 1072))(this);
  if (__OFADD__(v4, v5))
    v6 = (v4 >> 31) + 0x7FFFFFFF;
  else
    v6 = v4 + v5;
  v7 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 976))(this);
  if (__OFADD__(v6, v7))
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  else
    v8 = v6 + v7;
  v9 = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 984))(this);
  if (__OFADD__(v8, v9))
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  else
    v10 = v8 + v9;
  result = WebCore::RenderBox::computePreferredLogicalWidths((uint64_t)this, (const WebCore::RenderBox *)(v3 + 20), v3 + 28, v10);
  *((_DWORD *)this + 5) &= ~0x2000u;
  return result;
}

uint64_t WebCore::RenderDeprecatedFlexibleBox::computeIntrinsicLogicalWidths(WebCore::RenderDeprecatedFlexibleBox *this, WebCore::LayoutUnit *a2, WebCore::LayoutUnit *a3)
{
  uint64_t result;
  WebCore::RenderBox *v7;
  unint64_t v8;
  uint64_t v9;
  signed int v10;
  int v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  signed int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  int v32;
  _QWORD v33[3];

  v33[0] = this;
  v33[1] = a3;
  v33[2] = a2;
  result = WebCore::RenderElement::shouldApplySizeOrInlineSizeContainment(this);
  if (!(_DWORD)result)
  {
    v8 = *((unsigned int *)this + 16) | ((unint64_t)*((unsigned __int8 *)this + 68) << 32);
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 32) + 8) + 16) & 0x60) != 0)
    {
      if ((v8 & 0xFFFFFFFFFFLL) != 0)
      {
        v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFLL) + 8);
        if (v9)
        {
          while ((*(_BYTE *)(v9 + 45) & 4) != 0)
          {
            if ((*(_DWORD *)(v9 + 20) & 0x1800000) != 0x1000000)
            {
              v17 = WebCore::marginWidthForChild((WebCore *)v9, v7);
              v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 408))(v9);
              v19 = v18 + v17;
              if (__OFADD__(v18, v17))
                v19 = (v18 >> 31) + 0x7FFFFFFF;
              if (v19 <= *(_DWORD *)a2)
                v19 = *(_DWORD *)a2;
              *(_DWORD *)a2 = v19;
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 416))(v9);
              v20 = result + v17;
              if (__OFADD__((_DWORD)result, v17))
                v20 = (result >> 31) + 0x7FFFFFFF;
              if (v20 <= *(_DWORD *)a3)
                v20 = *(_DWORD *)a3;
              *(_DWORD *)a3 = v20;
            }
            v21 = *(unsigned int *)(v9 + 47);
            if (!(v21 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)))
              break;
            v9 = *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(v9 + 51) << 32)) + 8);
            if (!v9)
              break;
          }
        }
      }
    }
    else if ((v8 & 0xFFFFFFFFFFLL) != 0)
    {
      v23 = *(_QWORD *)((v8 & 0xFFFFFFFFFFLL) + 8);
      if (v23)
      {
        while ((*(_BYTE *)(v23 + 45) & 4) != 0)
        {
          v24 = v23;
          if ((*(_DWORD *)(v23 + 20) & 0x1800000) != 0x1000000)
          {
            v25 = WebCore::marginWidthForChild((WebCore *)v23, v7);
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 408))(v24);
            v27 = v26 + v25;
            if (__OFADD__(v26, v25))
              v27 = (v26 >> 31) + 0x7FFFFFFF;
            v14 = __OFADD__(*(_DWORD *)a2, v27);
            v28 = *(_DWORD *)a2 + v27;
            if (v14)
              v28 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)a2 = v28;
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 416))(v24);
            v29 = result + v25;
            if (__OFADD__((_DWORD)result, v25))
              v29 = (result >> 31) + 0x7FFFFFFF;
            v14 = __OFADD__(*(_DWORD *)a3, v29);
            v30 = *(_DWORD *)a3 + v29;
            if (v14)
              v30 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
            *(_DWORD *)a3 = v30;
          }
          v31 = *(unsigned int *)(v24 + 47);
          if (!(v31 | ((unint64_t)*(unsigned __int8 *)(v24 + 51) << 32)))
            break;
          v23 = *(_QWORD *)((v31 | ((unint64_t)*(unsigned __int8 *)(v24 + 51) << 32)) + 8);
          if (!v23)
            break;
        }
      }
    }
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= *(_DWORD *)a3)
      v10 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v10;
    v11 = *((_DWORD *)this + 5);
    if ((v11 & 0x10000) == 0)
      goto LABEL_9;
    if ((v11 & 0x1000) != 0)
      goto LABEL_71;
    if ((*((_QWORD *)this + 12) & 0xE000) == 0x6000)
    {
      result = WebCore::RenderBox::canUseOverlayScrollbars(this);
      if (!(_DWORD)result)
      {
        v16 = 169;
        goto LABEL_64;
      }
      if ((*((_BYTE *)this + 21) & 0x10) != 0)
      {
LABEL_71:
        if ((*((_QWORD *)this + 12) & 0x1C00) == 0xC00)
        {
          result = WebCore::RenderBox::canUseOverlayScrollbars(this);
          if ((result & 1) == 0)
          {
            v16 = 170;
LABEL_64:
            result = (*(uint64_t (**)(WebCore::RenderDeprecatedFlexibleBox *))(*(_QWORD *)this + 8 * v16))(this);
            v32 = (_DWORD)result << 6;
            if ((int)result > 0x1FFFFFF)
              v32 = 0x7FFFFFFF;
            if ((int)result >= -33554432)
              v12 = v32;
            else
              v12 = 0x80000000;
            goto LABEL_10;
          }
        }
      }
    }
LABEL_9:
    v12 = 0;
LABEL_10:
    v13 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(*(_DWORD *)a3, v12))
      v13 = *(_DWORD *)a3 + v12;
    *(_DWORD *)a3 = v13;
    v14 = __OFADD__(*(_DWORD *)a2, v12);
    v15 = *(_DWORD *)a2 + v12;
    if (v14)
      v15 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
    *(_DWORD *)a2 = v15;
    return result;
  }
  v22 = WebCore::RenderBox::explicitIntrinsicInnerLogicalWidth(this);
  if ((v22 & 0xFF00000000) != 0)
  {
    *(_DWORD *)a2 = v22;
    *(_DWORD *)a3 = v22;
  }
  return WebCore::RenderDeprecatedFlexibleBox::computeIntrinsicLogicalWidths(WebCore::LayoutUnit &,WebCore::LayoutUnit &)const::$_0::operator()((uint64_t)v33);
}

uint64_t WebCore::marginWidthForChild(WebCore *this, WebCore::RenderBox *a2)
{
  uint64_t v2;
  int v3;
  void *v4;
  float v5;
  int v6;
  int v7;
  void *v8;
  float v9;
  int v10;
  float v11;
  double v12;
  uint64_t v13;
  double v14;
  int v17;
  unsigned __int8 v18;
  char v19;
  char v20;
  int v21;
  unsigned __int8 v22;
  char v23;
  char v24;

  v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
  v24 = 0;
  v22 = *(_BYTE *)(v2 + 68);
  v3 = v22;
  v23 = *(_BYTE *)(v2 + 69);
  if (v22 - 2 >= 9)
  {
    if (v22 == 11)
    {
      v4 = (void *)*(unsigned int *)(v2 + 64);
      v21 = *(_DWORD *)(v2 + 64);
      WebCore::Length::ref(&v21);
      v2 = *(_QWORD *)(*((_QWORD *)this + 11) + 24);
      goto LABEL_4;
    }
    v4 = 0;
    v6 = 1;
    v5 = 0.0;
  }
  else
  {
    if (!*(_BYTE *)(v2 + 70))
    {
      v4 = (void *)*(unsigned int *)(v2 + 64);
LABEL_4:
      v5 = *(float *)&v4;
      v6 = 1;
      goto LABEL_7;
    }
    v6 = 0;
    v5 = *(float *)(v2 + 64);
    v4 = (void *)LODWORD(v5);
  }
LABEL_7:
  v20 = 0;
  v18 = *(_BYTE *)(v2 + 52);
  v7 = v18;
  v19 = *(_BYTE *)(v2 + 53);
  if (v18 - 2 >= 9)
  {
    if (v18 == 11)
    {
      v8 = (void *)*(unsigned int *)(v2 + 48);
      v17 = *(_DWORD *)(v2 + 48);
      WebCore::Length::ref(&v17);
      goto LABEL_10;
    }
    v8 = 0;
    v10 = 1;
    v9 = 0.0;
  }
  else
  {
    if (!*(_BYTE *)(v2 + 54))
    {
      v8 = (void *)*(unsigned int *)(v2 + 48);
LABEL_10:
      v9 = *(float *)&v8;
      v10 = 1;
      goto LABEL_13;
    }
    v10 = 0;
    v9 = *(float *)(v2 + 48);
    v8 = (void *)LODWORD(v9);
  }
LABEL_13:
  if (v3 == 4)
  {
    v11 = (float)SLODWORD(v5);
    if (!v6)
      v11 = v5;
    v12 = (float)(v11 + 0.0) * 64.0;
    if (v12 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFFLL;
    }
    else if (v12 <= -2147483650.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v12;
    }
  }
  else
  {
    v13 = 0;
  }
  if (v7 == 4)
  {
    if (v10)
      v9 = (float)SLODWORD(v9);
    v14 = (float)((float)((float)(int)v13 * 0.015625) + v9) * 64.0;
    if (v14 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFFLL;
    }
    else if (v14 <= -2147483650.0)
    {
      v13 = 0x80000000;
    }
    else
    {
      v13 = (int)v14;
    }
  }
  else if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v8);
  }
  if (v3 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v4);
  }
  return v13;
}

void WebCore::JSDOMGlobalObject::~JSDOMGlobalObject(WebCore::JSDOMGlobalObject *this)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::DOMWrapperWorld *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  JSC::Heap::unregisterWeakGCHashTable();
  v3 = *((_QWORD *)this + 423);
  if (v3)
  {
    v13 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v13)
    {
      v14 = v3 + 16;
      do
      {
        if (*(_QWORD *)(v14 - 16) != -1 && *(_QWORD *)v14)
        {
          *(_QWORD *)(*(_QWORD *)v14 + 8) = 3;
          *(_QWORD *)v14 = 0;
        }
        v14 += 24;
        --v13;
      }
      while (v13);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  JSC::Heap::unregisterWeakGCHashTable();
  v5 = *((_QWORD *)this + 420);
  if (v5)
  {
    v15 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v15)
    {
      v16 = v5 + 16;
      do
      {
        if (*(_QWORD *)(v16 - 16) != -1 && *(_QWORD *)v16)
        {
          *(_QWORD *)(*(_QWORD *)v16 + 8) = 3;
          *(_QWORD *)v16 = 0;
        }
        v16 += 24;
        --v15;
      }
      while (v15);
    }
    WTF::fastFree((WTF *)(v5 - 16), v4);
  }
  v6 = *((_QWORD *)this + 418);
  *((_QWORD *)this + 418) = 0;
  if (v6)
    MEMORY[0x19AEA7644](v6, 0x20C4032E8FB08);
  v7 = (WebCore::DOMWrapperWorld *)*((_QWORD *)this + 415);
  *((_QWORD *)this + 415) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(v7, (WTF::StringImpl *)v4);
      WTF::fastFree(v11, v12);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = (WTF *)*((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = 0;
  if (v8)
    WTF::fastFree(v8, v4);
  v9 = *((_QWORD *)this + 413);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), v4);
  v10 = *((_QWORD *)this + 412);
  if (v10)
    WTF::fastFree((WTF *)(v10 - 16), v4);
  JSC::JSGlobalObject::~JSGlobalObject(this);
}

unint64_t WebCore::JSHTMLDivElementPrototype::create(WebCore::JSHTMLDivElementPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSHTMLDivElement::s_info, (uint64_t)&WebCore::JSHTMLDivElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::JSHTMLTitleElementPrototype::create(WebCore::JSHTMLTitleElementPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSHTMLTitleElement::s_info, (uint64_t)&WebCore::JSHTMLTitleElementPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

JSC::VM *JSC::reifyStaticProperties<2u>(JSC::VM *result, uint64_t a2, uint64_t a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
    if (v8 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v9 = v15;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v15, a3, (unsigned __int8 *)this);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v11 = *(_QWORD *)(a3 + 48);
  if (v11)
  {
    v12 = a3 + 40;
    if (v11 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v13 = v15;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v15, v12, (unsigned __int8 *)this);
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        return (JSC::VM *)WTF::StringImpl::destroy(v13, v14);
      else
        *(_DWORD *)v13 -= 2;
    }
  }
  return result;
}

void WebCore::DeferredPromise::~DeferredPromise(WebCore::DeferredPromise *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E3392210;
  WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v2);
  WTF::fastFree(v5, v6);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3392210;
  WebCore::DOMGuardedObject::removeFromGlobalObject((uint64_t)this);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 3;
    *((_QWORD *)this + 3) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 3;
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver(this, v2);
}

uint64_t WebCore::DOMGuardedObject::removeFromGlobalObject(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  int v21;

  v1 = *(uint64_t **)(this + 32);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      if ((v1[1] & 3) == 0)
      {
        v3 = this;
        if (!*(_BYTE *)(*(_QWORD *)(v2 + 56) + 755))
        {
          v4 = *(_QWORD *)(v2 + 3304);
          if (v4)
          {
            v5 = *(_DWORD *)(v4 - 8);
            v6 = (~(this << 32) + this) ^ ((unint64_t)(~(this << 32) + this) >> 22);
            v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
            v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
            v9 = v5 & ((v8 >> 31) ^ v8);
            v10 = *(_QWORD *)(v4 + 8 * v9);
            if (v10 != this)
            {
              v18 = 1;
              while (v10)
              {
                v9 = ((_DWORD)v9 + v18) & v5;
                v10 = *(_QWORD *)(v4 + 8 * v9);
                ++v18;
                if (v10 == this)
                  goto LABEL_7;
              }
              v9 = *(unsigned int *)(v4 - 4);
            }
LABEL_7:
            if (v9 != *(_DWORD *)(v4 - 4))
            {
              *(_QWORD *)(v4 + 8 * v9) = -1;
              this = v2 + 3304;
              ++*(_DWORD *)(*(_QWORD *)(v2 + 3304) - 16);
              v11 = *(_QWORD *)this;
              v12 = *(_QWORD *)this ? *(_DWORD *)(v11 - 12) - 1 : -1;
              *(_DWORD *)(v11 - 12) = v12;
              v13 = *(_QWORD *)this;
              if (*(_QWORD *)this)
              {
                v14 = 6 * *(_DWORD *)(v13 - 12);
                v15 = *(_DWORD *)(v13 - 4);
                if (v14 < v15 && v15 >= 9)
                  this = (uint64_t)WTF::HashTable<WebCore::DOMGuardedObject *,WebCore::DOMGuardedObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>>::rehash((uint64_t *)this, v15 >> 1, 0);
              }
            }
          }
          goto LABEL_16;
        }
        v19 = (unsigned __int8 *)(v2 + 3329);
        if (__ldaxr((unsigned __int8 *)(v2 + 3329)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v19))
        {
LABEL_27:
          this = (uint64_t)WTF::HashSet<WebCore::DOMGuardedObject *,WTF::DefaultHash<WebCore::DOMGuardedObject *>,WTF::HashTraits<WebCore::DOMGuardedObject *>,WTF::HashTableTraits>::remove((uint64_t *)(**(_QWORD **)(v3 + 32) + 3304), v3);
          v21 = __ldxr(v19);
          if (v21 == 1)
          {
            if (!__stlxr(0, v19))
            {
LABEL_16:
              v17 = *(_QWORD *)(v3 + 32);
              if (v17)
              {
                *(_QWORD *)(v17 + 8) = 3;
                *(_QWORD *)(v3 + 32) = 0;
              }
              return this;
            }
          }
          else
          {
            __clrex();
          }
          this = WTF::Lock::unlockSlow((WTF::Lock *)v19);
          goto LABEL_16;
        }
        MEMORY[0x19AEA534C](v19);
        goto LABEL_27;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::HTMLConstructionSite::insertDoctype(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WebCore::Node *v8;
  _DWORD **v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  uint64_t v21;
  uint64_t v22;
  WebCore::Node *v23;
  WebCore::Node *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  v4 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(v4 + 32))
  {
    WTF::StringImpl::create8BitIfPossible();
    v5 = v26;
    v4 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v5 = 0;
  }
  v25 = v5;
  if (*(_BYTE *)(v4 + 33))
  {
    WTF::StringImpl::create8BitIfPossible();
    v6 = v26;
  }
  else
  {
    v6 = 0;
  }
  v26 = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  v8 = *(WebCore::Node **)(*(_QWORD *)(a1 + 40) + 8);
  *((_DWORD *)v8 + 6) += 2;
  v24 = v8;
  v9 = (_DWORD **)a2;
  if (!*(_QWORD *)a2)
  {
    v10 = *(unsigned __int16 *)(a2 + 58);
    if (v10 >= 0x127)
      goto LABEL_188;
    v9 = (_DWORD **)&WebCore::tagNameStrings[v10];
  }
  v11 = bmalloc::api::isoAllocate();
  *(_OWORD *)(v11 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v11 + 24) = 0xA00000000002;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = v7 + 96;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  ++*(_DWORD *)(v7 + 3324);
  *(_QWORD *)v11 = off_1E33A3E18;
  v12 = *v9;
  if (*v9)
    *v12 += 2;
  *(_QWORD *)(v11 + 80) = v12;
  v13 = v25;
  if (v25 || (v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
    *(_DWORD *)v13 += 2;
  *(_QWORD *)(v11 + 88) = v13;
  v14 = v26;
  if (v26 || (v14 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
    *(_DWORD *)v14 += 2;
  *(_QWORD *)(v11 + 96) = v14;
  v23 = (WebCore::Node *)v11;
  WebCore::HTMLConstructionSite::attachLater(a1, &v24, &v23, 0);
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 2)
    {
      if ((*((_WORD *)v23 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v23, v15);
    }
    else
    {
      *((_DWORD *)v23 + 6) -= 2;
    }
  }
  if (v24)
  {
    if (*((_DWORD *)v24 + 6) == 2)
    {
      if ((*((_WORD *)v24 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v24, v15);
    }
    else
    {
      *((_DWORD *)v24 + 6) -= 2;
    }
  }
  if (*(_BYTE *)(a1 + 169))
    goto LABEL_31;
  if (*(_BYTE *)(*(_QWORD *)(a2 + 16) + 34) && !*(_BYTE *)(v7 + 3403))
    goto LABEL_184;
  v16 = *(_DWORD **)a2;
  if (!*(_QWORD *)a2)
  {
    v10 = *(unsigned __int16 *)(a2 + 58);
    if (v10 < 0x127)
    {
      v16 = (_DWORD *)WebCore::tagNameStrings[v10];
      goto LABEL_25;
    }
LABEL_188:
    __break(1u);
LABEL_189:
    if (*(_DWORD *)(v10 + 4))
      goto LABEL_190;
LABEL_160:
    if (v25)
    {
      if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 4.01 frameset//", 0x20uLL))
      {
        goto LABEL_184;
      }
      v10 = (unint64_t)v26;
    }
    if (v10 && *(_DWORD *)(v10 + 4))
      goto LABEL_190;
    if (!v25)
    {
LABEL_191:
      if (!v26
        || !*((_DWORD *)v26 + 1)
        || !v25
        || !WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 4.01 frameset//", 0x20uLL)&& (!v26|| !*((_DWORD *)v26 + 1)|| !v25|| !WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 4.01 transitional//", 0x24uLL)))
      {
        v21 = a1;
        v22 = 1;
        goto LABEL_185;
      }
LABEL_194:
      v21 = a1;
      v22 = 4;
      goto LABEL_185;
    }
    if (!WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 4.01 transitional//", 0x24uLL))
    {
LABEL_190:
      if (v25
        && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd xhtml 1.0 frameset//", 0x20uLL)|| v25&& WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd xhtml 1.0 transitional//", 0x24uLL)))
      {
        goto LABEL_194;
      }
      goto LABEL_191;
    }
LABEL_184:
    v21 = a1;
    v22 = 2;
LABEL_185:
    WebCore::HTMLConstructionSite::setCompatibilityMode(v21, (void *)v22);
    goto LABEL_31;
  }
LABEL_25:
  if (*(_DWORD **)(WebCore::HTMLNames::htmlTag + 24) == v16)
  {
    if (v25 && *((_DWORD *)v25 + 1))
    {
      v17 = *(_QWORD *)(a1 + 32);
      if (!*(_BYTE *)(*(_QWORD *)(v17 + 8) + 3403))
      {
LABEL_46:
        if (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"+//silmaril//dtd html pro v0r11 19970101//", 0x2AuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//advasoft ltd//dtd html 3.0 aswedit + extensions//", 0x34uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//as//dtd html 3.0 aswedit + extensions//", 0x2AuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 2.0 level 1//", 0x1FuLL)|| v25
             && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 2.0 level 2//", 0x1FuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 2.0 strict level 1//", 0x26uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 2.0 strict level 2//", 0x26uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 2.0 strict//", 0x1EuLL)|| v25
                 && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 2.0//", 0x17uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 2.1e//", 0x18uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 3.0//", 0x17uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 3.2 final//", 0x1DuLL)|| v25
                     && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 3.2//", 0x17uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html 3//", 0x15uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html level 0//", 0x1BuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html level 1//", 0x1BuLL)|| v25
                         && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html level 2//", 0x1BuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html level 3//", 0x1BuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html strict level 0//", 0x22uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html strict level 1//", 0x22uLL)|| v25
                             && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html strict level 2//", 0x22uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html strict level 3//", 0x22uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html strict//", 0x1AuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//ietf//dtd html//", 0x13uLL)|| v25
                                 && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//metrius//dtd metrius presentational//", 0x28uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//microsoft//dtd internet explorer 2.0 html strict//", 0x35uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//microsoft//dtd internet explorer 2.0 html//", 0x2EuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//microsoft//dtd internet explorer 2.0 tables//", 0x30uLL)|| v25
                                     && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//microsoft//dtd internet explorer 3.0 html strict//", 0x35uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//microsoft//dtd internet explorer 3.0 html//", 0x2EuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//microsoft//dtd internet explorer 3.0 tables//", 0x30uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//netscape comm. corp.//dtd html//", 0x23uLL)|| v25
                                         && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//netscape comm. corp.//dtd strict html//", 0x2AuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//o'reilly and associates//dtd html 2.0//", 0x2AuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//o'reilly and associates//dtd html extended 1.0//", 0x33uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//o'reilly and associates//dtd html extended relaxed 1.0//", 0x3BuLL)|| v25
                                             && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//", 0x4EuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//", 0x45uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//spyglass//dtd html 2.0 extended//", 0x24uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//sq//dtd html 2.0 hotmetal + extensions//", 0x2BuLL)
                                                 || v25
                                                 && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//sun microsystems corp.//dtd hotjava html//", 0x2DuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//sun microsystems corp.//dtd hotjava strict html//", 0x34uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 3 1995-03-24//", 0x1FuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 3.2 draft//", 0x1CuLL)|| v25
                                                     && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 3.2 final//", 0x1CuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 3.2//", 0x16uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 3.2s draft//", 0x1DuLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 4.0 frameset//", 0x1FuLL)|| v25
                                                         && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html 4.0 transitional//", 0x23uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html experimental 19960712//", 0x28uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd html experimental 970421//", 0x26uLL)|| v25&& (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3c//dtd w3 html//", 0x15uLL)|| v25
                                                             && WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//w3o//dtd w3 html 3.0//", 0x19uLL)))))))))))))))))))))))))))))))))))))))))))))))))))))
        {
          goto LABEL_184;
        }
LABEL_151:
        if ((WTF::equalLettersIgnoringASCIICase((uint64_t *)&v25, "-//w3o//dtd w3 html strict 3.0//en//", 0x25uLL) & 1) != 0
          || v25
          && (WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//webtechs//dtd mozilla html 2.0//", 0x23uLL)|| v25&& WTF::startsWithLettersIgnoringASCIICaseCommon<WTF::StringImpl>((uint64_t)v25, (uint64_t)"-//webtechs//dtd mozilla html//", 0x1FuLL))|| (WTF::equalLettersIgnoringASCIICase((uint64_t *)&v25, "-/w3c/dtd html 4.0 transitional/en", 0x23uLL) & 1) != 0|| (WTF::equalLettersIgnoringASCIICase((uint64_t *)&v25, "html", 5uLL) & 1) != 0|| (WTF::equalLettersIgnoringASCIICase((uint64_t *)&v26, "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd", 0x3BuLL) & 1) != 0)
        {
          goto LABEL_184;
        }
        v10 = (unint64_t)v26;
        if (!v26)
          goto LABEL_160;
        goto LABEL_189;
      }
    }
    else if (v26)
    {
      v17 = *(_QWORD *)(a1 + 32);
      if (*((_DWORD *)v26 + 1) && !*(_BYTE *)(*(_QWORD *)(v17 + 8) + 3403))
      {
        if (!v25)
          goto LABEL_151;
        goto LABEL_46;
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 32);
    if (!*(_BYTE *)(*(_QWORD *)(v17 + 8) + 3403))
      goto LABEL_184;
  }
  *(_BYTE *)(a1 + 176) = 0;
  v18 = *(_QWORD *)(v17 + 8);
  *(_DWORD *)(v18 + 24) += 2;
  WebCore::Document::setCompatibilityMode(v18, (void *)1);
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v18, v15);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
LABEL_31:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v15);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v19 = v26;
  v26 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v25;
  v25 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::Document::setCompatibilityMode(uint64_t a1, void *a2)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  WebCore::Style::Scope *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WebCore::Style::Scope *v17;
  int v18;
  uint64_t v19;

  if (*(_BYTE *)(a1 + 3385))
    return;
  v3 = *(unsigned __int8 *)(a1 + 3384);
  if (v3 == (_DWORD)a2)
    return;
  *(_BYTE *)(a1 + 3384) = (_BYTE)a2;
  if (((_DWORD)a2 == 2) != (v3 == 2))
  {
    v4 = *(_QWORD *)(a1 + 1336);
    if (v4)
    {
      v5 = *(_DWORD **)(v4 + 16);
      if (v5)
      {
        *(_QWORD *)(v4 + 16) = 0;
        if (v5[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        else
          --v5[2];
        v16 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
        *(_DWORD *)(v16 + 24) += 2;
        v19 = v16;
        v17 = *(WebCore::Style::Scope **)(v16 + 1328);
        ++*((_DWORD *)v17 + 2);
        WebCore::Style::Scope::didChangeStyleSheetEnvironment(v17, a2);
        v18 = *((_DWORD *)v17 + 2);
        if (!v18)
        {
          __break(0xC471u);
LABEL_36:
          JUMPOUT(0x1944BEB20);
        }
        *((_DWORD *)v17 + 2) = v18 - 1;
        WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v19);
      }
      *(_BYTE *)(v4 + 64) = 0;
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
      *(_DWORD *)(v6 + 24) += 2;
      v7 = *(WebCore::Style::Scope **)(v6 + 1328);
      ++*((_DWORD *)v7 + 2);
      WebCore::Style::Scope::didChangeStyleSheetEnvironment(v7, a2);
      v8 = *((_DWORD *)v7 + 2);
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1944BEB40);
      }
      *((_DWORD *)v7 + 2) = v8 - 1;
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
  }
  v9 = *(_QWORD *)(a1 + 1944);
  if (!v9)
    goto LABEL_16;
  v10 = *(_DWORD *)(v9 + 16);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 40) + 8) + 3384);
  if (v11 == 4)
    v12 = 1;
  else
    v12 = 2 * (v11 == 2);
  *(_DWORD *)(*(_QWORD *)(v9 + 272) + 48) = v12;
  *(_DWORD *)(v9 + 16) = v10 + 1;
  if (v10 == -1)
  {
    __break(0xC471u);
    goto LABEL_36;
  }
  *(_DWORD *)(v9 + 16) = v10;
LABEL_16:
  v13 = *(WTF::StringImpl ***)(a1 + 3496);
  *(_QWORD *)(a1 + 3496) = 0;
  if (v13)
  {
    v14 = v13[5];
    v13[5] = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = *v13;
    *v13 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v15 -= 2;
    }
    WTF::fastFree((WTF *)v13, a2);
  }
}

uint64_t WebCore::DocumentLoader::mouseEventPolicy(WebCore::DocumentLoader *this, WebCore::Document *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  WebCore::Quirks *v6;

  result = *((unsigned __int8 *)this + 3527);
  if (!(_DWORD)result)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && *(WebCore::DocumentLoader **)(*(_QWORD *)(v5 + 280) + 88) == this)
    {
      result = *(_QWORD *)(v5 + 296);
      if (result)
      {
        v6 = *(WebCore::Quirks **)(result + 688);
        if (!v6)
          v6 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)result);
        if ((WebCore::Quirks::shouldSynthesizeTouchEvents(v6, a2) & 1) != 0)
          return 1;
        else
          return *((unsigned __int8 *)this + 3527);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::isYahooMail(WebCore *this, WebCore::Document *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  WTF::StringImpl **v19;
  WTF::StringImpl *v20;

  v2 = *((_QWORD *)this + 66);
  if (*((unsigned __int8 *)this + 3362) | *((unsigned __int8 *)this + 3405))
  {
    for (; v2; v2 = *((_QWORD *)this + 66))
    {
      v13 = *(_QWORD *)(v2 + 8);
      if (!v13)
        break;
      v14 = *(_QWORD *)(v13 + 120);
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 8);
      if (!v15)
        break;
      this = *(WebCore **)(*(_QWORD *)(v15 + 40) + 8);
    }
  }
  else if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v3 + 128) + 8);
      if (v4 && *(_BYTE *)(v4 + 144) == 0)
      {
        v6 = *(WebCore **)(v4 + 296);
        if (v6)
          this = v6;
      }
    }
  }
  v16 = WTF::URL::host((WebCore *)((char *)this + 736));
  v17 = v7;
  if (!WTF::StringView::startsWith())
    return 0;
  v8 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v8 != -1)
  {
    v20 = (WTF::StringImpl *)&v18;
    v19 = &v20;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v19, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v16, v17, (uint64_t *)&v20);
  if (!v20)
    return 0;
  v10 = WTF::StringImpl::startsWith();
  v11 = v20;
  v20 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  return v10;
}

uint64_t WebCore::CSSPrimitiveValue::doubleValueInternal(uint64_t a1, unsigned int a2)
{
  char v4;
  int v5;
  double v6;
  unsigned int v7;
  _BYTE *v9;
  unsigned int v10;
  unsigned int v11;
  double v12;
  double v13;
  uint64_t v14;
  char v15;
  double v16;
  double v17;
  char v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v4 = *(_WORD *)(a1 + 4);
  v5 = *(_WORD *)(a1 + 4) & 0x7F;
  v6 = 0.0;
  if (!WebCore::isValidCSSUnitTypeForDoubleConversion(v5)
    || !WebCore::isValidCSSUnitTypeForDoubleConversion(a2))
  {
    return *(_QWORD *)&v6;
  }
  v7 = 22;
  if ((v5 - 79) >= 2)
  {
    if (v5 == 77)
    {
      v7 = 20;
    }
    else if (v5 != 63)
    {
      v7 = v5;
      if ((v4 & 0x7F) == 0x49)
      {
        v9 = *(_BYTE **)(*(_QWORD *)(a1 + 8) + 8);
        if (v9[12] == 1)
        {
LABEL_12:
          v7 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 72))(v9);
        }
        else
        {
          v7 = 1;
          switch(v9[12])
          {
            case 0:
              break;
            case 2:
              v7 = 3;
              break;
            case 3:
              v7 = 74;
              break;
            case 4:
              v7 = 75;
              break;
            case 5:
            case 6:
            case 7:
            case 8:
              goto LABEL_12;
            default:
              v7 = 0;
              break;
          }
        }
      }
    }
  }
  if (v7 != a2 && a2 != 19)
  {
    v10 = WebCore::unitCategory(v7);
    v11 = WebCore::unitCategory(a2);
    if (v11 && v10 && v10 != v11)
      return *(_QWORD *)&v6;
    if (v11)
    {
      if ((v7 - 1) >= 2u)
      {
LABEL_19:
        v12 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)a1);
        v13 = v12;
        if (v7 == a2)
        {
          v6 = v12;
        }
        else
        {
          v14 = WebCore::CSSPrimitiveValue::conversionToCanonicalUnitsScaleFactor(v7);
          if (v15)
          {
            v16 = *(double *)&v14;
            v17 = COERCE_DOUBLE(WebCore::CSSPrimitiveValue::conversionToCanonicalUnitsScaleFactor(a2));
            if (v18)
              v6 = v13 * v16 / v17;
          }
        }
        return *(_QWORD *)&v6;
      }
      if (v11 == 1)
        return *(_QWORD *)&v6;
    }
    else
    {
      if (v10 == 1)
        return *(_QWORD *)&v6;
      v19 = v11;
      v20 = WebCore::canonicalUnitTypeForCategory(v10);
      if (!v20)
        return *(_QWORD *)&v6;
      a2 = v20;
      v11 = v19;
      if ((v7 - 1) >= 2u)
        goto LABEL_19;
    }
    v7 = WebCore::canonicalUnitTypeForCategory(v11);
    if (!v7)
      return *(_QWORD *)&v6;
    goto LABEL_19;
  }
  if ((*(_WORD *)(a1 + 4) & 0x7F) == 0x49)
  {
    v21 = *(_QWORD *)(a1 + 8);
    v23 = 0;
    v6 = WebCore::CSSCalcValue::doubleValue(v21, (uint64_t)&v23);
    if (v23)
      WTF::fastFree((WTF *)(v23 - 16), v22);
  }
  else
  {
    v6 = *(double *)(a1 + 8);
  }
  return *(_QWORD *)&v6;
}

uint64_t WebCore::isValidCSSUnitTypeForDoubleConversion(int a1)
{
  uint64_t result;

  result = 1;
  if ((a1 - 1) >= 0x13)
  {
    switch(a1)
    {
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 81:
        return result;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

void WebCore::TreeScopeOrderedMap::remove(WebCore::TreeScopeOrderedMap *this, const WTF::AtomString *a2, WebCore::Element *a3)
{
  uint64_t v3;
  int v5;
  unsigned int i;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  WebCore::Element *v14;
  WTF::StringImpl *v16;
  void *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    goto LABEL_46;
  v5 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v5 + v7)
  {
    v7 = i & *(_DWORD *)(v3 - 8);
    v8 = v3 + 40 * v7;
    v9 = *(WTF::StringImpl **)v8;
    if (!*(_QWORD *)v8)
      break;
    if (v9 != (WTF::StringImpl *)-1 && v9 == *(WTF::StringImpl **)a2)
    {
      v11 = *(_DWORD *)(v3 - 4);
      goto LABEL_10;
    }
  }
  v11 = *(_DWORD *)(v3 - 4);
  v8 = v3 + 40 * v11;
LABEL_10:
  if (v8 == v3 + 40 * v11)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x1944BF1D8);
  }
  v12 = (uint64_t *)(v8 + 8);
  v13 = *(_DWORD *)(v8 + 16);
  if (v13 == 1)
  {
    if (*v12)
    {
      v14 = *(WebCore::Element **)(*v12 + 8);
      if (v14 && v14 != a3)
      {
        __break(0xC471u);
        JUMPOUT(0x1944BF238);
      }
    }
    if (v3 + 40 * v11 != v8)
    {
      v16 = *(WTF::StringImpl **)v8;
      *(_QWORD *)v8 = -1;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      WTF::Vector<WTF::WeakPtr<WebCore::HTMLMetaElement,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v8 + 24, a2);
      v18 = *(_QWORD *)(v8 + 8);
      *(_QWORD *)(v8 + 8) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr((unsigned int *)v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, (unsigned int *)v18));
        if (!v20)
        {
          atomic_store(1u, (unsigned int *)v18);
          v29 = *(unsigned int *)(v18 + 28);
          if ((_DWORD)v29)
          {
            v32 = v18;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v18 + 16), (WTF::StringImpl *)(*(_QWORD *)(v18 + 16) + 32 * v29));
            v18 = v32;
          }
          v30 = *(WTF **)(v18 + 16);
          if (v30)
          {
            *(_QWORD *)(v18 + 16) = 0;
            *(_DWORD *)(v18 + 24) = 0;
            v31 = v18;
            WTF::fastFree(v30, v17);
            v18 = v31;
          }
          WTF::fastFree((WTF *)v18, v17);
        }
      }
      ++*(_DWORD *)(*(_QWORD *)this - 16);
      v21 = *(_QWORD *)this;
      if (*(_QWORD *)this)
        v22 = *(_DWORD *)(v21 - 12) - 1;
      else
        v22 = -1;
      *(_DWORD *)(v21 - 12) = v22;
      v23 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v24 = 6 * *(_DWORD *)(v23 - 12);
        v25 = *(_DWORD *)(v23 - 4);
        if (v24 < v25 && v25 >= 9)
          WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)this, v25 >> 1, 0);
      }
    }
  }
  else
  {
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x1944BF1F8);
    }
    if (*v12 && *(WebCore::Element **)(*v12 + 8) == a3)
    {
      WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v12, 0);
      v13 = *(_DWORD *)(v8 + 16);
    }
    *(_DWORD *)(v8 + 16) = v13 - 1;
    if (*(_DWORD *)(v8 + 32))
    {
      v27 = *(unsigned int *)(v8 + 36);
      if ((_DWORD)v27)
      {
        WTF::VectorTypeOperations<WTF::WeakRef<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData>>::destruct(*(_QWORD *)(v8 + 24), (uint64_t *)(*(_QWORD *)(v8 + 24) + 8 * v27));
        *(_DWORD *)(v8 + 36) = 0;
      }
      v28 = *(WTF **)(v8 + 24);
      if (v28)
      {
        *(_QWORD *)(v8 + 24) = 0;
        *(_DWORD *)(v8 + 32) = 0;
        WTF::fastFree(v28, a2);
      }
    }
  }
}

uint64_t WebCore::JSUserMessageHandlersNamespace::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  JSC::VM *v9;
  unint64_t v10;
  WebCore::UserMessageHandlersNamespace *v11;
  WebCore::DOMWrapperWorld *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  WTF *v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  _BYTE *v81;
  uint64_t v82;
  unsigned int v83;
  unsigned __int16 *v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  _BYTE *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned __int16 *v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  _BYTE *v107;
  uint64_t v108;
  unsigned int v109;
  unsigned __int16 *v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  unsigned int v117;
  unsigned __int8 *v118;
  uint64_t v119;
  unsigned int v120;
  JSC::VM *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned __int8 *v130;
  int v131;
  int v132;
  uint64_t v133;
  BOOL v134;
  const WTF::StringImpl *v135;
  const unsigned __int8 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  int v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  int hasExceptionsAfterHandlingTraps;
  unint64_t v152;
  char v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  char v158;
  int v159;
  int v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  JSC::VM *v166;
  JSC::VM *v167;
  JSC::VM *v168;
  char v169;
  JSC::VM *v170;
  JSC::VM *v171;
  JSC::VM *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  char v180;
  JSC::VM *v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  WTF::StringImpl *v185;
  char v186;
  uint64_t v187;

  v187 = *MEMORY[0x1E0C80C00];
  v9 = *(JSC::VM **)(a2 + 56);
  v10 = a3 >> 4;
  if ((a5 & 1) != 0)
  {
LABEL_29:
    if (!(_DWORD)v10)
      goto LABEL_154;
LABEL_30:
    v29 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if ((v10 & ~*(_DWORD *)(v29 + 0x20)) != 0)
      goto LABEL_154;
    v30 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x58);
    if (!v30)
    {
      v41 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x40);
      if (!v41 || *(_BYTE *)(v41 + 5) != 1 && *(_DWORD *)(v41 + 80) < 2u)
        goto LABEL_154;
      v30 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v9);
      if (!v30)
        goto LABEL_154;
    }
    if (!*(_DWORD *)(v30 + 24))
      goto LABEL_154;
    v31 = *(_QWORD *)(v30 + 16);
    v32 = v31 & 0xFFFFFFFFFFFFFFFELL;
    v33 = *(unsigned int *)(v30 + 8);
    v34 = *(_DWORD *)(a3 + 16);
    if ((v31 & 1) != 0)
    {
      if ((v34 & 0x20) != 0)
        v34 = *(_DWORD *)(a3 + 32);
      v35 = *(_DWORD *)(v30 + 12);
      v36 = (v34 >> 8) & *(_QWORD *)&v35;
      v37 = *(unsigned __int8 *)(v32 + v36);
      if (!*(_BYTE *)(v32 + v36))
        goto LABEL_154;
      v38 = v32 + v33;
      v39 = 1;
      while (1)
      {
        v40 = *(_QWORD *)(v38 + 8 * (v37 - 1));
        if (a3 == (v40 & 0xFFFFFFFFFFFFLL))
          break;
        v36 = ((_DWORD)v36 + v39) & v35;
        v37 = *(unsigned __int8 *)(v32 + v36);
        ++v39;
        if (!*(_BYTE *)(v32 + v36))
          goto LABEL_154;
      }
      v42 = (v40 >> 16) & 0xFF00000000 | HIBYTE(v40);
    }
    else
    {
      if ((v34 & 0x20) != 0)
        v34 = *(_DWORD *)(a3 + 32);
      v53 = *(_DWORD *)(v30 + 12);
      v54 = v53 & (v34 >> 8);
      v55 = *(_DWORD *)(v32 + 4 * v54);
      if (!v55)
        goto LABEL_154;
      v56 = v32 + 4 * v33;
      v57 = 1;
      while (1)
      {
        v58 = (v55 - 1);
        if (*(_QWORD *)(v56 + 16 * v58) == a3)
          break;
        v54 = (v54 + v57) & v53;
        v55 = *(_DWORD *)(v32 + 4 * v54);
        ++v57;
        if (!v55)
          goto LABEL_154;
      }
      v42 = *(unsigned int *)(v56 + 16 * v58 + 8) | ((unint64_t)*(unsigned __int8 *)(v56 + 16 * v58 + 12) << 32);
    }
    if ((_DWORD)v42 != -1)
    {
      if ((int)v42 > 63)
      {
        v43 = *(_QWORD *)(a1 + 8) - 8;
        v44 = 0x3F00000000 - (v42 << 32);
      }
      else
      {
        v43 = a1 + 16;
        v44 = v42 << 32;
      }
      v45 = *(_QWORD *)(v43 + (v44 >> 29));
      if ((v45 & 0xFFFE000000000002) != 0)
        goto LABEL_53;
      v46 = *(unsigned __int8 *)(v45 + 5);
      if (v46 == 6)
      {
        v59 = *(_DWORD *)(v29 + 16) & 3;
        v61 = *(_QWORD *)(v45 + 8);
        v60 = *(_QWORD *)(v45 + 16);
        if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v45 & 0xFFFFFFFE) + 0x4C))
        {
          v63 = *(_QWORD *)(v45 + 24);
          v62 = *(_QWORD *)(v45 + 32);
          *(_QWORD *)a4 = v61;
          *(_QWORD *)(a4 + 8) = v60;
          *(_DWORD *)(a4 + 16) = HIDWORD(v42);
          *(_QWORD *)(a4 + 32) = a1;
          *(_BYTE *)(a4 + 49) = 3;
          v47 = 1;
          if (v59 != 2)
            *(_BYTE *)(a4 + 48) = 1;
          *(_BYTE *)(a4 + 51) = 1;
          *(_QWORD *)(a4 + 72) = v63;
          *(_QWORD *)(a4 + 80) = v62;
        }
        else
        {
          *(_QWORD *)a4 = v61;
          *(_QWORD *)(a4 + 8) = v60;
          *(_DWORD *)(a4 + 16) = HIDWORD(v42);
          *(_QWORD *)(a4 + 32) = a1;
          v47 = 1;
          *(_BYTE *)(a4 + 49) = 3;
          if (v59 != 2)
            *(_BYTE *)(a4 + 48) = 1;
        }
        return v47;
      }
      if (v46 != 5)
      {
LABEL_53:
        *(_QWORD *)a4 = v45;
        *(_QWORD *)(a4 + 32) = a1;
        *(_DWORD *)(a4 + 16) = HIDWORD(v42);
        *(_DWORD *)(a4 + 20) = v42;
        v47 = 1;
        *(_WORD *)(a4 + 48) = 257;
        return v47;
      }
      JSC::JSObject::fillGetterPropertySlot();
      return 1;
    }
LABEL_154:
    if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      return 1;
    if (a3)
    {
      v93 = *(_DWORD *)(a3 + 16);
      if ((v93 & 0x20) == 0)
      {
        v94 = *(_BYTE **)(a3 + 8);
        v95 = *(unsigned int *)(a3 + 4);
        if ((v93 & 4) != 0)
        {
          if ((_DWORD)v95)
          {
            v113 = *v94 - 48;
            if (v113 > 9 || v95 >= 2 && *v94 == 48)
            {
LABEL_217:
              v114 = 0;
            }
            else
            {
              v154 = v94 + 1;
              v155 = v95 - 1;
              while (v155)
              {
                if (v113 > 0x19999999)
                  goto LABEL_217;
                v156 = *v154 - 48;
                if (v156 > 9)
                  goto LABEL_217;
                v114 = 0;
                v28 = __CFADD__(v156, 10 * v113);
                v113 = v156 + 10 * v113;
                ++v154;
                --v155;
                if (v28)
                  goto LABEL_218;
              }
              v114 = 0x100000000;
              if (v113 == -1)
                v114 = 0;
            }
          }
          else
          {
            v114 = 0;
          }
LABEL_218:
          if ((v114 & 0x100000000) == 0)
            return 0;
        }
        else
        {
          if ((_DWORD)v95)
          {
            v96 = *(unsigned __int16 *)v94 - 48;
            if (v96 > 9 || v95 >= 2 && *(_WORD *)v94 == 48)
            {
LABEL_162:
              v97 = 0;
            }
            else
            {
              v99 = (unsigned __int16 *)(v94 + 2);
              v100 = v95 - 1;
              while (v100)
              {
                if (v96 <= 0x19999999)
                {
                  v101 = *v99 - 48;
                  if (v101 <= 9)
                  {
                    v28 = __CFADD__(v101, 10 * v96);
                    v96 = v101 + 10 * v96;
                    ++v99;
                    --v100;
                    if (!v28)
                      continue;
                  }
                }
                goto LABEL_162;
              }
              v134 = v96 == -1;
              v97 = 0x100000000;
              if (v134)
                v97 = 0;
            }
          }
          else
          {
            v97 = 0;
          }
          if ((v97 & 0x100000000) == 0)
            return 0;
        }
        return JSC::JSObject::getOwnPropertySlotByIndex();
      }
    }
    return 0;
  }
  if (a3)
  {
    if ((*(_BYTE *)(a3 + 16) & 0x20) != 0)
      goto LABEL_29;
    v11 = *(WebCore::UserMessageHandlersNamespace **)(a1 + 24);
    v12 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) + 3320);
    *(_DWORD *)a3 += 2;
    v13 = (WTF::StringImpl *)a3;
  }
  else
  {
    v13 = 0;
    v11 = *(WebCore::UserMessageHandlersNamespace **)(a1 + 24);
    v12 = *(WebCore::DOMWrapperWorld **)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) + 3320);
  }
  v185 = v13;
  v15 = (WTF *)WebCore::UserMessageHandlersNamespace::namedItem(v11, v12, &v185);
  v16 = v185;
  v185 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(JSC::VM **)(a2 + 56);
  if (!v15)
  {
    v9 = *(JSC::VM **)(a2 + 56);
    goto LABEL_29;
  }
  ++*((_DWORD *)v15 + 6);
  v175 = 0xFFFFFFFF00000000;
  v177 = 0;
  v178 = 0;
  v176 = a1;
  v179 = 196608;
  v180 = 0;
  v183 = 0;
  v184 = 0;
  v181 = v17;
  ++*((_DWORD *)v17 + 1);
  v182 = 1;
  if ((_DWORD)v10)
  {
    v18 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if ((v10 & ~*(_DWORD *)(v18 + 0x20)) == 0)
    {
      v19 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v17);
      if (v19)
      {
        v185 = (WTF::StringImpl *)a3;
        v20 = JSC::PropertyTable::get(v19, (uint64_t *)&v185);
        if ((_DWORD)v20 != -1)
        {
          v48 = (uint64_t *)(a1 + 8 * (int)v20 + 16);
          if ((int)v20 >= 64)
            v48 = (uint64_t *)(*(_QWORD *)(a1 + 8) + ((uint64_t)(0x3F00000000 - (v20 << 32)) >> 29) - 8);
          v49 = *v48;
          if ((*v48 & 0xFFFE000000000002) == 0)
          {
            v50 = *(unsigned __int8 *)(v49 + 5);
            if (v50 == 6)
            {
              v64 = *(_DWORD *)(v18 + 16) & 3;
              v65 = *(_QWORD *)(v49 + 16);
              if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v49 & 0xFFFFFFFE) + 0x4C))
              {
                v173 = *(_QWORD *)(v49 + 8);
                v174 = v65;
                LODWORD(v175) = HIDWORD(v20);
                v177 = a1;
                v52 = 1;
                BYTE1(v179) = 3;
                v51 = 0;
                if (v64 != 2)
                  LOBYTE(v179) = 1;
                goto LABEL_146;
              }
              v67 = *(_QWORD *)(v49 + 24);
              v66 = *(_QWORD *)(v49 + 32);
              v173 = *(_QWORD *)(v49 + 8);
              v174 = v65;
              LODWORD(v175) = HIDWORD(v20);
              v177 = a1;
              BYTE1(v179) = 3;
              if (v64 == 2)
                goto LABEL_190;
              goto LABEL_78;
            }
            if (v50 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot();
              goto LABEL_83;
            }
          }
          v51 = 0;
          v173 = v49;
          v177 = a1;
          v175 = __PAIR64__(v20, HIDWORD(v20));
          v52 = 1;
          LOWORD(v179) = 257;
          goto LABEL_146;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    goto LABEL_83;
  if (a3)
  {
    v21 = *(_DWORD *)(a3 + 16);
    if ((v21 & 0x20) == 0)
    {
      v22 = *(_BYTE **)(a3 + 8);
      v23 = *(unsigned int *)(a3 + 4);
      if ((v21 & 4) != 0)
      {
        if (!(_DWORD)v23)
          goto LABEL_102;
        v24 = *v22 - 48;
        if (v24 > 9 || v23 >= 2 && *v22 == 48)
          goto LABEL_102;
        v68 = v22 + 1;
        v69 = v23 - 1;
        while (v69)
        {
          if (v24 <= 0x19999999)
          {
            v70 = *v68 - 48;
            if (v70 <= 9)
            {
              v28 = __CFADD__(v70, 10 * v24);
              v24 = v70 + 10 * v24;
              ++v68;
              --v69;
              if (!v28)
                continue;
            }
          }
          goto LABEL_102;
        }
      }
      else
      {
        if (!(_DWORD)v23)
          goto LABEL_102;
        v24 = *(unsigned __int16 *)v22 - 48;
        if (v24 > 9 || v23 >= 2 && *(_WORD *)v22 == 48)
          goto LABEL_102;
        v25 = (unsigned __int16 *)(v22 + 2);
        v26 = v23 - 1;
        while (v26)
        {
          if (v24 <= 0x19999999)
          {
            v27 = *v25 - 48;
            if (v27 <= 9)
            {
              v28 = __CFADD__(v27, 10 * v24);
              v24 = v27 + 10 * v24;
              ++v25;
              --v26;
              if (!v28)
                continue;
            }
          }
          goto LABEL_102;
        }
      }
      if (v24 != -1 && (JSC::JSObject::getOwnPropertySlotByIndex() & 1) != 0)
        goto LABEL_83;
    }
  }
LABEL_102:
  v71 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
  if (!v71)
    v71 = *(_QWORD *)(a1 + 16);
  if ((v71 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v71 + 5) < 0x17u)
    goto LABEL_145;
  v172 = v9;
  v72 = (_BYTE *)(v71 + 6);
  if ((*(_BYTE *)(v71 + 6) & 8) == 0)
  {
    v168 = *(JSC::VM **)(a2 + 56);
    v73 = v71;
    while (1)
    {
      v74 = *(_DWORD *)v73 & 0xFFFFFFFE;
      v75 = 16 * v74;
      if ((_DWORD)v10)
      {
        if ((v10 & ~*(_DWORD *)(16 * v74 + 0x20)) == 0)
        {
          v76 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v75, v168);
          if (v76)
          {
            v185 = (WTF::StringImpl *)a3;
            v77 = JSC::PropertyTable::get(v76, (uint64_t *)&v185);
            v78 = v77;
            if ((_DWORD)v77 != -1)
              break;
          }
        }
      }
      if ((*v72 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_192;
      v79 = *(_QWORD *)(v75 + 48);
      if (!v79)
        v79 = *(_QWORD *)(v73 + 16);
      if ((v79 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v79 + 5) < 0x17u)
      {
        v9 = v172;
        if (!a3)
          goto LABEL_145;
        v80 = *(_DWORD *)(a3 + 16);
        if ((v80 & 0x20) != 0)
          goto LABEL_145;
        v81 = *(_BYTE **)(a3 + 8);
        v82 = *(unsigned int *)(a3 + 4);
        if ((v80 & 4) != 0)
        {
          if (!(_DWORD)v82)
            goto LABEL_145;
          v83 = *v81 - 48;
          if (v83 > 9 || v82 >= 2 && *v81 == 48)
            goto LABEL_145;
          v115 = v81 + 1;
          v116 = v82 - 1;
          v9 = v172;
          while (v116)
          {
            if (v83 <= 0x19999999)
            {
              v117 = *v115 - 48;
              if (v117 <= 9)
              {
                v28 = __CFADD__(v117, 10 * v83);
                v83 = v117 + 10 * v83;
                ++v115;
                --v116;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_145;
          }
          v9 = v172;
          if (v83 == -1)
            goto LABEL_145;
        }
        else
        {
          if (!(_DWORD)v82)
            goto LABEL_145;
          v83 = *(unsigned __int16 *)v81 - 48;
          if (v83 > 9 || v82 >= 2 && *(_WORD *)v81 == 48)
            goto LABEL_145;
          v84 = (unsigned __int16 *)(v81 + 2);
          v85 = v82 - 1;
          while (v85)
          {
            if (v83 <= 0x19999999)
            {
              v86 = *v84 - 48;
              if (v86 <= 9)
              {
                v28 = __CFADD__(v86, 10 * v83);
                v83 = v86 + 10 * v83;
                ++v84;
                --v85;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_145;
          }
          if (v83 == -1)
          {
LABEL_145:
            v52 = 0;
            v51 = v15;
            v15 = 0;
            goto LABEL_146;
          }
        }
        v167 = *(JSC::VM **)(a2 + 56);
        v171 = (JSC::VM *)v83;
        while (2)
        {
          v157 = 16 * (*(_DWORD *)v71 & 0xFFFFFFFE);
          v158 = (*(uint64_t (**)(uint64_t, uint64_t, JSC::VM *, uint64_t *))(16
                                                                                   * *(unsigned int *)(v157 + 0x4C)
                                                                                   + 0x70))(v71, a2, v171, &v173);
          if (*((_DWORD *)v167 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v167) & 1) != 0)
            goto LABEL_145;
          if ((v158 & 1) != 0)
            goto LABEL_192;
          v159 = BYTE2(v179);
          if (BYTE2(v179) == 3)
          {
            v9 = v172;
            if (v180)
              goto LABEL_145;
            v160 = *(unsigned __int8 *)(v71 + 5);
            if (v160 != 61)
            {
LABEL_384:
              if ((v160 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v71 + 40) & 7u) > 2)
                {
                  LOBYTE(v185) = 0;
                  v186 = 0;
                  v163 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v71, (WTF *)&v185);
                  if (v164)
                    v161 = v163;
                  else
                    v161 = 0;
                }
                else
                {
                  v161 = *(_QWORD *)(v71 + 24);
                }
                v9 = v172;
                if (v161 <= (unint64_t)v171)
                  goto LABEL_145;
                v159 = BYTE2(v179);
              }
              goto LABEL_389;
            }
            goto LABEL_391;
          }
          v160 = *(unsigned __int8 *)(v71 + 5);
          if (v160 != 61)
            goto LABEL_384;
          v9 = v172;
          if (BYTE2(v179) == 1)
            goto LABEL_145;
LABEL_389:
          if ((*(_WORD *)(v157 + 12) & 0x800) != 0 && v159 != 3)
          {
            if ((*(_WORD *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v162 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                 * *(unsigned int *)(16
                                                                                   * (*(_DWORD *)v71 & 0xFFFFFFFE)
                                                                                   + 0x4C)
                                                                 + 0xB0))(v71, a2);
            }
            else
            {
              v162 = *(_QWORD *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x30);
              if (!v162)
                v162 = *(_QWORD *)(v71 + 16);
            }
            if (*((_DWORD *)v167 + 20))
            {
              v9 = v172;
              if ((JSC::VM::hasExceptionsAfterHandlingTraps(v167) & 1) != 0)
                goto LABEL_145;
            }
            else
            {
              v9 = v172;
            }
          }
          else
          {
LABEL_391:
            v162 = *(_QWORD *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x30);
            v9 = v172;
            if (!v162)
              v162 = *(_QWORD *)(v71 + 16);
          }
          if ((v162 & 0xFFFE000000000002) != 0)
            goto LABEL_145;
          v71 = v162;
          if (*(unsigned __int8 *)(v162 + 5) <= 0x16u)
            goto LABEL_145;
          continue;
        }
      }
      v72 = (_BYTE *)(v79 + 6);
      v73 = v79;
      if ((*(_BYTE *)(v79 + 6) & 8) != 0)
        goto LABEL_198;
    }
    v87 = HIDWORD(v77);
    if ((int)v77 > 63)
    {
      v88 = *(_QWORD *)(v73 + 8) - 8;
      v89 = 0x3F00000000 - (v77 << 32);
    }
    else
    {
      v88 = v73 + 16;
      v89 = v77 << 32;
    }
    v90 = *(_QWORD *)(v88 + (v89 >> 29));
    if ((v90 & 0xFFFE000000000002) != 0)
      goto LABEL_140;
    v91 = *(unsigned __int8 *)(v90 + 5);
    if (v91 != 6)
    {
      if (v91 == 5)
        goto LABEL_191;
LABEL_140:
      v51 = 0;
      v173 = v90;
      v177 = v73;
LABEL_141:
      v175 = __PAIR64__(v78, v87);
      v52 = 1;
      LOWORD(v179) = 257;
      goto LABEL_142;
    }
    v103 = *(_DWORD *)(v75 + 16) & 3;
    v104 = *(_QWORD *)(v90 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v90 & 0xFFFFFFFE) + 0x4C))
    {
      v67 = *(_QWORD *)(v90 + 24);
      v66 = *(_QWORD *)(v90 + 32);
      v173 = *(_QWORD *)(v90 + 8);
      v174 = v104;
      LODWORD(v175) = HIDWORD(v77);
      v177 = v73;
      BYTE1(v179) = 3;
      v9 = v172;
      if (v103 == 2)
      {
LABEL_190:
        v51 = 0;
        v52 = 1;
        goto LABEL_79;
      }
LABEL_78:
      v51 = 0;
      v52 = 1;
      LOBYTE(v179) = 1;
LABEL_79:
      HIBYTE(v179) = 1;
      v183 = v67;
      v184 = v66;
      goto LABEL_146;
    }
    v173 = *(_QWORD *)(v90 + 8);
    v174 = v104;
    LODWORD(v175) = HIDWORD(v77);
    v177 = v73;
LABEL_213:
    v52 = 1;
    BYTE1(v179) = 3;
    v51 = 0;
    if (v103 != 2)
      LOBYTE(v179) = 1;
    goto LABEL_142;
  }
  v79 = v71;
LABEL_198:
  v105 = v79;
  if (!a3)
    goto LABEL_246;
  v106 = *(_DWORD *)(a3 + 16);
  if ((v106 & 0x20) != 0)
    goto LABEL_246;
  v107 = *(_BYTE **)(a3 + 8);
  v108 = *(unsigned int *)(a3 + 4);
  if ((v106 & 4) != 0)
  {
    if (!(_DWORD)v108)
      goto LABEL_246;
    v109 = *v107 - 48;
    if (v109 > 9 || v108 >= 2 && *v107 == 48)
      goto LABEL_246;
    v118 = v107 + 1;
    v119 = v108 - 1;
    while (v119)
    {
      if (v109 <= 0x19999999)
      {
        v120 = *v118 - 48;
        if (v120 <= 9)
        {
          v28 = __CFADD__(v120, 10 * v109);
          v109 = v120 + 10 * v109;
          ++v118;
          --v119;
          if (!v28)
            continue;
        }
      }
      goto LABEL_246;
    }
  }
  else
  {
    if (!(_DWORD)v108)
      goto LABEL_246;
    v109 = *(unsigned __int16 *)v107 - 48;
    if (v109 > 9 || v108 >= 2 && *(_WORD *)v107 == 48)
      goto LABEL_246;
    v110 = (unsigned __int16 *)(v107 + 2);
    v111 = v108 - 1;
    while (v111)
    {
      if (v109 <= 0x19999999)
      {
        v112 = *v110 - 48;
        if (v112 <= 9)
        {
          v28 = __CFADD__(v112, 10 * v109);
          v109 = v112 + 10 * v109;
          ++v110;
          --v111;
          if (!v28)
            continue;
        }
      }
      goto LABEL_246;
    }
  }
  if (v109 != -1)
  {
    v166 = *(JSC::VM **)(a2 + 56);
    v170 = (JSC::VM *)v109;
    while (1)
    {
      v144 = 16 * (*(_DWORD *)v71 & 0xFFFFFFFE);
      v145 = (*(uint64_t (**)(uint64_t, uint64_t, JSC::VM *, uint64_t *))(16 * *(unsigned int *)(v144 + 0x4C)
                                                                               + 0x70))(v71, a2, v170, &v173);
      v146 = v145;
      if (*((_DWORD *)v166 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v166);
        if (((hasExceptionsAfterHandlingTraps | v146) & 1) != 0)
        {
          v9 = v172;
          if (hasExceptionsAfterHandlingTraps)
            goto LABEL_145;
LABEL_83:
          v51 = 0;
          v52 = 1;
          goto LABEL_146;
        }
      }
      else if ((v145 & 1) != 0)
      {
        goto LABEL_192;
      }
      v147 = BYTE2(v179);
      if (BYTE2(v179) == 3)
      {
        v9 = v172;
        if (v180)
          goto LABEL_145;
        v148 = *(unsigned __int8 *)(v71 + 5);
        if (v148 == 61)
          goto LABEL_340;
      }
      else
      {
        v148 = *(unsigned __int8 *)(v71 + 5);
        if (v148 == 61)
        {
          v9 = v172;
          if (BYTE2(v179) == 1)
            goto LABEL_145;
          goto LABEL_338;
        }
      }
      if ((v148 - 39) <= 0xA)
      {
        if ((*(_BYTE *)(v71 + 40) & 7u) > 2)
        {
          LOBYTE(v185) = 0;
          v186 = 0;
          v152 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v71, (WTF *)&v185);
          if (v153)
            v149 = v152;
          else
            v149 = 0;
        }
        else
        {
          v149 = *(_QWORD *)(v71 + 24);
        }
        v9 = v172;
        if (v149 <= (unint64_t)v170)
          goto LABEL_145;
        v147 = BYTE2(v179);
      }
LABEL_338:
      if ((*(_WORD *)(v144 + 12) & 0x800) != 0 && v147 != 3)
      {
        if ((*(_WORD *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
        {
          v150 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                             * *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE)
                                                                               + 0x4C)
                                                             + 0xB0))(v71, a2);
        }
        else
        {
          v150 = *(_QWORD *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x30);
          if (!v150)
            v150 = *(_QWORD *)(v71 + 16);
        }
        if (*((_DWORD *)v166 + 20))
        {
          v9 = v172;
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v166) & 1) != 0)
            goto LABEL_145;
        }
        else
        {
          v9 = v172;
        }
        goto LABEL_342;
      }
LABEL_340:
      v150 = *(_QWORD *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x30);
      v9 = v172;
      if (!v150)
        v150 = *(_QWORD *)(v71 + 16);
LABEL_342:
      if ((v150 & 0xFFFE000000000002) == 0)
      {
        v71 = v150;
        if (*(unsigned __int8 *)(v150 + 5) > 0x16u)
          continue;
      }
      goto LABEL_145;
    }
  }
LABEL_246:
  v121 = *(JSC::VM **)(a2 + 56);
  while (1)
  {
    v122 = 16 * (*(_DWORD *)v105 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v105 + 6) & 8) != 0)
    {
      v169 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v105 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x68))(v105, a2, a3, &v173);
      v9 = v172;
      if (*((_DWORD *)v121 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v121) & 1) != 0)
        goto LABEL_145;
      if ((v169 & 1) != 0)
        goto LABEL_192;
      if (BYTE2(v179) == 3)
      {
        v9 = v172;
        if (v180)
          goto LABEL_145;
        v127 = *(unsigned __int8 *)(v105 + 5);
        if (v127 == 61)
          goto LABEL_253;
      }
      else
      {
        v127 = *(unsigned __int8 *)(v105 + 5);
        if (v127 == 61)
        {
          v9 = v172;
          if (BYTE2(v179) == 1)
            goto LABEL_145;
          goto LABEL_253;
        }
      }
      if (!a3)
        goto LABEL_253;
      if ((v127 - 50) < 0xFFFFFFF5)
        goto LABEL_253;
      v128 = *(_DWORD *)(a3 + 16);
      if ((v128 & 0x20) != 0)
        goto LABEL_253;
      v129 = *(unsigned int *)(a3 + 4);
      if (!(_DWORD)v129)
        goto LABEL_253;
      v130 = *(unsigned __int8 **)(a3 + 8);
      if ((v128 & 4) != 0)
      {
        v131 = *v130;
        if ((_DWORD)v129 == 1)
        {
LABEL_288:
          v9 = v172;
          if ((v131 - 48) < 0xA)
            goto LABEL_145;
          goto LABEL_253;
        }
        if (v131 == 45)
        {
          v132 = v130[1];
          goto LABEL_292;
        }
      }
      else
      {
        v131 = *(unsigned __int16 *)v130;
        if ((_DWORD)v129 == 1)
          goto LABEL_288;
        if (v131 == 45)
        {
          v132 = *((unsigned __int16 *)v130 + 1);
LABEL_292:
          if ((v132 - 48) < 0xA)
          {
            v9 = v172;
            if ((_DWORD)v129 == 2)
              goto LABEL_145;
LABEL_304:
            v165 = v165 & 0xFFFFFF0000000000 | v129 | ((unint64_t)((v128 >> 2) & 1) << 32);
            JSC::jsToNumber();
            v135 = (const WTF::StringImpl *)WTF::numberToString();
            if ((WTF::equal((WTF *)a3, v135, v136) & 1) != 0)
              goto LABEL_145;
            goto LABEL_253;
          }
          if ((_DWORD)v129 != 9)
            goto LABEL_253;
          v134 = v132 == 73;
LABEL_302:
          v9 = v172;
          if (!v134)
            goto LABEL_253;
          goto LABEL_304;
        }
      }
      v9 = v172;
      if ((v131 - 48) < 0xA || (_DWORD)v129 == 8 && v131 == 73)
        goto LABEL_304;
      if ((_DWORD)v129 != 3)
        goto LABEL_253;
      v134 = v131 == 78;
      goto LABEL_302;
    }
    if ((_DWORD)v10)
    {
      if ((v10 & ~*(_DWORD *)(16 * (*(_DWORD *)v105 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v123 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v105 & 0xFFFFFFFE)), v121);
        if (v123)
        {
          v185 = (WTF::StringImpl *)a3;
          v124 = JSC::PropertyTable::get(v123, (uint64_t *)&v185);
          v78 = v124;
          if ((_DWORD)v124 != -1)
            break;
        }
      }
    }
    if ((*(_BYTE *)(v105 + 6) & 0x20) != 0)
    {
      v9 = v172;
      if ((JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_83;
    }
LABEL_253:
    if ((*(_WORD *)(v122 + 12) & 0x800) != 0)
    {
      v125 = *(_DWORD *)v105;
      if (BYTE2(v179) != 3)
      {
        v133 = 16 * (v125 & 0xFFFFFFFE);
        if ((*(_WORD *)(v133 + 12) & 0x800) != 0)
        {
          v126 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v133 + 76) + 0xB0))(v105, a2);
        }
        else
        {
          v126 = *(_QWORD *)(v133 + 48);
          if (!v126)
            v126 = *(_QWORD *)(v105 + 16);
        }
        if (*((_DWORD *)v121 + 20))
        {
          v9 = v172;
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v121) & 1) != 0)
            goto LABEL_145;
        }
        else
        {
          v9 = v172;
        }
        goto LABEL_257;
      }
    }
    else
    {
      v125 = *(_DWORD *)v105;
    }
    v126 = *(_QWORD *)(16 * (v125 & 0xFFFFFFFE) + 0x30);
    v9 = v172;
    if (!v126)
      v126 = *(_QWORD *)(v105 + 16);
LABEL_257:
    if ((v126 & 0xFFFE000000000002) == 0)
    {
      v105 = v126;
      if (*(unsigned __int8 *)(v126 + 5) > 0x16u)
        continue;
    }
    goto LABEL_145;
  }
  v87 = HIDWORD(v124);
  if ((int)v124 > 63)
  {
    v137 = *(_QWORD *)(v105 + 8) - 8;
    v138 = 0x3F00000000 - (v124 << 32);
  }
  else
  {
    v137 = v105 + 16;
    v138 = v124 << 32;
  }
  v139 = *(_QWORD *)(v137 + (v138 >> 29));
  if ((v139 & 0xFFFE000000000002) != 0)
  {
LABEL_314:
    v51 = 0;
    v173 = v139;
    v177 = v105;
    goto LABEL_141;
  }
  v140 = *(unsigned __int8 *)(v139 + 5);
  if (v140 == 6)
  {
    v103 = *(_DWORD *)(v122 + 16) & 3;
    v141 = *(_QWORD *)(v139 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v139 & 0xFFFFFFFE) + 0x4C))
    {
      v143 = *(_QWORD *)(v139 + 24);
      v142 = *(_QWORD *)(v139 + 32);
      v173 = *(_QWORD *)(v139 + 8);
      v174 = v141;
      LODWORD(v175) = HIDWORD(v124);
      v177 = v105;
      BYTE1(v179) = 3;
      v51 = 0;
      v52 = 1;
      if (v103 != 2)
        LOBYTE(v179) = 1;
      HIBYTE(v179) = 1;
      v183 = v143;
      v184 = v142;
      goto LABEL_142;
    }
    v173 = *(_QWORD *)(v139 + 8);
    v174 = v141;
    LODWORD(v175) = HIDWORD(v124);
    v177 = v105;
    goto LABEL_213;
  }
  if (v140 != 5)
    goto LABEL_314;
LABEL_191:
  JSC::JSObject::fillGetterPropertySlot();
LABEL_192:
  v51 = 0;
  v52 = 1;
LABEL_142:
  v9 = v172;
LABEL_146:
  if (v182)
  {
    v92 = *((_DWORD *)v181 + 1);
    if (!v92)
    {
      __break(0xC471u);
      JUMPOUT(0x1944BFCF4);
    }
    *((_DWORD *)v181 + 1) = v92 - 1;
  }
  if (!v15)
  {
LABEL_152:
    if (!v52)
      goto LABEL_180;
LABEL_153:
    v9 = *(JSC::VM **)(a2 + 56);
    if (!(_DWORD)v10)
      goto LABEL_154;
    goto LABEL_30;
  }
  if (*((_DWORD *)v15 + 6) != 1)
  {
    --*((_DWORD *)v15 + 6);
    goto LABEL_152;
  }
  (*(void (**)(WTF *))(*(_QWORD *)v15 + 24))(v15);
  if (v52)
    goto LABEL_153;
LABEL_180:
  if (v51)
    v102 = WebCore::wrap<WebCore::UserMessageHandler>(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28), v51);
  else
    v102 = 2;
  if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
  {
    v47 = 0;
    if (!v51)
      return v47;
LABEL_185:
    if (*((_DWORD *)v51 + 6) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v51 + 24))(v51);
    else
      --*((_DWORD *)v51 + 6);
  }
  else
  {
    *(_QWORD *)a4 = v102;
    *(_DWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 32) = a1;
    v47 = 1;
    *(_BYTE *)(a4 + 49) = 1;
    if (v51)
      goto LABEL_185;
  }
  return v47;
}

unint64_t WebCore::wrap<WebCore::UserMessageHandler>(uint64_t a1, WTF *a2)
{
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  unint64_t SlowCase;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v25;
  JSC::Structure *v26;
  JSC::JSCell *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *Allocator;
  unint64_t v51;
  _QWORD *v52;
  WTF *v53;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    v9 = v5 & ((v8 >> 31) ^ v8);
    v10 = *(WTF **)(v4 + 16 * v9);
    if (v10 == a2)
    {
LABEL_6:
      v12 = *(_QWORD *)(v4 + 16 * v9 + 8);
      if (v12)
      {
        if ((*(_BYTE *)(v12 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v12;
          if (*(_QWORD *)v12)
            return SlowCase;
        }
      }
    }
    else
    {
      v11 = 1;
      while (v10)
      {
        v9 = ((_DWORD)v9 + v11) & v5;
        v10 = *(WTF **)(v4 + 16 * v9);
        ++v11;
        if (v10 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a2 + 6);
  if (*(uint64_t (***)(WebCore::FrameDestructionObserver *__hidden))a2 != off_1E3484D40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944C0AE8);
  }
  v14 = *(_QWORD *)(a1 + 3296);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 - 8);
    v16 = ((unint64_t)&WebCore::JSUserMessageHandler::s_info
         + ~((_QWORD)&WebCore::JSUserMessageHandler::s_info << 32)) ^ (((unint64_t)&WebCore::JSUserMessageHandler::s_info
                                                                      + ~((_QWORD)&WebCore::JSUserMessageHandler::s_info << 32)) >> 22);
    v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
    v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
    v19 = v15 & ((v18 >> 31) ^ v18);
    v20 = *(char ***)(v14 + 16 * v19);
    if (v20 == &WebCore::JSUserMessageHandler::s_info)
    {
LABEL_15:
      v22 = *(_QWORD *)(v14 + 16 * v19 + 8);
      if (v22)
        goto LABEL_17;
    }
    else
    {
      v21 = 1;
      while (v20)
      {
        v19 = ((_DWORD)v19 + v21) & v15;
        v20 = *(char ***)(v14 + 16 * v19);
        ++v21;
        if (v20 == &WebCore::JSUserMessageHandler::s_info)
          goto LABEL_15;
      }
    }
  }
  v23 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSUserMessageHandlerPrototype::createStructure(v23, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v27 = (JSC::JSCell *)WebCore::JSUserMessageHandlerPrototype::create((WebCore::JSUserMessageHandlerPrototype *)v23, Structure, v25, v26);
  v28 = WebCore::JSUserMessageHandler::createStructure(v23, a1, v27);
  v22 = WebCore::cacheDOMStructure((JSCell *)a1, v28, (uint64_t)&WebCore::JSUserMessageHandler::s_info);
LABEL_17:
  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(v29 + 41456);
  v31 = *(_QWORD *)(v30 + 23536);
  v32 = *(_QWORD **)(v31 + 6056);
  if (v32)
    goto LABEL_37;
  v33 = *(_QWORD *)(v30 + 22648);
  if (__ldaxr((unsigned __int8 *)v33))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v33))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v33);
LABEL_22:
  v35 = *(_QWORD *)(v33 + 2824);
  if (!*(_QWORD *)(v35 + 6056))
  {
    v36 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v53, "IsoSpace T");
    v52 = 0;
    MEMORY[0x19AEA3204](v36, &v53, v29 + 192, v29 + 1872, 32, 8, &v52);
    v38 = (uint64_t)v52;
    v52 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v53;
    v53 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
        WTF::fastFree(v39, v37);
      else
        --*(_DWORD *)v39;
    }
    v40 = *(_QWORD *)(v35 + 6056);
    *(_QWORD *)(v35 + 6056) = v36;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v42 = *(_QWORD *)(v31 + 6056);
  *(_QWORD *)(v31 + 6056) = v32;
  if (v42)
  {
    v43 = (WTF *)MEMORY[0x19AEA3528](v42, v41);
    WTF::fastFree(v43, v44);
  }
  v45 = __ldxr((unsigned __int8 *)v33);
  if (v45 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v33))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_37:
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v51 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v51);
    v32[5] = SlowCase + (int)v51;
  }
  v32[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v22);
  *(_QWORD *)(SlowCase + 24) = a2;
  if (*(_BYTE *)(v29 + 755))
    __dmb(0xAu);
  v46 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336D60 & 1) == 0)
  {
    qword_1EE336D58 = (uint64_t)&off_1E3316468;
    byte_1EE336D60 = 1;
  }
  v53 = a2;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  Allocator = *(_QWORD **)(v48 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336D58;
  Allocator[2] = v46;
  v52 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v46 + 32), (uint64_t *)&v53, (uint64_t *)&v52);
  if (v52)
    v52[1] = 3;
  return SlowCase;
}

uint64_t WebCore::UserMessageHandlersNamespace::namedItem(WebCore::UserMessageHandlersNamespace *this, WebCore::DOMWrapperWorld *a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  WTF *v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  v32 = v4;
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  v10 = *a3;
  if (*a3)
    *(_DWORD *)v10 += 2;
  v11 = (*(_DWORD *)a2)++;
  v12 = *((_QWORD *)this + 7);
  if (!v12)
    goto LABEL_14;
  v13 = *(_DWORD *)(v12 - 8);
  v14 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((0xD7862706ELL
                            * (unint64_t)(95187966 * ((v16 >> 31) ^ v16)
                                               + 277951225 * (*((_DWORD *)v10 + 4) >> 8))) >> 4);
  v18 = (WTF::StringImpl **)(v12 + 24 * v17);
  v20 = *v18;
  v19 = (unint64_t)v18[1];
  if (*(_OWORD *)v18 == 0)
  {
LABEL_14:
    v23 = 0;
    if (!v11)
      goto LABEL_25;
  }
  else
  {
    v21 = 1;
    while (v20 == (WTF::StringImpl *)-1 || v20 != v10 || (WebCore::DOMWrapperWorld *)v19 != a2)
    {
      v17 = ((_DWORD)v17 + v21) & v13;
      v22 = (WTF::StringImpl **)(v12 + 24 * v17);
      v20 = *v22;
      v19 = (unint64_t)v22[1];
      ++v21;
      if (!((unint64_t)v20 | v19))
        goto LABEL_14;
    }
    v23 = *(_QWORD *)(v12 + 24 * v17 + 16);
    if (!v11)
    {
LABEL_25:
      WebCore::DOMWrapperWorld::~DOMWrapperWorld(a2, a2);
      WTF::fastFree(v28, v29);
      if (!v10)
        goto LABEL_18;
      goto LABEL_16;
    }
  }
  *(_DWORD *)a2 = v11;
  if (!v10)
    goto LABEL_18;
LABEL_16:
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, a2);
  else
    *(_DWORD *)v10 -= 2;
LABEL_18:
  v31 = v23;
  if (!v23)
  {
    v24 = *(_QWORD *)(v6 + 936);
    v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    *v25 = off_1E3484E48;
    v25[1] = a3;
    v25[2] = a2;
    v25[3] = this;
    v25[4] = &v32;
    v25[5] = &v31;
    v30 = v25;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v24 + 32))(v24, &v30);
    v26 = v30;
    v30 = 0;
    if (v26)
      (*(void (**)(_QWORD *))(*v26 + 8))(v26);
    return v31;
  }
  return v23;
}

uint64_t WebCore::RenderText::trimmedPreferredWidths@<X0>(uint64_t this@<X0>, float a2@<S0>, BOOL *a3@<X1>, uint64_t a4@<X8>)
{
  float v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  float v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  int v28;
  float v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  int v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  WebCore::RenderStyle *v54;
  int v55;
  char v56;
  uint64_t v57;
  int v58;
  BOOL v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  float v63;
  uint64_t v64;
  int v65;
  float v66;
  uint64_t v67;
  int v68;
  _BYTE v69[8];
  WTF::StringImpl *v70;
  int v71;
  char v72;
  float v73;
  char v74;

  v5 = a2;
  v6 = this;
  v8 = *(_QWORD *)(this + 32);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = *(_DWORD *)(v9 + 120);
  v11 = (v10 >> 27) & 7;
  if ((v10 & 0x40000000) == 0 && v11 == 3)
  {
    v13 = 5;
    goto LABEL_61;
  }
  if (v11)
    v12 = 0;
  else
    v12 = (v10 & 0x40000000) == 0;
  if (v12)
  {
LABEL_9:
    v13 = 0;
    goto LABEL_10;
  }
  if ((v10 & 0x40000000) != 0 && !v11)
  {
    v13 = 4;
    goto LABEL_10;
  }
  if ((v10 & 0x40000000) != 0 && v11 == 1)
  {
    v13 = 1;
LABEL_61:
    *a3 = 0;
    goto LABEL_10;
  }
  if ((v10 & 0x40000000) != 0 || v11 != 2)
  {
    v35 = v11 == 1;
    v40 = (v10 & 0x40000000) != 0;
    if (!v35)
      v40 = 1;
    if (v40)
      goto LABEL_9;
    v13 = 2;
    goto LABEL_61;
  }
  v13 = 3;
LABEL_10:
  v14 = *(unsigned __int16 *)(this + 118);
  if ((v14 & 4) != 0 || (*(_BYTE *)(this + 21) & 0x20) != 0)
  {
    this = (*(uint64_t (**)(uint64_t, _QWORD, float))(*(_QWORD *)this + 696))(this, 0, a2);
    v14 = *(unsigned __int16 *)(v6 + 118);
  }
  *(_QWORD *)(a4 + 22) = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v15 = *a3;
  v16 = (v14 >> 3) & 1;
  if (*a3)
    LOBYTE(v16) = 0;
  *(_BYTE *)(a4 + 24) = v16;
  *(_BYTE *)(a4 + 25) = (v14 & 0x10) != 0;
  v17 = *(_QWORD *)(v6 + 104);
  if (v17)
  {
    v18 = *(unsigned int *)(v17 + 4);
    if ((_DWORD)v18)
    {
      v19 = *(_DWORD *)(v17 + 16);
      if (v15)
      {
        v20 = *(unsigned __int8 **)(v17 + 8);
        v31 = 0;
        if ((v19 & 4) != 0)
        {
          while (1)
          {
            v32 = v20[v31];
            v33 = v32 > 0x20;
            v34 = (1 << v32) & 0x100003600;
            v35 = v33 || v34 == 0;
            if (v35)
              break;
            if (v18 == ++v31)
              return this;
          }
        }
        else
        {
          while (1)
          {
            v36 = *(unsigned __int16 *)&v20[v31];
            v33 = v36 > 0x20;
            v37 = (1 << v36) & 0x100003600;
            if (v33 || v37 == 0)
              break;
            v31 += 2;
            if (2 * v18 == v31)
              return this;
          }
        }
      }
      else
      {
        v20 = *(unsigned __int8 **)(v17 + 8);
      }
      v21 = (v18 - 1);
      if ((v19 & 4) != 0)
        v22 = v20[v21];
      else
        v22 = *(unsigned __int16 *)&v20[2 * v21];
      *(_BYTE *)(a4 + 26) = v22 == 8203;
      *(_DWORD *)a4 = *(_DWORD *)(v6 + 84);
      v23 = *(float *)(v6 + 88);
      v24 = v9 + 80;
      *(float *)(a4 + 4) = v23;
      *(_QWORD *)(a4 + 8) = *(_QWORD *)(v6 + 92);
      *(_BYTE *)(a4 + 27) = v14 & 1;
      *(_BYTE *)(a4 + 28) = (v14 & 2) != 0;
      if ((v14 & 2) != 0)
      {
        if ((v19 & 4) != 0)
          v45 = v20[v21];
        else
          v45 = *(unsigned __int16 *)&v20[2 * v21];
        v25 = v45 == 10;
      }
      else
      {
        v25 = 0;
      }
      *(_BYTE *)(a4 + 29) = v25;
      if ((v19 & 4) != 0)
        v26 = *v20;
      else
        v26 = *(unsigned __int16 *)v20;
      if (v26 == 32
        || v26 == 10
        && (this = WebCore::RenderStyle::whiteSpace((WebCore::RenderStyle *)(v9 + 80)),
            v24 = v9 + 80,
            LODWORD(v21) = v18 - 1,
            (this & 0xFFFFFFFB) == 0)
        || ((v19 & 4) == 0 ? (v39 = *(unsigned __int16 *)v20) : (v39 = v26), v39 == 9))
      {
        v27 = *(_QWORD *)(v9 + 112);
        if (v15)
        {
          v41 = v21;
          v42 = v27 + 32;
          v43 = v24;
          WebCore::RenderBlock::constructTextRun(1uLL, v24, 4, 0, (uint64_t)v69);
          v23 = *(float *)(a4 + 4) - WebCore::FontCascade::width(v42, (uint64_t)v69);
          *(float *)(a4 + 4) = v23;
          this = (uint64_t)v70;
          v70 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v44);
            else
              *(_DWORD *)this -= 2;
          }
          LODWORD(v21) = v41;
          v24 = v43;
        }
        else
        {
          this = v27 + 240;
          v28 = *(unsigned __int8 *)(v27 + 244);
          if (v28 == 4)
          {
            if (*(_BYTE *)(v27 + 246))
              v29 = *(float *)this;
            else
              v29 = (float)*(int *)this;
          }
          else
          {
            v64 = v24;
            v65 = v21;
            if (v28 == 3)
            {
              if (*(_BYTE *)(v27 + 246))
                v66 = *(float *)this;
              else
                v66 = (float)*(int *)this;
              v29 = (float)(v66 / 100.0) * *(float *)(v27 + 204);
            }
            else
            {
              v29 = 0.0;
              if (v28 == 11)
              {
                this = WebCore::Length::nonNanCalculatedValue((WebCore::Length *)this, *(float *)(v27 + 204));
                v24 = v64;
                LODWORD(v21) = v65;
              }
            }
          }
          v23 = v23 + v29;
          *(float *)(a4 + 4) = v23;
        }
      }
      if (((1 << v13) & 0x26) != 0)
        LOBYTE(v30) = 0;
      else
        v30 = (*(unsigned __int16 *)(v6 + 118) >> 4) & 1;
      *a3 = v30;
      if ((*(_BYTE *)(v9 + 123) & 0x40) != 0 || *(float *)a4 > v23)
        *(float *)a4 = v23;
      if (*(_BYTE *)(a4 + 28))
      {
        v46 = 0;
        v67 = *(_QWORD *)(v9 + 112);
        *(float *)(a4 + 16) = v23;
        *(float *)(a4 + 20) = v23;
        v47 = 1;
        v68 = v21;
        while (1)
        {
          v48 = *(_QWORD *)(v6 + 104);
          if (v48)
          {
            v49 = 0;
            if (v18 <= v46 + 1)
              v50 = v46 + 1;
            else
              v50 = v18;
            while (1)
            {
              v51 = v46 + v49;
              if (*(_DWORD *)(v48 + 4) > v51)
              {
                v52 = *(_QWORD *)(v48 + 8);
                v53 = (*(_BYTE *)(v48 + 16) & 4) != 0
                    ? *(unsigned __int8 *)(v52 + v51)
                    : *(unsigned __int16 *)(v52 + 2 * v51);
                if (v53 == 10)
                  break;
              }
              ++v49;
              if (v46 + v49 >= v18)
                goto LABEL_96;
            }
            v50 = v46 + v49;
          }
          else
          {
            if (v18 <= v46 + 1)
              v50 = v46 + 1;
            else
              v50 = v18;
            v49 = v50 - v46;
          }
LABEL_96:
          if (!v49)
          {
            v63 = 0.0;
            v50 = v46;
            if ((v47 & 1) == 0)
              goto LABEL_110;
LABEL_109:
            *(float *)(a4 + 16) = v63;
            v5 = 0.0;
            goto LABEL_110;
          }
          if ((*(_BYTE *)(*(_QWORD *)(v9 + 104) + 231) & 1) != 0
            && *(_BYTE *)(v6 + 46) == 3
            && (*(_BYTE *)(v6 + 140) & 1) != 0)
          {
            break;
          }
          v54 = (WebCore::RenderStyle *)v24;
          WebCore::RenderBlock::constructTextRun(v6, v46, v49, v24, 4, (uint64_t)v69);
          v55 = (*(unsigned __int16 *)(v6 + 118) >> 5) & 8;
          v56 = v74 & 0xF6;
          v57 = (uint64_t)v54;
          v58 = WebCore::RenderStyle::whiteSpace(v54);
          v60 = v58 == 5 || (v58 - 1) < 2;
          v61 = *(_QWORD *)(v9 + 104);
          v74 = (v55 | v56 | v60) ^ 8;
          v72 = *(_BYTE *)(v61 + 340);
          v71 = *(_DWORD *)(v61 + 336);
          v73 = v23 + v5;
          v63 = WebCore::FontCascade::width(v67 + 32, (uint64_t)v69);
          this = (uint64_t)v70;
          v70 = 0;
          LODWORD(v21) = v68;
          if (this)
          {
            if (*(_DWORD *)this != 2)
            {
              *(_DWORD *)this -= 2;
              goto LABEL_108;
            }
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v62);
            goto LABEL_117;
          }
LABEL_108:
          *(float *)(a4 + 20) = v63;
          v23 = v63;
          v24 = v57;
          if ((v47 & 1) != 0)
            goto LABEL_109;
LABEL_110:
          if (v50 == (_DWORD)v21)
          {
            *(_DWORD *)(a4 + 20) = 0;
            v23 = 0.0;
          }
          v47 = 0;
          v46 = v50 + 1;
          if (v50 + 1 >= v18)
            return this;
        }
        v57 = v24;
        v63 = *(float *)(v67 + 204);
LABEL_117:
        LODWORD(v21) = v68;
        goto LABEL_108;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::RenderText::computePreferredLogicalWidths(WebCore::RenderText *this, float a2)
{
  WTF::StringImpl *result;
  void *v4;
  WTF **v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD v17[2];

  v17[0] = 0;
  v17[1] = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  result = WebCore::RenderText::computePreferredLogicalWidths((uint64_t)this, (const WTF::AtomString *)v17, (uint64_t)&v14, a2);
  v5 = (WTF **)v17[0];
  if (!v17[0] || !*(_DWORD *)(v17[0] - 12))
    goto LABEL_3;
  v9 = *(unsigned int *)(v17[0] - 4);
  v10 = (uint64_t *)v17[0];
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    v10 = (uint64_t *)v17[0];
    while ((unint64_t)(*v10 + 1) <= 1)
    {
      ++v10;
      v11 -= 8;
      if (!v11)
        goto LABEL_3;
    }
  }
  v12 = v17[0] + 8 * v9;
  if (v10 == (uint64_t *)v12)
    goto LABEL_3;
  v13 = *v10;
LABEL_25:
  if (!*(_QWORD *)(v13 + 8))
  {
    while (++v10 != (uint64_t *)v12)
    {
      v13 = *v10;
      if ((unint64_t)(*v10 + 1) > 1)
      {
        if (v10 != (uint64_t *)v12)
          goto LABEL_25;
        break;
      }
    }
LABEL_3:
    if (!(_DWORD)v14 && __PAIR64__(HIDWORD(v14), 0) == v15 && !HIDWORD(v15))
      *((_WORD *)this + 59) |= 0x200u;
  }
  if (v5)
  {
    v6 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v6)
    {
      v7 = v5;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF *)-1)
        {
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 1)
              WTF::fastFree(v8, v4);
            else
              --*(_DWORD *)v8;
          }
        }
        ++v7;
        --v6;
      }
      while (v6);
    }
    return (WTF::StringImpl *)WTF::fastFree((WTF *)(v5 - 2), v4);
  }
  return result;
}

WTF::StringImpl *WebCore::RenderText::computePreferredLogicalWidths(uint64_t a1, const WTF::AtomString *a2, uint64_t a3, float a4)
{
  float v4;
  float v5;
  float v6;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::Length *v12;
  int v13;
  int *v14;
  float v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  float v31;
  BOOL v32;
  unsigned int v33;
  int v34;
  _BOOL4 v35;
  _BOOL4 v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  __int16 v48;
  unsigned int v49;
  int v50;
  BOOL v51;
  int v53;
  int Character;
  _BOOL8 v55;
  unsigned int v56;
  uint64_t v57;
  _BOOL4 v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  int v66;
  BOOL v67;
  BOOL v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  float v73;
  const WebCore::FontCascade *v74;
  int *v75;
  unsigned int v76;
  int v77;
  _BOOL4 isCollapsibleWhiteSpace;
  float v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  int v84;
  char v85;
  int v86;
  float v87;
  int v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *result;
  unsigned int v91;
  float v92;
  _BOOL4 canHyphenate;
  int v94;
  int v95;
  char v96;
  int v97;
  BOOL v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  float v112;
  int v113;
  char v114;
  int v115;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  BOOL v122;
  char v123;
  float v124;
  float v125;
  _BOOL4 v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  char v131;
  float *v132;
  int v133;
  int v134;
  char v135;
  int v136;
  unsigned int v137;
  WebCore::RenderText *v138;
  WebCore::RenderStyle *v139;
  char v140;
  unsigned int v141;
  _BOOL4 v143;
  int v144;
  int v145;
  _BOOL4 v146;
  int v147;
  unsigned int v149;
  int v150;
  uint64_t v151;
  _BOOL4 v152;
  char v153;
  char v154;
  uint64_t v155;
  WTF::StringImpl *v156;
  float *v157;
  const WTF::AtomString *v158;
  uint64_t v159;
  uint64_t v160;
  float v161;
  uint64_t v162[2];
  WTF::StringImpl *v163;
  char v164[88];
  char v165;
  uint64_t v166;
  char v167;
  BOOL v168;
  int v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 84) = 0;
  v9 = (float *)(a1 + 84);
  *(_QWORD *)(a1 + 92) = 0;
  *(_WORD *)(a1 + 118) &= 0xFFE0u;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v11 = *(_QWORD *)(v10 + 112);
  v12 = (WebCore::Length *)(v11 + 240);
  v13 = *(unsigned __int8 *)(v11 + 244);
  if (v13 == 4)
  {
    v14 = (int *)a3;
    if (*(_BYTE *)(v11 + 246))
      v15 = *(float *)v12;
    else
      v15 = (float)*(int *)v12;
  }
  else if (v13 == 3)
  {
    if (*(_BYTE *)(v11 + 246))
      v125 = *(float *)v12;
    else
      v125 = (float)*(int *)v12;
    v15 = (float)(v125 / 100.0) * *(float *)(v11 + 204);
    v14 = (int *)a3;
  }
  else
  {
    v15 = 0.0;
    v14 = (int *)a3;
    if (v13 == 11)
    {
      WebCore::Length::nonNanCalculatedValue(v12, *(float *)(v11 + 204));
      v15 = v124;
    }
  }
  v16 = *(_QWORD *)(a1 + 104);
  if (v16)
    v17 = *(_DWORD *)(v16 + 4);
  else
    v17 = 0;
  v18 = *(_DWORD *)(*(_QWORD *)(v10 + 104) + 228);
  v19 = (v18 >> 12) & 7;
  if (((v18 >> 12) & 4) != 0)
    v20 = 0;
  else
    v20 = (v18 >> 12) & 7;
  if (v16)
  {
    v21 = *(unsigned int *)(v16 + 16);
    v22 = *(_QWORD *)(v16 + 8);
    LODWORD(v16) = *(_DWORD *)(v16 + 4);
    v23 = (v21 >> 2) & 1;
  }
  else
  {
    v22 = 0;
    v23 = 1;
  }
  v24 = *(_DWORD *)(*(_QWORD *)(v10 + 104) + 228) & 0x1C0;
  v25 = *(_QWORD *)(v10 + 112);
  v162[0] = v22;
  v162[1] = v16 | (unint64_t)(v23 << 32);
  v26 = *(WTF::StringImpl **)(v25 + 176);
  if (v26)
    *(_DWORD *)v26 += 2;
  v163 = v26;
  v164[0] = 0;
  v165 = 0;
  v166 = 0;
  v167 = v20;
  v168 = v24 != 256;
  v169 = 0;
  v151 = v10 + 80;
  v153 = 0;
  v154 = 0;
  v27 = *(_QWORD *)(v10 + 112);
  v152 = *(_BYTE *)(v27 + 261) == 0;
  v28 = *(_QWORD *)(v10 + 104);
  if ((*(_DWORD *)(v28 + 228) & 0xC00000) == 0x800000
    && (canHyphenate = WebCore::canHyphenate((WebCore *)(v27 + 176), a2), v28 = *(_QWORD *)(v10 + 104), canHyphenate))
  {
    if (*(__int16 *)(v28 + 296) >= 0)
      v29 = *(__int16 *)(v28 + 296);
    else
      v29 = 2;
    if (*(__int16 *)(v28 + 298) >= 0)
      v30 = *(__int16 *)(v28 + 298);
    else
      v30 = 2;
    v31 = 0.0;
  }
  else
  {
    v29 = 0;
    v30 = 0;
    v31 = 3.4028e38;
  }
  v32 = (*(_BYTE *)(v10 + 123) & 0x40) == 0;
  v33 = *(_DWORD *)(v28 + 228);
  v34 = (v33 >> 11) & 1;
  if ((*(_BYTE *)(v10 + 123) & 0x40) != 0)
    v34 = 0;
  v145 = v34;
  v35 = (v33 & 0x7000) == 0x5000 && (*(_BYTE *)(v10 + 123) & 0x40) == 0;
  v146 = v35;
  v144 = (v33 >> 6) & 7;
  if (((v33 >> 6) & 5 | 2) != 3 && (v33 & 0x600) != 0x400)
    v32 = 0;
  v37 = v24 != 256 && (v19 - 4) < 0xFFFFFFFD;
  v143 = v37;
  if (!v17)
  {
    LOBYTE(v39) = 0;
    v43 = 0.0;
    v85 = 1;
    v131 = 1;
LABEL_160:
    v86 = *v14;
    goto LABEL_161;
  }
  v140 = v32;
  v128 = v30;
  v129 = v29;
  v132 = v9;
  v133 = 0;
  v38 = 0;
  v39 = 0;
  v149 = 0;
  v40 = 0;
  v41 = 0;
  v127 = v11;
  v138 = (WebCore::RenderText *)(v11 + 32);
  v139 = (WebCore::RenderStyle *)(v10 + 80);
  v42 = v17 - 1;
  v43 = 0.0;
  v131 = 1;
  v135 = 1;
  v136 = 0;
  v141 = v17;
  v137 = v17 - 1;
  do
  {
    v134 = v39;
    v150 = v40;
    v44 = *(_QWORD *)(a1 + 104);
    if (!v44 || *(_DWORD *)(v44 + 4) <= v38)
    {
      v39 = 0;
      v40 = 0;
      v46 = 0;
      goto LABEL_40;
    }
    v45 = *(_QWORD *)(v44 + 8);
    if ((*(_BYTE *)(v44 + 16) & 4) != 0)
      v46 = *(unsigned __int8 *)(v45 + v38);
    else
      v46 = *(unsigned __int16 *)(v45 + 2 * v38);
    if (v46 != 32)
    {
      if (v46 == 10)
      {
        if ((WebCore::RenderStyle::whiteSpace(v139) & 0xFFFFFFFB) != 0)
        {
          v40 = 0;
          v47 = *(_WORD *)(a1 + 118) | 2;
          *(_WORD *)(a1 + 118) = v47;
          v39 = 1;
          if (!v38)
            goto LABEL_38;
          v46 = 10;
          goto LABEL_40;
        }
      }
      else
      {
        if (v46 != 9)
        {
          v39 = 0;
          v40 = 0;
          goto LABEL_40;
        }
        v105 = WebCore::RenderStyle::whiteSpace(v139);
        if (v105 <= 5 && ((1 << v105) & 0x26) != 0)
        {
          v39 = 0;
          v40 = 0;
          v48 = *(_WORD *)(a1 + 118) | 4;
          goto LABEL_39;
        }
      }
    }
    v39 = 0;
    if (!v38)
    {
      v47 = *(_WORD *)(a1 + 118);
      v40 = 1;
LABEL_38:
      v48 = v47 | 8;
LABEL_39:
      *(_WORD *)(a1 + 118) = v48;
      goto LABEL_40;
    }
    v40 = 1;
LABEL_40:
    if ((v39 | v40) == 1 && v38 == v42)
      *(_WORD *)(a1 + 118) |= 0x10u;
    v49 = *(_DWORD *)(v10 + 120);
    v50 = (v49 >> 27) & 7;
    if ((v49 & 0x40000000) == 0 && v50 == 3)
    {
      v50 = 5;
    }
    else
    {
      if (v50)
        v51 = 0;
      else
        v51 = (v49 & 0x40000000) == 0;
      if (v51)
      {
        v50 = 0;
      }
      else if ((v49 & 0x40000000) != 0 && !v50)
      {
        v50 = 4;
      }
      else if ((v49 & 0x40000000) == 0 || v50 != 1)
      {
        if ((v49 & 0x40000000) == 0 && v50 == 2)
        {
          v50 = 3;
        }
        else if (v50 == 1 && (v49 & 0x40000000) == 0)
        {
          v50 = 2;
        }
        else
        {
          v50 = 0;
        }
      }
    }
    if (v50 == 5 || (v50 - 3) >= 0xFFFFFFFE)
      v53 = 0;
    else
      v53 = v40;
    v41 = v40 & (v41 | v150 & v53);
    if (v41 == 1)
    {
      ++v149;
      v39 = v134;
      goto LABEL_105;
    }
    v147 = v41;
    if (v46 == 173)
    {
      v94 = *(_DWORD *)(*(_QWORD *)(v10 + 104) + 228);
      if ((v94 & 0xC00000) != 0)
      {
        if ((v94 & 0x1000000) != 0 && *(_BYTE *)(a1 + 46) == 3 && (*(_BYTE *)(a1 + 140) & 1) != 0)
        {
          v4 = *(float *)(v127 + 204);
          v42 = v137;
          v39 = v134;
        }
        else
        {
          WebCore::RenderBlock::constructTextRun(a1, v149, v38 - v149, (uint64_t)v139, 4, (uint64_t)&v155);
          v95 = (*(unsigned __int16 *)(a1 + 118) >> 5) & 8;
          v96 = BYTE5(v159) & 0xF6;
          v97 = WebCore::RenderStyle::whiteSpace(v139);
          v99 = v97 == 5 || (v97 - 1) < 2;
          v100 = *(_QWORD *)(v10 + 104);
          BYTE5(v159) = (v95 | v96 | v99) ^ 8;
          BYTE4(v157) = *(_BYTE *)(v100 + 340);
          LODWORD(v157) = *(_DWORD *)(v100 + 336);
          *(float *)&v158 = a4 + v43;
          v4 = WebCore::FontCascade::width((uint64_t)v138, (uint64_t)&v155);
          v102 = v156;
          v156 = 0;
          v42 = v137;
          v39 = v134;
          if (v102)
          {
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, v101);
            else
              *(_DWORD *)v102 -= 2;
          }
          v41 = v147;
        }
        v43 = v43 + v4;
        v103 = v130;
        if (!v136)
          v103 = *v14 >> 8;
        v130 = v103;
        v104 = v133;
        if (!v136)
          v104 = *v14;
        v133 = v104;
        v149 = v38 + 1;
        v136 = 1;
        goto LABEL_105;
      }
    }
    if ((v140 & 1) != 0)
    {
      v55 = 1;
    }
    else
    {
      if (v146)
      {
        Character = WebCore::BreakLines::nextCharacter();
      }
      else if (v144 == 2)
      {
        if (v145)
          Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v162, v38);
        else
          Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v162, v38);
      }
      else if (v143)
      {
        if (v145)
          Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v162, v38);
        else
          Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v162, v38);
      }
      else if (v145)
      {
        Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v162, v38);
      }
      else
      {
        Character = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v162, v38);
      }
      v55 = Character == v38;
    }
    v56 = v38 + 1;
    v17 = v38;
    while (1)
    {
      v57 = v56 - 1;
      if ((unsigned __int16)v46 > 0x9Fu)
      {
        if ((unsigned __int16)v46 == 8203)
          goto LABEL_71;
        if ((unsigned __int16)v46 == 160)
        {
          if ((*(_DWORD *)(*(_QWORD *)(v10 + 104) + 228) & 0x800) != 0)
          {
            v58 = 1;
            LOWORD(v46) = 160;
            goto LABEL_72;
          }
        }
        else if ((unsigned __int16)v46 == 173 && (*(_BYTE *)(*(_QWORD *)(v10 + 104) + 230) & 0xC0) != 0)
        {
          v58 = 1;
          LOWORD(v46) = 173;
          goto LABEL_72;
        }
      }
      else if ((unsigned __int16)v46 <= 0x20u && ((1 << v46) & 0x100000600) != 0)
      {
LABEL_71:
        v58 = 1;
        v17 = v56 - 1;
        goto LABEL_72;
      }
      if (v141 == v56)
      {
        v58 = 1;
        v17 = v141;
        goto LABEL_72;
      }
      v81 = *(_QWORD *)(a1 + 104);
      if (v81 && *(_DWORD *)(v81 + 4) > v56)
      {
        v82 = *(_QWORD *)(v81 + 8);
        v91 = (*(_BYTE *)(v81 + 16) & 4) != 0 ? *(unsigned __int8 *)(v82 + v56) : *(unsigned __int16 *)(v82 + 2 * v56);
      }
      else
      {
        v91 = 0;
      }
      ++v17;
      if ((unsigned __int16)v46 >> 10 != 54 || v91 >> 10 != 55)
        break;
LABEL_156:
      ++v56;
      LOWORD(v46) = v91;
    }
    if (v146)
    {
      LOWORD(v46) = v91;
      v83 = v55;
      v84 = WebCore::BreakLines::nextCharacter();
    }
    else if (v144 == 2)
    {
      LOWORD(v46) = v91;
      v83 = v55;
      if (v145)
        v84 = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v162, v56);
      else
        v84 = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)2,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v162, v56);
    }
    else if (v143)
    {
      LOWORD(v46) = v91;
      v83 = v55;
      if (v145)
        v84 = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v162, v56);
      else
        v84 = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)0,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v162, v56);
    }
    else
    {
      LOWORD(v46) = v91;
      v83 = v55;
      if (v145)
        v84 = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)1>(v162, v56);
      else
        v84 = WebCore::BreakLines::nextBreakablePosition<(WebCore::BreakLines::LineBreakRules)1,(WebCore::BreakLines::WordBreakBehavior)0,(WebCore::BreakLines::NoBreakSpaceBehavior)0>(v162, v56);
    }
    LOWORD(v91) = v46;
    if (v56 != v84)
    {
      v55 = v83;
      if ((v140 & 1) != 0)
      {
        v58 = 0;
        goto LABEL_72;
      }
      goto LABEL_156;
    }
    v119 = *(_QWORD *)(a1 + 104);
    v55 = v83;
    if (!v119)
    {
      v58 = 1;
      v17 = v56;
      goto LABEL_72;
    }
    if (*(_DWORD *)(v119 + 4) > v57)
    {
      v120 = *(_QWORD *)(v119 + 8);
      if ((*(_BYTE *)(v119 + 16) & 4) != 0)
        v121 = *(unsigned __int8 *)(v120 + v57);
      else
        v121 = *(unsigned __int16 *)(v120 + 2 * v57);
      v122 = v121 == 173;
      v58 = v121 != 173;
      v123 = v140;
      if (!v122)
        v123 = 1;
      if ((v123 & 1) != 0)
        goto LABEL_72;
      goto LABEL_156;
    }
    v58 = 1;
LABEL_72:
    v41 = v147;
    if (v17 != v38)
    {
      v126 = v55;
      if (v141 <= v17)
        goto LABEL_116;
      if ((unsigned __int16)v46 == 32)
      {
        v41 = 1;
      }
      else if ((unsigned __int16)v46 == 160)
      {
        v41 = (*(unsigned __int8 *)(*(_QWORD *)(v10 + 104) + 229) >> 3) & 1;
      }
      else
      {
LABEL_116:
        v41 = 0;
      }
      v6 = a4 + v43;
      v161 = a4 + v43;
      v155 = a1;
      v156 = v138;
      v157 = &v161;
      v158 = a2;
      v159 = a3;
      v160 = v10 + 80;
      v4 = WebCore::RenderText::measureTextConsideringPossibleTrailingSpace<WebCore::RenderText::widthFromCacheConsideringPossibleTrailingSpace(WebCore::RenderStyle const&,WebCore::FontCascade const&,unsigned int,unsigned int,float,BOOL,WebCore::WordTrailingSpace &,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GlyphOverflow &)::{lambda(unsigned int,unsigned int)#1}>(v41, v38, v17 - v38, (float *)&v151, (uint64_t)a2, (uint64_t)&v155);
      v5 = 0.0;
      if ((unsigned __int16)v46 == 173 && (*(_BYTE *)(*(_QWORD *)(v10 + 104) + 230) & 0xC0) != 0)
        v5 = WebCore::hyphenWidth(*(WebCore **)(a1 + 32), v138, v74);
      if (v4 > v31)
      {
        v155 = 0;
        LODWORD(v156) = 0;
        LOBYTE(v106) = 1;
        BYTE4(v156) = 1;
        v107 = *(_QWORD *)(a1 + 104);
        if (v107)
        {
          v108 = *(unsigned __int8 *)(v107 + 16);
          v109 = *(_QWORD *)(v107 + 8);
          LODWORD(v107) = *(_DWORD *)(v107 + 4);
          v155 = v109;
          v106 = (v108 >> 2) & 1;
        }
        LODWORD(v156) = v107;
        BYTE4(v156) = v106;
        v110 = WTF::StringView::substring((const char *)&v155, v38, v17 - v38);
        v75 = (int *)a3;
        v112 = WebCore::RenderText::maxWordFragmentWidth(a1, (uint64_t)v139, (float *)v138, (uint64_t)v110, v111, v129, v128, v41, a4 + v43, v4, v38, (float *)&v151, (uint64_t)a2, a3);
        v5 = v5 + (float)(v112 - v4);
        if (v31 < v112)
          v31 = v112;
      }
      else
      {
        v75 = (int *)a3;
      }
      v76 = v130;
      if (!v136)
        v76 = *v75 >> 8;
      v130 = v76;
      v77 = v133;
      if (!v136)
        v77 = *v75;
      v133 = v77;
      if (!v58)
      {
        v42 = v137;
        v39 = v134;
        goto LABEL_127;
      }
      v39 = v134;
      if (v38 == v149)
      {
        v43 = v43 + v4;
        v149 = v17;
        v42 = v137;
LABEL_127:
        if (v141 > v17)
        {
          isCollapsibleWhiteSpace = WebCore::RenderStyle::isCollapsibleWhiteSpace(v139, (unsigned __int16)v46);
          if ((*(_BYTE *)(v10 + 123) & 0x40) == 0)
            *(_WORD *)(a1 + 118) |= 1u;
        }
        else
        {
          isCollapsibleWhiteSpace = 0;
        }
        if ((v41 | isCollapsibleWhiteSpace) == 1)
        {
          if (WebCore::RenderText::containsOnlyCSSWhitespace(*(_QWORD *)(a1 + 104), v17, v141 - v17))
            v92 = -0.0;
          else
            v92 = v15;
          v43 = v43 + v92;
        }
        v14 = (int *)a3;
        v41 = v147;
        v79 = v4 + v5;
        if ((v135 & 1) != 0)
        {
          v80 = v4 + v5;
          if (v126)
          {
            *(_WORD *)(a1 + 118) |= 1u;
            v80 = 0.0;
          }
          *(float *)(a1 + 92) = v80;
        }
        *(float *)(a1 + 96) = v79;
        if (v79 < *(float *)(a1 + 84))
          v79 = *(float *)(a1 + 84);
        *(float *)(a1 + 84) = v79;
        v38 = v17 - 1;
        v135 = 0;
        v136 = 1;
        v17 = v141;
        goto LABEL_105;
      }
      if ((*(_BYTE *)(*(_QWORD *)(v10 + 104) + 231) & 1) != 0
        && *(_BYTE *)(a1 + 46) == 3
        && (*(_BYTE *)(a1 + 140) & 1) != 0)
      {
        v6 = *(float *)(v127 + 204);
        v42 = v137;
        v39 = v134;
        goto LABEL_278;
      }
      WebCore::RenderBlock::constructTextRun(a1, v149, v17 - v149, (uint64_t)v139, 4, (uint64_t)&v155);
      v113 = (*(unsigned __int16 *)(a1 + 118) >> 5) & 8;
      v114 = BYTE5(v159) & 0xF6;
      v115 = WebCore::RenderStyle::whiteSpace(v139);
      v117 = v115 == 5 || (v115 - 1) < 2;
      v118 = *(_QWORD *)(v10 + 104);
      BYTE5(v159) = (v113 | v114 | v117) ^ 8;
      BYTE4(v157) = *(_BYTE *)(v118 + 340);
      LODWORD(v157) = *(_DWORD *)(v118 + 336);
      *(float *)&v158 = a4 + v43;
      v6 = WebCore::FontCascade::width((uint64_t)v138, (uint64_t)&v155);
      v60 = v156;
      v156 = 0;
      v42 = v137;
      v39 = v134;
      if (!v60)
        goto LABEL_278;
      if (*(_DWORD *)v60 != 2)
      {
        *(_DWORD *)v60 -= 2;
LABEL_278:
        v43 = v43 + v6;
        v149 = v17;
        goto LABEL_127;
      }
LABEL_296:
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v63);
      goto LABEL_278;
    }
    if (((*(unsigned __int8 *)(v10 + 123) >> 6) & 1 & ~v39) == 0)
      *(_WORD *)(a1 + 118) |= 1u;
    v14 = (int *)a3;
    v17 = v141;
    v42 = v137;
    if (v39)
    {
      v39 = v134;
      if ((v131 & 1) != 0)
      {
        a4 = 0.0;
        if ((*(_BYTE *)(v10 + 123) & 0x40) != 0)
          *(float *)(a1 + 92) = v43;
      }
      v73 = 0.0;
      v131 = 0;
      if (v43 > *(float *)(a1 + 88))
        *(float *)(a1 + 88) = v43;
      goto LABEL_104;
    }
    v59 = *(_QWORD *)(a1 + 104);
    if (v59)
    {
      v60 = *(WTF::StringImpl **)(v59 + 8);
      v61 = *(unsigned int *)(v59 + 4) | ((unint64_t)((*(_DWORD *)(v59 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v60 = 0;
      v61 = 0x100000000;
    }
    v62 = v61 - v38;
    if (v61 <= v38)
    {
      v63 = 0x100000000;
      goto LABEL_84;
    }
    if (v62 > 1)
    {
      v62 = 1;
      goto LABEL_81;
    }
    if (!v38)
    {
      v63 = v61;
      goto LABEL_84;
    }
LABEL_81:
    v63 = v62;
    v64 = v61 - (unint64_t)v38;
    if ((v61 & 0x100000000) == 0)
    {
      if (v64 >= v63)
        goto LABEL_84;
LABEL_295:
      __break(1u);
      goto LABEL_296;
    }
    if (v64 < v63)
      goto LABEL_295;
    v63 |= 0x100000000uLL;
LABEL_84:
    WebCore::RenderBlock::constructTextRun(v63, (uint64_t)v139, 4, 0, (uint64_t)&v155);
    v65 = *(_DWORD *)(v10 + 120);
    v66 = (v65 >> 27) & 7;
    if ((v65 & 0x40000000) == 0 && v66 == 3)
    {
      v66 = 5;
    }
    else
    {
      if (v66)
        v67 = 0;
      else
        v67 = (v65 & 0x40000000) == 0;
      if (v67)
      {
        v66 = 0;
      }
      else if ((v65 & 0x40000000) != 0 && !v66)
      {
        v66 = 4;
      }
      else if ((v65 & 0x40000000) == 0 || v66 != 1)
      {
        if ((v65 & 0x40000000) == 0 && v66 == 2)
        {
          v66 = 3;
        }
        else if (v66 == 1 && (v65 & 0x40000000) == 0)
        {
          v66 = 2;
        }
        else
        {
          v66 = 0;
        }
      }
    }
    v69 = v66 == 5 || (v66 - 1) < 2;
    v70 = *(_QWORD *)(v10 + 104);
    BYTE5(v159) = BYTE5(v159) & 0xFE | v69;
    LODWORD(v157) = *(_DWORD *)(v70 + 336);
    BYTE4(v157) = *(_BYTE *)(v70 + 340);
    *(float *)&v158 = a4 + v43;
    v4 = WebCore::FontCascade::width((uint64_t)v138, (uint64_t)&v155);
    *(_DWORD *)(a3 + 4) = 0;
    if (v38 == v137)
      v39 = v40 & ~v150;
    else
      v39 = 0;
    v72 = v156;
    v156 = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v71);
      else
        *(_DWORD *)v72 -= 2;
    }
    v73 = v43 + v4;
LABEL_104:
    ++v149;
    v43 = v73;
LABEL_105:
    ++v38;
  }
  while (v38 < v17);
  v85 = v41 ^ 1 | v135;
  if (!v136)
  {
    v9 = v132;
    goto LABEL_160;
  }
  v86 = v133 | (v130 << 8);
  v9 = v132;
LABEL_161:
  *v14 = v86;
  if (v17 >= 2 && (v39 & 1) != 0 || (v85 & 1) == 0)
    v43 = v15 + v43;
  v87 = *(float *)(a1 + 88);
  if (v43 >= v87)
    v87 = v43;
  *(float *)(a1 + 88) = v87;
  v88 = *(_DWORD *)(v10 + 120);
  if ((v88 & 0x40000000) != 0)
  {
    *v9 = v87;
    v88 = *(_DWORD *)(v10 + 120);
  }
  if ((v88 & 0x38000000) == 0x8000000 && (v88 & 0x40000000) != 0)
  {
    if ((v131 & 1) != 0)
      *(float *)(a1 + 92) = v87;
    *(float *)(a1 + 96) = v43;
  }
  WebCore::RenderObject::setPreferredLogicalWidthsDirty(a1, 0, 1);
  if (v165)
    WTF::CachedTextBreakIterator::~CachedTextBreakIterator((WTF::CachedTextBreakIterator *)v164);
  result = v163;
  v163 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v89);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

float WebCore::RenderText::widthFromCacheConsideringPossibleTrailingSpace(WebCore::RenderStyle const&,WebCore::FontCascade const&,unsigned int,unsigned int,float,BOOL,WebCore::WordTrailingSpace &,WTF::WeakHashSet<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> &,WebCore::GlyphOverflow &)const::{lambda(unsigned int,unsigned int)#1}::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  WebCore::RenderStyle *v6;
  int v7;
  char v8;
  int v9;
  BOOL v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  float v14;
  WTF::StringImpl *v15;
  _BYTE v17[8];
  WTF::StringImpl *v18;
  int v19;
  char v20;
  int v21;
  char v22;

  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = **(_DWORD **)(a1 + 16);
  v6 = *(WebCore::RenderStyle **)(a1 + 40);
  if ((*(_BYTE *)(*((_QWORD *)v6 + 3) + 231) & 1) != 0 && *(_BYTE *)(v4 + 46) == 3 && (*(_BYTE *)(v4 + 140) & 1) != 0)
    return *(float *)(v3 + 172);
  WebCore::RenderBlock::constructTextRun(*(_QWORD *)a1, a2, a3, (uint64_t)v6, 4, (uint64_t)v17);
  v7 = (*(unsigned __int16 *)(v4 + 118) >> 5) & 8;
  v8 = v22 & 0xF6;
  v9 = WebCore::RenderStyle::whiteSpace(v6);
  v11 = v9 == 5 || (v9 - 1) < 2;
  v12 = *((_QWORD *)v6 + 3);
  v22 = (v7 | v8 | v11) ^ 8;
  v20 = *(_BYTE *)(v12 + 340);
  v19 = *(_DWORD *)(v12 + 336);
  v21 = v5;
  v14 = WebCore::FontCascade::width(v3, (uint64_t)v17);
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v14;
}

uint64_t WebCore::WordTrailingSpace::width(float *a1)
{
  _DWORD *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  float v5;
  WebCore::Length *v6;
  int v7;
  float v8;
  WTF::StringImpl *v9;
  float v11;
  float v12;
  float v13;
  _BYTE v14[8];
  WTF::StringImpl *v15;

  if (*((_DWORD *)a1 + 2) == 1)
  {
    v2 = a1 + 3;
    return *(_QWORD *)v2;
  }
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  WebCore::RenderBlock::constructTextRun(1uLL, *(_QWORD *)a1, 4, 0, (uint64_t)v14);
  v5 = WebCore::FontCascade::width(v3 + 32, (uint64_t)v14);
  v6 = (WebCore::Length *)(v3 + 240);
  v7 = *(unsigned __int8 *)(v3 + 244);
  if (v7 == 4)
  {
    if (*(_BYTE *)(v3 + 246))
      v8 = *(float *)v6;
    else
      v8 = (float)*(int *)v6;
    goto LABEL_7;
  }
  v13 = v5;
  if (v7 == 3)
  {
    if (*(_BYTE *)(v3 + 246))
      v12 = *(float *)v6;
    else
      v12 = (float)*(int *)v6;
    v8 = (float)(v12 / 100.0) * *(float *)(v3 + 204);
    goto LABEL_20;
  }
  v8 = 0.0;
  if (v7 == 11)
  {
    WebCore::Length::nonNanCalculatedValue(v6, *(float *)(v3 + 204));
    v8 = v11;
LABEL_20:
    v5 = v13;
  }
LABEL_7:
  a1[3] = v5 + v8;
  v2 = a1 + 3;
  *((_BYTE *)a1 + 16) = 1;
  v9 = v15;
  v15 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v4);
    else
      *(_DWORD *)v9 -= 2;
  }
  *((_DWORD *)a1 + 2) = 1;
  return *(_QWORD *)v2;
}

WTF::StringImpl *WebCore::RenderBlock::constructTextRun@<X0>(unint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, int a4@<W4>, uint64_t a5@<X8>)
{
  int v8;
  int v9;
  WTF::StringImpl *result;
  char v11;
  char v12;
  char v13;
  int v14;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v8 = (*(_DWORD *)(a2 + 44) >> 4) & 1;
  if (a4)
  {
    v9 = a4 & ((*(_BYTE *)(a2 + 43) & 4) >> 2);
    if ((a4 & 2) != 0)
    {
      v14 = (*(_DWORD *)(a2 + 16) >> 22) & 7;
      if (v14 == 2 || v14 == 5)
        v8 = 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if ((a1 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
LABEL_6:
      result = v18;
      goto LABEL_7;
    }
  }
  else if ((_DWORD)a1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_6;
  }
  result = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_7:
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 228) & 0xC) != 0)
  {
    v17 = result;
    v16 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*(_QWORD *)(a2 + 32) + 32), (void *)a1);
    if (*(_BYTE *)(v16 + 116) && WebCore::Font::glyphForCharacter(v16, (void *)0xF79A))
    {
      if (!v17)
      {
        result = 0;
        *(_DWORD *)a5 = 0;
        goto LABEL_39;
      }
      WTF::StringImpl::replace();
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a1);
      else
        *(_DWORD *)v17 -= 2;
      result = v18;
    }
    else
    {
      result = v17;
    }
  }
  *(_DWORD *)a5 = 0;
  if (result)
  {
    v11 = 0;
    *(_DWORD *)result += 2;
    goto LABEL_10;
  }
LABEL_39:
  v11 = 1;
LABEL_10:
  *(_QWORD *)(a5 + 8) = result;
  *(_DWORD *)(a5 + 16) = 0;
  *(_BYTE *)(a5 + 20) = 1;
  *(_QWORD *)(a5 + 24) = 0x3F80000000000000;
  *(_DWORD *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 36) = a3;
  if (v9)
    v12 = 2;
  else
    v12 = 0;
  if (v8)
    v13 = 12;
  else
    v13 = 8;
  *(_BYTE *)(a5 + 37) = v12 | *(_BYTE *)(a5 + 37) & 0xE0 | v13;
  if ((v11 & 1) == 0)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::KeyframeEffect::applyPendingAcceleratedActions(WebCore::KeyframeEffect *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WebCore::RenderObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  WebCore::WebAnimation *v15;
  _QWORD v16[3];
  double v17;
  WebCore::RenderObject *v18;
  WebCore::KeyframeEffect *v19;
  BOOL v20;
  BOOL canBeAccelerated;

  if ((WebCore::KeyframeEffect::threadedAnimationResolutionEnabled(this) & 1) == 0)
  {
    v19 = this;
    v20 = WebCore::KeyframeEffect::preventsAcceleration(this, v2);
    canBeAccelerated = WebCore::KeyframeEffect::canBeAccelerated(this);
    *((_BYTE *)this + 311) = 0;
    if (*((_DWORD *)this + 65))
    {
      v4 = (WebCore::RenderObject *)WebCore::KeyframeEffect::renderer(this);
      v18 = v4;
      if (v4 && (WebCore::RenderObject::isComposited(v4) & 1) != 0)
      {
        v5 = *((unsigned int *)this + 65);
        if ((_DWORD)v5)
        {
          v6 = (void *)WTF::fastMalloc((WTF *)*((unsigned int *)this + 65));
          memcpy(v6, *((const void **)this + 31), *((unsigned int *)this + 65));
        }
        else
        {
          v6 = 0;
        }
        WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 62, 0);
        v7 = *((_QWORD *)this + 12);
        if (v7)
          v8 = *(_QWORD *)(v7 + 8);
        else
          v8 = 0;
        v9 = COERCE_DOUBLE(WebCore::WebAnimation::currentTime(v8));
        if (!(_BYTE)v3)
          v9 = 0.0;
        v17 = v9 - *((double *)this + 7);
        v16[0] = this;
        v16[1] = &v18;
        v16[2] = &v17;
        if ((_DWORD)v5)
        {
          v10 = v6;
          while (2)
          {
            switch(*v10)
            {
              case 0:
                *((_BYTE *)this + 310) = WebCore::KeyframeEffect::applyPendingAcceleratedActions(void)::$_0::operator()((uint64_t)v16, v3);
                if (WebCore::KeyframeEffect::isRunningAccelerated(this))
                  goto LABEL_28;
                *((_BYTE *)this + 304) = 4;
                break;
              case 1:
                goto LABEL_37;
              case 2:
                *((_BYTE *)this + 310) = WebCore::KeyframeEffect::applyPendingAcceleratedActions(void)::$_0::operator()((uint64_t)v16, v3);
                v14 = *((_QWORD *)this + 12);
                if (v14)
                  v15 = *(WebCore::WebAnimation **)(v14 + 8);
                else
                  v15 = 0;
                if (WebCore::WebAnimation::playState(v15) == 2)
LABEL_37:
                  (*(void (**)(WebCore::RenderObject *, char *, double))(*(_QWORD *)v18 + 728))(v18, (char *)this + 136, v17);
                goto LABEL_28;
              case 3:
                (*(void (**)(WebCore::RenderObject *))(*(_QWORD *)v18 + 744))(v18);
                goto LABEL_28;
              case 4:
                (*(void (**)(WebCore::RenderObject *, char *))(*(_QWORD *)v18 + 736))(v18, (char *)this + 136);
                v11 = *((_QWORD *)this + 15);
                if (!v11 || (v12 = *(_QWORD *)(v11 + 8)) == 0)
                  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 33) + 40) + 8);
                if (!*(_BYTE *)(v12 + 3405))
                  WebCore::Element::invalidateStyleAndLayerComposition(*((WebCore::Element **)this + 33));
                if (WebCore::KeyframeEffect::canBeAccelerated(this))
                  v13 = 0;
                else
                  v13 = 2;
                *((_BYTE *)this + 310) = v13;
                goto LABEL_28;
              default:
LABEL_28:
                ++v10;
                if (!--v5)
                  break;
                continue;
            }
            break;
          }
        }
        if (v6)
          WTF::fastFree((WTF *)v6, v3);
      }
      else if (*((_BYTE *)this + 304) == 4)
      {
        WTF::Vector<WebCore::KeyframeEffect::AcceleratedAction,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 62, 0);
        *((_BYTE *)this + 310) = 0;
      }
    }
    WebCore::KeyframeEffect::CanBeAcceleratedMutationScope::~CanBeAcceleratedMutationScope(&v19, v3);
  }
}

BOOL WebCore::KeyframeEffect::isRunningAccelerated(WebCore::KeyframeEffect *this)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 result;
  uint64_t v5;
  WebCore::WebAnimation *v6;

  v1 = *((_QWORD *)this + 15);
  if ((v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0
     || (v5 = *((_QWORD *)this + 33)) != 0 && (v2 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8)) != 0)
    && (*(_QWORD *)(*(_QWORD *)(v2 + 680) + 712) & 0x800000000000) != 0)
  {
    if (!*((_BYTE *)this + 328))
      return 0;
    result = WebCore::KeyframeEffect::canBeAccelerated(this);
    if (!(_DWORD)result)
      return result;
    v6 = *(WebCore::WebAnimation **)(*((_QWORD *)this + 12) + 8);
    if (*((_BYTE *)v6 + 156))
      return 0;
    return WebCore::WebAnimation::playState(v6) == 1;
  }
  else
  {
    return *((_BYTE *)this + 310) == 1;
  }
}

uint64_t WebCore::JSCallbackData::invokeCallback(JSC::JSGlobalObject *a1, JSC::Structure *this, uint64_t a3, uint64_t a4, int a5, WTF::StringImpl *a6, uint64_t *a7)
{
  JSC::VM *v11;
  JSC::JSGlobalObject *v13;
  WTF::StringImpl *v14;
  WebCore::InspectorInstrumentation *v15;
  WTF::StringImpl **v16;
  unint64_t StatusReg;
  uint64_t v18;
  WebCore *v19;
  uint64_t v20;
  uint64_t v21;
  JSC::JSGlobalObject *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v26;
  uint64_t v27;
  JSCell *v28;
  uint64_t v29;
  const WTF::String *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v11 = (JSC::VM *)*((_QWORD *)a1 + 7);
  LOBYTE(v37) = 0;
  if (a5 != 1)
  {
    if (*((_BYTE *)this + 5) == 26)
      JSC::JSFunction::getCallData(this, (JSCell *)this);
    else
      (*(void (**)(WTF::StringImpl **__return_ptr, JSC::Structure *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)this & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0x38))(v35, this);
    v37 = *(_OWORD *)v35;
    v38 = v36;
    if (LOBYTE(v35[0]))
      goto LABEL_5;
    if (!a5)
    {
      JSC::createTypeError(a1, v13);
      v21 = 0;
      *a7 = JSC::Exception::create();
      return v21;
    }
  }
  v27 = JSC::JSObject::get(this, a1, (unint64_t)a6);
  v29 = *((_QWORD *)v11 + 2);
  if (v29)
  {
    *a7 = v29;
    JSC::VM::clearException(v11);
    return 0;
  }
  JSC::getCallData(v27, v28, &v37);
  if (!(_BYTE)v37)
  {
    if (a6)
      *(_DWORD *)a6 += 2;
    v34 = a6;
    WTF::makeString<char,WTF::String,WTF::ASCIILiteral>(39, (uint64_t *)&v34, (int8x16_t *)"' property of callback interface should be callable", 52, v35);
    JSC::createTypeError(a1, (JSC::JSGlobalObject *)v35, v30);
    *a7 = JSC::Exception::create();
    v32 = v35[0];
    v35[0] = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v31);
      else
        *(_DWORD *)v32 -= 2;
    }
    v33 = v34;
    v34 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v31);
      else
        *(_DWORD *)v33 -= 2;
    }
    return 0;
  }
LABEL_5:
  v14 = (WTF::StringImpl *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  if (!v14)
    return 0;
  v15 = v14;
  v16 = (WTF::StringImpl **)WebCore::JSExecState::instrumentFunction(v14, (WebCore::ScriptExecutionContext *)&v37);
  *a7 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v18 = *(_QWORD *)(StatusReg + 736);
  if (!v18 || (v16 = *(WTF::StringImpl ***)(v18 + 96)) == 0)
    v16 = (WTF::StringImpl **)WebCore::threadGlobalDataSlow((WebCore *)v16);
  v35[0] = v16[8];
  v19 = (WebCore *)JSC::JSLockHolder::JSLockHolder();
  v20 = *(_QWORD *)(StatusReg + 736);
  if (!v20 || (v19 = *(WebCore **)(v20 + 96)) == 0)
    v19 = (WebCore *)WebCore::threadGlobalDataSlow(v19);
  *((_QWORD *)v19 + 8) = a1;
  v21 = JSC::profiledCall();
  WebCore::JSExecState::~JSExecState(v35, v22);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v23);
    if (v26)
      WebCore::InspectorInstrumentation::didCallFunctionImpl(v26, v15);
  }
  return v21;
}

unint64_t WebCore::wrap<WebCore::MutationObserver>(uint64_t a1, WebCore::MutationObserver *a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  WebCore::MutationObserver *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  bmalloc::api *v14;
  void *v15;
  WebCore::MutationObserver *v16;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3320) + 32);
  if (v2)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = *(WebCore::MutationObserver **)(v2 + 16 * v7);
    if (v8 == a2)
    {
LABEL_6:
      v10 = *(_QWORD *)(v2 + 16 * v7 + 8);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 8) & 3) == 0)
        {
          v11 = *(_QWORD *)v10;
          if (*(_QWORD *)v10)
            return v11;
        }
      }
    }
    else
    {
      v9 = 1;
      while (v8)
      {
        v7 = ((_DWORD)v7 + v9) & v3;
        v8 = *(WebCore::MutationObserver **)(v2 + 16 * v7);
        ++v9;
        if (v8 == a2)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a2;
  v16 = a2;
  v11 = WebCore::createWrapper<WebCore::MutationObserver,WebCore::MutationObserver>(a1, (uint64_t *)&v16);
  if (v16)
  {
    if (*(_DWORD *)v16 == 1)
    {
      WebCore::MutationObserver::~MutationObserver(v16, v12);
      bmalloc::api::isoDeallocate(v14, v15);
    }
    else
    {
      --*(_DWORD *)v16;
    }
  }
  return v11;
}

WebCore::RenderLayoutState *WebCore::RenderLayoutState::RenderLayoutState(WebCore::RenderLayoutState *this, WebCore::RenderElement *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  int v31;
  _OWORD v32[4];
  char v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  char v37;
  __int16 v38;
  int v39;
  int v40;

  *(_BYTE *)this &= 0xF8u;
  *((_BYTE *)this + 104) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 160) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  v3 = WebCore::RenderObject::container(a2);
  if (v3)
  {
    v4 = v3;
    v33 = 0;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    v37 = 0;
    memset(v32, 0, 41);
    v38 = 1;
    v39 = 0;
    v40 = 0;
    (*(void (**)(uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v3 + 576))(v3, 0, v32, 6, 0);
    WebCore::TransformState::flatten((WebCore::TransformState *)v32, 0);
    v6 = *(_QWORD *)&v32[0];
    v7 = v35;
    v35 = 0;
    if (v7)
      WTF::fastFree(v7, v5);
    v8 = v34;
    v34 = 0;
    if (v8)
      WTF::fastFree(v8, v5);
    v9 = *(float *)&v6 * 64.0;
    v10 = 0x7FFFFFFFLL;
    v11 = 0x80000000;
    if (v9 > -2147483650.0)
      v11 = (int)v9;
    if (v9 < 2147483650.0)
      v10 = v11;
    v12 = *((float *)&v6 + 1) * 64.0;
    if (v12 >= 2147483650.0)
    {
      v13 = 0x7FFFFFFF00000000;
    }
    else if (v12 <= -2147483650.0)
    {
      v13 = 0x8000000000000000;
    }
    else
    {
      v13 = (unint64_t)(int)v12 << 32;
    }
    v14 = v13 | v10;
    *((_QWORD *)this + 6) = v14;
    if ((*(_BYTE *)(v4 + 22) & 1) != 0)
    {
      *(_BYTE *)this |= 1u;
      if ((*(_BYTE *)(v4 + 45) & 4) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1944C323CLL);
      }
      v16 = *(_QWORD *)(v4 + 144);
      v18 = *(_DWORD *)(v16 + 164);
      v17 = *(_DWORD *)(v16 + 168);
      v19 = v18 << 6;
      if (v18 < -33554432)
        v19 = 0x80000000;
      if (v18 <= 0x1FFFFFF)
        v20 = v19;
      else
        v20 = 0x7FFFFFFFLL;
      v21 = v17 << 6;
      if (v17 < -33554432)
        v21 = 0x80000000;
      if (v17 <= 0x1FFFFFF)
        v22 = v21;
      else
        v22 = 0x7FFFFFFFLL;
      *((_QWORD *)this + 4) = v14;
      *((_QWORD *)this + 5) = v20 | (v22 << 32);
      v23 = WebCore::RenderBox::scrollPosition((WebCore::RenderBox *)v4);
      v24 = (_DWORD)v23 << 6;
      v25 = HIDWORD(v23) << 6;
      if ((int)v23 < -33554432)
        v24 = 0x80000000;
      if ((int)v23 > 0x1FFFFFF)
        v24 = 0x7FFFFFFF;
      if (SHIDWORD(v23) < -33554432)
        v25 = 0x80000000;
      if (SHIDWORD(v23) <= 0x1FFFFFF)
        v26 = v25;
      else
        v26 = 0x7FFFFFFF;
      v27 = *((_DWORD *)this + 12);
      v28 = __OFSUB__(v27, v24);
      v29 = v27 - v24;
      if (v28)
        v29 = (v27 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 12) = v29;
      v30 = *((_DWORD *)this + 13);
      v28 = __OFSUB__(v30, v26);
      v31 = v30 - v26;
      if (v28)
        v31 = (v30 >> 31) + 0x7FFFFFFF;
      *((_DWORD *)this + 13) = v31;
    }
  }
  if ((*(_BYTE *)this & 2) != 0)
    *((_DWORD *)this + 18) = 64;
  return this;
}

float WebCore::RenderObject::localToAbsolute(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  void *v4;
  float v5;
  WTF *v6;
  WTF *v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  int v19;
  int v20;

  v9 = *a2;
  v13 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v17 = 0;
  v18 = 1;
  v19 = 0;
  v20 = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 576))(a1, 0, &v9, a3 | 4, a4);
  WebCore::TransformState::flatten((WebCore::TransformState *)&v9, 0);
  v5 = *(float *)&v9;
  v6 = v15;
  v15 = 0;
  if (v6)
    WTF::fastFree(v6, v4);
  v7 = v14;
  v14 = 0;
  if (v7)
    WTF::fastFree(v7, v4);
  return v5;
}

unint64_t WebCore::JSDOMFileSystemPrototype::create(WebCore::JSDOMFileSystemPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSDOMFileSystem::s_info, &WebCore::JSDOMFileSystemPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

JSC::VM *JSC::reifyStaticProperties<3u>(JSC::VM *result, uint64_t a2, _QWORD *a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  v8 = a3[1];
  if (v8)
  {
    if (v8 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v9 = v18;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v18, (uint64_t)a3, (unsigned __int8 *)this);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v11 = a3[6];
  if (v11)
  {
    if (v11 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v12 = v18;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v18, (uint64_t)(a3 + 5), (unsigned __int8 *)this);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v14 = a3[11];
  if (v14)
  {
    v15 = (uint64_t)(a3 + 10);
    if (v14 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v16 = v18;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v18, v15, (unsigned __int8 *)this);
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        return (JSC::VM *)WTF::StringImpl::destroy(v16, v17);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::JSDOMFileSystemPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::JSDOMFileSystem::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::DocumentLoader::setActiveContentRuleListActionPatterns(uint64_t result, WTF::StringImpl ***a2)
{
  uint64_t v2;
  WTF::StringImpl **v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _BYTE v20[16];
  _QWORD v21[3];

  v2 = result;
  v3 = 0;
  LODWORD(v4) = 0;
  memset(v21, 0, 21);
  v5 = *a2;
  if (!*a2)
    goto LABEL_2;
  v4 = *((unsigned int *)v5 - 1);
  v6 = &v5[3 * v4];
  if (!*((_DWORD *)v5 - 3))
  {
    v3 = &v5[3 * v4];
LABEL_2:
    v6 = &v5[3 * v4];
    goto LABEL_3;
  }
  v3 = *a2;
  if ((_DWORD)v4)
  {
    v16 = 24 * v4;
    v3 = *a2;
    while ((unint64_t)*v3 + 1 <= 1)
    {
      v3 += 3;
      v16 -= 24;
      if (!v16)
      {
        v3 = v6;
        break;
      }
    }
  }
LABEL_3:
  if (v5)
    v7 = &v5[3 * *((unsigned int *)v5 - 1)];
  else
    v7 = 0;
  if (v7 == v3)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  else
  {
    do
    {
      WTF::compactMap<0ul,WTF::CrashOnOverflow,16ul,WebCore::DocumentLoader::setActiveContentRuleListActionPatterns(WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> const&)::$_0,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const>((WTF::StringImpl *)v20, (uint64_t)(v3 + 1));
      WTF::HashMap<WTF::String,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::MemoryCompactRobinHoodHashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v19, (unsigned int *)v21, v3, (WTF::StringImpl *)v20);
      result = WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v14);
      v15 = v3 + 3;
      v3 = v6;
      if (v15 != v6)
      {
        v3 = v15;
        while ((unint64_t)*v3 + 1 <= 1)
        {
          v3 += 3;
          if (v3 == v6)
          {
            v3 = v6;
            break;
          }
        }
      }
    }
    while (v3 != v7);
    v10 = v21[0];
    v11 = v21[1];
    v9 = v21[2];
    v8 = BYTE4(v21[2]);
  }
  v12 = *(WTF **)(v2 + 3408);
  *(_QWORD *)(v2 + 3408) = v10;
  v13 = *(unsigned int *)(v2 + 3416);
  *(_QWORD *)(v2 + 3416) = v11;
  *(_DWORD *)(v2 + 3424) = v9;
  *(_BYTE *)(v2 + 3428) = v8;
  if (v12)
  {
    if ((_DWORD)v13)
    {
      v17 = (uint64_t)v12 + 8;
      do
      {
        WTF::Vector<WebCore::UserContentURLPattern,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v17, a2);
        v18 = *(WTF::StringImpl **)(v17 - 8);
        *(_QWORD *)(v17 - 8) = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v18 -= 2;
        }
        v17 += 24;
        --v13;
      }
      while (v13);
    }
    return WTF::fastFree(v12, a2);
  }
  return result;
}

uint64_t WebCore::ContentSecurityPolicy::allowChildFrameFromSource(uint64_t a1, WTF::URL *this, unsigned __int8 a3)
{
  uint64_t v3;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned __int8 v17;
  _QWORD v18[2];
  uint64_t v19;
  WTF::StringImpl *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 148))
    return 1;
  v8 = (unsigned __int8 *)WTF::URL::protocol(this);
  if ((WebCore::LegacySchemeRegistry::schemeShouldBypassContentSecurityPolicy(v8, v9, v10, v11) & 1) != 0
    || (WTF::URL::protocolIsJavaScript(this) & 1) != 0)
  {
    return 1;
  }
  v20 = 0;
  v19 = 0xFFFFFFFFLL;
  v12 = operator new(0x28uLL);
  *v12 = &off_1E3403438;
  v12[1] = this;
  v12[2] = a1;
  v12[3] = &v20;
  v12[4] = &v19;
  v22 = v12;
  v18[0] = WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFrame;
  v18[1] = 0;
  v17 = a3;
  v3 = WebCore::ContentSecurityPolicy::allPoliciesAllow<WebCore::ContentSecurityPolicyDirective const* (WebCore::ContentSecurityPolicyDirectiveList::*)(WTF::URL const&,BOOL)const,WTF::URL const&,BOOL>(a1, (uint64_t)v21, (uint64_t)v18, (uint64_t)this, &v17);
  v14 = v22;
  if (v22 == v21)
  {
    v15 = 4;
    v14 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_11;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_11:
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  return v3;
}

uint64_t WebCore::ContentSecurityPolicyDirectiveList::violatedDirectiveForFrame(WebCore::ContentSecurityPolicyDirectiveList *this, const WTF::URL *a2, char a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;

  if ((WTF::URL::protocolIs() & 1) != 0)
    return 0;
  v7 = *((_QWORD *)this + 11);
  if (!v7)
    v7 = *((_QWORD *)this + 6);
  if (qword_1EE2E40E8)
  {
    v6 = (WTF::StringImpl *)(qword_1EE2E40E8 - 1);
    if (qword_1EE2E40E8 == 1)
    {
      v8 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      v9 = *MEMORY[0x1E0CBEF70] + 2;
      *MEMORY[0x1E0CBEF70] = v9;
      if (v7)
      {
LABEL_9:
        *(_DWORD *)v8 = v9 + 2;
        goto LABEL_10;
      }
      v18 = *((_QWORD *)this + 7);
      v12 = (uint64_t *)((char *)this + 56);
      v17 = v18;
      if (v18)
      {
        v14 = (WTF::StringImpl **)(v17 + 32);
LABEL_17:
        *(_DWORD *)v8 = v9 + 2;
        goto LABEL_18;
      }
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v8 = v21;
      if (v7)
      {
        if (!v21)
          goto LABEL_10;
        v9 = *(_DWORD *)v21;
        goto LABEL_9;
      }
      v13 = *((_QWORD *)this + 7);
      v12 = (uint64_t *)((char *)this + 56);
      v11 = v13;
      if (v13)
      {
        v14 = (WTF::StringImpl **)(v11 + 32);
        if (!v21)
          goto LABEL_18;
        v9 = *(_DWORD *)v21;
        goto LABEL_17;
      }
    }
LABEL_21:
    v7 = *v12;
LABEL_22:
    if (!v8)
      goto LABEL_25;
    goto LABEL_23;
  }
  if (!v7)
  {
    v20 = *((_QWORD *)this + 7);
    v12 = (uint64_t *)((char *)this + 56);
    v19 = v20;
    if (v20)
    {
      v8 = 0;
      v14 = (WTF::StringImpl **)(v19 + 32);
LABEL_18:
      v15 = *v14;
      *v14 = v8;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v6);
        else
          *(_DWORD *)v15 -= 2;
      }
      goto LABEL_21;
    }
    v8 = 0;
    goto LABEL_21;
  }
  v8 = 0;
LABEL_10:
  v10 = *(WTF::StringImpl **)(v7 + 32);
  *(_QWORD *)(v7 + 32) = v8;
  if (!v10)
    goto LABEL_22;
  if (*(_DWORD *)v10 == 2)
  {
    WTF::StringImpl::destroy(v10, v6);
    if (!v8)
      goto LABEL_25;
  }
  else
  {
    *(_DWORD *)v10 -= 2;
    if (!v8)
      goto LABEL_25;
  }
LABEL_23:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy(v8, v6);
  else
    *(_DWORD *)v8 -= 2;
LABEL_25:
  if (!v7
    || *(_QWORD *)a2
    && *(_DWORD *)(*(_QWORD *)a2 + 4)
    && WebCore::ContentSecurityPolicySourceList::matches((WebCore::ContentSecurityPolicySourceList *)(v7 + 40), a2, a3))
  {
    return 0;
  }
  return v7;
}

uint64_t WebCore::JSRange::subspaceForImpl(WebCore::JSRange *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 3896);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  v16 = *(_QWORD *)(v9 + 3896);
  if (!v16)
  {
    v14 = 32;
    std::make_unique[abi:sn180100]<JSC::IsoSubspace,char const(&)[11],JSC::Heap &,JSC::JSDestructibleObjectHeapCellType &,unsigned long,unsigned char const&>("IsoSpace T", (uint64_t)this + 192, (uint64_t)this + 1872, &v14, JSC::JSCell::numberOfLowerTierCells, &v15);
    v11 = v15;
    v16 = v15;
    v12 = *(_QWORD *)(v9 + 3896);
    *(_QWORD *)(v9 + 3896) = v15;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *(unsigned int *)(v7 + 2844);
    if ((_DWORD)v13 == *(_DWORD *)(v7 + 2840))
    {
      WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::IsoSubspace *&>(v7 + 2832, (unint64_t)&v16);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v7 + 2832) + 8 * v13) = v11;
      *(_DWORD *)(v7 + 2844) = v13 + 1;
    }
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  v15 = JSC::GCClient::IsoSubspace::IsoSubspace();
  WebCore::JSRange::subspaceForImpl(JSC::VM &)::$_1::operator()<WebCore::ExtendedDOMClientIsoSubspaces,std::unique_ptr<JSC::GCClient::IsoSubspace>>(v3, &v15);
  std::unique_ptr<JSC::GCClient::IsoSubspace>::~unique_ptr[abi:sn180100](&v15);
  v10 = __ldxr((unsigned __int8 *)v7);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

unint64_t WebCore::JSRangePrototype::create(WebCore::JSRangePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSRangePrototype::finishCreation((WebCore::JSRangePrototype *)v6, this);
  return v6;
}

void WebCore::Style::Builder::applyNonHighPriorityProperties(WebCore::Style::Builder *this)
{
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  int v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  int v38;
  int i;
  unsigned int v40;
  uint64_t v41;
  BOOL v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;

  v2 = *((_QWORD *)this + 1931);
  if (!v2 || !*(_DWORD *)(v2 - 12))
  {
    v48 = (char *)this + 14736;
    v3 = *((_QWORD *)this + 1842) & 0xFFFFFF8000000000;
    if (v3)
    {
      v4 = (char *)this + 48;
      v5 = *((_QWORD *)this + 1971);
      do
      {
        v6 = __clz(__rbit64(v3));
        v7 = &v4[32 * v6];
        *((_QWORD *)this + 1971) = v7;
        v8 = *((_QWORD *)v7 + 1);
        if (v8)
        {
          v9 = *((_DWORD *)this + 3944);
          *((_DWORD *)this + 3944) = 0;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v7, v8, 0);
          *((_DWORD *)this + 3944) = v9;
        }
        if ((*(_BYTE *)(*((_QWORD *)this + 1935) + 45) & 0xC) != 0)
        {
          v10 = &v4[32 * v6];
          v11 = *((_QWORD *)v10 + 2);
          if (v11)
          {
            *((_DWORD *)this + 3944) = 1;
            WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v7, v11, 1u);
          }
          v12 = *((_QWORD *)v10 + 3);
          if (v12)
          {
            *((_DWORD *)this + 3944) = 2;
            WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v7, v12, 2u);
          }
          *((_DWORD *)this + 3944) = 0;
        }
        *((_QWORD *)this + 1971) = v5;
        v3 &= v3 - 1;
      }
      while (v3);
    }
    v13 = 0;
    v14 = (char *)this + 48;
    while (1)
    {
      v15 = *(_QWORD *)&v48[8 * v13 + 8];
      if (v15)
        break;
LABEL_15:
      v42 = v13++ == 4;
      if (v42)
        goto LABEL_31;
    }
    while (1)
    {
      v16 = __clz(__rbit64(v15)) | ((v13 + 1) << 6);
      if ((unsigned __int16)v16 >= 0x1CBu)
        goto LABEL_62;
      v17 = (unsigned __int16)v16;
      v18 = &v14[32 * (unsigned __int16)v16];
      v19 = *((_QWORD *)this + 1971);
      *((_QWORD *)this + 1971) = v18;
      v20 = *((_QWORD *)v18 + 1);
      if (v20)
      {
        v21 = *((_DWORD *)this + 3944);
        *((_DWORD *)this + 3944) = 0;
        WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v18, v20, 0);
        *((_DWORD *)this + 3944) = v21;
      }
      if ((*(_BYTE *)(*((_QWORD *)this + 1935) + 45) & 0xC) != 0)
      {
        v22 = &v14[32 * v17];
        v23 = *((_QWORD *)v22 + 2);
        if (v23)
        {
          *((_DWORD *)this + 3944) = 1;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v18, v23, 1u);
        }
        v24 = *((_QWORD *)v22 + 3);
        if (v24)
        {
          *((_DWORD *)this + 3944) = 2;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v18, v24, 2u);
        }
        *((_DWORD *)this + 3944) = 0;
        *((_QWORD *)this + 1971) = v19;
        v15 &= v15 - 1;
        if (!v15)
          goto LABEL_15;
      }
      else
      {
        *((_QWORD *)this + 1971) = v19;
        v15 &= v15 - 1;
        if (!v15)
          goto LABEL_15;
      }
    }
  }
  WebCore::Style::Builder::applyPropertiesImpl<(WebCore::Style::Builder::CustomPropertyCycleTracking)0>((unint64_t)this, 39, 350);
LABEL_31:
  v16 = *((unsigned int *)this + 3859);
  if ((_DWORD)v16)
  {
    v25 = (char *)this + 48;
    v26 = 2 * v16;
    v27 = 15220;
    while (1)
    {
      v28 = *(unsigned __int16 *)((char *)this + v27);
      if (v28 >= 0x1CB)
        break;
      v29 = &v25[32 * v28];
      v30 = *((_QWORD *)this + 1971);
      *((_QWORD *)this + 1971) = v29;
      v31 = *((_QWORD *)v29 + 1);
      if (v31)
      {
        v32 = *((_DWORD *)this + 3944);
        *((_DWORD *)this + 3944) = 0;
        WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v29, v31, 0);
        *((_DWORD *)this + 3944) = v32;
      }
      v16 = *(unsigned __int8 *)(*((_QWORD *)this + 1935) + 45);
      if ((v16 & 0xC) != 0)
      {
        v45 = &v25[32 * v28];
        v46 = *((_QWORD *)v45 + 2);
        if (v46)
        {
          *((_DWORD *)this + 3944) = 1;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v29, v46, 1u);
        }
        v47 = *((_QWORD *)v45 + 3);
        if (v47)
        {
          *((_DWORD *)this + 3944) = 2;
          WebCore::Style::Builder::applyProperty((unint64_t)this, (WTF::StringImpl *)*(unsigned __int16 *)v29, v47, 2u);
        }
        *((_DWORD *)this + 3944) = 0;
      }
      *((_QWORD *)this + 1971) = v30;
      v27 += 2;
      v26 -= 2;
      if (!v26)
        goto LABEL_38;
    }
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
LABEL_38:
  v16 = *((_QWORD *)this + 1931);
  if (!v16)
  {
    v33 = 0;
    LODWORD(v34) = 0;
LABEL_40:
    v35 = (WTF::StringImpl *)(v16 + 40 * v34);
    goto LABEL_41;
  }
LABEL_63:
  v34 = *(unsigned int *)(v16 - 4);
  v35 = (WTF::StringImpl *)(v16 + 40 * v34);
  if (!*(_DWORD *)(v16 - 12))
  {
    v33 = (WTF::StringImpl *)(v16 + 40 * v34);
    goto LABEL_40;
  }
  v33 = (WTF::StringImpl *)v16;
  if ((_DWORD)v34)
  {
    v44 = 40 * v34;
    v33 = (WTF::StringImpl *)v16;
    while ((unint64_t)(*(_QWORD *)v33 + 1) <= 1)
    {
      v33 = (WTF::StringImpl *)((char *)v33 + 40);
      v44 -= 40;
      if (!v44)
      {
        v33 = v35;
        break;
      }
    }
  }
LABEL_41:
  if (v16)
    v36 = (WTF::StringImpl *)(v16 + 40 * *(unsigned int *)(v16 - 4));
  else
    v36 = 0;
  while (v33 != v36)
  {
    v37 = *((_QWORD *)this + 1950);
    if (v37)
    {
      v38 = 0;
      for (i = *(_DWORD *)(*(_QWORD *)v33 + 16) >> 8; ; i = v38 + v40)
      {
        v40 = i & *(_DWORD *)(v37 - 8);
        v41 = *(_QWORD *)(v37 + 8 * v40);
        if (!v41)
          break;
        v42 = v41 != -1 && v41 == *(_QWORD *)v33;
        if (v42)
          goto LABEL_54;
        ++v38;
      }
    }
    WebCore::Style::Builder::applyCustomPropertyImpl((uint64_t)this, v33, (uint64_t)v33 + 8);
LABEL_54:
    v43 = (WTF::StringImpl *)((char *)v33 + 40);
    v33 = v35;
    if (v43 != v35)
    {
      v33 = v43;
      while ((unint64_t)(*(_QWORD *)v33 + 1) <= 1)
      {
        v33 = (WTF::StringImpl *)((char *)v33 + 40);
        if (v33 == v35)
        {
          v33 = v35;
          break;
        }
      }
    }
  }
}

void WebCore::Style::Builder::applyProperty(unint64_t a1, WTF::StringImpl *a2, unint64_t a3, unsigned int a4)
{
  int *v4;
  unint64_t v5;
  unint64_t ii;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  int v85;
  WTF::StringImpl *v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  WTF *v90;
  unsigned int v91;
  WTF *v92;
  WebCore::ConstantPropertyMap *v93;
  WTF::StringImpl *v94;
  uint64_t *v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  int *v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  unsigned __int8 *v109;
  int v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  int8x16_t *v116;
  int8x16_t *v117;
  unsigned int v118;
  int v119;
  __int32 v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF *v131;
  WTF::StringImpl *v132;
  uint64_t v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  uint64_t v136;
  uint16x8_t v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  _DWORD *v140;
  int *v141;
  int16x8_t *v142;
  unsigned int v143;
  uint8x8_t *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint8x8_t *v151;
  unsigned int v152;
  int16x8_t *v153;
  uint16x8_t v154;
  unsigned int v155;
  uint16x8_t v156;
  uint16x8_t v157;
  unsigned int v158;
  uint16x8_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v167;
  WebCore::ConstantPropertyMap *v168;
  WTF::StringImpl *v169;
  uint64_t *v170;
  int v171;
  int v172;
  int *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF *v176;
  WTF::StringImpl *v177;
  uint8x16_t v178;
  unsigned int v179;
  uint8x16_t v180;
  uint64_t v181;
  uint8x16_t v182;
  unsigned int v183;
  uint8x16_t v184;
  uint16x8_t v185;
  unsigned int v186;
  uint16x8_t v187;
  uint16x8_t v188;
  unsigned int v189;
  uint16x8_t v190;
  const char *v191;
  uint64_t v192;
  unsigned __int8 *v193;
  uint64_t v194;
  int v195;
  uint16x8_t v196;
  unsigned int v197;
  uint16x8_t v198;
  uint16x8_t v199;
  unsigned int v200;
  uint16x8_t v201;
  WTF::StringImpl *v202;
  int v203;
  __int128 *v204;
  __int128 *v205;
  int *v206;
  int v207;
  char *v208;
  uint64_t v209;
  __int128 *v210;
  uint64_t v211;
  int v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  WTF *v219;
  int v220;
  __int128 *v221;
  __int128 *v222;
  int *v223;
  int v224;
  char *v225;
  uint64_t v226;
  __int128 *v227;
  uint64_t v228;
  int v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  unint64_t v234;
  BOOL v235;
  int *v236;
  int *v237;
  int v238;
  int v239;
  int v240;
  unint64_t v241;
  unsigned __int8 *v242;
  int v243;
  char *v244;
  unsigned __int8 *v245;
  uint64_t v246;
  BOOL v247;
  uint64_t v249;
  int8x16_t *v250;
  int8x16_t *v251;
  unsigned int v252;
  __int32 v253;
  __int32 v254;
  unint64_t v255;
  int v256;
  char *v257;
  unsigned int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  uint64_t v264;
  unsigned __int8 *v265;
  unsigned __int8 *v266;
  uint64_t v267;
  int16x8_t *v268;
  int16x8_t *v269;
  uint16x8_t v270;
  uint64_t v271;
  unint64_t *v272;
  uint64_t v273;
  const WebCore::CSSParserContext *v274;
  uint64_t v275;
  WTF::StringImpl *v276;
  uint64_t v277;
  _DWORD *v278;
  WTF::StringImpl *v279;
  int16x8_t *v280;
  unsigned int v281;
  uint8x8_t *v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint8x8_t *v289;
  unsigned int v290;
  int16x8_t *v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  BOOL v298;
  uint16x8_t v299;
  unsigned int v300;
  uint16x8_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v309;
  int v310;
  uint64_t v311;
  uint8x16_t v312;
  unsigned int v313;
  uint8x16_t v314;
  uint8x16_t v315;
  unsigned int v316;
  uint8x16_t v317;
  uint16x8_t v318;
  unsigned int v319;
  uint16x8_t v320;
  uint16x8_t v321;
  unsigned int v322;
  uint16x8_t v323;
  uint16x8_t v324;
  unsigned int v325;
  uint16x8_t v326;
  const char *v327;
  uint64_t v328;
  unsigned __int8 *v329;
  uint64_t v330;
  int v331;
  uint16x8_t v332;
  unsigned int v333;
  uint16x8_t v334;
  uint16x8_t v335;
  unsigned int v336;
  uint16x8_t v337;
  int v338;
  int v339;
  int v340;
  int v341;
  __int16 v342;
  uint64_t v343;
  int *v344;
  int v345;
  int v346;
  int v347;
  int v348;
  uint64_t v349;
  int v350;
  unsigned int v351;
  uint64_t *v352;
  uint64_t v353;
  int v354;
  _QWORD *v355;
  unsigned int v356;
  unsigned int v357;
  int8x8_t v358;
  int8x8_t v359;
  int32x2_t v360;
  int8x8_t v361;
  int32x2_t v362;
  unint64_t v363;
  int m;
  unsigned int v365;
  _QWORD *v366;
  int v367;
  int v369;
  uint64_t v370;
  WTF::StringImpl *v371;
  uint64_t v372;
  uint64_t v373;
  _DWORD *v374;
  uint64_t v375;
  int v376;
  unsigned int v377;
  uint64_t v378;
  _DWORD *v379;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  BOOL v385;
  uint64_t v386;
  uint64_t *v387;
  unsigned int v388;
  _QWORD *v389;
  _DWORD *v390;
  int v391;
  int kk;
  uint64_t v393;
  _QWORD *v394;
  _DWORD *v395;
  int *v396;
  _DWORD *v397;
  uint64_t v398;
  int v399;
  uint64_t v400;
  int v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  unsigned int mm;
  uint64_t v409;
  uint64_t v410;
  int *v412;
  uint64_t v413;
  int v414;
  _QWORD *v415;
  unsigned int v416;
  unsigned int v417;
  unint64_t v418;
  int n;
  unsigned int v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  unsigned int v425;
  uint64_t v426;
  int jj;
  int v428;
  _QWORD *v429;
  uint64_t v430;
  uint64_t v432;
  unsigned __int8 *v433;
  uint64_t v434;
  uint64_t v435;
  int *v436;
  __int16 v437;
  int v438;
  WTF::StringImpl *v439;
  __n128 v440;
  __n128 v441;
  uint64_t v442;
  int v443;
  int *v444;
  unsigned __int16 *v445;
  char v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  unint64_t v450;
  char v451;
  uint64_t *v452;
  uint64_t v453;
  unint64_t v454;
  char v455;
  uint64_t *v456;
  unsigned int v457;
  unsigned int v458;
  unint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  int v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  unint64_t v470;
  int *v471;
  int v472;
  unsigned int v473;
  uint64_t v474;
  void *v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  int v479;
  unint64_t v480;
  uint64_t v481;
  unsigned __int8 *v482;
  int v483;
  __int16 v484;
  __int16 v485;
  __n128 v486;
  __n128 v487;
  uint64_t v488;
  int v489;
  int *v490;
  unsigned int v491;
  int v492;
  int v493;
  int isDirectionAwareProperty;
  int v495;
  unsigned int v496;
  int *v497;
  uint64_t v498;
  int *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unsigned int v503;
  unsigned int v504;
  unint64_t v505;
  double v506;
  double v507;
  int *v508;
  unsigned int v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  unint64_t v517;
  unint64_t v518;
  uint64_t v519;
  int v520;
  uint64_t v521;
  unsigned int v522;
  unsigned __int16 *v523;
  BOOL v524;
  uint64_t v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v529;
  char v530;
  uint64_t *v531;
  uint64_t v532;
  uint64_t v533;
  char v534;
  uint64_t *v535;
  uint64_t v536;
  char v537;
  uint64_t *v538;
  unsigned int v539;
  unsigned int v540;
  unint64_t v541;
  unint64_t v542;
  uint64_t v543;
  WTF *v544;
  void *v545;
  uint64_t v546;
  int v547;
  uint64_t v548;
  int v549;
  uint64_t v550;
  unint64_t v551;
  unsigned int v552;
  uint64_t v553;
  uint64_t *v554;
  uint64_t v555;
  int v556;
  _QWORD *v557;
  unsigned int v558;
  unsigned int v559;
  unint64_t v560;
  int k;
  unsigned int v562;
  int v563;
  int *v564;
  int *v565;
  uint64_t v566;
  uint64_t v567;
  _DWORD *v568;
  __int16 v569;
  __n128 v570;
  __n128 v571;
  WTF *v572;
  void *v573;
  uint64_t v574;
  int v575;
  uint64_t v576;
  int v577;
  uint64_t v578;
  unint64_t v579;
  unsigned int v580;
  unsigned int v581;
  int *v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  WebCore::StyleRareInheritedData *v589;
  uint64_t *v590;
  _DWORD *v591;
  uint64_t v592;
  WebCore::StyleCustomPropertyData *v593;
  uint64_t v594;
  int v595;
  _BOOL4 v596;
  _BOOL4 v597;
  uint64_t v598;
  WTF::StringImpl **v599;
  WTF::StringImpl *v600;
  unint64_t v601;
  unsigned int v602;
  unsigned int v603;
  unsigned __int16 *v604;
  uint64_t v605;
  WTF *v606;
  void *v607;
  WTF *v608;
  void *v609;
  uint64_t v610;
  int v611;
  BOOL v612;
  uint64_t v613;
  WTF **v614;
  uint64_t v615;
  uint64_t v616;
  WTF *v617;
  const WebCore::StyleCustomPropertyData **v618;
  WebCore::StyleCustomPropertyData *v619;
  int *v620;
  WTF *v621;
  const WTF::StringImpl *v622;
  WTF *v623;
  WTF **v624;
  int *v625;
  unsigned __int8 *v626;
  WTF *v628;
  uint64_t v629;
  const WTF::AtomString *v630;
  uint64_t v631;
  int v632;
  unint64_t v633;
  int v634;
  int *v635;
  uint64_t v636;
  unsigned int i;
  uint64_t v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  unsigned int j;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  int *v646;
  int *v647;
  int v648;
  int v649;
  int v650;
  uint64_t v651;
  unsigned __int8 *v652;
  int v653;
  char *v654;
  unsigned __int8 *v655;
  uint64_t v656;
  BOOL v657;
  uint64_t v659;
  int8x16_t *v660;
  int8x16_t *v661;
  unsigned int v662;
  int v663;
  __int32 v664;
  uint64_t v665;
  int v666;
  char *v667;
  unsigned int v669;
  int v670;
  int v671;
  int v672;
  int v673;
  uint64_t v674;
  unsigned __int8 *v675;
  unsigned __int8 *v676;
  uint64_t v677;
  uint16x8_t v678;
  const WebCore::CSSParserContext *v679;
  uint64_t v680;
  WTF::StringImpl *v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  WTF::StringImpl *v685;
  _DWORD *v686;
  int16x8_t *v687;
  unsigned int v688;
  uint8x8_t *v689;
  unint64_t v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint8x8_t *v696;
  unsigned int v697;
  int16x8_t *v698;
  uint16x8_t v699;
  unsigned int v700;
  uint16x8_t v701;
  uint16x8_t v702;
  unsigned int v703;
  uint16x8_t v704;
  unint64_t v705;
  uint64_t v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v712;
  uint8x16_t v713;
  unsigned int v714;
  uint8x16_t v715;
  uint64_t v716;
  uint8x16_t v717;
  unsigned int v718;
  uint8x16_t v719;
  uint16x8_t v720;
  unsigned int v721;
  uint16x8_t v722;
  uint16x8_t v723;
  unsigned int v724;
  uint16x8_t v725;
  const char *v726;
  uint64_t v727;
  unsigned __int8 *v728;
  uint64_t v729;
  int v730;
  uint16x8_t v731;
  unsigned int v732;
  uint16x8_t v733;
  uint16x8_t v734;
  unsigned int v735;
  uint16x8_t v736;
  unint64_t v737;
  _DWORD *v738;
  uint64_t v739;
  int v740;
  unsigned int v741;
  unsigned int v742;
  int32x2_t v743;
  int8x8_t v744;
  int8x8_t v745;
  int32x2_t v746;
  int8x8_t v747;
  int32x2_t v748;
  unsigned int v749;
  int nn;
  unint64_t v751;
  uint64_t v752;
  _QWORD *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  int *v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  WTF::StringImpl *v773;
  WTF::StringImpl **v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  unint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  WTF::StringImpl **v786;
  WTF::StringImpl *v787;
  int *v788;
  uint64_t v789;
  WTF::StringImpl **v790;
  WTF::StringImpl *v791;
  int *v792;
  WebCore::RenderStyle *v793;
  const WebCore::Color *v794;
  WTF *v795;
  int *v796;
  int *v797;
  unint64_t v798;
  unint64_t v799;
  WTF::StringImpl *v800;
  WTF::StringImpl *v801;
  int *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  unsigned __int8 *v809;
  uint64_t v810;
  unsigned __int8 *v811;
  unsigned __int8 *v812;
  unsigned int v813;
  unint64_t v814;
  unsigned int v815;
  unsigned int v817;
  unsigned int v818;
  WTF *v819;
  int *v820;
  uint64_t *v821;
  _QWORD *v822;
  uint64_t **v823;
  uint64_t *v824[3];
  _QWORD v825[2];
  uint64_t v826;
  int *v827;
  __int128 v828;
  int *v829;
  int *v830;
  int *v831;
  __int128 *v832;

  v4 = (int *)a3;
  v5 = (unint64_t)a2;
  ii = a1;
  v7 = (*(unsigned __int16 *)(a3 + 4) | (*(unsigned __int8 *)(a3 + 6) << 16)) & 0x3F800;
  if (v7 != 94208)
  {
    if (v7 == 114688)
    {
      v8 = (uint64_t *)(a1 + 15464);
      if (*(_BYTE *)(a3 + 40))
      {
        v9 = a3 + 24;
        if (*(_WORD *)(a3 + 32) == 611)
        {
          v93 = (WebCore::ConstantPropertyMap *)WebCore::Document::constantProperties(*(WebCore::Document **)(a1 + 15488));
          v95 = WebCore::ConstantPropertyMap::values(v93, v94);
          a1 = WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::get(v95, (uint64_t)(v4 + 6));
          if (a1)
            goto LABEL_100;
        }
        else
        {
          v10 = *v8;
          v11 = *(_QWORD *)(*v8 + 15600);
          if (v11
            && (v12 = 0,
                v13 = *(_DWORD *)(v11 - 8),
                v14 = (*(_DWORD *)(*(_QWORD *)v9 + 16) >> 8) & v13,
                (v15 = *(_QWORD *)(v11 + 8 * v14)) != 0))
          {
            while (1)
            {
              v16 = v15 != -1 && v15 == *(_QWORD *)v9;
              if (v16)
                break;
              v14 = (++v12 + v14) & v13;
              v15 = *(_QWORD *)(v11 + 8 * v14);
              if (!v15)
                goto LABEL_12;
            }
          }
          else
          {
LABEL_12:
            v17 = *(_QWORD *)(v10 + 15448);
            if (v17)
            {
              v18 = 0;
              v19 = *(_DWORD *)(v17 - 8);
              v20 = (*(_DWORD *)(*(_QWORD *)v9 + 16) >> 8) & v19;
              v21 = (uint64_t *)(v17 + 40 * v20);
              v22 = *v21;
              if (*v21)
              {
                while (v22 == -1 || v22 != *(_QWORD *)v9)
                {
                  v20 = (++v18 + v20) & v19;
                  v21 = (uint64_t *)(v17 + 40 * v20);
                  v22 = *v21;
                  if (!*v21)
                    goto LABEL_19;
                }
                v24 = *(_DWORD *)(v17 - 4);
              }
              else
              {
LABEL_19:
                v24 = *(_DWORD *)(v17 - 4);
                v21 = (uint64_t *)(v17 + 40 * v24);
              }
              if (v21 != (uint64_t *)(v17 + 40 * v24))
                WebCore::Style::Builder::applyCustomPropertyImpl(v10, (WTF::StringImpl *)(a3 + 24), (uint64_t)(v21 + 1));
            }
          }
          v25 = *(_QWORD *)(ii + 15480);
          v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 40) + 288);
          if (v26)
          {
            v27 = *(_QWORD *)v9;
            while (1)
            {
              v28 = *(_QWORD *)(v26 + 16);
              if (v28)
              {
                v29 = 0;
                v30 = *(_DWORD *)(v28 - 8);
                v31 = (*(_DWORD *)(v27 + 16) >> 8) & v30;
                v32 = *(_QWORD *)(v28 + 16 * v31);
                if (v32)
                {
                  while (v32 == -1 || v32 != v27)
                  {
                    v31 = (++v29 + (_DWORD)v31) & v30;
                    v32 = *(_QWORD *)(v28 + 16 * v31);
                    if (!v32)
                      goto LABEL_33;
                  }
                  a1 = *(_QWORD *)(v28 + 16 * v31 + 8);
                  if (a1)
                    break;
                }
              }
LABEL_33:
              v26 = *(_QWORD *)(v26 + 8);
              if (!v26)
                goto LABEL_34;
            }
LABEL_100:
            if (*(_DWORD *)(a1 + 72) == 2)
            {
              v90 = *(WTF **)(a1 + 24);
              v96 = *(_DWORD *)v90 + 1;
              *(_DWORD *)v90 = v96;
              v97 = *((_QWORD *)v4 + 6);
              if ((WTF *)v97 == v90)
              {
                *((_QWORD *)v4 + 6) = v90;
                goto LABEL_103;
              }
              v99 = v5;
              if (!v97 || (v5 = *(unsigned int *)(v97 + 28), (_DWORD)v5 != *((_DWORD *)v90 + 7)))
              {
LABEL_202:
                *(_DWORD *)v90 = v96 + 1;
                v138 = *((_QWORD *)v90 + 2) + 24 * *((unsigned int *)v90 + 7);
                *(_QWORD *)&v828 = *((_QWORD *)v90 + 2);
                *((_QWORD *)&v828 + 1) = v138;
                WebCore::CSSPropertyParser::parseSingleValue(v99, &v828, *((_QWORD *)v4 + 1) + 32, (int **)&v819);
                v140 = (_DWORD *)*((_QWORD *)v4 + 7);
                *((_QWORD *)v4 + 7) = v819;
                if (v140)
                {
                  if (*v140 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v140, v139);
                  else
                    *v140 -= 2;
                }
                WTF::RefCounted<WebCore::CSSVariableData>::deref((uint64_t)v90, v139);
                goto LABEL_206;
              }
              if (!(_DWORD)v5)
                goto LABEL_206;
              v798 = ii;
              v100 = 0;
              ii = 0;
              v101 = *(_QWORD *)(v97 + 16);
              v102 = *((_QWORD *)v90 + 2);
              while (1)
              {
                v103 = (int *)(v101 + 24 * ii);
                v104 = (int *)(v102 + 24 * ii);
                v105 = *v103;
                v106 = *v103 & 0x3F;
                v107 = *v104;
                if (v106 != (*v104 & 0x3F))
                  goto LABEL_200;
                switch(v106)
                {
                  case 0:
                  case 1:
                  case 4:
                    goto LABEL_127;
                  case 2:
                  case 5:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                    goto LABEL_144;
                  case 3:
                    if (*(_DWORD *)(v101 + 24 * ii + 16) != *(_DWORD *)(v102 + 24 * ii + 16))
                      goto LABEL_200;
                    goto LABEL_127;
                  case 6:
                    v125 = *(unsigned __int16 *)(v101 + 24 * ii + 16);
                    v126 = *(unsigned __int16 *)(v102 + 24 * ii + 16);
                    goto LABEL_143;
                  case 7:
                  case 8:
                    goto LABEL_111;
                  case 9:
                    if ((v105 & 0x3C0000) == 0)
                    {
                      v191 = WebCore::CSSParserToken::unitString((WebCore::CSSParserToken *)(v101 + 24 * ii));
                      v808 = v192;
                      v812 = (unsigned __int8 *)v191;
                      v193 = (unsigned __int8 *)WebCore::CSSParserToken::unitString((WebCore::CSSParserToken *)(v102 + 24 * ii));
                      a1 = WTF::operator==(v812, v808, v193, v194);
                      if (!(_DWORD)a1)
                        goto LABEL_200;
                      v195 = *v104 ^ *v103;
                      if ((v195 & 0x600) != 0
                        || (v195 & 0x100) != 0
                        || *(double *)(v101 + 24 * ii + 16) != *(double *)(v102 + 24 * ii + 16))
                      {
                        goto LABEL_200;
                      }
                      goto LABEL_144;
                    }
LABEL_111:
                    v108 = v101 + 24 * ii;
                    v109 = *(unsigned __int8 **)(v108 + 8);
                    v110 = *(_DWORD *)(v108 + 4);
                    v111 = v102 + 24 * ii;
                    v112 = *(unsigned __int8 **)(v111 + 8);
                    v113 = *(unsigned int *)(v111 + 4);
                    v114 = v109 == v112;
                    if (v110 != (_DWORD)v113)
                      v114 = 0;
                    if (v109 == v112 || v110 != (_DWORD)v113)
                    {
LABEL_140:
                      if (!v114)
                        goto LABEL_200;
                      goto LABEL_144;
                    }
                    if (!v110)
                      goto LABEL_144;
                    if ((v105 & 0x400000) != 0)
                    {
                      if ((v107 & 0x400000) == 0)
                      {
                        if (!(_DWORD)v113)
                          goto LABEL_554;
                        if (*(_WORD *)v112 != *v109)
                          goto LABEL_200;
                        v151 = (uint8x8_t *)(v109 + 1);
                        v152 = v113 - 1;
                        v153 = (int16x8_t *)(v112 + 2);
                        if (v152 >= 8)
                        {
                          v188 = (uint16x8_t)vceqq_s16(*v153, (int16x8_t)vmovl_u8(*v151));
                          v188.i16[0] = vminvq_u16(v188);
                          if (v188.i32[0])
                          {
                            v189 = v152 & 7;
                            while (1)
                            {
                              v190 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v153 + 2 * v189), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v151 + v189)));
                              v190.i16[0] = vminvq_u16(v190);
                              if (!v190.i32[0])
                                break;
                              v189 += 8;
                              if (v189 >= v152)
                                goto LABEL_144;
                            }
                          }
                          goto LABEL_200;
                        }
                        goto LABEL_237;
                      }
                      if (!(_DWORD)v113)
                        goto LABEL_554;
                      if (*v109 != *v112)
                        goto LABEL_200;
                      v115 = v113 - 1;
                      if ((_DWORD)v113 == 1)
                        goto LABEL_144;
                      v116 = (int8x16_t *)(v109 + 1);
                      v117 = (int8x16_t *)(v112 + 1);
                      if ((_DWORD)v113 == 2)
                        goto LABEL_153;
                      v118 = 32 - __clz(v113 - 2);
                      if (v118 != 1)
                      {
                        switch(v118)
                        {
                          case 2u:
LABEL_149:
                            if (v116->u16[0] != v117->u16[0])
                              goto LABEL_200;
                            v127 = *(unsigned __int16 *)&v109[v113 - 2];
                            v128 = *(unsigned __int16 *)&v112[v113 - 2];
                            goto LABEL_151;
                          case 3u:
LABEL_175:
                            if (v116->i32[0] != v117->i32[0])
                              goto LABEL_200;
                            v127 = *(_DWORD *)&v109[v113 - 4];
                            v135 = &v112[v113];
                            goto LABEL_177;
                          case 4u:
LABEL_168:
                            if (v116->i64[0] != v117->i64[0])
                              goto LABEL_200;
                            v133 = *(_QWORD *)&v109[v113 - 8];
                            v134 = &v112[v113];
                            goto LABEL_170;
                          case 5u:
LABEL_195:
                            v137 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v109[v113 - 16], *(int8x16_t *)&v112[v113 - 16]), vceqq_s8(*(int8x16_t *)(v109 + 1), *(int8x16_t *)(v112 + 1)));
                            v137.i8[0] = vminvq_u8((uint8x16_t)v137);
                            goto LABEL_196;
                          default:
                            v178 = (uint8x16_t)vceqq_s8(*v116, *v117);
                            v178.i8[0] = vminvq_u8(v178);
                            if (!v178.i32[0])
                              goto LABEL_200;
                            if (v115 < 0x10)
                              goto LABEL_144;
                            v179 = v115 & 0xF;
                            break;
                        }
                        while (1)
                        {
                          v180 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v116 + v179), *(int8x16_t *)((char *)v117 + v179));
                          v180.i8[0] = vminvq_u8(v180);
                          if (!v180.i32[0])
                            goto LABEL_200;
                          v179 += 16;
                          if (v179 >= v115)
                            goto LABEL_144;
                        }
                      }
                      goto LABEL_123;
                    }
                    if ((v107 & 0x400000) != 0)
                    {
                      if (!(_DWORD)v113)
                        goto LABEL_554;
                      if (*(_WORD *)v109 != *v112)
                        goto LABEL_200;
                      v142 = (int16x8_t *)(v109 + 2);
                      v143 = v113 - 1;
                      v144 = (uint8x8_t *)(v112 + 1);
                      if (v143 >= 8)
                      {
                        v185 = (uint16x8_t)vceqq_s16(*v142, (int16x8_t)vmovl_u8(*v144));
                        v185.i16[0] = vminvq_u16(v185);
                        if (v185.i32[0])
                        {
                          v186 = v143 & 7;
                          while (1)
                          {
                            v187 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v142 + 2 * v186), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v144 + v186)));
                            v187.i16[0] = vminvq_u16(v187);
                            if (!v187.i32[0])
                              break;
                            v186 += 8;
                            if (v186 >= v143)
                              goto LABEL_144;
                          }
                        }
                        goto LABEL_200;
                      }
                      goto LABEL_212;
                    }
                    if (!(_DWORD)v113)
                      goto LABEL_554;
                    if (*(unsigned __int16 *)v109 != *(unsigned __int16 *)v112)
                      goto LABEL_200;
                    v136 = v113 - 1;
                    if ((_DWORD)v113 == 1)
                      goto LABEL_144;
                    v116 = (int8x16_t *)(v109 + 2);
                    v117 = (int8x16_t *)(v112 + 2);
                    if ((_DWORD)v113 != 2)
                    {
                      switch(31 - __clz(v113 - 2))
                      {
                        case 0u:
LABEL_186:
                          v119 = v116->i32[0];
                          v120 = v117->i32[0];
                          goto LABEL_124;
                        case 1u:
LABEL_218:
                          if (v116->i32[0] != v117->i32[0])
                            goto LABEL_200;
                          v127 = *(_DWORD *)&v109[2 * v113 - 4];
                          v135 = &v112[2 * v113];
LABEL_177:
                          v128 = *((_DWORD *)v135 - 1);
                          goto LABEL_151;
                        case 2u:
LABEL_193:
                          if (v116->i64[0] != v117->i64[0])
                            goto LABEL_200;
                          v133 = *(_QWORD *)&v109[2 * v113 - 8];
                          v134 = &v112[2 * v113];
LABEL_170:
                          if (v133 != *((_QWORD *)v134 - 1))
                            goto LABEL_200;
                          goto LABEL_144;
                        case 3u:
LABEL_289:
                          v137 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v109[2 * v113 - 16], *(int16x8_t *)&v112[2 * v113 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v109 + 2), *(int16x8_t *)(v112 + 2)));
                          v137.i16[0] = vminvq_u16(v137);
LABEL_196:
                          if (!v137.i32[0])
                            goto LABEL_200;
                          goto LABEL_144;
                        default:
                          v196 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v116, *(int16x8_t *)v117);
                          v196.i16[0] = vminvq_u16(v196);
                          if (!v196.i32[0])
                            goto LABEL_200;
                          if (v136 < 8)
                            goto LABEL_144;
                          v197 = v136 & 7;
                          break;
                      }
                      while (1)
                      {
                        v198 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v116 + 2 * v197), *(int16x8_t *)((char *)v117 + 2 * v197));
                        v198.i16[0] = vminvq_u16(v198);
                        if (!v198.i32[0])
                          goto LABEL_200;
                        v197 += 8;
                        if (v197 >= v136)
                          goto LABEL_144;
                      }
                    }
                    goto LABEL_243;
                  case 16:
                    v125 = *(_DWORD *)(v101 + 24 * ii + 16);
                    v126 = *(_DWORD *)(v102 + 24 * ii + 16);
                    goto LABEL_143;
                  default:
                    if (v106 != 28)
                      goto LABEL_144;
LABEL_127:
                    v121 = v101 + 24 * ii;
                    v109 = *(unsigned __int8 **)(v121 + 8);
                    v122 = *(_DWORD *)(v121 + 4);
                    v123 = v102 + 24 * ii;
                    v112 = *(unsigned __int8 **)(v123 + 8);
                    v113 = *(unsigned int *)(v123 + 4);
                    v114 = v109 == v112;
                    if (v122 != (_DWORD)v113)
                      v114 = 0;
                    if (v109 == v112 || v122 != (_DWORD)v113)
                      goto LABEL_140;
                    if (!v122)
                      goto LABEL_144;
                    if ((v105 & 0x400000) != 0)
                    {
                      if ((v107 & 0x400000) != 0)
                      {
                        if (!(_DWORD)v113)
                          goto LABEL_554;
                        if (*v109 != *v112)
                          goto LABEL_200;
                        v115 = v113 - 1;
                        if ((_DWORD)v113 != 1)
                        {
                          v116 = (int8x16_t *)(v109 + 1);
                          v117 = (int8x16_t *)(v112 + 1);
                          if ((_DWORD)v113 != 2)
                          {
                            v124 = 32 - __clz(v113 - 2);
                            if (v124 != 1)
                            {
                              switch(v124)
                              {
                                case 2u:
                                  goto LABEL_149;
                                case 3u:
                                  goto LABEL_175;
                                case 4u:
                                  goto LABEL_168;
                                case 5u:
                                  goto LABEL_195;
                                default:
                                  v182 = (uint8x16_t)vceqq_s8(*v116, *v117);
                                  v182.i8[0] = vminvq_u8(v182);
                                  if (!v182.i32[0])
                                    goto LABEL_200;
                                  if (v115 < 0x10)
                                    goto LABEL_144;
                                  v183 = v115 & 0xF;
                                  break;
                              }
                              while (1)
                              {
                                v184 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v116 + v183), *(int8x16_t *)((char *)v117 + v183));
                                v184.i8[0] = vminvq_u8(v184);
                                if (!v184.i32[0])
                                  goto LABEL_200;
                                v183 += 16;
                                if (v183 >= v115)
                                  goto LABEL_144;
                              }
                            }
                            goto LABEL_123;
                          }
LABEL_153:
                          if (!v115)
                            goto LABEL_554;
                          v119 = v116->u8[0];
                          v120 = v117->u8[0];
LABEL_124:
                          if (v119 != v120)
                            goto LABEL_200;
                        }
                      }
                      else
                      {
                        if (!(_DWORD)v113)
                          goto LABEL_554;
                        if (*(_WORD *)v112 != *v109)
                          goto LABEL_200;
                        v151 = (uint8x8_t *)(v109 + 1);
                        v152 = v113 - 1;
                        v153 = (int16x8_t *)(v112 + 2);
                        if (v152 >= 8)
                        {
                          v154 = (uint16x8_t)vceqq_s16(*v153, (int16x8_t)vmovl_u8(*v151));
                          v154.i16[0] = vminvq_u16(v154);
                          if (v154.i32[0])
                          {
                            v155 = v152 & 7;
                            while (1)
                            {
                              v156 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v153 + 2 * v155), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v151 + v155)));
                              v156.i16[0] = vminvq_u16(v156);
                              if (!v156.i32[0])
                                break;
                              v155 += 8;
                              if (v155 >= v152)
                                goto LABEL_144;
                            }
                          }
                          goto LABEL_200;
                        }
LABEL_237:
                        if (v152 < 4)
                        {
                          if (v152 < 2)
                          {
                            if (v152 == 1)
                            {
                              v120 = v151->u8[0];
                              v119 = v153->u16[0];
                              goto LABEL_124;
                            }
                          }
                          else
                          {
                            if (((v151->u16[0] | (v151->u16[0] << 8)) & 0xFF00FF) != v153->i32[0])
                              goto LABEL_200;
                            v181 = v152 & 1;
                            v127 = (*(unsigned __int16 *)((char *)v151->u16 + v181) | (*(unsigned __int16 *)((char *)v151->u16 + v181) << 8)) & 0xFF00FF;
                            v128 = *(__int32 *)((char *)v153->i32 + 2 * v181);
LABEL_151:
                            if (v127 != v128)
                              goto LABEL_200;
                          }
                        }
                        else
                        {
                          v160 = (v151->u32[0] | ((unint64_t)v151->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                          v161 = v153->i64[0];
                          v162 = v152 & 3;
                          v163 = (*(unsigned int *)((char *)v151->u32 + v162) | ((unint64_t)*(unsigned int *)((char *)v151->u32 + v162) << 16)) & 0xFFFF0000FFFFLL;
                          v164 = (v163 | (v163 << 8)) & 0xFF00FF00FF00FFLL;
                          v165 = *(uint64_t *)((char *)v153->i64 + 2 * v162);
                          if (((v160 | (v160 << 8)) & 0xFF00FF00FF00FFLL) != v161 || v164 != v165)
                            goto LABEL_200;
                        }
                      }
                    }
                    else if ((v107 & 0x400000) != 0)
                    {
                      if (!(_DWORD)v113)
                        goto LABEL_554;
                      if (*(_WORD *)v109 != *v112)
                        goto LABEL_200;
                      v142 = (int16x8_t *)(v109 + 2);
                      v143 = v113 - 1;
                      v144 = (uint8x8_t *)(v112 + 1);
                      if (v143 >= 8)
                      {
                        v157 = (uint16x8_t)vceqq_s16(*v142, (int16x8_t)vmovl_u8(*v144));
                        v157.i16[0] = vminvq_u16(v157);
                        if (v157.i32[0])
                        {
                          v158 = v143 & 7;
                          while (1)
                          {
                            v159 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v142 + 2 * v158), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v144 + v158)));
                            v159.i16[0] = vminvq_u16(v159);
                            if (!v159.i32[0])
                              break;
                            v158 += 8;
                            if (v158 >= v143)
                              goto LABEL_144;
                          }
                        }
LABEL_200:
                        ii = v798;
                        if (!v100)
                        {
                          v96 = *(_DWORD *)v90;
                          goto LABEL_202;
                        }
LABEL_206:
                        v141 = (int *)*((_QWORD *)v4 + 6);
                        *((_QWORD *)v4 + 6) = v90;
                        v5 = v99;
                        if (v141)
                        {
                          v96 = *v141;
                          v90 = (WTF *)v141;
LABEL_103:
                          v98 = v96 - 1;
                          if (!v98)
                          {
                            v129 = (WTF::StringImpl *)*((_QWORD *)v90 + 9);
                            *((_QWORD *)v90 + 9) = 0;
                            if (v129)
                            {
                              if (*(_DWORD *)v129 == 2)
                                WTF::StringImpl::destroy(v129, a2);
                              else
                                *(_DWORD *)v129 -= 2;
                            }
                            v130 = (WTF::StringImpl *)*((_QWORD *)v90 + 4);
                            *((_QWORD *)v90 + 4) = 0;
                            if (v130)
                            {
                              if (*(_DWORD *)v130 == 2)
                                WTF::StringImpl::destroy(v130, a2);
                              else
                                *(_DWORD *)v130 -= 2;
                            }
                            v131 = (WTF *)*((_QWORD *)v90 + 2);
                            if (v131)
                            {
                              *((_QWORD *)v90 + 2) = 0;
                              *((_DWORD *)v90 + 6) = 0;
                              WTF::fastFree(v131, a2);
                            }
                            v132 = (WTF::StringImpl *)*((_QWORD *)v90 + 1);
                            *((_QWORD *)v90 + 1) = 0;
                            if (v132)
                            {
                              if (*(_DWORD *)v132 == 2)
                                WTF::StringImpl::destroy(v132, a2);
                              else
                                *(_DWORD *)v132 -= 2;
                            }
                            goto LABEL_1191;
                          }
                          *(_DWORD *)v90 = v98;
                        }
LABEL_1189:
                        a1 = *((_QWORD *)v4 + 7);
                        if (a1)
                          goto LABEL_555;
                        goto LABEL_362;
                      }
LABEL_212:
                      if (v143 < 4)
                      {
                        if (v143 >= 2)
                        {
                          if (((v144->u16[0] | (v144->u16[0] << 8)) & 0xFF00FF) != v142->i32[0])
                            goto LABEL_200;
                          v167 = v143 & 1;
                          v119 = (*(unsigned __int16 *)((char *)v144->u16 + v167) | (*(unsigned __int16 *)((char *)v144->u16 + v167) << 8)) & 0xFF00FF;
                          v120 = *(__int32 *)((char *)v142->i32 + 2 * v167);
                          goto LABEL_124;
                        }
                        if (v143 == 1)
                        {
                          v126 = v144->u8[0];
                          v125 = v142->u16[0];
LABEL_143:
                          if (v125 != v126)
                            goto LABEL_200;
                        }
                      }
                      else
                      {
                        v145 = (v144->u32[0] | ((unint64_t)v144->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                        v146 = v143 & 3;
                        v147 = (*(unsigned int *)((char *)v144->u32 + v146) | ((unint64_t)*(unsigned int *)((char *)v144->u32 + v146) << 16)) & 0xFFFF0000FFFFLL;
                        v148 = (v147 | (v147 << 8)) & 0xFF00FF00FF00FFLL;
                        v149 = *(uint64_t *)((char *)v142->i64 + 2 * v146);
                        if (((v145 | (v145 << 8)) & 0xFF00FF00FF00FFLL) != v142->i64[0] || v148 != v149)
                          goto LABEL_200;
                      }
                    }
                    else
                    {
                      if (!(_DWORD)v113)
                        goto LABEL_554;
                      if (*(unsigned __int16 *)v109 != *(unsigned __int16 *)v112)
                        goto LABEL_200;
                      v136 = v113 - 1;
                      if ((_DWORD)v113 != 1)
                      {
                        v116 = (int8x16_t *)(v109 + 2);
                        v117 = (int8x16_t *)(v112 + 2);
                        if ((_DWORD)v113 != 2)
                        {
                          switch(31 - __clz(v113 - 2))
                          {
                            case 0u:
                              goto LABEL_186;
                            case 1u:
                              goto LABEL_218;
                            case 2u:
                              goto LABEL_193;
                            case 3u:
                              goto LABEL_289;
                            default:
                              v199 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v116, *(int16x8_t *)v117);
                              v199.i16[0] = vminvq_u16(v199);
                              if (!v199.i32[0])
                                goto LABEL_200;
                              if (v136 < 8)
                                goto LABEL_144;
                              v200 = v136 & 7;
                              break;
                          }
                          while (1)
                          {
                            v201 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v116 + 2 * v200), *(int16x8_t *)((char *)v117 + 2 * v200));
                            v201.i16[0] = vminvq_u16(v201);
                            if (!v201.i32[0])
                              goto LABEL_200;
                            v200 += 8;
                            if (v200 >= v136)
                              goto LABEL_144;
                          }
                        }
LABEL_243:
                        if (!v136)
                          goto LABEL_554;
LABEL_123:
                        v119 = v116->u16[0];
                        v120 = v117->u16[0];
                        goto LABEL_124;
                      }
                    }
LABEL_144:
                    v100 = ++ii >= v5;
                    if (ii == v5)
                      goto LABEL_200;
                    break;
                }
              }
            }
            goto LABEL_46;
          }
LABEL_34:
          v34 = *(_QWORD *)(*(_QWORD *)(v25 + 24) + 216);
          if (v34)
          {
            v35 = *(_QWORD *)v9;
            do
            {
              v36 = *(_QWORD *)(v34 + 16);
              if (v36)
              {
                v37 = 0;
                v38 = *(_DWORD *)(v36 - 8);
                v39 = (*(_DWORD *)(v35 + 16) >> 8) & v38;
                v40 = *(_QWORD *)(v36 + 16 * v39);
                if (v40)
                {
                  while (v40 == -1 || v40 != v35)
                  {
                    v39 = (++v37 + (_DWORD)v39) & v38;
                    v40 = *(_QWORD *)(v36 + 16 * v39);
                    if (!v40)
                      goto LABEL_45;
                  }
                  a1 = *(_QWORD *)(v36 + 16 * v39 + 8);
                  if (a1)
                    goto LABEL_100;
                }
              }
LABEL_45:
              v34 = *(_QWORD *)(v34 + 8);
            }
            while (v34);
          }
        }
      }
LABEL_46:
      v817 = v5;
      v42 = *((_QWORD *)v4 + 1);
      a1 = *(_QWORD *)(v42 + 16);
      v43 = *(_DWORD *)(v42 + 28);
      v44 = a1 + 24 * v43;
      *(_QWORD *)&v828 = a1;
      *((_QWORD *)&v828 + 1) = v44;
      v819 = 0;
      v820 = 0;
      if (v43)
      {
        v45 = 1;
        while (1)
        {
          while (a1 >= v44)
          {
            v210 = WebCore::CSSParserTokenRange::eofToken((WebCore::CSSParserTokenRange *)a1);
            v206 = WebCore::CSSParserToken::functionId((int *)v210);
            if (((unsigned __int16)v206 & 0xFFFE) != 0x262)
              goto LABEL_324;
LABEL_321:
            v203 = (int)v206;
            v204 = WebCore::CSSParserTokenRange::consumeBlock((__int128 **)&v828);
            v45 &= WebCore::CSSVariableReferenceValue::resolveVariableReference((uint64_t)v4, v204, v205, v203, (uint64_t)&v819, ii + 15464);
            v44 = *((_QWORD *)&v828 + 1);
            a1 = v828;
            if ((_QWORD)v828 == *((_QWORD *)&v828 + 1))
              goto LABEL_332;
          }
          v206 = WebCore::CSSParserToken::functionId((int *)a1);
          if (((unsigned __int16)v206 & 0xFFFE) == 0x262)
            goto LABEL_321;
LABEL_324:
          a3 = v828;
          if ((_QWORD)v828 == *((_QWORD *)&v828 + 1))
            a3 = (unint64_t)WebCore::CSSParserTokenRange::eofToken((WebCore::CSSParserTokenRange *)v206);
          else
            *(_QWORD *)&v828 = v828 + 24;
          if (HIDWORD(v820) == (_DWORD)v820)
          {
            v211 = WTF::Vector<WebCore::CSSParserToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v819, HIDWORD(v820) + 1, a3);
            v212 = HIDWORD(v820);
            v213 = (char *)v819 + 24 * HIDWORD(v820);
            v214 = *(_QWORD *)(v211 + 16);
            *(_OWORD *)v213 = *(_OWORD *)v211;
            *((_QWORD *)v213 + 2) = v214;
            HIDWORD(v820) = v212 + 1;
            v44 = *((_QWORD *)&v828 + 1);
            a1 = v828;
            if ((_QWORD)v828 == *((_QWORD *)&v828 + 1))
            {
LABEL_332:
              v90 = v819;
              if ((v45 & 1) != 0)
              {
                v88 = ii;
                v89 = HIDWORD(v820);
                goto LABEL_334;
              }
              if (v819)
              {
                v819 = 0;
                LODWORD(v820) = 0;
                v219 = v90;
                goto LABEL_360;
              }
              goto LABEL_361;
            }
          }
          else
          {
            v207 = HIDWORD(v820) + 1;
            v208 = (char *)v819 + 24 * HIDWORD(v820);
            v209 = *(_QWORD *)(a3 + 16);
            *(_OWORD *)v208 = *(_OWORD *)a3;
            *((_QWORD *)v208 + 2) = v209;
            HIDWORD(v820) = v207;
            v44 = *((_QWORD *)&v828 + 1);
            a1 = v828;
            if ((_QWORD)v828 == *((_QWORD *)&v828 + 1))
              goto LABEL_332;
          }
        }
      }
      v88 = ii;
      v89 = 0;
      v90 = 0;
LABEL_334:
      v215 = *((_QWORD *)v4 + 6);
      if (!v215)
        goto LABEL_1192;
      v216 = *(unsigned int *)(v215 + 28);
      if ((_DWORD)v216 != v89)
        goto LABEL_1192;
      if (!v89)
        goto LABEL_1188;
      ii = 0;
      v217 = 0;
      v218 = *(_QWORD *)(v215 + 16);
      v5 = 32;
      while (1)
      {
        v646 = (int *)(v218 + 24 * v217);
        v647 = (int *)((char *)v90 + 24 * v217);
        v648 = *v646;
        v649 = *v646 & 0x3F;
        v650 = *v647;
        if (v649 != (*v647 & 0x3F))
          goto LABEL_1187;
        switch(v649)
        {
          case 0:
          case 1:
          case 4:
          case 28:
            goto LABEL_1128;
          case 3:
            if (*(_DWORD *)(v218 + 24 * v217 + 16) != *((_DWORD *)v90 + 6 * v217 + 4))
              goto LABEL_1187;
LABEL_1128:
            v665 = v218 + 24 * v217;
            v652 = *(unsigned __int8 **)(v665 + 8);
            v666 = *(_DWORD *)(v665 + 4);
            v667 = (char *)v90 + 24 * v217;
            v655 = (unsigned __int8 *)*((_QWORD *)v667 + 1);
            v656 = *((unsigned int *)v667 + 1);
            v657 = v652 == v655;
            if (v666 != (_DWORD)v656)
              v657 = 0;
            if (v652 == v655 || v666 != (_DWORD)v656)
              goto LABEL_1106;
            if (!v666)
              goto LABEL_1107;
            if ((v648 & 0x400000) != 0)
            {
              if ((v650 & 0x400000) == 0)
              {
                if (!(_DWORD)v656)
                  goto LABEL_554;
                if (*(_WORD *)v655 != *v652)
                  goto LABEL_1187;
                v696 = (uint8x8_t *)(v652 + 1);
                v697 = v656 - 1;
                v698 = (int16x8_t *)(v655 + 2);
                if (v697 >= 8)
                {
                  v699 = (uint16x8_t)vceqq_s16(*v698, (int16x8_t)vmovl_u8(*v696));
                  v699.i16[0] = vminvq_u16(v699);
                  if (v699.i32[0])
                  {
                    v700 = v697 & 7;
                    while (1)
                    {
                      v701 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v698 + 2 * v700), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v696 + v700)));
                      v701.i16[0] = vminvq_u16(v701);
                      if (!v701.i32[0])
                        break;
                      v700 += 8;
                      if (v700 >= v697)
                        goto LABEL_1107;
                    }
                  }
                  goto LABEL_1187;
                }
                goto LABEL_1229;
              }
              if (!(_DWORD)v656)
                goto LABEL_554;
              if (*v652 != *v655)
                goto LABEL_1187;
              v659 = v656 - 1;
              if ((_DWORD)v656 == 1)
                goto LABEL_1107;
              v660 = (int8x16_t *)(v652 + 1);
              v661 = (int8x16_t *)(v655 + 1);
              if ((_DWORD)v656 == 2)
                goto LABEL_1154;
              v669 = 32 - __clz(v656 - 2);
              if (v669 != 1)
              {
                switch(v669)
                {
                  case 2u:
                    goto LABEL_1150;
                  case 3u:
                    goto LABEL_1162;
                  case 4u:
                    goto LABEL_1158;
                  case 5u:
                    goto LABEL_1182;
                  default:
                    v717 = (uint8x16_t)vceqq_s8(*v660, *v661);
                    v717.i8[0] = vminvq_u8(v717);
                    if (!v717.i32[0])
                      goto LABEL_1187;
                    if (v659 < 0x10)
                      goto LABEL_1107;
                    v718 = v659 & 0xF;
                    break;
                }
                while (1)
                {
                  v719 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v660 + v718), *(int8x16_t *)((char *)v661 + v718));
                  v719.i8[0] = vminvq_u8(v719);
                  if (!v719.i32[0])
                    goto LABEL_1187;
                  v718 += 16;
                  if (v718 >= v659)
                    goto LABEL_1107;
                }
              }
              goto LABEL_1125;
            }
            if ((v650 & 0x400000) != 0)
            {
              if (!(_DWORD)v656)
                goto LABEL_554;
              if (*(_WORD *)v652 != *v655)
                goto LABEL_1187;
              v687 = (int16x8_t *)(v652 + 2);
              v688 = v656 - 1;
              v689 = (uint8x8_t *)(v655 + 1);
              if (v688 >= 8)
              {
                v702 = (uint16x8_t)vceqq_s16(*v687, (int16x8_t)vmovl_u8(*v689));
                v702.i16[0] = vminvq_u16(v702);
                if (v702.i32[0])
                {
                  v703 = v688 & 7;
                  while (1)
                  {
                    v704 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v687 + 2 * v703), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v689 + v703)));
                    v704.i16[0] = vminvq_u16(v704);
                    if (!v704.i32[0])
                      break;
                    v703 += 8;
                    if (v703 >= v688)
                      goto LABEL_1107;
                  }
                }
                goto LABEL_1187;
              }
              goto LABEL_1204;
            }
            if (!(_DWORD)v656)
              goto LABEL_554;
            if (*(unsigned __int16 *)v652 != *(unsigned __int16 *)v655)
              goto LABEL_1187;
            v677 = v656 - 1;
            if ((_DWORD)v656 == 1)
              goto LABEL_1107;
            v660 = (int8x16_t *)(v652 + 2);
            v661 = (int8x16_t *)(v655 + 2);
            if ((_DWORD)v656 != 2)
            {
              switch(31 - __clz(v656 - 2))
              {
                case 0u:
                  goto LABEL_1173;
                case 1u:
                  goto LABEL_1210;
                case 2u:
                  goto LABEL_1180;
                case 3u:
                  goto LABEL_1257;
                default:
                  v734 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v660, *(int16x8_t *)v661);
                  v734.i16[0] = vminvq_u16(v734);
                  if (!v734.i32[0])
                    goto LABEL_1187;
                  if (v677 < 8)
                    goto LABEL_1107;
                  v735 = v677 & 7;
                  break;
              }
              while (1)
              {
                v736 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v660 + 2 * v735), *(int16x8_t *)((char *)v661 + 2 * v735));
                v736.i16[0] = vminvq_u16(v736);
                if (!v736.i32[0])
                  goto LABEL_1187;
                v735 += 8;
                if (v735 >= v677)
                  goto LABEL_1107;
              }
            }
            goto LABEL_1235;
          case 6:
            v670 = *(unsigned __int16 *)(v218 + 24 * v217 + 16);
            v671 = *((unsigned __int16 *)v90 + 12 * v217 + 8);
            goto LABEL_1145;
          case 7:
          case 8:
            goto LABEL_1110;
          case 9:
            if ((v648 & 0x3C0000) != 0)
            {
LABEL_1110:
              v651 = v218 + 24 * v217;
              v652 = *(unsigned __int8 **)(v651 + 8);
              v653 = *(_DWORD *)(v651 + 4);
              v654 = (char *)v90 + 24 * v217;
              v655 = (unsigned __int8 *)*((_QWORD *)v654 + 1);
              v656 = *((unsigned int *)v654 + 1);
              v657 = v652 == v655;
              if (v653 != (_DWORD)v656)
                v657 = 0;
              if (v652 == v655 || v653 != (_DWORD)v656)
              {
LABEL_1106:
                if (!v657)
                  goto LABEL_1187;
                goto LABEL_1107;
              }
              if (v653)
              {
                if ((v648 & 0x400000) != 0)
                {
                  if ((v650 & 0x400000) != 0)
                  {
                    if (!(_DWORD)v656)
                      goto LABEL_554;
                    if (*v652 != *v655)
                      goto LABEL_1187;
                    v659 = v656 - 1;
                    if ((_DWORD)v656 != 1)
                    {
                      v660 = (int8x16_t *)(v652 + 1);
                      v661 = (int8x16_t *)(v655 + 1);
                      if ((_DWORD)v656 != 2)
                      {
                        v662 = 32 - __clz(v656 - 2);
                        if (v662 != 1)
                        {
                          switch(v662)
                          {
                            case 2u:
LABEL_1150:
                              if (v660->u16[0] != v661->u16[0])
                                goto LABEL_1187;
                              v672 = *(unsigned __int16 *)&v652[v656 - 2];
                              v673 = *(unsigned __int16 *)&v655[v656 - 2];
                              goto LABEL_1152;
                            case 3u:
LABEL_1162:
                              if (v660->i32[0] != v661->i32[0])
                                goto LABEL_1187;
                              v672 = *(_DWORD *)&v652[v656 - 4];
                              v676 = &v655[v656];
                              goto LABEL_1164;
                            case 4u:
LABEL_1158:
                              if (v660->i64[0] != v661->i64[0])
                                goto LABEL_1187;
                              v674 = *(_QWORD *)&v652[v656 - 8];
                              v675 = &v655[v656];
                              goto LABEL_1160;
                            case 5u:
LABEL_1182:
                              v678 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v652[v656 - 16], *(int8x16_t *)&v655[v656 - 16]), vceqq_s8(*(int8x16_t *)(v652 + 1), *(int8x16_t *)(v655 + 1)));
                              v678.i8[0] = vminvq_u8((uint8x16_t)v678);
                              goto LABEL_1183;
                            default:
                              v713 = (uint8x16_t)vceqq_s8(*v660, *v661);
                              v713.i8[0] = vminvq_u8(v713);
                              if (!v713.i32[0])
                                goto LABEL_1187;
                              if (v659 < 0x10)
                                goto LABEL_1107;
                              v714 = v659 & 0xF;
                              break;
                          }
                          while (1)
                          {
                            v715 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v660 + v714), *(int8x16_t *)((char *)v661 + v714));
                            v715.i8[0] = vminvq_u8(v715);
                            if (!v715.i32[0])
                              goto LABEL_1187;
                            v714 += 16;
                            if (v714 >= v659)
                              goto LABEL_1107;
                          }
                        }
                        goto LABEL_1125;
                      }
LABEL_1154:
                      if (!v659)
                        goto LABEL_554;
                      v663 = v660->u8[0];
                      v664 = v661->u8[0];
LABEL_1126:
                      if (v663 != v664)
                        goto LABEL_1187;
                    }
                  }
                  else
                  {
                    if (!(_DWORD)v656)
                      goto LABEL_554;
                    if (*(_WORD *)v655 != *v652)
                      goto LABEL_1187;
                    v696 = (uint8x8_t *)(v652 + 1);
                    v697 = v656 - 1;
                    v698 = (int16x8_t *)(v655 + 2);
                    if (v697 >= 8)
                    {
                      v723 = (uint16x8_t)vceqq_s16(*v698, (int16x8_t)vmovl_u8(*v696));
                      v723.i16[0] = vminvq_u16(v723);
                      if (v723.i32[0])
                      {
                        v724 = v697 & 7;
                        while (1)
                        {
                          v725 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v698 + 2 * v724), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v696 + v724)));
                          v725.i16[0] = vminvq_u16(v725);
                          if (!v725.i32[0])
                            break;
                          v724 += 8;
                          if (v724 >= v697)
                            goto LABEL_1107;
                        }
                      }
                      goto LABEL_1187;
                    }
LABEL_1229:
                    if (v697 < 4)
                    {
                      if (v697 < 2)
                      {
                        if (v697 != 1)
                          goto LABEL_1107;
                        v664 = v696->u8[0];
                        v663 = v698->u16[0];
                        goto LABEL_1126;
                      }
                      if (((v696->u16[0] | (v696->u16[0] << 8)) & 0xFF00FF) != v698->i32[0])
                        goto LABEL_1187;
                      v716 = v697 & 1;
                      v672 = (*(unsigned __int16 *)((char *)v696->u16 + v716) | (*(unsigned __int16 *)((char *)v696->u16 + v716) << 8)) & 0xFF00FF;
                      v673 = *(__int32 *)((char *)v698->i32 + 2 * v716);
LABEL_1152:
                      if (v672 != v673)
                        goto LABEL_1187;
                    }
                    else
                    {
                      v705 = (v696->u32[0] | ((unint64_t)v696->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                      v706 = v698->i64[0];
                      v707 = v697 & 3;
                      v708 = (*(unsigned int *)((char *)v696->u32 + v707) | ((unint64_t)*(unsigned int *)((char *)v696->u32 + v707) << 16)) & 0xFFFF0000FFFFLL;
                      v709 = (v708 | (v708 << 8)) & 0xFF00FF00FF00FFLL;
                      v710 = *(uint64_t *)((char *)v698->i64 + 2 * v707);
                      if (((v705 | (v705 << 8)) & 0xFF00FF00FF00FFLL) != v706 || v709 != v710)
                        goto LABEL_1187;
                    }
                  }
                }
                else if ((v650 & 0x400000) != 0)
                {
                  if (!(_DWORD)v656)
                    goto LABEL_554;
                  if (*(_WORD *)v652 != *v655)
                    goto LABEL_1187;
                  v687 = (int16x8_t *)(v652 + 2);
                  v688 = v656 - 1;
                  v689 = (uint8x8_t *)(v655 + 1);
                  if (v688 >= 8)
                  {
                    v720 = (uint16x8_t)vceqq_s16(*v687, (int16x8_t)vmovl_u8(*v689));
                    v720.i16[0] = vminvq_u16(v720);
                    if (v720.i32[0])
                    {
                      v721 = v688 & 7;
                      while (1)
                      {
                        v722 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v687 + 2 * v721), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v689 + v721)));
                        v722.i16[0] = vminvq_u16(v722);
                        if (!v722.i32[0])
                          break;
                        v721 += 8;
                        if (v721 >= v688)
                          goto LABEL_1107;
                      }
                    }
LABEL_1187:
                    if ((ii & 1) != 0)
                    {
LABEL_1188:
                      ii = v88;
                      v5 = v817;
                      if (!v90)
                        goto LABEL_1189;
LABEL_1191:
                      WTF::fastFree(v90, a2);
                      goto LABEL_1189;
                    }
LABEL_1192:
                    *(_QWORD *)&v828 = v90;
                    *((_QWORD *)&v828 + 1) = (char *)v90 + 24 * v89;
                    v679 = (const WebCore::CSSParserContext *)(*((_QWORD *)v4 + 1) + 32);
                    v680 = WTF::fastMalloc((WTF *)0x60);
                    WebCore::CSSVariableData::CSSVariableData(v680, (char **)&v828, v679);
                    v819 = 0;
                    v682 = *((_QWORD *)v4 + 6);
                    *((_QWORD *)v4 + 6) = v680;
                    if (v682)
                      WTF::RefCounted<WebCore::CSSVariableData>::deref(v682, v681);
                    WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref((uint64_t *)&v819, v681);
                    v683 = *((_QWORD *)v4 + 6);
                    if (v683)
                      ++*(_DWORD *)v683;
                    v684 = *(_QWORD *)(v683 + 16) + 24 * *(unsigned int *)(v683 + 28);
                    *(_QWORD *)&v828 = *(_QWORD *)(v683 + 16);
                    *((_QWORD *)&v828 + 1) = v684;
                    WebCore::CSSPropertyParser::parseSingleValue(v817, &v828, *((_QWORD *)v4 + 1) + 32, (int **)&v819);
                    v686 = (_DWORD *)*((_QWORD *)v4 + 7);
                    *((_QWORD *)v4 + 7) = v819;
                    if (v686)
                    {
                      if (*v686 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v686, v685);
                      else
                        *v686 -= 2;
                    }
                    WTF::RefCounted<WebCore::CSSVariableData>::deref(v683, v685);
                    goto LABEL_1188;
                  }
LABEL_1204:
                  if (v688 < 4)
                  {
                    if (v688 >= 2)
                    {
                      if (((v689->u16[0] | (v689->u16[0] << 8)) & 0xFF00FF) != v687->i32[0])
                        goto LABEL_1187;
                      v712 = v688 & 1;
                      v663 = (*(unsigned __int16 *)((char *)v689->u16 + v712) | (*(unsigned __int16 *)((char *)v689->u16 + v712) << 8)) & 0xFF00FF;
                      v664 = *(__int32 *)((char *)v687->i32 + 2 * v712);
                      goto LABEL_1126;
                    }
                    if (v688 == 1)
                    {
                      v671 = v689->u8[0];
                      v670 = v687->u16[0];
LABEL_1145:
                      if (v670 != v671)
                        goto LABEL_1187;
                    }
                  }
                  else
                  {
                    v690 = (v689->u32[0] | ((unint64_t)v689->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                    v691 = v688 & 3;
                    v692 = (*(unsigned int *)((char *)v689->u32 + v691) | ((unint64_t)*(unsigned int *)((char *)v689->u32 + v691) << 16)) & 0xFFFF0000FFFFLL;
                    v693 = (v692 | (v692 << 8)) & 0xFF00FF00FF00FFLL;
                    v694 = *(uint64_t *)((char *)v687->i64 + 2 * v691);
                    if (((v690 | (v690 << 8)) & 0xFF00FF00FF00FFLL) != v687->i64[0] || v693 != v694)
                      goto LABEL_1187;
                  }
                }
                else
                {
                  if (!(_DWORD)v656)
                    goto LABEL_554;
                  if (*(unsigned __int16 *)v652 != *(unsigned __int16 *)v655)
                    goto LABEL_1187;
                  v677 = v656 - 1;
                  if ((_DWORD)v656 != 1)
                  {
                    v660 = (int8x16_t *)(v652 + 2);
                    v661 = (int8x16_t *)(v655 + 2);
                    if ((_DWORD)v656 != 2)
                    {
                      switch(31 - __clz(v656 - 2))
                      {
                        case 0u:
LABEL_1173:
                          v663 = v660->i32[0];
                          v664 = v661->i32[0];
                          goto LABEL_1126;
                        case 1u:
LABEL_1210:
                          if (v660->i32[0] != v661->i32[0])
                            goto LABEL_1187;
                          v672 = *(_DWORD *)&v652[2 * v656 - 4];
                          v676 = &v655[2 * v656];
LABEL_1164:
                          v673 = *((_DWORD *)v676 - 1);
                          goto LABEL_1152;
                        case 2u:
LABEL_1180:
                          if (v660->i64[0] != v661->i64[0])
                            goto LABEL_1187;
                          v674 = *(_QWORD *)&v652[2 * v656 - 8];
                          v675 = &v655[2 * v656];
LABEL_1160:
                          if (v674 != *((_QWORD *)v675 - 1))
                            goto LABEL_1187;
                          goto LABEL_1107;
                        case 3u:
LABEL_1257:
                          v678 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v652[2 * v656 - 16], *(int16x8_t *)&v655[2 * v656 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v652 + 2), *(int16x8_t *)(v655 + 2)));
                          v678.i16[0] = vminvq_u16(v678);
LABEL_1183:
                          if (!v678.i32[0])
                            goto LABEL_1187;
                          goto LABEL_1107;
                        default:
                          v731 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v660, *(int16x8_t *)v661);
                          v731.i16[0] = vminvq_u16(v731);
                          if (!v731.i32[0])
                            goto LABEL_1187;
                          if (v677 < 8)
                            goto LABEL_1107;
                          v732 = v677 & 7;
                          break;
                      }
                      while (1)
                      {
                        v733 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v660 + 2 * v732), *(int16x8_t *)((char *)v661 + 2 * v732));
                        v733.i16[0] = vminvq_u16(v733);
                        if (!v733.i32[0])
                          goto LABEL_1187;
                        v732 += 8;
                        if (v732 >= v677)
                          goto LABEL_1107;
                      }
                    }
LABEL_1235:
                    if (!v677)
                      goto LABEL_554;
LABEL_1125:
                    v663 = v660->u16[0];
                    v664 = v661->u16[0];
                    goto LABEL_1126;
                  }
                }
              }
            }
            else
            {
              v815 = v89;
              v726 = WebCore::CSSParserToken::unitString((WebCore::CSSParserToken *)(v218 + 24 * v217));
              v807 = v727;
              v811 = (unsigned __int8 *)v726;
              v728 = (unsigned __int8 *)WebCore::CSSParserToken::unitString((WTF *)((char *)v90 + 24 * v217));
              a1 = WTF::operator==(v811, v807, v728, v729);
              a3 = (unint64_t)&jpt_1944C81B0;
              a2 = (WTF::StringImpl *)&jpt_1944C7FD4;
              v89 = v815;
              if (!(_DWORD)a1)
                goto LABEL_1187;
              v730 = *v647 ^ *v646;
              if ((v730 & 0x600) != 0
                || *(double *)(v218 + 24 * v217 + 16) != *((double *)v90 + 3 * v217 + 2)
                || (v730 & 0x100) != 0)
              {
                goto LABEL_1187;
              }
            }
LABEL_1107:
            ii = ++v217 >= v216;
            if (v217 == v216)
              goto LABEL_1187;
            break;
          case 16:
            v670 = *(_DWORD *)(v218 + 24 * v217 + 16);
            v671 = *((_DWORD *)v90 + 6 * v217 + 4);
            goto LABEL_1145;
          default:
            goto LABEL_1107;
        }
      }
    }
    *(_DWORD *)a3 += 2;
    v86 = *(WTF::StringImpl **)(a1 + 15480);
    v87 = (_DWORD)a2 - 354;
    if (((_DWORD)a2 - 354) > 0x5A)
      goto LABEL_561;
LABEL_560:
    switch(v87)
    {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 26:
      case 27:
      case 35:
      case 37:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 46:
      case 47:
      case 49:
      case 50:
      case 57:
      case 59:
      case 61:
      case 63:
      case 65:
      case 66:
      case 69:
      case 70:
      case 72:
      case 73:
      case 78:
      case 79:
      case 81:
      case 82:
      case 86:
      case 87:
      case 89:
      case 90:
        v553 = WebCore::CSSProperty::resolveDirectionAwareProperty(v5, (*((_DWORD *)v86 + 10) >> 26) & 1, (unsigned __int16)*((_DWORD *)v86 + 11) >> 13);
        WebCore::Style::Builder::applyProperty(ii, v553);
        goto LABEL_578;
      default:
        goto LABEL_561;
    }
  }
  v46 = (uint64_t *)(a1 + 15464);
  v47 = *(_QWORD *)(a3 + 16);
  if (!*(_BYTE *)(v47 + 40))
    goto LABEL_91;
  v48 = v47 + 24;
  if (*(_WORD *)(v47 + 32) == 611)
  {
    v168 = (WebCore::ConstantPropertyMap *)WebCore::Document::constantProperties(*(WebCore::Document **)(a1 + 15488));
    v170 = WebCore::ConstantPropertyMap::values(v168, v169);
    v73 = WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSCustomPropertyValue,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue>>>,WTF::HashTableTraits>::get(v170, v47 + 24);
    if (v73)
      goto LABEL_249;
    goto LABEL_91;
  }
  v49 = *v46;
  v50 = *(_QWORD *)(*v46 + 15600);
  if (v50
    && (v51 = 0,
        v52 = *(_DWORD *)(v50 - 8),
        v53 = (*(_DWORD *)(*(_QWORD *)v48 + 16) >> 8) & v52,
        (v54 = *(_QWORD *)(v50 + 8 * v53)) != 0))
  {
    while (v54 == -1 || v54 != *(_QWORD *)v48)
    {
      v53 = (++v51 + v53) & v52;
      v54 = *(_QWORD *)(v50 + 8 * v53);
      if (!v54)
        goto LABEL_57;
    }
  }
  else
  {
LABEL_57:
    v56 = *(_QWORD *)(v49 + 15448);
    if (v56)
    {
      v57 = 0;
      v58 = *(_DWORD *)(v56 - 8);
      v59 = (*(_DWORD *)(*(_QWORD *)v48 + 16) >> 8) & v58;
      v60 = (uint64_t *)(v56 + 40 * v59);
      v61 = *v60;
      if (*v60)
      {
        while (v61 == -1 || v61 != *(_QWORD *)v48)
        {
          v59 = (++v57 + v59) & v58;
          v60 = (uint64_t *)(v56 + 40 * v59);
          v61 = *v60;
          if (!*v60)
            goto LABEL_64;
        }
        v63 = *(_DWORD *)(v56 - 4);
      }
      else
      {
LABEL_64:
        v63 = *(_DWORD *)(v56 - 4);
        v60 = (uint64_t *)(v56 + 40 * v63);
      }
      if (v60 != (uint64_t *)(v56 + 40 * v63))
        WebCore::Style::Builder::applyCustomPropertyImpl(v49, (WTF::StringImpl *)(v47 + 24), (uint64_t)(v60 + 1));
    }
  }
  v64 = *(_QWORD *)(ii + 15480);
  v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v64 + 8) + 40) + 288);
  if (!v65)
  {
LABEL_79:
    v74 = *(_QWORD *)(*(_QWORD *)(v64 + 24) + 216);
    if (v74)
    {
      v75 = *(_QWORD *)v48;
      do
      {
        v76 = *(_QWORD *)(v74 + 16);
        if (v76)
        {
          v77 = 0;
          v78 = *(_DWORD *)(v76 - 8);
          v79 = (*(_DWORD *)(v75 + 16) >> 8) & v78;
          v80 = *(_QWORD *)(v76 + 16 * v79);
          if (v80)
          {
            while (v80 == -1 || v80 != v75)
            {
              v79 = (++v77 + (_DWORD)v79) & v78;
              v80 = *(_QWORD *)(v76 + 16 * v79);
              if (!v80)
                goto LABEL_90;
            }
            v73 = *(_QWORD *)(v76 + 16 * v79 + 8);
            if (v73)
              goto LABEL_249;
          }
        }
LABEL_90:
        v74 = *(_QWORD *)(v74 + 8);
      }
      while (v74);
    }
LABEL_91:
    v817 = v5;
    v82 = *(_QWORD *)(v47 + 8);
    a1 = *(_QWORD *)(v82 + 16);
    v83 = *(_DWORD *)(v82 + 28);
    v84 = a1 + 24 * v83;
    *(_QWORD *)&v828 = a1;
    *((_QWORD *)&v828 + 1) = v84;
    v819 = 0;
    v820 = 0;
    if (!v83)
    {
      v91 = 0;
      v92 = 0;
      goto LABEL_354;
    }
    v85 = 1;
    while (1)
    {
      while (a1 >= v84)
      {
        v227 = WebCore::CSSParserTokenRange::eofToken((WebCore::CSSParserTokenRange *)a1);
        v223 = WebCore::CSSParserToken::functionId((int *)v227);
        if (((unsigned __int16)v223 & 0xFFFE) != 0x262)
          goto LABEL_344;
LABEL_341:
        v220 = (int)v223;
        v221 = WebCore::CSSParserTokenRange::consumeBlock((__int128 **)&v828);
        v85 &= WebCore::CSSVariableReferenceValue::resolveVariableReference(v47, v221, v222, v220, (uint64_t)&v819, ii + 15464);
        v84 = *((_QWORD *)&v828 + 1);
        a1 = v828;
        if ((_QWORD)v828 == *((_QWORD *)&v828 + 1))
          goto LABEL_352;
      }
      v223 = WebCore::CSSParserToken::functionId((int *)a1);
      if (((unsigned __int16)v223 & 0xFFFE) == 0x262)
        goto LABEL_341;
LABEL_344:
      a3 = v828;
      if ((_QWORD)v828 == *((_QWORD *)&v828 + 1))
        a3 = (unint64_t)WebCore::CSSParserTokenRange::eofToken((WebCore::CSSParserTokenRange *)v223);
      else
        *(_QWORD *)&v828 = v828 + 24;
      if (HIDWORD(v820) == (_DWORD)v820)
      {
        v228 = WTF::Vector<WebCore::CSSParserToken,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v819, HIDWORD(v820) + 1, a3);
        v229 = HIDWORD(v820);
        v230 = (char *)v819 + 24 * HIDWORD(v820);
        v231 = *(_QWORD *)(v228 + 16);
        *(_OWORD *)v230 = *(_OWORD *)v228;
        *((_QWORD *)v230 + 2) = v231;
        HIDWORD(v820) = v229 + 1;
        v84 = *((_QWORD *)&v828 + 1);
        a1 = v828;
        if ((_QWORD)v828 == *((_QWORD *)&v828 + 1))
        {
LABEL_352:
          v92 = v819;
          if ((v85 & 1) == 0)
          {
            if (v819)
            {
              v819 = 0;
              LODWORD(v820) = 0;
              v219 = v92;
LABEL_360:
              a1 = WTF::fastFree(v219, a2);
            }
LABEL_361:
            v5 = v817;
            goto LABEL_362;
          }
          v91 = HIDWORD(v820);
LABEL_354:
          v232 = *(_QWORD *)(v47 + 48);
          if (!v232)
            goto LABEL_456;
          v233 = *(unsigned int *)(v232 + 28);
          if ((_DWORD)v233 != v91)
            goto LABEL_456;
          if (!v91)
            goto LABEL_447;
          v234 = ii;
          v235 = 0;
          ii = 0;
          v5 = *(_QWORD *)(v232 + 16);
          a3 = 32;
          while (2)
          {
            v236 = (int *)(v5 + 24 * ii);
            v237 = (int *)((char *)v92 + 24 * ii);
            v238 = *v236;
            v239 = *v236 & 0x3F;
            v240 = *v237;
            if (v239 != (*v237 & 0x3F))
              goto LABEL_446;
            switch(v239)
            {
              case 0:
              case 1:
              case 4:
              case 28:
                goto LABEL_387;
              case 3:
                if (*(_DWORD *)(v5 + 24 * ii + 16) != *((_DWORD *)v92 + 6 * ii + 4))
                  goto LABEL_446;
LABEL_387:
                v255 = v5 + 24 * ii;
                v242 = *(unsigned __int8 **)(v255 + 8);
                v256 = *(_DWORD *)(v255 + 4);
                v257 = (char *)v92 + 24 * ii;
                v245 = (unsigned __int8 *)*((_QWORD *)v257 + 1);
                v246 = *((unsigned int *)v257 + 1);
                v247 = v242 == v245;
                if (v256 != (_DWORD)v246)
                  v247 = 0;
                if (v242 == v245 || v256 != (_DWORD)v246)
                  goto LABEL_365;
                if (!v256)
                  goto LABEL_366;
                if ((v238 & 0x400000) == 0)
                {
                  if ((v240 & 0x400000) != 0)
                  {
                    if (!(_DWORD)v246)
                      goto LABEL_554;
                    if (*(_WORD *)v242 != *v245)
                      goto LABEL_446;
                    v280 = (int16x8_t *)(v242 + 2);
                    v281 = v246 - 1;
                    v282 = (uint8x8_t *)(v245 + 1);
                    if (v281 >= 8)
                    {
                      v299 = (uint16x8_t)vceqq_s16(*v280, (int16x8_t)vmovl_u8(*v282));
                      v299.i16[0] = vminvq_u16(v299);
                      if (v299.i32[0])
                      {
                        v300 = v281 & 7;
                        while (1)
                        {
                          v301 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v280 + 2 * v300), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v282 + v300)));
                          v301.i16[0] = vminvq_u16(v301);
                          if (!v301.i32[0])
                            break;
                          v300 += 8;
                          if (v300 >= v281)
                            goto LABEL_366;
                        }
                      }
                      goto LABEL_446;
                    }
                    goto LABEL_463;
                  }
                  if (!(_DWORD)v246)
                    goto LABEL_554;
                  if (*(unsigned __int16 *)v242 != *(unsigned __int16 *)v245)
                    goto LABEL_446;
                  v267 = v246 - 1;
                  if ((_DWORD)v246 == 1)
                    goto LABEL_366;
                  v268 = (int16x8_t *)(v242 + 2);
                  v269 = (int16x8_t *)(v245 + 2);
                  if ((_DWORD)v246 != 2)
                  {
                    switch(31 - __clz(v246 - 2))
                    {
                      case 0u:
                        goto LABEL_432;
                      case 1u:
                        goto LABEL_469;
                      case 2u:
                        goto LABEL_439;
                      case 3u:
                        goto LABEL_518;
                      default:
                        v335 = (uint16x8_t)vceqq_s16(*v268, *v269);
                        v335.i16[0] = vminvq_u16(v335);
                        if (!v335.i32[0])
                          goto LABEL_446;
                        if (v267 < 8)
                          goto LABEL_366;
                        v336 = v267 & 7;
                        break;
                    }
                    while (1)
                    {
                      v337 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v268 + 2 * v336), *(int16x8_t *)((char *)v269 + 2 * v336));
                      v337.i16[0] = vminvq_u16(v337);
                      if (!v337.i32[0])
                        goto LABEL_446;
                      v336 += 8;
                      if (v336 >= v267)
                        goto LABEL_366;
                    }
                  }
                  goto LABEL_493;
                }
                if ((v240 & 0x400000) == 0)
                {
                  if (!(_DWORD)v246)
                    goto LABEL_554;
                  if (*(_WORD *)v245 != *v242)
                    goto LABEL_446;
                  v289 = (uint8x8_t *)(v242 + 1);
                  v290 = v246 - 1;
                  v291 = (int16x8_t *)(v245 + 2);
                  if (v290 >= 8)
                  {
                    v324 = (uint16x8_t)vceqq_s16(*v291, (int16x8_t)vmovl_u8(*v289));
                    v324.i16[0] = vminvq_u16(v324);
                    a3 = 32;
                    if (v324.i32[0])
                    {
                      v325 = v290 & 7;
                      while (1)
                      {
                        v326 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v291 + 2 * v325), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v289 + v325)));
                        v326.i16[0] = vminvq_u16(v326);
                        if (!v326.i32[0])
                          break;
                        v325 += 8;
                        if (v325 >= v290)
                          goto LABEL_366;
                      }
                    }
                    goto LABEL_446;
                  }
                  if (v290 >= 4)
                  {
                    v292 = (v289->u32[0] | ((unint64_t)v289->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                    v293 = v291->i64[0];
                    v294 = v290 & 3;
                    v295 = (*(unsigned int *)((char *)v289->u32 + v294) | ((unint64_t)*(unsigned int *)((char *)v289->u32 + v294) << 16)) & 0xFFFF0000FFFFLL;
                    v296 = (v295 | (v295 << 8)) & 0xFF00FF00FF00FFLL;
                    v297 = *(uint64_t *)((char *)v291->i64 + 2 * v294);
                    v298 = ((v292 | (v292 << 8)) & 0xFF00FF00FF00FFLL) == v293 && v296 == v297;
                    goto LABEL_496;
                  }
                  goto LABEL_507;
                }
                if (!(_DWORD)v246)
                  goto LABEL_554;
                if (*v242 != *v245)
                  goto LABEL_446;
                v249 = v246 - 1;
                if ((_DWORD)v246 == 1)
                  goto LABEL_366;
                v250 = (int8x16_t *)(v242 + 1);
                v251 = (int8x16_t *)(v245 + 1);
                if ((_DWORD)v246 == 2)
                  goto LABEL_413;
                v259 = 32 - __clz(v246 - 2);
                if (v259 != 1)
                {
                  switch(v259)
                  {
                    case 2u:
                      goto LABEL_409;
                    case 3u:
                      goto LABEL_421;
                    case 4u:
                      goto LABEL_417;
                    case 5u:
                      goto LABEL_441;
                    default:
                      v315 = (uint8x16_t)vceqq_s8(*v250, *v251);
                      v315.i8[0] = vminvq_u8(v315);
                      if (!v315.i32[0])
                        goto LABEL_446;
                      if (v249 < 0x10)
                        goto LABEL_366;
                      v316 = v249 & 0xF;
                      break;
                  }
                  while (1)
                  {
                    v317 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v250 + v316), *(int8x16_t *)((char *)v251 + v316));
                    v317.i8[0] = vminvq_u8(v317);
                    if (!v317.i32[0])
                      goto LABEL_446;
                    v316 += 16;
                    if (v316 >= v249)
                      goto LABEL_366;
                  }
                }
                goto LABEL_384;
              case 6:
                v260 = *(unsigned __int16 *)(v5 + 24 * ii + 16);
                v261 = *((unsigned __int16 *)v92 + 12 * ii + 8);
                goto LABEL_404;
              case 7:
              case 8:
                goto LABEL_369;
              case 9:
                if ((v238 & 0x3C0000) == 0)
                {
                  v813 = v91;
                  v327 = WebCore::CSSParserToken::unitString((WebCore::CSSParserToken *)(v5 + 24 * ii));
                  v805 = v328;
                  v809 = (unsigned __int8 *)v327;
                  v329 = (unsigned __int8 *)WebCore::CSSParserToken::unitString((WTF *)((char *)v92 + 24 * ii));
                  a1 = WTF::operator==(v809, v805, v329, v330);
                  a3 = 32;
                  a2 = (WTF::StringImpl *)&jpt_1944C573C;
                  v91 = v813;
                  if (!(_DWORD)a1)
                    goto LABEL_446;
                  v331 = *v237 ^ *v236;
                  if ((v331 & 0x600) != 0
                    || *(double *)(v5 + 24 * ii + 16) != *((double *)v92 + 3 * ii + 2)
                    || (v331 & 0x100) != 0)
                  {
                    goto LABEL_446;
                  }
                  goto LABEL_366;
                }
LABEL_369:
                v241 = v5 + 24 * ii;
                v242 = *(unsigned __int8 **)(v241 + 8);
                v243 = *(_DWORD *)(v241 + 4);
                v244 = (char *)v92 + 24 * ii;
                v245 = (unsigned __int8 *)*((_QWORD *)v244 + 1);
                v246 = *((unsigned int *)v244 + 1);
                v247 = v242 == v245;
                if (v243 != (_DWORD)v246)
                  v247 = 0;
                if (v242 == v245 || v243 != (_DWORD)v246)
                {
LABEL_365:
                  if (!v247)
                    goto LABEL_446;
LABEL_366:
                  v235 = ++ii >= v233;
                  if (ii == v233)
                    goto LABEL_446;
                  continue;
                }
                if (!v243)
                  goto LABEL_366;
                if ((v238 & 0x400000) != 0)
                {
                  if ((v240 & 0x400000) != 0)
                  {
                    if (!(_DWORD)v246)
                      goto LABEL_554;
                    if (*v242 != *v245)
                      goto LABEL_446;
                    v249 = v246 - 1;
                    if ((_DWORD)v246 == 1)
                      goto LABEL_366;
                    v250 = (int8x16_t *)(v242 + 1);
                    v251 = (int8x16_t *)(v245 + 1);
                    if ((_DWORD)v246 == 2)
                    {
LABEL_413:
                      if (!v249)
                        goto LABEL_554;
                      v253 = v250->u8[0];
                      v254 = v251->u8[0];
                    }
                    else
                    {
                      v252 = 32 - __clz(v246 - 2);
                      if (v252 != 1)
                      {
                        switch(v252)
                        {
                          case 2u:
LABEL_409:
                            if (v250->u16[0] != v251->u16[0])
                              goto LABEL_446;
                            v262 = *(unsigned __int16 *)&v242[v246 - 2];
                            v263 = *(unsigned __int16 *)&v245[v246 - 2];
                            goto LABEL_411;
                          case 3u:
LABEL_421:
                            if (v250->i32[0] != v251->i32[0])
                              goto LABEL_446;
                            v262 = *(_DWORD *)&v242[v246 - 4];
                            v266 = &v245[v246];
                            goto LABEL_423;
                          case 4u:
LABEL_417:
                            if (v250->i64[0] != v251->i64[0])
                              goto LABEL_446;
                            v264 = *(_QWORD *)&v242[v246 - 8];
                            v265 = &v245[v246];
                            goto LABEL_419;
                          case 5u:
LABEL_441:
                            v270 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&v242[v246 - 16], *(int8x16_t *)&v245[v246 - 16]), vceqq_s8(*(int8x16_t *)(v242 + 1), *(int8x16_t *)(v245 + 1)));
                            v270.i8[0] = vminvq_u8((uint8x16_t)v270);
                            goto LABEL_442;
                          default:
                            v312 = (uint8x16_t)vceqq_s8(*v250, *v251);
                            v312.i8[0] = vminvq_u8(v312);
                            if (!v312.i32[0])
                              goto LABEL_446;
                            if (v249 < 0x10)
                              goto LABEL_366;
                            v313 = v249 & 0xF;
                            break;
                        }
                        while (1)
                        {
                          v314 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v250 + v313), *(int8x16_t *)((char *)v251 + v313));
                          v314.i8[0] = vminvq_u8(v314);
                          if (!v314.i32[0])
                            goto LABEL_446;
                          v313 += 16;
                          if (v313 >= v249)
                            goto LABEL_366;
                        }
                      }
LABEL_384:
                      v253 = v250->u16[0];
                      v254 = v251->u16[0];
                    }
                    goto LABEL_385;
                  }
                  if (!(_DWORD)v246)
                    goto LABEL_554;
                  if (*(_WORD *)v245 != *v242)
                    goto LABEL_446;
                  v289 = (uint8x8_t *)(v242 + 1);
                  v290 = v246 - 1;
                  v291 = (int16x8_t *)(v245 + 2);
                  if (v290 >= 8)
                  {
                    v321 = (uint16x8_t)vceqq_s16(*v291, (int16x8_t)vmovl_u8(*v289));
                    v321.i16[0] = vminvq_u16(v321);
                    if (v321.i32[0])
                    {
                      v322 = v290 & 7;
                      while (1)
                      {
                        v323 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v291 + 2 * v322), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v289 + v322)));
                        v323.i16[0] = vminvq_u16(v323);
                        if (!v323.i32[0])
                          break;
                        v322 += 8;
                        if (v322 >= v290)
                          goto LABEL_366;
                      }
                    }
                    goto LABEL_446;
                  }
                  if (v290 >= 4)
                  {
                    v302 = (v289->u32[0] | ((unint64_t)v289->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                    v303 = v291->i64[0];
                    v304 = v290 & 3;
                    v305 = (*(unsigned int *)((char *)v289->u32 + v304) | ((unint64_t)*(unsigned int *)((char *)v289->u32 + v304) << 16)) & 0xFFFF0000FFFFLL;
                    v306 = (v305 | (v305 << 8)) & 0xFF00FF00FF00FFLL;
                    v307 = *(uint64_t *)((char *)v291->i64 + 2 * v304);
                    if (((v302 | (v302 << 8)) & 0xFF00FF00FF00FFLL) != v303 || v306 != v307)
                      goto LABEL_446;
                    goto LABEL_366;
                  }
LABEL_507:
                  if (v290 < 2)
                  {
                    a3 = 32;
                    if (v290 != 1)
                      goto LABEL_366;
                    v254 = v289->u8[0];
                    v253 = v291->u16[0];
LABEL_385:
                    if (v253 != v254)
                      goto LABEL_446;
                    goto LABEL_366;
                  }
                  if (((v289->u16[0] | (v289->u16[0] << 8)) & 0xFF00FF) != v291->i32[0])
                    goto LABEL_446;
                  v298 = ((*(unsigned __int16 *)((char *)v289->u16 + (v290 & 1)) | (*(unsigned __int16 *)((char *)v289->u16 + (v290 & 1)) << 8)) & 0xFF00FF) == *(__int32 *)((char *)v291->i32 + 2 * (v290 & 1));
                }
                else
                {
                  if ((v240 & 0x400000) != 0)
                  {
                    if (!(_DWORD)v246)
                      goto LABEL_554;
                    if (*(_WORD *)v242 != *v245)
                      goto LABEL_446;
                    v280 = (int16x8_t *)(v242 + 2);
                    v281 = v246 - 1;
                    v282 = (uint8x8_t *)(v245 + 1);
                    if (v281 >= 8)
                    {
                      v318 = (uint16x8_t)vceqq_s16(*v280, (int16x8_t)vmovl_u8(*v282));
                      v318.i16[0] = vminvq_u16(v318);
                      if (v318.i32[0])
                      {
                        v319 = v281 & 7;
                        while (1)
                        {
                          v320 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v280 + 2 * v319), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v282 + v319)));
                          v320.i16[0] = vminvq_u16(v320);
                          if (!v320.i32[0])
                            break;
                          v319 += 8;
                          if (v319 >= v281)
                            goto LABEL_366;
                        }
                      }
LABEL_446:
                      ii = v234;
                      if (v235)
                      {
LABEL_447:
                        v5 = v817;
                        if (!v92)
                          goto LABEL_448;
                        goto LABEL_455;
                      }
LABEL_456:
                      *(_QWORD *)&v828 = v92;
                      *((_QWORD *)&v828 + 1) = (char *)v92 + 24 * v91;
                      v274 = (const WebCore::CSSParserContext *)(*(_QWORD *)(v47 + 8) + 32);
                      v275 = WTF::fastMalloc((WTF *)0x60);
                      WebCore::CSSVariableData::CSSVariableData(v275, (char **)&v828, v274);
                      v819 = 0;
                      v277 = *(_QWORD *)(v47 + 48);
                      *(_QWORD *)(v47 + 48) = v275;
                      if (v277)
                        WTF::RefCounted<WebCore::CSSVariableData>::deref(v277, v276);
                      WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref((uint64_t *)&v819, v276);
                      v278 = *(_DWORD **)(v47 + 48);
                      if (v278)
                      {
                        ++*v278;
                        WebCore::CSSPendingSubstitutionValue::resolveValue(WebCore::Style::BuilderState &,WebCore::CSSPropertyID)const::$_0::operator()<WTF::RefPtr<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>>((uint64_t)v4, (uint64_t)v278);
                        a1 = WTF::RefCounted<WebCore::CSSVariableData>::deref((uint64_t)v278, v279);
                      }
                      else
                      {
                        a1 = (unint64_t)WebCore::CSSPendingSubstitutionValue::resolveValue(WebCore::Style::BuilderState &,WebCore::CSSPropertyID)const::$_0::operator()<WTF::RefPtr<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>>((uint64_t)v4, 0);
                      }
                      goto LABEL_447;
                    }
LABEL_463:
                    if (v281 >= 4)
                    {
                      v283 = (v282->u32[0] | ((unint64_t)v282->u32[0] << 16)) & 0xFFFF0000FFFFLL;
                      v284 = v281 & 3;
                      v285 = (*(unsigned int *)((char *)v282->u32 + v284) | ((unint64_t)*(unsigned int *)((char *)v282->u32 + v284) << 16)) & 0xFFFF0000FFFFLL;
                      v286 = (v285 | (v285 << 8)) & 0xFF00FF00FF00FFLL;
                      v287 = *(uint64_t *)((char *)v280->i64 + 2 * v284);
                      if (((v283 | (v283 << 8)) & 0xFF00FF00FF00FFLL) != v280->i64[0] || v286 != v287)
                        goto LABEL_446;
                      goto LABEL_366;
                    }
                    if (v281 < 2)
                    {
                      a3 = 32;
                      if (v281 == 1)
                      {
                        v261 = v282->u8[0];
                        v260 = v280->u16[0];
LABEL_404:
                        if (v260 != v261)
                          goto LABEL_446;
                      }
                      goto LABEL_366;
                    }
                    if (((v282->u16[0] | (v282->u16[0] << 8)) & 0xFF00FF) != v280->i32[0])
                      goto LABEL_446;
                    v311 = v281 & 1;
                    v309 = (*(unsigned __int16 *)((char *)v282->u16 + v311) | (*(unsigned __int16 *)((char *)v282->u16 + v311) << 8)) & 0xFF00FF;
                    v310 = *(__int32 *)((char *)v280->i32 + 2 * v311);
                  }
                  else
                  {
                    if (!(_DWORD)v246)
                      goto LABEL_554;
                    if (*(unsigned __int16 *)v242 != *(unsigned __int16 *)v245)
                      goto LABEL_446;
                    v267 = v246 - 1;
                    if ((_DWORD)v246 == 1)
                      goto LABEL_366;
                    v268 = (int16x8_t *)(v242 + 2);
                    v269 = (int16x8_t *)(v245 + 2);
                    if ((_DWORD)v246 != 2)
                    {
                      switch(31 - __clz(v246 - 2))
                      {
                        case 0u:
LABEL_432:
                          v253 = v268->i32[0];
                          v254 = v269->i32[0];
                          goto LABEL_385;
                        case 1u:
LABEL_469:
                          if (v268->i32[0] != v269->i32[0])
                            goto LABEL_446;
                          v262 = *(_DWORD *)&v242[2 * v246 - 4];
                          v266 = &v245[2 * v246];
LABEL_423:
                          v263 = *((_DWORD *)v266 - 1);
LABEL_411:
                          if (v262 != v263)
                            goto LABEL_446;
                          goto LABEL_366;
                        case 2u:
LABEL_439:
                          if (v268->i64[0] != v269->i64[0])
                            goto LABEL_446;
                          v264 = *(_QWORD *)&v242[2 * v246 - 8];
                          v265 = &v245[2 * v246];
LABEL_419:
                          if (v264 != *((_QWORD *)v265 - 1))
                            goto LABEL_446;
                          goto LABEL_366;
                        case 3u:
LABEL_518:
                          v270 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v242[2 * v246 - 16], *(int16x8_t *)&v245[2 * v246 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(v242 + 2), *(int16x8_t *)(v245 + 2)));
                          v270.i16[0] = vminvq_u16(v270);
LABEL_442:
                          if (!v270.i32[0])
                            goto LABEL_446;
                          goto LABEL_366;
                        default:
                          v332 = (uint16x8_t)vceqq_s16(*v268, *v269);
                          v332.i16[0] = vminvq_u16(v332);
                          if (!v332.i32[0])
                            goto LABEL_446;
                          if (v267 < 8)
                            goto LABEL_366;
                          v333 = v267 & 7;
                          break;
                      }
                      while (1)
                      {
                        v334 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v268 + 2 * v333), *(int16x8_t *)((char *)v269 + 2 * v333));
                        v334.i16[0] = vminvq_u16(v334);
                        if (!v334.i32[0])
                          goto LABEL_446;
                        v333 += 8;
                        if (v333 >= v267)
                          goto LABEL_366;
                      }
                    }
LABEL_493:
                    if (!v267)
                      goto LABEL_554;
                    v309 = v268->u16[0];
                    v310 = v269->u16[0];
                  }
                  v298 = v309 == v310;
                }
LABEL_496:
                a3 = 32;
                if (!v298)
                  goto LABEL_446;
                goto LABEL_366;
              case 16:
                v260 = *(_DWORD *)(v5 + 24 * ii + 16);
                v261 = *((_DWORD *)v92 + 6 * ii + 4);
                goto LABEL_404;
              default:
                goto LABEL_366;
            }
          }
        }
      }
      else
      {
        v224 = HIDWORD(v820) + 1;
        v225 = (char *)v819 + 24 * HIDWORD(v820);
        v226 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)v225 = *(_OWORD *)a3;
        *((_QWORD *)v225 + 2) = v226;
        HIDWORD(v820) = v224;
        v84 = *((_QWORD *)&v828 + 1);
        a1 = v828;
        if ((_QWORD)v828 == *((_QWORD *)&v828 + 1))
          goto LABEL_352;
      }
    }
  }
  v66 = *(_QWORD *)v48;
  while (1)
  {
    v67 = *(_QWORD *)(v65 + 16);
    if (v67)
    {
      v68 = 0;
      v69 = *(_DWORD *)(v67 - 8);
      v70 = (*(_DWORD *)(v66 + 16) >> 8) & v69;
      v71 = *(_QWORD *)(v67 + 16 * v70);
      if (v71)
      {
        while (v71 == -1 || v71 != v66)
        {
          v70 = (++v68 + (_DWORD)v70) & v69;
          v71 = *(_QWORD *)(v67 + 16 * v70);
          if (!v71)
            goto LABEL_78;
        }
        v73 = *(_QWORD *)(v67 + 16 * v70 + 8);
        if (v73)
          break;
      }
    }
LABEL_78:
    v65 = *(_QWORD *)(v65 + 8);
    if (!v65)
      goto LABEL_79;
  }
LABEL_249:
  if (*(_DWORD *)(v73 + 72) != 2)
    goto LABEL_91;
  v92 = *(WTF **)(v73 + 24);
  v171 = *(_DWORD *)v92 + 1;
  *(_DWORD *)v92 = v171;
  a1 = *(_QWORD *)(v47 + 48);
  if ((WTF *)a1 != v92)
  {
    if (a1)
    {
      a1 = WebCore::CSSVariableData::operator==(a1, (uint64_t)v92);
      if ((a1 & 1) != 0)
      {
LABEL_256:
        v173 = *(int **)(v47 + 48);
        *(_QWORD *)(v47 + 48) = v92;
        if (!v173)
          goto LABEL_448;
        v171 = *v173;
        v92 = (WTF *)v173;
        goto LABEL_252;
      }
      v171 = *(_DWORD *)v92;
    }
    *(_DWORD *)v92 = v171 + 1;
    WebCore::CSSPendingSubstitutionValue::resolveValue(WebCore::Style::BuilderState &,WebCore::CSSPropertyID)const::$_0::operator()<WTF::RefPtr<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>>((uint64_t)v4, (uint64_t)v92);
    a1 = WTF::RefCounted<WebCore::CSSVariableData>::deref((uint64_t)v92, v202);
    goto LABEL_256;
  }
  *(_QWORD *)(v47 + 48) = v92;
LABEL_252:
  v172 = v171 - 1;
  if (v172)
  {
    *(_DWORD *)v92 = v172;
    goto LABEL_448;
  }
  v174 = (WTF::StringImpl *)*((_QWORD *)v92 + 9);
  *((_QWORD *)v92 + 9) = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
      WTF::StringImpl::destroy(v174, a2);
    else
      *(_DWORD *)v174 -= 2;
  }
  v175 = (WTF::StringImpl *)*((_QWORD *)v92 + 4);
  *((_QWORD *)v92 + 4) = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
      WTF::StringImpl::destroy(v175, a2);
    else
      *(_DWORD *)v175 -= 2;
  }
  v176 = (WTF *)*((_QWORD *)v92 + 2);
  if (v176)
  {
    *((_QWORD *)v92 + 2) = 0;
    *((_DWORD *)v92 + 6) = 0;
    WTF::fastFree(v176, a2);
  }
  v177 = (WTF::StringImpl *)*((_QWORD *)v92 + 1);
  *((_QWORD *)v92 + 1) = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
      WTF::StringImpl::destroy(v177, a2);
    else
      *(_DWORD *)v177 -= 2;
  }
LABEL_455:
  a1 = WTF::fastFree(v92, a2);
LABEL_448:
  v271 = v4[9];
  if (!(_DWORD)v271)
    goto LABEL_362;
  v272 = (unint64_t *)(*((_QWORD *)v4 + 3) + 8);
  v273 = 16 * v271;
  while ((*(_WORD *)(v272 - 1) & 0x3FF) != (_DWORD)v5)
  {
    v272 += 2;
    v273 -= 16;
    if (!v273)
      goto LABEL_362;
  }
  a1 = *v272;
  if (*v272)
    goto LABEL_555;
LABEL_362:
  v4 = &WebCore::staticCSSValuePool[3100];
  dword_1ECE8BC18 += 2;
  v86 = *(WTF::StringImpl **)(ii + 15480);
  v87 = v5 - 354;
  if ((v5 - 354) <= 0x5A)
    goto LABEL_560;
  while (1)
  {
LABEL_561:
    v341 = *((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16);
    if ((v341 & 0x3F800) != 0)
    {
      if ((_DWORD)v5 != 1)
      {
        v344 = 0;
        v343 = 0;
        v345 = 0;
        goto LABEL_569;
      }
      if ((v341 & 0x3F800) != 0xE800)
        goto LABEL_789;
      if (v4[18] == 1)
        v342 = *((_WORD *)v4 + 12);
      else
        v342 = 0;
      v500 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(ii + 15488) + 1328) + 296);
      v501 = *(_QWORD *)(v500 + 8);
      if (!v501)
        goto LABEL_787;
      a2 = v86;
      a1 = v5;
      v633 = ii;
      v634 = 0;
      v635 = v4;
      v636 = *((_QWORD *)v4 + 1);
      for (i = *(_DWORD *)(v636 + 16) >> 8; ; i = ++v634 + v638)
      {
        v638 = i & *(_DWORD *)(v501 - 8);
        v639 = *(_QWORD *)(v501 + 16 * v638);
        if (v639 != -1)
        {
          v4 = v635;
          ii = v633;
          v5 = a1;
          v86 = a2;
          if (!v639)
            goto LABEL_787;
          if (v639 == v636)
            break;
        }
      }
      v645 = *(_QWORD *)(v501 + 16 * v638 + 8);
      v4 = v635;
      ii = v633;
      v5 = a1;
      v86 = a2;
      if (v645)
      {
        v343 = v645;
        v344 = v635;
      }
      else
      {
LABEL_787:
        v502 = *(_QWORD *)(v500 + 16);
        if (v502)
        {
          v640 = 0;
          v641 = *((_QWORD *)v4 + 1);
          for (j = *(_DWORD *)(v641 + 16) >> 8; ; j = v640 + v643)
          {
            v643 = j & *(_DWORD *)(v502 - 8);
            v644 = *(_QWORD *)(v502 + 16 * v643);
            if (v644 != -1)
            {
              if (!v644)
              {
                v343 = 0;
                goto LABEL_1104;
              }
              if (v644 == v641)
                break;
            }
            ++v640;
          }
          v343 = *(_QWORD *)(v502 + 16 * v643 + 8);
LABEL_1104:
          v344 = v4;
        }
        else
        {
          v343 = 0;
          v344 = v4;
        }
      }
    }
    else
    {
      if ((v4[1] & 0x7F) == 0x50)
        v342 = *((_WORD *)v4 + 4);
      else
        v342 = 0;
      if ((_DWORD)v5 == 1)
      {
LABEL_789:
        __break(0xC471u);
        JUMPOUT(0x1944C6EE4);
      }
      v343 = 0;
      v344 = 0;
    }
    if (v342 == 1)
      goto LABEL_568;
    v345 = v342 == 2;
    if (v342 != 4)
    {
      if (v342 != 5)
      {
        if (v342 == 3)
          goto LABEL_589;
        goto LABEL_569;
      }
      if (*(_BYTE *)(ii + 15800))
        goto LABEL_578;
      v349 = *(_QWORD *)(ii + 15768);
      if (!*(_WORD *)(v349 + 4))
      {
        v478 = *(unsigned __int8 *)(v349 + 2);
        switch(v478)
        {
          case 1:
            goto LABEL_589;
          case 4:
            v479 = 2;
            break;
          case 2:
            v479 = 1;
            break;
          default:
            __break(0xC471u);
            JUMPOUT(0x1944C7E88);
        }
        v554 = (uint64_t *)(ii + 15456);
        v555 = *(_QWORD *)(ii + 15456);
        v818 = v5;
        v803 = v343;
        if (v555
          || (v582 = v344,
              a1 = WTF::HashTable<std::tuple<unsigned int,unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>>::rehash((uint64_t *)(ii + 15456), 8u, 0), v344 = v582, (v555 = *v554) != 0))
        {
          v556 = *(_DWORD *)(v555 - 8);
        }
        else
        {
          v556 = 0;
        }
        v557 = 0;
        v558 = 9 * ((~(v479 << 15) + v479) ^ ((~(v479 << 15) + v479) >> 10));
        v559 = (v558 ^ (v558 >> 6)) + ~((v558 ^ (v558 >> 6)) << 11);
        v560 = (0xD7862706ELL * (unint64_t)(277951225 * (v559 ^ HIWORD(v559)) - 1146155350)) >> 4;
        for (k = 1; ; ++k)
        {
          v562 = v560 & v556;
          v366 = (_QWORD *)(v555 + 24 * v562);
          v563 = *(_DWORD *)v366;
          if (!*v366 && !*((_DWORD *)v366 + 2))
            break;
          if (v563 == v479 && !*(_QWORD *)((char *)v366 + 4))
            goto LABEL_679;
          if (v563 == -1)
            v557 = (_QWORD *)(v555 + 24 * v562);
          LODWORD(v560) = k + v562;
        }
        v564 = v344;
        v565 = v4;
        if (v557)
        {
          *v557 = 0;
          v557[1] = 0;
          v557[2] = 0;
          --*(_DWORD *)(*v554 - 16);
          v366 = v557;
        }
        *((_DWORD *)v366 + 1) = 0;
        *((_DWORD *)v366 + 2) = 0;
        *(_DWORD *)v366 = v479;
        v566 = WTF::fastMalloc((WTF *)0x3C60);
        v567 = v566;
        v568 = (_DWORD *)(v566 + 15440);
        *(_QWORD *)v566 = *(_QWORD *)ii;
        *(_BYTE *)(v566 + 8) = *(_BYTE *)(ii + 8);
        *(_BYTE *)(v566 + 9) = v479;
        *(_WORD *)(v566 + 10) = 0;
        *(_DWORD *)(v566 + 12) = 0;
        *(_BYTE *)(v566 + 16) = 0;
        *(_BYTE *)(v566 + 40) = 0;
        if (*(_BYTE *)(ii + 40))
        {
          *(_QWORD *)(v566 + 16) = *(_QWORD *)(ii + 16);
          WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::HashTable((uint64_t **)(v566 + 24), (uint64_t *)(ii + 24));
          v569 = *(_WORD *)(ii + 32);
          *(_BYTE *)(v567 + 34) = *(_BYTE *)(ii + 34);
          *(_WORD *)(v567 + 32) = v569;
          *(_BYTE *)(v567 + 40) = 1;
        }
        bzero((void *)(v567 + 14736), 0x2C0uLL);
        *v568 = 23003594;
        *(_QWORD *)(v567 + 15448) = 0;
        WebCore::Style::PropertyCascade::buildCascade((WebCore::Style::PropertyCascade *)v567, v570, v571);
        a1 = v366[2];
        v366[2] = v567;
        if (a1)
        {
          WebCore::Style::PropertyCascade::~PropertyCascade((WebCore::Style::PropertyCascade *)a1, a2);
          a1 = WTF::fastFree(v572, v573);
        }
        v574 = *v554;
        v4 = v565;
        if (*v554)
          v575 = *(_DWORD *)(v574 - 12) + 1;
        else
          v575 = 1;
        v344 = v564;
        *(_DWORD *)(v574 - 12) = v575;
        v576 = *v554;
        if (*v554)
          v577 = *(_DWORD *)(v576 - 12);
        else
          v577 = 0;
        v578 = (*(_DWORD *)(v576 - 16) + v577);
        v579 = *(unsigned int *)(v576 - 4);
        if (v579 > 0x400)
        {
          if (v579 <= 2 * v578)
          {
LABEL_919:
            v580 = (_DWORD)v579 << (6 * *(_DWORD *)(v576 - 12) >= (2 * v579));
            goto LABEL_920;
          }
        }
        else if (3 * v579 <= 4 * v578)
        {
          if ((_DWORD)v579)
            goto LABEL_919;
          v580 = 8;
LABEL_920:
          a1 = WTF::HashTable<std::tuple<unsigned int,unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>>::rehash((uint64_t *)(ii + 15456), v580, v366);
          v366 = (_QWORD *)a1;
          v344 = v564;
        }
LABEL_679:
        v422 = v366[2];
        if (!v422)
          goto LABEL_845;
        goto LABEL_680;
      }
      v803 = v343;
      v818 = v5;
      v350 = *(unsigned __int8 *)(v349 + 2);
      v351 = *(char *)(v349 + 3);
      v5 = (unsigned __int16)(*(_WORD *)(v349 + 4) + (char)(*(_BYTE *)(v349 + 6) - 1));
      v352 = (uint64_t *)(ii + 15456);
      v353 = *(_QWORD *)(ii + 15456);
      if (v353
        || (v499 = v344,
            a1 = WTF::HashTable<std::tuple<unsigned int,unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>>::rehash((uint64_t *)(ii + 15456), 8u, 0), v344 = v499, (v353 = *v352) != 0))
      {
        v354 = *(_DWORD *)(v353 - 8);
      }
      else
      {
        v354 = 0;
      }
      v355 = 0;
      v356 = 9 * ((~(v350 << 15) + v350) ^ ((~(v350 << 15) + v350) >> 10));
      v357 = (v356 ^ (v356 >> 6)) + ~((v356 ^ (v356 >> 6)) << 11);
      v358 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(v351, v5), (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(v351, v5), 0xFuLL)));
      v359 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v358, 0xAuLL), v358), (int32x2_t)0x900000009);
      v360 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v359, 6uLL), v359);
      v361 = (int8x8_t)vadd_s32(v360, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v360, 0xBuLL)));
      v362 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v361, 0x10uLL), v361), (int32x2_t)0x109132F905AC73FELL);
      v363 = (0xD7862706ELL
            * (unint64_t)(277951225 * (v357 ^ HIWORD(v357))
                               + 95187966
                               * ((0xD7862706ELL
                                               * (unint64_t)vadd_s32(v362, vdup_lane_s32(v362, 1)).u32[0]) >> 4))) >> 4;
      for (m = 1; ; ++m)
      {
        v365 = v363 & v354;
        v366 = (_QWORD *)(v353 + 24 * v365);
        v367 = *(_DWORD *)v366;
        if (!*v366 && !*((_DWORD *)v366 + 2))
          break;
        if (v367 == v350 && *((_DWORD *)v366 + 1) == v351 && *((_DWORD *)v366 + 2) == (_DWORD)v5)
          goto LABEL_679;
        if (v367 == -1)
          v355 = (_QWORD *)(v353 + 24 * v365);
        LODWORD(v363) = m + v365;
      }
      v801 = v86;
      v802 = v344;
      v480 = ii;
      v797 = v4;
      if (v355)
      {
        *v355 = 0;
        v355[1] = 0;
        v355[2] = 0;
        --*(_DWORD *)(*v352 - 16);
        v366 = v355;
      }
      *(_DWORD *)v366 = v350;
      *((_DWORD *)v366 + 1) = v351;
      *((_DWORD *)v366 + 2) = v5;
      v481 = WTF::fastMalloc((WTF *)0x3C60);
      v482 = (unsigned __int8 *)v481;
      ii = v481 + 15220;
      v483 = *(unsigned __int8 *)(v349 + 2);
      v484 = *(unsigned __int8 *)(v349 + 3) | 0x100;
      *(_QWORD *)v481 = *(_QWORD *)v480;
      *(_BYTE *)(v481 + 8) = *(_BYTE *)(v480 + 8);
      *(_BYTE *)(v481 + 9) = v483;
      *(_WORD *)(v481 + 10) = v484;
      *(_DWORD *)(v481 + 12) = v5 | 0x10000;
      *(_BYTE *)(v481 + 16) = 0;
      *(_BYTE *)(v481 + 40) = 0;
      if (*(_BYTE *)(v480 + 40))
      {
        *(_QWORD *)(v481 + 16) = *(_QWORD *)(v480 + 16);
        WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::HashTable((uint64_t **)(v481 + 24), (uint64_t *)(v480 + 24));
        v485 = *(_WORD *)(v480 + 32);
        v482[34] = *(_BYTE *)(v480 + 34);
        *((_WORD *)v482 + 16) = v485;
        v482[40] = 1;
        v483 = v482[9];
      }
      bzero(v482 + 14736, 0x2C0uLL);
      *(_DWORD *)(ii + 220) = 23003594;
      *((_QWORD *)v482 + 1931) = 0;
      if (v483)
      {
        v488 = *(unsigned int *)(*(_QWORD *)v482 + 20);
        if ((_DWORD)v488)
        {
          v530 = 0;
          v531 = *(uint64_t **)(*(_QWORD *)v482 + 8);
          v532 = 16 * v488;
          do
          {
            a1 = WebCore::Style::PropertyCascade::addMatch((uint64_t)v482, v531, 1u, 0, v486, v487);
            v530 |= a1;
            v531 += 2;
            v532 -= 16;
          }
          while (v532);
          v489 = (v530 & 1) != 0;
        }
        else
        {
          v489 = 0;
        }
        if (v482[9] >= 2u)
        {
          v533 = *(unsigned int *)(*(_QWORD *)v482 + 36);
          if ((_DWORD)v533)
          {
            v534 = 0;
            v535 = *(uint64_t **)(*(_QWORD *)v482 + 24);
            v5 = 16 * v533;
            do
            {
              a1 = WebCore::Style::PropertyCascade::addMatch((uint64_t)v482, v535, 2u, 0, v486, v487);
              v534 |= a1;
              v535 += 2;
              v5 -= 16;
            }
            while (v5);
            if ((v534 & 1) != 0)
              v489 |= 2u;
          }
          if (v482[9] >= 4u)
          {
            v536 = *(unsigned int *)(*(_QWORD *)v482 + 52);
            if ((_DWORD)v536)
            {
              v537 = 0;
              v538 = *(uint64_t **)(*(_QWORD *)v482 + 40);
              v5 = 16 * v536;
              do
              {
                a1 = WebCore::Style::PropertyCascade::addMatch((uint64_t)v482, v538, 4u, 0, v486, v487);
                v537 |= a1;
                v538 += 2;
                v5 -= 16;
              }
              while (v5);
              if ((v537 & 1) != 0)
                v489 |= 4u;
            }
          }
        }
        if (v489)
        {
          if ((v489 & 4) != 0)
            a1 = (unint64_t)WebCore::Style::PropertyCascade::addImportantMatches(v482, (void *)4, v486, v487);
          if ((v489 & 2) != 0)
            a1 = (unint64_t)WebCore::Style::PropertyCascade::addImportantMatches(v482, (void *)2, v486, v487);
          if ((v489 & 1) != 0)
            a1 = (unint64_t)WebCore::Style::PropertyCascade::addImportantMatches(v482, (void *)1, v486, v487);
        }
      }
      v539 = *(unsigned __int16 *)(ii + 220);
      v540 = *(unsigned __int16 *)(ii + 222);
      a2 = (WTF::StringImpl *)ii;
      v4 = v797;
      if (v539 <= v540)
      {
        a2 = (WTF::StringImpl *)ii;
        do
        {
          v541 = (unsigned __int16)v539 - 351;
          if (v541 >= 0x6C)
            goto LABEL_554;
          if (*(_DWORD *)&v482[4 * v541 + 14784])
          {
            *(_WORD *)a2 = v539;
            a2 = (WTF::StringImpl *)((char *)a2 + 2);
            LOWORD(v540) = *(_WORD *)(ii + 222);
          }
          LOWORD(v539) = v539 + 1;
        }
        while ((unsigned __int16)v539 <= (unsigned __int16)v540);
      }
      v542 = 126 - 2 * __clz((uint64_t)((uint64_t)a2 - ii) >> 1);
      *((_DWORD *)v482 + 3859) = ((unint64_t)a2 - ii) >> 1;
      *(_QWORD *)&v828 = v482;
      if (a2 == (WTF::StringImpl *)ii)
        v543 = 0;
      else
        v543 = v542;
      std::__introsort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *,false>(ii, (unsigned __int16 *)a2, (uint64_t *)&v828, v543, 1);
      a1 = v366[2];
      v366[2] = v482;
      if (a1)
      {
        WebCore::Style::PropertyCascade::~PropertyCascade((WebCore::Style::PropertyCascade *)a1, a2);
        a1 = WTF::fastFree(v544, v545);
      }
      v546 = *v352;
      ii = v480;
      if (*v352)
        v547 = *(_DWORD *)(v546 - 12) + 1;
      else
        v547 = 1;
      v86 = v801;
      v344 = v802;
      *(_DWORD *)(v546 - 12) = v547;
      v548 = *v352;
      if (*v352)
        v549 = *(_DWORD *)(v548 - 12);
      else
        v549 = 0;
      v550 = (*(_DWORD *)(v548 - 16) + v549);
      v551 = *(unsigned int *)(v548 - 4);
      if (v551 > 0x400)
      {
        if (v551 > 2 * v550)
          goto LABEL_679;
      }
      else
      {
        if (3 * v551 > 4 * v550)
          goto LABEL_679;
        if (!(_DWORD)v551)
        {
          v552 = 8;
          goto LABEL_883;
        }
      }
      v552 = (_DWORD)v551 << (6 * *(_DWORD *)(v548 - 12) >= (2 * v551));
LABEL_883:
      a1 = WTF::HashTable<std::tuple<unsigned int,unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>>::rehash(v352, v552, v366);
      v529 = a1;
      goto LABEL_844;
    }
    v347 = *(unsigned __int8 *)(*(_QWORD *)(ii + 15768) + 2);
    switch(v347)
    {
      case 1:
        goto LABEL_589;
      case 4:
        v348 = 2;
        break;
      case 2:
        v348 = 1;
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1944C7D2CLL);
    }
    v413 = *(_QWORD *)(ii + 15456);
    v818 = v5;
    v803 = v343;
    if (v413)
      goto LABEL_670;
    v444 = v344;
    a1 = WTF::fastZeroedMalloc((WTF *)0xD0);
    v344 = v444;
    *(_QWORD *)(ii + 15456) = a1 + 16;
    *(_DWORD *)(a1 + 12) = 8;
    *(_DWORD *)(*(_QWORD *)(ii + 15456) - 8) = 7;
    *(_DWORD *)(*(_QWORD *)(ii + 15456) - 16) = 0;
    *(_DWORD *)(*(_QWORD *)(ii + 15456) - 12) = 0;
    v413 = *(_QWORD *)(ii + 15456);
    if (v413)
LABEL_670:
      v414 = *(_DWORD *)(v413 - 8);
    else
      v414 = 0;
    v415 = 0;
    v416 = 9 * ((~(v348 << 15) + v348) ^ ((~(v348 << 15) + v348) >> 10));
    v417 = (v416 ^ (v416 >> 6)) + ~((v416 ^ (v416 >> 6)) << 11);
    v418 = (0xD7862706ELL * (unint64_t)(277951225 * (v417 ^ HIWORD(v417)) - 1146155350)) >> 4;
    for (n = 1; ; ++n)
    {
      v420 = v418 & v414;
      v366 = (_QWORD *)(v413 + 24 * v420);
      v421 = *(_DWORD *)v366;
      if (!*v366 && !*((_DWORD *)v366 + 2))
        break;
      if (v421 == v348 && !*(_QWORD *)((char *)v366 + 4))
        goto LABEL_679;
      if (v421 == -1)
        v415 = (_QWORD *)(v413 + 24 * v420);
      LODWORD(v418) = n + v420;
    }
    v802 = v344;
    if (v415)
    {
      *v415 = 0;
      v415[1] = 0;
      v415[2] = 0;
      --*(_DWORD *)(*(_QWORD *)(ii + 15456) - 16);
      v366 = v415;
    }
    *((_DWORD *)v366 + 1) = 0;
    *((_DWORD *)v366 + 2) = 0;
    *(_DWORD *)v366 = v348;
    v432 = WTF::fastMalloc((WTF *)0x3C60);
    v433 = (unsigned __int8 *)v432;
    *(_QWORD *)v432 = *(_QWORD *)ii;
    *(_BYTE *)(v432 + 8) = *(_BYTE *)(ii + 8);
    *(_BYTE *)(v432 + 9) = v348;
    *(_WORD *)(v432 + 10) = 0;
    *(_DWORD *)(v432 + 12) = 0;
    *(_BYTE *)(v432 + 16) = 0;
    *(_BYTE *)(v432 + 40) = 0;
    if (*(_BYTE *)(ii + 40))
    {
      *(_QWORD *)(v432 + 16) = *(_QWORD *)(ii + 16);
      *(_QWORD *)(v432 + 24) = 0;
      v434 = *(_QWORD *)(ii + 24);
      if (!v434 || (v435 = *(unsigned int *)(v434 - 12), !(_DWORD)v435))
      {
LABEL_696:
        v436 = v4;
        v437 = *(_WORD *)(ii + 32);
        v433[34] = *(_BYTE *)(ii + 34);
        *((_WORD *)v433 + 16) = v437;
        v433[40] = 1;
        v438 = v433[9];
        goto LABEL_697;
      }
      v503 = (v435 - 1) | ((v435 - 1) >> 1) | ((((_DWORD)v435 - 1) | ((v435 - 1) >> 1)) >> 2);
      v504 = v503 | (v503 >> 4) | ((v503 | (v503 >> 4)) >> 8);
      v505 = (v504 | HIWORD(v504)) + 1;
      if (v505 > 0x400)
      {
        if (v505 > 2 * v435)
          goto LABEL_989;
      }
      else if (3 * v505 > 4 * v435)
      {
LABEL_794:
        v506 = (double)v435;
        v507 = (double)v505 * 0.604166667;
        v508 = v4;
        goto LABEL_795;
      }
      LODWORD(v505) = 2 * v505;
      if (v505 <= 0x400)
        goto LABEL_794;
LABEL_989:
      v508 = v4;
      v506 = (double)v435;
      v507 = (double)v505 * 0.416666667;
LABEL_795:
      if (v507 <= v506)
        LODWORD(v505) = 2 * v505;
      if (v505 <= 8)
        v509 = 8;
      else
        v509 = v505;
      v510 = WTF::fastZeroedMalloc((WTF *)(16 * v509 + 16));
      *((_QWORD *)v433 + 3) = v510 + 16;
      *(_DWORD *)(v510 + 12) = v509;
      *(_DWORD *)(*((_QWORD *)v433 + 3) - 8) = v509 - 1;
      *(_DWORD *)(*((_QWORD *)v433 + 3) - 12) = v435;
      *(_DWORD *)(*((_QWORD *)v433 + 3) - 16) = 0;
      v511 = ii;
      v512 = *(_QWORD *)(ii + 24);
      if (v512)
      {
        v513 = *(unsigned int *)(v512 - 4);
        v5 = v512 + 16 * v513;
        if (*(_DWORD *)(v512 - 12))
        {
          if ((_DWORD)v513)
          {
            v514 = 16 * v513;
            while (1)
            {
              v515 = *(unsigned int *)(v512 + 8);
              if ((_DWORD)v515 || *(_WORD *)v512 != 0)
              {
                if ((_DWORD)v515 == -1)
                  goto LABEL_1377;
                *(_QWORD *)&v828 = &v819;
                if (!((unsigned int (*)(__int128 *, unint64_t))off_1E344FF58[v515])(&v828, v512))
                  break;
              }
              v512 += 16;
              v514 -= 16;
              if (!v514)
              {
                v512 = v5;
                break;
              }
            }
            v517 = v512;
            v512 = *(_QWORD *)(v511 + 24);
          }
          else
          {
            v517 = v512;
          }
          goto LABEL_814;
        }
        v517 = v512 + 16 * v513;
      }
      else
      {
        v517 = 0;
        v513 = 0;
      }
      v5 = v512 + 16 * v513;
LABEL_814:
      v4 = v508;
      if (v512)
        v518 = v512 + 16 * *(unsigned int *)(v512 - 4);
      else
        v518 = 0;
      for (ii = v511; v517 != v518; ii = v511)
      {
        v519 = *((_QWORD *)v433 + 3);
        if (v519)
          v520 = *(_DWORD *)(v519 - 8);
        else
          v520 = 0;
        v521 = *(unsigned int *)(v517 + 8);
        if ((_DWORD)v521 == -1)
          goto LABEL_1377;
        *(_QWORD *)&v828 = &v819;
        v522 = ((uint64_t (*)(__int128 *, unint64_t))off_1E344FF88[v521])(&v828, v517) & v520;
        v523 = (unsigned __int16 *)(v519 + 16 * v522);
        if (*((_DWORD *)v523 + 2))
          v524 = 0;
        else
          v524 = *v523 == 0;
        if (!v524)
        {
          v611 = 1;
          do
          {
            v522 = (v522 + v611) & v520;
            v523 = (unsigned __int16 *)(v519 + 16 * v522);
            ++v611;
            if (*((_DWORD *)v523 + 2))
              v612 = 0;
            else
              v612 = *v523 == 0;
          }
          while (!v612);
        }
        v525 = *(unsigned int *)(v517 + 8);
        if ((_DWORD)v525 == -1)
        {
          *((_DWORD *)v523 + 2) = -1;
        }
        else
        {
          *(_QWORD *)&v828 = v523;
          ((void (*)(__int128 *))off_1E344FFA8[v525])(&v828);
        }
        v526 = v517 + 16;
        v517 = v5;
        if (v526 != v5)
        {
          v517 = v5;
          while (1)
          {
            v527 = *(unsigned int *)(v526 + 8);
            if ((_DWORD)v527 || *(_WORD *)v526 != 0)
            {
              if ((_DWORD)v527 == -1)
                goto LABEL_1377;
              *(_QWORD *)&v828 = &v819;
              v517 = v5;
              if (!((unsigned int (*)(__int128 *, unint64_t))off_1E344FF58[v527])(&v828, v526))
                break;
            }
            v526 += 16;
            if (v526 == v517)
              goto LABEL_839;
          }
          v517 = v526;
        }
LABEL_839:
        ;
      }
      goto LABEL_696;
    }
    v436 = v4;
    v438 = 1;
LABEL_697:
    v439 = (WTF::StringImpl *)(v433 + 15220);
    bzero(v433 + 14736, 0x2C0uLL);
    *((_DWORD *)v433 + 3860) = 23003594;
    *((_QWORD *)v433 + 1931) = 0;
    if (v438)
    {
      v442 = *(unsigned int *)(*(_QWORD *)v433 + 20);
      if ((_DWORD)v442)
      {
        v5 = ii;
        v446 = 0;
        v447 = *(uint64_t **)(*(_QWORD *)v433 + 8);
        v448 = 16 * v442;
        do
        {
          a1 = WebCore::Style::PropertyCascade::addMatch((uint64_t)v433, v447, 1u, 0, v440, v441);
          v446 |= a1;
          v447 += 2;
          v448 -= 16;
        }
        while (v448);
        v443 = (v446 & 1) != 0;
        ii = v5;
      }
      else
      {
        v443 = 0;
      }
      if (v433[9] >= 2u)
      {
        v449 = *(unsigned int *)(*(_QWORD *)v433 + 36);
        if ((_DWORD)v449)
        {
          v450 = ii;
          v451 = 0;
          v452 = *(uint64_t **)(*(_QWORD *)v433 + 24);
          v5 = 16 * v449;
          do
          {
            a1 = WebCore::Style::PropertyCascade::addMatch((uint64_t)v433, v452, 2u, 0, v440, v441);
            v451 |= a1;
            v452 += 2;
            v5 -= 16;
          }
          while (v5);
          if ((v451 & 1) != 0)
            v443 |= 2u;
          ii = v450;
        }
        if (v433[9] >= 4u)
        {
          v453 = *(unsigned int *)(*(_QWORD *)v433 + 52);
          if ((_DWORD)v453)
          {
            v454 = ii;
            v455 = 0;
            v456 = *(uint64_t **)(*(_QWORD *)v433 + 40);
            v5 = 16 * v453;
            do
            {
              a1 = WebCore::Style::PropertyCascade::addMatch((uint64_t)v433, v456, 4u, 0, v440, v441);
              v455 |= a1;
              v456 += 2;
              v5 -= 16;
            }
            while (v5);
            if ((v455 & 1) != 0)
              v443 |= 4u;
            ii = v454;
          }
        }
      }
      if (v443)
      {
        if ((v443 & 4) != 0)
          a1 = (unint64_t)WebCore::Style::PropertyCascade::addImportantMatches(v433, (void *)4, v440, v441);
        if ((v443 & 2) != 0)
          a1 = (unint64_t)WebCore::Style::PropertyCascade::addImportantMatches(v433, (void *)2, v440, v441);
        if ((v443 & 1) != 0)
          a1 = (unint64_t)WebCore::Style::PropertyCascade::addImportantMatches(v433, (void *)1, v440, v441);
      }
    }
    v457 = *((unsigned __int16 *)v433 + 7720);
    v458 = *((unsigned __int16 *)v433 + 7721);
    a2 = (WTF::StringImpl *)(v433 + 15220);
    v4 = v436;
    if (v457 <= v458)
    {
      a2 = (WTF::StringImpl *)(v433 + 15220);
      do
      {
        v459 = (unsigned __int16)v457 - 351;
        if (v459 >= 0x6C)
          goto LABEL_554;
        if (*(_DWORD *)&v433[4 * v459 + 14784])
        {
          *(_WORD *)a2 = v457;
          a2 = (WTF::StringImpl *)((char *)a2 + 2);
          LOWORD(v458) = *((_WORD *)v433 + 7721);
        }
        LOWORD(v457) = v457 + 1;
      }
      while ((unsigned __int16)v457 <= (unsigned __int16)v458);
    }
    v460 = 126 - 2 * __clz((a2 - v439) >> 1);
    *((_DWORD *)v433 + 3859) = (unint64_t)(a2 - v439) >> 1;
    *(_QWORD *)&v828 = v433;
    if (a2 == v439)
      v461 = 0;
    else
      v461 = v460;
    a1 = std::__introsort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *,false>((unint64_t)(v433 + 15220), (unsigned __int16 *)a2, (uint64_t *)&v828, v461, 1);
    v462 = v366[2];
    v366[2] = v433;
    if (v462)
    {
      v463 = *(_QWORD *)(v462 + 15448);
      if (v463)
      {
        v598 = *(unsigned int *)(v463 - 4);
        if ((_DWORD)v598)
        {
          v599 = *(WTF::StringImpl ***)(v462 + 15448);
          do
          {
            v600 = *v599;
            if (*v599 != (WTF::StringImpl *)-1)
            {
              if (v600)
              {
                *v599 = 0;
                if (*(_DWORD *)v600 == 2)
                  WTF::StringImpl::destroy(v600, a2);
                else
                  *(_DWORD *)v600 -= 2;
              }
              else
              {
                *v599 = 0;
              }
            }
            v599 += 5;
            --v598;
          }
          while (v598);
        }
        WTF::fastFree((WTF *)(v463 - 16), a2);
        v4 = v436;
      }
      if (*(_BYTE *)(v462 + 40))
      {
        v464 = *(_QWORD *)(v462 + 24);
        if (v464)
        {
          v583 = *(unsigned int *)(v464 - 4);
          if ((_DWORD)v583)
          {
            v584 = *(_QWORD *)(v462 + 24);
            do
            {
              v585 = *(unsigned int *)(v584 + 8);
              if ((_DWORD)v585 == -1)
                goto LABEL_1377;
              *(_QWORD *)&v828 = &v819;
              if ((((uint64_t (*)(__int128 *, uint64_t))off_1E344FF58[v585])(&v828, v584) & 1) == 0)
              {
                v586 = *(unsigned int *)(v584 + 8);
                if ((_DWORD)v586 != -1)
                  ((void (*)(__int128 *, uint64_t))off_1E344FF78[v586])(&v828, v584);
                *(_DWORD *)(v584 + 8) = -1;
              }
              v584 += 16;
              --v583;
            }
            while (v583);
          }
          WTF::fastFree((WTF *)(v464 - 16), a2);
        }
      }
      a1 = WTF::fastFree((WTF *)v462, a2);
    }
    v465 = *(_QWORD *)(ii + 15456);
    v344 = v802;
    if (v465)
      v466 = *(_DWORD *)(v465 - 12) + 1;
    else
      v466 = 1;
    *(_DWORD *)(v465 - 12) = v466;
    v467 = *(_QWORD *)(ii + 15456);
    if (v467)
      v468 = *(_DWORD *)(v467 - 12);
    else
      v468 = 0;
    v469 = (*(_DWORD *)(v467 - 16) + v468);
    v470 = *(unsigned int *)(v467 - 4);
    v810 = *(_QWORD *)(ii + 15456);
    if (v470 > 0x400)
    {
      if (v470 > 2 * v469)
        goto LABEL_679;
LABEL_746:
      v795 = (WTF *)(v467 - 16);
      v471 = v4;
      v472 = *(_DWORD *)(v467 - 12);
      v473 = (_DWORD)v470 << (6 * v472 >= (2 * v470));
      goto LABEL_747;
    }
    if (3 * v470 > 4 * v469)
      goto LABEL_679;
    if ((_DWORD)v470)
      goto LABEL_746;
    v795 = (WTF *)(v467 - 16);
    v471 = v4;
    v472 = *(_DWORD *)(v467 - 12);
    v473 = 8;
LABEL_747:
    v800 = v86;
    v474 = WTF::fastZeroedMalloc((WTF *)(24 * v473 + 16));
    *(_QWORD *)(ii + 15456) = v474 + 16;
    *(_DWORD *)(v474 + 12) = v473;
    *(_DWORD *)(*(_QWORD *)(ii + 15456) - 8) = v473 - 1;
    *(_DWORD *)(*(_QWORD *)(ii + 15456) - 16) = 0;
    *(_DWORD *)(*(_QWORD *)(ii + 15456) - 12) = v472;
    if ((_DWORD)v470)
      break;
    v814 = 0;
    v4 = v471;
LABEL_843:
    a1 = WTF::fastFree(v795, v475);
    v529 = v814;
    v86 = v800;
LABEL_844:
    v344 = v802;
    v422 = *(_QWORD *)(v529 + 16);
    if (!v422)
    {
LABEL_845:
      LODWORD(v5) = v818;
      v343 = v803;
      if (v803)
        goto LABEL_590;
      goto LABEL_846;
    }
LABEL_680:
    v5 = v818;
    v343 = v803;
    if (v344)
    {
      if (!v803)
        goto LABEL_846;
      if (!*(_BYTE *)(v803 + 24))
        goto LABEL_591;
      v423 = *(_QWORD *)(v422 + 15448);
      if (!v423)
        goto LABEL_568;
      v424 = 0;
      v425 = *(_DWORD *)(v423 - 8);
      v426 = *((_QWORD *)v344 + 1);
      for (jj = *(_DWORD *)(v426 + 16) >> 8; ; jj = v424 + v428)
      {
        v428 = jj & v425;
        v429 = (_QWORD *)(v423 + 40 * (jj & v425));
        v430 = *v429;
        if (!*v429)
        {
          v496 = *(_DWORD *)(v423 - 4);
          v429 = (_QWORD *)(v423 + 40 * v496);
          goto LABEL_770;
        }
        if (v430 != -1 && v430 == v426)
          break;
        ++v424;
      }
      v496 = *(_DWORD *)(v423 - 4);
LABEL_770:
      if (v429 == (_QWORD *)(v423 + 40 * v496))
        goto LABEL_589;
      if (a4 < 3)
      {
        if (v429[a4 + 2])
        {
          v445 = (unsigned __int16 *)(v429 + 1);
LABEL_774:
          v497 = v4;
          v498 = *(_QWORD *)(ii + 15768);
          *(_QWORD *)(ii + 15768) = v445;
          WebCore::Style::Builder::applyProperty(ii, *v445);
          *(_QWORD *)(ii + 15768) = v498;
          v4 = v497;
        }
LABEL_578:
        v346 = *v4 - 2;
        if (*v4 != 2)
        {
LABEL_579:
          *v4 = v346;
          return;
        }
LABEL_574:
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
        return;
      }
      goto LABEL_554;
    }
    if (v818 > 0x15E)
    {
      v490 = v4;
      v491 = *((_DWORD *)v86 + 10);
      v492 = *((_DWORD *)v86 + 11);
      a1 = WebCore::CSSProperty::isInLogicalPropertyGroup(v818);
      if ((a1 & 1) != 0)
      {
        v493 = (unsigned __int16)v492 >> 13;
        isDirectionAwareProperty = WebCore::CSSProperty::isDirectionAwareProperty(v818);
        v495 = (v491 >> 26) & 1;
        v5 = v818;
        if (isDirectionAwareProperty)
          a1 = WebCore::CSSProperty::resolveDirectionAwareProperty(v818, v495, v493);
        else
          a1 = WebCore::CSSProperty::unresolvePhysicalProperty(v818, v495, v493);
        v4 = v490;
        v587 = v818;
        v588 = v818 - 351;
        if ((_DWORD)a1)
        {
          if (v588 >= 0x6C)
            goto LABEL_554;
LABEL_1012:
          v601 = a1 - 351;
          if (v601 >= 0x6C)
            goto LABEL_554;
          v602 = *(_DWORD *)(v422 + 14784 + 4 * v588);
          v603 = *(_DWORD *)(v422 + 14784 + 4 * v601);
          if (v602 <= v603)
          {
            if (v602 >= v603)
              goto LABEL_1025;
            v587 = a1;
            if (a1 >= 0x1CB)
              goto LABEL_554;
          }
          else
          {
LABEL_1014:
            if (v5 >= 0x1CB)
              goto LABEL_554;
          }
          if (a4 < 3)
          {
            v604 = (unsigned __int16 *)(v422 + 48 + 32 * v587);
            if (*(_QWORD *)&v604[4 * a4 + 4])
            {
              v605 = *(_QWORD *)(ii + 15768);
              *(_QWORD *)(ii + 15768) = v604;
              WebCore::Style::Builder::applyProperty(ii, *v604);
              *(_QWORD *)(ii + 15768) = v605;
              v4 = v490;
            }
            goto LABEL_578;
          }
          goto LABEL_554;
        }
LABEL_1023:
        if (v588 >= 0x6C)
          goto LABEL_554;
        if (!*(_DWORD *)(v422 + 4 * v588 + 14784))
        {
LABEL_1025:
          v344 = 0;
          v343 = v803;
LABEL_589:
          if (v343)
          {
LABEL_590:
            if (!*(_BYTE *)(v343 + 24))
              goto LABEL_591;
LABEL_568:
            v345 = 2;
LABEL_569:
            if (*(_DWORD *)(ii + 15776) == 2)
            {
              if ((int)v5 > 233)
              {
                if (((v5 - 342) > 0x28 || ((1 << (v5 - 86)) & 0x10900080005) == 0)
                  && ((v5 - 234) > 0x19 || ((1 << (v5 + 22)) & 0x2100003) == 0))
                {
                  goto LABEL_578;
                }
              }
              else if ((_DWORD)v5 != 5
                     && ((v5 - 61) > 0x35
                      || ((1 << (v5 - 61)) & 0x20000100400001) == 0)
                     && (_DWORD)v5 != 186)
              {
                goto LABEL_578;
              }
            }
            if (v345 == 2)
            {
              if (v343)
              {
                if (*(_BYTE *)(v343 + 24))
                  goto LABEL_571;
              }
              else if (WebCore::isInheritedPropertyTable[v5])
              {
                v343 = 0;
                goto LABEL_571;
              }
              *((_QWORD *)v86 + 2) |= 0x1000000000uLL;
            }
LABEL_571:
            if (((*((unsigned __int16 *)v4 + 2) | (*((unsigned __int8 *)v4 + 6) << 16)) & 0x3F800) == 0x2800)
            {
              v620 = v344;
              v621 = WebCore::Document::paintWorkletGlobalScopeForName(*(WebCore::Document **)(ii + 15488), (WTF::StringImpl **)v4 + 1, (const WTF::StringImpl *)a3);
              v344 = v620;
              if (v621)
              {
                v623 = v621;
                v804 = v343;
                v624 = (WTF **)v86;
                v625 = v4;
                v626 = (unsigned __int8 *)v621 + 1056;
                if (__ldaxr((unsigned __int8 *)v621 + 1056))
                {
                  __clrex();
                  goto LABEL_1076;
                }
                if (__stxr(1u, v626))
LABEL_1076:
                  MEMORY[0x19AEA534C]((char *)v621 + 1056);
                v628 = WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::PlatformCALayer,WTF::RawPtrTraits<WebCore::PlatformCALayer>,WTF::DefaultRefDerefTraits<WebCore::PlatformCALayer>>>,WTF::HashTableTraits>::get(*((WTF **)v623 + 131), (WTF::StringImpl **)v4 + 1, v622);
                if (v628)
                {
                  v629 = *((unsigned int *)v628 + 11);
                  if ((_DWORD)v629)
                  {
                    v630 = (const WTF::AtomString *)*((_QWORD *)v628 + 4);
                    v631 = 8 * v629;
                    do
                    {
                      WebCore::RenderStyle::addCustomPaintWatchProperty(v624, v630);
                      v630 = (const WTF::AtomString *)((char *)v630 + 8);
                      v631 -= 8;
                    }
                    while (v631);
                  }
                }
                v632 = __ldxr(v626);
                if (v632 == 1)
                {
                  v4 = v625;
                  v343 = v804;
                  v344 = v620;
                  if (!__stlxr(0, v626))
                    goto LABEL_572;
                }
                else
                {
                  __clrex();
                  v4 = v625;
                  v343 = v804;
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v626);
                v344 = v620;
              }
            }
LABEL_572:
            if (!v344)
            {
              WebCore::Style::BuilderGenerated::applyProperty(v5, ii + 15464, (WebCore::CSSValue *)v4);
              v346 = *v4 - 2;
              if (*v4 != 2)
                goto LABEL_579;
              goto LABEL_574;
            }
            v825[1] = ii;
            v826 = v343;
            v824[2] = (uint64_t *)v344;
            v825[0] = &v826;
            v824[0] = &v826;
            v824[1] = v825;
            v819 = (WTF *)ii;
            v820 = v344;
            v821 = &v826;
            v822 = v825;
            v823 = v824;
            if (v345)
            {
              if (v345 == 1)
                WebCore::Style::Builder::applyCustomPropertyValue(WebCore::CSSCustomPropertyValue const&,WebCore::Style::ApplyValueType,WebCore::CSSRegisteredCustomProperty const*)::$_1::operator()(v824);
              else
                WebCore::Style::Builder::applyCustomPropertyValue(WebCore::CSSCustomPropertyValue const&,WebCore::Style::ApplyValueType,WebCore::CSSRegisteredCustomProperty const*)::$_2::operator()((uint64_t)&v819);
              goto LABEL_578;
            }
            if (!v343)
            {
              v370 = *(_QWORD *)(ii + 15480);
              *v344 += 2;
              v371 = (WTF::StringImpl *)(v344 + 2);
              v827 = v344;
              goto LABEL_614;
            }
            v369 = *(unsigned __int8 *)(v343 + 24);
            v370 = *(_QWORD *)(ii + 15480);
            *v344 += 2;
            v371 = (WTF::StringImpl *)(v344 + 2);
            v827 = v344;
            if (!v369)
            {
              v613 = (uint64_t)v344;
              v615 = *(_QWORD *)(v370 + 8);
              v614 = (WTF **)(v370 + 8);
              v616 = WebCore::StyleCustomPropertyData::get(*(_QWORD *)(*(_QWORD *)(v615 + 40) + 288), (uint64_t *)v344 + 1);
              if (!v616 || (WebCore::CSSCustomPropertyValue::equals(v616, v613) & 1) == 0)
              {
                v617 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v614);
                v618 = (const WebCore::StyleCustomPropertyData **)WTF::DataRef<WebCore::StyleRareNonInheritedData>::access((uint64_t *)v617 + 5);
                v619 = WTF::DataRef<WebCore::StyleCustomPropertyData>::access(v618 + 36);
                WebCore::StyleCustomPropertyData::set((uint64_t)v619, v371, (WTF::StringImpl *)&v827);
              }
              goto LABEL_665;
            }
LABEL_614:
            v372 = *(_QWORD *)(v370 + 24);
            v373 = *(_QWORD *)(v372 + 216);
            if (v373)
            {
              v374 = *(_DWORD **)v371;
              while (1)
              {
                v375 = *(_QWORD *)(v373 + 16);
                if (v375)
                {
                  v376 = 0;
                  v377 = *(_DWORD *)(v375 - 8);
                  v378 = (v374[4] >> 8) & v377;
                  v379 = *(_DWORD **)(v375 + 16 * v378);
                  if (v379)
                  {
                    while (v379 == (_DWORD *)-1 || v379 != v374)
                    {
                      v378 = (++v376 + (_DWORD)v378) & v377;
                      v379 = *(_DWORD **)(v375 + 16 * v378);
                      if (!v379)
                        goto LABEL_625;
                    }
                    v381 = *(_QWORD *)(v375 + 16 * v378 + 8);
                    if (v381)
                      break;
                  }
                }
LABEL_625:
                v373 = *(_QWORD *)(v373 + 8);
                if (!v373)
                  goto LABEL_626;
              }
              if (*(_DWORD **)(v381 + 8) == v374)
              {
                v594 = *(unsigned int *)(v381 + 72);
                v595 = v344[18];
                v596 = v595 == v594;
                v16 = v595 == -1;
                v597 = v595 == -1;
                if (v16)
                  v596 = 0;
                if ((_DWORD)v594 != -1)
                  v597 = v596;
                if (v597)
                {
                  *(_QWORD *)&v828 = v344;
                  *((_QWORD *)&v828 + 1) = v344;
                  v829 = v344;
                  v830 = v344;
                  v831 = v344;
                  if ((_DWORD)v594 == -1)
                    goto LABEL_1377;
                  v832 = &v828;
                  if ((((uint64_t (*)(__int128 **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6equalsERKS9_E3__0JZNKS9_6equalsESB_E3__1ZNKS9_6equalsESB_E3__2ZNKS9_6equalsESB_E3__3ZNKS9_6equalsESB_E3__4EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISL_EENS6_21DefaultRefDerefTraitsISL_EEEENS8_10CSSValueIDENSK_INS8_15CSSVariableDataENSM_ISS_EENSO_ISS_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSM_IS11_EENSO_IS11_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v594])(&v832, v381 + 24) & 1) == 0)
                  {
                    v372 = *(_QWORD *)(v370 + 24);
                    goto LABEL_626;
                  }
LABEL_665:
                  v412 = v827;
                  v827 = 0;
                  if (v412)
                  {
                    if (*v412 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v412, a2);
                    else
                      *v412 -= 2;
                  }
                  goto LABEL_578;
                }
              }
            }
LABEL_626:
            if (*(_DWORD *)v372 == 1)
            {
              v382 = v372;
            }
            else
            {
              v382 = WTF::fastMalloc((WTF *)0x1A0);
              WebCore::StyleRareInheritedData::StyleRareInheritedData(v382, v372);
              v589 = *(WebCore::StyleRareInheritedData **)(v370 + 24);
              *(_QWORD *)(v370 + 24) = v382;
              if (v589)
              {
                if (*(_DWORD *)v589 == 1)
                {
                  WebCore::StyleRareInheritedData::~StyleRareInheritedData(v589, a2);
                  WTF::fastFree(v606, v607);
                  v382 = *(_QWORD *)(v370 + 24);
                }
                else
                {
                  --*(_DWORD *)v589;
                }
              }
            }
            v383 = *(_QWORD *)(v382 + 216);
            if (*(_DWORD *)v383 == 1)
            {
              v384 = *(_QWORD *)(v382 + 216);
LABEL_630:
              if (*(_BYTE *)(v384 + 32))
                v385 = 1;
              else
                v385 = (v827[18] - 3) < 2;
              v387 = (uint64_t *)(v384 + 16);
              v386 = *(_QWORD *)(v384 + 16);
              *(_BYTE *)(v384 + 32) = v385;
              if (v386
                || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(v384 + 16), 8u, 0), (v386 = *v387) != 0))
              {
                v388 = *(_DWORD *)(v386 - 8);
              }
              else
              {
                v388 = 0;
              }
              v389 = 0;
              v390 = *(_DWORD **)v371;
              v391 = *(_DWORD *)(*(_QWORD *)v371 + 16) >> 8;
              for (kk = 1; ; ++kk)
              {
                v393 = v391 & v388;
                v394 = (_QWORD *)(v386 + 16 * v393);
                v395 = (_DWORD *)*v394;
                if (!*v394)
                  break;
                if (v395 != (_DWORD *)-1)
                {
                  v394 = v389;
                  if (v395 == v390)
                  {
                    WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>::operator=<WebCore::CSSCustomPropertyValue const>((_DWORD **)(v386 + 16 * v393 + 8), (WTF::StringImpl *)&v827);
                    goto LABEL_665;
                  }
                }
                v391 = kk + v393;
                v389 = v394;
              }
              if (v389)
              {
                *v389 = 0;
                v389[1] = 0;
                --*(_DWORD *)(*v387 - 16);
                v390 = *(_DWORD **)v371;
                v394 = v389;
              }
              if (v390)
                *v390 += 2;
              *v394 = v390;
              v396 = v827;
              v827 = 0;
              v397 = (_DWORD *)v394[1];
              v394[1] = v396;
              if (v397)
              {
                if (*v397 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v397, a2);
                else
                  *v397 -= 2;
              }
              v398 = *v387;
              if (*v387)
                v399 = *(_DWORD *)(v398 - 12) + 1;
              else
                v399 = 1;
              *(_DWORD *)(v398 - 12) = v399;
              v400 = *v387;
              if (*v387)
                v401 = *(_DWORD *)(v400 - 12);
              else
                v401 = 0;
              v402 = (*(_DWORD *)(v400 - 16) + v401);
              v403 = *(unsigned int *)(v400 - 4);
              if (v403 > 0x400)
              {
                if (v403 > 2 * v402)
                  goto LABEL_652;
              }
              else
              {
                if (3 * v403 > 4 * v402)
                {
LABEL_652:
                  v404 = *(_QWORD *)(v384 + 8);
                  if (v404)
                  {
                    v405 = *(_QWORD *)v371;
                    do
                    {
                      v406 = *(_QWORD *)(v404 + 16);
                      if (v406)
                      {
                        v407 = 0;
                        for (mm = *(_DWORD *)(v405 + 16) >> 8; ; mm = v407 + v409)
                        {
                          v409 = mm & *(_DWORD *)(v406 - 8);
                          v410 = *(_QWORD *)(v406 + 16 * v409);
                          if (!v410)
                            break;
                          if (v410 != -1 && v410 == v405)
                          {
                            if (*(_QWORD *)(v406 + 16 * v409 + 8))
                              goto LABEL_665;
                            break;
                          }
                          ++v407;
                        }
                      }
                      v404 = *(_QWORD *)(v404 + 8);
                    }
                    while (v404);
                  }
                  ++*(_DWORD *)(v384 + 24);
                  goto LABEL_665;
                }
                if (!(_DWORD)v403)
                {
                  v581 = 8;
                  goto LABEL_977;
                }
              }
              v581 = (_DWORD)v403 << (6 * *(_DWORD *)(v400 - 12) >= (2 * v403));
LABEL_977:
              WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(v384 + 16), v581, (uint64_t)v394);
              goto LABEL_652;
            }
            v384 = WTF::fastMalloc((WTF *)0x28);
            *(_DWORD *)v384 = 1;
            *(_QWORD *)(v384 + 8) = 0;
            v590 = (uint64_t *)(v384 + 8);
            *(_QWORD *)(v384 + 16) = 0;
            *(_DWORD *)(v384 + 24) = *(_DWORD *)(v383 + 24);
            *(_DWORD *)(v384 + 28) = 0;
            *(_BYTE *)(v384 + 32) = *(_BYTE *)(v383 + 32);
            v591 = *(_DWORD **)(v383 + 8);
            if (!v591 && (v610 = *(_QWORD *)(v383 + 16)) != 0 && *(_DWORD *)(v610 - 12)
              || *(_DWORD *)(v383 + 28) <= 3u && (v592 = *(_QWORD *)(v383 + 16)) != 0 && *(_DWORD *)(v592 - 12) >= 9u)
            {
              ++*(_DWORD *)v383;
              *v590 = v383;
              goto LABEL_960;
            }
            if (v591)
              ++*v591;
            *v590 = (uint64_t)v591;
            WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::operator=((uint64_t *)(v384 + 16), (_QWORD *)(v383 + 16));
            v383 = *v590;
            if (*v590)
LABEL_960:
              *(_DWORD *)(v384 + 28) = *(_DWORD *)(v383 + 28) + 1;
            v593 = *(WebCore::StyleCustomPropertyData **)(v382 + 216);
            *(_QWORD *)(v382 + 216) = v384;
            if (v593)
            {
              if (*(_DWORD *)v593 == 1)
              {
                WebCore::StyleCustomPropertyData::~StyleCustomPropertyData(v593, a2);
                WTF::fastFree(v608, v609);
                v384 = *(_QWORD *)(v382 + 216);
              }
              else
              {
                --*(_DWORD *)v593;
              }
            }
            goto LABEL_630;
          }
LABEL_846:
          v343 = 0;
          if (WebCore::isInheritedPropertyTable[v5])
            goto LABEL_568;
LABEL_591:
          v345 = 1;
          goto LABEL_569;
        }
        goto LABEL_1014;
      }
      v5 = v818;
      if ((int)v818 > 408)
      {
        v4 = v490;
        switch(v818)
        {
          case 0x1C0u:
            a1 = 458;
            goto LABEL_1011;
          case 0x1C1u:
          case 0x1C2u:
            goto LABEL_1022;
          case 0x1C3u:
            a1 = 351;
            goto LABEL_1011;
          case 0x1C4u:
            a1 = 352;
            goto LABEL_1011;
          case 0x1C5u:
            a1 = 353;
            goto LABEL_1011;
          case 0x1C6u:
            a1 = 388;
            goto LABEL_1011;
          case 0x1C7u:
            a1 = 408;
            goto LABEL_1011;
          case 0x1C8u:
            a1 = 409;
            goto LABEL_1011;
          case 0x1C9u:
            a1 = 410;
            goto LABEL_1011;
          case 0x1CAu:
            a1 = 448;
            goto LABEL_1011;
          default:
            if (v818 == 409)
            {
              a1 = 456;
            }
            else
            {
              if (v818 != 410)
                goto LABEL_1022;
              a1 = 457;
            }
            break;
        }
        goto LABEL_1011;
      }
      v4 = v490;
      if ((int)v818 <= 352)
      {
        if (v818 == 351)
        {
          a1 = 451;
          goto LABEL_1011;
        }
        if (v818 == 352)
        {
          a1 = 452;
          goto LABEL_1011;
        }
      }
      else
      {
        switch(v818)
        {
          case 0x161u:
            a1 = 453;
            goto LABEL_1011;
          case 0x184u:
            a1 = 454;
            goto LABEL_1011;
          case 0x198u:
            a1 = 455;
LABEL_1011:
            v587 = v818;
            v588 = v818 - 351;
            goto LABEL_1012;
        }
      }
LABEL_1022:
      v587 = v818;
      v588 = v818 - 351;
      goto LABEL_1023;
    }
    if (((*(_QWORD *)(v422 + (((unint64_t)v818 >> 3) & 0x1FF8) + 14736) >> v818) & 1) == 0)
    {
      v344 = 0;
      goto LABEL_589;
    }
    if (a4 < 3)
    {
      v445 = (unsigned __int16 *)(v422 + 48 + 32 * v818);
      if (*(_QWORD *)&v445[4 * a4 + 4])
        goto LABEL_774;
      goto LABEL_578;
    }
    do
    {
LABEL_554:
      __break(1u);
LABEL_555:
      v338 = *(_DWORD *)a1 + 2;
      *(_DWORD *)a1 = v338;
    }
    while (v5 >= 0x240);
    if (((*(_QWORD *)(ii + (((unint64_t)v5 >> 3) & 0x1FF8) + 15696) >> v5) & 1) != 0)
    {
      v4 = &WebCore::staticCSSValuePool[3100];
      dword_1ECE8BC18 += 2;
      v339 = *(_DWORD *)a1;
    }
    else
    {
      v339 = v338 + 2;
      *(_DWORD *)a1 = v339;
      v4 = (int *)a1;
    }
    v340 = v339 - 2;
    if (v340)
    {
      *(_DWORD *)a1 = v340;
      v86 = *(WTF::StringImpl **)(ii + 15480);
      v87 = v5 - 354;
      goto LABEL_560;
    }
    a1 = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(a1, a2);
    v86 = *(WTF::StringImpl **)(ii + 15480);
    v87 = v5 - 354;
    if ((v5 - 354) <= 0x5A)
      goto LABEL_560;
  }
  v476 = 0;
  v814 = 0;
  v4 = v471;
  v477 = v810;
  v806 = v470;
  v796 = v4;
  v799 = ii;
  while (1)
  {
    v738 = (_DWORD *)(v477 + 24 * v476);
    if (*v738 == -1)
      goto LABEL_1292;
    if (!*(_QWORD *)v738 && !v738[2])
      break;
    v739 = *(_QWORD *)(ii + 15456);
    if (v739)
      v740 = *(_DWORD *)(v739 - 8);
    else
      v740 = 0;
    v741 = 9 * ((*v738 + ~(*v738 << 15)) ^ ((*v738 + ~(*v738 << 15)) >> 10));
    v742 = (v741 ^ (v741 >> 6)) + ~((v741 ^ (v741 >> 6)) << 11);
    v743.i32[0] = v738[2];
    v743.i32[1] = v738[1];
    v744 = (int8x8_t)vadd_s32(v743, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v743, 0xFuLL)));
    v745 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v744, 0xAuLL), v744), (int32x2_t)0x900000009);
    v746 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v745, 6uLL), v745);
    v747 = (int8x8_t)vadd_s32(v746, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v746, 0xBuLL)));
    v748 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v747, 0x10uLL), v747), (int32x2_t)0x109132F905AC73FELL);
    v749 = v740 & ((0xD7862706ELL
                  * (unint64_t)(277951225 * (v742 ^ HIWORD(v742))
                                     + 95187966
                                     * ((0xD7862706ELL
                                                     * (unint64_t)vadd_s32(v748, vdup_lane_s32(v748, 1)).u32[0]) >> 4))) >> 4);
    for (nn = 1; ; ++nn)
    {
      v751 = v739 + 24 * v749;
      if (!*(_QWORD *)v751 && !*(_DWORD *)(v751 + 8))
        break;
      v749 = (v749 + nn) & v740;
    }
    v752 = v739 + 24 * v749;
    v755 = *(_QWORD *)(v752 + 16);
    v753 = (_QWORD *)(v752 + 16);
    v754 = v755;
    *v753 = 0;
    if (v755)
    {
      v756 = *(_QWORD *)(v754 + 15448);
      if (v756)
      {
        v785 = *(unsigned int *)(v756 - 4);
        if ((_DWORD)v785)
        {
          v786 = *(WTF::StringImpl ***)(v754 + 15448);
          do
          {
            v787 = *v786;
            if (*v786 != (WTF::StringImpl *)-1)
            {
              if (v787)
              {
                *v786 = 0;
                if (*(_DWORD *)v787 == 2)
                  WTF::StringImpl::destroy(v787, (WTF::StringImpl *)v475);
                else
                  *(_DWORD *)v787 -= 2;
              }
              else
              {
                *v786 = 0;
              }
            }
            v786 += 5;
            --v785;
          }
          while (v785);
        }
        WTF::fastFree((WTF *)(v756 - 16), v475);
        v4 = v796;
        ii = v799;
      }
      if (*(_BYTE *)(v754 + 40))
      {
        v757 = *(_QWORD *)(v754 + 24);
        if (v757)
        {
          v776 = *(unsigned int *)(v757 - 4);
          if ((_DWORD)v776)
          {
            v777 = *(_QWORD *)(v754 + 24);
            do
            {
              v778 = *(unsigned int *)(v777 + 8);
              if ((_DWORD)v778 == -1)
                goto LABEL_1377;
              *(_QWORD *)&v828 = &v819;
              if ((((uint64_t (*)(__int128 *, uint64_t))off_1E344FF58[v778])(&v828, v777) & 1) == 0)
              {
                v779 = *(unsigned int *)(v777 + 8);
                if ((_DWORD)v779 != -1)
                  ((void (*)(__int128 *, uint64_t))off_1E344FF78[v779])(&v828, v777);
                *(_DWORD *)(v777 + 8) = -1;
              }
              v777 += 16;
            }
            while (--v776);
          }
          WTF::fastFree((WTF *)(v757 - 16), v475);
          v4 = v796;
          ii = v799;
        }
      }
      WTF::fastFree((WTF *)v754, v475);
      v477 = v810;
    }
    v758 = *(_QWORD *)v738;
    *(_DWORD *)(v751 + 8) = v738[2];
    *(_QWORD *)v751 = v758;
    v759 = v477 + 24 * v476;
    v760 = *(_QWORD *)(v759 + 16);
    *(_QWORD *)(v759 + 16) = 0;
    *v753 = v760;
    v761 = *(_QWORD *)(v759 + 16);
    *(_QWORD *)(v759 + 16) = 0;
    v470 = v806;
    if (v761)
    {
      v762 = *(_QWORD *)(v761 + 15448);
      if (v762)
      {
        v788 = v4;
        v789 = *(unsigned int *)(v762 - 4);
        if ((_DWORD)v789)
        {
          v790 = *(WTF::StringImpl ***)(v761 + 15448);
          do
          {
            v791 = *v790;
            if (*v790 != (WTF::StringImpl *)-1)
            {
              if (v791)
              {
                *v790 = 0;
                if (*(_DWORD *)v791 == 2)
                  WTF::StringImpl::destroy(v791, (WTF::StringImpl *)v475);
                else
                  *(_DWORD *)v791 -= 2;
              }
              else
              {
                *v790 = 0;
              }
            }
            v790 += 5;
            --v789;
          }
          while (v789);
        }
        WTF::fastFree((WTF *)(v762 - 16), v475);
        v4 = v788;
        ii = v799;
        v470 = v806;
      }
      if (*(_BYTE *)(v761 + 40))
      {
        v763 = *(_QWORD *)(v761 + 24);
        if (v763)
        {
          v764 = v4;
          v765 = *(unsigned int *)(v763 - 4);
          if ((_DWORD)v765)
          {
            v766 = *(_QWORD *)(v761 + 24);
            do
            {
              v767 = *(unsigned int *)(v766 + 8);
              if ((_DWORD)v767 == -1)
                goto LABEL_1377;
              *(_QWORD *)&v828 = &v819;
              if ((((uint64_t (*)(__int128 *, uint64_t))off_1E344FF58[v767])(&v828, v766) & 1) == 0)
              {
                v768 = *(unsigned int *)(v766 + 8);
                if ((_DWORD)v768 != -1)
                  ((void (*)(__int128 *, uint64_t))off_1E344FF78[v768])(&v828, v766);
                *(_DWORD *)(v766 + 8) = -1;
              }
              v766 += 16;
            }
            while (--v765);
          }
          WTF::fastFree((WTF *)(v763 - 16), v475);
          v4 = v764;
          ii = v799;
          v470 = v806;
        }
      }
      WTF::fastFree((WTF *)v761, v475);
      v477 = v810;
    }
    v737 = v814;
    if (v738 == (_DWORD *)v366)
      v737 = v751;
    v814 = v737;
LABEL_1292:
    if (++v476 == v470)
      goto LABEL_843;
  }
  v769 = v477 + 24 * v476;
  v770 = *(_QWORD *)(v769 + 16);
  *(_QWORD *)(v769 + 16) = 0;
  if (!v770)
    goto LABEL_1292;
  v771 = *(_QWORD *)(v770 + 15448);
  if (v771)
  {
    v792 = v4;
    v775 = *(unsigned int *)(v771 - 4);
    if ((_DWORD)v775)
    {
      v774 = *(WTF::StringImpl ***)(v770 + 15448);
      do
      {
        v773 = *v774;
        if (*v774 != (WTF::StringImpl *)-1)
        {
          if (v773)
          {
            *v774 = 0;
            if (*(_DWORD *)v773 == 2)
              WTF::StringImpl::destroy(v773, (WTF::StringImpl *)v475);
            else
              *(_DWORD *)v773 -= 2;
          }
          else
          {
            *v774 = 0;
          }
        }
        v774 += 5;
        --v775;
      }
      while (v775);
    }
    WTF::fastFree((WTF *)(v771 - 16), v475);
    v4 = v792;
    v470 = v806;
    v477 = v810;
  }
  if (!*(_BYTE *)(v770 + 40))
    goto LABEL_1325;
  v772 = *(_QWORD *)(v770 + 24);
  if (!v772)
    goto LABEL_1325;
  v780 = ii;
  v781 = *(unsigned int *)(v772 - 4);
  if (!(_DWORD)v781)
  {
LABEL_1351:
    WTF::fastFree((WTF *)(v772 - 16), v475);
    ii = v780;
    v470 = v806;
    v477 = v810;
LABEL_1325:
    WTF::fastFree((WTF *)v770, v475);
    goto LABEL_1292;
  }
  v782 = *(_QWORD *)(v770 + 24);
  while (1)
  {
    v783 = *(unsigned int *)(v782 + 8);
    if ((_DWORD)v783 == -1)
      break;
    *(_QWORD *)&v828 = &v819;
    if ((((uint64_t (*)(__int128 *, uint64_t))off_1E344FF58[v783])(&v828, v782) & 1) == 0)
    {
      v784 = *(unsigned int *)(v782 + 8);
      if ((_DWORD)v784 != -1)
        ((void (*)(__int128 *, uint64_t))off_1E344FF78[v784])(&v828, v782);
      *(_DWORD *)(v782 + 8) = -1;
    }
    v782 += 16;
    if (!--v781)
      goto LABEL_1351;
  }
LABEL_1377:
  v793 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::RenderStyle::setVisitedLinkColor(v793, v794);
}

uint64_t *WebCore::RenderStyle::setVisitedLinkColor(WebCore::RenderStyle *this, const WebCore::Color *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t *v14;
  _BOOL4 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;

  v5 = *((_QWORD *)this + 4);
  result = (uint64_t *)((char *)this + 32);
  v4 = v5;
  v6 = *(_QWORD *)(v5 + 336);
  v7 = *(_QWORD *)a2;
  if ((v6 & 0x8000000000000) != 0)
  {
    v23 = v4;
    if ((v7 & 0x8000000000000) != 0)
    {
      v22 = result;
      v26 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v25 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      if (WebCore::operator==<float,4ul>((float *)&v26, (float *)&v25)
        && (v13 = *(_QWORD *)(v23 + 336), HIBYTE(v13) == HIBYTE(*(_QWORD *)a2)))
      {
        result = v22;
        if (BYTE6(v13) == BYTE6(*(_QWORD *)a2))
          return result;
      }
      else
      {
        result = v22;
      }
    }
  }
  else if (v6 == v7 && (v7 & 0x8000000000000) == 0)
  {
    return result;
  }
  result = (uint64_t *)WTF::DataRef<WebCore::StyleInheritedData>::access(result);
  v10 = result[42];
  v11 = *(_QWORD *)a2;
  if ((v10 & 0x8000000000000) != 0)
  {
    if ((v11 & 0x8000000000000) != 0)
    {
      v26 = *(_OWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 4);
      v25 = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 4);
      v14 = result;
      v15 = WebCore::operator==<float,4ul>((float *)&v26, (float *)&v25);
      v10 = v14[42];
      if (v15 && HIBYTE(v10) == HIBYTE(*(_QWORD *)a2))
      {
        result = v14;
        if (BYTE6(v10) == BYTE6(*(_QWORD *)a2))
          return result;
      }
      else
      {
        result = v14;
      }
    }
  }
  else if (v10 == v11 && (v11 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v10 & 0x8000000000000) != 0)
  {
    v24 = result;
    v19 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v9);
      result = v24;
    }
  }
  v16 = *(_QWORD *)a2;
  result[42] = *(_QWORD *)a2;
  if ((v16 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  return result;
}

uint64_t *WebCore::RenderStyle::setColor(WebCore::RenderStyle *this, const WebCore::Color *a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t *v14;
  _BOOL4 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;

  v5 = *((_QWORD *)this + 4);
  result = (uint64_t *)((char *)this + 32);
  v4 = v5;
  v6 = *(_QWORD *)(v5 + 328);
  v7 = *(_QWORD *)a2;
  if ((v6 & 0x8000000000000) != 0)
  {
    v23 = v4;
    if ((v7 & 0x8000000000000) != 0)
    {
      v22 = result;
      v26 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v25 = *(_OWORD *)((v7 & 0xFFFFFFFFFFFFLL) + 4);
      if (WebCore::operator==<float,4ul>((float *)&v26, (float *)&v25)
        && (v13 = *(_QWORD *)(v23 + 328), HIBYTE(v13) == HIBYTE(*(_QWORD *)a2)))
      {
        result = v22;
        if (BYTE6(v13) == BYTE6(*(_QWORD *)a2))
          return result;
      }
      else
      {
        result = v22;
      }
    }
  }
  else if (v6 == v7 && (v7 & 0x8000000000000) == 0)
  {
    return result;
  }
  result = (uint64_t *)WTF::DataRef<WebCore::StyleInheritedData>::access(result);
  v10 = result[41];
  v11 = *(_QWORD *)a2;
  if ((v10 & 0x8000000000000) != 0)
  {
    if ((v11 & 0x8000000000000) != 0)
    {
      v26 = *(_OWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 4);
      v25 = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFLL) + 4);
      v14 = result;
      v15 = WebCore::operator==<float,4ul>((float *)&v26, (float *)&v25);
      v10 = v14[41];
      if (v15 && HIBYTE(v10) == HIBYTE(*(_QWORD *)a2))
      {
        result = v14;
        if (BYTE6(v10) == BYTE6(*(_QWORD *)a2))
          return result;
      }
      else
      {
        result = v14;
      }
    }
  }
  else if (v10 == v11 && (v11 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v10 & 0x8000000000000) != 0)
  {
    v24 = result;
    v19 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v9);
      result = v24;
    }
  }
  v16 = *(_QWORD *)a2;
  result[41] = *(_QWORD *)a2;
  if ((v16 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  return result;
}

void WebCore::Style::BuilderConverter::convertLineWidth<float>(uint64_t a1, uint64_t a2, __n128 a3)
{
  _OWORD *v5;
  float v6;
  float v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Page *v17;
  int v18;
  WTF *v19;
  void *v20;
  WTF *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  float v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __n128 v29;

  if (((*(unsigned __int16 *)(a2 + 4) | (*(unsigned __int8 *)(a2 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1944C92F4);
  }
  if ((*(_WORD *)(a2 + 4) & 0x7F) != 0x50 || !*(_WORD *)(a2 + 8))
  {
    v5 = (_OWORD *)(a1 + 64);
    v6 = WebCore::CSSPrimitiveValue::computeLength<float>(a2, a1 + 64, a3);
    v7 = 1.0;
    if (*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 184) >= 1.0 || v6 >= 1.0)
      goto LABEL_8;
    v23 = *(_OWORD *)(a1 + 80);
    v26[0] = *v5;
    v26[1] = v23;
    v24 = *(_QWORD *)(a1 + 96);
    if (v24)
      *(_DWORD *)(v24 + 24) += 2;
    v27 = v24;
    v28 = *(_OWORD *)(a1 + 104);
    v29 = *(__n128 *)(a1 + 120);
    LODWORD(v28) = 1065353216;
    BYTE4(v28) = 1;
    v25 = WebCore::CSSPrimitiveValue::computeLength<float>(a2, (uint64_t)v26, v29);
    WebCore::CSSToLengthConversionData::~CSSToLengthConversionData((WebCore::CSSToLengthConversionData *)v26);
    if (v25 < 1.0)
    {
LABEL_8:
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 24);
          if (v11)
          {
            v12 = *(float **)(v11 + 8);
            if (v12)
            {
              v13 = (*(_DWORD *)v12)++;
              v7 = v12[91];
              if (v13)
              {
                *(_DWORD *)v12 = v13;
              }
              else
              {
                WebCore::Page::~Page((WebCore::Page *)v12);
                WTF::fastFree(v19, v20);
              }
            }
          }
        }
      }
      if (v6 <= 0.0 || v6 >= (float)(1.0 / v7))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 528);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 24);
            if (v16)
            {
              v17 = *(WebCore::Page **)(v16 + 8);
              if (v17)
              {
                v18 = (*(_DWORD *)v17)++;
                if (v18)
                {
                  *(_DWORD *)v17 = v18;
                }
                else
                {
                  WebCore::Page::~Page(v17);
                  WTF::fastFree(v21, v22);
                }
              }
            }
          }
        }
      }
    }
  }
}

void WebCore::Style::BuilderConverter::convertLineHeight(WebCore::Style::BuilderConverter *this, WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3, float a4)
{
  __int16 v8;
  int v9;
  double v12;
  float v13;
  __int16 v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  __int128 v26;
  WebCore::Node *v27;
  __n128 v28;
  unsigned int v29;
  int v30;
  WebCore::Node *v31;
  float v32;
  double v33;
  float v34;
  WebCore::CSSCalcValue *v35;
  WebCore::CalculationValue *v36;
  float v37;
  float v38;
  void *v39;
  float v40;
  float v41;
  uint64_t v42;
  void *v43;
  unsigned int v44[2];
  _OWORD v45[2];
  WebCore::Node *v46;
  __int128 v47;
  __int128 v48;

  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1944C9564);
  }
  if ((*((_WORD *)a3 + 2) & 0x7F) == 0x50)
  {
    v15 = *((unsigned __int16 *)a3 + 4);
    if (v15 == 90 || (v15 - 16) <= 0x19)
    {
      *(_DWORD *)this = -1027080192;
LABEL_23:
      v14 = 3;
LABEL_24:
      *((_WORD *)this + 2) = v14;
      *((_BYTE *)this + 6) = 1;
      return;
    }
  }
  if (!WebCore::CSSPrimitiveValue::isLength(a3))
  {
    v8 = *((_WORD *)a3 + 2);
    v9 = v8 & 0x7F;
    if ((v9 - 63) <= 0x11 && ((1 << ((*((_WORD *)a3 + 2) & 0x7F) - 63)) & 0x34001) != 0)
    {
LABEL_12:
      if ((v9 - 63) <= 0x11 && ((1 << (v9 - 63)) & 0x34001) != 0)
        goto LABEL_20;
      if ((v8 & 0x7F) == 0x49)
      {
        v18 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
        v19 = v18[12];
        if (v19 != 1)
        {
          if (v19 == 2)
            goto LABEL_66;
          if ((v19 - 5) > 3)
            goto LABEL_20;
        }
        v9 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v18 + 72))(v18);
      }
      if (v9 != 3)
      {
        v8 = *((_WORD *)a3 + 2);
LABEL_20:
        if ((v8 & 0x7F) == 0x49)
        {
          v42 = *((_QWORD *)a3 + 1);
          *(_QWORD *)&v45[0] = 0;
          v12 = WebCore::CSSCalcValue::doubleValue(v42, (uint64_t)v45);
          if (*(_QWORD *)&v45[0])
            WTF::fastFree((WTF *)(*(_QWORD *)&v45[0] - 16), v43);
        }
        else
        {
          v12 = *((double *)a3 + 1);
        }
        v13 = v12 * 100.0;
        *(float *)this = v13;
        goto LABEL_23;
      }
LABEL_66:
      v32 = WebCore::RenderStyle::computedFontSize(*((WebCore::RenderStyle **)a2 + 2));
      v33 = WebCore::CSSPrimitiveValue::doubleValue(a3);
      if (v33 >= 2147483650.0)
      {
        v34 = 2147500000.0;
      }
      else if (v33 <= -2147483650.0)
      {
        v34 = -2147500000.0;
      }
      else
      {
        v34 = (float)(int)v33;
      }
      *(float *)this = (float)(v32 * v34) / 100.0;
      v14 = 4;
      goto LABEL_24;
    }
    if (v9 == 73)
    {
      v16 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
      v17 = v16[12];
      if (v17 != 1)
      {
        if (v17 == 4)
          goto LABEL_36;
        if ((v17 - 5) > 3)
          goto LABEL_12;
      }
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 72))(*(_QWORD *)(*((_QWORD *)a3 + 1) + 8));
    }
    if (v9 != 75)
    {
      v8 = *((_WORD *)a3 + 2);
      v9 = v8 & 0x7F;
      goto LABEL_12;
    }
  }
LABEL_36:
  v20 = (char *)a2 + 64;
  v21 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 528);
  if (v21 && (v22 = *(_QWORD *)(v21 + 8)) != 0)
  {
    v23 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 24);
    if ((*(_BYTE *)(v23 + 236) & 0x20) != 0)
      v24 = 1.0;
    else
      v24 = *(float *)(v22 + 596);
    v25 = v24 * *(float *)(v23 + 184);
  }
  else
  {
    if (*(_QWORD *)v20)
      v25 = *(float *)(*(_QWORD *)(*(_QWORD *)v20 + 24) + 184);
    else
      v25 = 1.0;
    if (*((_BYTE *)a2 + 108))
      v25 = *((float *)a2 + 26);
  }
  v26 = *((_OWORD *)a2 + 5);
  v45[0] = *(_OWORD *)v20;
  v45[1] = v26;
  v27 = (WebCore::Node *)*((_QWORD *)a2 + 12);
  if (v27)
    *((_DWORD *)v27 + 6) += 2;
  v46 = v27;
  v47 = *(_OWORD *)((char *)a2 + 104);
  v48 = *(_OWORD *)((char *)a2 + 120);
  *(float *)&v47 = v25;
  BYTE4(v47) = 1;
  WORD4(v47) = 154;
  BYTE10(v47) = 1;
  *(_DWORD *)this = 0;
  *(_DWORD *)((char *)this + 3) = 0;
  if (!WebCore::CSSPrimitiveValue::isLength(a3))
  {
    if ((*((_WORD *)a3 + 2) & 0x7F) == 0x49)
      v35 = (WebCore::CSSCalcValue *)*((_QWORD *)a3 + 1);
    else
      v35 = 0;
    WebCore::CSSCalcValue::createCalculationValue(v35, (const WebCore::CSSToLengthConversionData *)v45, v44);
    v36 = *(WebCore::CalculationValue **)v44;
    v37 = WebCore::RenderStyle::computedFontSize(*((WebCore::RenderStyle **)a2 + 2));
    v38 = WebCore::CalculationValue::evaluate(v36, v37);
    WTF::Ref<WebCore::CalculationValue,WTF::RawPtrTraits<WebCore::CalculationValue>,WTF::DefaultRefDerefTraits<WebCore::CalculationValue>>::~Ref((WTF **)v44, v39);
    v40 = -33554000.0;
    if (v38 > -33554000.0)
      v40 = v38;
    if (v38 >= 33554000.0)
      v40 = 33554000.0;
    *(float *)v44 = v40;
    LOWORD(v44[1]) = 4;
    BYTE2(v44[1]) = 1;
    WebCore::Length::operator=((unsigned int *)this, v44);
    if (LOBYTE(v44[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44[0]);
    }
    goto LABEL_48;
  }
  WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>((uint64_t)a3, (uint64_t)v45, (uint64_t)v44, v28);
  if (*((_BYTE *)this + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)this);
  }
  v29 = LOBYTE(v44[1]);
  *((_WORD *)this + 2) = v44[1];
  if (v29 - 2 >= 9)
  {
    if (v29 > 0xD)
      goto LABEL_48;
    if (((1 << v29) & 0x3003) != 0)
    {
      *(_DWORD *)this = 0;
      goto LABEL_48;
    }
    if (v29 != 11)
      goto LABEL_48;
LABEL_65:
    *(_DWORD *)this = v44[0];
    goto LABEL_48;
  }
  v30 = BYTE2(v44[1]);
  *((_BYTE *)this + 6) = BYTE2(v44[1]);
  if (!v30)
    goto LABEL_65;
  *(_DWORD *)this = v44[0];
LABEL_48:
  if (a4 != 1.0)
  {
    v41 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v41 = (float)*(int *)this;
    *(float *)v44 = v41 * a4;
    LOWORD(v44[1]) = 4;
    BYTE2(v44[1]) = 1;
    WebCore::Length::operator=((unsigned int *)this, v44);
    if (LOBYTE(v44[1]) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v44[0]);
    }
  }
  v31 = v46;
  v46 = 0;
  if (v31)
  {
    if (*((_DWORD *)v31 + 6) == 2)
    {
      if ((*((_WORD *)v31 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v31);
    }
    else
    {
      *((_DWORD *)v31 + 6) -= 2;
    }
  }
}

_DWORD *WebCore::RenderStyle::setSpecifiedLineHeight(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  float *v4;
  float *v5;
  int v6;
  float v7;
  float v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  int v12;
  char isCalculatedEqual;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;

  v5 = *(float **)(a1 + 32);
  result = (_DWORD *)(a1 + 32);
  v4 = v5;
  v6 = *((unsigned __int8 *)v5 + 24);
  if (v6 != *((unsigned __int8 *)a2 + 4) || (*((_BYTE *)v4 + 25) != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v15 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 5), a2);
    result = v15;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = v4[5];
    if (!*((_BYTE *)v4 + 26))
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      result = WTF::DataRef<WebCore::StyleInheritedData>::access((uint64_t *)result);
      v9 = result + 5;
      if (result + 5 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 24) == 11)
      {
        v16 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v14 = result + 5;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
        v9 = v14;
        result = v16;
      }
      v10 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 24) = v10;
      *((_BYTE *)result + 25) = *((_BYTE *)a2 + 5);
      if (v10 - 2 >= 9)
      {
        if (v10 > 0xD)
          goto LABEL_15;
        if (((1 << v10) & 0x3003) != 0)
        {
          *v9 = 0;
          goto LABEL_15;
        }
        if (v10 != 11)
          goto LABEL_15;
        v12 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v11 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 26) = v11;
        if (v11)
        {
          *v9 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v12 = *(_DWORD *)a2;
      }
      *v9 = v12;
      goto LABEL_15;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setLineHeight(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  float *v4;
  float *v5;
  int v6;
  float v7;
  float v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  int v12;
  char isCalculatedEqual;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;

  v5 = *(float **)(a1 + 32);
  result = (_DWORD *)(a1 + 32);
  v4 = v5;
  v6 = *((unsigned __int8 *)v5 + 16);
  if (v6 != *((unsigned __int8 *)a2 + 4) || (*((_BYTE *)v4 + 17) != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v15 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 3), a2);
    result = v15;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = v4[3];
    if (!*((_BYTE *)v4 + 18))
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      result = WTF::DataRef<WebCore::StyleInheritedData>::access((uint64_t *)result);
      v9 = result + 3;
      if (result + 3 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 16) == 11)
      {
        v16 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v14 = result + 3;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
        v9 = v14;
        result = v16;
      }
      v10 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 16) = v10;
      *((_BYTE *)result + 17) = *((_BYTE *)a2 + 5);
      if (v10 - 2 >= 9)
      {
        if (v10 > 0xD)
          goto LABEL_15;
        if (((1 << v10) & 0x3003) != 0)
        {
          *v9 = 0;
          goto LABEL_15;
        }
        if (v10 != 11)
          goto LABEL_15;
        v12 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v11 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 18) = v11;
        if (v11)
        {
          *v9 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v12 = *(_DWORD *)a2;
      }
      *v9 = v12;
      goto LABEL_15;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setPaddingTop(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[76];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[77] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 72), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 18);
    if (!v5[78])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v9 + 3);
      v10 = result + 18;
      if (result + 18 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 76) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 18;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 76) = v11;
      *((_BYTE *)result + 77) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 78) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setMarginBottom(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[60];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[61] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 56), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 14);
    if (!v5[62])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v9 + 3);
      v10 = result + 14;
      if (result + 14 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 60) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 14;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 60) = v11;
      *((_BYTE *)result + 61) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 62) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setPaddingBottom(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[92];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[93] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 88), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 22);
    if (!v5[94])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v9 + 3);
      v10 = result + 22;
      if (result + 22 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 92) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 22;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 92) = v11;
      *((_BYTE *)result + 93) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 94) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setMarginTop(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[44];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[45] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 40), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 10);
    if (!v5[46])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v9 + 3);
      v10 = result + 10;
      if (result + 10 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 44) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 10;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 44) = v11;
      *((_BYTE *)result + 45) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 46) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setWidth(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  WTF *v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 8);
  v5 = v4[8];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[9] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 4), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 1);
      if (!v4[10])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  v8 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  result = *((_QWORD *)v8 + 1);
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleBoxData::copy((WebCore::StyleBoxData *)result, &v16);
    result = v16;
    v13 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v16;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        if (*(_BYTE *)(v13 + 56) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 52));
        }
        if (*(_BYTE *)(v13 + 48) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 44));
        }
        if (*(_BYTE *)(v13 + 40) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 36));
        }
        if (*(_BYTE *)(v13 + 32) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 28));
        }
        if (*(_BYTE *)(v13 + 24) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 20));
        }
        if (*(_BYTE *)(v13 + 16) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 12));
        }
        if (*(_BYTE *)(v13 + 8) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 4));
        }
        WTF::fastFree((WTF *)v13, v12);
        result = *((_QWORD *)v8 + 1);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  v9 = (_DWORD *)(result + 4);
  if ((WebCore::Length *)(result + 4) != a2)
  {
    if (*(_BYTE *)(result + 8) == 11)
    {
      v15 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      result = v15;
    }
    v10 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(result + 8) = v10;
    *(_BYTE *)(result + 9) = *((_BYTE *)a2 + 5);
    if (v10 - 2 >= 9)
    {
      if (v10 > 0xD)
        goto LABEL_16;
      if (((1 << v10) & 0x3003) != 0)
      {
        *v9 = 0;
        goto LABEL_16;
      }
      if (v10 != 11)
        goto LABEL_16;
      v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v11 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(result + 10) = v11;
      if (v11)
      {
        *v9 = *(_DWORD *)a2;
LABEL_16:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v14 = *(_DWORD *)a2;
    }
    *v9 = v14;
    goto LABEL_16;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setHeight(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  WTF *v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 8);
  v5 = v4[16];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[17] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 12), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 3);
      if (!v4[18])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  v8 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  result = *((_QWORD *)v8 + 1);
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleBoxData::copy((WebCore::StyleBoxData *)result, &v16);
    result = v16;
    v13 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = v16;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        if (*(_BYTE *)(v13 + 56) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 52));
        }
        if (*(_BYTE *)(v13 + 48) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 44));
        }
        if (*(_BYTE *)(v13 + 40) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 36));
        }
        if (*(_BYTE *)(v13 + 32) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 28));
        }
        if (*(_BYTE *)(v13 + 24) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 20));
        }
        if (*(_BYTE *)(v13 + 16) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 12));
        }
        if (*(_BYTE *)(v13 + 8) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 4));
        }
        WTF::fastFree((WTF *)v13, v12);
        result = *((_QWORD *)v8 + 1);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  v9 = (_DWORD *)(result + 12);
  if ((WebCore::Length *)(result + 12) != a2)
  {
    if (*(_BYTE *)(result + 16) == 11)
    {
      v15 = result;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
      result = v15;
    }
    v10 = *((unsigned __int8 *)a2 + 4);
    *(_BYTE *)(result + 16) = v10;
    *(_BYTE *)(result + 17) = *((_BYTE *)a2 + 5);
    if (v10 - 2 >= 9)
    {
      if (v10 > 0xD)
        goto LABEL_16;
      if (((1 << v10) & 0x3003) != 0)
      {
        *v9 = 0;
        goto LABEL_16;
      }
      if (v10 != 11)
        goto LABEL_16;
      v14 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v11 = *((unsigned __int8 *)a2 + 6);
      *(_BYTE *)(result + 18) = v11;
      if (v11)
      {
        *v9 = *(_DWORD *)a2;
LABEL_16:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v14 = *(_DWORD *)a2;
    }
    *v9 = v14;
    goto LABEL_16;
  }
  return result;
}

void WebCore::NinePieceImage::Data::~Data(WebCore::NinePieceImage::Data *this)
{
  _DWORD *v2;

  if (*((_BYTE *)this + 108) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 26));
  }
  if (*((_BYTE *)this + 100) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 24));
  }
  if (*((_BYTE *)this + 92) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 22));
  }
  if (*((_BYTE *)this + 84) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 20));
  }
  if (*((_BYTE *)this + 76) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 18));
  }
  if (*((_BYTE *)this + 68) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 16));
  }
  if (*((_BYTE *)this + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 14));
  }
  if (*((_BYTE *)this + 52) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 12));
  }
  if (*((_BYTE *)this + 44) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 10));
  }
  if (*((_BYTE *)this + 36) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 8));
  }
  if (*((_BYTE *)this + 28) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 6));
  }
  if (*((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
  v2 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

WebCore::Node *WebCore::Style::BuilderConverter::convertTextLengthOrNormal(WebCore::Style::BuilderConverter *this, WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  WebCore::Node *v16;
  __int128 v17;
  __n128 v18;
  WebCore::Node *result;
  __int128 v20;
  WebCore::Node *v21;
  double v22;
  double v23;
  double v24;
  float v25;
  __int16 v26;
  WebCore::CSSCalcValue *v27;
  void *v28;
  float v29;
  __int128 v30;
  WebCore::Node *v31;
  __int128 v32;
  WTF *v33;
  __int128 v34;
  __int128 v35;
  WebCore::Node *v36;
  __int128 v37;
  __int128 v38;

  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1944CB154);
  }
  v5 = *((_QWORD *)a2 + 6);
  if (v5
    && (*(_WORD *)(v5 + 28) & 0x20) != 0
    && (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24) || !*(_QWORD *)(v5 + 32)))
  {
    v20 = *((_OWORD *)a2 + 5);
    v34 = *((_OWORD *)a2 + 4);
    v35 = v20;
    v21 = (WebCore::Node *)*((_QWORD *)a2 + 12);
    if (v21)
      *((_DWORD *)v21 + 6) += 2;
    v36 = v21;
    v37 = *(_OWORD *)((char *)a2 + 104);
    v38 = *(_OWORD *)((char *)a2 + 120);
    LODWORD(v37) = 1065353216;
LABEL_30:
    BYTE4(v37) = 1;
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 528);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 24);
    if ((*(_BYTE *)(v8 + 236) & 0x20) != 0)
      v9 = 1.0;
    else
      v9 = *(float *)(v7 + 596);
    v10 = v9 * *(float *)(v8 + 184);
    v11 = *((_QWORD *)a2 + 8);
  }
  else
  {
    v11 = *((_QWORD *)a2 + 8);
    if (v11)
      v10 = *(float *)(*(_QWORD *)(v11 + 24) + 184);
    else
      v10 = 1.0;
    if (*((_BYTE *)a2 + 108))
      v10 = *((float *)a2 + 26);
  }
  if (v11)
    v12 = *(float *)(*(_QWORD *)(v11 + 24) + 184);
  else
    v12 = 1.0;
  v13 = (__int128 *)((char *)a2 + 64);
  v14 = (__int128 *)((char *)a2 + 104);
  if (*((_BYTE *)a2 + 108))
    v12 = *((float *)a2 + 26);
  if (v10 != v12)
  {
    v30 = *((_OWORD *)a2 + 5);
    v34 = *v13;
    v35 = v30;
    v31 = (WebCore::Node *)*((_QWORD *)a2 + 12);
    if (v31)
      *((_DWORD *)v31 + 6) += 2;
    v36 = v31;
    v32 = *(_OWORD *)((char *)a2 + 120);
    v37 = *v14;
    v38 = v32;
    *(float *)&v37 = v10;
    goto LABEL_30;
  }
  v15 = *((_OWORD *)a2 + 5);
  v34 = *v13;
  v35 = v15;
  v16 = (WebCore::Node *)*((_QWORD *)a2 + 12);
  if (v16)
    *((_DWORD *)v16 + 6) += 2;
  v36 = v16;
  v17 = *(_OWORD *)((char *)a2 + 120);
  v37 = *v14;
  v38 = v17;
LABEL_17:
  if ((*((_WORD *)a3 + 2) & 0x7F) == 0x50 && *((_WORD *)a3 + 4) == 90)
  {
LABEL_25:
    *(_DWORD *)this = 0;
    *((_WORD *)this + 2) = 4;
    *((_BYTE *)this + 6) = 0;
    goto LABEL_20;
  }
  if (WebCore::CSSPrimitiveValue::isLength(a3))
  {
    WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>((uint64_t)a3, (uint64_t)&v34, (uint64_t)this, v18);
    goto LABEL_20;
  }
  if (WebCore::CSSPrimitiveValue::primitiveType(a3) == 3)
  {
    v22 = WebCore::CSSPrimitiveValue::doubleValue(a3);
    v23 = -33554430.0;
    if (v22 > -33554430.0)
      v23 = v22;
    if (v22 >= 33554429.0)
      v24 = 33554429.0;
    else
      v24 = v23;
    v25 = v24;
    *(float *)this = v25;
    v26 = 3;
  }
  else
  {
    if (WebCore::CSSPrimitiveValue::primitiveType(a3) == 75)
    {
      if ((*((_WORD *)a3 + 2) & 0x7F) == 0x49)
        v27 = (WebCore::CSSCalcValue *)*((_QWORD *)a3 + 1);
      else
        v27 = 0;
      WebCore::CSSCalcValue::createCalculationValue(v27, (const WebCore::CSSToLengthConversionData *)&v34, &v33);
      WebCore::Length::Length((uint64_t)this, &v33);
      WTF::Ref<WebCore::CalculationValue,WTF::RawPtrTraits<WebCore::CalculationValue>,WTF::DefaultRefDerefTraits<WebCore::CalculationValue>>::~Ref(&v33, v28);
      goto LABEL_20;
    }
    if (WebCore::CSSPrimitiveValue::primitiveType(a3) != 1)
      goto LABEL_25;
    v29 = WebCore::CSSPrimitiveValue::doubleValue(a3);
    *(float *)this = v29;
    v26 = 4;
  }
  *((_WORD *)this + 2) = v26;
  *((_BYTE *)this + 6) = 1;
LABEL_20:
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return (WebCore::Node *)WebCore::Node::removedLastRef(result);
    }
    else
    {
      *((_DWORD *)result + 6) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setVisitedLinkOutlineColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WebCore::StyleMiscNonInheritedData *v15;
  _DWORD *v16;
  WebCore::StyleVisitedLinkColorData *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WebCore::RenderStyle *v24;
  const WebCore::StyleColor *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29[4];
  uint64_t *v30;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 32) + 56);
  v5 = *(unsigned int *)(v4 + 112);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v29[0] = (uint64_t)&v26;
    this = ((uint64_t (*)(uint64_t *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v29, v4 + 104, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v12 = *((_QWORD *)v11 + 4);
    if (*(_DWORD *)v12 != 1)
    {
      v13 = v11;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v11 + 4), v29);
      v12 = v29[0];
      v15 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v13 + 4);
      *((_QWORD *)v13 + 4) = v29[0];
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v15, v14);
          WTF::fastFree(v22, v23);
          v12 = *((_QWORD *)v13 + 4);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    v16 = *(_DWORD **)(v12 + 56);
    if (*v16 != 1)
    {
      WebCore::StyleVisitedLinkColorData::copy(*(WebCore::StyleVisitedLinkColorData **)(v12 + 56), v29);
      v16 = (_DWORD *)v29[0];
      v17 = *(WebCore::StyleVisitedLinkColorData **)(v12 + 56);
      *(_QWORD *)(v12 + 56) = v29[0];
      if (v17)
      {
        if (*(_DWORD *)v17 == 1)
        {
          WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v17);
          WTF::fastFree(v20, v21);
          v16 = *(_DWORD **)(v12 + 56);
        }
        else
        {
          --*(_DWORD *)v17;
        }
      }
    }
    v29[0] = (uint64_t)&v28;
    v29[1] = (uint64_t)&v28;
    v29[2] = (uint64_t)&v28;
    v29[3] = (uint64_t)&v28;
    v18 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v18 == -1)
    {
      v24 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setBorderBottomColor(v24, v25);
    }
    v30 = v29;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, uint64_t **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v18])(&v26, &v30, a2);
    v19 = v16[28];
    if ((_DWORD)v19 == -1)
    {
      if (v27 == -1)
        return this;
    }
    else if (v27 == -1)
    {
      this = ((uint64_t (*)(uint64_t *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(v29, v16 + 26);
      v16[28] = -1;
LABEL_31:
      if (v27 != -1)
        return ((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v27])(v29, &v26);
      return this;
    }
    v29[0] = (uint64_t)(v16 + 26);
    this = ((uint64_t (*)(uint64_t *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                    + v27))(v29, v16 + 26, &v26);
    goto LABEL_31;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

uint64_t WebCore::RenderStyle::setBorderBottomColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  WebCore::RenderStyle *v17;
  const WebCore::StyleColor *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  _QWORD v22[4];
  _QWORD *v23;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(this + 8) + 24);
  v5 = *(unsigned int *)(v4 + 184);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v22[0] = &v19;
    this = ((uint64_t (*)(_QWORD *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v22, v4 + 176, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v12 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v11 + 3);
    v22[0] = &v21;
    v22[1] = &v21;
    v22[2] = &v21;
    v22[3] = &v21;
    v13 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v13 == -1)
    {
      v17 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setBorderRightColor(v17, v18);
    }
    v14 = v12;
    v15 = v12 + 44;
    v23 = v22;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v19, &v23, a2);
    v16 = v14[46];
    if ((_DWORD)v16 == -1)
    {
      if (v20 == -1)
        return this;
    }
    else if (v20 == -1)
    {
      this = ((uint64_t (*)(_QWORD *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(v22, v15);
      v14[46] = -1;
LABEL_23:
      if (v20 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(v22, &v19);
      return this;
    }
    v22[0] = v15;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                   + v20))(v22, v15, &v19);
    goto LABEL_23;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

uint64_t WebCore::RenderStyle::setBorderRightColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  WebCore::RenderStyle *v17;
  const WebCore::StyleColor *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  _QWORD v22[4];
  _QWORD *v23;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(this + 8) + 24);
  v5 = *(unsigned int *)(v4 + 136);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v22[0] = &v19;
    this = ((uint64_t (*)(_QWORD *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v22, v4 + 128, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v12 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v11 + 3);
    v22[0] = &v21;
    v22[1] = &v21;
    v22[2] = &v21;
    v22[3] = &v21;
    v13 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v13 == -1)
    {
      v17 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setBorderLeftColor(v17, v18);
    }
    v14 = v12;
    v15 = v12 + 32;
    v23 = v22;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v19, &v23, a2);
    v16 = v14[34];
    if ((_DWORD)v16 == -1)
    {
      if (v20 == -1)
        return this;
    }
    else if (v20 == -1)
    {
      this = ((uint64_t (*)(_QWORD *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(v22, v15);
      v14[34] = -1;
LABEL_23:
      if (v20 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(v22, &v19);
      return this;
    }
    v22[0] = v15;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                   + v20))(v22, v15, &v19);
    goto LABEL_23;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

uint64_t WebCore::RenderStyle::setBorderLeftColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  WebCore::RenderStyle *v17;
  const WebCore::StyleColor *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  _QWORD v22[4];
  _QWORD *v23;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(this + 8) + 24);
  v5 = *(unsigned int *)(v4 + 112);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v22[0] = &v19;
    this = ((uint64_t (*)(_QWORD *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v22, v4 + 104, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v12 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v11 + 3);
    v22[0] = &v21;
    v22[1] = &v21;
    v22[2] = &v21;
    v22[3] = &v21;
    v13 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v13 == -1)
    {
      v17 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setBorderTopColor(v17, v18);
    }
    v14 = v12;
    v15 = v12 + 26;
    v23 = v22;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v19, &v23, a2);
    v16 = v14[28];
    if ((_DWORD)v16 == -1)
    {
      if (v20 == -1)
        return this;
    }
    else if (v20 == -1)
    {
      this = ((uint64_t (*)(_QWORD *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(v22, v15);
      v14[28] = -1;
LABEL_23:
      if (v20 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(v22, &v19);
      return this;
    }
    v22[0] = v15;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                   + v20))(v22, v15, &v19);
    goto LABEL_23;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

uint64_t WebCore::RenderStyle::setBorderTopColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  WebCore::RenderStyle *v17;
  const WebCore::StyleColor *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  _QWORD v22[4];
  _QWORD *v23;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(this + 8) + 24);
  v5 = *(unsigned int *)(v4 + 160);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v22[0] = &v19;
    this = ((uint64_t (*)(_QWORD *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v22, v4 + 152, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v12 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v11 + 3);
    v22[0] = &v21;
    v22[1] = &v21;
    v22[2] = &v21;
    v22[3] = &v21;
    v13 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v13 == -1)
    {
      v17 = (WebCore::RenderStyle *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RenderStyle::setOutlineColor(v17, v18);
    }
    v14 = v12;
    v15 = v12 + 38;
    v23 = v22;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v19, &v23, a2);
    v16 = v14[40];
    if ((_DWORD)v16 == -1)
    {
      if (v20 == -1)
        return this;
    }
    else if (v20 == -1)
    {
      this = ((uint64_t (*)(_QWORD *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(v22, v15);
      v14[40] = -1;
LABEL_23:
      if (v20 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(v22, &v19);
      return this;
    }
    v22[0] = v15;
    this = ((uint64_t (*)(_QWORD *, _DWORD *, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                   + v20))(v22, v15, &v19);
    goto LABEL_23;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

uint64_t WebCore::RenderStyle::setOutlineColor(uint64_t this, const WebCore::StyleColor *a2)
{
  WTF **v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  BOOL v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::FillLayer *v17;
  const WebCore::FillLayer *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  _QWORD v22[4];
  _QWORD *v23;

  v3 = (WTF **)(this + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(this + 8) + 16);
  v5 = *(unsigned int *)(v4 + 40);
  v6 = *((_DWORD *)a2 + 2);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 != -1 && v8)
  {
    v22[0] = &v19;
    this = ((uint64_t (*)(_QWORD *, uint64_t, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v5])(v22, v4 + 32, a2);
    if ((this & 1) != 0)
      return this;
LABEL_19:
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    WTF::DataRef<WebCore::StyleBackgroundData>::access((uint64_t *)v11 + 2);
    v22[0] = &v21;
    v22[1] = &v21;
    v22[2] = &v21;
    v22[3] = &v21;
    v13 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v13 == -1)
    {
      v17 = (WebCore::FillLayer *)std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t)WebCore::FillLayer::FillLayer(v17, v18);
    }
    v14 = v12;
    v15 = v12 + 32;
    v23 = v22;
    this = (uint64_t)((uint64_t (*)(uint64_t *__return_ptr, _QWORD **, const WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v13])(&v19, &v23, a2);
    v16 = *(unsigned int *)(v14 + 40);
    if ((_DWORD)v16 == -1)
    {
      if (v20 == -1)
        return this;
    }
    else if (v20 == -1)
    {
      this = ((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(v22, v15);
      *(_DWORD *)(v14 + 40) = -1;
LABEL_23:
      if (v20 != -1)
        return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v20])(v22, &v19);
      return this;
    }
    v22[0] = v15;
    this = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentIS26_LNS0_6_TraitE1EEEEEvOT_EUlRS2C_OT0_E_JRS27_S2B_EEEDcmS2D_DpOT0____fdiagonal
                                                                  + v20))(v22, v15, &v19);
    goto LABEL_23;
  }
  if ((_DWORD)v5 == -1)
    v10 = v6 == -1;
  else
    v10 = v8;
  if (!v10)
    goto LABEL_19;
  return this;
}

WebCore::FillLayer *WebCore::FillLayer::FillLayer(WebCore::FillLayer *this, const WebCore::FillLayer *a2)
{
  uint64_t v4;
  int *v5;
  unsigned int v6;
  int v7;
  int *v8;
  unsigned int v9;
  int v10;
  int *v11;
  unsigned int v12;
  int v13;
  int *v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  const WebCore::FillLayer *v36;
  WebCore::FillLayer *v38;
  WebCore::FillLayer *v39;
  WTF *v40;
  void *v41;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  v4 = *((_QWORD *)a2 + 2);
  if (v4)
    ++*(_DWORD *)(v4 + 8);
  *((_DWORD *)this + 6) = 0;
  v5 = (int *)((char *)this + 24);
  *((_QWORD *)this + 2) = v4;
  *(_WORD *)((char *)this + 29) = 0;
  v6 = *((unsigned __int8 *)a2 + 28);
  *((_BYTE *)this + 28) = v6;
  *((_BYTE *)this + 29) = *((_BYTE *)a2 + 29);
  if (v6 <= 0xD)
  {
    v7 = 1 << v6;
    if ((v7 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 30) = *((_BYTE *)a2 + 30);
      *v5 = *((_DWORD *)a2 + 6);
    }
    else if ((v7 & 0x3003) != 0)
    {
      *v5 = 0;
    }
    else
    {
      *v5 = *((_DWORD *)a2 + 6);
      WebCore::Length::ref(v5);
    }
  }
  *((_DWORD *)this + 8) = 0;
  v8 = (int *)((char *)this + 32);
  *(_WORD *)((char *)this + 37) = 0;
  v9 = *((unsigned __int8 *)a2 + 36);
  *((_BYTE *)this + 36) = v9;
  *((_BYTE *)this + 37) = *((_BYTE *)a2 + 37);
  if (v9 <= 0xD)
  {
    v10 = 1 << v9;
    if ((v10 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 38) = *((_BYTE *)a2 + 38);
      *v8 = *((_DWORD *)a2 + 8);
    }
    else if ((v10 & 0x3003) != 0)
    {
      *v8 = 0;
    }
    else
    {
      *v8 = *((_DWORD *)a2 + 8);
      WebCore::Length::ref(v8);
    }
  }
  *((_DWORD *)this + 10) = 0;
  v11 = (int *)((char *)this + 40);
  *(_WORD *)((char *)this + 45) = 0;
  v12 = *((unsigned __int8 *)a2 + 44);
  *((_BYTE *)this + 44) = v12;
  *((_BYTE *)this + 45) = *((_BYTE *)a2 + 45);
  if (v12 <= 0xD)
  {
    v13 = 1 << v12;
    if ((v13 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 46) = *((_BYTE *)a2 + 46);
      *v11 = *((_DWORD *)a2 + 10);
    }
    else if ((v13 & 0x3003) != 0)
    {
      *v11 = 0;
    }
    else
    {
      *v11 = *((_DWORD *)a2 + 10);
      WebCore::Length::ref(v11);
    }
  }
  *((_DWORD *)this + 12) = 0;
  v14 = (int *)((char *)this + 48);
  *(_WORD *)((char *)this + 53) = 0;
  v15 = *((unsigned __int8 *)a2 + 52);
  *((_BYTE *)this + 52) = v15;
  *((_BYTE *)this + 53) = *((_BYTE *)a2 + 53);
  if (v15 <= 0xD)
  {
    v16 = 1 << v15;
    if ((v16 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 54) = *((_BYTE *)a2 + 54);
      *v14 = *((_DWORD *)a2 + 12);
    }
    else if ((v16 & 0x3003) != 0)
    {
      *v14 = 0;
    }
    else
    {
      *v14 = *((_DWORD *)a2 + 12);
      WebCore::Length::ref(v14);
    }
  }
  *((_WORD *)this + 28) = *((_WORD *)a2 + 28);
  v17 = *((_WORD *)this + 29) & 0xFFFC | *((_WORD *)a2 + 29) & 3;
  *((_WORD *)this + 29) = *((_WORD *)this + 29) & 0xFFFC | *((_WORD *)a2 + 29) & 3;
  v18 = v17 & 0xFFFFFFE3 | (4 * ((*((unsigned __int16 *)a2 + 29) >> 2) & 7));
  *((_WORD *)this + 29) = v18;
  v19 = v18 & 0xFFFFFF9F | (32 * ((*((unsigned __int16 *)a2 + 29) >> 5) & 3));
  *((_WORD *)this + 29) = v19;
  LOWORD(v19) = v19 & 0xF87F | (((*((_WORD *)a2 + 29) >> 7) & 0xF) << 7);
  *((_WORD *)this + 29) = v19;
  *((_WORD *)this + 29) = v19 & 0xE7FF | *((_WORD *)a2 + 29) & 0x1800;
  v20 = *((_DWORD *)this + 15) & 0xFFFFFFE0 | *((_DWORD *)a2 + 15) & 0x1F;
  *((_DWORD *)this + 15) = v20;
  v21 = v20 & 0xFFFFFF9F | (32 * ((*((_DWORD *)a2 + 15) >> 5) & 3));
  *((_DWORD *)this + 15) = v21;
  v22 = v21 & 0xFFFFFF7F | (((*((_DWORD *)a2 + 15) >> 7) & 1) << 7);
  *((_DWORD *)this + 15) = v22;
  v23 = v22 & 0xFFFFFEFF | (((*((_DWORD *)a2 + 15) >> 8) & 1) << 8);
  *((_DWORD *)this + 15) = v23;
  v24 = v23 & 0xFFFFFDFF | (((*((_DWORD *)a2 + 15) >> 9) & 1) << 9);
  *((_DWORD *)this + 15) = v24;
  v25 = v24 & 0xFFFFFBFF | (((*((_DWORD *)a2 + 15) >> 10) & 1) << 10);
  *((_DWORD *)this + 15) = v25;
  v26 = v25 & 0xFFFFF7FF | (((*((_DWORD *)a2 + 15) >> 11) & 1) << 11);
  *((_DWORD *)this + 15) = v26;
  v27 = v26 & 0xFFFFEFFF | (((*((_DWORD *)a2 + 15) >> 12) & 1) << 12);
  *((_DWORD *)this + 15) = v27;
  v28 = v27 & 0xFFFFDFFF | (((*((_DWORD *)a2 + 15) >> 13) & 1) << 13);
  *((_DWORD *)this + 15) = v28;
  v29 = v28 & 0xFFFFBFFF | (((*((_DWORD *)a2 + 15) >> 14) & 1) << 14);
  *((_DWORD *)this + 15) = v29;
  v30 = v29 & 0xFFFF7FFF | (((*((_DWORD *)a2 + 15) >> 15) & 1) << 15);
  *((_DWORD *)this + 15) = v30;
  v31 = v30 & 0xFFFCFFFF | ((HIWORD(*((_DWORD *)a2 + 15)) & 3) << 16);
  *((_DWORD *)this + 15) = v31;
  v32 = v31 & 0xFFF3FFFF | (((*((_DWORD *)a2 + 15) >> 18) & 3) << 18);
  *((_DWORD *)this + 15) = v32;
  v33 = v32 & 0xFFEFFFFF | (((*((_DWORD *)a2 + 15) >> 20) & 1) << 20);
  *((_DWORD *)this + 15) = v33;
  v34 = v33 & 0xFFDFFFFF | (((*((_DWORD *)a2 + 15) >> 21) & 1) << 21);
  *((_DWORD *)this + 15) = v34;
  v35 = v34 & 0xFFBFFFFF | (((*((_DWORD *)a2 + 15) >> 22) & 1) << 22);
  *((_DWORD *)this + 15) = v35;
  *((_DWORD *)this + 15) = v35 & 0xFF7FFFFF | (((*((_DWORD *)a2 + 15) >> 23) & 1) << 23);
  v36 = (const WebCore::FillLayer *)*((_QWORD *)a2 + 1);
  if (v36)
  {
    v38 = (WebCore::FillLayer *)WTF::fastMalloc((WTF *)0x40);
    WebCore::FillLayer::FillLayer(v38, v36);
    v39 = (WebCore::FillLayer *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v38;
    if (v39)
    {
      if (*(_DWORD *)v39 == 1)
      {
        WebCore::FillLayer::~FillLayer(v39);
        WTF::fastFree(v40, v41);
      }
      else
      {
        --*(_DWORD *)v39;
      }
    }
  }
  return this;
}

WebCore::Node *WebCore::Style::BuilderConverter::convertLengthSizing(WebCore::Node *this, const WebCore::Style::BuilderState *a2, const WebCore::CSSValue *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  WebCore::Node *v10;
  __n128 v11;
  __int16 v12;
  unsigned int v13;
  __int16 v15;
  int v16;
  int v17;
  __int128 v18;
  WebCore::Node *v19;
  double v21;
  float v22;
  unsigned __int8 *v23;
  int v24;
  _BYTE *v25;
  uint64_t v26;
  __int16 v27;
  unsigned __int8 *v28;
  int v29;
  WebCore::CSSCalcValue *v30;
  void *v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const WebCore::Style::BuilderState *v36;
  WebCore::Style::AnchorPositionEvaluator *v37;
  double v38;
  __int128 v39;
  __int128 v40;
  WebCore::Node *v41;
  __int128 v42;
  __n128 v43;
  WTF *v44;

  if (((*((unsigned __int16 *)a3 + 2) | (*((unsigned __int8 *)a3 + 6) << 16)) & 0x3F800) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1944CC270);
  }
  v5 = (uint64_t)this;
  if ((*((_WORD *)a3 + 2) & 0x7F) != 0x50 || (v6 = *((unsigned __int16 *)a3 + 4), !*((_WORD *)a3 + 4)))
  {
    v7 = *((_QWORD *)a2 + 6);
    if (!v7 || (*(_WORD *)(v7 + 28) & 0x20) == 0)
    {
      v8 = (__int128 *)((char *)a2 + 64);
LABEL_7:
      v9 = v8[1];
      v39 = *v8;
      v40 = v9;
      v10 = (WebCore::Node *)*((_QWORD *)a2 + 12);
      if (v10)
        *((_DWORD *)v10 + 6) += 2;
      v41 = v10;
      v42 = *(_OWORD *)((char *)a2 + 104);
      v11 = *(__n128 *)((char *)a2 + 120);
      v43 = v11;
      goto LABEL_10;
    }
    if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      v26 = *(_QWORD *)(v7 + 32);
      v8 = (__int128 *)((char *)a2 + 64);
      if (v26)
        goto LABEL_7;
    }
    else
    {
      v8 = (__int128 *)((char *)a2 + 64);
    }
    v18 = v8[1];
    v39 = *v8;
    v40 = v18;
    v19 = (WebCore::Node *)*((_QWORD *)a2 + 12);
    if (v19)
      *((_DWORD *)v19 + 6) += 2;
    v41 = v19;
    v42 = *(_OWORD *)((char *)a2 + 104);
    v11 = *(__n128 *)((char *)a2 + 120);
    v43 = v11;
    LODWORD(v42) = 1065353216;
    BYTE4(v42) = 1;
LABEL_10:
    v12 = *((_WORD *)a3 + 2);
    v13 = v12 & 0x7F;
    if (v13 - 63 > 0x11 || ((1 << ((*((_WORD *)a3 + 2) & 0x7F) - 63)) & 0x34001) == 0)
    {
      if (v13 == 73)
      {
        v23 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
        v24 = v23[12];
        if (v24 != 1 && (v24 - 5) > 3)
          goto LABEL_37;
        v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v23 + 72))(*(_QWORD *)(*((_QWORD *)a3 + 1) + 8));
      }
      if (v13 - 60 <= 0x15 && ((1 << (v13 - 60)) & 0x201FE7) != 0
        || v13 - 4 < 8
        || v13 >= 0x19 && v13 < 0x31
        || v13 - 49 < 6
        || v13 == 81)
      {
        WebCore::CSSPrimitiveValue::computeLength<WebCore::Length>((uint64_t)a3, (uint64_t)&v39, v5, v11);
        v15 = *((_WORD *)a3 + 2);
        v16 = v15 & 0x7F;
        v17 = 22;
        if ((v16 - 79) >= 2)
        {
          if (v16 == 77)
          {
            v17 = 20;
          }
          else if (v16 != 63)
          {
            v17 = *((_WORD *)a3 + 2) & 0x7F;
            if ((v15 & 0x7F) == 0x49)
            {
              v25 = *(_BYTE **)(*((_QWORD *)a3 + 1) + 8);
              if (v25[12] == 1)
              {
LABEL_53:
                v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v25 + 72))(*(_QWORD *)(*((_QWORD *)a3 + 1) + 8));
              }
              else
              {
                v17 = 1;
                switch(v25[12])
                {
                  case 0:
                    break;
                  case 2:
                    v17 = 3;
                    break;
                  case 3:
                    v17 = 74;
                    break;
                  case 4:
                    v17 = 75;
                    break;
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                    goto LABEL_53;
                  default:
                    v17 = 0;
                    break;
                }
              }
            }
          }
        }
        *(_BYTE *)(v5 + 5) = v17 == 81;
        goto LABEL_24;
      }
      v12 = *((_WORD *)a3 + 2);
      v13 = v12 & 0x7F;
    }
LABEL_37:
    if (v13 - 63 <= 0x11 && ((1 << (v13 - 63)) & 0x34001) != 0)
    {
LABEL_74:
      if (WebCore::CSSPrimitiveValue::primitiveType(a3) == 75)
      {
        if ((*((_WORD *)a3 + 2) & 0x7F) == 0x49)
          v30 = (WebCore::CSSCalcValue *)*((_QWORD *)a3 + 1);
        else
          v30 = 0;
        WebCore::CSSCalcValue::createCalculationValue(v30, (const WebCore::CSSToLengthConversionData *)&v39, &v44);
        WebCore::Length::Length(v5, &v44);
        v32 = v44;
        v44 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 1)
          {
            v33 = *((_QWORD *)v32 + 1);
            *((_QWORD *)v32 + 1) = 0;
            if (v33)
              (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            WTF::fastFree(v32, v31);
          }
          else
          {
            --*(_DWORD *)v32;
          }
        }
      }
      else if (WebCore::CSSPrimitiveValue::primitiveType(a3) == 76)
      {
        if (WebCore::CSSPrimitiveValue::primitiveType(a3) == 76)
          v37 = (WebCore::Style::AnchorPositionEvaluator *)*((_QWORD *)a3 + 1);
        else
          v37 = 0;
        WebCore::Style::AnchorPositionEvaluator::resolveAnchorValue(v37, a2, v36, v5);
      }
      else
      {
        *(_DWORD *)v5 = 0;
        *(_WORD *)(v5 + 4) = 4;
        *(_BYTE *)(v5 + 6) = 0;
      }
LABEL_24:
      this = v41;
      v41 = 0;
      if (this)
      {
        if (*((_DWORD *)this + 6) == 2)
        {
          if ((*((_WORD *)this + 15) & 0x400) == 0)
            return (WebCore::Node *)WebCore::Node::removedLastRef(this);
        }
        else
        {
          *((_DWORD *)this + 6) -= 2;
        }
      }
      return this;
    }
    if ((v12 & 0x7F) == 0x49)
    {
      v28 = *(unsigned __int8 **)(*((_QWORD *)a3 + 1) + 8);
      v29 = v28[12];
      if (v29 != 1)
      {
        if (v29 == 2)
          goto LABEL_45;
        if ((v29 - 5) > 3)
          goto LABEL_74;
      }
      v13 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v28 + 72))(v28);
    }
    if (v13 != 3)
      goto LABEL_74;
    v12 = *((_WORD *)a3 + 2);
LABEL_45:
    if ((v12 & 0x7F) == 0x49)
    {
      v34 = *((_QWORD *)a3 + 1);
      v44 = 0;
      v38 = WebCore::CSSCalcValue::doubleValue(v34, (uint64_t)&v44);
      if (v44)
        WTF::fastFree((WTF *)((char *)v44 - 16), v35);
      v21 = v38;
    }
    else
    {
      v21 = *((double *)a3 + 1);
    }
    v22 = v21;
    *(float *)v5 = v22;
    *(_WORD *)(v5 + 4) = 3;
    *(_BYTE *)(v5 + 6) = 1;
    goto LABEL_24;
  }
  if (v6 == 394)
  {
LABEL_57:
    *(_DWORD *)((char *)this + 3) = 0;
    *(_DWORD *)this = 0;
  }
  else
  {
    switch(*((_WORD *)a3 + 4))
    {
      case 0x223:
        *(_DWORD *)this = 0;
        v27 = 5;
        break;
      case 0x224:
        *(_DWORD *)this = 0;
        v27 = 6;
        break;
      case 0x225:
      case 0x226:
        *(_DWORD *)this = 0;
        v27 = 7;
        break;
      case 0x227:
      case 0x228:
        *(_DWORD *)this = 0;
        v27 = 8;
        break;
      case 0x229:
        *(_DWORD *)this = 0;
        v27 = 9;
        break;
      case 0x22A:
      case 0x22B:
        *(_DWORD *)this = 0;
        v27 = 10;
        break;
      default:
        if (v6 != 599)
          goto LABEL_57;
        *(_DWORD *)this = 0;
        v27 = 12;
        break;
    }
    *((_WORD *)this + 2) = v27;
    *((_BYTE *)this + 6) = 0;
  }
  return this;
}

_DWORD *WebCore::RenderStyle::setBottom(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 24);
  v6 = v5[28];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[29] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 24), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 6);
    if (!v5[30])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v9 + 3);
      v10 = result + 6;
      if (result + 6 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 28) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 6;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 28) = v11;
      *((_BYTE *)result + 29) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 30) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setMaxHeight(uint64_t a1, WebCore::Length *a2)
{
  _DWORD *result;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  float v7;
  float v8;
  WTF *v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  int v13;
  char isCalculatedEqual;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;

  v4 = *(_QWORD *)(a1 + 8);
  result = (_DWORD *)(a1 + 8);
  v5 = *(unsigned __int8 **)(v4 + 8);
  v6 = v5[48];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v5[49] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_10;
  if (v6 == 13)
    return result;
  if (v6 == 11)
  {
    v16 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v5 + 44), a2);
    result = v16;
    if ((isCalculatedEqual & 1) == 0)
      goto LABEL_10;
  }
  else
  {
    v7 = *((float *)v5 + 11);
    if (!v5[50])
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)a2;
    if (!*((_BYTE *)a2 + 6))
      v8 = (float)*(int *)a2;
    if (v7 != v8)
    {
LABEL_10:
      v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
      result = WTF::DataRef<WebCore::StyleBoxData>::access((uint64_t *)v9 + 1);
      v10 = result + 11;
      if (result + 11 == (_DWORD *)a2)
        return result;
      if (*((_BYTE *)result + 48) == 11)
      {
        v17 = result;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v15 = result + 11;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
        v10 = v15;
        result = v17;
      }
      v11 = *((unsigned __int8 *)a2 + 4);
      *((_BYTE *)result + 48) = v11;
      *((_BYTE *)result + 49) = *((_BYTE *)a2 + 5);
      if (v11 - 2 >= 9)
      {
        if (v11 > 0xD)
          goto LABEL_15;
        if (((1 << v11) & 0x3003) != 0)
        {
          *v10 = 0;
          goto LABEL_15;
        }
        if (v11 != 11)
          goto LABEL_15;
        v13 = *(_DWORD *)a2;
        *(_DWORD *)a2 = 0;
      }
      else
      {
        v12 = *((unsigned __int8 *)a2 + 6);
        *((_BYTE *)result + 50) = v12;
        if (v12)
        {
          *v10 = *(_DWORD *)a2;
LABEL_15:
          *((_BYTE *)a2 + 4) = 0;
          return result;
        }
        v13 = *(_DWORD *)a2;
      }
      *v10 = v13;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBoxOrient(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  uint64_t v10;
  void *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  char v16;
  WTF *v17;
  void *v18;
  uint64_t v19;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (((((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 16) & 0x20) == 0) ^ a2) & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = *((_QWORD *)v5 + 4);
    if (*(_DWORD *)v6 != 1)
    {
      v7 = v5;
      WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v19);
      v6 = v19;
      v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v7 + 4);
      *((_QWORD *)v7 + 4) = v19;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v8);
          WTF::fastFree(v17, v18);
          v6 = *((_QWORD *)v7 + 4);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
    v10 = *(_QWORD *)(v6 + 8);
    if (*(_DWORD *)v10 == 1)
    {
      result = *(_QWORD *)(v6 + 8);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)0x14);
      *(_DWORD *)result = 1;
      *(_DWORD *)(result + 4) = *(_DWORD *)(v10 + 4);
      *(_QWORD *)(result + 8) = *(_QWORD *)(v10 + 8);
      v12 = *(_BYTE *)(result + 16) & 0xF8 | *(_BYTE *)(v10 + 16) & 7;
      *(_BYTE *)(result + 16) = v12;
      v13 = v12 & 0xFFFFFFE7 | (8 * ((*(unsigned __int8 *)(v10 + 16) >> 3) & 3));
      *(_BYTE *)(result + 16) = v13;
      v14 = v13 & 0xFFFFFFDF | (32 * ((*(unsigned __int8 *)(v10 + 16) >> 5) & 1));
      *(_BYTE *)(result + 16) = v14;
      *(_BYTE *)(result + 16) = v14 & 0xBF | *(_BYTE *)(v10 + 16) & 0x40;
      v15 = *(WTF **)(v6 + 8);
      *(_QWORD *)(v6 + 8) = result;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WTF::fastFree(v15, v11);
          result = *(_QWORD *)(v6 + 8);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
    }
    if (a2)
      v16 = 32;
    else
      v16 = 0;
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 0xDF | v16;
  }
  return result;
}

unsigned __int8 *WebCore::ScrollingStateNode::removeFromParent(WebCore::ScrollingStateNode *this)
{
  unsigned __int8 *result;
  void *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WebCore::ScrollingStateNode *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  WebCore::ScrollingStateNode *v19;

  result = (unsigned __int8 *)*((_QWORD *)this + 7);
  if (!result)
    return result;
  WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebCore::ScrollingStateNode>(result, *((_QWORD *)this + 8), &v19);
  result = (unsigned __int8 *)v19;
  if (!v19)
    return result;
  result = (unsigned __int8 *)WebCore::ScrollingStateNode::removeChild((unsigned int *)v19, this);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
LABEL_8:
      v6 = *(_QWORD *)(v4 + 16) - 1;
      *(_QWORD *)(v4 + 16) = v6;
      if (v6)
      {
        v17 = __ldxr((unsigned __int8 *)v4);
        if (v17 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v4))
            goto LABEL_16;
        }
        else
        {
          __clrex();
        }
        result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
        goto LABEL_16;
      }
      v7 = *(_QWORD *)(v4 + 8);
      v8 = __ldxr((unsigned __int8 *)v4);
      if (v8 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
        {
LABEL_14:
          if (!v7)
            result = (unsigned __int8 *)WTF::fastFree((WTF *)v4, v3);
          goto LABEL_16;
        }
      }
      else
      {
        __clrex();
      }
      result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
      goto LABEL_14;
    }
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v4);
    goto LABEL_8;
  }
LABEL_16:
  *((_QWORD *)this + 8) = 0;
  v9 = v19;
  v19 = 0;
  if (!v9)
    return result;
  v10 = *((_QWORD *)v9 + 1);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
LABEL_19:
    result = (unsigned __int8 *)MEMORY[0x19AEA534C](v10);
    goto LABEL_20;
  }
  if (__stxr(1u, (unsigned __int8 *)v10))
    goto LABEL_19;
LABEL_20:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v18 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v18 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
LABEL_26:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v10);
  if (!v13)
  {
    if (v14)
      result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (!v15)
      return (unsigned __int8 *)WTF::fastFree((WTF *)v10, v3);
  }
  return result;
}

uint64_t WebCore::TextFieldInputType::sanitizeValue@<X0>(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  _WORD *v6;
  unint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t *v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  size_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  WTF *v38;
  WTF::StringImpl *v39;
  WTF *v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unsigned int v43;
  unsigned __int16 *v44;
  unsigned int v45;
  unsigned int v47;
  WTF *v49;
  size_t v50;
  WTF *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v56;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  size_t __n;
  size_t __na;
  uint64_t v63;
  WTF *v64;

  result = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_12;
  v5 = *(_DWORD *)(result + 16);
  v6 = *(_WORD **)(result + 8);
  v7 = *(unsigned int *)(result + 4);
  if ((v5 & 4) != 0)
  {
    if (v7 < 0x10)
    {
      if (!(_DWORD)v7)
        goto LABEL_11;
      v26 = *(unsigned int *)(result + 4);
      v27 = *(unsigned __int8 **)(result + 8);
      while (1)
      {
        v28 = *v27;
        if (v28 == 10 || v28 == 13)
          goto LABEL_36;
        ++v27;
        if (!--v26)
          goto LABEL_10;
      }
    }
    v8 = 0;
    v9 = 0uLL;
    v10.i64[0] = 0xD0D0D0D0D0D0D0DLL;
    v10.i64[1] = 0xD0D0D0D0D0D0D0DLL;
    v11.i64[0] = 0xA0A0A0A0A0A0A0ALL;
    v11.i64[1] = 0xA0A0A0A0A0A0A0ALL;
    do
    {
      v9 = vorrq_s8(v9, vorrq_s8(vceqq_s8(*(int8x16_t *)&v6[v8], v10), vceqq_s8(*(int8x16_t *)&v6[v8], v11)));
      v12 = v8 * 2 + 31;
      v8 += 8;
    }
    while (v12 < v7);
    if ((v7 & 0xFFFFFFF0) < v7)
    {
      v13.i64[0] = 0xD0D0D0D0D0D0D0DLL;
      v13.i64[1] = 0xD0D0D0D0D0D0D0DLL;
      v14.i64[0] = 0xA0A0A0A0A0A0A0ALL;
      v14.i64[1] = 0xA0A0A0A0A0A0A0ALL;
      v9 = vorrq_s8(v9, vorrq_s8(vceqq_s8(*(int8x16_t *)((char *)v6 + v7 - 16), v13), vceqq_s8(*(int8x16_t *)((char *)v6 + v7 - 16), v14)));
    }
    v9.i8[0] = vmaxvq_u8((uint8x16_t)v9);
  }
  else
  {
    if (v7 < 8)
    {
      if (!(_DWORD)v7)
        goto LABEL_11;
      v22 = 2 * v7;
      v23 = *(unsigned __int16 **)(result + 8);
      while (1)
      {
        v24 = *v23;
        if (v24 == 10 || v24 == 13)
          goto LABEL_36;
        ++v23;
        v22 -= 2;
        if (!v22)
          goto LABEL_10;
      }
    }
    v9 = 0uLL;
    v15 = 7;
    v16.i64[0] = 0xD000D000D000DLL;
    v16.i64[1] = 0xD000D000D000DLL;
    v17.i64[0] = 0xA000A000A000ALL;
    v17.i64[1] = 0xA000A000A000ALL;
    v18 = *(int16x8_t **)(result + 8);
    do
    {
      v19 = *v18++;
      v9 = vorrq_s8(v9, vorrq_s8((int8x16_t)vceqq_s16(v19, v16), (int8x16_t)vceqq_s16(v19, v17)));
      v15 += 8;
    }
    while (v15 < v7);
    if ((v7 & 0xFFFFFFF8) < v7)
    {
      v20.i64[0] = 0xD000D000D000DLL;
      v20.i64[1] = 0xD000D000D000DLL;
      v21.i64[0] = 0xA000A000A000ALL;
      v21.i64[1] = 0xA000A000A000ALL;
      v9 = vorrq_s8(v9, vorrq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&v6[v7 - 8], v20), (int8x16_t)vceqq_s16(*(int16x8_t *)&v6[v7 - 8], v21)));
    }
    v9.i16[0] = vmaxvq_u16((uint16x8_t)v9);
  }
  if (v9.i32[0])
  {
LABEL_36:
    if ((v5 & 4) == 0)
    {
      v30 = 0;
      v31 = 0;
      while (1)
      {
        v32 = (unsigned __int16)v6[v30];
        if (v32 <= 0xD && (v32 == 10 || v32 == 13))
          break;
        v31 -= 2;
        ++v30;
        if (-2 * v7 == v31)
          goto LABEL_52;
      }
      v60 = v31;
      __n = (size_t)&v6[v7];
      v38 = (WTF *)WTF::fastMalloc((WTF *)(2 * v7));
      v64 = v38;
      if (v30 <= v7)
      {
        v40 = v38;
        v41 = -2 * v7;
        if ((_DWORD)v30 == 1)
        {
          *(_WORD *)v38 = *v6;
        }
        else if ((_DWORD)v30)
        {
          memcpy(v38, v6, -v60);
        }
        if (v41 != v60)
        {
          v42 = (_WORD *)((char *)v6 - v60);
          v43 = v30;
          v44 = (unsigned __int16 *)__n;
          do
          {
            while (1)
            {
              v45 = *v42;
              if (v45 > 0xD)
                break;
              if (v45 != 13 && v45 != 10)
                break;
              if (++v42 == v44)
                goto LABEL_106;
            }
            if (v42 == v44)
              break;
            v44 = (unsigned __int16 *)__n;
            while (1)
            {
              v47 = *v42;
              if (v47 <= 0xD && (v47 == 10 || v47 == 13))
                break;
              ++v42;
              *((_WORD *)v40 + v43++) = v47;
              if (v42 == (unsigned __int16 *)__n)
                goto LABEL_106;
            }
          }
          while (v42 != (unsigned __int16 *)__n);
        }
LABEL_106:
        WTF::StringImpl::adopt();
        goto LABEL_110;
      }
LABEL_115:
      __break(1u);
      goto LABEL_113;
    }
    v34 = 0;
    v35 = (unsigned __int8 *)v6 + v7;
    while (1)
    {
      v36 = *((unsigned __int8 *)v6 + v34);
      if (v36 <= 0xD && (v36 == 10 || v36 == 13))
        break;
      if (v7 == ++v34)
      {
LABEL_52:
        *(_DWORD *)result += 2;
        goto LABEL_53;
      }
    }
    __na = v34;
    v49 = (WTF *)WTF::fastMalloc((WTF *)v7);
    v50 = __na;
    v64 = v49;
    if (__na > v7)
      goto LABEL_115;
    v51 = v49;
    if ((_DWORD)__na)
    {
      if ((_DWORD)__na == 1)
      {
        *(_BYTE *)v49 = *(_BYTE *)v6;
      }
      else
      {
        memcpy(v49, v6, __na);
        v50 = __na;
      }
    }
    if (v7 == v50)
    {
LABEL_109:
      WTF::StringImpl::adopt();
LABEL_110:
      WTF::fastFree(v64, v58);
      result = v63;
      if (!v63)
      {
        *a2 = 0;
        return result;
      }
      LODWORD(v7) = *(_DWORD *)(v63 + 4);
LABEL_53:
      if (v7 <= 0x80000)
      {
        *(_DWORD *)result += 2;
        *a2 = result;
        goto LABEL_55;
      }
      v39 = (WTF::StringImpl *)result;
LABEL_113:
      v59 = (uint64_t)v39;
      WTF::StringImpl::substring(v39);
      result = v59;
LABEL_55:
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, a1);
      *(_DWORD *)result -= 2;
      return result;
    }
    v52 = (unsigned __int8 *)v6 + v50;
    v53 = v50;
    while (1)
    {
      while (1)
      {
        v54 = *v52;
        if (v54 <= 0xD && (v54 == 13 || v54 == 10))
          break;
LABEL_95:
        if (v52 != v35)
        {
          while (1)
          {
            v56 = *v52;
            if (v56 <= 0xD && (v56 == 10 || v56 == 13))
              break;
            ++v52;
            *((_BYTE *)v51 + v53++) = v56;
            if (v52 == v35)
              goto LABEL_109;
          }
          if (v52 != v35)
            continue;
        }
        goto LABEL_109;
      }
      if (++v52 == v35)
      {
        v52 = (unsigned __int8 *)v6 + v7;
        goto LABEL_95;
      }
    }
  }
LABEL_10:
  if (v7 <= 0x80000)
  {
LABEL_11:
    *(_DWORD *)result += 2;
LABEL_12:
    *a2 = result;
    return result;
  }
  return WTF::StringImpl::substring((WTF::StringImpl *)result);
}

void WebCore::LocalDOMWindow::prewarmLocalStorageIfNecessary(WebCore::LocalDOMWindow *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Page *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  unsigned int v16;
  char v17;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x1944CD134);
      }
      v4 = *(_QWORD *)(v3 + 240);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 24);
          if (v6)
          {
            v7 = *(WebCore::Page **)(v6 + 8);
            if (v7)
            {
              v8 = (*(_DWORD *)v7)++;
              v9 = *((_QWORD *)v7 + 126);
              if (v9 < 0 && v9 != -1)
                goto LABEL_16;
              WebCore::LocalDOMWindow::localStorage(this, a2, (uint64_t)v15);
              v10 = v16;
              if (v16)
              {
                if (v16 == -1)
                  goto LABEL_15;
              }
              else if (v15[0])
              {
                v11 = v15[0] + 8;
                ++*(_DWORD *)(v15[0] + 8);
                v12 = *(_DWORD **)(v11 + 16);
                ++v12[2];
                (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 112))(v12);
                if (v12[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
                else
                  --v12[2];
                WTF::RefCounted<WebCore::Storage>::deref((_DWORD *)v11);
              }
              off_1E33FF6C0[v10](&v17, v15);
LABEL_15:
              v8 = *(_DWORD *)v7 - 1;
LABEL_16:
              if (v8)
              {
                *(_DWORD *)v7 = v8;
              }
              else
              {
                WebCore::Page::~Page(v7);
                WTF::fastFree(v13, v14);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::LocalDOMWindow::page(WebCore::LocalDOMWindow *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
  {
    v3 = *(_QWORD *)(v2 + 240);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
          return *(_QWORD *)(v5 + 8);
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

void WebCore::LocalDOMWindow::localStorage(WebCore::LocalDOMWindow *this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v9;
  uint64_t v10;
  const WebCore::SecurityOrigin *v11;
  int v12;
  WebCore::SecurityOrigin *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  WebCore *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  WTF *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;

  v4 = *((_QWORD *)this + 9);
  if (!v4)
    goto LABEL_52;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_52;
  if (*(_BYTE *)(v5 + 178))
  {
    __break(0xC471u);
    JUMPOUT(0x1944CD4B8);
  }
  v6 = *(_QWORD *)(v5 + 240);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0 || *(WebCore::LocalDOMWindow **)(*(_QWORD *)(v7 + 296) + 696) != this)
  {
LABEL_52:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  v9 = (_DWORD *)(v5 - 264);
  *(_DWORD *)(v5 - 264) += 2;
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v5 - 96), a2);
  if (v10)
  {
    v11 = (const WebCore::SecurityOrigin *)v10;
    if (*(_DWORD *)(v10 + 32) != 1 && (!*(_BYTE *)(v10 + 63) || *(_BYTE *)(v10 + 60) || *(_BYTE *)(v10 + 56)))
    {
      v12 = *(unsigned __int8 *)(v5 + 176);
      if (v12 == 1)
      {
        v13 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 96) + 256))(v5 - 96);
        WebCore::SecurityOrigin::isSameOriginAs(v13, v11);
LABEL_12:
        v14 = *(_QWORD *)(v5 + 240);
        if (!v14
          || (v15 = *(_QWORD *)(v14 + 8)) == 0
          || (v16 = *(_QWORD *)(v15 + 24)) == 0
          || (v17 = *(_QWORD *)(v16 + 8)) == 0)
        {
          v31 = *((_QWORD *)this + 32);
          if (v31)
            *(_QWORD *)a3 = v31;
          else
            *(_QWORD *)a3 = 0;
          *(_DWORD *)(a3 + 16) = 0;
          goto LABEL_35;
        }
        v18 = (*(_DWORD *)v17)++;
        if (!*(_BYTE *)(v17 + 1021))
        {
          v19 = *((_QWORD *)this + 32);
          if (v19)
          {
            *(_QWORD *)a3 = v19;
LABEL_51:
            *(_DWORD *)(a3 + 16) = 0;
LABEL_33:
            if (v18)
            {
              *(_DWORD *)v17 = v18;
            }
            else
            {
              WebCore::Page::~Page((WebCore::Page *)v17);
              WTF::fastFree(v32, v33);
            }
            goto LABEL_35;
          }
          if ((*(_QWORD *)(*(_QWORD *)(v17 + 112) + 680) & 0x8000000000000000) != 0)
          {
            WebCore::StorageNamespaceProvider::localStorageArea((uint64_t *)&v40, *(WebCore::StorageNamespaceProvider **)(v17 + 928), (WebCore::Document *)(v5 - 288));
            v20 = bmalloc::api::isoAllocate();
            *(_QWORD *)v20 = 0;
            *(_DWORD *)(v20 + 8) = 1;
            v21 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
            if (v21)
            {
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 + 1, v21));
            }
            v23 = (uint64_t)v40;
            v40 = 0;
            *(_QWORD *)(v20 + 16) = v21;
            *(_QWORD *)(v20 + 24) = v23;
            v24 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 88))(v23);
            v25 = *((_QWORD *)this + 32);
            *((_QWORD *)this + 32) = v20;
            if (v25)
              v24 = (WebCore *)WTF::RefCounted<WebCore::Storage>::deref((_DWORD *)(v25 + 8));
            v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
              v27 = WebCore::threadGlobalDataSlow(v24);
            v28 = *(_QWORD *)(v27 + 40);
            if (!v28)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
              v28 = *(_QWORD *)(v27 + 40);
            }
            v29 = *((_QWORD *)this + 2);
            if ((v29 & 0x1000000000000) != 0)
            {
              v34 = v29 & 0xFFFFFFFFFFFFLL;
              v35 = *(unsigned int *)(v34 + 28);
              if ((_DWORD)v35)
              {
                v36 = *(_QWORD **)(v34 + 16);
                v37 = *(_QWORD *)(v28 + 2000);
                v38 = 32 * v35;
                while (*v36 != v37)
                {
                  v36 += 4;
                  v38 -= 32;
                  if (!v38)
                    goto LABEL_29;
                }
                {
                  WebCore::windowsInterestedInStorageEvents(void)::set = 0;
                  *(_QWORD *)algn_1EE2F7E78 = 0;
                }
                WTF::WeakHashSet<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::LocalDOMWindow>((uint64_t)&WebCore::windowsInterestedInStorageEvents(void)::set, this, (uint64_t)&v39);
              }
            }
LABEL_29:
            *(_QWORD *)a3 = *((_QWORD *)this + 32);
            *(_DWORD *)(a3 + 16) = 0;
            v30 = v40;
            v40 = 0;
            if (v30)
            {
              if (v30[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
              else
                --v30[2];
            }
            v18 = *(_DWORD *)v17 - 1;
            goto LABEL_33;
          }
        }
        *(_QWORD *)a3 = 0;
        goto LABEL_51;
      }
      if (v12 != 2)
        goto LABEL_12;
    }
  }
  *(_BYTE *)a3 = 14;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 1;
LABEL_35:
  if (*v9 == 2)
  {
    if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288));
  }
  else
  {
    *v9 -= 2;
  }
}

uint64_t WebCore::StorageNamespaceProvider::localStorageArea(WebCore::StorageNamespaceProvider *this, WebCore::Document *a2)
{
  WebCore::SecurityContext *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  const WebCore::SecurityOrigin *v7;
  WebCore::SecurityOrigin *v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t result;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;

  v4 = (WebCore::Document *)((char *)a2 + 192);
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)a2 + 192), a2);
  if (v5)
  {
    v7 = (const WebCore::SecurityOrigin *)v5;
    if (*(_DWORD *)(v5 + 32) != 1
      && (!*(_BYTE *)(v5 + 63) || *(_BYTE *)(v5 + 60) || *(_BYTE *)(v5 + 56))
      && *((_BYTE *)a2 + 464) == 1)
    {
      v8 = (WebCore::SecurityOrigin *)(*(uint64_t (**)(WebCore::SecurityContext *))(*(_QWORD *)v4 + 256))(v4);
      if (!WebCore::SecurityOrigin::isSameOriginAs(v8, v7) && !*((_BYTE *)v7 + 56))
      {
        WebCore::Document::topOrigin(a2, v6);
        v10 = (_DWORD *)WebCore::StorageNamespaceProvider::transientLocalStorageNamespace((uint64_t)this, v15, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 66) + 8) + 24) + 8)+ 1008));
        ++v10[2];
        goto LABEL_12;
      }
    }
  }
  v9 = (_QWORD *)*((_QWORD *)a2 + 66);
  if (v9)
  {
    v9 = (_QWORD *)v9[1];
    if (v9)
    {
      v9 = (_QWORD *)v9[3];
      if (v9)
        v9 = (_QWORD *)v9[1];
    }
  }
  v10 = (_DWORD *)*((_QWORD *)this + 2);
  if (v10)
  {
LABEL_11:
    ++v10[2];
    goto LABEL_12;
  }
  (*(void (**)(_DWORD **__return_ptr, WebCore::StorageNamespaceProvider *, uint64_t, _QWORD))(*(_QWORD *)this + 32))(&v16, this, 5242880, v9[126]);
  v10 = v16;
  v16 = 0;
  v13 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10;
  if (v13)
  {
    v14 = v13[2] - 1;
    if (v13[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      v13 = v16;
      v16 = 0;
      if (!v13)
        goto LABEL_18;
      v14 = v13[2] - 1;
      if (v13[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
        goto LABEL_18;
      }
    }
    v13[2] = v14;
LABEL_18:
    v10 = (_DWORD *)*((_QWORD *)this + 2);
  }
  if (v10)
    goto LABEL_11;
LABEL_12:
  WebCore::SecurityContext::securityOrigin(v4, v6);
  result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
  if (v10[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
  --v10[2];
  return result;
}

uint64_t WebCore::HTMLTitleElement::insertedIntoAncestor(WebCore::Element *a1, unsigned __int16 a2, uint64_t a3)
{
  WebCore::Document *v4;

  WebCore::HTMLElement::insertedIntoAncestor((uint64_t)a1, a2, a3);
  v4 = *(WebCore::Document **)(*((_QWORD *)a1 + 5) + 8);
  if (*((WebCore::Element **)v4 + 185) != a1)
    WebCore::Document::updateTitleElement(v4, a1);
  return 0;
}

void WebCore::Document::updateTitleFromTitleElement(WebCore::Document *this, __n128 a2, uint64_t a3, const WTF::StringImpl *a4, uint64_t a5, WTF::StringBuilder *a6)
{
  uint64_t v7;
  __int16 v8;
  void *v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  char v12;

  v7 = *((_QWORD *)this + 185);
  if (!v7)
  {
    v12 = 0;
    v11 = 0;
    WebCore::Document::updateTitle((uint64_t)this, (uint64_t)&v11, a4);
    return;
  }
  v8 = *(_WORD *)(v7 + 28);
  if ((v8 & 0x10) != 0 && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::titleTag + 24))
  {
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::Document::updateTitle((uint64_t)this, v7 + 112, a4);
LABEL_5:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v9);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    return;
  }
  if ((v8 & 0x20) != 0 && *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::titleTag + 24))
  {
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::Node::textContent((WebCore::Node *)v7, 0, a6, &v11, a2);
    v12 = 0;
    WebCore::Document::updateTitle((uint64_t)this, (uint64_t)&v11, v10);
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    goto LABEL_5;
  }
}

void WebCore::Document::updateTitleElement(WebCore::Document *this, WebCore::Element *a2)
{
  uint64_t v3;
  uint64_t (*v4)(WebCore::Document *, uint64_t, WebCore::Element *);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringBuilder *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *((_QWORD *)this + 159);
  if (v3)
  {
    v4 = (uint64_t (*)(WebCore::Document *, uint64_t, WebCore::Element *))WebCore::selectNewTitleElement<WebCore::HTMLTitleElement>;
    if ((*(_WORD *)(v3 + 28) & 0x20) != 0
      && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      v4 = (uint64_t (*)(WebCore::Document *, uint64_t, WebCore::Element *))WebCore::selectNewTitleElement<WebCore::SVGTitleElement>;
    }
  }
  else
  {
    v4 = (uint64_t (*)(WebCore::Document *, uint64_t, WebCore::Element *))WebCore::selectNewTitleElement<WebCore::HTMLTitleElement>;
  }
  v5 = *((_QWORD *)this + 185);
  if (v5)
    *(_DWORD *)(v5 + 24) += 2;
  v6 = v4(this, v5, a2);
  v12 = v6;
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v7);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v13 = *((_QWORD *)this + 185);
  if (v13 == v12)
  {
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12, v7);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
  }
  else
  {
    *((_QWORD *)this + 185) = v12;
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13, v7);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    WebCore::Document::updateTitleFromTitleElement(this, v11, (uint64_t)v7, v8, v9, v10);
  }
}

void WebCore::Document::updateTitle(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  const char **v8;
  const char *v9;
  int v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  const WTF::StringImpl *v32;
  unsigned __int8 *v33;
  unint64_t v34;
  void *v35;
  const WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  uint64_t v45;
  WebCore::AXObjectCache *v46;
  WebCore::AXObjectCache *v47;
  int v48;
  const char **v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unsigned int v52;
  char v53;
  const char *v54[2];

  if (WTF::equal(*(WTF **)(a1 + 1464), *(const WTF::StringImpl **)a2, a3)
    && (*(_BYTE *)(a1 + 1472) == 0) != (*(_BYTE *)(a2 + 8) != 0))
  {
    return;
  }
  v6 = *(const WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v7 = *(WTF::StringImpl **)(a1 + 1464);
  *(_QWORD *)(a1 + 1464) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  *(_BYTE *)(a1 + 1472) = *(_BYTE *)(a2 + 8);
  v8 = *(const char ***)(a1 + 1744);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 1;
  if (v8
    && (++*(_DWORD *)v8, v9 = v8[3], v54[0] = v8[2], (v54[1] = v9) != 0)
    && PAL::nonBackslashEncodings
    && *(_QWORD *)PAL::nonBackslashEncodings)
  {
    if (WTF::HashTable<WTF::ASCIILiteral,WTF::ASCIILiteral,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ASCIILiteral>,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((const char ***)PAL::nonBackslashEncodings, v54))
    {
      v10 = 165;
    }
    else
    {
      v10 = 92;
    }
  }
  else
  {
    v10 = 92;
  }
  v11 = *(const WTF::StringImpl **)a2;
  if (!*(_QWORD *)a2 || (v12 = *((unsigned int *)v11 + 1), !(_DWORD)v12))
  {
LABEL_52:
    v26 = 0;
    v27 = v50;
    if (v50)
      goto LABEL_53;
    goto LABEL_54;
  }
  v49 = v8;
  v13 = 0;
  v14 = 0;
  v15 = *((_QWORD *)v11 + 1);
  v16 = *((_DWORD *)v11 + 4);
  do
  {
    if ((v16 & 4) != 0)
      v17 = *(unsigned __int8 *)(v15 + v13);
    else
      v17 = *(unsigned __int16 *)(v15 + 2 * v13);
    if (v17 <= 0x20 && ((1 << v17) & 0x100003600) != 0)
    {
      v14 = 1;
      goto LABEL_26;
    }
    if (v17 == 92)
      v19 = v10;
    else
      v19 = v17;
    if ((v14 & 1) != 0)
    {
      v24 = v52;
      if (v52)
      {
        LOBYTE(v54[0]) = 32;
        if (v51 && (v52 < *((_DWORD *)v51 + 1) ? (v25 = v50 == 0) : (v25 = 0), v25))
        {
          v44 = *((_DWORD *)v51 + 4);
          v45 = *((_QWORD *)v51 + 1);
          ++v52;
          if ((v44 & 4) != 0)
            *(_BYTE *)(v45 + v24) = 32;
          else
            *(_WORD *)(v45 + 2 * v24) = 32;
        }
        else
        {
          WTF::StringBuilder::append();
        }
      }
    }
    LOWORD(v54[0]) = v19;
    if (v51)
    {
      v20 = v52;
      if (v52 < *((_DWORD *)v51 + 1) && v50 == 0)
      {
        if ((*((_BYTE *)v51 + 16) & 4) == 0)
        {
          v22 = *((_QWORD *)v51 + 1);
          ++v52;
          *(_WORD *)(v22 + 2 * v20) = v19;
          goto LABEL_38;
        }
        if (v19 <= 0xFF)
        {
          v23 = *((_QWORD *)v51 + 1);
          ++v52;
          *(_BYTE *)(v23 + v20) = v19;
          goto LABEL_38;
        }
      }
    }
    WTF::StringBuilder::append();
LABEL_38:
    v14 = 0;
LABEL_26:
    ++v13;
  }
  while (v12 != v13);
  v26 = v51;
  v8 = v49;
  if (!v51)
    goto LABEL_52;
  v27 = v51;
LABEL_53:
  if ((*((_BYTE *)v27 + 16) & 4) != 0)
  {
LABEL_54:
    v28 = v52;
    if (v52)
    {
      if (v50)
        v26 = v50;
      if ((v52 & 0x80000000) == 0)
      {
        v29 = (unsigned __int8 *)*((_QWORD *)v26 + 1);
        goto LABEL_59;
      }
      __break(0xC471u);
LABEL_107:
      JUMPOUT(0x1944CDDECLL);
    }
    v29 = 0;
LABEL_59:
    v30 = 0x100000000;
  }
  else
  {
    v28 = v52;
    if (v52)
    {
      v43 = v50;
      if (!v50)
        v43 = v26;
      if ((v52 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1944CDE14);
      }
      v30 = 0;
      v29 = (unsigned __int8 *)*((_QWORD *)v43 + 1);
    }
    else
    {
      v30 = 0;
      v29 = 0;
    }
  }
  v31 = v30 | v28;
  v32 = *(const WTF::StringImpl **)a2;
  if (*(_QWORD *)a2)
  {
    v33 = (unsigned __int8 *)*((_QWORD *)v32 + 1);
    v34 = *((unsigned int *)v32 + 1) | ((unint64_t)((*((_DWORD *)v32 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v33 = 0;
    v34 = 0x100000000;
  }
  if (WTF::operator==(v29, v31, v33, v34))
  {
    v36 = *(const WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_65;
  }
  else
  {
    v36 = v50;
    if (v50
      || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v50),
          WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v50),
          (v36 = v50) != 0))
    {
LABEL_65:
      *(_DWORD *)v36 += 2;
    }
  }
  if (v8)
    WTF::RefCounted<WebCore::TextResourceDecoder>::deref((WebCore::TextResourceDecoder *)v8, v35);
  v37 = v51;
  v51 = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v50;
  v50 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v35);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = *(WTF::StringImpl **)(a1 + 1448);
  *(_QWORD *)(a1 + 1448) = v36;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v35);
    else
      *(_DWORD *)v39 -= 2;
  }
  *(_BYTE *)(a1 + 1456) = *(_BYTE *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 3422))
  {
    v40 = WebCore::Document::eventLoop((WebCore::Document *)a1, (WTF::StringImpl *)v35);
    *(_DWORD *)(a1 + 24) += 2;
    v41 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v41 = &off_1E33A3630;
    *((_QWORD *)v41 + 1) = a1;
    *((_QWORD *)v41 + 2) = a1;
    v50 = v41;
    WebCore::EventLoopTaskGroup::queueTask(v40, 0, (uint64_t *)&v50);
    v42 = v50;
    v50 = 0;
    if (v42)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 8))(v42);
    *(_BYTE *)(a1 + 3422) = 1;
  }
  if (WebCore::Document::hasEverCreatedAnAXObjectCache)
  {
    v46 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)a1);
    if (v46)
    {
      v47 = v46;
      ++*((_DWORD *)v46 + 2);
      WebCore::AXObjectCache::onTitleChange(v46, (WebCore::Document *)a1);
      v48 = *((_DWORD *)v47 + 2);
      if (!v48)
      {
        __break(0xC471u);
        goto LABEL_107;
      }
      *((_DWORD *)v47 + 2) = v48 - 1;
    }
  }
}

_QWORD *WebCore::selectNewTitleElement<WebCore::HTMLTitleElement>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a3 + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::titleTag + 24))
  {
    return (_QWORD *)a2;
  }
  if (!a2)
  {
    if ((*(_QWORD *)(a3 + 16) & 0x18000000000000) == 0x8000000000000)
      return (_QWORD *)a3;
    else
      return 0;
  }
  return WebCore::TitleTraits<WebCore::HTMLTitleElement>::findTitleElement(a1);
}

WebCore::HistoryItem *WebCore::HistoryController::createItemTree(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WebCore::HistoryItem *result;
  WebCore::HistoryItem *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  WTF *v31;
  void *v32;
  WTF *v33;
  void *v34;
  WTF *v35;
  void *v36;
  WebCore::HistoryItem *v37;
  WebCore::HistoryItem *v38;

  result = WebCore::HistoryController::createItem(a1, a2, a3);
  if (!*(_BYTE *)(a2 + 40))
  {
    v11 = *(WebCore::HistoryItem **)(a2 + 24);
    if (v11)
    {
      ++*(_DWORD *)v11;
      result = (WebCore::HistoryItem *)WebCore::HistoryController::saveScrollPositionAndViewStateToItem(a2, v11);
      if (*(_DWORD *)v11 == 1)
      {
        WebCore::HistoryItem::~HistoryItem(v11);
        result = (WebCore::HistoryItem *)WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)v11;
      }
    }
    else
    {
      result = (WebCore::HistoryItem *)WebCore::HistoryController::saveScrollPositionAndViewStateToItem(a2, 0);
    }
  }
  if ((_DWORD)a5 && *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) == a4)
    goto LABEL_7;
  WebCore::HistoryController::saveDocumentState(a2);
  result = *(WebCore::HistoryItem **)(a2 + 24);
  if (result)
  {
    v12 = (*(_DWORD *)result)++;
    v13 = *a1;
    if (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) != a4)
      *(_QWORD *)(v13 + 152) = *((_QWORD *)result + 19);
    *(_QWORD *)(v13 + 160) = *((_QWORD *)result + 20);
    if (v12)
    {
      *(_DWORD *)result = v12;
    }
    else
    {
      WebCore::HistoryItem::~HistoryItem(result);
      result = (WebCore::HistoryItem *)WTF::fastFree(v33, v34);
    }
  }
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  v15 = *(_QWORD *)(v14 + 88);
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 + 1, v16));
    do
    {
      v18 = *a1;
      v19 = *(_DWORD **)(v15 + 184);
      ++*v19;
      WebCore::HistoryController::createItemTree(&v38, v19, a3, a4, a5);
      v20 = (_QWORD *)(v18 + 128);
      v21 = *(unsigned int *)(v18 + 140);
      if ((_DWORD)v21 == *(_DWORD *)(v18 + 136))
      {
        v22 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v20, v21 + 1, (unint64_t)&v38);
        v21 = *(unsigned int *)(v18 + 140);
        v23 = (_QWORD *)(*(_QWORD *)(v18 + 128) + 8 * v21);
      }
      else
      {
        v23 = (_QWORD *)(*v20 + 8 * v21);
        v22 = (uint64_t *)&v38;
      }
      v24 = *v22;
      *v22 = 0;
      *v23 = v24;
      *(_DWORD *)(v18 + 140) = v21 + 1;
      result = v38;
      v38 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::HistoryItem::~HistoryItem(result);
          result = (WebCore::HistoryItem *)WTF::fastFree(v35, v36);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      if (!*v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1944CE11CLL);
      }
      --*v19;
      v25 = *(_QWORD *)(v15 + 72);
      if (v25)
      {
        v26 = (unsigned int *)(v25 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 + 1, v26));
      }
      v28 = (unsigned int *)(v15 + 8);
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        v37 = (WebCore::HistoryItem *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v37 = off_1E31FE290;
        *((_QWORD *)v37 + 1) = v28;
        v38 = v37;
        WTF::ensureOnMainThread();
        result = v38;
        v38 = 0;
        if (result)
          result = (WebCore::HistoryItem *)(*(uint64_t (**)(WebCore::HistoryItem *))(*(_QWORD *)result + 8))(result);
      }
      v15 = v25;
    }
    while (v25);
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  }
  if (v14 == a4)
LABEL_7:
    *(_BYTE *)(*a1 + 145) = 1;
  return result;
}

uint64_t WebCore::HistoryController::saveScrollPositionAndViewStateToItem(uint64_t this, WebCore::HistoryItem *a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  WebCore::ScrollView *v7;
  uint64_t v8;
  float v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8);
  if (!v2 || *(_BYTE *)(v2 + 144))
    return this;
  v4 = this;
  v5 = (unsigned int *)(v2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(WebCore::ScrollView **)(v2 + 288);
  if (v7)
  {
    ++*((_DWORD *)v7 + 2);
    if (!a2)
    {
LABEL_20:
      if (*((_DWORD *)v7 + 2) == 1)
        this = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)v7 + 8))(v7);
      else
        --*((_DWORD *)v7 + 2);
      goto LABEL_22;
    }
    if (*(_BYTE *)(*(_QWORD *)(v2 + 296) + 3362))
    {
      *((_QWORD *)a2 + 11) = *((_QWORD *)v7 + 26);
      *(_OWORD *)((char *)a2 + 228) = *(_OWORD *)((char *)v7 + 216);
      v9 = *((float *)v7 + 58);
      v10 = *((_DWORD *)v7 + 59);
      v11 = *((_DWORD *)v7 + 60);
      v12 = *((_DWORD *)v7 + 61);
    }
    else
    {
      *((_QWORD *)a2 + 11) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*((_QWORD *)v7 + 8) + 832))((uint64_t)v7 + 64, 0, 1);
      *(_QWORD *)((char *)a2 + 228) = WebCore::ScrollView::unobscuredContentRect((uint64_t)v7, 0);
      *(_QWORD *)((char *)a2 + 236) = v8;
      v9 = WebCore::ScrollView::exposedContentRect(v7);
    }
    *((float *)a2 + 53) = v9;
    *((_DWORD *)a2 + 54) = v10;
    *((_DWORD *)a2 + 55) = v11;
    *((_DWORD *)a2 + 56) = v12;
    v13 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
    v14 = *(_QWORD *)(v13 + 24);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (v15)
      {
        ++*(_DWORD *)v15;
        v16 = 0;
        if (*(_QWORD *)(*(_QWORD *)(v13 + 128) + 8) == v13)
        {
          *((float *)a2 + 24) = *(float *)(v15 + 356) / *(float *)(v15 + 368);
          *(_OWORD *)((char *)a2 + 260) = *(_OWORD *)(v15 + 376);
        }
        goto LABEL_16;
      }
    }
    else
    {
      v15 = 0;
    }
    v16 = 1;
LABEL_16:
    v17 = *(_QWORD *)(v2 + 280);
    ++*(_DWORD *)v17;
    (*(void (**)(_QWORD, WebCore::HistoryItem *))(**(_QWORD **)(v17 + 16) + 720))(*(_QWORD *)(v17 + 16), a2);
    if (!*(_DWORD *)v17)
    {
      this = 286;
      __break(0xC471u);
      return this;
    }
    --*(_DWORD *)v17;
    this = (*(uint64_t (**)(_QWORD, WebCore::HistoryItem *))(**((_QWORD **)a2 + 59) + 16))(*((_QWORD *)a2 + 59), a2);
    if ((v16 & 1) == 0)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WebCore::Page::~Page((WebCore::Page *)v15);
        this = WTF::fastFree(v21, v22);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
    goto LABEL_20;
  }
  do
  {
LABEL_22:
    v18 = __ldaxr(v5);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v5));
  if (!v19)
  {
    atomic_store(1u, v5);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = off_1E31FE290;
    v20[1] = v5;
    v23 = (uint64_t)v20;
    WTF::ensureOnMainThread();
    this = v23;
    if (v23)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return this;
}

WebCore::HistoryItem *WebCore::HistoryController::createItem(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl **v6;
  WebCore::HistoryItem *result;
  uint64_t v8;
  WTF *v9;
  void *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _BYTE v14[24];

  v12 = 0;
  v13 = 0;
  v11 = 0;
  v6 = (WTF::StringImpl **)WTF::fastMalloc((WTF *)0x1E0);
  v14[0] = 0;
  v14[16] = 0;
  *a1 = WebCore::HistoryItem::HistoryItem((uint64_t)v6, a3, &v13, &v12, &v11, (uint64_t)v14);
  WebCore::HistoryController::initializeItem(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), v6);
  ++*(_DWORD *)v6;
  *(_BYTE *)(a2 + 40) = 0;
  v8 = *(_QWORD *)(a2 + 16);
  result = *(WebCore::HistoryItem **)(a2 + 24);
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v8;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::HistoryItem::~HistoryItem(result);
      return (WebCore::HistoryItem *)WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::HistoryController::initializeItem(uint64_t this, WTF::StringImpl **a2)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  __int128 v8;
  WTF::StringImpl *v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  __int128 v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  __int128 v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  unsigned int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WebCore::SecurityOrigin *v47;
  WebCore::SecurityOrigin *v48;
  WTF::StringImpl *v49;
  const WebCore::SecurityOrigin *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int128 v53;
  __int128 v54;
  WTF::StringImpl *v55;
  __int128 v56;
  __int128 v57;
  WTF::StringImpl *v58;
  __int128 v59;
  __int128 v60;

  if (this)
  {
    v2 = this;
    if (!*(_BYTE *)(this + 144))
    {
      v4 = (unsigned int *)(this + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
      v6 = *(_QWORD *)(*(_QWORD *)(this + 280) + 88);
      if (v6)
        ++*(_DWORD *)(v6 + 24);
      v7 = *(WTF::StringImpl **)(v6 + 368);
      if (v7)
        *(_DWORD *)v7 += 2;
      v58 = v7;
      v8 = *(_OWORD *)(v6 + 392);
      v59 = *(_OWORD *)(v6 + 376);
      v60 = v8;
      v55 = 0;
      WTF::URL::invalidate((WTF::URL *)&v55);
      v52 = 0;
      WTF::URL::invalidate((WTF::URL *)&v52);
      if (v58 && *((_DWORD *)v58 + 1))
      {
        WTF::URL::operator=((uint64_t)&v55, (uint64_t)&v58);
        v16 = (WTF::StringImpl *)WTF::URL::operator=((uint64_t)&v52, (uint64_t)&v58);
      }
      else
      {
        v10 = (WTF::StringImpl **)(v6 + 872);
        if ((*(_BYTE *)(v6 + 1056) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v6 + 872));
          *(_BYTE *)(v6 + 1056) |= 1u;
        }
        v11 = *v10;
        if (*v10)
          *(_DWORD *)v11 += 2;
        v12 = v55;
        v55 = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v9);
          else
            *(_DWORD *)v12 -= 2;
        }
        v13 = *(_OWORD *)(v6 + 896);
        v56 = *(_OWORD *)(v6 + 880);
        v57 = v13;
        v14 = (WTF::StringImpl **)(v6 + 672);
        if ((*(_BYTE *)(v6 + 856) & 1) == 0)
        {
          WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(v6 + 672));
          *(_BYTE *)(v6 + 856) |= 1u;
        }
        v15 = *v14;
        if (*v14)
          *(_DWORD *)v15 += 2;
        v16 = v52;
        v52 = v15;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            v16 = (WTF::StringImpl *)WTF::StringImpl::destroy(v16, v9);
          else
            *(_DWORD *)v16 -= 2;
        }
        v17 = *(_OWORD *)(v6 + 696);
        v53 = *(_OWORD *)(v6 + 680);
        v54 = v17;
      }
      if (!v55 || !*((_DWORD *)v55 + 1))
      {
        v19 = WTF::aboutBlankURL(v16);
        v20 = *(WTF::StringImpl **)v19;
        if (*(_QWORD *)v19)
          *(_DWORD *)v20 += 2;
        v16 = v55;
        v55 = v20;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            v16 = (WTF::StringImpl *)WTF::StringImpl::destroy(v16, v18);
          else
            *(_DWORD *)v16 -= 2;
        }
        v21 = *(_OWORD *)(v19 + 8);
        v57 = *(_OWORD *)(v19 + 24);
        v56 = v21;
      }
      if (!v52 || !*((_DWORD *)v52 + 1))
      {
        v23 = WTF::aboutBlankURL(v16);
        v24 = *(WTF::StringImpl **)v23;
        if (*(_QWORD *)v23)
          *(_DWORD *)v24 += 2;
        v25 = v52;
        v52 = v24;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v22);
          else
            *(_DWORD *)v25 -= 2;
        }
        v26 = *(_OWORD *)(v23 + 24);
        v53 = *(_OWORD *)(v23 + 8);
        v54 = v26;
      }
      v27 = *(WTF::StringImpl **)(v6 + 1608);
      if (v27)
        *(_DWORD *)v27 += 2;
      WebCore::HistoryItem::setURL(a2, &v55);
      WebCore::FrameTree::uniqueName(v2 + 48, v28, (WTF::AtomString *)&v51);
      v30 = v51;
      if (v51)
        *(_DWORD *)v51 += 2;
      v31 = a2[5];
      a2[5] = v30;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v29);
        else
          *(_DWORD *)v31 -= 2;
      }
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)a2[59] + 16))(a2[59], a2);
      v33 = v51;
      v51 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      *((_OWORD *)a2 + 3) = *(_OWORD *)(v2 + 32);
      *((_BYTE *)a2 + 64) = 1;
      if (v27)
        *(_DWORD *)v27 += 2;
      v34 = a2[9];
      a2[9] = v27;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v32);
        else
          *(_DWORD *)v34 -= 2;
      }
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)a2[59] + 16))(a2[59], a2);
      v36 = v52;
      if (v52)
        *(_DWORD *)v52 += 2;
      v37 = a2[3];
      a2[3] = v36;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v35);
        else
          *(_DWORD *)v37 -= 2;
      }
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)a2[59] + 16))(a2[59], a2);
      if (v58 && *((_DWORD *)v58 + 1)
        || (WebCore::ResourceResponse::platformLazyInit(v6 + 1272, 1), *(__int16 *)(v6 + 1408) >= 400))
      {
        *((_BYTE *)a2 + 144) = 1;
      }
      v39 = *(_QWORD **)(v6 + 16);
      if (v39)
      {
        v39 = (_QWORD *)v39[1];
        if (v39)
        {
          if (*(_QWORD **)(v39[16] + 8) == v39
            || *(_QWORD *)(v39[35] + 88) == v6
            && (v46 = v39[37]) != 0
            && (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v46 + 192), v38),
                v48 = v47,
                WebCore::Document::topOrigin((WebCore::Document *)v46, v49),
                WebCore::SecurityOrigin::isSameOriginAs(v48, v50)))
          {
            LOBYTE(v39) = *(_BYTE *)(v6 + 3530);
          }
          else
          {
            LOBYTE(v39) = 0;
          }
        }
      }
      *((_BYTE *)a2 + 120) = (_BYTE)v39;
      WebCore::HistoryItem::setFormInfoFromRequest((WTF::StringImpl *)a2, (const WebCore::ResourceRequest *)(v6 + 872));
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v40);
        else
          *(_DWORD *)v27 -= 2;
      }
      v41 = v52;
      v52 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v40);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = v55;
      v55 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v40);
        else
          *(_DWORD *)v42 -= 2;
      }
      this = (uint64_t)v58;
      v58 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v40);
        else
          *(_DWORD *)this -= 2;
      }
      if (*(_DWORD *)(v6 + 24) == 1)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      else
        --*(_DWORD *)(v6 + 24);
      do
      {
        v43 = __ldaxr(v4);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v4));
      if (!v44)
      {
        atomic_store(1u, v4);
        v45 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v45 = off_1E31FE290;
        *((_QWORD *)v45 + 1) = v4;
        v58 = v45;
        WTF::ensureOnMainThread();
        this = (uint64_t)v58;
        v58 = 0;
        if (this)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      }
    }
  }
  return this;
}

WTF *WebCore::HistoryItem::setURL(WTF::StringImpl **this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *result;
  void *v8;
  WTF **v9;

  {
    WTF::NeverDestroyed<WebCore::BackForwardCache,WTF::AnyThreadsAccessTraits>::NeverDestroyed<>((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache);
  }
  WebCore::BackForwardCache::remove((uint64_t)&WebCore::BackForwardCache::singleton(void)::globalBackForwardCache, (WebCore::HistoryItem *)this);
  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v6 = this[2];
  this[2] = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = (WTF *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)this[59] + 16))(this[59], this);
  if (*((_DWORD *)this + 28))
  {
    v9 = this + 13;
    if (*((_DWORD *)this + 29))
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((unsigned int *)this + 26, 0);
    result = *v9;
    if (*v9)
    {
      this[13] = 0;
      *((_DWORD *)this + 28) = 0;
      return (WTF *)WTF::fastFree(result, v8);
    }
  }
  return result;
}

uint64_t WebCore::BackForwardCache::remove(uint64_t this, WebCore::HistoryItem *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  char *v6;
  int v7;
  void *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  _BYTE buf[12];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a2 + 25))
  {
    v3 = this;
    WTF::ListHashSet<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>,WTF::DefaultHash<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>>::remove<WTF::RefPtr<WebCore::HistoryItem,WTF::RawPtrTraits<WebCore::HistoryItem>,WTF::DefaultRefDerefTraits<WebCore::HistoryItem>>>((uint64_t *)this, (uint64_t)a2);
    *(_QWORD *)buf = 0;
    WebCore::HistoryItem::setCachedPage((uint64_t)a2, (uint64_t *)buf);
    std::unique_ptr<WebCore::CachedPage>::~unique_ptr[abi:sn180100]((WebCore::CachedPage **)buf);
    v4 = qword_1ECE7BEB0;
    this = os_log_type_enabled((os_log_t)qword_1ECE7BEB0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)this)
    {
      WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>::toString(&v10, *((_QWORD *)a2 + 44), *((_QWORD *)a2 + 45));
      WTF::String::utf8();
      v5 = 0;
      if (v11)
        v6 = (char *)v11 + 16;
      else
        v6 = 0;
      if (*(_QWORD *)v3)
        v5 = *(_DWORD *)(*(_QWORD *)v3 - 12);
      v7 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v6;
      v13 = 1024;
      v14 = v5;
      v15 = 1024;
      v16 = v7;
      _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "BackForwardCache::remove item: %s, size: %u / %u", buf, 0x18u);
      v9 = v11;
      v11 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
          WTF::fastFree(v9, v8);
        else
          --*(_DWORD *)v9;
      }
      this = (uint64_t)v10;
      v10 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v8);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::HistoryItem::setFormInfoFromRequest(WTF::StringImpl *this, const WebCore::ResourceRequest *a2)
{
  WTF::StringImpl *v3;
  unint64_t v4;
  unint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::FormData *v10;
  int v11;
  uint64_t v12;
  int v13;
  void *v14;
  WTF::StringImpl *v15;
  WebCore::FormData *v16;
  void *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v3 = this;
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    this = (WTF::StringImpl *)WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v4 = *((unsigned int *)a2 + 27);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (_DWORD **)(*((_QWORD *)a2 + 12) + 8);
    while (*((_WORD *)v6 - 4) != 60)
    {
      ++v5;
      v6 += 2;
      if (v4 == v5)
        goto LABEL_7;
    }
    if (v5 >= v4)
    {
      __break(0xC471u);
      return this;
    }
    v7 = *v6;
    if (*v6)
      *v7 += 2;
  }
  else
  {
LABEL_7:
    v7 = 0;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)v3 + 4);
  *((_QWORD *)v3 + 4) = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  if ((*((_BYTE *)a2 + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(a2);
    *((_BYTE *)a2 + 184) |= 1u;
  }
  v9 = *((_QWORD *)a2 + 11);
  if (!v9 || *(_DWORD *)(v9 + 4) != 4)
    goto LABEL_14;
  v12 = *(_QWORD *)(v9 + 8);
  if ((*(_BYTE *)(v9 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v12 & 0xDF) != 0x50 || (*(_BYTE *)(v12 + 1) & 0xDF) != 0x4F || (*(_BYTE *)(v12 + 2) & 0xDF) != 0x53)
      goto LABEL_14;
    v13 = *(unsigned __int8 *)(v12 + 3);
  }
  else
  {
    if ((*(_WORD *)v12 & 0xFFDF) != 0x50
      || (*(_WORD *)(v12 + 2) & 0xFFDF) != 0x4F
      || (*(_WORD *)(v12 + 4) & 0xFFDF) != 0x53)
    {
      goto LABEL_14;
    }
    v13 = *(unsigned __int16 *)(v12 + 6);
  }
  if ((v13 & 0xFFFFFFDF) != 0x54)
  {
LABEL_14:
    v10 = (WebCore::FormData *)*((_QWORD *)v3 + 23);
    *((_QWORD *)v3 + 23) = 0;
    if (v10)
      WTF::RefCounted<WebCore::FormData>::deref(v10, a2);
    this = (WTF::StringImpl *)*((_QWORD *)v3 + 24);
    *((_QWORD *)v3 + 24) = 0;
    if (this)
    {
      v11 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
      goto LABEL_18;
    }
    return this;
  }
  WebCore::ResourceRequestBase::httpBody(a2, &v22);
  v15 = v22;
  v22 = 0;
  v16 = (WebCore::FormData *)*((_QWORD *)v3 + 23);
  *((_QWORD *)v3 + 23) = v15;
  if (v16)
  {
    WTF::RefCounted<WebCore::FormData>::deref(v16, v14);
    v18 = v22;
    v22 = 0;
    if (v18)
      WTF::RefCounted<WebCore::FormData>::deref(v18, v17);
  }
  WebCore::ResourceRequestBase::httpContentType(a2, &v22);
  v20 = v22;
  v22 = 0;
  this = (WTF::StringImpl *)*((_QWORD *)v3 + 24);
  *((_QWORD *)v3 + 24) = v20;
  if (this)
  {
    v11 = *(_DWORD *)this - 2;
    if (*(_DWORD *)this != 2)
    {
LABEL_18:
      *(_DWORD *)this = v11;
      return this;
    }
    WTF::StringImpl::destroy(this, v19);
    this = v22;
    v22 = 0;
    if (this)
    {
      v11 = *(_DWORD *)this - 2;
      if (*(_DWORD *)this == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v21);
      goto LABEL_18;
    }
  }
  return this;
}

uint64_t WebCore::jsRangePrototypeFunction_selectNode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unsigned int *v16;
  uint64_t v17;
  WebCore::Node *v18;
  JSValue v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  JSValue v23;
  JSC::VM *v24;
  char v25;
  WTF::StringImpl *v26;
  JSC::VM *v27;
  WTF::StringImpl *v28;
  char v29;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "Range", "selectNode");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSRange::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSRange::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "Range", "selectNode");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v20);
  }
  else
  {
    v16 = *(unsigned int **)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    v27 = v9;
    if ((v17 & 0xFFFE000000000002) != 0
      || *(unsigned __int8 *)(v17 + 5) < 0xF0u
      || (v18 = *(WebCore::Node **)(v17 + 24)) == 0)
    {
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "node", 5, "Range", 6, a8, "selectNode", 11, "Node", 5);
    }
    else
    {
      WebCore::Range::selectNode(v16, v18, (uint64_t)&v27);
      if (!v29)
        return 10;
      v21 = (WTF::StringImpl *)v27;
      v25 = (char)v27;
      v22 = v28;
      v26 = v28;
      if (!*((_QWORD *)v9 + 2))
      {
        v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v27, (JSC::JSGlobalObject *)&v26);
        JSC::VM::throwException(v9, this, v23);
        v22 = v26;
      }
      v26 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v21);
        else
          *(_DWORD *)v22 -= 2;
      }
    }
    return 0;
  }
}

unsigned int *WebCore::Range::selectNode@<X0>(unsigned int *this@<X0>, WebCore::Node *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  WebCore::Node *v12;
  _BYTE v13[8];
  uint64_t v14;
  char v15;

  v4 = *((_QWORD *)a2 + 4);
  if (v4)
  {
    v5 = this;
    v6 = *((_QWORD *)a2 + 6);
    for (i = 0; ; ++i)
    {
      v8 = v6 & 0xFFFFFFFFFFFFLL;
      if (!v8)
        break;
      v6 = *(_QWORD *)(v8 + 48);
    }
    *(_DWORD *)(v4 + 24) += 4;
    v12 = (WebCore::Node *)v4;
    WebCore::Range::setStart((uint64_t)this, (uint64_t *)&v12, i, (uint64_t)v13);
    this = (unsigned int *)v12;
    if (v12)
    {
      if (*((_DWORD *)v12 + 6) == 2)
      {
        if ((*((_WORD *)v12 + 15) & 0x400) == 0)
          this = WebCore::Node::removedLastRef(v12, v9);
      }
      else
      {
        *((_DWORD *)v12 + 6) -= 2;
      }
    }
    if (v15)
    {
      v10 = v14;
      *(_BYTE *)a3 = v13[0];
      *(_QWORD *)(a3 + 8) = v10;
      *(_BYTE *)(a3 + 16) = 1;
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          return WebCore::Node::removedLastRef((WebCore::Node *)v4, v9);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    else
    {
      v12 = (WebCore::Node *)v4;
      WebCore::Range::setEnd((uint64_t)v5, (uint64_t *)&v12, i + 1, a3);
      this = (unsigned int *)v12;
      if (v12)
      {
        if (*((_DWORD *)v12 + 6) == 2)
        {
          if ((*((_WORD *)v12 + 15) & 0x400) == 0)
            return WebCore::Node::removedLastRef(v12, v11);
        }
        else
        {
          *((_DWORD *)v12 + 6) -= 2;
        }
      }
    }
  }
  else
  {
    *(_BYTE *)a3 = 20;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
  }
  return this;
}

uint64_t WebCore::treeOrder<(WebCore::TreeType)0>(int *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    v5 = a1[2];
    v6 = *(_DWORD *)(a2 + 8);
    v7 = v5 == v6;
    if (v5 < v6)
      v8 = -1;
    else
      v8 = 1;
    if (v7)
      return 0;
    else
      return v8;
  }
  else
  {
    *(_DWORD *)(v4 + 24) += 2;
    v14 = 0;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v14);
    do
    {
      v11 = v4;
      v4 = *(_QWORD *)(v4 + 32);
      if (v4)
        *(_DWORD *)(v4 + 24) += 2;
      if (v4 == *(_QWORD *)a1)
      {
        v12 = !WebCore::isOffsetBeforeChild(v4, a1[2], v11);
        v13 = -1;
        goto LABEL_20;
      }
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
    }
    while (v4);
    v4 = *(_QWORD *)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 24) += 2;
    v14 = 0;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v14);
    while (1)
    {
      v11 = v4;
      v4 = *(_QWORD *)(v4 + 32);
      if (v4)
        *(_DWORD *)(v4 + 24) += 2;
      if (v4 == *(_QWORD *)a2)
        break;
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
      if (!v4)
        return WebCore::treeOrder<(WebCore::TreeType)0>(*(_QWORD *)a1, *(_QWORD *)a2);
    }
    v12 = !WebCore::isOffsetBeforeChild(v4, *(_DWORD *)(a2 + 8), v11);
    v13 = 1;
LABEL_20:
    if (v12)
      v9 = -v13;
    else
      v9 = v13;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
  return v9;
}

uint64_t WebCore::Range::updateDocument(WebCore::Range *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  int v5;
  WebCore::Document *v6;
  WebCore::Document *v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 3);
  v3 = (uint64_t *)((char *)this + 24);
  result = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 40) + 8);
  v5 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v5 + 2;
  v8 = result;
  if (v2 == result)
  {
    v8 = 0;
  }
  else
  {
    *(_DWORD *)(v2 + 24) += 2;
    v7 = (WebCore::Document *)v2;
    WTF::HashSet<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::Range,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(v2 + 1320), (uint64_t)this);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v7);
    WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=(v3, &v8);
    v6 = (WebCore::Document *)*((_QWORD *)this + 3);
    *((_DWORD *)v6 + 6) += 2;
    v7 = v6;
    WebCore::Document::attachRange(v6, this);
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v7);
    result = v8;
    v8 = 0;
    if (!result)
      return result;
    v5 = *(_DWORD *)(result + 24) - 2;
  }
  if (v5)
  {
    *(_DWORD *)(result + 24) = v5;
  }
  else if ((*(_WORD *)(result + 30) & 0x400) == 0)
  {
    return WebCore::Node::removedLastRef((WebCore::Node *)result);
  }
  return result;
}

uint64_t WebCore::LinkRelAttribute::LinkRelAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v21;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  char v32;
  int v33;
  int v34;
  char v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t *v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  const char *v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  const char **v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  char v55;

  v4 = a4;
  v5 = a3;
  *(_WORD *)a1 = 255;
  v7 = a4;
  if (a4 == 10)
  {
    v12 = a4 & 0xFF00000000;
    if ((a4 & 0xFF00000000) == 0)
      goto LABEL_325;
    if ((*(_BYTE *)a3 & 0xDF) != 0x53
      || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x54
      || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x59
      || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x4C
      || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x45
      || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x53
      || (*(_BYTE *)(a3 + 6) & 0xDF) != 0x48
      || (*(_BYTE *)(a3 + 7) & 0xDF) != 0x45
      || (*(_BYTE *)(a3 + 8) & 0xDF) != 0x45)
    {
      goto LABEL_335;
    }
    v23 = *(unsigned __int8 *)(a3 + 9);
    goto LABEL_98;
  }
  if ((int)a4 <= 12)
  {
    if ((_DWORD)a4 != 4)
    {
      if ((_DWORD)a4 == 12)
      {
        if ((a4 & 0xFF00000000) != 0)
        {
          if ((*(_BYTE *)a3 & 0xDF) != 0x44
            || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x4E
            || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x53
            || (*(_BYTE *)(a3 + 3) & 0xDF) != 0xD
            || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x50
            || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x52
            || (*(_BYTE *)(a3 + 6) & 0xDF) != 0x45
            || (*(_BYTE *)(a3 + 7) & 0xDF) != 0x46
            || (*(_BYTE *)(a3 + 8) & 0xDF) != 0x45
            || (*(_BYTE *)(a3 + 9) & 0xDF) != 0x54
            || (*(_BYTE *)(a3 + 10) & 0xDF) != 0x43)
          {
            goto LABEL_39;
          }
          v28 = *(unsigned __int8 *)(a3 + 11);
        }
        else
        {
          if ((*(_WORD *)a3 & 0xFFDF) != 0x44
            || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x4E
            || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x53
            || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0xD
            || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x50
            || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0x52
            || (*(_WORD *)(a3 + 12) & 0xFFDF) != 0x45
            || (*(_WORD *)(a3 + 14) & 0xFFDF) != 0x46
            || (*(_WORD *)(a3 + 16) & 0xFFDF) != 0x45
            || (*(_WORD *)(a3 + 18) & 0xFFDF) != 0x54
            || (*(_WORD *)(a3 + 20) & 0xFFDF) != 0x43)
          {
            goto LABEL_39;
          }
          v28 = *(unsigned __int16 *)(a3 + 22);
        }
        if ((v28 & 0xFFFFFFDF) == 0x48)
        {
          v21 = 4;
          goto LABEL_85;
        }
        goto LABEL_39;
      }
      goto LABEL_39;
    }
    if ((a4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a3 & 0xDF) != 0x49 || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x43 || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x4F)
        goto LABEL_39;
      v24 = *(unsigned __int8 *)(a3 + 3);
    }
    else
    {
      if ((*(_WORD *)a3 & 0xFFDF) != 0x49
        || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x43
        || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x4F)
      {
        goto LABEL_39;
      }
      v24 = *(unsigned __int16 *)(a3 + 6);
    }
    if ((v24 & 0xFFFFFFDF) != 0x4E)
      goto LABEL_39;
    goto LABEL_106;
  }
  if ((_DWORD)a4 != 13)
  {
    if ((_DWORD)a4 == 16)
    {
      if ((a4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a3 & 0xDF) != 0x41
          || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x50
          || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x4C
          || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x45
          || (*(_BYTE *)(a3 + 5) & 0xDF) != 0xD
          || (*(_BYTE *)(a3 + 6) & 0xDF) != 0x54
          || (*(_BYTE *)(a3 + 7) & 0xDF) != 0x4F
          || (*(_BYTE *)(a3 + 8) & 0xDF) != 0x55
          || (*(_BYTE *)(a3 + 9) & 0xDF) != 0x43
          || (*(_BYTE *)(a3 + 10) & 0xDF) != 0x48
          || (*(_BYTE *)(a3 + 11) & 0xDF) != 0xD
          || (*(_BYTE *)(a3 + 12) & 0xDF) != 0x49
          || (*(_BYTE *)(a3 + 13) & 0xDF) != 0x43
          || (*(_BYTE *)(a3 + 14) & 0xDF) != 0x4F)
        {
          goto LABEL_39;
        }
        v27 = *(unsigned __int8 *)(a3 + 15);
      }
      else
      {
        if ((*(_WORD *)a3 & 0xFFDF) != 0x41
          || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x50
          || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x4C
          || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x45
          || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0xD
          || (*(_WORD *)(a3 + 12) & 0xFFDF) != 0x54
          || (*(_WORD *)(a3 + 14) & 0xFFDF) != 0x4F
          || (*(_WORD *)(a3 + 16) & 0xFFDF) != 0x55
          || (*(_WORD *)(a3 + 18) & 0xFFDF) != 0x43
          || (*(_WORD *)(a3 + 20) & 0xFFDF) != 0x48
          || (*(_WORD *)(a3 + 22) & 0xFFDF) != 0xD
          || (*(_WORD *)(a3 + 24) & 0xFFDF) != 0x49
          || (*(_WORD *)(a3 + 26) & 0xFFDF) != 0x43
          || (*(_WORD *)(a3 + 28) & 0xFFDF) != 0x4F)
        {
          goto LABEL_39;
        }
        v27 = *(unsigned __int16 *)(a3 + 30);
      }
      if ((v27 & 0xFFFFFFDF) == 0x4E)
      {
        v9 = 2;
        goto LABEL_107;
      }
      goto LABEL_39;
    }
    if ((_DWORD)a4 == 28)
    {
      if ((a4 & 0xFF00000000) != 0)
      {
        if ((*(_BYTE *)a3 & 0xDF) == 0x41
          && (*(_BYTE *)(a3 + 1) & 0xDF) == 0x50
          && (*(_BYTE *)(a3 + 2) & 0xDF) == 0x50
          && (*(_BYTE *)(a3 + 3) & 0xDF) == 0x4C
          && (*(_BYTE *)(a3 + 4) & 0xDF) == 0x45
          && (*(_BYTE *)(a3 + 5) & 0xDF) == 0xD
          && (*(_BYTE *)(a3 + 6) & 0xDF) == 0x54
          && (*(_BYTE *)(a3 + 7) & 0xDF) == 0x4F
          && (*(_BYTE *)(a3 + 8) & 0xDF) == 0x55
          && (*(_BYTE *)(a3 + 9) & 0xDF) == 0x43
          && (*(_BYTE *)(a3 + 10) & 0xDF) == 0x48
          && (*(_BYTE *)(a3 + 11) & 0xDF) == 0xD
          && (*(_BYTE *)(a3 + 12) & 0xDF) == 0x49
          && (*(_BYTE *)(a3 + 13) & 0xDF) == 0x43
          && (*(_BYTE *)(a3 + 14) & 0xDF) == 0x4F
          && (*(_BYTE *)(a3 + 15) & 0xDF) == 0x4E
          && (*(_BYTE *)(a3 + 16) & 0xDF) == 0xD
          && (*(_BYTE *)(a3 + 17) & 0xDF) == 0x50
          && (*(_BYTE *)(a3 + 18) & 0xDF) == 0x52
          && (*(_BYTE *)(a3 + 19) & 0xDF) == 0x45
          && (*(_BYTE *)(a3 + 20) & 0xDF) == 0x43
          && (*(_BYTE *)(a3 + 21) & 0xDF) == 0x4F
          && (*(_BYTE *)(a3 + 22) & 0xDF) == 0x4D
          && (*(_BYTE *)(a3 + 23) & 0xDF) == 0x50
          && (*(_BYTE *)(a3 + 24) & 0xDF) == 0x4F
          && (*(_BYTE *)(a3 + 25) & 0xDF) == 0x53
          && (*(_BYTE *)(a3 + 26) & 0xDF) == 0x45)
        {
          v8 = *(unsigned __int8 *)(a3 + 27);
          goto LABEL_35;
        }
      }
      else if ((*(_WORD *)a3 & 0xFFDF) == 0x41
             && (*(_WORD *)(a3 + 2) & 0xFFDF) == 0x50
             && (*(_WORD *)(a3 + 4) & 0xFFDF) == 0x50
             && (*(_WORD *)(a3 + 6) & 0xFFDF) == 0x4C
             && (*(_WORD *)(a3 + 8) & 0xFFDF) == 0x45
             && (*(_WORD *)(a3 + 10) & 0xFFDF) == 0xD
             && (*(_WORD *)(a3 + 12) & 0xFFDF) == 0x54
             && (*(_WORD *)(a3 + 14) & 0xFFDF) == 0x4F
             && (*(_WORD *)(a3 + 16) & 0xFFDF) == 0x55
             && (*(_WORD *)(a3 + 18) & 0xFFDF) == 0x43
             && (*(_WORD *)(a3 + 20) & 0xFFDF) == 0x48
             && (*(_WORD *)(a3 + 22) & 0xFFDF) == 0xD
             && (*(_WORD *)(a3 + 24) & 0xFFDF) == 0x49
             && (*(_WORD *)(a3 + 26) & 0xFFDF) == 0x43
             && (*(_WORD *)(a3 + 28) & 0xFFDF) == 0x4F
             && (*(_WORD *)(a3 + 30) & 0xFFDF) == 0x4E
             && (*(_WORD *)(a3 + 32) & 0xFFDF) == 0xD
             && (*(_WORD *)(a3 + 34) & 0xFFDF) == 0x50
             && (*(_WORD *)(a3 + 36) & 0xFFDF) == 0x52
             && (*(_WORD *)(a3 + 38) & 0xFFDF) == 0x45
             && (*(_WORD *)(a3 + 40) & 0xFFDF) == 0x43
             && (*(_WORD *)(a3 + 42) & 0xFFDF) == 0x4F
             && (*(_WORD *)(a3 + 44) & 0xFFDF) == 0x4D
             && (*(_WORD *)(a3 + 46) & 0xFFDF) == 0x50
             && (*(_WORD *)(a3 + 48) & 0xFFDF) == 0x4F
             && (*(_WORD *)(a3 + 50) & 0xFFDF) == 0x53
             && (*(_WORD *)(a3 + 52) & 0xFFDF) == 0x45)
      {
        v8 = *(unsigned __int16 *)(a3 + 54);
LABEL_35:
        if ((v8 & 0xFFFFFFDF) == 0x44)
        {
          v9 = 4;
LABEL_107:
          *(_BYTE *)a1 = v9;
          return a1;
        }
      }
    }
LABEL_39:
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 680) + 680);
    goto LABEL_40;
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)a3 & 0xDF) == 0x53
      && (*(_BYTE *)(a3 + 1) & 0xDF) == 0x48
      && (*(_BYTE *)(a3 + 2) & 0xDF) == 0x4F
      && (*(_BYTE *)(a3 + 3) & 0xDF) == 0x52
      && (*(_BYTE *)(a3 + 4) & 0xDF) == 0x54
      && (*(_BYTE *)(a3 + 5) & 0xDF) == 0x43
      && (*(_BYTE *)(a3 + 6) & 0xDF) == 0x55
      && (*(_BYTE *)(a3 + 7) & 0xDF) == 0x54
      && (*(_BYTE *)(a3 + 8) & 0xDF) == 0
      && (*(_BYTE *)(a3 + 9) & 0xDF) == 0x49
      && (*(_BYTE *)(a3 + 10) & 0xDF) == 0x43
      && (*(_BYTE *)(a3 + 11) & 0xDF) == 0x4F)
    {
      v25 = *(unsigned __int8 *)(a3 + 12);
      goto LABEL_122;
    }
  }
  else if ((*(_WORD *)a3 & 0xFFDF) == 0x53
         && (*(_WORD *)(a3 + 2) & 0xFFDF) == 0x48
         && (*(_WORD *)(a3 + 4) & 0xFFDF) == 0x4F
         && (*(_WORD *)(a3 + 6) & 0xFFDF) == 0x52
         && (*(_WORD *)(a3 + 8) & 0xFFDF) == 0x54
         && (*(_WORD *)(a3 + 10) & 0xFFDF) == 0x43
         && (*(_WORD *)(a3 + 12) & 0xFFDF) == 0x55
         && (*(_WORD *)(a3 + 14) & 0xFFDF) == 0x54
         && (*(_WORD *)(a3 + 16) & 0xFFDF) == 0
         && (*(_WORD *)(a3 + 18) & 0xFFDF) == 0x49
         && (*(_WORD *)(a3 + 20) & 0xFFDF) == 0x43
         && (*(_WORD *)(a3 + 22) & 0xFFDF) == 0x4F)
  {
    v25 = *(unsigned __int16 *)(a3 + 24);
LABEL_122:
    if ((v25 & 0xFFFFFFDF) != 0x4E)
      goto LABEL_123;
LABEL_106:
    v9 = 1;
    goto LABEL_107;
  }
LABEL_123:
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 680) + 680);
  if ((v10 & 0x10000000000000) == 0)
    goto LABEL_40;
  if ((a4 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)a3 & 0xDF) == 0x4D
      && (*(_BYTE *)(a3 + 1) & 0xDF) == 0x4F
      && (*(_BYTE *)(a3 + 2) & 0xDF) == 0x44
      && (*(_BYTE *)(a3 + 3) & 0xDF) == 0x55
      && (*(_BYTE *)(a3 + 4) & 0xDF) == 0x4C
      && (*(_BYTE *)(a3 + 5) & 0xDF) == 0x45
      && (*(_BYTE *)(a3 + 6) & 0xDF) == 0x50
      && (*(_BYTE *)(a3 + 7) & 0xDF) == 0x52
      && (*(_BYTE *)(a3 + 8) & 0xDF) == 0x45
      && (*(_BYTE *)(a3 + 9) & 0xDF) == 0x4C
      && (*(_BYTE *)(a3 + 10) & 0xDF) == 0x4F
      && (*(_BYTE *)(a3 + 11) & 0xDF) == 0x41)
    {
      v26 = *(unsigned __int8 *)(a3 + 12);
      goto LABEL_138;
    }
  }
  else if ((*(_WORD *)a3 & 0xFFDF) == 0x4D
         && (*(_WORD *)(a3 + 2) & 0xFFDF) == 0x4F
         && (*(_WORD *)(a3 + 4) & 0xFFDF) == 0x44
         && (*(_WORD *)(a3 + 6) & 0xFFDF) == 0x55
         && (*(_WORD *)(a3 + 8) & 0xFFDF) == 0x4C
         && (*(_WORD *)(a3 + 10) & 0xFFDF) == 0x45
         && (*(_WORD *)(a3 + 12) & 0xFFDF) == 0x50
         && (*(_WORD *)(a3 + 14) & 0xFFDF) == 0x52
         && (*(_WORD *)(a3 + 16) & 0xFFDF) == 0x45
         && (*(_WORD *)(a3 + 18) & 0xFFDF) == 0x4C
         && (*(_WORD *)(a3 + 20) & 0xFFDF) == 0x4F
         && (*(_WORD *)(a3 + 22) & 0xFFDF) == 0x41)
  {
    v26 = *(unsigned __int16 *)(a3 + 24);
LABEL_138:
    if ((v26 & 0xFFFFFFDF) == 0x44)
    {
      v21 = 8;
      goto LABEL_85;
    }
  }
LABEL_40:
  if (a4 == 7 && (v10 & 0x100000000000000) != 0)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)a3 & 0xDF) != 0x50
        || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x52
        || (*(_BYTE *)(a3 + 2) & 0xDF) != 0x45
        || (*(_BYTE *)(a3 + 3) & 0xDF) != 0x4C
        || (*(_BYTE *)(a3 + 4) & 0xDF) != 0x4F
        || (*(_BYTE *)(a3 + 5) & 0xDF) != 0x41)
      {
        goto LABEL_42;
      }
      v29 = *(unsigned __int8 *)(a3 + 6);
    }
    else
    {
      if ((*(_WORD *)a3 & 0xFFDF) != 0x50
        || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x52
        || (*(_WORD *)(a3 + 4) & 0xFFDF) != 0x45
        || (*(_WORD *)(a3 + 6) & 0xFFDF) != 0x4C
        || (*(_WORD *)(a3 + 8) & 0xFFDF) != 0x4F
        || (*(_WORD *)(a3 + 10) & 0xFFDF) != 0x41)
      {
        goto LABEL_42;
      }
      v29 = *(unsigned __int16 *)(a3 + 12);
    }
    if ((v29 & 0xFFFFFFDF) != 0x44)
      goto LABEL_42;
    v21 = 16;
    goto LABEL_85;
  }
LABEL_42:
  if ((v10 & 0x80000000000000) != 0
    && WTF::equalLettersIgnoringASCIICase((unsigned __int16 *)v5, v4, "prefetch", 9uLL))
  {
    v21 = *(_BYTE *)(a1 + 1) | 0x40;
LABEL_85:
    *(_BYTE *)(a1 + 1) = v21;
    return a1;
  }
  if ((_DWORD)v4 == 20)
  {
    if ((v4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v5 & 0xDF) == 0x41
        && (*(_BYTE *)(v5 + 1) & 0xDF) == 0x4C
        && (*(_BYTE *)(v5 + 2) & 0xDF) == 0x54
        && (*(_BYTE *)(v5 + 3) & 0xDF) == 0x45
        && (*(_BYTE *)(v5 + 4) & 0xDF) == 0x52
        && (*(_BYTE *)(v5 + 5) & 0xDF) == 0x4E
        && (*(_BYTE *)(v5 + 6) & 0xDF) == 0x41
        && (*(_BYTE *)(v5 + 7) & 0xDF) == 0x54
        && (*(_BYTE *)(v5 + 8) & 0xDF) == 0x45
        && (*(_BYTE *)(v5 + 9) & 0xDF) == 0
        && (*(_BYTE *)(v5 + 10) & 0xDF) == 0x53
        && (*(_BYTE *)(v5 + 11) & 0xDF) == 0x54
        && (*(_BYTE *)(v5 + 12) & 0xDF) == 0x59
        && (*(_BYTE *)(v5 + 13) & 0xDF) == 0x4C
        && (*(_BYTE *)(v5 + 14) & 0xDF) == 0x45
        && (*(_BYTE *)(v5 + 15) & 0xDF) == 0x53
        && (*(_BYTE *)(v5 + 16) & 0xDF) == 0x48
        && (*(_BYTE *)(v5 + 17) & 0xDF) == 0x45
        && (*(_BYTE *)(v5 + 18) & 0xDF) == 0x45
        && (*(_BYTE *)(v5 + 19) & 0xDF) == 0x54)
      {
        goto LABEL_205;
      }
      if ((*(_BYTE *)v5 & 0xDF) != 0x53
        || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x54
        || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x59
        || (*(_BYTE *)(v5 + 3) & 0xDF) != 0x4C
        || (*(_BYTE *)(v5 + 4) & 0xDF) != 0x45
        || (*(_BYTE *)(v5 + 5) & 0xDF) != 0x53
        || (*(_BYTE *)(v5 + 6) & 0xDF) != 0x48
        || (*(_BYTE *)(v5 + 7) & 0xDF) != 0x45
        || (*(_BYTE *)(v5 + 8) & 0xDF) != 0x45
        || (*(_BYTE *)(v5 + 9) & 0xDF) != 0x54
        || (*(_BYTE *)(v5 + 10) & 0xDF) != 0
        || (*(_BYTE *)(v5 + 11) & 0xDF) != 0x41
        || (*(_BYTE *)(v5 + 12) & 0xDF) != 0x4C
        || (*(_BYTE *)(v5 + 13) & 0xDF) != 0x54
        || (*(_BYTE *)(v5 + 14) & 0xDF) != 0x45
        || (*(_BYTE *)(v5 + 15) & 0xDF) != 0x52
        || (*(_BYTE *)(v5 + 16) & 0xDF) != 0x4E
        || (*(_BYTE *)(v5 + 17) & 0xDF) != 0x41
        || (*(_BYTE *)(v5 + 18) & 0xDF) != 0x54)
      {
        goto LABEL_45;
      }
      v38 = *(unsigned __int8 *)(v5 + 19);
    }
    else
    {
      if ((*(_WORD *)v5 & 0xFFDF) == 0x41
        && (*(_WORD *)(v5 + 2) & 0xFFDF) == 0x4C
        && (*(_WORD *)(v5 + 4) & 0xFFDF) == 0x54
        && (*(_WORD *)(v5 + 6) & 0xFFDF) == 0x45
        && (*(_WORD *)(v5 + 8) & 0xFFDF) == 0x52
        && (*(_WORD *)(v5 + 10) & 0xFFDF) == 0x4E
        && (*(_WORD *)(v5 + 12) & 0xFFDF) == 0x41
        && (*(_WORD *)(v5 + 14) & 0xFFDF) == 0x54
        && (*(_WORD *)(v5 + 16) & 0xFFDF) == 0x45
        && (*(_WORD *)(v5 + 18) & 0xFFDF) == 0
        && (*(_WORD *)(v5 + 20) & 0xFFDF) == 0x53
        && (*(_WORD *)(v5 + 22) & 0xFFDF) == 0x54
        && (*(_WORD *)(v5 + 24) & 0xFFDF) == 0x59
        && (*(_WORD *)(v5 + 26) & 0xFFDF) == 0x4C
        && (*(_WORD *)(v5 + 28) & 0xFFDF) == 0x45
        && (*(_WORD *)(v5 + 30) & 0xFFDF) == 0x53
        && (*(_WORD *)(v5 + 32) & 0xFFDF) == 0x48
        && (*(_WORD *)(v5 + 34) & 0xFFDF) == 0x45
        && (*(_WORD *)(v5 + 36) & 0xFFDF) == 0x45
        && (*(_WORD *)(v5 + 38) & 0xFFDF) == 0x54)
      {
LABEL_205:
        v21 = *(_BYTE *)(a1 + 1) | 3;
        goto LABEL_85;
      }
      if ((*(_WORD *)v5 & 0xFFDF) != 0x53
        || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x54
        || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x59
        || (*(_WORD *)(v5 + 6) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v5 + 8) & 0xFFDF) != 0x45
        || (*(_WORD *)(v5 + 10) & 0xFFDF) != 0x53
        || (*(_WORD *)(v5 + 12) & 0xFFDF) != 0x48
        || (*(_WORD *)(v5 + 14) & 0xFFDF) != 0x45
        || (*(_WORD *)(v5 + 16) & 0xFFDF) != 0x45
        || (*(_WORD *)(v5 + 18) & 0xFFDF) != 0x54
        || (*(_WORD *)(v5 + 20) & 0xFFDF) != 0
        || (*(_WORD *)(v5 + 22) & 0xFFDF) != 0x41
        || (*(_WORD *)(v5 + 24) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v5 + 26) & 0xFFDF) != 0x54
        || (*(_WORD *)(v5 + 28) & 0xFFDF) != 0x45
        || (*(_WORD *)(v5 + 30) & 0xFFDF) != 0x52
        || (*(_WORD *)(v5 + 32) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v5 + 34) & 0xFFDF) != 0x41
        || (*(_WORD *)(v5 + 36) & 0xFFDF) != 0x54)
      {
        goto LABEL_45;
      }
      v38 = *(unsigned __int16 *)(v5 + 38);
    }
    if ((v38 & 0xFFFFFFDF) == 0x45)
      goto LABEL_205;
  }
  else if ((_DWORD)v4 == 8)
  {
    if ((v4 & 0xFF00000000) != 0)
    {
      if ((*(_BYTE *)v5 & 0xDF) != 0x4D
        || (*(_BYTE *)(v5 + 1) & 0xDF) != 0x41
        || (*(_BYTE *)(v5 + 2) & 0xDF) != 0x4E
        || (*(_BYTE *)(v5 + 3) & 0xDF) != 0x49
        || (*(_BYTE *)(v5 + 4) & 0xDF) != 0x46
        || (*(_BYTE *)(v5 + 5) & 0xDF) != 0x45
        || (*(_BYTE *)(v5 + 6) & 0xDF) != 0x53)
      {
        goto LABEL_45;
      }
      v30 = *(unsigned __int8 *)(v5 + 7);
    }
    else
    {
      if ((*(_WORD *)v5 & 0xFFDF) != 0x4D
        || (*(_WORD *)(v5 + 2) & 0xFFDF) != 0x41
        || (*(_WORD *)(v5 + 4) & 0xFFDF) != 0x4E
        || (*(_WORD *)(v5 + 6) & 0xFFDF) != 0x49
        || (*(_WORD *)(v5 + 8) & 0xFFDF) != 0x46
        || (*(_WORD *)(v5 + 10) & 0xFFDF) != 0x45
        || (*(_WORD *)(v5 + 12) & 0xFFDF) != 0x53)
      {
        goto LABEL_45;
      }
      v30 = *(unsigned __int16 *)(v5 + 14);
    }
    if ((v30 & 0xFFFFFFDF) == 0x54)
    {
      v21 = *(_BYTE *)(a1 + 1) | 0x80;
      goto LABEL_85;
    }
  }
LABEL_45:
  v52 = v5;
  v53 = v4;
  v54 = 10;
  v55 = 0;
  v48 = (const char **)&v52;
  v49 = 0;
  v51 = v7 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v48);
  v4 = v53;
  while (v49 != (_DWORD)v4 || !v51)
  {
    v11 = *((unsigned int *)v48 + 2);
    if (v11 <= v49)
    {
      v12 = 0x100000000;
      v14 = "";
      goto LABEL_53;
    }
    LODWORD(v12) = v50;
    if (v11 - v49 <= v50)
    {
      if (!v49)
      {
        v14 = *v48;
        v12 = (uint64_t)v48[1];
        goto LABEL_53;
      }
      LODWORD(v12) = v11 - v49;
    }
    v12 = v12;
    v13 = v11 - v49;
    if (*((_BYTE *)v48 + 12))
    {
      if (v13 < v12)
        goto LABEL_324;
      v14 = &(*v48)[v49];
      v12 = v12 | 0x100000000;
    }
    else
    {
      if (v13 < v12)
      {
LABEL_324:
        __break(1u);
LABEL_325:
        if ((*(_WORD *)v5 & 0xFFDF) == 0x53
          && (*(_WORD *)(v5 + 2) & 0xFFDF) == 0x54
          && (*(_WORD *)(v5 + 4) & 0xFFDF) == 0x59
          && (*(_WORD *)(v5 + 6) & 0xFFDF) == 0x4C
          && (*(_WORD *)(v5 + 8) & 0xFFDF) == 0x45
          && (*(_WORD *)(v5 + 10) & 0xFFDF) == 0x53
          && (*(_WORD *)(v5 + 12) & 0xFFDF) == 0x48
          && (*(_WORD *)(v5 + 14) & 0xFFDF) == 0x45
          && (*(_WORD *)(v5 + 16) & 0xFFDF) == 0x45)
        {
          v23 = *(unsigned __int16 *)(v5 + 18);
LABEL_98:
          if ((v23 & 0xFFFFFFDF) == 0x54)
          {
            v21 = 1;
            goto LABEL_85;
          }
        }
LABEL_335:
        v10 = *(_QWORD *)(*(_QWORD *)(a2 + 680) + 680);
        if ((v10 & 0x40000000000000) != 0)
        {
          if (v12)
          {
            if ((*(_BYTE *)v5 & 0xDF) == 0x50
              && (*(_BYTE *)(v5 + 1) & 0xDF) == 0x52
              && (*(_BYTE *)(v5 + 2) & 0xDF) == 0x45
              && (*(_BYTE *)(v5 + 3) & 0xDF) == 0x43
              && (*(_BYTE *)(v5 + 4) & 0xDF) == 0x4F
              && (*(_BYTE *)(v5 + 5) & 0xDF) == 0x4E
              && (*(_BYTE *)(v5 + 6) & 0xDF) == 0x4E
              && (*(_BYTE *)(v5 + 7) & 0xDF) == 0x45
              && (*(_BYTE *)(v5 + 8) & 0xDF) == 0x43)
            {
              v39 = *(unsigned __int8 *)(v5 + 9);
LABEL_347:
              if ((v39 & 0xFFFFFFDF) == 0x54)
              {
                v21 = 32;
                goto LABEL_85;
              }
            }
          }
          else if ((*(_WORD *)v5 & 0xFFDF) == 0x50
                 && (*(_WORD *)(v5 + 2) & 0xFFDF) == 0x52
                 && (*(_WORD *)(v5 + 4) & 0xFFDF) == 0x45
                 && (*(_WORD *)(v5 + 6) & 0xFFDF) == 0x43
                 && (*(_WORD *)(v5 + 8) & 0xFFDF) == 0x4F
                 && (*(_WORD *)(v5 + 10) & 0xFFDF) == 0x4E
                 && (*(_WORD *)(v5 + 12) & 0xFFDF) == 0x4E
                 && (*(_WORD *)(v5 + 14) & 0xFFDF) == 0x45
                 && (*(_WORD *)(v5 + 16) & 0xFFDF) == 0x43)
          {
            v39 = *(unsigned __int16 *)(v5 + 18);
            goto LABEL_347;
          }
        }
        goto LABEL_42;
      }
      v14 = &(*v48)[2 * v49];
    }
LABEL_53:
    v44 = v14;
    v45 = v12;
    v46 = 32;
    v47 = 0;
    v40 = (uint64_t *)&v44;
    v41 = 0;
    v43 = (_DWORD)v12 == 0;
    WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v40);
    v5 = v45;
    v15 = v41;
    if (v41 != (_DWORD)v45 || !v43)
    {
      do
      {
        v17 = *((unsigned int *)v40 + 2);
        if (v17 <= v15)
          goto LABEL_74;
        LODWORD(v12) = v42;
        if (v17 - v15 <= v42)
        {
          if (!v15)
          {
            v16 = *v40;
            v12 = v40[1];
            goto LABEL_67;
          }
          LODWORD(v12) = v17 - v15;
        }
        v18 = v15;
        v12 = v12;
        v19 = v17 - v15;
        if (*((_BYTE *)v40 + 12))
        {
          if (v19 < v12)
            goto LABEL_324;
          v16 = *v40 + v18;
          v12 = v12 | 0x100000000;
        }
        else
        {
          if (v19 < v12)
            goto LABEL_324;
          v16 = *v40 + 2 * v18;
        }
LABEL_67:
        if ((int)v12 <= 9)
        {
          if ((_DWORD)v12 == 9)
          {
            if ((v12 & 0xFF00000000) != 0)
            {
              if ((*(_BYTE *)v16 & 0xDF) != 0x41
                || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x4C
                || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x54
                || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x45
                || (*(_BYTE *)(v16 + 4) & 0xDF) != 0x52
                || (*(_BYTE *)(v16 + 5) & 0xDF) != 0x4E
                || (*(_BYTE *)(v16 + 6) & 0xDF) != 0x41
                || (*(_BYTE *)(v16 + 7) & 0xDF) != 0x54)
              {
                goto LABEL_74;
              }
              v33 = *(unsigned __int8 *)(v16 + 8);
            }
            else
            {
              if ((*(_WORD *)v16 & 0xFFDF) != 0x41
                || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x4C
                || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x54
                || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x45
                || (*(_WORD *)(v16 + 8) & 0xFFDF) != 0x52
                || (*(_WORD *)(v16 + 10) & 0xFFDF) != 0x4E
                || (*(_WORD *)(v16 + 12) & 0xFFDF) != 0x41
                || (*(_WORD *)(v16 + 14) & 0xFFDF) != 0x54)
              {
                goto LABEL_74;
              }
              v33 = *(unsigned __int16 *)(v16 + 16);
            }
            if ((v33 & 0xFFFFFFDF) == 0x45)
            {
              v32 = *(_BYTE *)(a1 + 1) | 2;
              goto LABEL_242;
            }
          }
          else
          {
            if ((_DWORD)v12 != 4)
              goto LABEL_74;
            if ((v12 & 0xFF00000000) != 0)
            {
              if ((*(_BYTE *)v16 & 0xDF) != 0x49
                || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x43
                || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x4F)
              {
                goto LABEL_74;
              }
              v34 = *(unsigned __int8 *)(v16 + 3);
            }
            else
            {
              if ((*(_WORD *)v16 & 0xFFDF) != 0x49
                || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x43
                || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x4F)
              {
                goto LABEL_74;
              }
              v34 = *(unsigned __int16 *)(v16 + 6);
            }
            if ((v34 & 0xFFFFFFDF) == 0x4E)
            {
              v35 = 1;
              goto LABEL_250;
            }
          }
        }
        else
        {
          switch((_DWORD)v12)
          {
            case 0xA:
              if ((v12 & 0xFF00000000) != 0)
              {
                if ((*(_BYTE *)v16 & 0xDF) != 0x53
                  || (*(_BYTE *)(v16 + 1) & 0xDF) != 0x54
                  || (*(_BYTE *)(v16 + 2) & 0xDF) != 0x59
                  || (*(_BYTE *)(v16 + 3) & 0xDF) != 0x4C
                  || (*(_BYTE *)(v16 + 4) & 0xDF) != 0x45
                  || (*(_BYTE *)(v16 + 5) & 0xDF) != 0x53
                  || (*(_BYTE *)(v16 + 6) & 0xDF) != 0x48
                  || (*(_BYTE *)(v16 + 7) & 0xDF) != 0x45
                  || (*(_BYTE *)(v16 + 8) & 0xDF) != 0x45)
                {
                  break;
                }
                v31 = *(unsigned __int8 *)(v16 + 9);
              }
              else
              {
                if ((*(_WORD *)v16 & 0xFFDF) != 0x53
                  || (*(_WORD *)(v16 + 2) & 0xFFDF) != 0x54
                  || (*(_WORD *)(v16 + 4) & 0xFFDF) != 0x59
                  || (*(_WORD *)(v16 + 6) & 0xFFDF) != 0x4C
                  || (*(_WORD *)(v16 + 8) & 0xFFDF) != 0x45
                  || (*(_WORD *)(v16 + 10) & 0xFFDF) != 0x53
                  || (*(_WORD *)(v16 + 12) & 0xFFDF) != 0x48
                  || (*(_WORD *)(v16 + 14) & 0xFFDF) != 0x45
                  || (*(_WORD *)(v16 + 16) & 0xFFDF) != 0x45)
                {
                  break;
                }
                v31 = *(unsigned __int16 *)(v16 + 18);
              }
              if ((v31 & 0xFFFFFFDF) == 0x54)
              {
                v32 = *(_BYTE *)(a1 + 1) | 1;
LABEL_242:
                *(_BYTE *)(a1 + 1) = v32;
              }
              break;
            case 0x10:
              if ((v12 & 0xFF00000000) != 0)
              {
                if ((*(_BYTE *)v16 & 0xDF) == 0x41
                  && (*(_BYTE *)(v16 + 1) & 0xDF) == 0x50
                  && (*(_BYTE *)(v16 + 2) & 0xDF) == 0x50
                  && (*(_BYTE *)(v16 + 3) & 0xDF) == 0x4C
                  && (*(_BYTE *)(v16 + 4) & 0xDF) == 0x45
                  && (*(_BYTE *)(v16 + 5) & 0xDF) == 0xD
                  && (*(_BYTE *)(v16 + 6) & 0xDF) == 0x54
                  && (*(_BYTE *)(v16 + 7) & 0xDF) == 0x4F
                  && (*(_BYTE *)(v16 + 8) & 0xDF) == 0x55
                  && (*(_BYTE *)(v16 + 9) & 0xDF) == 0x43
                  && (*(_BYTE *)(v16 + 10) & 0xDF) == 0x48
                  && (*(_BYTE *)(v16 + 11) & 0xDF) == 0xD
                  && (*(_BYTE *)(v16 + 12) & 0xDF) == 0x49
                  && (*(_BYTE *)(v16 + 13) & 0xDF) == 0x43
                  && (*(_BYTE *)(v16 + 14) & 0xDF) == 0x4F)
                {
                  v36 = *(unsigned __int8 *)(v16 + 15);
                  goto LABEL_268;
                }
              }
              else if ((*(_WORD *)v16 & 0xFFDF) == 0x41
                     && (*(_WORD *)(v16 + 2) & 0xFFDF) == 0x50
                     && (*(_WORD *)(v16 + 4) & 0xFFDF) == 0x50
                     && (*(_WORD *)(v16 + 6) & 0xFFDF) == 0x4C
                     && (*(_WORD *)(v16 + 8) & 0xFFDF) == 0x45
                     && (*(_WORD *)(v16 + 10) & 0xFFDF) == 0xD
                     && (*(_WORD *)(v16 + 12) & 0xFFDF) == 0x54
                     && (*(_WORD *)(v16 + 14) & 0xFFDF) == 0x4F
                     && (*(_WORD *)(v16 + 16) & 0xFFDF) == 0x55
                     && (*(_WORD *)(v16 + 18) & 0xFFDF) == 0x43
                     && (*(_WORD *)(v16 + 20) & 0xFFDF) == 0x48
                     && (*(_WORD *)(v16 + 22) & 0xFFDF) == 0xD
                     && (*(_WORD *)(v16 + 24) & 0xFFDF) == 0x49
                     && (*(_WORD *)(v16 + 26) & 0xFFDF) == 0x43
                     && (*(_WORD *)(v16 + 28) & 0xFFDF) == 0x4F)
              {
                v36 = *(unsigned __int16 *)(v16 + 30);
LABEL_268:
                if ((v36 & 0xFFFFFFDF) != 0x4E)
                  break;
                v35 = 2;
LABEL_250:
                *(_BYTE *)a1 = v35;
              }
              break;
            case 0x1C:
              if ((v12 & 0xFF00000000) != 0)
              {
                if ((*(_BYTE *)v16 & 0xDF) == 0x41
                  && (*(_BYTE *)(v16 + 1) & 0xDF) == 0x50
                  && (*(_BYTE *)(v16 + 2) & 0xDF) == 0x50
                  && (*(_BYTE *)(v16 + 3) & 0xDF) == 0x4C
                  && (*(_BYTE *)(v16 + 4) & 0xDF) == 0x45
                  && (*(_BYTE *)(v16 + 5) & 0xDF) == 0xD
                  && (*(_BYTE *)(v16 + 6) & 0xDF) == 0x54
                  && (*(_BYTE *)(v16 + 7) & 0xDF) == 0x4F
                  && (*(_BYTE *)(v16 + 8) & 0xDF) == 0x55
                  && (*(_BYTE *)(v16 + 9) & 0xDF) == 0x43
                  && (*(_BYTE *)(v16 + 10) & 0xDF) == 0x48
                  && (*(_BYTE *)(v16 + 11) & 0xDF) == 0xD
                  && (*(_BYTE *)(v16 + 12) & 0xDF) == 0x49
                  && (*(_BYTE *)(v16 + 13) & 0xDF) == 0x43
                  && (*(_BYTE *)(v16 + 14) & 0xDF) == 0x4F
                  && (*(_BYTE *)(v16 + 15) & 0xDF) == 0x4E
                  && (*(_BYTE *)(v16 + 16) & 0xDF) == 0xD
                  && (*(_BYTE *)(v16 + 17) & 0xDF) == 0x50
                  && (*(_BYTE *)(v16 + 18) & 0xDF) == 0x52
                  && (*(_BYTE *)(v16 + 19) & 0xDF) == 0x45
                  && (*(_BYTE *)(v16 + 20) & 0xDF) == 0x43
                  && (*(_BYTE *)(v16 + 21) & 0xDF) == 0x4F
                  && (*(_BYTE *)(v16 + 22) & 0xDF) == 0x4D
                  && (*(_BYTE *)(v16 + 23) & 0xDF) == 0x50
                  && (*(_BYTE *)(v16 + 24) & 0xDF) == 0x4F
                  && (*(_BYTE *)(v16 + 25) & 0xDF) == 0x53
                  && (*(_BYTE *)(v16 + 26) & 0xDF) == 0x45)
                {
                  v37 = *(unsigned __int8 *)(v16 + 27);
LABEL_299:
                  if ((v37 & 0xFFFFFFDF) != 0x44)
                    break;
                  v35 = 4;
                  goto LABEL_250;
                }
              }
              else if ((*(_WORD *)v16 & 0xFFDF) == 0x41
                     && (*(_WORD *)(v16 + 2) & 0xFFDF) == 0x50
                     && (*(_WORD *)(v16 + 4) & 0xFFDF) == 0x50
                     && (*(_WORD *)(v16 + 6) & 0xFFDF) == 0x4C
                     && (*(_WORD *)(v16 + 8) & 0xFFDF) == 0x45
                     && (*(_WORD *)(v16 + 10) & 0xFFDF) == 0xD
                     && (*(_WORD *)(v16 + 12) & 0xFFDF) == 0x54
                     && (*(_WORD *)(v16 + 14) & 0xFFDF) == 0x4F
                     && (*(_WORD *)(v16 + 16) & 0xFFDF) == 0x55
                     && (*(_WORD *)(v16 + 18) & 0xFFDF) == 0x43
                     && (*(_WORD *)(v16 + 20) & 0xFFDF) == 0x48
                     && (*(_WORD *)(v16 + 22) & 0xFFDF) == 0xD
                     && (*(_WORD *)(v16 + 24) & 0xFFDF) == 0x49
                     && (*(_WORD *)(v16 + 26) & 0xFFDF) == 0x43
                     && (*(_WORD *)(v16 + 28) & 0xFFDF) == 0x4F
                     && (*(_WORD *)(v16 + 30) & 0xFFDF) == 0x4E
                     && (*(_WORD *)(v16 + 32) & 0xFFDF) == 0xD
                     && (*(_WORD *)(v16 + 34) & 0xFFDF) == 0x50
                     && (*(_WORD *)(v16 + 36) & 0xFFDF) == 0x52
                     && (*(_WORD *)(v16 + 38) & 0xFFDF) == 0x45
                     && (*(_WORD *)(v16 + 40) & 0xFFDF) == 0x43
                     && (*(_WORD *)(v16 + 42) & 0xFFDF) == 0x4F
                     && (*(_WORD *)(v16 + 44) & 0xFFDF) == 0x4D
                     && (*(_WORD *)(v16 + 46) & 0xFFDF) == 0x50
                     && (*(_WORD *)(v16 + 48) & 0xFFDF) == 0x4F
                     && (*(_WORD *)(v16 + 50) & 0xFFDF) == 0x53
                     && (*(_WORD *)(v16 + 52) & 0xFFDF) == 0x45)
              {
                v37 = *(unsigned __int16 *)(v16 + 54);
                goto LABEL_299;
              }
              break;
          }
        }
LABEL_74:
        WTF::StringView::SplitResult::Iterator::operator++();
        v15 = v41;
      }
      while (v41 != (_DWORD)v5 || !v43);
    }
    WTF::StringView::SplitResult::Iterator::operator++();
  }
  return a1;
}

uint64_t WebCore::jsHTMLImageElement_src(uint64_t a1, uint64_t a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  WebCore::Element *v6;
  uint64_t v7;
  _QWORD *Attribute;
  uint64_t *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 shouldMaskURLForBindingsInternal;
  WTF::StringImpl *v22;
  char v23;

  v6 = *(WebCore::Element **)(a2 + 24);
  v7 = *(_QWORD *)(*((_QWORD *)v6 + 5) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  Attribute = (_QWORD *)WebCore::Element::getAttribute(v6, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a3, a4, a5);
  v9 = (uint64_t *)&v22;
  WebCore::Document::completeURL((WebCore::Document *)v7, Attribute, v7 + 848, 0, (WTF::URL *)&v22);
  if ((v23 & 2) == 0)
  {
    v9 = (uint64_t *)&v22;
    shouldMaskURLForBindingsInternal = WebCore::Document::shouldMaskURLForBindingsInternal((WebCore::Document *)v7, (const WTF::URL *)&v22);
    if (shouldMaskURLForBindingsInternal)
      v9 = WebCore::Document::maskedURLForBindings((WebCore::Document *)shouldMaskURLForBindingsInternal);
  }
  v11 = *v9;
  if (v11)
    *(_DWORD *)v11 += 2;
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v10);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v13 = *(_QWORD *)(a1 + 56);
  v14 = (uint64_t *)(v13 + 41968);
  if (!v11)
    return *v14;
  v15 = *(_DWORD *)(v11 + 4);
  if (v15)
  {
    if (v15 != 1)
    {
LABEL_12:
      v16 = *(_QWORD *)(v13 + 64760);
      if (!v16 || v11 != *(_QWORD *)(v16 + 8))
        v16 = JSC::jsStringWithCacheSlowCase();
      goto LABEL_15;
    }
    v18 = *(unsigned __int8 **)(v11 + 8);
    if ((*(_BYTE *)(v11 + 16) & 4) != 0)
    {
      v19 = *v18;
    }
    else
    {
      v20 = *(unsigned __int16 *)v18;
      if (v20 > 0xFF)
        goto LABEL_12;
      v19 = v20;
    }
    v16 = *(_QWORD *)(v13 + 8 * v19 + 42216);
  }
  else
  {
    v16 = *v14;
  }
LABEL_15:
  if (*(_DWORD *)v11 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v11, v10);
  else
    *(_DWORD *)v11 -= 2;
  return v16;
}

uint64_t WebCore::CloneSerializer::write(uint64_t this, WTF::StringImpl **a2)
{
  uint64_t v3;
  uint64_t *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  void *v23;
  size_t v24;
  size_t v25;
  size_t v26;
  unint64_t v27;
  unint64_t v28;
  WTF::StringImpl **v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void *v47;
  void *v48;

  v3 = this;
  v4 = (uint64_t *)(this + 288);
  v5 = *a2;
  if (*a2)
    *(_DWORD *)v5 += 2;
  v6 = *v4;
  if (*v4)
  {
    v7 = *(_DWORD *)(v6 - 12);
LABEL_5:
    v8 = *(_DWORD *)(v6 - 8);
    goto LABEL_6;
  }
  this = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,unsigned int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,unsigned int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash((uint64_t *)(this + 288), 8u);
  v7 = 0;
  v6 = *v4;
  if (*v4)
    goto LABEL_5;
  v8 = 0;
LABEL_6:
  v9 = *((_DWORD *)v5 + 4);
  if ((v9 & 0x20) != 0)
    v9 = *((_DWORD *)v5 + 8);
  v10 = v8 & (v9 >> 8);
  v11 = (WTF::StringImpl **)(v6 + 16 * v10);
  v12 = *v11;
  if (*v11)
  {
    v29 = 0;
    v30 = 1;
    while (v12 != v5)
    {
      if (v12 == (WTF::StringImpl *)-1)
        v29 = v11;
      v10 = (v10 + v30) & v8;
      v11 = (WTF::StringImpl **)(v6 + 16 * v10);
      v12 = *v11;
      ++v30;
      if (!*v11)
      {
        if (v29)
        {
          *v29 = 0;
          v29[1] = 0;
          --*(_DWORD *)(*v4 - 16);
          v11 = v29;
        }
        goto LABEL_9;
      }
    }
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    WebCore::CloneSerializer::write(*(_QWORD *)(v3 + 216), -2);
    return (uint64_t)WebCore::CloneSerializer::writeConstantPoolIndex<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((char *)v3, *(_QWORD *)(v3 + 288), *((_DWORD *)v11 + 2));
  }
LABEL_9:
  *v11 = v5;
  *((_DWORD *)v11 + 2) = v7;
  v13 = *v4;
  if (*v4)
    v14 = *(_DWORD *)(v13 - 12) + 1;
  else
    v14 = 1;
  *(_DWORD *)(v13 - 12) = v14;
  v15 = *v4;
  if (*v4)
    v16 = *(_DWORD *)(v15 - 12);
  else
    v16 = 0;
  v17 = (*(_DWORD *)(v15 - 16) + v16);
  v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17)
      goto LABEL_15;
  }
  else
  {
    if (3 * v18 > 4 * v17)
      goto LABEL_15;
    if (!(_DWORD)v18)
    {
      v31 = 8;
      goto LABEL_53;
    }
  }
  v31 = (_DWORD)v18 << (6 * *(_DWORD *)(v15 - 12) >= (2 * v18));
LABEL_53:
  this = WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,unsigned int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,unsigned int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(v4, v31);
LABEL_15:
  v19 = *a2;
  if (*a2)
  {
    v20 = *((_DWORD *)v19 + 1);
    if (v20 >= 0x7FFFFFFE)
      goto LABEL_70;
    if ((*((_BYTE *)v19 + 16) & 4) == 0)
    {
      this = WebCore::CloneSerializer::write(*(_QWORD *)(v3 + 216), v20);
      goto LABEL_19;
    }
  }
  else
  {
    v20 = 0;
  }
  v38 = *(_QWORD *)(v3 + 216);
  v39 = *(unsigned int *)(v38 + 8);
  v40 = *(unsigned int *)(v38 + 12);
  v41 = v40 + 4;
  if (v40 + 4 > v39)
  {
    v43 = v39 + (v39 >> 2);
    if (v43 >= 0x10)
      v44 = v43 + 1;
    else
      v44 = 16;
    if (v44 <= v41)
      v45 = v40 + 4;
    else
      v45 = v44;
    if (HIDWORD(v45))
      goto LABEL_79;
    v46 = *(void **)v38;
    v47 = (void *)WTF::fastMalloc((WTF *)v45);
    *(_DWORD *)(v38 + 8) = v45;
    *(_QWORD *)v38 = v47;
    this = (uint64_t)memcpy(v47, v46, v40);
    if (v46)
    {
      if (*(void **)v38 == v46)
      {
        *(_QWORD *)v38 = 0;
        *(_DWORD *)(v38 + 8) = 0;
      }
      this = WTF::fastFree((WTF *)v46, v48);
    }
  }
  v42 = *(unsigned int *)(v38 + 12);
  if (v41 < v42)
  {
    __break(0xC471u);
    JUMPOUT(0x1944D1938);
  }
  *(_DWORD *)(*(_QWORD *)v38 + v42) = v20 | 0x80000000;
  *(_DWORD *)(v38 + 12) = v41;
LABEL_19:
  if (v20)
  {
    v21 = *a2;
    if (*a2)
    {
      v22 = *(_QWORD *)(v3 + 216);
      v23 = (void *)*((_QWORD *)v21 + 1);
      v24 = *((unsigned int *)v21 + 1);
      if ((*((_BYTE *)v21 + 16) & 4) != 0)
      {
        if (!(_DWORD)v24)
          return this;
        v25 = *(unsigned int *)(v22 + 8);
        v26 = *(unsigned int *)(v22 + 12);
        v27 = v26 + v24;
        if (v26 + v24 > v25)
        {
          v32 = v25 + (v25 >> 2);
          if (v32 >= 0x10)
            v33 = v32 + 1;
          else
            v33 = 16;
          if (v33 <= v27)
            v34 = v26 + v24;
          else
            v34 = v33;
          if (HIDWORD(v34))
          {
            __break(0xC471u);
            JUMPOUT(0x1944D1930);
          }
          v35 = *(void **)v22;
          v36 = (void *)WTF::fastMalloc((WTF *)v34);
          *(_DWORD *)(v22 + 8) = v34;
          *(_QWORD *)v22 = v36;
          memcpy(v36, v35, v26);
          if (v35)
          {
            if (*(void **)v22 == v35)
            {
              *(_QWORD *)v22 = 0;
              *(_DWORD *)(v22 + 8) = 0;
            }
            WTF::fastFree((WTF *)v35, v37);
          }
        }
        v28 = *(unsigned int *)(v22 + 12);
        if (v27 >= v28)
        {
          this = (uint64_t)memcpy((void *)(*(_QWORD *)v22 + v28), v23, v24);
          *(_DWORD *)(v22 + 12) = v27;
          return this;
        }
LABEL_79:
        __break(0xC471u);
        JUMPOUT(0x1944D1928);
      }
      this = WebCore::writeLittleEndian<char16_t>(*(_QWORD *)(v3 + 216), v23, v24);
      if ((this & 1) == 0)
LABEL_70:
        *(_BYTE *)(v3 + 8) = 1;
    }
  }
  return this;
}

BOOL WebCore::CloneSerializer::dumpIfTerminal(WebCore::CloneSerializer *this, JSC::Structure *a2, int *a3, __n128 a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  const WTF::String *v36;
  const WTF::String **v37;
  uint64_t v38;
  uint64_t v39;
  JSC::JSGlobalObject *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _BOOL4 v44;
  BOOL v45;
  _BOOL4 v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  _BOOL4 v53;
  _BOOL4 v54;
  uint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  _BOOL4 v60;
  _BOOL4 v61;
  _BOOL4 v62;
  _BOOL4 v63;
  _BOOL4 v64;
  _BOOL4 v65;
  _BOOL4 v66;
  _BOOL4 v67;
  _BOOL4 v68;
  _BOOL4 v69;
  _BOOL4 v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v78;
  uint64_t v80;
  uint64_t v82;
  uint64_t v84;
  uint64_t v86;
  uint64_t v88;
  uint64_t v90;
  uint64_t v92;
  uint64_t v94;
  uint64_t v96;
  uint64_t v98;
  uint64_t v100;
  uint64_t v102;
  uint64_t v104;
  uint64_t v106;
  uint64_t v108;
  uint64_t v110;
  uint64_t v112;
  uint64_t v114;
  uint64_t v116;
  char *v118;
  char v119;
  char **v120;
  JSC::JSBigInt *v121;
  double v122;
  const WTF::String **v123;
  const WTF::String **v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v129;
  void *v130;
  unint64_t v131;
  void *v132;
  size_t v133;
  unsigned int v134;
  char v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  uint64_t v138;
  WTF::StringImpl *v139;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  WTF::StringImpl *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  const WTF::String **v160;
  uint64_t v161;
  uint64_t v162;
  const WTF::String ***v163;
  uint64_t v164;
  const WTF::String **v165;
  const WebCore::CryptoKey *v166;
  uint64_t v167;
  void *v168;
  void *v169;
  void *v170;
  void *v171;
  JSC::JSGlobalObject *v172;
  uint64_t v173;
  void *v174;
  WTF *v175;
  uint64_t v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  uint64_t v179;
  const WTF::String **v180;
  const WTF::String **v181;
  const WTF::String *v182;
  WTF::StringImpl *v183;
  const WTF::URL *v184;
  uint64_t v185;
  void *v186;
  void *v187;
  void *v188;
  void *v189;
  void *v190;
  void *v191;
  void *v192;
  void *v193;
  void *v194;
  void *v195;
  void *v196;
  void *v197;
  void *v198;
  void *v199;
  WTF *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v204;
  double v205;
  int v206;
  double v207;
  int v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  const WTF::String *v211;
  char v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  uint64_t v215;
  unsigned int v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  uint64_t v219;
  int v220;
  unsigned int v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t (*v228)();
  int v229;
  uint64_t v230;
  unsigned int v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  size_t v236;
  uint64_t v237;
  WTF::StringImpl *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD v244[2];
  _QWORD v245[2];
  _QWORD v246[2];
  _QWORD v247[2];
  _QWORD v248[2];
  _QWORD v249[2];
  _QWORD v250[2];
  _QWORD v251[2];
  JSC::JSRopeString *v252[2];
  WTF::StringImpl *v253[2];
  WTF::StringImpl *v254[2];
  WTF::StringImpl *v255[2];
  WebCore *v256[2];
  _QWORD v257[2];
  JSC::JSRopeString *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  WTF::StringImpl *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  WTF *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  WTF::StringImpl *v270[2];
  __int128 v271;
  __int128 v272;
  char v273;
  WTF *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;

  v278 = *MEMORY[0x1E0C80C00];
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
  {
    if (a2 == (JSC::Structure *)2)
    {
      v20 = *((_QWORD *)this + 27);
      v21 = 4;
    }
    else
    {
      if (a2 != (JSC::Structure *)10)
      {
        if ((unint64_t)a2 >> 49)
        {
          if ((unint64_t)a2 < 0xFFFE000000000000)
          {
            v6 = *((_QWORD *)this + 27);
            LOBYTE(v270[0]) = 10;
            v7 = *(unsigned int *)(v6 + 12);
            if ((_DWORD)v7 == *(_DWORD *)(v6 + 8))
              *(_BYTE *)(*(_QWORD *)v6 + *(unsigned int *)(v6 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v6, (WTF *)(v7 + 1), (unint64_t)v270);
            else
              *(_BYTE *)(*(_QWORD *)v6 + v7) = 10;
            ++*(_DWORD *)(v6 + 12);
            v8 = *((_QWORD *)this + 27);
            v9 = *(unsigned int *)(v8 + 8);
            v10 = *(unsigned int *)(v8 + 12);
            v11 = v10 + 8;
            if (v10 + 8 > v9)
            {
              v23 = v9 + (v9 >> 2);
              if (v23 >= 0x10)
                v24 = v23 + 1;
              else
                v24 = 16;
              if (v24 <= v11)
                v25 = v10 + 8;
              else
                v25 = v24;
              if (HIDWORD(v25))
              {
                __break(0xC471u);
                JUMPOUT(0x1944D32ECLL);
              }
              v26 = *(void **)v8;
              v27 = (void *)WTF::fastMalloc((WTF *)v25);
              *(_DWORD *)(v8 + 8) = v25;
              *(_QWORD *)v8 = v27;
              memcpy(v27, v26, v10);
              if (v26)
              {
                if (*(void **)v8 == v26)
                {
                  *(_QWORD *)v8 = 0;
                  *(_DWORD *)(v8 + 8) = 0;
                }
                WTF::fastFree((WTF *)v26, v28);
              }
            }
            v12 = *(unsigned int *)(v8 + 12);
            if (v11 < v12)
            {
              __break(0xC471u);
              JUMPOUT(0x1944D32BCLL);
            }
            *(_QWORD *)(*(_QWORD *)v8 + v12) = (char *)a2 - 0x2000000000000;
LABEL_11:
            *(_DWORD *)(v8 + 12) = v11;
            return 1;
          }
          if ((_DWORD)a2)
          {
            if ((_DWORD)a2 != 1)
            {
              v15 = *((_QWORD *)this + 27);
              LOBYTE(v270[0]) = 5;
              v16 = *(unsigned int *)(v15 + 12);
              if ((_DWORD)v16 == *(_DWORD *)(v15 + 8))
                *(_BYTE *)(*(_QWORD *)v15 + *(unsigned int *)(v15 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v15, (WTF *)(v16 + 1), (unint64_t)v270);
              else
                *(_BYTE *)(*(_QWORD *)v15 + v16) = 5;
              ++*(_DWORD *)(v15 + 12);
              v8 = *((_QWORD *)this + 27);
              v17 = *(unsigned int *)(v8 + 8);
              v18 = *(unsigned int *)(v8 + 12);
              v11 = v18 + 4;
              if (v18 + 4 > v17)
              {
                v29 = v17 + (v17 >> 2);
                if (v29 >= 0x10)
                  v30 = v29 + 1;
                else
                  v30 = 16;
                if (v30 <= v11)
                  v31 = v18 + 4;
                else
                  v31 = v30;
                if (HIDWORD(v31))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1944D32FCLL);
                }
                v32 = *(void **)v8;
                v33 = (void *)WTF::fastMalloc((WTF *)v31);
                *(_DWORD *)(v8 + 8) = v31;
                *(_QWORD *)v8 = v33;
                memcpy(v33, v32, v18);
                if (v32)
                {
                  if (*(void **)v8 == v32)
                  {
                    *(_QWORD *)v8 = 0;
                    *(_DWORD *)(v8 + 8) = 0;
                  }
                  WTF::fastFree((WTF *)v32, v34);
                }
              }
              v19 = *(unsigned int *)(v8 + 12);
              if (v11 < v19)
              {
                __break(0xC471u);
                JUMPOUT(0x1944D32C4);
              }
              *(_DWORD *)(*(_QWORD *)v8 + v19) = (_DWORD)a2;
              goto LABEL_11;
            }
            v20 = *((_QWORD *)this + 27);
            v21 = 7;
          }
          else
          {
            v20 = *((_QWORD *)this + 27);
            v21 = 6;
          }
          goto LABEL_22;
        }
        if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFFELL) == 6)
        {
          v20 = *((_QWORD *)this + 27);
          if (a2 == (JSC::Structure *)7)
            v21 = 9;
          else
            v21 = 8;
          goto LABEL_22;
        }
LABEL_351:
        *a3 = 5;
        return 1;
      }
      v20 = *((_QWORD *)this + 27);
      v21 = 3;
    }
LABEL_22:
    LOBYTE(v270[0]) = v21;
    v22 = *(unsigned int *)(v20 + 12);
    if ((_DWORD)v22 == *(_DWORD *)(v20 + 8))
      *(_BYTE *)(*(_QWORD *)v20 + *(unsigned int *)(v20 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v20, (WTF *)(v22 + 1), (unint64_t)v270);
    else
      *(_BYTE *)(*(_QWORD *)v20 + v22) = v21;
LABEL_24:
    ++*(_DWORD *)(v20 + 12);
    return 1;
  }
  v35 = *((unsigned __int8 *)a2 + 5);
  switch(v35)
  {
    case 2u:
      v37 = (const WTF::String **)((char *)a2 + 8);
      v36 = (const WTF::String *)*((_QWORD *)a2 + 1);
      if ((v36 & 1) != 0)
      {
        v37 = (const WTF::String **)JSC::JSRopeString::resolveRope(a2, *(JSC::JSGlobalObject **)this);
        v36 = *v37;
      }
      if (v36 && *((_DWORD *)v36 + 1))
      {
        v72 = *((_QWORD *)this + 27);
        LOBYTE(v270[0]) = 16;
        v73 = *(unsigned int *)(v72 + 12);
        if ((_DWORD)v73 == *(_DWORD *)(v72 + 8))
          *(_BYTE *)(*(_QWORD *)v72 + *(unsigned int *)(v72 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v72, (WTF *)(v73 + 1), (unint64_t)v270);
        else
          *(_BYTE *)(*(_QWORD *)v72 + v73) = 16;
        ++*(_DWORD *)(v72 + 12);
        WebCore::CloneSerializer::write((WTF::StringImpl **)this, *v37);
      }
      else
      {
        v38 = *((_QWORD *)this + 27);
        LOBYTE(v270[0]) = 17;
        v39 = *(unsigned int *)(v38 + 12);
        if ((_DWORD)v39 == *(_DWORD *)(v38 + 8))
          *(_BYTE *)(*(_QWORD *)v38 + *(unsigned int *)(v38 + 12)) = *WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v38, (WTF *)(v39 + 1), (unint64_t)v270);
        else
          *(_BYTE *)(*(_QWORD *)v38 + v39) = 17;
        ++*(_DWORD *)(v38 + 12);
      }
      return 1;
    case 3u:
      WebCore::CloneSerializer::write(*((char **)this + 27), 47);
      v120 = (char **)this;
      v121 = a2;
LABEL_298:
      WebCore::CloneSerializer::dumpHeapBigIntData(v120, v121);
      return 1;
    case 4u:
      goto LABEL_351;
  }
  v40 = *(JSC::JSGlobalObject **)this;
  v41 = v35 & 0xFE;
  if (v35 >= 0x17 && v41 == 36)
    return 0;
  if (v35 < 0x17)
  {
    v118 = (char *)*((_QWORD *)this + 27);
    v119 = 4;
LABEL_296:
    WebCore::CloneSerializer::write(v118, v119);
    return 1;
  }
  v42 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v43 = 16 * v42;
  if (16 * v42 == MEMORY[0x1E0CBE2E0])
  {
    WebCore::CloneSerializer::write(*((char **)this + 27), 11);
    v122 = *((double *)a2 + 2);
LABEL_300:
    WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v122);
    return 1;
  }
  v44 = v42 != 0;
  if ((_DWORD)v42)
    v45 = v43 == MEMORY[0x1E0CBE360];
  else
    v45 = 1;
  v46 = v42 != 0;
  if (!v45)
  {
    v74 = 16 * v42;
    do
    {
      v74 = *(_QWORD *)(v74 + 16);
      v46 = v74 != 0;
    }
    while (v74 != MEMORY[0x1E0CBE360] && v74 != 0);
  }
  if (v46)
  {
    if (!WebCore::CloneSerializer::addToObjectPoolIfNotDupe<(WebCore::SerializationTag)24,(WebCore::SerializationTag)25,(WebCore::SerializationTag)255>((uint64_t)this, a2))return 1;
    if (JSC::JSValue::toBoolean(*((_QWORD *)a2 + 2), *(_QWORD *)this))
      v119 = 24;
    else
      v119 = 25;
    v118 = (char *)*((_QWORD *)this + 27);
    goto LABEL_296;
  }
  if (v41 == 76)
  {
    if (WebCore::CloneSerializer::addToObjectPoolIfNotDupe<(WebCore::SerializationTag)24,(WebCore::SerializationTag)25,(WebCore::SerializationTag)255>((uint64_t)this, a2))
    {
      v123 = (const WTF::String **)*((_QWORD *)a2 + 2);
      v124 = v123 + 1;
      if (((_BYTE)v123[1] & 1) != 0)
        v124 = (const WTF::String **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v123, *(JSC::JSGlobalObject **)this);
      WebCore::CloneSerializer::dumpStringObject((char *)this, v124);
    }
    return 1;
  }
  if (v35 == 30)
  {
    if (!WebCore::CloneSerializer::addToObjectPoolIfNotDupe<(WebCore::SerializationTag)24,(WebCore::SerializationTag)25,(WebCore::SerializationTag)255>((uint64_t)this, a2))return 1;
    WebCore::CloneSerializer::write(*((char **)this + 27), 28);
    v125 = *((_QWORD *)a2 + 2);
    if (v125 >= 0xFFFE000000000000)
      v122 = (double)(int)v125;
    else
      *(_QWORD *)&v122 = v125 - 0x2000000000000;
    goto LABEL_300;
  }
  if (v43 == MEMORY[0x1E0CBE2D0])
  {
    if (!WebCore::CloneSerializer::addToObjectPoolIfNotDupe<(WebCore::SerializationTag)24,(WebCore::SerializationTag)25,(WebCore::SerializationTag)255>((uint64_t)this, a2))return 1;
    WebCore::CloneSerializer::write(*((char **)this + 27), 48);
    v121 = (JSC::JSBigInt *)*((_QWORD *)a2 + 2);
    v120 = (char **)this;
    goto LABEL_298;
  }
  v47 = v42 != 0;
  if ((_DWORD)v42)
  {
    v47 = 1;
    if ((char **)v43 != &WebCore::JSFile::s_info)
    {
      v76 = 16 * v42;
      do
      {
        v76 = *(_QWORD *)(v76 + 16);
        v47 = v76 != 0;
      }
      while ((char **)v76 != &WebCore::JSFile::s_info && v76 != 0);
    }
  }
  if (v47)
  {
    v160 = (const WTF::String **)*((_QWORD *)a2 + 3);
    if (v160)
    {
      WebCore::CloneSerializer::write(*((char **)this + 27), 12);
      WebCore::CloneSerializer::write(this, v160);
      return 1;
    }
  }
  v48 = v42 != 0;
  if ((_DWORD)v42)
  {
    v48 = 1;
    if ((char **)v43 != &WebCore::JSFileList::s_info)
    {
      v78 = 16 * v42;
      do
      {
        v78 = *(_QWORD *)(v78 + 16);
        v48 = v78 != 0;
      }
      while ((char **)v78 != &WebCore::JSFileList::s_info && v78 != 0);
    }
  }
  if (v48)
  {
    v161 = *((_QWORD *)a2 + 3);
    if (v161)
    {
      WebCore::CloneSerializer::write(*((char **)this + 27), 13);
      WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(_DWORD *)(v161 + 28));
      v162 = *(unsigned int *)(v161 + 28);
      if ((_DWORD)v162)
      {
        v163 = *(const WTF::String ****)(v161 + 16);
        v164 = 8 * v162;
        v13 = 1;
        do
        {
          v165 = *v163++;
          WebCore::CloneSerializer::write(this, v165);
          v164 -= 8;
        }
        while (v164);
        return v13;
      }
      return 1;
    }
  }
  v49 = v42 != 0;
  if ((_DWORD)v42)
  {
    v49 = 1;
    if ((char **)v43 != &WebCore::JSBlob::s_info)
    {
      v80 = 16 * v42;
      do
      {
        v80 = *(_QWORD *)(v80 + 16);
        v49 = v80 != 0;
      }
      while ((char **)v80 != &WebCore::JSBlob::s_info && v80 != 0);
    }
  }
  if (v49)
  {
    v50 = *((_QWORD *)a2 + 3);
    if (v50)
    {
      WebCore::CloneSerializer::write(*((char **)this + 27), 15);
      v126 = *((_QWORD *)this + 28);
      WebCore::Blob::handle((WebCore::Blob *)v50, (uint64_t)&v274);
      WebCore::URLKeepingBlobAlive::isolatedCopy((WebCore::URLKeepingBlobAlive *)&v274, (uint64_t)v270);
      v127 = *(_DWORD *)(v126 + 12);
      if (v127 == *(_DWORD *)(v126 + 8))
      {
        WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::URLKeepingBlobAlive>(v126, (unint64_t)v270);
      }
      else
      {
        WebCore::URLKeepingBlobAlive::URLKeepingBlobAlive(*(_QWORD *)v126 + 72 * v127, (uint64_t *)v270);
        ++*(_DWORD *)(v126 + 12);
      }
      WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)v270);
      WebCore::URLKeepingBlobAlive::~URLKeepingBlobAlive((WebCore::URLKeepingBlobAlive *)&v274);
      v182 = *(const WTF::String **)(v50 + 80);
      if (v182)
      {
        *(_DWORD *)v182 += 2;
        WebCore::CloneSerializer::write((WTF::StringImpl **)this, v182);
        if (*(_DWORD *)v182 == 2)
          WTF::StringImpl::destroy(v182, v183);
        else
          *(_DWORD *)v182 -= 2;
      }
      else
      {
        WebCore::CloneSerializer::write((WTF::StringImpl **)this, 0);
      }
      WebCore::CloneSerializer::write((WTF::StringImpl **)this, *(const WTF::String **)(v50 + 48));
      v185 = WebCore::Blob::size((WebCore::Blob *)v50, v184);
      WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v185);
      WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(_QWORD *)(v50 + 72));
      return 1;
    }
  }
  v51 = v42 != 0;
  if ((_DWORD)v42)
  {
    v51 = 1;
    if ((char **)v43 != &WebCore::JSImageData::s_info)
    {
      v82 = 16 * v42;
      do
      {
        v82 = *(_QWORD *)(v82 + 16);
        v51 = v82 != 0;
      }
      while ((char **)v82 != &WebCore::JSImageData::s_info && v82 != 0);
    }
  }
  if (v51)
  {
    v52 = *((_QWORD *)a2 + 3);
    if (v52)
    {
      WebCore::CloneSerializer::write(*((char **)this + 27), 14);
      ++*(_DWORD *)v52;
      v274 = (WTF *)v52;
      v129 = *((_QWORD *)this + 37);
      if (v129)
        LODWORD(v129) = *(_DWORD *)(v129 - 12);
      LODWORD(v266) = v129;
      WTF::HashMap<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>,unsigned int,WTF::DefaultHash<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>((uint64_t)v270, (uint64_t *)this + 37, &v274, &v266);
      WTF::Ref<WebCore::ImageData,WTF::RawPtrTraits<WebCore::ImageData>,WTF::DefaultRefDerefTraits<WebCore::ImageData>>::~Ref(&v274, v130);
      if ((_BYTE)v271)
      {
        WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(_DWORD *)(v52 + 4));
        WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(_DWORD *)(v52 + 8));
        v131 = JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::length(*(_QWORD *)(v52 + 16));
        if (HIDWORD(v131))
        {
          *a3 = 5;
        }
        else
        {
          WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v131);
          v132 = (void *)JSC::ArrayBufferView::span(*(JSC::ArrayBufferView **)(v52 + 16));
          WebCore::CloneSerializer::write(*((void ***)this + 27), v132, v133);
          v134 = *(unsigned __int8 *)(v52 + 24);
          if (v134 <= 1)
            WebCore::CloneSerializer::write(*((char **)this + 27), v134);
        }
      }
      else
      {
        WebCore::CloneSerializer::write(*((_QWORD *)this + 27), -2);
        WebCore::CloneSerializer::writeConstantPoolIndex<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>>((char *)this, *((_QWORD *)this + 37), *((_DWORD *)v270[0] + 2));
      }
      return 1;
    }
  }
  if (v35 == 59)
  {
    WebCore::CloneSerializer::write(*((char **)this + 27), 18);
    WebCore::CloneSerializer::write((WTF::StringImpl **)this, *(const WTF::String **)((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFFCLL) + 8));
    v270[0] = (WTF::StringImpl *)JSC::Yarr::flagsString();
    LOBYTE(v270[1]) = v135;
    WTF::String::String((WTF::String *)&v274, (const char *)v270);
    WebCore::CloneSerializer::write((WTF::StringImpl **)this, v274);
    v137 = v274;
    v274 = 0;
    if (v137)
    {
      if (*(_DWORD *)v137 == 2)
        WTF::StringImpl::destroy(v137, v136);
      else
        *(_DWORD *)v137 -= 2;
    }
    return 1;
  }
  v53 = v42 != 0;
  if ((_DWORD)v42)
  {
    v53 = 1;
    if (v43 != MEMORY[0x1E0CBE398])
    {
      v84 = 16 * v42;
      do
      {
        v84 = *(_QWORD *)(v84 + 16);
        v53 = v84 != 0;
      }
      while (v84 != MEMORY[0x1E0CBE398] && v84 != 0);
    }
  }
  if (v53)
  {
    v138 = *((_QWORD *)v40 + 7);
    v257[0] = JSC::JSObject::get(a2, v40, *(_QWORD *)(*(_QWORD *)(v138 + 41952) + 1968));
    if (!*(_DWORD *)(v138 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v138) & 1) == 0)
    {
      JSC::JSValue::toWTFString((JSC::JSValue *)v257, *(JSC::JSGlobalObject **)this, v256);
      if (*(_DWORD *)(v138 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v138) & 1) != 0)
      {
        v13 = 0;
      }
      else
      {
        v255[0] = 0;
        v270[0] = 0;
        v270[1] = 0;
        *(_QWORD *)&v271 = 0;
        *((_QWORD *)&v271 + 1) = 14;
        v139 = 0;
        if (JSC::JSObject::getOwnPropertyDescriptor())
        {
          if (JSC::PropertyDescriptor::isDataDescriptor((JSC::PropertyDescriptor *)v270))
          {
            v266 = v270[0];
            JSC::JSValue::toWTFString((JSC::JSValue *)&v266, *(JSC::JSGlobalObject **)this, &v274);
            v139 = v274;
            v255[0] = v274;
          }
          else
          {
            v139 = 0;
          }
        }
        if (*(_DWORD *)(v138 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v138) & 1) != 0)
          goto LABEL_491;
        v274 = 0;
        v275 = 0;
        v276 = 0;
        v277 = 14;
        if (JSC::JSObject::getOwnPropertyDescriptor()
          && JSC::PropertyDescriptor::isDataDescriptor((JSC::PropertyDescriptor *)&v274))
        {
          v266 = v274;
          if ((unint64_t)v274 >= 0xFFFE000000000000)
          {
            v205 = (double)(int)v274;
          }
          else if ((unint64_t)v274 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v266, *(JSC::JSGlobalObject **)this);
          }
          else
          {
            *(_QWORD *)&v205 = (char *)v274 - 0x2000000000000;
          }
          v206 = v205;
        }
        else
        {
          v206 = 0;
        }
        if (*(_DWORD *)(v138 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v138) & 1) != 0)
          goto LABEL_491;
        v266 = 0;
        v267 = 0;
        v268 = 0;
        v269 = 14;
        if (JSC::JSObject::getOwnPropertyDescriptor()
          && JSC::PropertyDescriptor::isDataDescriptor((JSC::PropertyDescriptor *)&v266))
        {
          v262 = v266;
          if ((unint64_t)v266 >= 0xFFFE000000000000)
          {
            v207 = (double)(int)v266;
          }
          else if ((unint64_t)v266 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v262, *(JSC::JSGlobalObject **)this);
          }
          else
          {
            *(_QWORD *)&v207 = (char *)v266 - 0x2000000000000;
          }
          v208 = v207;
        }
        else
        {
          v208 = 0;
        }
        if (*(_DWORD *)(v138 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v138) & 1) != 0)
        {
LABEL_491:
          v13 = 0;
        }
        else
        {
          v254[0] = 0;
          v262 = 0;
          v263 = 0;
          v264 = 0;
          v265 = 14;
          v209 = 0;
          if (JSC::JSObject::getOwnPropertyDescriptor())
          {
            if (JSC::PropertyDescriptor::isDataDescriptor((JSC::PropertyDescriptor *)&v262))
            {
              v253[0] = v262;
              JSC::JSValue::toWTFString((JSC::JSValue *)v253, *(JSC::JSGlobalObject **)this, &v258);
              v209 = v258;
              v254[0] = v258;
            }
            else
            {
              v209 = 0;
            }
          }
          if (*(_DWORD *)(v138 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v138) & 1) != 0)
          {
            v13 = 0;
          }
          else
          {
            v253[0] = 0;
            v258 = 0;
            v259 = 0;
            v260 = 0;
            v261 = 14;
            v210 = 0;
            if (JSC::JSObject::getOwnPropertyDescriptor())
            {
              if (JSC::PropertyDescriptor::isDataDescriptor((JSC::PropertyDescriptor *)&v258))
              {
                v251[0] = v258;
                JSC::JSValue::toWTFString((JSC::JSValue *)v251, *(JSC::JSGlobalObject **)this, v252);
                v210 = v252[0];
                v253[0] = v252[0];
              }
              else
              {
                v210 = 0;
              }
            }
            if (*(_DWORD *)(v138 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v138) & 1) != 0)
            {
              v13 = 0;
            }
            else
            {
              WebCore::CloneSerializer::write(*((char **)this + 27), 55);
              v212 = WebCore::errorNameToSerializableErrorType((uint64_t)v256[0], v211);
              WebCore::CloneSerializer::write(*((char **)this + 27), v212);
              WebCore::CloneSerializer::writeNullableString((char **)this, v255);
              WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v206);
              WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v208);
              WebCore::CloneSerializer::writeNullableString((char **)this, v254);
              WebCore::CloneSerializer::writeNullableString((char **)this, v253);
              v13 = 1;
              v210 = v253[0];
            }
            v253[0] = 0;
            if (v210)
            {
              if (*(_DWORD *)v210 == 2)
                WTF::StringImpl::destroy(v210, v213);
              else
                *(_DWORD *)v210 -= 2;
            }
            v209 = v254[0];
          }
          v254[0] = 0;
          if (v209)
          {
            if (*(_DWORD *)v209 == 2)
              WTF::StringImpl::destroy(v209, v213);
            else
              *(_DWORD *)v209 -= 2;
          }
          v139 = v255[0];
        }
        v255[0] = 0;
        if (v139)
        {
          if (*(_DWORD *)v139 == 2)
            WTF::StringImpl::destroy(v139, v213);
          else
            *(_DWORD *)v139 -= 2;
        }
      }
      v214 = v256[0];
      v256[0] = 0;
      if (v214)
      {
        if (*(_DWORD *)v214 == 2)
          WTF::StringImpl::destroy(v214, v213);
        else
          *(_DWORD *)v214 -= 2;
      }
      return v13;
    }
    return 0;
  }
  v54 = v42 != 0;
  if ((_DWORD)v42)
  {
    v54 = 1;
    if ((char **)v43 != &WebCore::JSMessagePort::s_info)
    {
      v86 = 16 * v42;
      do
      {
        v86 = *(_QWORD *)(v86 + 16);
        v54 = v86 != 0;
      }
      while ((char **)v86 != &WebCore::JSMessagePort::s_info && v86 != 0);
    }
  }
  if (v54)
  {
    v141 = *((_QWORD *)this + 30);
    v142 = WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::find(v141, (uint64_t)a2);
    v143 = v142;
    if (v141)
      v144 = v141 + 16 * *(unsigned int *)(v141 - 4);
    else
      v144 = 0;
    if (v144 == v142)
    {
      if (*((_DWORD *)this + 78) != 3)
      {
        *a3 = 3;
        return 1;
      }
      WebCore::CloneSerializer::write(*((char **)this + 27), 57);
      WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(_DWORD *)(*((_QWORD *)this + 42) + 12));
      v20 = *((_QWORD *)this + 42);
      v201 = *((_QWORD *)a2 + 3) - 24;
      v202 = *(unsigned int *)(v20 + 12);
      if ((_DWORD)v202 == *(_DWORD *)(v20 + 8))
      {
        WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessagePort&>(v20, v201);
        return 1;
      }
      WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::Ref((_QWORD *)(*(_QWORD *)v20 + 8 * v202), v201);
      goto LABEL_24;
    }
    WebCore::CloneSerializer::write(*((char **)this + 27), 20);
    v145 = *(_DWORD *)(v143 + 8);
    goto LABEL_335;
  }
  if (v35 == 38)
  {
    v55 = *((_QWORD *)a2 + 2);
    if (!v55)
      goto LABEL_94;
    v148 = *(_QWORD *)(v55 + 16);
    if (!v148
      || (v149 = MEMORY[0x1E0CC10F8], (v150 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0)
      && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
      && !((v148 & 0x3FFFFFFFFLL) + v150))
    {
      v151 = 3;
LABEL_342:
      *a3 = v151;
      return 1;
    }
    v224 = *((_QWORD *)this + 31);
    v225 = WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::find(v224, (uint64_t)a2);
    v226 = v225;
    if (v224)
      v227 = v224 + 16 * *(unsigned int *)(v224 - 4);
    else
      v227 = 0;
    if (v227 == v225)
    {
      if (!WebCore::CloneSerializer::addToObjectPoolIfNotDupe<(WebCore::SerializationTag)24,(WebCore::SerializationTag)25,(WebCore::SerializationTag)255>((uint64_t)this, a2))return 1;
      if (*(_QWORD *)(v55 + 32))
        v228 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
      else
        v228 = 0;
      if (v228 && (*((_DWORD *)this + 78) == 1 || *((_BYTE *)this + 400)))
      {
        if (!*(_BYTE *)(v149 + 1963) || *((_BYTE *)this + 400))
        {
          v151 = 5;
          goto LABEL_342;
        }
        v229 = *(_DWORD *)(*((_QWORD *)this + 40) + 12);
        v273 = 0;
        v271 = 0u;
        v272 = 0u;
        *(_OWORD *)v270 = 0u;
        if (JSC::ArrayBuffer::shareWith())
        {
          WebCore::CloneSerializer::write(*((char **)this + 27), 34);
          v230 = *((_QWORD *)this + 40);
          v231 = *(_DWORD *)(v230 + 12);
          if (v231 == *(_DWORD *)(v230 + 8))
          {
            WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::ArrayBufferContents>(v230, (unint64_t)v270);
          }
          else
          {
            v237 = *(_QWORD *)v230 + 56 * v231;
            *(_BYTE *)(v237 + 48) = 0;
            *(_OWORD *)(v237 + 16) = 0u;
            *(_OWORD *)(v237 + 32) = 0u;
            *(_OWORD *)v237 = 0u;
            *(WTF::StringImpl **)v237 = v270[0];
            v270[0] = 0;
            v238 = *(WTF::StringImpl **)(v237 + 8);
            *(WTF::StringImpl **)(v237 + 8) = v270[1];
            v270[1] = v238;
            v239 = *(_QWORD *)(v237 + 16);
            *(_QWORD *)(v237 + 16) = v271;
            *(_QWORD *)&v271 = v239;
            v240 = *(_QWORD *)(v237 + 24);
            *(_QWORD *)(v237 + 24) = *((_QWORD *)&v271 + 1);
            *((_QWORD *)&v271 + 1) = v240;
            *(_QWORD *)(v237 + 32) = v272;
            *(_QWORD *)&v272 = 0;
            v241 = *(_QWORD *)(v237 + 40);
            *(_QWORD *)(v237 + 40) = *((_QWORD *)&v272 + 1);
            *((_QWORD *)&v272 + 1) = v241;
            *(_BYTE *)(v237 + 48) = v273;
            v273 = 0;
            ++*(_DWORD *)(v230 + 12);
          }
          WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v229);
          JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v270);
          return 1;
        }
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)v270);
      }
      v232 = (char *)*((_QWORD *)this + 27);
      if (*(_BYTE *)(v55 + 64))
      {
        WebCore::CloneSerializer::write(v232, 54);
        if (*(_BYTE *)(v55 + 64) && (v242 = *(_QWORD *)(v55 + 32)) != 0)
          v233 = *(_QWORD *)(v242 + 32);
        else
          v233 = *(_QWORD *)(v55 + 48);
        WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v233);
        if (*(_BYTE *)(v55 + 64))
          v234 = *(_QWORD *)(v55 + 56);
        else
          v234 = 0;
      }
      else
      {
        WebCore::CloneSerializer::write(v232, 21);
        if (*(_BYTE *)(v55 + 64) && (v243 = *(_QWORD *)(v55 + 32)) != 0)
          v234 = *(_QWORD *)(v243 + 32);
        else
          v234 = *(_QWORD *)(v55 + 48);
      }
      WebCore::CloneSerializer::write(*((_QWORD *)this + 27), v234);
      v235 = (void *)JSC::ArrayBuffer::span((JSC::ArrayBuffer *)v55);
      WebCore::CloneSerializer::write(*((void ***)this + 27), v235, v236);
      return 1;
    }
    WebCore::CloneSerializer::write(*((char **)this + 27), 23);
    v145 = *(_DWORD *)(v226 + 8);
LABEL_335:
    v146 = *((_QWORD *)this + 27);
    goto LABEL_336;
  }
  if (v35 - 39 <= 0xB)
  {
    if ((WebCore::CloneSerializer::writeObjectReferenceIfDupe<(WebCore::SerializationTag)22,(WebCore::SerializationTag)255,(WebCore::SerializationTag)255>((uint64_t)this, (uint64_t)a2) & 1) != 0)return 1;
    v204 = WebCore::CloneSerializer::dumpArrayBufferView((uint64_t)this, (uint64_t)a2, a3);
    WebCore::CloneSerializer::addToObjectPool<(WebCore::SerializationTag)22,(WebCore::SerializationTag)255,(WebCore::SerializationTag)255>((uint64_t)this, a2);
    return v204;
  }
LABEL_94:
  v56 = v42 != 0;
  if ((_DWORD)v42)
  {
    v56 = 1;
    if ((char **)v43 != &WebCore::JSCryptoKey::s_info)
    {
      v88 = 16 * v42;
      do
      {
        v88 = *(_QWORD *)(v88 + 16);
        v56 = v88 != 0;
      }
      while ((char **)v88 != &WebCore::JSCryptoKey::s_info && v88 != 0);
    }
  }
  if (v56)
  {
    v166 = (const WebCore::CryptoKey *)*((_QWORD *)a2 + 3);
    if (v166)
    {
      WebCore::CloneSerializer::write(*((char **)this + 27), 33);
      v266 = 0;
      v267 = 0;
      v262 = 0;
      v263 = 0;
      v258 = 0;
      v259 = 0;
      v257[0] = 0;
      v257[1] = 0;
      v256[0] = 0;
      v256[1] = 0;
      v255[0] = 0;
      v255[1] = 0;
      v254[0] = 0;
      v254[1] = 0;
      v253[0] = 0;
      v253[1] = 0;
      v252[0] = 0;
      v252[1] = 0;
      v251[0] = 0;
      v251[1] = 0;
      v250[0] = 0;
      v250[1] = 0;
      v249[0] = 0;
      v249[1] = 0;
      v248[0] = 0;
      v248[1] = 0;
      v247[0] = 0;
      v247[1] = 0;
      v167 = *(_QWORD *)this;
      v274 = 0;
      v275 = 0;
      v246[0] = 0;
      v246[1] = 0;
      v245[0] = 0;
      v245[1] = 0;
      v244[0] = 0;
      v244[1] = 0;
      WebCore::CloneSerializer::CloneSerializer((uint64_t)v270, v167, (uint64_t)&v258, (unsigned int *)v257, (uint64_t)&v274, (uint64_t)v246, (uint64_t)v248, (uint64_t)v247, (uint64_t)v245, (uint64_t)v244, (uint64_t)v256, (uint64_t)v255, (uint64_t)v254, (uint64_t)v253, (uint64_t)v252, (uint64_t)v251, (uint64_t)v250, (uint64_t)&v262, (uint64_t)&v266,
        0,
        (uint64_t)v249,
        *((_BYTE *)this + 400));
      WTF::Vector<WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v244, v168);
      WTF::Vector<WTF::Ref<WebCore::RTCDataChannel,WTF::RawPtrTraits<WebCore::RTCDataChannel>,WTF::DefaultRefDerefTraits<WebCore::RTCDataChannel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v245, v169);
      WTF::Vector<WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v246, v170);
      WTF::Vector<WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v274, v171);
      WebCore::CloneSerializer::write((WebCore::CloneSerializer *)v270, v166);
      v173 = WebCore::executionContext(*(WebCore **)this, v172);
      if (v173
        && ((*(void (**)(WTF **__return_ptr, uint64_t, WTF **))(*(_QWORD *)v173 + 392))(&v274, v173, &v266),
            (_BYTE)v276))
      {
        WebCore::CloneSerializer::write((uint64_t)this, (uint64_t)&v274);
        if ((_BYTE)v276)
        {
          v175 = v274;
          if (v274)
          {
            v274 = 0;
            LODWORD(v275) = 0;
            WTF::fastFree(v175, v174);
          }
        }
        v13 = 1;
      }
      else
      {
        v13 = 0;
      }
      WebCore::CloneSerializer::~CloneSerializer((WebCore::CloneSerializer *)v270, (WTF::StringImpl *)v174);
      WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v247, v186);
      WTF::Vector<WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v248, v187);
      WTF::Vector<JSC::ArrayBufferContents,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v249, v188);
      WTF::Vector<WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v250, v189);
      WTF::Vector<WTF::RefPtr<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v251, v190);
      WTF::Vector<WTF::RefPtr<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v252, v191);
      WTF::Vector<WTF::RefPtr<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v253, v192);
      WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedAudioChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v254, v193);
      WTF::Vector<WTF::RefPtr<WebCore::WebCodecsAudioData,WTF::RawPtrTraits<WebCore::WebCodecsAudioData>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsAudioData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v255, v194);
      WTF::Vector<WTF::RefPtr<WebCore::WebCodecsEncodedAudioChunkStorage,WTF::RawPtrTraits<WebCore::WebCodecsEncodedAudioChunkStorage>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsEncodedAudioChunkStorage>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v256, v195);
      WTF::Vector<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v257, v196);
      WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v258, v197);
      WTF::Vector<WebCore::URLKeepingBlobAlive,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v262, v198);
      v200 = v266;
      if (v266)
      {
        v266 = 0;
        LODWORD(v267) = 0;
        WTF::fastFree(v200, v199);
      }
      return v13;
    }
  }
  v57 = v42 != 0;
  if ((_DWORD)v42)
  {
    v57 = 1;
    if ((char **)v43 != &WebCore::JSRTCCertificate::s_info)
    {
      v90 = 16 * v42;
      do
      {
        v90 = *(_QWORD *)(v90 + 16);
        v57 = v90 != 0;
      }
      while ((char **)v90 != &WebCore::JSRTCCertificate::s_info && v90 != 0);
    }
  }
  if (v57)
  {
    v176 = *((_QWORD *)a2 + 3);
    if (v176)
    {
      WebCore::CloneSerializer::write(*((char **)this + 27), 44);
      WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(double *)(v176 + 16));
      WebCore::CloneSerializer::write((WTF::StringImpl **)this, *(const WTF::String **)(v176 + 40));
      WebCore::SecurityOrigin::toString(*(WebCore::SecurityOrigin **)(v176 + 8), v270);
      WebCore::CloneSerializer::write((WTF::StringImpl **)this, v270[0]);
      v178 = v270[0];
      v270[0] = 0;
      if (v178)
      {
        if (*(_DWORD *)v178 == 2)
          WTF::StringImpl::destroy(v178, v177);
        else
          *(_DWORD *)v178 -= 2;
      }
      WebCore::CloneSerializer::write((WTF::StringImpl **)this, *(const WTF::String **)(v176 + 48));
      WebCore::CloneSerializer::write(*((_QWORD *)this + 27), *(_DWORD *)(v176 + 36));
      v179 = *(unsigned int *)(v176 + 36);
      if ((_DWORD)v179)
      {
        v180 = *(const WTF::String ***)(v176 + 24);
        v181 = &v180[2 * v179];
        v13 = 1;
        do
        {
          WebCore::CloneSerializer::write((WTF::StringImpl **)this, *v180);
          WebCore::CloneSerializer::write((WTF::StringImpl **)this, v180[1]);
          v180 += 2;
        }
        while (v180 != v181);
        return v13;
      }
      return 1;
    }
  }
  if (v35 == 73)
  {
    if ((*((_DWORD *)this + 78) - 1) > 1)
      return 0;
    v152 = *((_QWORD *)this + 43);
    v153 = *(_DWORD *)(v152 + 12);
    v154 = (WTF::StringImpl *)JSC::JSWebAssemblyModule::module(a2);
    v270[0] = v154;
    v155 = *(unsigned int *)(v152 + 12);
    if ((_DWORD)v155 == *(_DWORD *)(v152 + 8))
    {
      WTF::Vector<WTF::RefPtr<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Module*>(v152, (unsigned int **)v270);
    }
    else
    {
      v215 = *(_QWORD *)v152;
      do
        v216 = __ldaxr((unsigned int *)v154);
      while (__stlxr(v216 + 1, (unsigned int *)v154));
      *(_QWORD *)(v215 + 8 * v155) = v154;
      ++*(_DWORD *)(v152 + 12);
    }
    WebCore::CloneSerializer::write(*((char **)this + 27), 35);
    WebCore::agentClusterIDFromGlobalObject((WebCore *)v270, *(JSC::JSGlobalObject **)this);
    WebCore::CloneSerializer::write((WTF::StringImpl **)this, v270[0]);
    v218 = v270[0];
    v270[0] = 0;
    if (v218)
    {
      if (*(_DWORD *)v218 == 2)
        WTF::StringImpl::destroy(v218, v217);
      else
        *(_DWORD *)v218 -= 2;
    }
    v146 = *((_QWORD *)this + 27);
    v145 = v153;
LABEL_336:
    WebCore::CloneSerializer::write(v146, v145);
    return 1;
  }
  if (v43 == MEMORY[0x1E0CBE758])
  {
    if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 1963))
      goto LABEL_351;
    v156 = *((_QWORD *)a2 + 2);
    if (*(_BYTE *)(*(_QWORD *)(v156 + 8) + 5) != 1 || *((_DWORD *)this + 78) != 1)
      goto LABEL_351;
    v157 = *((_QWORD *)this + 44);
    v158 = *(WTF::StringImpl **)(v156 + 16);
    v270[0] = v158;
    v159 = *(unsigned int *)(v157 + 12);
    if ((_DWORD)v159 == *(_DWORD *)(v157 + 8))
    {
      WTF::Vector<WTF::RefPtr<JSC::Wasm::Module,WTF::RawPtrTraits<JSC::Wasm::Module>,WTF::DefaultRefDerefTraits<JSC::Wasm::Module>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,JSC::Wasm::Module*>(v157, (unsigned int **)v270);
    }
    else
    {
      v219 = *(_QWORD *)v157;
      v220 = *(_DWORD *)(v157 + 12);
      if (v158)
      {
        do
          v221 = __ldaxr((unsigned int *)v158);
        while (__stlxr(v221 + 1, (unsigned int *)v158));
        v220 = *(_DWORD *)(v157 + 12);
      }
      *(_QWORD *)(v219 + 8 * v159) = v158;
      *(_DWORD *)(v157 + 12) = v220 + 1;
    }
    WebCore::CloneSerializer::write(*((char **)this + 27), 49);
    WebCore::agentClusterIDFromGlobalObject((WebCore *)v270, *(JSC::JSGlobalObject **)this);
    WebCore::CloneSerializer::write((WTF::StringImpl **)this, v270[0]);
    v223 = v270[0];
    v270[0] = 0;
    if (v223)
    {
      if (*(_DWORD *)v223 == 2)
        WTF::StringImpl::destroy(v223, v222);
      else
        *(_DWORD *)v223 -= 2;
    }
    v146 = *((_QWORD *)this + 27);
    v145 = v159;
    goto LABEL_336;
  }
  v58 = v42 != 0;
  if ((_DWORD)v42)
  {
    v58 = 1;
    if ((char **)v43 != &WebCore::JSDOMPointReadOnly::s_info)
    {
      v92 = 16 * v42;
      do
      {
        v92 = *(_QWORD *)(v92 + 16);
        v58 = v92 != 0;
      }
      while ((char **)v92 != &WebCore::JSDOMPointReadOnly::s_info && v92 != 0);
    }
  }
  if (v58)
  {
    WebCore::CloneSerializer::dumpDOMPoint(this, a2);
    return 1;
  }
  v59 = v42 != 0;
  if ((_DWORD)v42)
  {
    v59 = 1;
    if ((char **)v43 != &WebCore::JSDOMRectReadOnly::s_info)
    {
      v94 = 16 * v42;
      do
      {
        v94 = *(_QWORD *)(v94 + 16);
        v59 = v94 != 0;
      }
      while ((char **)v94 != &WebCore::JSDOMRectReadOnly::s_info && v94 != 0);
    }
  }
  if (v59)
  {
    WebCore::CloneSerializer::dumpDOMRect(this, a2);
    return 1;
  }
  v60 = v42 != 0;
  if ((_DWORD)v42)
  {
    v60 = 1;
    if ((char **)v43 != &WebCore::JSDOMMatrixReadOnly::s_info)
    {
      v96 = 16 * v42;
      do
      {
        v96 = *(_QWORD *)(v96 + 16);
        v60 = v96 != 0;
      }
      while ((char **)v96 != &WebCore::JSDOMMatrixReadOnly::s_info && v96 != 0);
    }
  }
  if (v60)
  {
    WebCore::CloneSerializer::dumpDOMMatrix(this, a2);
    return 1;
  }
  v61 = v42 != 0;
  if ((_DWORD)v42)
  {
    v61 = 1;
    if ((char **)v43 != &WebCore::JSDOMQuad::s_info)
    {
      v98 = 16 * v42;
      do
      {
        v98 = *(_QWORD *)(v98 + 16);
        v61 = v98 != 0;
      }
      while ((char **)v98 != &WebCore::JSDOMQuad::s_info && v98 != 0);
    }
  }
  if (v61)
  {
    WebCore::CloneSerializer::dumpDOMQuad(this, a2);
    return 1;
  }
  v62 = v42 != 0;
  if ((_DWORD)v42)
  {
    v62 = 1;
    if ((char **)v43 != &WebCore::JSImageBitmap::s_info)
    {
      v100 = 16 * v42;
      do
      {
        v100 = *(_QWORD *)(v100 + 16);
        v62 = v100 != 0;
      }
      while ((char **)v100 != &WebCore::JSImageBitmap::s_info && v100 != 0);
    }
  }
  if (v62)
  {
    WebCore::CloneSerializer::dumpImageBitmap((uint64_t)this, (uint64_t)a2, a3, a4);
    return 1;
  }
  v63 = v42 != 0;
  if ((_DWORD)v42)
  {
    v63 = 1;
    if ((char **)v43 != &WebCore::JSOffscreenCanvas::s_info)
    {
      v102 = 16 * v42;
      do
      {
        v102 = *(_QWORD *)(v102 + 16);
        v63 = v102 != 0;
      }
      while ((char **)v102 != &WebCore::JSOffscreenCanvas::s_info && v102 != 0);
    }
  }
  if (v63)
  {
    WebCore::CloneSerializer::dumpOffscreenCanvas((uint64_t)this, (uint64_t)a2, a3);
    return 1;
  }
  v64 = v42 != 0;
  if ((_DWORD)v42)
  {
    v64 = 1;
    if ((char **)v43 != &WebCore::JSRTCDataChannel::s_info)
    {
      v104 = 16 * v42;
      do
      {
        v104 = *(_QWORD *)(v104 + 16);
        v64 = v104 != 0;
      }
      while ((char **)v104 != &WebCore::JSRTCDataChannel::s_info && v104 != 0);
    }
  }
  if (v64)
  {
    WebCore::CloneSerializer::dumpRTCDataChannel((uint64_t)this, (uint64_t)a2, a3);
    return 1;
  }
  v65 = v42 != 0;
  if ((_DWORD)v42)
  {
    v65 = 1;
    if ((char **)v43 != &WebCore::JSDOMException::s_info)
    {
      v106 = 16 * v42;
      do
      {
        v106 = *(_QWORD *)(v106 + 16);
        v65 = v106 != 0;
      }
      while ((char **)v106 != &WebCore::JSDOMException::s_info && v106 != 0);
    }
  }
  if (v65)
  {
    WebCore::CloneSerializer::dumpDOMException((uint64_t)this, (uint64_t)a2, a3);
    return 1;
  }
  v66 = v42 != 0;
  if ((_DWORD)v42)
  {
    v66 = 1;
    if ((char **)v43 != &WebCore::JSWebCodecsEncodedVideoChunk::s_info)
    {
      v108 = 16 * v42;
      do
      {
        v108 = *(_QWORD *)(v108 + 16);
        v66 = v108 != 0;
      }
      while ((char **)v108 != &WebCore::JSWebCodecsEncodedVideoChunk::s_info && v108 != 0);
    }
  }
  if (v66)
  {
    if (!*((_BYTE *)this + 400))
    {
      WebCore::CloneSerializer::dumpWebCodecsEncodedVideoChunk((uint64_t)this, *(JSC::JSObject **)(*((_QWORD *)a2 + 3) + 8));
      return 1;
    }
    return 0;
  }
  v67 = v42 != 0;
  if ((_DWORD)v42)
  {
    v67 = 1;
    if ((char **)v43 != &WebCore::JSWebCodecsVideoFrame::s_info)
    {
      v110 = 16 * v42;
      do
      {
        v110 = *(_QWORD *)(v110 + 16);
        v67 = v110 != 0;
      }
      while ((char **)v110 != &WebCore::JSWebCodecsVideoFrame::s_info && v110 != 0);
    }
  }
  if (v67)
  {
    if (*((_BYTE *)this + 400))
      return 0;
    return WebCore::CloneSerializer::dumpWebCodecsVideoFrame(this, *((JSC::JSObject **)a2 + 3));
  }
  v68 = v42 != 0;
  if ((_DWORD)v42)
  {
    v68 = 1;
    if ((char **)v43 != &WebCore::JSWebCodecsEncodedAudioChunk::s_info)
    {
      v112 = 16 * v42;
      do
      {
        v112 = *(_QWORD *)(v112 + 16);
        v68 = v112 != 0;
      }
      while ((char **)v112 != &WebCore::JSWebCodecsEncodedAudioChunk::s_info && v112 != 0);
    }
  }
  if (v68)
  {
    if (!*((_BYTE *)this + 400))
    {
      WebCore::CloneSerializer::dumpWebCodecsEncodedAudioChunk((uint64_t)this, *(JSC::JSObject **)(*((_QWORD *)a2 + 3) + 8));
      return 1;
    }
    return 0;
  }
  v69 = v42 != 0;
  if ((_DWORD)v42)
  {
    v69 = 1;
    if ((char **)v43 != &WebCore::JSWebCodecsAudioData::s_info)
    {
      v114 = 16 * v42;
      do
      {
        v114 = *(_QWORD *)(v114 + 16);
        v69 = v114 != 0;
      }
      while ((char **)v114 != &WebCore::JSWebCodecsAudioData::s_info && v114 != 0);
    }
  }
  if (!v69)
  {
    v70 = v42 != 0;
    if ((_DWORD)v42)
    {
      v70 = 1;
      if ((char **)v43 != &WebCore::JSMediaStreamTrack::s_info)
      {
        v116 = 16 * v42;
        do
        {
          v116 = *(_QWORD *)(v116 + 16);
          v70 = v116 != 0;
        }
        while ((char **)v116 != &WebCore::JSMediaStreamTrack::s_info && v116 != 0);
      }
    }
    if (v70)
    {
      if (!*((_BYTE *)this + 400))
      {
        WebCore::CloneSerializer::dumpMediaStreamTrack((uint64_t)this, *((JSC::JSObject **)a2 + 3));
        return 1;
      }
    }
    else
    {
      if ((_DWORD)v42 && (char **)v43 != &WebCore::JSMediaSourceHandle::s_info)
      {
        do
        {
          v43 = *(_QWORD *)(v43 + 16);
          v44 = v43 != 0;
        }
        while ((char **)v43 != &WebCore::JSMediaSourceHandle::s_info && v43 != 0);
      }
      if (v44)
      {
        WebCore::CloneSerializer::dumpMediaSourceHandle((uint64_t)this, (uint64_t)a2, a3);
        return 1;
      }
    }
    return 0;
  }
  if (*((_BYTE *)this + 400))
    return 0;
  return WebCore::CloneSerializer::dumpWebCodecsAudioData(this, *((JSC::JSObject **)a2 + 3));
}

uint64_t WTF::VectorDestructor<true,JSC::PropertyNameArray>::destruct(uint64_t result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  if ((uint64_t *)result != a2)
  {
    v3 = (uint64_t *)result;
    do
    {
      v4 = v3[1];
      if (v4)
        result = WTF::fastFree((WTF *)(v4 - 16), a2);
      v5 = *v3;
      *v3 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          v9 = *(unsigned int *)(v5 + 20);
          if ((_DWORD)v9)
          {
            v7 = *(WTF::StringImpl ***)(v5 + 8);
            v8 = 8 * v9;
            do
            {
              v6 = *v7;
              *v7 = 0;
              if (v6)
              {
                if (*(_DWORD *)v6 == 2)
                  WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v6 -= 2;
              }
              ++v7;
              v8 -= 8;
            }
            while (v8);
          }
          v10 = *(WTF **)(v5 + 8);
          if ((WTF *)(v5 + 24) != v10 && v10 != 0)
          {
            *(_QWORD *)(v5 + 8) = 0;
            *(_DWORD *)(v5 + 16) = 0;
            WTF::fastFree(v10, a2);
          }
          result = WTF::fastFree((WTF *)v5, a2);
        }
        else
        {
          --*(_DWORD *)v5;
        }
      }
      v3 += 4;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WebCore::CloneSerializer::write(WTF::StringImpl **this, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  int v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  if (!a2)
    return WebCore::CloneSerializer::write((uint64_t)this, this + 38);
  v3 = a2;
  if ((*((_BYTE *)a2 + 16) & 0x10) != 0)
  {
    *(_DWORD *)a2 += 2;
  }
  else
  {
    WTF::AtomStringImpl::addSlowCase();
    v3 = v7;
  }
  v4 = *(_DWORD *)v3;
  *(_DWORD *)v3 += 2;
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy(v3, a2);
  v7 = v3;
  result = WebCore::CloneSerializer::write((uint64_t)this, &v7);
  if (*(_DWORD *)v3 == 2)
    return WTF::StringImpl::destroy(v3, v6);
  *(_DWORD *)v3 -= 2;
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,unsigned int>>,JSC::IdentifierRepHash,WTF::HashMap<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>,unsigned int,JSC::IdentifierRepHash,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WTF::UniquedStringImpl,WTF::RawPtrTraits<WTF::UniquedStringImpl>,WTF::DefaultRefDerefTraits<WTF::UniquedStringImpl>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t i;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * i);
      v11 = *v10;
      if (*v10)
      {
        if (v11 != (WTF::StringImpl *)-1)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = *((_DWORD *)v11 + 4);
          if ((v14 & 0x20) != 0)
            v14 = *((_DWORD *)v11 + 8);
          v15 = 0;
          v16 = v14 >> 8;
          do
          {
            v17 = v16 & v13;
            v16 = ++v15 + v17;
          }
          while (*(_QWORD *)(v12 + 16 * v17));
          v18 = v12 + 16 * v17;
          *(_QWORD *)v18 = 0;
          v19 = *v10;
          *v10 = 0;
          *(_QWORD *)v18 = v19;
          *(_DWORD *)(v18 + 8) = *(_DWORD *)(v4 + 16 * i + 8);
          v20 = *v10;
          *v10 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v8);
            else
              *(_DWORD *)v20 -= 2;
          }
        }
      }
      else
      {
        *v10 = 0;
      }
    }
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int>(uint64_t result, uint64_t *a2, unint64_t *a3, unsigned __int32 *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  __n128 *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  __n128 *v26;
  int v27;
  uint64_t v28;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = ~(*a3 << 32) + *a3;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (__n128 *)(v8 + 16 * v15);
  v17 = v16->n128_u64[0];
  if (v16->n128_u64[0])
  {
    v26 = 0;
    v27 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v25 = 0;
        v24 = v8 + 16 * v28;
        goto LABEL_12;
      }
      if (v17 == -1)
        v26 = v16;
      v15 = (v15 + v27) & v10;
      v16 = (__n128 *)(v8 + 16 * v15);
      v17 = v16->n128_u64[0];
      ++v27;
    }
    while (v16->n128_u64[0]);
    if (v26)
    {
      v26->n128_u64[0] = 0;
      v26->n128_u64[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v26;
    }
  }
  v16->n128_u64[0] = v11;
  v16->n128_u32[2] = *a4;
  v18 = *a2;
  if (*a2)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *a2;
  if (*a2)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_11;
LABEL_16:
    result = WTF::HashTable<JSC::JSObject *,WTF::KeyValuePair<JSC::JSObject *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject *,unsigned int>>,WTF::DefaultHash<JSC::JSObject *>,WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject *>>::expand(a2, v16);
    v16 = (__n128 *)result;
    v20 = *a2;
    if (*a2)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_11;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_16;
LABEL_11:
  v24 = v20 + 16 * v23;
  v25 = 1;
LABEL_12:
  *(_QWORD *)v7 = v16;
  *(_QWORD *)(v7 + 8) = v24;
  *(_BYTE *)(v7 + 16) = v25;
  return result;
}

char *WebCore::CloneSerializer::write(char *result, char a2)
{
  char *v2;
  uint64_t v3;
  char v4;

  v2 = result;
  v4 = a2;
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3 == *((_DWORD *)result + 2))
  {
    result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)result, (WTF *)(v3 + 1), (unint64_t)&v4);
    *(_BYTE *)(*(_QWORD *)v2 + *((unsigned int *)v2 + 3)) = *result;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)result + v3) = a2;
  }
  ++*((_DWORD *)v2 + 3);
  return result;
}

unsigned int *WebCore::MessagePort::entangle@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, _OWORD *a2@<X1>, WebCore::ContextDestructionObserver **a3@<X8>)
{
  WebCore::ScriptExecutionContext *v4;
  WebCore::ContextDestructionObserver *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int *result;
  void *v10;
  int v11;

  WebCore::MessagePort::create(a1, a2, a2 + 1, a3);
  v5 = *a3;
  v6 = *(_QWORD *)(*((_QWORD *)*a3 + 1) + 8);
  v7 = *(unsigned __int8 *)(v6 + 178);
  if (*(_BYTE *)(v6 + 178))
  {
    if (v7 == 1 || v7 == 2)
      ++*(_DWORD *)(v6 + 216);
  }
  else
  {
    *(_DWORD *)(v6 - 264) += 2;
  }
  v8 = WebCore::MessagePortChannelProvider::fromContext((WebCore::MessagePortChannelProvider *)(v6 - 96), v4);
  result = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, (uint64_t)v5 + 64, (uint64_t)v5 + 80);
  v11 = *(unsigned __int8 *)(v6 + 178);
  if (*(_BYTE *)(v6 + 178))
  {
    if (v11 == 1)
    {
      if (*(_DWORD *)(v6 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 - 96) + 40))(v6 - 96);
      else
        --*(_DWORD *)(v6 + 216);
    }
    else if (v11 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 216));
    }
  }
  else if (*(_DWORD *)(v6 - 264) == 2)
  {
    if ((*(_WORD *)(v6 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 288), v10);
  }
  else
  {
    *(_DWORD *)(v6 - 264) -= 2;
  }
  return result;
}

WebCore::ContextDestructionObserver *WebCore::MessagePort::MessagePort(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2, _OWORD *a3, _OWORD *a4)
{
  WebCore::ScriptExecutionContext *v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  _OWORD *v71;
  int v72;
  int v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  WTF *v84;
  int v85;
  int v86;
  uint64_t v87;
  __int128 v88;
  WebCore::ContextDestructionObserver *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v74 = (char *)a2 - 192;
    v75 = *((_QWORD *)a2 + 64);
    if (v75)
    {
      v76 = *(char **)(v75 + 8);
      if (v76)
        v74 = v76;
    }
    v8 = (WebCore::ScriptExecutionContext *)(v74 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v8);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v8 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1944D4318);
  }
  v89 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v8 + 16, (uint64_t *)&v89, (uint64_t)&v90);
  *((_QWORD *)this + 3) = &unk_1E33A4FC0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v9 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 8) = xmmword_19689B170;
  *(_QWORD *)(v9 + 24) = this;
  *((_QWORD *)this + 6) = v9;
  *(_QWORD *)this = &off_1E33A5B30;
  *((_QWORD *)this + 3) = &unk_1E33A5BC0;
  *((_DWORD *)this + 14) = 0x10000;
  *((_OWORD *)this + 4) = *a3;
  *((_OWORD *)this + 5) = *a4;
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_172))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](&_MergedGlobals_172);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_172))
    goto LABEL_5;
LABEL_6:
  if ((byte_1ECE831E9 & 1) == 0)
  {
    qword_1ECE831F0 = 0;
    byte_1ECE831E9 = 1;
  }
  v12 = *((_QWORD *)this + 6);
  if (!v12)
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_12;
  }
  MEMORY[0x19AEA534C](v12);
LABEL_12:
  if (*(_QWORD *)(v12 + 24))
  {
    ++*(_QWORD *)(v12 + 16);
    v14 = v12;
  }
  else
  {
    v14 = 0;
  }
  v15 = __ldxr((unsigned __int8 *)v12);
  if (v15 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_19;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_19:
  *(_QWORD *)&v90 = v14;
  *((_QWORD *)&v90 + 1) = this;
  v16 = qword_1ECE831F0;
  if (qword_1ECE831F0
    || (WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(0),
        (v16 = qword_1ECE831F0) != 0))
  {
    v17 = *(_DWORD *)(v16 - 8);
  }
  else
  {
    v17 = 0;
  }
  v18 = (_OWORD *)((char *)this + 64);
  v19 = *((_QWORD *)this + 8);
  v20 = *((_QWORD *)this + 9);
  v21 = (v19 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v19 - 1640531527) << 16) ^ ((unsigned __int16)v19
                                                                                             - 1640531527);
  v22 = (v19 >> 37) & 0x7FFF800 ^ ((v21 + WORD2(v19) + (v21 >> 11)) << 16) ^ (v21 + WORD2(v19) + (v21 >> 11));
  v23 = (v20 >> 5) & 0x7FFF800 ^ ((v22 + (unsigned __int16)v20 + (v22 >> 11)) << 16) ^ (v22 + (unsigned __int16)v20 + (v22 >> 11));
  v24 = (v20 >> 37) & 0x7FFF800 ^ ((v23 + WORD2(v20) + (v23 >> 11)) << 16) ^ (v23 + WORD2(v20) + (v23 >> 11));
  v25 = (v24 + (v24 >> 11)) ^ (8 * (v24 + (v24 >> 11)));
  v26 = (v25 + (v25 >> 5)) ^ (4 * (v25 + (v25 >> 5)));
  v27 = (v26 + (v26 >> 15)) ^ ((v26 + (v26 >> 15)) << 10);
  if (!v27)
    v27 = 0x800000;
  v28 = v27 & v17;
  v29 = (_QWORD *)(v16 + 32 * v28);
  v30 = *v29;
  v31 = v29[1];
  if (*(_OWORD *)v29 != 0)
  {
    v71 = 0;
    v72 = 1;
    do
    {
      if (v30 == v19 && v31 == v20)
      {
        WTF::ThreadSafeWeakPtr<WebCore::MessagePort>::operator=(v29 + 2, (uint64_t *)&v90);
        goto LABEL_39;
      }
      if (v30 == -1)
        v71 = v29;
      v28 = ((_DWORD)v28 + v72) & v17;
      v29 = (_QWORD *)(v16 + 32 * v28);
      v30 = *v29;
      v31 = v29[1];
      ++v72;
    }
    while (*(_OWORD *)v29 != 0);
    if (v71)
    {
      *v71 = 0u;
      v71[1] = 0u;
      --*(_DWORD *)(v16 - 16);
      v29 = v71;
    }
  }
  *(_OWORD *)v29 = *v18;
  v32 = v90;
  *(_QWORD *)&v90 = 0;
  v33 = v29[2];
  v29[2] = v32;
  if (v33)
  {
    if (__ldaxr((unsigned __int8 *)v33))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v33))
    {
LABEL_28:
      v35 = *(_QWORD *)(v33 + 16) - 1;
      *(_QWORD *)(v33 + 16) = v35;
      if (v35)
      {
        v86 = __ldxr((unsigned __int8 *)v33);
        if (v86 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v33))
            goto LABEL_33;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v33);
        goto LABEL_33;
      }
      v36 = *(_QWORD *)(v33 + 8);
      v37 = __ldxr((unsigned __int8 *)v33);
      if (v37 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v33))
          goto LABEL_31;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v33);
LABEL_31:
      if (!v36)
        WTF::fastFree((WTF *)v33, v10);
      goto LABEL_33;
    }
    MEMORY[0x19AEA534C](v33);
    goto LABEL_28;
  }
LABEL_33:
  v38 = *((_QWORD *)&v90 + 1);
  *((_QWORD *)&v90 + 1) = 0;
  v29[3] = v38;
  if (qword_1ECE831F0)
    v39 = *(_DWORD *)(qword_1ECE831F0 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(qword_1ECE831F0 - 12) = v39;
  if (qword_1ECE831F0)
    v40 = *(_DWORD *)(qword_1ECE831F0 - 12);
  else
    v40 = 0;
  v41 = (*(_DWORD *)(qword_1ECE831F0 - 16) + v40);
  v42 = *(unsigned int *)(qword_1ECE831F0 - 4);
  if (v42 > 0x400)
  {
    if (v42 > 2 * v41)
      goto LABEL_39;
  }
  else if (3 * v42 > 4 * v41)
  {
    goto LABEL_39;
  }
  WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::ThreadSafeWeakPtr<WebCore::MessagePort>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::MessagePort>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(v29);
LABEL_39:
  v43 = v90;
  *(_QWORD *)&v90 = 0;
  if (!v43)
    goto LABEL_48;
  if (__ldaxr((unsigned __int8 *)v43))
  {
    __clrex();
LABEL_42:
    MEMORY[0x19AEA534C](v43);
    goto LABEL_43;
  }
  if (__stxr(1u, (unsigned __int8 *)v43))
    goto LABEL_42;
LABEL_43:
  v45 = *(_QWORD *)(v43 + 16) - 1;
  *(_QWORD *)(v43 + 16) = v45;
  if (v45)
  {
    v85 = __ldxr((unsigned __int8 *)v43);
    if (v85 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v43))
        goto LABEL_48;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v43);
    goto LABEL_48;
  }
  v46 = *(_QWORD *)(v43 + 8);
  v47 = __ldxr((unsigned __int8 *)v43);
  if (v47 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v43))
      goto LABEL_46;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v43);
LABEL_46:
  if (!v46)
    WTF::fastFree((WTF *)v43, v10);
LABEL_48:
  if ((byte_1ECE831EA & 1) != 0)
  {
    v48 = qword_1ECE831F8;
    v49 = *((_OWORD *)a2 + 15);
    v90 = *((_OWORD *)a2 + 14);
    v91 = v49;
    if (qword_1ECE831F8)
    {
LABEL_50:
      v50 = *(_DWORD *)(v48 - 8);
      goto LABEL_51;
    }
  }
  else
  {
    qword_1ECE831F8 = 0;
    byte_1ECE831EA = 1;
    v88 = *((_OWORD *)a2 + 15);
    v90 = *((_OWORD *)a2 + 14);
    v91 = v88;
  }
  WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand();
  v48 = qword_1ECE831F8;
  if (qword_1ECE831F8)
    goto LABEL_50;
  v50 = 0;
LABEL_51:
  v51 = *((_QWORD *)this + 8);
  v52 = *((_QWORD *)this + 9);
  v53 = (v51 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v51 - 1640531527) << 16) ^ ((unsigned __int16)v51
                                                                                             - 1640531527);
  v54 = (v51 >> 37) & 0x7FFF800 ^ ((v53 + WORD2(v51) + (v53 >> 11)) << 16) ^ (v53 + WORD2(v51) + (v53 >> 11));
  v55 = (v52 >> 5) & 0x7FFF800 ^ ((v54 + (unsigned __int16)v52 + (v54 >> 11)) << 16) ^ (v54 + (unsigned __int16)v52 + (v54 >> 11));
  v56 = (v52 >> 37) & 0x7FFF800 ^ ((v55 + WORD2(v52) + (v55 >> 11)) << 16) ^ (v55 + WORD2(v52) + (v55 >> 11));
  v57 = (v56 + (v56 >> 11)) ^ (8 * (v56 + (v56 >> 11)));
  v58 = (v57 + (v57 >> 5)) ^ (4 * (v57 + (v57 >> 5)));
  v59 = (v58 + (v58 >> 15)) ^ ((v58 + (v58 >> 15)) << 10);
  if (!v59)
    v59 = 0x800000;
  v60 = v59 & v50;
  v61 = v48 + 48 * (v59 & v50);
  v62 = *(_QWORD *)v61;
  v63 = *(_QWORD *)(v61 + 8);
  if (*(_OWORD *)v61 == 0)
  {
LABEL_54:
    v64 = v61;
  }
  else
  {
    v64 = 0;
    v73 = 1;
    do
    {
      if (v62 == v51 && v63 == v52)
      {
        v87 = v91;
        *(_OWORD *)(v61 + 16) = v90;
        *(_QWORD *)(v61 + 32) = v87;
        goto LABEL_59;
      }
      if (v62 == -1)
        v64 = v61;
      v60 = (v60 + v73) & v50;
      v61 = v48 + 48 * v60;
      v62 = *(_QWORD *)v61;
      v63 = *(_QWORD *)(v61 + 8);
      ++v73;
    }
    while (*(_OWORD *)v61 != 0);
    if (!v64)
      goto LABEL_54;
    *(_QWORD *)(v64 + 32) = 0;
    *(_OWORD *)v64 = 0u;
    *(_OWORD *)(v64 + 16) = 0u;
    --*(_DWORD *)(v48 - 16);
    v48 = qword_1ECE831F8;
  }
  *(_OWORD *)v64 = *v18;
  v65 = v91;
  *(_OWORD *)(v64 + 16) = v90;
  *(_QWORD *)(v64 + 32) = v65;
  ++*(_DWORD *)(v48 - 12);
  if (qword_1ECE831F8)
    v66 = *(_DWORD *)(qword_1ECE831F8 - 12);
  else
    v66 = 0;
  v67 = (*(_DWORD *)(qword_1ECE831F8 - 16) + v66);
  v68 = *(unsigned int *)(qword_1ECE831F8 - 4);
  if (v68 > 0x400)
  {
    if (v68 > 2 * v67)
      goto LABEL_59;
  }
  else if (3 * v68 > 4 * v67)
  {
    goto LABEL_59;
  }
  WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand();
LABEL_59:
  if ((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v77 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v77 = 1;
    *(_QWORD *)(v77 + 16) = 0;
    *(_QWORD *)(v77 + 24) = 0;
    *(_QWORD *)(v77 + 8) = (char *)this + 24;
    *(_BYTE *)(v77 + 32) = 0;
    v79 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v79 & 0xFFFF000000000000 | v77;
    v80 = v79 & 0xFFFFFFFFFFFFLL;
    if ((v79 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v81 = __ldaxr((unsigned int *)v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, (unsigned int *)v80));
      if (!v82)
      {
        atomic_store(1u, (unsigned int *)v80);
        v83 = *(unsigned int *)(v80 + 28);
        if ((_DWORD)v83)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v80 + 16), (WTF::StringImpl *)(*(_QWORD *)(v80 + 16) + 32 * v83));
        v84 = *(WTF **)(v80 + 16);
        if (v84)
        {
          *(_QWORD *)(v80 + 16) = 0;
          *(_DWORD *)(v80 + 24) = 0;
          WTF::fastFree(v84, v78);
        }
        WTF::fastFree((WTF *)v80, v78);
      }
    }
  }
  v89 = this;
  WTF::HashTable<WebCore::MessagePort *,WebCore::MessagePort *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>>::add((uint64_t *)a2 + 14, &v89, (uint64_t)&v90);
  v69 = __ldxr((unsigned __int8 *)&_MergedGlobals_172);
  if (v69 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_172))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_172);
  return this;
}

uint64_t *WTF::HashTable<WebCore::MessagePort *,WebCore::MessagePort *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>>::add@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  void **v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  void **v24;
  int v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::MessagePort *,WebCore::MessagePort *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = (void *)*a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (void **)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v24 = 0;
    v25 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v23 = 0;
        v22 = v6 + 8 * v26;
        goto LABEL_12;
      }
      if (v15 == (void *)-1)
        v24 = v14;
      v13 = (v13 + v25) & v8;
      v14 = (void **)(v6 + 8 * v13);
      v15 = *v14;
      ++v25;
    }
    while (*v14);
    if (v24)
    {
      *v24 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = (void *)*a2;
      v14 = v24;
    }
  }
  *v14 = v9;
  v16 = *v4;
  if (*v4)
    v17 = *(_DWORD *)(v16 - 12) + 1;
  else
    v17 = 1;
  *(_DWORD *)(v16 - 12) = v17;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12);
  else
    v19 = 0;
  v20 = (*(_DWORD *)(v18 - 16) + v19);
  v21 = *(unsigned int *)(v18 - 4);
  if (v21 > 0x400)
  {
    if (v21 > 2 * v20)
      goto LABEL_11;
LABEL_14:
    result = WTF::HashTable<WebCore::MessagePort *,WebCore::MessagePort *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>>::expand(v4, v14);
    v14 = (void **)result;
    v18 = *v4;
    if (*v4)
      v21 = *(unsigned int *)(v18 - 4);
    else
      v21 = 0;
    goto LABEL_11;
  }
  if (3 * v21 <= 4 * v20)
    goto LABEL_14;
LABEL_11:
  v22 = v18 + 8 * v21;
  v23 = 1;
LABEL_12:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 16) = v23;
  return result;
}

_QWORD *WTF::HashTable<WebCore::MessagePort *,WebCore::MessagePort *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>>::rehash(uint64_t *a1, unsigned int a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  void **v13;
  _QWORD *v14;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (void **)v6;
    do
    {
      v10 = *v13;
      if ((unint64_t)*v13 + 1 >= 2)
      {
        v14 = WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::reinsert(*a1, (uint64_t)v10);
        if (v13 == a3)
          v11 = v14;
      }
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_14;
  }
  result = 0;
  if (v6)
  {
LABEL_14:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

_QWORD *WTF::HashTable<WebCore::MessagePort *,WebCore::MessagePort *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>,WTF::HashTraits<WebCore::MessagePort *>>::expand(uint64_t *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *result;
  void **v12;
  _QWORD *v13;

  v4 = *a1;
  if (!*a1)
  {
    LODWORD(v5) = 0;
    v6 = 0;
    goto LABEL_3;
  }
  LODWORD(v5) = *(_DWORD *)(v4 - 4);
  v6 = *(_DWORD *)(v4 - 12);
  if (!(_DWORD)v5)
  {
LABEL_3:
    v7 = 8;
    goto LABEL_4;
  }
  v7 = (_DWORD)v5 << (6 * v6 >= (2 * v5));
LABEL_4:
  v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  v10 = 0;
  if ((_DWORD)v5)
  {
    v5 = v5;
    v12 = (void **)v4;
    do
    {
      v9 = *v12;
      if ((unint64_t)*v12 + 1 >= 2)
      {
        v13 = WTF::HashTable<WebCore::KeyframeEffectStack *,WebCore::KeyframeEffectStack *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>,WTF::HashTraits<WebCore::KeyframeEffectStack *>>::reinsert(*a1, (uint64_t)v9);
        if (v12 == a2)
          v10 = v13;
      }
      ++v12;
      --v5;
    }
    while (v5);
    goto LABEL_16;
  }
  result = 0;
  if (v4)
  {
LABEL_16:
    WTF::fastFree((WTF *)(v4 - 16), v9);
    return v10;
  }
  return result;
}

uint64_t *WTF::ThreadSafeWeakPtr<WebCore::MessagePort>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v12;

  v4 = *a2;
  *a2 = 0;
  v5 = *a1;
  *a1 = v4;
  if (!v5)
    goto LABEL_10;
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_4;
LABEL_5:
  v7 = *(_QWORD *)(v5 + 16) - 1;
  *(_QWORD *)(v5 + 16) = v7;
  if (!v7)
  {
    v8 = *(_QWORD *)(v5 + 8);
    v9 = __ldxr((unsigned __int8 *)v5);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v5))
        goto LABEL_8;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_8:
    if (!v8)
      WTF::fastFree((WTF *)v5, a2);
    goto LABEL_10;
  }
  v12 = __ldxr((unsigned __int8 *)v5);
  if (v12 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_10:
  v10 = a2[1];
  a2[1] = 0;
  a1[1] = v10;
  return a1;
}

uint64_t WebCore::JSAbstractRange::prototype(WebCore::JSAbstractRange *this, JSC::JSCell **a2, WebCore::JSDOMGlobalObject *a3)
{
  return *(_QWORD *)(WebCore::getDOMStructure<WebCore::JSAbstractRange>(this, a2) + 48);
}

void WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)0>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  int *v7;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int HTMLNode;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  const WebCore::Style::RuleSet *v36;
  WTF::String *v37;
  uint64_t v38;
  WebCore::Node *v39;
  WebCore::TreeScope *v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  void *v51;
  int v52;
  WTF *v53;
  __int16 v55;
  __int16 v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const WebCore::Style::RuleSet *v65;
  WTF::String *v66;
  uint64_t v67;
  WebCore::Node *v68;
  WebCore::TreeScope *v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v76;
  _BOOL4 v77;
  void *v78;
  int v79;
  WTF *v80;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  unint64_t v85;
  WTF::StringImpl *v86;
  int8x16_t *v87;
  int8x16_t *v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t *v91;
  int8x16_t *v92;
  uint8x16_t v93;
  __int8 *v94;
  int64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  WTF::StringImpl *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  WebCore::TreeScope *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  const WebCore::Style::RuleSet *v112;
  WTF::String *v113;
  uint64_t v114;
  WebCore::Node *v115;
  WebCore::TreeScope *v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v124;
  _BOOL4 v125;
  void *v126;
  int v127;
  WTF *v128;
  unint64_t v130;
  int8x16_t *v131;
  int8x16_t *v132;
  int8x16_t *v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t *v137;
  int8x16_t *v138;
  uint8x16_t v139;
  __int8 *v140;
  int64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  WebCore::TreeScope *v145;
  uint64_t *v146;
  WebCore::Node *v147;
  WTF::StringImpl *v148;
  WebCore::TreeScope *v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v156;
  _BOOL4 v157;
  int v158;
  WTF *v159;
  uint64_t v161;
  uint64_t v162;
  _BYTE *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  void *v170;
  WebCore::ChildListMutationAccumulator *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  const WebCore::Style::RuleSet *v175;
  WTF::String *v176;
  uint64_t v177;
  WebCore::Node *v178;
  WebCore::TreeScope *v179;
  int v180;
  int v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v187;
  _BOOL4 v188;
  void *v189;
  int v190;
  WTF *v191;
  unint64_t v193;
  int8x16_t *v194;
  int8x16_t *v195;
  int8x16_t *v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t *v200;
  int8x16_t *v201;
  uint8x16_t v202;
  __int8 *v203;
  int64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  WebCore::TreeScope *v208;
  uint64_t *v209;
  WebCore::Node *v210;
  WTF::StringImpl *v211;
  WebCore::TreeScope *v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v219;
  _BOOL4 v220;
  int v221;
  WTF *v222;
  uint64_t v224;
  uint64_t v225;
  _BYTE *v226;
  int v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  void *v234;
  WebCore::ChildListMutationAccumulator *v235;
  unint64_t v236;
  uint64_t v237;
  _DWORD *v238;
  BOOL v239;
  unsigned __int8 *v240;
  uint64_t v241;
  unint64_t v242;
  unsigned int v243;
  unint64_t v245;
  uint64_t v246;
  _WORD *v247;
  BOOL v248;
  unsigned __int8 *v249;
  uint64_t v250;
  unint64_t v251;
  unsigned int v252;
  int v254;
  char v255;
  int v256;
  unint64_t v257;
  _BYTE *v258;
  _DWORD *v259;
  BOOL v260;
  unsigned __int8 *v261;
  _BYTE *v262;
  unint64_t v263;
  unsigned int v264;
  char v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  BOOL v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  WTF::StringImpl *v279;
  uint64_t v280;
  unsigned int v281;
  uint64_t *v282;
  uint64_t v283;
  uint64_t v284;
  WTF::StringImpl *v285;
  uint64_t v286;
  uint64_t v287;
  WTF::StringImpl *v288;
  uint64_t v289;
  WTF::StringImpl *v290;
  uint64_t v291;
  uint64_t v292;
  WTF::StringImpl *v293;
  WTF *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  const WebCore::Style::RuleSet *v298;
  WTF::String *v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  unsigned __int8 *v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int v306;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char v314;
  char v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  const WebCore::Style::RuleSet *v330;
  WTF::String *v331;
  unint64_t v332;
  uint64_t v333;
  _WORD *v334;
  unsigned __int8 *v335;
  uint64_t v336;
  unint64_t v337;
  unsigned int v338;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  void *v346;
  WebCore::ChildListMutationAccumulator *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  WTF *v358;
  void *v359;
  WTF *v360;
  void *v361;
  void *v362;
  WebCore::ChildListMutationAccumulator *v363;
  void *v364;
  WebCore::ChildListMutationAccumulator *v365;
  void *v366;
  WebCore::ChildListMutationAccumulator *v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  int8x16_t v372;
  int8x16_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int8x16_t v376;
  WTF::StringImpl *v377;
  WebCore::FormController *v378;
  WTF *v379;
  void *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t *v413;
  WTF *v414;
  void *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  WTF *v431;
  void *v432;
  WTF *v433;
  void *v434;
  WTF *v435;
  void *v436;
  int v437;
  int v438;
  const WebCore::Style::RuleSet *v439;
  WTF::String *v440;
  const WebCore::Style::RuleSet *v441;
  WTF::String *v442;
  const WebCore::Style::RuleSet *v443;
  WTF::String *v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t *v449;
  uint64_t v450;
  WTF::StringImpl *v451;
  WTF::StringImpl *v452;
  WTF::StringImpl *v453;
  WTF::StringImpl *v454;
  WTF::StringImpl *v455;
  WTF::StringImpl *v456;
  WebCore::Editor *v457;
  char v458;
  WTF::StringImpl **v459;
  uint64_t v460;
  WTF::StringImpl *v461;
  uint64_t ElementChild;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t *v466;
  uint64_t v467;
  uint64_t v468;
  _BYTE *v469;
  char v470;
  uint64_t v471;
  unsigned int v472;
  uint64_t v473;
  _BYTE *v475;
  uint64_t v476;
  unsigned int v477;
  uint64_t v478;
  uint64_t v480;
  uint64_t *v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t *v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  __int128 v497;
  uint64_t v498;
  WTF::StringImpl *v499;
  WTF::StringImpl *v500[2];
  __int128 v501;
  uint64_t v502;
  WebCore::Node *v503[2];

  v11 = *(unsigned __int8 **)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  if (v12)
  {
    v13 = 0;
    v14 = v11 + 1;
    while (1)
    {
      v15 = v11[v13];
      if (v15 - 97 > 0x19)
        break;
      v16 = &v14[v13++];
      --v12;
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = v12;
      if (!v12)
      {
        v17 = (uint64_t)&v11[v13];
        goto LABEL_914;
      }
    }
    v17 = (uint64_t)&v11[v13];
    v18 = v15 > 0x3E;
    v19 = (1 << v15) & 0x4000800100003600;
    v20 = v18 || v19 == 0;
    if (!v20)
    {
      v21 = v12 - 1;
      v4 = (uint64_t)&v14[v13];
      HTMLNode = WebCore::findHTMLNodeName<unsigned char>(v11, v13);
      do
      {
        v23 = *(unsigned __int8 *)v17;
        v18 = v23 > 0x20;
        v24 = (1 << v23) & 0x100003600;
        if (v18 || v24 == 0)
          break;
        ++v17;
        *(_QWORD *)(a2 + 16) = v4;
        *(_QWORD *)(a2 + 24) = v21;
        ++v4;
        --v21;
      }
      while (v21 != -1);
LABEL_16:
      switch(HTMLNode)
      {
        case 10:
          WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::B>((uint64_t *)v500, a2, (WebCore::ContainerNode *)a3);
          goto LABEL_856;
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 68:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 87:
        case 88:
        case 89:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 107:
        case 108:
        case 109:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
          goto LABEL_936;
        case 19:
          WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Br>(v500, a2, (WebCore::ContainerNode *)a3);
          v452 = v500[0];
          v500[0] = 0;
          *(_QWORD *)a1 = v452;
          WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(v500);
          return;
        case 20:
          v62 = *(_QWORD *)a2;
          v63 = bmalloc::api::isoAllocate();
          v3 = v63;
          v497 = xmmword_1968BC9D0;
          *(_OWORD *)(v63 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v63 + 24) = 0x1C1C00000002;
          *(_QWORD *)(v63 + 32) = 0;
          i = v63 + 32;
          *(_QWORD *)(v63 + 40) = v62 + 96;
          *(_OWORD *)(v63 + 48) = 0u;
          *(_OWORD *)(v63 + 64) = 0u;
          ++*(_DWORD *)(v62 + 3324);
          *(_QWORD *)(v63 + 80) = 0;
          *(_QWORD *)(v63 + 88) = 0;
          v64 = WebCore::HTMLNames::buttonTag;
          if (WebCore::HTMLNames::buttonTag)
            ++*(_DWORD *)WebCore::HTMLNames::buttonTag;
          *(_QWORD *)(v63 + 96) = v64;
          *(_QWORD *)(v63 + 104) = 0;
          *(_OWORD *)(v63 + 120) = 0uLL;
          *(_OWORD *)(v63 + 136) = 0uLL;
          *(_QWORD *)(v63 + 152) = 0;
          *(_WORD *)(v63 + 160) = 3;
          *(_BYTE *)(v63 + 162) = *(_BYTE *)(v63 + 162) & 0xFC | 2;
          *(_BYTE *)(v63 + 168) &= 0xF8u;
          *(_DWORD *)(v63 + 164) = 0;
          *(_QWORD *)v63 = off_1E33B8508;
          *(_QWORD *)(v63 + 112) = &unk_1E33B8A90;
          *(_DWORD *)(v63 + 172) = 0;
          *(_BYTE *)(v63 + 176) = 0;
          WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v63);
          if (*(_BYTE *)(a2 + 32))
            goto LABEL_418;
          v67 = *(_QWORD *)(a3 + 16);
          if ((v67 & 0x8000000000000) != 0)
          {
            WebCore::ContainerNode::parserAppendChild(a3, (WebCore::Node *)v3, v65, v66);
            goto LABEL_97;
          }
          v68 = *(WebCore::Node **)(v3 + 40);
          v69 = *(WebCore::TreeScope **)(a3 + 40);
          if (*((_QWORD *)v68 + 1) != *((_QWORD *)v69 + 1))
          {
            __break(0xC471u);
            JUMPOUT(0x1944D717CLL);
          }
          v17 = (uint64_t)&v501;
          v500[0] = (WTF::StringImpl *)&v501;
          v500[1] = (WTF::StringImpl *)11;
          v6 = (uint64_t)&WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          v7 = &WebCore::ScriptDisallowedScope::s_count;
          v70 = WebCore::ScriptDisallowedScope::s_count;
          v71 = WebCore::ScriptDisallowedScope::s_count + 1;
          if ((v67 & 0x10000000000000) != 0 || (*(_WORD *)(a3 + 28) & 0x80) != 0)
          {
            v383 = *(_QWORD *)v69;
            if ((*(_WORD *)(*(_QWORD *)v69 + 28) & 0x80) == 0)
              v383 = 0;
            v384 = *(_QWORD *)(v383 + 224);
            if (v384)
            {
              ++*(_DWORD *)(v384 + 12);
              *(_BYTE *)(v384 + 9) = 0;
            }
          }
          WebCore::ScriptDisallowedScope::s_count = v70 + 2;
          *(_QWORD *)(v3 + 32) = a3;
          *(_DWORD *)(v3 + 24) |= 1u;
          v72 = *(_QWORD *)(a3 + 88);
          if (v72)
          {
            v73 = *(_DWORD *)(v72 + 24);
            *(_DWORD *)(v72 + 24) = v73 + 2;
            *(_QWORD *)(v3 + 48) = v72 | ((unint64_t)*(unsigned __int16 *)(v3 + 54) << 48);
            *(_QWORD *)(v72 + 56) = v3;
            if (v73)
            {
              *(_DWORD *)(v72 + 24) = v73;
            }
            else if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v72);
              v71 = WebCore::ScriptDisallowedScope::s_count - 1;
              v69 = *(WebCore::TreeScope **)(a3 + 40);
              v68 = *(WebCore::Node **)(v3 + 40);
            }
          }
          else
          {
            *(_QWORD *)(a3 + 80) = v3;
          }
          *(_QWORD *)(a3 + 88) = v3;
          WebCore::ScriptDisallowedScope::s_count = v71;
          if (v68 != v69)
            WebCore::Node::moveTreeToNewScope((WebCore::Node *)v3, v68, v69, v66);
          LODWORD(v4) = *(_WORD *)(v3 + 78) & 0x3FF;
          if ((*(_WORD *)(v3 + 78) & 0x3FF) == 0)
            goto LABEL_80;
          goto LABEL_940;
        case 37:
          v172 = *(_QWORD *)a2;
          v173 = bmalloc::api::isoAllocate();
          v3 = v173;
          *(_OWORD *)(v173 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v173 + 24) = 0x101C00000002;
          *(_QWORD *)(v173 + 32) = 0;
          i = v173 + 32;
          *(_QWORD *)(v173 + 40) = v172 + 96;
          *(_OWORD *)(v173 + 48) = 0u;
          *(_OWORD *)(v173 + 64) = 0u;
          ++*(_DWORD *)(v172 + 3324);
          *(_QWORD *)(v173 + 80) = 0;
          v494 = (uint64_t *)(v173 + 80);
          *(_QWORD *)(v173 + 88) = 0;
          v174 = WebCore::HTMLNames::divTag;
          if (WebCore::HTMLNames::divTag)
            ++*(_DWORD *)WebCore::HTMLNames::divTag;
          *(_QWORD *)(v173 + 96) = v174;
          *(_QWORD *)(v173 + 104) = 0;
          *(_QWORD *)v173 = off_1E33B9CC0;
          WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v173);
          if (*(_BYTE *)(a2 + 32))
            goto LABEL_418;
          v177 = *(_QWORD *)(a3 + 16);
          v496 = a1;
          if ((v177 & 0x8000000000000) != 0)
          {
            WebCore::ContainerNode::parserAppendChild(a3, (WebCore::Node *)v3, v175, v176);
            goto LABEL_288;
          }
          v178 = *(WebCore::Node **)(v3 + 40);
          v179 = *(WebCore::TreeScope **)(a3 + 40);
          if (*((_QWORD *)v178 + 1) != *((_QWORD *)v179 + 1))
          {
            __break(0xC471u);
            JUMPOUT(0x1944D7200);
          }
          v500[0] = (WTF::StringImpl *)&v501;
          v500[1] = (WTF::StringImpl *)11;
          ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          v180 = WebCore::ScriptDisallowedScope::s_count;
          v181 = WebCore::ScriptDisallowedScope::s_count + 1;
          if ((v177 & 0x10000000000000) != 0 || (*(_WORD *)(a3 + 28) & 0x80) != 0)
          {
            v392 = *(_QWORD *)v179;
            if ((*(_WORD *)(*(_QWORD *)v179 + 28) & 0x80) == 0)
              v392 = 0;
            v393 = *(_QWORD *)(v392 + 224);
            if (v393)
            {
              ++*(_DWORD *)(v393 + 12);
              *(_BYTE *)(v393 + 9) = 0;
            }
          }
          WebCore::ScriptDisallowedScope::s_count = v180 + 2;
          *(_QWORD *)(v3 + 32) = a3;
          *(_DWORD *)(v3 + 24) |= 1u;
          v182 = *(_QWORD *)(a3 + 88);
          if (v182)
          {
            v183 = *(_DWORD *)(v182 + 24);
            *(_DWORD *)(v182 + 24) = v183 + 2;
            *(_QWORD *)(v3 + 48) = v182 | ((unint64_t)*(unsigned __int16 *)(v3 + 54) << 48);
            *(_QWORD *)(v182 + 56) = v3;
            if (v183)
            {
              *(_DWORD *)(v182 + 24) = v183;
            }
            else if ((*(_WORD *)(v182 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v182);
              v181 = WebCore::ScriptDisallowedScope::s_count - 1;
              v179 = *(WebCore::TreeScope **)(a3 + 40);
              v178 = *(WebCore::Node **)(v3 + 40);
            }
          }
          else
          {
            *(_QWORD *)(a3 + 80) = v3;
          }
          *(_QWORD *)(a3 + 88) = v3;
          WebCore::ScriptDisallowedScope::s_count = v181;
          if (v178 != v179)
            WebCore::Node::moveTreeToNewScope((WebCore::Node *)v3, v178, v179, v176);
          v184 = *(_WORD *)(v3 + 78) & 0x3FF;
          if ((*(_WORD *)(v3 + 78) & 0x3FF) == 0)
            goto LABEL_271;
          if ((*(_WORD *)(v3 + 28) & 0x80) == 0)
            goto LABEL_955;
          v492 = *(_QWORD *)(v3 + 200);
          if (!v492)
            goto LABEL_271;
          i = v492 + 8;
LABEL_955:
          i = *(_QWORD *)i;
          if (!i)
            goto LABEL_271;
          while (1)
          {
            WebCore::Node::incrementConnectedSubframeCount(i, v184);
            if ((*(_WORD *)(i + 28) & 0x80) != 0)
              break;
            v484 = (uint64_t *)(i + 32);
LABEL_958:
            i = *v484;
            if (!*v484)
              goto LABEL_271;
          }
          v485 = *(_QWORD *)(i + 200);
          if (v485)
          {
            v484 = (uint64_t *)(v485 + 8);
            goto LABEL_958;
          }
LABEL_271:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 3364) & 1) != 0)
          {
            WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a3, (uint64_t *)v503);
            v367 = v503[0];
            if (v503[0])
            {
              if (*((_QWORD *)v503[0] + 10))
                WebCore::ChildListMutationAccumulator::childAdded(v503[0], (WebCore::Node *)v3);
              if (*(_DWORD *)v367 == 1)
              {
                WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v367, v366);
                WTF::fastFree(v435, v436);
              }
              else
              {
                --*(_DWORD *)v367;
              }
            }
          }
          v185 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v409 = *(_QWORD *)(v185 + 528);
            if (v409)
            {
              v410 = *(_QWORD *)(v409 + 8);
              if (v410)
              {
                v411 = *(_QWORD *)(v410 + 24);
                if (v411)
                {
                  v412 = *(_QWORD *)(v411 + 8);
                  if (v412)
                    goto LABEL_759;
                }
              }
            }
            v426 = *(_QWORD *)(v185 + 2632);
            if (v426)
            {
              v427 = *(_QWORD *)(v426 + 8);
              if (v427)
              {
                v428 = *(_QWORD *)(v427 + 528);
                if (v428)
                {
                  v429 = *(_QWORD *)(v428 + 8);
                  if (v429)
                  {
                    v430 = *(_QWORD *)(v429 + 24);
                    if (v430)
                    {
                      v412 = *(_QWORD *)(v430 + 8);
                      if (v412)
                      {
LABEL_759:
                        v413 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v412 + 80) + 8) + 40);
                        if (v413)
                          WebCore::InspectorDOMAgent::didInsertDOMNode(v413, (WebCore::Node *)v3);
                      }
                    }
                  }
                }
              }
            }
          }
          v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
          *(_DWORD *)(v4 + 24) += 2;
          *(_DWORD *)(v3 + 24) += 2;
          v187 = *(_QWORD *)(a3 + 16);
          v188 = (v187 & 0x18000000000000) == 0;
          if ((v187 & 0x8000000000000) != 0)
            WebCore::notifyNodeInsertedIntoDocument(a3, v3, v188, (uint64_t)v500);
          else
            WebCore::notifyNodeInsertedIntoTree(a3, v3, v188);
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v3);
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
          if (*(_DWORD *)(v4 + 24) == 2)
          {
            if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v4);
          }
          else
          {
            *(_DWORD *)(v4 + 24) -= 2;
          }
          --WebCore::ScriptDisallowedScope::s_count;
          v190 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
            && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
          {
            WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v503, v189);
            v190 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          }
          WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v190 - 1;
          *(_WORD *)(a3 + 30) |= 0x200u;
          if (HIDWORD(v500[1]))
          {
            a3 = (uint64_t)v500[0];
            v4 = 8 * HIDWORD(v500[1]);
            do
            {
              v292 = *(_QWORD *)a3;
              *(_QWORD *)a3 = 0;
              if (v292)
              {
                if (*(_DWORD *)(v292 + 24) == 2)
                {
                  if ((*(_WORD *)(v292 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v292);
                }
                else
                {
                  *(_DWORD *)(v292 + 24) -= 2;
                }
              }
              a3 += 8;
              v4 -= 8;
            }
            while (v4);
          }
          v191 = v500[0];
          if (&v501 != (__int128 *)v500[0] && v500[0] != 0)
          {
            v500[0] = 0;
            LODWORD(v500[1]) = 0;
            WTF::fastFree(v191, v189);
          }
LABEL_288:
          *(_WORD *)(v3 + 30) |= 2u;
          v17 = (uint64_t)&v501;
          v497 = xmmword_1969F1C50;
          v7 = &WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          v6 = (uint64_t)&WebCore::InspectorInstrumentationPublic::s_frontendCounter;
          a1 = 3;
          while (1)
          {
            v193 = *(_QWORD *)(a2 + 24);
            if ((v193 & 0x8000000000000000) != 0)
              goto LABEL_939;
            v194 = *(int8x16_t **)(a2 + 16);
            v195 = (int8x16_t *)((char *)v194 + v193);
            v196 = v194;
            if (v193 < 0x10)
            {
              v203 = *(__int8 **)(a2 + 16);
              if (v193)
              {
                do
                {
                  v231 = *v203;
                  v18 = v231 > 0x3C;
                  v232 = (1 << v231) & 0x1000004000002001;
                  if (!v18 && v232 != 0)
                    goto LABEL_295;
                  ++v203;
                }
                while (--v193);
              }
            }
            else
            {
              do
              {
                v197.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v197.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                v198 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v196, v197));
                v199 = vceqq_s8(v198, *v196);
                v198.i8[0] = vmaxvq_u8((uint8x16_t)v199);
                if (v198.i32[0])
                  goto LABEL_294;
                v200 = v196 + 1;
                v201 = (int8x16_t *)((char *)v196++ + 31);
              }
              while (v201 < v195);
              if (v200 < v195)
              {
                v196 = v195 - 1;
                v371 = v195[-1];
                v372.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v372.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                v373 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v371, v372));
                v199 = vceqq_s8(v373, v371);
                v373.i8[0] = vmaxvq_u8((uint8x16_t)v199);
                v203 = (__int8 *)v195;
                if (v373.i32[0])
                {
LABEL_294:
                  v202 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v199);
                  v202.i8[0] = vminvq_u8(v202);
                  v203 = &v196->i8[v202.u32[0]];
                  goto LABEL_295;
                }
                goto LABEL_295;
              }
            }
            v203 = (__int8 *)v195;
LABEL_295:
            v204 = (char *)v195 - v203;
            if ((char *)v195 - v203 < 0)
              goto LABEL_939;
            *(_QWORD *)(a2 + 16) = v203;
            *(_QWORD *)(a2 + 24) = v204;
            if (v203 == (__int8 *)v195)
              goto LABEL_300;
            v205 = *v203;
            if (!*v203)
            {
              if (!*(_BYTE *)(a2 + 32))
              {
                v315 = 7;
LABEL_618:
                *(_BYTE *)(a2 + 32) = v315;
              }
LABEL_302:
              v499 = 0;
              goto LABEL_303;
            }
            if (v205 == 13 || v205 == 38)
            {
              if (&v203[v204] - (__int8 *)v194 < 0)
                goto LABEL_939;
              *(_QWORD *)(a2 + 16) = v194;
              *(_QWORD *)(a2 + 24) = &v203[v204] - (__int8 *)v194;
              WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v499, a2);
            }
            else
            {
LABEL_300:
              if (((_DWORD)v203 - (_DWORD)v194) >= 0x10000)
              {
                if (!*(_BYTE *)(a2 + 32))
                {
                  v315 = 25;
                  goto LABEL_618;
                }
                goto LABEL_302;
              }
              if ((_DWORD)v203 == (_DWORD)v194)
                goto LABEL_302;
              WTF::String::String();
            }
LABEL_303:
            if (*(_BYTE *)(a2 + 32))
              goto LABEL_350;
            if (v499)
            {
              if ((*(_BYTE *)(v3 + 22) & 8) != 0)
              {
                WebCore::Text::create(*(_QWORD *)a2, (_DWORD **)&v499, (uint64_t *)v500);
                WebCore::ContainerNode::parserAppendChild(v3, v500[0], v443, v444);
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v500);
                goto LABEL_337;
              }
              v206 = *(_QWORD *)a2;
              v207 = bmalloc::api::isoAllocate();
              v4 = v207;
              *(_OWORD *)(v207 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v207 + 24) = 0x300300000002;
              *(_QWORD *)(v207 + 32) = 0;
              v209 = (uint64_t *)(v207 + 32);
              v210 = (WebCore::Node *)(v206 + 96);
              *(_QWORD *)(v207 + 40) = v206 + 96;
              *(_OWORD *)(v207 + 48) = 0u;
              *(_OWORD *)(v207 + 64) = 0u;
              ++*(_DWORD *)(v206 + 3324);
              v211 = v499;
              if (v499 || (v211 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
                *(_DWORD *)v211 += 2;
              *(_QWORD *)(v207 + 80) = v211;
              *(_QWORD *)v207 = off_1E33A8078;
              v212 = *(WebCore::TreeScope **)(v3 + 40);
              if (*(_QWORD *)(v206 + 104) != *((_QWORD *)v212 + 1))
              {
                __break(0xC471u);
                JUMPOUT(0x1944D69ECLL);
              }
              v500[0] = (WTF::StringImpl *)&v501;
              v500[1] = (WTF::StringImpl *)11;
              ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              if ((*(_BYTE *)(v3 + 28) & 0x80) != 0 || (*(_BYTE *)(v3 + 22) & 0x10) != 0)
              {
                v312 = *(_QWORD *)v212;
                if ((*(_WORD *)(*(_QWORD *)v212 + 28) & 0x80) == 0)
                  v312 = 0;
                v313 = *(_QWORD *)(v312 + 224);
                if (v313)
                {
                  ++*(_DWORD *)(v313 + 12);
                  *(_BYTE *)(v313 + 9) = 0;
                }
              }
              v213 = WebCore::ScriptDisallowedScope::s_count + 1;
              WebCore::ScriptDisallowedScope::s_count += 2;
              *(_QWORD *)(v207 + 32) = v3;
              *(_DWORD *)(v207 + 24) = 3;
              v214 = *(_QWORD *)(v3 + 88);
              if (v214)
              {
                v215 = *(_DWORD *)(v214 + 24);
                *(_DWORD *)(v214 + 24) = v215 + 2;
                *(_QWORD *)(v4 + 48) = v214;
                *(_QWORD *)(v214 + 56) = v4;
                if (v215)
                {
                  *(_DWORD *)(v214 + 24) = v215;
                }
                else if ((*(_WORD *)(v214 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v214);
                  v213 = WebCore::ScriptDisallowedScope::s_count - 1;
                  v212 = *(WebCore::TreeScope **)(v3 + 40);
                  v210 = *(WebCore::Node **)(v4 + 40);
                }
              }
              else
              {
                *v494 = v4;
              }
              *(_QWORD *)(v3 + 88) = v4;
              WebCore::ScriptDisallowedScope::s_count = v213;
              if (v210 != v212)
                WebCore::Node::moveTreeToNewScope((WebCore::Node *)v4, v210, v212, v208);
              v216 = *(_WORD *)(v4 + 78) & 0x3FF;
              if ((*(_WORD *)(v4 + 78) & 0x3FF) == 0)
                goto LABEL_318;
              if ((*(_WORD *)(v4 + 28) & 0x80) != 0)
              {
                v487 = *(_QWORD *)(v4 + 200);
                if (v487)
                {
                  v209 = (uint64_t *)(v487 + 8);
                  goto LABEL_840;
                }
              }
              else
              {
LABEL_840:
                v448 = *v209;
                if (v448)
                {
                  do
                  {
                    WebCore::Node::incrementConnectedSubframeCount(v448, v216);
                    if ((*(_WORD *)(v448 + 28) & 0x80) != 0)
                    {
                      v450 = *(_QWORD *)(v448 + 200);
                      if (!v450)
                        break;
                      v449 = (uint64_t *)(v450 + 8);
                    }
                    else
                    {
                      v449 = (uint64_t *)(v448 + 32);
                    }
                    v448 = *v449;
                  }
                  while (*v449);
                }
              }
LABEL_318:
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 3364) & 1) != 0)
              {
                WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)v3, (uint64_t *)v503);
                v235 = v503[0];
                if (v503[0])
                {
                  if (*((_QWORD *)v503[0] + 10))
                    WebCore::ChildListMutationAccumulator::childAdded(v503[0], (WebCore::Node *)v4);
                  if (*(_DWORD *)v235 == 1)
                  {
                    WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v235, v234);
                    WTF::fastFree(v360, v361);
                  }
                  else
                  {
                    --*(_DWORD *)v235;
                  }
                }
              }
              v217 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v322 = *(_QWORD *)(v217 + 528);
                if (v322)
                {
                  v323 = *(_QWORD *)(v322 + 8);
                  if (v323)
                  {
                    v324 = *(_QWORD *)(v323 + 24);
                    if (v324)
                    {
                      v325 = *(_QWORD *)(v324 + 8);
                      if (v325)
                        goto LABEL_614;
                    }
                  }
                }
                v353 = *(_QWORD *)(v217 + 2632);
                if (v353)
                {
                  v354 = *(_QWORD *)(v353 + 8);
                  if (v354)
                  {
                    v355 = *(_QWORD *)(v354 + 528);
                    if (v355)
                    {
                      v356 = *(_QWORD *)(v355 + 8);
                      if (v356)
                      {
                        v357 = *(_QWORD *)(v356 + 24);
                        if (v357)
                        {
                          v325 = *(_QWORD *)(v357 + 8);
                          if (v325)
                          {
LABEL_614:
                            v326 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v325 + 80) + 8) + 40);
                            if (v326)
                              WebCore::InspectorDOMAgent::didInsertDOMNode(v326, (WebCore::Node *)v4);
                          }
                        }
                      }
                    }
                  }
                }
              }
              i = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
              *(_DWORD *)(i + 24) += 2;
              *(_DWORD *)(v4 + 24) += 2;
              v219 = *(_QWORD *)(v3 + 16);
              v220 = (v219 & 0x18000000000000) == 0;
              if ((v219 & 0x8000000000000) != 0)
                WebCore::notifyNodeInsertedIntoDocument(v3, v4, v220, (uint64_t)v500);
              else
                WebCore::notifyNodeInsertedIntoTree(v3, v4, v220);
              if (*(_DWORD *)(v4 + 24) == 2)
              {
                if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v4);
              }
              else
              {
                *(_DWORD *)(v4 + 24) -= 2;
              }
              if (*(_DWORD *)(i + 24) == 2)
              {
                if ((*(_WORD *)(i + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)i);
              }
              else
              {
                *(_DWORD *)(i + 24) -= 2;
              }
              --WebCore::ScriptDisallowedScope::s_count;
              v221 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
                && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
              {
                WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v503, v194);
                v221 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              }
              WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v221 - 1;
              *(_WORD *)(v3 + 30) |= 0x200u;
              if (HIDWORD(v500[1]))
              {
                v229 = v500[0];
                i = 8 * HIDWORD(v500[1]);
                do
                {
                  v230 = *(_QWORD *)v229;
                  *(_QWORD *)v229 = 0;
                  if (v230)
                  {
                    if (*(_DWORD *)(v230 + 24) == 2)
                    {
                      if ((*(_WORD *)(v230 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v230);
                    }
                    else
                    {
                      *(_DWORD *)(v230 + 24) -= 2;
                    }
                  }
                  v229 = (WTF::StringImpl *)((char *)v229 + 8);
                  i -= 8;
                }
                while (i);
              }
              v222 = v500[0];
              if (&v501 != (__int128 *)v500[0] && v500[0] != 0)
              {
                v500[0] = 0;
                LODWORD(v500[1]) = 0;
                WTF::fastFree(v222, v194);
              }
              if (*(_DWORD *)(v4 + 24) == 2)
              {
                if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v4);
              }
              else
              {
                *(_DWORD *)(v4 + 24) -= 2;
              }
            }
LABEL_337:
            v224 = *(_QWORD *)(a2 + 24);
            if (v224)
            {
              v225 = v224 - 1;
              v20 = v224 == 1;
              v226 = (_BYTE *)(*(_QWORD *)(a2 + 16) + 1);
              *(_QWORD *)(a2 + 16) = v226;
              *(_QWORD *)(a2 + 24) = v225;
              if (v20 || *v226 != 47)
              {
                v227 = *(_DWORD *)(a2 + 36) + 1;
                *(_DWORD *)(a2 + 36) = v227;
                if (v227 != 512)
                {
                  WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)0>(v500, a2, v3);
                  --*(_DWORD *)(a2 + 36);
                  a3 = *(_BYTE *)(a2 + 32) != 0;
                  if (v500[0])
                  {
                    if (*((_DWORD *)v500[0] + 6) == 2)
                    {
                      if ((*((_WORD *)v500[0] + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v500[0]);
                    }
                    else
                    {
                      *((_DWORD *)v500[0] + 6) -= 2;
                    }
                  }
                  goto LABEL_344;
                }
                if (!*(_BYTE *)(a2 + 32))
                  *(_BYTE *)(a2 + 32) = 24;
              }
            }
LABEL_350:
            a3 = 1;
LABEL_344:
            v228 = v499;
            v499 = 0;
            if (v228)
            {
              if (*(_DWORD *)v228 == 2)
                WTF::StringImpl::destroy(v228, (WTF::StringImpl *)v194);
              else
                *(_DWORD *)v228 -= 2;
            }
            if ((_DWORD)a3)
            {
              if (*(_BYTE *)(a2 + 32))
              {
                v254 = *(_DWORD *)(v3 + 24) + 2;
                *(_DWORD *)(v3 + 24) = v254;
                a1 = v496;
                goto LABEL_416;
              }
              v245 = *(_QWORD *)(a2 + 24);
              a1 = v496;
              if (v245)
              {
                v246 = *(_QWORD *)(a2 + 16);
                v247 = (_WORD *)(v246 + 1);
                *(_QWORD *)(a2 + 16) = v246 + 1;
                *(_QWORD *)(a2 + 24) = v245 - 1;
                if (v245 < 4
                  || (*v247 == 26980 ? (v248 = *(_BYTE *)(v246 + 3) == 118) : (v248 = 0),
                      !v248
                   && ((*(_BYTE *)v247 & 0xDF) != 0x44
                    || (*(_BYTE *)(v246 + 2) & 0xDF) != 0x49
                    || (*(_BYTE *)(v246 + 3) & 0xDF) != 0x56)))
                {
                  *(_DWORD *)(v3 + 24) += 2;
                  *(_BYTE *)(a2 + 32) = 21;
                  v498 = 0;
                  WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v498);
                  goto LABEL_547;
                }
                v249 = (unsigned __int8 *)(v246 + 4);
                *(_QWORD *)(a2 + 16) = v246 + 4;
                *(_QWORD *)(a2 + 24) = v245 - 4;
                if (v245 == 4)
                  goto LABEL_414;
                v250 = v246 + 5;
                v251 = v245 - 5;
                while (1)
                {
                  v252 = *v249;
                  if (v252 > 0x20 || ((1 << v252) & 0x100003600) == 0)
                    break;
                  ++v249;
                  *(_QWORD *)(a2 + 16) = v250;
                  *(_QWORD *)(a2 + 24) = v251;
                  ++v250;
                  if (--v251 == -1)
                    goto LABEL_414;
                }
                *(_QWORD *)(a2 + 16) = v250;
                *(_QWORD *)(a2 + 24) = v251;
                if (v252 != 62)
                  goto LABEL_414;
                goto LABEL_497;
              }
LABEL_729:
              v254 = *(_DWORD *)(v3 + 24) + 2;
              *(_DWORD *)(v3 + 24) = v254;
              v255 = 19;
              goto LABEL_415;
            }
          }
        case 45:
          WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Footer>((uint64_t *)v500, a2, (WebCore::ContainerNode *)a3);
          goto LABEL_856;
        case 60:
          WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::I>((uint64_t *)v500, a2, (WebCore::ContainerNode *)a3);
LABEL_856:
          v451 = v500[0];
          v500[0] = 0;
          *(_QWORD *)a1 = v451;
          WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)v500);
          return;
        case 63:
          v26 = *(_QWORD *)a2;
          v27 = bmalloc::api::isoAllocate();
          v3 = v27;
          *(_OWORD *)(v27 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v27 + 24) = 0x1C1C00000002;
          *(_QWORD *)(v27 + 32) = 0;
          v28 = (uint64_t *)(v27 + 32);
          *(_QWORD *)(v27 + 40) = v26 + 96;
          *(_OWORD *)(v27 + 48) = 0u;
          *(_OWORD *)(v27 + 64) = 0u;
          ++*(_DWORD *)(v26 + 3324);
          *(_QWORD *)(v27 + 80) = 0;
          v29 = (_QWORD *)(v27 + 80);
          *(_QWORD *)(v27 + 88) = 0;
          v30 = WebCore::HTMLNames::inputTag;
          if (WebCore::HTMLNames::inputTag)
            ++*(_DWORD *)WebCore::HTMLNames::inputTag;
          *(_QWORD *)(v27 + 112) = &unk_1E33D0858;
          v31 = v27 + 112;
          *(_QWORD *)(v27 + 96) = v30;
          *(_QWORD *)(v27 + 104) = 0;
          *(_OWORD *)(v27 + 120) = 0uLL;
          v32 = v27 + 120;
          *(_OWORD *)(v27 + 136) = 0uLL;
          *(_QWORD *)(v27 + 152) = 0;
          *(_WORD *)(v27 + 160) = 3;
          *(_BYTE *)(v27 + 162) = *(_BYTE *)(v27 + 162) & 0xFC | 2;
          *(_DWORD *)(v27 + 164) = 0;
          *(_BYTE *)(v27 + 168) &= 0xF8u;
          *(_QWORD *)v27 = off_1E33D0270;
          v33 = *(_QWORD *)(v26 + 528);
          if (v33)
          {
            v33 = *(_QWORD *)(v33 + 8);
            if (v33)
            {
              v457 = (WebCore::Editor *)WebCore::Document::editor(*(WebCore::Document **)(v33 + 296));
              v458 = WebCore::Editor::behavior(v457);
              if (v458)
                LOBYTE(v33) = v458 != 3;
              else
                LOBYTE(v33) = 0;
            }
          }
          *(_BYTE *)(v3 + 169) = *(_BYTE *)(v3 + 169) & 0xE0 | v33 | 0x10;
          *(_QWORD *)(v3 + 172) = -1;
          *(_QWORD *)(v3 + 180) = 0;
          *(_WORD *)(v3 + 188) = 0;
          {
            v34 = (int *)WebCore::mousePointerEventType(void)::mouseType;
            if (!WebCore::mousePointerEventType(void)::mouseType)
              goto LABEL_25;
            v35 = *(_DWORD *)WebCore::mousePointerEventType(void)::mouseType;
          }
          else
          {
            v34 = &WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
            v35 = WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl + 2;
            WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl += 2;
            WebCore::mousePointerEventType(void)::mouseType = (uint64_t)&WebCore::mousePointerEventType(void)::$_0::operator() const(void)::impl;
          }
          *v34 = v35 + 2;
LABEL_25:
          *(_QWORD *)(v3 + 192) = v34;
          *(_QWORD *)(v3 + 200) = 0;
          *(_QWORD *)v3 = off_1E33BFC70;
          *(_QWORD *)(v3 + 112) = &unk_1E33C0318;
          *(_QWORD *)(v3 + 208) = 0;
          *(_QWORD *)(v3 + 216) = 0;
          *(_DWORD *)(v3 + 224) = 20;
          *(_WORD *)(v3 + 228) = -1;
          *(_WORD *)(v3 + 230) &= 0xC000u;
          *(_WORD *)(v3 + 232) = *(_WORD *)(v3 + 232) & 0x8000 | 0x40;
          *(_QWORD *)(v3 + 248) = 0;
          *(_QWORD *)(v3 + 256) = 0;
          *(_QWORD *)(v3 + 240) = 0;
          WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v3);
          if (*(_BYTE *)(a2 + 32))
            goto LABEL_418;
          v38 = *(_QWORD *)(a3 + 16);
          if ((v38 & 0x8000000000000) != 0)
          {
            WebCore::ContainerNode::parserAppendChild(a3, (WebCore::Node *)v3, v36, v37);
            goto LABEL_53;
          }
          v39 = *(WebCore::Node **)(v3 + 40);
          v40 = *(WebCore::TreeScope **)(a3 + 40);
          if (*((_QWORD *)v39 + 1) != *((_QWORD *)v40 + 1))
          {
            __break(0xC471u);
            JUMPOUT(0x1944D7078);
          }
          v500[0] = (WTF::StringImpl *)&v501;
          v500[1] = (WTF::StringImpl *)11;
          ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          v41 = WebCore::ScriptDisallowedScope::s_count;
          v42 = WebCore::ScriptDisallowedScope::s_count + 1;
          if ((v38 & 0x10000000000000) != 0 || (*(_WORD *)(a3 + 28) & 0x80) != 0)
          {
            v381 = *(_QWORD *)v40;
            if ((*(_WORD *)(*(_QWORD *)v40 + 28) & 0x80) == 0)
              v381 = 0;
            v382 = *(_QWORD *)(v381 + 224);
            if (v382)
            {
              ++*(_DWORD *)(v382 + 12);
              *(_BYTE *)(v382 + 9) = 0;
            }
          }
          WebCore::ScriptDisallowedScope::s_count = v41 + 2;
          *(_QWORD *)(v3 + 32) = a3;
          *(_DWORD *)(v3 + 24) |= 1u;
          v43 = *(_QWORD *)(a3 + 88);
          if (v43)
          {
            v44 = *(_DWORD *)(v43 + 24);
            *(_DWORD *)(v43 + 24) = v44 + 2;
            *(_QWORD *)(v3 + 48) = v43 | ((unint64_t)*(unsigned __int16 *)(v3 + 54) << 48);
            *(_QWORD *)(v43 + 56) = v3;
            if (v44)
            {
              *(_DWORD *)(v43 + 24) = v44;
            }
            else if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v43);
              v42 = WebCore::ScriptDisallowedScope::s_count - 1;
              v40 = *(WebCore::TreeScope **)(a3 + 40);
              v39 = *(WebCore::Node **)(v3 + 40);
            }
          }
          else
          {
            *(_QWORD *)(a3 + 80) = v3;
          }
          *(_QWORD *)(a3 + 88) = v3;
          WebCore::ScriptDisallowedScope::s_count = v42;
          if (v39 != v40)
            WebCore::Node::moveTreeToNewScope((WebCore::Node *)v3, v39, v40, v37);
          v45 = *(_WORD *)(v3 + 78) & 0x3FF;
          if ((*(_WORD *)(v3 + 78) & 0x3FF) == 0)
            goto LABEL_36;
          if ((*(_WORD *)(v3 + 28) & 0x80) == 0)
            goto LABEL_906;
          v489 = *(_QWORD *)(v3 + 200);
          if (!v489)
            goto LABEL_36;
          v28 = (uint64_t *)(v489 + 8);
LABEL_906:
          v465 = *v28;
          if (!v465)
            goto LABEL_36;
          while (1)
          {
            WebCore::Node::incrementConnectedSubframeCount(v465, v45);
            if ((*(_WORD *)(v465 + 28) & 0x80) != 0)
            {
              v467 = *(_QWORD *)(v465 + 200);
              if (!v467)
              {
LABEL_36:
                if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 3364) & 1) != 0)
                {
                  WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a3, (uint64_t *)v503);
                  v347 = v503[0];
                  if (v503[0])
                  {
                    if (*((_QWORD *)v503[0] + 10))
                      WebCore::ChildListMutationAccumulator::childAdded(v503[0], (WebCore::Node *)v3);
                    if (*(_DWORD *)v347 == 1)
                    {
                      WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v347, v346);
                      WTF::fastFree(v414, v415);
                    }
                    else
                    {
                      --*(_DWORD *)v347;
                    }
                  }
                }
                v46 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  v385 = *(_QWORD *)(v46 + 528);
                  if (v385)
                  {
                    v386 = *(_QWORD *)(v385 + 8);
                    if (v386)
                    {
                      v387 = *(_QWORD *)(v386 + 24);
                      if (v387)
                      {
                        v388 = *(_QWORD *)(v387 + 8);
                        if (v388)
                          goto LABEL_719;
                      }
                    }
                  }
                  v394 = *(_QWORD *)(v46 + 2632);
                  if (v394)
                  {
                    v395 = *(_QWORD *)(v394 + 8);
                    if (v395)
                    {
                      v396 = *(_QWORD *)(v395 + 528);
                      if (v396)
                      {
                        v397 = *(_QWORD *)(v396 + 8);
                        if (v397)
                        {
                          v398 = *(_QWORD *)(v397 + 24);
                          if (v398)
                          {
                            v388 = *(_QWORD *)(v398 + 8);
                            if (v388)
                            {
LABEL_719:
                              v389 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v388 + 80) + 8) + 40);
                              if (v389)
                                WebCore::InspectorDOMAgent::didInsertDOMNode(v389, (WebCore::Node *)v3);
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v48 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
                *(_DWORD *)(v48 + 24) += 2;
                *(_DWORD *)(v3 + 24) += 2;
                v49 = *(_QWORD *)(a3 + 16);
                v50 = (v49 & 0x18000000000000) == 0;
                if ((v49 & 0x8000000000000) != 0)
                  WebCore::notifyNodeInsertedIntoDocument(a3, v3, v50, (uint64_t)v500);
                else
                  WebCore::notifyNodeInsertedIntoTree(a3, v3, v50);
                if (*(_DWORD *)(v3 + 24) == 2)
                {
                  if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v3);
                }
                else
                {
                  *(_DWORD *)(v3 + 24) -= 2;
                }
                if (*(_DWORD *)(v48 + 24) == 2)
                {
                  if ((*(_WORD *)(v48 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v48);
                }
                else
                {
                  *(_DWORD *)(v48 + 24) -= 2;
                }
                --WebCore::ScriptDisallowedScope::s_count;
                v52 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
                if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
                  && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
                {
                  WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v503, v51);
                  v52 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
                }
                WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v52 - 1;
                *(_WORD *)(a3 + 30) |= 0x200u;
                if (HIDWORD(v500[1]))
                {
                  v285 = v500[0];
                  v286 = 8 * HIDWORD(v500[1]);
                  do
                  {
                    v287 = *(_QWORD *)v285;
                    *(_QWORD *)v285 = 0;
                    if (v287)
                    {
                      if (*(_DWORD *)(v287 + 24) == 2)
                      {
                        if ((*(_WORD *)(v287 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v287);
                      }
                      else
                      {
                        *(_DWORD *)(v287 + 24) -= 2;
                      }
                    }
                    v285 = (WTF::StringImpl *)((char *)v285 + 8);
                    v286 -= 8;
                  }
                  while (v286);
                }
                v53 = v500[0];
                if (&v501 != (__int128 *)v500[0] && v500[0] != 0)
                {
                  v500[0] = 0;
                  LODWORD(v500[1]) = 0;
                  WTF::fastFree(v53, v51);
                }
LABEL_53:
                v55 = *(_WORD *)(v3 + 30);
                v56 = v55 | 2;
                *(_WORD *)(v3 + 232) &= ~0x40u;
                if ((v55 & 0x200) != 0)
                {
                  v267 = 0;
                  *(_WORD *)(v3 + 30) = v56 & 0xFDFF;
                  v502 = 0;
                  *(_OWORD *)v500 = 0u;
                  v501 = 0u;
                  LOBYTE(v500[0]) = 8;
                  v268 = *(_QWORD *)(v3 + 80);
                  if (v268)
                  {
                    while ((*(_WORD *)(v268 + 28) & 8) == 0)
                    {
                      v267 = 0;
                      v268 = *(_QWORD *)(v268 + 56);
                      if (!v268)
                        goto LABEL_441;
                    }
                    v267 = v268;
                  }
LABEL_441:
                  if (v267)
                    v269 = 2;
                  else
                    v269 = 1;
                  BYTE1(v502) = v269;
                  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 376))(v3, v500);
                  v56 = *(_WORD *)(v3 + 30);
                }
                *(_WORD *)(v3 + 30) = v56 & 0xFFFD;
                if ((*(_BYTE *)(v3 + 22) & 8) != 0)
                {
                  v57 = *(uint64_t **)(v3 + 40);
                  v58 = v57[1];
                  if (*(_QWORD *)(v58 + 1944))
                  {
                    if (!*(_BYTE *)(v58 + 3405))
                    {
                      v59 = *(_QWORD *)(v3 + 64);
                      if ((v59 & 0x4000000000000) == 0)
                        goto LABEL_994;
                      v270 = *v57;
                      v271 = (*(_WORD *)(v270 + 28) & 0x80) == 0 || v270 == 0;
                      v272 = v270 + 216;
                      if (v271)
                        v272 = v58 + 1328;
                      if (*(_BYTE *)(*(_QWORD *)v272 + 236))
                      {
LABEL_994:
                        v60 = *(_QWORD *)(v58 + 1272);
                        if ((!v60 || (*(_BYTE *)(v60 + 70) & 4) == 0)
                          && (*(_BYTE *)(v58 + 3362) || !*(_BYTE *)(v58 + 3390) || *(_BYTE *)(v58 + 3391)))
                        {
                          if ((v59 & 0x800000000000000) != 0)
                          {
                            v464 = v59 & 0xFFFFFFFFFFFFLL;
                            if ((v59 & 0xFFFFFFFFFFFFLL) == 0)
                              goto LABEL_902;
                            if ((*(_BYTE *)((v59 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                              v464 = *(_QWORD *)(*(_QWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
                            if ((*(_BYTE *)(v464 + 100) & 0x80) == 0 || *v29)
LABEL_902:
                              WebCore::Element::invalidateStyleForSubtree((WebCore::Element *)v3);
                          }
                          v61 = *(_QWORD *)(v3 + 88);
                          if (v61)
                          {
                            while ((*(_WORD *)(v61 + 28) & 8) == 0)
                            {
                              v61 = *(_QWORD *)(v61 + 48) & 0xFFFFFFFFFFFFLL;
                              if (!v61)
                                goto LABEL_458;
                            }
                            v308 = *(_QWORD *)(v3 + 64);
                            if ((v308 & 0x80000000000000) != 0)
                            {
                              WebCore::Style::invalidateForLastChildState((WTF::MonotonicTime *)v61, 0);
                              v308 = *(_QWORD *)(v3 + 64);
                            }
                            if (v308 >> 62)
                            {
                              v309 = a1;
                              if ((v308 & 0x8000000000000000) != 0)
                              {
                                do
                                {
                                  if ((v308 & 0x4000000000000000) != 0)
                                    WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v61);
                                  ElementChild = WebCore::ContainerNode::firstElementChild((WebCore::ContainerNode *)v61);
                                  if (ElementChild)
                                  {
                                    v463 = ElementChild;
LABEL_891:
                                    WebCore::Element::invalidateStyleForSubtreeInternal((WTF::MonotonicTime *)v463);
                                    while (1)
                                    {
                                      v463 = *(_QWORD *)(v463 + 56);
                                      if (!v463)
                                        break;
                                      if ((*(_WORD *)(v463 + 28) & 8) != 0)
                                        goto LABEL_891;
                                    }
                                  }
                                  v61 = WebCore::Node::previousElementSibling(v61);
                                  a1 = v309;
                                }
                                while (v61);
                              }
                              else if ((v308 & 0x4000000000000000) != 0)
                              {
                                do
                                {
                                  WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v61);
                                  v61 = WebCore::Node::previousElementSibling(v61);
                                }
                                while (v61);
                              }
                              else
                              {
                                do
                                  v61 = WebCore::Node::previousElementSibling(v61);
                                while (v61);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
LABEL_458:
                v273 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 24))(v3 + 112) + 104);
                if (v273
                  && ((v274 = *(_DWORD *)(v273 + 4), (v274 & 1) != 0)
                    ? (v275 = *(uint64_t **)(v273 + 40), LODWORD(v276) = *(_DWORD *)(v273 + 52))
                    : (v275 = (uint64_t *)(v273 + 32), LODWORD(v276) = v274 >> 5),
                      (_DWORD)v276))
                {
                  v276 = v276;
                  while (1)
                  {
                    v277 = *v275;
                    if (*v275 == WebCore::HTMLNames::formAttr
                      || *(_QWORD *)(v277 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
                      && *(_QWORD *)(v277 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
                    {
                      break;
                    }
                    v275 += 2;
                    if (!--v276)
                      goto LABEL_466;
                  }
LABEL_467:
                  v278 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v3 + 112)
                                               + 40)
                                   + 8);
                  v279 = *(WTF::StringImpl **)(v278 + 1352);
                  if (!v279)
                  {
                    v279 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
                    *(_QWORD *)v279 = 0;
                    *((_QWORD *)v279 + 1) = 0;
                    v378 = *(WebCore::FormController **)(v278 + 1352);
                    *(_QWORD *)(v278 + 1352) = v279;
                    if (v378)
                    {
                      WebCore::FormController::~FormController(v378, v377);
                      WTF::fastFree(v379, v380);
                      v279 = *(WTF::StringImpl **)(v278 + 1352);
                    }
                  }
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 304))(v3 + 112)
                    && (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 24))(v3 + 112) + 22) & 8) != 0
                    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v31 + 296))(v3 + 112))
                  {
                    WebCore::FormController::takeStateForFormElement(v279, (const WebCore::ValidatedFormListedElement *)(v3 + 112), v500);
                    if (HIDWORD(v500[1]))
                    {
                      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v31 + 320))(v3 + 112, v500);
                      if (HIDWORD(v500[1]))
                      {
                        v459 = (WTF::StringImpl **)v500[0];
                        v460 = 8 * HIDWORD(v500[1]);
                        do
                        {
                          v461 = *v459;
                          *v459 = 0;
                          if (v461)
                          {
                            if (*(_DWORD *)v461 == 2)
                              WTF::StringImpl::destroy(v461, v293);
                            else
                              *(_DWORD *)v461 -= 2;
                          }
                          ++v459;
                          v460 -= 8;
                        }
                        while (v460);
                      }
                    }
                    v294 = v500[0];
                    if (v500[0])
                    {
                      v500[0] = 0;
                      LODWORD(v500[1]) = 0;
                      WTF::fastFree(v294, v293);
                    }
                  }
                }
                else
                {
LABEL_466:
                  if (!*(_QWORD *)v32 || !*(_QWORD *)(*(_QWORD *)v32 + 8))
                    goto LABEL_467;
                }
                if ((*(_WORD *)(v3 + 232) & 0x20) != 0)
                  goto LABEL_418;
                v280 = *(_QWORD *)(v3 + 104);
                if (v280)
                {
                  v281 = *(_DWORD *)(v280 + 4);
                  if ((v281 & 1) != 0)
                  {
                    v282 = *(uint64_t **)(v280 + 40);
                    LODWORD(v283) = *(_DWORD *)(v280 + 52);
                  }
                  else
                  {
                    v282 = (uint64_t *)(v280 + 32);
                    LODWORD(v283) = v281 >> 5;
                  }
                  if ((_DWORD)v283)
                  {
                    v283 = v283;
                    while (1)
                    {
                      v284 = *v282;
                      if (*v282 == WebCore::HTMLNames::checkedAttr
                        || *(_QWORD *)(v284 + 24) == *(_QWORD *)(WebCore::HTMLNames::checkedAttr + 24)
                        && *(_QWORD *)(v284 + 32) == *(_QWORD *)(WebCore::HTMLNames::checkedAttr + 32))
                      {
                        break;
                      }
                      v282 += 2;
                      if (!--v283)
                        goto LABEL_479;
                    }
                    WebCore::HTMLInputElement::setChecked((unsigned __int8 *)v3, 1);
                  }
                }
LABEL_479:
                *(_WORD *)(v3 + 230) &= ~2u;
                goto LABEL_418;
              }
              v466 = (uint64_t *)(v467 + 8);
            }
            else
            {
              v466 = (uint64_t *)(v465 + 32);
            }
            v465 = *v466;
            if (!*v466)
              goto LABEL_36;
          }
        case 67:
          v17 = *(_QWORD *)a2;
          v110 = bmalloc::api::isoAllocate();
          v3 = v110;
          *(_OWORD *)(v110 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v110 + 24) = 0x101C00000002;
          *(_QWORD *)(v110 + 32) = 0;
          i = v110 + 32;
          *(_QWORD *)(v110 + 40) = v17 + 96;
          *(_OWORD *)(v110 + 48) = 0u;
          *(_OWORD *)(v110 + 64) = 0u;
          ++*(_DWORD *)(v17 + 3324);
          *(_QWORD *)(v110 + 80) = 0;
          v493 = (uint64_t *)(v110 + 80);
          *(_QWORD *)(v110 + 88) = 0;
          v111 = WebCore::HTMLNames::labelTag;
          if (WebCore::HTMLNames::labelTag)
            ++*(_DWORD *)WebCore::HTMLNames::labelTag;
          *(_QWORD *)(v110 + 96) = v111;
          *(_QWORD *)(v110 + 104) = 0;
          *(_QWORD *)v110 = off_1E33C0ED0;
          *(_BYTE *)(v110 + 112) = 0;
          WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v110);
          if (*(_BYTE *)(a2 + 32))
            goto LABEL_418;
          v495 = a1;
          v114 = *(_QWORD *)(a3 + 16);
          a1 = (uint64_t)&WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          if ((v114 & 0x8000000000000) != 0)
          {
            WebCore::ContainerNode::parserAppendChild(a3, (WebCore::Node *)v3, v112, v113);
            goto LABEL_169;
          }
          v115 = *(WebCore::Node **)(v3 + 40);
          v116 = *(WebCore::TreeScope **)(a3 + 40);
          if (*((_QWORD *)v115 + 1) != *((_QWORD *)v116 + 1))
          {
            __break(0xC471u);
            JUMPOUT(0x1944D71E0);
          }
          v17 = (uint64_t)&v501;
          v500[0] = (WTF::StringImpl *)&v501;
          v500[1] = (WTF::StringImpl *)11;
          ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          v117 = WebCore::ScriptDisallowedScope::s_count;
          v118 = WebCore::ScriptDisallowedScope::s_count + 1;
          if ((v114 & 0x10000000000000) != 0 || (*(_WORD *)(a3 + 28) & 0x80) != 0)
          {
            v390 = *(_QWORD *)v116;
            if ((*(_WORD *)(*(_QWORD *)v116 + 28) & 0x80) == 0)
              v390 = 0;
            v391 = *(_QWORD *)(v390 + 224);
            if (v391)
            {
              ++*(_DWORD *)(v391 + 12);
              *(_BYTE *)(v391 + 9) = 0;
            }
          }
          WebCore::ScriptDisallowedScope::s_count = v117 + 2;
          *(_QWORD *)(v3 + 32) = a3;
          *(_DWORD *)(v3 + 24) |= 1u;
          v119 = *(_QWORD *)(a3 + 88);
          if (v119)
          {
            v120 = *(_DWORD *)(v119 + 24);
            *(_DWORD *)(v119 + 24) = v120 + 2;
            *(_QWORD *)(v3 + 48) = v119 | ((unint64_t)*(unsigned __int16 *)(v3 + 54) << 48);
            *(_QWORD *)(v119 + 56) = v3;
            if (v120)
            {
              *(_DWORD *)(v119 + 24) = v120;
            }
            else if ((*(_WORD *)(v119 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v119);
              v118 = WebCore::ScriptDisallowedScope::s_count - 1;
              v116 = *(WebCore::TreeScope **)(a3 + 40);
              v115 = *(WebCore::Node **)(v3 + 40);
            }
          }
          else
          {
            *(_QWORD *)(a3 + 80) = v3;
          }
          *(_QWORD *)(a3 + 88) = v3;
          WebCore::ScriptDisallowedScope::s_count = v118;
          if (v115 != v116)
            WebCore::Node::moveTreeToNewScope((WebCore::Node *)v3, v115, v116, v113);
          v121 = *(_WORD *)(v3 + 78) & 0x3FF;
          if ((*(_WORD *)(v3 + 78) & 0x3FF) == 0)
            goto LABEL_152;
          if ((*(_WORD *)(v3 + 28) & 0x80) == 0)
            goto LABEL_947;
          v491 = *(_QWORD *)(v3 + 200);
          if (!v491)
            goto LABEL_152;
          i = v491 + 8;
LABEL_947:
          i = *(_QWORD *)i;
          if (!i)
            goto LABEL_152;
          while (1)
          {
            WebCore::Node::incrementConnectedSubframeCount(i, v121);
            if ((*(_WORD *)(i + 28) & 0x80) != 0)
              break;
            v482 = (uint64_t *)(i + 32);
LABEL_950:
            i = *v482;
            if (!*v482)
              goto LABEL_152;
          }
          v483 = *(_QWORD *)(i + 200);
          if (v483)
          {
            v482 = (uint64_t *)(v483 + 8);
            goto LABEL_950;
          }
LABEL_152:
          if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 3364) & 1) != 0)
          {
            WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a3, (uint64_t *)v503);
            v365 = v503[0];
            if (v503[0])
            {
              if (*((_QWORD *)v503[0] + 10))
                WebCore::ChildListMutationAccumulator::childAdded(v503[0], (WebCore::Node *)v3);
              if (*(_DWORD *)v365 == 1)
              {
                WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v365, v364);
                WTF::fastFree(v433, v434);
              }
              else
              {
                --*(_DWORD *)v365;
              }
            }
          }
          v122 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v404 = *(_QWORD *)(v122 + 528);
            if (v404)
            {
              v405 = *(_QWORD *)(v404 + 8);
              if (v405)
              {
                v406 = *(_QWORD *)(v405 + 24);
                if (v406)
                {
                  v407 = *(_QWORD *)(v406 + 8);
                  if (v407)
                    goto LABEL_752;
                }
              }
            }
            v421 = *(_QWORD *)(v122 + 2632);
            if (v421)
            {
              v422 = *(_QWORD *)(v421 + 8);
              if (v422)
              {
                v423 = *(_QWORD *)(v422 + 528);
                if (v423)
                {
                  v424 = *(_QWORD *)(v423 + 8);
                  if (v424)
                  {
                    v425 = *(_QWORD *)(v424 + 24);
                    if (v425)
                    {
                      v407 = *(_QWORD *)(v425 + 8);
                      if (v407)
                      {
LABEL_752:
                        v408 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v407 + 80) + 8) + 40);
                        if (v408)
                          WebCore::InspectorDOMAgent::didInsertDOMNode(v408, (WebCore::Node *)v3);
                      }
                    }
                  }
                }
              }
            }
          }
          v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
          *(_DWORD *)(v4 + 24) += 2;
          *(_DWORD *)(v3 + 24) += 2;
          v124 = *(_QWORD *)(a3 + 16);
          v125 = (v124 & 0x18000000000000) == 0;
          if ((v124 & 0x8000000000000) != 0)
            WebCore::notifyNodeInsertedIntoDocument(a3, v3, v125, (uint64_t)v500);
          else
            WebCore::notifyNodeInsertedIntoTree(a3, v3, v125);
          if (*(_DWORD *)(v3 + 24) == 2)
          {
            if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v3);
          }
          else
          {
            *(_DWORD *)(v3 + 24) -= 2;
          }
          if (*(_DWORD *)(v4 + 24) == 2)
          {
            if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v4);
          }
          else
          {
            *(_DWORD *)(v4 + 24) -= 2;
          }
          --WebCore::ScriptDisallowedScope::s_count;
          v127 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
            && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
          {
            WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v503, v126);
            v127 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
          }
          WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v127 - 1;
          *(_WORD *)(a3 + 30) |= 0x200u;
          if (HIDWORD(v500[1]))
          {
            v290 = v500[0];
            v4 = 8 * HIDWORD(v500[1]);
            do
            {
              v291 = *(_QWORD *)v290;
              *(_QWORD *)v290 = 0;
              if (v291)
              {
                if (*(_DWORD *)(v291 + 24) == 2)
                {
                  if ((*(_WORD *)(v291 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v291);
                }
                else
                {
                  *(_DWORD *)(v291 + 24) -= 2;
                }
              }
              v290 = (WTF::StringImpl *)((char *)v290 + 8);
              v4 -= 8;
            }
            while (v4);
          }
          v128 = v500[0];
          if (&v501 != (__int128 *)v500[0] && v500[0] != 0)
          {
            v500[0] = 0;
            LODWORD(v500[1]) = 0;
            WTF::fastFree(v128, v126);
          }
LABEL_169:
          *(_WORD *)(v3 + 30) |= 2u;
          v7 = (int *)&v501;
          v497 = xmmword_1969F1C50;
          a3 = (uint64_t)&bmalloc::api::IsoHeapBase<WebCore::Text>::provideHeap(void)::heap;
          v6 = 3;
          while (1)
          {
            v130 = *(_QWORD *)(a2 + 24);
            if ((v130 & 0x8000000000000000) != 0)
              goto LABEL_939;
            v131 = *(int8x16_t **)(a2 + 16);
            v132 = (int8x16_t *)((char *)v131 + v130);
            v133 = v131;
            if (v130 < 0x10)
            {
              v140 = *(__int8 **)(a2 + 16);
              if (v130)
              {
                do
                {
                  v167 = *v140;
                  v18 = v167 > 0x3C;
                  v168 = (1 << v167) & 0x1000004000002001;
                  if (!v18 && v168 != 0)
                    goto LABEL_176;
                  ++v140;
                }
                while (--v130);
              }
            }
            else
            {
              do
              {
                v134.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v134.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                v135 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(*v133, v134));
                v136 = vceqq_s8(v135, *v133);
                v135.i8[0] = vmaxvq_u8((uint8x16_t)v136);
                if (v135.i32[0])
                  goto LABEL_175;
                v137 = v133 + 1;
                v138 = (int8x16_t *)((char *)v133++ + 31);
              }
              while (v138 < v132);
              if (v137 < v132)
              {
                v133 = v132 - 1;
                v374 = v132[-1];
                v375.i64[0] = 0xF0F0F0F0F0F0F0FLL;
                v375.i64[1] = 0xF0F0F0F0F0F0F0FLL;
                v376 = vqtbl1q_s8((int8x16_t)xmmword_1969F1C40, vandq_s8(v374, v375));
                v136 = vceqq_s8(v376, v374);
                v376.i8[0] = vmaxvq_u8((uint8x16_t)v136);
                v140 = (__int8 *)v132;
                if (v376.i32[0])
                {
LABEL_175:
                  v139 = (uint8x16_t)vornq_s8((int8x16_t)xmmword_1969F1C50, v136);
                  v139.i8[0] = vminvq_u8(v139);
                  v140 = &v133->i8[v139.u32[0]];
                  goto LABEL_176;
                }
                goto LABEL_176;
              }
            }
            v140 = (__int8 *)v132;
LABEL_176:
            v141 = (char *)v132 - v140;
            if ((char *)v132 - v140 < 0)
              goto LABEL_939;
            *(_QWORD *)(a2 + 16) = v140;
            *(_QWORD *)(a2 + 24) = v141;
            if (v140 == (__int8 *)v132)
              goto LABEL_181;
            v142 = *v140;
            if (!*v140)
            {
              if (!*(_BYTE *)(a2 + 32))
              {
                v316 = 7;
LABEL_621:
                *(_BYTE *)(a2 + 32) = v316;
              }
LABEL_183:
              v499 = 0;
              goto LABEL_184;
            }
            if (v142 == 13 || v142 == 38)
            {
              if (&v140[v141] - (__int8 *)v131 < 0)
                goto LABEL_939;
              *(_QWORD *)(a2 + 16) = v131;
              *(_QWORD *)(a2 + 24) = &v140[v141] - (__int8 *)v131;
              WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)&v499, a2);
            }
            else
            {
LABEL_181:
              if (((_DWORD)v140 - (_DWORD)v131) >= 0x10000)
              {
                if (!*(_BYTE *)(a2 + 32))
                {
                  v316 = 25;
                  goto LABEL_621;
                }
                goto LABEL_183;
              }
              if ((_DWORD)v140 == (_DWORD)v131)
                goto LABEL_183;
              WTF::String::String();
            }
LABEL_184:
            if (*(_BYTE *)(a2 + 32))
              goto LABEL_221;
            if (v499)
            {
              if ((*(_BYTE *)(v3 + 22) & 8) != 0)
              {
                WebCore::Text::create(*(_QWORD *)a2, (_DWORD **)&v499, (uint64_t *)v500);
                WebCore::ContainerNode::parserAppendChild(v3, v500[0], v441, v442);
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v500);
                goto LABEL_218;
              }
              v143 = *(_QWORD *)a2;
              v144 = bmalloc::api::isoAllocate();
              v4 = v144;
              *(_OWORD *)(v144 + 8) = xmmword_1968BC9D0;
              *(_QWORD *)(v144 + 24) = 0x300300000002;
              *(_QWORD *)(v144 + 32) = 0;
              v146 = (uint64_t *)(v144 + 32);
              v147 = (WebCore::Node *)(v143 + 96);
              *(_QWORD *)(v144 + 40) = v143 + 96;
              *(_OWORD *)(v144 + 48) = 0u;
              *(_OWORD *)(v144 + 64) = 0u;
              ++*(_DWORD *)(v143 + 3324);
              v148 = v499;
              if (v499 || (v148 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738]) != 0)
                *(_DWORD *)v148 += 2;
              *(_QWORD *)(v144 + 80) = v148;
              *(_QWORD *)v144 = off_1E33A8078;
              v149 = *(WebCore::TreeScope **)(v3 + 40);
              if (*(_QWORD *)(v143 + 104) != *((_QWORD *)v149 + 1))
              {
                __break(0xC471u);
                JUMPOUT(0x1944D69CCLL);
              }
              v500[0] = (WTF::StringImpl *)&v501;
              v500[1] = (WTF::StringImpl *)11;
              ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              if ((*(_BYTE *)(v3 + 28) & 0x80) != 0 || (*(_BYTE *)(v3 + 22) & 0x10) != 0)
              {
                v310 = *(_QWORD *)v149;
                if ((*(_WORD *)(*(_QWORD *)v149 + 28) & 0x80) == 0)
                  v310 = 0;
                v311 = *(_QWORD *)(v310 + 224);
                if (v311)
                {
                  ++*(_DWORD *)(v311 + 12);
                  *(_BYTE *)(v311 + 9) = 0;
                }
              }
              v150 = WebCore::ScriptDisallowedScope::s_count + 1;
              WebCore::ScriptDisallowedScope::s_count += 2;
              *(_QWORD *)(v144 + 32) = v3;
              *(_DWORD *)(v144 + 24) = 3;
              v151 = *(_QWORD *)(v3 + 88);
              if (v151)
              {
                v152 = *(_DWORD *)(v151 + 24);
                *(_DWORD *)(v151 + 24) = v152 + 2;
                *(_QWORD *)(v4 + 48) = v151;
                *(_QWORD *)(v151 + 56) = v4;
                if (v152)
                {
                  *(_DWORD *)(v151 + 24) = v152;
                }
                else if ((*(_WORD *)(v151 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v151);
                  v150 = WebCore::ScriptDisallowedScope::s_count - 1;
                  v149 = *(WebCore::TreeScope **)(v3 + 40);
                  v147 = *(WebCore::Node **)(v4 + 40);
                }
              }
              else
              {
                *v493 = v4;
              }
              *(_QWORD *)(v3 + 88) = v4;
              WebCore::ScriptDisallowedScope::s_count = v150;
              if (v147 != v149)
                WebCore::Node::moveTreeToNewScope((WebCore::Node *)v4, v147, v149, v145);
              v153 = *(_WORD *)(v4 + 78) & 0x3FF;
              if ((*(_WORD *)(v4 + 78) & 0x3FF) == 0)
                goto LABEL_199;
              if ((*(_WORD *)(v4 + 28) & 0x80) != 0)
              {
                v486 = *(_QWORD *)(v4 + 200);
                if (v486)
                {
                  v146 = (uint64_t *)(v486 + 8);
                  goto LABEL_832;
                }
              }
              else
              {
LABEL_832:
                v445 = *v146;
                if (v445)
                {
                  do
                  {
                    WebCore::Node::incrementConnectedSubframeCount(v445, v153);
                    if ((*(_WORD *)(v445 + 28) & 0x80) != 0)
                    {
                      v447 = *(_QWORD *)(v445 + 200);
                      if (!v447)
                        break;
                      v446 = (uint64_t *)(v447 + 8);
                    }
                    else
                    {
                      v446 = (uint64_t *)(v445 + 32);
                    }
                    v445 = *v446;
                  }
                  while (*v446);
                }
              }
LABEL_199:
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 3364) & 1) != 0)
              {
                WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)v3, (uint64_t *)v503);
                v171 = v503[0];
                if (v503[0])
                {
                  if (*((_QWORD *)v503[0] + 10))
                    WebCore::ChildListMutationAccumulator::childAdded(v503[0], (WebCore::Node *)v4);
                  if (*(_DWORD *)v171 == 1)
                  {
                    WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v171, v170);
                    WTF::fastFree(v358, v359);
                  }
                  else
                  {
                    --*(_DWORD *)v171;
                  }
                }
              }
              v154 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                v317 = *(_QWORD *)(v154 + 528);
                if (v317)
                {
                  v318 = *(_QWORD *)(v317 + 8);
                  if (v318)
                  {
                    v319 = *(_QWORD *)(v318 + 24);
                    if (v319)
                    {
                      v320 = *(_QWORD *)(v319 + 8);
                      if (v320)
                        goto LABEL_607;
                    }
                  }
                }
                v348 = *(_QWORD *)(v154 + 2632);
                if (v348)
                {
                  v349 = *(_QWORD *)(v348 + 8);
                  if (v349)
                  {
                    v350 = *(_QWORD *)(v349 + 528);
                    if (v350)
                    {
                      v351 = *(_QWORD *)(v350 + 8);
                      if (v351)
                      {
                        v352 = *(_QWORD *)(v351 + 24);
                        if (v352)
                        {
                          v320 = *(_QWORD *)(v352 + 8);
                          if (v320)
                          {
LABEL_607:
                            v321 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v320 + 80) + 8) + 40);
                            if (v321)
                              WebCore::InspectorDOMAgent::didInsertDOMNode(v321, (WebCore::Node *)v4);
                          }
                        }
                      }
                    }
                  }
                }
              }
              i = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
              *(_DWORD *)(i + 24) += 2;
              *(_DWORD *)(v4 + 24) += 2;
              v156 = *(_QWORD *)(v3 + 16);
              v157 = (v156 & 0x18000000000000) == 0;
              if ((v156 & 0x8000000000000) != 0)
                WebCore::notifyNodeInsertedIntoDocument(v3, v4, v157, (uint64_t)v500);
              else
                WebCore::notifyNodeInsertedIntoTree(v3, v4, v157);
              if (*(_DWORD *)(v4 + 24) == 2)
              {
                if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v4);
              }
              else
              {
                *(_DWORD *)(v4 + 24) -= 2;
              }
              if (*(_DWORD *)(i + 24) == 2)
              {
                if ((*(_WORD *)(i + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)i);
              }
              else
              {
                *(_DWORD *)(i + 24) -= 2;
              }
              --WebCore::ScriptDisallowedScope::s_count;
              v158 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
                && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
              {
                WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v503, v131);
                v158 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
              }
              WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v158 - 1;
              *(_WORD *)(v3 + 30) |= 0x200u;
              if (HIDWORD(v500[1]))
              {
                v165 = v500[0];
                i = 8 * HIDWORD(v500[1]);
                do
                {
                  v166 = *(_QWORD *)v165;
                  *(_QWORD *)v165 = 0;
                  if (v166)
                  {
                    if (*(_DWORD *)(v166 + 24) == 2)
                    {
                      if ((*(_WORD *)(v166 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v166);
                    }
                    else
                    {
                      *(_DWORD *)(v166 + 24) -= 2;
                    }
                  }
                  v165 = (WTF::StringImpl *)((char *)v165 + 8);
                  i -= 8;
                }
                while (i);
              }
              v159 = v500[0];
              if (&v501 != (__int128 *)v500[0] && v500[0] != 0)
              {
                v500[0] = 0;
                LODWORD(v500[1]) = 0;
                WTF::fastFree(v159, v131);
              }
              if (*(_DWORD *)(v4 + 24) == 2)
              {
                if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v4);
              }
              else
              {
                *(_DWORD *)(v4 + 24) -= 2;
              }
            }
LABEL_218:
            v161 = *(_QWORD *)(a2 + 24);
            if (v161)
            {
              v162 = v161 - 1;
              v20 = v161 == 1;
              v163 = (_BYTE *)(*(_QWORD *)(a2 + 16) + 1);
              *(_QWORD *)(a2 + 16) = v163;
              *(_QWORD *)(a2 + 24) = v162;
              if (v20 || *v163 != 47)
              {
                v438 = *(_DWORD *)(a2 + 36) + 1;
                *(_DWORD *)(a2 + 36) = v438;
                if (v438 != 512)
                {
                  WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(v500, a2, (WebCore::ContainerNode *)v3);
                  --*(_DWORD *)(a2 + 36);
                  v17 = *(_BYTE *)(a2 + 32) != 0;
                  if (v500[0])
                  {
                    if (*((_DWORD *)v500[0] + 6) == 2)
                    {
                      if ((*((_WORD *)v500[0] + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v500[0]);
                    }
                    else
                    {
                      *((_DWORD *)v500[0] + 6) -= 2;
                    }
                  }
                  goto LABEL_222;
                }
                if (!*(_BYTE *)(a2 + 32))
                  *(_BYTE *)(a2 + 32) = 24;
              }
            }
LABEL_221:
            v17 = 1;
LABEL_222:
            v164 = v499;
            v499 = 0;
            if (v164)
            {
              if (*(_DWORD *)v164 == 2)
                WTF::StringImpl::destroy(v164, (WTF::StringImpl *)v131);
              else
                *(_DWORD *)v164 -= 2;
            }
            if ((_DWORD)v17)
            {
              if (*(_BYTE *)(a2 + 32))
              {
                v256 = *(_DWORD *)(v3 + 24);
                *(_DWORD *)(v3 + 24) = v256 + 2;
                a1 = v495;
              }
              else
              {
                v257 = *(_QWORD *)(a2 + 24);
                a1 = v495;
                if (v257)
                {
                  v258 = *(_BYTE **)(a2 + 16);
                  v259 = v258 + 1;
                  *(_QWORD *)(a2 + 16) = v258 + 1;
                  *(_QWORD *)(a2 + 24) = v257 - 1;
                  if (v257 < 6
                    || (*v259 == 1700946284 ? (v260 = v258[5] == 108) : (v260 = 0),
                        !v260
                     && ((*(_BYTE *)v259 & 0xDF) != 0x4C
                      || (v258[2] & 0xDF) != 0x41
                      || (v258[3] & 0xDF) != 0x42
                      || (v258[4] & 0xDF) != 0x45
                      || (v258[5] & 0xDF) != 0x4C)))
                  {
                    v256 = *(_DWORD *)(v3 + 24);
                    *(_DWORD *)(v3 + 24) = v256 + 2;
                    v266 = 21;
                    goto LABEL_436;
                  }
                  v261 = v258 + 6;
                  *(_QWORD *)(a2 + 16) = v258 + 6;
                  *(_QWORD *)(a2 + 24) = v257 - 6;
                  if (v257 == 6)
                    goto LABEL_435;
                  v262 = v258 + 7;
                  v263 = v257 - 7;
                  while (1)
                  {
                    v264 = *v261;
                    if (v264 > 0x20 || ((1 << v264) & 0x100003600) == 0)
                      break;
                    ++v261;
                    *(_QWORD *)(a2 + 16) = v262;
                    *(_QWORD *)(a2 + 24) = v263;
                    ++v262;
                    if (--v263 == -1)
                      goto LABEL_435;
                  }
                  *(_QWORD *)(a2 + 16) = v262;
                  *(_QWORD *)(a2 + 24) = v263;
                  if (v264 != 62)
                  {
LABEL_435:
                    v256 = *(_DWORD *)(v3 + 24);
                    *(_DWORD *)(v3 + 24) = v256 + 2;
                    v266 = 20;
                    goto LABEL_436;
                  }
LABEL_499:
                  WebCore::Element::finishParsingChildren((WTF::MonotonicTime *)v3);
                  goto LABEL_418;
                }
                v256 = *(_DWORD *)(v3 + 24);
                *(_DWORD *)(v3 + 24) = v256 + 2;
                v266 = 19;
LABEL_436:
                *(_BYTE *)(a2 + 32) = v266;
              }
              if (v256)
                goto LABEL_417;
              goto LABEL_438;
            }
          }
        case 69:
          if (*(_BYTE *)(a2 + 34))
            goto LABEL_936;
          *(_BYTE *)(a2 + 34) = 1;
          WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Li>(v500, a2, (WebCore::ContainerNode *)a3);
          *(_BYTE *)(a2 + 34) = 0;
          v456 = v500[0];
          v500[0] = 0;
          *(_QWORD *)a1 = v456;
          WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(v500);
          return;
        case 86:
          WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ol>((uint64_t *)v500, a2, (WebCore::ContainerNode *)a3);
          v455 = v500[0];
          v500[0] = 0;
          *(_QWORD *)a1 = v455;
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v500);
          return;
        case 90:
          WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::P>((uint64_t *)v500, a2, (WebCore::ContainerNode *)a3);
          v454 = v500[0];
          v500[0] = 0;
          *(_QWORD *)a1 = v454;
          WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(v500);
          return;
        case 106:
          WebCore::HTMLFastPathParser<unsigned char>::parseElementAfterTagName<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Select>((uint64_t *)v500, a2, (WebCore::ContainerNode *)a3);
          v453 = v500[0];
          v500[0] = 0;
          *(_QWORD *)a1 = v453;
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v500);
          return;
        case 110:
          v340 = *(_QWORD *)a2;
          v341 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v341 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v341 + 24) = 0x101C00000002;
          *(_QWORD *)(v341 + 32) = 0;
          *(_QWORD *)(v341 + 40) = v340 + 96;
          *(_OWORD *)(v341 + 48) = 0u;
          *(_OWORD *)(v341 + 64) = 0u;
          ++*(_DWORD *)(v340 + 3324);
          *(_QWORD *)(v341 + 80) = 0;
          *(_QWORD *)(v341 + 88) = 0;
          v342 = WebCore::HTMLNames::spanTag;
          if (WebCore::HTMLNames::spanTag)
            ++*(_DWORD *)WebCore::HTMLNames::spanTag;
          *(_QWORD *)(v341 + 96) = v342;
          *(_QWORD *)(v341 + 104) = 0;
          *(_QWORD *)v341 = off_1E33CBA30;
          v500[0] = (WTF::StringImpl *)v341;
          WebCore::HTMLFastPathParser<unsigned char>::parseContainerElement<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Span>(v503, a2, v500, (WebCore::ContainerNode *)a3);
          goto LABEL_645;
        case 112:
          v343 = *(_QWORD *)a2;
          v344 = bmalloc::api::isoAllocate();
          *(_OWORD *)(v344 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v344 + 24) = 0x101C00000002;
          *(_QWORD *)(v344 + 32) = 0;
          *(_QWORD *)(v344 + 40) = v343 + 96;
          *(_OWORD *)(v344 + 48) = 0u;
          *(_OWORD *)(v344 + 64) = 0u;
          ++*(_DWORD *)(v343 + 3324);
          *(_QWORD *)(v344 + 80) = 0;
          *(_QWORD *)(v344 + 88) = 0;
          v345 = WebCore::HTMLNames::strongTag;
          if (WebCore::HTMLNames::strongTag)
            ++*(_DWORD *)WebCore::HTMLNames::strongTag;
          *(_QWORD *)(v344 + 96) = v345;
          *(_QWORD *)(v344 + 104) = 0;
          *(_QWORD *)v344 = off_1E33BC680;
          v500[0] = (WTF::StringImpl *)v344;
          WebCore::HTMLFastPathParser<unsigned char>::parseContainerElement<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Strong>(v503, a2, v500, (WebCore::ContainerNode *)a3);
LABEL_645:
          if (v500[0])
          {
            if (*((_DWORD *)v500[0] + 6) == 2)
            {
              if ((*((_WORD *)v500[0] + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v500[0]);
            }
            else
            {
              *((_DWORD *)v500[0] + 6) -= 2;
            }
          }
          *(WebCore::Node **)a1 = v503[0];
          return;
        case 129:
          v327 = *(_QWORD *)a2;
          v328 = bmalloc::api::isoAllocate();
          v3 = v328;
          *(_OWORD *)(v328 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v328 + 24) = 0x101C00000002;
          *(_QWORD *)(v328 + 32) = 0;
          *(_QWORD *)(v328 + 40) = v327 + 96;
          *(_OWORD *)(v328 + 48) = 0u;
          *(_OWORD *)(v328 + 64) = 0u;
          ++*(_DWORD *)(v327 + 3324);
          *(_QWORD *)(v328 + 80) = 0;
          *(_QWORD *)(v328 + 88) = 0;
          v329 = WebCore::HTMLNames::ulTag;
          if (WebCore::HTMLNames::ulTag)
            ++*(_DWORD *)WebCore::HTMLNames::ulTag;
          *(_QWORD *)(v328 + 96) = v329;
          *(_QWORD *)(v328 + 104) = 0;
          *(_QWORD *)v328 = off_1E33D09E0;
          WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v328);
          if (*(_BYTE *)(a2 + 32))
            goto LABEL_418;
          if ((*(_BYTE *)(a3 + 22) & 8) != 0)
            WebCore::ContainerNode::parserAppendChild(a3, (WebCore::Node *)v3, v330, v331);
          else
            WebCore::ContainerNode::parserAppendChildIntoIsolatedTree((WebCore::ContainerNode *)a3, (WebCore::Node *)v3, (uint64_t)v330, v331);
          *(_WORD *)(v3 + 30) |= 2u;
          WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::Ul>(a2, (WebCore::ContainerNode *)v3);
          if (*(_BYTE *)(a2 + 32))
          {
            *(_DWORD *)(v3 + 24) += 2;
          }
          else
          {
            v332 = *(_QWORD *)(a2 + 24);
            if (v332)
            {
              v333 = *(_QWORD *)(a2 + 16);
              v334 = (_WORD *)(v333 + 1);
              *(_QWORD *)(a2 + 16) = v333 + 1;
              *(_QWORD *)(a2 + 24) = v332 - 1;
              if (v332 < 3
                || *v334 != 27765 && ((*(_BYTE *)v334 & 0xDF) != 0x55 || (*(_BYTE *)(v333 + 2) & 0xDF) != 0x4C))
              {
                *(_DWORD *)(v3 + 24) += 2;
                *(_BYTE *)(a2 + 32) = 21;
                v503[0] = 0;
                WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(v503);
LABEL_547:
                v254 = *(_DWORD *)(v3 + 24);
                goto LABEL_416;
              }
              v335 = (unsigned __int8 *)(v333 + 3);
              *(_QWORD *)(a2 + 16) = v333 + 3;
              *(_QWORD *)(a2 + 24) = v332 - 3;
              if (v332 == 3)
                goto LABEL_546;
              v336 = v333 + 4;
              v337 = v332 - 4;
              while (1)
              {
                v338 = *v335;
                if (v338 > 0x20 || ((1 << v338) & 0x100003600) == 0)
                  break;
                ++v335;
                *(_QWORD *)(a2 + 16) = v336;
                *(_QWORD *)(a2 + 24) = v337;
                ++v336;
                if (--v337 == -1)
                  goto LABEL_546;
              }
              *(_QWORD *)(a2 + 16) = v336;
              *(_QWORD *)(a2 + 24) = v337;
              if (v338 == 62)
                goto LABEL_499;
LABEL_546:
              *(_DWORD *)(v3 + 24) += 2;
              *(_BYTE *)(a2 + 32) = 20;
              goto LABEL_547;
            }
            *(_DWORD *)(v3 + 24) += 2;
            *(_BYTE *)(a2 + 32) = 19;
          }
          v500[0] = 0;
          WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(v500);
          goto LABEL_547;
        default:
          if (HTMLNode != 245 || *(_BYTE *)(a2 + 33))
            goto LABEL_936;
          v295 = *(_QWORD *)a2;
          v296 = bmalloc::api::isoAllocate();
          v3 = v296;
          *(_OWORD *)(v296 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v296 + 24) = 0x101C00000002;
          *(_QWORD *)(v296 + 32) = 0;
          *(_QWORD *)(v296 + 40) = v295 + 96;
          *(_OWORD *)(v296 + 48) = 0u;
          *(_OWORD *)(v296 + 64) = 0u;
          ++*(_DWORD *)(v295 + 3324);
          *(_QWORD *)(v296 + 80) = 0;
          *(_QWORD *)(v296 + 88) = 0;
          v297 = WebCore::HTMLNames::aTag;
          if (WebCore::HTMLNames::aTag)
            ++*(_DWORD *)WebCore::HTMLNames::aTag;
          *(_QWORD *)(v296 + 96) = v297;
          *(_QWORD *)(v296 + 104) = 0;
          *(_QWORD *)v296 = off_1E33B3458;
          *(_QWORD *)(v296 + 112) = &unk_1E33B3958;
          *(_WORD *)(v296 + 120) = 0;
          *(_BYTE *)(v296 + 122) = 0;
          *(_DWORD *)(v296 + 124) = -1;
          *(_QWORD *)(v296 + 128) = 0;
          WebCore::HTMLFastPathParser<unsigned char>::parseAttributes(a2, (WTF::StringImpl *)v296);
          if (*(_BYTE *)(a2 + 32))
            goto LABEL_418;
          if ((*(_BYTE *)(a3 + 22) & 8) != 0)
            WebCore::ContainerNode::parserAppendChild(a3, (WebCore::Node *)v3, v298, v299);
          else
            WebCore::ContainerNode::parserAppendChildIntoIsolatedTree((WebCore::ContainerNode *)a3, (WebCore::Node *)v3, (uint64_t)v298, v299);
          *(_WORD *)(v3 + 30) |= 2u;
          WebCore::HTMLFastPathParser<unsigned char>::parseChildren<WebCore::HTMLFastPathParser<unsigned char>::TagInfo::A>(a2, v3);
          if (*(_BYTE *)(a2 + 32))
          {
            *(_DWORD *)(v3 + 24) += 2;
          }
          else
          {
            v300 = *(_QWORD *)(a2 + 24);
            if (v300)
            {
              v301 = *(_QWORD *)(a2 + 16);
              *(_QWORD *)(a2 + 16) = v301 + 1;
              *(_QWORD *)(a2 + 24) = v300 - 1;
              if (v300 == 1 || (v302 = *(unsigned __int8 *)(v301 + 1), v302 != 97) && (v302 & 0xFFFFFFDF) != 0x41)
              {
                *(_DWORD *)(v3 + 24) += 2;
                *(_BYTE *)(a2 + 32) = 21;
                v503[0] = 0;
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v503);
                goto LABEL_547;
              }
              v303 = (unsigned __int8 *)(v301 + 2);
              *(_QWORD *)(a2 + 16) = v301 + 2;
              *(_QWORD *)(a2 + 24) = v300 - 2;
              if (v300 == 2)
                goto LABEL_546;
              v304 = v301 + 3;
              v305 = v300 - 3;
              while (1)
              {
                v306 = *v303;
                if (v306 > 0x20 || ((1 << v306) & 0x100003600) == 0)
                  break;
                ++v303;
                *(_QWORD *)(a2 + 16) = v304;
                *(_QWORD *)(a2 + 24) = v305;
                ++v304;
                if (--v305 == -1)
                  goto LABEL_546;
              }
              *(_QWORD *)(a2 + 16) = v304;
              *(_QWORD *)(a2 + 24) = v305;
              if (v306 == 62)
              {
LABEL_497:
                (*(void (**)(uint64_t))(*(_QWORD *)v3 + 760))(v3);
                goto LABEL_418;
              }
              goto LABEL_546;
            }
            *(_DWORD *)(v3 + 24) += 2;
            *(_BYTE *)(a2 + 32) = 19;
          }
          v500[0] = 0;
          WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v500);
          goto LABEL_547;
      }
    }
  }
  else
  {
    v17 = *(_QWORD *)(a2 + 16);
  }
LABEL_914:
  *(_DWORD *)(a2 + 52) = 0;
  v468 = v17 + v12 - (_QWORD)v11;
  if (v468 >= 0)
  {
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v468;
    if (!v468)
      goto LABEL_934;
    while (1)
    {
      LOBYTE(v500[0]) = 0;
      v469 = *(_BYTE **)(a2 + 16);
      LOBYTE(v500[0]) = *v469;
      v470 = (char)v500[0];
      if (LOBYTE(v500[0]) - 65 <= 0x19)
      {
        v470 = LOBYTE(v500[0]) | 0x20;
        LOBYTE(v500[0]) |= 0x20u;
      }
      else if (LOBYTE(v500[0]) - 97 > 0x19)
      {
        v472 = *v469;
        v18 = v472 > 0x3E;
        v473 = (1 << v472) & 0x4000800100003600;
        if (!v18 && v473 != 0)
        {
          v475 = v469 + 1;
          v476 = v468 - 1;
          do
          {
            v477 = *v469;
            v18 = v477 > 0x20;
            v478 = (1 << v477) & 0x100003600;
            if (v18 || v478 == 0)
              break;
            ++v469;
            *(_QWORD *)(a2 + 16) = v475;
            *(_QWORD *)(a2 + 24) = v476;
            ++v475;
            --v476;
          }
          while (v476 != -1);
          HTMLNode = WebCore::findHTMLNodeName<unsigned char>(*(unsigned __int8 **)(a2 + 40), *(unsigned int *)(a2 + 52));
          goto LABEL_16;
        }
LABEL_934:
        if (!*(_BYTE *)(a2 + 32))
          *(_BYTE *)(a2 + 32) = 8;
LABEL_936:
        if (!*(_BYTE *)(a2 + 32))
          *(_BYTE *)(a2 + 32) = 18;
        *(_QWORD *)a1 = 0;
        return;
      }
      *(_QWORD *)(a2 + 16) = v469 + 1;
      *(_QWORD *)(a2 + 24) = v468 - 1;
      v471 = *(unsigned int *)(a2 + 52);
      if ((_DWORD)v471 == *(_DWORD *)(a2 + 48))
      {
        WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char &>(a2 + 40, (unint64_t)v500);
      }
      else
      {
        *(_BYTE *)(*(_QWORD *)(a2 + 40) + v471) = v470;
        ++*(_DWORD *)(a2 + 52);
      }
      v468 = *(_QWORD *)(a2 + 24);
      if (!v468)
        goto LABEL_934;
    }
  }
LABEL_939:
  __break(1u);
LABEL_940:
  v480 = a1;
  if ((*(_WORD *)(v3 + 28) & 0x80) == 0)
    goto LABEL_941;
  v490 = *(_QWORD *)(v3 + 200);
  if (v490)
  {
    i = v490 + 8;
LABEL_941:
    for (i = *(_QWORD *)i; ; i = *v481)
    {
      a1 = v480;
      if (!i)
        break;
      WebCore::Node::incrementConnectedSubframeCount(i, v4);
      if ((*(_WORD *)(i + 28) & 0x80) != 0)
      {
        v488 = *(_QWORD *)(i + 200);
        a1 = v480;
        if (!v488)
          break;
        v481 = (uint64_t *)(v488 + 8);
      }
      else
      {
        v481 = (uint64_t *)(i + 32);
      }
    }
  }
LABEL_80:
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8) + 3364) & 1) != 0)
  {
    WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)a3, (uint64_t *)v503);
    v363 = v503[0];
    if (v503[0])
    {
      if (*((_QWORD *)v503[0] + 10))
        WebCore::ChildListMutationAccumulator::childAdded(v503[0], (WebCore::Node *)v3);
      if (*(_DWORD *)v363 == 1)
      {
        WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v363, v362);
        WTF::fastFree(v431, v432);
      }
      else
      {
        --*(_DWORD *)v363;
      }
    }
  }
  v74 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v399 = *(_QWORD *)(v74 + 528);
    if (v399)
    {
      v400 = *(_QWORD *)(v399 + 8);
      if (v400)
      {
        v401 = *(_QWORD *)(v400 + 24);
        if (v401)
        {
          v402 = *(_QWORD *)(v401 + 8);
          if (v402)
            goto LABEL_743;
        }
      }
    }
    v416 = *(_QWORD *)(v74 + 2632);
    if (v416)
    {
      v417 = *(_QWORD *)(v416 + 8);
      if (v417)
      {
        v418 = *(_QWORD *)(v417 + 528);
        if (v418)
        {
          v419 = *(_QWORD *)(v418 + 8);
          if (v419)
          {
            v420 = *(_QWORD *)(v419 + 24);
            if (v420)
            {
              v402 = *(_QWORD *)(v420 + 8);
              if (v402)
              {
LABEL_743:
                v403 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v402 + 80) + 8) + 40);
                if (v403)
                  WebCore::InspectorDOMAgent::didInsertDOMNode(v403, (WebCore::Node *)v3);
              }
            }
          }
        }
      }
    }
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  *(_DWORD *)(v4 + 24) += 2;
  *(_DWORD *)(v3 + 24) += 2;
  v76 = *(_QWORD *)(a3 + 16);
  v77 = (v76 & 0x18000000000000) == 0;
  if ((v76 & 0x8000000000000) != 0)
    WebCore::notifyNodeInsertedIntoDocument(a3, v3, v77, (uint64_t)v500);
  else
    WebCore::notifyNodeInsertedIntoTree(a3, v3, v77);
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (*(_DWORD *)(v4 + 24) == 2)
  {
    if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v4);
  }
  else
  {
    *(_DWORD *)(v4 + 24) -= 2;
  }
  --*v7;
  v79 = *(_DWORD *)v6;
  if (*(_DWORD *)v6 == 1 && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
  {
    WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v503, v78);
    v79 = *(_DWORD *)v6;
  }
  *(_DWORD *)v6 = v79 - 1;
  *(_WORD *)(a3 + 30) |= 0x200u;
  if (HIDWORD(v500[1]))
  {
    v288 = v500[0];
    v4 = 8 * HIDWORD(v500[1]);
    do
    {
      v289 = *(_QWORD *)v288;
      *(_QWORD *)v288 = 0;
      if (v289)
      {
        if (*(_DWORD *)(v289 + 24) == 2)
        {
          if ((*(_WORD *)(v289 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v289);
        }
        else
        {
          *(_DWORD *)(v289 + 24) -= 2;
        }
      }
      v288 = (WTF::StringImpl *)((char *)v288 + 8);
      v4 -= 8;
    }
    while (v4);
  }
  v80 = v500[0];
  if ((WTF::StringImpl *)v17 != v500[0] && v500[0] != 0)
  {
    v500[0] = 0;
    LODWORD(v500[1]) = 0;
    WTF::fastFree(v80, v78);
  }
LABEL_97:
  *(_WORD *)(v3 + 30) |= 2u;
  v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v83 = (int8x16_t)xmmword_1969F1C40;
  v84 = (int8x16_t)xmmword_1969F1C50;
  a3 = (uint64_t)&bmalloc::api::IsoHeapBase<WebCore::Text>::provideHeap(void)::heap;
  v6 = MEMORY[0x1E0CBF738];
  v7 = (int *)off_1E33A8078;
  v17 = 0x1000004000002001;
  do
  {
    v85 = *(_QWORD *)(a2 + 24);
    if ((v85 & 0x8000000000000000) != 0)
      goto LABEL_939;
    v86 = *(WTF::StringImpl **)(a2 + 16);
    v87 = (int8x16_t *)((char *)v86 + v85);
    v88 = (int8x16_t *)v86;
    if (v85 < 0x10)
    {
      v94 = *(__int8 **)(a2 + 16);
      if (!v85)
        goto LABEL_138;
      while (1)
      {
        v107 = *v94;
        v18 = v107 > 0x3C;
        v108 = (1 << v107) & 0x1000004000002001;
        if (!v18 && v108 != 0)
          break;
        ++v94;
        if (!--v85)
          goto LABEL_138;
      }
    }
    else
    {
      do
      {
        v89 = vqtbl1q_s8(v83, vandq_s8(*v88, v82));
        v90 = vceqq_s8(v89, *v88);
        v89.i8[0] = vmaxvq_u8((uint8x16_t)v90);
        if (v89.i32[0])
          goto LABEL_103;
        v91 = v88 + 1;
        v92 = (int8x16_t *)((char *)v88++ + 31);
      }
      while (v92 < v87);
      if (v91 >= v87)
      {
LABEL_138:
        v94 = (__int8 *)v87;
        goto LABEL_104;
      }
      v88 = v87 - 1;
      v368 = v87[-1];
      v369.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v369.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v370 = vqtbl1q_s8(v83, vandq_s8(v368, v369));
      v90 = vceqq_s8(v370, v368);
      v370.i8[0] = vmaxvq_u8((uint8x16_t)v90);
      v94 = (__int8 *)v87;
      if (v370.i32[0])
      {
LABEL_103:
        v93 = (uint8x16_t)vornq_s8(v84, v90);
        v93.i8[0] = vminvq_u8(v93);
        v94 = &v88->i8[v93.u32[0]];
      }
    }
LABEL_104:
    v95 = (char *)v87 - v94;
    if ((char *)v87 - v94 < 0)
      goto LABEL_939;
    *(_QWORD *)(a2 + 16) = v94;
    *(_QWORD *)(a2 + 24) = v95;
    if (v94 != (__int8 *)v87)
    {
      v96 = *v94;
      if (!*v94)
      {
        if (!*(_BYTE *)(a2 + 32))
        {
          v314 = 7;
          goto LABEL_595;
        }
LABEL_111:
        v500[0] = 0;
        goto LABEL_112;
      }
      if (v96 == 13 || v96 == 38)
      {
        if (&v94[v95] - (__int8 *)v86 < 0)
          goto LABEL_939;
        *(_QWORD *)(a2 + 16) = v86;
        *(_QWORD *)(a2 + 24) = &v94[v95] - (__int8 *)v86;
        WebCore::HTMLFastPathParser<unsigned char>::scanEscapedText((uint64_t)v500, a2);
        v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
        v84 = (int8x16_t)xmmword_1969F1C50;
        v83 = (int8x16_t)xmmword_1969F1C40;
        goto LABEL_112;
      }
    }
    if (((_DWORD)v94 - (_DWORD)v86) >= 0x10000)
    {
      if (!*(_BYTE *)(a2 + 32))
      {
        v314 = 25;
LABEL_595:
        *(_BYTE *)(a2 + 32) = v314;
        goto LABEL_111;
      }
      goto LABEL_111;
    }
    if ((_DWORD)v94 == (_DWORD)v86)
      goto LABEL_111;
    WTF::String::String();
    v84 = (int8x16_t)xmmword_1969F1C50;
    v83 = (int8x16_t)xmmword_1969F1C40;
    v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
LABEL_112:
    if (*(_BYTE *)(a2 + 32))
      goto LABEL_117;
    if (!v500[0])
      goto LABEL_114;
    i = a1;
    if ((*(_BYTE *)(v3 + 22) & 8) != 0)
    {
      WebCore::Text::create(*(_QWORD *)a2, (_DWORD **)v500, (uint64_t *)v503);
      WebCore::ContainerNode::parserAppendChild(v3, v503[0], v439, v440);
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)v503);
      goto LABEL_130;
    }
    v101 = *(_QWORD *)a2;
    v102 = bmalloc::api::isoAllocate();
    v105 = v102;
    *(_OWORD *)(v102 + 8) = v497;
    *(_QWORD *)(v102 + 24) = 0x300300000002;
    *(_QWORD *)(v102 + 32) = 0;
    *(_QWORD *)(v102 + 40) = v101 + 96;
    *(_OWORD *)(v102 + 48) = 0u;
    *(_OWORD *)(v102 + 64) = 0u;
    ++*(_DWORD *)(v101 + 3324);
    v106 = v500[0];
    if (v500[0] || (v106 = *(WTF::StringImpl **)v6) != 0)
      *(_DWORD *)v106 += 2;
    a1 = i;
    *(_QWORD *)(v102 + 80) = v106;
    *(_QWORD *)v102 = off_1E33A8078;
    WebCore::ContainerNode::parserAppendChildIntoIsolatedTree((WebCore::ContainerNode *)v3, (WebCore::Node *)v102, v103, v104);
    if (*(_DWORD *)(v105 + 24) != 2)
    {
      *(_DWORD *)(v105 + 24) -= 2;
LABEL_130:
      v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      v84 = (int8x16_t)xmmword_1969F1C50;
      v83 = (int8x16_t)xmmword_1969F1C40;
      goto LABEL_114;
    }
    v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v84 = (int8x16_t)xmmword_1969F1C50;
    v83 = (int8x16_t)xmmword_1969F1C40;
    if ((*(_WORD *)(v105 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v105);
      v84 = (int8x16_t)xmmword_1969F1C50;
      v83 = (int8x16_t)xmmword_1969F1C40;
      v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
      v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    }
LABEL_114:
    v97 = *(_QWORD *)(a2 + 24);
    if (!v97
      || (v98 = v97 - 1,
          v20 = v97 == 1,
          v99 = (_BYTE *)(*(_QWORD *)(a2 + 16) + 1),
          *(_QWORD *)(a2 + 16) = v99,
          *(_QWORD *)(a2 + 24) = v98,
          !v20)
      && *v99 == 47)
    {
LABEL_117:
      LODWORD(v4) = 1;
      goto LABEL_118;
    }
    v437 = *(_DWORD *)(a2 + 36) + 1;
    *(_DWORD *)(a2 + 36) = v437;
    if (v437 == 512)
    {
      if (!*(_BYTE *)(a2 + 32))
        *(_BYTE *)(a2 + 32) = 24;
      LODWORD(v4) = 1;
    }
    else
    {
      WebCore::HTMLFastPathParser<unsigned char>::parseElement<(WebCore::HTMLFastPathParser<unsigned char>::PhrasingContent)1>(v503, a2, (WebCore::ContainerNode *)v3);
      --*(_DWORD *)(a2 + 36);
      LODWORD(v4) = *(_BYTE *)(a2 + 32) != 0;
      if (v503[0])
      {
        if (*((_DWORD *)v503[0] + 6) == 2)
        {
          if ((*((_WORD *)v503[0] + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v503[0]);
        }
        else
        {
          *((_DWORD *)v503[0] + 6) -= 2;
        }
      }
    }
    v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v84 = (int8x16_t)xmmword_1969F1C50;
    v83 = (int8x16_t)xmmword_1969F1C40;
LABEL_118:
    v100 = v500[0];
    v500[0] = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
      {
        WTF::StringImpl::destroy(v100, v86);
        v84 = (int8x16_t)xmmword_1969F1C50;
        v83 = (int8x16_t)xmmword_1969F1C40;
        v82.i64[0] = 0xF0F0F0F0F0F0F0FLL;
        v82.i64[1] = 0xF0F0F0F0F0F0F0FLL;
      }
      else
      {
        *(_DWORD *)v100 -= 2;
      }
    }
  }
  while (!(_DWORD)v4);
  if (*(_BYTE *)(a2 + 32))
  {
    v254 = *(_DWORD *)(v3 + 24) + 2;
    *(_DWORD *)(v3 + 24) = v254;
    goto LABEL_416;
  }
  v236 = *(_QWORD *)(a2 + 24);
  if (!v236)
    goto LABEL_729;
  v237 = *(_QWORD *)(a2 + 16);
  v238 = (_DWORD *)(v237 + 1);
  *(_QWORD *)(a2 + 16) = v237 + 1;
  *(_QWORD *)(a2 + 24) = v236 - 1;
  if (v236 < 7
    || (*v238 == 1953789282 ? (v239 = *(unsigned __int16 *)(v237 + 5) == 28271) : (v239 = 0),
        !v239
     && ((*(_BYTE *)v238 & 0xDF) != 0x42
      || (*(_BYTE *)(v237 + 2) & 0xDF) != 0x55
      || (*(_BYTE *)(v237 + 3) & 0xDF) != 0x54
      || (*(_BYTE *)(v237 + 4) & 0xDF) != 0x54
      || (*(_BYTE *)(v237 + 5) & 0xDF) != 0x4F
      || (*(_BYTE *)(v237 + 6) & 0xDF) != 0x4E)))
  {
    *(_DWORD *)(v3 + 24) += 2;
    *(_BYTE *)(a2 + 32) = 21;
    v499 = 0;
    WTF::Ref<WebCore::HTMLDocument,WTF::RawPtrTraits<WebCore::HTMLDocument>,WTF::DefaultRefDerefTraits<WebCore::HTMLDocument>>::~Ref(&v499);
    goto LABEL_547;
  }
  v240 = (unsigned __int8 *)(v237 + 7);
  *(_QWORD *)(a2 + 16) = v237 + 7;
  *(_QWORD *)(a2 + 24) = v236 - 7;
  if (v236 != 7)
  {
    v241 = v237 + 8;
    v242 = v236 - 8;
    while (1)
    {
      v243 = *v240;
      if (v243 > 0x20 || ((1 << v243) & 0x100003600) == 0)
        break;
      ++v240;
      *(_QWORD *)(a2 + 16) = v241;
      *(_QWORD *)(a2 + 24) = v242;
      ++v241;
      if (--v242 == -1)
        goto LABEL_414;
    }
    *(_QWORD *)(a2 + 16) = v241;
    *(_QWORD *)(a2 + 24) = v242;
    if (v243 == 62)
    {
      WebCore::HTMLFormControlElement::finishParsingChildren((WebCore::HTMLFormControlElement *)v3);
      goto LABEL_418;
    }
  }
LABEL_414:
  v254 = *(_DWORD *)(v3 + 24) + 2;
  *(_DWORD *)(v3 + 24) = v254;
  v255 = 20;
LABEL_415:
  *(_BYTE *)(a2 + 32) = v255;
LABEL_416:
  v256 = v254 - 2;
  if (v256)
  {
LABEL_417:
    *(_DWORD *)(v3 + 24) = v256;
    goto LABEL_418;
  }
LABEL_438:
  if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v3);
LABEL_418:
  *(_QWORD *)a1 = v3;
}

uint64_t WebCore::HTMLFastPathParser<unsigned char>::scanTagName(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  BOOL v9;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t result;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  unsigned __int8 *v18;
  char v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v29;
  unsigned __int8 v30;

  v3 = *(unsigned __int8 **)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v8 = v3;
    goto LABEL_18;
  }
  v5 = 0;
  v6 = v3 + 1;
  while (1)
  {
    v7 = v3[v5];
    if (v7 - 97 > 0x19)
      break;
    v1 = (uint64_t)&v6[v5++];
    --v4;
    *(_QWORD *)(a1 + 16) = v1;
    *(_QWORD *)(a1 + 24) = v4;
    if (!v4)
    {
      v8 = &v3[v5];
LABEL_18:
      *(_DWORD *)(a1 + 52) = 0;
      v17 = &v8[v4] - v3;
      if (v17 < 0)
      {
        __break(1u);
        goto LABEL_43;
      }
      *(_QWORD *)(a1 + 16) = v3;
      *(_QWORD *)(a1 + 24) = v17;
      if (!v17)
        goto LABEL_39;
      v1 = a1 + 40;
      while (1)
      {
        v30 = 0;
        v18 = *(unsigned __int8 **)(a1 + 16);
        v30 = *v18;
        v19 = v30;
        if (v30 - 65 <= 0x19)
        {
          v19 = v30 | 0x20;
          v30 |= 0x20u;
        }
        else if (v30 - 97 > 0x19)
        {
          v21 = *v18;
          v9 = v21 > 0x3E;
          v22 = (1 << v21) & 0x4000800100003600;
          if (!v9 && v22 != 0)
          {
            v24 = v18 + 1;
            v25 = v17 - 1;
            do
            {
              v26 = *v18;
              v9 = v26 > 0x20;
              v27 = (1 << v26) & 0x100003600;
              if (v9 || v27 == 0)
                break;
              ++v18;
              *(_QWORD *)(a1 + 16) = v24;
              *(_QWORD *)(a1 + 24) = v25;
              ++v24;
              --v25;
            }
            while (v25 != -1);
            return WebCore::findHTMLNodeName<unsigned char>(*(unsigned __int8 **)(a1 + 40), *(unsigned int *)(a1 + 52));
          }
LABEL_39:
          result = 0;
          if (!*(_BYTE *)(a1 + 32))
            *(_BYTE *)(a1 + 32) = 8;
          return result;
        }
        *(_QWORD *)(a1 + 16) = v18 + 1;
        *(_QWORD *)(a1 + 24) = v17 - 1;
        v20 = *(unsigned int *)(a1 + 52);
        if ((_DWORD)v20 == *(_DWORD *)(a1 + 48))
        {
LABEL_43:
          v29 = v1;
          WTF::Vector<unsigned char,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned char &>(v1, (unint64_t)&v30);
          v1 = v29;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 40) + v20) = v19;
          ++*(_DWORD *)(a1 + 52);
        }
        v17 = *(_QWORD *)(a1 + 24);
        if (!v17)
          goto LABEL_39;
      }
    }
  }
  v8 = &v3[v5];
  v9 = v7 > 0x3E;
  v1 = (1 << v7) & 0x4000800100003600;
  if (v9 || v1 == 0)
    goto LABEL_18;
  v11 = v4 - 1;
  v12 = &v6[v5];
  result = WebCore::findHTMLNodeName<unsigned char>(v3, v5);
  do
  {
    v14 = *v8;
    v9 = v14 > 0x20;
    v15 = (1 << v14) & 0x100003600;
    if (v9 || v15 == 0)
      break;
    ++v8;
    *(_QWORD *)(a1 + 16) = v12;
    *(_QWORD *)(a1 + 24) = v11;
    ++v12;
    --v11;
  }
  while (v11 != -1);
  return result;
}

uint64_t WebCore::findHTMLNodeName<unsigned char>(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;

  switch(a2)
  {
    case 1:
      v7 = *a1;
      if (v7 > 0x61)
      {
        switch(*a1)
        {
          case 'p':
            return 90;
          case 'q':
            return 96;
          case 'r':
          case 't':
            return 0;
          case 's':
            return 102;
          case 'u':
            return 128;
          default:
            if (v7 == 105)
            {
              result = 60;
            }
            else
            {
              if (v7 != 98)
                return 0;
              result = 10;
            }
            break;
        }
      }
      else
      {
        if (v7 != 97)
          return 0;
        return 245;
      }
      return result;
    case 2:
      if (*a1 == 108)
      {
        if (a1[1] != 105)
          return 0;
        return 69;
      }
      else
      {
        switch(*a1)
        {
          case 'b':
            if (a1[1] != 114)
              return 0;
            result = 19;
            break;
          case 'd':
            v36 = a1[1];
            if (v36 == 108)
              v37 = 38;
            else
              v37 = 0;
            if (v36 == 116)
              v38 = 39;
            else
              v38 = v37;
            if (v36 == 100)
              result = 31;
            else
              result = v38;
            break;
          case 'e':
            if (a1[1] != 109)
              return 0;
            result = 40;
            break;
          case 'h':
            v10 = a1[1];
            result = 49;
            switch(v10)
            {
              case '1':
                return result;
              case '2':
                result = 50;
                break;
              case '3':
                result = 51;
                break;
              case '4':
                result = 52;
                break;
              case '5':
                result = 53;
                break;
              case '6':
                result = 54;
                break;
              default:
                if (v10 == 114)
                  result = 58;
                else
                  result = 0;
                break;
            }
            break;
          case 'o':
            if (a1[1] != 108)
              return 0;
            result = 86;
            break;
          case 'r':
            v39 = a1[1];
            if (v39 == 112)
              v40 = 98;
            else
              v40 = 0;
            if (v39 == 116)
              v41 = 99;
            else
              v41 = v40;
            if (v39 == 98)
              result = 97;
            else
              result = v41;
            break;
          case 't':
            HIDWORD(v18) = a1[1];
            LODWORD(v18) = HIDWORD(v18) - 100;
            v17 = v18 >> 1;
            if (v17 >= 9)
              return 0;
            result = word_1968A23F0[v17];
            break;
          case 'u':
            if (a1[1] != 108)
              return 0;
            result = 129;
            break;
          default:
            return 0;
        }
      }
      return result;
    case 3:
      if (*a1 != 100)
      {
        switch(*a1)
        {
          case 'b':
            v42 = a1[1];
            if (v42 == 105)
            {
              if (a1[2] != 103)
                return 0;
              return 16;
            }
            else
            {
              if (v42 != 100)
                return 0;
              v43 = a1[2];
              if (v43 == 111)
                v44 = 14;
              else
                v44 = 0;
              if (v43 == 105)
                return 13;
              else
                return v44;
            }
          case 'c':
            if (*(_WORD *)(a1 + 1) != 27759)
              return 0;
            return 26;
          case 'i':
            v11 = a1[1];
            if (v11 == 109)
            {
              if (a1[2] != 103)
                return 0;
              return 62;
            }
            if (v11 == 110 && a1[2] == 115)
              return 64;
            break;
          case 'k':
            if (*(_WORD *)(a1 + 1) != 25698)
              return 0;
            return 65;
          case 'm':
            if (*(_WORD *)(a1 + 1) != 28769)
              return 0;
            return 73;
          case 'n':
            if (*(_WORD *)(a1 + 1) != 30305)
              return 0;
            return 80;
          case 'p':
            if (*(_WORD *)(a1 + 1) != 25970)
              return 0;
            return 94;
          case 'r':
            if (*(_WORD *)(a1 + 1) != 25460)
              return 0;
            return 100;
          case 's':
            if (a1[1] != 117)
              return 0;
            v45 = a1[2];
            if (v45 == 112)
              v46 = 115;
            else
              v46 = 0;
            if (v45 == 98)
              return 113;
            else
              return v46;
          case 'v':
            if (*(_WORD *)(a1 + 1) != 29281)
              return 0;
            return 130;
          case 'w':
            if (*(_WORD *)(a1 + 1) != 29282)
              return 0;
            return 132;
          case 'x':
            if (*(_WORD *)(a1 + 1) != 28781)
              return 0;
            return 133;
          default:
            return 0;
        }
        return 0;
      }
      v4 = a1[1];
      if (v4 == 105)
      {
        v5 = a1[2];
        if (v5 == 118)
          v6 = 37;
        else
          v6 = 0;
        if (v5 == 114)
          return 36;
        else
          return v6;
      }
      else if (v4 == 102)
      {
        if (a1[2] != 110)
          return 0;
        return 34;
      }
      else
      {
        if (v4 != 101 || a1[2] != 108)
          return 0;
        return 32;
      }
    case 4:
      if (*a1 != 115)
      {
        switch(*a1)
        {
          case 'a':
            v47 = a1[1];
            if (v47 != 114)
              return v47 == 98 && *((_WORD *)a1 + 1) == 29282;
            if (*((_WORD *)a1 + 1) != 24933)
              return 0;
            return 5;
          case 'b':
            v33 = a1[1];
            if (v33 == 111)
            {
              if (*((_WORD *)a1 + 1) != 31076)
                return 0;
              return 18;
            }
            if (v33 == 97 && *((_WORD *)a1 + 1) == 25971)
              return 11;
            return 0;
          case 'c':
            v48 = a1[1];
            if (v48 != 111)
            {
              if (v48 == 105 && *((_WORD *)a1 + 1) == 25972)
                return 24;
              return 0;
            }
            if (*((_WORD *)a1 + 1) != 25956)
              return 0;
            return 25;
          case 'd':
            if (*(_WORD *)(a1 + 1) != 29793 || a1[3] != 97)
              return 0;
            return 29;
          case 'f':
            if (a1[1] != 111)
              return 0;
            v32 = a1[2];
            if (v32 == 114)
            {
              if (a1[3] != 109)
                return 0;
              return 46;
            }
            if (v32 == 110 && a1[3] == 116)
              return 247;
            return 0;
          case 'h':
            v49 = a1[1];
            if (v49 != 116)
            {
              if (v49 == 101 && *((_WORD *)a1 + 1) == 25697)
                return 55;
              return 0;
            }
            if (*((_WORD *)a1 + 1) != 27757)
              return 0;
            return 59;
          case 'l':
            if (*(_WORD *)(a1 + 1) != 28265 || a1[3] != 107)
              return 0;
            return 70;
          case 'm':
            v24 = a1[1];
            if (v24 == 97)
            {
              v25 = a1[2];
              if (v25 == 105)
              {
                if (a1[3] != 110)
                  return 0;
                return 72;
              }
              if (v25 == 114 && a1[3] == 107)
                return 74;
            }
            else
            {
              if (v24 != 101)
                return 0;
              v31 = a1[2];
              if (v31 == 116)
              {
                if (a1[3] != 97)
                  return 0;
                return 77;
              }
              if (v31 == 110 && a1[3] == 117)
                return 76;
            }
            break;
          case 'n':
            if (*(_WORD *)(a1 + 1) != 25199 || a1[3] != 114)
              return 0;
            return 81;
          case 'r':
            if (*(_WORD *)(a1 + 1) != 25205 || a1[3] != 121)
              return 0;
            return 101;
          case 't':
            if (*(_WORD *)(a1 + 1) != 28009 || a1[3] != 101)
              return 0;
            return 124;
          default:
            return 0;
        }
        return 0;
      }
      v13 = a1[1];
      if (v13 == 112)
      {
        if (*((_WORD *)a1 + 1) != 28257)
          return 0;
        return 110;
      }
      else if (v13 == 108)
      {
        if (*((_WORD *)a1 + 1) != 29807)
          return 0;
        return 107;
      }
      else
      {
        if (v13 != 97 || *((_WORD *)a1 + 1) != 28781)
          return 0;
        return 103;
      }
    case 5:
      if (*a1 != 105)
      {
        switch(*a1)
        {
          case 'a':
            v35 = a1[1];
            if (v35 == 117)
            {
              if (*((_WORD *)a1 + 1) == 26980 && a1[4] == 111)
                return 9;
            }
            else if (v35 == 115 && *((_WORD *)a1 + 1) == 25705 && a1[4] == 101)
            {
              return 7;
            }
            return 0;
          case 'e':
            if (*(_WORD *)(a1 + 1) != 25197 || *(_WORD *)(a1 + 3) != 25701)
              return 0;
            return 41;
          case 'f':
            if (*(_WORD *)(a1 + 1) != 24946 || *(_WORD *)(a1 + 3) != 25965)
              return 0;
            return 47;
          case 'l':
            if (*(_WORD *)(a1 + 1) != 25185 || *(_WORD *)(a1 + 3) != 27749)
              return 0;
            return 67;
          case 'm':
            v34 = a1[1];
            if (v34 == 111)
            {
              if (*((_WORD *)a1 + 1) == 25956 && a1[4] == 108)
                return 79;
            }
            else if (v34 == 101 && *((_WORD *)a1 + 1) == 25972 && a1[4] == 114)
            {
              return 78;
            }
            return 0;
          case 'p':
            if (*(_WORD *)(a1 + 1) != 29281 || *(_WORD *)(a1 + 3) != 28001)
              return 0;
            return 91;
          case 's':
            v21 = a1[1];
            if (v21 == 116)
            {
              if (*((_WORD *)a1 + 1) == 27769 && a1[4] == 101)
                return 256;
            }
            else if (v21 == 109 && *((_WORD *)a1 + 1) == 27745 && a1[4] == 108)
            {
              return 108;
            }
            break;
          case 't':
            switch(a1[1])
            {
              case 'a':
                if (*((_WORD *)a1 + 1) != 27746 || a1[4] != 101)
                  return 0;
                result = 116;
                break;
              case 'b':
                if (*((_WORD *)a1 + 1) != 25711 || a1[4] != 121)
                  return 0;
                result = 117;
                break;
              case 'c':
              case 'd':
              case 'e':
              case 'g':
                return 0;
              case 'f':
                if (*((_WORD *)a1 + 1) != 28527 || a1[4] != 116)
                  return 0;
                result = 121;
                break;
              case 'h':
                if (*((_WORD *)a1 + 1) != 24933 || a1[4] != 100)
                  return 0;
                result = 123;
                break;
              case 'i':
                if (*((_WORD *)a1 + 1) != 27764 || a1[4] != 101)
                  return 0;
                result = 257;
                break;
              default:
                if (a1[1] != 114 || *((_WORD *)a1 + 1) != 25441 || a1[4] != 107)
                  return 0;
                result = 126;
                break;
            }
            return result;
          case 'v':
            if (*(_WORD *)(a1 + 1) != 25705 || *(_WORD *)(a1 + 3) != 28517)
              return 0;
            return 131;
          default:
            return 0;
        }
        return 0;
      }
      v2 = a1[1];
      if (v2 == 110)
      {
        if (*((_WORD *)a1 + 1) != 30064 || a1[4] != 116)
          return 0;
        return 63;
      }
      else
      {
        if (v2 != 109 || *((_WORD *)a1 + 1) != 26465 || a1[4] != 101)
          return 0;
        return 253;
      }
    case 6:
      if (*a1 != 98)
      {
        switch(*a1)
        {
          case 'a':
            if (*(_WORD *)(a1 + 1) != 28784 || *(_WORD *)(a1 + 3) != 25964 || a1[5] != 116)
              return 0;
            return 4;
          case 'c':
            v22 = a1[1];
            if (v22 == 97)
            {
              if (*((_WORD *)a1 + 1) == 30318 && *((_WORD *)a1 + 2) == 29537)
                return 21;
            }
            else if (v22 == 101 && *((_WORD *)a1 + 1) == 29806 && *((_WORD *)a1 + 2) == 29285)
            {
              return 23;
            }
            return 0;
          case 'd':
            if (*(_WORD *)(a1 + 1) != 24937 || *(_WORD *)(a1 + 3) != 28524 || a1[5] != 103)
              return 0;
            return 35;
          case 'f':
            v28 = a1[1];
            if (v28 == 111)
            {
              if (*((_WORD *)a1 + 1) == 29807 && *((_WORD *)a1 + 2) == 29285)
                return 45;
            }
            else if (v28 == 105 && *((_WORD *)a1 + 1) == 30055 && *((_WORD *)a1 + 2) == 25970)
            {
              return 44;
            }
            return 0;
          case 'h':
            v15 = a1[1];
            if (v15 == 101)
            {
              if (*((_WORD *)a1 + 1) == 25697 && *((_WORD *)a1 + 2) == 29285)
                return 56;
            }
            else if (v15 == 103 && *((_WORD *)a1 + 1) == 28530 && *((_WORD *)a1 + 2) == 28789)
            {
              return 57;
            }
            return 0;
          case 'i':
            if (*(_WORD *)(a1 + 1) != 29286 || *(_WORD *)(a1 + 3) != 28001 || a1[5] != 101)
              return 0;
            return 61;
          case 'k':
            if (*(_WORD *)(a1 + 1) != 31077 || *(_WORD *)(a1 + 3) != 25959 || a1[5] != 110)
              return 0;
            return 66;
          case 'l':
            if (*(_WORD *)(a1 + 1) != 26469 || *(_WORD *)(a1 + 3) != 28261 || a1[5] != 100)
              return 0;
            return 68;
          case 'o':
            v20 = a1[1];
            if (v20 == 112)
            {
              if (*((_WORD *)a1 + 1) == 26996 && *((_WORD *)a1 + 2) == 28271)
                return 88;
            }
            else if (v20 == 117)
            {
              if (*((_WORD *)a1 + 1) == 28788 && *((_WORD *)a1 + 2) == 29813)
                return 89;
            }
            else if (v20 == 98 && *((_WORD *)a1 + 1) == 25962 && *((_WORD *)a1 + 2) == 29795)
            {
              return 85;
            }
            return 0;
          case 's':
            v8 = a1[1];
            switch(v8)
            {
              case 't':
                if (a1[2] != 114)
                  return 0;
                v9 = a1[3];
                if (v9 == 111)
                {
                  if (*((_WORD *)a1 + 2) != 26478)
                    return 0;
                  return 112;
                }
                if (v9 == 105 && *((_WORD *)a1 + 2) == 25963)
                  return 111;
                break;
              case 'e':
                v27 = a1[2];
                if (v27 == 108)
                {
                  if (*(_WORD *)(a1 + 3) == 25445 && a1[5] == 116)
                    return 106;
                }
                else if (v27 == 97 && *(_WORD *)(a1 + 3) == 25458 && a1[5] == 104)
                {
                  return 104;
                }
                break;
              case 'c':
                if (*((_WORD *)a1 + 1) == 26994 && *((_WORD *)a1 + 2) == 29808)
                  return 255;
                break;
              default:
                if (v8 == 111 && *((_WORD *)a1 + 1) == 29301 && *((_WORD *)a1 + 2) == 25955)
                  return 109;
                break;
            }
            break;
          default:
            return 0;
        }
        return 0;
      }
      if (*(_WORD *)(a1 + 1) != 29813 || *(_WORD *)(a1 + 3) != 28532 || a1[5] != 110)
        return 0;
      return 20;
    case 7:
      switch(*a1)
      {
        case 'a':
          v14 = a1[1];
          if (v14 == 114)
          {
            if (*((_WORD *)a1 + 1) == 26996 && *((_WORD *)a1 + 2) == 27747 && a1[6] == 101)
              return 6;
          }
          else if (v14 == 100)
          {
            if (*((_WORD *)a1 + 1) == 29284 && *((_WORD *)a1 + 2) == 29541 && a1[6] == 115)
              return 3;
          }
          else if (v14 == 99 && *((_WORD *)a1 + 1) == 28530 && *((_WORD *)a1 + 2) == 31086 && a1[6] == 109)
          {
            return 2;
          }
          return 0;
        case 'b':
          if (*(_WORD *)(a1 + 1) != 29543 || *(_WORD *)(a1 + 3) != 30063 || *(_WORD *)(a1 + 5) != 25710)
            return 0;
          return 15;
        case 'c':
          if (*(_WORD *)(a1 + 1) != 28769 || *(_WORD *)(a1 + 3) != 26996 || *(_WORD *)(a1 + 5) != 28271)
            return 0;
          return 22;
        case 'd':
          if (*(_WORD *)(a1 + 1) != 29797 || *(_WORD *)(a1 + 3) != 26977 || *(_WORD *)(a1 + 5) != 29548)
            return 0;
          return 33;
        case 'l':
          if (*(_WORD *)(a1 + 1) != 29545 || *(_WORD *)(a1 + 3) != 26996 || *(_WORD *)(a1 + 5) != 26478)
            return 0;
          return 71;
        case 'm':
          if (*(_WORD *)(a1 + 1) != 29281 || *(_WORD *)(a1 + 3) != 30065 || *(_WORD *)(a1 + 5) != 25957)
            return 0;
          return 75;
        case 'n':
          if (*(_WORD *)(a1 + 1) != 25967 || *(_WORD *)(a1 + 3) != 25197 || *(_WORD *)(a1 + 5) != 25701)
            return 0;
          return 82;
        case 'p':
          if (*(_WORD *)(a1 + 1) != 25449 || *(_WORD *)(a1 + 3) != 30068 || *(_WORD *)(a1 + 5) != 25970)
            return 0;
          return 92;
        case 's':
          v12 = a1[1];
          if (v12 == 101)
          {
            if (*((_WORD *)a1 + 1) == 29795 && *((_WORD *)a1 + 2) == 28521 && a1[6] == 110)
              return 105;
          }
          else if (v12 == 117 && *((_WORD *)a1 + 1) == 28013 && *((_WORD *)a1 + 2) == 29281 && a1[6] == 121)
          {
            return 114;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 8:
      switch(*a1)
      {
        case 'b':
          if (*(_WORD *)(a1 + 1) != 29537
            || *(_WORD *)(a1 + 3) != 26213
            || *((_WORD *)a1 + 2) != 28518
            || *((_WORD *)a1 + 3) != 29806)
          {
            return 0;
          }
          return 12;
        case 'c':
          if (*(_WORD *)(a1 + 1) != 27759
            || *(_WORD *)(a1 + 3) != 29287
            || *((_WORD *)a1 + 2) != 28530
            || *((_WORD *)a1 + 3) != 28789)
          {
            return 0;
          }
          return 27;
        case 'd':
          if (*(_WORD *)(a1 + 1) != 29793
            || *(_WORD *)(a1 + 3) != 27745
            || *((_WORD *)a1 + 2) != 26988
            || *((_WORD *)a1 + 3) != 29811)
          {
            return 0;
          }
          return 30;
        case 'f':
          v23 = a1[1];
          if (v23 == 105)
          {
            if (*((_WORD *)a1 + 1) == 27749 && *((_WORD *)a1 + 2) == 29540 && *((_WORD *)a1 + 3) == 29797)
              return 42;
          }
          else if (v23 == 114
                 && *((_WORD *)a1 + 1) == 28001
                 && *((_WORD *)a1 + 2) == 29541
                 && *((_WORD *)a1 + 3) == 29797)
          {
            return 48;
          }
          return 0;
        case 'n':
          if (a1[1] != 111)
            return 0;
          v51 = a1[2];
          if (v51 == 115)
          {
            if (*(_WORD *)(a1 + 3) == 29283 && *(_WORD *)(a1 + 5) == 28777 && a1[7] == 116)
              return 84;
          }
          else if (v51 == 102 && *(_WORD *)(a1 + 3) == 24946 && *(_WORD *)(a1 + 5) == 25965 && a1[7] == 115)
          {
            return 83;
          }
          return 0;
        case 'o':
          if (*(_WORD *)(a1 + 1) != 29808
            || *(_WORD *)(a1 + 3) != 29287
            || *((_WORD *)a1 + 2) != 28530
            || *((_WORD *)a1 + 3) != 28789)
          {
            return 0;
          }
          return 87;
        case 'p':
          if (*(_WORD *)(a1 + 1) != 28530
            || *(_WORD *)(a1 + 3) != 29287
            || *((_WORD *)a1 + 2) != 25970
            || *((_WORD *)a1 + 3) != 29555)
          {
            return 0;
          }
          return 95;
        case 't':
          if (a1[1] != 101)
            return 0;
          v19 = a1[2];
          if (v19 == 109)
          {
            if (*(_WORD *)(a1 + 3) == 27760 && *(_WORD *)(a1 + 5) == 29793 && a1[7] == 101)
              return 119;
          }
          else if (v19 == 120 && *(_WORD *)(a1 + 3) == 24948 && *(_WORD *)(a1 + 5) == 25970 && a1[7] == 97)
          {
            return 120;
          }
          break;
        default:
          return 0;
      }
      return 0;
    case 9:
      v29 = *a1;
      if (v29 == 112)
      {
        if (*(_WORD *)(a1 + 1) == 24940
          && *(_WORD *)(a1 + 3) == 28265
          && *(_WORD *)(a1 + 5) == 25972
          && *(_WORD *)(a1 + 7) == 29816)
        {
          return 93;
        }
      }
      else if (v29 == 102
             && *(_WORD *)(a1 + 1) == 28271
             && *(_WORD *)(a1 + 3) == 11636
             && *(_WORD *)(a1 + 5) == 24934
             && *(_WORD *)(a1 + 7) == 25955)
      {
        return 248;
      }
      return 0;
    case 10:
      v30 = *a1;
      if (v30 == 98)
      {
        if (*(_QWORD *)(a1 + 1) == 0x746F75716B636F6CLL && *(_QWORD *)(a1 + 2) == 0x65746F75716B636FLL)
          return 17;
      }
      else if (v30 == 102)
      {
        if (*(_QWORD *)(a1 + 1) == 0x6F69747061636769 && *(_QWORD *)(a1 + 2) == 0x6E6F697470616367)
          return 43;
      }
      else if (v30 == 97 && *(_QWORD *)(a1 + 1) == 0x6E656D6863617474 && *(_QWORD *)(a1 + 2) == 0x746E656D68636174)
      {
        return 8;
      }
      return 0;
    case 13:
      v16 = *a1;
      if (v16 == 99)
      {
        if (*(_QWORD *)(a1 + 1) == 0x6F72702D726F6C6FLL && *(_QWORD *)(a1 + 5) == 0x656C69666F72702DLL)
          return 28;
        return 0;
      }
      if (v16 != 102)
      {
        if (v16 == 109 && *(_QWORD *)(a1 + 1) == 0x672D676E69737369 && *(_QWORD *)(a1 + 5) == 0x6870796C672D676ELL)
          return 254;
        return 0;
      }
      if (a1[1] != 111
        || a1[2] != 110
        || a1[3] != 116
        || a1[4] != 45
        || a1[5] != 102
        || a1[6] != 97
        || a1[7] != 99
        || a1[8] != 101
        || a1[9] != 45)
      {
        return 0;
      }
      v50 = a1[10];
      if (v50 != 117)
      {
        if (v50 == 115 && *(_WORD *)(a1 + 11) == 25458)
          return 251;
        return 0;
      }
      if (*(_WORD *)(a1 + 11) != 26994)
        return 0;
      return 252;
    case 14:
      v26 = *a1;
      if (v26 != 102)
      {
        if (v26 == 97 && *(_QWORD *)(a1 + 1) == 0x6F697461746F6E6ELL && *(_QWORD *)(a1 + 6) == 0x6C6D782D6E6F6974)
          return 246;
        return 0;
      }
      if (*(_QWORD *)(a1 + 1) != 0x656361662D746E6FLL || *(_QWORD *)(a1 + 6) != 0x656D616E2D656361)
        return 0;
      return 250;
    case 16:
      if (*(_QWORD *)a1 != 0x6361662D746E6F66 || *((_QWORD *)a1 + 1) != 0x74616D726F662D65)
        return 0;
      return 249;
    default:
      return 0;
  }
}

uint64_t WebCore::RenderTableCell::borderHalfBefore(WebCore::RenderTableCell *this, int a2)
{
  void *v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  float v14;
  double v15;
  float v16;
  double v17;
  uint64_t v18;
  WTF *v20;
  void *v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  char v28;

  WebCore::RenderTableCell::collapsedBeforeBorder((uint64_t)&v26, (uint64_t)this, 0);
  if ((v28 & 0x70) != 0)
  {
    v5 = 0.0;
    if ((v28 & 0xE) != 0)
      v5 = (float)v26 * 0.015625;
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    v7 = 1.0;
    if (v6)
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = (*(_DWORD *)v10)++;
            v7 = *(float *)(v10 + 364);
            if (v11)
            {
              *(_DWORD *)v10 = v11;
            }
            else
            {
              WebCore::Page::~Page(v10);
              WTF::fastFree(v20, v21);
            }
          }
        }
      }
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (*(_BYTE *)(v12 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944D9B80);
    }
    v13 = (unsigned __int16)*(_DWORD *)(v12 + 124) >> 13;
    v22 = 2;
    switch(v13)
    {
      case 1:
      case 2:
        goto LABEL_13;
      case 3:
      case 5:
        v13 = 3;
        goto LABEL_13;
      case 4:
        goto LABEL_14;
      default:
        v13 = 0;
LABEL_13:
        v22 = v13;
LABEL_14:
        v14 = 1.0 / v7;
        if (((v22 & 0xFFFFFFFD) != 1) == a2)
          v14 = 0.0;
        v15 = (float)((float)(v5 + v14) * 0.5) * 64.0;
        if (v15 >= 2147483650.0)
        {
          v16 = 2147500000.0;
        }
        else if (v15 <= -2147483650.0)
        {
          v16 = -2147500000.0;
        }
        else
        {
          v16 = (float)(int)v15;
        }
        v17 = (float)(floorf((float)(v7 * v16) * 0.015625) / v7) * 64.0;
        if (v17 >= 2147483650.0)
        {
          v18 = 0x7FFFFFFFLL;
        }
        else if (v17 <= -2147483650.0)
        {
          v18 = 0x80000000;
        }
        else
        {
          v18 = (int)v17;
        }
        break;
    }
  }
  else
  {
    v18 = 0;
  }
  if ((v27 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v4);
    }
  }
  return v18;
}

uint64_t WebCore::RenderTableCell::collapsedBeforeBorder(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  float v16;
  double v17;
  int v18;
  unint64_t v19;
  unint64_t *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  double v33;
  int v34;
  char v35;
  unsigned int v36;
  char v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  double v50;
  int v51;
  char v52;
  unsigned int v53;
  char v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t *v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  double v67;
  int v68;
  char v69;
  unsigned int v70;
  char v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  float v80;
  double v81;
  int v82;
  char v83;
  unsigned int v84;
  char v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t *v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  double v112;
  int v113;
  char v114;
  unsigned int v115;
  char v116;
  char v117;
  int v118;
  unsigned int v119;
  unint64_t *v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  _BOOL4 v126;
  uint64_t v127;
  _BOOL4 v128;
  uint64_t v129;
  _BOOL4 v130;
  uint64_t v131;
  _BOOL4 v132;
  uint64_t v133;
  _BOOL4 v134;
  uint64_t v135;
  _BOOL4 v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  float v141;
  double v142;
  int v143;
  char v144;
  unsigned int v145;
  char v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t *v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  unsigned int v155;
  BOOL v156;
  uint64_t v157;
  _BOOL4 v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  BOOL v167;
  unsigned int *v168;
  unsigned int v169;
  unint64_t v170;
  unsigned int *v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  BOOL v178;
  unsigned int *v179;
  unsigned int v180;
  unint64_t v181;
  unsigned int *v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  unsigned int *v198;
  unsigned int v199;
  unint64_t v200;
  unsigned int *v201;
  unsigned int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  unsigned int *v208;
  unsigned int v209;
  unint64_t v210;
  unsigned int *v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  int v219;
  int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  int v225;
  unsigned int *v226;
  unsigned int v227;
  WebCore::RenderTableCol *v228;
  uint64_t v229;
  float *v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  float *v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  BOOL v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int *v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  unsigned int v251;
  BOOL v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  uint64_t v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int *v262;
  unsigned int v263;
  BOOL v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int *v268;
  _BOOL4 v269;
  unsigned int v270;
  unsigned int v271;
  uint64_t v272;
  unsigned int *v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  unsigned int v279;
  unint64_t v280;
  unsigned int v281;
  BOOL v282;
  unsigned int *v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int *v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int *v293;
  _BOOL4 v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int *v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  void *v319;
  void *v320;
  void *v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  int v329;
  uint64_t v330;
  char v331;
  __int128 v332;
  unint64_t v333;
  __int128 v334;
  unint64_t v335;
  unint64_t v336;
  int v337;
  char v338;

  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_12;
  if (*(_BYTE *)(v5 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944DA8C0);
  }
  v6 = *(_QWORD *)(v5 + 32);
  if (!v6)
    goto LABEL_12;
  result = *(_QWORD *)(v6 + 8);
  if (!result)
    goto LABEL_12;
  if (*(_BYTE *)(result + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944DA8E0);
  }
  v8 = *(_QWORD *)(result + 32);
  if (!v8)
    goto LABEL_12;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_12;
  v12 = *(unsigned __int8 *)(v9 + 46);
  if (v12 != 35 && v12 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944DAF00);
  }
  if ((*(_BYTE *)(a2 + 251) & 0x10) != 0)
  {
LABEL_12:
    LODWORD(v336) = 1;
    v337 = 1077936128;
    v338 = 0;
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 96;
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v332, &v335);
  }
  if ((*(_BYTE *)(v9 + 328) & 1) != 0)
    return (uint64_t)WebCore::RenderTableSection::cachedCollapsedBorder(result, a2, 0, a1);
  if (a3)
  {
    v15 = WebCore::CSSProperty::resolveDirectionAwareProperty(358, (*(_DWORD *)(v5 + 120) >> 26) & 1, (unsigned __int16)*(_DWORD *)(v5 + 124) >> 13);
    v159 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
    if (v159)
    {
      if (*(_BYTE *)(v159 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1944DAE60);
      }
    }
    else if (MEMORY[0x2E] != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DBE00);
    }
    v14 = WebCore::CSSProperty::resolveDirectionAwareProperty(355, (*(_DWORD *)(v159 + 120) >> 26) & 1, (unsigned __int16)*(_DWORD *)(v159 + 124) >> 13);
    switch((unsigned __int16)*(_DWORD *)(a2 + 124) >> 13)
    {
      case 1:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 176;
        break;
      case 2:
      case 4:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 104;
        break;
      case 3:
      case 5:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 128;
        break;
      default:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 152;
        break;
    }
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(a2 + 80, v15, 0, &v335);
  }
  else
  {
    switch((unsigned __int16)*(_DWORD *)(a2 + 124) >> 13)
    {
      case 1:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 176;
        break;
      case 2:
      case 4:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 104;
        break;
      case 3:
      case 5:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 128;
        break;
      default:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 152;
        break;
    }
    v14 = 0;
    v15 = 0;
    v335 = 0;
  }
  v16 = *(float *)(v13 + 16);
  v17 = 0.0;
  if (v16 == 0.0 || (*(_BYTE *)(v13 + 20) & 0xF) == 0)
    goto LABEL_21;
  v17 = v16 * 64.0;
  if (v17 < 2147483650.0)
  {
    if (v17 > -2147483650.0)
    {
LABEL_21:
      v18 = (int)v17;
      goto LABEL_22;
    }
    v18 = 0x80000000;
  }
  else
  {
    v18 = 0x7FFFFFFF;
  }
LABEL_22:
  *(_DWORD *)a1 = v18;
  v19 = v335;
  *(_QWORD *)(a1 + 8) = v335;
  v20 = (unint64_t *)(a1 + 8);
  if ((v19 & 0x8000000000000) != 0)
  {
    v160 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v161 = __ldaxr(v160);
    while (__stlxr(v161 + 1, v160));
  }
  v21 = *(_BYTE *)(v13 + 20) & 0xF;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0x80 | v21 | 0x60;
  if (*(_DWORD *)(v13 + 8) || (v125 = *(_QWORD *)v13, (*(_QWORD *)v13 & 0x4000000000000) == 0))
  {
    v22 = 0;
  }
  else
  {
    if ((v125 & 0x8000000000000) != 0)
      v126 = *(float *)((v125 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v126 = *(_QWORD *)v13 != 0;
    if (v126)
      v22 = 0;
    else
      v22 = 0x80;
  }
  *(_BYTE *)(a1 + 16) = v21 | v22 | 0x60;
  if ((v335 & 0x8000000000000) != 0)
  {
    result = v335 & 0xFFFFFFFFFFFFLL;
    do
    {
      v240 = __ldaxr((unsigned int *)result);
      v241 = v240 - 1;
    }
    while (__stlxr(v241, (unsigned int *)result));
    if (!v241)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)a2);
    }
  }
  v23 = *(_QWORD *)(a2 + 32);
  if (!v23)
    goto LABEL_153;
  v24 = *(_QWORD *)(v23 + 8);
  if (!v24)
    goto LABEL_153;
  if (*(_BYTE *)(v24 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944DA96CLL);
  }
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_153;
  v26 = *(_QWORD *)(v25 + 8);
  if (!v26)
    goto LABEL_153;
  if (*(_BYTE *)(v26 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944DA98CLL);
  }
  v27 = *(_QWORD *)(v26 + 32);
  if (!v27)
    goto LABEL_153;
  v28 = *(_QWORD *)(v27 + 8);
  if (!v28)
    goto LABEL_153;
  v29 = *(unsigned __int8 *)(v28 + 46);
  if (v29 != 35 && v29 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944DB0F4);
  }
  result = WebCore::RenderTable::cellAbove((WebCore::RenderTable *)v28, (const WebCore::RenderTableCell *)a2);
  if (result)
  {
    switch((unsigned __int16)*(_DWORD *)(result + 124) >> 13)
    {
      case 1:
        v31 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 152;
        break;
      case 2:
      case 4:
        v31 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 128;
        break;
      case 3:
      case 5:
        v31 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 104;
        break;
      default:
        v31 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 176;
        break;
    }
    if (a3)
    {
      v214 = result;
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(result + 80, v14, 0, &v333);
      result = v214;
    }
    else
    {
      v333 = 0;
    }
    v32 = *(float *)(v31 + 16);
    v33 = 0.0;
    if (v32 == 0.0 || (*(_BYTE *)(v31 + 20) & 0xF) == 0)
      goto LABEL_43;
    v33 = v32 * 64.0;
    if (v33 < 2147483650.0)
    {
      if (v33 > -2147483650.0)
      {
LABEL_43:
        v34 = (int)v33;
        goto LABEL_44;
      }
      v34 = 0x80000000;
    }
    else
    {
      v34 = 0x7FFFFFFF;
    }
LABEL_44:
    LODWORD(v335) = v34;
    v336 = v333;
    if ((v333 & 0x8000000000000) != 0)
    {
      v198 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFLL);
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 + 1, v198));
    }
    v35 = *(_BYTE *)(v31 + 20);
    v36 = v35 & 0xF;
    if (*(_DWORD *)(v31 + 8) || (v133 = *(_QWORD *)v31, (*(_QWORD *)v31 & 0x4000000000000) == 0))
    {
      v37 = 0;
    }
    else
    {
      if ((v133 & 0x8000000000000) != 0)
        v134 = *(float *)((v133 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
      else
        v134 = *(_QWORD *)v31 != 0;
      if (v134)
        v37 = 0;
      else
        v37 = 0x80;
    }
    v38 = v36 | v37 | 0x60;
    LOBYTE(v337) = v38;
    v39 = *(_BYTE *)(a1 + 16);
    if ((v39 & 0x70) != 0)
    {
      v40 = v39 & 0xF;
      if (v40 == 1)
      {
        if (v36 != 1)
          goto LABEL_308;
      }
      else if (v36 != 1 && v40 != 0)
      {
        if ((v35 & 0xF) == 0)
        {
LABEL_308:
          v38 = *(_BYTE *)(a1 + 16);
          v42 = (unint64_t *)a1;
LABEL_55:
          if ((v38 & 0xF) == 1)
          {
            v43 = 0;
            v44 = 0;
            v38 = 0;
          }
          else
          {
            v43 = *(_DWORD *)v42;
            v44 = v42[1];
            if ((v44 & 0x8000000000000) != 0)
            {
              v200 = v42[1];
              v201 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
              do
                v202 = __ldaxr(v201);
              while (__stlxr(v202 + 1, v201));
              v38 = *((_BYTE *)v42 + 16);
              v44 = v200;
            }
          }
          *(_DWORD *)a1 = v43;
          v45 = *(_QWORD *)(a1 + 8);
          if ((v45 & 0x8000000000000) != 0)
          {
            if ((v44 & 0x8000000000000) != 0)
            {
              v321 = (void *)result;
              v327 = v44;
              v332 = *(_OWORD *)((v45 & 0xFFFFFFFFFFFFLL) + 4);
              v293 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
              v334 = *(_OWORD *)((v44 & 0xFFFFFFFFFFFFLL) + 4);
              v294 = WebCore::operator==<float,4ul>((float *)&v332, (float *)&v334);
              v45 = *v20;
              if (v294 && HIBYTE(v45) == HIBYTE(v327))
              {
                result = (uint64_t)v321;
                v44 = v327;
                if (BYTE6(v45) == BYTE6(v327))
                {
                  *(_BYTE *)(a1 + 16) = v38;
                  do
                  {
                    v295 = __ldaxr(v293);
                    v296 = v295 - 1;
                  }
                  while (__stlxr(v296, v293));
                  result = (uint64_t)v321;
                  if (!v296)
                  {
                    atomic_store(1u, v293);
                    WTF::fastFree((WTF *)v293, (void *)v30);
                    result = (uint64_t)v321;
                  }
LABEL_63:
                  if ((v336 & 0x8000000000000) != 0)
                  {
                    v272 = result;
                    v273 = (unsigned int *)(v336 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v274 = __ldaxr(v273);
                      v275 = v274 - 1;
                    }
                    while (__stlxr(v275, v273));
                    if (!v275)
                    {
                      atomic_store(1u, v273);
                      WTF::fastFree((WTF *)v273, (void *)v30);
                      result = v272;
                    }
                  }
                  if ((v333 & 0x8000000000000) != 0)
                  {
                    v276 = result;
                    v277 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFLL);
                    do
                    {
                      v278 = __ldaxr(v277);
                      v279 = v278 - 1;
                    }
                    while (__stlxr(v279, v277));
                    if (!v279)
                    {
                      atomic_store(1u, v277);
                      WTF::fastFree((WTF *)v277, (void *)v30);
                      result = v276;
                    }
                  }
                  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
                    goto LABEL_153;
                  goto LABEL_66;
                }
              }
              else
              {
                result = (uint64_t)v321;
                v44 = v327;
              }
            }
          }
          else if ((v44 & 0x8000000000000) == 0 && v45 == v44)
          {
LABEL_62:
            *(_BYTE *)(a1 + 16) = v38;
            goto LABEL_63;
          }
          if ((v45 & 0x8000000000000) != 0)
          {
            v324 = v44;
            v261 = result;
            v262 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
            do
            {
              v263 = __ldaxr(v262);
              v264 = --v263 == 0;
            }
            while (__stlxr(v263, v262));
            v44 = v324;
            if (v264)
            {
              atomic_store(1u, v262);
              WTF::fastFree((WTF *)v262, (void *)v30);
              v44 = v324;
              result = v261;
            }
          }
          *(_QWORD *)(a1 + 8) = v44;
          goto LABEL_62;
        }
        v193 = v335;
        v194 = *(_DWORD *)a1;
        v195 = v35 & 0xE;
        if (v195)
          v196 = v335;
        else
          v196 = 0;
        if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
          v197 = *(_DWORD *)a1;
        else
          v197 = 0;
        if (v196 == v197)
        {
          if (v36 == v40)
          {
            if ((v39 & 0x70) == 0x70)
              goto LABEL_308;
          }
          else if (v36 < v40)
          {
            goto LABEL_308;
          }
        }
        else
        {
          if (!v195)
            v193 = 0;
          if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
            v194 = 0;
          if (v193 < v194)
            goto LABEL_308;
        }
      }
    }
    v42 = &v335;
    goto LABEL_55;
  }
LABEL_66:
  v46 = *(_QWORD *)(a2 + 32);
  if (v46)
    v47 = *(_QWORD *)(v46 + 8);
  else
    v47 = 0;
  switch((unsigned __int16)*(_DWORD *)(v47 + 124) >> 13)
  {
    case 1:
      v48 = *(_QWORD *)(*(_QWORD *)(v47 + 88) + 24) + 176;
      break;
    case 2:
    case 4:
      v48 = *(_QWORD *)(*(_QWORD *)(v47 + 88) + 24) + 104;
      break;
    case 3:
    case 5:
      v48 = *(_QWORD *)(*(_QWORD *)(v47 + 88) + 24) + 128;
      break;
    default:
      v48 = *(_QWORD *)(*(_QWORD *)(v47 + 88) + 24) + 152;
      break;
  }
  if (a3)
  {
    v213 = result;
    if (v46)
      v46 = *(_QWORD *)(v46 + 8);
    WebCore::RenderStyle::visitedDependentColorWithColorFilter(v46 + 80, v15, 0, &v333);
    result = v213;
  }
  else
  {
    v333 = 0;
  }
  v49 = *(float *)(v48 + 16);
  v50 = 0.0;
  if (v49 == 0.0 || (*(_BYTE *)(v48 + 20) & 0xF) == 0)
    goto LABEL_73;
  v50 = v49 * 64.0;
  if (v50 < 2147483650.0)
  {
    if (v50 > -2147483650.0)
    {
LABEL_73:
      v51 = (int)v50;
      goto LABEL_74;
    }
    v51 = 0x80000000;
  }
  else
  {
    v51 = 0x7FFFFFFF;
  }
LABEL_74:
  LODWORD(v335) = v51;
  v336 = v333;
  if ((v333 & 0x8000000000000) != 0)
  {
    v168 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFLL);
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 + 1, v168));
  }
  v52 = *(_BYTE *)(v48 + 20);
  v53 = v52 & 0xF;
  if (*(_DWORD *)(v48 + 8) || (v127 = *(_QWORD *)v48, (*(_QWORD *)v48 & 0x4000000000000) == 0))
  {
    v54 = 0;
  }
  else
  {
    if ((v127 & 0x8000000000000) != 0)
      v128 = *(float *)((v127 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v128 = *(_QWORD *)v48 != 0;
    if (v128)
      v54 = 0;
    else
      v54 = 0x80;
  }
  v55 = v53 | v54 | 0x50;
  LOBYTE(v337) = v55;
  v56 = *(_BYTE *)(a1 + 16);
  if ((v56 & 0x70) == 0)
    goto LABEL_296;
  v57 = v56 & 0xF;
  if (v53 == 1)
  {
    v58 = (unint64_t *)a1;
    if (v57 != 1)
    {
LABEL_296:
      v58 = &v335;
      v56 = v55;
    }
  }
  else
  {
    if ((v52 & 0xF) == 0 || v57 == 1)
    {
      v58 = (unint64_t *)a1;
      goto LABEL_82;
    }
    if ((v56 & 0xF) == 0)
      goto LABEL_296;
    v162 = *(_DWORD *)a1;
    v163 = v335;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v164 = *(_DWORD *)a1;
    else
      v164 = 0;
    v165 = v52 & 0xE;
    if (v165)
      v166 = v335;
    else
      v166 = 0;
    if (v164 == v166)
    {
      v58 = (unint64_t *)a1;
      v167 = v57 >= v53;
      if (v57 == v53)
        v167 = (v56 & 0x70u) >= 0x50;
      if (!v167)
        goto LABEL_296;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v162 = 0;
      if (!v165)
        v163 = 0;
      v58 = (unint64_t *)a1;
      if (v162 < v163)
        goto LABEL_296;
    }
  }
LABEL_82:
  if ((v56 & 0xF) == 1)
  {
    v59 = 0;
    v60 = 0;
    v56 = 0;
  }
  else
  {
    v59 = *(_DWORD *)v58;
    v60 = v58[1];
    if ((v60 & 0x8000000000000) != 0)
    {
      v170 = v58[1];
      v171 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 + 1, v171));
      v56 = *((_BYTE *)v58 + 16);
      v60 = v170;
    }
  }
  *(_DWORD *)a1 = v59;
  v61 = *(_QWORD *)(a1 + 8);
  if ((v61 & 0x8000000000000) == 0)
  {
    if ((v60 & 0x8000000000000) == 0 && v61 == v60)
    {
LABEL_89:
      *(_BYTE *)(a1 + 16) = v56;
      goto LABEL_90;
    }
LABEL_87:
    if ((v61 & 0x8000000000000) != 0)
    {
      v322 = v60;
      v236 = result;
      v237 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFLL);
      do
      {
        v238 = __ldaxr(v237);
        v239 = --v238 == 0;
      }
      while (__stlxr(v238, v237));
      v60 = v322;
      if (v239)
      {
        atomic_store(1u, v237);
        WTF::fastFree((WTF *)v237, (void *)v30);
        v60 = v322;
        result = v236;
      }
    }
    *(_QWORD *)(a1 + 8) = v60;
    goto LABEL_89;
  }
  if ((v60 & 0x8000000000000) == 0)
    goto LABEL_87;
  v319 = (void *)result;
  v325 = v60;
  v332 = *(_OWORD *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
  v268 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
  v334 = *(_OWORD *)((v60 & 0xFFFFFFFFFFFFLL) + 4);
  v269 = WebCore::operator==<float,4ul>((float *)&v332, (float *)&v334);
  v61 = *v20;
  if (!v269 || HIBYTE(v61) != HIBYTE(v325))
  {
    result = (uint64_t)v319;
    v60 = v325;
    goto LABEL_87;
  }
  result = (uint64_t)v319;
  v60 = v325;
  if (BYTE6(v61) != BYTE6(v325))
    goto LABEL_87;
  *(_BYTE *)(a1 + 16) = v56;
  do
  {
    v270 = __ldaxr(v268);
    v271 = v270 - 1;
  }
  while (__stlxr(v271, v268));
  result = (uint64_t)v319;
  if (!v271)
  {
    atomic_store(1u, v268);
    WTF::fastFree((WTF *)v268, (void *)v30);
    result = (uint64_t)v319;
  }
LABEL_90:
  if ((v336 & 0x8000000000000) != 0)
  {
    v242 = result;
    v243 = (unsigned int *)(v336 & 0xFFFFFFFFFFFFLL);
    do
    {
      v244 = __ldaxr(v243);
      v245 = v244 - 1;
    }
    while (__stlxr(v245, v243));
    if (!v245)
    {
      atomic_store(1u, v243);
      WTF::fastFree((WTF *)v243, (void *)v30);
      result = v242;
    }
  }
  if ((v333 & 0x8000000000000) != 0)
  {
    v246 = result;
    v247 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFLL);
    do
    {
      v248 = __ldaxr(v247);
      v249 = v248 - 1;
    }
    while (__stlxr(v249, v247));
    if (!v249)
    {
      atomic_store(1u, v247);
      WTF::fastFree((WTF *)v247, (void *)v30);
      result = v246;
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_153;
  if (result)
  {
    v102 = *(_QWORD *)(result + 32);
    if (v102)
    {
      v103 = *(_QWORD *)(v102 + 8);
      if (v103)
      {
        if (*(_BYTE *)(v103 + 46) != 39)
        {
          __break(0xC471u);
          JUMPOUT(0x1944DAA0CLL);
        }
        v103 = *(_QWORD *)(v103 + 32);
        if (v103)
        {
          v103 = *(_QWORD *)(v103 + 8);
          if (v103)
          {
            if (*(_BYTE *)(v103 + 46) != 40)
            {
              __break(0xC471u);
              JUMPOUT(0x1944DAA4CLL);
            }
          }
        }
      }
    }
    else
    {
      v103 = 0;
    }
    v104 = *(_QWORD *)(a2 + 32);
    if (!v104)
      goto LABEL_258;
    v105 = *(_QWORD *)(v104 + 8);
    if (v105)
    {
      if (*(_BYTE *)(v105 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1944DAA2CLL);
      }
      v106 = *(_QWORD *)(v105 + 32);
      if (v106)
      {
        v106 = *(_QWORD *)(v106 + 8);
        if (v106)
        {
          if (*(_BYTE *)(v106 + 46) != 40)
          {
            __break(0xC471u);
            JUMPOUT(0x1944DAA6CLL);
          }
        }
      }
    }
    else
    {
      v106 = 0;
    }
    if (v103 == v106)
    {
      v107 = *(unsigned int *)(v105 + 40);
      if (!(v107 | ((unint64_t)*(unsigned __int8 *)(v105 + 44) << 32)))
        goto LABEL_94;
      v108 = *(_QWORD *)((v107 | ((unint64_t)*(unsigned __int8 *)(v105 + 44) << 32)) + 8);
      if (!v108)
        goto LABEL_94;
    }
    else
    {
LABEL_258:
      v137 = *(_QWORD *)(v102 + 8);
      if (*(_BYTE *)(v137 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1944DAC7CLL);
      }
      v138 = *(_QWORD *)(*(_QWORD *)(v137 + 32) + 8);
      if (*(_BYTE *)(v138 + 46) != 40)
      {
        __break(0xC471u);
        JUMPOUT(0x1944DAC9CLL);
      }
      v139 = *(unsigned int *)(v138 + 71) | ((unint64_t)*(unsigned __int8 *)(v138 + 75) << 32);
      if (!v139)
        goto LABEL_94;
      v108 = *(_QWORD *)(v139 + 8);
      if (!v108)
        goto LABEL_94;
      if (*(_BYTE *)(v108 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1944DA648);
      }
    }
    v109 = v108;
    if ((*(_BYTE *)(v108 + 45) & 2) != 0)
    {
      v109 = *(_QWORD *)(v108 + 32);
      if (v109)
        v109 = *(_QWORD *)(v109 + 8);
    }
    switch((unsigned __int16)*(_DWORD *)(v109 + 124) >> 13)
    {
      case 1:
        v110 = *(_QWORD *)(*(_QWORD *)(v109 + 88) + 24) + 152;
        break;
      case 2:
      case 4:
        v110 = *(_QWORD *)(*(_QWORD *)(v109 + 88) + 24) + 128;
        break;
      case 3:
      case 5:
        v110 = *(_QWORD *)(*(_QWORD *)(v109 + 88) + 24) + 104;
        break;
      default:
        v110 = *(_QWORD *)(*(_QWORD *)(v109 + 88) + 24) + 176;
        break;
    }
    if (a3)
    {
      if ((*(_BYTE *)(v108 + 45) & 2) != 0)
      {
        v108 = *(_QWORD *)(v108 + 32);
        if (v108)
          v108 = *(_QWORD *)(v108 + 8);
      }
      result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v108 + 80, v14, 0, &v333);
    }
    else
    {
      v333 = 0;
    }
    v111 = *(float *)(v110 + 16);
    v112 = 0.0;
    if (v111 == 0.0 || (*(_BYTE *)(v110 + 20) & 0xF) == 0)
      goto LABEL_196;
    v112 = v111 * 64.0;
    if (v112 < 2147483650.0)
    {
      if (v112 > -2147483650.0)
      {
LABEL_196:
        v113 = (int)v112;
        goto LABEL_197;
      }
      v113 = 0x80000000;
    }
    else
    {
      v113 = 0x7FFFFFFF;
    }
LABEL_197:
    LODWORD(v335) = v113;
    v336 = v333;
    if ((v333 & 0x8000000000000) != 0)
    {
      v208 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFLL);
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 + 1, v208));
    }
    v114 = *(_BYTE *)(v110 + 20);
    v115 = v114 & 0xF;
    if (*(_DWORD *)(v110 + 8) || (v135 = *(_QWORD *)v110, (*(_QWORD *)v110 & 0x4000000000000) == 0))
    {
      v116 = 0;
    }
    else
    {
      if ((v135 & 0x8000000000000) != 0)
        v136 = *(float *)((v135 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
      else
        v136 = *(_QWORD *)v110 != 0;
      if (v136)
        v116 = 0;
      else
        v116 = 0x80;
    }
    v117 = v115 | v116 | 0x50;
    LOBYTE(v337) = v117;
    v118 = *(unsigned __int8 *)(a1 + 16);
    if ((v118 & 0x70) != 0)
    {
      v119 = v118 & 0xF;
      if (v119 == 1)
      {
        if (v115 != 1)
          goto LABEL_310;
      }
      else if (v115 != 1 && v119 != 0)
      {
        if ((v114 & 0xF) == 0)
        {
LABEL_310:
          v117 = *(_BYTE *)(a1 + 16);
          v121 = (unint64_t *)a1;
LABEL_208:
          if ((v117 & 0xF) == 1)
          {
            v122 = 0;
            v123 = 0;
            v117 = 0;
          }
          else
          {
            v122 = *(_DWORD *)v121;
            v123 = v121[1];
            if ((v123 & 0x8000000000000) != 0)
            {
              v210 = v121[1];
              v211 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFLL);
              do
                v212 = __ldaxr(v211);
              while (__stlxr(v212 + 1, v211));
              v117 = *((_BYTE *)v121 + 16);
              v123 = v210;
            }
          }
          *(_DWORD *)a1 = v122;
          v124 = *(_QWORD *)(a1 + 8);
          if ((v124 & 0x8000000000000) != 0)
          {
            if ((v123 & 0x8000000000000) != 0)
            {
              v332 = *(_OWORD *)((v124 & 0xFFFFFFFFFFFFLL) + 4);
              v328 = v123;
              v297 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFLL);
              v334 = *(_OWORD *)((v123 & 0xFFFFFFFFFFFFLL) + 4);
              result = WebCore::operator==<float,4ul>((float *)&v332, (float *)&v334);
              v124 = *v20;
              if ((_DWORD)result && HIBYTE(v124) == HIBYTE(v328))
              {
                v123 = v328;
                if (BYTE6(v124) == BYTE6(v328))
                {
                  *(_BYTE *)(a1 + 16) = v117;
                  do
                  {
                    v298 = __ldaxr(v297);
                    v299 = v298 - 1;
                  }
                  while (__stlxr(v299, v297));
                  if (!v299)
                  {
                    atomic_store(1u, v297);
                    result = WTF::fastFree((WTF *)v297, (void *)v30);
                  }
LABEL_216:
                  if ((v336 & 0x8000000000000) != 0)
                  {
                    result = v336 & 0xFFFFFFFFFFFFLL;
                    do
                    {
                      v286 = __ldaxr((unsigned int *)result);
                      v287 = v286 - 1;
                    }
                    while (__stlxr(v287, (unsigned int *)result));
                    if (!v287)
                    {
                      atomic_store(1u, (unsigned int *)result);
                      result = WTF::fastFree((WTF *)result, (void *)v30);
                    }
                  }
                  if ((v333 & 0x8000000000000) != 0)
                  {
                    result = v333 & 0xFFFFFFFFFFFFLL;
                    do
                    {
                      v288 = __ldaxr((unsigned int *)result);
                      v289 = v288 - 1;
                    }
                    while (__stlxr(v289, (unsigned int *)result));
                    if (!v289)
                    {
                      atomic_store(1u, (unsigned int *)result);
                      result = WTF::fastFree((WTF *)result, (void *)v30);
                    }
                  }
                  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
                    goto LABEL_153;
                  goto LABEL_94;
                }
              }
              else
              {
                v123 = v328;
              }
            }
          }
          else if ((v123 & 0x8000000000000) == 0 && v124 == v123)
          {
LABEL_215:
            *(_BYTE *)(a1 + 16) = v117;
            goto LABEL_216;
          }
          if ((v124 & 0x8000000000000) != 0)
          {
            v280 = v123;
            result = v124 & 0xFFFFFFFFFFFFLL;
            do
            {
              v281 = __ldaxr((unsigned int *)result);
              v282 = --v281 == 0;
            }
            while (__stlxr(v281, (unsigned int *)result));
            v123 = v280;
            if (v282)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, (void *)v30);
              v123 = v280;
            }
          }
          *(_QWORD *)(a1 + 8) = v123;
          goto LABEL_215;
        }
        v203 = v335;
        v204 = *(_DWORD *)a1;
        v205 = v114 & 0xE;
        if (v205)
          v206 = v335;
        else
          v206 = 0;
        if ((v118 & 0xE) != 0)
          v207 = *(_DWORD *)a1;
        else
          v207 = 0;
        if (v206 == v207)
        {
          if (v115 == v119)
          {
            if ((~v118 & 0x60) == 0)
              goto LABEL_310;
          }
          else if (v115 < v119)
          {
            goto LABEL_310;
          }
        }
        else
        {
          if (!v205)
            v203 = 0;
          if ((v118 & 0xE) == 0)
            v204 = 0;
          if (v203 < v204)
            goto LABEL_310;
        }
      }
    }
    v121 = &v335;
    goto LABEL_208;
  }
LABEL_94:
  v62 = *(_QWORD *)(a2 + 32);
  if (!v62)
  {
    if (*(_BYTE *)(MEMORY[8] + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DA9ACLL);
    }
    if ((*(_DWORD *)(MEMORY[8] + 200) & 0x7FFFFFFF) == 0)
    {
      v30 = 0;
      goto LABEL_550;
    }
LABEL_127:
    if ((*(_BYTE *)(v28 + 328) & 4) != 0)
    {
      result = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v28, (void *)(*(_DWORD *)(a2 + 248) & 0x1FFFFFF), 0, 0);
      if (result)
      {
        v228 = (WebCore::RenderTableCol *)result;
        v229 = result + 80;
        v230 = (float *)WebCore::RenderStyle::borderBefore((WebCore::RenderStyle *)(result + 80));
        if (a3)
        {
          WebCore::RenderStyle::visitedDependentColorWithColorFilter(v229, v15, 0, (unint64_t *)&v334);
          v231 = v334;
        }
        else
        {
          v231 = 0;
          *(_QWORD *)&v334 = 0;
        }
        WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)&v332, v230, v231, 3);
        WebCore::chooseBorder((uint64_t)&v335, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)&v332);
        *(_DWORD *)a1 = v335;
        result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v336);
        *(_BYTE *)(a1 + 16) = v337;
        if ((v336 & 0x8000000000000) != 0)
        {
          result = v336 & 0xFFFFFFFFFFFFLL;
          do
          {
            v307 = __ldaxr((unsigned int *)result);
            v308 = v307 - 1;
          }
          while (__stlxr(v308, (unsigned int *)result));
          if (!v308)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v232);
          }
        }
        if ((*((_QWORD *)&v332 + 1) & 0x8000000000000) != 0)
        {
          result = *((_QWORD *)&v332 + 1) & 0xFFFFFFFFFFFFLL;
          do
          {
            v309 = __ldaxr((unsigned int *)result);
            v310 = v309 - 1;
          }
          while (__stlxr(v310, (unsigned int *)result));
          if (!v310)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v232);
          }
        }
        if ((v334 & 0x8000000000000) != 0)
        {
          result = v334 & 0xFFFFFFFFFFFFLL;
          do
          {
            v311 = __ldaxr((unsigned int *)result);
            v312 = v311 - 1;
          }
          while (__stlxr(v312, (unsigned int *)result));
          if (!v312)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v232);
          }
        }
        if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
          goto LABEL_153;
        result = WebCore::RenderTableCol::enclosingColumnGroup(v228);
        if (result)
        {
          v233 = result + 80;
          v234 = (float *)WebCore::RenderStyle::borderBefore((WebCore::RenderStyle *)(result + 80));
          if (a3)
          {
            WebCore::RenderStyle::visitedDependentColorWithColorFilter(v233, v15, 0, (unint64_t *)&v334);
            v235 = v334;
          }
          else
          {
            v235 = 0;
            *(_QWORD *)&v334 = 0;
          }
          WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)&v332, v234, v235, 2);
          WebCore::chooseBorder((uint64_t)&v335, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)&v332);
          *(_DWORD *)a1 = v335;
          result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v336);
          *(_BYTE *)(a1 + 16) = v337;
          if ((v336 & 0x8000000000000) != 0)
          {
            result = v336 & 0xFFFFFFFFFFFFLL;
            do
            {
              v313 = __ldaxr((unsigned int *)result);
              v314 = v313 - 1;
            }
            while (__stlxr(v314, (unsigned int *)result));
            if (!v314)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, (void *)v30);
            }
          }
          if ((*((_QWORD *)&v332 + 1) & 0x8000000000000) != 0)
          {
            result = *((_QWORD *)&v332 + 1) & 0xFFFFFFFFFFFFLL;
            do
            {
              v315 = __ldaxr((unsigned int *)result);
              v316 = v315 - 1;
            }
            while (__stlxr(v316, (unsigned int *)result));
            if (!v316)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, (void *)v30);
            }
          }
          if ((v334 & 0x8000000000000) != 0)
          {
            result = v334 & 0xFFFFFFFFFFFFLL;
            do
            {
              v317 = __ldaxr((unsigned int *)result);
              v318 = v317 - 1;
            }
            while (__stlxr(v318, (unsigned int *)result));
            if (!v318)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, (void *)v30);
            }
          }
          if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
            goto LABEL_153;
        }
      }
    }
    switch((unsigned __int16)*(_DWORD *)(v28 + 124) >> 13)
    {
      case 1:
        v79 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 24) + 176;
        break;
      case 2:
      case 4:
        v79 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 24) + 104;
        break;
      case 3:
      case 5:
        v79 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 24) + 128;
        break;
      default:
        v79 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 24) + 152;
        break;
    }
    if (a3)
      result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v28 + 80, v15, 0, &v333);
    else
      v333 = 0;
    v80 = *(float *)(v79 + 16);
    v81 = 0.0;
    if (v80 == 0.0 || (*(_BYTE *)(v79 + 20) & 0xF) == 0)
      goto LABEL_134;
    v81 = v80 * 64.0;
    if (v81 < 2147483650.0)
    {
      if (v81 > -2147483650.0)
      {
LABEL_134:
        v82 = (int)v81;
        goto LABEL_135;
      }
      v82 = 0x80000000;
    }
    else
    {
      v82 = 0x7FFFFFFF;
    }
LABEL_135:
    LODWORD(v335) = v82;
    v336 = v333;
    if ((v333 & 0x8000000000000) != 0)
    {
      v189 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFLL);
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 + 1, v189));
    }
    v83 = *(_BYTE *)(v79 + 20);
    v84 = v83 & 0xF;
    if (*(_DWORD *)(v79 + 8) || (v131 = *(_QWORD *)v79, (*(_QWORD *)v79 & 0x4000000000000) == 0))
    {
      v85 = 0;
    }
    else
    {
      if ((v131 & 0x8000000000000) != 0)
        v132 = *(float *)((v131 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
      else
        v132 = *(_QWORD *)v79 != 0;
      if (v132)
        v85 = 0;
      else
        v85 = 0x80;
    }
    v86 = v84 | v85 | 0x10;
    LOBYTE(v337) = v86;
    v87 = *(_BYTE *)(a1 + 16);
    if ((v87 & 0x70) == 0)
      goto LABEL_306;
    v88 = v87 & 0xF;
    if (v84 == 1)
    {
      v89 = (unint64_t *)a1;
      if (v88 != 1)
        goto LABEL_306;
    }
    else
    {
      if ((v83 & 0xF) == 0 || v88 == 1)
      {
        v89 = (unint64_t *)a1;
        goto LABEL_143;
      }
      if ((v87 & 0xF) == 0)
        goto LABEL_306;
      v184 = *(_DWORD *)a1;
      v185 = v335;
      if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
        v186 = *(_DWORD *)a1;
      else
        v186 = 0;
      v187 = v83 & 0xE;
      if (v187)
        v188 = v335;
      else
        v188 = 0;
      if (v186 == v188)
      {
        v89 = (unint64_t *)a1;
        if (v88 < v84)
        {
LABEL_306:
          v89 = &v335;
          v87 = v86;
        }
      }
      else
      {
        if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
          v184 = 0;
        if (!v187)
          v185 = 0;
        v89 = (unint64_t *)a1;
        if (v184 < v185)
          goto LABEL_306;
      }
    }
LABEL_143:
    if ((v87 & 0xF) == 1)
    {
      v91 = 0;
      v90 = 0;
      v87 = 0;
    }
    else
    {
      v90 = *(_DWORD *)v89;
      v91 = v89[1];
      if ((v91 & 0x8000000000000) != 0)
      {
        v191 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
        do
          v192 = __ldaxr(v191);
        while (__stlxr(v192 + 1, v191));
        v87 = *((_BYTE *)v89 + 16);
      }
    }
    *(_DWORD *)a1 = v90;
    v92 = *(_QWORD *)(a1 + 8);
    if ((v92 & 0x8000000000000) != 0)
    {
      if ((v91 & 0x8000000000000) != 0)
      {
        v332 = *(_OWORD *)((v92 & 0xFFFFFFFFFFFFLL) + 4);
        v290 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFLL);
        v334 = *(_OWORD *)((v91 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v332, (float *)&v334);
        v92 = *v20;
        if ((_DWORD)result)
        {
          if (HIBYTE(v92) == HIBYTE(v91) && BYTE6(v92) == BYTE6(v91))
          {
            *(_BYTE *)(a1 + 16) = v87;
            do
            {
              v291 = __ldaxr(v290);
              v292 = v291 - 1;
            }
            while (__stlxr(v292, v290));
            if (!v292)
            {
              atomic_store(1u, v290);
              result = WTF::fastFree((WTF *)(v91 & 0xFFFFFFFFFFFFLL), (void *)v30);
            }
            goto LABEL_151;
          }
        }
      }
    }
    else if ((v91 & 0x8000000000000) == 0 && v92 == v91)
    {
LABEL_150:
      *(_BYTE *)(a1 + 16) = v87;
LABEL_151:
      if ((v336 & 0x8000000000000) != 0)
      {
        result = v336 & 0xFFFFFFFFFFFFLL;
        do
        {
          v265 = __ldaxr((unsigned int *)result);
          v266 = v265 - 1;
        }
        while (__stlxr(v266, (unsigned int *)result));
        if (!v266)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, (void *)v30);
        }
      }
      if ((v333 & 0x8000000000000) == 0)
        goto LABEL_153;
      result = v333 & 0xFFFFFFFFFFFFLL;
      do
      {
        v267 = __ldaxr((unsigned int *)result);
        v156 = --v267 == 0;
      }
      while (__stlxr(v267, (unsigned int *)result));
LABEL_614:
      if (v156)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, (void *)v30);
      }
      goto LABEL_153;
    }
    if ((v92 & 0x8000000000000) != 0)
    {
      result = v92 & 0xFFFFFFFFFFFFLL;
      do
      {
        v253 = __ldaxr((unsigned int *)result);
        v254 = v253 - 1;
      }
      while (__stlxr(v254, (unsigned int *)result));
      if (!v254)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, (void *)v30);
      }
    }
    *(_QWORD *)(a1 + 8) = v91;
    goto LABEL_150;
  }
  v63 = *(_QWORD *)(v62 + 8);
  if (*(_BYTE *)(v63 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944DA9CCLL);
  }
  v64 = *(_QWORD *)(v63 + 32);
  if (v64)
  {
    v30 = *(_QWORD *)(v64 + 8);
    if (v30 && *(_BYTE *)(v30 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DA9ECLL);
    }
  }
  else
  {
    v30 = 0;
  }
  if ((*(_DWORD *)(v63 + 200) & 0x7FFFFFFF) != 0)
  {
    if (v30)
      goto LABEL_153;
    goto LABEL_127;
  }
LABEL_550:
  switch((unsigned __int16)*(_DWORD *)(v30 + 124) >> 13)
  {
    case 1:
      v65 = *(_QWORD *)(*(_QWORD *)(v30 + 88) + 24) + 176;
      break;
    case 2:
    case 4:
      v65 = *(_QWORD *)(*(_QWORD *)(v30 + 88) + 24) + 104;
      break;
    case 3:
    case 5:
      v65 = *(_QWORD *)(*(_QWORD *)(v30 + 88) + 24) + 128;
      break;
    default:
      v65 = *(_QWORD *)(*(_QWORD *)(v30 + 88) + 24) + 152;
      break;
  }
  if (a3)
  {
    v215 = v30;
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v30 + 80, v15, 0, &v333);
    v30 = v215;
  }
  else
  {
    v333 = 0;
  }
  v66 = *(float *)(v65 + 16);
  v67 = 0.0;
  if (v66 == 0.0 || (*(_BYTE *)(v65 + 20) & 0xF) == 0)
    goto LABEL_106;
  v67 = v66 * 64.0;
  if (v67 < 2147483650.0)
  {
    if (v67 > -2147483650.0)
    {
LABEL_106:
      v68 = (int)v67;
      goto LABEL_107;
    }
    v68 = 0x80000000;
  }
  else
  {
    v68 = 0x7FFFFFFF;
  }
LABEL_107:
  LODWORD(v335) = v68;
  v336 = v333;
  if ((v333 & 0x8000000000000) != 0)
  {
    v179 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFLL);
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 + 1, v179));
  }
  v69 = *(_BYTE *)(v65 + 20);
  v70 = v69 & 0xF;
  if (*(_DWORD *)(v65 + 8) || (v129 = *(_QWORD *)v65, (*(_QWORD *)v65 & 0x4000000000000) == 0))
  {
    v71 = 0;
  }
  else
  {
    if ((v129 & 0x8000000000000) != 0)
      v130 = *(float *)((v129 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v130 = *(_QWORD *)v65 != 0;
    if (v130)
      v71 = 0;
    else
      v71 = 0x80;
  }
  v72 = v70 | v71 | 0x40;
  LOBYTE(v337) = v72;
  v73 = *(_BYTE *)(a1 + 16);
  if ((v73 & 0x70) == 0)
    goto LABEL_298;
  v74 = v73 & 0xF;
  if (v70 == 1)
  {
    v75 = (unint64_t *)a1;
    if (v74 != 1)
      goto LABEL_298;
  }
  else
  {
    if ((v69 & 0xF) == 0 || v74 == 1)
    {
      v75 = (unint64_t *)a1;
      goto LABEL_115;
    }
    if ((v73 & 0xF) == 0)
      goto LABEL_298;
    v173 = *(_DWORD *)a1;
    v174 = v335;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v175 = *(_DWORD *)a1;
    else
      v175 = 0;
    v176 = v69 & 0xE;
    if (v176)
      v177 = v335;
    else
      v177 = 0;
    if (v175 == v177)
    {
      v178 = v74 >= v70;
      if (v74 == v70)
      {
        v75 = (unint64_t *)a1;
        if ((*(_BYTE *)(a1 + 16) & 0x40) == 0)
        {
LABEL_298:
          v75 = &v335;
          v73 = v72;
        }
      }
      else
      {
        v75 = (unint64_t *)a1;
        if (!v178)
          goto LABEL_298;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v173 = 0;
      if (!v176)
        v174 = 0;
      v75 = (unint64_t *)a1;
      if (v173 < v174)
        goto LABEL_298;
    }
  }
LABEL_115:
  if ((v73 & 0xF) == 1)
  {
    v77 = 0;
    v76 = 0;
    v73 = 0;
  }
  else
  {
    v76 = *(_DWORD *)v75;
    v77 = v75[1];
    if ((v77 & 0x8000000000000) != 0)
    {
      v181 = v75[1];
      v182 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 + 1, v182));
      v73 = *((_BYTE *)v75 + 16);
      v77 = v181;
    }
  }
  *(_DWORD *)a1 = v76;
  v78 = *(_QWORD *)(a1 + 8);
  if ((v78 & 0x8000000000000) == 0)
  {
    if ((v77 & 0x8000000000000) == 0 && v78 == v77)
    {
LABEL_122:
      *(_BYTE *)(a1 + 16) = v73;
      goto LABEL_123;
    }
LABEL_120:
    if ((v78 & 0x8000000000000) != 0)
    {
      v323 = v77;
      v250 = v30;
      result = v78 & 0xFFFFFFFFFFFFLL;
      do
      {
        v251 = __ldaxr((unsigned int *)result);
        v252 = --v251 == 0;
      }
      while (__stlxr(v251, (unsigned int *)result));
      v77 = v323;
      if (v252)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, (void *)v30);
        v77 = v323;
        v30 = v250;
      }
    }
    *(_QWORD *)(a1 + 8) = v77;
    goto LABEL_122;
  }
  if ((v77 & 0x8000000000000) == 0)
    goto LABEL_120;
  v320 = (void *)v30;
  v326 = v77;
  v332 = *(_OWORD *)((v78 & 0xFFFFFFFFFFFFLL) + 4);
  v283 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
  v334 = *(_OWORD *)((v77 & 0xFFFFFFFFFFFFLL) + 4);
  result = WebCore::operator==<float,4ul>((float *)&v332, (float *)&v334);
  v78 = *v20;
  if (!(_DWORD)result || HIBYTE(v78) != HIBYTE(v326))
  {
    v30 = (uint64_t)v320;
    v77 = v326;
    goto LABEL_120;
  }
  v30 = (uint64_t)v320;
  v77 = v326;
  if (BYTE6(v78) != BYTE6(v326))
    goto LABEL_120;
  *(_BYTE *)(a1 + 16) = v73;
  do
  {
    v284 = __ldaxr(v283);
    v285 = v284 - 1;
  }
  while (__stlxr(v285, v283));
  v30 = (uint64_t)v320;
  if (!v285)
  {
    atomic_store(1u, v283);
    result = WTF::fastFree((WTF *)v283, v320);
    v30 = (uint64_t)v320;
  }
LABEL_123:
  if ((v336 & 0x8000000000000) != 0)
  {
    v255 = v30;
    result = v336 & 0xFFFFFFFFFFFFLL;
    do
    {
      v256 = __ldaxr((unsigned int *)result);
      v257 = v256 - 1;
    }
    while (__stlxr(v257, (unsigned int *)result));
    if (!v257)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)v30);
      v30 = v255;
    }
  }
  if ((v333 & 0x8000000000000) != 0)
  {
    v258 = v30;
    result = v333 & 0xFFFFFFFFFFFFLL;
    do
    {
      v259 = __ldaxr((unsigned int *)result);
      v260 = v259 - 1;
    }
    while (__stlxr(v260, (unsigned int *)result));
    if (!v260)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)v30);
      v30 = v258;
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_153;
  result = WebCore::RenderTable::sectionAbove((WebCore::RenderTable *)v28, v30, 1);
  if (!result)
    goto LABEL_127;
  switch((unsigned __int16)*(_DWORD *)(result + 124) >> 13)
  {
    case 1:
      v140 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 152;
      break;
    case 2:
    case 4:
      v140 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 128;
      break;
    case 3:
    case 5:
      v140 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 104;
      break;
    default:
      v140 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 176;
      break;
  }
  if (a3)
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(result + 80, v14, 0, &v333);
  else
    v333 = 0;
  v141 = *(float *)(v140 + 16);
  v142 = 0.0;
  if (v141 == 0.0 || (*(_BYTE *)(v140 + 20) & 0xF) == 0)
    goto LABEL_270;
  v142 = v141 * 64.0;
  if (v142 < 2147483650.0)
  {
    if (v142 > -2147483650.0)
    {
LABEL_270:
      v143 = (int)v142;
      goto LABEL_271;
    }
    v143 = 0x80000000;
  }
  else
  {
    v143 = 0x7FFFFFFF;
  }
LABEL_271:
  LODWORD(v335) = v143;
  v336 = v333;
  if ((v333 & 0x8000000000000) != 0)
  {
    v221 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFLL);
    do
      v222 = __ldaxr(v221);
    while (__stlxr(v222 + 1, v221));
  }
  v144 = *(_BYTE *)(v140 + 20);
  v145 = v144 & 0xF;
  if (*(_DWORD *)(v140 + 8) || (v157 = *(_QWORD *)v140, (*(_QWORD *)v140 & 0x4000000000000) == 0))
  {
    v146 = 0;
  }
  else
  {
    if ((v157 & 0x8000000000000) != 0)
      v158 = *(float *)((v157 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v158 = *(_QWORD *)v140 != 0;
    if (v158)
      v146 = 0;
    else
      v146 = 0x80;
  }
  v147 = v145 | v146 | 0x40;
  LOBYTE(v337) = v147;
  v148 = *(_BYTE *)(a1 + 16);
  if ((v148 & 0x70) == 0)
    goto LABEL_281;
  v149 = v148 & 0xF;
  if (v149 == 1)
  {
    if (v145 != 1)
      goto LABEL_320;
    goto LABEL_281;
  }
  if (v145 == 1 || v149 == 0)
    goto LABEL_281;
  if ((v144 & 0xF) != 0)
  {
    v216 = v335;
    v217 = *(_DWORD *)a1;
    v218 = v144 & 0xE;
    if (v218)
      v219 = v335;
    else
      v219 = 0;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v220 = *(_DWORD *)a1;
    else
      v220 = 0;
    if (v219 == v220)
    {
      if (v145 == v149)
      {
        if ((v148 & 0x70u) > 0x40)
          goto LABEL_320;
      }
      else if (v145 < v149)
      {
        goto LABEL_320;
      }
    }
    else
    {
      if (!v218)
        v216 = 0;
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v217 = 0;
      if (v216 < v217)
        goto LABEL_320;
    }
LABEL_281:
    v151 = &v335;
    goto LABEL_282;
  }
LABEL_320:
  v147 = *(_BYTE *)(a1 + 16);
  v151 = (unint64_t *)a1;
LABEL_282:
  if ((v147 & 0xF) == 1)
  {
    v153 = 0;
    v152 = 0;
    v147 = 0;
  }
  else
  {
    v152 = *(_DWORD *)v151;
    v153 = v151[1];
    if ((v153 & 0x8000000000000) != 0)
    {
      v223 = (unsigned int *)(v153 & 0xFFFFFFFFFFFFLL);
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 + 1, v223));
      v147 = *((_BYTE *)v151 + 16);
    }
  }
  *(_DWORD *)a1 = v152;
  v154 = *(_QWORD *)(a1 + 8);
  if ((v154 & 0x8000000000000) == 0)
  {
    if ((v153 & 0x8000000000000) == 0 && v154 == v153)
    {
LABEL_289:
      *(_BYTE *)(a1 + 16) = v147;
      goto LABEL_290;
    }
LABEL_287:
    if ((v154 & 0x8000000000000) != 0)
    {
      result = v154 & 0xFFFFFFFFFFFFLL;
      do
      {
        v300 = __ldaxr((unsigned int *)result);
        v301 = v300 - 1;
      }
      while (__stlxr(v301, (unsigned int *)result));
      if (!v301)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, (void *)v30);
      }
    }
    *(_QWORD *)(a1 + 8) = v153;
    goto LABEL_289;
  }
  if ((v153 & 0x8000000000000) == 0)
    goto LABEL_287;
  v332 = *(_OWORD *)((v154 & 0xFFFFFFFFFFFFLL) + 4);
  v304 = (unsigned int *)(v153 & 0xFFFFFFFFFFFFLL);
  v334 = *(_OWORD *)((v153 & 0xFFFFFFFFFFFFLL) + 4);
  result = WebCore::operator==<float,4ul>((float *)&v332, (float *)&v334);
  v154 = *v20;
  if (!(_DWORD)result || HIBYTE(v154) != HIBYTE(v153) || BYTE6(v154) != BYTE6(v153))
    goto LABEL_287;
  *(_BYTE *)(a1 + 16) = v147;
  do
  {
    v305 = __ldaxr(v304);
    v306 = v305 - 1;
  }
  while (__stlxr(v306, v304));
  if (!v306)
  {
    atomic_store(1u, v304);
    result = WTF::fastFree((WTF *)(v153 & 0xFFFFFFFFFFFFLL), (void *)v30);
  }
LABEL_290:
  if ((v336 & 0x8000000000000) != 0)
  {
    result = v336 & 0xFFFFFFFFFFFFLL;
    do
    {
      v302 = __ldaxr((unsigned int *)result);
      v303 = v302 - 1;
    }
    while (__stlxr(v303, (unsigned int *)result));
    if (!v303)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)v30);
    }
  }
  if ((v333 & 0x8000000000000) != 0)
  {
    result = v333 & 0xFFFFFFFFFFFFLL;
    do
    {
      v155 = __ldaxr((unsigned int *)result);
      v156 = --v155 == 0;
    }
    while (__stlxr(v155, (unsigned int *)result));
    goto LABEL_614;
  }
LABEL_153:
  if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
  {
    *(_DWORD *)(a2 + 248) |= 0x10000000u;
LABEL_155:
    v93 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
    if (*(_BYTE *)(v93 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DA92CLL);
    }
    v94 = *(_QWORD *)(*(_QWORD *)(v93 + 32) + 8);
    if (*(_BYTE *)(v94 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DA94CLL);
    }
    v95 = *(_QWORD *)(*(_QWORD *)(v94 + 32) + 8);
    v96 = *(unsigned __int8 *)(v95 + 46);
    if (v96 != 35 && v96 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DB0D4);
    }
    *(_BYTE *)(v95 + 328) |= 2u;
    goto LABEL_160;
  }
  v225 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 248) = *(_DWORD *)(a2 + 248) & 0xEFFFFFFF | ((*(_DWORD *)a1 == 0) << 28);
  if (!v225)
    goto LABEL_155;
LABEL_160:
  if (a3 && (*(_BYTE *)(a2 + 251) & 0x10) == 0)
  {
    v97 = *(_QWORD *)(a2 + 32);
    if (v97)
    {
      v97 = *(_QWORD *)(v97 + 8);
      if (v97)
      {
        if (*(_BYTE *)(v97 + 46) != 39)
        {
          __break(0xC471u);
          JUMPOUT(0x1944DAEA0);
        }
        v97 = *(_QWORD *)(v97 + 32);
        if (v97)
        {
          v97 = *(_QWORD *)(v97 + 8);
          if (v97)
          {
            if (*(_BYTE *)(v97 + 46) != 40)
            {
              __break(0xC471u);
              JUMPOUT(0x1944DAEC0);
            }
          }
        }
      }
    }
    v329 = *(_DWORD *)a1;
    v98 = *(_QWORD *)(a1 + 8);
    v330 = v98;
    if ((v98 & 0x8000000000000) != 0)
    {
      v226 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFLL);
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 + 1, v226));
    }
    v331 = *(_BYTE *)(a1 + 16);
    *(_QWORD *)&v332 = a2;
    DWORD2(v332) = 0;
    result = WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::inlineSet<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue&>((uint64_t *)(v97 + 272), &v332, (uint64_t)&v329, (uint64_t)&v335);
    if ((v330 & 0x8000000000000) != 0)
    {
      result = v330 & 0xFFFFFFFFFFFFLL;
      do
      {
        v100 = __ldaxr((unsigned int *)result);
        v101 = v100 - 1;
      }
      while (__stlxr(v101, (unsigned int *)result));
      if (!v101)
      {
        atomic_store(1u, (unsigned int *)result);
        return WTF::fastFree((WTF *)result, v99);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderTable::cellAbove(WebCore::RenderTable *this, const WebCore::RenderTableCell *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  if (*(_BYTE *)(v4 + 46) != 39)
    goto LABEL_34;
  v5 = *(_QWORD *)(v4 + 32);
  v6 = *(_DWORD *)(v4 + 200) & 0x7FFFFFFF;
  if (v6)
  {
    if (!v5)
      return 0;
    result = *(_QWORD *)(v5 + 8);
    if (!result)
      return result;
    if (*(_BYTE *)(result + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DC114);
    }
    goto LABEL_13;
  }
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (v7 && *(_BYTE *)(v7 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DC0F4);
    }
  }
  else
  {
    v7 = 0;
  }
  result = WebCore::RenderTable::sectionAbove(this, v7, 1);
  if (result)
  {
    v6 = *(_DWORD *)(result + 212);
LABEL_13:
    v9 = *((_DWORD *)a2 + 62) & 0x1FFFFFF;
    if ((*((_BYTE *)this + 328) & 0x40) != 0)
    {
      v14 = *((unsigned int *)this + 57);
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = 0;
        while (1)
        {
          v16 += *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v15);
          if (v16 - 1 >= v9)
            break;
          if (v14 == ++v15)
          {
            v9 = *((_DWORD *)this + 57);
            goto LABEL_14;
          }
        }
        v9 = v15;
      }
      else
      {
        v9 = 0;
      }
    }
LABEL_14:
    v10 = v6 - 1;
    if (*(_BYTE *)(result + 282))
    {
      v17 = result;
      v18 = v10;
      WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)result);
      v10 = v18;
      result = v17;
    }
    if (*(_DWORD *)(result + 212) <= v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DC180);
    }
    v11 = *(_QWORD *)(result + 200) + 40 * v10;
    if (*(_DWORD *)(v11 + 12) > v9)
    {
      v12 = *(_QWORD *)v11 + 32 * v9;
      v13 = *(unsigned int *)(v12 + 12);
      if ((_DWORD)v13)
        return *(_QWORD *)(*(_QWORD *)v12 + 8 * v13 - 8);
      return 0;
    }
LABEL_34:
    __break(0xC471u);
    JUMPOUT(0x1944DC0D4);
  }
  return result;
}

uint64_t WebCore::RenderTable::sectionAbove(WebCore::RenderTable *this, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, (void *)a2);
  v6 = *((_QWORD *)this + 34);
  if (v6)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  if (v7 == a2)
    return 0;
  v8 = *((_QWORD *)this + 35);
  if (v8)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  if (v9 == a2)
  {
    v10 = *((unsigned __int8 *)this + 75);
    v11 = *(unsigned int *)((char *)this + 71);
  }
  else
  {
    v10 = *(unsigned __int8 *)(a2 + 44);
    v11 = *(unsigned int *)(a2 + 40);
  }
  v12 = v11 | (v10 << 32);
  if (v12 && (result = *(_QWORD *)(v12 + 8)) != 0)
  {
    if (a3)
    {
      if (v6)
      {
        if (v8)
        {
          while (*(_BYTE *)(result + 46) != 40
               || *(_QWORD *)(v6 + 8) == result
               || *(_QWORD *)(v8 + 8) == result
               || !*(_DWORD *)(result + 212))
          {
            v21 = *(unsigned int *)(result + 40);
            if (v21 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32))
            {
              result = *(_QWORD *)((v21 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32)) + 8);
              if (result)
                continue;
            }
            goto LABEL_12;
          }
        }
        else
        {
          while (*(_BYTE *)(result + 46) != 40 || *(_QWORD *)(v6 + 8) == result || !*(_DWORD *)(result + 212))
          {
            v16 = *(unsigned int *)(result + 40);
            if (v16 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32))
            {
              result = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32)) + 8);
              if (result)
                continue;
            }
            goto LABEL_12;
          }
        }
      }
      else if (v8)
      {
        while (*(_BYTE *)(result + 46) != 40 || *(_QWORD *)(v8 + 8) == result || !*(_DWORD *)(result + 212))
        {
          v20 = *(unsigned int *)(result + 40);
          if (v20 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32))
          {
            result = *(_QWORD *)((v20 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32)) + 8);
            if (result)
              continue;
          }
          goto LABEL_12;
        }
      }
      else
      {
        while (*(_BYTE *)(result + 46) != 40 || !*(_DWORD *)(result + 212))
        {
          v14 = *(unsigned int *)(result + 40);
          if (v14 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32))
          {
            result = *(_QWORD *)((v14 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32)) + 8);
            if (result)
              continue;
          }
          goto LABEL_12;
        }
      }
    }
    else if (v6)
    {
      if (v8)
      {
        while (*(_BYTE *)(result + 46) != 40 || *(_QWORD *)(v6 + 8) == result || *(_QWORD *)(v8 + 8) == result)
        {
          v19 = *(unsigned int *)(result + 40);
          if (v19 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32))
          {
            result = *(_QWORD *)((v19 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32)) + 8);
            if (result)
              continue;
          }
          goto LABEL_12;
        }
      }
      else
      {
        while (*(_BYTE *)(result + 46) != 40 || *(_QWORD *)(v6 + 8) == result)
        {
          v17 = *(unsigned int *)(result + 40);
          if (v17 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32))
          {
            result = *(_QWORD *)((v17 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32)) + 8);
            if (result)
              continue;
          }
          goto LABEL_12;
        }
      }
    }
    else
    {
      while (1)
      {
        if (*(_BYTE *)(result + 46) == 40)
        {
          v18 = v8 ? *(_QWORD *)(v8 + 8) : 0;
          if (v18 != result)
            break;
        }
        v15 = *(unsigned int *)(result + 40);
        if (v15 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32))
        {
          result = *(_QWORD *)((v15 | ((unint64_t)*(unsigned __int8 *)(result + 44) << 32)) + 8);
          if (result)
            continue;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    if (!v6)
      return 0;
    result = *(_QWORD *)(v6 + 8);
    if (result)
    {
      if (a3 && !*(_DWORD *)(result + 212))
        return 0;
    }
  }
  return result;
}

uint64_t WebCore::Node::moveTreeToNewScope(uint64_t this, WebCore::Node *a2, WebCore::TreeScope *a3, WebCore::TreeScope *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  BOOL v23;
  _BOOL4 v24;
  unsigned __int8 *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  BOOL v36;
  _BOOL4 v37;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  BOOL v56;
  _BOOL4 v57;
  unsigned __int8 *v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  unsigned __int8 *v65;
  BOOL v66;
  _BOOL4 v67;
  unsigned __int8 *v69;
  BOOL v70;
  _BOOL4 v71;
  uint64_t v73;
  BOOL v74;
  _BOOL4 v75;
  unsigned __int8 *v77;
  BOOL v78;
  _BOOL4 v79;
  uint64_t v81;
  BOOL v82;
  _BOOL4 v83;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  int v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  int i;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 v106;
  int v107;
  uint64_t v108;
  WebCore::ShadowRoot *v109;
  uint64_t v110;
  WebCore::Document *v111;
  __n128 v112;
  int v114;
  __int16 v115;
  __int16 v116;
  WTF::StringImpl **v117;
  uint64_t v118;
  int v119;
  WTF::StringImpl **v120;
  uint64_t v121;
  WTF *v123;
  void *v124;
  unint64_t v125;
  uint64_t v126;
  WTF::StringImpl **v127;
  uint64_t v128;
  int v129;
  WTF::StringImpl **v130;
  uint64_t v131;
  WTF *v133;
  void *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141[3];
  _QWORD v142[5];
  BOOL v143;
  uint64_t *v144[5];
  uint64_t *v145;
  uint64_t *v146;

  v6 = this;
  v7 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a3 + 1);
  v143 = (*(_QWORD *)(*(_QWORD *)a3 + 16) & 0x20000000000000) != 0;
  v140 = this;
  if (v7 == v8)
  {
    v9 = (_QWORD *)(this + 40);
    if (*(WebCore::Node **)(this + 40) != a2)
    {
LABEL_279:
      __break(0xC471u);
      JUMPOUT(0x1944DCE04);
    }
    v10 = this;
    while (1)
    {
      if (v143)
        *(_QWORD *)(v10 + 16) |= 0x20000000000000uLL;
      *v9 = a3;
      v11 = (_QWORD *)(*(_QWORD *)(v10 + 72) & 0xFFFFFFFFFFFFLL);
      if (v11)
      {
        v12 = (_QWORD *)*v11;
        if (*v11)
          break;
      }
LABEL_39:
      v32 = *(_WORD *)(v10 + 28);
      if ((v32 & 8) != 0)
        v33 = v10;
      else
        v33 = 0;
      if ((v32 & 8) != 0)
      {
        v139 = v33;
        if ((*(_BYTE *)(v10 + 22) & 0x80) == 0
          || (this = (uint64_t)WebCore::Element::attrNodeList((WebCore::Element *)v10),
              v40 = *(unsigned int *)(this + 12),
              !(_DWORD)v40))
        {
LABEL_48:
          v6 = v140;
          if ((*(_QWORD *)(v139 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v108 = *(_QWORD *)((*(_QWORD *)(v139 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
            if (v108)
            {
              *(_QWORD *)(v108 + 112) = a3;
              *(_QWORD *)(v108 + 104) = *((_QWORD *)a3 + 1);
            }
          }
          goto LABEL_43;
        }
        v41 = *(_QWORD *)this;
        v42 = *(_QWORD *)this + 8 * v40;
        while (2)
        {
          v43 = *(_QWORD **)v41;
          if (*(WebCore::Node **)(*(_QWORD *)v41 + 40) != a2)
          {
            __break(0xC471u);
            JUMPOUT(0x1944DCDC4);
          }
          if (v143)
            v43[2] |= 0x20000000000000uLL;
          v43[5] = a3;
          v44 = (_QWORD *)(v43[9] & 0xFFFFFFFFFFFFLL);
          if (!v44)
            goto LABEL_75;
          v45 = (_QWORD *)*v44;
          if (!*v44)
            goto LABEL_75;
          v46 = v45[2];
          if (!v46)
          {
            v47 = 0;
            LODWORD(v48) = 0;
            goto LABEL_83;
          }
          v48 = *(unsigned int *)(v46 - 4);
          v49 = (unsigned __int8 *)(v46 + 24 * v48);
          if (*(_DWORD *)(v46 - 12))
          {
            v47 = (unsigned __int8 *)v45[2];
            if ((_DWORD)v48)
            {
              v73 = 24 * v48;
              v47 = (unsigned __int8 *)v45[2];
              while (1)
              {
                v74 = !*v47 && *((_QWORD *)v47 + 1) == 0;
                v75 = v74;
                if (*v47 != 255 && !v75)
                  break;
                v47 += 24;
                v73 -= 24;
                if (!v73)
                {
                  v47 = v49;
                  break;
                }
              }
            }
          }
          else
          {
            v47 = (unsigned __int8 *)(v46 + 24 * v48);
LABEL_83:
            v49 = (unsigned __int8 *)(v46 + 24 * v48);
          }
          if (v46)
            v50 = (unsigned __int8 *)(v46 + 24 * *(unsigned int *)(v46 - 4));
          else
            v50 = 0;
          while (v47 != v50)
          {
            this = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v47 + 2) + 80))(*((_QWORD *)v47 + 2), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v47 + 2) + 24) + 40) + 8));
            v69 = v47 + 24;
            v47 = v49;
            if (v69 != v49)
            {
              v47 = v69;
              while (1)
              {
                v70 = !*v47 && *((_QWORD *)v47 + 1) == 0;
                v71 = v70;
                if (*v47 != 255 && !v71)
                  break;
                v47 += 24;
                if (v47 == v49)
                {
                  v47 = v49;
                  break;
                }
              }
            }
          }
          v51 = v45[4];
          if (v51)
          {
            v52 = *(unsigned int *)(v51 - 4);
            v53 = (unsigned __int8 *)(v51 + 24 * v52);
            if (*(_DWORD *)(v51 - 12))
            {
              v54 = (unsigned __int8 *)v45[4];
              if ((_DWORD)v52)
              {
                v55 = 24 * v52;
                v54 = (unsigned __int8 *)v45[4];
                while (1)
                {
                  v56 = !*v54 && *((_QWORD *)v54 + 1) == 0;
                  v57 = v56;
                  if (*v54 != 255 && !v57)
                    break;
                  v54 += 24;
                  v55 -= 24;
                  if (!v55)
                  {
                    v54 = v53;
                    goto LABEL_107;
                  }
                }
              }
LABEL_106:
              if (v51)
LABEL_107:
                v59 = (unsigned __int8 *)(v51 + 24 * *(unsigned int *)(v51 - 4));
              else
                v59 = 0;
              while (v54 != v59)
              {
                this = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v54 + 2) + 72))(*((_QWORD *)v54 + 2), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v54 + 2) + 24) + 40) + 8));
                v65 = v54 + 24;
                v54 = v53;
                if (v65 != v53)
                {
                  v54 = v65;
                  while (1)
                  {
                    v66 = !*v54 && *((_QWORD *)v54 + 1) == 0;
                    v67 = v66;
                    if (*v54 != 255 && !v67)
                      break;
                    v54 += 24;
                    if (v54 == v53)
                    {
                      v54 = v53;
                      break;
                    }
                  }
                }
              }
              v60 = (uint64_t *)v45[3];
              if (!v60)
              {
                v61 = 0;
                v62 = 0;
                goto LABEL_111;
              }
              v137 = v41;
              v138 = v42;
              v62 = *((unsigned int *)v60 - 1);
              v63 = &v60[2 * v62];
              if (*((_DWORD *)v60 - 3))
              {
                if ((_DWORD)v62)
                {
                  v117 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                  {
                    v118 = 16 * v62;
                    while (1)
                    {
                      if (v117)
                      {
                        v119 = (*(_DWORD *)v117)++;
                        v120 = (WTF::StringImpl **)*v60;
                        if (v119)
                        {
                          *(_DWORD *)v117 = v119;
                          v121 = (uint64_t)v117;
                        }
                        else
                        {
                          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v117);
                          this = WTF::fastFree(v123, v124);
                          v121 = WebCore::nullName;
                        }
                      }
                      else
                      {
                        v121 = 0;
                        v120 = (WTF::StringImpl **)*v60;
                      }
                      if (v120 != v117 && *v60 != -1)
                        break;
                      v60 += 2;
                      v117 = (WTF::StringImpl **)v121;
                      v118 -= 16;
                      if (!v118)
                      {
                        v60 = v63;
                        break;
                      }
                    }
                    v61 = v60;
                    v60 = (uint64_t *)v45[3];
                  }
                  else
                  {
                    v125 = 0;
                    v126 = 16 * v62;
                    while ((unint64_t)(v60[v125 / 8] + 1) <= 1)
                    {
                      v125 += 16;
                      if (v126 == v125)
                      {
                        v61 = v63;
                        goto LABEL_335;
                      }
                    }
                    v61 = &v60[v125 / 8];
                  }
                }
                else
                {
                  v61 = (uint64_t *)v45[3];
                }
LABEL_335:
                v41 = v137;
                v42 = v138;
              }
              else
              {
                v61 = &v60[2 * v62];
LABEL_111:
                v63 = &v60[2 * v62];
              }
              v145 = v61;
              v146 = v63;
              if (v60)
                v64 = &v60[2 * *((unsigned int *)v60 - 1)];
              else
                v64 = 0;
              if (v64 != v61)
              {
                do
                {
                  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v61[1] + 72))(v61[1], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v61[1] + 24) + 40) + 8));
                  this = (uint64_t)WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++((WTF::StringImpl ****)&v145);
                  v61 = v145;
                }
                while (v145 != v64);
              }
LABEL_75:
              v41 += 8;
              if (v41 == v42)
                goto LABEL_48;
              continue;
            }
            v54 = (unsigned __int8 *)(v51 + 24 * v52);
          }
          else
          {
            v54 = 0;
            LODWORD(v52) = 0;
          }
          break;
        }
        v53 = (unsigned __int8 *)(v51 + 24 * v52);
        goto LABEL_106;
      }
LABEL_43:
      if ((*(_WORD *)(v10 + 28) & 4) == 0 || (v34 = *(_QWORD *)(v10 + 80)) == 0)
      {
        if (v10 == v6)
          return this;
        while (1)
        {
          v34 = *(_QWORD *)(v10 + 56);
          if (v34)
            break;
          v10 = *(_QWORD *)(v10 + 32);
          if (v10)
            v39 = v10 == v6;
          else
            v39 = 1;
          if (v39)
            return this;
        }
      }
      v9 = (_QWORD *)(v34 + 40);
      v10 = v34;
      if (*(WebCore::Node **)(v34 + 40) != a2)
        goto LABEL_279;
    }
    v13 = v12[2];
    if (v13)
    {
      v15 = *(unsigned int *)(v13 - 4);
      v16 = (unsigned __int8 *)(v13 + 24 * v15);
      if (*(_DWORD *)(v13 - 12))
      {
        v14 = (unsigned __int8 *)v12[2];
        if ((_DWORD)v15)
        {
          v81 = 24 * v15;
          v14 = (unsigned __int8 *)v12[2];
          while (1)
          {
            v82 = !*v14 && *((_QWORD *)v14 + 1) == 0;
            v83 = v82;
            if (*v14 != 255 && !v83)
              break;
            v14 += 24;
            v81 -= 24;
            if (!v81)
            {
              v14 = v16;
              break;
            }
          }
        }
LABEL_11:
        if (v13)
          v17 = (unsigned __int8 *)(v13 + 24 * *(unsigned int *)(v13 - 4));
        else
          v17 = 0;
        while (v14 != v17)
        {
          this = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v14 + 2) + 80))(*((_QWORD *)v14 + 2), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v14 + 2) + 24) + 40) + 8));
          v77 = v14 + 24;
          v14 = v16;
          if (v77 != v16)
          {
            v14 = v77;
            while (1)
            {
              v78 = !*v14 && *((_QWORD *)v14 + 1) == 0;
              v79 = v78;
              if (*v14 != 255 && !v79)
                break;
              v14 += 24;
              if (v14 == v16)
              {
                v14 = v16;
                break;
              }
            }
          }
        }
        v18 = v12[4];
        if (v18)
        {
          v19 = *(unsigned int *)(v18 - 4);
          v20 = (unsigned __int8 *)(v18 + 24 * v19);
          if (*(_DWORD *)(v18 - 12))
          {
            v21 = (unsigned __int8 *)v12[4];
            if ((_DWORD)v19)
            {
              v22 = 24 * v19;
              v21 = (unsigned __int8 *)v12[4];
              while (1)
              {
                v23 = !*v21 && *((_QWORD *)v21 + 1) == 0;
                v24 = v23;
                if (*v21 != 255 && !v24)
                  break;
                v21 += 24;
                v22 -= 24;
                if (!v22)
                {
                  v21 = v20;
                  break;
                }
              }
            }
LABEL_30:
            if (v18)
              v26 = (unsigned __int8 *)(v18 + 24 * *(unsigned int *)(v18 - 4));
            else
              v26 = 0;
            while (v21 != v26)
            {
              this = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v21 + 2) + 72))(*((_QWORD *)v21 + 2), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v21 + 2) + 24) + 40) + 8));
              v35 = v21 + 24;
              v21 = v20;
              if (v35 != v20)
              {
                v21 = v35;
                while (1)
                {
                  v36 = !*v21 && *((_QWORD *)v21 + 1) == 0;
                  v37 = v36;
                  if (*v21 != 255 && !v37)
                    break;
                  v21 += 24;
                  if (v21 == v20)
                  {
                    v21 = v20;
                    break;
                  }
                }
              }
            }
            v27 = (uint64_t *)v12[3];
            if (v27)
            {
              v29 = *((unsigned int *)v27 - 1);
              v30 = &v27[2 * v29];
              if (*((_DWORD *)v27 - 3))
              {
                if ((_DWORD)v29)
                {
                  v127 = (WTF::StringImpl **)WebCore::nullName;
                  if (WebCore::nullName)
                  {
                    v128 = 16 * v29;
                    while (1)
                    {
                      if (v127)
                      {
                        v129 = (*(_DWORD *)v127)++;
                        v130 = (WTF::StringImpl **)*v27;
                        if (v129)
                        {
                          *(_DWORD *)v127 = v129;
                          v131 = (uint64_t)v127;
                        }
                        else
                        {
                          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v127);
                          this = WTF::fastFree(v133, v134);
                          v131 = WebCore::nullName;
                        }
                      }
                      else
                      {
                        v131 = 0;
                        v130 = (WTF::StringImpl **)*v27;
                      }
                      if (v130 != v127 && *v27 != -1)
                        break;
                      v27 += 2;
                      v127 = (WTF::StringImpl **)v131;
                      v128 -= 16;
                      if (!v128)
                      {
                        v27 = v30;
                        break;
                      }
                    }
                    v28 = v27;
                    v27 = (uint64_t *)v12[3];
                  }
                  else
                  {
                    v135 = 0;
                    v136 = 16 * v29;
                    while ((unint64_t)(v27[v135 / 8] + 1) <= 1)
                    {
                      v135 += 16;
                      if (v136 == v135)
                      {
                        v28 = v30;
                        goto LABEL_36;
                      }
                    }
                    v28 = &v27[v135 / 8];
                  }
                }
                else
                {
                  v28 = (uint64_t *)v12[3];
                }
                goto LABEL_36;
              }
              v28 = &v27[2 * v29];
            }
            else
            {
              v28 = 0;
              v29 = 0;
            }
            v30 = &v27[2 * v29];
LABEL_36:
            v145 = v28;
            v146 = v30;
            if (v27)
              v31 = &v27[2 * *((unsigned int *)v27 - 1)];
            else
              v31 = 0;
            v6 = v140;
            if (v31 != v28)
            {
              do
              {
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v28[1] + 72))(v28[1], *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28[1] + 24) + 40) + 8));
                this = (uint64_t)WTF::HashTableIteratorAdapter<WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WebCore::TagCollectionNS *,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::TagCollectionNS *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::TagCollectionNS *>>::operator++((WTF::StringImpl ****)&v145);
                v28 = v145;
              }
              while (v145 != v31);
            }
            goto LABEL_39;
          }
          v21 = (unsigned __int8 *)(v18 + 24 * v19);
        }
        else
        {
          v21 = 0;
          LODWORD(v19) = 0;
        }
        v20 = (unsigned __int8 *)(v18 + 24 * v19);
        goto LABEL_30;
      }
      v14 = (unsigned __int8 *)(v13 + 24 * v15);
    }
    else
    {
      v14 = 0;
      LODWORD(v15) = 0;
    }
    v16 = (unsigned __int8 *)(v13 + 24 * v15);
    goto LABEL_11;
  }
  ++*(_DWORD *)(v7 + 3324);
  v85 = *(_QWORD *)(v7 + 1304);
  if (v85
    && *(_DWORD *)(v85 - 12)
    && (WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)(v7 + 1304), &v145), this = (uint64_t)WTF::WeakHashSet<WebCore::ScrollableArea,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::end((uint64_t *)(v7 + 1304), v144), v146 != v144[1])|| (v86 = *(_QWORD *)(v7 + 1320)) != 0 && *(_DWORD *)(v86 - 12)|| *(_DWORD *)(v7 + 3308)|| *(_BYTE *)(v7 + 3364)|| *(_QWORD *)(v7 + 3040)|| *(_DWORD *)(v7 + 1768)|| *(_DWORD *)(v7 + 1772)|| *(_DWORD *)(v7 + 1776)|| *(_DWORD *)(v7 + 1780)|| *(_DWORD *)(v7 + 1784)|| *(_DWORD *)(v7 + 1788)|| *(_DWORD *)(v7 + 1792)|| *(_DWORD *)(v7 + 1796)|| *(_DWORD *)(v7 + 2028)
    || (v87 = atomic_load(WebCore::AXObjectCache::gAccessibilityEnabled), (v87 & 1) != 0)
    && WebCore::Document::hasEverCreatedAnAXObjectCache
    && (this = WebCore::Document::existingAXObjectCacheSlow((WebCore::Document *)v7)) != 0
    || (*(_BYTE *)(v7 + 3384) != 2) == (*(_BYTE *)(v8 + 3384) == 2)
    || v143)
  {
    v142[0] = a2;
    v142[1] = &v143;
    v142[2] = a3;
    v142[3] = v7;
    v142[4] = v8;
    v141[0] = (uint64_t)a3;
    v141[1] = v8;
    v141[2] = v7;
    this = (uint64_t)WebCore::traverseSubtreeToUpdateTreeScope<WebCore::Node::moveTreeToNewScope(WebCore::Node&,WebCore::TreeScope &,WebCore::TreeScope &)::$_2,WebCore::Node::moveTreeToNewScope(WebCore::Node&,WebCore::TreeScope &,WebCore::TreeScope &)::$_3>(v6, (uint64_t)v142, v141);
    goto LABEL_270;
  }
  if (*(WebCore::Node **)(v6 + 40) != a2)
  {
LABEL_288:
    __break(0xC471u);
    JUMPOUT(0x1944DCEACLL);
  }
  v88 = 0;
  v89 = v140;
  while (2)
  {
    *(_QWORD *)(v89 + 40) = a3;
    v90 = *(_WORD *)(v89 + 28);
    if (((v90 & 0x800) != 0
       || (*(_BYTE *)(v89 + 23) & 6) != 0
       || (*(_QWORD *)(v89 + 72) & 0x3000000000000000) == 0x2000000000000000)
      && (v90 & 8) != 0)
    {
      this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, WebCore::TreeScope *))(*(_QWORD *)v89 + 488))(v89, v7, v8, a4);
      v90 = *(_WORD *)(v89 + 28);
    }
    ++v88;
    if ((v90 & 8) != 0)
      v91 = v89;
    else
      v91 = 0;
    if ((v90 & 8) == 0)
      goto LABEL_229;
    if ((*(_BYTE *)(v89 + 22) & 0x80) == 0)
      goto LABEL_228;
    v94 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 8);
    v95 = (~(v89 << 32) + v89) ^ ((unint64_t)(~(v89 << 32) + v89) >> 22);
    v96 = 9 * ((v95 + ~(v95 << 13)) ^ ((v95 + ~(v95 << 13)) >> 8));
    v97 = (v96 ^ (v96 >> 15)) + ~((v96 ^ (v96 >> 15)) << 27);
    v98 = v94 & ((v97 >> 31) ^ v97);
    for (i = 1; ; ++i)
    {
      v100 = v98;
      v101 = *(_QWORD *)(WebCore::attrNodeListMap(void)::map + 24 * v98);
      if (v101 == -1)
        goto LABEL_244;
      if (!v101)
        break;
      if (*(_QWORD *)(v101 + 8) == v89)
        goto LABEL_245;
LABEL_244:
      v98 = (v100 + i) & v94;
    }
    v100 = *(_DWORD *)(WebCore::attrNodeListMap(void)::map - 4);
LABEL_245:
    v102 = WebCore::attrNodeListMap(void)::map + 24 * v100;
    v103 = *(unsigned int *)(v102 + 20);
    if ((_DWORD)v103)
    {
      v104 = *(_QWORD *)(v102 + 8);
      v105 = 8 * v103;
      do
      {
        this = *(_QWORD *)v104;
        if (*(WebCore::Node **)(*(_QWORD *)v104 + 40) != a2)
        {
          __break(0xC471u);
          JUMPOUT(0x1944DCDE4);
        }
        *(_QWORD *)(this + 40) = a3;
        v106 = *(_WORD *)(this + 28);
        if (((v106 & 0x800) != 0
           || (*(_BYTE *)(this + 23) & 6) != 0
           || (*(_QWORD *)(this + 72) & 0x3000000000000000) == 0x2000000000000000)
          && (v106 & 8) != 0)
        {
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 488))(this, v7, v8);
        }
        ++v88;
        v104 += 8;
        v105 -= 8;
      }
      while (v105);
    }
LABEL_228:
    if ((*(_QWORD *)(v91 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v109 = *(WebCore::ShadowRoot **)((*(_QWORD *)(v91 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (v109)
      {
        v110 = *((_QWORD *)v109 + 13);
        *(_DWORD *)(v110 + 24) += 2;
        *((_QWORD *)v109 + 14) = a3;
        *((_QWORD *)v109 + 13) = *((_QWORD *)a3 + 1);
        v112.n128_f64[0] = WebCore::ShadowRoot::moveShadowRootToNewDocument(v109, (WebCore::Document *)v110, (WebCore::Document *)v8);
        if (*(_DWORD *)(v110 + 24) == 2)
        {
          v115 = *(_WORD *)(v110 + 30);
          if ((v115 & 0x400) == 0)
          {
            v116 = *(_WORD *)(v110 + 28);
            if ((v116 & 0xF000) == 0x9000)
            {
              WebCore::Document::removedLastRef((WebCore::Document *)v110);
            }
            else
            {
              if ((v116 & 0x20) != 0)
              {
                (*(void (**)(_QWORD, double))(**(_QWORD **)(v110 + 160) + 16))(*(_QWORD *)(v110 + 160), v112.n128_f64[0]);
                v115 = *(_WORD *)(v110 + 30);
              }
              *(_WORD *)(v110 + 30) = v115 | 0x400;
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v110 + 72))(v110, v112);
            }
          }
        }
        else
        {
          *(_DWORD *)(v110 + 24) -= 2;
        }
        this = WebCore::Node::moveShadowTreeToNewDocumentFastCase(v109, (WebCore::ShadowRoot *)v7, (WebCore::Document *)v8, v111);
        v88 += this;
      }
    }
LABEL_229:
    if ((*(_WORD *)(v89 + 28) & 4) != 0)
    {
      v92 = *(_QWORD *)(v89 + 80);
      if (v92)
      {
LABEL_238:
        v89 = v92;
        if (*(WebCore::Node **)(v92 + 40) != a2)
          goto LABEL_288;
        continue;
      }
    }
    break;
  }
  if (v89 != v140)
  {
    do
    {
      v92 = *(_QWORD *)(v89 + 56);
      if (v92)
        goto LABEL_238;
      v89 = *(_QWORD *)(v89 + 32);
      if (v89)
        v93 = v89 == v140;
      else
        v93 = 1;
    }
    while (!v93);
  }
  *(_DWORD *)(v8 + 3324) += v88;
  v107 = *(_DWORD *)(v7 + 3324) - v88;
  *(_DWORD *)(v7 + 3324) = v107;
  if (!v107 && *(_DWORD *)(v7 + 24) <= 1u && (*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    *(_WORD *)(v7 + 30) |= 0x400u;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  }
LABEL_270:
  if (*((_QWORD *)a2 + 1) != v7 || *((_QWORD *)a3 + 1) != v8)
  {
    __break(0xC471u);
    JUMPOUT(0x1944DCE5CLL);
  }
  v114 = *(_DWORD *)(v7 + 3324) - 1;
  *(_DWORD *)(v7 + 3324) = v114;
  if (!v114 && *(_DWORD *)(v7 + 24) <= 1u && (*(_WORD *)(v7 + 30) & 0x400) == 0)
  {
    *(_WORD *)(v7 + 30) |= 0x400u;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  }
  return this;
}

uint64_t WebCore::VisitedLinkState::determineLinkStateSlowCase(WebCore::VisitedLinkState *this, const WebCore::Element *a2, const WTF::AtomString *a3)
{
  __int16 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  WebCore::Page *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _DWORD *v27;
  int v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned __int8 v37;
  unsigned int v38;
  unsigned int v39;
  WTF *v41;
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  WTF::StringImpl *v45;
  _QWORD *v46;

  if ((*((_WORD *)a2 + 15) & 1) == 0)
    goto LABEL_61;
  v5 = *((_WORD *)a2 + 14);
  if ((v5 & 0x10) != 0)
  {
    v6 = *((_QWORD *)a2 + 13);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) != 0)
      {
        v8 = *(_QWORD *)(v6 + 40);
        LODWORD(v9) = *(_DWORD *)(v6 + 52);
      }
      else
      {
        v8 = v6 + 32;
        LODWORD(v9) = v7 >> 5;
      }
      if ((_DWORD)v9)
      {
        v9 = v9;
        v10 = (WTF::StringImpl **)(v8 + 8);
        while (1)
        {
          v11 = (uint64_t)*(v10 - 1);
          if (v11 == WebCore::HTMLNames::hrefAttr
            || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
            && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
          {
            break;
          }
          v10 += 2;
          if (!--v9)
          {
            v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
LABEL_12:
        v12 = *v10;
        if (*v10)
          goto LABEL_13;
        return 0;
      }
    }
LABEL_61:
    v10 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_12;
  }
  if ((v5 & 0x20) == 0)
    goto LABEL_61;
  v12 = (WTF::StringImpl *)*WebCore::Element::getAttribute<WTF::LazyNeverDestroyed<WebCore::QualifiedName const,WTF::AnyThreadsAccessTraits>>(a2);
  if (!v12)
    return 0;
LABEL_13:
  *(_DWORD *)v12 += 2;
  v45 = v12;
  v13 = WebCore::linkHashForElement(a2, a2, a3);
  if (HIDWORD(v13))
  {
    v15 = v13;
    if (!(_DWORD)v13)
    {
      v37 = 2;
      goto LABEL_44;
    }
    v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 528);
    if (!v16 || (v17 = *(_QWORD *)(v16 + 8)) == 0)
    {
      v37 = 1;
      goto LABEL_44;
    }
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v20 = *(_QWORD *)(v17 + 24);
    if (!v20 || (v21 = *(WebCore::Page **)(v20 + 8)) == 0)
    {
      v37 = 1;
      do
      {
LABEL_42:
        v38 = __ldaxr(v18);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v18));
      if (!v39)
      {
        atomic_store(1u, v18);
        v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v43 = off_1E31FE290;
        v43[1] = v18;
        v46 = v43;
        WTF::ensureOnMainThread();
        v44 = v46;
        v46 = 0;
        if (v44)
          (*(void (**)(_QWORD *))(*v44 + 8))(v44);
      }
LABEL_44:
      v12 = v45;
      v45 = 0;
      if (!v12)
        return v37;
      goto LABEL_45;
    }
    ++*(_DWORD *)v21;
    v24 = *((_QWORD *)this + 2);
    v23 = (uint64_t *)((char *)this + 16);
    v22 = v24;
    if (v24
      || (WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(v23),
          (v22 = *v23) != 0))
    {
      v25 = *(_DWORD *)(v22 - 8);
    }
    else
    {
      v25 = 0;
    }
    v26 = v25 & v15;
    v27 = (_DWORD *)(v22 + 4 * (v25 & v15));
    v28 = *v27;
    if (*v27)
    {
      v29 = 0;
      v30 = 1;
      while (v28 != (_DWORD)v15)
      {
        if (v28 == -1)
          v29 = v27;
        v26 = (v26 + v30) & v25;
        v27 = (_DWORD *)(v22 + 4 * v26);
        v28 = *v27;
        ++v30;
        if (!*v27)
        {
          if (v29)
          {
            *v29 = 0;
            --*(_DWORD *)(*v23 - 16);
            v27 = v29;
          }
          goto LABEL_31;
        }
      }
      goto LABEL_37;
    }
LABEL_31:
    *v27 = v15;
    v31 = *v23;
    if (*v23)
      v32 = *(_DWORD *)(v31 - 12) + 1;
    else
      v32 = 1;
    *(_DWORD *)(v31 - 12) = v32;
    v33 = *v23;
    if (*v23)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    v35 = (*(_DWORD *)(v33 - 16) + v34);
    v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35)
        goto LABEL_37;
    }
    else if (3 * v36 > 4 * v35)
    {
LABEL_37:
      if ((*(unsigned int (**)(_QWORD *, WebCore::Page *, unint64_t, uint64_t, WTF::StringImpl **))(**((_QWORD **)v21 + 119) + 16))(*((_QWORD **)v21 + 119), v21, v15, *(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 848, &v45))
      {
        v37 = 2;
      }
      else
      {
        v37 = 1;
      }
      if (*(_DWORD *)v21 == 1)
      {
        WebCore::Page::~Page(v21);
        WTF::fastFree(v41, v42);
      }
      else
      {
        --*(_DWORD *)v21;
      }
      goto LABEL_42;
    }
    WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WebCore::SharedStringHashHash,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::expand(v23);
    goto LABEL_37;
  }
  if (*((_DWORD *)v12 + 1))
    v37 = 1;
  else
    v37 = 2;
  v45 = 0;
LABEL_45:
  if (*(_DWORD *)v12 == 2)
    WTF::StringImpl::destroy(v12, v14);
  else
    *(_DWORD *)v12 -= 2;
  return v37;
}

uint64_t WebCore::linkHashForElement(WebCore *this, const WebCore::Element *a2, const WTF::AtomString *a3)
{
  __int16 v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::URL *v13;
  uint64_t v14;
  WebCore *v15;
  const WTF::URL *Attribute;
  const WTF::AtomString *v17;

  v4 = *((_WORD *)this + 14);
  if ((v4 & 0x10) != 0 && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::aTag + 24))
  {
    v5 = *((_DWORD *)this + 31);
    if (v5 == -1)
    {
      v9 = *((_QWORD *)this + 13);
      if (v9
        && ((v10 = *(_DWORD *)(v9 + 4), (v10 & 1) != 0)
          ? (v11 = *(_QWORD *)(v9 + 40), LODWORD(v12) = *(_DWORD *)(v9 + 52))
          : (v11 = v9 + 32, LODWORD(v12) = v10 >> 5),
            (_DWORD)v12))
      {
        v12 = v12;
        v13 = (const WTF::URL *)(v11 + 8);
        while (1)
        {
          v14 = *((_QWORD *)v13 - 1);
          if (v14 == WebCore::HTMLNames::hrefAttr
            || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 24)
            && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::hrefAttr + 32))
          {
            break;
          }
          v13 = (const WTF::URL *)((char *)v13 + 16);
          if (!--v12)
          {
            v13 = (const WTF::URL *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v13 = (const WTF::URL *)MEMORY[0x1E0CBF2F8];
      }
      v5 = WebCore::computeVisitedLinkHash((WebCore *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848), v13, a3);
      *((_DWORD *)this + 31) = v5;
    }
  }
  else
  {
    if ((v4 & 0x20) == 0 || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::aTag + 24))
    {
      v7 = 0;
      LOBYTE(v5) = 0;
      v6 = 0;
      return v7 | v6 | v5;
    }
    if (*((_BYTE *)this + 244))
    {
      v5 = *((_DWORD *)this + 60);
    }
    else
    {
      v15 = (WebCore *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 848);
      Attribute = (const WTF::URL *)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::SVGNames::hrefAttr);
      if (!*(_QWORD *)Attribute)
        Attribute = (const WTF::URL *)WebCore::Element::getAttribute(this, (const WebCore::QualifiedName *)&WebCore::XLinkNames::hrefAttr);
      v5 = WebCore::computeVisitedLinkHash(v15, Attribute, v17);
      *((_DWORD *)this + 60) = v5;
      *((_BYTE *)this + 244) = 1;
    }
  }
  v6 = v5 & 0xFFFFFF00;
  v7 = 0x100000000;
  return v7 | v6 | v5;
}

uint64_t WebCore::computeVisitedLinkHash(WebCore *this, const WTF::URL *a2, const WTF::AtomString *a3)
{
  uint64_t v3;
  uint64_t v4;
  size_t v6;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  const char *v13;
  int v14;
  unsigned int v15;
  size_t v16;
  WTF *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  WTF *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  unsigned __int16 *v30;
  char v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  WTF *v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  size_t v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int8 *v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  WTF *v68;
  WTF *v69;
  unsigned __int128 v70;
  int v71;
  unsigned int v72;
  char *v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  const char *v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  char *v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  WTF *v90;
  WTF *v91;
  unsigned __int128 v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  double v100;
  double v101;
  float v102;
  WTF *v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  WTF *v107;
  char v108;
  unsigned int v109;
  const char *v110;
  WTF *v111;
  int v112;
  uint64_t v113;
  unsigned __int16 *v114;
  unint64_t v115;
  char v116;
  WTF *v117;
  uint64_t v118;
  _BYTE v119[1024];

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v6 = *(unsigned int *)(v3 + 4);
  if (!(_DWORD)v6)
    return 0;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this && *(_DWORD *)(v8 + 4) && (*(_BYTE *)(v8 + 16) & 4) == 0)
  {
    v9 = *(_DWORD *)(v3 + 16);
LABEL_51:
    v117 = *(WTF **)(v3 + 8);
    LODWORD(v118) = v6;
    BYTE4(v118) = (v9 & 4) != 0;
    WTF::StringView::upconvertedCharacters<32ul>((uint64_t)&v117, (uint64_t)&v111);
    v29 = v115;
    if (!v115)
    {
      v4 = 0;
      goto LABEL_194;
    }
    v30 = v114;
    if (WebCore::containsColonSlashSlash<char16_t>((uint64_t)v114, v115))
    {
      if (WebCore::needsTrailingSlash<char16_t>(v30, v29))
      {
        LODWORD(v117) = -1640531527;
        WORD2(v117) = 0;
        BYTE6(v117) = 0;
        WTF::SuperFastHash::addCharacters<char16_t,WTF::StringHasher::DefaultConverter>((uint64_t)&v117, v30, v29);
        if (BYTE6(v117))
        {
          v31 = 0;
          v109 = ((_DWORD)v117 + WORD2(v117)) ^ (((_DWORD)v117 + WORD2(v117)) << 16) ^ 0x17800;
          LODWORD(v117) = v109 + (v109 >> 11);
        }
        else
        {
          WORD2(v117) = 47;
          v31 = 1;
        }
        BYTE6(v117) = v31;
        v32 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v117);
      }
      else
      {
        v32 = WTF::SuperFastHash::computeHash<char16_t,WTF::StringHasher::DefaultConverter>((uint64_t)v30, v29);
      }
      v4 = v32 | ((v32 == -1) << 31);
      goto LABEL_194;
    }
    v117 = (WTF *)v119;
    v118 = 512;
    v81 = *v30;
    if (v81 == 35)
    {
      v94 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v95 = *(unsigned int *)(v94 + 4);
        if ((_DWORD)v95)
        {
          v88 = *(char **)(v94 + 8);
          v96 = *((unsigned int *)this + 8);
          goto LABEL_223;
        }
      }
    }
    else
    {
      if (v81 == 47)
      {
        v82 = *(_QWORD *)this;
        if (*(_QWORD *)this)
        {
          v83 = *(_DWORD *)(v82 + 16);
          v84 = *(char **)(v82 + 8);
          v85 = *(unsigned int *)(v82 + 4);
          v86 = WTF::URL::pathStart(this);
          v87 = ((unint64_t)((v83 >> 2) & 1) << 32) | v86;
          if (v86 >= v85)
            v87 = v85 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((v83 >> 2) & 1) << 32);
          if ((_DWORD)v85)
            v88 = v84;
          else
            v88 = "";
          if ((_DWORD)v85)
            v89 = v87;
          else
            v89 = 0x100000000;
          goto LABEL_226;
        }
        WTF::URL::pathStart(this);
        goto LABEL_239;
      }
      v94 = *(_QWORD *)this;
      if (*(_QWORD *)this)
      {
        v95 = *(unsigned int *)(v94 + 4);
        if ((_DWORD)v95)
        {
          v88 = *(char **)(v94 + 8);
          v96 = *((unsigned int *)this + 7);
LABEL_223:
          v97 = (*(_DWORD *)(v94 + 16) >> 2) & 1;
          if (v96 < v95)
            v89 = (v97 << 32) | v96;
          else
            v89 = v95 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)(v97 & 1) << 32);
          goto LABEL_226;
        }
      }
    }
LABEL_239:
    v89 = 0x100000000;
    v88 = "";
LABEL_226:
    WTF::append<char16_t,512ul>((char *)&v117, v88, v89);
    v98 = HIDWORD(v118);
    v99 = v29 + HIDWORD(v118);
    if (v99 > v118)
    {
      WTF::Vector<char16_t,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,char16_t const>((void **)&v117, v29 + HIDWORD(v118));
      v98 = HIDWORD(v118);
    }
    if (v99 >= v98)
    {
      memcpy((char *)v117 + 2 * v98, v30, 2 * v29);
      HIDWORD(v118) = v99;
      WebCore::cleanPath<char16_t>((uint64_t)&v117, v100, v101, v102);
      v103 = v117;
      v104 = HIDWORD(v118);
      if (WebCore::needsTrailingSlash<char16_t>(v117, HIDWORD(v118)))
      {
        v116 = 47;
        if ((_DWORD)v104 == (_DWORD)v118)
        {
          WTF::Vector<char16_t,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)&v117, &v116);
          v103 = v117;
          v105 = HIDWORD(v118);
        }
        else
        {
          v105 = v104 + 1;
          *((_WORD *)v103 + v104) = 47;
          HIDWORD(v118) = v104 + 1;
        }
        v104 = v105;
      }
      v106 = WTF::SuperFastHash::computeHash<char16_t,WTF::StringHasher::DefaultConverter>((uint64_t)v103, v104);
      v4 = v106 | ((v106 == -1) << 31);
      v107 = v117;
      if (v119 != (_BYTE *)v117 && v117)
      {
        v117 = 0;
        LODWORD(v118) = 0;
        WTF::fastFree(v107, v20);
      }
LABEL_194:
      v48 = v111;
      if (&v113 != (uint64_t *)v111 && v111)
      {
        v111 = 0;
        v112 = 0;
LABEL_109:
        WTF::fastFree(v48, v20);
      }
      return v4;
    }
    __break(0xC471u);
LABEL_250:
    JUMPOUT(0x1944DDE58);
  }
  v9 = *(_DWORD *)(v3 + 16);
  if ((v9 & 4) == 0)
    goto LABEL_51;
  v10 = *(unsigned __int8 **)(v3 + 8);
  if (v6 >= 3)
  {
    v27 = 0;
    while (1)
    {
      if (v6 == v27)
      {
LABEL_139:
        __break(1u);
        goto LABEL_140;
      }
      v28 = v27 + 1;
      if (v10[v27] == 58)
      {
        if (v28 >= v6)
          goto LABEL_139;
        if (v10[v27 + 1] == 47)
        {
          if (v27 + 2 >= v6)
            goto LABEL_139;
          if (v10[v27 + 2] == 47)
            break;
        }
      }
      ++v27;
      if ((_DWORD)v6 - 2 == v28)
        goto LABEL_8;
    }
    LODWORD(v8) = -1640531527;
    if (v6 <= 5
      || (*v10 & 0xDF) != 0x48
      || (v10[1] & 0xDF) != 0x54
      || (v10[2] & 0xDF) != 0x54
      || (v10[3] & 0xDF) != 0x50)
    {
      goto LABEL_129;
    }
    v49 = v10[4];
    if (v49 == 58)
    {
      v50 = 5;
LABEL_121:
      v51 = v50 + 1;
      if (v6 > v51 && v10[v50] == 47 && v10[v51] == 47)
        v50 += 2;
      v52 = v50;
      if (v6 > v50)
      {
        do
        {
          if (v10[v52] == 47)
            break;
          v52 = v50 + 1;
          v50 = v52;
        }
        while ((_DWORD)v6 != (_DWORD)v52);
      }
      if (v52 != v6)
        goto LABEL_129;
LABEL_140:
      v60 = v6 >> 1;
      v61 = v10;
      do
      {
        v62 = v8 + *v61;
        v63 = (v61[1] << 11) ^ (v62 << 16);
        LODWORD(v8) = (v63 ^ v62) + ((v63 ^ v62) >> 11);
        v61 += 2;
        --v60;
      }
      while (v60);
      if ((v6 & 1) != 0)
      {
        v71 = v8 + v10[2 * (v6 >> 1)];
        LODWORD(v8) = (v71 ^ (v71 << 16) ^ 0x17800) + ((v71 ^ (v71 << 16) ^ 0x17800u) >> 11);
        goto LABEL_132;
      }
      v64 = v8 + 47;
    }
    else
    {
      if ((v49 & 0xFFFFFFDF) == 0x53 && v10[5] == 58)
      {
        v50 = 6;
        goto LABEL_121;
      }
LABEL_129:
      v53 = 0;
      do
      {
        v54 = (v10[v53 + 1] << 11) ^ (((_DWORD)v8 + v10[v53]) << 16) ^ (v8 + v10[v53]);
        LODWORD(v8) = v54 + (v54 >> 11);
        v55 = v53 + 3;
        v53 += 2;
      }
      while (v55 < v6);
      if ((v6 & 1) == 0)
      {
LABEL_132:
        v56 = (v8 ^ (8 * v8)) + ((v8 ^ (8 * (_DWORD)v8)) >> 5);
        v57 = (v56 ^ (4 * v56)) + ((v56 ^ (4 * v56)) >> 15);
        v58 = v57 ^ (v57 << 10);
        if (!v58)
          v58 = 0x800000;
        return v58 | ((v58 == -1) << 31);
      }
      v64 = v8 + v10[v6 - 1];
    }
    LODWORD(v8) = (v64 ^ (v64 << 11)) + ((v64 ^ (v64 << 11)) >> 17);
    goto LABEL_132;
  }
LABEL_8:
  v117 = (WTF *)v119;
  v118 = 512;
  v11 = *v10;
  if (v11 == 35)
  {
    if (v8)
    {
      v12 = *(_DWORD *)(v8 + 4);
      if (v12)
      {
        v13 = *(const char **)(v8 + 8);
        v14 = *(_DWORD *)(v8 + 16);
        v15 = *((_DWORD *)this + 8);
        if (v12 >= v15)
          v16 = v15;
        else
          v16 = v12;
        v17 = (WTF *)v119;
        if (v16 >= 0x201)
        {
          v79 = v13;
          WTF::Vector<unsigned char,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)&v117, (WTF *)v16);
          v13 = v79;
          v17 = v117;
        }
        HIDWORD(v118) = v16;
        if ((v14 & 4) == 0)
        {
          v90 = (WTF *)((char *)v17 + v16);
          if (v16 >= 0x10)
          {
            v91 = (WTF *)((char *)v17 + (v16 & 0xFFFFFFF0));
            do
            {
              v92 = (unsigned __int128)vld2q_s8(v13);
              v13 += 32;
              *(_OWORD *)v17 = v92;
              v17 = (WTF *)((char *)v17 + 16);
            }
            while (v17 != v91);
            v17 = v91;
          }
          while (v17 != v90)
          {
            v93 = *v13;
            v13 += 2;
            *(_BYTE *)v17 = v93;
            v17 = (WTF *)((char *)v17 + 1);
          }
          goto LABEL_20;
        }
        goto LABEL_17;
      }
    }
  }
  else
  {
    if (v11 == 47)
    {
      if (v8)
      {
        v72 = *(_DWORD *)(v8 + 16);
        v73 = *(char **)(v8 + 8);
        v74 = *(unsigned int *)(v8 + 4);
        v75 = WTF::URL::pathStart(this);
        v76 = ((unint64_t)((v72 >> 2) & 1) << 32) | v75;
        if (v74 <= v75)
          v76 = v74 & 0xFFFFFFFEFFFFFFFFLL | ((unint64_t)((v72 >> 2) & 1) << 32);
        if ((_DWORD)v74)
          v77 = v73;
        else
          v77 = "";
        if ((_DWORD)v74)
          v78 = v76;
        else
          v78 = 0x100000000;
      }
      else
      {
        WTF::URL::pathStart(this);
        v78 = 0x100000000;
        v77 = "";
      }
      WTF::append<unsigned char,512ul>((uint64_t)&v117, v77, v78);
      goto LABEL_20;
    }
    if (v8)
    {
      v65 = *(_DWORD *)(v8 + 4);
      if (v65)
      {
        v13 = *(const char **)(v8 + 8);
        v66 = *(_DWORD *)(v8 + 16);
        v67 = *((_DWORD *)this + 7);
        if (v65 >= v67)
          v16 = v67;
        else
          v16 = v65;
        v17 = (WTF *)v119;
        if (v16 >= 0x201)
        {
          v110 = v13;
          WTF::Vector<unsigned char,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)&v117, (WTF *)v16);
          v13 = v110;
          v17 = v117;
        }
        HIDWORD(v118) = v16;
        if ((v66 & 4) == 0)
        {
          v68 = (WTF *)((char *)v17 + v16);
          if (v16 >= 0x10)
          {
            v69 = (WTF *)((char *)v17 + (v16 & 0xFFFFFFF0));
            do
            {
              v70 = (unsigned __int128)vld2q_s8(v13);
              v13 += 32;
              *(_OWORD *)v17 = v70;
              v17 = (WTF *)((char *)v17 + 16);
            }
            while (v17 != v69);
            v17 = v69;
          }
          while (v17 != v68)
          {
            v108 = *v13;
            v13 += 2;
            *(_BYTE *)v17 = v108;
            v17 = (WTF *)((char *)v17 + 1);
          }
          goto LABEL_20;
        }
LABEL_17:
        if ((_DWORD)v16)
        {
          if ((_DWORD)v16 == 1)
            *(_BYTE *)v17 = *v13;
          else
            memcpy(v17, v13, v16);
        }
      }
    }
  }
LABEL_20:
  v18 = HIDWORD(v118);
  v19 = HIDWORD(v118) + v6;
  if (v19 > v118)
  {
    WTF::Vector<unsigned char,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)&v117, (WTF *)(HIDWORD(v118) + v6));
    v18 = HIDWORD(v118);
    if (v19 < HIDWORD(v118))
    {
      __break(0xC471u);
      goto LABEL_250;
    }
  }
  memcpy((char *)v117 + v18, v10, v6);
  HIDWORD(v118) = v19;
  v21 = v117;
  if (v19 >= 4)
  {
    v20 = 0;
    while (v20[(_QWORD)v117] != 47
         || v20[(_QWORD)v117 + 1] != 46
         || v20[(_QWORD)v117 + 2] != 46
         || v20[(_QWORD)v117 + 3] != 47)
    {
      if ((char *)(v19 - 3) == ++v20)
        goto LABEL_30;
    }
    WebCore::cleanSlashDotDotSlashes<unsigned char>((unint64_t)&v117, (unint64_t)v20);
    LODWORD(v19) = HIDWORD(v118);
    v21 = v117;
  }
LABEL_30:
  v22 = -1640531527;
  if (v19 < 2)
    goto LABEL_192;
  v23 = 0;
  while (*((_BYTE *)v21 + v23) != 47 || *((_BYTE *)v21 + v23 + 1) != 47)
  {
    if (v19 - 1 == ++v23)
      goto LABEL_76;
  }
  v24 = 0;
  v25 = 16;
  if (v19 < 0x10uLL)
    v25 = v19;
  do
  {
    if (*((_BYTE *)v21 + v24) == 35)
    {
      v26 = (char *)v21 + v24;
      goto LABEL_58;
    }
    ++v24;
  }
  while (v25 != v24);
  if (v19 < 0x11)
    goto LABEL_138;
  v26 = memchr((char *)v21 + v25, 35, v19 - v25);
  if (!v26)
    goto LABEL_138;
LABEL_58:
  v33 = v26 - (_BYTE *)v21;
  if ((unint64_t)(v26 - (_BYTE *)v21 + 1) > 1)
    goto LABEL_59;
LABEL_138:
  v33 = v19;
LABEL_59:
  while (v23 < v33)
  {
    if (v23)
    {
      if (v23 - 1 >= v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1944DE260);
      }
      if (*((_BYTE *)v21 + v23 - 1) == 58)
      {
        v23 += 2;
        goto LABEL_64;
      }
      if (v23 >= v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1944DE268);
      }
      v21 = (WTF *)((char *)v21 + v23++);
    }
    else
    {
      v23 = 1;
    }
    *(_BYTE *)v21 = 0;
    v21 = v117;
    LODWORD(v19) = HIDWORD(v118);
LABEL_64:
    if (v19 >= 2)
    {
      v34 = v19;
      v35 = v19 - 1;
      if (v35 <= v23)
        goto LABEL_73;
      while (*((_BYTE *)v21 + v23) != 47 || *((_BYTE *)v21 + v23 + 1) != 47)
      {
        if (v35 == ++v23)
          goto LABEL_71;
      }
      if (v23 != -1)
        continue;
    }
    break;
  }
LABEL_71:
  if (!(_DWORD)v19)
    goto LABEL_192;
  v34 = v19;
LABEL_73:
  v36 = 0;
  while (*((_BYTE *)v21 + v36))
  {
    if (v34 == ++v36)
      goto LABEL_76;
  }
  if (v34 != v36)
  {
    v80 = v36 + 1;
    if (v36 + 1 < v34)
    {
      do
      {
        if (v80 >= HIDWORD(v118))
        {
          __break(0xC471u);
          JUMPOUT(0x1944DE280);
        }
        if (*((_BYTE *)v117 + v80))
        {
          if (v36 >= HIDWORD(v118))
          {
            __break(0xC471u);
            JUMPOUT(0x1944DE288);
          }
          *((_BYTE *)v117 + v36++) = *((_BYTE *)v117 + v80);
        }
        ++v80;
      }
      while (v34 != v80);
      v21 = v117;
    }
    HIDWORD(v118) = v36;
    LODWORD(v19) = v36;
  }
LABEL_76:
  if (v19 < 3)
  {
LABEL_192:
    v37 = v19;
    goto LABEL_99;
  }
  v20 = 0;
  v37 = v19;
  while (v20[(_QWORD)v21] != 47 || v20[(_QWORD)v21 + 1] != 46 || v20[(_QWORD)v21 + 2] != 47)
  {
    if ((char *)(v19 - 2) == ++v20)
      goto LABEL_84;
  }
  WebCore::cleanSlashDotSlashes<unsigned char>((uint64_t)&v117, (unint64_t)v20);
  v21 = v117;
  v37 = HIDWORD(v118);
  LODWORD(v19) = HIDWORD(v118);
LABEL_84:
  if (v19 < 6)
    goto LABEL_99;
  if ((*(_BYTE *)v21 & 0xDF) != 0x48
    || (*((_BYTE *)v21 + 1) & 0xDF) != 0x54
    || (*((_BYTE *)v21 + 2) & 0xDF) != 0x54
    || (*((_BYTE *)v21 + 3) & 0xDF) != 0x50)
  {
LABEL_100:
    v42 = 0;
    do
    {
      v43 = (*((unsigned __int8 *)v21 + v42 + 1) << 11) ^ ((v22 + *((unsigned __int8 *)v21 + v42)) << 16) ^ (v22 + *((unsigned __int8 *)v21 + v42));
      v22 = v43 + (v43 >> 11);
      v44 = v42 + 3;
      v42 += 2;
    }
    while (v44 < v37);
    goto LABEL_102;
  }
  v38 = *((unsigned __int8 *)v21 + 4);
  if (v38 != 58)
  {
    if ((v38 & 0xFFFFFFDF) == 0x53 && *((_BYTE *)v21 + 5) == 58)
    {
      v39 = 6;
      goto LABEL_91;
    }
    goto LABEL_100;
  }
  v39 = 5;
LABEL_91:
  v40 = v39 + 1;
  if (v19 > v40 && *((_BYTE *)v21 + v39) == 47 && *((_BYTE *)v21 + v40) == 47)
    v39 += 2;
  v41 = v39;
  if (v19 > v39)
  {
    do
    {
      if (*((_BYTE *)v21 + v41) == 47)
        break;
      v41 = v39 + 1;
      v39 = v41;
    }
    while ((_DWORD)v19 != (_DWORD)v41);
  }
  if (v41 == v37)
  {
    LOBYTE(v111) = 47;
    if ((_DWORD)v19 == (_DWORD)v118)
    {
      WTF::Vector<unsigned char,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>((uint64_t)&v117, &v111);
      LODWORD(v19) = HIDWORD(v118);
    }
    else
    {
      *((_BYTE *)v21 + v37) = 47;
      LODWORD(v19) = ++HIDWORD(v118);
    }
    v21 = v117;
    goto LABEL_192;
  }
LABEL_99:
  if (v19 >= 2)
    goto LABEL_100;
LABEL_102:
  if ((v37 & 1) != 0)
  {
    v59 = v22 + *((unsigned __int8 *)v21 + v37 - 1);
    v22 = (v59 ^ (v59 << 11)) + ((v59 ^ (v59 << 11)) >> 17);
  }
  v45 = (v22 ^ (8 * v22)) + ((v22 ^ (8 * v22)) >> 5);
  v46 = (v45 ^ (4 * v45)) + ((v45 ^ (4 * v45)) >> 15);
  v47 = v46 ^ (v46 << 10);
  if (!v47)
    v47 = 0x800000;
  v4 = v47 | ((v47 == -1) << 31);
  if (v119 != (_BYTE *)v21 && v21)
  {
    v117 = 0;
    LODWORD(v118) = 0;
    v48 = v21;
    goto LABEL_109;
  }
  return v4;
}

unint64_t WebCore::JSAbstractRangePrototype::create(WebCore::JSAbstractRangePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  unint64_t v6;
  int v7;

  v6 = JSC::allocateCell<WebCore::JSAbstractRangePrototype>((uint64_t)this);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)v6 = a2 >> 4;
  *(_DWORD *)(v6 + 4) = v7;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::JSAbstractRangePrototype::finishCreation((WebCore::JSAbstractRangePrototype *)v6, this);
  return v6;
}

unint64_t WebCore::wrap<WebCore::DOMCacheStorage>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 6);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E3354220)
  {
    __break(0xC471u);
    JUMPOUT(0x1944DE700);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSDOMCacheStorage::s_info + ~((_QWORD)&WebCore::JSDOMCacheStorage::s_info << 32)) ^ (((unint64_t)&WebCore::JSDOMCacheStorage::s_info + ~((_QWORD)&WebCore::JSDOMCacheStorage::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSDOMCacheStorage::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSDOMCacheStorage::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSDOMCacheStoragePrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSDOMCacheStoragePrototype::create((WebCore::JSDOMCacheStoragePrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSDOMCacheStorage::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSDOMCacheStorage::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 504);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 504))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 504);
    *(_QWORD *)(v36 + 504) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 504);
  *(_QWORD *)(v32 + 504) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE335098 & 1) == 0)
  {
    qword_1EE335090 = (uint64_t)&off_1E3259B98;
    byte_1EE335098 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE335090;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::DOMWindowCaches::caches(WebCore::DOMWindowCaches *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  _DWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  char v19[24];
  uint64_t v20;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 72) + 8);
    if (*(_BYTE *)(v3 + 178))
    {
      __break(0xC471u);
      JUMPOUT(0x1944DE910);
    }
    v4 = *(_QWORD *)(*(_QWORD *)(v3 + 240) + 8);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5 && (v6 = *(_QWORD *)(v5 + 8)) != 0)
    {
      v7 = *(_QWORD *)(v4 + 296);
      (***(void (****)(unsigned int **__return_ptr))(v6 + 904))(&v18);
      v8 = WTF::fastMalloc((WTF *)0x48);
      v9 = v8;
      *(_DWORD *)(v8 + 24) = 1;
      if (!*(_BYTE *)(v7 + 466))
      {
        v10 = *(_QWORD *)(v7 + 704);
        if (v10)
        {
          v11 = *(_QWORD *)(v10 + 8);
          if (v11)
            v7 = v11;
        }
      }
      *(_QWORD *)v8 = &off_1E33A18C0;
      *(_QWORD *)(v8 + 8) = 0;
      WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, (WebCore::ScriptExecutionContext *)(v7 + 192));
      *(_QWORD *)v9 = &off_1E33A0540;
      *(_QWORD *)(v9 + 16) = 0;
      if (*(_BYTE *)(v7 + 470))
      {
        __break(0xC471u);
        JUMPOUT(0x1944DE930);
      }
      v20 = v9;
      WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v7 + 320), &v20, (uint64_t)v19);
      *(_QWORD *)v9 = &off_1E3354220;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      v12 = v18;
      v18 = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = v12;
      *(_BYTE *)(v9 + 64) = 0;
      WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9);
      v13 = (_DWORD *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = v9;
      if (v13)
      {
        if (v13[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
        else
          --v13[6];
      }
      v14 = v18;
      v18 = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v14 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
        }
      }
      return *((_QWORD *)this + 2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t WebCore::JSDOMCacheStoragePrototype::create(WebCore::JSDOMCacheStoragePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSDOMCacheStorage::s_info, &WebCore::JSDOMCacheStoragePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

JSC::VM *JSC::reifyStaticProperties<6u>(JSC::VM *result, uint64_t a2, _QWORD *a3, JSC::JSObject *this)
{
  JSC::VM *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  v7 = result;
  if ((*(_BYTE *)((16 * *(unsigned int *)this) | 0x10) & 3) == 0)
    result = (JSC::VM *)JSC::JSObject::convertToDictionary(this, result);
  v8 = a3[1];
  if (v8)
  {
    if (v8 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v9 = v27;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v27, (uint64_t)a3, (unsigned __int8 *)this);
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v9, v10);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v11 = a3[6];
  if (v11)
  {
    if (v11 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v12 = v27;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v27, (uint64_t)(a3 + 5), (unsigned __int8 *)this);
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  v14 = a3[11];
  if (v14)
  {
    if (v14 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v15 = v27;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v27, (uint64_t)(a3 + 10), (unsigned __int8 *)this);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v17 = a3[16];
  if (v17)
  {
    if (v17 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v18 = v27;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v27, (uint64_t)(a3 + 15), (unsigned __int8 *)this);
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v18, v19);
      else
        *(_DWORD *)v18 -= 2;
    }
  }
  v20 = a3[21];
  if (v20)
  {
    if (v20 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v21 = v27;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v27, (uint64_t)(a3 + 20), (unsigned __int8 *)this);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        result = (JSC::VM *)WTF::StringImpl::destroy(v21, v22);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v23 = a3[26];
  if (v23)
  {
    v24 = (uint64_t)(a3 + 25);
    if (v23 == 2)
      JSC::SmallStrings::singleCharacterStringRep((JSC::VM *)((char *)v7 + 41968));
    else
      WTF::AtomStringImpl::addLiteral();
    v25 = v27;
    result = (JSC::VM *)JSC::reifyStaticProperty(v7, a2, (unint64_t *)&v27, v24, (unsigned __int8 *)this);
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        return (JSC::VM *)WTF::StringImpl::destroy(v25, v26);
      else
        *(_DWORD *)v25 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::JSDOMCacheStoragePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

uint64_t WebCore::DOMWindowCaches::from(WebCore::DOMWindowCaches *this, WebCore::LocalDOMWindow *a2)
{
  uint64_t *v3;
  const char **v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v10;
  const char *v11[3];
  const char *v12[2];

  v3 = (uint64_t *)((char *)this + 80);
  v11[0] = "DOMWindowCaches";
  v11[1] = (const char *)16;
  v4 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)this + 10, v11);
  if (!v4 || (v5 = (uint64_t)v4[2]) == 0)
  {
    v5 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v5 = &unk_1E3353630;
    v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    *(_QWORD *)v5 = off_1E33534B0;
    *(_QWORD *)(v5 + 8) = v6;
    *(_QWORD *)(v5 + 16) = 0;
    v10 = (unsigned __int8 *)v5;
    v12[0] = "DOMWindowCaches";
    v12[1] = (const char *)16;
    WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>,WTF::HashTableTraits>::inlineSet<WTF::ASCIILiteral const&,std::unique_ptr<WebCore::Supplement<WebCore::LocalDOMWindow>>>(v3, v12, &v10, (uint64_t)v11);
    v8 = v10;
    v10 = 0;
    if (v8)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 8))(v8);
  }
  return v5;
}

uint64_t WebCore::JSCSSStyleDeclaration::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  JSC::VM *v6;
  int v9;
  _WORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned int v52;
  JSC::VM *v53;
  WTF::StringImpl *v54;

  v6 = *(JSC::VM **)(a2 + 56);
  v53 = v6;
  if (a3)
  {
    v9 = *(_DWORD *)(a3 + 16);
    if ((v9 & 0x20) != 0)
    {
LABEL_10:
      if ((a3 >> 4))
      {
        v15 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
        if (((a3 >> 4) & ~*(_DWORD *)(v15 + 0x20)) == 0)
        {
          v16 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v6);
          if (v16)
          {
            v54 = (WTF::StringImpl *)a3;
            v17 = JSC::PropertyTable::get(v16, (uint64_t *)&v54);
            if ((_DWORD)v17 != -1)
            {
              if ((int)v17 > 63)
              {
                v32 = *(_QWORD *)(a1 + 8) - 8;
                v33 = 0x3F00000000 - (v17 << 32);
              }
              else
              {
                v32 = a1 + 16;
                v33 = v17 << 32;
              }
              v34 = *(_QWORD *)(v32 + (v33 >> 29));
              if ((v34 & 0xFFFE000000000002) == 0)
              {
                v35 = *(unsigned __int8 *)(v34 + 5);
                if (v35 == 6)
                {
                  v37 = *(_DWORD *)(v15 + 16) & 3;
                  v39 = *(_QWORD *)(v34 + 8);
                  v38 = *(_QWORD *)(v34 + 16);
                  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v34 & 0xFFFFFFFE) + 0x4C))
                  {
                    v41 = *(_QWORD *)(v34 + 24);
                    v40 = *(_QWORD *)(v34 + 32);
                    *(_QWORD *)a4 = v39;
                    *(_QWORD *)(a4 + 8) = v38;
                    *(_DWORD *)(a4 + 16) = HIDWORD(v17);
                    *(_QWORD *)(a4 + 32) = a1;
                    *(_BYTE *)(a4 + 49) = 3;
                    v23 = 1;
                    if (v37 != 2)
                      *(_BYTE *)(a4 + 48) = 1;
                    *(_BYTE *)(a4 + 51) = 1;
                    *(_QWORD *)(a4 + 72) = v41;
                    *(_QWORD *)(a4 + 80) = v40;
                  }
                  else
                  {
                    *(_QWORD *)a4 = v39;
                    *(_QWORD *)(a4 + 8) = v38;
                    *(_DWORD *)(a4 + 16) = HIDWORD(v17);
                    *(_QWORD *)(a4 + 32) = a1;
                    v23 = 1;
                    *(_BYTE *)(a4 + 49) = 3;
                    if (v37 != 2)
                      *(_BYTE *)(a4 + 48) = 1;
                  }
                  return v23;
                }
                if (v35 == 5)
                {
                  JSC::JSObject::fillGetterPropertySlot();
                  return 1;
                }
              }
              *(_QWORD *)a4 = v34;
              *(_QWORD *)(a4 + 32) = a1;
              *(_DWORD *)(a4 + 16) = HIDWORD(v17);
              *(_DWORD *)(a4 + 20) = v17;
              v23 = 1;
              *(_WORD *)(a4 + 48) = 257;
              return v23;
            }
          }
        }
      }
      if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        return 1;
      v18 = *(_DWORD *)(a3 + 16);
      if ((v18 & 0x20) == 0)
      {
        v19 = *(_BYTE **)(a3 + 8);
        v20 = *(unsigned int *)(a3 + 4);
        if ((v18 & 4) != 0)
        {
          if (!(_DWORD)v20 || (v46 = *v19 - 48, v46 > 9) || v20 >= 2 && *v19 == 48)
          {
LABEL_84:
            v22 = 0;
          }
          else
          {
            v50 = v20 - 1;
            v51 = v19 + 1;
            while (v50)
            {
              if (v46 > 0x19999999)
                goto LABEL_84;
              v52 = *v51 - 48;
              if (v52 > 9)
                goto LABEL_84;
              v22 = 0;
              v28 = __CFADD__(v52, 10 * v46);
              v46 = v52 + 10 * v46;
              --v50;
              ++v51;
              if (v28)
                goto LABEL_20;
            }
            v22 = 0x100000000;
            if (v46 == -1)
              v22 = 0;
          }
        }
        else if (!(_DWORD)v20
               || (v21 = *(unsigned __int16 *)v19 - 48, v21 > 9)
               || v20 >= 2 && *(_WORD *)v19 == 48)
        {
LABEL_19:
          v22 = 0;
        }
        else
        {
          v25 = (unsigned __int16 *)(v19 + 2);
          v26 = v20 - 1;
          while (v26)
          {
            if (v21 <= 0x19999999)
            {
              v27 = *v25 - 48;
              if (v27 <= 9)
              {
                v28 = __CFADD__(v27, 10 * v21);
                v21 = v27 + 10 * v21;
                ++v25;
                --v26;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_19;
          }
          v36 = v21 == -1;
          v22 = 0x100000000;
          if (v36)
            v22 = 0;
        }
LABEL_20:
        if ((v22 & 0x100000000) != 0)
          return JSC::JSObject::getOwnPropertySlotByIndex();
      }
      return 0;
    }
    v10 = *(_WORD **)(a3 + 8);
    v11 = *(unsigned int *)(a3 + 4);
    if ((v9 & 4) == 0)
    {
      if ((_DWORD)v11 && (v12 = (unsigned __int16)*v10 - 48, v12 <= 9))
      {
        if (v11 < 2 || *v10 != 48)
        {
          v29 = v10 + 1;
          v30 = v11 - 1;
          while (v30)
          {
            if (v12 <= 0x19999999)
            {
              v31 = *v29 - 48;
              if (v31 <= 9)
              {
                v28 = __CFADD__(v31, 10 * v12);
                v12 = v31 + 10 * v12;
                ++v29;
                --v30;
                if (!v28)
                  continue;
              }
            }
            goto LABEL_6;
          }
          v36 = v12 == -1;
          v14 = v12 & 0xFFFFFF00;
          v13 = 0x100000000;
          if (v12 == -1)
          {
            v13 = 0;
            LOBYTE(v12) = 0;
          }
          if (v36)
            v14 = 0;
          goto LABEL_8;
        }
        v13 = 0;
      }
      else
      {
LABEL_6:
        v13 = 0;
        LOBYTE(v12) = 0;
      }
      v14 = 0;
LABEL_8:
      v12 = v12;
      goto LABEL_9;
    }
    if ((_DWORD)v11)
    {
      v45 = *(unsigned __int8 *)v10 - 48;
      if (v45 <= 9 && (v11 < 2 || *(_BYTE *)v10 != 48))
      {
        v47 = v11 - 1;
        v48 = (unsigned __int8 *)v10 + 1;
        while (v47)
        {
          if (v45 > 0x19999999)
            goto LABEL_77;
          v49 = *v48 - 48;
          if (v49 > 9)
            goto LABEL_77;
          v12 = 0;
          LOBYTE(v11) = 0;
          v13 = 0;
          v28 = __CFADD__(v49, 10 * v45);
          v45 = v49 + 10 * v45;
          --v47;
          ++v48;
          if (v28)
            goto LABEL_79;
        }
        if (v45 == -1)
          v12 = 0;
        else
          v12 = v45 & 0xFFFFFF00;
        if (v45 == -1)
          LOBYTE(v11) = 0;
        else
          LOBYTE(v11) = v45;
        if (v45 == -1)
          v13 = 0;
        else
          v13 = 0x100000000;
        goto LABEL_79;
      }
LABEL_77:
      v12 = 0;
      LOBYTE(v11) = 0;
    }
    else
    {
      v12 = 0;
    }
    v13 = 0;
LABEL_79:
    v14 = v11;
LABEL_9:
    if ((v13 & 0x100000000) != 0)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 80))(&v54, *(_QWORD *)(a1 + 24), v14 | v12);
      if (v54)
      {
        v43 = WebCore::toJS<WebCore::IDLUSVString,WTF::String>(a2, (uint64_t)&v53, (uint64_t *)&v54);
        if (*((_DWORD *)v53 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v53) & 1) != 0)
        {
          v23 = 0;
        }
        else
        {
          *(_QWORD *)a4 = v43;
          *(_DWORD *)(a4 + 16) = 2;
          *(_QWORD *)(a4 + 32) = a1;
          v23 = 1;
          *(_BYTE *)(a4 + 49) = 1;
        }
        v44 = v54;
        v54 = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, v42);
          else
            *(_DWORD *)v44 -= 2;
        }
        return v23;
      }
      v6 = *(JSC::VM **)(a2 + 56);
    }
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) == 0)
    return 0;
  return JSC::JSObject::getOwnStaticPropertySlot();
}

uint64_t WebCore::RenderTableCell::borderHalfAfter(WebCore::RenderTableCell *this, int a2)
{
  void *v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  float v14;
  double v15;
  float v16;
  double v17;
  uint64_t v18;
  WTF *v20;
  void *v21;
  int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  char v28;

  WebCore::RenderTableCell::collapsedAfterBorder((uint64_t)&v26, (uint64_t)this, 0);
  if ((v28 & 0x70) != 0)
  {
    v5 = 0.0;
    if ((v28 & 0xE) != 0)
      v5 = (float)v26 * 0.015625;
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    v7 = 1.0;
    if (v6)
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = (*(_DWORD *)v10)++;
            v7 = *(float *)(v10 + 364);
            if (v11)
            {
              *(_DWORD *)v10 = v11;
            }
            else
            {
              WebCore::Page::~Page(v10);
              WTF::fastFree(v20, v21);
            }
          }
        }
      }
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (*(_BYTE *)(v12 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944DF788);
    }
    v13 = (unsigned __int16)*(_DWORD *)(v12 + 124) >> 13;
    v22 = 2;
    switch(v13)
    {
      case 1:
      case 2:
        goto LABEL_13;
      case 3:
      case 5:
        v13 = 3;
        goto LABEL_13;
      case 4:
        goto LABEL_14;
      default:
        v13 = 0;
LABEL_13:
        v22 = v13;
LABEL_14:
        v14 = 1.0 / v7;
        if (((v22 & 0xFFFFFFFD) == 1) == a2)
          v14 = 0.0;
        v15 = (float)((float)(v5 + v14) * 0.5) * 64.0;
        if (v15 >= 2147483650.0)
        {
          v16 = 2147500000.0;
        }
        else if (v15 <= -2147483650.0)
        {
          v16 = -2147500000.0;
        }
        else
        {
          v16 = (float)(int)v15;
        }
        v17 = (float)(floorf((float)(v7 * v16) * 0.015625) / v7) * 64.0;
        if (v17 >= 2147483650.0)
        {
          v18 = 0x7FFFFFFFLL;
        }
        else if (v17 <= -2147483650.0)
        {
          v18 = 0x80000000;
        }
        else
        {
          v18 = (int)v17;
        }
        break;
    }
  }
  else
  {
    v18 = 0;
  }
  if ((v27 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v4);
    }
  }
  return v18;
}

uint64_t WebCore::RenderTableCell::collapsedAfterBorder(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  float v16;
  double v17;
  int v18;
  unint64_t v19;
  unint64_t *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  double v35;
  int v36;
  char v37;
  unsigned int v38;
  char v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  float v53;
  double v54;
  int v55;
  char v56;
  unsigned int v57;
  char v58;
  char v59;
  char v60;
  unsigned int v61;
  unint64_t *v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  float v68;
  double v69;
  int v70;
  char v71;
  unsigned int v72;
  char v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t *v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  float v91;
  double v92;
  int v93;
  char v94;
  unsigned int v95;
  char v96;
  char v97;
  int v98;
  unsigned int v99;
  unint64_t *v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float v107;
  double v108;
  int v109;
  char v110;
  unsigned int v111;
  char v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t *v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  _BOOL4 v121;
  uint64_t v122;
  _BOOL4 v123;
  uint64_t v124;
  _BOOL4 v125;
  uint64_t v126;
  _BOOL4 v127;
  uint64_t v128;
  _BOOL4 v129;
  uint64_t v130;
  _BOOL4 v131;
  uint64_t v132;
  float v133;
  double v134;
  int v135;
  char v136;
  unsigned int v137;
  char v138;
  char v139;
  char v140;
  unsigned int v141;
  unint64_t *v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  unsigned int v146;
  BOOL v147;
  uint64_t v148;
  _BOOL4 v149;
  uint64_t v150;
  unsigned int *v151;
  unsigned int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  BOOL v158;
  unsigned int *v159;
  unsigned int v160;
  unint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  BOOL v169;
  unsigned int *v170;
  unsigned int v171;
  unint64_t v172;
  unsigned int *v173;
  unsigned int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  unsigned int *v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  BOOL v194;
  unsigned int *v195;
  unsigned int v196;
  unint64_t v197;
  unsigned int *v198;
  unsigned int v199;
  unsigned int *v200;
  unsigned int v201;
  unint64_t v202;
  unsigned int *v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  BOOL v213;
  unsigned int *v214;
  unsigned int v215;
  unsigned int *v216;
  unsigned int v217;
  uint64_t v218;
  int v219;
  unsigned int *v220;
  unsigned int v221;
  WebCore::RenderTableCol *v222;
  uint64_t v223;
  float *v224;
  uint64_t v225;
  void *v226;
  uint64_t v227;
  float *v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int *v231;
  unsigned int v232;
  BOOL v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  unsigned int *v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  unsigned int *v241;
  unsigned int v242;
  unsigned int v243;
  uint64_t v244;
  unsigned int v245;
  BOOL v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  unsigned int v250;
  unsigned int v251;
  uint64_t v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  unsigned int *v256;
  unsigned int v257;
  BOOL v258;
  unint64_t v259;
  unsigned int v260;
  BOOL v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int *v265;
  _BOOL4 v266;
  unsigned int v267;
  unsigned int v268;
  uint64_t v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int *v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int *v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int *v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int *v287;
  _BOOL4 v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int *v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  void *v313;
  void *v314;
  void *v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  int v323;
  uint64_t v324;
  char v325;
  __int128 v326;
  unint64_t v327;
  __int128 v328;
  unint64_t v329;
  unint64_t v330;
  int v331;
  char v332;

  v4 = *(_QWORD *)(a2 + 32);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_12;
  if (*(_BYTE *)(v5 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E03C4);
  }
  v6 = *(_QWORD *)(v5 + 32);
  if (!v6)
    goto LABEL_12;
  result = *(_QWORD *)(v6 + 8);
  if (!result)
    goto LABEL_12;
  if (*(_BYTE *)(result + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E03E4);
  }
  v8 = *(_QWORD *)(result + 32);
  if (!v8)
    goto LABEL_12;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_12;
  v12 = *(unsigned __int8 *)(v9 + 46);
  if (v12 != 35 && v12 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E0964);
  }
  if ((*(_BYTE *)(a2 + 251) & 0x20) != 0)
  {
LABEL_12:
    LODWORD(v330) = 1;
    v331 = 1077936128;
    v332 = 0;
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 96;
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(&v326, &v329);
  }
  if ((*(_BYTE *)(v9 + 328) & 1) != 0)
    return (uint64_t)WebCore::RenderTableSection::cachedCollapsedBorder(result, a2, 1, a1);
  if (a3)
  {
    v15 = WebCore::CSSProperty::resolveDirectionAwareProperty(358, (*(_DWORD *)(v5 + 120) >> 26) & 1, (unsigned __int16)*(_DWORD *)(v5 + 124) >> 13);
    v150 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
    if (v150)
    {
      if (*(_BYTE *)(v150 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1944E08C4);
      }
    }
    else if (MEMORY[0x2E] != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944E1870);
    }
    v14 = WebCore::CSSProperty::resolveDirectionAwareProperty(355, (*(_DWORD *)(v150 + 120) >> 26) & 1, (unsigned __int16)*(_DWORD *)(v150 + 124) >> 13);
    switch((unsigned __int16)*(_DWORD *)(a2 + 124) >> 13)
    {
      case 1:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 152;
        break;
      case 2:
      case 4:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 128;
        break;
      case 3:
      case 5:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 104;
        break;
      default:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 176;
        break;
    }
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(a2 + 80, v14, 0, &v329);
  }
  else
  {
    switch((unsigned __int16)*(_DWORD *)(a2 + 124) >> 13)
    {
      case 1:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 152;
        break;
      case 2:
      case 4:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 128;
        break;
      case 3:
      case 5:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 104;
        break;
      default:
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 24) + 176;
        break;
    }
    v14 = 0;
    v15 = 0;
    v329 = 0;
  }
  v16 = *(float *)(v13 + 16);
  v17 = 0.0;
  if (v16 == 0.0 || (*(_BYTE *)(v13 + 20) & 0xF) == 0)
    goto LABEL_21;
  v17 = v16 * 64.0;
  if (v17 < 2147483650.0)
  {
    if (v17 > -2147483650.0)
    {
LABEL_21:
      v18 = (int)v17;
      goto LABEL_22;
    }
    v18 = 0x80000000;
  }
  else
  {
    v18 = 0x7FFFFFFF;
  }
LABEL_22:
  *(_DWORD *)a1 = v18;
  v19 = v329;
  *(_QWORD *)(a1 + 8) = v329;
  v20 = (unint64_t *)(a1 + 8);
  if ((v19 & 0x8000000000000) != 0)
  {
    v151 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 + 1, v151));
  }
  v21 = *(_BYTE *)(v13 + 20) & 0xF;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0x80 | v21 | 0x60;
  if (*(_DWORD *)(v13 + 8) || (v120 = *(_QWORD *)v13, (*(_QWORD *)v13 & 0x4000000000000) == 0))
  {
    v22 = 0;
  }
  else
  {
    if ((v120 & 0x8000000000000) != 0)
      v121 = *(float *)((v120 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v121 = *(_QWORD *)v13 != 0;
    if (v121)
      v22 = 0;
    else
      v22 = 0x80;
  }
  *(_BYTE *)(a1 + 16) = v21 | v22 | 0x60;
  if ((v329 & 0x8000000000000) != 0)
  {
    result = v329 & 0xFFFFFFFFFFFFLL;
    do
    {
      v234 = __ldaxr((unsigned int *)result);
      v235 = v234 - 1;
    }
    while (__stlxr(v235, (unsigned int *)result));
    if (!v235)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)a2);
    }
  }
  v23 = *(_QWORD *)(a2 + 32);
  if (!v23)
    goto LABEL_126;
  v24 = *(_QWORD *)(v23 + 8);
  if (!v24)
    goto LABEL_126;
  if (*(_BYTE *)(v24 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E0470);
  }
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    goto LABEL_126;
  v26 = *(_QWORD *)(v25 + 8);
  if (!v26)
    goto LABEL_126;
  if (*(_BYTE *)(v26 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E0490);
  }
  v27 = *(_QWORD *)(v26 + 32);
  if (!v27)
    goto LABEL_126;
  v28 = *(_QWORD *)(v27 + 8);
  if (!v28)
    goto LABEL_126;
  v29 = *(unsigned __int8 *)(v28 + 46);
  if (v29 != 35 && v29 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E0B70);
  }
  result = WebCore::RenderTable::cellBelow((WebCore::RenderTable *)v28, (const WebCore::RenderTableCell *)a2);
  if (result)
  {
    switch((unsigned __int16)*(_DWORD *)(result + 124) >> 13)
    {
      case 1:
        v90 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 176;
        break;
      case 2:
      case 4:
        v90 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 104;
        break;
      case 3:
      case 5:
        v90 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 128;
        break;
      default:
        v90 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 152;
        break;
    }
    if (a3)
    {
      v206 = result;
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(result + 80, v15, 0, &v327);
      result = v206;
    }
    else
    {
      v327 = 0;
    }
    v91 = *(float *)(v90 + 16);
    v92 = 0.0;
    if (v91 == 0.0 || (*(_BYTE *)(v90 + 20) & 0xF) == 0)
      goto LABEL_153;
    v92 = v91 * 64.0;
    if (v92 < 2147483650.0)
    {
      if (v92 > -2147483650.0)
      {
LABEL_153:
        v93 = (int)v92;
        goto LABEL_154;
      }
      v93 = 0x80000000;
    }
    else
    {
      v93 = 0x7FFFFFFF;
    }
LABEL_154:
    LODWORD(v329) = v93;
    v330 = v327;
    if ((v327 & 0x8000000000000) != 0)
    {
      v195 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 + 1, v195));
    }
    v94 = *(_BYTE *)(v90 + 20);
    v95 = v94 & 0xF;
    if (*(_DWORD *)(v90 + 8) || (v128 = *(_QWORD *)v90, (*(_QWORD *)v90 & 0x4000000000000) == 0))
    {
      v96 = 0;
    }
    else
    {
      if ((v128 & 0x8000000000000) != 0)
        v129 = *(float *)((v128 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
      else
        v129 = *(_QWORD *)v90 != 0;
      if (v129)
        v96 = 0;
      else
        v96 = 0x80;
    }
    v97 = v95 | v96 | 0x60;
    LOBYTE(v331) = v97;
    v98 = *(unsigned __int8 *)(a1 + 16);
    if ((v98 & 0x70) == 0)
      goto LABEL_279;
    v99 = v98 & 0xF;
    if (v95 == 1)
    {
      v100 = (unint64_t *)a1;
      if (v99 != 1)
        goto LABEL_279;
    }
    else
    {
      if ((v94 & 0xF) == 0 || v99 == 1)
      {
        v100 = (unint64_t *)a1;
        goto LABEL_162;
      }
      if ((v98 & 0xF) == 0)
        goto LABEL_279;
      v184 = *(_DWORD *)a1;
      v185 = v329;
      if ((v98 & 0xE) != 0)
        v186 = *(_DWORD *)a1;
      else
        v186 = 0;
      v187 = v94 & 0xE;
      if (v187)
        v188 = v329;
      else
        v188 = 0;
      if (v186 == v188)
      {
        if (v99 == v95)
        {
          v100 = (unint64_t *)a1;
          if ((~v98 & 0x60) != 0)
          {
LABEL_279:
            v100 = &v329;
            LOBYTE(v98) = v97;
          }
        }
        else
        {
          v100 = (unint64_t *)a1;
          if (v99 < v95)
            goto LABEL_279;
        }
      }
      else
      {
        if ((v98 & 0xE) == 0)
          v184 = 0;
        if (!v187)
          v185 = 0;
        v100 = (unint64_t *)a1;
        if (v184 < v185)
          goto LABEL_279;
      }
    }
LABEL_162:
    if ((v98 & 0xF) == 1)
    {
      v101 = 0;
      v102 = 0;
      LOBYTE(v98) = 0;
    }
    else
    {
      v101 = *(_DWORD *)v100;
      v102 = v100[1];
      if ((v102 & 0x8000000000000) != 0)
      {
        v197 = v100[1];
        v198 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFLL);
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 + 1, v198));
        LOBYTE(v98) = *((_BYTE *)v100 + 16);
        v102 = v197;
      }
    }
    *(_DWORD *)a1 = v101;
    v103 = *(_QWORD *)(a1 + 8);
    if ((v103 & 0x8000000000000) != 0)
    {
      if ((v102 & 0x8000000000000) != 0)
      {
        v315 = (void *)result;
        v321 = v102;
        v326 = *(_OWORD *)((v103 & 0xFFFFFFFFFFFFLL) + 4);
        v287 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFLL);
        v328 = *(_OWORD *)((v102 & 0xFFFFFFFFFFFFLL) + 4);
        v288 = WebCore::operator==<float,4ul>((float *)&v326, (float *)&v328);
        v103 = *v20;
        if (v288 && HIBYTE(v103) == HIBYTE(v321))
        {
          result = (uint64_t)v315;
          v102 = v321;
          if (BYTE6(v103) == BYTE6(v321))
          {
            *(_BYTE *)(a1 + 16) = v98;
            do
            {
              v289 = __ldaxr(v287);
              v290 = v289 - 1;
            }
            while (__stlxr(v290, v287));
            result = (uint64_t)v315;
            if (!v290)
            {
              atomic_store(1u, v287);
              WTF::fastFree((WTF *)v287, v30);
              result = (uint64_t)v315;
            }
LABEL_170:
            if ((v330 & 0x8000000000000) != 0)
            {
              v269 = result;
              v270 = (unsigned int *)(v330 & 0xFFFFFFFFFFFFLL);
              do
              {
                v271 = __ldaxr(v270);
                v272 = v271 - 1;
              }
              while (__stlxr(v272, v270));
              if (!v272)
              {
                atomic_store(1u, v270);
                WTF::fastFree((WTF *)v270, v30);
                result = v269;
              }
            }
            if ((v327 & 0x8000000000000) != 0)
            {
              v273 = result;
              v274 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
              do
              {
                v275 = __ldaxr(v274);
                v276 = v275 - 1;
              }
              while (__stlxr(v276, v274));
              if (!v276)
              {
                atomic_store(1u, v274);
                WTF::fastFree((WTF *)v274, v30);
                result = v273;
              }
            }
            if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
              goto LABEL_126;
            goto LABEL_37;
          }
        }
        else
        {
          result = (uint64_t)v315;
          v102 = v321;
        }
      }
    }
    else if ((v102 & 0x8000000000000) == 0 && v103 == v102)
    {
LABEL_169:
      *(_BYTE *)(a1 + 16) = v98;
      goto LABEL_170;
    }
    if ((v103 & 0x8000000000000) != 0)
    {
      v318 = v102;
      v255 = result;
      v256 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFLL);
      do
      {
        v257 = __ldaxr(v256);
        v258 = --v257 == 0;
      }
      while (__stlxr(v257, v256));
      v102 = v318;
      if (v258)
      {
        atomic_store(1u, v256);
        WTF::fastFree((WTF *)v256, v30);
        v102 = v318;
        result = v255;
      }
    }
    *(_QWORD *)(a1 + 8) = v102;
    goto LABEL_169;
  }
LABEL_37:
  v31 = *(_QWORD *)(a2 + 32);
  if (v31)
    v32 = *(_QWORD *)(v31 + 8);
  else
    v32 = 0;
  switch((unsigned __int16)*(_DWORD *)(v32 + 124) >> 13)
  {
    case 1:
      v33 = *(_QWORD *)(*(_QWORD *)(v32 + 88) + 24) + 152;
      break;
    case 2:
    case 4:
      v33 = *(_QWORD *)(*(_QWORD *)(v32 + 88) + 24) + 128;
      break;
    case 3:
    case 5:
      v33 = *(_QWORD *)(*(_QWORD *)(v32 + 88) + 24) + 104;
      break;
    default:
      v33 = *(_QWORD *)(*(_QWORD *)(v32 + 88) + 24) + 176;
      break;
  }
  if (a3)
  {
    v205 = result;
    if (v31)
      v31 = *(_QWORD *)(v31 + 8);
    WebCore::RenderStyle::visitedDependentColorWithColorFilter(v31 + 80, v14, 0, &v327);
    result = v205;
  }
  else
  {
    v327 = 0;
  }
  v34 = *(float *)(v33 + 16);
  v35 = 0.0;
  if (v34 == 0.0 || (*(_BYTE *)(v33 + 20) & 0xF) == 0)
    goto LABEL_44;
  v35 = v34 * 64.0;
  if (v35 < 2147483650.0)
  {
    if (v35 > -2147483650.0)
    {
LABEL_44:
      v36 = (int)v35;
      goto LABEL_45;
    }
    v36 = 0x80000000;
  }
  else
  {
    v36 = 0x7FFFFFFF;
  }
LABEL_45:
  LODWORD(v329) = v36;
  v330 = v327;
  if ((v327 & 0x8000000000000) != 0)
  {
    v159 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 + 1, v159));
  }
  v37 = *(_BYTE *)(v33 + 20);
  v38 = v37 & 0xF;
  if (*(_DWORD *)(v33 + 8) || (v122 = *(_QWORD *)v33, (*(_QWORD *)v33 & 0x4000000000000) == 0))
  {
    v39 = 0;
  }
  else
  {
    if ((v122 & 0x8000000000000) != 0)
      v123 = *(float *)((v122 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v123 = *(_QWORD *)v33 != 0;
    if (v123)
      v39 = 0;
    else
      v39 = 0x80;
  }
  v40 = v38 | v39 | 0x50;
  LOBYTE(v331) = v40;
  v41 = *(_BYTE *)(a1 + 16);
  if ((v41 & 0x70) == 0)
    goto LABEL_267;
  v42 = v41 & 0xF;
  if (v38 == 1)
  {
    v43 = (unint64_t *)a1;
    if (v42 != 1)
    {
LABEL_267:
      v43 = &v329;
      v41 = v40;
    }
  }
  else
  {
    if ((v37 & 0xF) == 0 || v42 == 1)
    {
      v43 = (unint64_t *)a1;
      goto LABEL_53;
    }
    if ((v41 & 0xF) == 0)
      goto LABEL_267;
    v153 = *(_DWORD *)a1;
    v154 = v329;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v155 = *(_DWORD *)a1;
    else
      v155 = 0;
    v156 = v37 & 0xE;
    if (v156)
      v157 = v329;
    else
      v157 = 0;
    if (v155 == v157)
    {
      v43 = (unint64_t *)a1;
      v158 = v42 >= v38;
      if (v42 == v38)
        v158 = (v41 & 0x70u) >= 0x50;
      if (!v158)
        goto LABEL_267;
    }
    else
    {
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v153 = 0;
      if (!v156)
        v154 = 0;
      v43 = (unint64_t *)a1;
      if (v153 < v154)
        goto LABEL_267;
    }
  }
LABEL_53:
  if ((v41 & 0xF) == 1)
  {
    v44 = 0;
    v45 = 0;
    v41 = 0;
  }
  else
  {
    v44 = *(_DWORD *)v43;
    v45 = v43[1];
    if ((v45 & 0x8000000000000) != 0)
    {
      v161 = v43[1];
      v162 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 + 1, v162));
      v41 = *((_BYTE *)v43 + 16);
      v45 = v161;
    }
  }
  *(_DWORD *)a1 = v44;
  v46 = *(_QWORD *)(a1 + 8);
  if ((v46 & 0x8000000000000) == 0)
  {
    if ((v45 & 0x8000000000000) == 0 && v46 == v45)
    {
LABEL_60:
      *(_BYTE *)(a1 + 16) = v41;
      goto LABEL_61;
    }
LABEL_58:
    if ((v46 & 0x8000000000000) != 0)
    {
      v316 = v45;
      v230 = result;
      v231 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
      do
      {
        v232 = __ldaxr(v231);
        v233 = --v232 == 0;
      }
      while (__stlxr(v232, v231));
      v45 = v316;
      if (v233)
      {
        atomic_store(1u, v231);
        WTF::fastFree((WTF *)v231, v30);
        v45 = v316;
        result = v230;
      }
    }
    *(_QWORD *)(a1 + 8) = v45;
    goto LABEL_60;
  }
  if ((v45 & 0x8000000000000) == 0)
    goto LABEL_58;
  v313 = (void *)result;
  v319 = v45;
  v326 = *(_OWORD *)((v46 & 0xFFFFFFFFFFFFLL) + 4);
  v265 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
  v328 = *(_OWORD *)((v45 & 0xFFFFFFFFFFFFLL) + 4);
  v266 = WebCore::operator==<float,4ul>((float *)&v326, (float *)&v328);
  v46 = *v20;
  if (!v266 || HIBYTE(v46) != HIBYTE(v319))
  {
    result = (uint64_t)v313;
    v45 = v319;
    goto LABEL_58;
  }
  result = (uint64_t)v313;
  v45 = v319;
  if (BYTE6(v46) != BYTE6(v319))
    goto LABEL_58;
  *(_BYTE *)(a1 + 16) = v41;
  do
  {
    v267 = __ldaxr(v265);
    v268 = v267 - 1;
  }
  while (__stlxr(v268, v265));
  result = (uint64_t)v313;
  if (!v268)
  {
    atomic_store(1u, v265);
    WTF::fastFree((WTF *)v265, v30);
    result = (uint64_t)v313;
  }
LABEL_61:
  if ((v330 & 0x8000000000000) != 0)
  {
    v236 = result;
    v237 = (unsigned int *)(v330 & 0xFFFFFFFFFFFFLL);
    do
    {
      v238 = __ldaxr(v237);
      v239 = v238 - 1;
    }
    while (__stlxr(v239, v237));
    if (!v239)
    {
      atomic_store(1u, v237);
      WTF::fastFree((WTF *)v237, v30);
      result = v236;
    }
  }
  if ((v327 & 0x8000000000000) != 0)
  {
    v240 = result;
    v241 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
    do
    {
      v242 = __ldaxr(v241);
      v243 = v242 - 1;
    }
    while (__stlxr(v243, v241));
    if (!v243)
    {
      atomic_store(1u, v241);
      WTF::fastFree((WTF *)v241, v30);
      result = v240;
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_126;
  if (result)
  {
    v104 = *(_QWORD *)(result + 32);
    if (v104)
      v105 = *(_QWORD *)(v104 + 8);
    else
      v105 = 0;
    switch((unsigned __int16)*(_DWORD *)(v105 + 124) >> 13)
    {
      case 1:
        v106 = *(_QWORD *)(*(_QWORD *)(v105 + 88) + 24) + 176;
        break;
      case 2:
      case 4:
        v106 = *(_QWORD *)(*(_QWORD *)(v105 + 88) + 24) + 104;
        break;
      case 3:
      case 5:
        v106 = *(_QWORD *)(*(_QWORD *)(v105 + 88) + 24) + 128;
        break;
      default:
        v106 = *(_QWORD *)(*(_QWORD *)(v105 + 88) + 24) + 152;
        break;
    }
    if (a3)
    {
      if (v104)
        v104 = *(_QWORD *)(v104 + 8);
      result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v104 + 80, v15, 0, &v327);
    }
    else
    {
      v327 = 0;
    }
    v107 = *(float *)(v106 + 16);
    v108 = 0.0;
    if (v107 == 0.0 || (*(_BYTE *)(v106 + 20) & 0xF) == 0)
      goto LABEL_181;
    v108 = v107 * 64.0;
    if (v108 < 2147483650.0)
    {
      if (v108 > -2147483650.0)
      {
LABEL_181:
        v109 = (int)v108;
        goto LABEL_182;
      }
      v109 = 0x80000000;
    }
    else
    {
      v109 = 0x7FFFFFFF;
    }
LABEL_182:
    LODWORD(v329) = v109;
    v330 = v327;
    if ((v327 & 0x8000000000000) != 0)
    {
      v200 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 + 1, v200));
    }
    v110 = *(_BYTE *)(v106 + 20);
    v111 = v110 & 0xF;
    if (*(_DWORD *)(v106 + 8) || (v130 = *(_QWORD *)v106, (*(_QWORD *)v106 & 0x4000000000000) == 0))
    {
      v112 = 0;
    }
    else
    {
      if ((v130 & 0x8000000000000) != 0)
        v131 = *(float *)((v130 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
      else
        v131 = *(_QWORD *)v106 != 0;
      if (v131)
        v112 = 0;
      else
        v112 = 0x80;
    }
    v113 = v111 | v112 | 0x50;
    LOBYTE(v331) = v113;
    v114 = *(_BYTE *)(a1 + 16);
    if ((v114 & 0x70) == 0)
      goto LABEL_281;
    v115 = v114 & 0xF;
    if (v111 == 1)
    {
      v116 = (unint64_t *)a1;
      if (v115 != 1)
        goto LABEL_281;
    }
    else
    {
      if ((v110 & 0xF) == 0 || v115 == 1)
      {
        v116 = (unint64_t *)a1;
        goto LABEL_190;
      }
      if ((v114 & 0xF) == 0)
        goto LABEL_281;
      v189 = *(_DWORD *)a1;
      v190 = v329;
      if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
        v191 = *(_DWORD *)a1;
      else
        v191 = 0;
      v192 = v110 & 0xE;
      if (v192)
        v193 = v329;
      else
        v193 = 0;
      if (v191 == v193)
      {
        v194 = v115 >= v111;
        if (v115 == v111)
        {
          v116 = (unint64_t *)a1;
          if ((v114 & 0x70u) < 0x50)
          {
LABEL_281:
            v116 = &v329;
            v114 = v113;
          }
        }
        else
        {
          v116 = (unint64_t *)a1;
          if (!v194)
            goto LABEL_281;
        }
      }
      else
      {
        if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
          v189 = 0;
        if (!v192)
          v190 = 0;
        v116 = (unint64_t *)a1;
        if (v189 < v190)
          goto LABEL_281;
      }
    }
LABEL_190:
    if ((v114 & 0xF) == 1)
    {
      v117 = 0;
      v118 = 0;
      v114 = 0;
    }
    else
    {
      v117 = *(_DWORD *)v116;
      v118 = v116[1];
      if ((v118 & 0x8000000000000) != 0)
      {
        v202 = v116[1];
        v203 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFLL);
        do
          v204 = __ldaxr(v203);
        while (__stlxr(v204 + 1, v203));
        v114 = *((_BYTE *)v116 + 16);
        v118 = v202;
      }
    }
    *(_DWORD *)a1 = v117;
    v119 = *(_QWORD *)(a1 + 8);
    if ((v119 & 0x8000000000000) != 0)
    {
      if ((v118 & 0x8000000000000) != 0)
      {
        v326 = *(_OWORD *)((v119 & 0xFFFFFFFFFFFFLL) + 4);
        v322 = v118;
        v291 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFLL);
        v328 = *(_OWORD *)((v118 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v326, (float *)&v328);
        v119 = *v20;
        if ((_DWORD)result && HIBYTE(v119) == HIBYTE(v322))
        {
          v118 = v322;
          if (BYTE6(v119) == BYTE6(v322))
          {
            *(_BYTE *)(a1 + 16) = v114;
            do
            {
              v292 = __ldaxr(v291);
              v293 = v292 - 1;
            }
            while (__stlxr(v293, v291));
            if (!v293)
            {
              atomic_store(1u, v291);
              result = WTF::fastFree((WTF *)v291, v30);
            }
LABEL_198:
            if ((v330 & 0x8000000000000) != 0)
            {
              result = v330 & 0xFFFFFFFFFFFFLL;
              do
              {
                v277 = __ldaxr((unsigned int *)result);
                v278 = v277 - 1;
              }
              while (__stlxr(v278, (unsigned int *)result));
              if (!v278)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v30);
              }
            }
            if ((v327 & 0x8000000000000) != 0)
            {
              result = v327 & 0xFFFFFFFFFFFFLL;
              do
              {
                v279 = __ldaxr((unsigned int *)result);
                v280 = v279 - 1;
              }
              while (__stlxr(v280, (unsigned int *)result));
              if (!v280)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v30);
              }
            }
            if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
              goto LABEL_126;
            goto LABEL_65;
          }
        }
        else
        {
          v118 = v322;
        }
      }
    }
    else if ((v118 & 0x8000000000000) == 0 && v119 == v118)
    {
LABEL_197:
      *(_BYTE *)(a1 + 16) = v114;
      goto LABEL_198;
    }
    if ((v119 & 0x8000000000000) != 0)
    {
      v259 = v118;
      result = v119 & 0xFFFFFFFFFFFFLL;
      do
      {
        v260 = __ldaxr((unsigned int *)result);
        v261 = --v260 == 0;
      }
      while (__stlxr(v260, (unsigned int *)result));
      v118 = v259;
      if (v261)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v30);
        v118 = v259;
      }
    }
    *(_QWORD *)(a1 + 8) = v118;
    goto LABEL_197;
  }
LABEL_65:
  v47 = *(_QWORD *)(a2 + 32);
  if (!v47)
  {
    v48 = MEMORY[8];
    if (*(_BYTE *)(MEMORY[8] + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944E04B0);
    }
    goto LABEL_284;
  }
  v48 = *(_QWORD *)(v47 + 8);
  if (*(_BYTE *)(v48 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E04D0);
  }
  v49 = *(_QWORD *)(v48 + 32);
  if (!v49)
  {
LABEL_284:
    v50 = 0;
    goto LABEL_70;
  }
  v50 = *(_QWORD *)(v49 + 8);
  if (v50 && *(_BYTE *)(v50 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E04F0);
  }
LABEL_70:
  v51 = *(_DWORD *)(v48 + 200) & 0x7FFFFFFF;
  if ((*(_BYTE *)(a2 + 251) & 8) != 0)
  {
    v218 = v50;
    result = WebCore::RenderTableCell::parseRowSpanFromDOM((WebCore::RenderTableCell *)a2);
    v50 = v218;
  }
  else
  {
    result = 1;
  }
  if ((result + v51) < *(_DWORD *)(v50 + 212))
    goto LABEL_126;
  switch((unsigned __int16)*(_DWORD *)(v50 + 124) >> 13)
  {
    case 1:
      v52 = *(_QWORD *)(*(_QWORD *)(v50 + 88) + 24) + 152;
      break;
    case 2:
    case 4:
      v52 = *(_QWORD *)(*(_QWORD *)(v50 + 88) + 24) + 128;
      break;
    case 3:
    case 5:
      v52 = *(_QWORD *)(*(_QWORD *)(v50 + 88) + 24) + 104;
      break;
    default:
      v52 = *(_QWORD *)(*(_QWORD *)(v50 + 88) + 24) + 176;
      break;
  }
  if (a3)
  {
    v207 = v50;
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v50 + 80, v14, 0, &v327);
    v50 = v207;
  }
  else
  {
    v327 = 0;
  }
  v53 = *(float *)(v52 + 16);
  v54 = 0.0;
  if (v53 == 0.0 || (*(_BYTE *)(v52 + 20) & 0xF) == 0)
    goto LABEL_79;
  v54 = v53 * 64.0;
  if (v54 < 2147483650.0)
  {
    if (v54 > -2147483650.0)
    {
LABEL_79:
      v55 = (int)v54;
      goto LABEL_80;
    }
    v55 = 0x80000000;
  }
  else
  {
    v55 = 0x7FFFFFFF;
  }
LABEL_80:
  LODWORD(v329) = v55;
  v330 = v327;
  if ((v327 & 0x8000000000000) != 0)
  {
    v170 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 + 1, v170));
  }
  v56 = *(_BYTE *)(v52 + 20);
  v57 = v56 & 0xF;
  if (*(_DWORD *)(v52 + 8) || (v124 = *(_QWORD *)v52, (*(_QWORD *)v52 & 0x4000000000000) == 0))
  {
    v58 = 0;
  }
  else
  {
    if ((v124 & 0x8000000000000) != 0)
      v125 = *(float *)((v124 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v125 = *(_QWORD *)v52 != 0;
    if (v125)
      v58 = 0;
    else
      v58 = 0x80;
  }
  v59 = v57 | v58 | 0x40;
  LOBYTE(v331) = v59;
  v60 = *(_BYTE *)(a1 + 16);
  if ((v60 & 0x70) == 0)
    goto LABEL_269;
  v61 = v60 & 0xF;
  if (v57 == 1)
  {
    v62 = (unint64_t *)a1;
    if (v61 != 1)
      goto LABEL_269;
  }
  else
  {
    if ((v56 & 0xF) == 0 || v61 == 1)
    {
      v62 = (unint64_t *)a1;
      goto LABEL_88;
    }
    if ((v60 & 0xF) == 0)
      goto LABEL_269;
    v164 = *(_DWORD *)a1;
    v165 = v329;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v166 = *(_DWORD *)a1;
    else
      v166 = 0;
    v167 = v56 & 0xE;
    if (v167)
      v168 = v329;
    else
      v168 = 0;
    if (v166 == v168)
    {
      v169 = v61 >= v57;
      if (v61 == v57)
      {
        v62 = (unint64_t *)a1;
        if ((*(_BYTE *)(a1 + 16) & 0x40) == 0)
        {
LABEL_269:
          v62 = &v329;
          v60 = v59;
        }
      }
      else
      {
        v62 = (unint64_t *)a1;
        if (!v169)
          goto LABEL_269;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v164 = 0;
      if (!v167)
        v165 = 0;
      v62 = (unint64_t *)a1;
      if (v164 < v165)
        goto LABEL_269;
    }
  }
LABEL_88:
  if ((v60 & 0xF) == 1)
  {
    v64 = 0;
    v63 = 0;
    v60 = 0;
  }
  else
  {
    v63 = *(_DWORD *)v62;
    v64 = v62[1];
    if ((v64 & 0x8000000000000) != 0)
    {
      v172 = v62[1];
      v173 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFLL);
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 + 1, v173));
      v60 = *((_BYTE *)v62 + 16);
      v64 = v172;
    }
  }
  *(_DWORD *)a1 = v63;
  v65 = *(_QWORD *)(a1 + 8);
  if ((v65 & 0x8000000000000) == 0)
  {
    if ((v64 & 0x8000000000000) == 0 && v65 == v64)
    {
LABEL_95:
      *(_BYTE *)(a1 + 16) = v60;
      goto LABEL_96;
    }
LABEL_93:
    if ((v65 & 0x8000000000000) != 0)
    {
      v317 = v64;
      v244 = v50;
      result = v65 & 0xFFFFFFFFFFFFLL;
      do
      {
        v245 = __ldaxr((unsigned int *)result);
        v246 = --v245 == 0;
      }
      while (__stlxr(v245, (unsigned int *)result));
      v64 = v317;
      if (v246)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, (void *)v50);
        v64 = v317;
        v50 = v244;
      }
    }
    *(_QWORD *)(a1 + 8) = v64;
    goto LABEL_95;
  }
  if ((v64 & 0x8000000000000) == 0)
    goto LABEL_93;
  v314 = (void *)v50;
  v320 = v64;
  v326 = *(_OWORD *)((v65 & 0xFFFFFFFFFFFFLL) + 4);
  v281 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFLL);
  v328 = *(_OWORD *)((v64 & 0xFFFFFFFFFFFFLL) + 4);
  result = WebCore::operator==<float,4ul>((float *)&v326, (float *)&v328);
  v65 = *v20;
  if (!(_DWORD)result || HIBYTE(v65) != HIBYTE(v320))
  {
    v50 = (uint64_t)v314;
    v64 = v320;
    goto LABEL_93;
  }
  v50 = (uint64_t)v314;
  v64 = v320;
  if (BYTE6(v65) != BYTE6(v320))
    goto LABEL_93;
  *(_BYTE *)(a1 + 16) = v60;
  do
  {
    v282 = __ldaxr(v281);
    v283 = v282 - 1;
  }
  while (__stlxr(v283, v281));
  v50 = (uint64_t)v314;
  if (!v283)
  {
    atomic_store(1u, v281);
    result = WTF::fastFree((WTF *)v281, v314);
    v50 = (uint64_t)v314;
  }
LABEL_96:
  if ((v330 & 0x8000000000000) != 0)
  {
    v249 = v50;
    result = v330 & 0xFFFFFFFFFFFFLL;
    do
    {
      v250 = __ldaxr((unsigned int *)result);
      v251 = v250 - 1;
    }
    while (__stlxr(v251, (unsigned int *)result));
    if (!v251)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)v50);
      v50 = v249;
    }
  }
  if ((v327 & 0x8000000000000) != 0)
  {
    v252 = v50;
    result = v327 & 0xFFFFFFFFFFFFLL;
    do
    {
      v253 = __ldaxr((unsigned int *)result);
      v254 = v253 - 1;
    }
    while (__stlxr(v254, (unsigned int *)result));
    if (!v254)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)v50);
      v50 = v252;
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_126;
  result = WebCore::RenderTable::sectionBelow(v28, v50, 1);
  if (!result)
  {
    if ((*(_BYTE *)(v28 + 328) & 4) != 0)
    {
      result = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v28, (void *)(*(_DWORD *)(a2 + 248) & 0x1FFFFFF), 0, 0);
      if (result)
      {
        v222 = (WebCore::RenderTableCol *)result;
        v223 = result + 80;
        v224 = (float *)WebCore::RenderStyle::borderAfter((WebCore::RenderStyle *)(result + 80));
        if (a3)
        {
          WebCore::RenderStyle::visitedDependentColorWithColorFilter(v223, v14, 0, (unint64_t *)&v328);
          v225 = v328;
        }
        else
        {
          v225 = 0;
          *(_QWORD *)&v328 = 0;
        }
        WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)&v326, v224, v225, 3);
        WebCore::chooseBorder((uint64_t)&v329, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)&v326);
        *(_DWORD *)a1 = v329;
        result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v330);
        *(_BYTE *)(a1 + 16) = v331;
        if ((v330 & 0x8000000000000) != 0)
        {
          result = v330 & 0xFFFFFFFFFFFFLL;
          do
          {
            v301 = __ldaxr((unsigned int *)result);
            v302 = v301 - 1;
          }
          while (__stlxr(v302, (unsigned int *)result));
          if (!v302)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v226);
          }
        }
        if ((*((_QWORD *)&v326 + 1) & 0x8000000000000) != 0)
        {
          result = *((_QWORD *)&v326 + 1) & 0xFFFFFFFFFFFFLL;
          do
          {
            v303 = __ldaxr((unsigned int *)result);
            v304 = v303 - 1;
          }
          while (__stlxr(v304, (unsigned int *)result));
          if (!v304)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v226);
          }
        }
        if ((v328 & 0x8000000000000) != 0)
        {
          result = v328 & 0xFFFFFFFFFFFFLL;
          do
          {
            v305 = __ldaxr((unsigned int *)result);
            v306 = v305 - 1;
          }
          while (__stlxr(v306, (unsigned int *)result));
          if (!v306)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v226);
          }
        }
        if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
          goto LABEL_126;
        result = WebCore::RenderTableCol::enclosingColumnGroup(v222);
        if (result)
        {
          v227 = result + 80;
          v228 = (float *)WebCore::RenderStyle::borderAfter((WebCore::RenderStyle *)(result + 80));
          if (a3)
          {
            WebCore::RenderStyle::visitedDependentColorWithColorFilter(v227, v14, 0, (unint64_t *)&v328);
            v229 = v328;
          }
          else
          {
            v229 = 0;
            *(_QWORD *)&v328 = 0;
          }
          WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)&v326, v228, v229, 2);
          WebCore::chooseBorder((uint64_t)&v329, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)&v326);
          *(_DWORD *)a1 = v329;
          result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v330);
          *(_BYTE *)(a1 + 16) = v331;
          if ((v330 & 0x8000000000000) != 0)
          {
            result = v330 & 0xFFFFFFFFFFFFLL;
            do
            {
              v307 = __ldaxr((unsigned int *)result);
              v308 = v307 - 1;
            }
            while (__stlxr(v308, (unsigned int *)result));
            if (!v308)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v66);
            }
          }
          if ((*((_QWORD *)&v326 + 1) & 0x8000000000000) != 0)
          {
            result = *((_QWORD *)&v326 + 1) & 0xFFFFFFFFFFFFLL;
            do
            {
              v309 = __ldaxr((unsigned int *)result);
              v310 = v309 - 1;
            }
            while (__stlxr(v310, (unsigned int *)result));
            if (!v310)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v66);
            }
          }
          if ((v328 & 0x8000000000000) != 0)
          {
            result = v328 & 0xFFFFFFFFFFFFLL;
            do
            {
              v311 = __ldaxr((unsigned int *)result);
              v312 = v311 - 1;
            }
            while (__stlxr(v312, (unsigned int *)result));
            if (!v312)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v66);
            }
          }
          if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
            goto LABEL_126;
        }
      }
    }
    switch((unsigned __int16)*(_DWORD *)(v28 + 124) >> 13)
    {
      case 1:
        v67 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 24) + 152;
        break;
      case 2:
      case 4:
        v67 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 24) + 128;
        break;
      case 3:
      case 5:
        v67 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 24) + 104;
        break;
      default:
        v67 = *(_QWORD *)(*(_QWORD *)(v28 + 88) + 24) + 176;
        break;
    }
    if (a3)
      result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v28 + 80, v14, 0, &v327);
    else
      v327 = 0;
    v68 = *(float *)(v67 + 16);
    v69 = 0.0;
    if (v68 == 0.0 || (*(_BYTE *)(v67 + 20) & 0xF) == 0)
      goto LABEL_107;
    v69 = v68 * 64.0;
    if (v69 < 2147483650.0)
    {
      if (v69 > -2147483650.0)
      {
LABEL_107:
        v70 = (int)v69;
        goto LABEL_108;
      }
      v70 = 0x80000000;
    }
    else
    {
      v70 = 0x7FFFFFFF;
    }
LABEL_108:
    LODWORD(v329) = v70;
    v330 = v327;
    if ((v327 & 0x8000000000000) != 0)
    {
      v180 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 + 1, v180));
    }
    v71 = *(_BYTE *)(v67 + 20);
    v72 = v71 & 0xF;
    if (*(_DWORD *)(v67 + 8) || (v126 = *(_QWORD *)v67, (*(_QWORD *)v67 & 0x4000000000000) == 0))
    {
      v73 = 0;
    }
    else
    {
      if ((v126 & 0x8000000000000) != 0)
        v127 = *(float *)((v126 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
      else
        v127 = *(_QWORD *)v67 != 0;
      if (v127)
        v73 = 0;
      else
        v73 = 0x80;
    }
    v74 = v72 | v73 | 0x10;
    LOBYTE(v331) = v74;
    v75 = *(_BYTE *)(a1 + 16);
    if ((v75 & 0x70) == 0)
      goto LABEL_277;
    v76 = v75 & 0xF;
    if (v72 == 1)
    {
      v77 = (unint64_t *)a1;
      if (v76 != 1)
        goto LABEL_277;
    }
    else
    {
      if ((v71 & 0xF) == 0 || v76 == 1)
      {
        v77 = (unint64_t *)a1;
        goto LABEL_116;
      }
      if ((v75 & 0xF) == 0)
        goto LABEL_277;
      v175 = *(_DWORD *)a1;
      v176 = v329;
      if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
        v177 = *(_DWORD *)a1;
      else
        v177 = 0;
      v178 = v71 & 0xE;
      if (v178)
        v179 = v329;
      else
        v179 = 0;
      if (v177 == v179)
      {
        v77 = (unint64_t *)a1;
        if (v76 < v72)
        {
LABEL_277:
          v77 = &v329;
          v75 = v74;
        }
      }
      else
      {
        if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
          v175 = 0;
        if (!v178)
          v176 = 0;
        v77 = (unint64_t *)a1;
        if (v175 < v176)
          goto LABEL_277;
      }
    }
LABEL_116:
    if ((v75 & 0xF) == 1)
    {
      v79 = 0;
      v78 = 0;
      v75 = 0;
    }
    else
    {
      v78 = *(_DWORD *)v77;
      v79 = v77[1];
      if ((v79 & 0x8000000000000) != 0)
      {
        v182 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFLL);
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 + 1, v182));
        v75 = *((_BYTE *)v77 + 16);
      }
    }
    *(_DWORD *)a1 = v78;
    v80 = *(_QWORD *)(a1 + 8);
    if ((v80 & 0x8000000000000) != 0)
    {
      if ((v79 & 0x8000000000000) != 0)
      {
        v326 = *(_OWORD *)((v80 & 0xFFFFFFFFFFFFLL) + 4);
        v284 = (unsigned int *)(v79 & 0xFFFFFFFFFFFFLL);
        v328 = *(_OWORD *)((v79 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v326, (float *)&v328);
        v80 = *v20;
        if ((_DWORD)result)
        {
          if (HIBYTE(v80) == HIBYTE(v79) && BYTE6(v80) == BYTE6(v79))
          {
            *(_BYTE *)(a1 + 16) = v75;
            do
            {
              v285 = __ldaxr(v284);
              v286 = v285 - 1;
            }
            while (__stlxr(v286, v284));
            if (!v286)
            {
              atomic_store(1u, v284);
              result = WTF::fastFree((WTF *)(v79 & 0xFFFFFFFFFFFFLL), v66);
            }
            goto LABEL_124;
          }
        }
      }
    }
    else if ((v79 & 0x8000000000000) == 0 && v80 == v79)
    {
LABEL_123:
      *(_BYTE *)(a1 + 16) = v75;
LABEL_124:
      if ((v330 & 0x8000000000000) != 0)
      {
        result = v330 & 0xFFFFFFFFFFFFLL;
        do
        {
          v262 = __ldaxr((unsigned int *)result);
          v263 = v262 - 1;
        }
        while (__stlxr(v263, (unsigned int *)result));
        if (!v263)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v66);
        }
      }
      if ((v327 & 0x8000000000000) == 0)
        goto LABEL_126;
      result = v327 & 0xFFFFFFFFFFFFLL;
      do
      {
        v264 = __ldaxr((unsigned int *)result);
        v147 = --v264 == 0;
      }
      while (__stlxr(v264, (unsigned int *)result));
LABEL_581:
      if (v147)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v66);
      }
      goto LABEL_126;
    }
    if ((v80 & 0x8000000000000) != 0)
    {
      result = v80 & 0xFFFFFFFFFFFFLL;
      do
      {
        v247 = __ldaxr((unsigned int *)result);
        v248 = v247 - 1;
      }
      while (__stlxr(v248, (unsigned int *)result));
      if (!v248)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v66);
      }
    }
    *(_QWORD *)(a1 + 8) = v79;
    goto LABEL_123;
  }
  switch((unsigned __int16)*(_DWORD *)(result + 124) >> 13)
  {
    case 1:
      v132 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 176;
      break;
    case 2:
    case 4:
      v132 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 104;
      break;
    case 3:
    case 5:
      v132 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 128;
      break;
    default:
      v132 = *(_QWORD *)(*(_QWORD *)(result + 88) + 24) + 152;
      break;
  }
  if (a3)
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(result + 80, v15, 0, &v327);
  else
    v327 = 0;
  v133 = *(float *)(v132 + 16);
  v134 = 0.0;
  if (v133 == 0.0 || (*(_BYTE *)(v132 + 20) & 0xF) == 0)
    goto LABEL_244;
  v134 = v133 * 64.0;
  if (v134 < 2147483650.0)
  {
    if (v134 > -2147483650.0)
    {
LABEL_244:
      v135 = (int)v134;
      goto LABEL_245;
    }
    v135 = 0x80000000;
  }
  else
  {
    v135 = 0x7FFFFFFF;
  }
LABEL_245:
  LODWORD(v329) = v135;
  v330 = v327;
  if ((v327 & 0x8000000000000) != 0)
  {
    v214 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 + 1, v214));
  }
  v136 = *(_BYTE *)(v132 + 20);
  v137 = v136 & 0xF;
  if (*(_DWORD *)(v132 + 8) || (v148 = *(_QWORD *)v132, (*(_QWORD *)v132 & 0x4000000000000) == 0))
  {
    v138 = 0;
  }
  else
  {
    if ((v148 & 0x8000000000000) != 0)
      v149 = *(float *)((v148 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v149 = *(_QWORD *)v132 != 0;
    if (v149)
      v138 = 0;
    else
      v138 = 0x80;
  }
  v139 = v137 | v138 | 0x40;
  LOBYTE(v331) = v139;
  v140 = *(_BYTE *)(a1 + 16);
  if ((v140 & 0x70) == 0)
    goto LABEL_287;
  v141 = v140 & 0xF;
  if (v137 == 1)
  {
    v142 = (unint64_t *)a1;
    if (v141 != 1)
      goto LABEL_287;
  }
  else
  {
    if ((v136 & 0xF) == 0 || v141 == 1)
    {
      v142 = (unint64_t *)a1;
      goto LABEL_253;
    }
    if ((v140 & 0xF) == 0)
      goto LABEL_287;
    v208 = *(_DWORD *)a1;
    v209 = v329;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v210 = *(_DWORD *)a1;
    else
      v210 = 0;
    v211 = v136 & 0xE;
    if (v211)
      v212 = v329;
    else
      v212 = 0;
    if (v210 == v212)
    {
      v213 = v141 >= v137;
      if (v141 == v137)
      {
        v142 = (unint64_t *)a1;
        if ((*(_BYTE *)(a1 + 16) & 0x40) == 0)
        {
LABEL_287:
          v142 = &v329;
          v140 = v139;
        }
      }
      else
      {
        v142 = (unint64_t *)a1;
        if (!v213)
          goto LABEL_287;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v208 = 0;
      if (!v211)
        v209 = 0;
      v142 = (unint64_t *)a1;
      if (v208 < v209)
        goto LABEL_287;
    }
  }
LABEL_253:
  if ((v140 & 0xF) == 1)
  {
    v144 = 0;
    v143 = 0;
    v140 = 0;
  }
  else
  {
    v143 = *(_DWORD *)v142;
    v144 = v142[1];
    if ((v144 & 0x8000000000000) != 0)
    {
      v216 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFLL);
      do
        v217 = __ldaxr(v216);
      while (__stlxr(v217 + 1, v216));
      v140 = *((_BYTE *)v142 + 16);
    }
  }
  *(_DWORD *)a1 = v143;
  v145 = *(_QWORD *)(a1 + 8);
  if ((v145 & 0x8000000000000) == 0)
  {
    if ((v144 & 0x8000000000000) == 0 && v145 == v144)
    {
LABEL_260:
      *(_BYTE *)(a1 + 16) = v140;
      goto LABEL_261;
    }
LABEL_258:
    if ((v145 & 0x8000000000000) != 0)
    {
      result = v145 & 0xFFFFFFFFFFFFLL;
      do
      {
        v294 = __ldaxr((unsigned int *)result);
        v295 = v294 - 1;
      }
      while (__stlxr(v295, (unsigned int *)result));
      if (!v295)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v66);
      }
    }
    *(_QWORD *)(a1 + 8) = v144;
    goto LABEL_260;
  }
  if ((v144 & 0x8000000000000) == 0)
    goto LABEL_258;
  v326 = *(_OWORD *)((v145 & 0xFFFFFFFFFFFFLL) + 4);
  v298 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFLL);
  v328 = *(_OWORD *)((v144 & 0xFFFFFFFFFFFFLL) + 4);
  result = WebCore::operator==<float,4ul>((float *)&v326, (float *)&v328);
  v145 = *v20;
  if (!(_DWORD)result || HIBYTE(v145) != HIBYTE(v144) || BYTE6(v145) != BYTE6(v144))
    goto LABEL_258;
  *(_BYTE *)(a1 + 16) = v140;
  do
  {
    v299 = __ldaxr(v298);
    v300 = v299 - 1;
  }
  while (__stlxr(v300, v298));
  if (!v300)
  {
    atomic_store(1u, v298);
    result = WTF::fastFree((WTF *)(v144 & 0xFFFFFFFFFFFFLL), v66);
  }
LABEL_261:
  if ((v330 & 0x8000000000000) != 0)
  {
    result = v330 & 0xFFFFFFFFFFFFLL;
    do
    {
      v296 = __ldaxr((unsigned int *)result);
      v297 = v296 - 1;
    }
    while (__stlxr(v297, (unsigned int *)result));
    if (!v297)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v66);
    }
  }
  if ((v327 & 0x8000000000000) != 0)
  {
    result = v327 & 0xFFFFFFFFFFFFLL;
    do
    {
      v146 = __ldaxr((unsigned int *)result);
      v147 = --v146 == 0;
    }
    while (__stlxr(v146, (unsigned int *)result));
    goto LABEL_581;
  }
LABEL_126:
  if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
  {
    *(_DWORD *)(a2 + 248) |= 0x20000000u;
LABEL_128:
    v81 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
    if (*(_BYTE *)(v81 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944E0430);
    }
    v82 = *(_QWORD *)(*(_QWORD *)(v81 + 32) + 8);
    if (*(_BYTE *)(v82 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1944E0450);
    }
    v83 = *(_QWORD *)(*(_QWORD *)(v82 + 32) + 8);
    v84 = *(unsigned __int8 *)(v83 + 46);
    if (v84 != 35 && v84 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1944E0B50);
    }
    *(_BYTE *)(v83 + 328) |= 2u;
    goto LABEL_133;
  }
  v219 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 248) = *(_DWORD *)(a2 + 248) & 0xDFFFFFFF | ((*(_DWORD *)a1 == 0) << 29);
  if (!v219)
    goto LABEL_128;
LABEL_133:
  if (a3 && (*(_BYTE *)(a2 + 251) & 0x20) == 0)
  {
    v85 = *(_QWORD *)(a2 + 32);
    if (v85)
    {
      v85 = *(_QWORD *)(v85 + 8);
      if (v85)
      {
        if (*(_BYTE *)(v85 + 46) != 39)
        {
          __break(0xC471u);
          JUMPOUT(0x1944E0904);
        }
        v85 = *(_QWORD *)(v85 + 32);
        if (v85)
        {
          v85 = *(_QWORD *)(v85 + 8);
          if (v85)
          {
            if (*(_BYTE *)(v85 + 46) != 40)
            {
              __break(0xC471u);
              JUMPOUT(0x1944E0924);
            }
          }
        }
      }
    }
    v323 = *(_DWORD *)a1;
    v86 = *(_QWORD *)(a1 + 8);
    v324 = v86;
    if ((v86 & 0x8000000000000) != 0)
    {
      v220 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFLL);
      do
        v221 = __ldaxr(v220);
      while (__stlxr(v221 + 1, v220));
    }
    v325 = *(_BYTE *)(a1 + 16);
    *(_QWORD *)&v326 = a2;
    DWORD2(v326) = 1;
    result = WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::inlineSet<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue&>((uint64_t *)(v85 + 272), &v326, (uint64_t)&v323, (uint64_t)&v329);
    if ((v324 & 0x8000000000000) != 0)
    {
      result = v324 & 0xFFFFFFFFFFFFLL;
      do
      {
        v88 = __ldaxr((unsigned int *)result);
        v89 = v88 - 1;
      }
      while (__stlxr(v89, (unsigned int *)result));
      if (!v89)
      {
        atomic_store(1u, (unsigned int *)result);
        return WTF::fastFree((WTF *)result, v87);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderTable::cellBelow(WebCore::RenderTable *this, const WebCore::RenderTableCell *a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;

  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 8);
  if (*(_BYTE *)(v4 + 46) != 39)
    goto LABEL_33;
  v5 = *(_DWORD *)(v4 + 200) & 0x7FFFFFFF;
  if ((*((_BYTE *)a2 + 251) & 8) == 0)
  {
    v6 = v5 + 1;
    goto LABEL_6;
  }
  v13 = *(_DWORD *)(v4 + 200) & 0x7FFFFFFF;
  v14 = WebCore::RenderTableCell::parseRowSpanFromDOM(a2);
  v15 = *((_QWORD *)a2 + 4);
  v6 = v14 + v13;
  v5 = v14 + v13 - 1;
  if (!v15)
  {
    v7 = 0;
    result = 0;
    if (v5 < MEMORY[0xD4] - 1)
      return result;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v15 + 8);
  if (*(_BYTE *)(v4 + 46) != 39)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x1944E1B30);
  }
LABEL_6:
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8);
  if (*(_BYTE *)(v7 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E1B50);
  }
  if (v5 >= *(_DWORD *)(v7 + 212) - 1)
  {
LABEL_8:
    result = WebCore::RenderTable::sectionBelow((uint64_t)this, v7, 1);
    if (!result)
      return result;
    v7 = result;
    v6 = 0;
  }
  v9 = *((_DWORD *)a2 + 62) & 0x1FFFFFF;
  if ((*((_BYTE *)this + 328) & 0x40) != 0)
  {
    v16 = *((unsigned int *)this + 57);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v18 += *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v17);
        if (v18 - 1 >= v9)
          break;
        if (v16 == ++v17)
        {
          v9 = *((_DWORD *)this + 57);
          goto LABEL_11;
        }
      }
      v9 = v17;
    }
    else
    {
      v9 = 0;
    }
  }
LABEL_11:
  if (*(_BYTE *)(v7 + 282))
  {
    v20 = v7;
    v19 = v6;
    WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v7);
    v6 = v19;
    v7 = v20;
  }
  if (*(_DWORD *)(v7 + 212) <= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E1C08);
  }
  v10 = *(_QWORD *)(v7 + 200) + 40 * v6;
  if (*(_DWORD *)(v10 + 12) <= v9)
  {
    __break(0xC471u);
    JUMPOUT(0x1944E1C10);
  }
  v11 = *(_QWORD *)v10 + 32 * v9;
  v12 = *(unsigned int *)(v11 + 12);
  if ((_DWORD)v12)
    return *(_QWORD *)(*(_QWORD *)v11 + 8 * v12 - 8);
  else
    return 0;
}

void WebCore::RenderWidget::setWidget(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  WTF *v17;
  _QWORD *v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  _DWORD *v24;
  WTF *v25;
  uint64_t v26;
  int v27;
  WTF **v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int j;
  unsigned int v35;
  WTF **v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::LocalFrameView *v48;
  uint64_t v49;
  uint64_t v50;
  WTF *v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  WebCore::AXObjectCache *v55;
  WebCore::AXObjectCache *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  __int128 v61;
  char v62;
  _DWORD *v63;
  uint64_t v64[2];
  char v65;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 232);
  if (v3 == v4)
    return;
  if (!v4)
    goto LABEL_31;
  if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount)
  {
    v64[0] = 0;
    WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove = 1;
    if ((_MergedGlobals_253 & 1) == 0)
    {
      qword_1ECE84258 = 0;
      _MergedGlobals_253 = 1;
    }
    ++*(_DWORD *)(v4 + 8);
    v63 = (_DWORD *)v4;
    WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WebCore::LocalFrameView*&>((uint64_t)&v61, (uint64_t *)&v63, v64);
    if (v63)
    {
      if (v63[2] == 1)
        (*(void (**)(void))(*(_QWORD *)v63 + 8))();
      else
        --v63[2];
    }
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 32);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 336))(v7);
    }
  }
  WTF::HashSet<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)+ 1944)+ 248)+ 552), *(void **)(a1 + 232));
  {
    WebCore::widgetRendererMap(void)::staticWidgetRendererMap = 0;
LABEL_26:
    v9 = *(_DWORD **)(a1 + 232);
    goto LABEL_27;
  }
  v8 = WebCore::widgetRendererMap(void)::staticWidgetRendererMap;
  v9 = *(_DWORD **)(a1 + 232);
  if (WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
  {
    v10 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 8);
    v11 = ((unint64_t)v9 + ~((_QWORD)v9 << 32)) ^ (((unint64_t)v9 + ~((_QWORD)v9 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    for (i = 1; ; ++i)
    {
      v16 = v14;
      v17 = *(WTF **)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v14);
      if (v17 != (WTF *)-1)
      {
        if (!v17)
          goto LABEL_26;
        if (*((_DWORD **)v17 + 1) == v9)
          break;
      }
      v14 = (v16 + i) & v10;
    }
    if ((_DWORD)v16 != *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 4))
    {
      v18 = (_QWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap + 16 * v16);
      *v18 = 0;
      if (*(_DWORD *)v17 == 1)
        WTF::fastFree(v17, (void *)v4);
      else
        --*(_DWORD *)v17;
      *v18 = -1;
      v19 = v8 + 16 * v16;
      v20 = *(WTF **)(v19 + 8);
      *(_QWORD *)(v19 + 8) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
          WTF::fastFree(v20, (void *)v4);
        else
          --*(_DWORD *)v20;
      }
      ++*(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 16);
      if (WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
        v21 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 12) - 1;
      else
        v21 = -1;
      *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 12) = v21;
      if (WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
      {
        v22 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 4);
        if (6 * *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 12) < v22 && v22 >= 9)
          WTF::HashTable<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v22 >> 1);
      }
    }
    goto LABEL_26;
  }
LABEL_27:
  *(_QWORD *)(a1 + 232) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  v3 = *a2;
LABEL_31:
  if (v3)
    ++*(_DWORD *)(v3 + 8);
  v24 = *(_DWORD **)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v3;
  if (v24)
  {
    if (v24[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
      v3 = *(_QWORD *)(a1 + 232);
    }
    else
    {
      --v24[2];
    }
  }
  if (!v3)
    goto LABEL_77;
  {
    WebCore::widgetRendererMap(void)::staticWidgetRendererMap = 0;
  }
  v25 = *(WTF **)(v3 + 16);
  if (!v25)
  {
    v25 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v25 = 1;
    *((_QWORD *)v25 + 1) = v3;
    v51 = *(WTF **)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v25;
    if (v51)
    {
      if (*(_DWORD *)v51 == 1)
      {
        WTF::fastFree(v51, (void *)v4);
        v25 = *(WTF **)(v3 + 16);
      }
      else
      {
        --*(_DWORD *)v51;
      }
    }
  }
  ++*(_DWORD *)v25;
  v26 = WebCore::widgetRendererMap(void)::staticWidgetRendererMap;
  if (WebCore::widgetRendererMap(void)::staticWidgetRendererMap
    || (WTF::HashTable<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>>::expand(),
        (v26 = WebCore::widgetRendererMap(void)::staticWidgetRendererMap) != 0))
  {
    v27 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = 0;
  v29 = *((_QWORD *)v25 + 1);
  v30 = (~(v29 << 32) + v29) ^ ((unint64_t)(~(v29 << 32) + v29) >> 22);
  v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  v33 = (v32 >> 31) ^ v32;
  for (j = 1; ; ++j)
  {
    v35 = v33 & v27;
    v36 = (WTF **)(v26 + 16 * v35);
    v37 = *v36;
    if (*v36 == (WTF *)-1)
    {
      v28 = (WTF **)(v26 + 16 * v35);
      goto LABEL_45;
    }
    if (!v37)
      break;
    if (*((_QWORD *)v37 + 1) == v29)
    {
      if (*(_DWORD *)v25 == 1)
        WTF::fastFree(v25, (void *)v4);
      else
        --*(_DWORD *)v25;
      goto LABEL_57;
    }
LABEL_45:
    v33 = j + v35;
  }
  if (v28)
  {
    *v28 = 0;
    v28[1] = 0;
    --*(_DWORD *)(v26 - 16);
    *v28 = v25;
  }
  else
  {
    *v36 = v25;
    v28 = (WTF **)(v26 + 16 * v35);
  }
  v38 = *(_QWORD *)(a1 + 8);
  if (!v38)
  {
    v38 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v38 = 1;
    *(_QWORD *)(v38 + 8) = a1;
    v52 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v38;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
      {
        WTF::fastFree(v52, (void *)v4);
        v38 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        --*(_DWORD *)v52;
      }
    }
  }
  ++*(_DWORD *)v38;
  v39 = v28[1];
  v28[1] = (WTF *)v38;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      WTF::fastFree(v39, (void *)v4);
    else
      --*(_DWORD *)v39;
  }
  if (WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
    v40 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 12) + 1;
  else
    v40 = 1;
  *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 12) = v40;
  if (WebCore::widgetRendererMap(void)::staticWidgetRendererMap)
    v41 = *(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 16) + v41);
  v43 = *(unsigned int *)(WebCore::widgetRendererMap(void)::staticWidgetRendererMap - 4);
  if (v43 > 0x400)
  {
    if (v43 > 2 * v42)
      goto LABEL_57;
  }
  else if (3 * v43 > 4 * v42)
  {
    goto LABEL_57;
  }
  WTF::HashTable<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderWidget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::Widget const,WTF::SingleThreadWeakPtrImpl>>>::expand();
LABEL_57:
  WebCore::LocalFrameView::didAddWidgetToRenderTree(*(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)+ 8)+ 1944)+ 248), *(WebCore::Widget **)(a1 + 232));
  if ((*(_WORD *)(a1 + 69) & 2) == 0)
    goto LABEL_68;
  if ((*(_BYTE *)(a1 + 20) & 0xF8) != 0)
    goto LABEL_64;
  v44 = *(WTF **)(a1 + 8);
  if (v44)
    goto LABEL_60;
  v44 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v44 = 1;
  *((_QWORD *)v44 + 1) = a1;
  v54 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v44;
  if (!v54)
    goto LABEL_60;
  if (*(_DWORD *)v54 != 1)
  {
    --*(_DWORD *)v54;
    goto LABEL_60;
  }
  WTF::fastFree(v54, v53);
  v44 = *(WTF **)(a1 + 8);
  if (!v44)
  {
    WebCore::RenderWidget::updateWidgetGeometry((WebCore::RenderWidget *)a1);
    return;
  }
LABEL_60:
  ++*(_DWORD *)v44;
  WebCore::RenderWidget::updateWidgetGeometry((WebCore::RenderWidget *)a1);
  v46 = *((_QWORD *)v44 + 1);
  if (*(_DWORD *)v44 == 1)
    WTF::fastFree(v44, v45);
  else
    --*(_DWORD *)v44;
  if (v46)
  {
LABEL_64:
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0 || (*(_BYTE *)(a1 + 120) & 0x30) != 0)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 232) + 56))(*(_QWORD *)(a1 + 232));
    }
    else
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 232) + 48))(*(_QWORD *)(a1 + 232));
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40)
                                                                                             + 8)
                                                                                 + 1944)
                                                                     + 24)
                                                         + 8)
                                             + 40)
                                 + 8)
                     + 3382))
      {
        LOBYTE(v61) = 0;
        v62 = 0;
        LOBYTE(v64[0]) = 0;
        v65 = 0;
        WebCore::RenderObject::issueRepaint(a1, &v61, 0, 0, (uint64_t)v64);
      }
    }
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v58 = WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                                           + 40)
                                                                               + 8));
      if (v58)
      {
        v59 = v58;
        ++*(_DWORD *)(v58 + 8);
        JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(v58);
        v60 = *(_DWORD *)(v59 + 8);
        if (v60)
        {
          *(_DWORD *)(v59 + 8) = v60 - 1;
          goto LABEL_68;
        }
LABEL_131:
        __break(0xC471u);
        JUMPOUT(0x1944E2474);
      }
    }
LABEL_68:
    v47 = *(_QWORD *)(a1 + 232);
    v48 = *(WebCore::LocalFrameView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)
                                                                          + 40)
                                                              + 8)
                                                  + 1944)
                                      + 248);
    if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount)
    {
      v64[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8)
                                     + 1944)
                         + 248);
      WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove = 1;
      if ((_MergedGlobals_253 & 1) == 0)
      {
        qword_1ECE84258 = 0;
        _MergedGlobals_253 = 1;
      }
      ++*(_DWORD *)(v47 + 8);
      v63 = (_DWORD *)v47;
      WTF::HashMap<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::WeakPtr<WebCore::LocalFrameView,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::RefPtr<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WebCore::LocalFrameView*&>((uint64_t)&v61, (uint64_t *)&v63, v64);
      if (v63)
      {
        if (v63[2] == 1)
          (*(void (**)(void))(*(_QWORD *)v63 + 8))();
        else
          --v63[2];
      }
    }
    else if (v48)
    {
      WebCore::LocalFrameView::addChild(v48, (WebCore::Widget *)v47);
    }
    else
    {
      v49 = *(_QWORD *)(v47 + 32);
      if (v49)
      {
        v50 = *(_QWORD *)(v49 + 8);
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 336))(v50);
      }
    }
LABEL_77:
    if (WebCore::Document::hasEverCreatedAnAXObjectCache)
    {
      v55 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8));
      if (v55)
      {
        v56 = v55;
        ++*((_DWORD *)v55 + 2);
        WebCore::AXObjectCache::childrenChanged(v55, (WebCore::RenderObject *)a1, 0);
        v57 = *((_DWORD *)v56 + 2);
        if (!v57)
          goto LABEL_131;
        *((_DWORD *)v56 + 2) = v57 - 1;
      }
    }
  }
}

WTF *WebCore::LocalFrameView::didAddWidgetToRenderTree(WebCore::LocalFrameView *this, WebCore::Widget *a2)
{
  uint64_t *v2;
  WTF *v3;
  void *v4;
  WTF *result;
  void *v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;

  v2 = (uint64_t *)((char *)this + 552);
  v3 = (WTF *)*((_QWORD *)a2 + 2);
  if (!v3)
  {
    v3 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = a2;
    v8 = (WTF *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree(v8, v7);
        v3 = (WTF *)*((_QWORD *)a2 + 2);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  ++*(_DWORD *)v3;
  v10 = v3;
  WTF::HashTable<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>>::add(v2, (uint64_t *)&v10, (uint64_t)&v9);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v4);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = *(_QWORD *)(*a2 + 8);
  v12 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
  v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = (v14 >> 31) ^ v14;
  for (i = 1; ; ++i)
  {
    v17 = v15 & v8;
    v18 = (uint64_t *)(v6 + 8 * v17);
    v19 = *v18;
    if (*v18 == -1)
    {
      v9 = (uint64_t *)(v6 + 8 * v17);
      goto LABEL_6;
    }
    if (!v19)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = *a2;
        v18 = v9;
      }
      *a2 = 0;
      result = (uint64_t *)*v18;
      *v18 = v10;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
        else
          --*(_DWORD *)result;
      }
      v20 = *v4;
      if (*v4)
        v21 = *(_DWORD *)(v20 - 12) + 1;
      else
        v21 = 1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *v4;
      if (*v4)
        v23 = *(_DWORD *)(v22 - 12);
      else
        v23 = 0;
      v24 = (*(_DWORD *)(v22 - 16) + v23);
      v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
      {
        if (v25 > 2 * v24)
          goto LABEL_17;
      }
      else if (3 * v25 > 4 * v24)
      {
LABEL_17:
        v26 = v22 + 8 * v25;
        v27 = 1;
        goto LABEL_18;
      }
      result = WTF::HashTable<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>>>::expand(v4, v18);
      v18 = result;
      v22 = *v4;
      if (*v4)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_17;
    }
    if (*(_QWORD *)(v19 + 8) == v11)
      break;
LABEL_6:
    v15 = i + v17;
  }
  if ((v7 & 1) != 0)
    v28 = 0;
  else
    v28 = *(unsigned int *)(v6 - 4);
  v27 = 0;
  v26 = v6 + 8 * v28;
LABEL_18:
  *(_QWORD *)a3 = v18;
  *(_QWORD *)(a3 + 8) = v26;
  *(_BYTE *)(a3 + 16) = v27;
  return result;
}

_BYTE *WebCore::jsElementPrototypeFunction_append(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[40];
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  JSC::VM *v29;
  unsigned __int8 v30[8];
  WTF::StringImpl *v31;
  unsigned __int8 v32[8];
  WTF::StringImpl *v33;
  char v34;

  v4 = *((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v5 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "Element", "append");
  v6 = *(_QWORD *)(v5 + 24);
  v29 = (JSC::VM *)v4;
  v24 = (WTF *)v26;
  v25 = 4;
  v26[32] = 0;
  v27 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v28 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v24;
  WebCore::convertVariadicArguments<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::Node>,WebCore::IDLDOMString,WebCore::IDLInterface<WebCore::TrustedScript>>>((uint64_t)this, (uint64_t)a2, 0, &v23);
  if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
  {
LABEL_23:
    v8 = 0;
    goto LABEL_6;
  }
  WebCore::ContainerNode::append(v6, (unsigned int **)&v23, (uint64_t)v32);
  if (v34)
  {
    v30[0] = v32[0];
    v20 = v33;
    v33 = 0;
    v31 = v20;
    if (!*(_QWORD *)(v4 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v29, v30);
      v20 = v31;
    }
    v31 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v7);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (v34)
    {
      v21 = v33;
      v33 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 != 2)
        {
          v8 = 0;
          *(_DWORD *)v21 -= 2;
          goto LABEL_6;
        }
        WTF::StringImpl::destroy(v21, v7);
      }
    }
    goto LABEL_23;
  }
  v8 = 10;
LABEL_6:
  v9 = v23;
  v23 = 0;
  if (v9)
  {
    v11 = (char *)v9 + 8;
    v10 = *(unsigned int *)v9;
    if ((_DWORD)v10)
    {
      v12 = 16 * v10;
      do
      {
        v13 = *((unsigned int *)v11 + 2);
        if ((_DWORD)v13 != -1)
          ((void (*)(unsigned __int8 *, char *))off_1E3271300[v13])(v32, v11);
        *((_DWORD *)v11 + 2) = -1;
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    WTF::fastFree(v9, v7);
  }
  if (HIDWORD(v25))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v24, v28);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
    if (HIDWORD(v25))
    {
      v17 = v24;
      v18 = 8 * HIDWORD(v25);
      do
      {
        v19 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19, v7);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        v17 = (WTF *)((char *)v17 + 8);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
  }
  v14 = v24;
  if (v26 != (_BYTE *)v24 && v24 != 0)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v14, v7);
  }
  return (_BYTE *)v8;
}

uint64_t WebCore::RenderLayer::removeChild(WebCore::RenderLayer *this, WebCore::RenderLayer *a2)
{
  uint64_t v4;
  WebCore::RenderView *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::RenderLayer *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::RenderLayer *v14;
  uint64_t v15;
  WebCore::RenderLayer *v16;
  uint64_t v17;
  WebCore::RenderView *v18;
  uint64_t result;
  WebCore::RenderLayer *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  int v25;
  uint64_t i;
  uint64_t v27;
  WTF *v28;
  WebCore::RenderLayerCompositor *v29;
  WebCore::RenderLayerCompositor *v30;
  WTF *v31;
  void *v32;
  WebCore::RenderLayerCompositor *v33;
  WebCore::RenderLayerCompositor *v34;
  WTF *v35;
  void *v36;
  WebCore::RenderLayer *v37;
  uint64_t v38;

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8) + 40) + 8);
  if (!*(_BYTE *)(v4 + 3405))
  {
    v5 = *(WebCore::RenderView **)(v4 + 1944);
    v6 = *((_QWORD *)v5 + 50);
    if (!v6)
    {
      v29 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
      v6 = WebCore::RenderLayerCompositor::RenderLayerCompositor(v29, v5);
      v30 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v5 + 50);
      *((_QWORD *)v5 + 50) = v6;
      if (v30)
      {
        WebCore::RenderLayerCompositor::~RenderLayerCompositor(v30);
        WTF::fastFree(v31, v32);
        v6 = *((_QWORD *)v5 + 50);
      }
    }
    WebCore::RenderLayerCompositor::layerWillBeRemoved(v6, this, a2);
  }
  v7 = *((_QWORD *)a2 + 6);
  if (v7)
    *(_QWORD *)(v7 + 56) = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 7);
  if (v8)
    *(_QWORD *)(v8 + 48) = v7;
  if (*((WebCore::RenderLayer **)this + 8) == a2)
    *((_QWORD *)this + 8) = v8;
  if (*((WebCore::RenderLayer **)this + 9) == a2)
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 6);
  if ((*((_BYTE *)a2 + 24) & 4) == 0
    || (WebCore::RenderLayer::dirtyNormalFlowList(this, a2), (*((_BYTE *)a2 + 24) & 4) == 0)
    || *((_QWORD *)a2 + 8))
  {
    v9 = a2;
    while (1)
    {
      v9 = (WebCore::RenderLayer *)*((_QWORD *)v9 + 5);
      if (!v9)
        break;
      if ((*((_BYTE *)v9 + 24) & 0x4A) != 0)
      {
        v10 = *((_QWORD *)v9 + 11);
        if (v10 && *(_DWORD *)(v10 + 8))
        {
          if (*(_DWORD *)(v10 + 12))
            *(_DWORD *)(v10 + 12) = 0;
          v24 = *(WTF **)v10;
          if (*(_QWORD *)v10)
          {
            *(_QWORD *)v10 = 0;
            *(_DWORD *)(v10 + 8) = 0;
            WTF::fastFree(v24, a2);
          }
        }
        v11 = *((_QWORD *)v9 + 12);
        if (v11 && *(_DWORD *)(v11 + 8))
        {
          if (*(_DWORD *)(v11 + 12))
            *(_DWORD *)(v11 + 12) = 0;
          v28 = *(WTF **)v11;
          if (*(_QWORD *)v11)
          {
            *(_QWORD *)v11 = 0;
            *(_DWORD *)(v11 + 8) = 0;
            WTF::fastFree(v28, a2);
          }
        }
        v12 = *((_QWORD *)v9 + 3);
        *((_QWORD *)v9 + 3) = v12 | 0x80;
        if ((v12 & 0x4000000) != 0)
        {
          *((_DWORD *)v9 + 3) |= 4u;
          if ((v12 & 4) != 0)
          {
            v9 = (WebCore::RenderLayer *)*((_QWORD *)v9 + 5);
            if (v9)
            {
LABEL_58:
              while (1)
              {
                v25 = *((_DWORD *)v9 + 3);
                if ((v25 & 1) != 0)
                  break;
                *((_DWORD *)v9 + 3) = v25 | 1;
                if ((*((_BYTE *)v9 + 24) & 4) == 0)
                {
                  while (1)
                  {
                    v9 = (WebCore::RenderLayer *)*((_QWORD *)v9 + 5);
                    if (!v9)
                      goto LABEL_19;
                    if ((*((_BYTE *)v9 + 24) & 0x4A) != 0)
                      goto LABEL_62;
                  }
                }
                v9 = (WebCore::RenderLayer *)*((_QWORD *)v9 + 5);
LABEL_62:
                if (!v9)
                  goto LABEL_19;
              }
            }
          }
          else
          {
            while (1)
            {
              v9 = (WebCore::RenderLayer *)*((_QWORD *)v9 + 5);
              if (!v9)
                break;
              if ((*((_BYTE *)v9 + 24) & 0x4A) != 0)
                goto LABEL_58;
            }
          }
        }
        break;
      }
    }
  }
LABEL_19:
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  WebCore::RenderLayer::updateDescendantDependentFlags(a2);
  v13 = *((_QWORD *)a2 + 3);
  if ((v13 & 0x80000) != 0 || (v13 & 0x200000) != 0)
  {
    v14 = this;
    do
    {
      v15 = *((_QWORD *)v14 + 3);
      if ((v15 & 0x100000) != 0)
        break;
      *((_QWORD *)v14 + 3) = v15 | 0x100000;
      v14 = (WebCore::RenderLayer *)*((_QWORD *)v14 + 5);
    }
    while (v14);
    v13 = *((_QWORD *)a2 + 3);
  }
  if (this && (v13 & 0x1800) != 0)
  {
    v16 = this;
    do
    {
      v17 = *((_QWORD *)v16 + 3);
      if ((v17 & 0x2000) != 0)
        break;
      *((_QWORD *)v16 + 3) = v17 | 0x2000;
      v16 = (WebCore::RenderLayer *)*((_QWORD *)v16 + 5);
    }
    while (v16);
  }
  v18 = *(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 24) + 8)
                                                        + 40)
                                            + 8)
                                + 1944);
  result = *((_QWORD *)v18 + 50);
  if (!result)
  {
    v33 = (WebCore::RenderLayerCompositor *)WTF::fastMalloc((WTF *)0x158);
    result = WebCore::RenderLayerCompositor::RenderLayerCompositor(v33, v18);
    v34 = (WebCore::RenderLayerCompositor *)*((_QWORD *)v18 + 50);
    *((_QWORD *)v18 + 50) = result;
    if (v34)
    {
      WebCore::RenderLayerCompositor::~RenderLayerCompositor(v34);
      WTF::fastFree(v35, v36);
      result = *((_QWORD *)v18 + 50);
    }
  }
  if (*(_DWORD *)(result + 200))
  {
    *((_DWORD *)this + 3) |= 0x10u;
    if ((*((_BYTE *)this + 24) & 4) != 0)
    {
      v20 = (WebCore::RenderLayer *)*((_QWORD *)this + 5);
      if (v20)
      {
LABEL_34:
        do
        {
          v21 = *((_DWORD *)v20 + 3);
          if ((v21 & 1) != 0)
            break;
          *((_DWORD *)v20 + 3) = v21 | 1;
          if ((*((_BYTE *)v20 + 24) & 4) == 0)
          {
            while (1)
            {
              v20 = (WebCore::RenderLayer *)*((_QWORD *)v20 + 5);
              if (!v20)
                goto LABEL_35;
              if ((*((_BYTE *)v20 + 24) & 0x4A) != 0)
                goto LABEL_51;
            }
          }
          v20 = (WebCore::RenderLayer *)*((_QWORD *)v20 + 5);
LABEL_51:
          ;
        }
        while (v20);
      }
    }
    else
    {
      v20 = this;
      while (1)
      {
        v20 = (WebCore::RenderLayer *)*((_QWORD *)v20 + 5);
        if (!v20)
          break;
        if ((*((_BYTE *)v20 + 24) & 0x4A) != 0)
          goto LABEL_34;
      }
    }
  }
LABEL_35:
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 88) + 40) + 636) & 0x1F00000) == 0x100000)
  {
    v22 = *((_QWORD *)a2 + 3);
    if ((v22 & 0x800000000000) == 0 || !this || (v22 & 0xA) != 0)
      goto LABEL_37;
  }
  else if (!this)
  {
    goto LABEL_37;
  }
  v37 = this;
  do
  {
    v38 = *((_QWORD *)v37 + 3);
    if ((v38 & 0x1000000000000) != 0)
      break;
    *((_QWORD *)v37 + 3) = v38 | 0x1000000000000;
    v37 = (WebCore::RenderLayer *)*((_QWORD *)v37 + 5);
  }
  while (v37);
LABEL_37:
  v23 = *((_QWORD *)this + 4);
  if ((*(_BYTE *)(*(_QWORD *)(v23 + 104) + 239) & 4) != 0 || (*(_BYTE *)(v23 + 120) & 0x30) != 0)
  {
    *((_QWORD *)this + 3) |= 0x40000uLL;
    for (i = *((_QWORD *)this + 5); i; i = *(_QWORD *)(i + 40))
    {
      v27 = *(_QWORD *)(i + 24);
      if ((v27 & 0x100000) != 0)
        break;
      *(_QWORD *)(i + 24) = v27 | 0x100000;
    }
  }
  return result;
}

uint64_t WebCore::RenderLayerCompositor::layerWillBeRemoved(uint64_t this, WebCore::RenderLayer *a2, WebCore::RenderLayer *a3)
{
  WebCore::RenderLayer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23[2];
  uint64_t v24;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 24) + 8) + 40) + 8)
                + 3405))
    return this;
  v3 = a3;
  v4 = *((_QWORD *)a3 + 32);
  if (!v4)
  {
    v5 = *((_QWORD *)a3 + 10);
    if (!v5)
      return this;
    v6 = *(_QWORD *)(v5 + 8);
    if (!v6)
      return this;
    WebCore::RenderLayer::setBackingNeedsRepaint(*(WebCore::RenderLayer **)(v5 + 8), 1);
    v8 = *(_QWORD *)(v6 + 256);
    v9 = (WTF *)*((_QWORD *)v3 + 10);
    if (!v9 || !*((_QWORD *)v9 + 1))
      goto LABEL_7;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 4) + 24) + 8) + 40) + 8)
                  + 3405))
    {
      *((_QWORD *)v3 + 10) = 0;
    }
    else
    {
      WebCore::RenderLayer::clearClipRectsIncludingDescendants(v3, (void *)4);
      v9 = (WTF *)*((_QWORD *)v3 + 10);
      *((_QWORD *)v3 + 10) = 0;
      if (!v9)
      {
LABEL_7:
        this = WTF::WeakListHashSet<WebCore::RenderLayer,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderLayer>(v8 + 16, v3);
        goto LABEL_8;
      }
    }
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v7);
    else
      --*(_DWORD *)v9;
    goto LABEL_7;
  }
  v11 = this;
  this = WebCore::RenderLayer::enclosingCompositingLayerForRepaint(a3, 1);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)(v4 + 184);
    v17 = v4 + 176;
    v15 = *(_DWORD *)(v4 + 176);
    v16 = *(_DWORD *)(v17 + 4);
    v24 = v14;
    v18 = WebCore::RenderLayer::offsetFromAncestor((uint64_t)v3, v12, 0);
    v19 = v15 + v18;
    if (__OFADD__(v15, (_DWORD)v18))
      v19 = (v15 >> 31) + 0x7FFFFFFF;
    v20 = v16 + HIDWORD(v18);
    if (__OFADD__(v16, HIDWORD(v18)))
      v20 = (v16 >> 31) + 0x7FFFFFFF;
    v23[0] = v19;
    v23[1] = v20;
    this = (uint64_t)WebCore::RenderLayer::setBackingNeedsRepaintInRect(v13, v23, 1);
    if ((*(_BYTE *)(v13 + 24) & 1) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 248) + 328) + 24);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22)
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v22 + 48) + 16) + 1000))(*(_QWORD *)(*(_QWORD *)(v22 + 48) + 16));
      }
    }
  }
LABEL_8:
  *((_DWORD *)v3 + 3) |= 0x200u;
  if ((*((_BYTE *)v3 + 24) & 4) != 0)
  {
    v3 = (WebCore::RenderLayer *)*((_QWORD *)v3 + 5);
    if (v3)
    {
LABEL_11:
      do
      {
        v10 = *((_DWORD *)v3 + 3);
        if ((v10 & 2) != 0)
          break;
        *((_DWORD *)v3 + 3) = v10 | 2;
        if ((*((_BYTE *)v3 + 24) & 4) == 0)
        {
          while (1)
          {
            v3 = (WebCore::RenderLayer *)*((_QWORD *)v3 + 5);
            if (!v3)
              return this;
            if ((*((_BYTE *)v3 + 24) & 0x4A) != 0)
              goto LABEL_15;
          }
        }
        v3 = (WebCore::RenderLayer *)*((_QWORD *)v3 + 5);
LABEL_15:
        ;
      }
      while (v3);
    }
  }
  else
  {
    while (1)
    {
      v3 = (WebCore::RenderLayer *)*((_QWORD *)v3 + 5);
      if (!v3)
        break;
      if ((*((_BYTE *)v3 + 24) & 0x4A) != 0)
        goto LABEL_11;
    }
  }
  return this;
}

unint64_t WebCore::wrap<WebCore::DatasetDOMStringMap>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char **v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v27;
  JSC::Structure *v28;
  JSC::JSCell *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF *v46;
  void *v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *Allocator;
  unint64_t v57;
  _QWORD *v58;
  WTF *v59;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v9 = *(_QWORD *)(v5 + 32);
    if (!v9)
      goto LABEL_12;
    v10 = *(_DWORD *)(v9 - 8);
    v11 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = *(WTF **)(v9 + 16 * v14);
    if (v15 != a3)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v10;
        v15 = *(WTF **)(v9 + 16 * v14);
        ++v16;
        if (v15 == a3)
          goto LABEL_11;
      }
      goto LABEL_12;
    }
LABEL_11:
    v6 = *(_QWORD *)(v9 + 16 * v14 + 8);
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v6 = *(_QWORD *)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_12;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_12:
  *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 8) + 24) += 2;
  v17 = *(_QWORD *)(a2 + 3296);
  if (v17)
  {
    v18 = *(_DWORD *)(v17 - 8);
    v19 = ((unint64_t)&WebCore::JSDOMStringMap::s_info + ~((_QWORD)&WebCore::JSDOMStringMap::s_info << 32)) ^ (((unint64_t)&WebCore::JSDOMStringMap::s_info + ~((_QWORD)&WebCore::JSDOMStringMap::s_info << 32)) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = *(char ***)(v17 + 16 * v22);
    if (v23 == &WebCore::JSDOMStringMap::s_info)
    {
LABEL_14:
      v24 = *(_QWORD *)(v17 + 16 * v22 + 8);
      if (v24)
        goto LABEL_16;
    }
    else
    {
      v40 = 1;
      while (v23)
      {
        v22 = ((_DWORD)v22 + v40) & v18;
        v23 = *(char ***)(v17 + 16 * v22);
        ++v40;
        if (v23 == &WebCore::JSDOMStringMap::s_info)
          goto LABEL_14;
      }
    }
  }
  v25 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSDOMStringMapPrototype::createStructure(v25, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v29 = (JSC::JSCell *)WebCore::JSDOMStringMapPrototype::create((WebCore::JSDOMStringMapPrototype *)v25, Structure, v27, v28);
  v30 = WebCore::JSDOMStringMap::createStructure(v25, a2, v29);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v30, (uint64_t)&WebCore::JSDOMStringMap::s_info);
LABEL_16:
  v31 = *(_QWORD *)(a2 + 56);
  v32 = *(_QWORD *)(v31 + 41456);
  v33 = *(_QWORD *)(v32 + 23536);
  v34 = *(_QWORD **)(v33 + 3560);
  if (v34)
    goto LABEL_17;
  v41 = *(_QWORD *)(v32 + 22648);
  if (__ldaxr((unsigned __int8 *)v41))
  {
    __clrex();
LABEL_39:
    MEMORY[0x19AEA534C](v41);
    goto LABEL_40;
  }
  if (__stxr(1u, (unsigned __int8 *)v41))
    goto LABEL_39;
LABEL_40:
  v43 = *(_QWORD *)(v41 + 2824);
  if (!*(_QWORD *)(v43 + 3560))
  {
    v49 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v59, "IsoSpace T");
    v58 = 0;
    MEMORY[0x19AEA3204](v49, &v59, v31 + 192, v31 + 1872, 32, 8, &v58);
    v51 = (uint64_t)v58;
    v58 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v59;
    v59 = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::fastFree(v52, v50);
      else
        --*(_DWORD *)v52;
    }
    v53 = *(_QWORD *)(v43 + 3560);
    *(_QWORD *)(v43 + 3560) = v49;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v45 = *(_QWORD *)(v33 + 3560);
  *(_QWORD *)(v33 + 3560) = v34;
  if (v45)
  {
    v46 = (WTF *)MEMORY[0x19AEA3528](v45, v44);
    WTF::fastFree(v46, v47);
  }
  v48 = __ldxr((unsigned __int8 *)v41);
  if (v48 != 1)
  {
    __clrex();
    goto LABEL_47;
  }
  if (__stlxr(0, (unsigned __int8 *)v41))
LABEL_47:
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
LABEL_17:
  SlowCase = v34[3];
  if (SlowCase < v34[4])
  {
LABEL_18:
    v34[3] = SlowCase + 32;
    goto LABEL_19;
  }
  SlowCase = v34[5];
  if ((SlowCase & 1) == 0)
  {
    v57 = *(_QWORD *)(SlowCase + 8) ^ v34[6];
    v34[4] = SlowCase + HIDWORD(v57);
    v34[5] = SlowCase + (int)v57;
    goto LABEL_18;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_19:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v24);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v31 + 755))
    __dmb(0xAu);
  v35 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3351A8 & 1) == 0)
  {
    qword_1EE3351A0 = (uint64_t)&off_1E3259EC8;
    byte_1EE3351A8 = 1;
  }
  if (*(_DWORD *)(v35 + 48))
  {
    v59 = a3;
    if ((SlowCase & 8) != 0)
      v54 = (SlowCase - 112) | 1;
    else
      v54 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v54 & 1) != 0)
      v55 = v54 + 47;
    else
      v55 = *(_QWORD *)v54 + 32;
    Allocator = *(_QWORD **)(v55 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v55 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE3351A0;
    Allocator[2] = v35;
    v58 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v35 + 32), (uint64_t *)&v59, (uint64_t *)&v58);
    v39 = (uint64_t)v58;
    if (v58)
      goto LABEL_32;
  }
  else
  {
    if ((SlowCase & 8) != 0)
      v36 = (SlowCase - 112) | 1;
    else
      v36 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v36 & 1) != 0)
      v37 = v36 + 47;
    else
      v37 = *(_QWORD *)v36 + 32;
    v38 = *(_QWORD **)(v37 + 16);
    if (!v38)
      v38 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v37 + 16) = *v38;
    *v38 = SlowCase;
    v38[1] = &qword_1EE3351A0;
    v38[2] = v35;
    v39 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v38;
    if (v39)
LABEL_32:
      *(_QWORD *)(v39 + 8) = 3;
  }
  return SlowCase;
}

void WebCore::ScrollingTree::~ScrollingTree(WebCore::ScrollingTree *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  WebCore::ScrollingStateTree ***v19;
  uint64_t v20;
  WebCore::ScrollingStateTree **v21;
  uint64_t v22;
  WebCore::ScrollingStateTree *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  WTF *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  WTF *v81;
  WTF *v83;

  *(_QWORD *)this = off_1E34040D0;
  v3 = *((_QWORD *)this + 40);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)(v3 + 8);
      do
      {
        if (*(v5 - 1) == -1)
          goto LABEL_22;
        v6 = *v5;
        *v5 = 0;
        if (!v6)
          goto LABEL_22;
        v7 = *(_QWORD *)(v6 + 8);
        if (__ldaxr((unsigned __int8 *)v7))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v7))
        {
          goto LABEL_10;
        }
        MEMORY[0x19AEA534C](v7);
LABEL_10:
        v9 = *(_QWORD *)(v7 + 8);
        v10 = v9 - 1;
        *(_QWORD *)(v7 + 8) = v9 - 1;
        if (v9 == 1)
        {
          v14 = *(_QWORD *)(v7 + 16);
          v11 = *(_QWORD *)(v7 + 24);
          *(_QWORD *)(v7 + 24) = 0;
          v12 = v14 != 0;
        }
        else
        {
          v11 = 0;
          v12 = 1;
        }
        v13 = __ldxr((unsigned __int8 *)v7);
        if (v13 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v7))
          {
            if (!v10)
              goto LABEL_18;
            goto LABEL_22;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v7);
        if (!v10)
        {
LABEL_18:
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          if (!v12)
            WTF::fastFree((WTF *)v7, a2);
        }
LABEL_22:
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v15 = *((_QWORD *)this + 39);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)(v15 + 24 * i) != -1)
        {
          v18 = v15 + 24 * i;
          v19 = (WebCore::ScrollingStateTree ***)(v18 + 8);
          v20 = *(unsigned int *)(v18 + 20);
          if ((_DWORD)v20)
          {
            v21 = *v19;
            v22 = 8 * v20;
            do
            {
              v23 = *v21;
              *v21 = 0;
              if (v23)
              {
                WebCore::ScrollingStateTree::~ScrollingStateTree(v23, a2);
                if (*(_DWORD *)v24)
                {
                  *((_OWORD *)v24 + 3) = 0u;
                  *((_OWORD *)v24 + 4) = 0u;
                  *((_OWORD *)v24 + 1) = 0u;
                  *((_OWORD *)v24 + 2) = 0u;
                  *(_OWORD *)v24 = 0u;
                }
                else
                {
                  WTF::fastFree(v24, a2);
                }
              }
              ++v21;
              v22 -= 8;
            }
            while (v22);
          }
          v25 = (WTF *)*v19;
          if (*v19)
          {
            *v19 = 0;
            *(_DWORD *)(v15 + 24 * i + 16) = 0;
            WTF::fastFree(v25, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v15 - 16), a2);
  }
  v26 = (WTF *)*((_QWORD *)this + 35);
  if (v26)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v26, a2);
  }
  v27 = *((_QWORD *)this + 32);
  if (v27)
    WTF::fastFree((WTF *)(v27 - 16), a2);
  v28 = *((_QWORD *)this + 31);
  if (v28)
    WTF::fastFree((WTF *)(v28 - 16), a2);
  v29 = *((_QWORD *)this + 30);
  if (v29)
    WTF::fastFree((WTF *)(v29 - 16), a2);
  v30 = *((_QWORD *)this + 29);
  if (v30)
    WTF::fastFree((WTF *)(v30 - 16), a2);
  v31 = *((_QWORD *)this + 25);
  if (v31)
  {
    v78 = *(unsigned int *)(v31 - 4);
    if ((_DWORD)v78)
    {
      v79 = (uint64_t *)(v31 + 24);
      do
      {
        if (*((unsigned __int8 *)v79 - 24) != 254)
        {
          v80 = *v79;
          *v79 = 0;
          if (v80)
          {
            v81 = *(WTF **)(v80 + 144);
            if ((WTF *)(v80 + 160) != v81 && v81 != 0)
            {
              *(_QWORD *)(v80 + 144) = 0;
              *(_DWORD *)(v80 + 152) = 0;
              WTF::fastFree(v81, a2);
            }
            v83 = *(WTF **)v80;
            if (v80 + 16 != *(_QWORD *)v80 && v83 != 0)
            {
              *(_QWORD *)v80 = 0;
              *(_DWORD *)(v80 + 8) = 0;
              WTF::fastFree(v83, a2);
            }
            WTF::fastFree((WTF *)v80, a2);
          }
        }
        v79 += 4;
        --v78;
      }
      while (v78);
    }
    WTF::fastFree((WTF *)(v31 - 16), a2);
  }
  v32 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v32)
  {
    v33 = *(WTF **)(v32 + 144);
    if ((WTF *)(v32 + 160) != v33 && v33 != 0)
    {
      *(_QWORD *)(v32 + 144) = 0;
      *(_DWORD *)(v32 + 152) = 0;
      WTF::fastFree(v33, a2);
    }
    v35 = *(WTF **)v32;
    if (v32 + 16 != *(_QWORD *)v32 && v35 != 0)
    {
      *(_QWORD *)v32 = 0;
      *(_DWORD *)(v32 + 8) = 0;
      WTF::fastFree(v35, a2);
    }
    WTF::fastFree((WTF *)v32, a2);
  }
  v37 = *((_QWORD *)this + 20);
  if (v37)
  {
    v38 = *(unsigned int *)(v37 - 4);
    if ((_DWORD)v38)
    {
      v39 = (uint64_t *)*((_QWORD *)this + 20);
      do
      {
        v40 = *v39;
        if (*v39 == -1)
          goto LABEL_86;
        *v39 = 0;
        if (!v40)
          goto LABEL_86;
        v41 = *(_QWORD *)(v40 + 8);
        if (__ldaxr((unsigned __int8 *)v41))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v41))
        {
          goto LABEL_74;
        }
        MEMORY[0x19AEA534C](v41);
LABEL_74:
        v43 = *(_QWORD *)(v41 + 8);
        v44 = v43 - 1;
        *(_QWORD *)(v41 + 8) = v43 - 1;
        if (v43 == 1)
        {
          v48 = *(_QWORD *)(v41 + 16);
          v45 = *(_QWORD *)(v41 + 24);
          *(_QWORD *)(v41 + 24) = 0;
          v46 = v48 != 0;
        }
        else
        {
          v45 = 0;
          v46 = 1;
        }
        v47 = __ldxr((unsigned __int8 *)v41);
        if (v47 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v41))
          {
            if (!v44)
              goto LABEL_82;
            goto LABEL_86;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v41);
        if (!v44)
        {
LABEL_82:
          if (v45)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          if (!v46)
            WTF::fastFree((WTF *)v41, a2);
        }
LABEL_86:
        ++v39;
        --v38;
      }
      while (v38);
    }
    WTF::fastFree((WTF *)(v37 - 16), a2);
  }
  v49 = *((_QWORD *)this + 19);
  if (v49)
  {
    v50 = *(unsigned int *)(v49 - 4);
    if ((_DWORD)v50)
    {
      v51 = (uint64_t *)*((_QWORD *)this + 19);
      do
      {
        v52 = *v51;
        if (*v51 == -1)
          goto LABEL_111;
        *v51 = 0;
        if (!v52)
          goto LABEL_111;
        v53 = *(_QWORD *)(v52 + 8);
        if (__ldaxr((unsigned __int8 *)v53))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v53))
        {
          goto LABEL_99;
        }
        MEMORY[0x19AEA534C](v53);
LABEL_99:
        v55 = *(_QWORD *)(v53 + 8);
        v56 = v55 - 1;
        *(_QWORD *)(v53 + 8) = v55 - 1;
        if (v55 == 1)
        {
          v60 = *(_QWORD *)(v53 + 16);
          v57 = *(_QWORD *)(v53 + 24);
          *(_QWORD *)(v53 + 24) = 0;
          v58 = v60 != 0;
        }
        else
        {
          v57 = 0;
          v58 = 1;
        }
        v59 = __ldxr((unsigned __int8 *)v53);
        if (v59 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v53))
          {
            if (!v56)
              goto LABEL_107;
            goto LABEL_111;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v53);
        if (!v56)
        {
LABEL_107:
          if (v57)
            (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
          if (!v58)
            WTF::fastFree((WTF *)v53, a2);
        }
LABEL_111:
        ++v51;
        --v50;
      }
      while (v50);
    }
    WTF::fastFree((WTF *)(v49 - 16), a2);
  }
  v61 = *((_QWORD *)this + 18);
  if (v61)
  {
    v62 = *(unsigned int *)(v61 - 4);
    if ((_DWORD)v62)
    {
      v63 = v61 + 16;
      do
      {
        if (*(_QWORD *)(v63 - 8) != -1)
        {
          v64 = *(WTF **)v63;
          if (*(_QWORD *)v63)
          {
            *(_QWORD *)v63 = 0;
            *(_DWORD *)(v63 + 8) = 0;
            WTF::fastFree(v64, a2);
          }
        }
        v63 += 32;
        --v62;
      }
      while (v62);
    }
    WTF::fastFree((WTF *)(v61 - 16), a2);
  }
  v65 = *((_QWORD *)this + 5);
  if (v65)
  {
    v66 = *(unsigned int *)(v65 - 4);
    if ((_DWORD)v66)
    {
      v67 = (_QWORD *)(v65 + 16);
      do
      {
        if (*(v67 - 1) != -1 && *v67)
          WTF::fastFree((WTF *)(*v67 - 16), a2);
        v67 += 3;
        --v66;
      }
      while (v66);
    }
    WTF::fastFree((WTF *)(v65 - 16), a2);
  }
  v68 = *((_QWORD *)this + 3);
  if (v68)
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTraits<WTF::RefPtr<WebCore::ScrollingStateNode,WTF::RawPtrTraits<WebCore::ScrollingStateNode>,WTF::DefaultRefDerefTraits<WebCore::ScrollingStateNode>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>::deallocateTable(v68, a2);
  v69 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 8);
    if (__ldaxr((unsigned __int8 *)v70))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v70))
    {
      goto LABEL_138;
    }
    MEMORY[0x19AEA534C](v70);
LABEL_138:
    v72 = *(_QWORD *)(v70 + 8);
    v73 = v72 - 1;
    *(_QWORD *)(v70 + 8) = v72 - 1;
    if (v72 == 1)
    {
      v77 = *(_QWORD *)(v70 + 16);
      v74 = *(_QWORD *)(v70 + 24);
      *(_QWORD *)(v70 + 24) = 0;
      v75 = v77 != 0;
    }
    else
    {
      v74 = 0;
      v75 = 1;
    }
    v76 = __ldxr((unsigned __int8 *)v70);
    if (v76 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v70))
      {
        if (v73)
          return;
LABEL_146:
        if (v74)
          (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
        if (!v75)
          WTF::fastFree((WTF *)v70, a2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v70);
    if (v73)
      return;
    goto LABEL_146;
  }
}

unsigned __int8 *WebCore::FontCache::prewarmGlobally(WebCore::FontCache *this)
{
  unsigned __int8 *result;
  int v2;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF::StringImpl *v11;
  WTF *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;

  result = (unsigned __int8 *)WTF::MemoryPressureHandler::singleton(this);
  v2 = atomic_load(result + 4);
  if (v2 == 2 || result[7] != 0)
    return result;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v4 = v24;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = v24;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v24;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v24;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v8 = v24;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v9 = v24;
  v10 = (WTF *)WTF::fastMalloc((WTF *)0x30);
  v12 = v10;
  if (v24)
    *(_DWORD *)v24 += 2;
  *(_QWORD *)v10 = v4;
  if (v5)
    *(_DWORD *)v5 += 2;
  *((_QWORD *)v10 + 1) = v5;
  if (v6)
    *(_DWORD *)v6 += 2;
  *((_QWORD *)v10 + 2) = v6;
  if (v7)
    *(_DWORD *)v7 += 2;
  *((_QWORD *)v10 + 3) = v7;
  if (v8)
    *(_DWORD *)v8 += 2;
  *((_QWORD *)v10 + 4) = v8;
  if (v9)
  {
    v13 = *(_DWORD *)v9;
    *(_DWORD *)v9 += 2;
    *((_QWORD *)v10 + 5) = v9;
    if (v13)
      *(_DWORD *)v9 = v13;
    else
      v10 = (WTF *)WTF::StringImpl::destroy(v9, v11);
  }
  else
  {
    *((_QWORD *)v10 + 5) = 0;
  }
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      v10 = (WTF *)WTF::StringImpl::destroy(v8, v11);
      if (!v7)
        goto LABEL_25;
      goto LABEL_23;
    }
    *(_DWORD *)v8 -= 2;
  }
  if (!v7)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v7 == 2)
    v10 = (WTF *)WTF::StringImpl::destroy(v7, v11);
  else
    *(_DWORD *)v7 -= 2;
LABEL_25:
  if (!v6)
    goto LABEL_28;
  if (*(_DWORD *)v6 != 2)
  {
    *(_DWORD *)v6 -= 2;
LABEL_28:
    if (v5)
      goto LABEL_29;
    goto LABEL_31;
  }
  v10 = (WTF *)WTF::StringImpl::destroy(v6, v11);
  if (v5)
  {
LABEL_29:
    if (*(_DWORD *)v5 == 2)
      v10 = (WTF *)WTF::StringImpl::destroy(v5, v11);
    else
      *(_DWORD *)v5 -= 2;
  }
LABEL_31:
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      v10 = (WTF *)WTF::StringImpl::destroy(v4, v11);
    else
      *(_DWORD *)v4 -= 2;
  }
  v26 = 0;
  v27 = 0;
  v24 = v12;
  v25 = 0x600000006;
  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
    v15 = WebCore::threadGlobalDataSlow(v10);
  v16 = *(WTF::StringImpl **)(v15 + 80);
  if (!v16)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v15);
    v16 = *(WTF::StringImpl **)(v15 + 80);
  }
  result = (unsigned __int8 *)WebCore::FontCache::prewarm(v16, (uint64_t)&v24);
  v18 = v26;
  if (HIDWORD(v27))
  {
    v20 = 8 * HIDWORD(v27);
    v21 = v26;
    do
    {
      result = *(unsigned __int8 **)v21;
      *(_QWORD *)v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
        else
          *(_DWORD *)result -= 2;
      }
      v21 = (WTF *)((char *)v21 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  if (v18)
    result = (unsigned __int8 *)WTF::fastFree(v18, v17);
  v19 = v24;
  if (HIDWORD(v25))
  {
    v22 = 8 * HIDWORD(v25);
    v23 = v24;
    do
    {
      result = *(unsigned __int8 **)v23;
      *(_QWORD *)v23 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
        else
          *(_DWORD *)result -= 2;
      }
      v23 = (WTF *)((char *)v23 + 8);
      v22 -= 8;
    }
    while (v22);
  }
  if (v19)
    return (unsigned __int8 *)WTF::fastFree(v19, v17);
  return result;
}

WTF::StringImpl *WebCore::FontCache::prewarm(WTF::StringImpl *result, uint64_t a2)
{
  int v2;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char *v9;
  WTF::StringImpl **v10;
  int v11;
  int v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  int v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;

  v2 = *(_DWORD *)(a2 + 12);
  if (!(v2 | *(_DWORD *)(a2 + 28)))
    return result;
  v4 = result;
  v5 = *((_QWORD *)result + 41);
  if (!v5)
  {
    WTF::WorkQueue::create();
    v6 = v30;
    v30 = 0;
    v7 = *((_QWORD *)v4 + 41);
    *((_QWORD *)v4 + 41) = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
      v8 = v30;
      v30 = 0;
      if (v8)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 56))(v8);
    }
    v5 = *((_QWORD *)v4 + 41);
    v2 = *(_DWORD *)(a2 + 12);
  }
  v9 = (char *)v4 + 208;
  v10 = *(WTF::StringImpl ***)a2;
  if (!v2)
  {
    v11 = 0;
    goto LABEL_9;
  }
  v18 = &v10[v2];
  do
  {
    WTF::String::isolatedCopy();
    v20 = v30;
    v30 = 0;
    v21 = *v10;
    *v10 = v20;
    if (!v21)
      goto LABEL_18;
    v22 = *(_DWORD *)v21 - 2;
    if (*(_DWORD *)v21 != 2)
    {
LABEL_17:
      *(_DWORD *)v21 = v22;
      goto LABEL_18;
    }
    WTF::StringImpl::destroy(v21, v19);
    v21 = v30;
    v30 = 0;
    if (v21)
    {
      v22 = *(_DWORD *)v21 - 2;
      if (*(_DWORD *)v21 != 2)
        goto LABEL_17;
      WTF::StringImpl::destroy(v21, v23);
    }
LABEL_18:
    ++v10;
  }
  while (v10 < v18);
  v10 = *(WTF::StringImpl ***)a2;
  v11 = *(_DWORD *)(a2 + 12);
LABEL_9:
  v12 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v13 = *(WTF::StringImpl ***)(a2 + 16);
  v14 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v14)
  {
    v24 = &v13[v14];
    while (1)
    {
      WTF::String::isolatedCopy();
      v26 = v30;
      v30 = 0;
      v27 = *v13;
      *v13 = v26;
      if (v27)
      {
        v28 = *(_DWORD *)v27 - 2;
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::destroy(v27, v25);
          v27 = v30;
          v30 = 0;
          if (!v27)
            goto LABEL_27;
          v28 = *(_DWORD *)v27 - 2;
          if (*(_DWORD *)v27 == 2)
          {
            WTF::StringImpl::destroy(v27, v29);
            goto LABEL_27;
          }
        }
        *(_DWORD *)v27 = v28;
      }
LABEL_27:
      if (++v13 >= v24)
      {
        v13 = *(WTF::StringImpl ***)(a2 + 16);
        v15 = *(_DWORD *)(a2 + 28);
        goto LABEL_11;
      }
    }
  }
  v15 = 0;
LABEL_11:
  v16 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v17 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v17 = &off_1E3412910;
  *(_QWORD *)(v17 + 8) = v9;
  *(_QWORD *)(v17 + 16) = v10;
  *(_DWORD *)(v17 + 24) = v12;
  *(_DWORD *)(v17 + 28) = v11;
  *(_QWORD *)(v17 + 32) = v13;
  *(_DWORD *)(v17 + 40) = v16;
  *(_DWORD *)(v17 + 44) = v15;
  v30 = (WTF::StringImpl *)v17;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v5 + 32))(v5, &v30);
  result = v30;
  v30 = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

JSC::JSCell *WebCore::cloneAcrossWorlds(JSC::JSGlobalObject *a1, _DWORD *a2, JSC::JSCell *this)
{
  JSC::JSCell *v3;
  void *v7;
  unsigned int *v8;
  unsigned int *v9;

  v3 = this;
  if (((unint64_t)this & 0xFFFE000000000002) == 0
    && *((unsigned __int8 *)this + 5) >= 0x17u
    && *(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)JSC::JSCell::getObject(this) & 0xFFFFFFFE) + 0x28) + 3320) != *((_QWORD *)a1 + 415))
  {
    WebCore::SerializedScriptValue::create(a1, (uint64_t)v3, 0, 0, 3, &v9);
    if (v9)
    {
      v3 = (JSC::JSCell *)WebCore::SerializedScriptValue::deserialize((uint64_t)v9, a1, *(_DWORD **)(16 * (*a2 & 0xFFFFFFFE) + 0x28), 1, 0);
      v8 = v9;
      v9 = 0;
      if (v8)
        WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v8, v7);
    }
    else
    {
      return (JSC::JSCell *)2;
    }
  }
  return v3;
}

void WebCore::RenderTheme::ColorCache::~ColorCache(WebCore::RenderTheme::ColorCache *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;

  v3 = *((_QWORD *)this + 20);
  if ((v3 & 0x8000000000000) != 0)
  {
    v23 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  v4 = *((_QWORD *)this + 19);
  if ((v4 & 0x8000000000000) != 0)
  {
    v26 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, a2);
    }
  }
  v5 = *((_QWORD *)this + 18);
  if ((v5 & 0x8000000000000) != 0)
  {
    v29 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, a2);
    }
  }
  v6 = *((_QWORD *)this + 17);
  if ((v6 & 0x8000000000000) != 0)
  {
    v32 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      WTF::fastFree((WTF *)v32, a2);
    }
  }
  v7 = *((_QWORD *)this + 16);
  if ((v7 & 0x8000000000000) != 0)
  {
    v35 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      atomic_store(1u, v35);
      WTF::fastFree((WTF *)v35, a2);
    }
  }
  v8 = *((_QWORD *)this + 15);
  if ((v8 & 0x8000000000000) != 0)
  {
    v38 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      atomic_store(1u, v38);
      WTF::fastFree((WTF *)v38, a2);
    }
  }
  v9 = *((_QWORD *)this + 14);
  if ((v9 & 0x8000000000000) != 0)
  {
    v41 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v41);
      WTF::fastFree((WTF *)v41, a2);
    }
  }
  v10 = *((_QWORD *)this + 13);
  if ((v10 & 0x8000000000000) != 0)
  {
    v44 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v44);
      WTF::fastFree((WTF *)v44, a2);
    }
  }
  v11 = *((_QWORD *)this + 12);
  if ((v11 & 0x8000000000000) != 0)
  {
    v47 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v47);
      WTF::fastFree((WTF *)v47, a2);
    }
  }
  v12 = *((_QWORD *)this + 11);
  if ((v12 & 0x8000000000000) != 0)
  {
    v50 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      WTF::fastFree((WTF *)v50, a2);
    }
  }
  v13 = *((_QWORD *)this + 10);
  if ((v13 & 0x8000000000000) != 0)
  {
    v53 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v53);
      WTF::fastFree((WTF *)v53, a2);
    }
  }
  v14 = *((_QWORD *)this + 9);
  if ((v14 & 0x8000000000000) != 0)
  {
    v56 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
    {
      atomic_store(1u, v56);
      WTF::fastFree((WTF *)v56, a2);
    }
  }
  v15 = *((_QWORD *)this + 8);
  if ((v15 & 0x8000000000000) != 0)
  {
    v59 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
    do
    {
      v60 = __ldaxr(v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, v59));
    if (!v61)
    {
      atomic_store(1u, v59);
      WTF::fastFree((WTF *)v59, a2);
    }
  }
  v16 = *((_QWORD *)this + 7);
  if ((v16 & 0x8000000000000) != 0)
  {
    v62 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    do
    {
      v63 = __ldaxr(v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, v62));
    if (!v64)
    {
      atomic_store(1u, v62);
      WTF::fastFree((WTF *)v62, a2);
    }
  }
  v17 = *((_QWORD *)this + 6);
  if ((v17 & 0x8000000000000) != 0)
  {
    v65 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, v65));
    if (!v67)
    {
      atomic_store(1u, v65);
      WTF::fastFree((WTF *)v65, a2);
    }
  }
  v18 = *((_QWORD *)this + 5);
  if ((v18 & 0x8000000000000) != 0)
  {
    v68 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
    do
    {
      v69 = __ldaxr(v68);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v68));
    if (!v70)
    {
      atomic_store(1u, v68);
      WTF::fastFree((WTF *)v68, a2);
    }
  }
  v19 = *((_QWORD *)this + 4);
  if ((v19 & 0x8000000000000) != 0)
  {
    v71 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v72 = __ldaxr(v71);
      v73 = v72 - 1;
    }
    while (__stlxr(v73, v71));
    if (!v73)
    {
      atomic_store(1u, v71);
      WTF::fastFree((WTF *)v71, a2);
    }
  }
  v20 = *((_QWORD *)this + 3);
  if ((v20 & 0x8000000000000) != 0)
  {
    v74 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while (__stlxr(v76, v74));
    if (!v76)
    {
      atomic_store(1u, v74);
      WTF::fastFree((WTF *)v74, a2);
    }
  }
  v21 = *((_QWORD *)this + 2);
  if ((v21 & 0x8000000000000) != 0)
  {
    v77 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
    {
      atomic_store(1u, v77);
      WTF::fastFree((WTF *)v77, a2);
    }
  }
  v22 = *((_QWORD *)this + 1);
  if ((v22 & 0x8000000000000) != 0)
  {
    v80 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while (__stlxr(v82, v80));
    if (!v82)
    {
      atomic_store(1u, v80);
      WTF::fastFree((WTF *)v80, a2);
    }
  }
  if (*(_QWORD *)this)
    WTF::HashTable<int,WTF::KeyValuePair<int,WebCore::Color>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<int,WebCore::Color>>,WTF::DefaultHash<int>,WTF::HashMap<int,WebCore::Color,WTF::DefaultHash<int>,WTF::HashTraits<int>,WTF::HashTraits<WebCore::Color>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<int>>::deallocateTable(*(_DWORD **)this, a2);
}

_BYTE *WebCore::jsElementPrototypeFunction_querySelector(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, int16x8_t a4)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::ContainerNode *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  JSC::JSGlobalObject *v11;
  WTF::StringImpl *v12;
  WebCore::Element *v13;
  unint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v24;
  WebCore *v25;
  JSC::JSGlobalObject *v26;
  WebCore::JSDOMGlobalObject *v27;
  WebCore::Element *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WebCore::JSDOMGlobalObject *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  int v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;

  v5 = *((_QWORD *)this + 7);
  v29 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v6 + 5) != 241)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "Element", "querySelector");
  v36 = (JSC::VM *)v5;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException((JSC::VM *)v5, this, v21);
  }
  v7 = *(WebCore::ContainerNode **)(v6 + 24);
  v8 = *((_QWORD *)a2 + 6);
  v31 = (WebCore::JSDOMGlobalObject *)v8;
  if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
  {
    JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v31, this);
  }
  else
  {
    v9 = *(WTF::StringImpl **)(v8 + 8);
    if ((v9 & 1) != 0)
      v9 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, this);
    if (v9)
      *(_DWORD *)v9 += 2;
    v37 = v9;
  }
  if (*(_DWORD *)(v5 + 80))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v5);
    v10 = v37;
    if (hasExceptionsAfterHandlingTraps)
    {
      v35 = 1;
      v37 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v22);
        else
          *(_DWORD *)v10 -= 2;
      }
      v14 = 0;
      v18 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v10 = v37;
  }
  v35 = 0;
  v11 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x28);
  v34 = 0;
  v30 = v10;
  WebCore::ContainerNode::querySelector(v7, &v30, (uint64_t)&v31, a4);
  if (!v33)
  {
    if (v31)
    {
      v14 = WebCore::toJS(this, v11, v31, v13);
      v15 = 0;
    }
    else
    {
      v15 = 0;
      v14 = 2;
    }
LABEL_16:
    ((void (*)(WTF::StringImpl **, WebCore::JSDOMGlobalObject **))off_1E3271318[v15])(&v37, &v31);
    v33 = -1;
    v17 = v30;
    v30 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = 0;
LABEL_20:
    ((void (*)(WebCore::JSDOMGlobalObject **, uint64_t *))off_1E3272138[v18])(&v31, &v34);
    return (_BYTE *)v14;
  }
  if (v33 == 1)
  {
    LOBYTE(v37) = (_BYTE)v31;
    v24 = v32;
    v32 = 0;
    v38 = v24;
    if (!*(_QWORD *)(v5 + 16))
    {
      WebCore::propagateExceptionSlowPath(this, &v36, (unsigned __int8 *)&v37);
      v24 = v38;
    }
    v38 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v12);
      else
        *(_DWORD *)v24 -= 2;
    }
    v14 = 0;
    v15 = 1;
    goto LABEL_16;
  }
  v25 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::toJS(v25, v26, v27, v28);
}

unint64_t WebCore::toJS(WebCore *this, JSC::JSGlobalObject *a2, WebCore::JSDOMGlobalObject *a3, WebCore::Element *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t SlowCase;
  int v7;
  __int16 v8;
  unint64_t JSHTMLWrapper;
  WebCore::Node *v10;
  WebCore::Node *v11;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char **v28;
  unint64_t v29;
  JSC::JSCell *Prototype;
  uint64_t Structure;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v42;
  WebCore::Node *v45;
  _QWORD *v46;
  WebCore::Node *v47;

  v4 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v4 + 48))
  {
    v13 = *(_QWORD *)(v4 + 32);
    if (!v13)
      goto LABEL_5;
    v14 = *(_DWORD *)(v13 - 8);
    v15 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = v14 & ((v17 >> 31) ^ v17);
    v19 = *(WebCore::JSDOMGlobalObject **)(v13 + 16 * v18);
    if (v19 != a3)
    {
      v20 = 1;
      while (v19)
      {
        v18 = ((_DWORD)v18 + v20) & v14;
        v19 = *(WebCore::JSDOMGlobalObject **)(v13 + 16 * v18);
        ++v20;
        if (v19 == a3)
          goto LABEL_23;
      }
      goto LABEL_5;
    }
LABEL_23:
    v5 = *(_QWORD *)(v13 + 16 * v18 + 8);
    if (!v5)
      goto LABEL_5;
  }
  else
  {
    v5 = *((_QWORD *)a3 + 1);
    if (!v5)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v5 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v5;
    if (*(_QWORD *)v5)
      return SlowCase;
  }
LABEL_5:
  v7 = *((_DWORD *)a3 + 6);
  *((_DWORD *)a3 + 6) = v7 + 2;
  v45 = a3;
  v8 = *((_WORD *)a3 + 14);
  if ((v8 & 0x10) != 0)
  {
    *((_DWORD *)a3 + 6) = v7 + 4;
    v47 = a3;
    JSHTMLWrapper = WebCore::createJSHTMLWrapper(a2, (uint64_t *)&v47, a3);
    goto LABEL_7;
  }
  if ((v8 & 0x20) != 0)
  {
    *((_DWORD *)a3 + 6) = v7 + 4;
    v47 = a3;
    JSHTMLWrapper = WebCore::createJSSVGWrapper((WebCore::JSSVGCircleElement **)a2, &v47, a3);
    goto LABEL_7;
  }
  if ((v8 & 0x40) != 0)
  {
    *((_DWORD *)a3 + 6) = v7 + 4;
    v47 = a3;
    JSHTMLWrapper = WebCore::createJSMathMLWrapper(a2, &v47, a3);
LABEL_7:
    SlowCase = JSHTMLWrapper;
    v10 = v47;
    v47 = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 6) == 2)
      {
        if ((*((_WORD *)v10 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v10);
      }
      else
      {
        *((_DWORD *)v10 + 6) -= 2;
      }
    }
    goto LABEL_8;
  }
  v21 = *((_QWORD *)a2 + 7);
  v22 = *((_QWORD *)a2 + 412);
  if (v22)
  {
    v23 = *(_DWORD *)(v22 - 8);
    v24 = ((unint64_t)&WebCore::JSElement::s_info + ~((_QWORD)&WebCore::JSElement::s_info << 32)) ^ (((unint64_t)&WebCore::JSElement::s_info + ~((_QWORD)&WebCore::JSElement::s_info << 32)) >> 22);
    v25 = 9 * ((v24 + ~(v24 << 13)) ^ ((v24 + ~(v24 << 13)) >> 8));
    v26 = (v25 ^ (v25 >> 15)) + ~((v25 ^ (v25 >> 15)) << 27);
    v27 = v23 & ((v26 >> 31) ^ v26);
    v28 = *(char ***)(v22 + 16 * v27);
    if (v28 == &WebCore::JSElement::s_info)
    {
LABEL_30:
      v29 = *(_QWORD *)(v22 + 16 * v27 + 8);
      if (v29)
        goto LABEL_32;
    }
    else
    {
      v38 = 1;
      while (v28)
      {
        v27 = ((_DWORD)v27 + v38) & v23;
        v28 = *(char ***)(v22 + 16 * v27);
        ++v38;
        if (v28 == &WebCore::JSElement::s_info)
          goto LABEL_30;
      }
    }
  }
  Prototype = (JSC::JSCell *)WebCore::JSElement::createPrototype(*((WebCore::JSElement **)a2 + 7), a2, a3);
  Structure = WebCore::JSElement::createStructure((uint64_t *)v21, (uint64_t)a2, Prototype);
  v29 = WebCore::cacheDOMStructure((JSCell *)a2, Structure, (uint64_t)&WebCore::JSElement::s_info);
  v21 = *((_QWORD *)a2 + 7);
LABEL_32:
  v32 = (_QWORD *)WebCore::JSElement::subspaceForImpl((WebCore::JSElement *)v21, a2);
  SlowCase = v32[3];
  if (SlowCase >= v32[4])
  {
    SlowCase = v32[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_34;
    }
    v42 = *(_QWORD *)(SlowCase + 8) ^ v32[6];
    v32[4] = SlowCase + HIDWORD(v42);
    v32[5] = SlowCase + (int)v42;
  }
  v32[3] = SlowCase + 32;
LABEL_34:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSElement::JSElement(SlowCase, v29, (uint64_t)a2, (uint64_t *)&v45);
  if (*(_BYTE *)(v21 + 755))
    __dmb(0xAu);
  v33 = *((_QWORD *)a2 + 415);
  {
    WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner = (uint64_t)&off_1E3393950;
  }
  if (*(_DWORD *)(v33 + 48))
  {
    v47 = a3;
    if ((SlowCase & 8) != 0)
      v39 = (SlowCase - 112) | 1;
    else
      v39 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v39 & 1) != 0)
      v40 = v39 + 47;
    else
      v40 = *(_QWORD *)v39 + 32;
    Allocator = *(_QWORD **)(v40 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v40 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    Allocator[2] = v33;
    v46 = Allocator;
    JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v33 + 32), (uint64_t *)&v47, (uint64_t *)&v46);
    v37 = (uint64_t)v46;
    if (!v46)
      goto LABEL_8;
  }
  else
  {
    if ((SlowCase & 8) != 0)
      v34 = (SlowCase - 112) | 1;
    else
      v34 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v34 & 1) != 0)
      v35 = v34 + 47;
    else
      v35 = *(_QWORD *)v34 + 32;
    v36 = *(_QWORD **)(v35 + 16);
    if (!v36)
      v36 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v35 + 16) = *v36;
    *v36 = SlowCase;
    v36[1] = &WebCore::wrapperOwner(WebCore::DOMWrapperWorld &,WebCore::Node *)::owner;
    v36[2] = v33;
    v37 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v36;
    if (!v37)
      goto LABEL_8;
  }
  *(_QWORD *)(v37 + 8) = 3;
LABEL_8:
  v11 = v45;
  v45 = 0;
  if (v11)
  {
    if (*((_DWORD *)v11 + 6) == 2)
    {
      if ((*((_WORD *)v11 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v11);
    }
    else
    {
      *((_DWORD *)v11 + 6) -= 2;
    }
  }
  return SlowCase;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSDOMURL>::construct(JSC *this, uint64_t a2)
{
  WTF::StringImpl *v2;
  uint64_t v4;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSCell *v15;
  JSC::JSCell *v16;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v18;
  JSC::JSGlobalObject *v19;
  int v20;
  WTF *v22;
  void *v23;
  JSValue v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t FunctionRealm;
  JSC::JSObject *v28;
  JSC::Structure *v29;
  unint64_t SubclassStructure;
  char hasExceptionsAfterHandlingTraps;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  int v36;
  WTF::StringImpl *v37;
  int v38;
  WTF::StringImpl *v39;
  int v40;
  JSC::VM *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v4 = *((_QWORD *)this + 7);
  v41 = (JSC::VM *)v4;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException((JSC::VM *)v4, this, v24);
  }
  v6 = *(_QWORD *)(a2 + 24);
  WebCore::valueToUSVString(this, *(_QWORD *)(a2 + 48), (uint64_t)&v39);
  v7 = v40;
  if (!v40)
  {
    if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL || *(_QWORD *)(a2 + 56) == 10)
    {
      v37 = 0;
      v38 = 0;
    }
    else
    {
      WebCore::valueToUSVString(this, *(_QWORD *)(a2 + 56), (uint64_t)&v37);
      v20 = v38;
      if (v38)
      {
        v15 = 0;
LABEL_23:
        if (v20 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E325A258[v20])(&v34, &v37);
        v7 = v40;
        goto LABEL_26;
      }
      if (v40)
        goto LABEL_33;
    }
    v8 = v39;
    v39 = 0;
    v42 = v8;
    v2 = v37;
    v37 = 0;
    v33 = v2;
    WebCore::DOMURL::create(&v42, &v33, (uint64_t)&v34);
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        goto LABEL_34;
      *(_DWORD *)v2 -= 2;
    }
    while (1)
    {
      v10 = v42;
      v42 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
        break;
      v11 = v36;
      if (!v36)
      {
        v12 = *(_QWORD *)(v6 + 40);
        v13 = v34;
        v34 = 0;
        v42 = v13;
        if (*(void (***)(WebCore::DOMURL *__hidden))v13 != off_1E33B2120)
        {
          __break(0xC471u);
          JUMPOUT(0x1944E4EA8);
        }
        v15 = (JSCell *)WebCore::createWrapper<WebCore::DOMURL,WebCore::DOMURL>(v12, (JSC::VM *)&v42);
        if (v42)
        {
          if (*((_DWORD *)v42 + 2) == 1)
          {
            WebCore::DOMURL::~DOMURL(v42, v14);
            WTF::fastFree(v22, v23);
          }
          else
          {
            --*((_DWORD *)v42 + 2);
          }
        }
        goto LABEL_16;
      }
      if (v36 == 1)
      {
        LOBYTE(v42) = (_BYTE)v34;
        v25 = v35;
        v35 = 0;
        v43 = v25;
        if (!*(_QWORD *)(v4 + 16))
        {
          WebCore::propagateExceptionSlowPath(this, &v41, (unsigned __int8 *)&v42);
          v25 = v43;
        }
        v43 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v9);
          else
            *(_DWORD *)v25 -= 2;
        }
        v15 = 0;
LABEL_16:
        if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
          goto LABEL_54;
        v16 = *(JSC::JSCell **)(a2 + 40);
        if (((unint64_t)v16 & 0xFFFE000000000002) == 0)
        {
          Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v16);
          if (Object)
          {
            v19 = Object;
            if (Object != *(JSC::JSGlobalObject **)(a2 + 24))
            {
              v26 = *((_QWORD *)this + 7);
              FunctionRealm = JSC::getFunctionRealm(this, Object, v18);
              if (!*(_DWORD *)(v26 + 80)
                || (v32 = FunctionRealm,
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v26),
                    FunctionRealm = v32,
                    (hasExceptionsAfterHandlingTraps & 1) == 0))
              {
                v28 = (JSC::JSObject *)WebCore::getDOMStructure<WebCore::JSDOMURL>((uint64_t *)v26, FunctionRealm);
                SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v19, v28, v29);
                if (!*(_DWORD *)(v26 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v26) & 1) == 0)
                  JSC::JSObject::setStructure(v15, (JSC::VM *)v26, SubclassStructure);
              }
            }
          }
        }
        if (*(_DWORD *)(v4 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v4) & 1) != 0)
LABEL_54:
          v15 = 0;
LABEL_21:
        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E325DFC8[v11])(&v42, &v34);
        goto LABEL_22;
      }
LABEL_33:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_34:
      WTF::StringImpl::destroy(v2, v9);
    }
    v15 = 0;
    v11 = v36;
    if (v36 != -1)
      goto LABEL_21;
LABEL_22:
    v20 = v38;
    goto LABEL_23;
  }
  v15 = 0;
LABEL_26:
  if (v7 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E325A258[v7])(&v34, &v39);
  return v15;
}

uint64_t WebCore::JSDOMURL::subspaceForImpl(WebCore::JSDOMURL *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  int v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 4152);
  if (v4)
    return v4;
  v7 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v7))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v7, a2);
LABEL_6:
  v9 = *(_QWORD *)(v7 + 2824);
  if (!*(_QWORD *)(v9 + 4152))
  {
    v15 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v15, &v21, (char *)this + 192, (char *)this + 1872, 40, 8, &v20);
    v17 = v20;
    v20 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        WTF::fastFree(v18, v16);
      else
        --*(_DWORD *)v18;
    }
    v19 = *(_QWORD *)(v9 + 4152);
    *(_QWORD *)(v9 + 4152) = v15;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v11 = *(_QWORD *)(v3 + 4152);
  *(_QWORD *)(v3 + 4152) = v4;
  if (v11)
  {
    v12 = (WTF *)MEMORY[0x19AEA3528](v11, v10);
    WTF::fastFree(v12, v13);
  }
  v14 = __ldxr((unsigned __int8 *)v7);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v7))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v7);
  return v4;
}

uint64_t WebCore::getDOMStructure<WebCore::JSDOMURL>(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v6;
  JSC::Structure *v7;
  JSC::JSCell *v8;
  uint64_t v9;

  result = WebCore::getCachedDOMStructure(a2, (uint64_t)&WebCore::JSDOMURL::s_info);
  if (!result)
  {
    Structure = WebCore::JSDOMURLPrototype::createStructure(a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v8 = (JSC::JSCell *)WebCore::JSDOMURLPrototype::create((WebCore::JSDOMURLPrototype *)a1, Structure, v6, v7);
    v9 = WebCore::JSDOMURL::createStructure(a1, a2, v8);
    return WebCore::cacheDOMStructure((JSCell *)a2, v9, (uint64_t)&WebCore::JSDOMURL::s_info);
  }
  return result;
}

unint64_t WebCore::SelectorChecker::matchRecursively(WebCore::SelectorChecker *a1, _BYTE *a2, unsigned int **a3, unsigned int *a4, __n128 a5)
{
  int v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  __int128 v17;
  int v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  unsigned int v22;
  WebCore::SelectorChecker *v23;
  _BYTE *v24;
  unsigned int *v25;
  uint64_t matched;
  unint64_t v27;
  WTF::StringImpl *v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  char v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  WebCore::Node *v48;
  char v49;
  uint64_t v50;
  __int16 v51;
  WebCore::Node *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v56;
  WebCore::Node *v57;
  char v58;
  int v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  __int16 v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  unsigned int v66;
  uint64_t v67;
  WebCore::Node *v68;
  unsigned int v69;
  WebCore::Node *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v75;
  uint64_t v76;
  WebCore::Node *v77;
  WebCore::Node *v78;
  uint64_t v79;
  uint64_t v80;
  WebCore::Node *v81[2];
  __int128 v82;
  int v83;
  WTF::StringImpl *v84;
  unsigned __int8 v85;
  unint64_t v86;
  unsigned int v87;
  _BYTE v88[15];
  uint64_t v89;

  v7 = (WTF::StringImpl *)a3;
  v89 = *MEMORY[0x1E0C80C00];
  v87 = 1;
  if (!WebCore::SelectorChecker::checkOne(a1, (unint64_t)a2, a3, (int *)&v87, a5))
    return 0x100000001;
  v13 = *(unsigned int **)v7;
  v14 = **(_DWORD **)v7;
  if ((v14 & 0x1F0) != 0x90)
    goto LABEL_5;
  v29 = (v14 >> 9);
  if (v29 - 26 < 2)
  {
    if (*((_BYTE *)v7 + 58))
      return 0x100000003;
    v35 = *((_QWORD *)v7 + 1);
    v36 = **(_QWORD **)(v35 + 40);
    if (v36)
      v37 = (*(_WORD *)(v36 + 28) & 0x80) == 0;
    else
      v37 = 1;
    if (v37 || *(_BYTE *)(v36 + 193))
      return 0x100000001;
    v38 = *(_QWORD *)(v35 + 104);
    if (v38
      && ((v39 = *(_DWORD *)(v38 + 4), (v39 & 1) != 0)
        ? (v40 = *(_QWORD *)(v38 + 40), LODWORD(v41) = *(_DWORD *)(v38 + 52))
        : (v40 = v38 + 32, LODWORD(v41) = v39 >> 5),
          (_DWORD)v41))
    {
      v41 = v41;
      v42 = (_QWORD *)(v40 + 8);
      while (1)
      {
        v43 = *(v42 - 1);
        if (v43 == WebCore::HTMLNames::useragentpartAttr
          || *(_QWORD *)(v43 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
          && *(_QWORD *)(v43 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
        {
          break;
        }
        v42 += 2;
        if (!--v41)
        {
          v42 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          break;
        }
      }
    }
    else
    {
      v42 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    }
    v44 = v13 + 2;
    if ((v14 & 0x100000) != 0)
      v44 = (_QWORD *)(*v44 + 8);
    if (*v42 != *v44)
      return 0x100000001;
    goto LABEL_5;
  }
  if (v29 == 28)
    return 0x100000001;
  v11 = 0x100000003;
  if (*((_BYTE *)v7 + 59) && *a2 != 3)
  {
    if (v29 <= 0x19 && ((0x3F5F7FFu >> (v14 >> 9)) & 1) != 0)
    {
      *a4 |= 1 << dword_1969EED38[(char)(v14 >> 9)];
      v14 = *v13;
    }
    v87 = 0;
LABEL_5:
    if ((v14 & 0x80000) != 0)
      return (unint64_t)v87 << 32;
    v15 = v14 & 0xF;
    v16 = v13 + 4;
    v17 = *((_OWORD *)v7 + 1);
    *(_OWORD *)v81 = *(_OWORD *)v7;
    v82 = v17;
    LOBYTE(v83) = 0;
    v85 = 0;
    v18 = *((unsigned __int8 *)v7 + 48);
    if (*((_BYTE *)v7 + 48))
    {
      v19 = *((_DWORD *)v7 + 8);
      v83 = v19;
      v20 = (WTF::StringImpl *)*((_QWORD *)v7 + 5);
      if (v20)
        *(_DWORD *)v20 += 2;
      v85 = 1;
      v21 = *((_QWORD *)v7 + 7);
      v86 = v21;
      v84 = v20;
      v81[0] = (WebCore::Node *)(v13 + 4);
      v22 = *a4;
      if (!v15)
        goto LABEL_10;
      if (((v22 >> v19) & 1) == 0)
      {
        v11 = 0x100000003;
        goto LABEL_19;
      }
    }
    else
    {
      v21 = *((_QWORD *)v7 + 7);
      v86 = v21;
      v81[0] = (WebCore::Node *)(v13 + 4);
      if (!v15)
      {
        v22 = *a4;
LABEL_10:
        BYTE4(v86) = (v22 & 0x7E0400) != 0;
        BYTE5(v86) = BYTE1(v22) & 1;
        BYTE6(v86) = (v22 & 0x1F000) != 0;
        if ((_BYTE)v21 || *a2 == 1)
        {
          if (v22)
          {
            if (((v22 >> 8) & 1) == 0)
            {
              v11 = 0x100000003;
              if ((v22 & 0x7FF400) == 0 || (*v16 & 0x1F0) != 0x80)
              {
LABEL_19:
                if (v85)
                {
                  v28 = v84;
                  v84 = 0;
                  if (v28)
                  {
                    if (*(_DWORD *)v28 == 2)
                      WTF::StringImpl::destroy(v28, v10);
                    else
                      *(_DWORD *)v28 -= 2;
                  }
                }
                return v11;
              }
            }
          }
        }
        v23 = a1;
        v24 = a2;
        v25 = a4;
LABEL_15:
        matched = WebCore::SelectorChecker::matchRecursively(v23, v24, v81, v25);
LABEL_16:
        if (v87)
          v27 = matched & 0xFFFFFFFF00000000;
        else
          v27 = 0;
        v11 = v27 | matched;
        goto LABEL_19;
      }
    }
    if ((*v13 & 0xF) - 1 >= 2)
      LOBYTE(v82) = 0;
    if (v18)
    {
      v30 = v84;
      v84 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v10);
        else
          *(_DWORD *)v30 -= 2;
      }
      v85 = 0;
    }
    v11 = 0x100000003;
    if (v15 == 5)
    {
      LOBYTE(v86) = 0;
      v45 = **(_QWORD **)(*((_QWORD *)v7 + 1) + 40);
      if (v45)
        v46 = (*(_WORD *)(v45 + 28) & 0x80) == 0;
      else
        v46 = 1;
      if (v46)
        goto LABEL_19;
      v47 = *(_QWORD *)(v45 + 200);
      if (!v47)
        goto LABEL_19;
      v48 = *(WebCore::Node **)(v47 + 8);
      if (!v48)
        goto LABEL_19;
      v81[1] = v48;
      *((WebCore::Node **)&v82 + 1) = v81[0];
LABEL_78:
      BYTE1(v86) = 0;
LABEL_79:
      *(_DWORD *)v88 = 0;
      v25 = (unsigned int *)v88;
      v23 = a1;
      v24 = a2;
      goto LABEL_15;
    }
    BYTE3(v86) = 0;
    LOBYTE(v86) = 0;
    switch(v15)
    {
      case 1:
        if ((*((_WORD *)v81[1] + 15) & 1) != 0)
          v49 = 0;
        else
          v49 = v82;
        if (HIBYTE(v86))
          goto LABEL_105;
        v50 = *((_QWORD *)v81[1] + 4);
        if ((*(_DWORD *)v81[0] & 0x1FFF0) == 0x4880)
        {
          if (!v50)
            goto LABEL_105;
          v51 = *(_WORD *)(v50 + 28);
          if ((v51 & 0x80) != 0)
          {
            v52 = *(WebCore::Node **)(v50 + 200);
            if (v52)
              v52 = (WebCore::Node *)*((_QWORD *)v52 + 1);
            v81[1] = v52;
            LOBYTE(v82) = v49;
            v86 = v86 & 0xFFFFFFFFFF0000 | 0x100000000000000;
            *((WebCore::Node **)&v82 + 1) = v81[0];
            if (!v52)
              goto LABEL_19;
            goto LABEL_107;
          }
        }
        else
        {
          if (!v50)
            goto LABEL_105;
          v51 = *(_WORD *)(v50 + 28);
        }
        if ((v51 & 8) != 0)
        {
          v81[1] = *((WebCore::Node **)v81[1] + 4);
          LOBYTE(v82) = v49;
          v86 &= 0xFFFFFFFFFFFF0000;
          *((WebCore::Node **)&v82 + 1) = v81[0];
LABEL_107:
          v53 = 0x100000001;
          while (1)
          {
            *(_DWORD *)v88 = 0;
            v54 = WebCore::SelectorChecker::matchRecursively(a1, a2, v81, v88);
            if ((_DWORD)v54 == 3 || (_DWORD)v54 == 0)
            {
              if (v87)
                v56 = v54 & 0xFFFFFFFF00000000;
              else
                v56 = 0;
              v53 = v56 | v54;
            }
            if (!(_DWORD)v54 || (_DWORD)v54 == 3)
            {
              v11 = v53;
              goto LABEL_19;
            }
            v57 = v81[0];
            v58 = v82;
            *(_QWORD *)v88 = *(_QWORD *)((char *)&v82 + 1);
            *(_QWORD *)&v88[7] = *((_QWORD *)&v82 + 1);
            v59 = v85;
            if (v85)
            {
              v5 = v83;
              v7 = v84;
              if (v84)
                *(_DWORD *)v84 += 2;
              v60 = 1;
            }
            else
            {
              v60 = 0;
              v5 &= 0xFFFFFF00;
            }
            if ((*((_WORD *)v81[1] + 15) & 1) != 0)
              v58 = 0;
            v61 = v86 & 0xFFFFFFFFFFFF0000;
            if (HIBYTE(v86))
            {
              v62 = 0;
              goto LABEL_136;
            }
            v62 = *((_QWORD *)v81[1] + 4);
            if ((*(_DWORD *)v57 & 0x1FFF0) == 0x4880)
            {
              if (!v62)
                goto LABEL_136;
              v63 = *(_WORD *)(v62 + 28);
              if ((v63 & 0x80) != 0)
              {
                v62 = *(_QWORD *)(v62 + 200);
                if (v62)
                  v62 = *(_QWORD *)(v62 + 8);
                v61 = v86 & 0xFFFFFFFFFF0000 | 0x100000000000000;
                goto LABEL_136;
              }
            }
            else
            {
              if (!v62)
                goto LABEL_136;
              v63 = *(_WORD *)(v62 + 28);
            }
            if ((v63 & 8) == 0)
              v62 = 0;
LABEL_136:
            v81[0] = v57;
            v81[1] = (WebCore::Node *)v62;
            LOBYTE(v82) = v58;
            *(_QWORD *)((char *)&v82 + 1) = *(_QWORD *)v88;
            *((_QWORD *)&v82 + 1) = *(_QWORD *)&v88[7];
            if (v59 != v60)
            {
              if (v59)
              {
                v65 = v84;
                v84 = 0;
                if (v65)
                {
                  if (*(_DWORD *)v65 == 2)
                    WTF::StringImpl::destroy(v65, v10);
                  else
                    *(_DWORD *)v65 -= 2;
                }
                v85 = 0;
                v86 = v61;
                if (v7)
                {
                  if (*(_DWORD *)v7 == 2)
                    WTF::StringImpl::destroy(v7, v10);
                  else
                    *(_DWORD *)v7 -= 2;
                  v7 = 0;
                }
                goto LABEL_143;
              }
              v83 = v5;
              v84 = v7;
              v85 = 1;
              goto LABEL_141;
            }
            if (v59)
            {
              v83 = v5;
              v64 = v84;
              v84 = v7;
              if (v64)
              {
                if (*(_DWORD *)v64 == 2)
                  WTF::StringImpl::destroy(v64, v10);
                else
                  *(_DWORD *)v64 -= 2;
              }
LABEL_141:
              v7 = 0;
            }
            v86 = v61;
LABEL_143:
            if (!v81[1])
              goto LABEL_19;
          }
        }
LABEL_105:
        v81[1] = 0;
        LOBYTE(v82) = v49;
        v86 &= 0xFFFFFFFFFFFF0000;
        *((WebCore::Node **)&v82 + 1) = v81[0];
        goto LABEL_19;
      case 2:
        if ((*((_WORD *)v81[1] + 15) & 1) != 0)
          v31 = 0;
        else
          v31 = v82;
        if (HIBYTE(v86))
          goto LABEL_96;
        v32 = *((_QWORD *)v81[1] + 4);
        if ((*(_DWORD *)v81[0] & 0x1FFF0) == 0x4880)
        {
          if (!v32)
            goto LABEL_96;
          v33 = *(_WORD *)(v32 + 28);
          if ((v33 & 0x80) != 0)
          {
            v34 = *(_QWORD *)(v32 + 200);
            if (!v34)
            {
              v81[1] = 0;
              LOBYTE(v82) = v31;
              v86 = v86 & 0xFFFFFFFFFF0000 | 0x100000000000000;
              goto LABEL_19;
            }
            v81[1] = *(WebCore::Node **)(v34 + 8);
            LOBYTE(v82) = v31;
            v86 = v86 & 0xFFFFFFFFFF0000 | 0x100000000000000;
            if (!v81[1])
              goto LABEL_19;
LABEL_99:
            *((WebCore::Node **)&v82 + 1) = v81[0];
            *(_DWORD *)v88 = 0;
            matched = WebCore::SelectorChecker::matchRecursively(a1, a2, v81, v88);
            if ((_DWORD)matched == 3 || !(_DWORD)matched)
              goto LABEL_16;
            goto LABEL_101;
          }
        }
        else
        {
          if (!v32)
            goto LABEL_96;
          v33 = *(_WORD *)(v32 + 28);
        }
        if ((v33 & 8) != 0)
        {
          v81[1] = *((WebCore::Node **)v81[1] + 4);
          LOBYTE(v82) = v31;
          v86 &= 0xFFFFFFFFFFFF0000;
          goto LABEL_99;
        }
LABEL_96:
        v81[1] = 0;
        LOBYTE(v82) = v31;
        v86 &= 0xFFFFFFFFFFFF0000;
        goto LABEL_19;
      case 3:
        if (*((_BYTE *)v7 + 56))
          v66 = 1;
        else
          v66 = 2;
        WebCore::addStyleRelation((uint64_t)a2, *((_QWORD *)v7 + 1), v66, 1u);
        v67 = WebCore::Node::previousElementSibling(*((_QWORD *)v7 + 1));
        if (!v67)
        {
LABEL_101:
          v11 = 0x100000002;
          goto LABEL_19;
        }
        v68 = (WebCore::Node *)v67;
        WebCore::addStyleRelation((uint64_t)a2, v67, 3u, 1u);
        v81[1] = v68;
        *((_QWORD *)&v82 + 1) = v16;
        goto LABEL_79;
      case 4:
        if (*((_BYTE *)v7 + 56))
          v69 = 1;
        else
          v69 = 2;
        WebCore::addStyleRelation((uint64_t)a2, *((_QWORD *)v7 + 1), v69, 1u);
        v70 = (WebCore::Node *)WebCore::Node::previousElementSibling(*((_QWORD *)v7 + 1));
        v81[1] = v70;
        *((_QWORD *)&v82 + 1) = v16;
        v11 = 0x100000002;
        if (!v70)
          goto LABEL_19;
        v10 = v70;
        v71 = 0x100000001;
        v72 = v87;
        while (1)
        {
          WebCore::addStyleRelation((uint64_t)a2, (uint64_t)v10, 3u, 1u);
          *(_DWORD *)v88 = 0;
          v73 = WebCore::SelectorChecker::matchRecursively(a1, a2, v81, v88);
          if (v73 <= 3 && (_DWORD)v73 != 1)
          {
            if (v72)
              v75 = v73 & 0xFFFFFFFF00000000;
            else
              v75 = 0;
            v71 = v75 | v73;
          }
          if (v73 <= 3 && (_DWORD)v73 != 1)
            break;
          v10 = (WTF::StringImpl *)WebCore::Node::previousElementSibling((uint64_t)v81[1]);
          v81[1] = v10;
          if (!v10)
            goto LABEL_19;
        }
        v11 = v71;
        goto LABEL_19;
      case 6:
        v76 = *((_QWORD *)v7 + 1);
        if (a2[57])
        {
          v77 = (WebCore::Node *)WebCore::Style::hostForScopeOrdinal(v76, (char)a2[57]);
        }
        else
        {
          v79 = **(_QWORD **)(v76 + 40);
          if (!v79)
            goto LABEL_19;
          if ((*(_WORD *)(v79 + 28) & 0x80) == 0)
            goto LABEL_19;
          v80 = *(_QWORD *)(v79 + 200);
          if (!v80)
            goto LABEL_19;
          v77 = *(WebCore::Node **)(v80 + 8);
        }
        if (!v77)
          goto LABEL_19;
        v81[1] = v77;
        *((_QWORD *)&v82 + 1) = v16;
        BYTE1(v86) = 0;
        HIBYTE(v86) = a2[57] == 0;
        goto LABEL_79;
      case 7:
        v78 = (WebCore::Node *)WebCore::Style::assignedSlotForScopeOrdinal(*((_QWORD *)v7 + 1), (char)a2[57]);
        if (!v78)
          goto LABEL_19;
        v81[1] = v78;
        *((_QWORD *)&v82 + 1) = v16;
        goto LABEL_78;
      default:
        goto LABEL_19;
    }
  }
  return v11;
}

uint64_t WebCore::SelectorChecker::checkOne(WebCore::SelectorChecker *a1, unint64_t a2, unsigned int **a3, int *a4, __n128 a5)
{
  uint64_t v8;
  uint64_t v9;
  WTF::String *v10;
  unsigned int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  const WTF::StringImpl *v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::Node **v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  char v65;
  _DWORD *v66;
  int v67;
  _DWORD *v68;
  int v69;
  unsigned int *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  int v90;
  double v92;
  double v93;
  float v94;
  unsigned int v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  WTF *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  const char *v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  int v121;
  BOOL v122;
  BOOL v123;
  BOOL v125;
  const char *v126;
  int v127;
  unsigned int v128;
  _BOOL4 v129;
  unsigned int v130;
  _BOOL4 v131;
  int v132;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  _BOOL8 v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  _BOOL4 v142;
  _BOOL4 v143;
  int v144;
  WTF::StringImpl *v145;
  int v146;
  int v148;
  int v149;
  WebCore::Node *v151;
  unsigned int **v152;
  int v153;
  char v154;
  __int128 v155;
  WTF::StringImpl *v156;
  uint64_t v157;
  WTF::StringImpl *v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  BOOL v172;
  unint64_t v173;
  int v174;
  int v175;
  unsigned int v176;
  int v177;
  unsigned int **v178;
  WebCore::Node **v179;
  WebCore::Node *v180;
  unsigned int **v181;
  __int128 v182;
  WTF::StringImpl *v183;
  uint64_t matched;
  WTF::StringImpl *v185;
  int v186;
  int v187;
  BOOL v188;
  BOOL v189;
  uint64_t v190;
  BOOL v191;
  const WebCore::SelectorChecker::LocalContext *v192;
  const WebCore::Element *v193;
  unsigned int v194;
  unsigned int v195;
  WebCore::CSSSelector *v196;
  int v197;
  uint64_t v198;
  _BOOL4 v199;
  BOOL v200;
  BOOL v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  __int16 v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  WebCore::FullscreenManager *v209;
  uint64_t v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  WebCore::Node *v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t *v219;
  char *v220;
  const WebCore::CSSSelector *v221;
  int v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  WebCore::Element *v228;
  BOOL v229;
  BOOL v230;
  uint64_t v231;
  unsigned int v232;
  int v233;
  uint64_t v234;
  unsigned int v235;
  const WebCore::SelectorChecker::LocalContext *v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  unsigned int **v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  const WTF::AtomString *v245;
  unsigned int **v246;
  int canMatchHoverOrActiveInQuirksMode;
  uint64_t v248;
  unsigned int v249;
  int v250;
  unsigned int *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unsigned int **v263;
  unsigned int *v264;
  WebCore::Node *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF *v269;
  WTF::StringImpl **v270;
  WTF::StringImpl **v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  int v274;
  uint64_t v275;
  __int128 v276;
  WTF::StringImpl *v277;
  WebCore::Node *v278;
  uint64_t v279;
  _BOOL8 v280;
  int v281;
  int v282;
  WebCore::Node *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  const WebCore::Node ***v290;
  unsigned int v292;
  unsigned int *v293;
  uint64_t v294;
  _QWORD *v295;
  _QWORD *v296;
  WebCore::Node *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int **v305;
  int **v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v311;
  int **v312;
  int **v313;
  uint64_t v314;
  _QWORD *v315;
  int v316;
  const WTF::StringImpl *v317;
  uint64_t v318;
  BOOL v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unint64_t v323;
  unint64_t v324;
  _DWORD *v325;
  _DWORD *v326;
  unsigned int v327;
  WTF *v328;
  char *v329;
  unint64_t v330;
  uint64_t v331;
  WTF::StringImpl *v332;
  unsigned __int8 *v333;
  unsigned int **v334;
  uint64_t v335;
  WTF *v336[2];
  WebCore::Node *v337[2];
  __int128 v338;
  int v339;
  WTF::StringImpl *v340;
  char v341;
  uint64_t v342;

  v9 = (uint64_t)*a3;
  v8 = (uint64_t)a3[1];
  v10 = (WTF::String *)**a3;
  v11 = (v10 >> 4) & 0x1F;
  if (!*((_BYTE *)a3 + 63))
  {
    result = 0;
    switch(v11)
    {
      case 1u:
        v36 = *(_QWORD **)(v9 + 8);
        if ((_QWORD *)WebCore::anyName == v36)
          return 1;
        if ((*(_WORD *)(v8 + 28) & 0x10) != 0
          && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 3358) & 1) != 0)
        {
          v37 = v36 + 5;
        }
        else
        {
          v37 = v36 + 3;
        }
        if (*v37 != WebCore::starAtomData && *v37 != *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24))
          return 0;
        v46 = v36[4];
        if (v46 == WebCore::starAtomData)
          return 1;
        v55 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 32);
        return v46 == v55;
      case 2u:
        v51 = *(_QWORD *)(v8 + 104);
        if (!v51 || (v53 = *(_QWORD *)(v51 + 24), v52 = (uint64_t *)(v51 + 24), !v53))
          v52 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        v54 = (_QWORD *)(v9 + 8);
        if ((v10 & 0x100000) != 0)
          v54 = (_QWORD *)(*v54 + 8);
        v46 = *v52;
        v55 = *v54;
        return v46 == v55;
      case 3u:
        v40 = (_QWORD *)(v9 + 8);
        if ((v10 & 0x100000) != 0)
          v40 = (_QWORD *)(*v40 + 8);
        v41 = *(_QWORD *)(v8 + 104);
        if (!v41)
          return 0;
        v42 = *(_QWORD *)(v41 + 16);
        if (!v42)
          return 0;
        v43 = 0;
        v44 = *v40;
        do
        {
          v45 = *(_QWORD *)(v42 + 16 + 8 * v43);
          result = v45 == v44;
          if (v45 == v44)
            break;
          ++v43;
        }
        while (v43 < *(unsigned int *)(v42 + 12));
        return result;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
        v13 = *(_QWORD *)(v8 + 104);
        if (!v13)
          return 0;
        if ((*(_BYTE *)(v13 + 4) & 8) != 0)
          WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)a3[1], (unsigned __int8 *)a2, a5, (uint64_t)a3, v10);
        if ((*(_WORD *)(v8 + 28) & 0x20) != 0)
          WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v8);
        v14 = *(_QWORD *)(v8 + 104);
        if (!v14)
          return 0;
        v15 = *(_DWORD *)(v14 + 4);
        if (!((v15 & 1) != 0 ? *(_DWORD *)(v14 + 52) : v15 >> 5))
          return 0;
        v17 = *(_QWORD *)(v9 + 8);
        if ((*(_BYTE *)(v9 + 2) & 0x80) != 0)
          goto LABEL_43;
        if (!*((_BYTE *)a1 + 1) || (*(_WORD *)(v8 + 28) & 0x10) == 0)
          goto LABEL_26;
        {
          WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::$_0::operator()(v337);
          WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set = (uint64_t)v337[0];
          v144 = v338;
          WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set = (int)v337[1];
          v337[0] = 0;
          v337[1] = 0;
          LODWORD(v338) = 0;
          WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set = v144;
          BYTE4(v338) = 0;
          WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>::~HashSet((uint64_t)v337, v145);
        }
        v18 = *(_QWORD **)(v17 + 32);
        if (v18[2])
          goto LABEL_26;
        if (v18[4])
          goto LABEL_26;
        if (!WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set)
          goto LABEL_26;
        v19 = WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set - 1;
        v20 = v18[3];
        v21 = *(_DWORD *)(v20 + 16) >> 8;
        v22 = (v21 ^ WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set) & (WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set - 1);
        v23 = *(_QWORD *)(WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set + 8 * v22);
        if (!v23)
          goto LABEL_26;
        v24 = -1;
        break;
      case 8u:
        goto LABEL_56;
      case 9u:
        goto LABEL_270;
      case 0xEu:
      case 0x10u:
      case 0x11u:
        return result;
      case 0xFu:
        v290 = *(const WebCore::Node ****)(a2 + 48);
        if ((const WebCore::Node ***)v8 == v290 || *(_BYTE *)(a2 + 56) != 0)
          return 1;
        if (!v290)
          return 0;
        result = (uint64_t)WebCore::Node::isDescendantOf((const WebCore::Node ***)a3[1], v290);
        if ((_DWORD)result)
        {
          result = 0;
          *(_BYTE *)(a2 + 220) = 1;
        }
        return result;
      default:
        return 1;
    }
    while (1)
    {
      v25 = *(_DWORD *)(v23 + 16) >> 8;
      if (++v24 > ((v22
                   + WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set
                   - ((v25 ^ WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set) & v19)) & v19))
      {
LABEL_26:
        v26 = 1;
        goto LABEL_27;
      }
      if (v23 == v20 && v25 == v21)
        break;
      v22 = (v22 + 1) & v19;
      v23 = *(_QWORD *)(WebCore::HTMLDocument::isCaseSensitiveAttribute(WebCore::QualifiedName const&)::set + 8 * v22);
      if (!v23)
        goto LABEL_26;
    }
LABEL_43:
    v26 = 0;
LABEL_27:
    if ((*(_WORD *)(v8 + 28) & 0x10) != 0)
      v27 = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 3358) & 1;
    else
      v27 = 0;
    v28 = *(_QWORD *)(v8 + 104);
    v29 = *(_DWORD *)(v28 + 4);
    if ((v29 & 1) != 0)
    {
      v30 = *(_QWORD *)(v28 + 40);
      v31 = *(_DWORD *)(v28 + 52);
      if (v31)
      {
LABEL_31:
        v32 = 0;
        if ((v27 & 1) != 0)
        {
          while (1)
          {
            v314 = v30 + 16 * v32;
            v315 = *(_QWORD **)(v17 + 32);
            if (v315[5] == *(_QWORD *)(*(_QWORD *)v314 + 24)
              && (v315[2] == WebCore::starAtomData || v315[4] == *(_QWORD *)(*(_QWORD *)v314 + 32)))
            {
              v317 = (const WTF::StringImpl *)((*(_DWORD *)v9 & 0x100000) != 0 ? *(_QWORD *)(v9 + 8) + 8 : v9 + 8);
              if ((WebCore::attributeValueMatches(v314, (*(_DWORD *)v9 >> 4) & 0x1F, v317, v26) & 1) != 0)
                break;
            }
            result = 0;
            v316 = v32 + 1;
            v32 = (v32 + 1);
            if (v31 == v316)
              return result;
          }
        }
        else
        {
          while (1)
          {
            v33 = v30 + 16 * v32;
            v34 = *(_QWORD **)(v17 + 32);
            if (v34[3] == *(_QWORD *)(*(_QWORD *)v33 + 24)
              && (v34[2] == WebCore::starAtomData || v34[4] == *(_QWORD *)(*(_QWORD *)v33 + 32)))
            {
              v38 = (const WTF::StringImpl *)((*(_DWORD *)v9 & 0x100000) != 0 ? *(_QWORD *)(v9 + 8) + 8 : v9 + 8);
              if ((WebCore::attributeValueMatches(v33, (*(_DWORD *)v9 >> 4) & 0x1F, v38, v26) & 1) != 0)
                break;
            }
            v35 = v32 + 1;
            v32 = (v32 + 1);
            if (v31 == v35)
              return 0;
          }
        }
        return 1;
      }
    }
    else
    {
      v30 = v28 + 32;
      v31 = v29 >> 5;
      if (v29 >> 5)
        goto LABEL_31;
    }
    return 0;
  }
  if (v11 == 8)
  {
    if ((v10 & 0x1FE00) != 0x4800)
      return 0;
LABEL_56:
    v39 = (v10 >> 9);
    if (v39 == 50)
    {
      v178 = a3;
      if ((v10 & 0x100000) != 0)
        v179 = *(WebCore::Node ***)(*(_QWORD *)(v9 + 8) + 56);
      else
        v179 = 0;
      v180 = *v179;
      if (!*v179)
        return 1;
      v181 = a3;
      while (1)
      {
        v182 = *((_OWORD *)v181 + 1);
        *(_OWORD *)v337 = *(_OWORD *)v181;
        v338 = v182;
        LOBYTE(v339) = 0;
        v341 = 0;
        if (*((_BYTE *)v181 + 48))
        {
          v339 = *((_DWORD *)v178 + 8);
          v183 = (WTF::StringImpl *)v178[5];
          if (v183)
            *(_DWORD *)v183 += 2;
          v340 = v183;
          v341 = 1;
        }
        v342 = (uint64_t)v178[7];
        WORD1(v342) = 1;
        v337[0] = v180;
        *((_QWORD *)&v338 + 1) = *v179;
        LODWORD(v333) = 0;
        matched = WebCore::SelectorChecker::matchRecursively(a1, a2, v337, &v333);
        WebCore::SelectorChecker::LocalContext::~LocalContext((WebCore::SelectorChecker::LocalContext *)v337, v185);
        if (!matched)
          break;
        do
        {
          v187 = *(_DWORD *)v180;
          v180 = (WebCore::Node *)((char *)v180 + 16);
          v186 = v187;
        }
        while ((v187 & 0x80000) == 0);
        result = matched != 0;
        v181 = v178;
        if ((v186 & 0x20000) != 0)
          return result;
      }
      return 0;
    }
    if (!*((_BYTE *)a3 + 60))
    {
      if (*((_BYTE *)a3 + 62))
        return WebCore::SelectorChecker::checkViewTransitionPseudoClass(*(_DWORD *)(a2 + 4), *(_QWORD *)(a2 + 8), *(_QWORD *)(v8 + 40), (int)v10);
      result = 0;
      switch((v10 >> 9))
      {
        case 0u:
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::imgTag + 24))
          {
            return 0;
          }
          WebCore::AttachmentAssociatedElement::attachmentElement((WebCore::AttachmentAssociatedElement *)(v8 + 112), v337);
          v215 = v337[0];
          v138 = v337[0] != 0;
          v337[0] = 0;
          if (v215)
          {
            if (*((_DWORD *)v215 + 6) == 2)
            {
              if ((*((_WORD *)v215 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v215);
            }
            else
            {
              *((_DWORD *)v215 + 6) -= 2;
            }
          }
          goto LABEL_285;
        case 1u:
          v213 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1992);
          if (!v213)
            return 0;
          v214 = *(_DWORD *)(v213 + 8) + 1;
          *(_DWORD *)(v213 + 8) = v214;
          if (*(_QWORD *)(v213 + 56) == v8)
          {
            result = WebCore::FullscreenManager::isAnimatingFullscreen((WebCore::FullscreenManager *)v213);
            v214 = *(_DWORD *)(v213 + 8);
          }
          else
          {
            result = 0;
          }
          if (!v214)
          {
            __break(0xC471u);
            JUMPOUT(0x1944E80A0);
          }
          *(_DWORD *)(v213 + 8) = v214 - 1;
          return result;
        case 2u:
          v209 = *(WebCore::FullscreenManager **)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1992);
          if (!v209)
            return 0;
          ++*((_DWORD *)v209 + 2);
          v210 = WebCore::FullscreenManager::fullscreenElement(v209);
          v211 = *((_DWORD *)v209 + 2);
          if (!v211)
          {
            __break(0xC471u);
            JUMPOUT(0x1944E8080);
          }
          result = v210 != 0;
          *((_DWORD *)v209 + 2) = v211 - 1;
          return result;
        case 3u:
          return *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 3358) & 1;
        case 4u:
          v212 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1992);
          if (!v212)
            v212 = WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8));
          if (*(_QWORD *)(v212 + 56) != v8)
            return 0;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 824))(v8);
          if ((_DWORD)result)
            return *(_DWORD *)(v8 + 1080) == 4;
          return result;
        case 5u:
          return (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 3358) >> 4) & 1;
        case 6u:
        case 0x2Au:
        case 0x52u:
          v151 = **(WebCore::Node ***)(*(_QWORD *)(v9 + 8) + 56);
          if (!v151)
            return 0;
          v152 = a3;
          v153 = 0;
          v154 = 0;
          do
          {
            v155 = *((_OWORD *)v152 + 1);
            *(_OWORD *)v337 = *(_OWORD *)v152;
            v338 = v155;
            LOBYTE(v339) = 0;
            v341 = 0;
            if (*((_BYTE *)v152 + 48))
            {
              v339 = *((_DWORD *)v152 + 8);
              v156 = (WTF::StringImpl *)v152[5];
              if (v156)
              {
                *(_DWORD *)v156 += 2;
                v341 = 1;
                v342 = (uint64_t)v152[7];
                BYTE2(v342) = 1;
                v337[0] = v151;
                *((_QWORD *)&v338 + 1) = v151;
                v340 = 0;
                if (*(_DWORD *)v156 == 2)
                  WTF::StringImpl::destroy(v156, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v156 -= 2;
              }
              else
              {
                v342 = (uint64_t)v152[7];
                BYTE2(v342) = 1;
                v337[0] = v151;
                *((_QWORD *)&v338 + 1) = v151;
                v340 = 0;
              }
              v341 = 0;
            }
            else
            {
              v342 = (uint64_t)v152[7];
              BYTE2(v342) = 1;
              v337[0] = v151;
              *((_QWORD *)&v338 + 1) = v151;
            }
            LODWORD(v333) = 0;
            v157 = WebCore::SelectorChecker::matchRecursively(a1, a2, v337, &v333);
            if (!(_DWORD)v333)
            {
              v154 |= (_DWORD)v157 == 0;
              if (v157 == 0x100000000)
                v153 = 1;
            }
            if (v341)
            {
              v158 = v340;
              v340 = 0;
              if (v158)
              {
                if (*(_DWORD *)v158 == 2)
                  WTF::StringImpl::destroy(v158, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v158 -= 2;
              }
            }
            do
            {
              v160 = *(_DWORD *)v151;
              v151 = (WebCore::Node *)((char *)v151 + 16);
              v159 = v160;
            }
            while ((v160 & 0x80000) == 0);
          }
          while ((v159 & 0x20000) == 0);
          if ((v154 & 1) == 0)
            return 0;
          *a4 = v153;
          return 1;
        case 7u:
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            return 0;
          }
          return (*(unsigned __int16 *)(v8 + 230) >> 10) & 1;
        case 8u:
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24)
            || (*(_WORD *)(v8 + 230) & 0x100) == 0)
          {
            return 0;
          }
          return (*(_WORD *)(v8 + 230) & 0x3800) == 6144;
        case 9u:
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            return 0;
          }
          return (*(unsigned __int16 *)(v8 + 230) >> 9) & 1;
        case 0xAu:
          if ((*(_BYTE *)(v8 + 54) & 2) == 0)
            return 0;
          return WebCore::Element::isUserActionElementDragged((WebCore::Element *)a3[1]);
        case 0xBu:
          return (*(_BYTE *)a1
               || (*(_WORD *)(v8 + 30) & 1) != 0
               || WebCore::canMatchHoverOrActiveInQuirksMode((uint64_t)a3[3], *((_BYTE *)a3 + 58)))
              && ((*(_BYTE *)(v8 + 54) & 2) != 0 && WebCore::Element::isUserActionElementActive((WebCore::Element *)v8)
               || WebCore::InspectorInstrumentation::forcePseudoState(v8, 11));
        case 0xCu:
          v216 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
          if (*(_QWORD *)(v216 + 1272) != v8)
            return 0;
          return *(_QWORD *)(v216 + 2112) != 0;
        case 0xDu:
        case 0x2Eu:
          return *(_WORD *)(v8 + 30) & 1;
        case 0xEu:
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
          {
            return 0;
          }
          return HIBYTE(*(unsigned __int16 *)(v8 + 230)) & 1;
        case 0xFu:
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 824))(a3[1]))
            v208 = v8 == 0;
          else
            v208 = 1;
          if (v208)
            return 0;
          return ((unint64_t)*(unsigned int *)(v8 + 1265) >> 12) & 1;
        case 0x10u:
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0)
            return 0;
          v227 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
          if (v227 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
            return WebCore::HTMLInputElement::matchesCheckedPseudoClass((WebCore::HTMLInputElement *)a3[1]);
          if (v227 != *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
            return 0;
          return WebCore::HTMLOptionElement::selected((uint64_t)a3[1], 0);
        case 0x11u:
        case 0x12u:
        case 0x17u:
        case 0x1Au:
        case 0x23u:
        case 0x27u:
        case 0x31u:
        case 0x49u:
        case 0x4Au:
        case 0x4Fu:
          return result;
        case 0x13u:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 816))(v8);
        case 0x14u:
          return (*(_BYTE *)(v8 + 79) & 0x10) == 0;
        case 0x15u:
          if ((v10 & 0x100000) != 0)
            v219 = (uint64_t *)(*(_QWORD *)(v9 + 8) + 40);
          else
            v219 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0)
            return 0;
          if (WebCore::Node::effectiveTextDirection((WebCore::Node *)a3[1]))
            v220 = "rtl";
          else
            v220 = "ltr";
          return WTF::equalIgnoringASCIICase(v219, v220);
        case 0x16u:
          result = 0;
          if ((*(_WORD *)(v8 + 28) & 0x10) != 0 && v8)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1216))(v8);
          return result;
        case 0x18u:
          v204 = *(_QWORD *)(v8 + 80);
          if (!v204)
            goto LABEL_662;
          do
          {
            v205 = *(_WORD *)(v204 + 28);
            if ((v205 & 8) != 0 || (v205 & 2) != 0 && (v206 = *(_QWORD *)(v204 + 80)) != 0 && *(_DWORD *)(v206 + 4))
            {
              v207 = 0;
              goto LABEL_663;
            }
            v204 = *(_QWORD *)(v204 + 56);
          }
          while (v204);
LABEL_662:
          v207 = 1;
LABEL_663:
          v138 = v207;
          WebCore::addStyleRelation(a2, (uint64_t)a3[1], 0, v207);
          goto LABEL_285;
        case 0x19u:
          result = 0;
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0)
            return result;
          if (!v8)
            return result;
          result = WebCore::HTMLElement::canBeActuallyDisabled((WebCore::HTMLElement *)a3[1]);
          if (!(_DWORD)result)
            return result;
          v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1216))(v8);
          return v132 ^ 1u;
        case 0x1Bu:
          v224 = (uint64_t)a3[1];
          do
          {
            v225 = *(_QWORD *)(v224 + 48);
            v224 = v225 & 0xFFFFFFFFFFFFLL;
          }
          while ((v225 & 0xFFFFFFFFFFFFLL) != 0 && (*(_WORD *)((v225 & 0xFFFFFFFFFFFFLL) + 0x1C) & 8) == 0);
          v226 = *(_QWORD *)(v8 + 32);
          if (v226 && (*(_WORD *)(v226 + 28) & 8) != 0)
            WebCore::addStyleRelation(a2, v226, 8u, 1u);
          if (v224)
            return 0;
          v83 = a2;
          v84 = v8;
          v85 = 10;
          goto LABEL_144;
        case 0x1Cu:
          v217 = *(_QWORD *)(v8 + 32);
          if (v217 && (*(_WORD *)(v217 + 28) & 8) != 0)
          {
            if (*((_BYTE *)a3 + 57))
              v218 = 4;
            else
              v218 = 5;
            WebCore::addStyleRelation(a2, v217, v218, 1u);
          }
          return WebCore::isFirstOfType(v8, *(_QWORD *)(v8 + 96));
        case 0x1Du:
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v165 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
            v166 = *(_QWORD *)(v165 + 528);
            if (v166)
            {
              v167 = *(_QWORD *)(v166 + 8);
              if (v167)
              {
                v168 = *(_QWORD *)(v167 + 24);
                if (v168)
                {
                  v169 = *(_QWORD *)(v168 + 8);
                  if (v169)
                    goto LABEL_852;
                }
              }
            }
            v253 = *(_QWORD *)(v165 + 2632);
            if (v253)
            {
              v254 = *(_QWORD *)(v253 + 8);
              if (v254)
              {
                v255 = *(_QWORD *)(v254 + 528);
                if (v255)
                {
                  v256 = *(_QWORD *)(v255 + 8);
                  if (v256)
                  {
                    v257 = *(_QWORD *)(v256 + 24);
                    if (v257)
                    {
                      v169 = *(_QWORD *)(v257 + 8);
                      if (v169)
                      {
LABEL_852:
                        v170 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v169 + 80) + 8) + 112);
                        if (v170)
                        {
                          if (WebCore::InspectorCSSAgent::forcePseudoState(v170, (uint64_t)a3[1], 29))
                            return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ((*(_BYTE *)(v8 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused((WebCore::Element *)v8))
            goto LABEL_263;
          if ((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v81 = *(_QWORD *)((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
            if (v81)
            {
              if ((*(_BYTE *)(v81 + 192) & 0x10) != 0)
                goto LABEL_263;
            }
          }
          return 0;
        case 0x1Eu:
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            v284 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
            v285 = *(_QWORD *)(v284 + 528);
            if (v285)
            {
              v286 = *(_QWORD *)(v285 + 8);
              if (v286)
              {
                v287 = *(_QWORD *)(v286 + 24);
                if (v287)
                {
                  v288 = *(_QWORD *)(v287 + 8);
                  if (v288)
                    goto LABEL_853;
                }
              }
            }
            v299 = *(_QWORD *)(v284 + 2632);
            if (v299)
            {
              v300 = *(_QWORD *)(v299 + 8);
              if (v300)
              {
                v301 = *(_QWORD *)(v300 + 528);
                if (v301)
                {
                  v302 = *(_QWORD *)(v301 + 8);
                  if (v302)
                  {
                    v303 = *(_QWORD *)(v302 + 24);
                    if (v303)
                    {
                      v288 = *(_QWORD *)(v303 + 8);
                      if (v288)
                      {
LABEL_853:
                        v289 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v288 + 80) + 8) + 112);
                        if (v289)
                        {
                          if (WebCore::InspectorCSSAgent::forcePseudoState(v289, (uint64_t)a3[1], 30))
                            return 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if ((*(_BYTE *)(v8 + 54) & 2) == 0)
            return 0;
          result = WebCore::Element::isUserActionElementHasFocusVisible((WebCore::Element *)v8);
          if ((_DWORD)result)
            goto LABEL_263;
          return result;
        case 0x1Fu:
          if (WebCore::InspectorInstrumentation::forcePseudoState((uint64_t)a3[1], 31))
            return 1;
          if ((*(_BYTE *)(v8 + 54) & 2) == 0)
            return 0;
          result = WebCore::Element::isUserActionElementHasFocusWithin((WebCore::Element *)v8);
          if (!(_DWORD)result)
            return result;
LABEL_263:
          v134 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 528);
          if (!v134)
            return 0;
          v135 = *(_QWORD *)(v134 + 8);
          if (!v135)
            return 0;
          return WebCore::FrameSelection::isFocusedAndActive(*(WebCore::FrameSelection **)(*(_QWORD *)(v135 + 296)
                                                                                         + 3064));
        case 0x20u:
          if ((*(_BYTE *)(v8 + 54) & 0x40) != 0)
            return 1;
          if ((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) == 0
            || !*(_QWORD *)((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
          {
            return 0;
          }
          v228 = WebCore::DocumentOrShadowRootFullscreen::fullscreenElement((WebCore::DocumentOrShadowRootFullscreen *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 96), (WebCore::TreeScope *)a2);
          return v228 == (WebCore::Element *)v8;
        case 0x21u:
          result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 176))(a3[1]);
          if (!(_DWORD)result)
            return result;
          v175 = *(unsigned __int8 *)(v8 + 112);
          return v175 == 0;
        case 0x22u:
          v221 = **(const WebCore::CSSSelector ***)(*(_QWORD *)(v9 + 8) + 56);
          if (!v221)
            return 0;
          while (1)
          {
            result = WebCore::SelectorChecker::matchHasPseudoClass(a1, a2, (const WebCore::Element *)v8, v221);
            if ((result & 1) != 0)
              break;
            do
            {
              v223 = *(_DWORD *)v221;
              v221 = (const WebCore::CSSSelector *)((char *)v221 + 16);
              v222 = v223;
            }
            while ((v223 & 0x80000) == 0);
            if ((v222 & 0x20000) != 0)
              return result;
          }
          return 1;
        case 0x24u:
          if (*((_BYTE *)a3 + 63)
            && (*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) != 0
            && *(_QWORD *)((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
          {
            if ((v10 & 0x100000) == 0)
              return 1;
            v47 = *(WebCore::Node ***)(*(_QWORD *)(v9 + 8) + 56);
            if (!v47)
              return 1;
            v337[0] = *v47;
            v337[1] = (WebCore::Node *)v8;
            LOBYTE(v338) = 1;
            *((WebCore::Node **)&v338 + 1) = v337[0];
            LOBYTE(v339) = 0;
            v341 = 0;
            v342 = 65793;
            LODWORD(v333) = 0;
            v49 = WebCore::SelectorChecker::matchRecursively(a1, a2, v337, &v333);
            if (v341)
            {
              v50 = v340;
              v340 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, v48);
                else
                  *(_DWORD *)v50 -= 2;
              }
            }
            if (!v49)
              return 1;
          }
          return 0;
        case 0x25u:
          if (!*(_BYTE *)a1 && (*(_WORD *)(v8 + 30) & 1) == 0)
          {
            v246 = a3;
            canMatchHoverOrActiveInQuirksMode = WebCore::canMatchHoverOrActiveInQuirksMode((uint64_t)a3[3], *((_BYTE *)a3 + 58));
            a3 = v246;
            if (!canMatchHoverOrActiveInQuirksMode)
              return 0;
          }
          if ((*(_BYTE *)a2 != 2 || *((_BYTE *)a3 + 56))
            && ((*(_BYTE *)(v8 + 54) & 2) == 0 || !WebCore::Element::isUserActionElementHovered((WebCore::Element *)v8)))
          {
            if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              return 0;
            v74 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
            v75 = *(_QWORD *)(v74 + 528);
            if (!v75
              || (v76 = *(_QWORD *)(v75 + 8)) == 0
              || (v77 = *(_QWORD *)(v76 + 24)) == 0
              || (v78 = *(_QWORD *)(v77 + 8)) == 0)
            {
              v258 = *(_QWORD *)(v74 + 2632);
              if (!v258)
                return 0;
              v259 = *(_QWORD *)(v258 + 8);
              if (!v259)
                return 0;
              v260 = *(_QWORD *)(v259 + 528);
              if (!v260)
                return 0;
              v261 = *(_QWORD *)(v260 + 8);
              if (!v261)
                return 0;
              v262 = *(_QWORD *)(v261 + 24);
              if (!v262)
                return 0;
              v78 = *(_QWORD *)(v262 + 8);
              if (!v78)
                return 0;
            }
            v79 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v78 + 80) + 8) + 112);
            if (!v79 || !WebCore::InspectorCSSAgent::forcePseudoState(v79, v8, 37))
              return 0;
          }
          return 1;
        case 0x26u:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 912))(v8);
        case 0x28u:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 808))(v8);
        case 0x29u:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 776))(v8);
        case 0x2Bu:
          if ((v10 & 0x100000) != 0)
            v56 = (_QWORD *)(*(_QWORD *)(v9 + 8) + 48);
          else
            v56 = 0;
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 176))(a3[1]))
          {
            v62 = *(_QWORD *)(v8 + 120);
            if (!v62)
              return 0;
          }
          else
          {
            if ((*(_WORD *)(v8 + 30) & 8) != 0)
              goto LABEL_99;
            if ((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) != 0)
            {
              v62 = *(_QWORD *)((*(_QWORD *)(v8 + 72) & 0xFFFFFFFFFFFFLL) + 0x40);
              if (v62)
                goto LABEL_102;
            }
            if ((*(_BYTE *)(v8 + 22) & 8) != 0)
            {
LABEL_99:
              v58 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
              v59 = (uint64_t *)(v58 + 1720);
              v60 = *(_QWORD *)(v58 + 1720);
              v61 = (uint64_t *)(v58 + 1712);
              if (v60)
                v61 = v59;
            }
            else
            {
              v61 = (uint64_t *)MEMORY[0x1E0CBF2F8];
            }
            v62 = *v61;
            if (!*v61)
              return 0;
          }
LABEL_102:
          v63 = *(_DWORD *)(v62 + 4);
          v64 = *(_DWORD *)v62 + 2;
          *(_DWORD *)v62 = v64;
          if (v63)
          {
            v65 = *(_BYTE *)(v62 + 16);
            v336[0] = *(WTF **)(v62 + 8);
            LODWORD(v336[1]) = v63;
            BYTE4(v336[1]) = (v65 & 4) != 0;
            v66 = (_DWORD *)*v56;
            if (*v56)
            {
              v67 = *v66;
              v66 += 2;
              v68 = &v66[4 * v67];
            }
            else
            {
              v68 = 0;
            }
            if (v66 == v68)
            {
LABEL_106:
              result = 0;
              goto LABEL_107;
            }
            v325 = v68;
            v322 = *(_DWORD *)(v62 + 4);
            while (1)
            {
              v86 = v331 & 0xFFFFFF0000000000;
              v326 = v66;
              v87 = *(_QWORD *)v66;
              if (v87)
              {
                v8 = *(unsigned int *)(v87 + 4);
                v330 = ((unint64_t)*(unsigned int *)(v87 + 16) >> 2) & 1;
                v331 = v86 | (v330 << 32) | v8;
                if ((_DWORD)v8)
                {
                  v88 = *(char **)(v87 + 8);
                  if (v88 == "*" || (_DWORD)v8 != 1)
                  {
                    if (v88 != "*" || (_DWORD)v8 != 1)
                      goto LABEL_161;
                    goto LABEL_820;
                  }
                  if ((_DWORD)v330)
                    v90 = *v88;
                  else
                    v90 = *(unsigned __int16 *)v88;
                  if (v90 == 42)
                    goto LABEL_820;
LABEL_161:
                  *(_OWORD *)v337 = *(_OWORD *)v336;
                  v333 = (unsigned __int8 *)v88;
                  v334 = (unsigned int **)(v86 | (v330 << 32) | v8);
                  if (WTF::equalIgnoringASCIICaseCommon<WTF::StringView,WTF::StringView>((unsigned __int8 **)v337, &v333)&& WTF::StringView::find((uint64_t)v336, 0x2Du, 0, v92, v93, v94) == -1)
                  {
LABEL_820:
                    result = 1;
                    goto LABEL_107;
                  }
                  v95 = 0;
                  v327 = 0;
                  while (2)
                  {
                    if (v327)
                    {
                      if (v327 >= v322)
                        goto LABEL_106;
                      v96 = v327 + 1;
                    }
                    else
                    {
                      v96 = 0;
                    }
                    if (!(_DWORD)v330)
                    {
                      v321 = WTF::find<char16_t,(void *)0>((uint64_t)v88, v8, 0x2Du, v96, v92, v93, v94);
                      goto LABEL_177;
                    }
                    if (v8 > v96)
                    {
                      v97 = v8 - v96;
                      v98 = 16;
                      if (v97 < 0x10)
                        v98 = v8 - v96;
                      if (v98)
                      {
                        v99 = v98;
                        v100 = &v88[v96];
                        while (*v100 != 45)
                        {
                          ++v100;
                          if (!--v99)
                            goto LABEL_173;
                        }
LABEL_175:
                        v101 = (_DWORD)v100 - (_DWORD)v88;
LABEL_176:
                        v321 = v101;
LABEL_177:
                        if (v8 >= v321)
                          v102 = v321;
                        else
                          v102 = v8;
                        v327 = v102;
                        if (v8 <= v96)
                        {
                          v104 = 0x100000000;
                          v126 = "";
                          goto LABEL_244;
                        }
                        v103 = v102 - v96;
                        if (v8 - v96 > v102 - v96)
                          goto LABEL_182;
                        v329 = v88;
                        v104 = v331;
                        if (v96)
                        {
                          v103 = v8 - v96;
LABEL_182:
                          v104 = v103;
                          v105 = v8 - v96;
                          if ((_DWORD)v330)
                          {
                            if (v105 < v104)
                              goto LABEL_664;
                            v329 = &v88[v96];
                            v104 |= 0x100000000uLL;
                            goto LABEL_185;
                          }
                          if (v105 < v104)
                          {
LABEL_664:
                            __break(1u);
                            return (*(unsigned __int8 *)(v8 + 54) >> 6) & 1;
                          }
                          v126 = &v88[2 * v96];
LABEL_244:
                          v329 = (char *)v126;
                        }
LABEL_185:
                        if (v329 == "*" || (_DWORD)v104 != 1)
                        {
                          v125 = v329 == "*" && (_DWORD)v104 == 1;
                          v319 = v125;
                          v106 = v104 & 0xFF00000000;
LABEL_189:
                          v318 = v106;
                        }
                        else
                        {
                          if ((v104 & 0xFF00000000) != 0)
                          {
                            v319 = *v329 == 42;
                            v106 = 1;
                            goto LABEL_189;
                          }
                          v318 = 0;
                          v319 = *(unsigned __int16 *)v329 == 42;
                        }
                        v107 = v336[1];
                        v328 = v336[0];
                        v323 = LODWORD(v336[1]);
                        v324 = (unint64_t)v336[1] & 0xFF00000000;
LABEL_191:
                        if (v95)
                          v108 = v95 + 1;
                        else
                          v108 = 0;
                        if (!v324)
                        {
                          v320 = WTF::find<char16_t,(void *)0>((uint64_t)v328, v323, 0x2Du, v108, v92, v93, v94);
                          goto LABEL_206;
                        }
                        if (v107 > v108)
                        {
                          v109 = v323 - v108;
                          v110 = 16;
                          if (v109 < 0x10)
                            v110 = v323 - v108;
                          if (v110)
                          {
                            v111 = v110;
                            v112 = (char *)v328 + v108;
                            while (*v112 != 45)
                            {
                              ++v112;
                              if (!--v111)
                                goto LABEL_202;
                            }
LABEL_204:
                            v113 = (_DWORD)v112 - (_DWORD)v328;
LABEL_205:
                            v320 = v113;
LABEL_206:
                            if (v322 >= v320)
                              v95 = v320;
                            else
                              v95 = v322;
                            v114 = v95 - v108;
                            if (v95 < v108)
                              goto LABEL_247;
                            if (v107 <= v108)
                            {
                              v115 = 0x100000000;
                              v117 = "";
                            }
                            else if ((int)v107 - (int)v108 <= v114)
                            {
                              v117 = (const char *)v328;
                              v115 = (uint64_t)v107;
                              if ((_DWORD)v108)
                              {
                                v114 = (_DWORD)v107 - v108;
                                goto LABEL_212;
                              }
                            }
                            else
                            {
LABEL_212:
                              v115 = v114;
                              v116 = v323 - v108;
                              if (v324)
                              {
                                if (v116 < v114)
                                  goto LABEL_664;
                                v117 = (char *)v328 + v108;
                                v115 = v114 | 0x100000000;
                              }
                              else
                              {
                                if (v116 < v114)
                                  goto LABEL_664;
                                v117 = (char *)v328 + 2 * v108;
                              }
                            }
                            if ((_DWORD)v104 != (_DWORD)v115)
                              goto LABEL_297;
                            v118 = v115 & 0xFF00000000;
                            if (v318)
                            {
                              if (v118)
                              {
                                if ((_DWORD)v104)
                                {
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v329) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v117))
                                  {
                                    v119 = 0;
                                    while (v104 - 1 != v119)
                                    {
                                      v120 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v329[v119 + 1]);
                                      v121 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v117[++v119]);
                                      if (v120 != v121)
                                        goto LABEL_225;
                                    }
                                    v119 = v104;
LABEL_225:
                                    v122 = v119 >= v104;
                                    goto LABEL_226;
                                  }
LABEL_297:
                                  v122 = 0;
                                }
                                else
                                {
                                  v122 = 1;
                                }
                              }
                              else
                              {
                                v122 = WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>((_BOOL8)v329, v104, (uint64_t)v117, v104, v104);
                              }
                            }
                            else if (v118)
                            {
                              v122 = WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>((_BOOL8)v329, v104, (uint64_t)v117, v104, v104);
                            }
                            else
                            {
                              v122 = WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>((_BOOL8)v329, v104, (uint64_t)v117, v104, v104);
                            }
LABEL_226:
                            if (v319)
                              goto LABEL_815;
                            v123 = !v122;
                            if ((_DWORD)v108)
                              v123 = 0;
                            if (v123 || (_DWORD)v108 && (_DWORD)v115 == 1)
                              goto LABEL_247;
                            if (v122)
                            {
LABEL_815:
                              result = 1;
                              if (v8 <= v321)
                              {
LABEL_107:
                                v64 = *(_DWORD *)v62;
                                goto LABEL_108;
                              }
                              continue;
                            }
                            if (v322 <= v320)
                              goto LABEL_247;
                            goto LABEL_191;
                          }
LABEL_202:
                          if (v109 >= 0x11)
                          {
                            v112 = memchr((char *)v328 + v108 + v110, 45, v109 - v110);
                            if (v112)
                              goto LABEL_204;
                          }
                        }
                        v113 = -1;
                        goto LABEL_205;
                      }
LABEL_173:
                      if (v97 >= 0x11)
                      {
                        v100 = (char *)memchr(&v88[v96 + v98], 45, v97 - v98);
                        if (v100)
                          goto LABEL_175;
                      }
                    }
                    break;
                  }
                  v101 = -1;
                  goto LABEL_176;
                }
              }
              else
              {
                v331 = v86 | 0x100000000;
              }
LABEL_247:
              result = 0;
              v66 = v326 + 4;
              if (v326 + 4 == v325)
                goto LABEL_107;
            }
          }
          result = 0;
LABEL_108:
          v69 = v64 - 2;
          if (v69)
          {
            *(_DWORD *)v62 = v69;
            return result;
          }
          v138 = result;
          WTF::StringImpl::destroy((WTF::StringImpl *)v62, v57);
          goto LABEL_285;
        case 0x2Cu:
          v70 = a3[1];
          do
          {
            v70 = (unsigned int *)*((_QWORD *)v70 + 7);
            v71 = v70 == 0;
          }
          while (v70 && (v70[7] & 8) == 0);
          v72 = *(_QWORD *)(v8 + 32);
          if (!v72 || (*(_WORD *)(v72 + 28) & 8) == 0)
            goto LABEL_115;
          if ((*(_WORD *)(v72 + 30) & 2) != 0)
          {
            if (*(_BYTE *)a2)
              return 0;
            v71 = 0;
          }
          else if (*(_BYTE *)a2)
          {
LABEL_115:
            if (v70)
              return 0;
            goto LABEL_143;
          }
          v337[0] = *(WebCore::Node **)(v8 + 32);
          v337[1] = (WebCore::Node *)0x100000009;
          v82 = *(unsigned int *)(a2 + 84);
          if ((_DWORD)v82 == *(_DWORD *)(a2 + 80))
          {
            WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::Relation>(a2 + 72, (unint64_t)v337);
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)(a2 + 72) + 16 * v82) = *(_OWORD *)v337;
            ++*(_DWORD *)(a2 + 84);
          }
          if (!v71)
            return 0;
          goto LABEL_143;
        case 0x2Du:
          v234 = *(_QWORD *)(v8 + 32);
          if (v234 && (*(_WORD *)(v234 + 28) & 8) != 0)
          {
            v235 = *((_BYTE *)a3 + 57) ? 6 : 7;
            WebCore::addStyleRelation(a2, *(_QWORD *)(v8 + 32), v235, 1u);
            if ((*(_WORD *)(v234 + 30) & 2) != 0)
              return 0;
          }
          return WebCore::isLastOfType(v8, *(_QWORD *)(v8 + 96));
        case 0x2Fu:
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::dialogTag + 24))
          {
            return (*(unsigned __int8 *)(v8 + 54) >> 6) & 1;
          }
          v174 = *(unsigned __int8 *)(v8 + 120);
          goto LABEL_390;
        case 0x30u:
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 824))(a3[1]))
            v201 = v8 == 0;
          else
            v201 = 1;
          if (v201)
            return 0;
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1472))(v8);
        case 0x33u:
          v192 = (const WebCore::SelectorChecker::LocalContext *)a3;
          v193 = *(const WebCore::Element **)(v8 + 32);
          if (v193 && (*((_WORD *)v193 + 14) & 8) != 0)
          {
            if (*((_BYTE *)a3 + 57))
              v194 = 4;
            else
              v194 = 5;
            WebCore::addStyleRelation(a2, (uint64_t)v193, v194, 1u);
            LODWORD(v10) = *(_DWORD *)v9;
          }
          if ((v10 & 0x100000) == 0)
            goto LABEL_431;
          v305 = *(int ***)(*(_QWORD *)(v9 + 8) + 56);
          if (!v305)
            goto LABEL_431;
          result = WebCore::SelectorChecker::matchSelectorList(a1, (WebCore::SelectorChecker::CheckingContext *)a2, v192, (const WebCore::Element *)v8, v305);
          if (!(_DWORD)result)
            return result;
          if ((*(_BYTE *)(v9 + 2) & 0x10) == 0 || (v306 = *(int ***)(*(_QWORD *)(v9 + 8) + 56)) == 0)
          {
LABEL_431:
            v195 = WebCore::countElementsBefore((WebCore *)v8, v193) + 1;
            WebCore::addStyleRelation(a2, v8, 0xCu, v195);
            goto LABEL_432;
          }
          do
          {
            v307 = *(_QWORD *)(v8 + 48);
            v8 = v307 & 0xFFFFFFFFFFFFLL;
            if ((v307 & 0xFFFFFFFFFFFFLL) == 0)
            {
              v195 = 1;
              goto LABEL_432;
            }
          }
          while ((*(_WORD *)((v307 & 0xFFFFFFFFFFFFLL) + 0x1C) & 8) == 0);
          v195 = 1;
LABEL_781:
          v195 += WebCore::SelectorChecker::matchSelectorList(a1, (WebCore::SelectorChecker::CheckingContext *)a2, v192, (const WebCore::Element *)v8, v306);
          while (1)
          {
            v308 = *(_QWORD *)(v8 + 48);
            v8 = v308 & 0xFFFFFFFFFFFFLL;
            if ((v308 & 0xFFFFFFFFFFFFLL) == 0)
              break;
            if ((*(_WORD *)((v308 & 0xFFFFFFFFFFFFLL) + 0x1C) & 8) != 0)
              goto LABEL_781;
          }
LABEL_432:
          v196 = (WebCore::CSSSelector *)v9;
          v197 = v195;
          return WebCore::CSSSelector::matchNth(v196, v197);
        case 0x34u:
          v236 = (const WebCore::SelectorChecker::LocalContext *)a3;
          v237 = *(_QWORD *)(v8 + 32);
          if (!v237 || (*(_WORD *)(v237 + 28) & 8) == 0)
            goto LABEL_587;
          if ((v10 & 0x100000) == 0 || (v313 = *(int ***)(*(_QWORD *)(v9 + 8) + 56)) == 0)
          {
            if (*((_BYTE *)a3 + 57))
              v292 = 6;
            else
              v292 = 7;
LABEL_726:
            WebCore::addStyleRelation(a2, v237, v292, 1u);
            if ((*(_WORD *)(v237 + 30) & 2) != 0)
              return 0;
            LODWORD(v10) = *(_DWORD *)v9;
LABEL_587:
            if ((v10 & 0x100000) != 0 && (v312 = *(int ***)(*(_QWORD *)(v9 + 8) + 56)) != 0)
            {
              do
              {
                v8 = *(_QWORD *)(v8 + 56);
                if (!v8)
                  goto LABEL_800;
              }
              while ((*(_WORD *)(v8 + 28) & 8) == 0);
              v311 = 1;
LABEL_796:
              v311 += WebCore::SelectorChecker::matchSelectorList(a1, (WebCore::SelectorChecker::CheckingContext *)a2, v236, (const WebCore::Element *)v8, v312);
              while (1)
              {
                v8 = *(_QWORD *)(v8 + 56);
                if (!v8)
                  break;
                if ((*(_WORD *)(v8 + 28) & 8) != 0)
                  goto LABEL_796;
              }
            }
            else
            {
              while (1)
              {
                v8 = *(_QWORD *)(v8 + 56);
                if (!v8)
                  break;
                if ((*(_WORD *)(v8 + 28) & 8) != 0)
                {
                  v238 = 0;
                  while (1)
                  {
                    v8 = *(_QWORD *)(v8 + 56);
                    if (!v8)
                      break;
                    if ((*(_WORD *)(v8 + 28) & 8) != 0)
                      ++v238;
                  }
                  v311 = v238 + 2;
                  return WebCore::CSSSelector::matchNth((WebCore::CSSSelector *)v9, v311);
                }
              }
LABEL_800:
              v311 = 1;
            }
            return WebCore::CSSSelector::matchNth((WebCore::CSSSelector *)v9, v311);
          }
          if ((WebCore::SelectorChecker::matchSelectorList(a1, (WebCore::SelectorChecker::CheckingContext *)a2, (const WebCore::SelectorChecker::LocalContext *)a3, (const WebCore::Element *)a3[1], v313) & 1) != 0)
          {
            v292 = 6;
            goto LABEL_726;
          }
          break;
        case 0x35u:
          v231 = *(_QWORD *)(v8 + 32);
          if (v231 && (*(_WORD *)(v231 + 28) & 8) != 0)
          {
            v232 = *((_BYTE *)a3 + 57) ? 6 : 7;
            WebCore::addStyleRelation(a2, *(_QWORD *)(v8 + 32), v232, 1u);
            if ((*(_WORD *)(v231 + 30) & 2) != 0)
              return 0;
          }
          v233 = WebCore::countElementsOfTypeAfter(v8, *(_QWORD *)(v8 + 96)) + 1;
          return WebCore::CSSSelector::matchNth((WebCore::CSSSelector *)v9, v233);
        case 0x36u:
          v202 = *(_QWORD *)(v8 + 32);
          if (v202 && (*(_WORD *)(v202 + 28) & 8) != 0)
          {
            if (*((_BYTE *)a3 + 57))
              v203 = 4;
            else
              v203 = 5;
            WebCore::addStyleRelation(a2, v202, v203, 1u);
          }
          v197 = WebCore::countElementsOfTypeBefore(v8, *(_QWORD *)(v8 + 96)) + 1;
          v196 = (WebCore::CSSSelector *)v9;
          return WebCore::CSSSelector::matchNth(v196, v197);
        case 0x37u:
          v198 = (uint64_t)a3[1];
          while (1)
          {
            v198 = *(_QWORD *)(v198 + 48) & 0xFFFFFFFFFFFFLL;
            if (!v198)
              break;
            if ((*(_WORD *)(v198 + 28) & 8) != 0)
            {
              v199 = 0;
              goto LABEL_636;
            }
          }
          v251 = a3[1];
          do
          {
            v251 = (unsigned int *)*((_QWORD *)v251 + 7);
            v199 = v251 == 0;
          }
          while (v251 && (v251[7] & 8) == 0);
LABEL_636:
          v252 = *(_QWORD *)(v8 + 32);
          if (v252)
          {
            if ((*(_WORD *)(v252 + 28) & 8) != 0)
            {
              WebCore::addStyleRelation(a2, *(_QWORD *)(v8 + 32), 8u, 1u);
              WebCore::addStyleRelation(a2, v252, 9u, 1u);
              if ((*(_WORD *)(v252 + 30) & 2) != 0)
                v199 = 0;
            }
          }
          if (!v198)
            WebCore::addStyleRelation(a2, v8, 0xAu, 1u);
          if (!v199)
            return 0;
LABEL_143:
          v83 = a2;
          v84 = v8;
          v85 = 11;
LABEL_144:
          WebCore::addStyleRelation(v83, v84, v85, 1u);
          return 1;
        case 0x38u:
          v239 = *(_QWORD *)(v8 + 32);
          if (v239 && (*(_WORD *)(v239 + 28) & 8) != 0)
          {
            v240 = a3;
            v241 = *((_BYTE *)a3 + 57) ? 4 : 5;
            WebCore::addStyleRelation(a2, *(_QWORD *)(v8 + 32), v241, 1u);
            v242 = *((_BYTE *)v240 + 57) ? 6 : 7;
            WebCore::addStyleRelation(a2, v239, v242, 1u);
            if ((*(_WORD *)(v239 + 30) & 2) != 0)
              return 0;
          }
          v243 = *(_QWORD *)(v8 + 96);
          result = WebCore::isFirstOfType(v8, v243);
          if ((_DWORD)result)
            return WebCore::isLastOfType(v8, v243);
          return result;
        case 0x39u:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 896))(v8);
        case 0x3Au:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 920))(v8);
        case 0x3Bu:
          result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 176))(a3[1]);
          if (!(_DWORD)result)
            return result;
          v174 = *(unsigned __int8 *)(v8 + 112);
          goto LABEL_390;
        case 0x3Cu:
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 824))(a3[1]))
            v191 = v8 == 0;
          else
            v191 = 1;
          if (v191)
            return 0;
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1384))(v8);
        case 0x3Du:
          if ((*(_WORD *)(v8 + 28) & 0x10) == 0
            || *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
          {
            return 0;
          }
          v228 = (WebCore::Element *)WebCore::Document::pictureInPictureElement(*(WebCore::Document **)(*(_QWORD *)(v8 + 40) + 8));
          return v228 == (WebCore::Element *)v8;
        case 0x3Eu:
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 872))(a3[1]))
            v229 = v8 == 0;
          else
            v229 = 1;
          if (v229)
            return 0;
          WebCore::addStyleRelation(a2, v8, 0xDu, 1u);
          return (*(unsigned __int8 *)(v8 + 169) >> 3) & 1;
        case 0x3Fu:
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 824))(a3[1]))
            v200 = v8 == 0;
          else
            v200 = 1;
          if (v200)
            return 0;
          v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 1384))(v8);
          return v132 ^ 1u;
        case 0x40u:
          return WebCore::Element::isPopoverShowing((WebCore::Element *)a3[1]);
        case 0x41u:
          v132 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 800))(v8);
          return v132 ^ 1u;
        case 0x42u:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 800))(v8);
        case 0x43u:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 904))(v8);
        case 0x44u:
          return v8 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1272);
        case 0x45u:
          v190 = *(_QWORD *)(a2 + 40);
          if (!v190)
            v190 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1272);
          return v8 == v190;
        case 0x46u:
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 824))(a3[1]))
            v189 = v8 == 0;
          else
            v189 = 1;
          if (v189)
            return 0;
          return WebCore::HTMLMediaElement::seeking((WebCore::HTMLMediaElement *)v8);
        case 0x47u:
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 824))(a3[1]))
            v188 = v8 == 0;
          else
            v188 = 1;
          if (v188)
            return 0;
          return ((unint64_t)*(unsigned int *)(v8 + 1265) >> 13) & 1;
        case 0x48u:
          if ((v10 & 0x100000) != 0)
            v245 = (const WTF::AtomString *)(*(_QWORD *)(v9 + 8) + 40);
          else
            v245 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
          return WebCore::Element::hasCustomState((WebCore::Element *)a3[1], v245);
        case 0x4Bu:
          v244 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1568);
          return v244 && v8 == *(_QWORD *)(v244 + 8)
              || WebCore::InspectorInstrumentation::forcePseudoState((uint64_t)a3[1], 75);
        case 0x4Cu:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 792))(v8);
        case 0x4Du:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 784))(v8);
        case 0x4Eu:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 768))(v8);
        case 0x50u:
          if (*((_BYTE *)a3 + 58))
            return 0;
          return *(unsigned __int16 *)(v8 + 30) & (*((_BYTE *)a3 + 16) == 1);
        case 0x51u:
          if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)v8 + 824))(a3[1]))
            v230 = v8 == 0;
          else
            v230 = 1;
          if (v230)
            return 0;
          return *(_BYTE *)(v8 + 1270) & 1;
        case 0x53u:
          goto LABEL_357;
        default:
          return 0;
      }
      return 0;
    }
    if (v39 != 37)
    {
      result = 0;
      if ((v10 >> 9) <= 0x22u)
      {
        switch((v10 >> 9))
        {
          case 0xBu:
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v139 = *(_DWORD *)(a2 + 16);
            v140 = *(_DWORD *)(a2 + 24);
            v141 = (0x10110u >> v140) & 1;
            if (v140 >= 0x11)
              v141 = 0;
            v142 = v139 == v140;
            v143 = v140 != 0;
            if (v139 != 128)
              v143 = v142;
            if (v139 == 256)
              return v141;
            else
              return v143;
          case 0x11u:
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v174 = *(unsigned __int8 *)(a2 + 31);
            goto LABEL_390;
          case 0x12u:
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v171 = *(_DWORD *)(a2 + 16);
            v172 = v171 >= 0x21;
            v173 = 0x100000012;
            goto LABEL_620;
          case 0x16u:
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v175 = *(unsigned __int8 *)(a2 + 30);
            return v175 == 0;
          case 0x17u:
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            result = 0;
            v176 = *(_DWORD *)(a2 + 16) - 1;
            if (v176 <= 0x3F)
            {
              v177 = *(unsigned __int8 *)(a2 + 29);
              if (((1 << v176) & 0xB) != 0)
              {
                return v177 == 2 || v177 == 4;
              }
              else if (((1 << v176) & 0x8000000080008000) != 0)
              {
                return (v177 - 3) < 2;
              }
            }
            return result;
          case 0x19u:
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v174 = *(unsigned __int8 *)(a2 + 30);
LABEL_390:
            result = v174 != 0;
            break;
          case 0x1Au:
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v171 = *(_DWORD *)(a2 + 16) - 16;
            v172 = v171 >= 0x31;
            v173 = 0x1000000010001;
            goto LABEL_620;
          default:
            return result;
        }
        return result;
      }
      if ((v10 >> 9) <= 0x48u)
      {
        switch(v39)
        {
          case '#':
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v175 = *(unsigned __int8 *)(a2 + 28);
            return v175 == 0;
          case '\'':
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v171 = *(_DWORD *)(a2 + 16) - 2;
            v172 = v171 >= 0x3F;
            v173 = 0x4000000000004001;
LABEL_620:
            v248 = (v173 >> v171) & 1;
            if (v172)
              return 0;
            else
              return v248;
          case '1':
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v148 = *(_DWORD *)(a2 + 16);
            v149 = *(unsigned __int8 *)(a2 + 29);
            if (v148 == 16)
              return (v149 & 0xFD) == 0;
            if (v148 != 4)
              return 0;
            return !*(_BYTE *)(a2 + 29) || v149 == 3;
        }
        return result;
      }
      if ((v10 >> 9) > 0x4Eu)
      {
        if (v39 != 79)
        {
          if (v39 == 83)
          {
LABEL_357:
            v161 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 528);
            if (v161)
            {
              v162 = *(_QWORD *)(v161 + 8);
              if (v162)
              {
                v163 = *(_QWORD *)(v162 + 24);
                if (v163)
                {
                  v164 = *(_QWORD *)(v163 + 8);
                  if (v164)
                    return (*(_WORD *)(*(_QWORD *)(v164 + 72) + 26) & 1) == 0;
                }
              }
            }
            return 0;
          }
          return result;
        }
        if (!*(_BYTE *)(a2 + 32))
          return 0;
        v250 = *(unsigned __int8 *)(a2 + 28);
      }
      else
      {
        if (v39 != 73)
        {
          if (v39 == 74)
          {
            if (!*(_BYTE *)(a2 + 32))
              return 0;
            v146 = *(_DWORD *)(a2 + 16);
            return v146 == 4 || (v146 - 1) < 2;
          }
          return result;
        }
        if (!*(_BYTE *)(a2 + 32))
          return 0;
        result = 0;
        v249 = *(_DWORD *)(a2 + 16) - 1;
        if (v249 > 0x3F || ((1 << v249) & 0x8000000000008009) == 0)
          return result;
        v250 = *(unsigned __int8 *)(a2 + 29);
      }
      return v250 == 1;
    }
    if (!*(_BYTE *)(a2 + 32))
      return 0;
    v127 = *(_DWORD *)(a2 + 16);
    v128 = *(_DWORD *)(a2 + 20);
    v129 = v128 != 0;
    v130 = (0x10110u >> v128) & 1;
    if (v128 >= 0x11)
      v130 = 0;
    v131 = v127 == v128;
    if (v127 == 256)
      v131 = v130;
    if (v127 == 128)
      return v129;
    else
      return v131;
  }
  else
  {
    if (v11 != 9)
      return 0;
LABEL_270:
    result = 1;
    switch((v10 >> 9))
    {
      case 0xBu:
        v276 = *((_OWORD *)a3 + 1);
        *(_OWORD *)v337 = *(_OWORD *)a3;
        v338 = v276;
        LOBYTE(v339) = 0;
        v341 = 0;
        if (*((_BYTE *)a3 + 48))
        {
          v339 = *((_DWORD *)a3 + 8);
          v277 = (WTF::StringImpl *)a3[5];
          if (v277)
            *(_DWORD *)v277 += 2;
          v340 = v277;
          v341 = 1;
        }
        v342 = (uint64_t)a3[7];
        v278 = **(WebCore::Node ***)(*(_QWORD *)(v9 + 8) + 56);
        v337[0] = v278;
        if (v278)
        {
          do
          {
            *((_QWORD *)&v338 + 1) = v278;
            WORD1(v342) = 1;
            LODWORD(v333) = 0;
            v279 = WebCore::SelectorChecker::matchRecursively(a1, a2, v337, &v333);
            v280 = v279 == 0;
            if (!v279)
              break;
            v278 = v337[0];
            do
            {
              v282 = *(_DWORD *)v278;
              v278 = (WebCore::Node *)((char *)v278 + 16);
              v281 = v282;
            }
            while ((v282 & 0x80000) == 0);
            v283 = (v281 & 0x20000) != 0 ? 0 : v278;
            v337[0] = v283;
          }
          while ((v281 & 0x20000) == 0);
        }
        else
        {
          v280 = 0;
        }
        WebCore::SelectorChecker::LocalContext::~LocalContext((WebCore::SelectorChecker::LocalContext *)v337, (WTF::StringImpl *)a2);
        return v280;
      case 0xFu:
        v274 = *(_DWORD *)(a2 + 4);
        if (!v274)
          return 1;
        if (v274 != 4 || (v10 & 0x100000) == 0)
          return 0;
        v275 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 48);
        if (!*(_DWORD *)v275)
        {
          __break(0xC471u);
          JUMPOUT(0x1944E80E0);
        }
        v46 = *(_QWORD *)(v275 + 8);
        goto LABEL_693;
      case 0x11u:
        v333 = (unsigned __int8 *)a2;
        v334 = a3;
        v335 = v8;
        v337[0] = (WebCore::Node *)&v338;
        v337[1] = (WebCore::Node *)4;
        WebCore::Element::partNames(v8, (uint64_t *)v336);
        v269 = v336[0];
        if (v336[0])
          v270 = (WTF::StringImpl **)((char *)v336[0] + 16);
        else
          v270 = 0;
        if (v336[0])
          v271 = (WTF::StringImpl **)((char *)v336[0] + 8 * *((unsigned int *)v336[0] + 3) + 16);
        else
          v271 = 0;
        if (v270 != v271)
        {
          do
          {
            v272 = *v270;
            if (*v270)
              *(_DWORD *)v272 += 2;
            v332 = v272;
            WebCore::SelectorChecker::checkOne(WebCore::SelectorChecker::CheckingContext &,WebCore::SelectorChecker::LocalContext const&,WebCore::SelectorChecker::MatchType &)const::$_0::operator()<WTF::Vector<WTF::AtomString,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::StringImpl *)&v333, (uint64_t)v337, &v332);
            v273 = v332;
            v332 = 0;
            if (v273)
            {
              if (*(_DWORD *)v273 == 2)
                WTF::StringImpl::destroy(v273, v268);
              else
                *(_DWORD *)v273 -= 2;
            }
            ++v270;
          }
          while (v270 != v271);
          v269 = v336[0];
        }
        v336[0] = 0;
        if (v269)
        {
          if (*((_DWORD *)v269 + 2) == 1)
            WebCore::SpaceSplitStringData::destroy(v269, v268);
          else
            --*((_DWORD *)v269 + 2);
        }
        v293 = *(unsigned int **)(*(_QWORD *)(v9 + 8) + 48);
        if (v293)
        {
          v294 = *v293;
          if ((_DWORD)v294)
          {
            if (HIDWORD(v337[1]))
            {
              v295 = v293 + 2;
              v296 = &v295[2 * v294];
              while (1)
              {
                v297 = v337[0];
                v298 = HIDWORD(v337[1]);
                while (*(_QWORD *)v297 != *v295)
                {
                  v297 = (WebCore::Node *)((char *)v297 + 8);
                  if (!--v298)
                    goto LABEL_748;
                }
                v295 += 2;
                v138 = 1;
                if (v295 == v296)
                  goto LABEL_749;
              }
            }
LABEL_748:
            v138 = 0;
            goto LABEL_749;
          }
        }
        v138 = 1;
LABEL_749:
        WTF::Vector<WTF::String,12ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v337, v268);
LABEL_285:
        result = v138;
        break;
      case 0x13u:
        v263 = a3;
        result = WebCore::Node::assignedSlot((WebCore::Node *)a3[1]);
        if (!result)
          return result;
        v264 = v263[1];
        if ((v264[7] & 0x10) != 0
          && *(_QWORD *)(*((_QWORD *)v264 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
        {
          v309 = **((_QWORD **)v264 + 5);
          if (v309 && (*(_WORD *)(v309 + 28) & 0x80) != 0)
            return 0;
        }
        v265 = **(WebCore::Node ***)(*((_QWORD *)*v263 + 1) + 56);
        *(_OWORD *)v337 = *(_OWORD *)v263;
        *(_QWORD *)&v338 = v263[2];
        LOBYTE(v339) = 0;
        v341 = 0;
        if (*((_BYTE *)v263 + 48))
        {
          v339 = *((_DWORD *)v263 + 8);
          v266 = (WTF::StringImpl *)v263[5];
          if (v266)
            *(_DWORD *)v266 += 2;
          v340 = v266;
          v341 = 1;
        }
        v342 = (uint64_t)v263[7];
        v337[0] = v265;
        *((_QWORD *)&v338 + 1) = v265;
        WORD1(v342) = 1;
        LODWORD(v333) = 0;
        v138 = WebCore::SelectorChecker::matchRecursively(a1, a2, v337, &v333) == 0;
        WebCore::SelectorChecker::LocalContext::~LocalContext((WebCore::SelectorChecker::LocalContext *)v337, v267);
        goto LABEL_285;
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
        v136 = *(_DWORD *)(a2 + 4);
        if (!v136)
          return 1;
        if (((v10 >> 9) - 22) > 3u
          || v136 != dword_1969EEDA0[(char)((v10 >> 9) - 22)]
          || (v10 & 0x100000) == 0)
        {
          return 0;
        }
        v137 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 48);
        if (!*(_DWORD *)v137)
        {
          __break(0xC471u);
          JUMPOUT(0x1944E80C0);
        }
        v46 = *(_QWORD *)(v137 + 8);
        if (v46 == WebCore::starAtomData)
          return 1;
LABEL_693:
        v55 = *(_QWORD *)(a2 + 8);
        return v46 == v55;
      default:
        return result;
    }
  }
  return result;
}

uint64_t WebCore::JSHTMLCollection::getOwnPropertySlotByIndex(WebCore::JSHTMLCollection *this, JSC::JSObject *a2, JSC::JSGlobalObject *a3, uint64_t a4, JSC::PropertySlot *a5)
{
  JSC::VM *v8;
  WebCore::JSDOMGlobalObject *v9;
  WebCore::Element *v10;
  unint64_t v11;
  uint64_t OwnPropertySlotByIndex;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  WebCore::JSHTMLCollection *v40;
  uint64_t v41;
  JSC::Structure *v42;
  uint64_t v43;
  JSC::Structure *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  unsigned int v59;
  BOOL v60;
  int v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unsigned __int16 *v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  JSC::Structure *v77;
  char OwnStaticPropertySlot;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  JSC::VM *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int16 *v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned __int8 *v135;
  int v136;
  int v137;
  uint64_t v138;
  unsigned __int8 *v139;
  unsigned int v140;
  unsigned __int8 *v141;
  uint64_t v142;
  unsigned int v143;
  JSC::VM *v144;
  uint64_t v145;
  char v146;
  int v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int8 *v152;
  uint64_t v153;
  unsigned int v154;
  JSC::VM *v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int hasExceptionsAfterHandlingTraps;
  const WTF::StringImpl *v165;
  const unsigned __int8 *v166;
  unint64_t v167;
  uint64_t v168;
  JSC::Structure *v169;
  unint64_t v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  WebCore::JSHTMLCollection *v175;
  WebCore::JSHTMLCollection *v176;
  uint64_t v177;
  int v178;
  char v179;
  JSC::VM *v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  WTF::StringImpl *v184;
  char v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  v8 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((_DWORD)a3 == -1)
  {
    JSC::Identifier::from();
    if (v171)
    {
      if ((*((_BYTE *)v171 + 16) & 0x20) != 0)
        goto LABEL_83;
      v14 = *((_QWORD *)this + 3);
      *(_DWORD *)v171 += 2;
    }
    else
    {
      v14 = *((_QWORD *)this + 3);
    }
    v184 = v171;
    v17 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v14 + 64))(v14, &v184);
    v18 = v184;
    v184 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v17)
    {
LABEL_83:
      OwnPropertySlotByIndex = JSC::JSObject::getOwnPropertySlotByIndex();
      goto LABEL_84;
    }
    *(_DWORD *)(v17 + 24) += 2;
    v19 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v174 = 0xFFFFFFFF00000000;
    v176 = 0;
    v177 = 0;
    v175 = this;
    v178 = 196608;
    v179 = 0;
    v182 = 0;
    v183 = 0;
    v180 = v19;
    ++*((_DWORD *)v19 + 1);
    v181 = 1;
    v20 = (unint64_t)v171 >> 4;
    if (((unint64_t)v171 >> 4))
    {
      v21 = 16 * (*(_DWORD *)this & 0xFFFFFFFE);
      if ((v20 & ~*(_DWORD *)(v21 + 0x20)) == 0)
      {
        v22 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x58);
        if (v22
          || (v33 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x40)) != 0
          && (*(_BYTE *)(v33 + 5) == 1 || *(_DWORD *)(v33 + 80) >= 2u)
          && (v22 = JSC::Structure::materializePropertyTable((JSC::Structure *)(16 * (*(_DWORD *)this & 0xFFFFFFFE)), v19)) != 0)
        {
          if (*(_DWORD *)(v22 + 24))
          {
            v23 = *(_QWORD *)(v22 + 16);
            v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
            v25 = *(unsigned int *)(v22 + 8);
            v26 = *((_DWORD *)v171 + 4);
            if ((v23 & 1) != 0)
            {
              if ((v26 & 0x20) != 0)
                v26 = *((_DWORD *)v171 + 8);
              v27 = *(_DWORD *)(v22 + 12);
              v28 = (v26 >> 8) & *(_QWORD *)&v27;
              v29 = *(unsigned __int8 *)(v24 + v28);
              if (!*(_BYTE *)(v24 + v28))
                goto LABEL_29;
              v30 = v24 + v25;
              v31 = 1;
              while (1)
              {
                v32 = *(_QWORD *)(v30 + 8 * (v29 - 1));
                if (v171 == (WTF::StringImpl *)(v32 & 0xFFFFFFFFFFFFLL))
                  break;
                v28 = ((_DWORD)v28 + v31) & v27;
                v29 = *(unsigned __int8 *)(v24 + v28);
                ++v31;
                if (!*(_BYTE *)(v24 + v28))
                  goto LABEL_29;
              }
              v72 = (v32 >> 16) & 0xFF00000000 | HIBYTE(v32);
            }
            else
            {
              if ((v26 & 0x20) != 0)
                v26 = *((_DWORD *)v171 + 8);
              v81 = *(_DWORD *)(v22 + 12);
              v82 = v81 & (v26 >> 8);
              v83 = *(_DWORD *)(v24 + 4 * v82);
              if (!v83)
                goto LABEL_29;
              v84 = v24 + 4 * v25;
              v85 = 1;
              while (1)
              {
                v86 = (v83 - 1);
                if (*(WTF::StringImpl **)(v84 + 16 * v86) == v171)
                  break;
                v82 = (v82 + v85) & v81;
                v83 = *(_DWORD *)(v24 + 4 * v82);
                ++v85;
                if (!v83)
                  goto LABEL_29;
              }
              v72 = *(unsigned int *)(v84 + 16 * v86 + 8) | ((unint64_t)*(unsigned __int8 *)(v84 + 16 * v86 + 12) << 32);
            }
            if ((_DWORD)v72 != -1)
            {
              v73 = HIDWORD(v72);
              v74 = (uint64_t *)((char *)this + 8 * (int)v72 + 16);
              if ((int)v72 >= 64)
                v74 = (uint64_t *)(*((_QWORD *)this + 1) + ((uint64_t)(0x3F00000000 - (v72 << 32)) >> 29) - 8);
              v16 = *v74;
              if ((*v74 & 0xFFFE000000000002) == 0)
              {
                v79 = *(unsigned __int8 *)(v16 + 5);
                if (v79 == 6)
                {
                  v87 = *(_DWORD *)(v21 + 16) & 3;
                  v88 = *(_QWORD *)(v16 + 16);
                  if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C))
                  {
                    v172 = *(_QWORD *)(v16 + 8);
                    v173 = v88;
                    LODWORD(v174) = HIDWORD(v72);
                    v176 = this;
                    goto LABEL_204;
                  }
                  v90 = *(_QWORD *)(v16 + 24);
                  v89 = *(_QWORD *)(v16 + 32);
                  v172 = *(_QWORD *)(v16 + 8);
                  v173 = v88;
                  LODWORD(v174) = HIDWORD(v72);
                  v176 = this;
                  goto LABEL_145;
                }
                if (v79 == 5)
                  goto LABEL_126;
              }
              v66 = 0;
              v172 = v16;
              v176 = this;
              goto LABEL_111;
            }
          }
        }
      }
    }
LABEL_29:
    if ((*((_BYTE *)this + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_123;
    if (v171)
    {
      v34 = *((_DWORD *)v171 + 4);
      if ((v34 & 0x20) == 0)
      {
        v35 = (_BYTE *)*((_QWORD *)v171 + 1);
        v36 = *((unsigned int *)v171 + 1);
        if ((v34 & 4) != 0)
        {
          if (!(_DWORD)v36)
            goto LABEL_35;
          v37 = *v35 - 48;
          if (v37 > 9 || v36 >= 2 && *v35 == 48)
            goto LABEL_35;
          v138 = v36 - 1;
          v139 = v35 + 1;
          while (v138)
          {
            if (v37 <= 0x19999999)
            {
              v140 = *v139 - 48;
              if (v140 <= 9)
              {
                v60 = __CFADD__(v140, 10 * v37);
                v37 = v140 + 10 * v37;
                --v138;
                ++v139;
                if (!v60)
                  continue;
              }
            }
            goto LABEL_35;
          }
        }
        else
        {
          if (!(_DWORD)v36)
            goto LABEL_35;
          v37 = *(unsigned __int16 *)v35 - 48;
          if (v37 > 9 || v36 >= 2 && *(_WORD *)v35 == 48)
            goto LABEL_35;
          v57 = v36 - 1;
          v58 = (unsigned __int16 *)(v35 + 2);
          while (v57)
          {
            if (v37 <= 0x19999999)
            {
              v59 = *v58 - 48;
              if (v59 <= 9)
              {
                v60 = __CFADD__(v59, 10 * v37);
                v37 = v59 + 10 * v37;
                --v57;
                ++v58;
                if (!v60)
                  continue;
              }
            }
            goto LABEL_35;
          }
        }
        if (v37 != -1 && (JSC::JSObject::getOwnPropertySlotByIndex() & 1) != 0)
          goto LABEL_123;
      }
    }
LABEL_35:
    v38 = *(_QWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x30);
    if (!v38)
      v38 = *((_QWORD *)this + 2);
    if ((v38 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v38 + 5) < 0x17u)
      goto LABEL_75;
    v39 = (_BYTE *)(v38 + 6);
    if ((*(_BYTE *)(v38 + 6) & 8) == 0)
    {
      v170 = *((_QWORD *)a2 + 7);
      v40 = (WebCore::JSHTMLCollection *)v38;
      while (1)
      {
        v41 = *(_DWORD *)v40 & 0xFFFFFFFE;
        v42 = (JSC::Structure *)(16 * v41);
        if (!(_DWORD)v20 || (v20 & ~*(_DWORD *)(16 * v41 + 0x20)) != 0)
          goto LABEL_54;
        v43 = *(_QWORD *)(16 * v41 + 0x58);
        if (!v43)
        {
          v55 = *(_QWORD *)(16 * v41 + 0x40);
          if (!v55 || *(_BYTE *)(v55 + 5) != 1 && *(_DWORD *)(v55 + 80) < 2u)
            goto LABEL_54;
          v169 = v42;
          v43 = JSC::Structure::materializePropertyTable(v42, (JSC::VM *)v170);
          v42 = v169;
          if (!v43)
            goto LABEL_54;
        }
        if (!*(_DWORD *)(v43 + 24))
          goto LABEL_54;
        v44 = v42;
        v45 = *(_QWORD *)(v43 + 16);
        v46 = v45 & 0xFFFFFFFFFFFFFFFELL;
        v47 = *(unsigned int *)(v43 + 8);
        v48 = *((_DWORD *)v171 + 4);
        if ((v45 & 1) != 0)
        {
          if ((v48 & 0x20) != 0)
            v48 = *((_DWORD *)v171 + 8);
          v49 = *(_DWORD *)(v43 + 12);
          v50 = (v48 >> 8) & *(_QWORD *)&v49;
          v51 = *(unsigned __int8 *)(v46 + v50);
          v42 = v44;
          if (!*(_BYTE *)(v46 + v50))
            goto LABEL_54;
          v52 = v46 + v47;
          v53 = 1;
          while (1)
          {
            v54 = *(_QWORD *)(v52 + 8 * (v51 - 1));
            if (v171 == (WTF::StringImpl *)(v54 & 0xFFFFFFFFFFFFLL))
              break;
            v50 = ((_DWORD)v50 + v53) & v49;
            v51 = *(unsigned __int8 *)(v46 + v50);
            ++v53;
            v42 = v44;
            if (!*(_BYTE *)(v46 + v50))
              goto LABEL_54;
          }
          v72 = (v54 >> 16) & 0xFF00000000 | HIBYTE(v54);
        }
        else
        {
          if ((v48 & 0x20) != 0)
            v48 = *((_DWORD *)v171 + 8);
          v91 = *(_DWORD *)(v43 + 12);
          v92 = v91 & (v48 >> 8);
          v93 = *(_DWORD *)(v46 + 4 * v92);
          v42 = v44;
          if (!v93)
            goto LABEL_54;
          v94 = v46 + 4 * v47;
          v95 = 1;
          while (*(WTF::StringImpl **)(v94 + 16 * (v93 - 1)) != v171)
          {
            v92 = (v92 + v95) & v91;
            v93 = *(_DWORD *)(v46 + 4 * v92);
            ++v95;
            v42 = v44;
            if (!v93)
              goto LABEL_54;
          }
          v72 = *(unsigned int *)(v94 + 16 * (v93 - 1) + 8) | ((unint64_t)*(unsigned __int8 *)(v94 + 16 * (v93 - 1) + 12) << 32);
        }
        v42 = v44;
        if ((_DWORD)v72 != -1)
        {
          v73 = HIDWORD(v72);
          if ((int)v72 > 63)
          {
            v75 = *((_QWORD *)v40 + 1) - 8;
            v76 = 0x3F00000000 - (v72 << 32);
          }
          else
          {
            v75 = (uint64_t)v40 + 16;
            v76 = v72 << 32;
          }
          v16 = *(_QWORD *)(v75 + (v76 >> 29));
          if ((v16 & 0xFFFE000000000002) != 0)
            goto LABEL_117;
          v80 = *(unsigned __int8 *)(v16 + 5);
          if (v80 != 6)
          {
            if (v80 == 5)
              goto LABEL_126;
LABEL_117:
            v66 = 0;
            v172 = v16;
            v176 = v40;
            goto LABEL_111;
          }
          v87 = *((_DWORD *)v44 + 4) & 3;
          v96 = *(_QWORD *)(v16 + 16);
          if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C))
          {
            v172 = *(_QWORD *)(v16 + 8);
            v173 = v96;
            LODWORD(v174) = HIDWORD(v72);
            v176 = v40;
            goto LABEL_204;
          }
          v90 = *(_QWORD *)(v16 + 24);
          v89 = *(_QWORD *)(v16 + 32);
          v172 = *(_QWORD *)(v16 + 8);
          v173 = v96;
          LODWORD(v174) = HIDWORD(v72);
          v176 = v40;
LABEL_145:
          BYTE1(v178) = 3;
          v66 = 0;
          v65 = 1;
          if (v87 != 2)
            LOBYTE(v178) = 1;
          HIBYTE(v178) = 1;
          v182 = v90;
          v183 = v89;
          goto LABEL_76;
        }
LABEL_54:
        if ((*v39 & 0x20) != 0)
        {
          v77 = v42;
          OwnStaticPropertySlot = JSC::JSObject::getOwnStaticPropertySlot();
          v42 = v77;
          if ((OwnStaticPropertySlot & 1) != 0)
            goto LABEL_123;
        }
        v56 = *((_QWORD *)v42 + 6);
        if (!v56)
          v56 = *((_QWORD *)v40 + 2);
        if ((v56 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v56 + 5) < 0x17u)
        {
          if (!v171)
            goto LABEL_75;
          v61 = *((_DWORD *)v171 + 4);
          if ((v61 & 0x20) != 0)
            goto LABEL_75;
          v62 = (_BYTE *)*((_QWORD *)v171 + 1);
          v63 = *((unsigned int *)v171 + 1);
          if ((v61 & 4) != 0)
          {
            if (!(_DWORD)v63)
              goto LABEL_75;
            v64 = *v62 - 48;
            if (v64 > 9 || v63 >= 2 && *v62 == 48)
              goto LABEL_75;
            v141 = v62 + 1;
            v142 = v63 - 1;
            while (v142)
            {
              if (v64 <= 0x19999999)
              {
                v143 = *v141 - 48;
                if (v143 <= 9)
                {
                  v60 = __CFADD__(v143, 10 * v64);
                  v64 = v143 + 10 * (_DWORD)v64;
                  ++v141;
                  --v142;
                  if (!v60)
                    continue;
                }
              }
              goto LABEL_75;
            }
          }
          else
          {
            if (!(_DWORD)v63)
              goto LABEL_75;
            v64 = *(unsigned __int16 *)v62 - 48;
            if (v64 > 9 || v63 >= 2 && *(_WORD *)v62 == 48)
              goto LABEL_75;
            v69 = (unsigned __int16 *)(v62 + 2);
            v70 = v63 - 1;
            while (v70)
            {
              if (v64 <= 0x19999999)
              {
                v71 = *v69 - 48;
                if (v71 <= 9)
                {
                  v60 = __CFADD__(v71, 10 * v64);
                  v64 = v71 + 10 * (_DWORD)v64;
                  ++v69;
                  --v70;
                  if (!v60)
                    continue;
                }
              }
              goto LABEL_75;
            }
          }
          if ((_DWORD)v64 == -1)
          {
LABEL_75:
            v65 = 0;
            v66 = v17;
            v17 = 0;
            goto LABEL_76;
          }
          v144 = (JSC::VM *)*((_QWORD *)a2 + 7);
          while (2)
          {
            v145 = 16 * (*(_DWORD *)v38 & 0xFFFFFFFE);
            v146 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, uint64_t, uint64_t *))(16
                                                                                           * *(unsigned int *)(v145 + 0x4C)
                                                                                           + 0x70))(v38, a2, v64, &v172);
            if (*((_DWORD *)v144 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v144) & 1) != 0)
              goto LABEL_75;
            if ((v146 & 1) != 0)
              goto LABEL_123;
            v147 = BYTE2(v178);
            if (BYTE2(v178) == 3)
            {
              if (v179)
                goto LABEL_75;
              v148 = *(unsigned __int8 *)(v38 + 5);
              if (v148 == 61)
              {
LABEL_295:
                v150 = *(_QWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x30);
                if (!v150)
                  v150 = *(_QWORD *)(v38 + 16);
                goto LABEL_297;
              }
LABEL_288:
              if ((v148 - 39) <= 0xA)
              {
                if ((*(_BYTE *)(v38 + 40) & 7u) > 2)
                {
                  LOBYTE(v184) = 0;
                  v185 = 0;
                  v163 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v38, (WTF *)&v184);
                  if ((_BYTE)v15)
                    v149 = v163;
                  else
                    v149 = 0;
                }
                else
                {
                  v149 = *(_QWORD *)(v38 + 24);
                }
                if (v149 <= v64)
                  goto LABEL_75;
                v147 = BYTE2(v178);
              }
            }
            else
            {
              v148 = *(unsigned __int8 *)(v38 + 5);
              if (v148 != 61)
                goto LABEL_288;
              if (BYTE2(v178) == 1)
                goto LABEL_75;
            }
            if ((*(_WORD *)(v145 + 12) & 0x800) == 0 || v147 == 3)
              goto LABEL_295;
            if ((*(_WORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
            {
              v150 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v38 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0xB0))(v38, a2);
            }
            else
            {
              v150 = *(_QWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x30);
              if (!v150)
                v150 = *(_QWORD *)(v38 + 16);
            }
            if (*((_DWORD *)v144 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v144) & 1) != 0)
              goto LABEL_75;
LABEL_297:
            if ((v150 & 0xFFFE000000000002) != 0)
              goto LABEL_75;
            v38 = v150;
            if (*(unsigned __int8 *)(v150 + 5) <= 0x16u)
              goto LABEL_75;
            continue;
          }
        }
        v39 = (_BYTE *)(v56 + 6);
        v168 = v56;
        v40 = (WebCore::JSHTMLCollection *)v56;
        if ((*(_BYTE *)(v56 + 6) & 8) != 0)
          goto LABEL_169;
      }
    }
    v168 = v38;
LABEL_169:
    if (v171)
    {
      v97 = *((_DWORD *)v171 + 4);
      if ((v97 & 0x20) == 0)
      {
        v98 = (_BYTE *)*((_QWORD *)v171 + 1);
        v99 = *((unsigned int *)v171 + 1);
        if ((v97 & 4) != 0)
        {
          if ((_DWORD)v99)
          {
            v100 = *v98 - 48;
            if (v100 <= 9 && (v99 < 2 || *v98 != 48))
            {
              v152 = v98 + 1;
              v153 = v99 - 1;
              while (v153)
              {
                if (v100 <= 0x19999999)
                {
                  v154 = *v152 - 48;
                  if (v154 <= 9)
                  {
                    v60 = __CFADD__(v154, 10 * v100);
                    v100 = v154 + 10 * (_DWORD)v100;
                    ++v152;
                    --v153;
                    if (!v60)
                      continue;
                  }
                }
                goto LABEL_174;
              }
LABEL_320:
              if ((_DWORD)v100 != -1)
              {
                v155 = (JSC::VM *)*((_QWORD *)a2 + 7);
                while (1)
                {
                  v156 = 16 * (*(_DWORD *)v38 & 0xFFFFFFFE);
                  v157 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, uint64_t, uint64_t *))(16
                                                                                                 * *(unsigned int *)(v156 + 0x4C)
                                                                                                 + 0x70))(v38, a2, v100, &v172);
                  v158 = v157;
                  if (*((_DWORD *)v155 + 20))
                  {
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v155);
                    if (((hasExceptionsAfterHandlingTraps | v158) & 1) != 0)
                    {
                      if (!hasExceptionsAfterHandlingTraps)
                        goto LABEL_123;
                      goto LABEL_75;
                    }
                  }
                  else if ((v157 & 1) != 0)
                  {
                    goto LABEL_123;
                  }
                  v159 = BYTE2(v178);
                  if (BYTE2(v178) == 3)
                  {
                    if (v179)
                      goto LABEL_75;
                    v160 = *(unsigned __int8 *)(v38 + 5);
                    if (v160 == 61)
                    {
LABEL_338:
                      v162 = *(_QWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x30);
                      if (!v162)
                        v162 = *(_QWORD *)(v38 + 16);
                      goto LABEL_340;
                    }
                  }
                  else
                  {
                    v160 = *(unsigned __int8 *)(v38 + 5);
                    if (v160 == 61)
                    {
                      if (BYTE2(v178) == 1)
                        goto LABEL_75;
                      goto LABEL_336;
                    }
                  }
                  if ((v160 - 39) <= 0xA)
                  {
                    if ((*(_BYTE *)(v38 + 40) & 7u) > 2)
                    {
                      LOBYTE(v184) = 0;
                      v185 = 0;
                      v167 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v38, (WTF *)&v184);
                      if ((_BYTE)v15)
                        v161 = v167;
                      else
                        v161 = 0;
                    }
                    else
                    {
                      v161 = *(_QWORD *)(v38 + 24);
                    }
                    if (v161 <= v100)
                      goto LABEL_75;
                    v159 = BYTE2(v178);
                  }
LABEL_336:
                  if ((*(_WORD *)(v156 + 12) & 0x800) == 0 || v159 == 3)
                    goto LABEL_338;
                  if ((*(_WORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v162 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16
                                                                               * *(unsigned int *)(16
                                                                                                 * (*(_DWORD *)v38 & 0xFFFFFFFE)
                                                                                                 + 0x4C)
                                                                               + 0xB0))(v38, a2);
                  }
                  else
                  {
                    v162 = *(_QWORD *)(16 * (*(_DWORD *)v38 & 0xFFFFFFFE) + 0x30);
                    if (!v162)
                      v162 = *(_QWORD *)(v38 + 16);
                  }
                  if (*((_DWORD *)v155 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v155) & 1) != 0)
                    goto LABEL_75;
LABEL_340:
                  if ((v162 & 0xFFFE000000000002) == 0)
                  {
                    v38 = v162;
                    if (*(unsigned __int8 *)(v162 + 5) > 0x16u)
                      continue;
                  }
                  goto LABEL_75;
                }
              }
            }
          }
        }
        else if ((_DWORD)v99)
        {
          v100 = *(unsigned __int16 *)v98 - 48;
          if (v100 <= 9 && (v99 < 2 || *(_WORD *)v98 != 48))
          {
            v120 = (unsigned __int16 *)(v98 + 2);
            v121 = v99 - 1;
            while (v121)
            {
              if (v100 <= 0x19999999)
              {
                v122 = *v120 - 48;
                if (v122 <= 9)
                {
                  v60 = __CFADD__(v122, 10 * v100);
                  v100 = v122 + 10 * (_DWORD)v100;
                  ++v120;
                  --v121;
                  if (!v60)
                    continue;
                }
              }
              goto LABEL_174;
            }
            goto LABEL_320;
          }
        }
      }
    }
LABEL_174:
    v101 = (JSC::VM *)*((_QWORD *)a2 + 7);
    while (1)
    {
      v102 = *(_DWORD *)v168 & 0xFFFFFFFE;
      v103 = 16 * v102;
      if ((*(_BYTE *)(v168 + 6) & 8) != 0)
      {
        v131 = (*(uint64_t (**)(uint64_t, JSC::JSObject *, WTF::StringImpl *, uint64_t *))(16
                                                                                                 * *(unsigned int *)(16 * v102 + 0x4C)
                                                                                                 + 0x68))(v168, a2, v171, &v172);
        if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
          goto LABEL_75;
        if ((v131 & 1) != 0)
          goto LABEL_123;
        if (BYTE2(v178) == 3)
        {
          if (v179)
            goto LABEL_75;
          v132 = *(unsigned __int8 *)(v168 + 5);
          if (v132 == 61)
            goto LABEL_190;
        }
        else
        {
          v132 = *(unsigned __int8 *)(v168 + 5);
          if (v132 == 61)
          {
            if (BYTE2(v178) == 1)
              goto LABEL_75;
            goto LABEL_190;
          }
        }
        if (!v171)
          goto LABEL_190;
        if ((v132 - 50) < 0xFFFFFFF5)
          goto LABEL_190;
        v133 = *((_DWORD *)v171 + 4);
        if ((v133 & 0x20) != 0)
          goto LABEL_190;
        v134 = *((unsigned int *)v171 + 1);
        if (!(_DWORD)v134)
          goto LABEL_190;
        v135 = (unsigned __int8 *)*((_QWORD *)v171 + 1);
        if ((v133 & 4) != 0)
        {
          v136 = *v135;
          if ((_DWORD)v134 == 1)
          {
LABEL_363:
            if ((v136 - 48) < 0xA)
              goto LABEL_75;
            goto LABEL_190;
          }
          if (v136 == 45)
          {
            v137 = v135[1];
            goto LABEL_373;
          }
        }
        else
        {
          v136 = *(unsigned __int16 *)v135;
          if ((_DWORD)v134 == 1)
            goto LABEL_363;
          if (v136 == 45)
          {
            v137 = *((unsigned __int16 *)v135 + 1);
LABEL_373:
            if ((v137 - 48) >= 0xA)
            {
              if ((_DWORD)v134 != 9 || v137 != 73)
                goto LABEL_190;
            }
            else if ((_DWORD)v134 == 2)
            {
              goto LABEL_75;
            }
LABEL_377:
            v170 = v170 & 0xFFFFFF0000000000 | v134 | ((unint64_t)((v133 >> 2) & 1) << 32);
            JSC::jsToNumber();
            v165 = (const WTF::StringImpl *)WTF::numberToString();
            if ((WTF::equal(v171, v165, v166) & 1) != 0)
              goto LABEL_75;
            goto LABEL_190;
          }
        }
        if ((v136 - 48) >= 0xA && ((_DWORD)v134 != 8 || v136 != 73) && ((_DWORD)v134 != 3 || v136 != 78))
          goto LABEL_190;
        goto LABEL_377;
      }
      if ((_DWORD)v20 && (v20 & ~*(_DWORD *)(16 * v102 + 0x20)) == 0)
      {
        v104 = *(_QWORD *)(16 * v102 + 0x58);
        if (v104
          || (v115 = *(_QWORD *)(16 * v102 + 0x40)) != 0
          && (*(_BYTE *)(v115 + 5) == 1 || *(_DWORD *)(v115 + 80) >= 2u)
          && (v104 = JSC::Structure::materializePropertyTable((JSC::Structure *)v103, v101)) != 0)
        {
          if (*(_DWORD *)(v104 + 24))
          {
            v105 = *(_QWORD *)(v104 + 16);
            v106 = v105 & 0xFFFFFFFFFFFFFFFELL;
            v107 = *(unsigned int *)(v104 + 8);
            v108 = *((_DWORD *)v171 + 4);
            if ((v105 & 1) != 0)
            {
              if ((v108 & 0x20) != 0)
                v108 = *((_DWORD *)v171 + 8);
              v109 = *(_DWORD *)(v104 + 12);
              v110 = (v108 >> 8) & *(_QWORD *)&v109;
              v111 = *(unsigned __int8 *)(v106 + v110);
              if (*(_BYTE *)(v106 + v110))
              {
                v112 = v106 + v107;
                v113 = 1;
                while (1)
                {
                  v114 = *(_QWORD *)(v112 + 8 * (v111 - 1));
                  if (v171 == (WTF::StringImpl *)(v114 & 0xFFFFFFFFFFFFLL))
                    break;
                  v110 = ((_DWORD)v110 + v113) & v109;
                  v111 = *(unsigned __int8 *)(v106 + v110);
                  ++v113;
                  if (!*(_BYTE *)(v106 + v110))
                    goto LABEL_189;
                }
                v72 = (v114 >> 16) & 0xFF00000000 | HIBYTE(v114);
                goto LABEL_198;
              }
            }
            else
            {
              if ((v108 & 0x20) != 0)
                v108 = *((_DWORD *)v171 + 8);
              v124 = *(_DWORD *)(v104 + 12);
              v125 = v124 & (v108 >> 8);
              v126 = *(_DWORD *)(v106 + 4 * v125);
              if (v126)
              {
                v127 = v106 + 4 * v107;
                v128 = 1;
                while (1)
                {
                  v129 = (v126 - 1);
                  if (*(WTF::StringImpl **)(v127 + 16 * v129) == v171)
                    break;
                  v125 = (v125 + v128) & v124;
                  v126 = *(_DWORD *)(v106 + 4 * v125);
                  ++v128;
                  if (!v126)
                    goto LABEL_189;
                }
                v72 = *(unsigned int *)(v127 + 16 * v129 + 8) | ((unint64_t)*(unsigned __int8 *)(v127 + 16 * v129 + 12) << 32);
LABEL_198:
                if ((_DWORD)v72 != -1)
                {
                  v73 = HIDWORD(v72);
                  if ((int)v72 > 63)
                  {
                    v118 = *(_QWORD *)(v168 + 8) - 8;
                    v119 = 0x3F00000000 - (v72 << 32);
                  }
                  else
                  {
                    v118 = v168 + 16;
                    v119 = v72 << 32;
                  }
                  v16 = *(_QWORD *)(v118 + (v119 >> 29));
                  if ((v16 & 0xFFFE000000000002) != 0)
                  {
LABEL_202:
                    v66 = 0;
                    v172 = v16;
                    v176 = (WebCore::JSHTMLCollection *)v168;
LABEL_111:
                    v174 = __PAIR64__(v72, v73);
                    v65 = 1;
                    LOWORD(v178) = 257;
LABEL_76:
                    if (v181)
                    {
                      v67 = *((_DWORD *)v180 + 1);
                      if (!v67)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1944E8AA8);
                      }
                      *((_DWORD *)v180 + 1) = v67 - 1;
                    }
                    if (v17)
                    {
                      if (*(_DWORD *)(v17 + 24) == 2)
                      {
                        if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v17, v15);
                      }
                      else
                      {
                        *(_DWORD *)(v17 + 24) -= 2;
                      }
                    }
                    if ((v65 & 1) != 0)
                      goto LABEL_83;
                    if (v66)
                      v68 = WebCore::toJS(a2, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), (WebCore::JSDOMGlobalObject *)v66, (WebCore::Element *)v16);
                    else
                      v68 = 2;
                    if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
                    {
                      OwnPropertySlotByIndex = 0;
                    }
                    else
                    {
                      *(_QWORD *)a4 = v68;
                      *(_DWORD *)(a4 + 16) = 6;
                      *(_QWORD *)(a4 + 32) = this;
                      OwnPropertySlotByIndex = 1;
                      *(_BYTE *)(a4 + 49) = 1;
                    }
                    if (v66)
                    {
                      if (*(_DWORD *)(v66 + 24) == 2)
                      {
                        if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v66, v15);
                      }
                      else
                      {
                        *(_DWORD *)(v66 + 24) -= 2;
                      }
                    }
LABEL_84:
                    if (v171)
                    {
                      if (*(_DWORD *)v171 == 2)
                        WTF::StringImpl::destroy(v171, v15);
                      else
                        *(_DWORD *)v171 -= 2;
                    }
                    return OwnPropertySlotByIndex;
                  }
                  v123 = *(unsigned __int8 *)(v16 + 5);
                  if (v123 != 6)
                  {
                    if (v123 != 5)
                      goto LABEL_202;
LABEL_126:
                    JSC::JSObject::fillGetterPropertySlot();
LABEL_123:
                    v66 = 0;
                    v65 = 1;
                    goto LABEL_76;
                  }
                  v87 = *(_DWORD *)(v103 + 16) & 3;
                  v130 = *(_QWORD *)(v16 + 16);
                  if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v16 & 0xFFFFFFFE) + 0x4C))
                  {
                    v90 = *(_QWORD *)(v16 + 24);
                    v89 = *(_QWORD *)(v16 + 32);
                    v172 = *(_QWORD *)(v16 + 8);
                    v173 = v130;
                    LODWORD(v174) = HIDWORD(v72);
                    v176 = (WebCore::JSHTMLCollection *)v168;
                    goto LABEL_145;
                  }
                  v172 = *(_QWORD *)(v16 + 8);
                  v173 = v130;
                  LODWORD(v174) = HIDWORD(v72);
                  v176 = (WebCore::JSHTMLCollection *)v168;
LABEL_204:
                  v65 = 1;
                  BYTE1(v178) = 3;
                  v66 = 0;
                  if (v87 != 2)
                    LOBYTE(v178) = 1;
                  goto LABEL_76;
                }
              }
            }
          }
        }
      }
LABEL_189:
      if ((*(_BYTE *)(v168 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_123;
LABEL_190:
      if ((*(_WORD *)(v103 + 12) & 0x800) == 0)
      {
        v116 = *(_DWORD *)v168;
LABEL_192:
        v117 = *(_QWORD *)(16 * (v116 & 0xFFFFFFFE) + 0x30);
        if (!v117)
          v117 = *(_QWORD *)(v168 + 16);
        goto LABEL_194;
      }
      v116 = *(_DWORD *)v168;
      if (BYTE2(v178) == 3)
        goto LABEL_192;
      v151 = 16 * (v116 & 0xFFFFFFFE);
      if ((*(_WORD *)(v151 + 12) & 0x800) != 0)
      {
        v117 = (*(uint64_t (**)(uint64_t, JSC::JSObject *))(16 * *(unsigned int *)(v151 + 76) + 0xB0))(v168, a2);
      }
      else
      {
        v117 = *(_QWORD *)(v151 + 48);
        if (!v117)
          v117 = *(_QWORD *)(v168 + 16);
      }
      if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
        goto LABEL_75;
LABEL_194:
      if ((v117 & 0xFFFE000000000002) == 0)
      {
        v168 = v117;
        if (*(unsigned __int8 *)(v117 + 5) > 0x16u)
          continue;
      }
      goto LABEL_75;
    }
  }
  v9 = (WebCore::JSDOMGlobalObject *)(*(uint64_t (**)(_QWORD, JSC::JSGlobalObject *))(**((_QWORD **)this + 3)
                                                                                              + 24))(*((_QWORD *)this + 3), a3);
  if (v9)
  {
    v11 = WebCore::toJS(a2, *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x28), v9, v10);
    if (*((_DWORD *)v8 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v8) & 1) != 0)
      return 0;
    *(_QWORD *)a4 = v11;
    *(_DWORD *)(a4 + 16) = 2;
    *(_QWORD *)(a4 + 32) = this;
    OwnPropertySlotByIndex = 1;
    *(_BYTE *)(a4 + 49) = 1;
    return OwnPropertySlotByIndex;
  }
  return JSC::JSObject::getOwnPropertySlotByIndex();
}

uint64_t WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::item(uint64_t this, const WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const WTF::StringImpl *v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = this;
  if ((*(_BYTE *)(this + 80) & 1) != 0 && *(_DWORD *)(this + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(this + 80) & 2) != 0)
  {
    if (*(_DWORD *)(this + 76) > a2)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(this + 64) + 8 * a2);
      if (v13)
        return *(_QWORD *)(v13 + 8);
      return 0;
    }
    __break(0xC471u);
  }
  else
  {
    v5 = *(_QWORD *)(this + 48);
    if (!v5)
    {
      if ((*(_BYTE *)(this + 80) & 1) != 0)
      {
        if (*(_DWORD *)(this + 60) - (int)a2 < a2)
        {
          v14 = WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::collectionLast(this, (uint64_t)a2, a3);
          v5 = v15;
          *(_QWORD *)(v4 + 40) = v14;
          *(_QWORD *)(v4 + 48) = v15;
          v16 = *(_DWORD *)(v4 + 60);
          if (v16 - 1 > a2)
          {
            WebCore::CachedHTMLCollection<WebCore::HTMLTagCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseBackward((WTF **)v4, (uint64_t *)(v4 + 40), (const WTF::StringImpl *)(v16 + ~(_DWORD)a2));
            v5 = *(_QWORD *)(v4 + 48);
          }
          *(_DWORD *)(v4 + 56) = (_DWORD)a2;
          return v5;
        }
      }
      else
      {
        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 40) + 8);
        v7 = v6 + 4 * (((unint64_t)*(unsigned __int16 *)(this + 21) >> 5) & 0xF);
        ++*(_DWORD *)(v7 + 1768);
        if ((*(_BYTE *)(this + 22) & 2) != 0)
        {
          v23 = this;
          WTF::HashTable<WebCore::HTMLCollection *,WebCore::HTMLCollection *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>,WTF::HashTraits<WebCore::HTMLCollection *>>::add((uint64_t *)(v6 + 1760), &v23, (uint64_t)&v22);
        }
      }
      if ((*(_WORD *)(v4 + 21) & 0x200) != 0 && (v21 = *(_QWORD *)(v4 + 24), (*(_BYTE *)(v21 + 22) & 0x18) != 0))
        v8 = *(_QWORD *)(v21 + 40);
      else
        v8 = v4 + 24;
      v9 = *(_QWORD *)v8;
      v10 = *(_QWORD *)(*(_QWORD *)v8 + 80);
      if (v10)
      {
        v5 = 0;
        while ((*(_WORD *)(v10 + 28) & 8) == 0)
        {
          v10 = *(_QWORD *)(v10 + 56);
          if (!v10)
            goto LABEL_11;
        }
        v5 = v10;
        if ((WebCore::HTMLTagCollection::elementMatches((WTF **)v4, (WebCore::Element *)v10, a3) & 1) != 0)
        {
LABEL_11:
          *(_DWORD *)(v4 + 56) = 0;
          *(_QWORD *)(v4 + 40) = v9;
          *(_QWORD *)(v4 + 48) = v5;
          if ((_DWORD)a2)
          {
            if (v5)
            {
              WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::traverseForward<WebCore::HTMLTagCollection>((WTF **)v4, (_QWORD *)(v4 + 40), a2, (unsigned int *)(v4 + 56));
              v5 = *(_QWORD *)(v4 + 48);
              if (v5)
                return v5;
              v11 = *(_DWORD *)(v4 + 56) + 1;
              goto LABEL_14;
            }
          }
          else if (v5)
          {
            return v5;
          }
          v11 = 0;
LABEL_14:
          v5 = 0;
          *(_DWORD *)(v4 + 60) = v11;
          *(_BYTE *)(v4 + 80) |= 1u;
          return v5;
        }
        while (1)
        {
          v18 = *(_QWORD *)(v5 + 80);
          if (!v18)
          {
            if (v5 == v9)
              goto LABEL_10;
            while (1)
            {
              v18 = *(_QWORD *)(v5 + 56);
              if (v18)
                break;
              v5 = *(_QWORD *)(v5 + 32);
              if (v5)
                v20 = v5 == v9;
              else
                v20 = 1;
              if (v20)
                goto LABEL_10;
            }
          }
          if ((*(_WORD *)(v18 + 28) & 8) == 0)
            break;
          v5 = v18;
LABEL_51:
          if ((WebCore::HTMLTagCollection::elementMatches((WTF **)v4, (WebCore::Element *)v5, v17) & 1) != 0)
            goto LABEL_11;
        }
        while (v18 != v9)
        {
          while (1)
          {
            v5 = *(_QWORD *)(v18 + 56);
            if (v5)
              break;
            v18 = *(_QWORD *)(v18 + 32);
            if (v18)
              v19 = v18 == v9;
            else
              v19 = 1;
            if (v19)
              goto LABEL_10;
          }
          v18 = *(_QWORD *)(v18 + 56);
          if ((*(_WORD *)(v5 + 28) & 8) != 0)
            goto LABEL_51;
        }
      }
LABEL_10:
      v5 = 0;
      goto LABEL_11;
    }
    v12 = *(_DWORD *)(this + 56);
    if (v12 < a2)
    {
      return WebCore::CollectionIndexCache<WebCore::HTMLTagCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo((uint64_t *)(this + 40), (WebCore::HTMLTagCollection *)this, a2);
    }
    else
    {
      if (v12 <= a2)
        return v5;
      return WebCore::CollectionIndexCache<WebCore::HTMLTagCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseBackwardTo((uint64_t *)(this + 40), (WebCore::HTMLTagCollection *)this, a2);
    }
  }
  return this;
}

uint64_t WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::item(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = result;
  v4 = *(_BYTE *)(result + 80);
  if ((v4 & 1) != 0 && *(_DWORD *)(result + 60) <= a2)
    return 0;
  if ((*(_BYTE *)(result + 80) & 2) != 0)
  {
    if (*(_DWORD *)(result + 76) <= a2)
    {
      __break(0xC471u);
      return result;
    }
    v5 = *(_QWORD *)(*(_QWORD *)(result + 64) + 8 * a2);
    if (v5)
      return *(_QWORD *)(v5 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 48);
  if (result)
  {
    v6 = *(_DWORD *)(v3 + 56);
    if (v6 < a2)
      return WebCore::CollectionIndexCache<WebCore::ClassCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseForwardTo((uint64_t *)(v3 + 40), v3, a2);
    if (v6 > a2)
      return WebCore::CollectionIndexCache<WebCore::ClassCollection,WebCore::ElementDescendantIterator<WebCore::Element>>::traverseBackwardTo((uint64_t *)(v3 + 40), v3, a2);
    return result;
  }
  if ((v4 & 1) == 0)
  {
    WebCore::Document::registerCollection(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 40) + 8), (WebCore::HTMLCollection *)v3);
    goto LABEL_14;
  }
  if (*(_DWORD *)(v3 + 60) - a2 >= a2)
  {
LABEL_14:
    v8 = WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionBegin(v3);
    result = v7;
    *(_DWORD *)(v3 + 56) = 0;
    *(_QWORD *)(v3 + 40) = v8;
    *(_QWORD *)(v3 + 48) = v7;
    if (a2)
    {
      if (v7)
      {
        WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseForward(v3, (_QWORD *)(v3 + 40), a2, (unsigned int *)(v3 + 56));
        result = *(_QWORD *)(v3 + 48);
        if (result)
          return result;
        v9 = *(_DWORD *)(v3 + 56) + 1;
LABEL_26:
        result = 0;
        *(_DWORD *)(v3 + 60) = v9;
        *(_BYTE *)(v3 + 80) |= 1u;
        return result;
      }
    }
    else if (v7)
    {
      return result;
    }
    v9 = 0;
    goto LABEL_26;
  }
  v10 = WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionLast(v3);
  result = v11;
  *(_QWORD *)(v3 + 40) = v10;
  *(_QWORD *)(v3 + 48) = v11;
  v12 = *(_DWORD *)(v3 + 60);
  if (v12 - 1 > a2)
  {
    WebCore::CachedHTMLCollection<WebCore::ClassCollection,(WebCore::CollectionTraversalType)0>::collectionTraverseBackward(v3, (uint64_t *)(v3 + 40), v12 + ~a2);
    result = *(_QWORD *)(v3 + 48);
  }
  *(_DWORD *)(v3 + 56) = a2;
  return result;
}

uint64_t WebCore::HTMLMetaElement::process(uint64_t this, const WTF::AtomString *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const WTF::AtomString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  WebCore::Document *v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  WTF *v63;
  void *v64;
  uint64_t v65;

  if ((*(_QWORD *)(this + 16) & 0x18000000000000) != 0x8000000000000)
    return this;
  v3 = this;
  v4 = *(_QWORD *)(this + 104);
  v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  if (!v4)
  {
    v9 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
    goto LABEL_14;
  }
  v6 = *(_DWORD *)(v4 + 4);
  if ((v6 & 1) == 0)
  {
    v7 = v4 + 32;
    LODWORD(v8) = v6 >> 5;
    if (v6 >> 5)
      goto LABEL_5;
LABEL_13:
    v9 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
    goto LABEL_14;
  }
  v7 = *(_QWORD *)(v4 + 40);
  LODWORD(v8) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v8)
    goto LABEL_13;
LABEL_5:
  v8 = v8;
  v9 = (_BOOL8 *)(v7 + 8);
  while (1)
  {
    v10 = *(v9 - 1);
    if (v10 == WebCore::HTMLNames::nameAttr
      || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 24)
      && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::nameAttr + 32))
    {
      break;
    }
    v9 += 2;
    if (!--v8)
    {
      v9 = (_BOOL8 *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_14:
  this = WebCore::isNameColorScheme(*v9);
  if ((this & 1) != 0 || a2 && (this = WebCore::isNameColorScheme((_BOOL8)a2), (_DWORD)this))
  {
    this = (uint64_t)WebCore::Document::metaElementColorSchemeChanged(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
    v4 = *(_QWORD *)(v3 + 104);
  }
  if (!v4)
  {
    v21 = (const WTF::AtomString *)v5;
    if (!*v5)
      return this;
    goto LABEL_43;
  }
  v17 = *(_DWORD *)(v4 + 4);
  LODWORD(v18) = v17 >> 5;
  if ((v17 & 1) != 0)
  {
    v19 = *(_QWORD *)(v4 + 40);
    LODWORD(v20) = *(_DWORD *)(v4 + 52);
    if ((_DWORD)v20)
      goto LABEL_21;
LABEL_30:
    v21 = (const WTF::AtomString *)v5;
    if (!*v5)
      return this;
    goto LABEL_31;
  }
  v19 = v4 + 32;
  LODWORD(v20) = v17 >> 5;
  if (!(_DWORD)v18)
    goto LABEL_30;
LABEL_21:
  v20 = v20;
  v21 = (const WTF::AtomString *)(v19 + 8);
  while (1)
  {
    v22 = *((_QWORD *)v21 - 1);
    if (v22 == WebCore::HTMLNames::contentAttr
      || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 24)
      && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::contentAttr + 32))
    {
      break;
    }
    v21 = (const WTF::AtomString *)((char *)v21 + 16);
    if (!--v20)
    {
      v21 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
  if (!*(_QWORD *)v21)
    return this;
LABEL_31:
  if ((v17 & 1) == 0)
  {
    v23 = v4 + 32;
    if ((_DWORD)v18)
      goto LABEL_33;
LABEL_41:
    v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_42;
  }
  v23 = *(_QWORD *)(v4 + 40);
  LODWORD(v18) = *(_DWORD *)(v4 + 52);
  if (!(_DWORD)v18)
    goto LABEL_41;
LABEL_33:
  v18 = v18;
  v5 = (WTF::StringImpl **)(v23 + 8);
  while (1)
  {
    v24 = (uint64_t)*(v5 - 1);
    if (v24 == WebCore::HTMLNames::http_equivAttr
      || *(_QWORD *)(v24 + 24) == *(_QWORD *)(WebCore::HTMLNames::http_equivAttr + 24)
      && *(_QWORD *)(v24 + 32) == *(_QWORD *)(WebCore::HTMLNames::http_equivAttr + 32))
    {
      break;
    }
    v5 += 2;
    if (!--v18)
    {
      v5 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_42:
  if (!*v5)
    goto LABEL_67;
LABEL_43:
  v25 = *(_QWORD **)(v3 + 40);
  v26 = (WebCore::Document *)v25[1];
  v27 = *((_QWORD *)v26 + 159);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 80);
    if (v28)
    {
      while (1)
      {
        v29 = *(_WORD *)(v28 + 28);
        if ((v29 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v28 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
        {
          break;
        }
        v28 = *(_QWORD *)(v28 + 56);
        if (!v28)
          goto LABEL_65;
      }
      if ((v29 & 0xF000) == 0x9000)
      {
        if (*v25 == v28 && (*(_WORD *)(v3 + 28) & 0xF000) != 0x9000)
        {
          v31 = (*(unsigned __int8 *)(v3 + 22) >> 3) & 1;
          goto LABEL_66;
        }
      }
      else if ((v29 & 4) != 0
             && *(_QWORD *)(v28 + 80)
             && ((*(unsigned __int8 *)(v3 + 22) ^ *(unsigned __int8 *)(v28 + 22)) & 8) == 0)
      {
        v30 = v3;
        do
        {
          v30 = *(_QWORD *)(v30 + 32);
          v31 = v30 != 0;
        }
        while (v30 != v28 && v30 != 0);
        goto LABEL_66;
      }
    }
  }
LABEL_65:
  v31 = 0;
LABEL_66:
  this = (uint64_t)WebCore::Document::processMetaHttpEquiv(v26, v5, v21, v31);
LABEL_67:
  v33 = *v9;
  if (!*v9)
    return this;
  v34 = *(_DWORD *)(v33 + 4);
  if (v34 == 8)
  {
    v41 = *(_QWORD *)(v33 + 8);
    if ((*(_BYTE *)(v33 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v41 & 0xDF) != 0x56
        || (*(_BYTE *)(v41 + 1) & 0xDF) != 0x49
        || (*(_BYTE *)(v41 + 2) & 0xDF) != 0x45
        || (*(_BYTE *)(v41 + 3) & 0xDF) != 0x57
        || (*(_BYTE *)(v41 + 4) & 0xDF) != 0x50
        || (*(_BYTE *)(v41 + 5) & 0xDF) != 0x4F
        || (*(_BYTE *)(v41 + 6) & 0xDF) != 0x52)
      {
        goto LABEL_69;
      }
      v42 = *(unsigned __int8 *)(v41 + 7);
    }
    else
    {
      if ((*(_WORD *)v41 & 0xFFDF) != 0x56
        || (*(_WORD *)(v41 + 2) & 0xFFDF) != 0x49
        || (*(_WORD *)(v41 + 4) & 0xFFDF) != 0x45
        || (*(_WORD *)(v41 + 6) & 0xFFDF) != 0x57
        || (*(_WORD *)(v41 + 8) & 0xFFDF) != 0x50
        || (*(_WORD *)(v41 + 10) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v41 + 12) & 0xFFDF) != 0x52)
      {
        goto LABEL_69;
      }
      v42 = *(unsigned __int16 *)(v41 + 14);
    }
    if ((v42 & 0xFFFFFFDF) == 0x54)
      return WebCore::Document::processViewport(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8), (uint64_t *)v21, 4u);
  }
LABEL_69:
  v35 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
  if (v34 != 20 || (*(_QWORD *)(*(_QWORD *)(v35 + 680) + 672) & 0x4000000000000) == 0)
  {
    if (v34 <= 15)
    {
      if (v34 == 11)
      {
        v43 = *(_QWORD *)(v33 + 8);
        if ((*(_BYTE *)(v33 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v43 & 0xDF) != 0x54
            || (*(_BYTE *)(v43 + 1) & 0xDF) != 0x48
            || (*(_BYTE *)(v43 + 2) & 0xDF) != 0x45
            || (*(_BYTE *)(v43 + 3) & 0xDF) != 0x4D
            || (*(_BYTE *)(v43 + 4) & 0xDF) != 0x45
            || (*(_BYTE *)(v43 + 5) & 0xDF) != 0xD
            || (*(_BYTE *)(v43 + 6) & 0xDF) != 0x43
            || (*(_BYTE *)(v43 + 7) & 0xDF) != 0x4F
            || (*(_BYTE *)(v43 + 8) & 0xDF) != 0x4C
            || (*(_BYTE *)(v43 + 9) & 0xDF) != 0x4F)
          {
            return this;
          }
          v44 = *(unsigned __int8 *)(v43 + 10);
        }
        else
        {
          if ((*(_WORD *)v43 & 0xFFDF) != 0x54
            || (*(_WORD *)(v43 + 2) & 0xFFDF) != 0x48
            || (*(_WORD *)(v43 + 4) & 0xFFDF) != 0x45
            || (*(_WORD *)(v43 + 6) & 0xFFDF) != 0x4D
            || (*(_WORD *)(v43 + 8) & 0xFFDF) != 0x45
            || (*(_WORD *)(v43 + 10) & 0xFFDF) != 0xD
            || (*(_WORD *)(v43 + 12) & 0xFFDF) != 0x43
            || (*(_WORD *)(v43 + 14) & 0xFFDF) != 0x4F
            || (*(_WORD *)(v43 + 16) & 0xFFDF) != 0x4C
            || (*(_WORD *)(v43 + 18) & 0xFFDF) != 0x4F)
          {
            return this;
          }
          v44 = *(unsigned __int16 *)(v43 + 20);
        }
        if ((v44 & 0xFFFFFFDF) == 0x52)
          return (uint64_t)WebCore::Document::metaElementThemeColorChanged(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8), (WebCore::HTMLMetaElement *)v3, v11, v12, v13, v14, v15, v16);
      }
      else
      {
        if (v34 != 8)
          return this;
        v39 = *(_QWORD *)(v33 + 8);
        if ((*(_BYTE *)(v33 + 16) & 4) != 0)
        {
          if ((*(_BYTE *)v39 & 0xDF) != 0x52
            || (*(_BYTE *)(v39 + 1) & 0xDF) != 0x45
            || (*(_BYTE *)(v39 + 2) & 0xDF) != 0x46
            || (*(_BYTE *)(v39 + 3) & 0xDF) != 0x45
            || (*(_BYTE *)(v39 + 4) & 0xDF) != 0x52
            || (*(_BYTE *)(v39 + 5) & 0xDF) != 0x52
            || (*(_BYTE *)(v39 + 6) & 0xDF) != 0x45)
          {
            return this;
          }
          v40 = *(unsigned __int8 *)(v39 + 7);
        }
        else
        {
          if ((*(_WORD *)v39 & 0xFFDF) != 0x52
            || (*(_WORD *)(v39 + 2) & 0xFFDF) != 0x45
            || (*(_WORD *)(v39 + 4) & 0xFFDF) != 0x46
            || (*(_WORD *)(v39 + 6) & 0xFFDF) != 0x45
            || (*(_WORD *)(v39 + 8) & 0xFFDF) != 0x52
            || (*(_WORD *)(v39 + 10) & 0xFFDF) != 0x52
            || (*(_WORD *)(v39 + 12) & 0xFFDF) != 0x45)
          {
            return this;
          }
          v40 = *(unsigned __int16 *)(v39 + 14);
        }
        if ((v40 & 0xFFFFFFDF) == 0x52)
          return WebCore::Document::processReferrerPolicy(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8), (uint64_t *)v21, 0);
      }
    }
    else
    {
      switch(v34)
      {
        case 16:
          v45 = *(_QWORD *)(v33 + 8);
          if ((*(_BYTE *)(v33 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v45 & 0xDF) != 0x46
              || (*(_BYTE *)(v45 + 1) & 0xDF) != 0x4F
              || (*(_BYTE *)(v45 + 2) & 0xDF) != 0x52
              || (*(_BYTE *)(v45 + 3) & 0xDF) != 0x4D
              || (*(_BYTE *)(v45 + 4) & 0xDF) != 0x41
              || (*(_BYTE *)(v45 + 5) & 0xDF) != 0x54
              || (*(_BYTE *)(v45 + 6) & 0xDF) != 0xD
              || (*(_BYTE *)(v45 + 7) & 0xDF) != 0x44
              || (*(_BYTE *)(v45 + 8) & 0xDF) != 0x45
              || (*(_BYTE *)(v45 + 9) & 0xDF) != 0x54
              || (*(_BYTE *)(v45 + 10) & 0xDF) != 0x45
              || (*(_BYTE *)(v45 + 11) & 0xDF) != 0x43
              || (*(_BYTE *)(v45 + 12) & 0xDF) != 0x54
              || (*(_BYTE *)(v45 + 13) & 0xDF) != 0x49
              || (*(_BYTE *)(v45 + 14) & 0xDF) != 0x4F)
            {
              return this;
            }
            v46 = *(unsigned __int8 *)(v45 + 15);
          }
          else
          {
            if ((*(_WORD *)v45 & 0xFFDF) != 0x46
              || (*(_WORD *)(v45 + 2) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v45 + 4) & 0xFFDF) != 0x52
              || (*(_WORD *)(v45 + 6) & 0xFFDF) != 0x4D
              || (*(_WORD *)(v45 + 8) & 0xFFDF) != 0x41
              || (*(_WORD *)(v45 + 10) & 0xFFDF) != 0x54
              || (*(_WORD *)(v45 + 12) & 0xFFDF) != 0xD
              || (*(_WORD *)(v45 + 14) & 0xFFDF) != 0x44
              || (*(_WORD *)(v45 + 16) & 0xFFDF) != 0x45
              || (*(_WORD *)(v45 + 18) & 0xFFDF) != 0x54
              || (*(_WORD *)(v45 + 20) & 0xFFDF) != 0x45
              || (*(_WORD *)(v45 + 22) & 0xFFDF) != 0x43
              || (*(_WORD *)(v45 + 24) & 0xFFDF) != 0x54
              || (*(_WORD *)(v45 + 26) & 0xFFDF) != 0x49
              || (*(_WORD *)(v45 + 28) & 0xFFDF) != 0x4F)
            {
              return this;
            }
            v46 = *(unsigned __int16 *)(v45 + 30);
          }
          if ((v46 & 0xFFFFFFDF) == 0x4E)
          {
            v47 = *(_QWORD *)v21;
            if (*(_QWORD *)v21)
            {
              v48 = *(_QWORD *)(v47 + 8);
              v49 = *(unsigned int *)(v47 + 4);
              v50 = (unint64_t)((*(_DWORD *)(v47 + 16) >> 2) & 1) << 32;
            }
            else
            {
              v48 = 0;
              v49 = 0;
              v50 = 0x100000000;
            }
            v51 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v51 = off_1E33A3728;
            v51[1] = v35;
            v65 = (uint64_t)v51;
            WebCore::processFeaturesString(v48, (const char *)(v50 | v49), 1, &v65);
            this = v65;
            v65 = 0;
            if (this)
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          }
          break;
        case 33:
          v52 = *(_QWORD *)(v33 + 8);
          if ((*(_BYTE *)(v33 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v52 & 0xDF) != 0x41
              || (*(_BYTE *)(v52 + 1) & 0xDF) != 0x50
              || (*(_BYTE *)(v52 + 2) & 0xDF) != 0x50
              || (*(_BYTE *)(v52 + 3) & 0xDF) != 0x4C
              || (*(_BYTE *)(v52 + 4) & 0xDF) != 0x45
              || (*(_BYTE *)(v52 + 5) & 0xDF) != 0xD
              || (*(_BYTE *)(v52 + 6) & 0xDF) != 0x4D
              || (*(_BYTE *)(v52 + 7) & 0xDF) != 0x4F
              || (*(_BYTE *)(v52 + 8) & 0xDF) != 0x42
              || (*(_BYTE *)(v52 + 9) & 0xDF) != 0x49
              || (*(_BYTE *)(v52 + 10) & 0xDF) != 0x4C
              || (*(_BYTE *)(v52 + 11) & 0xDF) != 0x45
              || (*(_BYTE *)(v52 + 12) & 0xDF) != 0xD
              || (*(_BYTE *)(v52 + 13) & 0xDF) != 0x57
              || (*(_BYTE *)(v52 + 14) & 0xDF) != 0x45
              || (*(_BYTE *)(v52 + 15) & 0xDF) != 0x42
              || (*(_BYTE *)(v52 + 16) & 0xDF) != 0xD
              || (*(_BYTE *)(v52 + 17) & 0xDF) != 0x41
              || (*(_BYTE *)(v52 + 18) & 0xDF) != 0x50
              || (*(_BYTE *)(v52 + 19) & 0xDF) != 0x50
              || (*(_BYTE *)(v52 + 20) & 0xDF) != 0xD
              || (*(_BYTE *)(v52 + 21) & 0xDF) != 0x4F
              || (*(_BYTE *)(v52 + 22) & 0xDF) != 0x52
              || (*(_BYTE *)(v52 + 23) & 0xDF) != 0x49
              || (*(_BYTE *)(v52 + 24) & 0xDF) != 0x45
              || (*(_BYTE *)(v52 + 25) & 0xDF) != 0x4E
              || (*(_BYTE *)(v52 + 26) & 0xDF) != 0x54
              || (*(_BYTE *)(v52 + 27) & 0xDF) != 0x41
              || (*(_BYTE *)(v52 + 28) & 0xDF) != 0x54
              || (*(_BYTE *)(v52 + 29) & 0xDF) != 0x49
              || (*(_BYTE *)(v52 + 30) & 0xDF) != 0x4F
              || (*(_BYTE *)(v52 + 31) & 0xDF) != 0x4E)
            {
              return this;
            }
            v53 = *(unsigned __int8 *)(v52 + 32);
          }
          else
          {
            if ((*(_WORD *)v52 & 0xFFDF) != 0x41
              || (*(_WORD *)(v52 + 2) & 0xFFDF) != 0x50
              || (*(_WORD *)(v52 + 4) & 0xFFDF) != 0x50
              || (*(_WORD *)(v52 + 6) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v52 + 8) & 0xFFDF) != 0x45
              || (*(_WORD *)(v52 + 10) & 0xFFDF) != 0xD
              || (*(_WORD *)(v52 + 12) & 0xFFDF) != 0x4D
              || (*(_WORD *)(v52 + 14) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v52 + 16) & 0xFFDF) != 0x42
              || (*(_WORD *)(v52 + 18) & 0xFFDF) != 0x49
              || (*(_WORD *)(v52 + 20) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v52 + 22) & 0xFFDF) != 0x45
              || (*(_WORD *)(v52 + 24) & 0xFFDF) != 0xD
              || (*(_WORD *)(v52 + 26) & 0xFFDF) != 0x57
              || (*(_WORD *)(v52 + 28) & 0xFFDF) != 0x45
              || (*(_WORD *)(v52 + 30) & 0xFFDF) != 0x42
              || (*(_WORD *)(v52 + 32) & 0xFFDF) != 0xD
              || (*(_WORD *)(v52 + 34) & 0xFFDF) != 0x41
              || (*(_WORD *)(v52 + 36) & 0xFFDF) != 0x50
              || (*(_WORD *)(v52 + 38) & 0xFFDF) != 0x50
              || (*(_WORD *)(v52 + 40) & 0xFFDF) != 0xD
              || (*(_WORD *)(v52 + 42) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v52 + 44) & 0xFFDF) != 0x52
              || (*(_WORD *)(v52 + 46) & 0xFFDF) != 0x49
              || (*(_WORD *)(v52 + 48) & 0xFFDF) != 0x45
              || (*(_WORD *)(v52 + 50) & 0xFFDF) != 0x4E
              || (*(_WORD *)(v52 + 52) & 0xFFDF) != 0x54
              || (*(_WORD *)(v52 + 54) & 0xFFDF) != 0x41
              || (*(_WORD *)(v52 + 56) & 0xFFDF) != 0x54
              || (*(_WORD *)(v52 + 58) & 0xFFDF) != 0x49
              || (*(_WORD *)(v52 + 60) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v52 + 62) & 0xFFDF) != 0x4E)
            {
              return this;
            }
            v53 = *(unsigned __int16 *)(v52 + 64);
          }
          if ((v53 & 0xFFFFFFDF) == 0x53)
          {
            v54 = *(_QWORD *)(v35 + 528);
            if (v54)
            {
              v55 = *(_QWORD *)(v54 + 8);
              if (v55)
              {
                v56 = *(_QWORD *)(v55 + 24);
                if (v56)
                {
                  v57 = *(_QWORD *)(v56 + 8);
                  if (v57)
                  {
                    ++*(_DWORD *)v57;
                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v57 + 48) + 16) + 744))(*(_QWORD *)(*(_QWORD *)(v57 + 48) + 16));
                    if (*(_DWORD *)v57 == 1)
                    {
                      WebCore::Page::~Page(v57);
                      return WTF::fastFree(v63, v64);
                    }
                    else
                    {
                      --*(_DWORD *)v57;
                    }
                  }
                }
              }
            }
          }
          break;
        case 23:
          v37 = *(_QWORD *)(v33 + 8);
          if ((*(_BYTE *)(v33 + 16) & 4) != 0)
          {
            if ((*(_BYTE *)v37 & 0xDF) != 0x43
              || (*(_BYTE *)(v37 + 1) & 0xDF) != 0x4F
              || (*(_BYTE *)(v37 + 2) & 0xDF) != 0x4E
              || (*(_BYTE *)(v37 + 3) & 0xDF) != 0x46
              || (*(_BYTE *)(v37 + 4) & 0xDF) != 0x4C
              || (*(_BYTE *)(v37 + 5) & 0xDF) != 0x55
              || (*(_BYTE *)(v37 + 6) & 0xDF) != 0x45
              || (*(_BYTE *)(v37 + 7) & 0xDF) != 0x4E
              || (*(_BYTE *)(v37 + 8) & 0xDF) != 0x43
              || (*(_BYTE *)(v37 + 9) & 0xDF) != 0x45
              || (*(_BYTE *)(v37 + 10) & 0xDF) != 0xD
              || (*(_BYTE *)(v37 + 11) & 0xDF) != 0x52
              || (*(_BYTE *)(v37 + 12) & 0xDF) != 0x45
              || (*(_BYTE *)(v37 + 13) & 0xDF) != 0x51
              || (*(_BYTE *)(v37 + 14) & 0xDF) != 0x55
              || (*(_BYTE *)(v37 + 15) & 0xDF) != 0x45
              || (*(_BYTE *)(v37 + 16) & 0xDF) != 0x53
              || (*(_BYTE *)(v37 + 17) & 0xDF) != 0x54
              || (*(_BYTE *)(v37 + 18) & 0xDF) != 0xD
              || (*(_BYTE *)(v37 + 19) & 0xDF) != 0x54
              || (*(_BYTE *)(v37 + 20) & 0xDF) != 0x49
              || (*(_BYTE *)(v37 + 21) & 0xDF) != 0x4D)
            {
              return this;
            }
            v38 = *(unsigned __int8 *)(v37 + 22);
          }
          else
          {
            if ((*(_WORD *)v37 & 0xFFDF) != 0x43
              || (*(_WORD *)(v37 + 2) & 0xFFDF) != 0x4F
              || (*(_WORD *)(v37 + 4) & 0xFFDF) != 0x4E
              || (*(_WORD *)(v37 + 6) & 0xFFDF) != 0x46
              || (*(_WORD *)(v37 + 8) & 0xFFDF) != 0x4C
              || (*(_WORD *)(v37 + 10) & 0xFFDF) != 0x55
              || (*(_WORD *)(v37 + 12) & 0xFFDF) != 0x45
              || (*(_WORD *)(v37 + 14) & 0xFFDF) != 0x4E
              || (*(_WORD *)(v37 + 16) & 0xFFDF) != 0x43
              || (*(_WORD *)(v37 + 18) & 0xFFDF) != 0x45
              || (*(_WORD *)(v37 + 20) & 0xFFDF) != 0xD
              || (*(_WORD *)(v37 + 22) & 0xFFDF) != 0x52
              || (*(_WORD *)(v37 + 24) & 0xFFDF) != 0x45
              || (*(_WORD *)(v37 + 26) & 0xFFDF) != 0x51
              || (*(_WORD *)(v37 + 28) & 0xFFDF) != 0x55
              || (*(_WORD *)(v37 + 30) & 0xFFDF) != 0x45
              || (*(_WORD *)(v37 + 32) & 0xFFDF) != 0x53
              || (*(_WORD *)(v37 + 34) & 0xFFDF) != 0x54
              || (*(_WORD *)(v37 + 36) & 0xFFDF) != 0xD
              || (*(_WORD *)(v37 + 38) & 0xFFDF) != 0x54
              || (*(_WORD *)(v37 + 40) & 0xFFDF) != 0x49
              || (*(_WORD *)(v37 + 42) & 0xFFDF) != 0x4D)
            {
              return this;
            }
            v38 = *(unsigned __int16 *)(v37 + 44);
          }
          if ((v38 & 0xFFFFFFDF) == 0x45)
          {
            this = *(_QWORD *)(v35 + 688);
            if (!this)
              this = WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v3 + 40) + 8));
            *(_BYTE *)(this + 66) = 1;
          }
          break;
        default:
          return this;
      }
    }
  }
  else
  {
    v58 = *(_QWORD *)(v33 + 8);
    if ((*(_BYTE *)(v33 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v58 & 0xDF) != 0x44
        || (*(_BYTE *)(v58 + 1) & 0xDF) != 0x49
        || (*(_BYTE *)(v58 + 2) & 0xDF) != 0x53
        || (*(_BYTE *)(v58 + 3) & 0xDF) != 0x41
        || (*(_BYTE *)(v58 + 4) & 0xDF) != 0x42
        || (*(_BYTE *)(v58 + 5) & 0xDF) != 0x4C
        || (*(_BYTE *)(v58 + 6) & 0xDF) != 0x45
        || (*(_BYTE *)(v58 + 7) & 0xDF) != 0x44
        || (*(_BYTE *)(v58 + 8) & 0xDF) != 0xD
        || (*(_BYTE *)(v58 + 9) & 0xDF) != 0x41
        || (*(_BYTE *)(v58 + 10) & 0xDF) != 0x44
        || (*(_BYTE *)(v58 + 11) & 0xDF) != 0x41
        || (*(_BYTE *)(v58 + 12) & 0xDF) != 0x50
        || (*(_BYTE *)(v58 + 13) & 0xDF) != 0x54
        || (*(_BYTE *)(v58 + 14) & 0xDF) != 0x41
        || (*(_BYTE *)(v58 + 15) & 0xDF) != 0x54
        || (*(_BYTE *)(v58 + 16) & 0xDF) != 0x49
        || (*(_BYTE *)(v58 + 17) & 0xDF) != 0x4F
        || (*(_BYTE *)(v58 + 18) & 0xDF) != 0x4E)
      {
        return this;
      }
      v59 = *(unsigned __int8 *)(v58 + 19);
    }
    else
    {
      if ((*(_WORD *)v58 & 0xFFDF) != 0x44
        || (*(_WORD *)(v58 + 2) & 0xFFDF) != 0x49
        || (*(_WORD *)(v58 + 4) & 0xFFDF) != 0x53
        || (*(_WORD *)(v58 + 6) & 0xFFDF) != 0x41
        || (*(_WORD *)(v58 + 8) & 0xFFDF) != 0x42
        || (*(_WORD *)(v58 + 10) & 0xFFDF) != 0x4C
        || (*(_WORD *)(v58 + 12) & 0xFFDF) != 0x45
        || (*(_WORD *)(v58 + 14) & 0xFFDF) != 0x44
        || (*(_WORD *)(v58 + 16) & 0xFFDF) != 0xD
        || (*(_WORD *)(v58 + 18) & 0xFFDF) != 0x41
        || (*(_WORD *)(v58 + 20) & 0xFFDF) != 0x44
        || (*(_WORD *)(v58 + 22) & 0xFFDF) != 0x41
        || (*(_WORD *)(v58 + 24) & 0xFFDF) != 0x50
        || (*(_WORD *)(v58 + 26) & 0xFFDF) != 0x54
        || (*(_WORD *)(v58 + 28) & 0xFFDF) != 0x41
        || (*(_WORD *)(v58 + 30) & 0xFFDF) != 0x54
        || (*(_WORD *)(v58 + 32) & 0xFFDF) != 0x49
        || (*(_WORD *)(v58 + 34) & 0xFFDF) != 0x4F
        || (*(_WORD *)(v58 + 36) & 0xFFDF) != 0x4E)
      {
        return this;
      }
      v59 = *(unsigned __int16 *)(v58 + 38);
    }
    if ((v59 & 0xFFFFFFDF) == 0x53)
    {
      v60 = *(_QWORD *)v21;
      if (*(_QWORD *)v21)
      {
        v61 = *(_QWORD *)(v60 + 8);
        v62 = *(unsigned int *)(v60 + 4) | ((unint64_t)((*(_DWORD *)(v60 + 16) >> 2) & 1) << 32);
      }
      else
      {
        v61 = 0;
        v62 = 0x100000000;
      }
      this = WebCore::parseDisabledAdaptations(v61, v62);
      if (*(unsigned __int8 *)(v35 + 3365) != this)
      {
        *(_BYTE *)(v35 + 3365) = this;
        return (uint64_t)WebCore::Document::dispatchDisabledAdaptationsDidChangeForMainFrame((WebCore::Page *)v35);
      }
    }
  }
  return this;
}

BOOL WebCore::isNameColorScheme(_BOOL8 result)
{
  int v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  if (result)
  {
    v1 = *(_DWORD *)(result + 4);
    if (v1 == 12)
    {
      v2 = *(_QWORD *)(result + 8);
      if ((*(_BYTE *)(result + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v2 & 0xDF) != 0x43
          || (*(_BYTE *)(v2 + 1) & 0xDF) != 0x4F
          || (*(_BYTE *)(v2 + 2) & 0xDF) != 0x4C
          || (*(_BYTE *)(v2 + 3) & 0xDF) != 0x4F
          || (*(_BYTE *)(v2 + 4) & 0xDF) != 0x52
          || (*(_BYTE *)(v2 + 5) & 0xDF) != 0xD
          || (*(_BYTE *)(v2 + 6) & 0xDF) != 0x53
          || (*(_BYTE *)(v2 + 7) & 0xDF) != 0x43
          || (*(_BYTE *)(v2 + 8) & 0xDF) != 0x48
          || (*(_BYTE *)(v2 + 9) & 0xDF) != 0x45
          || (*(_BYTE *)(v2 + 10) & 0xDF) != 0x4D)
        {
          return 0;
        }
        v3 = *(unsigned __int8 *)(v2 + 11);
      }
      else
      {
        if ((*(_WORD *)v2 & 0xFFDF) != 0x43
          || (*(_WORD *)(v2 + 2) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v2 + 4) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v2 + 6) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v2 + 8) & 0xFFDF) != 0x52
          || (*(_WORD *)(v2 + 10) & 0xFFDF) != 0xD
          || (*(_WORD *)(v2 + 12) & 0xFFDF) != 0x53
          || (*(_WORD *)(v2 + 14) & 0xFFDF) != 0x43
          || (*(_WORD *)(v2 + 16) & 0xFFDF) != 0x48
          || (*(_WORD *)(v2 + 18) & 0xFFDF) != 0x45
          || (*(_WORD *)(v2 + 20) & 0xFFDF) != 0x4D)
        {
          return 0;
        }
        v3 = *(unsigned __int16 *)(v2 + 22);
      }
      return (v3 & 0xFFFFFFDF) == 0x45;
    }
    else
    {
      if (v1 != 23)
        return 0;
      v4 = *(_QWORD *)(result + 8);
      if ((*(_BYTE *)(result + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v4 & 0xDF) != 0x53
          || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x55
          || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x50
          || (*(_BYTE *)(v4 + 3) & 0xDF) != 0x50
          || (*(_BYTE *)(v4 + 4) & 0xDF) != 0x4F
          || (*(_BYTE *)(v4 + 5) & 0xDF) != 0x52
          || (*(_BYTE *)(v4 + 6) & 0xDF) != 0x54
          || (*(_BYTE *)(v4 + 7) & 0xDF) != 0x45
          || (*(_BYTE *)(v4 + 8) & 0xDF) != 0x44
          || (*(_BYTE *)(v4 + 9) & 0xDF) != 0xD
          || (*(_BYTE *)(v4 + 10) & 0xDF) != 0x43
          || (*(_BYTE *)(v4 + 11) & 0xDF) != 0x4F
          || (*(_BYTE *)(v4 + 12) & 0xDF) != 0x4C
          || (*(_BYTE *)(v4 + 13) & 0xDF) != 0x4F
          || (*(_BYTE *)(v4 + 14) & 0xDF) != 0x52
          || (*(_BYTE *)(v4 + 15) & 0xDF) != 0xD
          || (*(_BYTE *)(v4 + 16) & 0xDF) != 0x53
          || (*(_BYTE *)(v4 + 17) & 0xDF) != 0x43
          || (*(_BYTE *)(v4 + 18) & 0xDF) != 0x48
          || (*(_BYTE *)(v4 + 19) & 0xDF) != 0x45
          || (*(_BYTE *)(v4 + 20) & 0xDF) != 0x4D
          || (*(_BYTE *)(v4 + 21) & 0xDF) != 0x45)
        {
          return 0;
        }
        v5 = *(unsigned __int8 *)(v4 + 22);
      }
      else
      {
        if ((*(_WORD *)v4 & 0xFFDF) != 0x53
          || (*(_WORD *)(v4 + 2) & 0xFFDF) != 0x55
          || (*(_WORD *)(v4 + 4) & 0xFFDF) != 0x50
          || (*(_WORD *)(v4 + 6) & 0xFFDF) != 0x50
          || (*(_WORD *)(v4 + 8) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v4 + 10) & 0xFFDF) != 0x52
          || (*(_WORD *)(v4 + 12) & 0xFFDF) != 0x54
          || (*(_WORD *)(v4 + 14) & 0xFFDF) != 0x45
          || (*(_WORD *)(v4 + 16) & 0xFFDF) != 0x44
          || (*(_WORD *)(v4 + 18) & 0xFFDF) != 0xD
          || (*(_WORD *)(v4 + 20) & 0xFFDF) != 0x43
          || (*(_WORD *)(v4 + 22) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v4 + 24) & 0xFFDF) != 0x4C
          || (*(_WORD *)(v4 + 26) & 0xFFDF) != 0x4F
          || (*(_WORD *)(v4 + 28) & 0xFFDF) != 0x52
          || (*(_WORD *)(v4 + 30) & 0xFFDF) != 0xD
          || (*(_WORD *)(v4 + 32) & 0xFFDF) != 0x53
          || (*(_WORD *)(v4 + 34) & 0xFFDF) != 0x43
          || (*(_WORD *)(v4 + 36) & 0xFFDF) != 0x48
          || (*(_WORD *)(v4 + 38) & 0xFFDF) != 0x45
          || (*(_WORD *)(v4 + 40) & 0xFFDF) != 0x4D
          || (*(_WORD *)(v4 + 42) & 0xFFDF) != 0x45)
        {
          return 0;
        }
        v5 = *(unsigned __int16 *)(v4 + 44);
      }
      return (v5 & 0xFFFFFFDF) == 83;
    }
  }
  return result;
}

uint64_t WebCore::RenderTableCell::borderHalfStart(WebCore::RenderTableCell *this, int a2)
{
  void *v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float v13;
  double v14;
  float v15;
  double v16;
  uint64_t v17;
  WTF *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  char v26;

  WebCore::RenderTableCell::collapsedStartBorder((uint64_t)&v24, (uint64_t)this, 0);
  if ((v26 & 0x70) != 0)
  {
    v5 = 0.0;
    if ((v26 & 0xE) != 0)
      v5 = (float)v24 * 0.015625;
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    v7 = 1.0;
    if (v6)
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = (*(_DWORD *)v10)++;
            v7 = *(float *)(v10 + 364);
            if (v11)
            {
              *(_DWORD *)v10 = v11;
            }
            else
            {
              WebCore::Page::~Page(v10);
              WTF::fastFree(v19, v20);
            }
          }
        }
      }
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (*(_BYTE *)(v12 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944EB380);
    }
    v13 = 1.0 / v7;
    if (((*(_BYTE *)(v12 + 123) & 4) == 0) == a2)
      v13 = 0.0;
    v14 = (float)((float)(v5 + v13) * 0.5) * 64.0;
    if (v14 >= 2147483650.0)
    {
      v15 = 2147500000.0;
    }
    else if (v14 <= -2147483650.0)
    {
      v15 = -2147500000.0;
    }
    else
    {
      v15 = (float)(int)v14;
    }
    v16 = (float)(floorf((float)(v7 * v15) * 0.015625) / v7) * 64.0;
    if (v16 >= 2147483650.0)
    {
      v17 = 0x7FFFFFFFLL;
    }
    else if (v16 <= -2147483650.0)
    {
      v17 = 0x80000000;
    }
    else
    {
      v17 = (int)v16;
    }
  }
  else
  {
    v17 = 0;
  }
  if ((v25 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v4);
    }
  }
  return v17;
}

uint64_t WebCore::RenderTableCell::collapsedStartBorder(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  double v22;
  int v23;
  unint64_t v24;
  unint64_t *v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  void *v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  float *v39;
  float *v40;
  float *v41;
  float *v42;
  float *v43;
  float v44;
  double v45;
  int v46;
  char v47;
  char v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t *v52;
  int v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  _BOOL4 v89;
  uint64_t v90;
  int v91;
  uint64_t *v92;
  float *v93;
  float *v94;
  float *v95;
  float *v96;
  float *v97;
  float v98;
  double v99;
  int v100;
  char v101;
  unsigned int v102;
  char v103;
  char v104;
  char v105;
  unsigned int v106;
  unint64_t *v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  float *v119;
  float *v120;
  float *v121;
  float *v122;
  BOOL v123;
  uint64_t *v124;
  float *v125;
  float v126;
  double v127;
  int v128;
  char v129;
  unsigned int v130;
  char v131;
  char v132;
  char v133;
  unsigned int v134;
  unint64_t *v135;
  int v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  uint64_t *v143;
  float *v144;
  float *v145;
  float *v146;
  float *v147;
  float *v148;
  float v149;
  double v150;
  int v151;
  char v152;
  unsigned int v153;
  char v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t *v158;
  int v159;
  unint64_t v160;
  unint64_t v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  _BOOL4 v165;
  uint64_t v166;
  _BOOL4 v167;
  uint64_t v168;
  _BOOL4 v169;
  uint64_t v170;
  int v171;
  uint64_t *v172;
  float *v173;
  float *v174;
  uint64_t *v175;
  float *v176;
  unsigned int *v177;
  unsigned int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  BOOL v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  BOOL v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  BOOL v201;
  unsigned int *v202;
  unsigned int v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int *v208;
  unsigned int v209;
  uint64_t *v210;
  float *v211;
  float *v212;
  uint64_t *v213;
  float *v214;
  int v215;
  int v216;
  int v217;
  int v218;
  int v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unsigned int v235;
  BOOL v236;
  uint64_t v237;
  uint64_t v238;
  float *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  float *v244;
  uint64_t v245;
  unsigned int v246;
  BOOL v247;
  uint64_t v248;
  float *v249;
  uint64_t v250;
  unsigned int *v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int *v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  float *started;
  float *v317;
  float *v318;
  unsigned int *v319;
  unsigned int *v320;
  unsigned int *v321;
  int v322;
  uint64_t v323;
  char v324;
  unint64_t v325[4];
  BOOL v326[2];
  unint64_t v327;
  unint64_t v328[3];
  unint64_t v329;
  unint64_t v330;
  int v331;
  char v332;

  result = *(_QWORD *)(a2 + 32);
  if (!result)
    goto LABEL_12;
  v5 = *(_QWORD *)(result + 8);
  if (!v5)
    goto LABEL_12;
  if (*(_BYTE *)(v5 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EBF14);
  }
  v6 = *(_QWORD *)(v5 + 32);
  if (!v6)
    goto LABEL_12;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_12;
  if (*(_BYTE *)(v7 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EBF34);
  }
  v8 = *(_QWORD *)(v7 + 32);
  if (!v8)
    goto LABEL_12;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_12;
  v12 = *(unsigned __int8 *)(v9 + 46);
  if (v12 != 35 && v12 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EC398);
  }
  if ((*(_BYTE *)(a2 + 251) & 0x40) != 0)
  {
LABEL_12:
    LODWORD(v330) = 1;
    v331 = 1077936128;
    v332 = 0;
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 96;
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(v325, &v329);
  }
  if ((*(_BYTE *)(v9 + 328) & 1) != 0)
  {
    v188 = WebCore::RenderTableCell::section(result);
    return (uint64_t)WebCore::RenderTableSection::cachedCollapsedBorder(v188, a2, 2, a1);
  }
  if (a3)
  {
    v14 = WebCore::CSSProperty::resolveDirectionAwareProperty(371, (*(_DWORD *)(v5 + 120) >> 26) & 1, (unsigned __int16)*(_DWORD *)(v5 + 124) >> 13);
    v170 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
    if (v170)
    {
      if (*(_BYTE *)(v170 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1944EC3B8);
      }
    }
    else if (MEMORY[0x2E] != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944ED030);
    }
    v13 = WebCore::CSSProperty::resolveDirectionAwareProperty(368, (*(_DWORD *)(v170 + 120) >> 26) & 1, (unsigned __int16)*(_DWORD *)(v170 + 124) >> 13);
    v171 = *(_DWORD *)(a2 + 120);
    v172 = *(uint64_t **)(*(_QWORD *)(a2 + 88) + 24);
    v173 = (float *)(v172 + 22);
    if ((v171 & 0x4000000) == 0)
      v173 = (float *)(v172 + 19);
    v174 = (float *)(v172 + 16);
    v175 = v172 + 13;
    if ((v171 & 0x4000000) != 0)
      v176 = v174;
    else
      v176 = (float *)v175;
    if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 >= 4)
      v20 = v176;
    else
      v20 = v173;
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(a2 + 80, v14, 0, &v329);
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = *(_DWORD *)(a2 + 120);
    v16 = *(uint64_t **)(*(_QWORD *)(a2 + 88) + 24);
    v17 = (float *)(v16 + 22);
    if ((v15 & 0x4000000) == 0)
      v17 = (float *)(v16 + 19);
    v123 = (v15 & 0x4000000) == 0;
    v18 = (float *)(v16 + 16);
    v19 = (float *)(v16 + 13);
    if (v123)
      v18 = v19;
    if (((*(_DWORD *)(a2 + 124) >> 13) & 6u) - 2 >= 4)
      v20 = v18;
    else
      v20 = v17;
    v329 = 0;
  }
  v21 = v20[4];
  v22 = 0.0;
  if (v21 == 0.0 || ((_BYTE)v20[5] & 0xF) == 0)
    goto LABEL_27;
  v22 = v21 * 64.0;
  if (v22 < 2147483650.0)
  {
    if (v22 > -2147483650.0)
    {
LABEL_27:
      v23 = (int)v22;
      goto LABEL_28;
    }
    v23 = 0x80000000;
  }
  else
  {
    v23 = 0x7FFFFFFF;
  }
LABEL_28:
  *(_DWORD *)a1 = v23;
  v24 = v329;
  *(_QWORD *)(a1 + 8) = v329;
  v25 = (unint64_t *)(a1 + 8);
  if ((v24 & 0x8000000000000) != 0)
  {
    v177 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 + 1, v177));
  }
  v26 = (_BYTE)v20[5] & 0xF;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0x80 | v26 | 0x60;
  if (*((_DWORD *)v20 + 2) || (v86 = *(_QWORD *)v20, (*(_QWORD *)v20 & 0x4000000000000) == 0))
  {
    v27 = 0;
  }
  else
  {
    if ((v86 & 0x8000000000000) != 0)
      v87 = *(float *)((v86 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v87 = *(_QWORD *)v20 != 0;
    if (v87)
      v27 = 0;
    else
      v27 = 0x80;
  }
  *(_BYTE *)(a1 + 16) = v26 | v27 | 0x60;
  if ((v329 & 0x8000000000000) != 0)
  {
    result = v329 & 0xFFFFFFFFFFFFLL;
    do
    {
      v253 = __ldaxr((unsigned int *)result);
      v254 = v253 - 1;
    }
    while (__stlxr(v254, (unsigned int *)result));
    if (!v254)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, (void *)a2);
    }
  }
  v28 = *(_QWORD *)(a2 + 32);
  if (!v28)
    goto LABEL_106;
  v29 = *(_QWORD *)(v28 + 8);
  if (!v29)
    goto LABEL_106;
  if (*(_BYTE *)(v29 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EBFA0);
  }
  v30 = *(_QWORD *)(v29 + 32);
  if (!v30)
    goto LABEL_106;
  v31 = *(_QWORD *)(v30 + 8);
  if (!v31)
    goto LABEL_106;
  if (*(_BYTE *)(v31 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EBFC0);
  }
  v32 = *(_QWORD *)(v31 + 32);
  if (!v32)
    goto LABEL_106;
  v33 = *(_QWORD *)(v32 + 8);
  if (!v33)
    goto LABEL_106;
  v34 = *(unsigned __int8 *)(v33 + 46);
  if (v34 != 35 && v34 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EC50CLL);
  }
  result = WebCore::RenderTable::cellBefore((WebCore::RenderTable *)v33, (const WebCore::RenderTableCell *)a2);
  v36 = result;
  if (result)
  {
    v37 = *(_DWORD *)(result + 120);
    v38 = *(uint64_t **)(*(_QWORD *)(result + 88) + 24);
    v39 = (float *)(v38 + 19);
    if ((v37 & 0x4000000) == 0)
      v39 = (float *)(v38 + 22);
    v40 = (float *)(v38 + 13);
    v41 = (float *)(v38 + 16);
    if ((v37 & 0x4000000) != 0)
      v42 = v40;
    else
      v42 = v41;
    if (((*(_DWORD *)(result + 124) >> 13) & 6u) - 2 >= 4)
      v43 = v42;
    else
      v43 = v39;
    if (a3)
      result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(result + 80, v13, 0, v325);
    else
      v325[0] = 0;
    v44 = v43[4];
    v45 = 0.0;
    if (v44 == 0.0 || ((_BYTE)v43[5] & 0xF) == 0)
      goto LABEL_55;
    v45 = v44 * 64.0;
    if (v45 < 2147483650.0)
    {
      if (v45 > -2147483650.0)
      {
LABEL_55:
        v46 = (int)v45;
        goto LABEL_56;
      }
      v46 = 0x80000000;
    }
    else
    {
      v46 = 0x7FFFFFFF;
    }
LABEL_56:
    LODWORD(v329) = v46;
    v330 = v325[0];
    if ((v325[0] & 0x8000000000000) != 0)
    {
      v184 = (unsigned int *)(v325[0] & 0xFFFFFFFFFFFFLL);
      do
        v185 = __ldaxr(v184);
      while (__stlxr(v185 + 1, v184));
    }
    if (*((_DWORD *)v43 + 2) || (v88 = *(_QWORD *)v43, (*(_QWORD *)v43 & 0x4000000000000) == 0))
    {
      v47 = 0;
    }
    else
    {
      if ((v88 & 0x8000000000000) != 0)
        v89 = *(float *)((v88 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
      else
        v89 = *(_QWORD *)v43 != 0;
      if (v89)
        v47 = 0;
      else
        v47 = 0x80;
    }
    LOBYTE(v331) = (_BYTE)v43[5] & 0xF | v47 | 0x60;
    if ((v325[0] & 0x8000000000000) != 0)
    {
      result = v325[0] & 0xFFFFFFFFFFFFLL;
      do
      {
        v257 = __ldaxr((unsigned int *)result);
        v258 = v257 - 1;
      }
      while (__stlxr(v258, (unsigned int *)result));
      if (!v258)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    v48 = v331;
    v49 = *(unsigned __int8 *)(a1 + 16);
    if ((v49 & 0x70) != 0)
    {
      if ((v331 & 0x70) == 0)
        goto LABEL_253;
      v50 = v49 & 0xF;
      v51 = v331 & 0xF;
      if (v50 == 1)
      {
        if (v51 != 1)
          goto LABEL_253;
      }
      else
      {
        v52 = &v329;
        if (v51 == 1 || (v49 & 0xF) == 0)
        {
LABEL_65:
          if ((v48 & 0xF) == 1)
          {
            v54 = 0;
            v53 = 0;
            v55 = 0;
          }
          else
          {
            v53 = *(_DWORD *)v52;
            v54 = v52[1];
            if ((v54 & 0x8000000000000) != 0)
            {
              v186 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFLL);
              do
                v187 = __ldaxr(v186);
              while (__stlxr(v187 + 1, v186));
            }
            v55 = *((_BYTE *)v52 + 16);
          }
          *(_DWORD *)a1 = v53;
          v56 = *(_QWORD *)(a1 + 8);
          if ((v56 & 0x8000000000000) != 0)
          {
            if ((v54 & 0x8000000000000) != 0)
            {
              *(_OWORD *)v325 = *(_OWORD *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
              v319 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFLL);
              *(_OWORD *)v328 = *(_OWORD *)((v54 & 0xFFFFFFFFFFFFLL) + 4);
              result = WebCore::operator==<float,4ul>((float *)v325, (float *)v328);
              v56 = *v25;
              if ((_DWORD)result)
              {
                if (HIBYTE(v56) == HIBYTE(v54) && BYTE6(v56) == BYTE6(v54))
                {
                  *(_BYTE *)(a1 + 16) = v55;
                  do
                  {
                    v261 = __ldaxr(v319);
                    v262 = v261 - 1;
                  }
                  while (__stlxr(v262, v319));
                  if (!v262)
                  {
                    atomic_store(1u, v319);
                    result = WTF::fastFree((WTF *)(v54 & 0xFFFFFFFFFFFFLL), v35);
                  }
LABEL_74:
                  v57 = *(_BYTE *)(a1 + 16) & 0x70;
                  if ((v330 & 0x8000000000000) != 0)
                  {
                    result = v330 & 0xFFFFFFFFFFFFLL;
                    do
                    {
                      v259 = __ldaxr((unsigned int *)result);
                      v260 = v259 - 1;
                    }
                    while (__stlxr(v260, (unsigned int *)result));
                    if (!v260)
                    {
                      atomic_store(1u, (unsigned int *)result);
                      result = WTF::fastFree((WTF *)result, v35);
                    }
                  }
                  if (!v57)
                    goto LABEL_106;
                  goto LABEL_76;
                }
              }
            }
          }
          else if ((v54 & 0x8000000000000) == 0 && v56 == v54)
          {
LABEL_73:
            *(_BYTE *)(a1 + 16) = v55;
            goto LABEL_74;
          }
          if ((v56 & 0x8000000000000) != 0)
          {
            result = v56 & 0xFFFFFFFFFFFFLL;
            do
            {
              v255 = __ldaxr((unsigned int *)result);
              v256 = v255 - 1;
            }
            while (__stlxr(v256, (unsigned int *)result));
            if (!v256)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v35);
            }
          }
          *(_QWORD *)(a1 + 8) = v54;
          goto LABEL_73;
        }
        if ((v331 & 0xF) == 0)
        {
LABEL_253:
          v48 = *(_BYTE *)(a1 + 16);
          v52 = (unint64_t *)a1;
          goto LABEL_65;
        }
        v179 = v329;
        v180 = *(_DWORD *)a1;
        if ((v331 & 0xE) != 0)
          v181 = v329;
        else
          v181 = 0;
        if ((v49 & 0xE) != 0)
          v182 = *(_DWORD *)a1;
        else
          v182 = 0;
        if (v181 == v182)
        {
          v183 = v51 >= v50;
          if (v51 == v50)
            v183 = ((v331 >> 4) & 7u) >= ((v49 >> 4) & 7);
          if (!v183)
            goto LABEL_253;
        }
        else
        {
          if ((v331 & 0xE) == 0)
            v179 = 0;
          if ((v49 & 0xE) == 0)
            v180 = 0;
          if (v179 < v180)
            goto LABEL_253;
        }
      }
    }
    v52 = &v329;
    goto LABEL_65;
  }
LABEL_76:
  v58 = *(_DWORD *)(a2 + 248);
  v59 = *(_QWORD *)(a2 + 32);
  if (!v59)
    goto LABEL_266;
  v60 = *(_QWORD *)(v59 + 8);
  if (!v60)
    goto LABEL_266;
  if (*(_BYTE *)(v60 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EBFE0);
  }
  v61 = *(_QWORD *)(v60 + 32);
  if (!v61)
    goto LABEL_266;
  v62 = *(_QWORD *)(v61 + 8);
  if (!v62)
    goto LABEL_266;
  if (*(_BYTE *)(v62 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EC040);
  }
  v63 = *(_QWORD *)(v62 + 32);
  if (v63)
  {
    v64 = *(_QWORD *)(v63 + 8);
    if (v64)
    {
      v65 = *(unsigned __int8 *)(v64 + 46);
      if (v65 != 35 && v65 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x1944EC864);
      }
    }
  }
  else
  {
LABEL_266:
    v64 = 0;
  }
  v66 = v58 & 0x1FFFFFF;
  if ((v58 & 0x4000000) != 0)
    result = WebCore::RenderTableCell::parseColSpanFromDOM((WebCore::RenderTableCell *)a2);
  else
    result = 1;
  v67 = v66 + result - 1;
  if ((*(_BYTE *)(v64 + 328) & 0x40) != 0)
  {
    v224 = *(unsigned int *)(v64 + 228);
    if ((_DWORD)v224)
    {
      v225 = 0;
      v226 = 0;
      while (1)
      {
        v226 += *(_DWORD *)(*(_QWORD *)(v64 + 216) + 4 * v225);
        if (v226 - 1 >= v67)
          break;
        if (v224 == ++v225)
        {
          v67 = *(_DWORD *)(v64 + 228);
          goto LABEL_89;
        }
      }
      v67 = v225;
    }
    else
    {
      v67 = 0;
    }
  }
LABEL_89:
  v68 = *(_QWORD *)(a2 + 32);
  if (v68)
  {
    v69 = *(_QWORD *)(v68 + 8);
    if (*(_BYTE *)(v69 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944EC000);
    }
    v70 = *(_QWORD *)(*(_QWORD *)(v69 + 32) + 8);
    if (*(_BYTE *)(v70 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1944EC020);
    }
    v71 = *(_QWORD *)(*(_QWORD *)(v70 + 32) + 8);
    v72 = *(unsigned __int8 *)(v71 + 46);
    if (v72 != 35 && v72 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1944EC844);
    }
    v73 = v71 + 228;
    v74 = ((*(unsigned __int8 *)(a2 + 123) ^ *(unsigned __int8 *)(v70 + 123)) >> 2) & 1;
  }
  else
  {
    v74 = 0;
    v73 = 228;
  }
  if (v66 || v74)
  {
    v75 = v67 == *(_DWORD *)v73 - 1 ? v74 : 0;
    if (v75 != 1)
    {
      v76 = 0;
      goto LABEL_102;
    }
  }
  v90 = *(_QWORD *)(v68 + 8);
  if (*(_BYTE *)(v90 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EC0F0);
  }
  v91 = *(_DWORD *)(v90 + 120);
  v92 = *(uint64_t **)(*(_QWORD *)(v90 + 88) + 24);
  v93 = (float *)(v92 + 22);
  if ((v91 & 0x4000000) == 0)
    v93 = (float *)(v92 + 19);
  v94 = (float *)(v92 + 16);
  v95 = (float *)(v92 + 13);
  if ((v91 & 0x4000000) != 0)
    v96 = v94;
  else
    v96 = v95;
  if (((*(_DWORD *)(v90 + 124) >> 13) & 6u) - 2 >= 4)
    v97 = v96;
  else
    v97 = v93;
  if (a3)
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v90 + 80, v14, 0, &v327);
  else
    v327 = 0;
  v98 = v97[4];
  v99 = 0.0;
  if (v98 == 0.0 || ((_BYTE)v97[5] & 0xF) == 0)
    goto LABEL_146;
  v99 = v98 * 64.0;
  if (v99 < 2147483650.0)
  {
    if (v99 > -2147483650.0)
    {
LABEL_146:
      v100 = (int)v99;
      goto LABEL_147;
    }
    v100 = 0x80000000;
  }
  else
  {
    v100 = 0x7FFFFFFF;
  }
LABEL_147:
  LODWORD(v329) = v100;
  v330 = v327;
  if ((v327 & 0x8000000000000) != 0)
  {
    v202 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 + 1, v202));
  }
  v101 = *((_BYTE *)v97 + 20);
  v102 = v101 & 0xF;
  if (*((_DWORD *)v97 + 2) || (v164 = *(_QWORD *)v97, (*(_QWORD *)v97 & 0x4000000000000) == 0))
  {
    v103 = 0;
  }
  else
  {
    if ((v164 & 0x8000000000000) != 0)
      v165 = *(float *)((v164 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v165 = *(_QWORD *)v97 != 0;
    if (v165)
      v103 = 0;
    else
      v103 = 0x80;
  }
  v104 = v102 | v103 | 0x50;
  LOBYTE(v331) = v104;
  v105 = *(_BYTE *)(a1 + 16);
  if ((v105 & 0x70) == 0)
    goto LABEL_286;
  v106 = v105 & 0xF;
  if (v102 == 1)
  {
    v107 = (unint64_t *)a1;
    if (v106 != 1)
      goto LABEL_286;
  }
  else
  {
    if ((v101 & 0xF) == 0 || v106 == 1)
    {
      v107 = (unint64_t *)a1;
      goto LABEL_155;
    }
    if ((v105 & 0xF) == 0)
      goto LABEL_286;
    v190 = *(_DWORD *)a1;
    v191 = v329;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v192 = *(_DWORD *)a1;
    else
      v192 = 0;
    v193 = v101 & 0xE;
    if (v193)
      v194 = v329;
    else
      v194 = 0;
    if (v192 == v194)
    {
      v195 = v106 >= v102;
      if (v106 == v102)
      {
        v107 = (unint64_t *)a1;
        if ((v105 & 0x70u) < 0x50)
        {
LABEL_286:
          v107 = &v329;
          v105 = v104;
        }
      }
      else
      {
        v107 = (unint64_t *)a1;
        if (!v195)
          goto LABEL_286;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v190 = 0;
      if (!v193)
        v191 = 0;
      v107 = (unint64_t *)a1;
      if (v190 < v191)
        goto LABEL_286;
    }
  }
LABEL_155:
  if ((v105 & 0xF) == 1)
  {
    v108 = 0;
    v109 = 0;
    v105 = 0;
  }
  else
  {
    v108 = *(_DWORD *)v107;
    v109 = v107[1];
    if ((v109 & 0x8000000000000) != 0)
    {
      v204 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFLL);
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 + 1, v204));
      v105 = *((_BYTE *)v107 + 16);
    }
  }
  *(_DWORD *)a1 = v108;
  v110 = *(_QWORD *)(a1 + 8);
  if ((v110 & 0x8000000000000) == 0)
  {
    if ((v109 & 0x8000000000000) == 0 && v110 == v109)
    {
LABEL_162:
      *(_BYTE *)(a1 + 16) = v105;
      goto LABEL_163;
    }
LABEL_160:
    if ((v110 & 0x8000000000000) != 0)
    {
      result = v110 & 0xFFFFFFFFFFFFLL;
      do
      {
        v263 = __ldaxr((unsigned int *)result);
        v264 = v263 - 1;
      }
      while (__stlxr(v264, (unsigned int *)result));
      if (!v264)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    *(_QWORD *)(a1 + 8) = v109;
    goto LABEL_162;
  }
  if ((v109 & 0x8000000000000) == 0)
    goto LABEL_160;
  *(_OWORD *)v325 = *(_OWORD *)((v110 & 0xFFFFFFFFFFFFLL) + 4);
  v320 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFLL);
  *(_OWORD *)v328 = *(_OWORD *)((v109 & 0xFFFFFFFFFFFFLL) + 4);
  result = WebCore::operator==<float,4ul>((float *)v325, (float *)v328);
  v110 = *v25;
  if (!(_DWORD)result || HIBYTE(v110) != HIBYTE(v109) || BYTE6(v110) != BYTE6(v109))
    goto LABEL_160;
  *(_BYTE *)(a1 + 16) = v105;
  do
  {
    v279 = __ldaxr(v320);
    v280 = v279 - 1;
  }
  while (__stlxr(v280, v320));
  if (!v280)
  {
    atomic_store(1u, v320);
    result = WTF::fastFree((WTF *)(v109 & 0xFFFFFFFFFFFFLL), v35);
  }
LABEL_163:
  if ((v330 & 0x8000000000000) != 0)
  {
    result = v330 & 0xFFFFFFFFFFFFLL;
    do
    {
      v267 = __ldaxr((unsigned int *)result);
      v268 = v267 - 1;
    }
    while (__stlxr(v268, (unsigned int *)result));
    if (!v268)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
  if ((v327 & 0x8000000000000) != 0)
  {
    result = v327 & 0xFFFFFFFFFFFFLL;
    do
    {
      v269 = __ldaxr((unsigned int *)result);
      v270 = v269 - 1;
    }
    while (__stlxr(v270, (unsigned int *)result));
    if (!v270)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_106;
  result = *(_QWORD *)(a2 + 32);
  v111 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v111 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EC110);
  }
  v112 = *(_QWORD *)(*(_QWORD *)(v111 + 32) + 8);
  if (*(_BYTE *)(v112 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944EC130);
  }
  v113 = *(_DWORD *)(v112 + 120);
  v114 = (v113 & 0x4000000) == 0;
  v115 = ((*(_DWORD *)(v112 + 124) >> 13) & 6) - 2;
  v116 = *(uint64_t **)(*(_QWORD *)(v112 + 88) + 24);
  v117 = v116 + 19;
  v118 = v116 + 22;
  if ((v113 & 0x4000000) != 0)
    v119 = (float *)(v116 + 19);
  else
    v119 = (float *)(v116 + 22);
  v120 = (float *)(v116 + 13);
  v121 = (float *)(v116 + 16);
  if ((v113 & 0x4000000) != 0)
    v122 = v120;
  else
    v122 = v121;
  if (v115 >= 4)
    v119 = v122;
  v123 = (v113 & 0x4000000) == 0;
  if ((v113 & 0x4000000) != 0)
    v124 = v118;
  else
    v124 = v117;
  if (v123)
    v121 = v120;
  if (v115 < 4)
    v121 = (float *)v124;
  if (v114 == (*(_BYTE *)(a2 + 123) & 4) >> 2)
    v125 = v119;
  else
    v125 = v121;
  if (a3)
  {
    v189 = WebCore::RenderTableCell::section(result);
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v189 + 80, v14, 0, &v327);
  }
  else
  {
    v327 = 0;
  }
  v126 = v125[4];
  v127 = 0.0;
  if (v126 == 0.0 || ((_BYTE)v125[5] & 0xF) == 0)
    goto LABEL_191;
  v127 = v126 * 64.0;
  if (v127 < 2147483650.0)
  {
    if (v127 > -2147483650.0)
    {
LABEL_191:
      v128 = (int)v127;
      goto LABEL_192;
    }
    v128 = 0x80000000;
  }
  else
  {
    v128 = 0x7FFFFFFF;
  }
LABEL_192:
  LODWORD(v329) = v128;
  v330 = v327;
  if ((v327 & 0x8000000000000) != 0)
  {
    v206 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 + 1, v206));
  }
  v129 = *((_BYTE *)v125 + 20);
  v130 = v129 & 0xF;
  if (*((_DWORD *)v125 + 2) || (v166 = *(_QWORD *)v125, (*(_QWORD *)v125 & 0x4000000000000) == 0))
  {
    v131 = 0;
  }
  else
  {
    if ((v166 & 0x8000000000000) != 0)
      v167 = *(float *)((v166 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v167 = *(_QWORD *)v125 != 0;
    if (v167)
      v131 = 0;
    else
      v131 = 0x80;
  }
  v132 = v130 | v131 | 0x40;
  LOBYTE(v331) = v132;
  v133 = *(_BYTE *)(a1 + 16);
  if ((v133 & 0x70) == 0)
    goto LABEL_288;
  v134 = v133 & 0xF;
  if (v130 == 1)
  {
    v135 = (unint64_t *)a1;
    if (v134 != 1)
      goto LABEL_288;
  }
  else
  {
    if ((v129 & 0xF) == 0 || v134 == 1)
    {
      v135 = (unint64_t *)a1;
      goto LABEL_200;
    }
    if ((v133 & 0xF) == 0)
      goto LABEL_288;
    v196 = *(_DWORD *)a1;
    v197 = v329;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v198 = *(_DWORD *)a1;
    else
      v198 = 0;
    v199 = v129 & 0xE;
    if (v199)
      v200 = v329;
    else
      v200 = 0;
    if (v198 == v200)
    {
      v201 = v134 >= v130;
      if (v134 == v130)
      {
        v135 = (unint64_t *)a1;
        if ((*(_BYTE *)(a1 + 16) & 0x40) == 0)
        {
LABEL_288:
          v135 = &v329;
          v133 = v132;
        }
      }
      else
      {
        v135 = (unint64_t *)a1;
        if (!v201)
          goto LABEL_288;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v196 = 0;
      if (!v199)
        v197 = 0;
      v135 = (unint64_t *)a1;
      if (v196 < v197)
        goto LABEL_288;
    }
  }
LABEL_200:
  if ((v133 & 0xF) == 1)
  {
    v137 = 0;
    v136 = 0;
    v133 = 0;
  }
  else
  {
    v136 = *(_DWORD *)v135;
    v137 = v135[1];
    if ((v137 & 0x8000000000000) != 0)
    {
      v208 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFLL);
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 + 1, v208));
      v133 = *((_BYTE *)v135 + 16);
    }
  }
  *(_DWORD *)a1 = v136;
  v138 = *(_QWORD *)(a1 + 8);
  if ((v138 & 0x8000000000000) != 0)
  {
    if ((v137 & 0x8000000000000) != 0)
    {
      *(_OWORD *)v325 = *(_OWORD *)((v138 & 0xFFFFFFFFFFFFLL) + 4);
      v321 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFLL);
      *(_OWORD *)v328 = *(_OWORD *)((v137 & 0xFFFFFFFFFFFFLL) + 4);
      result = WebCore::operator==<float,4ul>((float *)v325, (float *)v328);
      v138 = *v25;
      if ((_DWORD)result)
      {
        if (HIBYTE(v138) == HIBYTE(v137) && BYTE6(v138) == BYTE6(v137))
        {
          *(_BYTE *)(a1 + 16) = v133;
          do
          {
            v281 = __ldaxr(v321);
            v282 = v281 - 1;
          }
          while (__stlxr(v282, v321));
          if (!v282)
          {
            atomic_store(1u, v321);
            result = WTF::fastFree((WTF *)(v137 & 0xFFFFFFFFFFFFLL), v35);
          }
          goto LABEL_208;
        }
      }
    }
    goto LABEL_205;
  }
  if ((v137 & 0x8000000000000) != 0 || v138 != v137)
  {
LABEL_205:
    if ((v138 & 0x8000000000000) != 0)
    {
      result = v138 & 0xFFFFFFFFFFFFLL;
      do
      {
        v265 = __ldaxr((unsigned int *)result);
        v266 = v265 - 1;
      }
      while (__stlxr(v266, (unsigned int *)result));
      if (!v266)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    *(_QWORD *)(a1 + 8) = v137;
  }
  *(_BYTE *)(a1 + 16) = v133;
LABEL_208:
  if ((v330 & 0x8000000000000) != 0)
  {
    result = v330 & 0xFFFFFFFFFFFFLL;
    do
    {
      v271 = __ldaxr((unsigned int *)result);
      v272 = v271 - 1;
    }
    while (__stlxr(v272, (unsigned int *)result));
    if (!v272)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
  if ((v327 & 0x8000000000000) != 0)
  {
    result = v327 & 0xFFFFFFFFFFFFLL;
    do
    {
      v273 = __ldaxr((unsigned int *)result);
      v274 = v273 - 1;
    }
    while (__stlxr(v274, (unsigned int *)result));
    if (!v274)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_106;
  v76 = 1;
LABEL_102:
  *(_WORD *)v326 = 0;
  if ((*(_BYTE *)(v33 + 328) & 4) == 0)
    goto LABEL_103;
  result = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v33, (void *)(*(_DWORD *)(a2 + 248) & 0x1FFFFFF), &v326[1], v326);
  if (!result)
    goto LABEL_103;
  v228 = result;
  v229 = *(_QWORD *)(result + 96) & 0x1FLL;
  if (v229 != 10 || !v326[1])
  {
    if (v229 == 10)
      goto LABEL_103;
    started = (float *)WebCore::RenderTableCol::borderAdjoiningCellStartBorder((WebCore::RenderTableCol *)result);
    if (a3)
    {
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(v228 + 80, v14, 0, v328);
      v231 = v328[0];
    }
    else
    {
      v231 = 0;
      v328[0] = 0;
    }
    WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v325, started, v231, 3);
    WebCore::chooseBorder((uint64_t)&v329, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)v325);
    *(_DWORD *)a1 = v329;
    result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v330);
    *(_BYTE *)(a1 + 16) = v331;
    if ((v330 & 0x8000000000000) != 0)
    {
      result = v330 & 0xFFFFFFFFFFFFLL;
      do
      {
        v296 = __ldaxr((unsigned int *)result);
        v297 = v296 - 1;
      }
      while (__stlxr(v297, (unsigned int *)result));
      if (!v297)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    if ((v325[1] & 0x8000000000000) != 0)
    {
      result = v325[1] & 0xFFFFFFFFFFFFLL;
      do
      {
        v298 = __ldaxr((unsigned int *)result);
        v299 = v298 - 1;
      }
      while (__stlxr(v299, (unsigned int *)result));
      if (!v299)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    if ((v328[0] & 0x8000000000000) != 0)
    {
      result = v328[0] & 0xFFFFFFFFFFFFLL;
      do
      {
        v300 = __ldaxr((unsigned int *)result);
        v301 = v300 - 1;
      }
      while (__stlxr(v301, (unsigned int *)result));
      if (!v301)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
      goto LABEL_106;
    v232 = *(unsigned int *)(v228 + 40);
    if (v232 | ((unint64_t)*(unsigned __int8 *)(v228 + 44) << 32))
    {
      if (*(_QWORD *)((v232 | ((unint64_t)*(unsigned __int8 *)(v228 + 44) << 32)) + 8))
        goto LABEL_103;
    }
    result = WebCore::RenderTableCol::enclosingColumnGroup((WebCore::RenderTableCol *)v228);
    if (!result)
      goto LABEL_103;
    v233 = result;
    v317 = (float *)WebCore::RenderTableCol::borderAdjoiningCellStartBorder((WebCore::RenderTableCol *)result);
    if (a3)
    {
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(v233 + 80, v14, 0, v328);
      v234 = v328[0];
    }
    else
    {
      v234 = 0;
      v328[0] = 0;
    }
    WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v325, v317, v234, 2);
    WebCore::chooseBorder((uint64_t)&v329, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)v325);
    *(_DWORD *)a1 = v329;
    result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v330);
    *(_BYTE *)(a1 + 16) = v331;
    if ((v330 & 0x8000000000000) != 0)
    {
      result = v330 & 0xFFFFFFFFFFFFLL;
      do
      {
        v308 = __ldaxr((unsigned int *)result);
        v309 = v308 - 1;
      }
      while (__stlxr(v309, (unsigned int *)result));
      if (!v309)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    if ((v325[1] & 0x8000000000000) != 0)
    {
      result = v325[1] & 0xFFFFFFFFFFFFLL;
      do
      {
        v310 = __ldaxr((unsigned int *)result);
        v311 = v310 - 1;
      }
      while (__stlxr(v311, (unsigned int *)result));
      if (!v311)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    if ((v328[0] & 0x8000000000000) == 0)
      goto LABEL_482;
    result = v328[0] & 0xFFFFFFFFFFFFLL;
    do
    {
      v235 = __ldaxr((unsigned int *)result);
      v236 = --v235 == 0;
    }
    while (__stlxr(v235, (unsigned int *)result));
    goto LABEL_620;
  }
  v318 = (float *)WebCore::RenderTableCol::borderAdjoiningCellStartBorder((WebCore::RenderTableCol *)result);
  if (a3)
  {
    WebCore::RenderStyle::visitedDependentColorWithColorFilter(v228 + 80, v14, 0, v328);
    v248 = v328[0];
  }
  else
  {
    v248 = 0;
    v328[0] = 0;
  }
  WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v325, v318, v248, 2);
  WebCore::chooseBorder((uint64_t)&v329, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)v325);
  *(_DWORD *)a1 = v329;
  result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v330);
  *(_BYTE *)(a1 + 16) = v331;
  if ((v330 & 0x8000000000000) != 0)
  {
    result = v330 & 0xFFFFFFFFFFFFLL;
    do
    {
      v286 = __ldaxr((unsigned int *)result);
      v287 = v286 - 1;
    }
    while (__stlxr(v287, (unsigned int *)result));
    if (!v287)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
  if ((v325[1] & 0x8000000000000) != 0)
  {
    result = v325[1] & 0xFFFFFFFFFFFFLL;
    do
    {
      v288 = __ldaxr((unsigned int *)result);
      v289 = v288 - 1;
    }
    while (__stlxr(v289, (unsigned int *)result));
    if (!v289)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
  if ((v328[0] & 0x8000000000000) != 0)
  {
    result = v328[0] & 0xFFFFFFFFFFFFLL;
    do
    {
      v290 = __ldaxr((unsigned int *)result);
      v236 = --v290 == 0;
    }
    while (__stlxr(v290, (unsigned int *)result));
LABEL_620:
    if (v236)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
LABEL_482:
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_106;
LABEL_103:
  if (!v36)
  {
    if (!v76)
      goto LABEL_106;
LABEL_213:
    v139 = *(_QWORD *)(a2 + 32);
    if (!v139)
      goto LABEL_217;
    v140 = *(_QWORD *)(v139 + 8);
    if (!v140)
      goto LABEL_217;
    if (*(_BYTE *)(v140 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944EC150);
    }
    v141 = *(_DWORD *)(v33 + 120);
    if (((v141 & 0x4000000) == 0) == (*(_BYTE *)(v140 + 123) & 4) >> 2)
    {
      v210 = *(uint64_t **)(*(_QWORD *)(v33 + 88) + 24);
      v211 = (float *)(v210 + 19);
      if ((v141 & 0x4000000) == 0)
        v211 = (float *)(v210 + 22);
      v212 = (float *)(v210 + 13);
      v213 = v210 + 16;
      if ((v141 & 0x4000000) != 0)
        v214 = v212;
      else
        v214 = (float *)v213;
      if (((*(_DWORD *)(v33 + 124) >> 13) & 6u) - 2 >= 4)
        v148 = v214;
      else
        v148 = v211;
    }
    else
    {
LABEL_217:
      v142 = *(_DWORD *)(v33 + 120);
      v143 = *(uint64_t **)(*(_QWORD *)(v33 + 88) + 24);
      v144 = (float *)(v143 + 22);
      if ((v142 & 0x4000000) == 0)
        v144 = (float *)(v143 + 19);
      v145 = (float *)(v143 + 16);
      v146 = (float *)(v143 + 13);
      if ((v142 & 0x4000000) != 0)
        v147 = v145;
      else
        v147 = v146;
      if (((*(_DWORD *)(v33 + 124) >> 13) & 6u) - 2 >= 4)
        v148 = v147;
      else
        v148 = v144;
    }
    if (a3)
      result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v33 + 80, v14, 0, &v327);
    else
      v327 = 0;
    v149 = v148[4];
    v150 = 0.0;
    if (v149 == 0.0 || ((_BYTE)v148[5] & 0xF) == 0)
      goto LABEL_229;
    v150 = v149 * 64.0;
    if (v150 < 2147483650.0)
    {
      if (v150 > -2147483650.0)
      {
LABEL_229:
        v151 = (int)v150;
        goto LABEL_230;
      }
      v151 = 0x80000000;
    }
    else
    {
      v151 = 0x7FFFFFFF;
    }
LABEL_230:
    LODWORD(v329) = v151;
    v330 = v327;
    if ((v327 & 0x8000000000000) != 0)
    {
      v220 = (unsigned int *)(v327 & 0xFFFFFFFFFFFFLL);
      do
        v221 = __ldaxr(v220);
      while (__stlxr(v221 + 1, v220));
    }
    v152 = *((_BYTE *)v148 + 20);
    v153 = v152 & 0xF;
    if (*((_DWORD *)v148 + 2) || (v168 = *(_QWORD *)v148, (*(_QWORD *)v148 & 0x4000000000000) == 0))
    {
      v154 = 0;
    }
    else
    {
      if ((v168 & 0x8000000000000) != 0)
        v169 = *(float *)((v168 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
      else
        v169 = *(_QWORD *)v148 != 0;
      if (v169)
        v154 = 0;
      else
        v154 = 0x80;
    }
    v155 = v153 | v154 | 0x10;
    LOBYTE(v331) = v155;
    v156 = *(_BYTE *)(a1 + 16);
    if ((v156 & 0x70) == 0)
      goto LABEL_290;
    v157 = v156 & 0xF;
    if (v153 == 1)
    {
      v158 = (unint64_t *)a1;
      if (v157 != 1)
        goto LABEL_290;
    }
    else
    {
      if ((v152 & 0xF) == 0 || v157 == 1)
      {
        v158 = (unint64_t *)a1;
        goto LABEL_238;
      }
      if ((v156 & 0xF) == 0)
        goto LABEL_290;
      v215 = *(_DWORD *)a1;
      v216 = v329;
      if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
        v217 = *(_DWORD *)a1;
      else
        v217 = 0;
      v218 = v152 & 0xE;
      if (v218)
        v219 = v329;
      else
        v219 = 0;
      if (v217 == v219)
      {
        v158 = (unint64_t *)a1;
        if (v157 < v153)
        {
LABEL_290:
          v158 = &v329;
          v156 = v155;
        }
      }
      else
      {
        if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
          v215 = 0;
        if (!v218)
          v216 = 0;
        v158 = (unint64_t *)a1;
        if (v215 < v216)
          goto LABEL_290;
      }
    }
LABEL_238:
    if ((v156 & 0xF) == 1)
    {
      v160 = 0;
      v159 = 0;
      v156 = 0;
    }
    else
    {
      v159 = *(_DWORD *)v158;
      v160 = v158[1];
      if ((v160 & 0x8000000000000) != 0)
      {
        v222 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFLL);
        do
          v223 = __ldaxr(v222);
        while (__stlxr(v223 + 1, v222));
        v156 = *((_BYTE *)v158 + 16);
      }
    }
    *(_DWORD *)a1 = v159;
    v161 = *(_QWORD *)(a1 + 8);
    if ((v161 & 0x8000000000000) != 0)
    {
      if ((v160 & 0x8000000000000) != 0)
      {
        *(_OWORD *)v325 = *(_OWORD *)((v161 & 0xFFFFFFFFFFFFLL) + 4);
        v283 = (unsigned int *)(v160 & 0xFFFFFFFFFFFFLL);
        *(_OWORD *)v328 = *(_OWORD *)((v160 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)v325, (float *)v328);
        v161 = *v25;
        if ((_DWORD)result)
        {
          if (HIBYTE(v161) == HIBYTE(v160) && BYTE6(v161) == BYTE6(v160))
          {
            *(_BYTE *)(a1 + 16) = v156;
            do
            {
              v284 = __ldaxr(v283);
              v285 = v284 - 1;
            }
            while (__stlxr(v285, v283));
            if (!v285)
            {
              atomic_store(1u, v283);
              result = WTF::fastFree((WTF *)(v160 & 0xFFFFFFFFFFFFLL), v35);
            }
            goto LABEL_246;
          }
        }
      }
    }
    else if ((v160 & 0x8000000000000) == 0 && v161 == v160)
    {
LABEL_245:
      *(_BYTE *)(a1 + 16) = v156;
LABEL_246:
      if ((v330 & 0x8000000000000) != 0)
      {
        result = v330 & 0xFFFFFFFFFFFFLL;
        do
        {
          v277 = __ldaxr((unsigned int *)result);
          v278 = v277 - 1;
        }
        while (__stlxr(v278, (unsigned int *)result));
        if (!v278)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v35);
        }
      }
      if ((v327 & 0x8000000000000) != 0)
      {
        result = v327 & 0xFFFFFFFFFFFFLL;
        do
        {
          v162 = __ldaxr((unsigned int *)result);
          v163 = v162 - 1;
        }
        while (__stlxr(v163, (unsigned int *)result));
        if (!v163)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v35);
        }
      }
      goto LABEL_106;
    }
    if ((v161 & 0x8000000000000) != 0)
    {
      result = v161 & 0xFFFFFFFFFFFFLL;
      do
      {
        v275 = __ldaxr((unsigned int *)result);
        v276 = v275 - 1;
      }
      while (__stlxr(v276, (unsigned int *)result));
      if (!v276)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    *(_QWORD *)(a1 + 8) = v160;
    goto LABEL_245;
  }
  if ((*(_BYTE *)(v33 + 328) & 4) == 0)
    goto LABEL_105;
  result = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v33, (void *)((*(_DWORD *)(a2 + 248) & 0x1FFFFFFu) - 1), &v326[1], v326);
  if (!result)
    goto LABEL_105;
  v237 = result;
  v238 = *(_QWORD *)(result + 96) & 0x1FLL;
  if (v238 == 10 && v326[0])
  {
    v249 = (float *)WebCore::RenderTableCol::borderAdjoiningCellEndBorder((WebCore::RenderTableCol *)result);
    if (a3)
    {
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(v237 + 80, v13, 0, v328);
      v250 = v328[0];
    }
    else
    {
      v250 = 0;
      v328[0] = 0;
    }
    WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v325, v249, v250, 2);
    WebCore::chooseBorder((uint64_t)&v329, (const WebCore::CollapsedBorderValue *)v325, (const WebCore::CollapsedBorderValue *)a1);
    *(_DWORD *)a1 = v329;
    result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v330);
    *(_BYTE *)(a1 + 16) = v331;
    if ((v330 & 0x8000000000000) != 0)
    {
      result = v330 & 0xFFFFFFFFFFFFLL;
      do
      {
        v291 = __ldaxr((unsigned int *)result);
        v292 = v291 - 1;
      }
      while (__stlxr(v292, (unsigned int *)result));
      if (!v292)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    if ((v325[1] & 0x8000000000000) != 0)
    {
      result = v325[1] & 0xFFFFFFFFFFFFLL;
      do
      {
        v293 = __ldaxr((unsigned int *)result);
        v294 = v293 - 1;
      }
      while (__stlxr(v294, (unsigned int *)result));
      if (!v294)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, v35);
      }
    }
    if ((v328[0] & 0x8000000000000) == 0)
      goto LABEL_489;
    result = v328[0] & 0xFFFFFFFFFFFFLL;
    do
    {
      v295 = __ldaxr((unsigned int *)result);
      v247 = --v295 == 0;
    }
    while (__stlxr(v295, (unsigned int *)result));
    goto LABEL_633;
  }
  if (v238 != 11)
  {
LABEL_105:
    if ((v76 & 1) == 0)
      goto LABEL_106;
    goto LABEL_213;
  }
  v240 = (float *)WebCore::RenderTableCol::borderAdjoiningCellEndBorder((WebCore::RenderTableCol *)result);
  if (a3)
  {
    WebCore::RenderStyle::visitedDependentColorWithColorFilter(v237 + 80, v13, 0, v328);
    v241 = v328[0];
  }
  else
  {
    v241 = 0;
    v328[0] = 0;
  }
  WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v325, v240, v241, 3);
  WebCore::chooseBorder((uint64_t)&v329, (const WebCore::CollapsedBorderValue *)v325, (const WebCore::CollapsedBorderValue *)a1);
  *(_DWORD *)a1 = v329;
  result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v330);
  *(_BYTE *)(a1 + 16) = v331;
  if ((v330 & 0x8000000000000) != 0)
  {
    result = v330 & 0xFFFFFFFFFFFFLL;
    do
    {
      v302 = __ldaxr((unsigned int *)result);
      v303 = v302 - 1;
    }
    while (__stlxr(v303, (unsigned int *)result));
    if (!v303)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
  if ((v325[1] & 0x8000000000000) != 0)
  {
    result = v325[1] & 0xFFFFFFFFFFFFLL;
    do
    {
      v304 = __ldaxr((unsigned int *)result);
      v305 = v304 - 1;
    }
    while (__stlxr(v305, (unsigned int *)result));
    if (!v305)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
  if ((v328[0] & 0x8000000000000) != 0)
  {
    result = v328[0] & 0xFFFFFFFFFFFFLL;
    do
    {
      v306 = __ldaxr((unsigned int *)result);
      v307 = v306 - 1;
    }
    while (__stlxr(v307, (unsigned int *)result));
    if (!v307)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, v35);
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) != 0)
  {
    v242 = *(unsigned int *)(v237 + 47);
    if (!(v242 | ((unint64_t)*(unsigned __int8 *)(v237 + 51) << 32))
      || !*(_QWORD *)((v242 | ((unint64_t)*(unsigned __int8 *)(v237 + 51) << 32)) + 8))
    {
      result = WebCore::RenderTableCol::enclosingColumnGroup((WebCore::RenderTableCol *)v237);
      if (result)
      {
        v243 = result;
        v244 = (float *)WebCore::RenderTableCol::borderAdjoiningCellEndBorder((WebCore::RenderTableCol *)result);
        if (a3)
        {
          WebCore::RenderStyle::visitedDependentColorWithColorFilter(v243 + 80, v13, 0, v328);
          v245 = v328[0];
        }
        else
        {
          v245 = 0;
          v328[0] = 0;
        }
        WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v325, v244, v245, 2);
        WebCore::chooseBorder((uint64_t)&v329, (const WebCore::CollapsedBorderValue *)v325, (const WebCore::CollapsedBorderValue *)a1);
        *(_DWORD *)a1 = v329;
        result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v330);
        *(_BYTE *)(a1 + 16) = v331;
        if ((v330 & 0x8000000000000) != 0)
        {
          result = v330 & 0xFFFFFFFFFFFFLL;
          do
          {
            v312 = __ldaxr((unsigned int *)result);
            v313 = v312 - 1;
          }
          while (__stlxr(v313, (unsigned int *)result));
          if (!v313)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v35);
          }
        }
        if ((v325[1] & 0x8000000000000) != 0)
        {
          result = v325[1] & 0xFFFFFFFFFFFFLL;
          do
          {
            v314 = __ldaxr((unsigned int *)result);
            v315 = v314 - 1;
          }
          while (__stlxr(v315, (unsigned int *)result));
          if (!v315)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v35);
          }
        }
        if ((v328[0] & 0x8000000000000) == 0)
        {
LABEL_489:
          if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
            goto LABEL_106;
          goto LABEL_105;
        }
        result = v328[0] & 0xFFFFFFFFFFFFLL;
        do
        {
          v246 = __ldaxr((unsigned int *)result);
          v247 = --v246 == 0;
        }
        while (__stlxr(v246, (unsigned int *)result));
LABEL_633:
        if (v247)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, v35);
        }
        goto LABEL_489;
      }
    }
    goto LABEL_105;
  }
LABEL_106:
  if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
  {
    *(_DWORD *)(a2 + 248) |= 0x40000000u;
LABEL_108:
    v77 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
    if (*(_BYTE *)(v77 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944EBF60);
    }
    v78 = *(_QWORD *)(*(_QWORD *)(v77 + 32) + 8);
    if (*(_BYTE *)(v78 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1944EBF80);
    }
    v79 = *(_QWORD *)(*(_QWORD *)(v78 + 32) + 8);
    v80 = *(unsigned __int8 *)(v79 + 46);
    if (v80 != 35 && v80 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1944EC4ECLL);
    }
    *(_BYTE *)(v79 + 328) |= 2u;
    goto LABEL_113;
  }
  v227 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 248) = *(_DWORD *)(a2 + 248) & 0xBFFFFFFF | ((*(_DWORD *)a1 == 0) << 30);
  if (!v227)
    goto LABEL_108;
LABEL_113:
  if (a3 && (*(_BYTE *)(a2 + 251) & 0x40) == 0)
  {
    v81 = WebCore::RenderTableCell::section(*(_QWORD *)(a2 + 32));
    v322 = *(_DWORD *)a1;
    v82 = *(_QWORD *)(a1 + 8);
    v323 = v82;
    if ((v82 & 0x8000000000000) != 0)
    {
      v251 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFLL);
      do
        v252 = __ldaxr(v251);
      while (__stlxr(v252 + 1, v251));
    }
    v324 = *(_BYTE *)(a1 + 16);
    v325[0] = a2;
    LODWORD(v325[1]) = 2;
    result = WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::inlineSet<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue&>((uint64_t *)(v81 + 272), v325, (uint64_t)&v322, (uint64_t)&v329);
    if ((v323 & 0x8000000000000) != 0)
    {
      result = v323 & 0xFFFFFFFFFFFFLL;
      do
      {
        v84 = __ldaxr((unsigned int *)result);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, (unsigned int *)result));
      if (!v85)
      {
        atomic_store(1u, (unsigned int *)result);
        return WTF::fastFree((WTF *)result, v83);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderTable::cellBefore(WebCore::RenderTable *this, const WebCore::RenderTableCell *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;

  if ((*((_BYTE *)this + 328) & 8) != 0)
    WebCore::RenderTable::recalcSections(this, a2);
  v4 = *((_QWORD *)a2 + 4);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 46) != 39)
        goto LABEL_30;
      v5 = *(_QWORD *)(v5 + 32);
      if (v5)
      {
        v5 = *(_QWORD *)(v5 + 8);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 46) != 40)
          {
            __break(0xC471u);
            JUMPOUT(0x1944ED45CLL);
          }
        }
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = *((_DWORD *)a2 + 62) & 0x1FFFFFF;
  if ((*((_BYTE *)this + 328) & 0x40) != 0)
  {
    v14 = *((unsigned int *)this + 57);
    if (!(_DWORD)v14)
      return 0;
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v16 += *(_DWORD *)(*((_QWORD *)this + 27) + 4 * v15);
      if (v16 - 1 >= v6)
        break;
      if (v14 == ++v15)
      {
        v6 = *((_DWORD *)this + 57);
        goto LABEL_10;
      }
    }
    v6 = v15;
  }
LABEL_10:
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    if (*(_BYTE *)(v7 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944ED47CLL);
    }
    v8 = *(_DWORD *)(v7 + 200) & 0x7FFFFFFF;
    if (*(_BYTE *)(v5 + 282))
    {
      v17 = v5;
      v18 = v8;
      WebCore::RenderTableSection::recalcCells((WebCore::RenderTableSection *)v5);
      v8 = v18;
      v5 = v17;
    }
    if (*(_DWORD *)(v5 + 212) <= v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1944ED4ECLL);
    }
    v9 = v6 - 1;
    v10 = *(_QWORD *)(v5 + 200) + 40 * v8;
    if (*(_DWORD *)(v10 + 12) > v9)
    {
      v11 = *(_QWORD *)v10 + 32 * v9;
      v12 = *(unsigned int *)(v11 + 12);
      if ((_DWORD)v12)
        return *(_QWORD *)(*(_QWORD *)v11 + 8 * v12 - 8);
      return 0;
    }
LABEL_30:
    __break(0xC471u);
    JUMPOUT(0x1944ED43CLL);
  }
  return 0;
}

unsigned __int16 *WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap(WebCore::CSSPropertyAnimationWrapperMap *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  WebCore::ScrollbarColorPropertyWrapper *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t i;
  uint64_t v283;
  unsigned __int16 *result;
  unsigned int v285;
  unsigned int v286;
  unsigned __int16 *v287;
  char *v288;
  void *v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int v292;
  WTF *v293;
  char *v294;
  int *v295;
  int v296;
  char *v297;
  void *v298;
  WTF *v299;
  WTF *v300;
  char *v301;
  int *v302;
  int v303;
  WTF *v304;
  _QWORD v305[281];

  v305[279] = *MEMORY[0x1E0C80C00];
  qword_1ECE822C0 = 0;
  *(_QWORD *)&dword_1ECE822C8 = 0;
  v1 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v1 + 8) = 399;
  *(_QWORD *)(v1 + 16) = WebCore::RenderStyle::left;
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)v1 = off_1E338D088;
  *(_QWORD *)(v1 + 32) = WebCore::RenderStyle::setLeft;
  *(_QWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 48) = 1;
  v305[0] = v1;
  v2 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v2 + 8) = 431;
  *(_QWORD *)(v2 + 16) = WebCore::RenderStyle::right;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = off_1E338D088;
  *(_QWORD *)(v2 + 32) = WebCore::RenderStyle::setRight;
  *(_QWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 48) = 1;
  v305[1] = v2;
  v3 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v3 + 8) = 449;
  *(_QWORD *)(v3 + 16) = WebCore::RenderStyle::top;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)v3 = off_1E338D088;
  *(_QWORD *)(v3 + 32) = WebCore::RenderStyle::setTop;
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 1;
  v305[2] = v3;
  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v4 + 8) = 387;
  *(_QWORD *)(v4 + 16) = WebCore::RenderStyle::bottom;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E338D088;
  *(_QWORD *)(v4 + 32) = WebCore::RenderStyle::setBottom;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 1;
  v305[3] = v4;
  v5 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v5 + 8) = 450;
  *(_QWORD *)(v5 + 16) = WebCore::RenderStyle::width;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)v5 = off_1E338D088;
  *(_QWORD *)(v5 + 32) = WebCore::RenderStyle::setWidth;
  *(_QWORD *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 48) = 3;
  v305[4] = v5;
  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v6 + 8) = 418;
  *(_QWORD *)(v6 + 16) = WebCore::RenderStyle::minWidth;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)v6 = off_1E338D088;
  *(_QWORD *)(v6 + 32) = WebCore::RenderStyle::setMinWidth;
  *(_QWORD *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 48) = 3;
  v305[5] = v6;
  v7 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v7 + 8) = 414;
  *(_QWORD *)(v7 + 16) = WebCore::RenderStyle::maxWidth;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)v7 = off_1E338D088;
  *(_QWORD *)(v7 + 32) = WebCore::RenderStyle::setMaxWidth;
  *(_QWORD *)(v7 + 40) = 0;
  *(_DWORD *)(v7 + 48) = 3;
  v305[6] = v7;
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v8 + 8) = 393;
  *(_QWORD *)(v8 + 16) = WebCore::RenderStyle::height;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)v8 = off_1E338D088;
  *(_QWORD *)(v8 + 32) = WebCore::RenderStyle::setHeight;
  *(_QWORD *)(v8 + 40) = 0;
  *(_DWORD *)(v8 + 48) = 3;
  v305[7] = v8;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v9 + 8) = 416;
  *(_QWORD *)(v9 + 16) = WebCore::RenderStyle::minHeight;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)v9 = off_1E338D088;
  *(_QWORD *)(v9 + 32) = WebCore::RenderStyle::setMinHeight;
  *(_QWORD *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 48) = 3;
  v305[8] = v9;
  v10 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v10 + 8) = 412;
  *(_QWORD *)(v10 + 16) = WebCore::RenderStyle::maxHeight;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = off_1E338D088;
  *(_QWORD *)(v10 + 32) = WebCore::RenderStyle::setMaxHeight;
  *(_QWORD *)(v10 + 40) = 0;
  *(_DWORD *)(v10 + 48) = 3;
  v305[9] = v10;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v11 + 8) = 490;
  *(_QWORD *)v11 = off_1E338D0E8;
  v305[10] = v11;
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v12 + 8) = 376;
  *(_QWORD *)(v12 + 16) = WebCore::RenderStyle::borderLeftWidth;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = WebCore::RenderStyle::setBorderLeftWidth;
  *(_QWORD *)(v12 + 40) = 0;
  *(_QWORD *)v12 = off_1E338D148;
  *(_BYTE *)(v12 + 48) = 1;
  v305[11] = v12;
  v13 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v13 + 8) = 379;
  *(_QWORD *)(v13 + 16) = WebCore::RenderStyle::borderRightWidth;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = WebCore::RenderStyle::setBorderRightWidth;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)v13 = off_1E338D148;
  *(_BYTE *)(v13 + 48) = 1;
  v305[12] = v13;
  v14 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v14 + 8) = 386;
  *(_QWORD *)(v14 + 16) = WebCore::RenderStyle::borderTopWidth;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = WebCore::RenderStyle::setBorderTopWidth;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)v14 = off_1E338D148;
  *(_BYTE *)(v14 + 48) = 1;
  v305[13] = v14;
  v15 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v15 + 8) = 365;
  *(_QWORD *)(v15 + 16) = WebCore::RenderStyle::borderBottomWidth;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = WebCore::RenderStyle::setBorderBottomWidth;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)v15 = off_1E338D148;
  *(_BYTE *)(v15 + 48) = 1;
  v305[14] = v15;
  v16 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v16 + 8) = 405;
  *(_QWORD *)(v16 + 16) = WebCore::RenderStyle::marginLeft;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)v16 = off_1E338D088;
  *(_QWORD *)(v16 + 32) = WebCore::RenderStyle::setMarginLeft;
  *(_QWORD *)(v16 + 40) = 0;
  *(_DWORD *)(v16 + 48) = 1;
  v305[15] = v16;
  v17 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v17 + 8) = 406;
  *(_QWORD *)(v17 + 16) = WebCore::RenderStyle::marginRight;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)v17 = off_1E338D088;
  *(_QWORD *)(v17 + 32) = WebCore::RenderStyle::setMarginRight;
  *(_QWORD *)(v17 + 40) = 0;
  *(_DWORD *)(v17 + 48) = 1;
  v305[16] = v17;
  v18 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v18 + 8) = 407;
  *(_QWORD *)(v18 + 16) = WebCore::RenderStyle::marginTop;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)v18 = off_1E338D088;
  *(_QWORD *)(v18 + 32) = WebCore::RenderStyle::setMarginTop;
  *(_QWORD *)(v18 + 40) = 0;
  *(_DWORD *)(v18 + 48) = 1;
  v305[17] = v18;
  v19 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v19 + 8) = 402;
  *(_QWORD *)(v19 + 16) = WebCore::RenderStyle::marginBottom;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)v19 = off_1E338D088;
  *(_QWORD *)(v19 + 32) = WebCore::RenderStyle::setMarginBottom;
  *(_QWORD *)(v19 + 40) = 0;
  *(_DWORD *)(v19 + 48) = 1;
  v305[18] = v19;
  v20 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v20 + 8) = 158;
  *(_QWORD *)(v20 + 16) = WebCore::RenderStyle::marginTrim;
  *(_QWORD *)(v20 + 24) = 0;
  *(_QWORD *)v20 = off_1E338EA38;
  *(_QWORD *)(v20 + 32) = WebCore::RenderStyle::setMarginTrim;
  *(_QWORD *)(v20 + 40) = 0;
  v305[19] = v20;
  v21 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v21 + 8) = 428;
  *(_QWORD *)(v21 + 16) = WebCore::RenderStyle::paddingLeft;
  *(_QWORD *)(v21 + 24) = 0;
  *(_QWORD *)v21 = off_1E338D088;
  *(_QWORD *)(v21 + 32) = WebCore::RenderStyle::setPaddingLeft;
  *(_QWORD *)(v21 + 40) = 0;
  *(_DWORD *)(v21 + 48) = 3;
  v305[20] = v21;
  v22 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v22 + 8) = 429;
  *(_QWORD *)(v22 + 16) = WebCore::RenderStyle::paddingRight;
  *(_QWORD *)(v22 + 24) = 0;
  *(_QWORD *)v22 = off_1E338D088;
  *(_QWORD *)(v22 + 32) = WebCore::RenderStyle::setPaddingRight;
  *(_QWORD *)(v22 + 40) = 0;
  *(_DWORD *)(v22 + 48) = 3;
  v305[21] = v22;
  v23 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v23 + 8) = 430;
  *(_QWORD *)(v23 + 16) = WebCore::RenderStyle::paddingTop;
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)v23 = off_1E338D088;
  *(_QWORD *)(v23 + 32) = WebCore::RenderStyle::setPaddingTop;
  *(_QWORD *)(v23 + 40) = 0;
  *(_DWORD *)(v23 + 48) = 3;
  v305[22] = v23;
  v24 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v24 + 8) = 425;
  *(_QWORD *)(v24 + 16) = WebCore::RenderStyle::paddingBottom;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)v24 = off_1E338D088;
  *(_QWORD *)(v24 + 32) = WebCore::RenderStyle::setPaddingBottom;
  *(_QWORD *)(v24 + 40) = 0;
  *(_DWORD *)(v24 + 48) = 3;
  v305[23] = v24;
  v25 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v25 + 8) = 39;
  *(_QWORD *)(v25 + 16) = WebCore::RenderStyle::accentColor;
  *(_QWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 32) = WebCore::RenderStyle::setAccentColor;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)v25 = off_1E338D208;
  v305[24] = v25;
  v26 = WTF::fastMalloc((WTF *)0x20);
  v27 = (_QWORD *)WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v26, 83, (uint64_t)WebCore::RenderStyle::caretColor, 0, (uint64_t)WebCore::RenderStyle::setCaretColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkCaretColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkCaretColor, 0);
  *v27 = off_1E338D2C8;
  v305[25] = v27;
  v28 = (WebCore::ScrollbarColorPropertyWrapper *)WTF::fastMalloc((WTF *)0x20);
  v305[26] = WebCore::ScrollbarColorPropertyWrapper::ScrollbarColorPropertyWrapper(v28);
  v29 = WTF::fastMalloc((WTF *)0x20);
  v305[27] = WebCore::PropertyWrapperVisitedAffectedColor::PropertyWrapperVisitedAffectedColor(v29);
  v30 = WTF::fastMalloc((WTF *)0x20);
  v305[28] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v30, 61, (uint64_t)WebCore::RenderStyle::backgroundColor, 0, (uint64_t)WebCore::RenderStyle::setBackgroundColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkBackgroundColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkBackgroundColor, 0);
  v31 = WTF::fastMalloc((WTF *)0x38);
  v305[29] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v31, 62, (uint64_t)WebCore::RenderStyle::backgroundLayers, 0, (uint64_t)WebCore::RenderStyle::ensureBackgroundLayers, 0);
  v32 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v32 + 8) = 155;
  *(_QWORD *)(v32 + 16) = WebCore::RenderStyle::listStyleImage;
  *(_QWORD *)(v32 + 24) = 0;
  *(_QWORD *)(v32 + 32) = WebCore::RenderStyle::setListStyleImage;
  *(_QWORD *)(v32 + 40) = 0;
  *(_QWORD *)v32 = off_1E338D658;
  v305[30] = v32;
  v33 = WTF::fastMalloc((WTF *)0x38);
  v305[31] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v33, 167, (uint64_t)WebCore::RenderStyle::maskLayers, 0, (uint64_t)WebCore::RenderStyle::ensureMaskLayers, 0);
  v34 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v34 + 8) = 75;
  *(_QWORD *)(v34 + 16) = WebCore::RenderStyle::borderImageSource;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = WebCore::RenderStyle::setBorderImageSource;
  *(_QWORD *)(v34 + 40) = 0;
  *(_QWORD *)v34 = off_1E338D658;
  v305[32] = v34;
  v35 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v35 + 8) = 74;
  *(_QWORD *)(v35 + 16) = WebCore::RenderStyle::borderImageSlices;
  *(_QWORD *)(v35 + 24) = 0;
  *(_QWORD *)v35 = off_1E338D6B8;
  *(_QWORD *)(v35 + 32) = WebCore::RenderStyle::setBorderImageSlices;
  *(_QWORD *)(v35 + 40) = 0;
  *(_DWORD *)(v35 + 48) = 2;
  v305[33] = v35;
  v36 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v36 + 8) = 76;
  *(_QWORD *)(v36 + 16) = WebCore::RenderStyle::borderImageWidth;
  *(_QWORD *)(v36 + 24) = 0;
  *(_QWORD *)v36 = off_1E338D6B8;
  *(_QWORD *)(v36 + 32) = WebCore::RenderStyle::setBorderImageWidth;
  *(_QWORD *)(v36 + 40) = 0;
  *(_DWORD *)(v36 + 48) = 9;
  v305[34] = v36;
  v37 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v37 + 8) = 72;
  *(_QWORD *)(v37 + 16) = WebCore::RenderStyle::borderImageOutset;
  *(_QWORD *)(v37 + 24) = 0;
  *(_QWORD *)v37 = off_1E338D6B8;
  *(_QWORD *)(v37 + 32) = WebCore::RenderStyle::setBorderImageOutset;
  *(_QWORD *)(v37 + 40) = 0;
  *(_DWORD *)(v37 + 48) = 0;
  v305[35] = v37;
  v38 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v38 + 8) = 165;
  *(_QWORD *)(v38 + 16) = WebCore::RenderStyle::maskBorderSource;
  *(_QWORD *)(v38 + 24) = 0;
  *(_QWORD *)(v38 + 32) = WebCore::RenderStyle::setMaskBorderSource;
  *(_QWORD *)(v38 + 40) = 0;
  *(_QWORD *)v38 = off_1E338D658;
  v305[36] = v38;
  v39 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v39 + 8) = 510;
  *(_QWORD *)(v39 + 16) = WebCore::RenderStyle::maskBorder;
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)v39 = off_1E338EA98;
  *(_QWORD *)(v39 + 32) = WebCore::RenderStyle::setMaskBorder;
  *(_QWORD *)(v39 + 40) = 0;
  v305[37] = v39;
  v40 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v40 + 8) = 548;
  *(_QWORD *)(v40 + 16) = WebCore::RenderStyle::maskBorder;
  *(_QWORD *)(v40 + 24) = 0;
  *(_QWORD *)v40 = off_1E338EA98;
  *(_QWORD *)(v40 + 32) = WebCore::RenderStyle::setMaskBorder;
  *(_QWORD *)(v40 + 40) = 0;
  v305[38] = v40;
  v41 = WTF::fastMalloc((WTF *)0x38);
  v305[39] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v41, 63, (uint64_t)WebCore::RenderStyle::backgroundLayers, 0, (uint64_t)WebCore::RenderStyle::ensureBackgroundLayers, 0);
  v42 = WTF::fastMalloc((WTF *)0x38);
  v305[40] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v42, 64, (uint64_t)WebCore::RenderStyle::backgroundLayers, 0, (uint64_t)WebCore::RenderStyle::ensureBackgroundLayers, 0);
  v43 = WTF::fastMalloc((WTF *)0x38);
  v305[41] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v43, 66, (uint64_t)WebCore::RenderStyle::backgroundLayers, 0, (uint64_t)WebCore::RenderStyle::ensureBackgroundLayers, 0);
  v44 = WTF::fastMalloc((WTF *)0x38);
  v305[42] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v44, 541, (uint64_t)WebCore::RenderStyle::backgroundLayers, 0, (uint64_t)WebCore::RenderStyle::ensureBackgroundLayers, 0);
  v45 = WTF::fastMalloc((WTF *)0x38);
  v305[43] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v45, 408, (uint64_t)WebCore::RenderStyle::maskLayers, 0, (uint64_t)WebCore::RenderStyle::ensureMaskLayers, 0);
  v46 = WTF::fastMalloc((WTF *)0x38);
  v305[44] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v46, 409, (uint64_t)WebCore::RenderStyle::maskLayers, 0, (uint64_t)WebCore::RenderStyle::ensureMaskLayers, 0);
  v47 = WTF::fastMalloc((WTF *)0x38);
  v305[45] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v47, 410, (uint64_t)WebCore::RenderStyle::maskLayers, 0, (uint64_t)WebCore::RenderStyle::ensureMaskLayers, 0);
  v48 = WTF::fastMalloc((WTF *)0x38);
  v305[46] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v48, 168, (uint64_t)WebCore::RenderStyle::maskLayers, 0, (uint64_t)WebCore::RenderStyle::ensureMaskLayers, 0);
  v49 = WTF::fastMalloc((WTF *)0x38);
  v305[47] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v49, 335, (uint64_t)WebCore::RenderStyle::maskLayers, 0, (uint64_t)WebCore::RenderStyle::ensureMaskLayers, 0);
  v50 = WTF::fastMalloc((WTF *)0x38);
  v305[48] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v50, 336, (uint64_t)WebCore::RenderStyle::maskLayers, 0, (uint64_t)WebCore::RenderStyle::ensureMaskLayers, 0);
  v51 = WTF::fastMalloc((WTF *)0x38);
  v305[49] = WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(v51, 170, (uint64_t)WebCore::RenderStyle::maskLayers, 0, (uint64_t)WebCore::RenderStyle::ensureMaskLayers, 0);
  v52 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v52 + 8) = 169;
  *(_QWORD *)(v52 + 16) = WebCore::RenderStyle::maskRepeat;
  *(_QWORD *)(v52 + 24) = 0;
  *(_QWORD *)v52 = off_1E338EAF8;
  *(_QWORD *)(v52 + 32) = WebCore::RenderStyle::setMaskRepeat;
  *(_QWORD *)(v52 + 40) = 0;
  v305[50] = v52;
  v53 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v53 + 8) = 177;
  *(_QWORD *)(v53 + 16) = WebCore::RenderStyle::objectPosition;
  *(_QWORD *)(v53 + 24) = 0;
  *(_QWORD *)v53 = off_1E338D718;
  *(_QWORD *)(v53 + 32) = WebCore::RenderStyle::setObjectPosition;
  *(_QWORD *)(v53 + 40) = 0;
  v305[51] = v53;
  v54 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v54 + 8) = 13;
  *(_QWORD *)(v54 + 16) = WebCore::RenderStyle::computedFontSize;
  *(_QWORD *)(v54 + 24) = 0;
  *(_QWORD *)v54 = off_1E338D1A8;
  *(_QWORD *)(v54 + 32) = WebCore::RenderStyle::setFontSize;
  *(_QWORD *)(v54 + 40) = 0;
  v305[52] = v54;
  v55 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v55 + 8) = 95;
  *(_QWORD *)(v55 + 16) = WebCore::RenderStyle::columnRuleWidth;
  *(_QWORD *)(v55 + 24) = 0;
  *(_QWORD *)v55 = off_1E338EB58;
  *(_QWORD *)(v55 + 32) = WebCore::RenderStyle::setColumnRuleWidth;
  *(_QWORD *)(v55 + 40) = 0;
  v305[53] = v55;
  v56 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v56 + 8) = 92;
  *(_QWORD *)(v56 + 16) = WebCore::RenderStyle::columnGap;
  *(_QWORD *)(v56 + 24) = 0;
  *(_QWORD *)v56 = off_1E338EBB8;
  *(_QWORD *)(v56 + 32) = WebCore::RenderStyle::setColumnGap;
  *(_QWORD *)(v56 + 40) = 0;
  v305[54] = v56;
  v57 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v57 + 8) = 211;
  *(_QWORD *)(v57 + 16) = WebCore::RenderStyle::rowGap;
  *(_QWORD *)(v57 + 24) = 0;
  *(_QWORD *)v57 = off_1E338EBB8;
  *(_QWORD *)(v57 + 32) = WebCore::RenderStyle::setRowGap;
  *(_QWORD *)(v57 + 40) = 0;
  v305[55] = v57;
  v58 = WTF::fastMalloc((WTF *)0x58);
  *(_WORD *)(v58 + 8) = 90;
  *(_QWORD *)(v58 + 16) = WebCore::RenderStyle::columnCount;
  *(_QWORD *)(v58 + 24) = 0;
  *(_QWORD *)(v58 + 32) = WebCore::RenderStyle::setColumnCount;
  *(_QWORD *)(v58 + 40) = 0;
  *(_QWORD *)v58 = off_1E338EC18;
  *(_QWORD *)(v58 + 48) = WebCore::RenderStyle::hasAutoColumnCount;
  *(_QWORD *)(v58 + 56) = 0;
  *(_QWORD *)(v58 + 64) = WebCore::RenderStyle::setHasAutoColumnCount;
  *(_QWORD *)(v58 + 72) = 0;
  *(_DWORD *)(v58 + 80) = 65537;
  v305[56] = v58;
  v59 = WTF::fastMalloc((WTF *)0x58);
  *(_WORD *)(v59 + 8) = 97;
  *(_QWORD *)(v59 + 16) = WebCore::RenderStyle::columnWidth;
  *(_QWORD *)(v59 + 24) = 0;
  *(_QWORD *)(v59 + 32) = WebCore::RenderStyle::setColumnWidth;
  *(_QWORD *)(v59 + 40) = 0;
  *(_QWORD *)v59 = off_1E338EC78;
  *(_QWORD *)(v59 + 48) = WebCore::RenderStyle::hasAutoColumnWidth;
  *(_QWORD *)(v59 + 56) = 0;
  *(_QWORD *)(v59 + 64) = WebCore::RenderStyle::setHasAutoColumnWidth;
  *(_QWORD *)(v59 + 72) = 0;
  *(_DWORD *)(v59 + 80) = 0;
  *(_BYTE *)(v59 + 84) = 1;
  v305[57] = v59;
  v60 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v60 + 8) = 305;
  *(_QWORD *)(v60 + 16) = WebCore::RenderStyle::horizontalBorderSpacing;
  *(_QWORD *)(v60 + 24) = 0;
  *(_QWORD *)(v60 + 32) = WebCore::RenderStyle::setHorizontalBorderSpacing;
  *(_QWORD *)(v60 + 40) = 0;
  *(_QWORD *)v60 = off_1E338D148;
  *(_BYTE *)(v60 + 48) = 1;
  v305[58] = v60;
  v61 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v61 + 8) = 306;
  *(_QWORD *)(v61 + 16) = WebCore::RenderStyle::verticalBorderSpacing;
  *(_QWORD *)(v61 + 24) = 0;
  *(_QWORD *)(v61 + 32) = WebCore::RenderStyle::setVerticalBorderSpacing;
  *(_QWORD *)(v61 + 40) = 0;
  *(_QWORD *)v61 = off_1E338D148;
  *(_BYTE *)(v61 + 48) = 1;
  v305[59] = v61;
  v62 = WTF::fastMalloc((WTF *)0x58);
  *(_WORD *)(v62 + 8) = 300;
  *(_QWORD *)(v62 + 16) = WebCore::RenderStyle::specifiedZIndex;
  *(_QWORD *)(v62 + 24) = 0;
  *(_QWORD *)(v62 + 32) = WebCore::RenderStyle::setSpecifiedZIndex;
  *(_QWORD *)(v62 + 40) = 0;
  *(_QWORD *)v62 = off_1E338ECD8;
  *(_QWORD *)(v62 + 48) = WebCore::RenderStyle::hasAutoSpecifiedZIndex;
  *(_QWORD *)(v62 + 56) = 0;
  *(_QWORD *)(v62 + 64) = WebCore::RenderStyle::setHasAutoSpecifiedZIndex;
  *(_QWORD *)(v62 + 72) = 0;
  *(_QWORD *)(v62 + 80) = 0;
  v305[60] = v62;
  v63 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v63 + 8) = 185;
  *(_QWORD *)(v63 + 16) = WebCore::RenderStyle::orphans;
  *(_QWORD *)(v63 + 24) = 0;
  *(_QWORD *)(v63 + 32) = WebCore::RenderStyle::setOrphans;
  *(_QWORD *)(v63 + 40) = 0;
  *(_QWORD *)v63 = off_1E338ED98;
  v305[61] = v63;
  v64 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v64 + 8) = 295;
  *(_QWORD *)(v64 + 16) = WebCore::RenderStyle::widows;
  *(_QWORD *)(v64 + 24) = 0;
  *(_QWORD *)(v64 + 32) = WebCore::RenderStyle::setWidows;
  *(_QWORD *)(v64 + 40) = 0;
  *(_QWORD *)v64 = off_1E338ED98;
  v305[62] = v64;
  v65 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v65 + 8) = 154;
  *(_QWORD *)(v65 + 16) = WebCore::RenderStyle::specifiedLineHeight;
  *(_QWORD *)(v65 + 24) = 0;
  *(_QWORD *)(v65 + 32) = WebCore::RenderStyle::setLineHeight;
  *(_QWORD *)(v65 + 40) = 0;
  *(_DWORD *)(v65 + 48) = 0;
  *(_QWORD *)v65 = off_1E338D778;
  v305[63] = v65;
  v66 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v66 + 8) = 187;
  *(_QWORD *)(v66 + 16) = WebCore::RenderStyle::outlineOffset;
  *(_QWORD *)(v66 + 24) = 0;
  *(_QWORD *)v66 = off_1E338D1A8;
  *(_QWORD *)(v66 + 32) = WebCore::RenderStyle::setOutlineOffset;
  *(_QWORD *)(v66 + 40) = 0;
  v305[64] = v66;
  v67 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v67 + 8) = 189;
  *(_QWORD *)(v67 + 16) = WebCore::RenderStyle::outlineWidth;
  *(_QWORD *)(v67 + 24) = 0;
  *(_QWORD *)(v67 + 32) = WebCore::RenderStyle::setOutlineWidth;
  *(_QWORD *)(v67 + 40) = 0;
  *(_QWORD *)v67 = off_1E338D148;
  *(_BYTE *)(v67 + 48) = 1;
  v305[65] = v67;
  v68 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v68 + 8) = 36;
  *(_QWORD *)(v68 + 16) = WebCore::RenderStyle::computedLetterSpacing;
  *(_QWORD *)(v68 + 24) = 0;
  *(_QWORD *)v68 = off_1E338D088;
  *(_QWORD *)(v68 + 32) = WebCore::RenderStyle::setLetterSpacing;
  *(_QWORD *)(v68 + 40) = 0;
  *(_DWORD *)(v68 + 48) = 1;
  v305[66] = v68;
  v69 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v69 + 8) = 350;
  *(_QWORD *)(v69 + 16) = WebCore::RenderStyle::computedWordSpacing;
  *(_QWORD *)(v69 + 24) = 0;
  *(_QWORD *)v69 = off_1E338D088;
  *(_QWORD *)(v69 + 32) = WebCore::RenderStyle::setWordSpacing;
  *(_QWORD *)(v69 + 40) = 0;
  *(_DWORD *)(v69 + 48) = 1;
  v305[67] = v69;
  v70 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v70 + 8) = 263;
  *(_QWORD *)(v70 + 16) = WebCore::RenderStyle::textIndent;
  *(_QWORD *)(v70 + 24) = 0;
  *(_QWORD *)(v70 + 32) = WebCore::RenderStyle::setTextIndent;
  *(_QWORD *)(v70 + 40) = 0;
  *(_DWORD *)(v70 + 48) = 1;
  *(_QWORD *)v70 = off_1E338D7D8;
  v305[68] = v70;
  v71 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v71 + 8) = 288;
  *(_QWORD *)(v71 + 16) = WebCore::RenderStyle::verticalAlignLength;
  *(_QWORD *)(v71 + 24) = 0;
  *(_QWORD *)(v71 + 32) = WebCore::RenderStyle::setVerticalAlignLength;
  *(_QWORD *)(v71 + 40) = 0;
  *(_DWORD *)(v71 + 48) = 1;
  *(_QWORD *)v71 = off_1E338D838;
  v305[69] = v71;
  v72 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v72 + 8) = 198;
  *(_QWORD *)(v72 + 16) = WebCore::RenderStyle::perspective;
  *(_QWORD *)(v72 + 24) = 0;
  *(_QWORD *)(v72 + 32) = WebCore::RenderStyle::setPerspective;
  *(_QWORD *)(v72 + 40) = 0;
  *(_BYTE *)(v72 + 48) = 1;
  *(_QWORD *)v72 = off_1E338D898;
  v305[70] = v72;
  v73 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v73 + 8) = 199;
  *(_QWORD *)(v73 + 16) = WebCore::RenderStyle::perspectiveOriginX;
  *(_QWORD *)(v73 + 24) = 0;
  *(_QWORD *)v73 = off_1E338D088;
  *(_QWORD *)(v73 + 32) = WebCore::RenderStyle::setPerspectiveOriginX;
  *(_QWORD *)(v73 + 40) = 0;
  *(_DWORD *)(v73 + 48) = 1;
  v305[71] = v73;
  v74 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v74 + 8) = 200;
  *(_QWORD *)(v74 + 16) = WebCore::RenderStyle::perspectiveOriginY;
  *(_QWORD *)(v74 + 24) = 0;
  *(_QWORD *)v74 = off_1E338D088;
  *(_QWORD *)(v74 + 32) = WebCore::RenderStyle::setPerspectiveOriginY;
  *(_QWORD *)(v74 + 40) = 0;
  *(_DWORD *)(v74 + 48) = 1;
  v305[72] = v74;
  v75 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v75 + 8) = 275;
  *(_QWORD *)(v75 + 16) = WebCore::RenderStyle::transformOriginX;
  *(_QWORD *)(v75 + 24) = 0;
  *(_QWORD *)v75 = off_1E338D088;
  *(_QWORD *)(v75 + 32) = WebCore::RenderStyle::setTransformOriginX;
  *(_QWORD *)(v75 + 40) = 0;
  *(_DWORD *)(v75 + 48) = 1;
  v305[73] = v75;
  v76 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v76 + 8) = 276;
  *(_QWORD *)(v76 + 16) = WebCore::RenderStyle::transformOriginY;
  *(_QWORD *)(v76 + 24) = 0;
  *(_QWORD *)v76 = off_1E338D088;
  *(_QWORD *)(v76 + 32) = WebCore::RenderStyle::setTransformOriginY;
  *(_QWORD *)(v76 + 40) = 0;
  *(_DWORD *)(v76 + 48) = 1;
  v305[74] = v76;
  v77 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v77 + 8) = 277;
  *(_QWORD *)(v77 + 16) = WebCore::RenderStyle::transformOriginZ;
  *(_QWORD *)(v77 + 24) = 0;
  *(_QWORD *)v77 = off_1E338D1A8;
  *(_QWORD *)(v77 + 32) = WebCore::RenderStyle::setTransformOriginZ;
  *(_QWORD *)(v77 + 40) = 0;
  v305[75] = v77;
  v78 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v78 + 8) = 383;
  *(_QWORD *)(v78 + 16) = WebCore::RenderStyle::borderTopLeftRadius;
  *(_QWORD *)(v78 + 24) = 0;
  *(_QWORD *)v78 = off_1E338EDF8;
  *(_QWORD *)(v78 + 32) = WebCore::RenderStyle::setBorderTopLeftRadius;
  *(_QWORD *)(v78 + 40) = 0;
  v305[76] = v78;
  v79 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v79 + 8) = 384;
  *(_QWORD *)(v79 + 16) = WebCore::RenderStyle::borderTopRightRadius;
  *(_QWORD *)(v79 + 24) = 0;
  *(_QWORD *)v79 = off_1E338EDF8;
  *(_QWORD *)(v79 + 32) = WebCore::RenderStyle::setBorderTopRightRadius;
  *(_QWORD *)(v79 + 40) = 0;
  v305[77] = v79;
  v80 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v80 + 8) = 362;
  *(_QWORD *)(v80 + 16) = WebCore::RenderStyle::borderBottomLeftRadius;
  *(_QWORD *)(v80 + 24) = 0;
  *(_QWORD *)v80 = off_1E338EDF8;
  *(_QWORD *)(v80 + 32) = WebCore::RenderStyle::setBorderBottomLeftRadius;
  *(_QWORD *)(v80 + 40) = 0;
  v305[78] = v80;
  v81 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v81 + 8) = 363;
  *(_QWORD *)(v81 + 16) = WebCore::RenderStyle::borderBottomRightRadius;
  *(_QWORD *)(v81 + 24) = 0;
  *(_QWORD *)v81 = off_1E338EDF8;
  *(_QWORD *)(v81 + 32) = WebCore::RenderStyle::setBorderBottomRightRadius;
  *(_QWORD *)(v81 + 40) = 0;
  v305[79] = v81;
  v82 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v82 + 8) = 293;
  *(_QWORD *)(v82 + 16) = WebCore::RenderStyle::visibility;
  *(_QWORD *)(v82 + 24) = 0;
  *(_QWORD *)(v82 + 32) = WebCore::RenderStyle::setVisibility;
  *(_QWORD *)(v82 + 40) = 0;
  *(_QWORD *)v82 = off_1E338D8F8;
  v305[80] = v82;
  v83 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v83 + 8) = 7;
  *(_QWORD *)(v83 + 16) = WebCore::RenderStyle::display;
  *(_QWORD *)(v83 + 24) = 0;
  *(_QWORD *)(v83 + 32) = WebCore::RenderStyle::setDisplay;
  *(_QWORD *)(v83 + 40) = 0;
  *(_QWORD *)v83 = off_1E338EE58;
  v305[81] = v83;
  v84 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v84 + 8) = 85;
  *(_QWORD *)(v84 + 16) = WebCore::RenderStyle::clip;
  *(_QWORD *)(v84 + 24) = 0;
  *(_QWORD *)(v84 + 32) = WebCore::RenderStyle::setClip;
  *(_QWORD *)(v84 + 40) = 0;
  *(_DWORD *)(v84 + 48) = 4;
  *(_QWORD *)v84 = off_1E338D958;
  v305[82] = v84;
  v85 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v85 + 8) = 183;
  *(_QWORD *)(v85 + 16) = WebCore::RenderStyle::opacity;
  *(_QWORD *)(v85 + 24) = 0;
  *(_QWORD *)(v85 + 32) = WebCore::RenderStyle::setOpacity;
  *(_QWORD *)(v85 + 40) = 0;
  *(_QWORD *)v85 = off_1E338EEB8;
  v305[83] = v85;
  v86 = WTF::fastMalloc((WTF *)0x20);
  *(_WORD *)(v86 + 8) = 273;
  *(_QWORD *)(v86 + 16) = WebCore::RenderStyle::transform;
  *(_QWORD *)(v86 + 24) = 0;
  *(_QWORD *)v86 = off_1E338D9B8;
  v305[84] = v86;
  v87 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v87 + 8) = 214;
  *(_QWORD *)(v87 + 16) = WebCore::RenderStyle::scale;
  *(_QWORD *)(v87 + 24) = 0;
  *(_QWORD *)(v87 + 32) = WebCore::RenderStyle::setScale;
  *(_QWORD *)(v87 + 40) = 0;
  *(_QWORD *)v87 = off_1E338EF18;
  v305[85] = v87;
  v88 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v88 + 8) = 210;
  *(_QWORD *)(v88 + 16) = WebCore::RenderStyle::rotate;
  *(_QWORD *)(v88 + 24) = 0;
  *(_QWORD *)(v88 + 32) = WebCore::RenderStyle::setRotate;
  *(_QWORD *)(v88 + 40) = 0;
  *(_QWORD *)v88 = off_1E338EF78;
  v305[86] = v88;
  v89 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v89 + 8) = 284;
  *(_QWORD *)(v89 + 16) = WebCore::RenderStyle::translate;
  *(_QWORD *)(v89 + 24) = 0;
  *(_QWORD *)(v89 + 32) = WebCore::RenderStyle::setTranslate;
  *(_QWORD *)(v89 + 40) = 0;
  *(_QWORD *)v89 = off_1E338EFD8;
  v305[87] = v89;
  v90 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v90 + 8) = 117;
  *(_QWORD *)(v90 + 16) = WebCore::RenderStyle::filter;
  *(_QWORD *)(v90 + 24) = 0;
  *(_QWORD *)v90 = off_1E338DA18;
  *(_QWORD *)(v90 + 32) = WebCore::RenderStyle::setFilter;
  *(_QWORD *)(v90 + 40) = 0;
  v305[88] = v90;
  v91 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v91 + 8) = 351;
  *(_QWORD *)(v91 + 16) = WebCore::RenderStyle::backdropFilter;
  *(_QWORD *)(v91 + 24) = 0;
  *(_QWORD *)v91 = off_1E338DA18;
  *(_QWORD *)(v91 + 32) = WebCore::RenderStyle::setBackdropFilter;
  *(_QWORD *)(v91 + 40) = 0;
  v305[89] = v91;
  v92 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v92 + 8) = 451;
  *(_QWORD *)(v92 + 16) = WebCore::RenderStyle::backdropFilter;
  *(_QWORD *)(v92 + 24) = 0;
  *(_QWORD *)v92 = off_1E338DA18;
  *(_QWORD *)(v92 + 32) = WebCore::RenderStyle::setBackdropFilter;
  *(_QWORD *)(v92 + 40) = 0;
  v305[90] = v92;
  v93 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v93 + 8) = 301;
  *(_QWORD *)(v93 + 16) = WebCore::RenderStyle::appleColorFilter;
  *(_QWORD *)(v93 + 24) = 0;
  *(_QWORD *)v93 = off_1E338DA18;
  *(_QWORD *)(v93 + 32) = WebCore::RenderStyle::setAppleColorFilter;
  *(_QWORD *)(v93 + 40) = 0;
  v305[91] = v93;
  v94 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v94 + 8) = 86;
  *(_QWORD *)(v94 + 16) = WebCore::RenderStyle::clipPath;
  *(_QWORD *)(v94 + 24) = 0;
  *(_QWORD *)(v94 + 32) = WebCore::RenderStyle::setClipPath;
  *(_QWORD *)(v94 + 40) = 0;
  *(_QWORD *)v94 = off_1E338DA78;
  v305[92] = v94;
  v95 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v95 + 8) = 226;
  *(_QWORD *)(v95 + 16) = WebCore::RenderStyle::shapeOutside;
  *(_QWORD *)(v95 + 24) = 0;
  *(_QWORD *)(v95 + 32) = WebCore::RenderStyle::setShapeOutside;
  *(_QWORD *)(v95 + 40) = 0;
  *(_QWORD *)v95 = off_1E338DAD8;
  v305[93] = v95;
  v96 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v96 + 8) = 225;
  *(_QWORD *)(v96 + 16) = WebCore::RenderStyle::shapeMargin;
  *(_QWORD *)(v96 + 24) = 0;
  *(_QWORD *)v96 = off_1E338D088;
  *(_QWORD *)(v96 + 32) = WebCore::RenderStyle::setShapeMargin;
  *(_QWORD *)(v96 + 40) = 0;
  *(_DWORD *)(v96 + 48) = 3;
  v305[94] = v96;
  v97 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v97 + 8) = 224;
  *(_QWORD *)(v97 + 16) = WebCore::RenderStyle::shapeImageThreshold;
  *(_QWORD *)(v97 + 24) = 0;
  *(_QWORD *)v97 = off_1E338D1A8;
  *(_QWORD *)(v97 + 32) = WebCore::RenderStyle::setShapeImageThreshold;
  *(_QWORD *)(v97 + 40) = 0;
  v305[95] = v97;
  v98 = WTF::fastMalloc((WTF *)0x20);
  v305[96] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v98, 93, (uint64_t)WebCore::RenderStyle::columnRuleColor, 0, (uint64_t)WebCore::RenderStyle::setColumnRuleColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkColumnRuleColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkColumnRuleColor, 0);
  v99 = WTF::fastMalloc((WTF *)0x20);
  v305[97] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v99, 344, (uint64_t)WebCore::RenderStyle::textStrokeColor, 0, (uint64_t)WebCore::RenderStyle::setTextStrokeColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkTextStrokeColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkTextStrokeColor, 0);
  v100 = WTF::fastMalloc((WTF *)0x20);
  v305[98] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v100, 342, (uint64_t)WebCore::RenderStyle::textFillColor, 0, (uint64_t)WebCore::RenderStyle::setTextFillColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkTextFillColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkTextFillColor, 0);
  v101 = WTF::fastMalloc((WTF *)0x20);
  v305[99] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v101, 374, (uint64_t)WebCore::RenderStyle::borderLeftColor, 0, (uint64_t)WebCore::RenderStyle::setBorderLeftColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkBorderLeftColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkBorderLeftColor, 0);
  v102 = WTF::fastMalloc((WTF *)0x20);
  v305[100] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v102, 377, (uint64_t)WebCore::RenderStyle::borderRightColor, 0, (uint64_t)WebCore::RenderStyle::setBorderRightColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkBorderRightColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkBorderRightColor, 0);
  v103 = WTF::fastMalloc((WTF *)0x20);
  v305[101] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v103, 382, (uint64_t)WebCore::RenderStyle::borderTopColor, 0, (uint64_t)WebCore::RenderStyle::setBorderTopColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkBorderTopColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkBorderTopColor, 0);
  v104 = WTF::fastMalloc((WTF *)0x20);
  v305[102] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v104, 361, (uint64_t)WebCore::RenderStyle::borderBottomColor, 0, (uint64_t)WebCore::RenderStyle::setBorderBottomColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkBorderBottomColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkBorderBottomColor, 0);
  v105 = WTF::fastMalloc((WTF *)0x20);
  v305[103] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v105, 186, (uint64_t)WebCore::RenderStyle::outlineColor, 0, (uint64_t)WebCore::RenderStyle::setOutlineColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkOutlineColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkOutlineColor, 0);
  v106 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v106 + 8) = 388;
  *(_QWORD *)v106 = off_1E338DB38;
  *(_QWORD *)(v106 + 16) = WebCore::RenderStyle::boxShadow;
  *(_QWORD *)(v106 + 24) = 0;
  *(_QWORD *)(v106 + 32) = WebCore::RenderStyle::setBoxShadow;
  *(_QWORD *)(v106 + 40) = 0;
  v305[104] = v106;
  v107 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v107 + 8) = 454;
  *(_QWORD *)v107 = off_1E338DB38;
  *(_QWORD *)(v107 + 16) = WebCore::RenderStyle::boxShadow;
  *(_QWORD *)(v107 + 24) = 0;
  *(_QWORD *)(v107 + 32) = WebCore::RenderStyle::setBoxShadow;
  *(_QWORD *)(v107 + 40) = 0;
  v305[105] = v107;
  v108 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v108 + 8) = 266;
  *(_QWORD *)v108 = off_1E338DB38;
  *(_QWORD *)(v108 + 16) = WebCore::RenderStyle::textShadow;
  *(_QWORD *)(v108 + 24) = 0;
  *(_QWORD *)(v108 + 32) = WebCore::RenderStyle::setTextShadow;
  *(_QWORD *)(v108 + 40) = 0;
  v305[106] = v108;
  v109 = WTF::fastMalloc((WTF *)0x20);
  v305[107] = WebCore::PropertyWrapperVisitedAffectedSVGPaint::PropertyWrapperVisitedAffectedSVGPaint(v109, 114, (uint64_t)WebCore::RenderStyle::fillPaintType, 0, (uint64_t)WebCore::RenderStyle::fillPaintColor, 0, (uint64_t)WebCore::RenderStyle::setFillPaintColor, 0, (uint64_t)WebCore::RenderStyle::visitedFillPaintType, 0, (unint64_t)WebCore::RenderStyle::visitedFillPaintColor, (uint64_t)WebCore::RenderStyle::setVisitedFillPaintColor, 0);
  v110 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v110 + 8) = 115;
  *(_QWORD *)(v110 + 16) = WebCore::RenderStyle::fillOpacity;
  *(_QWORD *)(v110 + 24) = 0;
  *(_QWORD *)v110 = off_1E338D1A8;
  *(_QWORD *)(v110 + 32) = WebCore::RenderStyle::setFillOpacity;
  *(_QWORD *)(v110 + 40) = 0;
  v305[108] = v110;
  v111 = WTF::fastMalloc((WTF *)0x20);
  v305[109] = WebCore::PropertyWrapperVisitedAffectedSVGPaint::PropertyWrapperVisitedAffectedSVGPaint(v111, 234, (uint64_t)WebCore::RenderStyle::strokePaintType, 0, (uint64_t)WebCore::RenderStyle::strokePaintColor, 0, (uint64_t)WebCore::RenderStyle::setStrokePaintColor, 0, (uint64_t)WebCore::RenderStyle::visitedStrokePaintType, 0, (unint64_t)WebCore::RenderStyle::visitedStrokePaintColor, (uint64_t)WebCore::RenderStyle::setVisitedStrokePaintColor, 0);
  v112 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v112 + 8) = 241;
  *(_QWORD *)(v112 + 16) = WebCore::RenderStyle::strokeOpacity;
  *(_QWORD *)(v112 + 24) = 0;
  *(_QWORD *)v112 = off_1E338D1A8;
  *(_QWORD *)(v112 + 32) = WebCore::RenderStyle::setStrokeOpacity;
  *(_QWORD *)(v112 + 40) = 0;
  v305[110] = v112;
  v113 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v113 + 8) = 236;
  *(_QWORD *)(v113 + 16) = WebCore::RenderStyle::strokeDashArray;
  *(_QWORD *)(v113 + 24) = 0;
  *(_QWORD *)(v113 + 32) = WebCore::RenderStyle::setStrokeDashArray;
  *(_QWORD *)(v113 + 40) = 0;
  *(_QWORD *)v113 = off_1E338DC58;
  v305[111] = v113;
  v114 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v114 + 8) = 240;
  *(_QWORD *)(v114 + 16) = WebCore::RenderStyle::strokeMiterLimit;
  *(_QWORD *)(v114 + 24) = 0;
  *(_QWORD *)v114 = off_1E338D1A8;
  *(_QWORD *)(v114 + 32) = WebCore::RenderStyle::setStrokeMiterLimit;
  *(_QWORD *)(v114 + 40) = 0;
  v305[112] = v114;
  v115 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v115 + 8) = 107;
  *(_QWORD *)(v115 + 16) = WebCore::RenderStyle::cx;
  *(_QWORD *)(v115 + 24) = 0;
  *(_QWORD *)v115 = off_1E338D088;
  *(_QWORD *)(v115 + 32) = WebCore::RenderStyle::setCx;
  *(_QWORD *)(v115 + 40) = 0;
  *(_DWORD *)(v115 + 48) = 0;
  v305[113] = v115;
  v116 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v116 + 8) = 108;
  *(_QWORD *)(v116 + 16) = WebCore::RenderStyle::cy;
  *(_QWORD *)(v116 + 24) = 0;
  *(_QWORD *)v116 = off_1E338D088;
  *(_QWORD *)(v116 + 32) = WebCore::RenderStyle::setCy;
  *(_QWORD *)(v116 + 40) = 0;
  *(_DWORD *)(v116 + 48) = 0;
  v305[114] = v116;
  v117 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v117 + 8) = 207;
  *(_QWORD *)(v117 + 16) = WebCore::RenderStyle::r;
  *(_QWORD *)(v117 + 24) = 0;
  *(_QWORD *)v117 = off_1E338D088;
  *(_QWORD *)(v117 + 32) = WebCore::RenderStyle::setR;
  *(_QWORD *)(v117 + 40) = 0;
  *(_DWORD *)(v117 + 48) = 0;
  v305[115] = v117;
  v118 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v118 + 8) = 212;
  *(_QWORD *)(v118 + 16) = WebCore::RenderStyle::rx;
  *(_QWORD *)(v118 + 24) = 0;
  *(_QWORD *)v118 = off_1E338D088;
  *(_QWORD *)(v118 + 32) = WebCore::RenderStyle::setRx;
  *(_QWORD *)(v118 + 40) = 0;
  *(_DWORD *)(v118 + 48) = 0;
  v305[116] = v118;
  v119 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v119 + 8) = 213;
  *(_QWORD *)(v119 + 16) = WebCore::RenderStyle::ry;
  *(_QWORD *)(v119 + 24) = 0;
  *(_QWORD *)v119 = off_1E338D088;
  *(_QWORD *)(v119 + 32) = WebCore::RenderStyle::setRy;
  *(_QWORD *)(v119 + 40) = 0;
  *(_DWORD *)(v119 + 48) = 0;
  v305[117] = v119;
  v120 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v120 + 8) = 237;
  *(_QWORD *)(v120 + 16) = WebCore::RenderStyle::strokeDashOffset;
  *(_QWORD *)(v120 + 24) = 0;
  *(_QWORD *)v120 = off_1E338D088;
  *(_QWORD *)(v120 + 32) = WebCore::RenderStyle::setStrokeDashOffset;
  *(_QWORD *)(v120 + 40) = 0;
  *(_DWORD *)(v120 + 48) = 0;
  v305[118] = v120;
  v121 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v121 + 8) = 242;
  *(_QWORD *)(v121 + 16) = WebCore::RenderStyle::strokeWidth;
  *(_QWORD *)(v121 + 24) = 0;
  *(_QWORD *)v121 = off_1E338D088;
  *(_QWORD *)(v121 + 32) = WebCore::RenderStyle::setStrokeWidth;
  *(_QWORD *)(v121 + 40) = 0;
  *(_DWORD *)(v121 + 48) = 0;
  v305[119] = v121;
  v122 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v122 + 8) = 298;
  *(_QWORD *)(v122 + 16) = WebCore::RenderStyle::x;
  *(_QWORD *)(v122 + 24) = 0;
  *(_QWORD *)v122 = off_1E338D088;
  *(_QWORD *)(v122 + 32) = WebCore::RenderStyle::setX;
  *(_QWORD *)(v122 + 40) = 0;
  *(_DWORD *)(v122 + 48) = 0;
  v305[120] = v122;
  v123 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v123 + 8) = 299;
  *(_QWORD *)(v123 + 16) = WebCore::RenderStyle::y;
  *(_QWORD *)(v123 + 24) = 0;
  *(_QWORD *)v123 = off_1E338D088;
  *(_QWORD *)(v123 + 32) = WebCore::RenderStyle::setY;
  *(_QWORD *)(v123 + 40) = 0;
  *(_DWORD *)(v123 + 48) = 0;
  v305[121] = v123;
  v124 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v124 + 8) = 109;
  *(_QWORD *)(v124 + 16) = WebCore::RenderStyle::d;
  *(_QWORD *)(v124 + 24) = 0;
  *(_QWORD *)(v124 + 32) = WebCore::RenderStyle::setD;
  *(_QWORD *)(v124 + 40) = 0;
  *(_QWORD *)v124 = off_1E338DCB8;
  v305[122] = v124;
  v125 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v125 + 8) = 125;
  *(_QWORD *)(v125 + 16) = WebCore::RenderStyle::floodOpacity;
  *(_QWORD *)(v125 + 24) = 0;
  *(_QWORD *)v125 = off_1E338D1A8;
  *(_QWORD *)(v125 + 32) = WebCore::RenderStyle::setFloodOpacity;
  *(_QWORD *)(v125 + 40) = 0;
  v305[123] = v125;
  v126 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v126 + 8) = 124;
  *(_QWORD *)v126 = off_1E338D268;
  *(_QWORD *)(v126 + 16) = WebCore::RenderStyle::floodColor;
  *(_QWORD *)(v126 + 24) = 0;
  *(_QWORD *)(v126 + 32) = WebCore::RenderStyle::setFloodColor;
  *(_QWORD *)(v126 + 40) = 0;
  v305[124] = v126;
  v127 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v127 + 8) = 233;
  *(_QWORD *)(v127 + 16) = WebCore::RenderStyle::stopOpacity;
  *(_QWORD *)(v127 + 24) = 0;
  *(_QWORD *)v127 = off_1E338D1A8;
  *(_QWORD *)(v127 + 32) = WebCore::RenderStyle::setStopOpacity;
  *(_QWORD *)(v127 + 40) = 0;
  v305[125] = v127;
  v128 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v128 + 8) = 232;
  *(_QWORD *)v128 = off_1E338D268;
  *(_QWORD *)(v128 + 16) = WebCore::RenderStyle::stopColor;
  *(_QWORD *)(v128 + 24) = 0;
  *(_QWORD *)(v128 + 32) = WebCore::RenderStyle::setStopColor;
  *(_QWORD *)(v128 + 40) = 0;
  v305[126] = v128;
  v129 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v129 + 8) = 152;
  *(_QWORD *)v129 = off_1E338D268;
  *(_QWORD *)(v129 + 16) = WebCore::RenderStyle::lightingColor;
  *(_QWORD *)(v129 + 24) = 0;
  *(_QWORD *)(v129 + 32) = WebCore::RenderStyle::setLightingColor;
  *(_QWORD *)(v129 + 40) = 0;
  v305[127] = v129;
  v130 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v130 + 8) = 68;
  *(_QWORD *)(v130 + 16) = WebCore::RenderStyle::baselineShiftValue;
  *(_QWORD *)(v130 + 24) = 0;
  *(_QWORD *)(v130 + 32) = WebCore::RenderStyle::setBaselineShiftValue;
  *(_QWORD *)(v130 + 40) = 0;
  *(_QWORD *)v130 = off_1E338DD18;
  v305[128] = v130;
  v131 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v131 + 8) = 151;
  *(_QWORD *)(v131 + 16) = WebCore::RenderStyle::kerning;
  *(_QWORD *)(v131 + 24) = 0;
  *(_QWORD *)v131 = off_1E338DD78;
  *(_QWORD *)(v131 + 32) = WebCore::RenderStyle::setKerning;
  *(_QWORD *)(v131 + 40) = 0;
  v305[129] = v131;
  v132 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v132 + 8) = 27;
  *(_QWORD *)(v132 + 16) = WebCore::RenderStyle::fontVariationSettings;
  *(_QWORD *)(v132 + 24) = 0;
  *(_QWORD *)(v132 + 32) = WebCore::RenderStyle::setFontVariationSettings;
  *(_QWORD *)(v132 + 40) = 0;
  *(_QWORD *)v132 = off_1E338DDD8;
  v305[130] = v132;
  v133 = WTF::fastMalloc((WTF *)0x20);
  *(_WORD *)(v133 + 8) = 14;
  *(_QWORD *)(v133 + 16) = WebCore::RenderStyle::fontSizeAdjust;
  *(_QWORD *)(v133 + 24) = 0;
  *(_QWORD *)v133 = off_1E338DE38;
  v305[131] = v133;
  v134 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v134 + 8) = 28;
  *(_QWORD *)(v134 + 16) = WebCore::RenderStyle::fontWeight;
  *(_QWORD *)(v134 + 24) = 0;
  *(_QWORD *)(v134 + 32) = WebCore::RenderStyle::setFontWeight;
  *(_QWORD *)(v134 + 40) = 0;
  *(_QWORD *)v134 = off_1E338DE98;
  v305[132] = v134;
  v135 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v135 + 8) = 15;
  *(_QWORD *)(v135 + 16) = WebCore::RenderStyle::fontStretch;
  *(_QWORD *)(v135 + 24) = 0;
  *(_QWORD *)v135 = off_1E338DEF8;
  *(_QWORD *)(v135 + 32) = WebCore::RenderStyle::setFontStretch;
  *(_QWORD *)(v135 + 40) = 0;
  v305[133] = v135;
  v136 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v136 + 8) = 16;
  *(_QWORD *)(v136 + 16) = WebCore::RenderStyle::fontItalic;
  *(_QWORD *)(v136 + 24) = 0;
  *(_QWORD *)(v136 + 32) = WebCore::RenderStyle::setFontItalic;
  *(_QWORD *)(v136 + 40) = 0;
  *(_QWORD *)v136 = off_1E338DF58;
  v305[134] = v136;
  v137 = WTF::fastMalloc((WTF *)0x20);
  *(_WORD *)(v137 + 8) = 258;
  *(_QWORD *)(v137 + 16) = WebCore::RenderStyle::textDecorationThickness;
  *(_QWORD *)(v137 + 24) = 0;
  *(_QWORD *)v137 = off_1E338DFB8;
  v305[135] = v137;
  v138 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v138 + 8) = 268;
  *(_QWORD *)(v138 + 16) = WebCore::RenderStyle::textUnderlineOffset;
  *(_QWORD *)(v138 + 24) = 0;
  *(_QWORD *)v138 = off_1E338F038;
  *(_QWORD *)(v138 + 32) = WebCore::RenderStyle::setTextUnderlineOffset;
  *(_QWORD *)(v138 + 40) = 0;
  v305[136] = v138;
  v139 = WTF::fastMalloc((WTF *)0x20);
  v305[137] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v139, 254, (uint64_t)WebCore::RenderStyle::textDecorationColor, 0, (uint64_t)WebCore::RenderStyle::setTextDecorationColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkTextDecorationColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkTextDecorationColor, 0);
  v140 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v140 + 8) = 118;
  *(_QWORD *)(v140 + 16) = WebCore::RenderStyle::flexBasis;
  *(_QWORD *)(v140 + 24) = 0;
  *(_QWORD *)v140 = off_1E338D088;
  *(_QWORD *)(v140 + 32) = WebCore::RenderStyle::setFlexBasis;
  *(_QWORD *)(v140 + 40) = 0;
  *(_DWORD *)(v140 + 48) = 3;
  v305[138] = v140;
  v141 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v141 + 8) = 120;
  *(_QWORD *)(v141 + 16) = WebCore::RenderStyle::flexGrow;
  *(_QWORD *)(v141 + 24) = 0;
  *(_QWORD *)(v141 + 32) = WebCore::RenderStyle::setFlexGrow;
  *(_QWORD *)(v141 + 40) = 0;
  *(_QWORD *)v141 = off_1E338D148;
  *(_BYTE *)(v141 + 48) = 1;
  v305[139] = v141;
  v142 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v142 + 8) = 121;
  *(_QWORD *)(v142 + 16) = WebCore::RenderStyle::flexShrink;
  *(_QWORD *)(v142 + 24) = 0;
  *(_QWORD *)(v142 + 32) = WebCore::RenderStyle::setFlexShrink;
  *(_QWORD *)(v142 + 40) = 0;
  *(_QWORD *)v142 = off_1E338D148;
  *(_BYTE *)(v142 + 48) = 1;
  v305[140] = v142;
  v143 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v143 + 8) = 184;
  *(_QWORD *)(v143 + 16) = WebCore::RenderStyle::order;
  *(_QWORD *)(v143 + 24) = 0;
  *(_QWORD *)v143 = off_1E338ED38;
  *(_QWORD *)(v143 + 32) = WebCore::RenderStyle::setOrder;
  *(_QWORD *)(v143 + 40) = 0;
  v305[141] = v143;
  v144 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v144 + 8) = 247;
  *(_QWORD *)(v144 + 16) = WebCore::RenderStyle::tabSize;
  *(_QWORD *)(v144 + 24) = 0;
  *(_QWORD *)(v144 + 32) = WebCore::RenderStyle::setTabSize;
  *(_QWORD *)(v144 + 40) = 0;
  *(_QWORD *)v144 = off_1E338E018;
  v305[142] = v144;
  v145 = WTF::fastMalloc((WTF *)0x58);
  *(_WORD *)(v145 + 8) = 392;
  *(_QWORD *)(v145 + 16) = WebCore::RenderStyle::containIntrinsicWidth;
  *(_QWORD *)(v145 + 24) = 0;
  *(_QWORD *)(v145 + 32) = WebCore::RenderStyle::setContainIntrinsicWidth;
  *(_QWORD *)(v145 + 40) = 0;
  *(_DWORD *)(v145 + 48) = 2;
  *(_QWORD *)v145 = off_1E338E078;
  *(_QWORD *)(v145 + 56) = WebCore::RenderStyle::containIntrinsicWidthType;
  *(_QWORD *)(v145 + 64) = 0;
  *(_QWORD *)(v145 + 72) = WebCore::RenderStyle::setContainIntrinsicWidthType;
  *(_QWORD *)(v145 + 80) = 0;
  v305[143] = v145;
  v146 = WTF::fastMalloc((WTF *)0x58);
  *(_WORD *)(v146 + 8) = 390;
  *(_QWORD *)(v146 + 16) = WebCore::RenderStyle::containIntrinsicHeight;
  *(_QWORD *)(v146 + 24) = 0;
  *(_QWORD *)(v146 + 32) = WebCore::RenderStyle::setContainIntrinsicHeight;
  *(_QWORD *)(v146 + 40) = 0;
  *(_DWORD *)(v146 + 48) = 2;
  *(_QWORD *)v146 = off_1E338E078;
  *(_QWORD *)(v146 + 56) = WebCore::RenderStyle::containIntrinsicHeightType;
  *(_QWORD *)(v146 + 64) = 0;
  *(_QWORD *)(v146 + 72) = WebCore::RenderStyle::setContainIntrinsicHeightType;
  *(_QWORD *)(v146 + 80) = 0;
  v305[144] = v146;
  v147 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v147 + 8) = 41;
  *(_QWORD *)(v147 + 16) = WebCore::RenderStyle::alignContent;
  *(_QWORD *)(v147 + 24) = 0;
  *(_QWORD *)v147 = off_1E338F098;
  *(_QWORD *)(v147 + 32) = WebCore::RenderStyle::setAlignContent;
  *(_QWORD *)(v147 + 40) = 0;
  v305[145] = v147;
  v148 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v148 + 8) = 42;
  *(_QWORD *)(v148 + 16) = WebCore::RenderStyle::alignItems;
  *(_QWORD *)(v148 + 24) = 0;
  *(_QWORD *)v148 = off_1E338F0F8;
  *(_QWORD *)(v148 + 32) = WebCore::RenderStyle::setAlignItems;
  *(_QWORD *)(v148 + 40) = 0;
  v305[146] = v148;
  v149 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v149 + 8) = 43;
  *(_QWORD *)(v149 + 16) = WebCore::RenderStyle::alignSelf;
  *(_QWORD *)(v149 + 24) = 0;
  *(_QWORD *)v149 = off_1E338F0F8;
  *(_QWORD *)(v149 + 32) = WebCore::RenderStyle::setAlignSelf;
  *(_QWORD *)(v149 + 40) = 0;
  v305[147] = v149;
  v150 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v150 + 8) = 58;
  *(_QWORD *)(v150 + 16) = WebCore::RenderStyle::backfaceVisibility;
  *(_QWORD *)(v150 + 24) = 0;
  *(_QWORD *)v150 = off_1E338F158;
  *(_QWORD *)(v150 + 32) = WebCore::RenderStyle::setBackfaceVisibility;
  *(_QWORD *)(v150 + 40) = 0;
  v305[148] = v150;
  v151 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v151 + 8) = 59;
  *(_QWORD *)(v151 + 16) = WebCore::RenderStyle::backgroundAttachment;
  *(_QWORD *)(v151 + 24) = 0;
  *(_QWORD *)v151 = off_1E338F1B8;
  *(_QWORD *)(v151 + 32) = WebCore::RenderStyle::setBackgroundAttachment;
  *(_QWORD *)(v151 + 40) = 0;
  v305[149] = v151;
  v152 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v152 + 8) = 352;
  *(_QWORD *)(v152 + 16) = WebCore::RenderStyle::backgroundClip;
  *(_QWORD *)(v152 + 24) = 0;
  *(_QWORD *)v152 = off_1E338F218;
  *(_QWORD *)(v152 + 32) = WebCore::RenderStyle::setBackgroundClip;
  *(_QWORD *)(v152 + 40) = 0;
  v305[150] = v152;
  v153 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v153 + 8) = 353;
  *(_QWORD *)(v153 + 16) = WebCore::RenderStyle::backgroundOrigin;
  *(_QWORD *)(v153 + 24) = 0;
  *(_QWORD *)v153 = off_1E338F218;
  *(_QWORD *)(v153 + 32) = WebCore::RenderStyle::setBackgroundOrigin;
  *(_QWORD *)(v153 + 40) = 0;
  v305[151] = v153;
  v154 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v154 + 8) = 65;
  *(_QWORD *)(v154 + 16) = WebCore::RenderStyle::backgroundRepeat;
  *(_QWORD *)(v154 + 24) = 0;
  *(_QWORD *)v154 = off_1E338EAF8;
  *(_QWORD *)(v154 + 32) = WebCore::RenderStyle::setBackgroundRepeat;
  *(_QWORD *)(v154 + 40) = 0;
  v305[152] = v154;
  v155 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v155 + 8) = 364;
  *(_QWORD *)(v155 + 16) = WebCore::RenderStyle::borderBottomStyle;
  *(_QWORD *)(v155 + 24) = 0;
  *(_QWORD *)v155 = off_1E338F278;
  *(_QWORD *)(v155 + 32) = WebCore::RenderStyle::setBorderBottomStyle;
  *(_QWORD *)(v155 + 40) = 0;
  v305[153] = v155;
  v156 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v156 + 8) = 71;
  *(_QWORD *)(v156 + 16) = WebCore::RenderStyle::borderCollapse;
  *(_QWORD *)(v156 + 24) = 0;
  *(_QWORD *)v156 = off_1E338F2D8;
  *(_QWORD *)(v156 + 32) = WebCore::RenderStyle::setBorderCollapse;
  *(_QWORD *)(v156 + 40) = 0;
  v305[154] = v156;
  v157 = WTF::fastMalloc((WTF *)0x70);
  *(_WORD *)(v157 + 8) = 73;
  *(_QWORD *)v157 = off_1E338E0D8;
  *(_WORD *)(v157 + 24) = 73;
  *(_QWORD *)(v157 + 32) = WebCore::RenderStyle::borderImageHorizontalRule;
  *(_QWORD *)(v157 + 40) = 0;
  *(_QWORD *)(v157 + 16) = off_1E338E138;
  *(_QWORD *)(v157 + 48) = WebCore::RenderStyle::setBorderImageHorizontalRule;
  *(_QWORD *)(v157 + 56) = 0;
  *(_WORD *)(v157 + 72) = 73;
  *(_QWORD *)(v157 + 80) = WebCore::RenderStyle::borderImageVerticalRule;
  *(_QWORD *)(v157 + 88) = 0;
  *(_QWORD *)(v157 + 64) = off_1E338E138;
  *(_QWORD *)(v157 + 96) = WebCore::RenderStyle::setBorderImageVerticalRule;
  *(_QWORD *)(v157 + 104) = 0;
  v305[155] = v157;
  v158 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v158 + 8) = 375;
  *(_QWORD *)(v158 + 16) = WebCore::RenderStyle::borderLeftStyle;
  *(_QWORD *)(v158 + 24) = 0;
  *(_QWORD *)v158 = off_1E338F278;
  *(_QWORD *)(v158 + 32) = WebCore::RenderStyle::setBorderLeftStyle;
  *(_QWORD *)(v158 + 40) = 0;
  v305[156] = v158;
  v159 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v159 + 8) = 378;
  *(_QWORD *)(v159 + 16) = WebCore::RenderStyle::borderRightStyle;
  *(_QWORD *)(v159 + 24) = 0;
  *(_QWORD *)v159 = off_1E338F278;
  *(_QWORD *)(v159 + 32) = WebCore::RenderStyle::setBorderRightStyle;
  *(_QWORD *)(v159 + 40) = 0;
  v305[157] = v159;
  v160 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v160 + 8) = 385;
  *(_QWORD *)(v160 + 16) = WebCore::RenderStyle::borderTopStyle;
  *(_QWORD *)(v160 + 24) = 0;
  *(_QWORD *)v160 = off_1E338F278;
  *(_QWORD *)(v160 + 32) = WebCore::RenderStyle::setBorderTopStyle;
  *(_QWORD *)(v160 + 40) = 0;
  v305[158] = v160;
  v161 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v161 + 8) = 77;
  *(_QWORD *)(v161 + 16) = WebCore::RenderStyle::boxSizing;
  *(_QWORD *)(v161 + 24) = 0;
  *(_QWORD *)v161 = off_1E338F338;
  *(_QWORD *)(v161 + 32) = WebCore::RenderStyle::setBoxSizing;
  *(_QWORD *)(v161 + 40) = 0;
  v305[159] = v161;
  v162 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v162 + 8) = 82;
  *(_QWORD *)(v162 + 16) = WebCore::RenderStyle::captionSide;
  *(_QWORD *)(v162 + 24) = 0;
  *(_QWORD *)v162 = off_1E338F398;
  *(_QWORD *)(v162 + 32) = WebCore::RenderStyle::setCaptionSide;
  *(_QWORD *)(v162 + 40) = 0;
  v305[160] = v162;
  v163 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v163 + 8) = 84;
  *(_QWORD *)(v163 + 16) = WebCore::RenderStyle::clear;
  *(_QWORD *)(v163 + 24) = 0;
  *(_QWORD *)v163 = off_1E338F3F8;
  *(_QWORD *)(v163 + 32) = WebCore::RenderStyle::setClear;
  *(_QWORD *)(v163 + 40) = 0;
  v305[161] = v163;
  v164 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v164 + 8) = 253;
  *(_QWORD *)(v164 + 16) = WebCore::RenderStyle::textBoxTrim;
  *(_QWORD *)(v164 + 24) = 0;
  *(_QWORD *)v164 = off_1E338F458;
  *(_QWORD *)(v164 + 32) = WebCore::RenderStyle::setTextBoxTrim;
  *(_QWORD *)(v164 + 40) = 0;
  v305[162] = v164;
  v165 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v165 + 8) = 205;
  *(_QWORD *)(v165 + 16) = WebCore::RenderStyle::printColorAdjust;
  *(_QWORD *)(v165 + 24) = 0;
  *(_QWORD *)v165 = off_1E338F4B8;
  *(_QWORD *)(v165 + 32) = WebCore::RenderStyle::setPrintColorAdjust;
  *(_QWORD *)(v165 + 40) = 0;
  v305[163] = v165;
  v166 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v166 + 8) = 91;
  *(_QWORD *)(v166 + 16) = WebCore::RenderStyle::columnFill;
  *(_QWORD *)(v166 + 24) = 0;
  *(_QWORD *)v166 = off_1E338F518;
  *(_QWORD *)(v166 + 32) = WebCore::RenderStyle::setColumnFill;
  *(_QWORD *)(v166 + 40) = 0;
  v305[164] = v166;
  v167 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v167 + 8) = 94;
  *(_QWORD *)(v167 + 16) = WebCore::RenderStyle::columnRuleStyle;
  *(_QWORD *)(v167 + 24) = 0;
  *(_QWORD *)v167 = off_1E338F278;
  *(_QWORD *)(v167 + 32) = WebCore::RenderStyle::setColumnRuleStyle;
  *(_QWORD *)(v167 + 40) = 0;
  v305[165] = v167;
  v168 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v168 + 8) = 102;
  *(_QWORD *)(v168 + 16) = WebCore::RenderStyle::contentVisibility;
  *(_QWORD *)(v168 + 24) = 0;
  *(_QWORD *)(v168 + 32) = WebCore::RenderStyle::setContentVisibility;
  *(_QWORD *)(v168 + 40) = 0;
  *(_QWORD *)v168 = off_1E338F578;
  v305[166] = v168;
  v169 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v169 + 8) = 106;
  *(_QWORD *)(v169 + 16) = WebCore::RenderStyle::cursor;
  *(_QWORD *)(v169 + 24) = 0;
  *(_QWORD *)v169 = off_1E338F5D8;
  *(_QWORD *)(v169 + 32) = WebCore::RenderStyle::setCursor;
  *(_QWORD *)(v169 + 40) = 0;
  v305[167] = v169;
  v170 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v170 + 8) = 111;
  *(_QWORD *)(v170 + 16) = WebCore::RenderStyle::emptyCells;
  *(_QWORD *)(v170 + 24) = 0;
  *(_QWORD *)v170 = off_1E338F638;
  *(_QWORD *)(v170 + 32) = WebCore::RenderStyle::setEmptyCells;
  *(_QWORD *)(v170 + 40) = 0;
  v305[168] = v170;
  v171 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v171 + 8) = 119;
  *(_QWORD *)(v171 + 16) = WebCore::RenderStyle::flexDirection;
  *(_QWORD *)(v171 + 24) = 0;
  *(_QWORD *)v171 = off_1E338F698;
  *(_QWORD *)(v171 + 32) = WebCore::RenderStyle::setFlexDirection;
  *(_QWORD *)(v171 + 40) = 0;
  v305[169] = v171;
  v172 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v172 + 8) = 122;
  *(_QWORD *)(v172 + 16) = WebCore::RenderStyle::flexWrap;
  *(_QWORD *)(v172 + 24) = 0;
  *(_QWORD *)v172 = off_1E338F6F8;
  *(_QWORD *)(v172 + 32) = WebCore::RenderStyle::setFlexWrap;
  *(_QWORD *)(v172 + 40) = 0;
  v305[170] = v172;
  v173 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v173 + 8) = 123;
  *(_QWORD *)(v173 + 16) = WebCore::RenderStyle::floating;
  *(_QWORD *)(v173 + 24) = 0;
  *(_QWORD *)v173 = off_1E338F758;
  *(_QWORD *)(v173 + 32) = WebCore::RenderStyle::setFloating;
  *(_QWORD *)(v173 + 40) = 0;
  v305[171] = v173;
  v174 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v174 + 8) = 129;
  *(_QWORD *)(v174 + 16) = WebCore::RenderStyle::gridAutoColumns;
  *(_QWORD *)(v174 + 24) = 0;
  *(_QWORD *)v174 = off_1E338F7B8;
  *(_QWORD *)(v174 + 32) = WebCore::RenderStyle::setGridAutoColumns;
  *(_QWORD *)(v174 + 40) = 0;
  v305[172] = v174;
  v175 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v175 + 8) = 130;
  *(_QWORD *)(v175 + 16) = WebCore::RenderStyle::gridAutoFlow;
  *(_QWORD *)(v175 + 24) = 0;
  *(_QWORD *)v175 = off_1E338F818;
  *(_QWORD *)(v175 + 32) = WebCore::RenderStyle::setGridAutoFlow;
  *(_QWORD *)(v175 + 40) = 0;
  v305[173] = v175;
  v176 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v176 + 8) = 131;
  *(_QWORD *)(v176 + 16) = WebCore::RenderStyle::gridAutoRows;
  *(_QWORD *)(v176 + 24) = 0;
  *(_QWORD *)v176 = off_1E338F7B8;
  *(_QWORD *)(v176 + 32) = WebCore::RenderStyle::setGridAutoRows;
  *(_QWORD *)(v176 + 40) = 0;
  v305[174] = v176;
  v177 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v177 + 8) = 138;
  *(_QWORD *)(v177 + 16) = WebCore::RenderStyle::gridRowList;
  *(_QWORD *)(v177 + 24) = 0;
  *(_QWORD *)(v177 + 32) = WebCore::RenderStyle::setGridRowList;
  *(_QWORD *)(v177 + 40) = 0;
  *(_QWORD *)v177 = off_1E338E1F8;
  v305[175] = v177;
  v178 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v178 + 8) = 137;
  *(_QWORD *)(v178 + 16) = WebCore::RenderStyle::gridColumnList;
  *(_QWORD *)(v178 + 24) = 0;
  *(_QWORD *)(v178 + 32) = WebCore::RenderStyle::setGridColumnList;
  *(_QWORD *)(v178 + 40) = 0;
  *(_QWORD *)v178 = off_1E338E1F8;
  v305[176] = v178;
  v179 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v179 + 8) = 132;
  *(_QWORD *)(v179 + 16) = WebCore::RenderStyle::gridItemColumnEnd;
  *(_QWORD *)(v179 + 24) = 0;
  *(_QWORD *)v179 = off_1E338F878;
  *(_QWORD *)(v179 + 32) = WebCore::RenderStyle::setGridItemColumnEnd;
  *(_QWORD *)(v179 + 40) = 0;
  v305[177] = v179;
  v180 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v180 + 8) = 133;
  *(_QWORD *)(v180 + 16) = WebCore::RenderStyle::gridItemColumnStart;
  *(_QWORD *)(v180 + 24) = 0;
  *(_QWORD *)v180 = off_1E338F878;
  *(_QWORD *)(v180 + 32) = WebCore::RenderStyle::setGridItemColumnStart;
  *(_QWORD *)(v180 + 40) = 0;
  v305[178] = v180;
  v181 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v181 + 8) = 134;
  *(_QWORD *)(v181 + 16) = WebCore::RenderStyle::gridItemRowEnd;
  *(_QWORD *)(v181 + 24) = 0;
  *(_QWORD *)v181 = off_1E338F878;
  *(_QWORD *)(v181 + 32) = WebCore::RenderStyle::setGridItemRowEnd;
  *(_QWORD *)(v181 + 40) = 0;
  v305[179] = v181;
  v182 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v182 + 8) = 135;
  *(_QWORD *)(v182 + 16) = WebCore::RenderStyle::gridItemRowStart;
  *(_QWORD *)(v182 + 24) = 0;
  *(_QWORD *)v182 = off_1E338F878;
  *(_QWORD *)(v182 + 32) = WebCore::RenderStyle::setGridItemRowStart;
  *(_QWORD *)(v182 + 40) = 0;
  v305[180] = v182;
  v183 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v183 + 8) = 141;
  *(_QWORD *)(v183 + 16) = WebCore::RenderStyle::hyphens;
  *(_QWORD *)(v183 + 24) = 0;
  *(_QWORD *)v183 = off_1E338F8D8;
  *(_QWORD *)(v183 + 32) = WebCore::RenderStyle::setHyphens;
  *(_QWORD *)(v183 + 40) = 0;
  v305[181] = v183;
  v184 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v184 + 8) = 142;
  *(_QWORD *)(v184 + 16) = WebCore::RenderStyle::imageOrientation;
  *(_QWORD *)(v184 + 24) = 0;
  *(_QWORD *)v184 = off_1E338F938;
  *(_QWORD *)(v184 + 32) = WebCore::RenderStyle::setImageOrientation;
  *(_QWORD *)(v184 + 40) = 0;
  v305[182] = v184;
  v185 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v185 + 8) = 324;
  *(_QWORD *)(v185 + 16) = WebCore::RenderStyle::initialLetter;
  *(_QWORD *)(v185 + 24) = 0;
  *(_QWORD *)v185 = off_1E338F998;
  *(_QWORD *)(v185 + 32) = WebCore::RenderStyle::setInitialLetter;
  *(_QWORD *)(v185 + 40) = 0;
  v305[183] = v185;
  v186 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v186 + 8) = 148;
  *(_QWORD *)(v186 + 16) = WebCore::RenderStyle::justifyContent;
  *(_QWORD *)(v186 + 24) = 0;
  *(_QWORD *)v186 = off_1E338F098;
  *(_QWORD *)(v186 + 32) = WebCore::RenderStyle::setJustifyContent;
  *(_QWORD *)(v186 + 40) = 0;
  v305[184] = v186;
  v187 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v187 + 8) = 149;
  *(_QWORD *)(v187 + 16) = WebCore::RenderStyle::justifyItems;
  *(_QWORD *)(v187 + 24) = 0;
  *(_QWORD *)v187 = off_1E338F0F8;
  *(_QWORD *)(v187 + 32) = WebCore::RenderStyle::setJustifyItems;
  *(_QWORD *)(v187 + 40) = 0;
  v305[185] = v187;
  v188 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v188 + 8) = 150;
  *(_QWORD *)(v188 + 16) = WebCore::RenderStyle::justifySelf;
  *(_QWORD *)(v188 + 24) = 0;
  *(_QWORD *)v188 = off_1E338F0F8;
  *(_QWORD *)(v188 + 32) = WebCore::RenderStyle::setJustifySelf;
  *(_QWORD *)(v188 + 40) = 0;
  v305[186] = v188;
  v189 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v189 + 8) = 153;
  *(_QWORD *)(v189 + 16) = WebCore::RenderStyle::lineBreak;
  *(_QWORD *)(v189 + 24) = 0;
  *(_QWORD *)v189 = off_1E338F9F8;
  *(_QWORD *)(v189 + 32) = WebCore::RenderStyle::setLineBreak;
  *(_QWORD *)(v189 + 40) = 0;
  v305[187] = v189;
  v190 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v190 + 8) = 156;
  *(_QWORD *)(v190 + 16) = WebCore::RenderStyle::listStylePosition;
  *(_QWORD *)(v190 + 24) = 0;
  *(_QWORD *)v190 = off_1E338FA58;
  *(_QWORD *)(v190 + 32) = WebCore::RenderStyle::setListStylePosition;
  *(_QWORD *)(v190 + 40) = 0;
  v305[188] = v190;
  v191 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v191 + 8) = 157;
  *(_QWORD *)(v191 + 16) = WebCore::RenderStyle::listStyleType;
  *(_QWORD *)(v191 + 24) = 0;
  *(_QWORD *)v191 = off_1E338FAB8;
  *(_QWORD *)(v191 + 32) = WebCore::RenderStyle::setListStyleType;
  *(_QWORD *)(v191 + 40) = 0;
  v305[189] = v191;
  v192 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v192 + 8) = 176;
  *(_QWORD *)(v192 + 16) = WebCore::RenderStyle::objectFit;
  *(_QWORD *)(v192 + 24) = 0;
  *(_QWORD *)v192 = off_1E338FB18;
  *(_QWORD *)(v192 + 32) = WebCore::RenderStyle::setObjectFit;
  *(_QWORD *)(v192 + 40) = 0;
  v305[190] = v192;
  v193 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v193 + 8) = 188;
  *(_QWORD *)(v193 + 16) = WebCore::RenderStyle::outlineStyle;
  *(_QWORD *)(v193 + 24) = 0;
  *(_QWORD *)v193 = off_1E338F278;
  *(_QWORD *)(v193 + 32) = WebCore::RenderStyle::setOutlineStyle;
  *(_QWORD *)(v193 + 40) = 0;
  v305[191] = v193;
  v194 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v194 + 8) = 191;
  *(_QWORD *)(v194 + 16) = WebCore::RenderStyle::overflowWrap;
  *(_QWORD *)(v194 + 24) = 0;
  *(_QWORD *)v194 = off_1E338FB78;
  *(_QWORD *)(v194 + 32) = WebCore::RenderStyle::setOverflowWrap;
  *(_QWORD *)(v194 + 40) = 0;
  v305[192] = v194;
  v195 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v195 + 8) = 192;
  *(_QWORD *)(v195 + 16) = WebCore::RenderStyle::overflowX;
  *(_QWORD *)(v195 + 24) = 0;
  *(_QWORD *)v195 = off_1E338FBD8;
  *(_QWORD *)(v195 + 32) = WebCore::RenderStyle::setOverflowX;
  *(_QWORD *)(v195 + 40) = 0;
  v305[193] = v195;
  v196 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v196 + 8) = 193;
  *(_QWORD *)(v196 + 16) = WebCore::RenderStyle::overflowY;
  *(_QWORD *)(v196 + 24) = 0;
  *(_QWORD *)v196 = off_1E338FBD8;
  *(_QWORD *)(v196 + 32) = WebCore::RenderStyle::setOverflowY;
  *(_QWORD *)(v196 + 40) = 0;
  v305[194] = v196;
  v197 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v197 + 8) = 78;
  *(_QWORD *)(v197 + 16) = WebCore::RenderStyle::breakAfter;
  *(_QWORD *)(v197 + 24) = 0;
  *(_QWORD *)v197 = off_1E338FC38;
  *(_QWORD *)(v197 + 32) = WebCore::RenderStyle::setBreakAfter;
  *(_QWORD *)(v197 + 40) = 0;
  v305[195] = v197;
  v198 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v198 + 8) = 79;
  *(_QWORD *)(v198 + 16) = WebCore::RenderStyle::breakBefore;
  *(_QWORD *)(v198 + 24) = 0;
  *(_QWORD *)v198 = off_1E338FC38;
  *(_QWORD *)(v198 + 32) = WebCore::RenderStyle::setBreakBefore;
  *(_QWORD *)(v198 + 40) = 0;
  v305[196] = v198;
  v199 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v199 + 8) = 80;
  *(_QWORD *)(v199 + 16) = WebCore::RenderStyle::breakInside;
  *(_QWORD *)(v199 + 24) = 0;
  *(_QWORD *)v199 = off_1E338FC98;
  *(_QWORD *)(v199 + 32) = WebCore::RenderStyle::setBreakInside;
  *(_QWORD *)(v199 + 40) = 0;
  v305[197] = v199;
  v200 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v200 + 8) = 197;
  *(_QWORD *)(v200 + 16) = WebCore::RenderStyle::paintOrder;
  *(_QWORD *)(v200 + 24) = 0;
  *(_QWORD *)v200 = off_1E338FCF8;
  *(_QWORD *)(v200 + 32) = WebCore::RenderStyle::setPaintOrder;
  *(_QWORD *)(v200 + 40) = 0;
  v305[198] = v200;
  v201 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v201 + 8) = 201;
  *(_QWORD *)(v201 + 16) = WebCore::RenderStyle::pointerEvents;
  *(_QWORD *)(v201 + 24) = 0;
  *(_QWORD *)v201 = off_1E338FD58;
  *(_QWORD *)(v201 + 32) = WebCore::RenderStyle::setPointerEvents;
  *(_QWORD *)(v201 + 40) = 0;
  v305[199] = v201;
  v202 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v202 + 8) = 202;
  *(_QWORD *)(v202 + 16) = WebCore::RenderStyle::position;
  *(_QWORD *)(v202 + 24) = 0;
  *(_QWORD *)v202 = off_1E338FDB8;
  *(_QWORD *)(v202 + 32) = WebCore::RenderStyle::setPosition;
  *(_QWORD *)(v202 + 40) = 0;
  v305[200] = v202;
  v203 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v203 + 8) = 209;
  *(_QWORD *)(v203 + 16) = WebCore::RenderStyle::resize;
  *(_QWORD *)(v203 + 24) = 0;
  *(_QWORD *)v203 = off_1E338FE18;
  *(_QWORD *)(v203 + 32) = WebCore::RenderStyle::setResize;
  *(_QWORD *)(v203 + 40) = 0;
  v305[201] = v203;
  v204 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v204 + 8) = 4;
  *(_QWORD *)(v204 + 16) = WebCore::RenderStyle::rubyPosition;
  *(_QWORD *)(v204 + 24) = 0;
  *(_QWORD *)v204 = off_1E338FE78;
  *(_QWORD *)(v204 + 32) = WebCore::RenderStyle::setRubyPosition;
  *(_QWORD *)(v204 + 40) = 0;
  v305[202] = v204;
  v205 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v205 + 8) = 248;
  *(_QWORD *)(v205 + 16) = WebCore::RenderStyle::tableLayout;
  *(_QWORD *)(v205 + 24) = 0;
  *(_QWORD *)v205 = off_1E338FED8;
  *(_QWORD *)(v205 + 32) = WebCore::RenderStyle::setTableLayout;
  *(_QWORD *)(v205 + 40) = 0;
  v305[203] = v205;
  v206 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v206 + 8) = 249;
  *(_QWORD *)(v206 + 16) = WebCore::RenderStyle::textAlign;
  *(_QWORD *)(v206 + 24) = 0;
  *(_QWORD *)v206 = off_1E338FF38;
  *(_QWORD *)(v206 + 32) = WebCore::RenderStyle::setTextAlign;
  *(_QWORD *)(v206 + 40) = 0;
  v305[204] = v206;
  v207 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v207 + 8) = 250;
  *(_QWORD *)(v207 + 16) = WebCore::RenderStyle::textAlignLast;
  *(_QWORD *)(v207 + 24) = 0;
  *(_QWORD *)v207 = off_1E338FF98;
  *(_QWORD *)(v207 + 32) = WebCore::RenderStyle::setTextAlignLast;
  *(_QWORD *)(v207 + 40) = 0;
  v305[205] = v207;
  v208 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v208 + 8) = 255;
  *(_QWORD *)(v208 + 16) = WebCore::RenderStyle::textDecorationLine;
  *(_QWORD *)(v208 + 24) = 0;
  *(_QWORD *)v208 = off_1E338FFF8;
  *(_QWORD *)(v208 + 32) = WebCore::RenderStyle::setTextDecorationLine;
  *(_QWORD *)(v208 + 40) = 0;
  v305[206] = v208;
  v209 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v209 + 8) = 257;
  *(_QWORD *)(v209 + 16) = WebCore::RenderStyle::textDecorationStyle;
  *(_QWORD *)(v209 + 24) = 0;
  *(_QWORD *)v209 = off_1E3390058;
  *(_QWORD *)(v209 + 32) = WebCore::RenderStyle::setTextDecorationStyle;
  *(_QWORD *)(v209 + 40) = 0;
  v305[207] = v209;
  v210 = WTF::fastMalloc((WTF *)0x20);
  v305[208] = WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(v210, 259, (uint64_t)WebCore::RenderStyle::textEmphasisColor, 0, (uint64_t)WebCore::RenderStyle::setTextEmphasisColor, 0, (uint64_t)WebCore::RenderStyle::visitedLinkTextEmphasisColor, 0, (uint64_t)WebCore::RenderStyle::setVisitedLinkTextEmphasisColor, 0);
  v211 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v211 + 8) = 260;
  *(_QWORD *)(v211 + 16) = WebCore::RenderStyle::textEmphasisPosition;
  *(_QWORD *)(v211 + 24) = 0;
  *(_QWORD *)v211 = off_1E33900B8;
  *(_QWORD *)(v211 + 32) = WebCore::RenderStyle::setTextEmphasisPosition;
  *(_QWORD *)(v211 + 40) = 0;
  v305[209] = v211;
  v212 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v212 + 8) = 261;
  *(_QWORD *)(v212 + 16) = WebCore::RenderStyle::textEmphasisMark;
  *(_QWORD *)(v212 + 24) = 0;
  *(_QWORD *)(v212 + 32) = WebCore::RenderStyle::setTextEmphasisMark;
  *(_QWORD *)(v212 + 40) = 0;
  *(_QWORD *)v212 = off_1E338E308;
  v305[210] = v212;
  v213 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v213 + 8) = 262;
  *(_QWORD *)(v213 + 16) = WebCore::RenderStyle::textGroupAlign;
  *(_QWORD *)(v213 + 24) = 0;
  *(_QWORD *)v213 = off_1E3390118;
  *(_QWORD *)(v213 + 32) = WebCore::RenderStyle::setTextGroupAlign;
  *(_QWORD *)(v213 + 40) = 0;
  v305[211] = v213;
  v214 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v214 + 8) = 264;
  *(_QWORD *)(v214 + 16) = WebCore::RenderStyle::textJustify;
  *(_QWORD *)(v214 + 24) = 0;
  *(_QWORD *)v214 = off_1E3390178;
  *(_QWORD *)(v214 + 32) = WebCore::RenderStyle::setTextJustify;
  *(_QWORD *)(v214 + 40) = 0;
  v305[212] = v214;
  v215 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v215 + 8) = 265;
  *(_QWORD *)(v215 + 16) = WebCore::RenderStyle::textOverflow;
  *(_QWORD *)(v215 + 24) = 0;
  *(_QWORD *)v215 = off_1E33901D8;
  *(_QWORD *)(v215 + 32) = WebCore::RenderStyle::setTextOverflow;
  *(_QWORD *)(v215 + 40) = 0;
  v305[213] = v215;
  v216 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v216 + 8) = 272;
  *(_QWORD *)(v216 + 16) = WebCore::RenderStyle::touchActions;
  *(_QWORD *)(v216 + 24) = 0;
  *(_QWORD *)v216 = off_1E3390238;
  *(_QWORD *)(v216 + 32) = WebCore::RenderStyle::setTouchActions;
  *(_QWORD *)(v216 + 40) = 0;
  v305[214] = v216;
  v217 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v217 + 8) = 267;
  *(_QWORD *)(v217 + 16) = WebCore::RenderStyle::textTransform;
  *(_QWORD *)(v217 + 24) = 0;
  *(_QWORD *)v217 = off_1E3390298;
  *(_QWORD *)(v217 + 32) = WebCore::RenderStyle::setTextTransform;
  *(_QWORD *)(v217 + 40) = 0;
  v305[215] = v217;
  v218 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v218 + 8) = 294;
  *(_QWORD *)(v218 + 16) = WebCore::RenderStyle::whiteSpaceCollapse;
  *(_QWORD *)(v218 + 24) = 0;
  *(_QWORD *)v218 = off_1E33902F8;
  *(_QWORD *)(v218 + 32) = WebCore::RenderStyle::setWhiteSpaceCollapse;
  *(_QWORD *)(v218 + 40) = 0;
  v305[216] = v218;
  v219 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v219 + 8) = 270;
  *(_QWORD *)(v219 + 16) = WebCore::RenderStyle::textWrapMode;
  *(_QWORD *)(v219 + 24) = 0;
  *(_QWORD *)v219 = off_1E3390358;
  *(_QWORD *)(v219 + 32) = WebCore::RenderStyle::setTextWrapMode;
  *(_QWORD *)(v219 + 40) = 0;
  v305[217] = v219;
  v220 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v220 + 8) = 271;
  *(_QWORD *)(v220 + 16) = WebCore::RenderStyle::textWrapStyle;
  *(_QWORD *)(v220 + 24) = 0;
  *(_QWORD *)v220 = off_1E33903B8;
  *(_QWORD *)(v220 + 32) = WebCore::RenderStyle::setTextWrapStyle;
  *(_QWORD *)(v220 + 40) = 0;
  v305[218] = v220;
  v221 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v221 + 8) = 274;
  *(_QWORD *)(v221 + 16) = WebCore::RenderStyle::transformBox;
  *(_QWORD *)(v221 + 24) = 0;
  *(_QWORD *)v221 = off_1E3390418;
  *(_QWORD *)(v221 + 32) = WebCore::RenderStyle::setTransformBox;
  *(_QWORD *)(v221 + 40) = 0;
  v305[219] = v221;
  v222 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v222 + 8) = 278;
  *(_QWORD *)(v222 + 16) = WebCore::RenderStyle::transformStyle3D;
  *(_QWORD *)(v222 + 24) = 0;
  *(_QWORD *)v222 = off_1E3390478;
  *(_QWORD *)(v222 + 32) = WebCore::RenderStyle::setTransformStyle3D;
  *(_QWORD *)(v222 + 40) = 0;
  v305[220] = v222;
  v223 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v223 + 8) = 297;
  *(_QWORD *)(v223 + 16) = WebCore::RenderStyle::wordBreak;
  *(_QWORD *)(v223 + 24) = 0;
  *(_QWORD *)v223 = off_1E33904D8;
  *(_QWORD *)(v223 + 32) = WebCore::RenderStyle::setWordBreak;
  *(_QWORD *)(v223 + 40) = 0;
  v305[221] = v223;
  v224 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v224 + 8) = 190;
  *(_QWORD *)(v224 + 16) = WebCore::RenderStyle::overflowAnchor;
  *(_QWORD *)(v224 + 24) = 0;
  *(_QWORD *)v224 = off_1E3390538;
  *(_QWORD *)(v224 + 32) = WebCore::RenderStyle::setOverflowAnchor;
  *(_QWORD *)(v224 + 40) = 0;
  v305[222] = v224;
  v225 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v225 + 8) = 38;
  *(_QWORD *)(v225 + 16) = WebCore::RenderStyle::textSpacingTrim;
  *(_QWORD *)(v225 + 24) = 0;
  *(_QWORD *)v225 = off_1E3390598;
  *(_QWORD *)(v225 + 32) = WebCore::RenderStyle::setTextSpacingTrim;
  *(_QWORD *)(v225 + 40) = 0;
  v305[223] = v225;
  v226 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v226 + 8) = 37;
  *(_QWORD *)(v226 + 16) = WebCore::RenderStyle::textAutospace;
  *(_QWORD *)(v226 + 24) = 0;
  *(_QWORD *)v226 = off_1E33905F8;
  *(_QWORD *)(v226 + 32) = WebCore::RenderStyle::setTextAutospace;
  *(_QWORD *)(v226 + 40) = 0;
  v305[224] = v226;
  v227 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v227 + 8) = 308;
  *(_QWORD *)(v227 + 16) = WebCore::RenderStyle::boxDecorationBreak;
  *(_QWORD *)(v227 + 24) = 0;
  *(_QWORD *)v227 = off_1E3390658;
  *(_QWORD *)(v227 + 32) = WebCore::RenderStyle::setBoxDecorationBreak;
  *(_QWORD *)(v227 + 40) = 0;
  v305[225] = v227;
  v228 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v228 + 8) = 147;
  *(_QWORD *)(v228 + 16) = WebCore::RenderStyle::isolation;
  *(_QWORD *)(v228 + 24) = 0;
  *(_QWORD *)v228 = off_1E33906B8;
  *(_QWORD *)(v228 + 32) = WebCore::RenderStyle::setIsolation;
  *(_QWORD *)(v228 + 40) = 0;
  v305[226] = v228;
  v229 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v229 + 8) = 174;
  *(_QWORD *)(v229 + 16) = WebCore::RenderStyle::blendMode;
  *(_QWORD *)(v229 + 24) = 0;
  *(_QWORD *)v229 = off_1E3390718;
  *(_QWORD *)(v229 + 32) = WebCore::RenderStyle::setBlendMode;
  *(_QWORD *)(v229 + 40) = 0;
  v305[227] = v229;
  v230 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v230 + 8) = 60;
  *(_QWORD *)(v230 + 16) = WebCore::RenderStyle::backgroundBlendMode;
  *(_QWORD *)(v230 + 24) = 0;
  *(_QWORD *)v230 = off_1E3390718;
  *(_QWORD *)(v230 + 32) = WebCore::RenderStyle::setBackgroundBlendMode;
  *(_QWORD *)(v230 + 40) = 0;
  v305[228] = v230;
  v231 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v231 + 8) = 2;
  *(_QWORD *)(v231 + 16) = WebCore::RenderStyle::colorScheme;
  *(_QWORD *)(v231 + 24) = 0;
  *(_QWORD *)v231 = off_1E3390778;
  *(_QWORD *)(v231 + 32) = WebCore::RenderStyle::setColorScheme;
  *(_QWORD *)(v231 + 40) = 0;
  v305[229] = v231;
  v232 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v232 + 8) = 57;
  *(_QWORD *)v232 = off_1E338E368;
  v305[230] = v232;
  v233 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v233 + 8) = 12;
  *(_QWORD *)(v233 + 16) = WebCore::RenderStyle::fontPalette;
  *(_QWORD *)(v233 + 24) = 0;
  *(_QWORD *)v233 = off_1E33907D8;
  *(_QWORD *)(v233 + 32) = WebCore::RenderStyle::setFontPalette;
  *(_QWORD *)(v233 + 40) = 0;
  v305[231] = v233;
  v234 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v234 + 8) = 180;
  *(_QWORD *)(v234 + 16) = WebCore::RenderStyle::offsetPath;
  *(_QWORD *)(v234 + 24) = 0;
  *(_QWORD *)(v234 + 32) = WebCore::RenderStyle::setOffsetPath;
  *(_QWORD *)(v234 + 40) = 0;
  *(_QWORD *)v234 = off_1E338E3C8;
  v305[232] = v234;
  v235 = WTF::fastMalloc((WTF *)0x38);
  *(_WORD *)(v235 + 8) = 179;
  *(_QWORD *)(v235 + 16) = WebCore::RenderStyle::offsetDistance;
  *(_QWORD *)(v235 + 24) = 0;
  *(_QWORD *)(v235 + 32) = WebCore::RenderStyle::setOffsetDistance;
  *(_QWORD *)(v235 + 40) = 0;
  *(_DWORD *)(v235 + 48) = 1;
  *(_QWORD *)v235 = off_1E338E428;
  v305[233] = v235;
  v236 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v236 + 8) = 181;
  *(_QWORD *)(v236 + 16) = WebCore::RenderStyle::offsetPosition;
  *(_QWORD *)(v236 + 24) = 0;
  *(_QWORD *)(v236 + 32) = WebCore::RenderStyle::setOffsetPosition;
  *(_QWORD *)(v236 + 40) = 0;
  *(_QWORD *)v236 = off_1E338E488;
  v305[234] = v236;
  v237 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v237 + 8) = 178;
  *(_QWORD *)(v237 + 16) = WebCore::RenderStyle::offsetAnchor;
  *(_QWORD *)(v237 + 24) = 0;
  *(_QWORD *)(v237 + 32) = WebCore::RenderStyle::setOffsetAnchor;
  *(_QWORD *)(v237 + 40) = 0;
  *(_QWORD *)v237 = off_1E338E488;
  v305[235] = v237;
  v238 = WTF::fastMalloc((WTF *)0x20);
  *(_WORD *)(v238 + 8) = 182;
  *(_QWORD *)(v238 + 16) = WebCore::RenderStyle::offsetRotate;
  *(_QWORD *)(v238 + 24) = 0;
  *(_QWORD *)v238 = off_1E338E4E8;
  v305[236] = v238;
  v239 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v239 + 8) = 101;
  *(_QWORD *)v239 = off_1E338E548;
  v305[237] = v239;
  v240 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v240 + 8) = 256;
  *(_QWORD *)(v240 + 16) = WebCore::RenderStyle::textDecorationSkipInk;
  *(_QWORD *)(v240 + 24) = 0;
  *(_QWORD *)v240 = off_1E3390838;
  *(_QWORD *)(v240 + 32) = WebCore::RenderStyle::setTextDecorationSkipInk;
  *(_QWORD *)(v240 + 40) = 0;
  v305[238] = v240;
  v241 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v241 + 8) = 88;
  *(_QWORD *)v241 = off_1E3390898;
  *(_QWORD *)(v241 + 16) = WebCore::SVGRenderStyle::colorInterpolation;
  *(_QWORD *)(v241 + 24) = 0;
  *(_QWORD *)(v241 + 32) = WebCore::SVGRenderStyle::setColorInterpolation;
  *(_QWORD *)(v241 + 40) = 0;
  v305[239] = v241;
  v242 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v242 + 8) = 10;
  *(_QWORD *)v242 = off_1E33908F8;
  *(_QWORD *)(v242 + 16) = WebCore::FontCascadeDescription::kerning;
  *(_QWORD *)(v242 + 24) = 0;
  *(_QWORD *)(v242 + 32) = WebCore::FontCascadeDescription::setKerning;
  *(_QWORD *)(v242 + 40) = 0;
  v305[240] = v242;
  v243 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v243 + 8) = 9;
  *(_QWORD *)v243 = off_1E338E5A8;
  v305[241] = v243;
  v244 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v244 + 8) = 8;
  *(_QWORD *)v244 = off_1E338E618;
  v305[242] = v244;
  v245 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v245 + 8) = 87;
  *(_QWORD *)v245 = off_1E3390968;
  *(_QWORD *)(v245 + 16) = WebCore::SVGRenderStyle::clipRule;
  *(_QWORD *)(v245 + 24) = 0;
  *(_QWORD *)(v245 + 32) = WebCore::SVGRenderStyle::setClipRule;
  *(_QWORD *)(v245 + 40) = 0;
  v305[243] = v245;
  v246 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v246 + 8) = 89;
  *(_QWORD *)v246 = off_1E3390898;
  *(_QWORD *)(v246 + 16) = WebCore::SVGRenderStyle::colorInterpolationFilters;
  *(_QWORD *)(v246 + 24) = 0;
  *(_QWORD *)(v246 + 32) = WebCore::SVGRenderStyle::setColorInterpolationFilters;
  *(_QWORD *)(v246 + 40) = 0;
  v305[244] = v246;
  v247 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v247 + 8) = 110;
  *(_QWORD *)v247 = off_1E33909C8;
  *(_QWORD *)(v247 + 16) = WebCore::SVGRenderStyle::dominantBaseline;
  *(_QWORD *)(v247 + 24) = 0;
  *(_QWORD *)(v247 + 32) = WebCore::SVGRenderStyle::setDominantBaseline;
  *(_QWORD *)(v247 + 40) = 0;
  v305[245] = v247;
  v248 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v248 + 8) = 103;
  *(_QWORD *)v248 = off_1E338E688;
  v305[246] = v248;
  v249 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v249 + 8) = 104;
  *(_QWORD *)v249 = off_1E338E688;
  v305[247] = v249;
  v250 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v250 + 8) = 105;
  *(_QWORD *)v250 = off_1E338E688;
  v305[248] = v250;
  v251 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v251 + 8) = 116;
  *(_QWORD *)v251 = off_1E3390968;
  *(_QWORD *)(v251 + 16) = WebCore::SVGRenderStyle::fillRule;
  *(_QWORD *)(v251 + 24) = 0;
  *(_QWORD *)(v251 + 32) = WebCore::SVGRenderStyle::setFillRule;
  *(_QWORD *)(v251 + 40) = 0;
  v305[249] = v251;
  v252 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v252 + 8) = 19;
  *(_QWORD *)v252 = off_1E3390A28;
  *(_QWORD *)(v252 + 16) = WebCore::FontDescription::fontSynthesisWeight;
  *(_QWORD *)(v252 + 24) = 0;
  *(_QWORD *)(v252 + 32) = WebCore::FontDescription::setFontSynthesisWeight;
  *(_QWORD *)(v252 + 40) = 0;
  v305[250] = v252;
  v253 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v253 + 8) = 18;
  *(_QWORD *)v253 = off_1E3390A28;
  *(_QWORD *)(v253 + 16) = WebCore::FontDescription::fontSynthesisStyle;
  *(_QWORD *)(v253 + 24) = 0;
  *(_QWORD *)(v253 + 32) = WebCore::FontDescription::setFontSynthesisStyle;
  *(_QWORD *)(v253 + 40) = 0;
  v305[251] = v253;
  v254 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v254 + 8) = 17;
  *(_QWORD *)v254 = off_1E3390A28;
  *(_QWORD *)(v254 + 16) = WebCore::FontDescription::fontSynthesisSmallCaps;
  *(_QWORD *)(v254 + 24) = 0;
  *(_QWORD *)(v254 + 32) = WebCore::FontDescription::setFontSynthesisSmallCaps;
  *(_QWORD *)(v254 + 40) = 0;
  v305[252] = v254;
  v255 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v255 + 8) = 20;
  *(_QWORD *)v255 = off_1E3390A98;
  *(_QWORD *)(v255 + 16) = WebCore::FontDescription::variantAlternates;
  *(_QWORD *)(v255 + 24) = 0;
  *(_QWORD *)(v255 + 32) = WebCore::FontDescription::setVariantAlternates;
  *(_QWORD *)(v255 + 40) = 0;
  v305[253] = v255;
  v256 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v256 + 8) = 22;
  *(_QWORD *)v256 = off_1E338E6E8;
  v305[254] = v256;
  v257 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v257 + 8) = 24;
  *(_QWORD *)v257 = off_1E338E758;
  v305[255] = v257;
  v258 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v258 + 8) = 25;
  *(_QWORD *)v258 = off_1E338E7C8;
  v305[256] = v258;
  v259 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v259 + 8) = 26;
  *(_QWORD *)v259 = off_1E3390B08;
  *(_QWORD *)(v259 + 16) = WebCore::FontDescription::variantPosition;
  *(_QWORD *)(v259 + 24) = 0;
  *(_QWORD *)(v259 + 32) = WebCore::FontDescription::setVariantPosition;
  *(_QWORD *)(v259 + 40) = 0;
  v305[257] = v259;
  v260 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v260 + 8) = 21;
  *(_QWORD *)v260 = off_1E3390B78;
  *(_QWORD *)(v260 + 16) = WebCore::FontDescription::variantCaps;
  *(_QWORD *)(v260 + 24) = 0;
  *(_QWORD *)(v260 + 32) = WebCore::FontDescription::setVariantCaps;
  *(_QWORD *)(v260 + 40) = 0;
  v305[258] = v260;
  v261 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v261 + 8) = 23;
  *(_QWORD *)v261 = off_1E3390BE8;
  *(_QWORD *)(v261 + 16) = WebCore::FontDescription::variantEmoji;
  *(_QWORD *)(v261 + 24) = 0;
  *(_QWORD *)(v261 + 32) = WebCore::FontDescription::setVariantEmoji;
  *(_QWORD *)(v261 + 40) = 0;
  v305[259] = v261;
  v262 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v262 + 8) = 136;
  *(_QWORD *)v262 = off_1E338E838;
  v305[260] = v262;
  v263 = WTF::fastMalloc((WTF *)0x10);
  *(_WORD *)(v263 + 8) = 206;
  *(_QWORD *)v263 = off_1E338E898;
  v305[261] = v263;
  v264 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v264 + 8) = 215;
  *(_QWORD *)(v264 + 16) = WebCore::RenderStyle::useSmoothScrolling;
  *(_QWORD *)(v264 + 24) = 0;
  *(_QWORD *)v264 = off_1E3390C58;
  *(_QWORD *)(v264 + 32) = WebCore::RenderStyle::setUseSmoothScrolling;
  *(_QWORD *)(v264 + 40) = 0;
  v305[262] = v264;
  v265 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v265 + 8) = 30;
  *(_QWORD *)v265 = off_1E3390CB8;
  *(_QWORD *)(v265 + 16) = WebCore::FontDescription::textRenderingMode;
  *(_QWORD *)(v265 + 24) = 0;
  *(_QWORD *)(v265 + 32) = WebCore::FontDescription::setTextRenderingMode;
  *(_QWORD *)(v265 + 40) = 0;
  v305[263] = v265;
  v266 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v266 + 8) = 171;
  *(_QWORD *)v266 = off_1E3390D28;
  *(_QWORD *)(v266 + 16) = WebCore::SVGRenderStyle::maskType;
  *(_QWORD *)(v266 + 24) = 0;
  *(_QWORD *)(v266 + 32) = WebCore::SVGRenderStyle::setMaskType;
  *(_QWORD *)(v266 + 40) = 0;
  v305[264] = v266;
  v267 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v267 + 8) = 238;
  *(_QWORD *)(v267 + 16) = WebCore::RenderStyle::capStyle;
  *(_QWORD *)(v267 + 24) = 0;
  *(_QWORD *)v267 = off_1E3390D88;
  *(_QWORD *)(v267 + 32) = WebCore::RenderStyle::setCapStyle;
  *(_QWORD *)(v267 + 40) = 0;
  v305[265] = v267;
  v268 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v268 + 8) = 239;
  *(_QWORD *)(v268 + 16) = WebCore::RenderStyle::joinStyle;
  *(_QWORD *)(v268 + 24) = 0;
  *(_QWORD *)v268 = off_1E3390DE8;
  *(_QWORD *)(v268 + 32) = WebCore::RenderStyle::setJoinStyle;
  *(_QWORD *)(v268 + 40) = 0;
  v305[266] = v268;
  v269 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v269 + 8) = 251;
  *(_QWORD *)v269 = off_1E3390E48;
  *(_QWORD *)(v269 + 16) = WebCore::SVGRenderStyle::textAnchor;
  *(_QWORD *)(v269 + 24) = 0;
  *(_QWORD *)(v269 + 32) = WebCore::SVGRenderStyle::setTextAnchor;
  *(_QWORD *)(v269 + 40) = 0;
  v305[267] = v269;
  v270 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v270 + 8) = 287;
  *(_QWORD *)v270 = off_1E3390EA8;
  *(_QWORD *)(v270 + 16) = WebCore::SVGRenderStyle::vectorEffect;
  *(_QWORD *)(v270 + 24) = 0;
  *(_QWORD *)(v270 + 32) = WebCore::SVGRenderStyle::setVectorEffect;
  *(_QWORD *)(v270 + 40) = 0;
  v305[268] = v270;
  v271 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v271 + 8) = 227;
  *(_QWORD *)v271 = off_1E3390F08;
  *(_QWORD *)(v271 + 16) = WebCore::SVGRenderStyle::shapeRendering;
  *(_QWORD *)(v271 + 24) = 0;
  *(_QWORD *)(v271 + 32) = WebCore::SVGRenderStyle::setShapeRendering;
  *(_QWORD *)(v271 + 40) = 0;
  v305[269] = v271;
  v272 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v272 + 8) = 159;
  *(_QWORD *)v272 = off_1E3390F68;
  *(_QWORD *)(v272 + 16) = WebCore::SVGRenderStyle::markerEndResource;
  *(_QWORD *)(v272 + 24) = 0;
  *(_QWORD *)(v272 + 32) = WebCore::SVGRenderStyle::setMarkerEndResource;
  *(_QWORD *)(v272 + 40) = 0;
  v305[270] = v272;
  v273 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v273 + 8) = 160;
  *(_QWORD *)v273 = off_1E3390F68;
  *(_QWORD *)(v273 + 16) = WebCore::SVGRenderStyle::markerMidResource;
  *(_QWORD *)(v273 + 24) = 0;
  *(_QWORD *)(v273 + 32) = WebCore::SVGRenderStyle::setMarkerMidResource;
  *(_QWORD *)(v273 + 40) = 0;
  v305[271] = v273;
  v274 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v274 + 8) = 161;
  *(_QWORD *)v274 = off_1E3390F68;
  *(_QWORD *)(v274 + 16) = WebCore::SVGRenderStyle::markerStartResource;
  *(_QWORD *)(v274 + 24) = 0;
  *(_QWORD *)(v274 + 32) = WebCore::SVGRenderStyle::setMarkerStartResource;
  *(_QWORD *)(v274 + 40) = 0;
  v305[272] = v274;
  v275 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v275 + 8) = 222;
  *(_QWORD *)(v275 + 16) = WebCore::RenderStyle::scrollbarGutter;
  *(_QWORD *)(v275 + 24) = 0;
  *(_QWORD *)v275 = off_1E3390FC8;
  *(_QWORD *)(v275 + 32) = WebCore::RenderStyle::setScrollbarGutter;
  *(_QWORD *)(v275 + 40) = 0;
  v305[273] = v275;
  v276 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v276 + 8) = 223;
  *(_QWORD *)(v276 + 16) = WebCore::RenderStyle::scrollbarWidth;
  *(_QWORD *)(v276 + 24) = 0;
  *(_QWORD *)v276 = off_1E3391028;
  *(_QWORD *)(v276 + 32) = WebCore::RenderStyle::setScrollbarWidth;
  *(_QWORD *)(v276 + 40) = 0;
  v305[274] = v276;
  v277 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v277 + 8) = 292;
  *(_QWORD *)(v277 + 16) = WebCore::RenderStyle::viewTransitionName;
  *(_QWORD *)(v277 + 24) = 0;
  *(_QWORD *)v277 = off_1E3391088;
  *(_QWORD *)(v277 + 32) = WebCore::RenderStyle::setViewTransitionName;
  *(_QWORD *)(v277 + 40) = 0;
  v305[275] = v277;
  v278 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v278 + 8) = 113;
  *(_QWORD *)(v278 + 16) = WebCore::RenderStyle::fieldSizing;
  *(_QWORD *)(v278 + 24) = 0;
  *(_QWORD *)v278 = off_1E33910E8;
  *(_QWORD *)(v278 + 32) = WebCore::RenderStyle::setFieldSizing;
  *(_QWORD *)(v278 + 40) = 0;
  v305[276] = v278;
  v279 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v279 + 8) = 45;
  *(_QWORD *)(v279 + 16) = WebCore::RenderStyle::anchorNames;
  *(_QWORD *)(v279 + 24) = 0;
  *(_QWORD *)v279 = off_1E3391148;
  *(_QWORD *)(v279 + 32) = WebCore::RenderStyle::setAnchorNames;
  *(_QWORD *)(v279 + 40) = 0;
  v305[277] = v279;
  v280 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v280 + 8) = 203;
  *(_QWORD *)(v280 + 16) = WebCore::RenderStyle::positionAnchor;
  *(_QWORD *)(v280 + 24) = 0;
  *(_QWORD *)v280 = off_1E33911A8;
  *(_QWORD *)(v280 + 32) = WebCore::RenderStyle::setPositionAnchor;
  *(_QWORD *)(v280 + 40) = 0;
  v305[278] = v280;
  memset(&unk_1ECE822D0, 255, 0x450uLL);
  v281 = WTF::fastMalloc((WTF *)0xA10);
  dword_1ECE822C8 = 322;
  qword_1ECE822C0 = v281;
  v303 = 0;
  v301 = (char *)&qword_1ECE822C0;
  v302 = &v303;
  WTF::Vector<std::unique_ptr<WebCore::AnimationPropertyWrapperBase>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendContainerWithMapping<WebCore::AnimationPropertyWrapperBase*(&)[279],WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap(void)::$_0>((uint64_t)v305, (uint64_t *)&v301);
  for (i = 0; i != 43; ++i)
  {
    v283 = WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap(void)::animatableShorthandProperties[i];
    result = (unsigned __int16 *)WebCore::shorthandForProperty(WebCore::CSSPropertyAnimationWrapperMap::CSSPropertyAnimationWrapperMap(void)::animatableShorthandProperties[i]);
    v286 = v285;
    if (v285)
    {
      v302 = 0;
      if (v285 >> 29)
      {
        __break(0xC471u);
        JUMPOUT(0x1944F1188);
      }
      v287 = result;
      v288 = (char *)WTF::fastMalloc((WTF *)(8 * v285));
      v290 = 0;
      LODWORD(v302) = v286;
      v301 = v288;
      v291 = 2 * v286;
      do
      {
        v292 = *(unsigned __int16 *)&_MergedGlobals_154[2 * *v287 + 284];
        if (v292 != 0xFFFF)
        {
          if (dword_1ECE822CC <= v292)
          {
            __break(0xC471u);
            JUMPOUT(0x1944F1180);
          }
          v293 = *(WTF **)(qword_1ECE822C0 + 8 * *(unsigned __int16 *)&_MergedGlobals_154[2 * *v287 + 284]);
          v304 = v293;
          if (v290 == (_DWORD)v302)
          {
            v297 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v301, v290 + 1, (unint64_t)&v304);
            v290 = HIDWORD(v302);
            v288 = v301;
            *(_QWORD *)&v301[8 * HIDWORD(v302)] = *(_QWORD *)v297;
          }
          else
          {
            *(_QWORD *)&v288[8 * v290] = v293;
          }
          HIDWORD(v302) = ++v290;
        }
        ++v287;
        v291 -= 2;
      }
      while (v291);
      if (v302 > v290)
      {
        if (v290)
        {
          LODWORD(v302) = v290;
          v301 = (char *)WTF::fastRealloc((WTF *)v288, (void *)(8 * v290));
        }
        else if (v288)
        {
          v301 = 0;
          LODWORD(v302) = 0;
          WTF::fastFree((WTF *)v288, v289);
        }
      }
      result = (unsigned __int16 *)WTF::fastMalloc((WTF *)0x20);
      v294 = v301;
      v301 = 0;
      result[4] = v283;
      *(_QWORD *)result = off_1E338E8F8;
      *((_QWORD *)result + 2) = v294;
      v295 = v302;
      LODWORD(v302) = 0;
      *((_QWORD *)result + 3) = v295;
      v304 = (WTF *)result;
      v296 = dword_1ECE822CC;
      if (dword_1ECE822CC == dword_1ECE822C8)
      {
        result = (unsigned __int16 *)WTF::Vector<std::unique_ptr<WebCore::AnimationPropertyWrapperBase>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::ShorthandPropertyWrapper>>((uint64_t *)&v304);
        v299 = v304;
        if (v304)
        {
          v300 = (WTF *)*((_QWORD *)v304 + 2);
          if (v300)
          {
            *((_QWORD *)v304 + 2) = 0;
            *((_DWORD *)v299 + 6) = 0;
            WTF::fastFree(v300, v298);
          }
          result = (unsigned __int16 *)WTF::fastFree(v299, v298);
        }
      }
      else
      {
        *(_QWORD *)(qword_1ECE822C0 + 8 * dword_1ECE822CC) = result;
        dword_1ECE822CC = v296 + 1;
      }
      *(_WORD *)&_MergedGlobals_154[2 * v283 + 284] = i + 279;
    }
  }
  return result;
}

uint64_t WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;
  char v14;

  v6 = a2;
  *(_WORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1E338D4A8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a5;
  *(_QWORD *)(a1 + 48) = a6;
  if (a2 > 334)
  {
    if (a2 > 408)
    {
      if (a2 == 409)
      {
        v8 = WTF::fastMalloc((WTF *)0x30);
        v9 = v8;
        *(_WORD *)(v8 + 8) = 409;
        *(_QWORD *)v8 = off_1E338D5E8;
        *(_QWORD *)(v8 + 16) = WebCore::FillLayer::composite;
        *(_QWORD *)(v8 + 24) = 0;
        v10 = WebCore::FillLayer::setComposite;
        goto LABEL_17;
      }
      if (a2 == 410)
      {
        v8 = WTF::fastMalloc((WTF *)0x30);
        v9 = v8;
        *(_WORD *)(v8 + 8) = 410;
        *(_QWORD *)v8 = off_1E338D620;
        *(_QWORD *)(v8 + 16) = WebCore::FillLayer::maskMode;
        *(_QWORD *)(v8 + 24) = 0;
        v10 = WebCore::FillLayer::setMaskMode;
        goto LABEL_17;
      }
      if (a2 != 541)
        return a1;
      goto LABEL_16;
    }
    switch(a2)
    {
      case 335:
LABEL_21:
        v13 = WTF::fastMalloc((WTF *)0x58);
        v9 = v13;
        *(_WORD *)(v13 + 8) = v6;
        *(_QWORD *)(v13 + 16) = WebCore::FillLayer::xPosition;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)v13 = off_1E338D508;
        *(_QWORD *)(v13 + 32) = WebCore::FillLayer::setXPosition;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = WebCore::FillLayer::backgroundXOrigin;
        *(_QWORD *)(v13 + 56) = 0;
        *(_QWORD *)(v13 + 64) = WebCore::FillLayer::setBackgroundXOrigin;
        *(_QWORD *)(v13 + 72) = 0;
        v14 = 1;
        break;
      case 336:
LABEL_22:
        v13 = WTF::fastMalloc((WTF *)0x58);
        v9 = v13;
        *(_WORD *)(v13 + 8) = v6;
        *(_QWORD *)(v13 + 16) = WebCore::FillLayer::yPosition;
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)v13 = off_1E338D508;
        *(_QWORD *)(v13 + 32) = WebCore::FillLayer::setYPosition;
        *(_QWORD *)(v13 + 40) = 0;
        *(_QWORD *)(v13 + 48) = WebCore::FillLayer::backgroundYOrigin;
        *(_QWORD *)(v13 + 56) = 0;
        *(_QWORD *)(v13 + 64) = WebCore::FillLayer::setBackgroundYOrigin;
        *(_QWORD *)(v13 + 72) = 0;
        v14 = 2;
        break;
      case 408:
        v8 = WTF::fastMalloc((WTF *)0x30);
        v9 = v8;
        *(_WORD *)(v8 + 8) = 408;
        *(_QWORD *)v8 = off_1E338D5B0;
        *(_QWORD *)(v8 + 16) = WebCore::FillLayer::clip;
        *(_QWORD *)(v8 + 24) = 0;
        v10 = WebCore::FillLayer::setClip;
        goto LABEL_17;
      default:
        return a1;
    }
    *(_BYTE *)(v13 + 80) = v14;
LABEL_18:
    v11 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return a1;
  }
  if (a2 > 166)
  {
    if (a2 != 167)
    {
      if (a2 == 168)
      {
        v8 = WTF::fastMalloc((WTF *)0x30);
        v9 = v8;
        *(_WORD *)(v8 + 8) = 168;
        *(_QWORD *)v8 = off_1E338D5B0;
        *(_QWORD *)(v8 + 16) = WebCore::FillLayer::origin;
        *(_QWORD *)(v8 + 24) = 0;
        v10 = WebCore::FillLayer::setOrigin;
        goto LABEL_17;
      }
      if (a2 != 170)
        return a1;
LABEL_16:
      v8 = WTF::fastMalloc((WTF *)0x30);
      v9 = v8;
      *(_WORD *)(v8 + 8) = v6;
      *(_QWORD *)(v8 + 16) = WebCore::FillLayer::sizeLength;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)v8 = off_1E338D540;
      v10 = WebCore::FillLayer::setSizeLength;
LABEL_17:
      *(_QWORD *)(v8 + 32) = v10;
      *(_QWORD *)(v8 + 40) = 0;
      goto LABEL_18;
    }
LABEL_24:
    v9 = WTF::fastMalloc((WTF *)0x30);
    *(_WORD *)(v9 + 8) = v6;
    *(_QWORD *)(v9 + 16) = WebCore::FillLayer::image;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = WebCore::FillLayer::setImage;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)v9 = off_1E338D578;
    goto LABEL_18;
  }
  switch(a2)
  {
    case '>':
      goto LABEL_24;
    case '?':
      goto LABEL_21;
    case '@':
      goto LABEL_22;
    case 'B':
      goto LABEL_16;
    default:
      return a1;
  }
  return a1;
}

uint64_t WebCore::PropertyWrapperVisitedAffectedStyleColor::PropertyWrapperVisitedAffectedStyleColor(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;

  *(_WORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_1E338D328;
  v17 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v17 + 8) = a2;
  *(_QWORD *)v17 = off_1E338D268;
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  *(_QWORD *)(v17 + 32) = a5;
  *(_QWORD *)(v17 + 40) = a6;
  *(_QWORD *)(a1 + 16) = v17;
  v18 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v18 + 8) = a2;
  *(_QWORD *)v18 = off_1E338D268;
  *(_QWORD *)(v18 + 16) = a7;
  *(_QWORD *)(v18 + 24) = a8;
  *(_QWORD *)(v18 + 32) = a9;
  *(_QWORD *)(v18 + 40) = a10;
  *(_QWORD *)(a1 + 24) = v18;
  return a1;
}

uint64_t WebCore::PropertyWrapperVisitedAffectedColor::PropertyWrapperVisitedAffectedColor(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(a1 + 8) = 5;
  *(_QWORD *)a1 = off_1E338D3E8;
  v2 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v2 + 8) = 5;
  *(_QWORD *)v2 = off_1E338D448;
  *(_QWORD *)(v2 + 16) = WebCore::RenderStyle::color;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = WebCore::RenderStyle::setColor;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  v3 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v3 + 8) = 5;
  *(_QWORD *)v3 = off_1E338D448;
  *(_QWORD *)(v3 + 16) = WebCore::RenderStyle::visitedLinkColor;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = WebCore::RenderStyle::setVisitedLinkColor;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v3;
  return a1;
}

WebCore::ScrollbarColorPropertyWrapper *WebCore::ScrollbarColorPropertyWrapper::ScrollbarColorPropertyWrapper(WebCore::ScrollbarColorPropertyWrapper *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_WORD *)this + 4) = 221;
  *(_QWORD *)this = off_1E338D388;
  v2 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v2 + 8) = 221;
  *(_QWORD *)v2 = off_1E338D268;
  *(_QWORD *)(v2 + 16) = WebCore::RenderStyle::scrollbarThumbColor;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = WebCore::RenderStyle::setScrollbarThumbColor;
  *(_QWORD *)(v2 + 40) = 0;
  *((_QWORD *)this + 2) = v2;
  v3 = WTF::fastMalloc((WTF *)0x30);
  *(_WORD *)(v3 + 8) = 221;
  *(_QWORD *)v3 = off_1E338D268;
  *(_QWORD *)(v3 + 16) = WebCore::RenderStyle::scrollbarTrackColor;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = WebCore::RenderStyle::setScrollbarTrackColor;
  *(_QWORD *)(v3 + 40) = 0;
  *((_QWORD *)this + 3) = v3;
  return this;
}

unint64_t WTF::Vector<std::unique_ptr<WebCore::AnimationPropertyWrapperBase>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unint64_t result)
{
  int v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (dword_1ECE822C8 < result)
  {
    v1 = result;
    if (result >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = (void *)qword_1ECE822C0;
      v3 = dword_1ECE822CC;
      v4 = (void *)WTF::fastMalloc((WTF *)(8 * result));
      dword_1ECE822C8 = v1;
      qword_1ECE822C0 = (uint64_t)v4;
      result = (unint64_t)memcpy(v4, v2, 8 * v3);
      if (v2)
      {
        if ((void *)qword_1ECE822C0 == v2)
        {
          qword_1ECE822C0 = 0;
          dword_1ECE822C8 = 0;
        }
        return WTF::fastFree((WTF *)v2, v5);
      }
    }
  }
  return result;
}

uint64_t WebCore::JSBuiltinInternalFunctions::visit<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  WebCore::ReadableByteStreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(a1 + 8, a2);
  WebCore::ReadableStreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(a1 + 288, a2);
  WebCore::StreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(a1 + 680, a2);
  WebCore::TransformStreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(a1 + 832, a2);
  WebCore::WritableStreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(a1 + 992, a2);
  result = WebCore::JSDOMBindingInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(a1 + 1392, a2);
  v5 = *(_QWORD *)(a1 + 1424);
  if (v5)
  {
    if ((v5 & 8) != 0)
    {
      if ((*(_BYTE *)(v5 - 79) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    else
    {
      v6 = v5 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v7 = *(_QWORD *)(a1 + 1424);
        v8 = v5 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
        v5 = v7;
        v6 = v8;
      }
      if (((*(_QWORD *)(v6 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
        return JSC::SlotVisitor::appendSlow();
    }
    if (!*(_QWORD *)(a2 + 168))
      return result;
    return JSC::SlotVisitor::appendSlow();
  }
  return result;
}

uint64_t WebCore::ReadableByteStreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    if ((v4 & 8) != 0)
    {
      if ((*(_BYTE *)(v4 - 79) & 1) != 0)
        goto LABEL_40;
    }
    else
    {
      v38 = v4 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v72 = *(_QWORD *)(result + 8);
        v105 = v4 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v4 & 0xFFFFFFFFFFFFC000));
        v4 = v72;
        v38 = v105;
      }
      if (((*(_QWORD *)(v38 + 8 * ((v4 >> 10) & 0xF) + 40) >> (v4 >> 4)) & 1) != 0)
      {
LABEL_40:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_2;
      }
    }
    result = JSC::SlotVisitor::appendSlow();
  }
LABEL_2:
  v5 = v3[2];
  if (!v5)
    goto LABEL_3;
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(v5 - 79) & 1) != 0)
      goto LABEL_46;
  }
  else
  {
    v39 = v5 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v73 = v3[2];
      v106 = v5 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
      v5 = v73;
      v39 = v106;
    }
    if (((*(_QWORD *)(v39 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) != 0)
    {
LABEL_46:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_3;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_3:
  v6 = v3[3];
  if (!v6)
    goto LABEL_4;
  if ((v6 & 8) != 0)
  {
    if ((*(_BYTE *)(v6 - 79) & 1) != 0)
      goto LABEL_52;
  }
  else
  {
    v40 = v6 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v6 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v74 = v3[3];
      v107 = v6 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v6 & 0xFFFFFFFFFFFFC000));
      v6 = v74;
      v40 = v107;
    }
    if (((*(_QWORD *)(v40 + 8 * ((v6 >> 10) & 0xF) + 40) >> (v6 >> 4)) & 1) != 0)
    {
LABEL_52:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_4;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_4:
  v7 = v3[4];
  if (!v7)
    goto LABEL_5;
  if ((v7 & 8) != 0)
  {
    if ((*(_BYTE *)(v7 - 79) & 1) != 0)
      goto LABEL_58;
  }
  else
  {
    v41 = v7 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v75 = v3[4];
      v108 = v7 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
      v7 = v75;
      v41 = v108;
    }
    if (((*(_QWORD *)(v41 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) != 0)
    {
LABEL_58:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_5;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_5:
  v8 = v3[5];
  if (!v8)
    goto LABEL_6;
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(v8 - 79) & 1) != 0)
      goto LABEL_64;
  }
  else
  {
    v42 = v8 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v76 = v3[5];
      v109 = v8 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v8 & 0xFFFFFFFFFFFFC000));
      v8 = v76;
      v42 = v109;
    }
    if (((*(_QWORD *)(v42 + 8 * ((v8 >> 10) & 0xF) + 40) >> (v8 >> 4)) & 1) != 0)
    {
LABEL_64:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_6;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_6:
  v9 = v3[6];
  if (!v9)
    goto LABEL_7;
  if ((v9 & 8) != 0)
  {
    if ((*(_BYTE *)(v9 - 79) & 1) != 0)
      goto LABEL_70;
  }
  else
  {
    v43 = v9 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v77 = v3[6];
      v110 = v9 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000));
      v9 = v77;
      v43 = v110;
    }
    if (((*(_QWORD *)(v43 + 8 * ((v9 >> 10) & 0xF) + 40) >> (v9 >> 4)) & 1) != 0)
    {
LABEL_70:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_7;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_7:
  v10 = v3[7];
  if (!v10)
    goto LABEL_8;
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) != 0)
      goto LABEL_76;
  }
  else
  {
    v44 = v10 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v78 = v3[7];
      v111 = v10 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000));
      v10 = v78;
      v44 = v111;
    }
    if (((*(_QWORD *)(v44 + 8 * ((v10 >> 10) & 0xF) + 40) >> (v10 >> 4)) & 1) != 0)
    {
LABEL_76:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_8;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_8:
  v11 = v3[8];
  if (!v11)
    goto LABEL_9;
  if ((v11 & 8) != 0)
  {
    if ((*(_BYTE *)(v11 - 79) & 1) != 0)
      goto LABEL_82;
  }
  else
  {
    v45 = v11 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v79 = v3[8];
      v112 = v11 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v11 & 0xFFFFFFFFFFFFC000));
      v11 = v79;
      v45 = v112;
    }
    if (((*(_QWORD *)(v45 + 8 * ((v11 >> 10) & 0xF) + 40) >> (v11 >> 4)) & 1) != 0)
    {
LABEL_82:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_9;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_9:
  v12 = v3[9];
  if (!v12)
    goto LABEL_10;
  if ((v12 & 8) != 0)
  {
    if ((*(_BYTE *)(v12 - 79) & 1) != 0)
      goto LABEL_88;
  }
  else
  {
    v46 = v12 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v80 = v3[9];
      v113 = v12 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000));
      v12 = v80;
      v46 = v113;
    }
    if (((*(_QWORD *)(v46 + 8 * ((v12 >> 10) & 0xF) + 40) >> (v12 >> 4)) & 1) != 0)
    {
LABEL_88:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_10;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_10:
  v13 = v3[10];
  if (!v13)
    goto LABEL_11;
  if ((v13 & 8) != 0)
  {
    if ((*(_BYTE *)(v13 - 79) & 1) != 0)
      goto LABEL_94;
  }
  else
  {
    v47 = v13 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v81 = v3[10];
      v114 = v13 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v13 & 0xFFFFFFFFFFFFC000));
      v13 = v81;
      v47 = v114;
    }
    if (((*(_QWORD *)(v47 + 8 * ((v13 >> 10) & 0xF) + 40) >> (v13 >> 4)) & 1) != 0)
    {
LABEL_94:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_11;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_11:
  v14 = v3[11];
  if (!v14)
    goto LABEL_12;
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) != 0)
      goto LABEL_100;
  }
  else
  {
    v48 = v14 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v82 = v3[11];
      v115 = v14 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000));
      v14 = v82;
      v48 = v115;
    }
    if (((*(_QWORD *)(v48 + 8 * ((v14 >> 10) & 0xF) + 40) >> (v14 >> 4)) & 1) != 0)
    {
LABEL_100:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_12;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_12:
  v15 = v3[12];
  if (!v15)
    goto LABEL_13;
  if ((v15 & 8) != 0)
  {
    if ((*(_BYTE *)(v15 - 79) & 1) != 0)
      goto LABEL_106;
  }
  else
  {
    v49 = v15 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v83 = v3[12];
      v116 = v15 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000));
      v15 = v83;
      v49 = v116;
    }
    if (((*(_QWORD *)(v49 + 8 * ((v15 >> 10) & 0xF) + 40) >> (v15 >> 4)) & 1) != 0)
    {
LABEL_106:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_13;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_13:
  v16 = v3[13];
  if (!v16)
    goto LABEL_14;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_112;
  }
  else
  {
    v50 = v16 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v84 = v3[13];
      v117 = v16 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000));
      v16 = v84;
      v50 = v117;
    }
    if (((*(_QWORD *)(v50 + 8 * ((v16 >> 10) & 0xF) + 40) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_112:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_14;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_14:
  v17 = v3[14];
  if (!v17)
    goto LABEL_15;
  if ((v17 & 8) != 0)
  {
    if ((*(_BYTE *)(v17 - 79) & 1) != 0)
      goto LABEL_118;
  }
  else
  {
    v51 = v17 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v85 = v3[14];
      v118 = v17 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000));
      v17 = v85;
      v51 = v118;
    }
    if (((*(_QWORD *)(v51 + 8 * ((v17 >> 10) & 0xF) + 40) >> (v17 >> 4)) & 1) != 0)
    {
LABEL_118:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_15;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_15:
  v18 = v3[15];
  if (!v18)
    goto LABEL_16;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_124;
  }
  else
  {
    v52 = v18 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v86 = v3[15];
      v119 = v18 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000));
      v18 = v86;
      v52 = v119;
    }
    if (((*(_QWORD *)(v52 + 8 * ((v18 >> 10) & 0xF) + 40) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_124:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_16;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_16:
  v19 = v3[16];
  if (!v19)
    goto LABEL_17;
  if ((v19 & 8) != 0)
  {
    if ((*(_BYTE *)(v19 - 79) & 1) != 0)
      goto LABEL_130;
  }
  else
  {
    v53 = v19 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v87 = v3[16];
      v120 = v19 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000));
      v19 = v87;
      v53 = v120;
    }
    if (((*(_QWORD *)(v53 + 8 * ((v19 >> 10) & 0xF) + 40) >> (v19 >> 4)) & 1) != 0)
    {
LABEL_130:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_17;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_17:
  v20 = v3[17];
  if (!v20)
    goto LABEL_18;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) != 0)
      goto LABEL_136;
  }
  else
  {
    v54 = v20 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v88 = v3[17];
      v121 = v20 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000));
      v20 = v88;
      v54 = v121;
    }
    if (((*(_QWORD *)(v54 + 8 * ((v20 >> 10) & 0xF) + 40) >> (v20 >> 4)) & 1) != 0)
    {
LABEL_136:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_18;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_18:
  v21 = v3[18];
  if (!v21)
    goto LABEL_19;
  if ((v21 & 8) != 0)
  {
    if ((*(_BYTE *)(v21 - 79) & 1) != 0)
      goto LABEL_142;
  }
  else
  {
    v55 = v21 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v89 = v3[18];
      v122 = v21 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000));
      v21 = v89;
      v55 = v122;
    }
    if (((*(_QWORD *)(v55 + 8 * ((v21 >> 10) & 0xF) + 40) >> (v21 >> 4)) & 1) != 0)
    {
LABEL_142:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_19;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_19:
  v22 = v3[19];
  if (!v22)
    goto LABEL_20;
  if ((v22 & 8) != 0)
  {
    if ((*(_BYTE *)(v22 - 79) & 1) != 0)
      goto LABEL_148;
  }
  else
  {
    v56 = v22 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v90 = v3[19];
      v123 = v22 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000));
      v22 = v90;
      v56 = v123;
    }
    if (((*(_QWORD *)(v56 + 8 * ((v22 >> 10) & 0xF) + 40) >> (v22 >> 4)) & 1) != 0)
    {
LABEL_148:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_20;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_20:
  v23 = v3[20];
  if (!v23)
    goto LABEL_21;
  if ((v23 & 8) != 0)
  {
    if ((*(_BYTE *)(v23 - 79) & 1) != 0)
      goto LABEL_154;
  }
  else
  {
    v57 = v23 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v91 = v3[20];
      v124 = v23 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v23 & 0xFFFFFFFFFFFFC000));
      v23 = v91;
      v57 = v124;
    }
    if (((*(_QWORD *)(v57 + 8 * ((v23 >> 10) & 0xF) + 40) >> (v23 >> 4)) & 1) != 0)
    {
LABEL_154:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_21;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_21:
  v24 = v3[21];
  if (!v24)
    goto LABEL_22;
  if ((v24 & 8) != 0)
  {
    if ((*(_BYTE *)(v24 - 79) & 1) != 0)
      goto LABEL_160;
  }
  else
  {
    v58 = v24 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v92 = v3[21];
      v125 = v24 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v24 & 0xFFFFFFFFFFFFC000));
      v24 = v92;
      v58 = v125;
    }
    if (((*(_QWORD *)(v58 + 8 * ((v24 >> 10) & 0xF) + 40) >> (v24 >> 4)) & 1) != 0)
    {
LABEL_160:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_22;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_22:
  v25 = v3[22];
  if (!v25)
    goto LABEL_23;
  if ((v25 & 8) != 0)
  {
    if ((*(_BYTE *)(v25 - 79) & 1) != 0)
      goto LABEL_166;
  }
  else
  {
    v59 = v25 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v93 = v3[22];
      v126 = v25 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000));
      v25 = v93;
      v59 = v126;
    }
    if (((*(_QWORD *)(v59 + 8 * ((v25 >> 10) & 0xF) + 40) >> (v25 >> 4)) & 1) != 0)
    {
LABEL_166:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_23;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_23:
  v26 = v3[23];
  if (!v26)
    goto LABEL_24;
  if ((v26 & 8) != 0)
  {
    if ((*(_BYTE *)(v26 - 79) & 1) != 0)
      goto LABEL_172;
  }
  else
  {
    v60 = v26 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v94 = v3[23];
      v127 = v26 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v26 & 0xFFFFFFFFFFFFC000));
      v26 = v94;
      v60 = v127;
    }
    if (((*(_QWORD *)(v60 + 8 * ((v26 >> 10) & 0xF) + 40) >> (v26 >> 4)) & 1) != 0)
    {
LABEL_172:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_24;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_24:
  v27 = v3[24];
  if (!v27)
    goto LABEL_25;
  if ((v27 & 8) != 0)
  {
    if ((*(_BYTE *)(v27 - 79) & 1) != 0)
      goto LABEL_178;
  }
  else
  {
    v61 = v27 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v95 = v3[24];
      v128 = v27 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v27 & 0xFFFFFFFFFFFFC000));
      v27 = v95;
      v61 = v128;
    }
    if (((*(_QWORD *)(v61 + 8 * ((v27 >> 10) & 0xF) + 40) >> (v27 >> 4)) & 1) != 0)
    {
LABEL_178:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_25;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_25:
  v28 = v3[25];
  if (!v28)
    goto LABEL_26;
  if ((v28 & 8) != 0)
  {
    if ((*(_BYTE *)(v28 - 79) & 1) != 0)
      goto LABEL_184;
  }
  else
  {
    v62 = v28 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v28 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v96 = v3[25];
      v129 = v28 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v28 & 0xFFFFFFFFFFFFC000));
      v28 = v96;
      v62 = v129;
    }
    if (((*(_QWORD *)(v62 + 8 * ((v28 >> 10) & 0xF) + 40) >> (v28 >> 4)) & 1) != 0)
    {
LABEL_184:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_26;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_26:
  v29 = v3[26];
  if (!v29)
    goto LABEL_27;
  if ((v29 & 8) != 0)
  {
    if ((*(_BYTE *)(v29 - 79) & 1) != 0)
      goto LABEL_190;
  }
  else
  {
    v63 = v29 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v29 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v97 = v3[26];
      v130 = v29 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v29 & 0xFFFFFFFFFFFFC000));
      v29 = v97;
      v63 = v130;
    }
    if (((*(_QWORD *)(v63 + 8 * ((v29 >> 10) & 0xF) + 40) >> (v29 >> 4)) & 1) != 0)
    {
LABEL_190:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_27;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_27:
  v30 = v3[27];
  if (!v30)
    goto LABEL_28;
  if ((v30 & 8) != 0)
  {
    if ((*(_BYTE *)(v30 - 79) & 1) != 0)
      goto LABEL_196;
  }
  else
  {
    v64 = v30 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v98 = v3[27];
      v131 = v30 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v30 & 0xFFFFFFFFFFFFC000));
      v30 = v98;
      v64 = v131;
    }
    if (((*(_QWORD *)(v64 + 8 * ((v30 >> 10) & 0xF) + 40) >> (v30 >> 4)) & 1) != 0)
    {
LABEL_196:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_28;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_28:
  v31 = v3[28];
  if (!v31)
    goto LABEL_29;
  if ((v31 & 8) != 0)
  {
    if ((*(_BYTE *)(v31 - 79) & 1) != 0)
      goto LABEL_202;
  }
  else
  {
    v65 = v31 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v31 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v99 = v3[28];
      v132 = v31 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v31 & 0xFFFFFFFFFFFFC000));
      v31 = v99;
      v65 = v132;
    }
    if (((*(_QWORD *)(v65 + 8 * ((v31 >> 10) & 0xF) + 40) >> (v31 >> 4)) & 1) != 0)
    {
LABEL_202:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_29;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_29:
  v32 = v3[29];
  if (!v32)
    goto LABEL_30;
  if ((v32 & 8) != 0)
  {
    if ((*(_BYTE *)(v32 - 79) & 1) != 0)
      goto LABEL_208;
  }
  else
  {
    v66 = v32 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v32 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v100 = v3[29];
      v133 = v32 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v32 & 0xFFFFFFFFFFFFC000));
      v32 = v100;
      v66 = v133;
    }
    if (((*(_QWORD *)(v66 + 8 * ((v32 >> 10) & 0xF) + 40) >> (v32 >> 4)) & 1) != 0)
    {
LABEL_208:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_30;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_30:
  v33 = v3[30];
  if (!v33)
    goto LABEL_31;
  if ((v33 & 8) != 0)
  {
    if ((*(_BYTE *)(v33 - 79) & 1) != 0)
      goto LABEL_214;
  }
  else
  {
    v67 = v33 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v33 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v101 = v3[30];
      v134 = v33 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v33 & 0xFFFFFFFFFFFFC000));
      v33 = v101;
      v67 = v134;
    }
    if (((*(_QWORD *)(v67 + 8 * ((v33 >> 10) & 0xF) + 40) >> (v33 >> 4)) & 1) != 0)
    {
LABEL_214:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_31;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_31:
  v34 = v3[31];
  if (!v34)
    goto LABEL_32;
  if ((v34 & 8) != 0)
  {
    if ((*(_BYTE *)(v34 - 79) & 1) != 0)
      goto LABEL_220;
  }
  else
  {
    v68 = v34 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v34 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v102 = v3[31];
      v135 = v34 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v34 & 0xFFFFFFFFFFFFC000));
      v34 = v102;
      v68 = v135;
    }
    if (((*(_QWORD *)(v68 + 8 * ((v34 >> 10) & 0xF) + 40) >> (v34 >> 4)) & 1) != 0)
    {
LABEL_220:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_32;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_32:
  v35 = v3[32];
  if (!v35)
    goto LABEL_33;
  if ((v35 & 8) != 0)
  {
    if ((*(_BYTE *)(v35 - 79) & 1) != 0)
      goto LABEL_226;
  }
  else
  {
    v69 = v35 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v35 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v103 = v3[32];
      v136 = v35 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v35 & 0xFFFFFFFFFFFFC000));
      v35 = v103;
      v69 = v136;
    }
    if (((*(_QWORD *)(v69 + 8 * ((v35 >> 10) & 0xF) + 40) >> (v35 >> 4)) & 1) != 0)
    {
LABEL_226:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_33;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_33:
  v36 = v3[33];
  if (!v36)
    goto LABEL_34;
  if ((v36 & 8) != 0)
  {
    if ((*(_BYTE *)(v36 - 79) & 1) != 0)
      goto LABEL_232;
  }
  else
  {
    v70 = v36 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v36 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v104 = v3[33];
      v137 = v36 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v36 & 0xFFFFFFFFFFFFC000));
      v36 = v104;
      v70 = v137;
    }
    if (((*(_QWORD *)(v70 + 8 * ((v36 >> 10) & 0xF) + 40) >> (v36 >> 4)) & 1) != 0)
    {
LABEL_232:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_34;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_34:
  v37 = v3[34];
  if (!v37)
    return result;
  if ((v37 & 8) != 0)
  {
    if ((*(_BYTE *)(v37 - 79) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  else
  {
    v71 = v37 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v37 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v37 & 0xFFFFFFFFFFFFC000));
      v71 = v37 & 0xFFFFFFFFFFFFC000;
    }
    if (((*(_QWORD *)(v71 + 8 * ((v37 >> 10) & 0xF) + 40) >> (v37 >> 4)) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  if (*(_QWORD *)(a2 + 168))
    return JSC::SlotVisitor::appendSlow();
  return result;
}

uint64_t WebCore::TransformStreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    if ((v4 & 8) != 0)
    {
      if ((*(_BYTE *)(v4 - 79) & 1) != 0)
        goto LABEL_25;
    }
    else
    {
      v23 = v4 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v42 = *(_QWORD *)(result + 8);
        v60 = v4 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v4 & 0xFFFFFFFFFFFFC000));
        v4 = v42;
        v23 = v60;
      }
      if (((*(_QWORD *)(v23 + 8 * ((v4 >> 10) & 0xF) + 40) >> (v4 >> 4)) & 1) != 0)
      {
LABEL_25:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_2;
      }
    }
    result = JSC::SlotVisitor::appendSlow();
  }
LABEL_2:
  v5 = v3[2];
  if (!v5)
    goto LABEL_3;
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(v5 - 79) & 1) != 0)
      goto LABEL_31;
  }
  else
  {
    v24 = v5 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v43 = v3[2];
      v61 = v5 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
      v5 = v43;
      v24 = v61;
    }
    if (((*(_QWORD *)(v24 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) != 0)
    {
LABEL_31:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_3;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_3:
  v6 = v3[3];
  if (!v6)
    goto LABEL_4;
  if ((v6 & 8) != 0)
  {
    if ((*(_BYTE *)(v6 - 79) & 1) != 0)
      goto LABEL_37;
  }
  else
  {
    v25 = v6 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v6 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v44 = v3[3];
      v62 = v6 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v6 & 0xFFFFFFFFFFFFC000));
      v6 = v44;
      v25 = v62;
    }
    if (((*(_QWORD *)(v25 + 8 * ((v6 >> 10) & 0xF) + 40) >> (v6 >> 4)) & 1) != 0)
    {
LABEL_37:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_4;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_4:
  v7 = v3[4];
  if (!v7)
    goto LABEL_5;
  if ((v7 & 8) != 0)
  {
    if ((*(_BYTE *)(v7 - 79) & 1) != 0)
      goto LABEL_43;
  }
  else
  {
    v26 = v7 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v45 = v3[4];
      v63 = v7 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
      v7 = v45;
      v26 = v63;
    }
    if (((*(_QWORD *)(v26 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) != 0)
    {
LABEL_43:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_5;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_5:
  v8 = v3[5];
  if (!v8)
    goto LABEL_6;
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(v8 - 79) & 1) != 0)
      goto LABEL_49;
  }
  else
  {
    v27 = v8 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v46 = v3[5];
      v64 = v8 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v8 & 0xFFFFFFFFFFFFC000));
      v8 = v46;
      v27 = v64;
    }
    if (((*(_QWORD *)(v27 + 8 * ((v8 >> 10) & 0xF) + 40) >> (v8 >> 4)) & 1) != 0)
    {
LABEL_49:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_6;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_6:
  v9 = v3[6];
  if (!v9)
    goto LABEL_7;
  if ((v9 & 8) != 0)
  {
    if ((*(_BYTE *)(v9 - 79) & 1) != 0)
      goto LABEL_55;
  }
  else
  {
    v28 = v9 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v47 = v3[6];
      v65 = v9 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000));
      v9 = v47;
      v28 = v65;
    }
    if (((*(_QWORD *)(v28 + 8 * ((v9 >> 10) & 0xF) + 40) >> (v9 >> 4)) & 1) != 0)
    {
LABEL_55:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_7;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_7:
  v10 = v3[7];
  if (!v10)
    goto LABEL_8;
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) != 0)
      goto LABEL_61;
  }
  else
  {
    v29 = v10 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v48 = v3[7];
      v66 = v10 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000));
      v10 = v48;
      v29 = v66;
    }
    if (((*(_QWORD *)(v29 + 8 * ((v10 >> 10) & 0xF) + 40) >> (v10 >> 4)) & 1) != 0)
    {
LABEL_61:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_8;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_8:
  v11 = v3[8];
  if (!v11)
    goto LABEL_9;
  if ((v11 & 8) != 0)
  {
    if ((*(_BYTE *)(v11 - 79) & 1) != 0)
      goto LABEL_67;
  }
  else
  {
    v30 = v11 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v49 = v3[8];
      v67 = v11 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v11 & 0xFFFFFFFFFFFFC000));
      v11 = v49;
      v30 = v67;
    }
    if (((*(_QWORD *)(v30 + 8 * ((v11 >> 10) & 0xF) + 40) >> (v11 >> 4)) & 1) != 0)
    {
LABEL_67:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_9;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_9:
  v12 = v3[9];
  if (!v12)
    goto LABEL_10;
  if ((v12 & 8) != 0)
  {
    if ((*(_BYTE *)(v12 - 79) & 1) != 0)
      goto LABEL_73;
  }
  else
  {
    v31 = v12 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v50 = v3[9];
      v68 = v12 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000));
      v12 = v50;
      v31 = v68;
    }
    if (((*(_QWORD *)(v31 + 8 * ((v12 >> 10) & 0xF) + 40) >> (v12 >> 4)) & 1) != 0)
    {
LABEL_73:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_10;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_10:
  v13 = v3[10];
  if (!v13)
    goto LABEL_11;
  if ((v13 & 8) != 0)
  {
    if ((*(_BYTE *)(v13 - 79) & 1) != 0)
      goto LABEL_79;
  }
  else
  {
    v32 = v13 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v51 = v3[10];
      v69 = v13 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v13 & 0xFFFFFFFFFFFFC000));
      v13 = v51;
      v32 = v69;
    }
    if (((*(_QWORD *)(v32 + 8 * ((v13 >> 10) & 0xF) + 40) >> (v13 >> 4)) & 1) != 0)
    {
LABEL_79:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_11;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_11:
  v14 = v3[11];
  if (!v14)
    goto LABEL_12;
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) != 0)
      goto LABEL_85;
  }
  else
  {
    v33 = v14 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v52 = v3[11];
      v70 = v14 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000));
      v14 = v52;
      v33 = v70;
    }
    if (((*(_QWORD *)(v33 + 8 * ((v14 >> 10) & 0xF) + 40) >> (v14 >> 4)) & 1) != 0)
    {
LABEL_85:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_12;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_12:
  v15 = v3[12];
  if (!v15)
    goto LABEL_13;
  if ((v15 & 8) != 0)
  {
    if ((*(_BYTE *)(v15 - 79) & 1) != 0)
      goto LABEL_91;
  }
  else
  {
    v34 = v15 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v53 = v3[12];
      v71 = v15 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000));
      v15 = v53;
      v34 = v71;
    }
    if (((*(_QWORD *)(v34 + 8 * ((v15 >> 10) & 0xF) + 40) >> (v15 >> 4)) & 1) != 0)
    {
LABEL_91:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_13;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_13:
  v16 = v3[13];
  if (!v16)
    goto LABEL_14;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_97;
  }
  else
  {
    v35 = v16 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v54 = v3[13];
      v72 = v16 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000));
      v16 = v54;
      v35 = v72;
    }
    if (((*(_QWORD *)(v35 + 8 * ((v16 >> 10) & 0xF) + 40) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_97:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_14;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_14:
  v17 = v3[14];
  if (!v17)
    goto LABEL_15;
  if ((v17 & 8) != 0)
  {
    if ((*(_BYTE *)(v17 - 79) & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v36 = v17 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v55 = v3[14];
      v73 = v17 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000));
      v17 = v55;
      v36 = v73;
    }
    if (((*(_QWORD *)(v36 + 8 * ((v17 >> 10) & 0xF) + 40) >> (v17 >> 4)) & 1) != 0)
    {
LABEL_103:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_15;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_15:
  v18 = v3[15];
  if (!v18)
    goto LABEL_16;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_109;
  }
  else
  {
    v37 = v18 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v56 = v3[15];
      v74 = v18 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000));
      v18 = v56;
      v37 = v74;
    }
    if (((*(_QWORD *)(v37 + 8 * ((v18 >> 10) & 0xF) + 40) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_109:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_16;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_16:
  v19 = v3[16];
  if (!v19)
    goto LABEL_17;
  if ((v19 & 8) != 0)
  {
    if ((*(_BYTE *)(v19 - 79) & 1) != 0)
      goto LABEL_115;
  }
  else
  {
    v38 = v19 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v57 = v3[16];
      v75 = v19 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000));
      v19 = v57;
      v38 = v75;
    }
    if (((*(_QWORD *)(v38 + 8 * ((v19 >> 10) & 0xF) + 40) >> (v19 >> 4)) & 1) != 0)
    {
LABEL_115:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_17;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_17:
  v20 = v3[17];
  if (!v20)
    goto LABEL_18;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) != 0)
      goto LABEL_121;
  }
  else
  {
    v39 = v20 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v58 = v3[17];
      v76 = v20 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000));
      v20 = v58;
      v39 = v76;
    }
    if (((*(_QWORD *)(v39 + 8 * ((v20 >> 10) & 0xF) + 40) >> (v20 >> 4)) & 1) != 0)
    {
LABEL_121:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_18;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_18:
  v21 = v3[18];
  if (!v21)
    goto LABEL_19;
  if ((v21 & 8) != 0)
  {
    if ((*(_BYTE *)(v21 - 79) & 1) != 0)
      goto LABEL_127;
  }
  else
  {
    v40 = v21 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v59 = v3[18];
      v77 = v21 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000));
      v21 = v59;
      v40 = v77;
    }
    if (((*(_QWORD *)(v40 + 8 * ((v21 >> 10) & 0xF) + 40) >> (v21 >> 4)) & 1) != 0)
    {
LABEL_127:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_19;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_19:
  v22 = v3[19];
  if (!v22)
    return result;
  if ((v22 & 8) != 0)
  {
    if ((*(_BYTE *)(v22 - 79) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  else
  {
    v41 = v22 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000));
      v41 = v22 & 0xFFFFFFFFFFFFC000;
    }
    if (((*(_QWORD *)(v41 + 8 * ((v22 >> 10) & 0xF) + 40) >> (v22 >> 4)) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  if (*(_QWORD *)(a2 + 168))
    return JSC::SlotVisitor::appendSlow();
  return result;
}

uint64_t WebCore::WritableStreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    if ((v4 & 8) != 0)
    {
      if ((*(_BYTE *)(v4 - 79) & 1) != 0)
        goto LABEL_55;
    }
    else
    {
      v53 = v4 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v102 = *(_QWORD *)(result + 8);
        v150 = v4 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v4 & 0xFFFFFFFFFFFFC000));
        v4 = v102;
        v53 = v150;
      }
      if (((*(_QWORD *)(v53 + 8 * ((v4 >> 10) & 0xF) + 40) >> (v4 >> 4)) & 1) != 0)
      {
LABEL_55:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_2;
      }
    }
    result = JSC::SlotVisitor::appendSlow();
  }
LABEL_2:
  v5 = v3[2];
  if (!v5)
    goto LABEL_3;
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(v5 - 79) & 1) != 0)
      goto LABEL_61;
  }
  else
  {
    v54 = v5 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v103 = v3[2];
      v151 = v5 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
      v5 = v103;
      v54 = v151;
    }
    if (((*(_QWORD *)(v54 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) != 0)
    {
LABEL_61:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_3;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_3:
  v6 = v3[3];
  if (!v6)
    goto LABEL_4;
  if ((v6 & 8) != 0)
  {
    if ((*(_BYTE *)(v6 - 79) & 1) != 0)
      goto LABEL_67;
  }
  else
  {
    v55 = v6 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v6 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v104 = v3[3];
      v152 = v6 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v6 & 0xFFFFFFFFFFFFC000));
      v6 = v104;
      v55 = v152;
    }
    if (((*(_QWORD *)(v55 + 8 * ((v6 >> 10) & 0xF) + 40) >> (v6 >> 4)) & 1) != 0)
    {
LABEL_67:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_4;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_4:
  v7 = v3[4];
  if (!v7)
    goto LABEL_5;
  if ((v7 & 8) != 0)
  {
    if ((*(_BYTE *)(v7 - 79) & 1) != 0)
      goto LABEL_73;
  }
  else
  {
    v56 = v7 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v105 = v3[4];
      v153 = v7 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
      v7 = v105;
      v56 = v153;
    }
    if (((*(_QWORD *)(v56 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) != 0)
    {
LABEL_73:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_5;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_5:
  v8 = v3[5];
  if (!v8)
    goto LABEL_6;
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(v8 - 79) & 1) != 0)
      goto LABEL_79;
  }
  else
  {
    v57 = v8 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v106 = v3[5];
      v154 = v8 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v8 & 0xFFFFFFFFFFFFC000));
      v8 = v106;
      v57 = v154;
    }
    if (((*(_QWORD *)(v57 + 8 * ((v8 >> 10) & 0xF) + 40) >> (v8 >> 4)) & 1) != 0)
    {
LABEL_79:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_6;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_6:
  v9 = v3[6];
  if (!v9)
    goto LABEL_7;
  if ((v9 & 8) != 0)
  {
    if ((*(_BYTE *)(v9 - 79) & 1) != 0)
      goto LABEL_85;
  }
  else
  {
    v58 = v9 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v107 = v3[6];
      v155 = v9 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000));
      v9 = v107;
      v58 = v155;
    }
    if (((*(_QWORD *)(v58 + 8 * ((v9 >> 10) & 0xF) + 40) >> (v9 >> 4)) & 1) != 0)
    {
LABEL_85:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_7;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_7:
  v10 = v3[7];
  if (!v10)
    goto LABEL_8;
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) != 0)
      goto LABEL_91;
  }
  else
  {
    v59 = v10 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v108 = v3[7];
      v156 = v10 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000));
      v10 = v108;
      v59 = v156;
    }
    if (((*(_QWORD *)(v59 + 8 * ((v10 >> 10) & 0xF) + 40) >> (v10 >> 4)) & 1) != 0)
    {
LABEL_91:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_8;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_8:
  v11 = v3[8];
  if (!v11)
    goto LABEL_9;
  if ((v11 & 8) != 0)
  {
    if ((*(_BYTE *)(v11 - 79) & 1) != 0)
      goto LABEL_97;
  }
  else
  {
    v60 = v11 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v109 = v3[8];
      v157 = v11 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v11 & 0xFFFFFFFFFFFFC000));
      v11 = v109;
      v60 = v157;
    }
    if (((*(_QWORD *)(v60 + 8 * ((v11 >> 10) & 0xF) + 40) >> (v11 >> 4)) & 1) != 0)
    {
LABEL_97:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_9;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_9:
  v12 = v3[9];
  if (!v12)
    goto LABEL_10;
  if ((v12 & 8) != 0)
  {
    if ((*(_BYTE *)(v12 - 79) & 1) != 0)
      goto LABEL_103;
  }
  else
  {
    v61 = v12 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v110 = v3[9];
      v158 = v12 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000));
      v12 = v110;
      v61 = v158;
    }
    if (((*(_QWORD *)(v61 + 8 * ((v12 >> 10) & 0xF) + 40) >> (v12 >> 4)) & 1) != 0)
    {
LABEL_103:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_10;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_10:
  v13 = v3[10];
  if (!v13)
    goto LABEL_11;
  if ((v13 & 8) != 0)
  {
    if ((*(_BYTE *)(v13 - 79) & 1) != 0)
      goto LABEL_109;
  }
  else
  {
    v62 = v13 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v111 = v3[10];
      v159 = v13 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v13 & 0xFFFFFFFFFFFFC000));
      v13 = v111;
      v62 = v159;
    }
    if (((*(_QWORD *)(v62 + 8 * ((v13 >> 10) & 0xF) + 40) >> (v13 >> 4)) & 1) != 0)
    {
LABEL_109:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_11;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_11:
  v14 = v3[11];
  if (!v14)
    goto LABEL_12;
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) != 0)
      goto LABEL_115;
  }
  else
  {
    v63 = v14 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v112 = v3[11];
      v160 = v14 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000));
      v14 = v112;
      v63 = v160;
    }
    if (((*(_QWORD *)(v63 + 8 * ((v14 >> 10) & 0xF) + 40) >> (v14 >> 4)) & 1) != 0)
    {
LABEL_115:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_12;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_12:
  v15 = v3[12];
  if (!v15)
    goto LABEL_13;
  if ((v15 & 8) != 0)
  {
    if ((*(_BYTE *)(v15 - 79) & 1) != 0)
      goto LABEL_121;
  }
  else
  {
    v64 = v15 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v113 = v3[12];
      v161 = v15 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000));
      v15 = v113;
      v64 = v161;
    }
    if (((*(_QWORD *)(v64 + 8 * ((v15 >> 10) & 0xF) + 40) >> (v15 >> 4)) & 1) != 0)
    {
LABEL_121:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_13;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_13:
  v16 = v3[13];
  if (!v16)
    goto LABEL_14;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_127;
  }
  else
  {
    v65 = v16 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v114 = v3[13];
      v162 = v16 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000));
      v16 = v114;
      v65 = v162;
    }
    if (((*(_QWORD *)(v65 + 8 * ((v16 >> 10) & 0xF) + 40) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_127:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_14;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_14:
  v17 = v3[14];
  if (!v17)
    goto LABEL_15;
  if ((v17 & 8) != 0)
  {
    if ((*(_BYTE *)(v17 - 79) & 1) != 0)
      goto LABEL_133;
  }
  else
  {
    v66 = v17 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v115 = v3[14];
      v163 = v17 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000));
      v17 = v115;
      v66 = v163;
    }
    if (((*(_QWORD *)(v66 + 8 * ((v17 >> 10) & 0xF) + 40) >> (v17 >> 4)) & 1) != 0)
    {
LABEL_133:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_15;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_15:
  v18 = v3[15];
  if (!v18)
    goto LABEL_16;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_139;
  }
  else
  {
    v67 = v18 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v116 = v3[15];
      v164 = v18 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000));
      v18 = v116;
      v67 = v164;
    }
    if (((*(_QWORD *)(v67 + 8 * ((v18 >> 10) & 0xF) + 40) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_139:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_16;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_16:
  v19 = v3[16];
  if (!v19)
    goto LABEL_17;
  if ((v19 & 8) != 0)
  {
    if ((*(_BYTE *)(v19 - 79) & 1) != 0)
      goto LABEL_145;
  }
  else
  {
    v68 = v19 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v117 = v3[16];
      v165 = v19 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000));
      v19 = v117;
      v68 = v165;
    }
    if (((*(_QWORD *)(v68 + 8 * ((v19 >> 10) & 0xF) + 40) >> (v19 >> 4)) & 1) != 0)
    {
LABEL_145:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_17;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_17:
  v20 = v3[17];
  if (!v20)
    goto LABEL_18;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) != 0)
      goto LABEL_151;
  }
  else
  {
    v69 = v20 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v118 = v3[17];
      v166 = v20 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000));
      v20 = v118;
      v69 = v166;
    }
    if (((*(_QWORD *)(v69 + 8 * ((v20 >> 10) & 0xF) + 40) >> (v20 >> 4)) & 1) != 0)
    {
LABEL_151:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_18;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_18:
  v21 = v3[18];
  if (!v21)
    goto LABEL_19;
  if ((v21 & 8) != 0)
  {
    if ((*(_BYTE *)(v21 - 79) & 1) != 0)
      goto LABEL_157;
  }
  else
  {
    v70 = v21 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v119 = v3[18];
      v167 = v21 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000));
      v21 = v119;
      v70 = v167;
    }
    if (((*(_QWORD *)(v70 + 8 * ((v21 >> 10) & 0xF) + 40) >> (v21 >> 4)) & 1) != 0)
    {
LABEL_157:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_19;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_19:
  v22 = v3[19];
  if (!v22)
    goto LABEL_20;
  if ((v22 & 8) != 0)
  {
    if ((*(_BYTE *)(v22 - 79) & 1) != 0)
      goto LABEL_163;
  }
  else
  {
    v71 = v22 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v120 = v3[19];
      v168 = v22 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000));
      v22 = v120;
      v71 = v168;
    }
    if (((*(_QWORD *)(v71 + 8 * ((v22 >> 10) & 0xF) + 40) >> (v22 >> 4)) & 1) != 0)
    {
LABEL_163:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_20;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_20:
  v23 = v3[20];
  if (!v23)
    goto LABEL_21;
  if ((v23 & 8) != 0)
  {
    if ((*(_BYTE *)(v23 - 79) & 1) != 0)
      goto LABEL_169;
  }
  else
  {
    v72 = v23 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v121 = v3[20];
      v169 = v23 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v23 & 0xFFFFFFFFFFFFC000));
      v23 = v121;
      v72 = v169;
    }
    if (((*(_QWORD *)(v72 + 8 * ((v23 >> 10) & 0xF) + 40) >> (v23 >> 4)) & 1) != 0)
    {
LABEL_169:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_21;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_21:
  v24 = v3[21];
  if (!v24)
    goto LABEL_22;
  if ((v24 & 8) != 0)
  {
    if ((*(_BYTE *)(v24 - 79) & 1) != 0)
      goto LABEL_175;
  }
  else
  {
    v73 = v24 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v122 = v3[21];
      v170 = v24 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v24 & 0xFFFFFFFFFFFFC000));
      v24 = v122;
      v73 = v170;
    }
    if (((*(_QWORD *)(v73 + 8 * ((v24 >> 10) & 0xF) + 40) >> (v24 >> 4)) & 1) != 0)
    {
LABEL_175:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_22;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_22:
  v25 = v3[22];
  if (!v25)
    goto LABEL_23;
  if ((v25 & 8) != 0)
  {
    if ((*(_BYTE *)(v25 - 79) & 1) != 0)
      goto LABEL_181;
  }
  else
  {
    v74 = v25 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v123 = v3[22];
      v171 = v25 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000));
      v25 = v123;
      v74 = v171;
    }
    if (((*(_QWORD *)(v74 + 8 * ((v25 >> 10) & 0xF) + 40) >> (v25 >> 4)) & 1) != 0)
    {
LABEL_181:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_23;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_23:
  v26 = v3[23];
  if (!v26)
    goto LABEL_24;
  if ((v26 & 8) != 0)
  {
    if ((*(_BYTE *)(v26 - 79) & 1) != 0)
      goto LABEL_187;
  }
  else
  {
    v75 = v26 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v124 = v3[23];
      v172 = v26 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v26 & 0xFFFFFFFFFFFFC000));
      v26 = v124;
      v75 = v172;
    }
    if (((*(_QWORD *)(v75 + 8 * ((v26 >> 10) & 0xF) + 40) >> (v26 >> 4)) & 1) != 0)
    {
LABEL_187:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_24;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_24:
  v27 = v3[24];
  if (!v27)
    goto LABEL_25;
  if ((v27 & 8) != 0)
  {
    if ((*(_BYTE *)(v27 - 79) & 1) != 0)
      goto LABEL_193;
  }
  else
  {
    v76 = v27 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v125 = v3[24];
      v173 = v27 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v27 & 0xFFFFFFFFFFFFC000));
      v27 = v125;
      v76 = v173;
    }
    if (((*(_QWORD *)(v76 + 8 * ((v27 >> 10) & 0xF) + 40) >> (v27 >> 4)) & 1) != 0)
    {
LABEL_193:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_25;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_25:
  v28 = v3[25];
  if (!v28)
    goto LABEL_26;
  if ((v28 & 8) != 0)
  {
    if ((*(_BYTE *)(v28 - 79) & 1) != 0)
      goto LABEL_199;
  }
  else
  {
    v77 = v28 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v28 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v126 = v3[25];
      v174 = v28 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v28 & 0xFFFFFFFFFFFFC000));
      v28 = v126;
      v77 = v174;
    }
    if (((*(_QWORD *)(v77 + 8 * ((v28 >> 10) & 0xF) + 40) >> (v28 >> 4)) & 1) != 0)
    {
LABEL_199:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_26;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_26:
  v29 = v3[26];
  if (!v29)
    goto LABEL_27;
  if ((v29 & 8) != 0)
  {
    if ((*(_BYTE *)(v29 - 79) & 1) != 0)
      goto LABEL_205;
  }
  else
  {
    v78 = v29 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v29 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v127 = v3[26];
      v175 = v29 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v29 & 0xFFFFFFFFFFFFC000));
      v29 = v127;
      v78 = v175;
    }
    if (((*(_QWORD *)(v78 + 8 * ((v29 >> 10) & 0xF) + 40) >> (v29 >> 4)) & 1) != 0)
    {
LABEL_205:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_27;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_27:
  v30 = v3[27];
  if (!v30)
    goto LABEL_28;
  if ((v30 & 8) != 0)
  {
    if ((*(_BYTE *)(v30 - 79) & 1) != 0)
      goto LABEL_211;
  }
  else
  {
    v79 = v30 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v128 = v3[27];
      v176 = v30 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v30 & 0xFFFFFFFFFFFFC000));
      v30 = v128;
      v79 = v176;
    }
    if (((*(_QWORD *)(v79 + 8 * ((v30 >> 10) & 0xF) + 40) >> (v30 >> 4)) & 1) != 0)
    {
LABEL_211:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_28;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_28:
  v31 = v3[28];
  if (!v31)
    goto LABEL_29;
  if ((v31 & 8) != 0)
  {
    if ((*(_BYTE *)(v31 - 79) & 1) != 0)
      goto LABEL_217;
  }
  else
  {
    v80 = v31 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v31 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v129 = v3[28];
      v177 = v31 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v31 & 0xFFFFFFFFFFFFC000));
      v31 = v129;
      v80 = v177;
    }
    if (((*(_QWORD *)(v80 + 8 * ((v31 >> 10) & 0xF) + 40) >> (v31 >> 4)) & 1) != 0)
    {
LABEL_217:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_29;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_29:
  v32 = v3[29];
  if (!v32)
    goto LABEL_30;
  if ((v32 & 8) != 0)
  {
    if ((*(_BYTE *)(v32 - 79) & 1) != 0)
      goto LABEL_223;
  }
  else
  {
    v81 = v32 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v32 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v130 = v3[29];
      v178 = v32 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v32 & 0xFFFFFFFFFFFFC000));
      v32 = v130;
      v81 = v178;
    }
    if (((*(_QWORD *)(v81 + 8 * ((v32 >> 10) & 0xF) + 40) >> (v32 >> 4)) & 1) != 0)
    {
LABEL_223:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_30;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_30:
  v33 = v3[30];
  if (!v33)
    goto LABEL_31;
  if ((v33 & 8) != 0)
  {
    if ((*(_BYTE *)(v33 - 79) & 1) != 0)
      goto LABEL_229;
  }
  else
  {
    v82 = v33 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v33 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v131 = v3[30];
      v179 = v33 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v33 & 0xFFFFFFFFFFFFC000));
      v33 = v131;
      v82 = v179;
    }
    if (((*(_QWORD *)(v82 + 8 * ((v33 >> 10) & 0xF) + 40) >> (v33 >> 4)) & 1) != 0)
    {
LABEL_229:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_31;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_31:
  v34 = v3[31];
  if (!v34)
    goto LABEL_32;
  if ((v34 & 8) != 0)
  {
    if ((*(_BYTE *)(v34 - 79) & 1) != 0)
      goto LABEL_235;
  }
  else
  {
    v83 = v34 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v34 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v132 = v3[31];
      v180 = v34 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v34 & 0xFFFFFFFFFFFFC000));
      v34 = v132;
      v83 = v180;
    }
    if (((*(_QWORD *)(v83 + 8 * ((v34 >> 10) & 0xF) + 40) >> (v34 >> 4)) & 1) != 0)
    {
LABEL_235:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_32;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_32:
  v35 = v3[32];
  if (!v35)
    goto LABEL_33;
  if ((v35 & 8) != 0)
  {
    if ((*(_BYTE *)(v35 - 79) & 1) != 0)
      goto LABEL_241;
  }
  else
  {
    v84 = v35 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v35 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v133 = v3[32];
      v181 = v35 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v35 & 0xFFFFFFFFFFFFC000));
      v35 = v133;
      v84 = v181;
    }
    if (((*(_QWORD *)(v84 + 8 * ((v35 >> 10) & 0xF) + 40) >> (v35 >> 4)) & 1) != 0)
    {
LABEL_241:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_33;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_33:
  v36 = v3[33];
  if (!v36)
    goto LABEL_34;
  if ((v36 & 8) != 0)
  {
    if ((*(_BYTE *)(v36 - 79) & 1) != 0)
      goto LABEL_247;
  }
  else
  {
    v85 = v36 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v36 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v134 = v3[33];
      v182 = v36 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v36 & 0xFFFFFFFFFFFFC000));
      v36 = v134;
      v85 = v182;
    }
    if (((*(_QWORD *)(v85 + 8 * ((v36 >> 10) & 0xF) + 40) >> (v36 >> 4)) & 1) != 0)
    {
LABEL_247:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_34;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_34:
  v37 = v3[34];
  if (!v37)
    goto LABEL_35;
  if ((v37 & 8) != 0)
  {
    if ((*(_BYTE *)(v37 - 79) & 1) != 0)
      goto LABEL_253;
  }
  else
  {
    v86 = v37 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v37 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v135 = v3[34];
      v183 = v37 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v37 & 0xFFFFFFFFFFFFC000));
      v37 = v135;
      v86 = v183;
    }
    if (((*(_QWORD *)(v86 + 8 * ((v37 >> 10) & 0xF) + 40) >> (v37 >> 4)) & 1) != 0)
    {
LABEL_253:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_35;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_35:
  v38 = v3[35];
  if (!v38)
    goto LABEL_36;
  if ((v38 & 8) != 0)
  {
    if ((*(_BYTE *)(v38 - 79) & 1) != 0)
      goto LABEL_259;
  }
  else
  {
    v87 = v38 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v38 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v136 = v3[35];
      v184 = v38 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v38 & 0xFFFFFFFFFFFFC000));
      v38 = v136;
      v87 = v184;
    }
    if (((*(_QWORD *)(v87 + 8 * ((v38 >> 10) & 0xF) + 40) >> (v38 >> 4)) & 1) != 0)
    {
LABEL_259:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_36;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_36:
  v39 = v3[36];
  if (!v39)
    goto LABEL_37;
  if ((v39 & 8) != 0)
  {
    if ((*(_BYTE *)(v39 - 79) & 1) != 0)
      goto LABEL_265;
  }
  else
  {
    v88 = v39 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v39 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v137 = v3[36];
      v185 = v39 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v39 & 0xFFFFFFFFFFFFC000));
      v39 = v137;
      v88 = v185;
    }
    if (((*(_QWORD *)(v88 + 8 * ((v39 >> 10) & 0xF) + 40) >> (v39 >> 4)) & 1) != 0)
    {
LABEL_265:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_37;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_37:
  v40 = v3[37];
  if (!v40)
    goto LABEL_38;
  if ((v40 & 8) != 0)
  {
    if ((*(_BYTE *)(v40 - 79) & 1) != 0)
      goto LABEL_271;
  }
  else
  {
    v89 = v40 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v40 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v138 = v3[37];
      v186 = v40 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v40 & 0xFFFFFFFFFFFFC000));
      v40 = v138;
      v89 = v186;
    }
    if (((*(_QWORD *)(v89 + 8 * ((v40 >> 10) & 0xF) + 40) >> (v40 >> 4)) & 1) != 0)
    {
LABEL_271:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_38;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_38:
  v41 = v3[38];
  if (!v41)
    goto LABEL_39;
  if ((v41 & 8) != 0)
  {
    if ((*(_BYTE *)(v41 - 79) & 1) != 0)
      goto LABEL_277;
  }
  else
  {
    v90 = v41 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v41 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v139 = v3[38];
      v187 = v41 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v41 & 0xFFFFFFFFFFFFC000));
      v41 = v139;
      v90 = v187;
    }
    if (((*(_QWORD *)(v90 + 8 * ((v41 >> 10) & 0xF) + 40) >> (v41 >> 4)) & 1) != 0)
    {
LABEL_277:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_39;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_39:
  v42 = v3[39];
  if (!v42)
    goto LABEL_40;
  if ((v42 & 8) != 0)
  {
    if ((*(_BYTE *)(v42 - 79) & 1) != 0)
      goto LABEL_283;
  }
  else
  {
    v91 = v42 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v42 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v140 = v3[39];
      v188 = v42 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v42 & 0xFFFFFFFFFFFFC000));
      v42 = v140;
      v91 = v188;
    }
    if (((*(_QWORD *)(v91 + 8 * ((v42 >> 10) & 0xF) + 40) >> (v42 >> 4)) & 1) != 0)
    {
LABEL_283:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_40;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_40:
  v43 = v3[40];
  if (!v43)
    goto LABEL_41;
  if ((v43 & 8) != 0)
  {
    if ((*(_BYTE *)(v43 - 79) & 1) != 0)
      goto LABEL_289;
  }
  else
  {
    v92 = v43 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v43 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v141 = v3[40];
      v189 = v43 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v43 & 0xFFFFFFFFFFFFC000));
      v43 = v141;
      v92 = v189;
    }
    if (((*(_QWORD *)(v92 + 8 * ((v43 >> 10) & 0xF) + 40) >> (v43 >> 4)) & 1) != 0)
    {
LABEL_289:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_41;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_41:
  v44 = v3[41];
  if (!v44)
    goto LABEL_42;
  if ((v44 & 8) != 0)
  {
    if ((*(_BYTE *)(v44 - 79) & 1) != 0)
      goto LABEL_295;
  }
  else
  {
    v93 = v44 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v44 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v142 = v3[41];
      v190 = v44 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v44 & 0xFFFFFFFFFFFFC000));
      v44 = v142;
      v93 = v190;
    }
    if (((*(_QWORD *)(v93 + 8 * ((v44 >> 10) & 0xF) + 40) >> (v44 >> 4)) & 1) != 0)
    {
LABEL_295:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_42;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_42:
  v45 = v3[42];
  if (!v45)
    goto LABEL_43;
  if ((v45 & 8) != 0)
  {
    if ((*(_BYTE *)(v45 - 79) & 1) != 0)
      goto LABEL_301;
  }
  else
  {
    v94 = v45 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v45 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v143 = v3[42];
      v191 = v45 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v45 & 0xFFFFFFFFFFFFC000));
      v45 = v143;
      v94 = v191;
    }
    if (((*(_QWORD *)(v94 + 8 * ((v45 >> 10) & 0xF) + 40) >> (v45 >> 4)) & 1) != 0)
    {
LABEL_301:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_43;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_43:
  v46 = v3[43];
  if (!v46)
    goto LABEL_44;
  if ((v46 & 8) != 0)
  {
    if ((*(_BYTE *)(v46 - 79) & 1) != 0)
      goto LABEL_307;
  }
  else
  {
    v95 = v46 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v144 = v3[43];
      v192 = v46 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v46 & 0xFFFFFFFFFFFFC000));
      v46 = v144;
      v95 = v192;
    }
    if (((*(_QWORD *)(v95 + 8 * ((v46 >> 10) & 0xF) + 40) >> (v46 >> 4)) & 1) != 0)
    {
LABEL_307:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_44;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_44:
  v47 = v3[44];
  if (!v47)
    goto LABEL_45;
  if ((v47 & 8) != 0)
  {
    if ((*(_BYTE *)(v47 - 79) & 1) != 0)
      goto LABEL_313;
  }
  else
  {
    v96 = v47 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v47 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v145 = v3[44];
      v193 = v47 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v47 & 0xFFFFFFFFFFFFC000));
      v47 = v145;
      v96 = v193;
    }
    if (((*(_QWORD *)(v96 + 8 * ((v47 >> 10) & 0xF) + 40) >> (v47 >> 4)) & 1) != 0)
    {
LABEL_313:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_45;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_45:
  v48 = v3[45];
  if (!v48)
    goto LABEL_46;
  if ((v48 & 8) != 0)
  {
    if ((*(_BYTE *)(v48 - 79) & 1) != 0)
      goto LABEL_319;
  }
  else
  {
    v97 = v48 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v48 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v146 = v3[45];
      v194 = v48 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v48 & 0xFFFFFFFFFFFFC000));
      v48 = v146;
      v97 = v194;
    }
    if (((*(_QWORD *)(v97 + 8 * ((v48 >> 10) & 0xF) + 40) >> (v48 >> 4)) & 1) != 0)
    {
LABEL_319:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_46;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_46:
  v49 = v3[46];
  if (!v49)
    goto LABEL_47;
  if ((v49 & 8) != 0)
  {
    if ((*(_BYTE *)(v49 - 79) & 1) != 0)
      goto LABEL_325;
  }
  else
  {
    v98 = v49 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v49 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v147 = v3[46];
      v195 = v49 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v49 & 0xFFFFFFFFFFFFC000));
      v49 = v147;
      v98 = v195;
    }
    if (((*(_QWORD *)(v98 + 8 * ((v49 >> 10) & 0xF) + 40) >> (v49 >> 4)) & 1) != 0)
    {
LABEL_325:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_47;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_47:
  v50 = v3[47];
  if (!v50)
    goto LABEL_48;
  if ((v50 & 8) != 0)
  {
    if ((*(_BYTE *)(v50 - 79) & 1) != 0)
      goto LABEL_331;
  }
  else
  {
    v99 = v50 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v50 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v148 = v3[47];
      v196 = v50 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v50 & 0xFFFFFFFFFFFFC000));
      v50 = v148;
      v99 = v196;
    }
    if (((*(_QWORD *)(v99 + 8 * ((v50 >> 10) & 0xF) + 40) >> (v50 >> 4)) & 1) != 0)
    {
LABEL_331:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_48;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_48:
  v51 = v3[48];
  if (!v51)
    goto LABEL_49;
  if ((v51 & 8) != 0)
  {
    if ((*(_BYTE *)(v51 - 79) & 1) != 0)
      goto LABEL_337;
  }
  else
  {
    v100 = v51 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v51 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v149 = v3[48];
      v197 = v51 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v51 & 0xFFFFFFFFFFFFC000));
      v51 = v149;
      v100 = v197;
    }
    if (((*(_QWORD *)(v100 + 8 * ((v51 >> 10) & 0xF) + 40) >> (v51 >> 4)) & 1) != 0)
    {
LABEL_337:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_49;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_49:
  v52 = v3[49];
  if (!v52)
    return result;
  if ((v52 & 8) != 0)
  {
    if ((*(_BYTE *)(v52 - 79) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  else
  {
    v101 = v52 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v52 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v52 & 0xFFFFFFFFFFFFC000));
      v101 = v52 & 0xFFFFFFFFFFFFC000;
    }
    if (((*(_QWORD *)(v101 + 8 * ((v52 >> 10) & 0xF) + 40) >> (v52 >> 4)) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  if (*(_QWORD *)(a2 + 168))
    return JSC::SlotVisitor::appendSlow();
  return result;
}

uint64_t WebCore::ReadableStreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    if ((v4 & 8) != 0)
    {
      if ((*(_BYTE *)(v4 - 79) & 1) != 0)
        goto LABEL_54;
    }
    else
    {
      v52 = v4 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v100 = *(_QWORD *)(result + 8);
        v147 = v4 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v4 & 0xFFFFFFFFFFFFC000));
        v4 = v100;
        v52 = v147;
      }
      if (((*(_QWORD *)(v52 + 8 * ((v4 >> 10) & 0xF) + 40) >> (v4 >> 4)) & 1) != 0)
      {
LABEL_54:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_2;
      }
    }
    result = JSC::SlotVisitor::appendSlow();
  }
LABEL_2:
  v5 = v3[2];
  if (!v5)
    goto LABEL_3;
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(v5 - 79) & 1) != 0)
      goto LABEL_60;
  }
  else
  {
    v53 = v5 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v101 = v3[2];
      v148 = v5 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
      v5 = v101;
      v53 = v148;
    }
    if (((*(_QWORD *)(v53 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) != 0)
    {
LABEL_60:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_3;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_3:
  v6 = v3[3];
  if (!v6)
    goto LABEL_4;
  if ((v6 & 8) != 0)
  {
    if ((*(_BYTE *)(v6 - 79) & 1) != 0)
      goto LABEL_66;
  }
  else
  {
    v54 = v6 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v6 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v102 = v3[3];
      v149 = v6 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v6 & 0xFFFFFFFFFFFFC000));
      v6 = v102;
      v54 = v149;
    }
    if (((*(_QWORD *)(v54 + 8 * ((v6 >> 10) & 0xF) + 40) >> (v6 >> 4)) & 1) != 0)
    {
LABEL_66:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_4;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_4:
  v7 = v3[4];
  if (!v7)
    goto LABEL_5;
  if ((v7 & 8) != 0)
  {
    if ((*(_BYTE *)(v7 - 79) & 1) != 0)
      goto LABEL_72;
  }
  else
  {
    v55 = v7 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v103 = v3[4];
      v150 = v7 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
      v7 = v103;
      v55 = v150;
    }
    if (((*(_QWORD *)(v55 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) != 0)
    {
LABEL_72:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_5;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_5:
  v8 = v3[5];
  if (!v8)
    goto LABEL_6;
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(v8 - 79) & 1) != 0)
      goto LABEL_78;
  }
  else
  {
    v56 = v8 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v104 = v3[5];
      v151 = v8 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v8 & 0xFFFFFFFFFFFFC000));
      v8 = v104;
      v56 = v151;
    }
    if (((*(_QWORD *)(v56 + 8 * ((v8 >> 10) & 0xF) + 40) >> (v8 >> 4)) & 1) != 0)
    {
LABEL_78:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_6;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_6:
  v9 = v3[6];
  if (!v9)
    goto LABEL_7;
  if ((v9 & 8) != 0)
  {
    if ((*(_BYTE *)(v9 - 79) & 1) != 0)
      goto LABEL_84;
  }
  else
  {
    v57 = v9 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v105 = v3[6];
      v152 = v9 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000));
      v9 = v105;
      v57 = v152;
    }
    if (((*(_QWORD *)(v57 + 8 * ((v9 >> 10) & 0xF) + 40) >> (v9 >> 4)) & 1) != 0)
    {
LABEL_84:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_7;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_7:
  v10 = v3[7];
  if (!v10)
    goto LABEL_8;
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) != 0)
      goto LABEL_90;
  }
  else
  {
    v58 = v10 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v106 = v3[7];
      v153 = v10 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000));
      v10 = v106;
      v58 = v153;
    }
    if (((*(_QWORD *)(v58 + 8 * ((v10 >> 10) & 0xF) + 40) >> (v10 >> 4)) & 1) != 0)
    {
LABEL_90:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_8;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_8:
  v11 = v3[8];
  if (!v11)
    goto LABEL_9;
  if ((v11 & 8) != 0)
  {
    if ((*(_BYTE *)(v11 - 79) & 1) != 0)
      goto LABEL_96;
  }
  else
  {
    v59 = v11 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v107 = v3[8];
      v154 = v11 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v11 & 0xFFFFFFFFFFFFC000));
      v11 = v107;
      v59 = v154;
    }
    if (((*(_QWORD *)(v59 + 8 * ((v11 >> 10) & 0xF) + 40) >> (v11 >> 4)) & 1) != 0)
    {
LABEL_96:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_9;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_9:
  v12 = v3[9];
  if (!v12)
    goto LABEL_10;
  if ((v12 & 8) != 0)
  {
    if ((*(_BYTE *)(v12 - 79) & 1) != 0)
      goto LABEL_102;
  }
  else
  {
    v60 = v12 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v108 = v3[9];
      v155 = v12 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000));
      v12 = v108;
      v60 = v155;
    }
    if (((*(_QWORD *)(v60 + 8 * ((v12 >> 10) & 0xF) + 40) >> (v12 >> 4)) & 1) != 0)
    {
LABEL_102:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_10;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_10:
  v13 = v3[10];
  if (!v13)
    goto LABEL_11;
  if ((v13 & 8) != 0)
  {
    if ((*(_BYTE *)(v13 - 79) & 1) != 0)
      goto LABEL_108;
  }
  else
  {
    v61 = v13 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v109 = v3[10];
      v156 = v13 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v13 & 0xFFFFFFFFFFFFC000));
      v13 = v109;
      v61 = v156;
    }
    if (((*(_QWORD *)(v61 + 8 * ((v13 >> 10) & 0xF) + 40) >> (v13 >> 4)) & 1) != 0)
    {
LABEL_108:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_11;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_11:
  v14 = v3[11];
  if (!v14)
    goto LABEL_12;
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) != 0)
      goto LABEL_114;
  }
  else
  {
    v62 = v14 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v110 = v3[11];
      v157 = v14 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000));
      v14 = v110;
      v62 = v157;
    }
    if (((*(_QWORD *)(v62 + 8 * ((v14 >> 10) & 0xF) + 40) >> (v14 >> 4)) & 1) != 0)
    {
LABEL_114:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_12;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_12:
  v15 = v3[12];
  if (!v15)
    goto LABEL_13;
  if ((v15 & 8) != 0)
  {
    if ((*(_BYTE *)(v15 - 79) & 1) != 0)
      goto LABEL_120;
  }
  else
  {
    v63 = v15 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v111 = v3[12];
      v158 = v15 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000));
      v15 = v111;
      v63 = v158;
    }
    if (((*(_QWORD *)(v63 + 8 * ((v15 >> 10) & 0xF) + 40) >> (v15 >> 4)) & 1) != 0)
    {
LABEL_120:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_13;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_13:
  v16 = v3[13];
  if (!v16)
    goto LABEL_14;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_126;
  }
  else
  {
    v64 = v16 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v112 = v3[13];
      v159 = v16 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000));
      v16 = v112;
      v64 = v159;
    }
    if (((*(_QWORD *)(v64 + 8 * ((v16 >> 10) & 0xF) + 40) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_126:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_14;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_14:
  v17 = v3[14];
  if (!v17)
    goto LABEL_15;
  if ((v17 & 8) != 0)
  {
    if ((*(_BYTE *)(v17 - 79) & 1) != 0)
      goto LABEL_132;
  }
  else
  {
    v65 = v17 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v113 = v3[14];
      v160 = v17 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000));
      v17 = v113;
      v65 = v160;
    }
    if (((*(_QWORD *)(v65 + 8 * ((v17 >> 10) & 0xF) + 40) >> (v17 >> 4)) & 1) != 0)
    {
LABEL_132:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_15;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_15:
  v18 = v3[15];
  if (!v18)
    goto LABEL_16;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_138;
  }
  else
  {
    v66 = v18 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v114 = v3[15];
      v161 = v18 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000));
      v18 = v114;
      v66 = v161;
    }
    if (((*(_QWORD *)(v66 + 8 * ((v18 >> 10) & 0xF) + 40) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_138:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_16;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_16:
  v19 = v3[16];
  if (!v19)
    goto LABEL_17;
  if ((v19 & 8) != 0)
  {
    if ((*(_BYTE *)(v19 - 79) & 1) != 0)
      goto LABEL_144;
  }
  else
  {
    v67 = v19 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v115 = v3[16];
      v162 = v19 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000));
      v19 = v115;
      v67 = v162;
    }
    if (((*(_QWORD *)(v67 + 8 * ((v19 >> 10) & 0xF) + 40) >> (v19 >> 4)) & 1) != 0)
    {
LABEL_144:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_17;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_17:
  v20 = v3[17];
  if (!v20)
    goto LABEL_18;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) != 0)
      goto LABEL_150;
  }
  else
  {
    v68 = v20 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v116 = v3[17];
      v163 = v20 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000));
      v20 = v116;
      v68 = v163;
    }
    if (((*(_QWORD *)(v68 + 8 * ((v20 >> 10) & 0xF) + 40) >> (v20 >> 4)) & 1) != 0)
    {
LABEL_150:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_18;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_18:
  v21 = v3[18];
  if (!v21)
    goto LABEL_19;
  if ((v21 & 8) != 0)
  {
    if ((*(_BYTE *)(v21 - 79) & 1) != 0)
      goto LABEL_156;
  }
  else
  {
    v69 = v21 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v117 = v3[18];
      v164 = v21 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000));
      v21 = v117;
      v69 = v164;
    }
    if (((*(_QWORD *)(v69 + 8 * ((v21 >> 10) & 0xF) + 40) >> (v21 >> 4)) & 1) != 0)
    {
LABEL_156:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_19;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_19:
  v22 = v3[19];
  if (!v22)
    goto LABEL_20;
  if ((v22 & 8) != 0)
  {
    if ((*(_BYTE *)(v22 - 79) & 1) != 0)
      goto LABEL_162;
  }
  else
  {
    v70 = v22 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v22 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v118 = v3[19];
      v165 = v22 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v22 & 0xFFFFFFFFFFFFC000));
      v22 = v118;
      v70 = v165;
    }
    if (((*(_QWORD *)(v70 + 8 * ((v22 >> 10) & 0xF) + 40) >> (v22 >> 4)) & 1) != 0)
    {
LABEL_162:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_20;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_20:
  v23 = v3[20];
  if (!v23)
    goto LABEL_21;
  if ((v23 & 8) != 0)
  {
    if ((*(_BYTE *)(v23 - 79) & 1) != 0)
      goto LABEL_168;
  }
  else
  {
    v71 = v23 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v23 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v119 = v3[20];
      v166 = v23 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v23 & 0xFFFFFFFFFFFFC000));
      v23 = v119;
      v71 = v166;
    }
    if (((*(_QWORD *)(v71 + 8 * ((v23 >> 10) & 0xF) + 40) >> (v23 >> 4)) & 1) != 0)
    {
LABEL_168:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_21;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_21:
  v24 = v3[21];
  if (!v24)
    goto LABEL_22;
  if ((v24 & 8) != 0)
  {
    if ((*(_BYTE *)(v24 - 79) & 1) != 0)
      goto LABEL_174;
  }
  else
  {
    v72 = v24 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v24 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v120 = v3[21];
      v167 = v24 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v24 & 0xFFFFFFFFFFFFC000));
      v24 = v120;
      v72 = v167;
    }
    if (((*(_QWORD *)(v72 + 8 * ((v24 >> 10) & 0xF) + 40) >> (v24 >> 4)) & 1) != 0)
    {
LABEL_174:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_22;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_22:
  v25 = v3[22];
  if (!v25)
    goto LABEL_23;
  if ((v25 & 8) != 0)
  {
    if ((*(_BYTE *)(v25 - 79) & 1) != 0)
      goto LABEL_180;
  }
  else
  {
    v73 = v25 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v25 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v121 = v3[22];
      v168 = v25 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v25 & 0xFFFFFFFFFFFFC000));
      v25 = v121;
      v73 = v168;
    }
    if (((*(_QWORD *)(v73 + 8 * ((v25 >> 10) & 0xF) + 40) >> (v25 >> 4)) & 1) != 0)
    {
LABEL_180:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_23;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_23:
  v26 = v3[23];
  if (!v26)
    goto LABEL_24;
  if ((v26 & 8) != 0)
  {
    if ((*(_BYTE *)(v26 - 79) & 1) != 0)
      goto LABEL_186;
  }
  else
  {
    v74 = v26 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v26 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v122 = v3[23];
      v169 = v26 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v26 & 0xFFFFFFFFFFFFC000));
      v26 = v122;
      v74 = v169;
    }
    if (((*(_QWORD *)(v74 + 8 * ((v26 >> 10) & 0xF) + 40) >> (v26 >> 4)) & 1) != 0)
    {
LABEL_186:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_24;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_24:
  v27 = v3[24];
  if (!v27)
    goto LABEL_25;
  if ((v27 & 8) != 0)
  {
    if ((*(_BYTE *)(v27 - 79) & 1) != 0)
      goto LABEL_192;
  }
  else
  {
    v75 = v27 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v27 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v123 = v3[24];
      v170 = v27 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v27 & 0xFFFFFFFFFFFFC000));
      v27 = v123;
      v75 = v170;
    }
    if (((*(_QWORD *)(v75 + 8 * ((v27 >> 10) & 0xF) + 40) >> (v27 >> 4)) & 1) != 0)
    {
LABEL_192:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_25;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_25:
  v28 = v3[25];
  if (!v28)
    goto LABEL_26;
  if ((v28 & 8) != 0)
  {
    if ((*(_BYTE *)(v28 - 79) & 1) != 0)
      goto LABEL_198;
  }
  else
  {
    v76 = v28 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v28 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v124 = v3[25];
      v171 = v28 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v28 & 0xFFFFFFFFFFFFC000));
      v28 = v124;
      v76 = v171;
    }
    if (((*(_QWORD *)(v76 + 8 * ((v28 >> 10) & 0xF) + 40) >> (v28 >> 4)) & 1) != 0)
    {
LABEL_198:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_26;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_26:
  v29 = v3[26];
  if (!v29)
    goto LABEL_27;
  if ((v29 & 8) != 0)
  {
    if ((*(_BYTE *)(v29 - 79) & 1) != 0)
      goto LABEL_204;
  }
  else
  {
    v77 = v29 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v29 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v125 = v3[26];
      v172 = v29 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v29 & 0xFFFFFFFFFFFFC000));
      v29 = v125;
      v77 = v172;
    }
    if (((*(_QWORD *)(v77 + 8 * ((v29 >> 10) & 0xF) + 40) >> (v29 >> 4)) & 1) != 0)
    {
LABEL_204:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_27;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_27:
  v30 = v3[27];
  if (!v30)
    goto LABEL_28;
  if ((v30 & 8) != 0)
  {
    if ((*(_BYTE *)(v30 - 79) & 1) != 0)
      goto LABEL_210;
  }
  else
  {
    v78 = v30 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v30 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v126 = v3[27];
      v173 = v30 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v30 & 0xFFFFFFFFFFFFC000));
      v30 = v126;
      v78 = v173;
    }
    if (((*(_QWORD *)(v78 + 8 * ((v30 >> 10) & 0xF) + 40) >> (v30 >> 4)) & 1) != 0)
    {
LABEL_210:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_28;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_28:
  v31 = v3[28];
  if (!v31)
    goto LABEL_29;
  if ((v31 & 8) != 0)
  {
    if ((*(_BYTE *)(v31 - 79) & 1) != 0)
      goto LABEL_216;
  }
  else
  {
    v79 = v31 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v31 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v127 = v3[28];
      v174 = v31 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v31 & 0xFFFFFFFFFFFFC000));
      v31 = v127;
      v79 = v174;
    }
    if (((*(_QWORD *)(v79 + 8 * ((v31 >> 10) & 0xF) + 40) >> (v31 >> 4)) & 1) != 0)
    {
LABEL_216:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_29;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_29:
  v32 = v3[29];
  if (!v32)
    goto LABEL_30;
  if ((v32 & 8) != 0)
  {
    if ((*(_BYTE *)(v32 - 79) & 1) != 0)
      goto LABEL_222;
  }
  else
  {
    v80 = v32 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v32 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v128 = v3[29];
      v175 = v32 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v32 & 0xFFFFFFFFFFFFC000));
      v32 = v128;
      v80 = v175;
    }
    if (((*(_QWORD *)(v80 + 8 * ((v32 >> 10) & 0xF) + 40) >> (v32 >> 4)) & 1) != 0)
    {
LABEL_222:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_30;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_30:
  v33 = v3[30];
  if (!v33)
    goto LABEL_31;
  if ((v33 & 8) != 0)
  {
    if ((*(_BYTE *)(v33 - 79) & 1) != 0)
      goto LABEL_228;
  }
  else
  {
    v81 = v33 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v33 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v129 = v3[30];
      v176 = v33 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v33 & 0xFFFFFFFFFFFFC000));
      v33 = v129;
      v81 = v176;
    }
    if (((*(_QWORD *)(v81 + 8 * ((v33 >> 10) & 0xF) + 40) >> (v33 >> 4)) & 1) != 0)
    {
LABEL_228:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_31;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_31:
  v34 = v3[31];
  if (!v34)
    goto LABEL_32;
  if ((v34 & 8) != 0)
  {
    if ((*(_BYTE *)(v34 - 79) & 1) != 0)
      goto LABEL_234;
  }
  else
  {
    v82 = v34 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v34 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v130 = v3[31];
      v177 = v34 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v34 & 0xFFFFFFFFFFFFC000));
      v34 = v130;
      v82 = v177;
    }
    if (((*(_QWORD *)(v82 + 8 * ((v34 >> 10) & 0xF) + 40) >> (v34 >> 4)) & 1) != 0)
    {
LABEL_234:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_32;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_32:
  v35 = v3[32];
  if (!v35)
    goto LABEL_33;
  if ((v35 & 8) != 0)
  {
    if ((*(_BYTE *)(v35 - 79) & 1) != 0)
      goto LABEL_240;
  }
  else
  {
    v83 = v35 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v35 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v131 = v3[32];
      v178 = v35 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v35 & 0xFFFFFFFFFFFFC000));
      v35 = v131;
      v83 = v178;
    }
    if (((*(_QWORD *)(v83 + 8 * ((v35 >> 10) & 0xF) + 40) >> (v35 >> 4)) & 1) != 0)
    {
LABEL_240:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_33;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_33:
  v36 = v3[33];
  if (!v36)
    goto LABEL_34;
  if ((v36 & 8) != 0)
  {
    if ((*(_BYTE *)(v36 - 79) & 1) != 0)
      goto LABEL_246;
  }
  else
  {
    v84 = v36 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v36 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v132 = v3[33];
      v179 = v36 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v36 & 0xFFFFFFFFFFFFC000));
      v36 = v132;
      v84 = v179;
    }
    if (((*(_QWORD *)(v84 + 8 * ((v36 >> 10) & 0xF) + 40) >> (v36 >> 4)) & 1) != 0)
    {
LABEL_246:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_34;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_34:
  v37 = v3[34];
  if (!v37)
    goto LABEL_35;
  if ((v37 & 8) != 0)
  {
    if ((*(_BYTE *)(v37 - 79) & 1) != 0)
      goto LABEL_252;
  }
  else
  {
    v85 = v37 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v37 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v133 = v3[34];
      v180 = v37 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v37 & 0xFFFFFFFFFFFFC000));
      v37 = v133;
      v85 = v180;
    }
    if (((*(_QWORD *)(v85 + 8 * ((v37 >> 10) & 0xF) + 40) >> (v37 >> 4)) & 1) != 0)
    {
LABEL_252:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_35;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_35:
  v38 = v3[35];
  if (!v38)
    goto LABEL_36;
  if ((v38 & 8) != 0)
  {
    if ((*(_BYTE *)(v38 - 79) & 1) != 0)
      goto LABEL_258;
  }
  else
  {
    v86 = v38 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v38 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v134 = v3[35];
      v181 = v38 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v38 & 0xFFFFFFFFFFFFC000));
      v38 = v134;
      v86 = v181;
    }
    if (((*(_QWORD *)(v86 + 8 * ((v38 >> 10) & 0xF) + 40) >> (v38 >> 4)) & 1) != 0)
    {
LABEL_258:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_36;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_36:
  v39 = v3[36];
  if (!v39)
    goto LABEL_37;
  if ((v39 & 8) != 0)
  {
    if ((*(_BYTE *)(v39 - 79) & 1) != 0)
      goto LABEL_264;
  }
  else
  {
    v87 = v39 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v39 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v135 = v3[36];
      v182 = v39 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v39 & 0xFFFFFFFFFFFFC000));
      v39 = v135;
      v87 = v182;
    }
    if (((*(_QWORD *)(v87 + 8 * ((v39 >> 10) & 0xF) + 40) >> (v39 >> 4)) & 1) != 0)
    {
LABEL_264:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_37;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_37:
  v40 = v3[37];
  if (!v40)
    goto LABEL_38;
  if ((v40 & 8) != 0)
  {
    if ((*(_BYTE *)(v40 - 79) & 1) != 0)
      goto LABEL_270;
  }
  else
  {
    v88 = v40 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v40 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v136 = v3[37];
      v183 = v40 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v40 & 0xFFFFFFFFFFFFC000));
      v40 = v136;
      v88 = v183;
    }
    if (((*(_QWORD *)(v88 + 8 * ((v40 >> 10) & 0xF) + 40) >> (v40 >> 4)) & 1) != 0)
    {
LABEL_270:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_38;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_38:
  v41 = v3[38];
  if (!v41)
    goto LABEL_39;
  if ((v41 & 8) != 0)
  {
    if ((*(_BYTE *)(v41 - 79) & 1) != 0)
      goto LABEL_276;
  }
  else
  {
    v89 = v41 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v41 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v137 = v3[38];
      v184 = v41 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v41 & 0xFFFFFFFFFFFFC000));
      v41 = v137;
      v89 = v184;
    }
    if (((*(_QWORD *)(v89 + 8 * ((v41 >> 10) & 0xF) + 40) >> (v41 >> 4)) & 1) != 0)
    {
LABEL_276:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_39;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_39:
  v42 = v3[39];
  if (!v42)
    goto LABEL_40;
  if ((v42 & 8) != 0)
  {
    if ((*(_BYTE *)(v42 - 79) & 1) != 0)
      goto LABEL_282;
  }
  else
  {
    v90 = v42 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v42 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v138 = v3[39];
      v185 = v42 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v42 & 0xFFFFFFFFFFFFC000));
      v42 = v138;
      v90 = v185;
    }
    if (((*(_QWORD *)(v90 + 8 * ((v42 >> 10) & 0xF) + 40) >> (v42 >> 4)) & 1) != 0)
    {
LABEL_282:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_40;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_40:
  v43 = v3[40];
  if (!v43)
    goto LABEL_41;
  if ((v43 & 8) != 0)
  {
    if ((*(_BYTE *)(v43 - 79) & 1) != 0)
      goto LABEL_288;
  }
  else
  {
    v91 = v43 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v43 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v139 = v3[40];
      v186 = v43 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v43 & 0xFFFFFFFFFFFFC000));
      v43 = v139;
      v91 = v186;
    }
    if (((*(_QWORD *)(v91 + 8 * ((v43 >> 10) & 0xF) + 40) >> (v43 >> 4)) & 1) != 0)
    {
LABEL_288:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_41;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_41:
  v44 = v3[41];
  if (!v44)
    goto LABEL_42;
  if ((v44 & 8) != 0)
  {
    if ((*(_BYTE *)(v44 - 79) & 1) != 0)
      goto LABEL_294;
  }
  else
  {
    v92 = v44 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v44 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v140 = v3[41];
      v187 = v44 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v44 & 0xFFFFFFFFFFFFC000));
      v44 = v140;
      v92 = v187;
    }
    if (((*(_QWORD *)(v92 + 8 * ((v44 >> 10) & 0xF) + 40) >> (v44 >> 4)) & 1) != 0)
    {
LABEL_294:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_42;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_42:
  v45 = v3[42];
  if (!v45)
    goto LABEL_43;
  if ((v45 & 8) != 0)
  {
    if ((*(_BYTE *)(v45 - 79) & 1) != 0)
      goto LABEL_300;
  }
  else
  {
    v93 = v45 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v45 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v141 = v3[42];
      v188 = v45 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v45 & 0xFFFFFFFFFFFFC000));
      v45 = v141;
      v93 = v188;
    }
    if (((*(_QWORD *)(v93 + 8 * ((v45 >> 10) & 0xF) + 40) >> (v45 >> 4)) & 1) != 0)
    {
LABEL_300:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_43;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_43:
  v46 = v3[43];
  if (!v46)
    goto LABEL_44;
  if ((v46 & 8) != 0)
  {
    if ((*(_BYTE *)(v46 - 79) & 1) != 0)
      goto LABEL_306;
  }
  else
  {
    v94 = v46 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v46 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v142 = v3[43];
      v189 = v46 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v46 & 0xFFFFFFFFFFFFC000));
      v46 = v142;
      v94 = v189;
    }
    if (((*(_QWORD *)(v94 + 8 * ((v46 >> 10) & 0xF) + 40) >> (v46 >> 4)) & 1) != 0)
    {
LABEL_306:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_44;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_44:
  v47 = v3[44];
  if (!v47)
    goto LABEL_45;
  if ((v47 & 8) != 0)
  {
    if ((*(_BYTE *)(v47 - 79) & 1) != 0)
      goto LABEL_312;
  }
  else
  {
    v95 = v47 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v47 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v143 = v3[44];
      v190 = v47 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v47 & 0xFFFFFFFFFFFFC000));
      v47 = v143;
      v95 = v190;
    }
    if (((*(_QWORD *)(v95 + 8 * ((v47 >> 10) & 0xF) + 40) >> (v47 >> 4)) & 1) != 0)
    {
LABEL_312:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_45;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_45:
  v48 = v3[45];
  if (!v48)
    goto LABEL_46;
  if ((v48 & 8) != 0)
  {
    if ((*(_BYTE *)(v48 - 79) & 1) != 0)
      goto LABEL_318;
  }
  else
  {
    v96 = v48 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v48 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v144 = v3[45];
      v191 = v48 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v48 & 0xFFFFFFFFFFFFC000));
      v48 = v144;
      v96 = v191;
    }
    if (((*(_QWORD *)(v96 + 8 * ((v48 >> 10) & 0xF) + 40) >> (v48 >> 4)) & 1) != 0)
    {
LABEL_318:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_46;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_46:
  v49 = v3[46];
  if (!v49)
    goto LABEL_47;
  if ((v49 & 8) != 0)
  {
    if ((*(_BYTE *)(v49 - 79) & 1) != 0)
      goto LABEL_324;
  }
  else
  {
    v97 = v49 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v49 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v145 = v3[46];
      v192 = v49 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v49 & 0xFFFFFFFFFFFFC000));
      v49 = v145;
      v97 = v192;
    }
    if (((*(_QWORD *)(v97 + 8 * ((v49 >> 10) & 0xF) + 40) >> (v49 >> 4)) & 1) != 0)
    {
LABEL_324:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_47;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_47:
  v50 = v3[47];
  if (!v50)
    goto LABEL_48;
  if ((v50 & 8) != 0)
  {
    if ((*(_BYTE *)(v50 - 79) & 1) != 0)
      goto LABEL_330;
  }
  else
  {
    v98 = v50 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v50 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v146 = v3[47];
      v193 = v50 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v50 & 0xFFFFFFFFFFFFC000));
      v50 = v146;
      v98 = v193;
    }
    if (((*(_QWORD *)(v98 + 8 * ((v50 >> 10) & 0xF) + 40) >> (v50 >> 4)) & 1) != 0)
    {
LABEL_330:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_48;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_48:
  v51 = v3[48];
  if (!v51)
    return result;
  if ((v51 & 8) != 0)
  {
    if ((*(_BYTE *)(v51 - 79) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  else
  {
    v99 = v51 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v51 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v51 & 0xFFFFFFFFFFFFC000));
      v99 = v51 & 0xFFFFFFFFFFFFC000;
    }
    if (((*(_QWORD *)(v99 + 8 * ((v51 >> 10) & 0xF) + 40) >> (v51 >> 4)) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  if (*(_QWORD *)(a2 + 168))
    return JSC::SlotVisitor::appendSlow();
  return result;
}

uint64_t WebCore::JSDOMBindingInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    if ((v4 & 8) != 0)
    {
      if ((*(_BYTE *)(v4 - 79) & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      v6 = v4 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v8 = *(_QWORD *)(result + 8);
        v9 = v4 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v4 & 0xFFFFFFFFFFFFC000));
        v4 = v8;
        v6 = v9;
      }
      if (((*(_QWORD *)(v6 + 8 * ((v4 >> 10) & 0xF) + 40) >> (v4 >> 4)) & 1) != 0)
      {
LABEL_8:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_2;
      }
    }
    result = JSC::SlotVisitor::appendSlow();
  }
LABEL_2:
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
    return result;
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(v5 - 79) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  else
  {
    v7 = v5 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
      v7 = v5 & 0xFFFFFFFFFFFFC000;
    }
    if (((*(_QWORD *)(v7 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  if (*(_QWORD *)(a2 + 168))
    return JSC::SlotVisitor::appendSlow();
  return result;
}

uint64_t WebCore::StreamInternalsBuiltinFunctions::visit<JSC::SlotVisitor>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    if ((v4 & 8) != 0)
    {
      if ((*(_BYTE *)(v4 - 79) & 1) != 0)
        goto LABEL_24;
    }
    else
    {
      v22 = v4 & 0xFFFFFFFFFFFFC000;
      if (*(_DWORD *)(v4 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
      {
        v40 = *(_QWORD *)(result + 8);
        v57 = v4 & 0xFFFFFFFFFFFFC000;
        result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v4 & 0xFFFFFFFFFFFFC000));
        v4 = v40;
        v22 = v57;
      }
      if (((*(_QWORD *)(v22 + 8 * ((v4 >> 10) & 0xF) + 40) >> (v4 >> 4)) & 1) != 0)
      {
LABEL_24:
        if (!*(_QWORD *)(a2 + 168))
          goto LABEL_2;
      }
    }
    result = JSC::SlotVisitor::appendSlow();
  }
LABEL_2:
  v5 = v3[2];
  if (!v5)
    goto LABEL_3;
  if ((v5 & 8) != 0)
  {
    if ((*(_BYTE *)(v5 - 79) & 1) != 0)
      goto LABEL_30;
  }
  else
  {
    v23 = v5 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v5 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v41 = v3[2];
      v58 = v5 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v5 & 0xFFFFFFFFFFFFC000));
      v5 = v41;
      v23 = v58;
    }
    if (((*(_QWORD *)(v23 + 8 * ((v5 >> 10) & 0xF) + 40) >> (v5 >> 4)) & 1) != 0)
    {
LABEL_30:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_3;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_3:
  v6 = v3[3];
  if (!v6)
    goto LABEL_4;
  if ((v6 & 8) != 0)
  {
    if ((*(_BYTE *)(v6 - 79) & 1) != 0)
      goto LABEL_36;
  }
  else
  {
    v24 = v6 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v6 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v42 = v3[3];
      v59 = v6 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v6 & 0xFFFFFFFFFFFFC000));
      v6 = v42;
      v24 = v59;
    }
    if (((*(_QWORD *)(v24 + 8 * ((v6 >> 10) & 0xF) + 40) >> (v6 >> 4)) & 1) != 0)
    {
LABEL_36:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_4;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_4:
  v7 = v3[4];
  if (!v7)
    goto LABEL_5;
  if ((v7 & 8) != 0)
  {
    if ((*(_BYTE *)(v7 - 79) & 1) != 0)
      goto LABEL_42;
  }
  else
  {
    v25 = v7 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v7 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v43 = v3[4];
      v60 = v7 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v7 & 0xFFFFFFFFFFFFC000));
      v7 = v43;
      v25 = v60;
    }
    if (((*(_QWORD *)(v25 + 8 * ((v7 >> 10) & 0xF) + 40) >> (v7 >> 4)) & 1) != 0)
    {
LABEL_42:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_5;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_5:
  v8 = v3[5];
  if (!v8)
    goto LABEL_6;
  if ((v8 & 8) != 0)
  {
    if ((*(_BYTE *)(v8 - 79) & 1) != 0)
      goto LABEL_48;
  }
  else
  {
    v26 = v8 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v8 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v44 = v3[5];
      v61 = v8 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v8 & 0xFFFFFFFFFFFFC000));
      v8 = v44;
      v26 = v61;
    }
    if (((*(_QWORD *)(v26 + 8 * ((v8 >> 10) & 0xF) + 40) >> (v8 >> 4)) & 1) != 0)
    {
LABEL_48:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_6;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_6:
  v9 = v3[6];
  if (!v9)
    goto LABEL_7;
  if ((v9 & 8) != 0)
  {
    if ((*(_BYTE *)(v9 - 79) & 1) != 0)
      goto LABEL_54;
  }
  else
  {
    v27 = v9 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v9 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v45 = v3[6];
      v62 = v9 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v9 & 0xFFFFFFFFFFFFC000));
      v9 = v45;
      v27 = v62;
    }
    if (((*(_QWORD *)(v27 + 8 * ((v9 >> 10) & 0xF) + 40) >> (v9 >> 4)) & 1) != 0)
    {
LABEL_54:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_7;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_7:
  v10 = v3[7];
  if (!v10)
    goto LABEL_8;
  if ((v10 & 8) != 0)
  {
    if ((*(_BYTE *)(v10 - 79) & 1) != 0)
      goto LABEL_60;
  }
  else
  {
    v28 = v10 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v10 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v46 = v3[7];
      v63 = v10 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v10 & 0xFFFFFFFFFFFFC000));
      v10 = v46;
      v28 = v63;
    }
    if (((*(_QWORD *)(v28 + 8 * ((v10 >> 10) & 0xF) + 40) >> (v10 >> 4)) & 1) != 0)
    {
LABEL_60:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_8;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_8:
  v11 = v3[8];
  if (!v11)
    goto LABEL_9;
  if ((v11 & 8) != 0)
  {
    if ((*(_BYTE *)(v11 - 79) & 1) != 0)
      goto LABEL_66;
  }
  else
  {
    v29 = v11 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v11 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v47 = v3[8];
      v64 = v11 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v11 & 0xFFFFFFFFFFFFC000));
      v11 = v47;
      v29 = v64;
    }
    if (((*(_QWORD *)(v29 + 8 * ((v11 >> 10) & 0xF) + 40) >> (v11 >> 4)) & 1) != 0)
    {
LABEL_66:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_9;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_9:
  v12 = v3[9];
  if (!v12)
    goto LABEL_10;
  if ((v12 & 8) != 0)
  {
    if ((*(_BYTE *)(v12 - 79) & 1) != 0)
      goto LABEL_72;
  }
  else
  {
    v30 = v12 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v12 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v48 = v3[9];
      v65 = v12 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v12 & 0xFFFFFFFFFFFFC000));
      v12 = v48;
      v30 = v65;
    }
    if (((*(_QWORD *)(v30 + 8 * ((v12 >> 10) & 0xF) + 40) >> (v12 >> 4)) & 1) != 0)
    {
LABEL_72:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_10;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_10:
  v13 = v3[10];
  if (!v13)
    goto LABEL_11;
  if ((v13 & 8) != 0)
  {
    if ((*(_BYTE *)(v13 - 79) & 1) != 0)
      goto LABEL_78;
  }
  else
  {
    v31 = v13 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v13 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v49 = v3[10];
      v66 = v13 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v13 & 0xFFFFFFFFFFFFC000));
      v13 = v49;
      v31 = v66;
    }
    if (((*(_QWORD *)(v31 + 8 * ((v13 >> 10) & 0xF) + 40) >> (v13 >> 4)) & 1) != 0)
    {
LABEL_78:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_11;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_11:
  v14 = v3[11];
  if (!v14)
    goto LABEL_12;
  if ((v14 & 8) != 0)
  {
    if ((*(_BYTE *)(v14 - 79) & 1) != 0)
      goto LABEL_84;
  }
  else
  {
    v32 = v14 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v14 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v50 = v3[11];
      v67 = v14 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v14 & 0xFFFFFFFFFFFFC000));
      v14 = v50;
      v32 = v67;
    }
    if (((*(_QWORD *)(v32 + 8 * ((v14 >> 10) & 0xF) + 40) >> (v14 >> 4)) & 1) != 0)
    {
LABEL_84:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_12;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_12:
  v15 = v3[12];
  if (!v15)
    goto LABEL_13;
  if ((v15 & 8) != 0)
  {
    if ((*(_BYTE *)(v15 - 79) & 1) != 0)
      goto LABEL_90;
  }
  else
  {
    v33 = v15 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v15 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v51 = v3[12];
      v68 = v15 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v15 & 0xFFFFFFFFFFFFC000));
      v15 = v51;
      v33 = v68;
    }
    if (((*(_QWORD *)(v33 + 8 * ((v15 >> 10) & 0xF) + 40) >> (v15 >> 4)) & 1) != 0)
    {
LABEL_90:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_13;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_13:
  v16 = v3[13];
  if (!v16)
    goto LABEL_14;
  if ((v16 & 8) != 0)
  {
    if ((*(_BYTE *)(v16 - 79) & 1) != 0)
      goto LABEL_96;
  }
  else
  {
    v34 = v16 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v16 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v52 = v3[13];
      v69 = v16 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v16 & 0xFFFFFFFFFFFFC000));
      v16 = v52;
      v34 = v69;
    }
    if (((*(_QWORD *)(v34 + 8 * ((v16 >> 10) & 0xF) + 40) >> (v16 >> 4)) & 1) != 0)
    {
LABEL_96:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_14;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_14:
  v17 = v3[14];
  if (!v17)
    goto LABEL_15;
  if ((v17 & 8) != 0)
  {
    if ((*(_BYTE *)(v17 - 79) & 1) != 0)
      goto LABEL_102;
  }
  else
  {
    v35 = v17 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v17 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v53 = v3[14];
      v70 = v17 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v17 & 0xFFFFFFFFFFFFC000));
      v17 = v53;
      v35 = v70;
    }
    if (((*(_QWORD *)(v35 + 8 * ((v17 >> 10) & 0xF) + 40) >> (v17 >> 4)) & 1) != 0)
    {
LABEL_102:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_15;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_15:
  v18 = v3[15];
  if (!v18)
    goto LABEL_16;
  if ((v18 & 8) != 0)
  {
    if ((*(_BYTE *)(v18 - 79) & 1) != 0)
      goto LABEL_108;
  }
  else
  {
    v36 = v18 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v18 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v54 = v3[15];
      v71 = v18 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v18 & 0xFFFFFFFFFFFFC000));
      v18 = v54;
      v36 = v71;
    }
    if (((*(_QWORD *)(v36 + 8 * ((v18 >> 10) & 0xF) + 40) >> (v18 >> 4)) & 1) != 0)
    {
LABEL_108:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_16;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_16:
  v19 = v3[16];
  if (!v19)
    goto LABEL_17;
  if ((v19 & 8) != 0)
  {
    if ((*(_BYTE *)(v19 - 79) & 1) != 0)
      goto LABEL_114;
  }
  else
  {
    v37 = v19 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v19 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v55 = v3[16];
      v72 = v19 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v19 & 0xFFFFFFFFFFFFC000));
      v19 = v55;
      v37 = v72;
    }
    if (((*(_QWORD *)(v37 + 8 * ((v19 >> 10) & 0xF) + 40) >> (v19 >> 4)) & 1) != 0)
    {
LABEL_114:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_17;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_17:
  v20 = v3[17];
  if (!v20)
    goto LABEL_18;
  if ((v20 & 8) != 0)
  {
    if ((*(_BYTE *)(v20 - 79) & 1) != 0)
      goto LABEL_120;
  }
  else
  {
    v38 = v20 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v20 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      v56 = v3[17];
      v73 = v20 & 0xFFFFFFFFFFFFC000;
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v20 & 0xFFFFFFFFFFFFC000));
      v20 = v56;
      v38 = v73;
    }
    if (((*(_QWORD *)(v38 + 8 * ((v20 >> 10) & 0xF) + 40) >> (v20 >> 4)) & 1) != 0)
    {
LABEL_120:
      if (!*(_QWORD *)(a2 + 168))
        goto LABEL_18;
    }
  }
  result = JSC::SlotVisitor::appendSlow();
LABEL_18:
  v21 = v3[18];
  if (!v21)
    return result;
  if ((v21 & 8) != 0)
  {
    if ((*(_BYTE *)(v21 - 79) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  else
  {
    v39 = v21 & 0xFFFFFFFFFFFFC000;
    if (*(_DWORD *)(v21 & 0xFFFFFFFFFFFFC000 | 0x20) != *(_DWORD *)(a2 + 132))
    {
      result = JSC::MarkedBlock::aboutToMarkSlow((JSC::MarkedBlock *)(v21 & 0xFFFFFFFFFFFFC000));
      v39 = v21 & 0xFFFFFFFFFFFFC000;
    }
    if (((*(_QWORD *)(v39 + 8 * ((v21 >> 10) & 0xF) + 40) >> (v21 >> 4)) & 1) == 0)
      return JSC::SlotVisitor::appendSlow();
  }
  if (*(_QWORD *)(a2 + 168))
    return JSC::SlotVisitor::appendSlow();
  return result;
}

uint64_t WebCore::MockRealtimeMediaSourceCenter::setMockRealtimeMediaSourceCenterEnabled(uint64_t this)
{
  int v1;

  {
    v1 = byte_1ECE91283;
  }
  else
  {
    v1 = 0;
    WebCore::MockRealtimeMediaSourceCenter::singleton(void)::center = (uint64_t)&off_1E341BFD8;
    qword_1ECE91270 = &off_1E341C010;
    qword_1ECE91278 = (uint64_t)&off_1E341C048;
    *(_QWORD *)&byte_1ECE91280 = 65793;
  }
  if (v1 != (_DWORD)this)
  {
    byte_1ECE91283 = this;
    {
      WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
      this = byte_1ECE91283;
    }
    if ((_DWORD)this)
    {
      if (byte_1ECE91280)
      {
        {
          WebCore::MockRealtimeMediaSourceCenter::audioCaptureFactory(void)::factory = (uint64_t)&off_1E341C088;
        }
        this = WebCore::RealtimeMediaSourceCenter::setAudioCaptureFactory((uint64_t)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center, (uint64_t)&WebCore::MockRealtimeMediaSourceCenter::audioCaptureFactory(void)::factory);
      }
      if (byte_1ECE91281)
      {
        {
          WebCore::MockRealtimeMediaSourceCenter::videoCaptureFactory(void)::factory = (uint64_t)&off_1E341C0C8;
        }
        this = WebCore::RealtimeMediaSourceCenter::setVideoCaptureFactory((uint64_t)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center, (uint64_t)&WebCore::MockRealtimeMediaSourceCenter::videoCaptureFactory(void)::factory);
      }
      if (byte_1ECE91282)
      {
        {
          WebCore::MockRealtimeDisplaySourceFactory::singleton(void)::factory = (uint64_t)&off_1E341C0F8;
          qword_1EE2F9110 = 0;
        }
        return WebCore::RealtimeMediaSourceCenter::setDisplayCaptureFactory((uint64_t)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center, (uint64_t)&WebCore::MockRealtimeDisplaySourceFactory::singleton(void)::factory);
      }
    }
    else
    {
      if (byte_1ECE91280)
      {
        {
          WebCore::MockRealtimeMediaSourceCenter::audioCaptureFactory(void)::factory = (uint64_t)&off_1E341C088;
        }
        this = WebCore::RealtimeMediaSourceCenter::unsetAudioCaptureFactory((uint64_t)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center, (uint64_t)&WebCore::MockRealtimeMediaSourceCenter::audioCaptureFactory(void)::factory);
      }
      if (byte_1ECE91281)
      {
        {
          WebCore::MockRealtimeMediaSourceCenter::videoCaptureFactory(void)::factory = (uint64_t)&off_1E341C0C8;
        }
        this = WebCore::RealtimeMediaSourceCenter::unsetVideoCaptureFactory((uint64_t)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center, (uint64_t)&WebCore::MockRealtimeMediaSourceCenter::videoCaptureFactory(void)::factory);
      }
      if (byte_1ECE91282)
      {
        {
          WebCore::MockRealtimeDisplaySourceFactory::singleton(void)::factory = (uint64_t)&off_1E341C0F8;
          qword_1EE2F9110 = 0;
        }
        return WebCore::RealtimeMediaSourceCenter::unsetDisplayCaptureFactory((uint64_t)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center, (uint64_t)&WebCore::MockRealtimeDisplaySourceFactory::singleton(void)::factory);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::appendTextContent(WTF::StringImpl *this, const WebCore::Node *a2, _BYTE *a3, WTF::String *a4, WTF::StringBuilder *a5, __n128 a6)
{
  BOOL v7;
  WTF::StringImpl *v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  char v26;

  v7 = (char)a3;
  v9 = this;
  v10 = *((unsigned __int16 *)this + 14);
  if (v10 >> 12 != 1)
  {
    switch(v10 >> 12)
    {
      case 2u:
        *a3 = 0;
        WebCore::Attr::value((uint64_t)this, a4, &v25, a6);
        WTF::StringBuilder::append((WTF::StringImpl **)a4, &v25);
        this = v25;
        v25 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v24);
          else
            *(_DWORD *)this -= 2;
        }
        return this;
      case 3u:
      case 4u:
      case 8u:
        *a3 = 0;
        v14 = *((_QWORD *)this + 10);
        if (*((_DWORD *)a4 + 4))
          v15 = 0;
        else
          v15 = *((_QWORD *)a4 + 1) == 0;
        if (v15)
        {
          if (v14)
            *(_DWORD *)v14 += 2;
          this = *(WTF::StringImpl **)a4;
          *(_QWORD *)a4 = v14;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, a2);
            else
              *(_DWORD *)this -= 2;
          }
          v16 = *((_QWORD *)v9 + 10);
          if (v16)
            LODWORD(v16) = *(_DWORD *)(v16 + 4);
          *((_DWORD *)a4 + 4) = v16;
          return this;
        }
        if (v14 && (*(_BYTE *)(v14 + 16) & 4) == 0)
          return (WTF::StringImpl *)WTF::StringBuilder::append();
        break;
      case 7u:
        *a3 = 0;
        return WTF::StringBuilder::append((WTF::StringImpl **)a4, (WTF::StringImpl **)this + 10);
      case 0xBu:
        goto LABEL_8;
      default:
        return this;
    }
    return (WTF::StringImpl *)WTF::StringBuilder::append();
  }
  if ((v10 & 0x10) == 0
    || (*(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::brTag + 24)
      ? (v11 = (_DWORD)a2 == 0)
      : (v11 = 1),
        v11))
  {
LABEL_8:
    *a3 = 0;
    if ((v10 & 4) != 0)
    {
      v12 = *((_QWORD *)this + 10);
      if (v12)
      {
        *(_DWORD *)(v12 + 24) += 2;
        do
        {
          v13 = v12;
          if ((*(unsigned __int16 *)(v12 + 28) >> 12) - 7 >= 2u)
            this = (WTF::StringImpl *)WebCore::appendTextContent((WebCore *)v12, a2, v7, (BOOL *)a4, a5);
          v12 = *(_QWORD *)(v12 + 56);
          if (v12)
            *(_DWORD *)(v12 + 24) += 2;
          if (*(_DWORD *)(v13 + 24) == 2)
          {
            v17 = *(_WORD *)(v13 + 30);
            if ((v17 & 0x400) == 0)
            {
              v18 = *(_WORD *)(v13 + 28);
              if ((v18 & 0xF000) == 0x9000)
              {
                this = (WTF::StringImpl *)WebCore::Document::removedLastRef((WebCore::Document *)v13);
              }
              else
              {
                if ((v18 & 0x20) != 0)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(v13 + 160) + 16))(*(_QWORD *)(v13 + 160));
                  v17 = *(_WORD *)(v13 + 30);
                }
                *(_WORD *)(v13 + 30) = v17 | 0x400;
                this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
              }
            }
          }
          else
          {
            *(_DWORD *)(v13 + 24) -= 2;
          }
        }
        while (v12);
      }
    }
  }
  else
  {
    *a3 = 0;
    v26 = 10;
    v19 = *((_QWORD *)a4 + 1);
    if (!v19)
      return (WTF::StringImpl *)WTF::StringBuilder::append();
    v20 = *((unsigned int *)a4 + 4);
    if (v20 >= *(_DWORD *)(v19 + 4) || *(_QWORD *)a4 != 0)
      return (WTF::StringImpl *)WTF::StringBuilder::append();
    v22 = *(_DWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 8);
    *((_DWORD *)a4 + 4) = v20 + 1;
    if ((v22 & 4) != 0)
      *(_BYTE *)(v23 + v20) = 10;
    else
      *(_WORD *)(v23 + 2 * v20) = 10;
  }
  return this;
}

uint64_t WebCore::JSDOMStringMap::legacyPlatformObjectGetOwnProperty(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5, __n128 a6)
{
  JSC::VM *v10;
  unint64_t v11;
  WebCore::DatasetDOMStringMap *v12;
  const WTF::String *v13;
  const WTF::String **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  JSC::VM *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _BYTE *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int16 *v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  char v58;
  int v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned __int16 *v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  unsigned int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  char v89;
  int v90;
  int v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int16 *v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  char v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned __int8 *v121;
  int v122;
  int v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unsigned int v126;
  unsigned __int8 *v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  unsigned __int8 *v131;
  uint64_t v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int hasExceptionsAfterHandlingTraps;
  const WTF::StringImpl *v142;
  const unsigned __int8 *v143;
  unsigned __int8 *v144;
  uint64_t v145;
  unsigned int v146;
  unint64_t v147;
  BOOL v148;
  unint64_t v149;
  JSC::VM *v150;
  JSC::VM *v151;
  JSC::VM *v152;
  JSC::VM *v153;
  JSC::VM *v154;
  JSC::VM *v155;
  JSC::VM *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  char v164;
  JSC::VM *v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  const WTF::String *v169;
  char v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v10 = *(JSC::VM **)(a2 + 56);
  v11 = a3 >> 4;
  if ((a5 & 1) != 0)
    goto LABEL_43;
  if (a3)
  {
    if ((*(_BYTE *)(a3 + 16) & 0x20) == 0)
    {
      v12 = *(WebCore::DatasetDOMStringMap **)(a1 + 24);
      *(_DWORD *)a3 += 2;
      v13 = (const WTF::String *)a3;
      goto LABEL_5;
    }
LABEL_43:
    if ((_DWORD)v11
      && (v35 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE), (v11 & ~*(_DWORD *)(v35 + 0x20)) == 0)
      && (v36 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v10)) != 0&& (v169 = (const WTF::String *)a3, v37 = JSC::PropertyTable::get(v36, (uint64_t *)&v169), (_DWORD)v37 != -1))
    {
      if ((int)v37 > 63)
      {
        v49 = *(_QWORD *)(a1 + 8) - 8;
        v50 = 0x3F00000000 - (v37 << 32);
      }
      else
      {
        v49 = a1 + 16;
        v50 = v37 << 32;
      }
      v51 = *(_QWORD *)(v49 + (v50 >> 29));
      if ((v51 & 0xFFFE000000000002) != 0)
        goto LABEL_70;
      v67 = *(unsigned __int8 *)(v51 + 5);
      if (v67 == 6)
      {
        v76 = *(_DWORD *)(v35 + 16) & 3;
        v78 = *(_QWORD *)(v51 + 8);
        v77 = *(_QWORD *)(v51 + 16);
        if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v51 & 0xFFFFFFFE) + 0x4C))
        {
          v80 = *(_QWORD *)(v51 + 24);
          v79 = *(_QWORD *)(v51 + 32);
          *(_QWORD *)a4 = v78;
          *(_QWORD *)(a4 + 8) = v77;
          *(_DWORD *)(a4 + 16) = HIDWORD(v37);
          *(_QWORD *)(a4 + 32) = a1;
          *(_BYTE *)(a4 + 49) = 3;
          v43 = 1;
          if (v76 != 2)
            *(_BYTE *)(a4 + 48) = 1;
          *(_BYTE *)(a4 + 51) = 1;
          *(_QWORD *)(a4 + 72) = v80;
          *(_QWORD *)(a4 + 80) = v79;
        }
        else
        {
          *(_QWORD *)a4 = v78;
          *(_QWORD *)(a4 + 8) = v77;
          *(_DWORD *)(a4 + 16) = HIDWORD(v37);
          *(_QWORD *)(a4 + 32) = a1;
          v43 = 1;
          *(_BYTE *)(a4 + 49) = 3;
          if (v76 != 2)
            *(_BYTE *)(a4 + 48) = 1;
        }
        return v43;
      }
      if (v67 != 5)
      {
LABEL_70:
        *(_QWORD *)a4 = v51;
        *(_QWORD *)(a4 + 32) = a1;
        *(_DWORD *)(a4 + 16) = HIDWORD(v37);
        *(_DWORD *)(a4 + 20) = v37;
        v43 = 1;
        *(_WORD *)(a4 + 48) = 257;
        return v43;
      }
      JSC::JSObject::fillGetterPropertySlot();
    }
    else if ((*(_BYTE *)(a1 + 6) & 0x20) == 0 || (JSC::JSObject::getOwnStaticPropertySlot() & 1) == 0)
    {
      if (!a3)
        return 0;
      v38 = *(_DWORD *)(a3 + 16);
      if ((v38 & 0x20) != 0)
        return 0;
      v39 = *(_BYTE **)(a3 + 8);
      v40 = *(unsigned int *)(a3 + 4);
      if ((v38 & 4) != 0)
      {
        if ((_DWORD)v40)
        {
          v116 = *v39 - 48;
          if (v116 > 9 || v40 >= 2 && *v39 == 48)
          {
LABEL_248:
            v42 = 0;
          }
          else
          {
            v144 = v39 + 1;
            v145 = v40 - 1;
            while (v145)
            {
              if (v116 > 0x19999999)
                goto LABEL_248;
              v146 = *v144 - 48;
              if (v146 > 9)
                goto LABEL_248;
              v42 = 0;
              v48 = __CFADD__(v146, 10 * v116);
              v116 = v146 + 10 * v116;
              ++v144;
              --v145;
              if (v48)
                goto LABEL_54;
            }
            v42 = 0x100000000;
            if (v116 == -1)
              v42 = 0;
          }
        }
        else
        {
          v42 = 0;
        }
      }
      else if ((_DWORD)v40)
      {
        v41 = *(unsigned __int16 *)v39 - 48;
        if (v41 > 9 || v40 >= 2 && *(_WORD *)v39 == 48)
        {
LABEL_53:
          v42 = 0;
        }
        else
        {
          v45 = (unsigned __int16 *)(v39 + 2);
          v46 = v40 - 1;
          while (v46)
          {
            if (v41 <= 0x19999999)
            {
              v47 = *v45 - 48;
              if (v47 <= 9)
              {
                v48 = __CFADD__(v47, 10 * v41);
                v41 = v47 + 10 * v41;
                ++v45;
                --v46;
                if (!v48)
                  continue;
              }
            }
            goto LABEL_53;
          }
          v148 = v41 == -1;
          v42 = 0x100000000;
          if (v148)
            v42 = 0;
        }
      }
      else
      {
        v42 = 0;
      }
LABEL_54:
      if ((v42 & 0x100000000) != 0)
        return JSC::JSObject::getOwnPropertySlotByIndex();
      else
        return 0;
    }
    return 1;
  }
  v13 = 0;
  v12 = *(WebCore::DatasetDOMStringMap **)(a1 + 24);
LABEL_5:
  v169 = v13;
  v14 = WebCore::DatasetDOMStringMap::item(v12, &v169, a3, (WTF::String *)a4, a6);
  if (v14)
  {
    v16 = *v14;
    if (*v14)
      *(_DWORD *)v16 += 2;
  }
  else
  {
    v16 = 0;
  }
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v15);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!v16)
  {
    v10 = *(JSC::VM **)(a2 + 56);
    goto LABEL_43;
  }
  v17 = *(_DWORD *)v16;
  *(_DWORD *)v16 += 2;
  if (v17)
    *(_DWORD *)v16 = v17;
  else
    WTF::StringImpl::destroy(v16, v15);
  v18 = *(JSC::VM **)(a2 + 56);
  v159 = 0xFFFFFFFF00000000;
  v161 = 0;
  v162 = 0;
  v160 = a1;
  v163 = 196608;
  v164 = 0;
  v167 = 0;
  v168 = 0;
  v165 = v18;
  ++*((_DWORD *)v18 + 1);
  v166 = 1;
  if ((_DWORD)v11)
  {
    v19 = 16 * (*(_DWORD *)a1 & 0xFFFFFFFE);
    if ((v11 & ~*(_DWORD *)(v19 + 0x20)) == 0)
    {
      v20 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE)), v18);
      if (v20)
      {
        v169 = (const WTF::String *)a3;
        v21 = JSC::PropertyTable::get(v20, (uint64_t *)&v169);
        if ((_DWORD)v21 != -1)
        {
          v55 = (uint64_t *)(a1 + 8 * (int)v21 + 16);
          if ((int)v21 >= 64)
            v55 = (uint64_t *)(*(_QWORD *)(a1 + 8) + ((uint64_t)(0x3F00000000 - (v21 << 32)) >> 29) - 8);
          v56 = *v55;
          if ((*v55 & 0xFFFE000000000002) == 0)
          {
            v72 = *(unsigned __int8 *)(v56 + 5);
            if (v72 == 6)
            {
              v84 = *(_DWORD *)(v19 + 16) & 3;
              v85 = *(_QWORD *)(v56 + 16);
              if (MEMORY[0x1E0CBE830] != 16 * *(unsigned int *)(16 * (*(_DWORD *)v56 & 0xFFFFFFFE) + 0x4C))
              {
                v157 = *(_QWORD *)(v56 + 8);
                v158 = v85;
                LODWORD(v159) = HIDWORD(v21);
                v161 = a1;
                v58 = 1;
                BYTE1(v163) = 3;
                v57 = 0;
                if (v84 != 2)
                  LOBYTE(v163) = 1;
                goto LABEL_90;
              }
              v87 = *(_QWORD *)(v56 + 24);
              v86 = *(_QWORD *)(v56 + 32);
              v157 = *(_QWORD *)(v56 + 8);
              v158 = v85;
              LODWORD(v159) = HIDWORD(v21);
              v161 = a1;
              BYTE1(v163) = 3;
              if (v84 == 2)
                goto LABEL_189;
              goto LABEL_157;
            }
            if (v72 == 5)
            {
              JSC::JSObject::fillGetterPropertySlot();
LABEL_133:
              v57 = 0;
              v58 = 1;
              goto LABEL_90;
            }
          }
          v57 = 0;
          v157 = v56;
          v161 = a1;
          v159 = __PAIR64__(v21, HIDWORD(v21));
          v58 = 1;
          LOWORD(v163) = 257;
          goto LABEL_90;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
    goto LABEL_133;
  if (a3)
  {
    v22 = *(_DWORD *)(a3 + 16);
    if ((v22 & 0x20) == 0)
    {
      v23 = *(_BYTE **)(a3 + 8);
      v24 = *(unsigned int *)(a3 + 4);
      if ((v22 & 4) != 0)
      {
        if (!(_DWORD)v24)
          goto LABEL_24;
        v25 = *v23 - 48;
        if (v25 > 9 || v24 >= 2 && *v23 == 48)
          goto LABEL_24;
        v124 = v23 + 1;
        v125 = v24 - 1;
        while (v125)
        {
          if (v25 <= 0x19999999)
          {
            v126 = *v124 - 48;
            if (v126 <= 9)
            {
              v48 = __CFADD__(v126, 10 * v25);
              v25 = v126 + 10 * v25;
              ++v124;
              --v125;
              if (!v48)
                continue;
            }
          }
          goto LABEL_24;
        }
      }
      else
      {
        if (!(_DWORD)v24)
          goto LABEL_24;
        v25 = *(unsigned __int16 *)v23 - 48;
        if (v25 > 9 || v24 >= 2 && *(_WORD *)v23 == 48)
          goto LABEL_24;
        v52 = (unsigned __int16 *)(v23 + 2);
        v53 = v24 - 1;
        while (v53)
        {
          if (v25 <= 0x19999999)
          {
            v54 = *v52 - 48;
            if (v54 <= 9)
            {
              v48 = __CFADD__(v54, 10 * v25);
              v25 = v54 + 10 * v25;
              ++v52;
              --v53;
              if (!v48)
                continue;
            }
          }
          goto LABEL_24;
        }
      }
      if (v25 != -1 && (JSC::JSObject::getOwnPropertySlotByIndex() & 1) != 0)
        goto LABEL_133;
    }
  }
LABEL_24:
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x28) + 3320) + 53))
    goto LABEL_89;
  v26 = *(_QWORD *)(16 * (*(_DWORD *)a1 & 0xFFFFFFFE) + 0x30);
  if (!v26)
    v26 = *(_QWORD *)(a1 + 16);
  if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) < 0x17u)
    goto LABEL_89;
  v156 = v10;
  v27 = (_BYTE *)(v26 + 6);
  if ((*(_BYTE *)(v26 + 6) & 8) == 0)
  {
    v152 = *(JSC::VM **)(a2 + 56);
    v28 = v26;
    while (1)
    {
      v29 = *(_DWORD *)v28 & 0xFFFFFFFE;
      v30 = 16 * v29;
      if ((_DWORD)v11)
      {
        if ((v11 & ~*(_DWORD *)(16 * v29 + 0x20)) == 0)
        {
          v31 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)v30, v152);
          if (v31)
          {
            v169 = (const WTF::String *)a3;
            v32 = JSC::PropertyTable::get(v31, (uint64_t *)&v169);
            v33 = v32;
            if ((_DWORD)v32 != -1)
              break;
          }
        }
      }
      if ((*v27 & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
        goto LABEL_160;
      v34 = *(_QWORD *)(v30 + 48);
      if (!v34)
        v34 = *(_QWORD *)(v28 + 16);
      if ((v34 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v34 + 5) < 0x17u)
      {
        v10 = v156;
        if (!a3)
          goto LABEL_89;
        v59 = *(_DWORD *)(a3 + 16);
        if ((v59 & 0x20) != 0)
          goto LABEL_89;
        v60 = *(_BYTE **)(a3 + 8);
        v61 = *(unsigned int *)(a3 + 4);
        if ((v59 & 4) != 0)
        {
          if (!(_DWORD)v61)
            goto LABEL_89;
          v62 = *v60 - 48;
          if (v62 > 9 || v61 >= 2 && *v60 == 48)
            goto LABEL_89;
          v127 = v60 + 1;
          v128 = v61 - 1;
          v10 = v156;
          while (v128)
          {
            if (v62 <= 0x19999999)
            {
              v129 = *v127 - 48;
              if (v129 <= 9)
              {
                v48 = __CFADD__(v129, 10 * v62);
                v62 = v129 + 10 * (_DWORD)v62;
                ++v127;
                --v128;
                if (!v48)
                  continue;
              }
            }
            goto LABEL_89;
          }
          v10 = v156;
          if ((_DWORD)v62 != -1)
            goto LABEL_165;
        }
        else
        {
          if (!(_DWORD)v61)
            goto LABEL_89;
          v62 = *(unsigned __int16 *)v60 - 48;
          if (v62 > 9 || v61 >= 2 && *(_WORD *)v60 == 48)
            goto LABEL_89;
          v73 = (unsigned __int16 *)(v60 + 2);
          v74 = v61 - 1;
          while (v74)
          {
            if (v62 <= 0x19999999)
            {
              v75 = *v73 - 48;
              if (v75 <= 9)
              {
                v48 = __CFADD__(v75, 10 * v62);
                v62 = v75 + 10 * (_DWORD)v62;
                ++v73;
                --v74;
                if (!v48)
                  continue;
              }
            }
            goto LABEL_89;
          }
          if ((_DWORD)v62 != -1)
          {
LABEL_165:
            v150 = *(JSC::VM **)(a2 + 56);
            while (1)
            {
              v153 = (JSC::VM *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE));
              v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(16
                                                                                    * *((unsigned int *)v153 + 19)
                                                                                    + 0x70))(v26, a2, v62, &v157);
              if (*((_DWORD *)v150 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v150) & 1) != 0)
                goto LABEL_89;
              if ((v89 & 1) != 0)
                goto LABEL_160;
              v90 = BYTE2(v163);
              if (BYTE2(v163) == 3)
                break;
              v91 = *(unsigned __int8 *)(v26 + 5);
              if (v91 != 61)
                goto LABEL_175;
              v10 = v156;
              if (BYTE2(v163) == 1)
                goto LABEL_89;
LABEL_180:
              if ((*((_WORD *)v153 + 6) & 0x800) == 0 || v90 == 3)
                goto LABEL_182;
              if ((*(_WORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
              {
                v93 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                                    + 0x4C)
                                                                  + 0xB0))(v26, a2);
              }
              else
              {
                v93 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
                if (!v93)
                  v93 = *(_QWORD *)(v26 + 16);
              }
              if (*((_DWORD *)v150 + 20))
              {
                v10 = v156;
                if ((JSC::VM::hasExceptionsAfterHandlingTraps(v150) & 1) != 0)
                  goto LABEL_89;
              }
              else
              {
                v10 = v156;
              }
LABEL_184:
              if ((v93 & 0xFFFE000000000002) == 0)
              {
                v26 = v93;
                if (*(unsigned __int8 *)(v93 + 5) > 0x16u)
                  continue;
              }
              goto LABEL_89;
            }
            v10 = v156;
            if (v164)
              goto LABEL_89;
            v91 = *(unsigned __int8 *)(v26 + 5);
            if (v91 == 61)
            {
LABEL_182:
              v93 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
              v10 = v156;
              if (!v93)
                v93 = *(_QWORD *)(v26 + 16);
              goto LABEL_184;
            }
LABEL_175:
            if ((v91 - 39) <= 0xA)
            {
              if ((*(_BYTE *)(v26 + 40) & 7u) > 2)
              {
                LOBYTE(v169) = 0;
                v170 = 0;
                v140 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v26, (WTF *)&v169);
                if ((_BYTE)v15)
                  v92 = v140;
                else
                  v92 = 0;
              }
              else
              {
                v92 = *(_QWORD *)(v26 + 24);
              }
              v10 = v156;
              if (v92 <= v62)
                goto LABEL_89;
              v90 = BYTE2(v163);
            }
            goto LABEL_180;
          }
        }
LABEL_89:
        v58 = 0;
        v57 = v16;
        v16 = 0;
        goto LABEL_90;
      }
      v27 = (_BYTE *)(v34 + 6);
      v28 = v34;
      if ((*(_BYTE *)(v34 + 6) & 8) != 0)
        goto LABEL_198;
    }
    v68 = HIDWORD(v32);
    if ((int)v32 > 63)
    {
      v69 = *(_QWORD *)(v28 + 8) - 8;
      v70 = 0x3F00000000 - (v32 << 32);
    }
    else
    {
      v69 = v28 + 16;
      v70 = v32 << 32;
    }
    v71 = *(_QWORD *)(v69 + (v70 >> 29));
    if ((v71 & 0xFFFE000000000002) != 0)
    {
LABEL_127:
      v57 = 0;
      v157 = v71;
      v161 = v28;
      goto LABEL_128;
    }
    v83 = *(unsigned __int8 *)(v71 + 5);
    if (v83 != 6)
    {
      if (v83 != 5)
        goto LABEL_127;
LABEL_154:
      JSC::JSObject::fillGetterPropertySlot();
LABEL_160:
      v57 = 0;
      v58 = 1;
      goto LABEL_129;
    }
    v94 = *(_DWORD *)(v30 + 16) & 3;
    v95 = *(_QWORD *)(v71 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v71 & 0xFFFFFFFE) + 0x4C))
    {
      v87 = *(_QWORD *)(v71 + 24);
      v86 = *(_QWORD *)(v71 + 32);
      v157 = *(_QWORD *)(v71 + 8);
      v158 = v95;
      LODWORD(v159) = HIDWORD(v32);
      v161 = v28;
      BYTE1(v163) = 3;
      v10 = v156;
      if (v94 == 2)
      {
LABEL_189:
        v57 = 0;
        v58 = 1;
        goto LABEL_158;
      }
LABEL_157:
      v57 = 0;
      v58 = 1;
      LOBYTE(v163) = 1;
LABEL_158:
      HIBYTE(v163) = 1;
      v167 = v87;
      v168 = v86;
      goto LABEL_90;
    }
    v157 = *(_QWORD *)(v71 + 8);
    v158 = v95;
    LODWORD(v159) = HIDWORD(v32);
    v161 = v28;
LABEL_218:
    v58 = 1;
    BYTE1(v163) = 3;
    v57 = 0;
    if (v94 != 2)
      LOBYTE(v163) = 1;
    goto LABEL_129;
  }
  v34 = v26;
LABEL_198:
  v96 = v34;
  if (a3)
  {
    v97 = *(_DWORD *)(a3 + 16);
    if ((v97 & 0x20) == 0)
    {
      v98 = *(_BYTE **)(a3 + 8);
      v99 = *(unsigned int *)(a3 + 4);
      if ((v97 & 4) != 0)
      {
        if ((_DWORD)v99)
        {
          v100 = *v98 - 48;
          if (v100 <= 9 && (v99 < 2 || *v98 != 48))
          {
            v131 = v98 + 1;
            v132 = v99 - 1;
            while (v132)
            {
              if (v100 <= 0x19999999)
              {
                v133 = *v131 - 48;
                if (v133 <= 9)
                {
                  v48 = __CFADD__(v133, 10 * v100);
                  v100 = v133 + 10 * (_DWORD)v100;
                  ++v131;
                  --v132;
                  if (!v48)
                    continue;
                }
              }
              goto LABEL_203;
            }
LABEL_309:
            if ((_DWORD)v100 != -1)
            {
              v151 = *(JSC::VM **)(a2 + 56);
              while (1)
              {
                v155 = (JSC::VM *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE));
                v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(16
                                                                                       * *((unsigned int *)v155 + 19)
                                                                                       + 0x70))(v26, a2, v100, &v157);
                v135 = v134;
                if (*((_DWORD *)v151 + 20))
                {
                  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v151);
                  if (((hasExceptionsAfterHandlingTraps | v135) & 1) != 0)
                  {
                    v10 = v156;
                    if (!hasExceptionsAfterHandlingTraps)
                      goto LABEL_133;
                    goto LABEL_89;
                  }
                }
                else if ((v134 & 1) != 0)
                {
                  goto LABEL_160;
                }
                v136 = BYTE2(v163);
                if (BYTE2(v163) == 3)
                {
                  v10 = v156;
                  if (v164)
                    goto LABEL_89;
                  v137 = *(unsigned __int8 *)(v26 + 5);
                  if (v137 == 61)
                    goto LABEL_327;
                }
                else
                {
                  v137 = *(unsigned __int8 *)(v26 + 5);
                  if (v137 == 61)
                  {
                    v10 = v156;
                    if (BYTE2(v163) == 1)
                      goto LABEL_89;
                    goto LABEL_325;
                  }
                }
                if ((v137 - 39) <= 0xA)
                {
                  if ((*(_BYTE *)(v26 + 40) & 7u) > 2)
                  {
                    LOBYTE(v169) = 0;
                    v170 = 0;
                    v147 = JSC::integerIndexedObjectLength<JSC::IdempotentArrayBufferByteLengthGetter<(std::memory_order)5>>(v26, (WTF *)&v169);
                    if ((_BYTE)v15)
                      v138 = v147;
                    else
                      v138 = 0;
                  }
                  else
                  {
                    v138 = *(_QWORD *)(v26 + 24);
                  }
                  v10 = v156;
                  if (v138 <= v100)
                    goto LABEL_89;
                  v136 = BYTE2(v163);
                }
LABEL_325:
                if ((*((_WORD *)v155 + 6) & 0x800) != 0 && v136 != 3)
                {
                  if ((*(_WORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xC) & 0x800) != 0)
                  {
                    v139 = (*(uint64_t (**)(uint64_t, uint64_t))(16
                                                                       * *(unsigned int *)(16
                                                                                         * (*(_DWORD *)v26 & 0xFFFFFFFE)
                                                                                         + 0x4C)
                                                                       + 0xB0))(v26, a2);
                  }
                  else
                  {
                    v139 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
                    if (!v139)
                      v139 = *(_QWORD *)(v26 + 16);
                  }
                  if (*((_DWORD *)v151 + 20))
                  {
                    v10 = v156;
                    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v151) & 1) != 0)
                      goto LABEL_89;
                  }
                  else
                  {
                    v10 = v156;
                  }
                  goto LABEL_329;
                }
LABEL_327:
                v139 = *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x30);
                v10 = v156;
                if (!v139)
                  v139 = *(_QWORD *)(v26 + 16);
LABEL_329:
                if ((v139 & 0xFFFE000000000002) == 0)
                {
                  v26 = v139;
                  if (*(unsigned __int8 *)(v139 + 5) > 0x16u)
                    continue;
                }
                goto LABEL_89;
              }
            }
          }
        }
      }
      else if ((_DWORD)v99)
      {
        v100 = *(unsigned __int16 *)v98 - 48;
        if (v100 <= 9 && (v99 < 2 || *(_WORD *)v98 != 48))
        {
          v109 = (unsigned __int16 *)(v98 + 2);
          v110 = v99 - 1;
          while (v110)
          {
            if (v100 <= 0x19999999)
            {
              v111 = *v109 - 48;
              if (v111 <= 9)
              {
                v48 = __CFADD__(v111, 10 * v100);
                v100 = v111 + 10 * (_DWORD)v100;
                ++v109;
                --v110;
                if (!v48)
                  continue;
              }
            }
            goto LABEL_203;
          }
          goto LABEL_309;
        }
      }
    }
  }
LABEL_203:
  v154 = *(JSC::VM **)(a2 + 56);
  v10 = v156;
  while (1)
  {
    v101 = 16 * (*(_DWORD *)v96 & 0xFFFFFFFE);
    if ((*(_BYTE *)(v96 + 6) & 8) != 0)
    {
      v117 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t *))(16
                                                                                      * *(unsigned int *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x4C)
                                                                                      + 0x68))(v96, a2, a3, &v157);
      if (*((_DWORD *)v154 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v154) & 1) != 0)
        goto LABEL_89;
      if ((v117 & 1) != 0)
        goto LABEL_160;
      if (BYTE2(v163) == 3)
      {
        v10 = v156;
        if (v164)
          goto LABEL_89;
        v118 = *(unsigned __int8 *)(v96 + 5);
        if (v118 == 61)
          goto LABEL_210;
      }
      else
      {
        v118 = *(unsigned __int8 *)(v96 + 5);
        if (v118 == 61)
        {
          v10 = v156;
          if (BYTE2(v163) == 1)
            goto LABEL_89;
          goto LABEL_210;
        }
      }
      if (!a3)
        goto LABEL_210;
      if ((v118 - 50) < 0xFFFFFFF5)
        goto LABEL_210;
      v119 = *(_DWORD *)(a3 + 16);
      if ((v119 & 0x20) != 0)
        goto LABEL_210;
      v120 = *(unsigned int *)(a3 + 4);
      if (!(_DWORD)v120)
        goto LABEL_210;
      v121 = *(unsigned __int8 **)(a3 + 8);
      if ((v119 & 4) != 0)
      {
        v122 = *v121;
        if ((_DWORD)v120 == 1)
        {
LABEL_351:
          v10 = v156;
          if ((v122 - 48) < 0xA)
            goto LABEL_89;
          goto LABEL_210;
        }
        if (v122 == 45)
        {
          v123 = v121[1];
          goto LABEL_360;
        }
      }
      else
      {
        v122 = *(unsigned __int16 *)v121;
        if ((_DWORD)v120 == 1)
          goto LABEL_351;
        if (v122 == 45)
        {
          v123 = *((unsigned __int16 *)v121 + 1);
LABEL_360:
          if ((v123 - 48) < 0xA)
          {
            v10 = v156;
            if ((_DWORD)v120 == 2)
              goto LABEL_89;
LABEL_364:
            v149 = v149 & 0xFFFFFF0000000000 | v120 | ((unint64_t)((v119 >> 2) & 1) << 32);
            JSC::jsToNumber();
            v142 = (const WTF::StringImpl *)WTF::numberToString();
            if ((WTF::equal((WTF *)a3, v142, v143) & 1) != 0)
              goto LABEL_89;
            goto LABEL_210;
          }
          if ((_DWORD)v120 != 9)
            goto LABEL_210;
          v148 = v123 == 73;
LABEL_381:
          v10 = v156;
          if (!v148)
            goto LABEL_210;
          goto LABEL_364;
        }
      }
      v10 = v156;
      if ((v122 - 48) < 0xA || (_DWORD)v120 == 8 && v122 == 73)
        goto LABEL_364;
      if ((_DWORD)v120 != 3)
        goto LABEL_210;
      v148 = v122 == 78;
      goto LABEL_381;
    }
    if ((_DWORD)v11)
    {
      if ((v11 & ~*(_DWORD *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE) + 0x20)) == 0)
      {
        v102 = JSC::Structure::ensurePropertyTableIfNotEmpty((JSC::Structure *)(16 * (*(_DWORD *)v96 & 0xFFFFFFFE)), v154);
        if (v102)
        {
          v169 = (const WTF::String *)a3;
          v103 = JSC::PropertyTable::get(v102, (uint64_t *)&v169);
          v33 = v103;
          if ((_DWORD)v103 != -1)
            break;
        }
      }
    }
    if ((*(_BYTE *)(v96 + 6) & 0x20) != 0 && (JSC::JSObject::getOwnStaticPropertySlot() & 1) != 0)
      goto LABEL_133;
LABEL_210:
    if ((*(_WORD *)(v101 + 12) & 0x800) != 0)
    {
      v104 = *(_DWORD *)v96;
      if (BYTE2(v163) != 3)
      {
        v130 = 16 * (v104 & 0xFFFFFFFE);
        if ((*(_WORD *)(v130 + 12) & 0x800) != 0)
        {
          v105 = (*(uint64_t (**)(uint64_t, uint64_t))(16 * *(unsigned int *)(v130 + 76) + 0xB0))(v96, a2);
        }
        else
        {
          v105 = *(_QWORD *)(v130 + 48);
          if (!v105)
            v105 = *(_QWORD *)(v96 + 16);
        }
        if (*((_DWORD *)v154 + 20))
        {
          v10 = v156;
          if ((JSC::VM::hasExceptionsAfterHandlingTraps(v154) & 1) != 0)
            goto LABEL_89;
        }
        else
        {
          v10 = v156;
        }
        goto LABEL_214;
      }
    }
    else
    {
      v104 = *(_DWORD *)v96;
    }
    v105 = *(_QWORD *)(16 * (v104 & 0xFFFFFFFE) + 0x30);
    v10 = v156;
    if (!v105)
      v105 = *(_QWORD *)(v96 + 16);
LABEL_214:
    if ((v105 & 0xFFFE000000000002) == 0)
    {
      v96 = v105;
      if (*(unsigned __int8 *)(v105 + 5) > 0x16u)
        continue;
    }
    goto LABEL_89;
  }
  v68 = HIDWORD(v103);
  if ((int)v103 > 63)
  {
    v106 = *(_QWORD *)(v96 + 8) - 8;
    v107 = 0x3F00000000 - (v103 << 32);
  }
  else
  {
    v106 = v96 + 16;
    v107 = v103 << 32;
  }
  v108 = *(_QWORD *)(v106 + (v107 >> 29));
  if ((v108 & 0xFFFE000000000002) == 0)
  {
    v112 = *(unsigned __int8 *)(v108 + 5);
    if (v112 != 6)
    {
      if (v112 != 5)
        goto LABEL_223;
      goto LABEL_154;
    }
    v94 = *(_DWORD *)(v101 + 16) & 3;
    v113 = *(_QWORD *)(v108 + 16);
    if (MEMORY[0x1E0CBE830] == 16 * *(unsigned int *)(16 * (*(_DWORD *)v108 & 0xFFFFFFFE) + 0x4C))
    {
      v115 = *(_QWORD *)(v108 + 24);
      v114 = *(_QWORD *)(v108 + 32);
      v157 = *(_QWORD *)(v108 + 8);
      v158 = v113;
      LODWORD(v159) = HIDWORD(v103);
      v161 = v96;
      BYTE1(v163) = 3;
      v57 = 0;
      v58 = 1;
      if (v94 != 2)
        LOBYTE(v163) = 1;
      HIBYTE(v163) = 1;
      v167 = v115;
      v168 = v114;
      goto LABEL_129;
    }
    v157 = *(_QWORD *)(v108 + 8);
    v158 = v113;
    LODWORD(v159) = HIDWORD(v103);
    v161 = v96;
    goto LABEL_218;
  }
LABEL_223:
  v57 = 0;
  v157 = v108;
  v161 = v96;
LABEL_128:
  v159 = __PAIR64__(v33, v68);
  v58 = 1;
  LOWORD(v163) = 257;
LABEL_129:
  v10 = v156;
LABEL_90:
  if (v166)
  {
    v63 = *((_DWORD *)v165 + 1);
    if (!v63)
    {
      __break(0xC471u);
      JUMPOUT(0x1944F85D8);
    }
    *((_DWORD *)v165 + 1) = v63 - 1;
  }
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  v64 = *(_QWORD *)(a2 + 56);
  if ((v58 & 1) != 0)
  {
    v10 = *(JSC::VM **)(a2 + 56);
    goto LABEL_43;
  }
  if (v57 && (v65 = *((_DWORD *)v57 + 1)) != 0)
  {
    if (v65 != 1)
      goto LABEL_100;
    v81 = (unsigned __int8 *)*((_QWORD *)v57 + 1);
    if ((*((_BYTE *)v57 + 16) & 4) != 0)
    {
      v82 = *v81;
      goto LABEL_151;
    }
    v88 = *(unsigned __int16 *)v81;
    if (v88 > 0xFF)
    {
LABEL_100:
      v66 = *(_QWORD *)(v64 + 64760);
      if (!v66 || v57 != *(WTF::StringImpl **)(v66 + 8))
        v66 = JSC::jsStringWithCacheSlowCase();
    }
    else
    {
      v82 = v88;
LABEL_151:
      v66 = *(_QWORD *)(v64 + 8 * v82 + 42216);
    }
  }
  else
  {
    v66 = *(_QWORD *)(v64 + 41968);
  }
  if (*((_DWORD *)v10 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v10) & 1) != 0)
  {
    v43 = 0;
  }
  else
  {
    *(_QWORD *)a4 = v66;
    *(_DWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = a1;
    v43 = 1;
    *(_BYTE *)(a4 + 49) = 1;
  }
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v15);
    else
      *(_DWORD *)v57 -= 2;
  }
  return v43;
}

const WTF::String **WebCore::DatasetDOMStringMap::item(WebCore::DatasetDOMStringMap *this, const WTF::String **a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  const WTF::String **v7;
  uint64_t v8;
  unsigned int v9;
  const WTF::String **v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;

  v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *(_DWORD *)(v5 + 24) += 2;
  v6 = *(_QWORD *)(v5 + 104);
  if (!v6)
    goto LABEL_21;
  v7 = a2;
  if ((*(_BYTE *)(v6 + 4) & 8) != 0)
    WebCore::StyledElement::synchronizeStyleAttributeInternalImpl((WebCore::StyledElement *)v5, (unsigned __int8 *)a2, a5, a3, a4);
  if ((*(_WORD *)(v5 + 28) & 0x20) != 0)
    WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v5);
  v8 = *(_QWORD *)(v5 + 104);
  if (!v8)
    goto LABEL_21;
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) != 0)
  {
    v11 = *(_DWORD *)(v8 + 52);
    if (!v11)
      goto LABEL_21;
    v10 = *(const WTF::String ***)(v8 + 40);
  }
  else
  {
    if (v9 < 0x20)
      goto LABEL_21;
    v10 = (const WTF::String **)(v8 + 32);
    v11 = v9 >> 5;
  }
  if (v11 != 1)
  {
    WebCore::convertPropertyNameToAttributeName((WTF *)&v19, *v7);
    if (v11)
    {
      v12 = 0;
      while (*((WTF::StringImpl **)v10[2 * v12] + 3) != v19)
      {
        v13 = v12 + 1;
        v12 = (v12 + 1);
        if (v11 == v13)
          goto LABEL_15;
      }
      v14 = 0;
      v7 = &v10[2 * v12 + 1];
    }
    else
    {
LABEL_15:
      v14 = 1;
    }
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (!v14)
    {
LABEL_22:
      if (!v5)
        return v7;
      goto LABEL_32;
    }
LABEL_21:
    v7 = 0;
    goto LABEL_22;
  }
  WebCore::convertAttributeNameToPropertyName((WebCore *)&v19, (const WTF::String *)((char *)*v10 + 24));
  v16 = v19;
  v18 = WTF::equal(v19, *v7, v17);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (!v18)
    goto LABEL_21;
  v7 = v10 + 1;
LABEL_32:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, a2);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v7;
}

WTF::StringImpl *WebCore::convertAttributeNameToPropertyName(WebCore *this, const WTF::String *a2)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  char v18;
  __int16 v19;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  if (*(_QWORD *)a2)
  {
    v3 = *(unsigned int *)(*(_QWORD *)a2 + 4);
    if (v3 >= 6)
    {
      v5 = 5;
      while (1)
      {
        v6 = *(_QWORD *)a2;
        if (!*(_QWORD *)a2)
          goto LABEL_18;
        v7 = *(unsigned int *)(v6 + 4);
        if (v7 <= v5)
          break;
        v8 = *(_DWORD *)(v6 + 16);
        v9 = *(_QWORD *)(v6 + 8);
        if ((v8 & 4) != 0)
          LODWORD(v6) = *(unsigned __int8 *)(v9 + v5);
        else
          LODWORD(v6) = *(unsigned __int16 *)(v9 + 2 * v5);
        if ((_DWORD)v6 != 45)
          goto LABEL_18;
        v10 = v5 + 1;
        if (v5 + 1 >= v3 || v7 <= v10)
        {
LABEL_16:
          v19 = 45;
          goto LABEL_19;
        }
        if ((v8 & 4) != 0)
        {
          v11 = *(unsigned __int8 *)(v9 + v10);
          if ((v11 - 97) > 0x19)
            goto LABEL_16;
        }
        else
        {
          v11 = *(unsigned __int16 *)(v9 + 2 * v10);
          if ((v11 - 97) >= 0x1A)
            goto LABEL_16;
        }
        v19 = v11 & 0xFFDF;
        WTF::StringBuilder::append();
        ++v5;
LABEL_20:
        if (++v5 >= v3)
          goto LABEL_21;
      }
      LOWORD(v6) = 0;
LABEL_18:
      v19 = v6;
LABEL_19:
      WTF::StringBuilder::append();
      goto LABEL_20;
    }
  }
LABEL_21:
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v15);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v15);
  result = v15;
  if (v15)
    *(_DWORD *)v15 += 2;
  *(_QWORD *)this = result;
  v14 = v16;
  v16 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
    {
      WTF::StringImpl::destroy(v14, v12);
      result = v15;
    }
    else
    {
      *(_DWORD *)v14 -= 2;
    }
  }
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RenderTableCell::borderHalfEnd(WebCore::RenderTableCell *this, int a2)
{
  void *v4;
  float v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float v13;
  double v14;
  float v15;
  double v16;
  uint64_t v17;
  WTF *v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  char v26;

  WebCore::RenderTableCell::collapsedEndBorder((uint64_t)&v24, this, 0);
  if ((v26 & 0x70) != 0)
  {
    v5 = 0.0;
    if ((v26 & 0xE) != 0)
      v5 = (float)v24 * 0.015625;
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    v7 = 1.0;
    if (v6)
    {
      v8 = *(_QWORD *)(v6 + 8);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 24);
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = (*(_DWORD *)v10)++;
            v7 = *(float *)(v10 + 364);
            if (v11)
            {
              *(_DWORD *)v10 = v11;
            }
            else
            {
              WebCore::Page::~Page(v10);
              WTF::fastFree(v19, v20);
            }
          }
        }
      }
    }
    v12 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (*(_BYTE *)(v12 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944F951CLL);
    }
    v13 = 1.0 / v7;
    if (a2 == (*(_BYTE *)(v12 + 123) & 4) >> 2)
      v13 = 0.0;
    v14 = (float)((float)(v5 + v13) * 0.5) * 64.0;
    if (v14 >= 2147483650.0)
    {
      v15 = 2147500000.0;
    }
    else if (v14 <= -2147483650.0)
    {
      v15 = -2147500000.0;
    }
    else
    {
      v15 = (float)(int)v14;
    }
    v16 = (float)(floorf((float)(v7 * v15) * 0.015625) / v7) * 64.0;
    if (v16 >= 2147483650.0)
    {
      v17 = 0x7FFFFFFFLL;
    }
    else if (v16 <= -2147483650.0)
    {
      v17 = 0x80000000;
    }
    else
    {
      v17 = (int)v16;
    }
  }
  else
  {
    v17 = 0;
  }
  if ((v25 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFLL);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v4);
    }
  }
  return v17;
}

uint64_t WebCore::RenderTableCell::collapsedEndBorder(uint64_t a1, WebCore::RenderTableCell *this, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v12;
  int v13;
  int v14;
  uint64_t *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float v20;
  double v21;
  int v22;
  unint64_t v23;
  unint64_t *v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t *v41;
  float *v42;
  float *v43;
  float *v44;
  float *v45;
  float *v46;
  float v47;
  double v48;
  int v49;
  char v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  _BOOL4 v89;
  uint64_t v90;
  _BOOL4 v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t *v96;
  float *v97;
  float *v98;
  float *v99;
  float *v100;
  float *v101;
  float v102;
  double v103;
  int v104;
  char v105;
  unsigned int v106;
  char v107;
  char v108;
  char v109;
  unsigned int v110;
  unint64_t *v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t *v118;
  float *v119;
  float *v120;
  float *v121;
  float *v122;
  float *v123;
  float v124;
  double v125;
  int v126;
  char v127;
  unsigned int v128;
  char v129;
  char v130;
  char v131;
  unsigned int v132;
  unint64_t *v133;
  int v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  unsigned int v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  float *v145;
  float *v146;
  float *v147;
  float *v148;
  BOOL v149;
  uint64_t *v150;
  float *v151;
  float v152;
  double v153;
  int v154;
  char v155;
  unsigned int v156;
  char v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t *v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  _BOOL4 v166;
  uint64_t v167;
  _BOOL4 v168;
  uint64_t v169;
  _BOOL4 v170;
  uint64_t v171;
  int v172;
  int v173;
  uint64_t *v174;
  float *v175;
  float *v176;
  uint64_t *v177;
  float *v178;
  unsigned int *v179;
  unsigned int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  BOOL v185;
  unsigned int *v186;
  unsigned int v187;
  unsigned int *v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  BOOL v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  BOOL v203;
  unsigned int *v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int *v208;
  unsigned int v209;
  unsigned int *v210;
  unsigned int v211;
  uint64_t *v212;
  float *v213;
  float *v214;
  uint64_t *v215;
  float *v216;
  int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int *v224;
  unsigned int v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unsigned int v239;
  BOOL v240;
  uint64_t v241;
  uint64_t v242;
  float *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  float *v248;
  uint64_t v249;
  unsigned int v250;
  BOOL v251;
  uint64_t v252;
  float *started;
  uint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int *v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  float *v320;
  float *v321;
  float *v322;
  unsigned int *v323;
  unsigned int *v324;
  unsigned int *v325;
  int v326;
  int v327;
  uint64_t v328;
  char v329;
  unint64_t v330[4];
  BOOL v331[2];
  unint64_t v332;
  unint64_t v333[3];
  unint64_t v334;
  unint64_t v335;
  int v336;
  char v337;

  result = *((_QWORD *)this + 4);
  if (!result)
    goto LABEL_12;
  v5 = *(_QWORD *)(result + 8);
  if (!v5)
    goto LABEL_12;
  if (*(_BYTE *)(v5 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA0DCLL);
  }
  v6 = *(_QWORD *)(v5 + 32);
  if (!v6)
    goto LABEL_12;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_12;
  if (*(_BYTE *)(v7 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA0FCLL);
  }
  v8 = *(_QWORD *)(v7 + 32);
  if (!v8)
    goto LABEL_12;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_12;
  v12 = *(unsigned __int8 *)(v9 + 46);
  if (v12 != 35 && v12 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA5FCLL);
  }
  if ((*((_DWORD *)this + 62) & 0x80000000) != 0)
  {
LABEL_12:
    LODWORD(v335) = 1;
    v336 = 1077936128;
    v337 = 0;
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 96;
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS8_17StyleCurrentColorEN3WTF9UniqueRefINS8_13StyleColorMixEEENSC_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSC_INSF_INS8_17HSLFunctionModernEEEEENSC_INSF_INS8_11HWBFunctionEEEEENSC_INSF_INS8_11LabFunctionEEEEENSC_INSF_INS8_11LCHFunctionEEEEENSC_INSF_INS8_13OKLabFunctionEEEEENSC_INSF_INS8_13OKLCHFunctionEEEEENSC_INSF_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEEEENSC_INSF_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEEEENSC_INSF_INS11_INS8_21ExtendedLinearEncodedIfS1N_EEEEEEEENSC_INSF_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSC_INSF_INS1X_INS1Y_IfLS1Z_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS29_1EJS9_SA_SE_SI_SL_SO_SR_SU_SX_S10_S17_S1C_S1H_S1M_S1R_S1W_S23_S27_EEEEEEDcS2B_DpT0_(v330, &v334);
  }
  if ((*(_BYTE *)(v9 + 328) & 1) != 0)
  {
    v190 = WebCore::RenderTableCell::section(result);
    return (uint64_t)WebCore::RenderTableSection::cachedCollapsedBorder(v190, (uint64_t)this, 3, a1);
  }
  if (a3)
  {
    v13 = WebCore::CSSProperty::resolveDirectionAwareProperty(371, (*(_DWORD *)(v5 + 120) >> 26) & 1, (unsigned __int16)*(_DWORD *)(v5 + 124) >> 13);
    v171 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (v171)
    {
      if (*(_BYTE *)(v171 + 46) != 39)
      {
        __break(0xC471u);
        JUMPOUT(0x1944FA5A0);
      }
    }
    else if (MEMORY[0x2E] != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944FB260);
    }
    v172 = WebCore::CSSProperty::resolveDirectionAwareProperty(368, (*(_DWORD *)(v171 + 120) >> 26) & 1, (unsigned __int16)*(_DWORD *)(v171 + 124) >> 13);
    v173 = *((_DWORD *)this + 30);
    v174 = *(uint64_t **)(*((_QWORD *)this + 11) + 24);
    v175 = (float *)(v174 + 19);
    if ((v173 & 0x4000000) == 0)
      v175 = (float *)(v174 + 22);
    v176 = (float *)(v174 + 13);
    v177 = v174 + 16;
    if ((v173 & 0x4000000) != 0)
      v178 = v176;
    else
      v178 = (float *)v177;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v19 = v178;
    else
      v19 = v175;
    v326 = v172;
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter((uint64_t)this + 80, v172, 0, &v334);
  }
  else
  {
    v326 = 0;
    v13 = 0;
    v14 = *((_DWORD *)this + 30);
    v15 = *(uint64_t **)(*((_QWORD *)this + 11) + 24);
    v16 = (float *)(v15 + 19);
    if ((v14 & 0x4000000) == 0)
      v16 = (float *)(v15 + 22);
    v149 = (v14 & 0x4000000) == 0;
    v17 = (float *)(v15 + 13);
    v18 = (float *)(v15 + 16);
    if (v149)
      v17 = v18;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v19 = v17;
    else
      v19 = v16;
    v334 = 0;
  }
  v20 = v19[4];
  v21 = 0.0;
  if (v20 == 0.0 || ((_BYTE)v19[5] & 0xF) == 0)
    goto LABEL_27;
  v21 = v20 * 64.0;
  if (v21 < 2147483650.0)
  {
    if (v21 > -2147483650.0)
    {
LABEL_27:
      v22 = (int)v21;
      goto LABEL_28;
    }
    v22 = 0x80000000;
  }
  else
  {
    v22 = 0x7FFFFFFF;
  }
LABEL_28:
  *(_DWORD *)a1 = v22;
  v23 = v334;
  *(_QWORD *)(a1 + 8) = v334;
  v24 = (unint64_t *)(a1 + 8);
  if ((v23 & 0x8000000000000) != 0)
  {
    v179 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
    do
      v180 = __ldaxr(v179);
    while (__stlxr(v180 + 1, v179));
  }
  v25 = (_BYTE)v19[5] & 0xF;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 16) & 0x80 | v25 | 0x60;
  if (*((_DWORD *)v19 + 2) || (v88 = *(_QWORD *)v19, (*(_QWORD *)v19 & 0x4000000000000) == 0))
  {
    v26 = 0;
  }
  else
  {
    if ((v88 & 0x8000000000000) != 0)
      v89 = *(float *)((v88 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v89 = *(_QWORD *)v19 != 0;
    if (v89)
      v26 = 0;
    else
      v26 = 0x80;
  }
  *(_BYTE *)(a1 + 16) = v25 | v26 | 0x60;
  if ((v334 & 0x8000000000000) != 0)
  {
    result = v334 & 0xFFFFFFFFFFFFLL;
    do
    {
      v257 = __ldaxr((unsigned int *)result);
      v258 = v257 - 1;
    }
    while (__stlxr(v258, (unsigned int *)result));
    if (!v258)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  v27 = *((_QWORD *)this + 4);
  if (!v27)
    goto LABEL_113;
  v28 = *(_QWORD *)(v27 + 8);
  if (!v28)
    goto LABEL_113;
  if (*(_BYTE *)(v28 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA18CLL);
  }
  v29 = *(_QWORD *)(v28 + 32);
  if (!v29)
    goto LABEL_113;
  v30 = *(_QWORD *)(v29 + 8);
  if (!v30)
    goto LABEL_113;
  if (*(_BYTE *)(v30 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA1ACLL);
  }
  v31 = *(_QWORD *)(v30 + 32);
  if (!v31)
    goto LABEL_113;
  v32 = *(_QWORD *)(v31 + 8);
  if (!v32)
    goto LABEL_113;
  v33 = *(unsigned __int8 *)(v32 + 46);
  if (v33 != 35 && v33 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA738);
  }
  v34 = *((_DWORD *)this + 62);
  v35 = v34 & 0x1FFFFFF;
  if ((v34 & 0x4000000) != 0)
    v36 = WebCore::RenderTableCell::parseColSpanFromDOM(this);
  else
    v36 = 1;
  v37 = v35 + v36 - 1;
  v38 = *(unsigned int *)(v32 + 228);
  if ((*(_BYTE *)(v32 + 328) & 0x40) != 0)
  {
    if ((_DWORD)v38)
    {
      v226 = 0;
      v227 = 0;
      while (1)
      {
        v227 += *(_DWORD *)(*(_QWORD *)(v32 + 216) + 4 * v226);
        if (v227 - 1 >= v37)
          break;
        if (v38 == ++v226)
        {
          v37 = *(_DWORD *)(v32 + 228);
          goto LABEL_45;
        }
      }
      v37 = v226;
    }
    else
    {
      v37 = 0;
    }
  }
LABEL_45:
  v39 = v38 - 1;
  if (v37 != (_DWORD)v38 - 1)
  {
    result = WebCore::RenderTable::cellAfter((WebCore::RenderTable *)v32, this);
    if (result)
    {
      v40 = *(_DWORD *)(result + 120);
      v41 = *(uint64_t **)(*(_QWORD *)(result + 88) + 24);
      v42 = (float *)(v41 + 22);
      if ((v40 & 0x4000000) == 0)
        v42 = (float *)(v41 + 19);
      v43 = (float *)(v41 + 16);
      v44 = (float *)(v41 + 13);
      if ((v40 & 0x4000000) != 0)
        v45 = v43;
      else
        v45 = v44;
      if (((*(_DWORD *)(result + 124) >> 13) & 6u) - 2 >= 4)
        v46 = v45;
      else
        v46 = v42;
      if (a3)
        result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(result + 80, v13, 0, v330);
      else
        v330[0] = 0;
      v47 = v46[4];
      v48 = 0.0;
      if (v47 == 0.0 || ((_BYTE)v46[5] & 0xF) == 0)
        goto LABEL_59;
      v48 = v47 * 64.0;
      if (v48 < 2147483650.0)
      {
        if (v48 > -2147483650.0)
        {
LABEL_59:
          v49 = (int)v48;
          goto LABEL_60;
        }
        v49 = 0x80000000;
      }
      else
      {
        v49 = 0x7FFFFFFF;
      }
LABEL_60:
      LODWORD(v334) = v49;
      v335 = v330[0];
      if ((v330[0] & 0x8000000000000) != 0)
      {
        v186 = (unsigned int *)(v330[0] & 0xFFFFFFFFFFFFLL);
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 + 1, v186));
      }
      if (*((_DWORD *)v46 + 2) || (v90 = *(_QWORD *)v46, (*(_QWORD *)v46 & 0x4000000000000) == 0))
      {
        v50 = 0;
      }
      else
      {
        if ((v90 & 0x8000000000000) != 0)
          v91 = *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
        else
          v91 = *(_QWORD *)v46 != 0;
        if (v91)
          v50 = 0;
        else
          v50 = 0x80;
      }
      LOBYTE(v336) = (_BYTE)v46[5] & 0xF | v50 | 0x60;
      if ((v330[0] & 0x8000000000000) != 0)
      {
        result = v330[0] & 0xFFFFFFFFFFFFLL;
        do
        {
          v261 = __ldaxr((unsigned int *)result);
          v262 = v261 - 1;
        }
        while (__stlxr(v262, (unsigned int *)result));
        if (!v262)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, this);
        }
      }
      v51 = *(unsigned __int8 *)(a1 + 16);
      if ((v336 & 0x70) == 0)
        goto LABEL_69;
      if ((v51 & 0x70) == 0)
        goto LABEL_259;
      v52 = v336 & 0xF;
      v53 = v51 & 0xF;
      if (v52 == 1)
      {
        v54 = (unint64_t *)a1;
        if (v53 != 1)
          goto LABEL_259;
      }
      else
      {
        if (v53 == 1 || (v336 & 0xF) == 0)
        {
LABEL_69:
          v54 = (unint64_t *)a1;
          goto LABEL_70;
        }
        if ((v51 & 0xF) == 0)
          goto LABEL_259;
        v181 = *(_DWORD *)a1;
        v182 = v334;
        if ((v51 & 0xE) != 0)
          v183 = *(_DWORD *)a1;
        else
          v183 = 0;
        if ((v336 & 0xE) != 0)
          v184 = v334;
        else
          v184 = 0;
        if (v183 == v184)
        {
          v185 = v53 >= v52;
          if (v53 == v52)
          {
            v54 = (unint64_t *)a1;
            if (((v51 >> 4) & 7) < ((v336 >> 4) & 7u))
            {
LABEL_259:
              v54 = &v334;
              LOBYTE(v51) = v336;
            }
          }
          else
          {
            v54 = (unint64_t *)a1;
            if (!v185)
              goto LABEL_259;
          }
        }
        else
        {
          if ((v51 & 0xE) == 0)
            v181 = 0;
          if ((v336 & 0xE) == 0)
            v182 = 0;
          v54 = (unint64_t *)a1;
          if (v181 < v182)
            goto LABEL_259;
        }
      }
LABEL_70:
      if ((v51 & 0xF) == 1)
      {
        v55 = 0;
        v56 = 0;
        LOBYTE(v51) = 0;
      }
      else
      {
        v55 = *(_DWORD *)v54;
        v56 = v54[1];
        if ((v56 & 0x8000000000000) != 0)
        {
          v188 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFLL);
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 + 1, v188));
          LOBYTE(v51) = *((_BYTE *)v54 + 16);
        }
      }
      *(_DWORD *)a1 = v55;
      v57 = *(_QWORD *)(a1 + 8);
      if ((v57 & 0x8000000000000) != 0)
      {
        if ((v56 & 0x8000000000000) != 0)
        {
          *(_OWORD *)v330 = *(_OWORD *)((v57 & 0xFFFFFFFFFFFFLL) + 4);
          v323 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFLL);
          *(_OWORD *)v333 = *(_OWORD *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
          result = WebCore::operator==<float,4ul>((float *)v330, (float *)v333);
          v57 = *v24;
          if ((_DWORD)result)
          {
            if (HIBYTE(v57) == HIBYTE(v56) && BYTE6(v57) == BYTE6(v56))
            {
              *(_BYTE *)(a1 + 16) = v51;
              do
              {
                v265 = __ldaxr(v323);
                v266 = v265 - 1;
              }
              while (__stlxr(v266, v323));
              if (!v266)
              {
                atomic_store(1u, v323);
                result = WTF::fastFree((WTF *)(v56 & 0xFFFFFFFFFFFFLL), this);
              }
LABEL_78:
              v58 = *(_BYTE *)(a1 + 16) & 0x70;
              if ((v335 & 0x8000000000000) != 0)
              {
                result = v335 & 0xFFFFFFFFFFFFLL;
                do
                {
                  v263 = __ldaxr((unsigned int *)result);
                  v264 = v263 - 1;
                }
                while (__stlxr(v264, (unsigned int *)result));
                if (!v264)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, this);
                }
              }
              if (!v58)
                goto LABEL_113;
              goto LABEL_80;
            }
          }
        }
      }
      else if ((v56 & 0x8000000000000) == 0 && v57 == v56)
      {
LABEL_77:
        *(_BYTE *)(a1 + 16) = v51;
        goto LABEL_78;
      }
      if ((v57 & 0x8000000000000) != 0)
      {
        result = v57 & 0xFFFFFFFFFFFFLL;
        do
        {
          v259 = __ldaxr((unsigned int *)result);
          v260 = v259 - 1;
        }
        while (__stlxr(v260, (unsigned int *)result));
        if (!v260)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, this);
        }
      }
      *(_QWORD *)(a1 + 8) = v56;
      goto LABEL_77;
    }
  }
LABEL_80:
  v59 = *((_DWORD *)this + 62);
  v60 = *((_QWORD *)this + 4);
  if (!v60)
    goto LABEL_272;
  v61 = *(_QWORD *)(v60 + 8);
  if (!v61)
    goto LABEL_272;
  if (*(_BYTE *)(v61 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA1CCLL);
  }
  v62 = *(_QWORD *)(v61 + 32);
  if (!v62)
    goto LABEL_272;
  v63 = *(_QWORD *)(v62 + 8);
  if (!v63)
    goto LABEL_272;
  if (*(_BYTE *)(v63 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA22CLL);
  }
  v64 = *(_QWORD *)(v63 + 32);
  if (v64)
  {
    v65 = *(_QWORD *)(v64 + 8);
    if (v65)
    {
      v66 = *(unsigned __int8 *)(v65 + 46);
      if (v66 != 35 && v66 != 63)
      {
        __break(0xC471u);
        JUMPOUT(0x1944FAA94);
      }
    }
  }
  else
  {
LABEL_272:
    v65 = 0;
  }
  v67 = v59 & 0x1FFFFFF;
  if ((v59 & 0x4000000) != 0)
    result = WebCore::RenderTableCell::parseColSpanFromDOM(this);
  else
    result = 1;
  v68 = v67 + result - 1;
  if ((*(_BYTE *)(v65 + 328) & 0x40) != 0)
  {
    v228 = *(unsigned int *)(v65 + 228);
    if ((_DWORD)v228)
    {
      v229 = 0;
      v230 = 0;
      while (1)
      {
        v230 += *(_DWORD *)(*(_QWORD *)(v65 + 216) + 4 * v229);
        if (v230 - 1 >= v68)
          break;
        if (v228 == ++v229)
        {
          v68 = *(_DWORD *)(v65 + 228);
          goto LABEL_93;
        }
      }
      v68 = v229;
    }
    else
    {
      v68 = 0;
    }
  }
LABEL_93:
  v69 = *((_QWORD *)this + 4);
  if (!v69)
    goto LABEL_104;
  v70 = *(_QWORD *)(v69 + 8);
  if (*(_BYTE *)(v70 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA1ECLL);
  }
  v71 = *(_QWORD *)(*(_QWORD *)(v70 + 32) + 8);
  if (*(_BYTE *)(v71 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA20CLL);
  }
  v72 = *(_QWORD *)(*(_QWORD *)(v71 + 32) + 8);
  v73 = *(unsigned __int8 *)(v72 + 46);
  if (v73 != 35 && v73 != 63)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FAA74);
  }
  v74 = ((*((_BYTE *)this + 123) & 4) == 0) ^ ((*(_BYTE *)(v71 + 123) & 4) >> 2);
  if (v67 || (v74 & 1) != 0)
  {
    v75 = v68 == *(_DWORD *)(v72 + 228) - 1 ? v74 : 0;
    if (v75 != 1)
    {
LABEL_104:
      v76 = 0;
      goto LABEL_105;
    }
  }
  v117 = *(_DWORD *)(v70 + 120);
  v118 = *(uint64_t **)(*(_QWORD *)(v70 + 88) + 24);
  v119 = (float *)(v118 + 19);
  if ((v117 & 0x4000000) == 0)
    v119 = (float *)(v118 + 22);
  v120 = (float *)(v118 + 13);
  v121 = (float *)(v118 + 16);
  if ((v117 & 0x4000000) != 0)
    v122 = v120;
  else
    v122 = v121;
  if (((*(_DWORD *)(v70 + 124) >> 13) & 6u) - 2 >= 4)
    v123 = v122;
  else
    v123 = v119;
  if (a3)
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v70 + 80, v326, 0, &v332);
  else
    v332 = 0;
  v124 = v123[4];
  v125 = 0.0;
  if (v124 == 0.0 || ((_BYTE)v123[5] & 0xF) == 0)
    goto LABEL_192;
  v125 = v124 * 64.0;
  if (v125 < 2147483650.0)
  {
    if (v125 > -2147483650.0)
    {
LABEL_192:
      v126 = (int)v125;
      goto LABEL_193;
    }
    v126 = 0x80000000;
  }
  else
  {
    v126 = 0x7FFFFFFF;
  }
LABEL_193:
  LODWORD(v334) = v126;
  v335 = v332;
  if ((v332 & 0x8000000000000) != 0)
  {
    v204 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFLL);
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 + 1, v204));
  }
  v127 = *((_BYTE *)v123 + 20);
  v128 = v127 & 0xF;
  if (*((_DWORD *)v123 + 2) || (v165 = *(_QWORD *)v123, (*(_QWORD *)v123 & 0x4000000000000) == 0))
  {
    v129 = 0;
  }
  else
  {
    if ((v165 & 0x8000000000000) != 0)
      v166 = *(float *)((v165 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v166 = *(_QWORD *)v123 != 0;
    if (v166)
      v129 = 0;
    else
      v129 = 0x80;
  }
  v130 = v128 | v129 | 0x50;
  LOBYTE(v336) = v130;
  v131 = *(_BYTE *)(a1 + 16);
  if ((v131 & 0x70) == 0)
    goto LABEL_291;
  v132 = v131 & 0xF;
  if (v128 == 1)
  {
    v133 = (unint64_t *)a1;
    if (v132 != 1)
      goto LABEL_291;
  }
  else
  {
    if ((v127 & 0xF) == 0 || v132 == 1)
    {
      v133 = (unint64_t *)a1;
      goto LABEL_201;
    }
    if ((v131 & 0xF) == 0)
      goto LABEL_291;
    v192 = *(_DWORD *)a1;
    v193 = v334;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v194 = *(_DWORD *)a1;
    else
      v194 = 0;
    v195 = v127 & 0xE;
    if (v195)
      v196 = v334;
    else
      v196 = 0;
    if (v194 == v196)
    {
      v197 = v132 >= v128;
      if (v132 == v128)
      {
        v133 = (unint64_t *)a1;
        if ((v131 & 0x70u) < 0x50)
        {
LABEL_291:
          v133 = &v334;
          v131 = v130;
        }
      }
      else
      {
        v133 = (unint64_t *)a1;
        if (!v197)
          goto LABEL_291;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v192 = 0;
      if (!v195)
        v193 = 0;
      v133 = (unint64_t *)a1;
      if (v192 < v193)
        goto LABEL_291;
    }
  }
LABEL_201:
  if ((v131 & 0xF) == 1)
  {
    v134 = 0;
    v135 = 0;
    v131 = 0;
  }
  else
  {
    v134 = *(_DWORD *)v133;
    v135 = v133[1];
    if ((v135 & 0x8000000000000) != 0)
    {
      v206 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFLL);
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 + 1, v206));
      v131 = *((_BYTE *)v133 + 16);
    }
  }
  *(_DWORD *)a1 = v134;
  v136 = *(_QWORD *)(a1 + 8);
  if ((v136 & 0x8000000000000) == 0)
  {
    if ((v135 & 0x8000000000000) == 0 && v136 == v135)
    {
LABEL_208:
      *(_BYTE *)(a1 + 16) = v131;
      goto LABEL_209;
    }
LABEL_206:
    if ((v136 & 0x8000000000000) != 0)
    {
      result = v136 & 0xFFFFFFFFFFFFLL;
      do
      {
        v267 = __ldaxr((unsigned int *)result);
        v268 = v267 - 1;
      }
      while (__stlxr(v268, (unsigned int *)result));
      if (!v268)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    *(_QWORD *)(a1 + 8) = v135;
    goto LABEL_208;
  }
  if ((v135 & 0x8000000000000) == 0)
    goto LABEL_206;
  *(_OWORD *)v330 = *(_OWORD *)((v136 & 0xFFFFFFFFFFFFLL) + 4);
  v324 = (unsigned int *)(v135 & 0xFFFFFFFFFFFFLL);
  *(_OWORD *)v333 = *(_OWORD *)((v135 & 0xFFFFFFFFFFFFLL) + 4);
  result = WebCore::operator==<float,4ul>((float *)v330, (float *)v333);
  v136 = *v24;
  if (!(_DWORD)result || HIBYTE(v136) != HIBYTE(v135) || BYTE6(v136) != BYTE6(v135))
    goto LABEL_206;
  *(_BYTE *)(a1 + 16) = v131;
  do
  {
    v283 = __ldaxr(v324);
    v284 = v283 - 1;
  }
  while (__stlxr(v284, v324));
  if (!v284)
  {
    atomic_store(1u, v324);
    result = WTF::fastFree((WTF *)(v135 & 0xFFFFFFFFFFFFLL), this);
  }
LABEL_209:
  if ((v335 & 0x8000000000000) != 0)
  {
    result = v335 & 0xFFFFFFFFFFFFLL;
    do
    {
      v271 = __ldaxr((unsigned int *)result);
      v272 = v271 - 1;
    }
    while (__stlxr(v272, (unsigned int *)result));
    if (!v272)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  if ((v332 & 0x8000000000000) != 0)
  {
    result = v332 & 0xFFFFFFFFFFFFLL;
    do
    {
      v273 = __ldaxr((unsigned int *)result);
      v274 = v273 - 1;
    }
    while (__stlxr(v274, (unsigned int *)result));
    if (!v274)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_113;
  result = *((_QWORD *)this + 4);
  v137 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v137 + 46) != 39)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA2E0);
  }
  v138 = *(_QWORD *)(*(_QWORD *)(v137 + 32) + 8);
  if (*(_BYTE *)(v138 + 46) != 40)
  {
    __break(0xC471u);
    JUMPOUT(0x1944FA300);
  }
  v139 = *(_DWORD *)(v138 + 120);
  v140 = (v139 & 0x4000000) == 0;
  v141 = ((*(_DWORD *)(v138 + 124) >> 13) & 6) - 2;
  v142 = *(uint64_t **)(*(_QWORD *)(v138 + 88) + 24);
  v143 = v142 + 22;
  v144 = v142 + 19;
  if ((v139 & 0x4000000) != 0)
    v145 = (float *)(v142 + 22);
  else
    v145 = (float *)(v142 + 19);
  v146 = (float *)(v142 + 16);
  v147 = (float *)(v142 + 13);
  if ((v139 & 0x4000000) != 0)
    v148 = v146;
  else
    v148 = v147;
  if (v141 >= 4)
    v145 = v148;
  v149 = (v139 & 0x4000000) == 0;
  if ((v139 & 0x4000000) != 0)
    v150 = v144;
  else
    v150 = v143;
  if (v149)
    v147 = v146;
  if (v141 < 4)
    v147 = (float *)v150;
  if (v140 == (*((_BYTE *)this + 123) & 4) >> 2)
    v151 = v145;
  else
    v151 = v147;
  if (a3)
  {
    v191 = WebCore::RenderTableCell::section(result);
    result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v191 + 80, v326, 0, &v332);
  }
  else
  {
    v332 = 0;
  }
  v152 = v151[4];
  v153 = 0.0;
  if (v152 == 0.0 || ((_BYTE)v151[5] & 0xF) == 0)
    goto LABEL_237;
  v153 = v152 * 64.0;
  if (v153 < 2147483650.0)
  {
    if (v153 > -2147483650.0)
    {
LABEL_237:
      v154 = (int)v153;
      goto LABEL_238;
    }
    v154 = 0x80000000;
  }
  else
  {
    v154 = 0x7FFFFFFF;
  }
LABEL_238:
  LODWORD(v334) = v154;
  v335 = v332;
  if ((v332 & 0x8000000000000) != 0)
  {
    v208 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFLL);
    do
      v209 = __ldaxr(v208);
    while (__stlxr(v209 + 1, v208));
  }
  v155 = *((_BYTE *)v151 + 20);
  v156 = v155 & 0xF;
  if (*((_DWORD *)v151 + 2) || (v167 = *(_QWORD *)v151, (*(_QWORD *)v151 & 0x4000000000000) == 0))
  {
    v157 = 0;
  }
  else
  {
    if ((v167 & 0x8000000000000) != 0)
      v168 = *(float *)((v167 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
    else
      v168 = *(_QWORD *)v151 != 0;
    if (v168)
      v157 = 0;
    else
      v157 = 0x80;
  }
  v158 = v156 | v157 | 0x40;
  LOBYTE(v336) = v158;
  v159 = *(_BYTE *)(a1 + 16);
  if ((v159 & 0x70) == 0)
    goto LABEL_293;
  v160 = v159 & 0xF;
  if (v156 == 1)
  {
    v161 = (unint64_t *)a1;
    if (v160 != 1)
      goto LABEL_293;
  }
  else
  {
    if ((v155 & 0xF) == 0 || v160 == 1)
    {
      v161 = (unint64_t *)a1;
      goto LABEL_246;
    }
    if ((v159 & 0xF) == 0)
      goto LABEL_293;
    v198 = *(_DWORD *)a1;
    v199 = v334;
    if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
      v200 = *(_DWORD *)a1;
    else
      v200 = 0;
    v201 = v155 & 0xE;
    if (v201)
      v202 = v334;
    else
      v202 = 0;
    if (v200 == v202)
    {
      v203 = v160 >= v156;
      if (v160 == v156)
      {
        v161 = (unint64_t *)a1;
        if ((*(_BYTE *)(a1 + 16) & 0x40) == 0)
        {
LABEL_293:
          v161 = &v334;
          v159 = v158;
        }
      }
      else
      {
        v161 = (unint64_t *)a1;
        if (!v203)
          goto LABEL_293;
      }
    }
    else
    {
      if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
        v198 = 0;
      if (!v201)
        v199 = 0;
      v161 = (unint64_t *)a1;
      if (v198 < v199)
        goto LABEL_293;
    }
  }
LABEL_246:
  if ((v159 & 0xF) == 1)
  {
    v163 = 0;
    v162 = 0;
    v159 = 0;
  }
  else
  {
    v162 = *(_DWORD *)v161;
    v163 = v161[1];
    if ((v163 & 0x8000000000000) != 0)
    {
      v210 = (unsigned int *)(v163 & 0xFFFFFFFFFFFFLL);
      do
        v211 = __ldaxr(v210);
      while (__stlxr(v211 + 1, v210));
      v159 = *((_BYTE *)v161 + 16);
    }
  }
  *(_DWORD *)a1 = v162;
  v164 = *(_QWORD *)(a1 + 8);
  if ((v164 & 0x8000000000000) != 0)
  {
    if ((v163 & 0x8000000000000) != 0)
    {
      *(_OWORD *)v330 = *(_OWORD *)((v164 & 0xFFFFFFFFFFFFLL) + 4);
      v325 = (unsigned int *)(v163 & 0xFFFFFFFFFFFFLL);
      *(_OWORD *)v333 = *(_OWORD *)((v163 & 0xFFFFFFFFFFFFLL) + 4);
      result = WebCore::operator==<float,4ul>((float *)v330, (float *)v333);
      v164 = *v24;
      if ((_DWORD)result)
      {
        if (HIBYTE(v164) == HIBYTE(v163) && BYTE6(v164) == BYTE6(v163))
        {
          *(_BYTE *)(a1 + 16) = v159;
          do
          {
            v285 = __ldaxr(v325);
            v286 = v285 - 1;
          }
          while (__stlxr(v286, v325));
          if (!v286)
          {
            atomic_store(1u, v325);
            result = WTF::fastFree((WTF *)(v163 & 0xFFFFFFFFFFFFLL), this);
          }
          goto LABEL_254;
        }
      }
    }
    goto LABEL_251;
  }
  if ((v163 & 0x8000000000000) != 0 || v164 != v163)
  {
LABEL_251:
    if ((v164 & 0x8000000000000) != 0)
    {
      result = v164 & 0xFFFFFFFFFFFFLL;
      do
      {
        v269 = __ldaxr((unsigned int *)result);
        v270 = v269 - 1;
      }
      while (__stlxr(v270, (unsigned int *)result));
      if (!v270)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    *(_QWORD *)(a1 + 8) = v163;
  }
  *(_BYTE *)(a1 + 16) = v159;
LABEL_254:
  if ((v335 & 0x8000000000000) != 0)
  {
    result = v335 & 0xFFFFFFFFFFFFLL;
    do
    {
      v275 = __ldaxr((unsigned int *)result);
      v276 = v275 - 1;
    }
    while (__stlxr(v276, (unsigned int *)result));
    if (!v276)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  if ((v332 & 0x8000000000000) != 0)
  {
    result = v332 & 0xFFFFFFFFFFFFLL;
    do
    {
      v277 = __ldaxr((unsigned int *)result);
      v278 = v277 - 1;
    }
    while (__stlxr(v278, (unsigned int *)result));
    if (!v278)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_113;
  v76 = 1;
LABEL_105:
  *(_WORD *)v331 = 0;
  v77 = *((_DWORD *)this + 62);
  if ((v77 & 0x4000000) != 0)
    result = WebCore::RenderTableCell::parseColSpanFromDOM(this);
  else
    result = 1;
  if ((*(_BYTE *)(v32 + 328) & 4) == 0)
    goto LABEL_108;
  result = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v32, (void *)((v77 & 0x1FFFFFF) + result - 1), &v331[1], v331);
  if (!result)
    goto LABEL_108;
  v232 = result;
  v233 = *(_QWORD *)(result + 96) & 0x1FLL;
  if (v233 != 10 || !v331[0])
  {
    if (v233 == 10)
      goto LABEL_108;
    v320 = (float *)WebCore::RenderTableCol::borderAdjoiningCellEndBorder((WebCore::RenderTableCol *)result);
    if (a3)
    {
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(v232 + 80, v326, 0, v333);
      v235 = v333[0];
    }
    else
    {
      v235 = 0;
      v333[0] = 0;
    }
    WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v330, v320, v235, 3);
    WebCore::chooseBorder((uint64_t)&v334, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)v330);
    *(_DWORD *)a1 = v334;
    result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v335);
    *(_BYTE *)(a1 + 16) = v336;
    if ((v335 & 0x8000000000000) != 0)
    {
      result = v335 & 0xFFFFFFFFFFFFLL;
      do
      {
        v300 = __ldaxr((unsigned int *)result);
        v301 = v300 - 1;
      }
      while (__stlxr(v301, (unsigned int *)result));
      if (!v301)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    if ((v330[1] & 0x8000000000000) != 0)
    {
      result = v330[1] & 0xFFFFFFFFFFFFLL;
      do
      {
        v302 = __ldaxr((unsigned int *)result);
        v303 = v302 - 1;
      }
      while (__stlxr(v303, (unsigned int *)result));
      if (!v303)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    if ((v333[0] & 0x8000000000000) != 0)
    {
      result = v333[0] & 0xFFFFFFFFFFFFLL;
      do
      {
        v304 = __ldaxr((unsigned int *)result);
        v305 = v304 - 1;
      }
      while (__stlxr(v305, (unsigned int *)result));
      if (!v305)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
      goto LABEL_113;
    v236 = *(unsigned int *)(v232 + 47);
    if (v236 | ((unint64_t)*(unsigned __int8 *)(v232 + 51) << 32))
    {
      if (*(_QWORD *)((v236 | ((unint64_t)*(unsigned __int8 *)(v232 + 51) << 32)) + 8))
        goto LABEL_108;
    }
    result = WebCore::RenderTableCol::enclosingColumnGroup((WebCore::RenderTableCol *)v232);
    if (!result)
      goto LABEL_108;
    v237 = result;
    v321 = (float *)WebCore::RenderTableCol::borderAdjoiningCellEndBorder((WebCore::RenderTableCol *)result);
    if (a3)
    {
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(v237 + 80, v326, 0, v333);
      v238 = v333[0];
    }
    else
    {
      v238 = 0;
      v333[0] = 0;
    }
    WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v330, v321, v238, 2);
    WebCore::chooseBorder((uint64_t)&v334, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)v330);
    *(_DWORD *)a1 = v334;
    result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v335);
    *(_BYTE *)(a1 + 16) = v336;
    if ((v335 & 0x8000000000000) != 0)
    {
      result = v335 & 0xFFFFFFFFFFFFLL;
      do
      {
        v312 = __ldaxr((unsigned int *)result);
        v313 = v312 - 1;
      }
      while (__stlxr(v313, (unsigned int *)result));
      if (!v313)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    if ((v330[1] & 0x8000000000000) != 0)
    {
      result = v330[1] & 0xFFFFFFFFFFFFLL;
      do
      {
        v314 = __ldaxr((unsigned int *)result);
        v315 = v314 - 1;
      }
      while (__stlxr(v315, (unsigned int *)result));
      if (!v315)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    if ((v333[0] & 0x8000000000000) == 0)
      goto LABEL_496;
    result = v333[0] & 0xFFFFFFFFFFFFLL;
    do
    {
      v239 = __ldaxr((unsigned int *)result);
      v240 = --v239 == 0;
    }
    while (__stlxr(v239, (unsigned int *)result));
    goto LABEL_634;
  }
  v322 = (float *)WebCore::RenderTableCol::borderAdjoiningCellEndBorder((WebCore::RenderTableCol *)result);
  if (a3)
  {
    WebCore::RenderStyle::visitedDependentColorWithColorFilter(v232 + 80, v326, 0, v333);
    v252 = v333[0];
  }
  else
  {
    v252 = 0;
    v333[0] = 0;
  }
  WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v330, v322, v252, 2);
  WebCore::chooseBorder((uint64_t)&v334, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)v330);
  *(_DWORD *)a1 = v334;
  result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v335);
  *(_BYTE *)(a1 + 16) = v336;
  if ((v335 & 0x8000000000000) != 0)
  {
    result = v335 & 0xFFFFFFFFFFFFLL;
    do
    {
      v290 = __ldaxr((unsigned int *)result);
      v291 = v290 - 1;
    }
    while (__stlxr(v291, (unsigned int *)result));
    if (!v291)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  if ((v330[1] & 0x8000000000000) != 0)
  {
    result = v330[1] & 0xFFFFFFFFFFFFLL;
    do
    {
      v292 = __ldaxr((unsigned int *)result);
      v293 = v292 - 1;
    }
    while (__stlxr(v293, (unsigned int *)result));
    if (!v293)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  if ((v333[0] & 0x8000000000000) != 0)
  {
    result = v333[0] & 0xFFFFFFFFFFFFLL;
    do
    {
      v294 = __ldaxr((unsigned int *)result);
      v240 = --v294 == 0;
    }
    while (__stlxr(v294, (unsigned int *)result));
LABEL_634:
    if (v240)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
LABEL_496:
  if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
    goto LABEL_113;
LABEL_108:
  if (v37 == v39)
  {
    if (!v76)
      goto LABEL_113;
LABEL_141:
    v92 = *((_QWORD *)this + 4);
    if (!v92)
      goto LABEL_145;
    v93 = *(_QWORD *)(v92 + 8);
    if (!v93)
      goto LABEL_145;
    if (*(_BYTE *)(v93 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944FA320);
    }
    v94 = *(_DWORD *)(v32 + 120);
    if (((v94 & 0x4000000) == 0) == (*(_BYTE *)(v93 + 123) & 4) >> 2)
    {
      v212 = *(uint64_t **)(*(_QWORD *)(v32 + 88) + 24);
      v213 = (float *)(v212 + 22);
      if ((v94 & 0x4000000) == 0)
        v213 = (float *)(v212 + 19);
      v214 = (float *)(v212 + 16);
      v215 = v212 + 13;
      if ((v94 & 0x4000000) != 0)
        v216 = v214;
      else
        v216 = (float *)v215;
      if (((*(_DWORD *)(v32 + 124) >> 13) & 6u) - 2 >= 4)
        v101 = v216;
      else
        v101 = v213;
    }
    else
    {
LABEL_145:
      v95 = *(_DWORD *)(v32 + 120);
      v96 = *(uint64_t **)(*(_QWORD *)(v32 + 88) + 24);
      v97 = (float *)(v96 + 19);
      if ((v95 & 0x4000000) == 0)
        v97 = (float *)(v96 + 22);
      v98 = (float *)(v96 + 13);
      v99 = (float *)(v96 + 16);
      if ((v95 & 0x4000000) != 0)
        v100 = v98;
      else
        v100 = v99;
      if (((*(_DWORD *)(v32 + 124) >> 13) & 6u) - 2 >= 4)
        v101 = v100;
      else
        v101 = v97;
    }
    if (a3)
      result = (uint64_t)WebCore::RenderStyle::visitedDependentColorWithColorFilter(v32 + 80, v326, 0, &v332);
    else
      v332 = 0;
    v102 = v101[4];
    v103 = 0.0;
    if (v102 == 0.0 || ((_BYTE)v101[5] & 0xF) == 0)
      goto LABEL_157;
    v103 = v102 * 64.0;
    if (v103 < 2147483650.0)
    {
      if (v103 > -2147483650.0)
      {
LABEL_157:
        v104 = (int)v103;
        goto LABEL_158;
      }
      v104 = 0x80000000;
    }
    else
    {
      v104 = 0x7FFFFFFF;
    }
LABEL_158:
    LODWORD(v334) = v104;
    v335 = v332;
    if ((v332 & 0x8000000000000) != 0)
    {
      v222 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFLL);
      do
        v223 = __ldaxr(v222);
      while (__stlxr(v223 + 1, v222));
    }
    v105 = *((_BYTE *)v101 + 20);
    v106 = v105 & 0xF;
    if (*((_DWORD *)v101 + 2) || (v169 = *(_QWORD *)v101, (*(_QWORD *)v101 & 0x4000000000000) == 0))
    {
      v107 = 0;
    }
    else
    {
      if ((v169 & 0x8000000000000) != 0)
        v170 = *(float *)((v169 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0;
      else
        v170 = *(_QWORD *)v101 != 0;
      if (v170)
        v107 = 0;
      else
        v107 = 0x80;
    }
    v108 = v106 | v107 | 0x10;
    LOBYTE(v336) = v108;
    v109 = *(_BYTE *)(a1 + 16);
    if ((v109 & 0x70) == 0)
      goto LABEL_295;
    v110 = v109 & 0xF;
    if (v106 == 1)
    {
      v111 = (unint64_t *)a1;
      if (v110 != 1)
        goto LABEL_295;
    }
    else
    {
      if ((v105 & 0xF) == 0 || v110 == 1)
      {
        v111 = (unint64_t *)a1;
        goto LABEL_166;
      }
      if ((v109 & 0xF) == 0)
        goto LABEL_295;
      v217 = *(_DWORD *)a1;
      v218 = v334;
      if ((*(_BYTE *)(a1 + 16) & 0xE) != 0)
        v219 = *(_DWORD *)a1;
      else
        v219 = 0;
      v220 = v105 & 0xE;
      if (v220)
        v221 = v334;
      else
        v221 = 0;
      if (v219 == v221)
      {
        v111 = (unint64_t *)a1;
        if (v110 < v106)
        {
LABEL_295:
          v111 = &v334;
          v109 = v108;
        }
      }
      else
      {
        if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
          v217 = 0;
        if (!v220)
          v218 = 0;
        v111 = (unint64_t *)a1;
        if (v217 < v218)
          goto LABEL_295;
      }
    }
LABEL_166:
    if ((v109 & 0xF) == 1)
    {
      v113 = 0;
      v112 = 0;
      v109 = 0;
    }
    else
    {
      v112 = *(_DWORD *)v111;
      v113 = v111[1];
      if ((v113 & 0x8000000000000) != 0)
      {
        v224 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFLL);
        do
          v225 = __ldaxr(v224);
        while (__stlxr(v225 + 1, v224));
        v109 = *((_BYTE *)v111 + 16);
      }
    }
    *(_DWORD *)a1 = v112;
    v114 = *(_QWORD *)(a1 + 8);
    if ((v114 & 0x8000000000000) != 0)
    {
      if ((v113 & 0x8000000000000) != 0)
      {
        *(_OWORD *)v330 = *(_OWORD *)((v114 & 0xFFFFFFFFFFFFLL) + 4);
        v287 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFLL);
        *(_OWORD *)v333 = *(_OWORD *)((v113 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)v330, (float *)v333);
        v114 = *v24;
        if ((_DWORD)result)
        {
          if (HIBYTE(v114) == HIBYTE(v113) && BYTE6(v114) == BYTE6(v113))
          {
            *(_BYTE *)(a1 + 16) = v109;
            do
            {
              v288 = __ldaxr(v287);
              v289 = v288 - 1;
            }
            while (__stlxr(v289, v287));
            if (!v289)
            {
              atomic_store(1u, v287);
              result = WTF::fastFree((WTF *)(v113 & 0xFFFFFFFFFFFFLL), this);
            }
            goto LABEL_174;
          }
        }
      }
    }
    else if ((v113 & 0x8000000000000) == 0 && v114 == v113)
    {
LABEL_173:
      *(_BYTE *)(a1 + 16) = v109;
LABEL_174:
      if ((v335 & 0x8000000000000) != 0)
      {
        result = v335 & 0xFFFFFFFFFFFFLL;
        do
        {
          v281 = __ldaxr((unsigned int *)result);
          v282 = v281 - 1;
        }
        while (__stlxr(v282, (unsigned int *)result));
        if (!v282)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, this);
        }
      }
      if ((v332 & 0x8000000000000) != 0)
      {
        result = v332 & 0xFFFFFFFFFFFFLL;
        do
        {
          v115 = __ldaxr((unsigned int *)result);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, (unsigned int *)result));
        if (!v116)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, this);
        }
      }
      goto LABEL_113;
    }
    if ((v114 & 0x8000000000000) != 0)
    {
      result = v114 & 0xFFFFFFFFFFFFLL;
      do
      {
        v279 = __ldaxr((unsigned int *)result);
        v280 = v279 - 1;
      }
      while (__stlxr(v280, (unsigned int *)result));
      if (!v280)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    *(_QWORD *)(a1 + 8) = v113;
    goto LABEL_173;
  }
  v78 = *((_DWORD *)this + 62);
  if ((v78 & 0x4000000) != 0)
    result = WebCore::RenderTableCell::parseColSpanFromDOM(this);
  else
    result = 1;
  if ((*(_BYTE *)(v32 + 328) & 4) == 0)
    goto LABEL_112;
  result = WebCore::RenderTable::slowColElement((WebCore::RenderTable *)v32, (void *)(result + (v78 & 0x1FFFFFF)), &v331[1], v331);
  if (!result)
    goto LABEL_112;
  v241 = result;
  v242 = *(_QWORD *)(result + 96) & 0x1FLL;
  if (v242 == 10 && v331[1])
  {
    started = (float *)WebCore::RenderTableCol::borderAdjoiningCellStartBorder((WebCore::RenderTableCol *)result);
    if (a3)
    {
      WebCore::RenderStyle::visitedDependentColorWithColorFilter(v241 + 80, v13, 0, v333);
      v254 = v333[0];
    }
    else
    {
      v254 = 0;
      v333[0] = 0;
    }
    WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v330, started, v254, 2);
    WebCore::chooseBorder((uint64_t)&v334, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)v330);
    *(_DWORD *)a1 = v334;
    result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v335);
    *(_BYTE *)(a1 + 16) = v336;
    if ((v335 & 0x8000000000000) != 0)
    {
      result = v335 & 0xFFFFFFFFFFFFLL;
      do
      {
        v295 = __ldaxr((unsigned int *)result);
        v296 = v295 - 1;
      }
      while (__stlxr(v296, (unsigned int *)result));
      if (!v296)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    if ((v330[1] & 0x8000000000000) != 0)
    {
      result = v330[1] & 0xFFFFFFFFFFFFLL;
      do
      {
        v297 = __ldaxr((unsigned int *)result);
        v298 = v297 - 1;
      }
      while (__stlxr(v298, (unsigned int *)result));
      if (!v298)
      {
        atomic_store(1u, (unsigned int *)result);
        result = WTF::fastFree((WTF *)result, this);
      }
    }
    if ((v333[0] & 0x8000000000000) == 0)
      goto LABEL_503;
    result = v333[0] & 0xFFFFFFFFFFFFLL;
    do
    {
      v299 = __ldaxr((unsigned int *)result);
      v251 = --v299 == 0;
    }
    while (__stlxr(v299, (unsigned int *)result));
    goto LABEL_647;
  }
  if (v242 != 11)
  {
LABEL_112:
    if ((v76 & 1) == 0)
      goto LABEL_113;
    goto LABEL_141;
  }
  v244 = (float *)WebCore::RenderTableCol::borderAdjoiningCellStartBorder((WebCore::RenderTableCol *)result);
  if (a3)
  {
    WebCore::RenderStyle::visitedDependentColorWithColorFilter(v241 + 80, v13, 0, v333);
    v245 = v333[0];
  }
  else
  {
    v245 = 0;
    v333[0] = 0;
  }
  WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v330, v244, v245, 3);
  WebCore::chooseBorder((uint64_t)&v334, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)v330);
  *(_DWORD *)a1 = v334;
  result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v335);
  *(_BYTE *)(a1 + 16) = v336;
  if ((v335 & 0x8000000000000) != 0)
  {
    result = v335 & 0xFFFFFFFFFFFFLL;
    do
    {
      v306 = __ldaxr((unsigned int *)result);
      v307 = v306 - 1;
    }
    while (__stlxr(v307, (unsigned int *)result));
    if (!v307)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  if ((v330[1] & 0x8000000000000) != 0)
  {
    result = v330[1] & 0xFFFFFFFFFFFFLL;
    do
    {
      v308 = __ldaxr((unsigned int *)result);
      v309 = v308 - 1;
    }
    while (__stlxr(v309, (unsigned int *)result));
    if (!v309)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  if ((v333[0] & 0x8000000000000) != 0)
  {
    result = v333[0] & 0xFFFFFFFFFFFFLL;
    do
    {
      v310 = __ldaxr((unsigned int *)result);
      v311 = v310 - 1;
    }
    while (__stlxr(v311, (unsigned int *)result));
    if (!v311)
    {
      atomic_store(1u, (unsigned int *)result);
      result = WTF::fastFree((WTF *)result, this);
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 0x70) != 0)
  {
    v246 = *(unsigned int *)(v241 + 40);
    if (!(v246 | ((unint64_t)*(unsigned __int8 *)(v241 + 44) << 32))
      || !*(_QWORD *)((v246 | ((unint64_t)*(unsigned __int8 *)(v241 + 44) << 32)) + 8))
    {
      result = WebCore::RenderTableCol::enclosingColumnGroup((WebCore::RenderTableCol *)v241);
      if (result)
      {
        v247 = result;
        v248 = (float *)WebCore::RenderTableCol::borderAdjoiningCellStartBorder((WebCore::RenderTableCol *)result);
        if (a3)
        {
          WebCore::RenderStyle::visitedDependentColorWithColorFilter(v247 + 80, v13, 0, v333);
          v249 = v333[0];
        }
        else
        {
          v249 = 0;
          v333[0] = 0;
        }
        WebCore::CollapsedBorderValue::CollapsedBorderValue((uint64_t)v330, v248, v249, 2);
        WebCore::chooseBorder((uint64_t)&v334, (const WebCore::CollapsedBorderValue *)a1, (const WebCore::CollapsedBorderValue *)v330);
        *(_DWORD *)a1 = v334;
        result = (uint64_t)WebCore::Color::operator=((unint64_t *)(a1 + 8), &v335);
        *(_BYTE *)(a1 + 16) = v336;
        if ((v335 & 0x8000000000000) != 0)
        {
          result = v335 & 0xFFFFFFFFFFFFLL;
          do
          {
            v316 = __ldaxr((unsigned int *)result);
            v317 = v316 - 1;
          }
          while (__stlxr(v317, (unsigned int *)result));
          if (!v317)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, this);
          }
        }
        if ((v330[1] & 0x8000000000000) != 0)
        {
          result = v330[1] & 0xFFFFFFFFFFFFLL;
          do
          {
            v318 = __ldaxr((unsigned int *)result);
            v319 = v318 - 1;
          }
          while (__stlxr(v319, (unsigned int *)result));
          if (!v319)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, this);
          }
        }
        if ((v333[0] & 0x8000000000000) == 0)
        {
LABEL_503:
          if ((*(_BYTE *)(a1 + 16) & 0x70) == 0)
            goto LABEL_113;
          goto LABEL_112;
        }
        result = v333[0] & 0xFFFFFFFFFFFFLL;
        do
        {
          v250 = __ldaxr((unsigned int *)result);
          v251 = --v250 == 0;
        }
        while (__stlxr(v250, (unsigned int *)result));
LABEL_647:
        if (v251)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, this);
        }
        goto LABEL_503;
      }
    }
    goto LABEL_112;
  }
LABEL_113:
  if ((*(_BYTE *)(a1 + 16) & 0xE) == 0)
  {
    *((_DWORD *)this + 62) |= 0x80000000;
LABEL_115:
    v79 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
    if (*(_BYTE *)(v79 + 46) != 39)
    {
      __break(0xC471u);
      JUMPOUT(0x1944FA14CLL);
    }
    v80 = *(_QWORD *)(*(_QWORD *)(v79 + 32) + 8);
    if (*(_BYTE *)(v80 + 46) != 40)
    {
      __break(0xC471u);
      JUMPOUT(0x1944FA16CLL);
    }
    v81 = *(_QWORD *)(*(_QWORD *)(v80 + 32) + 8);
    v82 = *(unsigned __int8 *)(v81 + 46);
    if (v82 != 35 && v82 != 63)
    {
      __break(0xC471u);
      JUMPOUT(0x1944FA718);
    }
    *(_BYTE *)(v81 + 328) |= 2u;
    goto LABEL_120;
  }
  v231 = *(_DWORD *)a1;
  *((_DWORD *)this + 62) = *((_DWORD *)this + 62) & 0x7FFFFFFF | ((*(_DWORD *)a1 == 0) << 31);
  if (!v231)
    goto LABEL_115;
LABEL_120:
  if (a3 && (*((_DWORD *)this + 62) & 0x80000000) == 0)
  {
    v83 = WebCore::RenderTableCell::section(*((_QWORD *)this + 4));
    v327 = *(_DWORD *)a1;
    v84 = *(_QWORD *)(a1 + 8);
    v328 = v84;
    if ((v84 & 0x8000000000000) != 0)
    {
      v255 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
      do
        v256 = __ldaxr(v255);
      while (__stlxr(v256 + 1, v255));
    }
    v329 = *(_BYTE *)(a1 + 16);
    v330[0] = (unint64_t)this;
    LODWORD(v330[1]) = 3;
    result = WTF::HashMap<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue,WTF::DefaultHash<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<std::pair<WebCore::RenderTableCell const*,int>>,WTF::HashTraits<WebCore::CollapsedBorderValue>,WTF::HashTableTraits>::inlineSet<std::pair<WebCore::RenderTableCell const*,int>,WebCore::CollapsedBorderValue&>((uint64_t *)(v83 + 272), v330, (uint64_t)&v327, (uint64_t)&v334);
    if ((v328 & 0x8000000000000) != 0)
    {
      result = v328 & 0xFFFFFFFFFFFFLL;
      do
      {
        v86 = __ldaxr((unsigned int *)result);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, (unsigned int *)result));
      if (!v87)
      {
        atomic_store(1u, (unsigned int *)result);
        return WTF::fastFree((WTF *)result, v85);
      }
    }
  }
  return result;
}

