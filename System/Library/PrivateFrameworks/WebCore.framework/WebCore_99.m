void WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementTree(WebCore::RenderTreeUpdater::ViewTransition *a1, WebCore::RenderElement *a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  uint64_t v7;
  WTF *v8;
  int v9;
  void *v10;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::SVGTextLayoutAttributes **v18;
  _QWORD *CachedPseudoStyle;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  WebCore::RenderElement *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::SVGTextLayoutAttributes **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WebCore::RenderElement *v40;
  WebCore::RenderElement *v41;
  uint64_t v42;
  uint64_t v43;
  const WebCore::Element *v44;
  void *v45;
  WTF *v46;
  uint64_t v47;
  WebCore::RenderTable *v48;
  WTF *v49;
  uint64_t v50;
  void *v51;
  WTF *v52;
  int v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WebCore::RenderElement *v58;
  uint64_t v59;
  WTF::StringImpl *v60;

  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  if (!*(_BYTE *)(v7 + 3440) || !*(_QWORD *)(v7 + 1272))
  {
    v8 = *(WTF **)(*(_QWORD *)(v7 + 1944) + 528);
    if (v8)
    {
      v9 = (*(_DWORD *)v8)++;
      v10 = (void *)*((_QWORD *)v8 + 1);
      if (v10)
      {
        WebCore::RenderTreeBuilder::destroy(*(_QWORD *)a1 + 48, (uint64_t)v10, 1, a4, a5, a6);
        v9 = *(_DWORD *)v8 - 1;
      }
      if (v9)
        *(_DWORD *)v8 = v9;
      else
        WTF::fastFree(v8, v10);
    }
    goto LABEL_7;
  }
  LODWORD(v59) = 12;
  v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v13 += 2;
  v60 = v13;
  CachedPseudoStyle = (_QWORD *)WebCore::RenderElement::getCachedPseudoStyle((uint64_t)a2, (uint64_t)&v59, (uint64_t)a2 + 80);
  v20 = v60;
  v60 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (!CachedPseudoStyle || (CachedPseudoStyle[2] & 0x1FLL) == 0x1A)
  {
    WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementTree(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(*(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944)+ 528), a1, v15, v16, v17, v18);
LABEL_7:
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    return;
  }
  v21 = *(_QWORD *)(v7 + 2112);
  if (v21)
    ++*(_DWORD *)(v21 + 24);
  WebCore::RenderStyle::clone(CachedPseudoStyle, (uint64_t)&v59);
  v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  v23 = *(WTF **)(*(_QWORD *)(v22 + 1944) + 528);
  if (v23 && (++*(_DWORD *)v23, (v24 = *((_QWORD *)v23 + 1)) != 0))
  {
    WebCore::RenderElement::setStyle(v24, &v59, a3);
  }
  else
  {
    v40 = (WebCore::RenderElement *)bmalloc::api::isoAllocate();
    WebCore::RenderBlockFlow::RenderBlockFlow((uint64_t)v40, 1, v22, &v59, 16);
    WebCore::RenderElement::initializeStyle(v41, v42, v43, v44);
    WebCore::RenderView::setViewTransitionRoot(*(WebCore::RenderView **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944), v40);
    WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)&v56, (uint64_t)v40);
    v46 = v56;
    v56 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WTF::fastFree(v23, v45);
        v52 = v56;
        v56 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 1)
            WTF::fastFree(v52, v51);
          else
            --*(_DWORD *)v52;
        }
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
    v47 = *(_QWORD *)a1 + 48;
    v48 = *(WebCore::RenderTable **)(*((_QWORD *)a2 + 4) + 8);
    v58 = v40;
    WebCore::RenderTreeBuilder::attach(v47, v48, (unint64_t *)&v58);
    v25 = v58;
    v58 = 0;
    if (v25)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v58, (uint64_t)v25);
    v23 = v46;
  }
  v26 = *(_QWORD *)(v21 + 40);
  if (v26 && *(_DWORD *)(v26 - 12))
  {
    v56 = 0;
    v57 = 0;
    v27 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 1944)
                  + 528);
    if (v27)
      ++*(_DWORD *)v27;
    if (*(unsigned int *)(*((_QWORD *)v27 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v27 + 1)
                                                                                                + 68) << 32))
      v28 = *(_QWORD *)((*(unsigned int *)(*((_QWORD *)v27 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v27 + 1) + 68) << 32))
                      + 8);
    else
      v28 = 0;
    if (*(_DWORD *)v27 == 1)
      WTF::fastFree(v27, v25);
    else
      --*(_DWORD *)v27;
    v55 = v28;
    v29 = *(_QWORD *)(v21 + 48);
    if (v29)
    {
      do
      {
        if (!v28)
          goto LABEL_40;
        v30 = v28;
        if ((*(_BYTE *)(v28 + 45) & 2) != 0)
          v30 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8);
        v31 = *(_QWORD *)(*(_QWORD *)(v30 + 88) + 40);
        v32 = *(WTF::StringImpl **)v29;
        if (*(_QWORD *)v29 == *(_QWORD *)(v31 + 592))
        {
          v53 = 13;
          if (v32)
            *(_DWORD *)v32 += 2;
          v54 = v32;
          v36 = (WTF::StringImpl *)WebCore::RenderElement::getCachedPseudoStyle((uint64_t)a2, (uint64_t)&v53, (uint64_t)a2 + 80);
          v37 = v54;
          v54 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
            {
              v39 = v36;
              WTF::StringImpl::destroy(v37, v36);
              v36 = v39;
            }
            else
            {
              *(_DWORD *)v37 -= 2;
            }
          }
          if (v36 && (*((_QWORD *)v36 + 2) & 0x1FLL) != 0x1A)
          {
            if ((*(_BYTE *)(v28 + 45) & 2) != 0)
            {
              __break(0xC471u);
              return;
            }
            WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementGroup(a1, v36, v28, (uint64_t)a2, a3);
          }
          else if (HIDWORD(v57) == (_DWORD)v57)
          {
            WTF::Vector<WTF::WeakPtr<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderObject*&>((uint64_t)&v56, &v55);
          }
          else
          {
            WTF::WeakPtr<WebCore::Font const,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>::WeakPtr<void>((uint64_t *)v56 + HIDWORD(v57), v28);
            ++HIDWORD(v57);
          }
          v38 = *(unsigned int *)(v28 + 47);
          if (v38 | ((unint64_t)*(unsigned __int8 *)(v28 + 51) << 32))
            v28 = *(_QWORD *)((v38 | ((unint64_t)*(unsigned __int8 *)(v28 + 51) << 32)) + 8);
          else
            v28 = 0;
          v55 = v28;
        }
        else
        {
LABEL_40:
          WebCore::RenderTreeUpdater::ViewTransition::buildPseudoElementGroup(a1, (WTF::StringImpl **)v29, a2, (WebCore::RenderObject *)v28);
        }
        v29 = *(_QWORD *)(v29 + 16);
      }
      while (v29);
      if (HIDWORD(v57))
      {
        v49 = v56;
        v50 = 8 * HIDWORD(v57);
        do
        {
          if (*(_QWORD *)v49)
          {
            v25 = *(WebCore::RenderElement **)(*(_QWORD *)v49 + 8);
            if (v25)
              WebCore::RenderTreeBuilder::destroy(*(_QWORD *)a1 + 48, (uint64_t)v25, 1, v33, v34, v35);
          }
          v49 = (WTF *)((char *)v49 + 8);
          v50 -= 8;
        }
        while (v50);
      }
    }
    WTF::Vector<WTF::WeakPtr<WebCore::RenderTableCell,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v56, v25);
  }
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
      WTF::fastFree(v23, v25);
    else
      --*(_DWORD *)v23;
  }
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v59, v25);
  if (v21)
  {
    if (*(_DWORD *)(v21 + 24) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
    else
      --*(_DWORD *)(v21 + 24);
  }
  if (v7)
    goto LABEL_7;
}

void WebCore::RenderTreeUpdater::updateRendererStyle(uint64_t a1, WebCore::RenderElement *a2, uint64_t a3)
{
  void *v6;
  _BYTE v7[64];

  WebCore::RenderStyle::clone((_QWORD *)a2 + 10, (uint64_t)v7);
  WebCore::RenderElement::setStyle(a2, a3, 0);
  WebCore::RenderTreeBuilder::normalizeTreeAfterStyleChange((WebCore::RenderTreeBuilder *)(a1 + 48), a2, (WebCore::RenderStyle *)v7);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v7, v6);
}

double WebCore::RenderTreeUpdater::tearDownTextRenderer(uint64_t a1, uint64_t a2, WebCore::RenderTreeBuilder *this, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  WebCore::RenderObject *v6;
  uint64_t v10;
  const WebCore::RenderElement *v11;
  double result;
  uint64_t v14;
  WebCore::RenderObject *v15;
  int v16;
  WebCore::RenderElement *v17;

  v6 = (WebCore::RenderObject *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
  if (v6)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      if ((_DWORD)a4)
      {
        WebCore::RenderObject::repaint(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL, 0);
        v14 = *((_QWORD *)v6 + 4);
        if (v14)
        {
          v15 = *(WebCore::RenderObject **)(v14 + 8);
          if (v15)
          {
            v16 = *((_DWORD *)v15 + 5);
            if ((v16 & 0x20) == 0)
            {
              *((_DWORD *)v15 + 5) = v16 | 0x20;
              v17 = WebCore::RenderObject::markContainingBlocksForLayout(v15, 0);
              WebCore::RenderObject::scheduleLayout(v15, v17);
            }
            WebCore::RenderObject::setPreferredLogicalWidthsDirty((uint64_t)v15, 1, 1);
          }
        }
      }
      if (!a2)
      {
        v11 = 0;
LABEL_8:
        WebCore::RenderTreeBuilder::destroyAndCleanUpAnonymousWrappers(this, v6, v11, a4, a5, a6);
        *(_QWORD *)(a1 + 64) = (unint64_t)*(unsigned __int16 *)(a1 + 70) << 48;
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          return WebCore::Node::notifyInspectorOfRendererChange((WebCore::Node *)a1);
        return result;
      }
      v10 = *(_QWORD *)(a2 + 64);
      v11 = (const WebCore::RenderElement *)(v10 & 0xFFFFFFFFFFFFLL);
      if ((v10 & 0xFFFFFFFFFFFFLL) == 0 || (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
        goto LABEL_8;
    }
    __break(0xC471u);
    JUMPOUT(0x19657A338);
  }
  return result;
}

void WebCore::RenderTreeUpdater::tearDownRenderers(WebCore *a1, uint64_t a2)
{
  WebCore::RenderView *v4;
  WebCore::Node *v5;
  WebCore::Element *RenderingAncestor;
  void *v7;
  uint64_t v8;
  _BYTE v9[144];

  if ((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)a1 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19657A43CLL);
    }
  }
  else
  {
    if ((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) == 0)
      return;
    v8 = *(_QWORD *)((*((_QWORD *)a1 + 9) & 0xFFFFFFFFFFFFLL) + 0x38);
    if (!v8 || (*(_QWORD *)(v8 + 16) & 0x1FLL) != 0x12)
      return;
  }
  v4 = *(WebCore::RenderView **)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 8) + 1944);
  if (v4)
  {
    WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v9, v4);
    WebCore::RenderTreeUpdater::tearDownRenderers((uint64_t)a1, a2);
    RenderingAncestor = (WebCore::Element *)WebCore::findRenderingAncestor(a1, v5);
    if (RenderingAncestor)
    {
      if ((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19657A45CLL);
      }
      if ((*(_QWORD *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1ELL) == 0x16)
        WebCore::Element::invalidateRenderer(RenderingAncestor);
    }
    WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)v9, v7);
  }
}

void WebCore::RenderTreeUpdater::tearDownRenderer(WebCore::RenderTreeUpdater *this, WebCore::Text *a2)
{
  WebCore::RenderView *v2;
  uint64_t v4;
  WebCore::SVGTextLayoutAttributes **v5;
  WebCore::Node *v6;
  WebCore::Element *RenderingAncestor;
  void *v8;
  _BYTE v9[144];

  v2 = *(WebCore::RenderView **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 1944);
  if (v2)
  {
    WebCore::RenderTreeBuilder::RenderTreeBuilder((WebCore::RenderTreeBuilder *)v9, v2);
    WebCore::RenderTreeUpdater::tearDownTextRenderer((uint64_t)this, 0, (WebCore::RenderTreeBuilder *)v9, 1, v4, v5);
    RenderingAncestor = (WebCore::Element *)WebCore::findRenderingAncestor(this, v6);
    if (RenderingAncestor)
    {
      if ((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) != 0
        && (*(_BYTE *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19657A50CLL);
      }
      if ((*(_QWORD *)((*((_QWORD *)RenderingAncestor + 8) & 0xFFFFFFFFFFFFLL) + 0x60) & 0x1ELL) == 0x16)
        WebCore::Element::invalidateRenderer(RenderingAncestor);
    }
    WebCore::RenderTreeBuilder::~RenderTreeBuilder((WebCore::RenderTreeBuilder *)v9, v8);
  }
}

_QWORD *WebCore::RenderTreeUpdater::GeneratedContent::updateQuotesUpTo(_QWORD *this, WebCore::RenderQuote *a2, const WTF::StringImpl *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderQuote *v7;
  uint64_t v8;
  WebCore::RenderQuote *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  WebCore::RenderTreeBuilder *v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v22;

  v4 = this;
  v5 = this[1];
  v6 = *(_QWORD *)(*(_QWORD *)*this + 1944);
  if (v5)
  {
    this = *(_QWORD **)(v5 + 8);
    if (this)
    {
      this = (_QWORD *)WebCore::RenderTraversal::next<WebCore::RenderQuote,WebCore::RenderQuote>((uint64_t)this, v6);
      v7 = (WebCore::RenderQuote *)this;
      if (!this)
        return this;
      while (1)
      {
LABEL_9:
        v10 = v4[1];
        if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
        {
          v12 = *(_DWORD *)(v11 + 172);
          if ((*(unsigned __int8 *)(v11 + 168) | 2) == 2)
            ++v12;
        }
        else
        {
          v12 = -1;
        }
        v13 = v12 & ~(v12 >> 31);
        v14 = v12 - 1;
        if ((*((unsigned __int8 *)v7 + 168) | 2) == 2)
          v14 = v13;
        if (*((_DWORD *)v7 + 43) != v14 || *((_BYTE *)v7 + 184))
        {
          v15 = (WebCore::RenderTreeBuilder *)(*v4 + 48);
          *((_DWORD *)v7 + 43) = v14;
          *((_BYTE *)v7 + 184) = 0;
          WebCore::RenderQuote::updateTextRenderer(v7, v15, a3);
        }
        this = (_QWORD *)*((_QWORD *)v7 + 1);
        if (!this)
        {
          this = (_QWORD *)WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)this = 1;
          this[1] = v7;
          v17 = (WTF *)*((_QWORD *)v7 + 1);
          *((_QWORD *)v7 + 1) = this;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
            {
              WTF::fastFree(v17, a2);
              this = (_QWORD *)*((_QWORD *)v7 + 1);
              if (!this)
                goto LABEL_21;
            }
            else
            {
              --*(_DWORD *)v17;
            }
          }
        }
        ++*(_DWORD *)this;
LABEL_21:
        v16 = (WTF *)v4[1];
        v4[1] = this;
        if (v16)
        {
          if (*(_DWORD *)v16 == 1)
            this = (_QWORD *)WTF::fastFree(v16, a2);
          else
            --*(_DWORD *)v16;
        }
        if (v7 != a2)
        {
          this = (_QWORD *)WebCore::RenderTraversal::next<WebCore::RenderQuote,WebCore::RenderQuote>((uint64_t)v7, v6);
          v7 = (WebCore::RenderQuote *)this;
          if (this)
            continue;
        }
        return this;
      }
    }
  }
  v8 = *(unsigned int *)(v6 + 64);
  if (v8 | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32))
  {
    v9 = *(WebCore::RenderQuote **)((v8 | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32)) + 8);
    if (v9)
    {
      if (*((_BYTE *)v9 + 46) == 29)
      {
        v7 = *(WebCore::RenderQuote **)((v8 | ((unint64_t)*(unsigned __int8 *)(v6 + 68) << 32)) + 8);
        goto LABEL_9;
      }
      while (1)
      {
        this = (_QWORD *)(*(uint64_t (**)(WebCore::RenderQuote *))(*(_QWORD *)v9 + 112))(v9);
        v7 = (WebCore::RenderQuote *)this;
        if (!this)
        {
          if (v9 == (WebCore::RenderQuote *)v6)
            return this;
          v18 = *(unsigned int *)((char *)v9 + 47);
          if (!(v18 | ((unint64_t)*((unsigned __int8 *)v9 + 51) << 32)))
            break;
          v7 = *(WebCore::RenderQuote **)((v18 | ((unint64_t)*((unsigned __int8 *)v9 + 51) << 32)) + 8);
          if (!v7)
            break;
        }
LABEL_34:
        v9 = v7;
        if (*((_BYTE *)v7 + 46) == 29)
          goto LABEL_9;
      }
      for (i = *((_QWORD *)v9 + 4); i; i = *(_QWORD *)(v20 + 32))
      {
        v20 = *(_QWORD *)(i + 8);
        if (!v20 || v20 == v6)
          break;
        v22 = *(unsigned int *)(v20 + 47);
        if (v22 | ((unint64_t)*(unsigned __int8 *)(v20 + 51) << 32))
        {
          v7 = *(WebCore::RenderQuote **)((v22 | ((unint64_t)*(unsigned __int8 *)(v20 + 51) << 32)) + 8);
          if (v7)
            goto LABEL_34;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderDescendantIteratorAdapter<WebCore::RenderQuote>::begin(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v2 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v2)
    {
      if (*(_BYTE *)(v2 + 46) != 29)
      {
        do
        {
          v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
          if (!v3)
          {
            if (v2 == a1)
              return a1;
            v4 = *(unsigned int *)(v2 + 47);
            if (!(v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
              || (v3 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8)) == 0)
            {
              v5 = *(_QWORD *)(v2 + 32);
              if (!v5)
                return a1;
              v6 = *(_QWORD *)(v5 + 8);
              if (!v6 || v6 == a1)
                return a1;
              while (1)
              {
                v8 = *(unsigned int *)(v6 + 47);
                if (v8 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32))
                {
                  v3 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v6 + 51) << 32)) + 8);
                  if (v3)
                    break;
                }
                v9 = *(_QWORD *)(v6 + 32);
                if (v9)
                {
                  v6 = *(_QWORD *)(v9 + 8);
                  if (v6 && v6 != a1)
                    continue;
                }
                return a1;
              }
            }
          }
          v2 = v3;
        }
        while (*(_BYTE *)(v3 + 46) != 29);
      }
    }
  }
  return a1;
}

_QWORD *WebCore::RenderTreeUpdater::GeneratedContent::updateCounters(void)::$_0::operator()(_QWORD *result, void *a2)
{
  WTF **v2;
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF **v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF **v10;
  WTF **v11;
  WTF *v12;
  uint64_t v13;
  WTF **v14;
  WTF *v15;
  WTF **v16;
  WTF **v17;
  _QWORD *v18;
  WTF **v19;
  WTF **v20;
  WTF **v21;
  WTF **v22;
  _QWORD v23[2];

  v2 = 0;
  v3 = 0;
  v5 = (WTF **)result[52];
  v4 = result[53];
  result[52] = 0;
  result[53] = 0;
  v23[0] = v5;
  v23[1] = v4;
  if (!v5)
    goto LABEL_2;
  v3 = *((unsigned int *)v5 - 1);
  v6 = &v5[v3];
  if (!*((_DWORD *)v5 - 3))
  {
    v2 = &v5[v3];
LABEL_2:
    v6 = &v5[v3];
    goto LABEL_9;
  }
  v2 = v5;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    v2 = v5;
    while ((unint64_t)*v2 + 1 <= 1)
    {
      ++v2;
      v7 -= 8;
      if (!v7)
      {
        v2 = v6;
        break;
      }
    }
  }
LABEL_9:
  v18 = v23;
  v19 = v2;
  v20 = v6;
  if (v5)
  {
    v9 = *((unsigned int *)v5 - 1);
    v8 = &v5[v9];
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v21 = v8;
  v22 = &v5[v9];
  if (v2 == v8)
  {
    if (!v5)
    {
LABEL_14:
      v10 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    if (!*((_QWORD *)*v2 + 1))
    {
      v16 = v2;
      do
      {
        v17 = v16 + 1;
        v16 = v6;
        if (v17 != v6)
        {
          v16 = v17;
          while ((unint64_t)*v16 + 1 <= 1)
          {
            if (++v16 == v6)
            {
              v16 = v6;
              break;
            }
          }
        }
        v2 = v8;
        if (v16 == v8)
          break;
        v2 = v16;
      }
      while (!*((_QWORD *)*v16 + 1));
    }
    v19 = v2;
    if (!v5)
      goto LABEL_14;
  }
  v10 = &v5[*((unsigned int *)v5 - 1)];
LABEL_18:
  if (v2 != v10)
  {
    do
    {
      v12 = *v2;
      v11 = v2 + 1;
      WebCore::RenderCounter::updateCounter(*((const WTF::StringImpl ***)v12 + 1));
      v19 = v11;
      if (v11 != v20)
      {
        while ((unint64_t)*v11 + 1 <= 1)
        {
          if (++v11 == v20)
          {
            v11 = v20;
            break;
          }
        }
        v19 = v11;
      }
      result = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v18);
      v2 = v19;
      ++*((_DWORD *)v18 + 2);
    }
    while (v2 != v10);
    v5 = (WTF **)v23[0];
  }
  if (v5)
  {
    v13 = *((unsigned int *)v5 - 1);
    if ((_DWORD)v13)
    {
      v14 = v5;
      do
      {
        v15 = *v14;
        if (*v14 != (WTF *)-1)
        {
          *v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
              WTF::fastFree(v15, a2);
            else
              --*(_DWORD *)v15;
          }
        }
        ++v14;
        --v13;
      }
      while (v13);
    }
    return (_QWORD *)WTF::fastFree((WTF *)(v5 - 2), a2);
  }
  return result;
}

WTF *WebCore::RenderTreeUpdater::GeneratedContent::removeBeforePseudoElement(WTF *this, WebCore::Element *a2, WebCore::RenderTreeBuilder *a3)
{
  WTF *v3;
  WebCore::Page *v4;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v3 = this;
    this = *(WTF **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xA8);
    if (this)
    {
      this = WebCore::RenderTreeUpdater::tearDownRenderers((uint64_t)this, 0);
      if ((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) != 0)
        return (WTF *)WebCore::Element::clearBeforePseudoElementSlow(v3, v4);
    }
  }
  return this;
}

WTF *WebCore::RenderTreeUpdater::GeneratedContent::removeAfterPseudoElement(WTF *this, WebCore::Element *a2, WebCore::RenderTreeBuilder *a3)
{
  WTF *v3;
  WebCore::Page *v4;

  if ((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v3 = this;
    this = *(WTF **)((*((_QWORD *)this + 9) & 0xFFFFFFFFFFFFLL) + 0xB0);
    if (this)
    {
      this = WebCore::RenderTreeUpdater::tearDownRenderers((uint64_t)this, 0);
      if ((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) != 0)
        return (WTF *)WebCore::Element::clearAfterPseudoElementSlow(v3, v4);
    }
  }
  return this;
}

void WebCore::RenderTreeUpdater::GeneratedContent::updateBackdropRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::SVGTextLayoutAttributes **v5;
  void *v6;
  WTF *v7;
  WTF *v8;

  WebCore::RenderElement::backdropRenderer(a1, &v8);
  if (v8)
  {
    v7 = v8;
    v6 = (void *)*((_QWORD *)v8 + 1);
    if (v6)
      WebCore::RenderTreeBuilder::destroy(*a2 + 48, (uint64_t)v6, 1, v3, v4, v5);
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, v6);
    else
      --*(_DWORD *)v7;
  }
}

void WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(uint64_t a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  uint64_t v6;
  WebCore::Document *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  void *v14;
  void *v15;
  WTF *v16;
  WebCore::Editor *v17;
  void *v18;
  WebCore::Editor *v19;
  uint64_t v20;
  void *v21;

  if ((a2 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 28) & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19657AC5CLL);
      }
      v8 = *(WebCore::Document **)(*(_QWORD *)(v6 + 40) + 8);
      v9 = *((_QWORD *)v8 + 382);
      if (!v9)
      {
        v17 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v17, v8);
        v19 = (WebCore::Editor *)*((_QWORD *)v8 + 382);
        *((_QWORD *)v8 + 382) = v17;
        if (v19)
        {
          WebCore::Editor::~Editor(v19, v18);
          if (*(_DWORD *)v20)
          {
            *(_QWORD *)(v20 + 496) = 0;
            *(_OWORD *)(v20 + 464) = 0u;
            *(_OWORD *)(v20 + 480) = 0u;
            *(_OWORD *)(v20 + 432) = 0u;
            *(_OWORD *)(v20 + 448) = 0u;
            *(_OWORD *)(v20 + 400) = 0u;
            *(_OWORD *)(v20 + 416) = 0u;
            *(_OWORD *)(v20 + 368) = 0u;
            *(_OWORD *)(v20 + 384) = 0u;
            *(_OWORD *)(v20 + 336) = 0u;
            *(_OWORD *)(v20 + 352) = 0u;
            *(_OWORD *)(v20 + 304) = 0u;
            *(_OWORD *)(v20 + 320) = 0u;
            *(_OWORD *)(v20 + 272) = 0u;
            *(_OWORD *)(v20 + 288) = 0u;
            *(_OWORD *)(v20 + 240) = 0u;
            *(_OWORD *)(v20 + 256) = 0u;
            *(_OWORD *)(v20 + 208) = 0u;
            *(_OWORD *)(v20 + 224) = 0u;
            *(_OWORD *)(v20 + 176) = 0u;
            *(_OWORD *)(v20 + 192) = 0u;
            *(_OWORD *)(v20 + 144) = 0u;
            *(_OWORD *)(v20 + 160) = 0u;
            *(_OWORD *)(v20 + 112) = 0u;
            *(_OWORD *)(v20 + 128) = 0u;
            *(_OWORD *)(v20 + 80) = 0u;
            *(_OWORD *)(v20 + 96) = 0u;
            *(_OWORD *)(v20 + 48) = 0u;
            *(_OWORD *)(v20 + 64) = 0u;
            *(_OWORD *)(v20 + 16) = 0u;
            *(_OWORD *)(v20 + 32) = 0u;
            *(_OWORD *)v20 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v20, v21);
          }
        }
        v9 = *((_QWORD *)v8 + 382);
      }
      v10 = *(_QWORD *)(v9 + 184);
      if (v10)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
        {
          v12 = *(WTF **)(v11 + 8);
          if (!v12)
          {
            v12 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
            *(_DWORD *)v12 = 1;
            *((_QWORD *)v12 + 1) = v11;
            v16 = *(WTF **)(v11 + 8);
            *(_QWORD *)(v11 + 8) = v12;
            if (v16)
            {
              if (*(_DWORD *)v16 == 1)
              {
                WTF::fastFree(v16, v15);
                v12 = *(WTF **)(v11 + 8);
                if (!v12)
                  return;
              }
              else
              {
                --*(_DWORD *)v16;
              }
            }
          }
          v13 = (*(_DWORD *)v12)++;
          v14 = (void *)*((_QWORD *)v12 + 1);
          if (v14)
          {
            WebCore::RenderTreeBuilder::destroy(*a3 + 48, (uint64_t)v14, 1, a4, a5, a6);
            v13 = *(_DWORD *)v12 - 1;
          }
          if (v13)
            *(_DWORD *)v12 = v13;
          else
            WTF::fastFree(v12, v14);
        }
      }
    }
  }
}

WTF::StringImpl *WebCore::RenderTreeUpdater::GeneratedContent::updateWritingSuggestionsRenderer(WebCore::RenderElement &,WebCore::StyleDifference)::$_1::operator()(WTF::StringImpl **a1, uint64_t **a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v4 = **a2;
  if (*(_BYTE *)(v4 + 40))
  {
    v5 = (WTF::StringImpl **)a2[1];
    v6 = *v5;
    if (*v5)
    {
      v7 = *(_DWORD *)(v4 + 32);
      if (*((_DWORD *)v6 + 1) > v7)
      {
        WTF::StringImpl::substring(v6);
        v6 = v10;
        v5 = (WTF::StringImpl **)a2[1];
      }
      else
      {
        *(_DWORD *)v6 += 2;
      }
      result = *v5;
      if (*v5)
      {
        if (v7 || (*((_DWORD *)result + 1) & 0x80000000) != 0)
        {
          WTF::StringImpl::substring(result);
          result = v10;
        }
        else
        {
          *(_DWORD *)result += 2;
        }
      }
    }
    else
    {
      result = 0;
    }
    *a1 = v6;
  }
  else
  {
    v9 = (WTF::StringImpl *)*a2[1];
    if (v9)
      *(_DWORD *)v9 += 2;
    *a1 = v9;
    result = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)result += 2;
  }
  a1[1] = result;
  return result;
}

void WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementTree(WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(WTF *this, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, WebCore::SVGTextLayoutAttributes **a6)
{
  int v7;
  uint64_t v8;

  if (this)
  {
    v7 = (*(_DWORD *)this)++;
    v8 = *((_QWORD *)this + 1);
    if (v8)
    {
      WebCore::RenderTreeBuilder::destroy(*a2 + 48, v8, 1, a4, a5, a6);
      v7 = *(_DWORD *)this - 1;
    }
    if (v7)
      *(_DWORD *)this = v7;
    else
      WTF::fastFree(this, a2);
  }
}

WTF::StringImpl *WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementGroup(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::SVGTextLayoutAttributes **v22;
  void *v23;
  WTF *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  uint64_t v37;
  WebCore::RenderTable *v38;
  uint64_t v39;
  uint64_t v40;
  WebCore::RenderTable *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::SVGTextLayoutAttributes **v45;
  void *v46;
  WTF *v47;
  uint64_t v48;
  WebCore::RenderTable *v49;
  uint64_t v50;
  uint64_t v51;
  WebCore::RenderTable *v52;
  WTF *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *result;
  void *v57;
  WTF *v58;
  void *v59;
  WTF *v60;
  void *v61;
  WTF *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD v71[4];
  int v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  WTF::StringImpl *v80;
  char v81;

  v81 = a5;
  v8 = a4 + 80;
  v9 = a2[1];
  v10 = *(WTF::StringImpl **)(*(_QWORD *)(v9 + 40) + 592);
  if (v10)
    *(_DWORD *)v10 += 2;
  v80 = v10;
  v72 = 0;
  ++*(_DWORD *)v9;
  v11 = a2[2];
  v12 = (_DWORD *)a2[3];
  v73 = v9;
  v74 = v11;
  ++*v12;
  v75 = v12;
  v13 = (_DWORD *)a2[4];
  ++*v13;
  v14 = a2[5];
  v76 = v13;
  v77 = v14;
  v78 = 0;
  v15 = (_DWORD *)a2[7];
  ++*v15;
  v79 = v15;
  WebCore::RenderElement::setStyle(a3, &v72, a5);
  v71[0] = a4;
  v71[1] = &v80;
  v71[2] = v8;
  v71[3] = &v81;
  v16 = *(unsigned int *)(a3 + 64);
  if (!(v16 | ((unint64_t)*(unsigned __int8 *)(a3 + 68) << 32))
    || (v17 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(a3 + 68) << 32)) + 8)) == 0)
  {
    v18 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v17 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19657B4F8);
  }
  v18 = *(uint64_t **)(v17 + 8);
  if (!v18)
  {
    v18 = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    v18[1] = v17;
    v47 = *(WTF **)(v17 + 8);
    *(_QWORD *)(v17 + 8) = v18;
    if (v47)
    {
      if (*(_DWORD *)v47 != 1)
      {
        --*(_DWORD *)v47;
        goto LABEL_7;
      }
      WTF::fastFree(v47, v46);
      v18 = *(uint64_t **)(v17 + 8);
      if (!v18)
      {
LABEL_11:
        v25 = 1;
        goto LABEL_13;
      }
    }
  }
LABEL_7:
  ++*(_DWORD *)v18;
  v19 = v18[1];
  if (!v19)
  {
    v25 = 0;
LABEL_13:
    WebCore::createRendererIfNeeded((uint64_t *)&v70, a4, &v80, 14);
    v26 = (uint64_t)v70;
    if (!v70)
    {
      v24 = (WTF *)v18;
      if (!v18)
        goto LABEL_81;
      goto LABEL_79;
    }
    v24 = (WTF *)v70[1];
    if (!v24)
    {
      v24 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v24 = 1;
      *((_QWORD *)v24 + 1) = v26;
      v53 = *(WTF **)(v26 + 8);
      *(_QWORD *)(v26 + 8) = v24;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1)
        {
          WTF::fastFree(v53, v23);
          v24 = *(WTF **)(v26 + 8);
          if (!v24)
            goto LABEL_16;
        }
        else
        {
          --*(_DWORD *)v53;
        }
      }
    }
    ++*(_DWORD *)v24;
LABEL_16:
    if ((v25 & 1) == 0)
    {
      if (*(_DWORD *)v18 == 1)
      {
        WTF::fastFree((WTF *)v18, v23);
        v26 = (uint64_t)v70;
      }
      else
      {
        --*(_DWORD *)v18;
      }
    }
    v27 = *a1 + 48;
    v69 = v26;
    WebCore::RenderTreeBuilder::attach(v27, (WebCore::RenderTable *)a3, (unint64_t *)&v69);
    v28 = v69;
    v69 = 0;
    if (v28)
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v69, v28);
    goto LABEL_24;
  }
  if (WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementGroup(WebCore::RenderStyle const&,WebCore::RenderElement &,WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()((uint64_t)v71, v19))
  {
    WebCore::RenderTreeBuilder::destroy(*a1 + 48, v18[1], 1, v20, v21, v22);
    v24 = (WTF *)v18;
    goto LABEL_79;
  }
  v24 = (WTF *)v18;
LABEL_24:
  if (!(*(unsigned int *)(*((_QWORD *)v24 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v24 + 1)
                                                                                                + 68) << 32))
    || (v29 = *(_QWORD *)((*(unsigned int *)(*((_QWORD *)v24 + 1) + 64) | ((unint64_t)*(unsigned __int8 *)(*((_QWORD *)v24 + 1) + 68) << 32))
                        + 8)) == 0)
  {
    WebCore::createRendererIfNeeded((uint64_t *)&v70, a4, &v80, 15);
    if (v70)
    {
      v37 = *a1 + 48;
      v38 = (WebCore::RenderTable *)*((_QWORD *)v24 + 1);
      v68 = (uint64_t)v70;
      WebCore::RenderTreeBuilder::attach(v37, v38, (unint64_t *)&v68);
      v39 = v68;
      v68 = 0;
      if (v39)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v68, v39);
    }
    WebCore::createRendererIfNeeded((uint64_t *)&v70, a4, &v80, 16);
    if (v70)
    {
      v40 = *a1 + 48;
      v41 = (WebCore::RenderTable *)*((_QWORD *)v24 + 1);
      v67 = (uint64_t)v70;
      WebCore::RenderTreeBuilder::attach(v40, v41, (unint64_t *)&v67);
      v23 = (void *)v67;
      v67 = 0;
      if (v23)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v67, (uint64_t)v23);
    }
    goto LABEL_79;
  }
  v70 = 0;
  v66 = 0;
  v30 = v29;
  if ((*(_BYTE *)(v29 + 45) & 2) != 0)
    v30 = *(_QWORD *)(*(_QWORD *)(v29 + 32) + 8);
  v31 = *(uint64_t **)(v29 + 8);
  if ((*(_QWORD *)(v30 + 96) & 0xF80000000000) != 0x780000000000)
  {
    if (v31)
      goto LABEL_41;
    v31 = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v31 = 1;
    v31[1] = v29;
    v60 = *(WTF **)(v29 + 8);
    *(_QWORD *)(v29 + 8) = v31;
    if (!v60)
      goto LABEL_41;
    if (*(_DWORD *)v60 != 1)
    {
      --*(_DWORD *)v60;
      goto LABEL_41;
    }
LABEL_104:
    WTF::fastFree(v60, v59);
    v31 = *(uint64_t **)(v29 + 8);
    if (!v31)
    {
      v35 = 0;
LABEL_42:
      WebCore::createRendererIfNeeded((uint64_t *)&v65, a4, &v80, 15);
      v32 = 0;
      v31 = 0;
      v34 = (uint64_t)v65;
      v70 = v65;
      if (!v35)
      {
        v36 = 1;
        v35 = 0;
        goto LABEL_52;
      }
      goto LABEL_43;
    }
LABEL_41:
    ++*(_DWORD *)v31;
    v35 = v31;
    goto LABEL_42;
  }
  if (!v31)
  {
    v31 = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v31 = 1;
    v31[1] = v29;
    v58 = *(WTF **)(v29 + 8);
    *(_QWORD *)(v29 + 8) = v31;
    if (v58)
    {
      if (*(_DWORD *)v58 != 1)
      {
        --*(_DWORD *)v58;
        goto LABEL_30;
      }
      WTF::fastFree(v58, v57);
      v31 = *(uint64_t **)(v29 + 8);
      if (v31)
        goto LABEL_30;
      v60 = (WTF *)WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementGroup(WebCore::RenderStyle const&,WebCore::RenderElement &,WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()((uint64_t)v71, 0);
      __break(1u);
      goto LABEL_104;
    }
  }
LABEL_30:
  ++*(_DWORD *)v31;
  v32 = WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementGroup(WebCore::RenderStyle const&,WebCore::RenderElement &,WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()((uint64_t)v71, v31[1]);
  if (*(unsigned int *)(v31[1] + 47) | ((unint64_t)*(unsigned __int8 *)(v31[1] + 51) << 32))
  {
    v33 = *(_QWORD *)((*(unsigned int *)(v31[1] + 47) | ((unint64_t)*(unsigned __int8 *)(v31[1] + 51) << 32)) + 8);
    if (v33)
    {
      v35 = *(uint64_t **)(v33 + 8);
      if (!v35)
      {
        v35 = (uint64_t *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v35 = 1;
        v35[1] = v33;
        v62 = *(WTF **)(v33 + 8);
        *(_QWORD *)(v33 + 8) = v35;
        if (v62)
        {
          if (*(_DWORD *)v62 == 1)
          {
            WTF::fastFree(v62, v61);
            v35 = *(uint64_t **)(v33 + 8);
            if (!v35)
            {
              v34 = 0;
              goto LABEL_33;
            }
          }
          else
          {
            --*(_DWORD *)v62;
          }
        }
      }
      v34 = 0;
      ++*(_DWORD *)v35;
LABEL_43:
      v42 = v35[1];
      if (!v42)
      {
        v36 = 0;
        goto LABEL_52;
      }
      if ((WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementGroup(WebCore::RenderStyle const&,WebCore::RenderElement &,WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()((uint64_t)v71, v42) & 1) != 0)
      {
        WebCore::RenderTreeBuilder::destroy(*a1 + 48, v35[1], 1, v43, v44, v45);
        if ((v32 & 1) != 0)
        {
LABEL_46:
          v36 = 0;
          goto LABEL_59;
        }
      }
      else if ((v32 & 1) != 0)
      {
        goto LABEL_46;
      }
      if (!v34)
      {
        v36 = 0;
        goto LABEL_69;
      }
      v51 = *a1 + 48;
      v52 = (WebCore::RenderTable *)*((_QWORD *)v24 + 1);
      v70 = 0;
      v63 = v34;
      goto LABEL_66;
    }
  }
  v34 = 0;
  v35 = 0;
LABEL_33:
  v36 = 1;
LABEL_52:
  WebCore::createRendererIfNeeded((uint64_t *)&v65, a4, &v80, 16);
  v66 = v65;
  if (v65)
  {
    v48 = *a1 + 48;
    v49 = (WebCore::RenderTable *)*((_QWORD *)v24 + 1);
    v66 = 0;
    v64 = (uint64_t)v65;
    WebCore::RenderTreeBuilder::attach(v48, v49, (unint64_t *)&v64);
    v50 = v64;
    v64 = 0;
    if (v50)
    {
      WebCore::RenderObjectDeleter::operator()((uint64_t)&v64, v50);
      if ((v32 & 1) == 0)
        goto LABEL_55;
LABEL_59:
      WebCore::RenderTreeBuilder::destroy(*a1 + 48, v31[1], 1, v43, v44, v45);
      goto LABEL_69;
    }
  }
  if (v32)
    goto LABEL_59;
LABEL_55:
  if (!v34)
    goto LABEL_69;
  v51 = *a1 + 48;
  v52 = (WebCore::RenderTable *)*((_QWORD *)v24 + 1);
  v70 = 0;
  v63 = v34;
  if ((v36 & 1) != 0)
  {
    v36 = 1;
    goto LABEL_67;
  }
LABEL_66:
  v36 = 0;
LABEL_67:
  WebCore::RenderTreeBuilder::attach(v51, v52, (unint64_t *)&v63);
  v54 = v63;
  v63 = 0;
  if (v54)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v63, v54);
LABEL_69:
  if (v66)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v66, (uint64_t)v66);
  v23 = v70;
  if (v70)
    WebCore::RenderObjectDeleter::operator()((uint64_t)&v70, (uint64_t)v70);
  if ((v36 & 1) != 0)
  {
LABEL_76:
    if (v31)
      goto LABEL_77;
    goto LABEL_79;
  }
  if (*(_DWORD *)v35 != 1)
  {
    --*(_DWORD *)v35;
    goto LABEL_76;
  }
  WTF::fastFree((WTF *)v35, v23);
  if (v31)
  {
LABEL_77:
    if (*(_DWORD *)v31 == 1)
      WTF::fastFree((WTF *)v31, v23);
    else
      --*(_DWORD *)v31;
  }
LABEL_79:
  if (*(_DWORD *)v24 == 1)
    WTF::fastFree(v24, v23);
  else
    --*(_DWORD *)v24;
LABEL_81:
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v72, v23);
  result = v80;
  v80 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v55);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RenderTreeUpdater::ViewTransition::buildPseudoElementGroup(WebCore::RenderTreeUpdater::ViewTransition *this, WTF::StringImpl **a2, WebCore::RenderElement *a3, WebCore::RenderObject *a4)
{
  uint64_t result;
  WebCore::RenderTable *v8;
  WebCore::RenderTable *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WebCore::RenderTable *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WebCore::RenderTable *v23;
  WebCore::RenderTable *v24;

  result = (uint64_t)WebCore::createRendererIfNeeded((uint64_t *)&v24, (uint64_t)a3, a2, 13);
  v8 = v24;
  if (v24)
  {
    WebCore::createRendererIfNeeded((uint64_t *)&v23, (uint64_t)a3, a2, 14);
    v9 = v23;
    if (v23)
    {
      WebCore::createRendererIfNeeded(&v22, (uint64_t)a3, a2, 15);
      WebCore::createRendererIfNeeded(&v21, (uint64_t)a3, a2, 16);
      if (v22)
      {
        v10 = *(_QWORD *)this + 48;
        v20 = v22;
        WebCore::RenderTreeBuilder::attach(v10, v9, (unint64_t *)&v20);
        if (v20)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v20, v20);
      }
      if (v21)
      {
        v11 = *(_QWORD *)this + 48;
        v19 = v21;
        WebCore::RenderTreeBuilder::attach(v11, v9, (unint64_t *)&v19);
        if (v19)
          WebCore::RenderObjectDeleter::operator()((uint64_t)&v19, v19);
      }
      v12 = *(_QWORD *)this + 48;
      v18 = (uint64_t)v9;
      WebCore::RenderTreeBuilder::attach(v12, v8, (unint64_t *)&v18);
      if (v18)
        WebCore::RenderObjectDeleter::operator()((uint64_t)&v18, v18);
    }
    v13 = *(_QWORD *)this + 48;
    v14 = *(WTF **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 3) + 8) + 40) + 8) + 1944)
                  + 528);
    if (v14)
      ++*(_DWORD *)v14;
    v15 = (WebCore::RenderTable *)*((_QWORD *)v14 + 1);
    v17 = (uint64_t)v8;
    result = WebCore::RenderTreeBuilder::attach(v13, v15, (unint64_t *)&v17);
    v16 = (void *)v17;
    if (v17)
      result = WebCore::RenderObjectDeleter::operator()((uint64_t)&v17, v17);
    if (*(_DWORD *)v14 == 1)
      return WTF::fastFree(v14, v16);
    else
      --*(_DWORD *)v14;
  }
  return result;
}

WTF::StringImpl *WebCore::createRendererIfNeeded(uint64_t *a1, uint64_t a2, WTF::StringImpl **a3, int a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD *CachedPseudoStyle;
  WTF::StringImpl *result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int i;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const WebCore::Element *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  void *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;

  LODWORD(v54) = a4;
  v8 = *a3;
  if (*a3)
    *(_DWORD *)v8 += 2;
  v55 = v8;
  CachedPseudoStyle = (_QWORD *)WebCore::RenderElement::getCachedPseudoStyle(a2, (uint64_t)&v54, a2 + 80);
  result = v55;
  v55 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      if (!CachedPseudoStyle)
        goto LABEL_8;
      goto LABEL_7;
    }
    *(_DWORD *)result -= 2;
  }
  if (!CachedPseudoStyle)
  {
LABEL_8:
    *a1 = 0;
    return result;
  }
LABEL_7:
  if ((CachedPseudoStyle[2] & 0x1FLL) == 0x1A)
    goto LABEL_8;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 40) + 8);
  *(_DWORD *)(v12 + 24) += 2;
  v62 = 0;
  if ((a4 - 15) <= 1)
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v12 + 2112) + 64);
    if (!v13)
      goto LABEL_20;
    v14 = 0;
    for (i = *((_DWORD *)*a3 + 4) >> 8; ; i = ++v14 + v16)
    {
      v16 = i & *(_DWORD *)(v13 - 8);
      v17 = *(WTF::StringImpl **)(v13 + 16 * v16);
      if (v17 != (WTF::StringImpl *)-1)
      {
        if (!v17)
          goto LABEL_20;
        if (v17 == *a3)
          break;
      }
    }
    if ((_DWORD)v16 != *(_DWORD *)(v13 - 4))
      v30 = *(_QWORD *)(v13 + 16 * v16 + 8);
    else
LABEL_20:
      v30 = 0;
    if (a4 == 15)
    {
      if (!*(_BYTE *)(v30 + 8))
      {
LABEL_32:
        v24 = 0;
        goto LABEL_70;
      }
    }
    else if (a4 == 16)
    {
      v31 = *(_QWORD *)(v30 + 56);
      if (!v31 || !*(_QWORD *)(v31 + 8))
        goto LABEL_32;
    }
    LODWORD(v54) = 0;
    v32 = (WTF::StringImpl *)CachedPseudoStyle[1];
    ++*(_DWORD *)v32;
    v33 = CachedPseudoStyle[2];
    v34 = (_DWORD *)CachedPseudoStyle[3];
    v55 = v32;
    v56 = v33;
    ++*v34;
    v57 = v34;
    v35 = (_DWORD *)CachedPseudoStyle[4];
    ++*v35;
    v36 = CachedPseudoStyle[5];
    v58 = v35;
    v59 = v36;
    v60 = 0;
    v37 = (_DWORD *)CachedPseudoStyle[7];
    ++*v37;
    v61 = v37;
    v24 = bmalloc::api::isoAllocate();
    v38 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v24, 50, v12, &v54, 12, 2051);
    *(_OWORD *)(v38 + 200) = 0u;
    *(_OWORD *)(v38 + 184) = 0u;
    *(_OWORD *)(v38 + 168) = 0u;
    *(_OWORD *)(v38 + 152) = 0u;
    *(_DWORD *)(v38 + 20) |= 2u;
    *(_QWORD *)v38 = off_1E3438ED0;
    *(_OWORD *)(v38 + 232) = 0u;
    *(_OWORD *)(v38 + 248) = 0u;
    *(_OWORD *)(v38 + 216) = 0u;
    *(_OWORD *)(v38 + 264) = 0u;
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v54, v39);
    if (a4 != 15)
      goto LABEL_59;
    if (!*(_BYTE *)(v30 + 8))
    {
      v40 = 0;
      goto LABEL_42;
    }
    v40 = *(_QWORD *)v30;
    if (!*(_QWORD *)v30)
      goto LABEL_42;
    v41 = *(_QWORD *)(v40 + 8);
    if (__ldaxr((unsigned __int8 *)v41))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v41))
    {
      goto LABEL_37;
    }
    MEMORY[0x19AEA534C](v41);
LABEL_37:
    ++*(_QWORD *)(v41 + 8);
    v43 = __ldxr((unsigned __int8 *)v41);
    if (v43 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v41))
      {
LABEL_42:
        v53 = v40;
        WebCore::RenderViewTransitionCapture::setImage(v24, &v53);
        v53 = 0;
        if (!v40)
        {
LABEL_59:
          if (*(_DWORD *)(v24 + 224) != *(_DWORD *)(v30 + 16)
            || *(_DWORD *)(v24 + 228) != *(_DWORD *)(v30 + 20)
            || *(_DWORD *)(v24 + 232) != *(_DWORD *)(v30 + 24)
            || *(_DWORD *)(v24 + 236) != *(_DWORD *)(v30 + 28)
            || *(_QWORD *)(v30 + 40) != WebCore::RenderReplaced::intrinsicSize(v24)
            || *(_DWORD *)(v24 + 240) != *(_DWORD *)(v30 + 32)
            || *(_DWORD *)(v24 + 244) != *(_DWORD *)(v30 + 36))
          {
            *(_QWORD *)(v24 + 264) = *(_QWORD *)(v30 + 40);
            *(_QWORD *)(v24 + 200) = *(_QWORD *)(v30 + 40);
            *(_OWORD *)(v24 + 224) = *(_OWORD *)(v30 + 16);
            *(_QWORD *)(v24 + 240) = *(_QWORD *)(v30 + 32);
          }
          v27 = v62;
          if (v62)
            WebCore::RenderObjectDeleter::operator()((uint64_t)&v62, v62);
          goto LABEL_69;
        }
        v45 = *(_QWORD *)(v40 + 8);
        if (__ldaxr((unsigned __int8 *)v45))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v45))
        {
          goto LABEL_47;
        }
        MEMORY[0x19AEA534C](v45);
LABEL_47:
        v47 = *(_QWORD *)(v45 + 8);
        v48 = v47 - 1;
        *(_QWORD *)(v45 + 8) = v47 - 1;
        if (v47 == 1)
        {
          v52 = *(_QWORD *)(v45 + 16);
          v49 = *(_QWORD *)(v45 + 24);
          *(_QWORD *)(v45 + 24) = 0;
          v50 = v52 != 0;
        }
        else
        {
          v49 = 0;
          v50 = 1;
        }
        v51 = __ldxr((unsigned __int8 *)v45);
        if (v51 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v45))
          {
LABEL_54:
            if (!v48)
            {
              if (v49)
                (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
              if (!v50)
                WTF::fastFree((WTF *)v45, v44);
            }
            goto LABEL_59;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v45);
        goto LABEL_54;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v41);
    goto LABEL_42;
  }
  LODWORD(v54) = 0;
  v18 = (WTF::StringImpl *)CachedPseudoStyle[1];
  ++*(_DWORD *)v18;
  v19 = CachedPseudoStyle[2];
  v20 = (_DWORD *)CachedPseudoStyle[3];
  v55 = v18;
  v56 = v19;
  ++*v20;
  v57 = v20;
  v21 = (_DWORD *)CachedPseudoStyle[4];
  ++*v21;
  v22 = CachedPseudoStyle[5];
  v58 = v21;
  v59 = v22;
  v60 = 0;
  v23 = (_DWORD *)CachedPseudoStyle[7];
  ++*v23;
  v61 = v23;
  v24 = bmalloc::api::isoAllocate();
  v25 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v24, 1, v12, &v54, 76, 4097);
  *(_OWORD *)(v25 + 184) = 0u;
  *(_OWORD *)(v25 + 168) = 0u;
  *(_OWORD *)(v25 + 152) = 0u;
  *(_QWORD *)v25 = off_1E341F9F8;
  *(_DWORD *)(v25 + 200) = -1;
  *(_BYTE *)(v25 + 204) &= 0xFCu;
  *(_BYTE *)(v25 + 208) = 0;
  *(_BYTE *)(v25 + 212) = 0;
  *(_DWORD *)(v25 + 240) = 0;
  *(_QWORD *)(v25 + 216) = 0;
  *(_QWORD *)(v25 + 224) = 0;
  *(_DWORD *)(v25 + 20) |= 0x40000u;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v54, v26);
LABEL_69:
  result = WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v24, v27, v28, v29);
LABEL_70:
  *a1 = v24;
  if (v12)
  {
    if (*(_DWORD *)(v12 + 24) == 2)
    {
      if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
        return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)v12);
    }
    else
    {
      *(_DWORD *)(v12 + 24) -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderTreeUpdater::ViewTransition::updatePseudoElementGroup(WebCore::RenderStyle const&,WebCore::RenderElement &,WebCore::RenderElement &,WebCore::StyleDifference)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _QWORD *CachedPseudoStyle;
  WTF::StringImpl *v9;
  uint64_t result;
  WTF::StringImpl *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  void *v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  v4 = *(_QWORD *)a1;
  v5 = a2;
  if ((*(_BYTE *)(a2 + 45) & 2) != 0)
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8);
  v18 = (*(_QWORD *)(v5 + 96) >> 43) & 0x1F;
  v6 = **(WTF::StringImpl ***)(a1 + 8);
  if (v6)
    *(_DWORD *)v6 += 2;
  v19 = v6;
  CachedPseudoStyle = (_QWORD *)WebCore::RenderElement::getCachedPseudoStyle(v4, (uint64_t)&v18, *(_QWORD *)(a1 + 16));
  v9 = v19;
  v19 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
    {
      WTF::StringImpl::destroy(v9, v7);
      if (!CachedPseudoStyle)
        return 1;
      goto LABEL_9;
    }
    *(_DWORD *)v9 -= 2;
  }
  if (!CachedPseudoStyle)
    return 1;
LABEL_9:
  if ((CachedPseudoStyle[2] & 0x1FLL) == 0x1A)
    return 1;
  v18 = 0;
  v11 = (WTF::StringImpl *)CachedPseudoStyle[1];
  ++*(_DWORD *)v11;
  v12 = CachedPseudoStyle[2];
  v13 = (_DWORD *)CachedPseudoStyle[3];
  v19 = v11;
  v20 = v12;
  ++*v13;
  v21 = v13;
  v14 = (_DWORD *)CachedPseudoStyle[4];
  ++*v14;
  v15 = CachedPseudoStyle[5];
  v22 = v14;
  v23 = v15;
  v24 = 0;
  v16 = (_DWORD *)CachedPseudoStyle[7];
  ++*v16;
  v25 = v16;
  if ((*(_BYTE *)(a2 + 45) & 2) != 0)
  {
    result = 96;
    __break(0xC471u);
  }
  else
  {
    WebCore::RenderElement::setStyle(a2, &v18, **(unsigned __int8 **)(a1 + 24));
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v18, v17);
    return 0;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ComposedTreeIterator::Context,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t *v17;
  unsigned int v18;
  int v19;
  int v20;

  v3 = *((_DWORD *)a2 + 3);
  v4 = a1 + 16;
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 8;
  *(_DWORD *)(a1 + 12) = v3;
  if (v3 >= 9)
  {
    if (v3 >= 0x70381D)
    {
LABEL_16:
      __break(0xC471u);
      JUMPOUT(0x19657BF60);
    }
    v17 = a2;
    v18 = 584 * v3;
    v4 = WTF::fastMalloc((WTF *)(584 * v3));
    *(_DWORD *)(a1 + 8) = v18 / 0x248;
    *(_QWORD *)a1 = v4;
    a2 = v17;
  }
  v5 = *((_DWORD *)a2 + 3);
  if (v5)
  {
    v6 = 0;
    v7 = *a2;
    v8 = *a2 + 584 * v5;
    do
    {
      v9 = v7 + v6;
      v10 = v4 + v6;
      v11 = *(unsigned int *)(v7 + v6 + 20);
      v12 = (void *)(v4 + v6 + 24);
      *(_QWORD *)v10 = *(_QWORD *)(v7 + v6);
      *(_QWORD *)(v10 + 8) = v12;
      *(_DWORD *)(v10 + 16) = 16;
      *(_DWORD *)(v10 + 20) = v11;
      if (v11 >= 0x11)
      {
        if (v11 >> 28)
          goto LABEL_16;
        v19 = v11;
        v12 = (void *)WTF::fastMalloc((WTF *)(16 * v11));
        *(_DWORD *)(v10 + 16) = v19;
        *(_QWORD *)(v10 + 8) = v12;
      }
      memcpy(v12, *(const void **)(v9 + 8), 16 * *(unsigned int *)(v9 + 20));
      *(_DWORD *)(v10 + 280) = *(_DWORD *)(v9 + 280);
      v13 = *(unsigned int *)(v9 + 308);
      v14 = (void *)(v10 + 312);
      *(_QWORD *)(v10 + 288) = *(_QWORD *)(v9 + 288);
      *(_QWORD *)(v10 + 296) = v10 + 312;
      *(_DWORD *)(v10 + 304) = 16;
      *(_DWORD *)(v10 + 308) = v13;
      if (v13 >= 0x11)
      {
        if (v13 >> 28)
        {
          __break(0xC471u);
          JUMPOUT(0x19657BF68);
        }
        v20 = v13;
        v14 = (void *)WTF::fastMalloc((WTF *)(16 * v13));
        *(_DWORD *)(v10 + 304) = v20;
        *(_QWORD *)(v10 + 296) = v14;
      }
      memcpy(v14, *(const void **)(v9 + 296), 16 * *(unsigned int *)(v9 + 308));
      v15 = v4 + v6;
      *(_DWORD *)(v15 + 568) = *(_DWORD *)(v9 + 568);
      *(_QWORD *)(v15 + 576) = *(_QWORD *)(v9 + 576);
      v6 += 584;
    }
    while (v9 + 584 != v8);
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::Element *,30ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 8 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Element *,30ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v9 = a2;
  else
    v9 = v8;
  if (v9 <= v6)
    return v3;
  v10 = *(unsigned int *)(result + 12);
  if (v9 < 0x1F)
  {
    v11 = (void *)(result + 16);
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 30;
    goto LABEL_12;
  }
  if (!(v9 >> 29))
  {
    v11 = (void *)WTF::fastMalloc((WTF *)(8 * v9));
    *(_DWORD *)(v4 + 8) = v9;
    *(_QWORD *)v4 = v11;
LABEL_12:
    memcpy(v11, v5, 8 * v10);
    if ((void *)(v4 + 16) != v5 && v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WebCore::Element *,30ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 0x1F)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 30;
    }
    else
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 8 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t WebCore::canCollapseNextSibling(WebCore *this, unint64_t a2, const WebCore::RenderBox *a3, uint64_t a4)
{
  char v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v12;
  unint64_t v13;

  v4 = 0;
  if ((this & 1) != 0 && (a3 & 1) != 0)
  {
    if ((a2 & 0xFFFFFFFFFFLL) != 0)
    {
      v5 = *(_QWORD *)((a2 & 0xFFFFFFFFFFLL) + 8);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 20);
        if ((v6 & 0x800) != 0 || (v6 & 0x1800000) == 0x1000000)
        {
          v5 = *(unsigned int *)(v5 + 47) | ((unint64_t)*(unsigned __int8 *)(v5 + 51) << 32);
          if (v5)
          {
            v7 = *(_QWORD *)(v5 + 8);
            if (!v7)
              goto LABEL_9;
            while (1)
            {
              v12 = *(_DWORD *)(v7 + 20);
              if ((v12 & 0x800) == 0 && (v12 & 0x1800000) != 0x1000000)
                break;
              v13 = *(unsigned int *)(v7 + 47) | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32);
              if (!v13)
                goto LABEL_9;
              v5 = 0;
              v7 = *(_QWORD *)(v13 + 8);
              if (!v7)
                goto LABEL_10;
            }
            v5 = v7;
          }
        }
      }
LABEL_10:
      if ((a4 & 0xFFFFFFFFFFLL) == 0)
        goto LABEL_18;
      v8 = *(_QWORD *)((a4 & 0xFFFFFFFFFFLL) + 8);
      if (!v8)
        goto LABEL_18;
      v9 = *(_DWORD *)(v8 + 20);
      if ((v9 & 0x800) != 0 || (v9 & 0x1800000) == 0x1000000)
      {
        if (!(*(unsigned int *)(v8 + 47) | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)))
          goto LABEL_18;
        v10 = *(_QWORD *)((*(unsigned int *)(v8 + 47) | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
        if (!v10)
          goto LABEL_18;
        while (1)
        {
          v9 = *(_DWORD *)(v10 + 20);
          if ((v9 & 0x800) == 0 && (v9 & 0x1800000) != 0x1000000)
            break;
          if (!(*(unsigned int *)(v10 + 47) | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)))
            goto LABEL_18;
          v10 = *(_QWORD *)((*(unsigned int *)(v10 + 47) | ((unint64_t)*(unsigned __int8 *)(v10 + 51) << 32)) + 8);
          v4 = 1;
          if (!v10)
            return v4 & 1;
        }
      }
      if (v5)
      {
        v4 = ((v9 & 1) == 0) ^ *(_BYTE *)(v5 + 20);
        return v4 & 1;
      }
LABEL_18:
      v4 = 1;
      return v4 & 1;
    }
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  return v4 & 1;
}

_QWORD *WTF::Vector<WebCore::Element *,30ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element *&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<WebCore::Element *,30ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WebCore::RenderTraversal::next<WebCore::RenderQuote,WebCore::RenderQuote>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  if (*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v3 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v3)
      goto LABEL_6;
  }
  if (a1 == a2)
    return 0;
  v4 = *(unsigned int *)(a1 + 47);
  if (!(v4 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32))
    || (v3 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 32)) + 8)) == 0)
  {
    v13 = *(_QWORD *)(a1 + 32);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (v14 && v14 != a2)
      {
        while (1)
        {
          v16 = *(unsigned int *)(v14 + 47);
          if (v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32))
          {
            v3 = *(_QWORD *)((v16 | ((unint64_t)*(unsigned __int8 *)(v14 + 51) << 32)) + 8);
            if (v3)
              break;
          }
          v17 = *(_QWORD *)(v14 + 32);
          if (!v17)
            return 0;
          result = 0;
          v14 = *(_QWORD *)(v17 + 8);
          if (v14)
            v18 = v14 == a2;
          else
            v18 = 1;
          if (v18)
            return result;
        }
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  if (*(_BYTE *)(v3 + 46) != 29)
  {
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 112))(v3);
      if (!result)
      {
        if (v3 == a2)
          return 0;
        v6 = *(unsigned int *)(v3 + 47);
        if (!(v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32))
          || (result = *(_QWORD *)((v6 | ((unint64_t)*(unsigned __int8 *)(v3 + 51) << 32)) + 8)) == 0)
        {
          v7 = *(_QWORD *)(v3 + 32);
          if (!v7)
            return 0;
          v8 = *(_QWORD *)(v7 + 8);
          if (!v8 || v8 == a2)
            return 0;
          while (1)
          {
            v10 = *(unsigned int *)(v8 + 47);
            if (v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32))
            {
              result = *(_QWORD *)((v10 | ((unint64_t)*(unsigned __int8 *)(v8 + 51) << 32)) + 8);
              if (result)
                break;
            }
            v11 = *(_QWORD *)(v8 + 32);
            if (!v11)
              return 0;
            result = 0;
            v8 = *(_QWORD *)(v11 + 8);
            if (v8)
              v12 = v8 == a2;
            else
              v12 = 1;
            if (v12)
              return result;
          }
        }
      }
      v3 = result;
      if (*(_BYTE *)(result + 46) == 29)
        return result;
    }
  }
  return v3;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::RenderObject,WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderObject*&>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WTF *v19;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  v9 = *(WTF **)result;
  if (v8 <= v4)
    goto LABEL_22;
  if (!(v8 >> 29))
  {
    v11 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v11;
    if ((_DWORD)v5)
    {
      v12 = 8 * v5;
      v13 = (WTF **)v9;
      do
      {
        v14 = *v13;
        *v13 = 0;
        *(_QWORD *)v11 = v14;
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
            WTF::fastFree(v15, v10);
          else
            --*(_DWORD *)v15;
        }
        v11 = (WTF *)((char *)v11 + 8);
        ++v13;
        v12 -= 8;
      }
      while (v12);
      v11 = *(WTF **)v3;
    }
    if (v9)
    {
      if (v11 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v9, v10);
      v9 = *(WTF **)v3;
    }
    else
    {
      v9 = v11;
    }
LABEL_22:
    v16 = *(unsigned int *)(v3 + 12);
    v17 = *a2;
    if (v17)
    {
      result = *(_QWORD *)(v17 + 8);
      if (!result)
      {
        result = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)result = 1;
        *(_QWORD *)(result + 8) = v17;
        v19 = *(WTF **)(v17 + 8);
        *(_QWORD *)(v17 + 8) = result;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
          {
            WTF::fastFree(v19, v18);
            result = *(_QWORD *)(v17 + 8);
            if (!result)
              goto LABEL_24;
          }
          else
          {
            --*(_DWORD *)v19;
          }
        }
      }
      ++*(_DWORD *)result;
    }
    else
    {
      result = 0;
    }
LABEL_24:
    *((_QWORD *)v9 + v16) = result;
    ++*(_DWORD *)(v3 + 12);
    return result;
  }
  __break(0xC471u);
  return result;
}

void WebCore::Storage::~Storage(WebCore::Storage *this)
{
  void *v2;
  _DWORD *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 96))(*((_QWORD *)this + 3));
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v7 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v7)
      {
        v10 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v7));
        v4 = v10;
      }
      v8 = *(WTF **)(v4 + 16);
      if (v8)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v9 = v4;
        WTF::fastFree(v8, v2);
        v4 = v9;
      }
      WTF::fastFree((WTF *)v4, v2);
    }
  }
  if (*(_QWORD *)this)
  {
    *(_QWORD *)(*(_QWORD *)this + 8) = 3;
    *(_QWORD *)this = 0;
  }
}

uint64_t WebCore::Storage::removeItem@<X0>(WebCore::Storage *this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  char v7;
  char v8;

  result = WebCore::LocalDOMWindowProperty::frame((WebCore::Storage *)((char *)this + 16));
  if (result)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, const WTF::String *))(**((_QWORD **)this + 3) + 48))(*((_QWORD *)this + 3), result, a2);
    v7 = 0;
    v8 = 0;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    a3[1] = 0;
    v8 = 1;
    v7 = 12;
  }
  *(_BYTE *)a3 = v7;
  *((_BYTE *)a3 + 16) = v8;
  return result;
}

WTF::StringImpl *WebCore::Storage::supportedPropertyNames@<X0>(WebCore::Storage *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if ((_DWORD)result)
  {
    v5 = (int)result;
    if (result >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = WTF::fastMalloc((WTF *)(8 * result));
      v8 = 0;
      v9 = 0;
      *(_DWORD *)(a2 + 8) = v5;
      *(_QWORD *)a2 = v7;
      do
      {
        result = (WTF::StringImpl *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**((_QWORD **)this + 3) + 24))(&v14, *((_QWORD *)this + 3), v9);
        v11 = v8;
        v12 = v14;
        v14 = 0;
        if (v12)
        {
          v15 = v12;
          if ((*((_BYTE *)v12 + 16) & 0x10) == 0)
          {
            WTF::AtomStringImpl::addSlowCase();
            v13 = v15;
            v12 = v16;
            v15 = 0;
            v16 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v10);
              else
                *(_DWORD *)v13 -= 2;
            }
          }
          result = v14;
          *(_QWORD *)(v7 + 8 * v11) = v12;
          v8 = v11 + 1;
          *(_DWORD *)(a2 + 12) = v11 + 1;
          v14 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
            else
              *(_DWORD *)result -= 2;
          }
        }
        else
        {
          *(_QWORD *)(v7 + 8 * v11) = 0;
          v8 = v11 + 1;
          *(_DWORD *)(a2 + 12) = v11 + 1;
        }
        ++v9;
      }
      while (v6 != v9);
    }
  }
  return result;
}

void WebCore::StorageEvent::~StorageEvent(WebCore::StorageEvent *this, WTF::StringImpl *a2)
{
  WebCore::Storage *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  void *v9;

  v3 = (WebCore::Storage *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::Storage::~Storage(v3);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::StorageEvent::~StorageEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::StorageEvent::create@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;

  v8 = bmalloc::api::isoAllocate();
  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  *(_QWORD *)(v8 + 8) = 0;
  if (a3)
    v14 = 2982400;
  else
    v14 = 2981888;
  v15 = v14 | (2 * v11) | (4 * v12) | (8 * v13) | (*a1 != 0) | *(_DWORD *)(v8 + 20) & 0xFFC00000;
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v15;
  v16 = (_DWORD *)*a1;
  if (*a1)
  {
    *v16 += 2;
    v15 = *(_DWORD *)(v8 + 20);
  }
  *(_QWORD *)(v8 + 24) = v16;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 20) = v15 | 0x4000;
  *(_QWORD *)v8 = off_1E344FA20;
  v17 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v17)
    *v17 += 2;
  *(_QWORD *)(v8 + 72) = v17;
  v18 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v18)
    *v18 += 2;
  *(_QWORD *)(v8 + 80) = v18;
  v19 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(v8 + 88) = v19;
  v20 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(v8 + 96) = v20;
  v21 = *((_QWORD *)a2 + 5);
  if (v21)
    ++*(_DWORD *)(v21 + 8);
  *(_QWORD *)(v8 + 104) = v21;
  *a4 = v8;
  return result;
}

uint64_t WebCore::StorageEvent::initStorageEvent(uint64_t this, const WTF::AtomString *a2, int a3, int a4, const WTF::String *a5, const WTF::String *a6, const WTF::String *a7, const WTF::String *a8, WebCore::Storage *a9)
{
  _QWORD *v13;
  WTF::StringImpl *v14;
  _DWORD *v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  _DWORD *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  bmalloc::api *v23;
  void *v24;

  if ((*(_BYTE *)(this + 21) & 0x30) != 0)
    return this;
  v13 = (_QWORD *)this;
  WebCore::Event::initEvent(this, a2, a3, a4);
  v15 = *(_DWORD **)a5;
  if (*(_QWORD *)a5)
    *v15 += 2;
  v16 = (WTF::StringImpl *)v13[9];
  v13[9] = v15;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = *(_DWORD **)a6;
  if (*(_QWORD *)a6)
    *v17 += 2;
  v18 = (WTF::StringImpl *)v13[10];
  v13[10] = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(_DWORD **)a7;
  if (*(_QWORD *)a7)
    *v19 += 2;
  v20 = (WTF::StringImpl *)v13[11];
  v13[11] = v19;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v14);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(_DWORD **)a8;
  if (*(_QWORD *)a8)
    *v21 += 2;
  v22 = (WTF::StringImpl *)v13[12];
  v13[12] = v21;
  if (!v22)
  {
LABEL_22:
    if (!a9)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (*(_DWORD *)v22 != 2)
  {
    *(_DWORD *)v22 -= 2;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v22, v14);
  if (a9)
LABEL_23:
    ++*((_DWORD *)a9 + 2);
LABEL_24:
  this = v13[13];
  v13[13] = a9;
  if (this)
  {
    if (*(_DWORD *)(this + 8) == 1)
    {
      WebCore::Storage::~Storage((WebCore::Storage *)this);
      return bmalloc::api::isoDeallocate(v23, v24);
    }
    else
    {
      --*(_DWORD *)(this + 8);
    }
  }
  return this;
}

uint64_t WebCore::StorageEventDispatcher::dispatchSessionStorageEvents(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, WebCore::InspectorDOMStorageAgent *this, _DWORD **a6, uint64_t a7)
{
  _QWORD *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v16;
  unint64_t StatusReg;
  WebCore::LocalDOMWindow *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  WebCore *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  WebCore::LocalDOMWindow *v37;
  uint64_t result;
  uint64_t v39;
  WebCore::StorageMap *v40;
  unsigned int v41;
  uint64_t v45;
  _DWORD *v46;
  _QWORD v47[2];
  unsigned int v48;
  WTF *v49;
  uint64_t v50;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 80) + 8) + 160);
    if (v39)
      WebCore::InspectorDOMStorageAgent::didDispatchDOMStorageEvent(v39, a1, a2, a3, 0, this);
  }
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = off_1E344FBA0;
  v12[1] = a4;
  v45 = (uint64_t)v12;
  v49 = 0;
  v50 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v13 = off_1E344FB68;
  v13[1] = &v45;
  v13[2] = a7;
  v13[3] = this;
  v13[4] = &v49;
  v47[0] = v13;
  WebCore::LocalDOMWindow::forEachWindowInterestedInStorageEvents(v47);
  (*(void (**)(_QWORD *))(*v13 + 8))(v13);
  v15 = v49;
  if (HIDWORD(v50))
  {
    v16 = 8 * HIDWORD(v50);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    do
    {
      v18 = *(WebCore::LocalDOMWindow **)v15;
      v19 = *(_QWORD *)(*(_QWORD *)v15 + 72);
      if (v19 && (v20 = *(_QWORD *)(v19 + 8)) != 0)
      {
        if (*(_BYTE *)(v20 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x19657CFA0);
        }
        v21 = 0;
        v22 = v20 - 288;
        *(_DWORD *)(v20 - 264) += 2;
      }
      else
      {
        v22 = 0;
        v21 = 1;
      }
      WebCore::LocalDOMWindow::sessionStorage(v18, v14, (uint64_t)v47);
      v24 = v48;
      if (!v48)
      {
        v25 = *(_QWORD *)(StatusReg + 736);
        if (!v25 || (v26 = *(_QWORD *)(v25 + 96)) == 0)
          v26 = WebCore::threadGlobalDataSlow(v23);
        v27 = *(_QWORD *)(v26 + 40);
        if (!v27)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v26);
          v27 = *(_QWORD *)(v26 + 40);
        }
        if (v48)
        {
          v40 = (WebCore::StorageMap *)std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::StorageMap::StorageMap(v40, v41);
        }
        v28 = v47[0];
        v29 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v29);
        *(_QWORD *)(v29 + 8) = 0;
        *(_DWORD *)(v29 + 16) = 1;
        *(_DWORD *)(v29 + 20) = *(_DWORD *)(v29 + 20) & 0xFFC00000 | 0x2D8200 | (*(_QWORD *)(v27 + 2000) != 0);
        v31 = *(_DWORD **)(v27 + 2000);
        if (v31)
          *v31 += 2;
        *(_QWORD *)(v29 + 24) = v31;
        *(_QWORD *)(v29 + 32) = 0;
        *(_QWORD *)(v29 + 40) = 0;
        *(_QWORD *)(v29 + 48) = 0;
        *(_QWORD *)(v29 + 56) = v30;
        *(_QWORD *)(v29 + 64) = 0;
        *(_QWORD *)v29 = off_1E344FA20;
        v32 = (_DWORD *)*a1;
        if (*a1)
          *v32 += 2;
        *(_QWORD *)(v29 + 72) = v32;
        v33 = (_DWORD *)*a2;
        if (*a2)
          *v33 += 2;
        *(_QWORD *)(v29 + 80) = v33;
        v34 = (_DWORD *)*a3;
        if (*a3)
          *v34 += 2;
        *(_QWORD *)(v29 + 88) = v34;
        v35 = *a6;
        if (*a6)
          *v35 += 2;
        *(_QWORD *)(v29 + 96) = v35;
        if (v28)
          ++*(_DWORD *)(v28 + 8);
        *(_QWORD *)(v29 + 104) = v28;
        v46 = (_DWORD *)v29;
        WebCore::Document::queueTaskToDispatchEventOnWindow((WebCore::Document *)v22, 0, (uint64_t *)&v46);
        if (v46)
        {
          if (v46[4] == 1)
            (*(void (**)(void))(*(_QWORD *)v46 + 8))();
          else
            --v46[4];
        }
        v24 = v48;
      }
      if (v24 != 0xFFFFFFFFLL)
        off_1E344FB80[v24](&v46, v47);
      if ((v21 & 1) == 0)
      {
        if (*(_DWORD *)(v22 + 24) == 2)
        {
          if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v22, v14);
        }
        else
        {
          *(_DWORD *)(v22 + 24) -= 2;
        }
      }
      v15 = (WTF *)((char *)v15 + 8);
      v16 -= 8;
    }
    while (v16);
    v15 = v49;
    if (HIDWORD(v50))
    {
      v36 = 8 * HIDWORD(v50);
      do
      {
        v37 = *(WebCore::LocalDOMWindow **)v15;
        *(_QWORD *)v15 = 0;
        if (v37)
        {
          if (*((_DWORD *)v37 + 6) == 1)
            (*(void (**)(WebCore::LocalDOMWindow *))(*(_QWORD *)v37 + 72))(v37);
          else
            --*((_DWORD *)v37 + 6);
        }
        v15 = (WTF *)((char *)v15 + 8);
        v36 -= 8;
      }
      while (v36);
      v15 = v49;
    }
  }
  if (v15)
  {
    v49 = 0;
    LODWORD(v50) = 0;
    WTF::fastFree(v15, v14);
  }
  result = v45;
  v45 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::StorageMap::length(WebCore::StorageMap *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (v1)
    return *(unsigned int *)(v1 - 12);
  else
    return 0;
}

_QWORD *WebCore::StorageMap::key@<X0>(WebCore::StorageMap *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v5 = *(_QWORD *)this;
  v6 = *(_QWORD *)this;
  v9 = *(_QWORD *)(v6 + 8);
  result = (_QWORD *)(v6 + 8);
  v8 = v9;
  if (v9 && *(_DWORD *)(v8 - 12) > a2)
  {
    v12 = *(_DWORD *)(v5 + 32);
    if (v12 != a2)
    {
      if (v12 <= a2)
        goto LABEL_9;
      *(_DWORD *)(v5 + 32) = 0;
      result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)result);
      v13 = *(_QWORD *)this;
      *(_QWORD *)(v13 + 16) = result;
      *(_QWORD *)(v13 + 24) = v14;
      while (1)
      {
        v5 = *(_QWORD *)this;
        v12 = *(_DWORD *)(*(_QWORD *)this + 32);
LABEL_9:
        if (v12 >= a2)
          break;
        *(_DWORD *)(v5 + 32) = v12 + 1;
        v16 = *(_QWORD **)(v5 + 16);
        v15 = *(_QWORD **)(v5 + 24);
        do
        {
          v16 += 2;
          *(_QWORD *)(v5 + 16) = v16;
        }
        while (v16 != v15 && (unint64_t)(*v16 + 1) <= 1);
      }
    }
    v10 = **(_DWORD ***)(v5 + 16);
    if (v10)
      *v10 += 2;
  }
  else
  {
    v10 = 0;
  }
  *a3 = v10;
  return result;
}

uint64_t *WebCore::StorageMap::Impl::copy(WebCore::StorageMap::Impl *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t *result;

  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 32) = 0xFFFFFFFFLL;
  *(_QWORD *)this = v4;
  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=((uint64_t *)(v4 + 8), (WTF::StringImpl ***)(a2 + 8));
  *(_DWORD *)(v4 + 36) = *(_DWORD *)(a2 + 36);
  return result;
}

uint64_t WebCore::StorageMap::setItemIgnoringQuota(WebCore::StorageMap *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  int v4;
  WTF::StringImpl *v5;
  uint64_t result;
  BOOL v7;
  WTF::StringImpl *v8;

  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = -1;
  v8 = 0;
  WebCore::StorageMap::setItem(this, a2, a3, &v8, &v7);
  result = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      result = WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  *((_DWORD *)this + 2) = v4;
  return result;
}

WTF::StringImpl **WebCore::StorageMap::removeItem(WebCore::StorageMap *this, WTF::StringImpl **a2, WTF::String *a3)
{
  unsigned int v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl **result;
  WTF::StringImpl **v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  WTF::String::operator=((uint64_t *)a3, MEMORY[0x1E0CBF6F0]);
  v6 = *(_DWORD *)(*(_QWORD *)this + 36);
  result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(*(_QWORD *)this + 8), a2, v7);
  v9 = result;
  v10 = *(WTF::StringImpl ***)(*(_QWORD *)this + 8);
  if (v10)
    v10 += 2 * *((unsigned int *)v10 - 1);
  if (v10 != result)
  {
    WTF::String::operator=((uint64_t *)a3, result + 1);
    v11 = *v9;
    if (*v9)
      LODWORD(v11) = *((_DWORD *)v11 + 1) << ((*((_DWORD *)v11 + 4) & 4) == 0);
    v12 = v6 - (_DWORD)v11;
    if (v6 < v11)
      v12 = 0;
    v13 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
      LODWORD(v13) = *(_DWORD *)(v13 + 4) << ((*(_DWORD *)(v13 + 16) & 4) == 0);
    v14 = v12 - v13;
    if (v12 < v13)
      v14 = 0;
    v15 = v6 >= v11;
    if (v15)
      v16 = v14;
    else
      v16 = 0;
    v17 = v12 >= v13 && v15;
    v18 = *(_QWORD *)this;
    if (**(_DWORD **)this == 1)
    {
      result = (WTF::StringImpl **)WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)(v18 + 8), v9);
    }
    else
    {
      WebCore::StorageMap::Impl::copy((WebCore::StorageMap::Impl *)&v27, v18);
      v21 = v27;
      v22 = *(WTF **)this;
      *(_QWORD *)this = v27;
      if (v22)
      {
        WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v22, v19);
        v21 = *(_QWORD *)this;
      }
      result = WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((uint64_t *)(v21 + 8), a2, v20);
    }
    if (v17)
    {
      v23 = *(_QWORD *)this;
      *(_DWORD *)(v23 + 36) = v16;
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
      {
        v26 = *(unsigned int *)(v24 - 4);
        v25 = v24 + 16 * v26;
      }
      else
      {
        v25 = 0;
        v26 = 0;
      }
      *(_QWORD *)(v23 + 16) = v25;
      *(_QWORD *)(v23 + 24) = v24 + 16 * v26;
      *(_DWORD *)(*(_QWORD *)this + 32) = -1;
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **v2;

  if (*a1)
  {
    v2 = (WTF::StringImpl **)(*a1 + 16 * *(unsigned int *)(*a1 - 4));
    if (v2 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v2 = 0;
  }
  if (v2 != a2)
    return (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(a1, a2);
  return a1;
}

WTF::StringImpl **WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **result;
  uint64_t v5;

  result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, a2, a3);
  if (*a1)
  {
    v5 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if ((WTF::StringImpl **)v5 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v5 = 0;
  }
  if ((WTF::StringImpl **)v5 != result)
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(a1, result);
  return result;
}

WTF *WebCore::StorageMap::clear(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = this;
  v3 = *(_QWORD *)this;
  v4 = *(WTF::StringImpl ***)(*(_QWORD *)this + 8);
  if (**(_DWORD **)this < 2u)
  {
    if (v4)
      goto LABEL_7;
LABEL_20:
    v11 = 0;
    v12 = 0;
    v13 = 0;
    *(_DWORD *)(v3 + 36) = 0;
LABEL_23:
    *(_QWORD *)(v3 + 16) = v12;
    *(_QWORD *)(v3 + 24) = v11 + 16 * v13;
    *(_DWORD *)(*(_QWORD *)v2 + 32) = -1;
    return this;
  }
  if (!v4)
    goto LABEL_20;
  if (!*((_DWORD *)v4 - 3))
  {
LABEL_7:
    *(_QWORD *)(v3 + 8) = 0;
    v7 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v7)
    {
      v8 = v4;
      do
      {
        v9 = *v8;
        if (*v8 != (WTF::StringImpl *)-1)
        {
          v10 = v8[1];
          v8[1] = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
            {
              WTF::StringImpl::destroy(v10, a2);
              v9 = *v8;
            }
            else
            {
              *(_DWORD *)v10 -= 2;
            }
          }
          *v8 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    this = (WTF *)WTF::fastFree((WTF *)(v4 - 2), a2);
    v3 = *(_QWORD *)v2;
    v11 = *(_QWORD *)(*(_QWORD *)v2 + 8);
    *(_DWORD *)(*(_QWORD *)v2 + 36) = 0;
    if (v11)
    {
      v13 = *(unsigned int *)(v11 - 4);
      v12 = v11 + 16 * v13;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    goto LABEL_23;
  }
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 32) = 0xFFFFFFFFLL;
  this = *(WTF **)v2;
  *(_QWORD *)v2 = v6;
  if (this)
    return WTF::RefCounted<WebCore::StorageMap::Impl>::deref(this, v5);
  return this;
}

uint64_t WebCore::StorageMap::contains(WebCore::StorageMap *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t result;
  int i;
  int v10;

  v3 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (!v3)
    return 0;
  v5 = *(_DWORD *)(v3 - 8);
  v6 = *((_DWORD *)*a2 + 4);
  if (v6 < 0x100)
    v7 = WTF::StringImpl::hashSlowCase(*a2);
  else
    v7 = v6 >> 8;
  for (i = 0; ; v7 = i + v10)
  {
    v10 = v7 & v5;
    result = *(_QWORD *)(v3 + 16 * (v7 & v5));
    if (result != -1)
    {
      if (!result)
        return result;
      if ((WTF::equal((WTF *)result, *a2, a3) & 1) != 0)
        break;
    }
    ++i;
  }
  return 1;
}

void WebCore::StorageNamespaceProvider::~StorageNamespaceProvider(WebCore::StorageNamespaceProvider *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E344FAE8;
  WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable((uint64_t *)this + 3, a2);
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
}

uint64_t WebCore::StorageNamespaceProvider::localStorageNamespace(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  _DWORD *v7;

  result = a1[2];
  if (!result)
  {
    (*(void (**)(_DWORD **__return_ptr, _QWORD *, uint64_t, uint64_t))(*a1 + 32))(&v7, a1, 5242880, a2);
    v4 = v7;
    v7 = 0;
    v5 = (_DWORD *)a1[2];
    a1[2] = v4;
    if (v5)
    {
      v6 = v5[2] - 1;
      if (v5[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        v5 = v7;
        v7 = 0;
        if (!v5)
          return a1[2];
        v6 = v5[2] - 1;
        if (v5[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          return a1[2];
        }
      }
      v5[2] = v6;
    }
    return a1[2];
  }
  return result;
}

uint64_t WebCore::StorageNamespaceProvider::setSessionIDForTesting(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    if (result != a2)
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a2);
  }
  v5 = *(unsigned int **)(a1 + 24);
  if (!v5)
  {
    v10 = 0;
    LODWORD(v6) = 0;
    goto LABEL_17;
  }
  v6 = *(v5 - 1);
  v7 = &v5[10 * v6];
  if (!*(v5 - 3))
  {
    v10 = &v5[10 * v6];
LABEL_17:
    v7 = &v5[10 * v6];
    if (!v5)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (!(_DWORD)v6)
  {
    v10 = *(unsigned int **)(a1 + 24);
LABEL_18:
    v5 += 10 * *(v5 - 1);
    goto LABEL_19;
  }
  v8 = 40 * v6;
  while (1)
  {
    result = WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v5);
    if ((result & 1) == 0)
    {
      v9 = v5[6];
      if ((_DWORD)v9 == -1)
        goto LABEL_33;
      v16 = &v15;
      result = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v9])(&v16, v5);
      if (!(_DWORD)result)
        break;
    }
    v5 += 10;
    v8 -= 40;
    if (!v8)
    {
      v5 = v7;
      break;
    }
  }
  v10 = v5;
  v5 = *(unsigned int **)(a1 + 24);
  if (v5)
    goto LABEL_18;
LABEL_19:
  if (v5 != v10)
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v10 + 4) + 40))(*((_QWORD *)v10 + 4));
      if (result != a2)
        result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a2);
      v11 = v10 + 10;
      v10 = v7;
      if (v11 != v7)
        break;
LABEL_30:
      if (v10 == v5)
        return result;
    }
    v10 = v11;
    while (1)
    {
      v12 = v10[6];
      if ((_DWORD)v12 == -1)
        break;
      v16 = &v15;
      result = ((uint64_t (*)(char **, unsigned int *))off_1E344FC78[v12])(&v16, v10);
      if ((result & 1) == 0)
      {
        v13 = v10[6];
        if ((_DWORD)v13 == -1)
          break;
        v16 = &v15;
        result = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v13])(&v16, v10);
        if (!(_DWORD)result)
          goto LABEL_30;
      }
      v10 += 10;
      if (v10 == v7)
      {
        v10 = v7;
        goto LABEL_30;
      }
    }
LABEL_33:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StorageUtilities::encodeSecurityOriginForFileName(v14);
  }
  return result;
}

WTF *WebCore::StorageUtilities::encodeSecurityOriginForFileName(uint64_t a1, WebCore::SecurityOriginData *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  char *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  void *v9;
  WTF *result;
  unsigned int *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  WTF *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v16[0] = a1;
  PAL::CryptoDigest::create(2, (uint64_t *)&v15);
  WebCore::SecurityOriginData::toString(a2, &v13);
  WTF::String::utf8();
  v4 = v13;
  v13 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = v15;
  if (v14)
  {
    v6 = (char *)v14 + 16;
    v7 = *((_QWORD *)v14 + 1);
  }
  else
  {
    LODWORD(v7) = 0;
    v6 = 0;
  }
  PAL::CryptoDigest::addBytes((uint64_t)v15, v6, v7);
  PAL::CryptoDigest::addBytes((uint64_t)v5, v16, 8u);
  PAL::CryptoDigest::computeHash((uint64_t)v5, (unsigned __int8 **)&v13);
  v8 = v13;
  WTF::base64EncodeToString();
  if (v8)
    WTF::fastFree(v8, v9);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      result = (WTF *)WTF::fastFree(result, v9);
      if (!v5)
        return result;
      goto LABEL_12;
    }
    --*(_DWORD *)result;
  }
  if (!v5)
    return result;
LABEL_12:
  v11 = *(unsigned int **)v5;
  *(_QWORD *)v5 = 0;
  if (v11)
  {
    v12 = v11[4];
    if ((_DWORD)v12 != -1)
      ((void (*)(WTF::StringImpl **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrI15CC_SHA1state_stNS_14default_deleteIS7_EEEENS6_I17CC_SHA256state_stNS8_ISB_EEEENS6_I17CC_SHA512state_stNS8_ISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix[v12])(&v13, v11 + 2);
    v11[4] = -1;
    WTF::fastFree((WTF *)v11, v9);
  }
  return (WTF *)WTF::fastFree(v5, v9);
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(uint64_t *a1, WTF::StringImpl ***a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v10, a2);
  v4 = *a1;
  *a1 = v10;
  v10 = v4;
  if (v4)
  {
    v6 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v6)
    {
      v7 = (WTF::StringImpl **)v4;
      do
      {
        v8 = *v7;
        if (*v7 != (WTF::StringImpl *)-1)
        {
          v9 = v7[1];
          v7[1] = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
            {
              WTF::StringImpl::destroy(v9, v3);
              v8 = *v7;
            }
            else
            {
              *(_DWORD *)v9 -= 2;
            }
          }
          *v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v3);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return a1;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::RefPtr<WebCore::StorageNamespace,WTF::RawPtrTraits<WebCore::StorageNamespace>,WTF::DefaultRefDerefTraits<WebCore::StorageNamespace>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF *v10;
  char v11;
  char *v12;
  char v13;

  v3 = *a1;
  if (!*a1)
    return (uint64_t)a1;
  v4 = *(unsigned int *)(v3 - 4);
  if (!(_DWORD)v4)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v3 - 16), a2);
    return (uint64_t)a1;
  }
  v5 = *a1;
  while (1)
  {
    v6 = *(unsigned int *)(v5 + 24);
    if ((_DWORD)v6 == -1)
      break;
    v12 = &v11;
    if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData23isHashTableDeletedValueEvEUlRKNS9_5TupleEE_JZNKS9_23isHashTableDeletedValueEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v6])(&v12, v5) & 1) == 0)
    {
      v7 = *(_DWORD **)(v5 + 32);
      *(_QWORD *)(v5 + 32) = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
        else
          --v7[2];
      }
      v8 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_17[v8])(&v13, v5);
      *(_DWORD *)(v5 + 24) = -1;
    }
    v5 += 40;
    if (!--v4)
      goto LABEL_15;
  }
  v10 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::RefCounted<WebCore::StorageMap::Impl>::deref(v10);
}

WTF *WTF::RefCounted<WebCore::StorageMap::Impl>::deref(WTF *this, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = (WTF::StringImpl **)*((_QWORD *)this + 1);
        do
        {
          v6 = *v5;
          if (*v5 != (WTF::StringImpl *)-1)
          {
            v7 = v5[1];
            v5[1] = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
              {
                WTF::StringImpl::destroy(v7, a2);
                v6 = *v5;
              }
              else
              {
                *(_DWORD *)v7 -= 2;
              }
            }
            *v5 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2)
                WTF::StringImpl::destroy(v6, a2);
              else
                *(_DWORD *)v6 -= 2;
            }
          }
          v5 += 2;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCoreL21dispatchStorageEventsILNS2_11StorageTypeE0EEEvRKNS_6StringES7_S7_RKNS2_14SecurityOriginES7_RKNS_8FunctionIFbRNS2_7StorageEEEERKNSB_IFbRNS2_4PageEEEEEUlRT_E_vJRNS2_14LocalDOMWindowEEE4callESS_(uint64_t result, WebCore::LocalDOMWindow *this)
{
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  const WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v4 = result;
    result = WebCore::LocalDOMWindow::page(this);
    if (result)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v4 + 8) + 16))(**(_QWORD **)(v4 + 8), result);
      if ((_DWORD)result)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v4 + 16) + 16))(**(_QWORD **)(v4 + 16), v2);
        if ((result & 1) == 0)
        {
          v6 = *(const WTF::StringImpl ***)(v4 + 24);
          v7 = *((_QWORD *)this + 9);
          if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
          {
            if (*(_BYTE *)(v8 + 178))
              goto LABEL_27;
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v8 - 96), v5);
            v10 = v9;
          }
          else
          {
            v10 = 0;
          }
          result = WebCore::SecurityOrigin::equal(v6, v10);
          if (!(_DWORD)result)
            return result;
          v11 = *(_QWORD *)(v4 + 32);
          v12 = *(unsigned int *)(v11 + 12);
          if ((_DWORD)v12 != *(_DWORD *)(v11 + 8))
          {
            v19 = (_QWORD *)(*(_QWORD *)v11 + 8 * v12);
LABEL_25:
            ++*((_DWORD *)this + 6);
            *v19 = this;
            *(_DWORD *)(v11 + 12) = v12 + 1;
            return result;
          }
          v13 = v12 + (v12 >> 2);
          if (v13 >= 0x10)
            v14 = v13 + 1;
          else
            v14 = 16;
          if (v14 <= v12 + 1)
            v15 = v12 + 1;
          else
            v15 = v14;
          if (!(v15 >> 29))
          {
            v16 = *(void **)v11;
            v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
            *(_DWORD *)(v11 + 8) = v15;
            *(_QWORD *)v11 = v17;
            result = (uint64_t)memcpy(v17, v16, 8 * v12);
            if (v16)
            {
              if (*(void **)v11 == v16)
              {
                *(_QWORD *)v11 = 0;
                *(_DWORD *)(v11 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v16, v18);
            }
            v12 = *(unsigned int *)(v11 + 12);
            v19 = (_QWORD *)(*(_QWORD *)v11 + 8 * v12);
            goto LABEL_25;
          }
LABEL_27:
          __break(0xC471u);
          JUMPOUT(0x19657DE54);
        }
      }
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::StorageEventDispatcher::dispatchSessionStorageEvents(WTF::String const&,WTF::String const&,WTF::String const&,WebCore::Page &,WebCore::SecurityOrigin const&,WTF::String const&,WTF::Function<BOOL ()(WebCore::Storage &)> const&)::$_0,BOOL,WebCore::Page &>::call(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == a2;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::StorageEventDispatcher::dispatchLocalStorageEvents(WTF::String const&,WTF::String const&,WTF::String const&,WebCore::PageGroup *,WebCore::SecurityOrigin const&,WTF::String const&,WTF::Function<BOOL ()(WebCore::Storage &)> const&)::$_0,void,WebCore::Page &>::call(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  WebCore::InspectorDOMStorageAgent *v6;

  v3 = (_QWORD *)result[1];
  v4 = (_QWORD *)result[2];
  v5 = (_QWORD *)result[3];
  v6 = (WebCore::InspectorDOMStorageAgent *)result[4];
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    result = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 8) + 160);
    if (result)
      return WebCore::InspectorDOMStorageAgent::didDispatchDOMStorageEvent((int)result, v3, v4, v5, 1, v6);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN7WebCoreL21dispatchStorageEventsILNS2_11StorageTypeE1EEEvRKNS_6StringES7_S7_RKNS2_14SecurityOriginES7_RKNS_8FunctionIFbRNS2_7StorageEEEERKNSB_IFbRNS2_4PageEEEEEUlRT_E_vJRNS2_14LocalDOMWindowEEE4callESS_(uint64_t result, WebCore::LocalDOMWindow *this)
{
  uint64_t v2;
  uint64_t v4;
  WTF::StringImpl *v5;
  const WTF::StringImpl **v6;
  uint64_t v7;
  uint64_t v8;
  const WTF::StringImpl **v9;
  const WTF::StringImpl **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;

  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    v4 = result;
    result = WebCore::LocalDOMWindow::page(this);
    if (result)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v4 + 8) + 16))(**(_QWORD **)(v4 + 8), result);
      if ((_DWORD)result)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v4 + 16) + 16))(**(_QWORD **)(v4 + 16), v2);
        if ((result & 1) == 0)
        {
          v6 = *(const WTF::StringImpl ***)(v4 + 24);
          v7 = *((_QWORD *)this + 9);
          if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0)
          {
            if (*(_BYTE *)(v8 + 178))
              goto LABEL_27;
            WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v8 - 96), v5);
            v10 = v9;
          }
          else
          {
            v10 = 0;
          }
          result = WebCore::SecurityOrigin::equal(v6, v10);
          if (!(_DWORD)result)
            return result;
          v11 = *(_QWORD *)(v4 + 32);
          v12 = *(unsigned int *)(v11 + 12);
          if ((_DWORD)v12 != *(_DWORD *)(v11 + 8))
          {
            v19 = (_QWORD *)(*(_QWORD *)v11 + 8 * v12);
LABEL_25:
            ++*((_DWORD *)this + 6);
            *v19 = this;
            *(_DWORD *)(v11 + 12) = v12 + 1;
            return result;
          }
          v13 = v12 + (v12 >> 2);
          if (v13 >= 0x10)
            v14 = v13 + 1;
          else
            v14 = 16;
          if (v14 <= v12 + 1)
            v15 = v12 + 1;
          else
            v15 = v14;
          if (!(v15 >> 29))
          {
            v16 = *(void **)v11;
            v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
            *(_DWORD *)(v11 + 8) = v15;
            *(_QWORD *)v11 = v17;
            result = (uint64_t)memcpy(v17, v16, 8 * v12);
            if (v16)
            {
              if (*(void **)v11 == v16)
              {
                *(_QWORD *)v11 = 0;
                *(_DWORD *)(v11 + 8) = 0;
              }
              result = WTF::fastFree((WTF *)v16, v18);
            }
            v12 = *(unsigned int *)(v11 + 12);
            v19 = (_QWORD *)(*(_QWORD *)v11 + 8 * v12);
            goto LABEL_25;
          }
LABEL_27:
          __break(0xC471u);
          JUMPOUT(0x19657E034);
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageEventDispatcher::dispatchLocalStorageEvents(WTF::String const&,WTF::String const&,WTF::String const&,WebCore::PageGroup *,WebCore::SecurityOrigin const&,WTF::String const&,WTF::Function<BOOL ()(WebCore::Storage &)> const&)::$_1,BOOL,WebCore::Page &>::call()
{
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StorageEventDispatcher::dispatchLocalStorageEvents(WTF::String const&,WTF::String const&,WTF::String const&,WebCore::PageGroup *,WebCore::SecurityOrigin const&,WTF::String const&,WTF::Function<BOOL ()(WebCore::Storage &)> const&)::$_2,BOOL,WebCore::Page &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  ++*((_DWORD *)v2 + 2);
  if (!v3)
    return 0;
  if (!*(_QWORD *)(v3 + 8))
    return 0;
  v4 = *v2;
  if (!v4)
    return 0;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = (~(v3 << 32) + v3) ^ ((unint64_t)(~(v3 << 32) + v3) >> 22);
  v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
  v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
  v9 = v5 & ((v8 >> 31) ^ v8);
  for (i = 1; ; ++i)
  {
    v11 = *(_QWORD *)(v4 + 8 * v9);
    if (v11 != -1)
    {
      if (!v11)
        return 0;
      if (v11 == v3)
        break;
    }
    v9 = (v9 + i) & v5;
  }
  return 1;
}

void WebCore::Style::AnchorPositionEvaluator::resolveAnchorValue(WebCore::Style::AnchorPositionEvaluator *this@<X0>, const WebCore::CSSAnchorValue *a2@<X1>, const WebCore::Style::BuilderState *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int i;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  WTF *v38;
  _QWORD *v39;
  WTF *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t *v55;

  v5 = *((_QWORD *)a2 + 6);
  if (!v5)
    goto LABEL_73;
  v6 = *((_QWORD *)a2 + 16);
  if (!v6)
    goto LABEL_73;
  v8 = *(_DWORD *)(v6 + 8);
  v9 = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v6 + 8) = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebCore::Element,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(v6, a2);
  if ((*(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 8) = v5;
    *(_BYTE *)(v10 + 32) = 0;
    v11 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = v11 & 0xFFFF000000000000 | v10;
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v53 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v53)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v53));
        v54 = *(WTF **)(v12 + 16);
        if (v54)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          WTF::fastFree(v54, a2);
        }
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  v15 = *(_QWORD *)(v5 + 16);
  v16 = v15 & 0xFFFFFFFFFFFFLL;
  do
    v17 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v17 + 1, (unsigned int *)v16));
  do
    v18 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v18 + 1, (unsigned int *)v16));
  if (v16)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v16);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v16));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v16);
      v51 = *(unsigned int *)((v15 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v51)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v15 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v51));
      v52 = *(WTF **)((v15 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v52)
      {
        *(_QWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v52, a2);
      }
      WTF::fastFree((WTF *)(v15 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v21 = *(_QWORD *)v6;
  if (*(_QWORD *)v6
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v6, 8u, 0), (v21 = *(_QWORD *)v6) != 0))
  {
    v22 = 0;
    v23 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    v23 = 0;
    v22 = 1;
  }
  v24 = 0;
  v25 = (v16 + ~(v15 << 32)) ^ ((unint64_t)(v16 + ~(v15 << 32)) >> 22);
  v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
  v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
  v28 = (v27 >> 31) ^ v27;
  for (i = 1; ; ++i)
  {
    v30 = v28 & v23;
    v31 = (uint64_t *)(v21 + 16 * (v28 & v23));
    v32 = *v31;
    if (*v31 != -1)
      break;
    v24 = (uint64_t *)(v21 + 16 * v30);
LABEL_24:
    v28 = i + v30;
  }
  if (!v32)
  {
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      --*(_DWORD *)(*(_QWORD *)v6 - 16);
      *v24 = v16;
      v31 = v24;
    }
    else
    {
      *v31 = v16;
    }
    v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    v39[1] = 0;
    v39[2] = 0;
    *v39 = 0;
    v40 = (WTF *)v31[1];
    v31[1] = (uint64_t)v39;
    if (v40)
      std::default_delete<WebCore::Style::AnchorPositionedElementState>::operator()[abi:sn180100]((_DWORD)v31 + 8, v40);
    v41 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      v42 = *(_DWORD *)(v41 - 12) + 1;
    else
      v42 = 1;
    *(_DWORD *)(v41 - 12) = v42;
    v43 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      v44 = *(_DWORD *)(v43 - 12);
    else
      v44 = 0;
    v45 = (*(_DWORD *)(v43 - 16) + v44);
    v46 = *(unsigned int *)(v43 - 4);
    if (v46 > 0x400)
    {
      if (v46 <= 2 * v45)
        goto LABEL_50;
    }
    else if (3 * v46 <= 4 * v45)
    {
      if (!(_DWORD)v46)
      {
        v47 = 8;
LABEL_53:
        v31 = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v6, v47, v31);
        v43 = *(_QWORD *)v6;
        if (*(_QWORD *)v6)
          v46 = *(unsigned int *)(v43 - 4);
        else
          v46 = 0;
        goto LABEL_57;
      }
LABEL_50:
      v47 = (_DWORD)v46 << (6 * *(_DWORD *)(v43 - 12) >= (2 * v46));
      goto LABEL_53;
    }
LABEL_57:
    v34 = (uint64_t *)(v43 + 16 * v46);
    goto LABEL_58;
  }
  if (v32 != v16)
    goto LABEL_24;
  if ((v22 & 1) != 0)
    v33 = 0;
  else
    v33 = *(unsigned int *)(v21 - 4);
  v34 = (uint64_t *)(v21 + 16 * v33);
  if (v16)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)v16);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)v16));
    if (!v36)
    {
      v55 = v34;
      atomic_store(1u, (unsigned int *)v16);
      v37 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v37)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v37));
      v38 = *(WTF **)(v16 + 16);
      if (v38)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        WTF::fastFree(v38, a2);
      }
      WTF::fastFree((WTF *)v16, a2);
      v34 = v55;
    }
  }
LABEL_58:
  v48 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    v48 += 16 * *(unsigned int *)(v48 - 4);
  if (v31 != (uint64_t *)v48)
  {
    while (!*(_QWORD *)(*v31 + 8))
    {
      v49 = v31 + 2;
      v31 = v34;
      if (v49 != v34)
      {
        v31 = v49;
        while ((unint64_t)(*v31 + 1) <= 1)
        {
          v31 += 2;
          if (v31 == v34)
          {
            v31 = v34;
            break;
          }
        }
      }
      if (v31 == (uint64_t *)v48)
      {
        v31 = (uint64_t *)v48;
        break;
      }
    }
  }
  v50 = v31[1];
  if (!*(_BYTE *)(v50 + 16))
    WebCore::CSSAnchorValue::collectAnchorNames(this, (uint64_t *)(v50 + 8), a3);
  if (*(_BYTE *)(v50 + 17))
    *(_BYTE *)(v50 + 18) = 1;
LABEL_73:
  *(_DWORD *)a4 = 0;
  *(_WORD *)(a4 + 4) = 4;
  *(_BYTE *)(a4 + 6) = 0;
}

unsigned __int8 *WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(_QWORD *a1, const WebCore::Element *a2, uint64_t *a3, int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  unsigned __int8 ***v20;
  __n128 v21;
  uint64_t v22;
  unsigned __int8 **v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  const WebCore::CSSSelector **v29;
  const WebCore::CSSSelector **v30;
  const WebCore::CSSSelector *v31;
  uint64_t v32;
  const WebCore::Element *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  const WebCore::CSSSelector **v42;
  const WebCore::CSSSelector *v43;
  const WebCore::CSSSelector **v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  const WebCore::CSSSelector *v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t i;
  uint64_t v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  const WebCore::CSSSelector *v79;
  int v80;
  int v81;
  uint64_t v83;
  int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int v88;
  const WebCore::CSSSelector **v89;
  const WebCore::CSSSelector *v90;
  const WebCore::CSSSelector **v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int v99;
  WTF *v100;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  uint64_t v104;
  WTF::StringImpl **v105;
  WTF::StringImpl *v106;
  void *v108;
  unsigned __int8 *result;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  WTF *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  _QWORD *v119;
  const WebCore::Element *v120;
  int v121;
  char v122;
  WTF::StringImpl *v123;
  WTF *v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned __int8 *v128;
  _BYTE v129[4];
  int v130;
  WTF::StringImpl *v131;
  char v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char v137;
  uint64_t v138;
  WTF *v139;
  uint64_t v140;
  _DWORD v141[33];
  char v142;
  _BYTE v143[10];

  v7 = a1;
  v8 = *(_QWORD **)(*a1 + 40);
  if (*v8)
    v9 = (*(_WORD *)(*v8 + 28) & 0x80) == 0;
  else
    v9 = 1;
  if (v9)
    v110 = v8[1] + 1328;
  else
    v110 = *v8 + 216;
  v10 = *(_QWORD *)v110;
  if (!*(_QWORD *)(*(_QWORD *)v110 + 32))
  {
    if (*(_QWORD *)(v10 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v10);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v10);
    v111 = *(_QWORD *)(v10 + 32);
    if (*(_DWORD *)(v111 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v111 + 32));
    if (*(_BYTE *)(v111 + 242)
      || *(_BYTE *)(v111 + 243)
      || *(_BYTE *)(v111 + 244)
      || *(_BYTE *)(v111 + 245)
      || *(_BYTE *)(v111 + 246)
      || *(_BYTE *)(v111 + 247)
      || *(_BYTE *)(v111 + 248))
    {
      *(_BYTE *)(v10 + 236) = 1;
    }
  }
  v11 = *(_QWORD *)(v10 + 32);
  v128 = 0;
  v12 = *((_QWORD *)a2 + 4);
  if (v12)
  {
    if ((*(_WORD *)(v12 + 28) & 8) != 0)
      v13 = *((_QWORD *)a2 + 4);
    else
      v13 = 0;
  }
  else
  {
    v13 = 0;
  }
  v116 = *v7;
  if (v13 == *v7)
  {
    v14 = (uint64_t)a2;
    do
      v14 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
    while (v14 && (*(_WORD *)(v14 + 28) & 8) == 0);
    if (a4)
      v15 = 0;
    else
      v15 = *(_QWORD *)(v7[1] + 16) == v14;
    v16 = v15;
    v117 = v16;
  }
  else
  {
    v117 = 0;
  }
  WebCore::Style::makePseudoClassInvalidationKeys((WTF::StringImpl *)0x22, (uint64_t)a2, (uint64_t)&v124);
  v18 = v124;
  if (v126)
  {
    v115 = v13;
    v113 = v11 + 32;
    v112 = (char *)v124 + 16 * v126;
    v119 = v7;
    v120 = a2;
    while (1)
    {
      v121 = *(_DWORD *)v18;
      v122 = *((_BYTE *)v18 + 4);
      v114 = v18;
      v19 = (WTF::StringImpl *)*((_QWORD *)v18 + 1);
      if (v19)
        *(_DWORD *)v19 += 2;
      v123 = v19;
      v20 = WebCore::Style::ScopeRuleSets::hasPseudoClassInvalidationRuleSets(v113, (uint64_t)&v121);
      if (v20)
      {
        v22 = *((unsigned int *)v20 + 3);
        if ((_DWORD)v22)
          break;
      }
LABEL_144:
      v103 = v123;
      v123 = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 2)
          WTF::StringImpl::destroy(v103, v17);
        else
          *(_DWORD *)v103 -= 2;
      }
      v18 = (WTF *)((char *)v114 + 16);
      if ((char *)v114 + 16 == v112)
      {
        v18 = v124;
        if (v126)
        {
          v104 = 16 * v126;
          v105 = (WTF::StringImpl **)((char *)v124 + 8);
          do
          {
            v106 = *v105;
            *v105 = 0;
            if (v106)
            {
              if (*(_DWORD *)v106 == 2)
                WTF::StringImpl::destroy(v106, v17);
              else
                *(_DWORD *)v106 -= 2;
            }
            v105 += 2;
            v104 -= 16;
          }
          while (v104);
          v18 = v124;
        }
        goto LABEL_158;
      }
    }
    v23 = *v20;
    v24 = (uint64_t)&(*v20)[4 * v22];
    v118 = v24;
LABEL_31:
    v25 = *((unsigned __int8 *)v23 + 24);
    if (v25 > 0x10)
      goto LABEL_138;
    v26 = 1 << v25;
    if ((v26 & 0x1A800) == 0 && ((v26 & 0x1400) == 0 || v115 != v116))
      goto LABEL_138;
    v27 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
    v143[0] = *(_BYTE *)(v27 + 3384) != 2;
    v143[1] = *(_BYTE *)(v27 + 3358) & 1;
    v129[0] = 2;
    v130 = 0;
    v131 = 0;
    v132 = 0;
    v133 = 0;
    v137 = 0;
    v134 = 0;
    v135 = 0;
    v138 = 0;
    v139 = (WTF *)v141;
    v140 = 8;
    v141[32] = 0;
    v142 = 0;
    v136 = 1;
    v28 = *((unsigned int *)v23 + 5);
    if (!(_DWORD)v28)
    {
      v81 = 0;
      goto LABEL_128;
    }
    v29 = (const WebCore::CSSSelector **)v23[1];
    v30 = &v29[v28];
    if ((v117 & 1) != 0)
    {
      while (1)
      {
        v31 = *v29;
        v32 = v7[1];
        v33 = *(const WebCore::Element **)(v32 + 16);
        if (!v33)
        {
          v33 = *(const WebCore::Element **)(v32 + 24);
          if (!v33)
            break;
        }
        v34 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v143, *v29, v33, (WebCore::SelectorChecker::CheckingContext *)v129, v21);
        v35 = *a3;
        if (!v34)
          goto LABEL_52;
        if (v35
          || (v36 = WTF::fastZeroedMalloc((WTF *)0x50),
              *a3 = v36 + 16,
              *(_DWORD *)(v36 + 12) = 8,
              *(_DWORD *)(*a3 - 8) = 7,
              *(_DWORD *)(*a3 - 16) = 0,
              *(_DWORD *)(*a3 - 12) = 0,
              (v35 = *a3) != 0))
        {
          v37 = *(_DWORD *)(v35 - 8);
        }
        else
        {
          v37 = 0;
        }
        v38 = ((unint64_t)v31 + ~((_QWORD)v31 << 32)) ^ (((unint64_t)v31 + ~((_QWORD)v31 << 32)) >> 22);
        v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
        v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
        v41 = v37 & ((v40 >> 31) ^ v40);
        v42 = (const WebCore::CSSSelector **)(v35 + 8 * v41);
        v43 = *v42;
        if (*v42)
        {
          v44 = 0;
          v45 = 1;
          while (v43 != v31)
          {
            if (v43 == (const WebCore::CSSSelector *)-1)
              v44 = v42;
            v41 = (v41 + v45) & v37;
            v42 = (const WebCore::CSSSelector **)(v35 + 8 * v41);
            v43 = *v42;
            ++v45;
            if (!*v42)
            {
              if (v44)
              {
                *v44 = 0;
                --*(_DWORD *)(*a3 - 16);
                v42 = v44;
              }
              goto LABEL_49;
            }
          }
          goto LABEL_82;
        }
LABEL_49:
        *v42 = v31;
        v46 = *a3;
        if (*a3)
          v47 = *(_DWORD *)(v46 - 12) + 1;
        else
          v47 = 1;
        *(_DWORD *)(v46 - 12) = v47;
        v55 = *a3;
        if (*a3)
          v56 = *(_DWORD *)(v55 - 12);
        else
          v56 = 0;
        v57 = (*(_DWORD *)(v55 - 16) + v56);
        v58 = *(unsigned int *)(v55 - 4);
        if (v58 >= 0x401)
        {
          if (v58 <= 2 * v57)
            goto LABEL_67;
        }
        else if (3 * v58 <= 4 * v57)
        {
          if ((_DWORD)v58)
          {
LABEL_67:
            v59 = *(_DWORD *)(v55 - 12);
            v60 = (_DWORD)v58 << (6 * v59 >= (2 * v58));
          }
          else
          {
            v59 = *(_DWORD *)(v55 - 12);
            v60 = 8;
          }
          v61 = WTF::fastZeroedMalloc((WTF *)(8 * v60 + 16));
          *a3 = v61 + 16;
          *(_DWORD *)(v61 + 12) = v60;
          *(_DWORD *)(*a3 - 8) = v60 - 1;
          *(_DWORD *)(*a3 - 16) = 0;
          *(_DWORD *)(*a3 - 12) = v59;
          v7 = v119;
          a2 = v120;
          if (!(_DWORD)v58)
            goto LABEL_81;
          for (i = 0; i != v58; ++i)
          {
            v63 = *(_QWORD *)(v55 + 8 * i);
            if ((unint64_t)(v63 + 1) >= 2)
            {
              v64 = *a3;
              if (*a3)
                v65 = *(_DWORD *)(v64 - 8);
              else
                v65 = 0;
              v66 = (~(v63 << 32) + v63) ^ ((unint64_t)(~(v63 << 32) + v63) >> 22);
              v67 = 9 * ((v66 + ~(v66 << 13)) ^ ((v66 + ~(v66 << 13)) >> 8));
              v68 = (v67 ^ (v67 >> 15)) + ~((v67 ^ (v67 >> 15)) << 27);
              v69 = v65 & ((v68 >> 31) ^ v68);
              v70 = 1;
              do
              {
                v71 = v69;
                v72 = *(_QWORD *)(v64 + 8 * v69);
                v69 = (v69 + v70++) & v65;
              }
              while (v72);
              *(_QWORD *)(v64 + 8 * v71) = v63;
            }
          }
          if (v55)
LABEL_81:
            WTF::fastFree((WTF *)(v55 - 16), v17);
        }
LABEL_82:
        if (++v29 == v30)
          goto LABEL_94;
      }
      v35 = *a3;
LABEL_52:
      if (!v35)
        goto LABEL_58;
      v48 = *(_DWORD *)(v35 - 8);
      v49 = ((unint64_t)v31 + ~((_QWORD)v31 << 32)) ^ (((unint64_t)v31 + ~((_QWORD)v31 << 32)) >> 22);
      v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
      v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
      v52 = v48 & ((v51 >> 31) ^ v51);
      v53 = *(const WebCore::CSSSelector **)(v35 + 8 * v52);
      if (v53 != v31)
      {
        v54 = 1;
        while (v53)
        {
          v52 = (v52 + v54) & v48;
          v53 = *(const WebCore::CSSSelector **)(v35 + 8 * v52);
          ++v54;
          if (v53 == v31)
            goto LABEL_82;
        }
LABEL_58:
        if ((WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v143, v31, a2, (WebCore::SelectorChecker::CheckingContext *)v129, v21) & 1) != 0)goto LABEL_102;
        goto LABEL_82;
      }
      goto LABEL_82;
    }
    while (1)
    {
      v31 = *v29;
      v73 = *a3;
      if (*a3)
      {
        v74 = *(_DWORD *)(v73 - 8);
        v75 = ((unint64_t)v31 + ~((_QWORD)v31 << 32)) ^ (((unint64_t)v31 + ~((_QWORD)v31 << 32)) >> 22);
        v76 = 9 * ((v75 + ~(v75 << 13)) ^ ((v75 + ~(v75 << 13)) >> 8));
        v77 = (v76 ^ (v76 >> 15)) + ~((v76 ^ (v76 >> 15)) << 27);
        v78 = v74 & ((v77 >> 31) ^ v77);
        v79 = *(const WebCore::CSSSelector **)(v73 + 8 * v78);
        if (v79 == v31)
          goto LABEL_93;
        v80 = 1;
        while (v79)
        {
          v78 = (v78 + v80) & v74;
          v79 = *(const WebCore::CSSSelector **)(v73 + 8 * v78);
          ++v80;
          if (v79 == v31)
            goto LABEL_93;
        }
      }
      if (WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v143, *v29, a2, (WebCore::SelectorChecker::CheckingContext *)v129, v21))
      {
LABEL_102:
        v83 = *a3;
        if (*a3
          || (WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(a3, 8u), (v83 = *a3) != 0))
        {
          v84 = *(_DWORD *)(v83 - 8);
        }
        else
        {
          v84 = 0;
        }
        v24 = v118;
        v85 = ((unint64_t)v31 + ~((_QWORD)v31 << 32)) ^ (((unint64_t)v31 + ~((_QWORD)v31 << 32)) >> 22);
        v86 = 9 * ((v85 + ~(v85 << 13)) ^ ((v85 + ~(v85 << 13)) >> 8));
        v87 = (v86 ^ (v86 >> 15)) + ~((v86 ^ (v86 >> 15)) << 27);
        v88 = v84 & ((v87 >> 31) ^ v87);
        v89 = (const WebCore::CSSSelector **)(v83 + 8 * v88);
        v90 = *v89;
        if (*v89)
        {
          v91 = 0;
          v92 = 1;
          do
          {
            if (v90 == v31)
            {
              v81 = 1;
              goto LABEL_128;
            }
            if (v90 == (const WebCore::CSSSelector *)-1)
              v91 = v89;
            v88 = (v88 + v92) & v84;
            v89 = (const WebCore::CSSSelector **)(v83 + 8 * v88);
            v90 = *v89;
            ++v92;
          }
          while (*v89);
          if (v91)
          {
            *v91 = 0;
            --*(_DWORD *)(*a3 - 16);
            v89 = v91;
          }
        }
        *v89 = v31;
        v93 = *a3;
        if (*a3)
          v94 = *(_DWORD *)(v93 - 12) + 1;
        else
          v94 = 1;
        *(_DWORD *)(v93 - 12) = v94;
        v95 = *a3;
        if (*a3)
          v96 = *(_DWORD *)(v95 - 12);
        else
          v96 = 0;
        v97 = (*(_DWORD *)(v95 - 16) + v96);
        v98 = *(unsigned int *)(v95 - 4);
        if (v98 > 0x400)
        {
          if (v98 <= 2 * v97)
          {
LABEL_123:
            v99 = (_DWORD)v98 << (6 * *(_DWORD *)(v95 - 12) >= (2 * v98));
            goto LABEL_126;
          }
        }
        else if (3 * v98 <= 4 * v97)
        {
          if ((_DWORD)v98)
            goto LABEL_123;
          v99 = 8;
LABEL_126:
          WTF::HashTable<WebCore::IDBServer::UniqueIDBDatabase *,WebCore::IDBServer::UniqueIDBDatabase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>,WTF::HashTraits<WebCore::IDBServer::UniqueIDBDatabase *>>::rehash(a3, v99);
        }
        v81 = 1;
LABEL_128:
        v100 = v139;
        if (v141 != (_DWORD *)v139 && v139 != 0)
        {
          v139 = 0;
          LODWORD(v140) = 0;
          WTF::fastFree(v100, v17);
        }
        v102 = v131;
        v131 = 0;
        if (!v102)
        {
LABEL_136:
          if (!v81)
            goto LABEL_138;
LABEL_137:
          WebCore::Style::Invalidator::addToMatchElementRuleSets((uint64_t *)&v128, (unsigned __int8 *)v23);
          goto LABEL_138;
        }
        if (*(_DWORD *)v102 != 2)
        {
          *(_DWORD *)v102 -= 2;
          goto LABEL_136;
        }
        WTF::StringImpl::destroy(v102, v17);
        if (v81)
          goto LABEL_137;
LABEL_138:
        v23 += 4;
        if (v23 == (unsigned __int8 **)v24)
          goto LABEL_144;
        goto LABEL_31;
      }
LABEL_93:
      if (++v29 == v30)
      {
LABEL_94:
        v81 = 0;
        v24 = v118;
        goto LABEL_128;
      }
    }
  }
LABEL_158:
  if (&v127 != (uint64_t *)v18 && v18 != 0)
  {
    v124 = 0;
    v125 = 0;
    WTF::fastFree(v18, v17);
  }
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets((uint64_t)a2, &v128);
  result = v128;
  if (v128)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v128, v108);
  return result;
}

void WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(WebCore::Style::Invalidator **this, uint64_t a2, const WebCore::Style::RuleSet *a3)
{
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  WebCore::Element *v7;
  WebCore::Style::Invalidator *v8;
  int v9;
  BOOL v10;
  uint64_t v13;
  const WebCore::Element *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  WebCore::Element *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = (_QWORD *)*((_QWORD *)*this + 5);
  if (*v4)
    v5 = (*(_WORD *)(*v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (v5)
    v28 = v4[1] + 1328;
  else
    v28 = *v4 + 216;
  v6 = *(_QWORD *)v28;
  if (!*(_QWORD *)(*(_QWORD *)v28 + 32))
  {
    if (*(_QWORD *)(v6 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v6);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v6);
    v35 = *(_QWORD *)(v6 + 32);
    if (*(_DWORD *)(v35 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v35 + 32));
    if (*(_BYTE *)(v35 + 242)
      || *(_BYTE *)(v35 + 243)
      || *(_BYTE *)(v35 + 244)
      || *(_BYTE *)(v35 + 245)
      || *(_BYTE *)(v35 + 246)
      || *(_BYTE *)(v35 + 247)
      || *(_BYTE *)(v35 + 248))
    {
      *(_BYTE *)(v6 + 236) = 1;
    }
  }
  v7 = *(WebCore::Element **)(*(_QWORD *)(v6 + 32) + 272);
  if (v7)
    WebCore::Style::Invalidator::invalidateWithScopeBreakingHasPseudoClassRuleSet(*this, v7, a3);
  v39 = 0;
  v8 = this[1];
  v9 = *(unsigned __int8 *)v8;
  if (*(_BYTE *)v8)
    v10 = v9 == 2;
  else
    v10 = 1;
  if (!v10 && v9 != 7)
  {
    v21 = (_QWORD *)*((_QWORD *)*this + 5);
    if (*v21)
      v22 = (*(_WORD *)(*v21 + 28) & 0x80) == 0;
    else
      v22 = 1;
    if (v22)
      v36 = v21[1] + 1328;
    else
      v36 = *v21 + 216;
    v23 = *(_QWORD *)v36;
    if (!*(_QWORD *)(*(_QWORD *)v36 + 32))
    {
      if (*(_QWORD *)(v23 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v23);
      else
        WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v23);
      v37 = *(_QWORD *)(v23 + 32);
      if (*(_DWORD *)(v37 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      {
        v38 = *(_QWORD *)(v23 + 32);
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v37 + 32));
        v37 = v38;
      }
      if (*(_BYTE *)(v37 + 242)
        || *(_BYTE *)(v37 + 243)
        || *(_BYTE *)(v37 + 244)
        || *(_BYTE *)(v37 + 245)
        || *(_BYTE *)(v37 + 246)
        || *(_BYTE *)(v37 + 247)
        || *(_BYTE *)(v37 + 248))
      {
        *(_BYTE *)(v23 + 236) = 1;
      }
    }
    v24 = *(_QWORD *)(v23 + 32);
    if (*(_DWORD *)(v24 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v24 + 32));
    if (*(_BYTE *)(v24 + 247))
      v25 = 0;
    else
      v25 = *(_BYTE *)(v24 + 248) == 0;
    v27 = !v25 || *(_BYTE *)(v24 + 243) != 0 || *(_BYTE *)(v24 + 245) != 0;
    v8 = this[1];
    v29 = *((_QWORD *)v8 + 2);
    if (v29)
    {
      do
        v29 = *(_QWORD *)(v29 + 56);
      while (v29 && (*(_WORD *)(v29 + 28) & 8) == 0);
    }
    else
    {
      v30 = *((_QWORD *)*this + 10);
      if (v30)
      {
        v29 = 0;
        while ((*(_WORD *)(v30 + 28) & 8) == 0)
        {
          v30 = *(_QWORD *)(v30 + 56);
          if (!v30)
            goto LABEL_89;
        }
        v29 = v30;
      }
      else
      {
        v29 = 0;
      }
    }
LABEL_89:
    if (v29 != *((_QWORD *)v8 + 3))
    {
      if (v27)
      {
        do
        {
          WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, (const WebCore::Element *)v29, &v39, 0);
          v31 = *(_QWORD *)(v29 + 80);
          if (v31)
          {
            while ((*(_WORD *)(v31 + 28) & 8) == 0)
            {
              v31 = *(_QWORD *)(v31 + 56);
              if (!v31)
                goto LABEL_94;
            }
            do
            {
LABEL_105:
              WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, (const WebCore::Element *)v31, &v39, 0);
              v32 = *(_QWORD *)(v31 + 80);
              if (!v32)
              {
                if (v31 == v29)
                  goto LABEL_94;
                while (1)
                {
                  v32 = *(_QWORD *)(v31 + 56);
                  if (v32)
                    break;
                  v31 = *(_QWORD *)(v31 + 32);
                  if (v31)
                    v33 = v31 == v29;
                  else
                    v33 = 1;
                  if (v33)
                    goto LABEL_94;
                }
              }
              v31 = v32;
            }
            while ((*(_WORD *)(v32 + 28) & 8) != 0);
            while (v32 != v29)
            {
              while (1)
              {
                v31 = *(_QWORD *)(v32 + 56);
                if (v31)
                  break;
                v32 = *(_QWORD *)(v32 + 32);
                if (v32)
                  v34 = v32 == v29;
                else
                  v34 = 1;
                if (v34)
                  goto LABEL_94;
              }
              v32 = *(_QWORD *)(v32 + 56);
              if ((*(_WORD *)(v31 + 28) & 8) != 0)
                goto LABEL_105;
            }
          }
          do
LABEL_94:
            v29 = *(_QWORD *)(v29 + 56);
          while (v29 && (*(_WORD *)(v29 + 28) & 8) == 0);
          v8 = this[1];
        }
        while (v29 != *((_QWORD *)v8 + 3));
      }
      else
      {
        do
        {
          WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, (const WebCore::Element *)v29, &v39, 0);
          do
            v29 = *(_QWORD *)(v29 + 56);
          while (v29 && (*(_WORD *)(v29 + 28) & 8) == 0);
          v8 = this[1];
        }
        while (v29 != *((_QWORD *)v8 + 3));
      }
    }
    v9 = *(unsigned __int8 *)v8;
  }
  if (v9 == 5 || v9 == 3)
  {
    WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, *this, &v39, 0);
    v8 = this[1];
  }
  v13 = *((_QWORD *)*this + 8);
  if ((v13 & 0x20000000000000) != 0)
  {
    if (*(_BYTE *)v8 != 8)
    {
      v17 = *((_QWORD *)v8 + 2);
      if (v17)
      {
LABEL_34:
        WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, (const WebCore::Element *)v17, &v39, 1);
        while (1)
        {
          v17 = *(_QWORD *)(v17 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v17)
            break;
          if ((*(_WORD *)(v17 + 28) & 8) != 0)
            goto LABEL_34;
        }
        v8 = this[1];
      }
      v18 = *((_QWORD *)v8 + 3);
      if (v18)
      {
LABEL_40:
        WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, (const WebCore::Element *)v18, &v39, 1);
        while (1)
        {
          v18 = *(_QWORD *)(v18 + 56);
          if (!v18)
            break;
          if ((*(_WORD *)(v18 + 28) & 8) != 0)
            goto LABEL_40;
        }
      }
    }
  }
  else
  {
    if ((v13 & 0x40000000000000) != 0)
    {
      v14 = (const WebCore::Element *)*((_QWORD *)v8 + 3);
      if (v14)
      {
        v15 = *(unsigned __int8 *)v8;
        if (!*(_BYTE *)v8 || v15 <= 8 && ((1 << v15) & 0x184) != 0)
        {
          v16 = *((_QWORD *)v8 + 3);
          while (1)
          {
            v16 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
            if (!v16)
              break;
            if ((*(_WORD *)(v16 + 28) & 8) != 0)
              goto LABEL_45;
          }
          WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, v14, &v39, 1);
          v8 = this[1];
        }
      }
    }
LABEL_45:
    v7 = (WebCore::Element *)*((_QWORD *)v8 + 2);
    if (v7)
    {
      if ((*((_BYTE *)*this + 70) & 0x80) != 0)
      {
        v19 = *(unsigned __int8 *)v8;
        if (!v19 || v19 <= 8 && ((1 << v19) & 0x184) != 0)
        {
          v20 = v7;
          while (1)
          {
            v20 = (WebCore::Element *)*((_QWORD *)v20 + 7);
            if (!v20)
              break;
            if ((*((_WORD *)v20 + 14) & 8) != 0)
              goto LABEL_53;
          }
          WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, v7, &v39, 1);
        }
      }
    }
  }
LABEL_53:
  if (v39)
    WTF::fastFree((WTF *)(v39 - 16), v7);
}

void WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(WebCore::Style::Invalidator **this, uint64_t a2, const WebCore::Style::RuleSet *a3)
{
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  WebCore::Element *v7;
  WebCore::Style::Invalidator *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  WebCore::Style::Invalidator *v19;
  uint64_t v20;
  const WebCore::Element *v21;
  unsigned int v22;
  unsigned int v23;
  WebCore::Element *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = (_QWORD *)*((_QWORD *)*this + 5);
  if (*v4)
    v5 = (*(_WORD *)(*v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (v5)
    v30 = v4[1] + 1328;
  else
    v30 = *v4 + 216;
  v6 = *(_QWORD *)v30;
  if (!*(_QWORD *)(*(_QWORD *)v30 + 32))
  {
    if (*(_QWORD *)(v6 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v6);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v6);
    v34 = *(_QWORD *)(v6 + 32);
    if (*(_DWORD *)(v34 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v34 + 32));
    if (*(_BYTE *)(v34 + 242)
      || *(_BYTE *)(v34 + 243)
      || *(_BYTE *)(v34 + 244)
      || *(_BYTE *)(v34 + 245)
      || *(_BYTE *)(v34 + 246)
      || *(_BYTE *)(v34 + 247)
      || *(_BYTE *)(v34 + 248))
    {
      *(_BYTE *)(v6 + 236) = 1;
    }
  }
  v7 = *(WebCore::Element **)(*(_QWORD *)(v6 + 32) + 272);
  if (v7)
    WebCore::Style::Invalidator::invalidateWithScopeBreakingHasPseudoClassRuleSet(*this, v7, a3);
  v41 = 0;
  v8 = this[1];
  v9 = *(unsigned __int8 *)v8;
  if (!*(_BYTE *)v8 || ((v27 = v9 > 8, v28 = (1 << v9) & 0x184, !v27) ? (v29 = v28 == 0) : (v29 = 1), !v29))
  {
    v10 = *((_QWORD *)v8 + 2);
    if (v10)
    {
      while (1)
      {
        v10 = *(_QWORD *)(v10 + 56);
        if (!v10)
          break;
        if ((*(_WORD *)(v10 + 28) & 8) != 0)
          goto LABEL_14;
      }
    }
    else
    {
      v10 = *((_QWORD *)*this + 10);
      if (v10)
      {
        while ((*(_WORD *)(v10 + 28) & 8) == 0)
        {
          v10 = *(_QWORD *)(v10 + 56);
          if (!v10)
            goto LABEL_41;
        }
LABEL_14:
        if (v10 != *((_QWORD *)v8 + 3))
        {
          WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, (const WebCore::Element *)v10, &v41, 0);
          v11 = (_QWORD *)*((_QWORD *)*this + 5);
          if (*v11)
            v12 = (*(_WORD *)(*v11 + 28) & 0x80) == 0;
          else
            v12 = 1;
          if (v12)
            v35 = v11[1] + 1328;
          else
            v35 = *v11 + 216;
          v13 = *(_QWORD *)v35;
          if (!*(_QWORD *)(*(_QWORD *)v35 + 32))
          {
            if (*(_QWORD *)(v13 + 24))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v13);
            else
              WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v13);
            v39 = *(_QWORD *)(v13 + 32);
            if (*(_DWORD *)(v39 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
            {
              v40 = *(_QWORD *)(v13 + 32);
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v39 + 32));
              v39 = v40;
            }
            if (*(_BYTE *)(v39 + 242)
              || *(_BYTE *)(v39 + 243)
              || *(_BYTE *)(v39 + 244)
              || *(_BYTE *)(v39 + 245)
              || *(_BYTE *)(v39 + 246)
              || *(_BYTE *)(v39 + 247)
              || *(_BYTE *)(v39 + 248))
            {
              *(_BYTE *)(v13 + 236) = 1;
            }
          }
          v14 = *(_QWORD *)(v13 + 32);
          if (*(_DWORD *)(v14 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
            WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v14 + 32));
          v15 = !*(_BYTE *)(v14 + 247) && *(_BYTE *)(v14 + 248) == 0;
          v16 = v15 && *(_BYTE *)(v14 + 243) == 0;
          if (!v16 || *(_BYTE *)(v14 + 245) != 0)
          {
            v18 = *(_QWORD *)(v10 + 80);
            if (v18)
            {
              while ((*(_WORD *)(v18 + 28) & 8) == 0)
              {
                v18 = *(_QWORD *)(v18 + 56);
                if (!v18)
                  goto LABEL_41;
              }
              do
              {
LABEL_104:
                WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, (const WebCore::Element *)v18, &v41, 0);
                v36 = *(_QWORD *)(v18 + 80);
                if (!v36)
                {
                  if (v18 == v10)
                    goto LABEL_41;
                  while (1)
                  {
                    v36 = *(_QWORD *)(v18 + 56);
                    if (v36)
                      break;
                    v18 = *(_QWORD *)(v18 + 32);
                    if (v18)
                      v37 = v18 == v10;
                    else
                      v37 = 1;
                    if (v37)
                      goto LABEL_41;
                  }
                }
                v18 = v36;
              }
              while ((*(_WORD *)(v36 + 28) & 8) != 0);
              while (v36 != v10)
              {
                while (1)
                {
                  v18 = *(_QWORD *)(v36 + 56);
                  if (v18)
                    break;
                  v36 = *(_QWORD *)(v36 + 32);
                  if (v36)
                    v38 = v36 == v10;
                  else
                    v38 = 1;
                  if (v38)
                    goto LABEL_41;
                }
                v36 = *(_QWORD *)(v36 + 56);
                if ((*(_WORD *)(v18 + 28) & 8) != 0)
                  goto LABEL_104;
              }
            }
          }
        }
      }
    }
  }
LABEL_41:
  v19 = this[1];
  if (*(_BYTE *)v19 == 2 && *((_BYTE *)this + 18))
  {
    WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, *this, &v41, 0);
    v19 = this[1];
  }
  v20 = *((_QWORD *)*this + 8);
  if ((v20 & 0x20000000000000) != 0)
  {
    if (*(_BYTE *)v19 != 8)
    {
      v25 = *((_QWORD *)v19 + 2);
      if (v25)
      {
LABEL_59:
        WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, (const WebCore::Element *)v25, &v41, 1);
        while (1)
        {
          v25 = *(_QWORD *)(v25 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v25)
            break;
          if ((*(_WORD *)(v25 + 28) & 8) != 0)
            goto LABEL_59;
        }
        v19 = this[1];
      }
      v26 = *((_QWORD *)v19 + 3);
      if (v26)
      {
LABEL_65:
        WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, (const WebCore::Element *)v26, &v41, 1);
        while (1)
        {
          v26 = *(_QWORD *)(v26 + 56);
          if (!v26)
            break;
          if ((*(_WORD *)(v26 + 28) & 8) != 0)
            goto LABEL_65;
        }
      }
    }
  }
  else
  {
    if ((v20 & 0x40000000000000) != 0)
    {
      v21 = (const WebCore::Element *)*((_QWORD *)v19 + 3);
      if (v21)
      {
        v22 = *(unsigned __int8 *)v19;
        if (*(_BYTE *)v19)
        {
          v27 = v22 > 8;
          v31 = (1 << v22) & 0x184;
          if (v27 || v31 == 0)
          {
            v33 = *((_QWORD *)v19 + 3);
            while (1)
            {
              v33 = *(_QWORD *)(v33 + 48) & 0xFFFFFFFFFFFFLL;
              if (!v33)
                break;
              if ((*(_WORD *)(v33 + 28) & 8) != 0)
                goto LABEL_48;
            }
            WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, v21, &v41, 1);
            v19 = this[1];
          }
        }
      }
    }
LABEL_48:
    v7 = (WebCore::Element *)*((_QWORD *)v19 + 2);
    if (v7)
    {
      if ((*((_BYTE *)*this + 70) & 0x80) != 0)
      {
        v23 = *(unsigned __int8 *)v19;
        if (v23)
        {
          if (v23 > 8 || ((1 << v23) & 0x184) == 0)
          {
            v24 = v7;
            while (1)
            {
              v24 = (WebCore::Element *)*((_QWORD *)v24 + 7);
              if (!v24)
                break;
              if ((*((_WORD *)v24 + 14) & 8) != 0)
                goto LABEL_119;
            }
            WebCore::Style::ChildChangeInvalidation::invalidateForChangedElement(this, v7, &v41, 1);
          }
        }
      }
    }
  }
LABEL_119:
  if (v41)
    WTF::fastFree((WTF *)(v41 - 16), v7);
}

WTF::MonotonicTime *WebCore::Style::invalidateForLastChildState(WTF::MonotonicTime *this, WebCore::Element *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return WebCore::Element::invalidateStyleForSubtreeInternal(this);
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    v2 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
  if ((_DWORD)a2 == (*(_BYTE *)(v2 + 101) & 2) >> 1)
    return WebCore::Element::invalidateStyleForSubtreeInternal(this);
  return this;
}

WTF::MonotonicTime *WebCore::Style::invalidateForFirstChildState(WTF::MonotonicTime *this, WebCore::Element *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return WebCore::Element::invalidateStyleForSubtreeInternal(this);
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    v2 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
  if (((*(unsigned __int8 *)(v2 + 101) ^ a2) & 1) == 0)
    return WebCore::Element::invalidateStyleForSubtreeInternal(this);
  return this;
}

WTF *WebCore::Style::ClassChangeInvalidation::computeInvalidation(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t i;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  WTF *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  int m;
  unsigned int v31;
  WTF::StringImpl *v32;
  int v34;
  int v35;
  WTF::StringImpl *v36;
  WTF *v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (***v41)();
  uint64_t v42;
  int v43;
  uint64_t (**v44)();
  WTF *v45;
  WTF *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  _QWORD *v61;
  BOOL v62;
  _QWORD *v63;
  BOOL v64;
  uint64_t v65;
  void *v66;
  WTF *result;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL hasMatchingUserOrAuthorStyle;
  WTF *v78;
  WTF *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  int v82;
  int j;
  unsigned int v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v87;
  uint64_t v88;
  int v89;
  int k;
  unsigned int v91;
  WTF::StringImpl *v92;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL4 v98;
  WTF::StringImpl *v99;
  WTF *v100;
  WTF *v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  int v104;
  int n;
  unsigned int v106;
  WTF::StringImpl *v107;
  int v109;
  uint64_t v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  WebCore::Style::Scope **v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  WTF *v136;
  uint64_t v137;
  _BYTE v138[64];
  uint64_t v139;
  __int128 v140;

  v5 = *a2;
  if (*a2)
  {
    v6 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v6)
    {
      v8 = *a3;
      if (*a3)
      {
        v136 = (WTF *)v138;
        v137 = 4;
        v139 = 0x8000000000000000;
        if (v6 >= 0x40)
        {
          WTF::BitVector::resizeOutOfLine((WTF::BitVector *)&v139);
          v8 = *a3;
          if (!*a3)
            goto LABEL_21;
        }
        v9 = *(unsigned int *)(v8 + 12);
        if (!(_DWORD)v9)
          goto LABEL_21;
        v10 = (_QWORD *)(v8 + 16);
        v11 = v8 + 16 + 8 * v9;
        while (1)
        {
          v12 = 0;
          v13 = 0;
          v14 = *(unsigned int *)(*a2 + 12);
          v15 = *a2 + 16;
          do
          {
            while (1)
            {
              if (v14 == v12)
              {
                __break(0xC471u);
                goto LABEL_299;
              }
              if (*v10 != *(_QWORD *)(v15 + 8 * v12))
                break;
              v16 = (uint64_t *)(2 * v139 + 8);
              if (v139 < 0)
                v16 = &v139;
              v13 = 1;
              *(uint64_t *)((char *)v16 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
              v21 = v6 - 1 == v12++;
              if (v21)
                goto LABEL_20;
            }
            ++v12;
          }
          while (v6 != v12);
          if ((v13 & 1) == 0)
          {
            *(_QWORD *)&v140 = *v10;
            BYTE8(v140) = 0;
            if (HIDWORD(v137) == (_DWORD)v137)
            {
              WTF::Vector<WebCore::Style::ClassChange,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::ClassChange>((uint64_t)&v136, (unint64_t)&v140);
            }
            else
            {
              *((_OWORD *)v136 + HIDWORD(v137)) = v140;
              ++HIDWORD(v137);
            }
          }
LABEL_20:
          if (++v10 == (_QWORD *)v11)
          {
LABEL_21:
            for (i = 0; i != v6; ++i)
            {
              if (v139 < 0)
                v18 = &v139;
              else
                v18 = (uint64_t *)(2 * v139 + 8);
              if (((*(unint64_t *)((char *)v18 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
              {
                if (i >= *(unsigned int *)(*a2 + 12))
                {
                  __break(0xC471u);
                  JUMPOUT(0x1965804A0);
                }
                *(_QWORD *)&v140 = *(_QWORD *)(*a2 + 8 * i + 16);
                BYTE8(v140) = 1;
                if (HIDWORD(v137) == (_DWORD)v137)
                {
                  WTF::Vector<WebCore::Style::ClassChange,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::ClassChange>((uint64_t)&v136, (unint64_t)&v140);
                }
                else
                {
                  *((_OWORD *)v136 + HIDWORD(v137)) = v140;
                  ++HIDWORD(v137);
                }
              }
            }
            if ((v139 & 0x8000000000000000) == 0)
              WTF::fastFree((WTF *)(2 * v139), a2);
            goto LABEL_32;
          }
        }
      }
      v136 = (WTF *)v138;
      v137 = 4;
      if (v6 > 4)
      {
        if (v6 >> 28)
        {
          __break(0xC471u);
LABEL_299:
          JUMPOUT(0x196580428);
        }
        LODWORD(v137) = v6;
        v136 = (WTF *)WTF::fastMalloc((WTF *)(16 * v6));
        v132 = *a2;
        if (!*a2)
          goto LABEL_32;
        v133 = *(unsigned int *)(v132 + 12);
        if (!(_DWORD)v133)
          goto LABEL_32;
        v117 = (uint64_t *)(v132 + 16);
        v118 = (uint64_t)&v117[v133];
        v116 = HIDWORD(v137);
      }
      else
      {
        v116 = 0;
        v117 = (uint64_t *)(v5 + 16);
        v118 = v5 + 16 + 8 * v6;
      }
      do
      {
        v119 = *v117++;
        v120 = (_QWORD *)((char *)v136 + 16 * v116);
        *v120 = v119;
        v120[1] = 1;
        v116 = ++HIDWORD(v137);
      }
      while (v117 != (uint64_t *)v118);
      goto LABEL_32;
    }
  }
  v136 = (WTF *)v138;
  v137 = 4;
  v68 = *a3;
  if (!*a3)
    goto LABEL_32;
  v69 = *(unsigned int *)(v68 + 12);
  if (v69 < 5)
    goto LABEL_134;
  if (v69 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x196580678);
  }
  LODWORD(v137) = *(_DWORD *)(v68 + 12);
  v136 = (WTF *)WTF::fastMalloc((WTF *)(16 * v69));
  v68 = *a3;
  if (*a3)
  {
    v69 = *(unsigned int *)(v68 + 12);
LABEL_134:
    if ((_DWORD)v69)
    {
      v70 = (uint64_t *)(v68 + 16);
      v71 = HIDWORD(v137);
      v72 = 8 * v69;
      do
      {
        v73 = *v70++;
        v74 = (_QWORD *)((char *)v136 + 16 * v71);
        *v74 = v73;
        v74[1] = 0;
        v71 = ++HIDWORD(v137);
        v72 -= 8;
      }
      while (v72);
    }
  }
LABEL_32:
  v19 = *(_QWORD **)(a1 + 8);
  v20 = (_QWORD *)v19[5];
  if (*v20)
    v21 = (*(_WORD *)(*v20 + 28) & 0x80) == 0;
  else
    v21 = 1;
  if (v21)
    v114 = v20[1] + 1328;
  else
    v114 = *v20 + 216;
  v22 = *(_QWORD *)v114;
  if (!*(_QWORD *)(*(_QWORD *)v114 + 32))
  {
    if (*(_QWORD *)(v22 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v22);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v22);
    v122 = *(_QWORD *)(v22 + 32);
    if (*(_DWORD *)(v122 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v122 + 32), (WTF::StringImpl *)a2);
    if (*(_BYTE *)(v122 + 242)
      || *(_BYTE *)(v122 + 243)
      || *(_BYTE *)(v122 + 244)
      || *(_BYTE *)(v122 + 245)
      || *(_BYTE *)(v122 + 246)
      || *(_BYTE *)(v122 + 247)
      || *(_BYTE *)(v122 + 248))
    {
      *(_BYTE *)(v22 + 236) = 1;
    }
  }
  v23 = *(_QWORD *)(v22 + 32);
  if (*(_DWORD *)(v23 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v23 + 32), (WTF::StringImpl *)a2);
  if ((v19[9] & 0xFFFFFFFFFFFFLL) != 0)
  {
    v75 = *(_QWORD *)((v19[9] & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v75)
    {
      if ((*(_WORD *)(v75 + 28) & 0x80) != 0 && !*(_BYTE *)(v75 + 193))
      {
        v76 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v76 = off_1E344FD68;
        *(_QWORD *)&v140 = v76;
        hasMatchingUserOrAuthorStyle = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v23 + 32), &v140);
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        if (hasMatchingUserOrAuthorStyle
          || (*(unsigned int (**)(_QWORD *))(*v19 + 824))(v19)
          && (v127 = WTF::fastMalloc((WTF *)0x10),
              *(_QWORD *)v127 = off_1E344FD90,
              *(_QWORD *)&v140 = v127,
              v128 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v23 + 32), &v140),
              (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127),
              v128))
        {
          if (HIDWORD(v137))
          {
            v35 = 0;
            v24 = 0;
            v78 = v136;
            v79 = (WTF *)((char *)v136 + 16 * HIDWORD(v137));
            do
            {
              v80 = *(WTF::StringImpl **)v78;
              if (*(_QWORD *)v78)
                *(_DWORD *)v80 += 2;
              v81 = *(_QWORD *)(v23 + 152);
              if (v81)
              {
                v82 = 0;
                for (j = *((_DWORD *)v80 + 4) >> 8; ; j = v82 + v84)
                {
                  v84 = j & *(_DWORD *)(v81 - 8);
                  v85 = *(WTF::StringImpl **)(v81 + 16 * v84);
                  if (!v85)
                    break;
                  if (v85 != (WTF::StringImpl *)-1 && v85 == v80)
                  {
                    if (v80)
                    {
                      if (*(_DWORD *)v80 == 2)
                        WTF::StringImpl::destroy(v80, (WTF::StringImpl *)a2);
                      else
                        *(_DWORD *)v80 -= 2;
                    }
                    v35 = 1;
                    goto LABEL_158;
                  }
                  ++v82;
                }
              }
              if (v80)
              {
                if (*(_DWORD *)v80 == 2)
                  WTF::StringImpl::destroy(v80, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v80 -= 2;
              }
LABEL_158:
              v87 = *(WTF::StringImpl **)v78;
              if (*(_QWORD *)v78)
                *(_DWORD *)v87 += 2;
              v88 = *(_QWORD *)(v23 + 200);
              if (v88)
              {
                v89 = 0;
                for (k = *((_DWORD *)v87 + 4) >> 8; ; k = v89 + v91)
                {
                  v91 = k & *(_DWORD *)(v88 - 8);
                  v92 = *(WTF::StringImpl **)(v88 + 8 * v91);
                  if (!v92)
                    break;
                  if (v92 != (WTF::StringImpl *)-1 && v92 == v87)
                  {
                    v94 = 1;
                    goto LABEL_169;
                  }
                  ++v89;
                }
              }
              v94 = 0;
LABEL_169:
              if (v87)
              {
                if (*(_DWORD *)v87 == 2)
                  WTF::StringImpl::destroy(v87, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v87 -= 2;
              }
              if (v94)
                v24 = 1;
              v78 = (WTF *)((char *)v78 + 16);
            }
            while (v78 != v79);
            goto LABEL_64;
          }
LABEL_183:
          v35 = 0;
          v24 = 0;
          goto LABEL_64;
        }
      }
    }
  }
  if (!HIDWORD(v137))
    goto LABEL_183;
  v24 = 0;
  v25 = v136;
  v26 = (WTF *)((char *)v136 + 16 * HIDWORD(v137));
  do
  {
    v27 = *(WTF::StringImpl **)v25;
    if (*(_QWORD *)v25)
      *(_DWORD *)v27 += 2;
    v28 = *(_QWORD *)(v23 + 200);
    if (v28)
    {
      v29 = 0;
      for (m = *((_DWORD *)v27 + 4) >> 8; ; m = v29 + v31)
      {
        v31 = m & *(_DWORD *)(v28 - 8);
        v32 = *(WTF::StringImpl **)(v28 + 8 * v31);
        if (!v32)
          break;
        if (v32 != (WTF::StringImpl *)-1 && v32 == v27)
        {
          v34 = 1;
          goto LABEL_55;
        }
        ++v29;
      }
    }
    v34 = 0;
LABEL_55:
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (v34)
      v24 = 1;
    v25 = (WTF *)((char *)v25 + 16);
  }
  while (v25 != v26);
  v35 = 0;
LABEL_64:
  if ((v19[9] & 0xFFFFFFFFFFFFLL) != 0)
  {
    v95 = *(_QWORD *)((v19[9] & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v95)
    {
      v96 = WebCore::Style::Scope::resolver(*(WebCore::Style::Scope **)(v95 + 216));
      v97 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v97 = off_1E344FDB8;
      *(_QWORD *)&v140 = v97;
      v98 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v96 + 32), &v140);
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
      if (v98)
      {
        if (*(_DWORD *)(v96 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v96 + 32), v99);
        if (HIDWORD(v137))
        {
          v100 = v136;
          v101 = (WTF *)((char *)v136 + 16 * HIDWORD(v137));
          do
          {
            v102 = *(WTF::StringImpl **)v100;
            if (*(_QWORD *)v100)
              *(_DWORD *)v102 += 2;
            v103 = *(_QWORD *)(v96 + 200);
            if (v103)
            {
              v104 = 0;
              for (n = *((_DWORD *)v102 + 4) >> 8; ; n = v104 + v106)
              {
                v106 = n & *(_DWORD *)(v103 - 8);
                v107 = *(WTF::StringImpl **)(v103 + 8 * v106);
                if (!v107)
                  break;
                if (v107 != (WTF::StringImpl *)-1 && v107 == v102)
                {
                  v109 = 1;
                  goto LABEL_201;
                }
                ++v104;
              }
            }
            v109 = 0;
LABEL_201:
            if (v102)
            {
              if (*(_DWORD *)v102 == 2)
                WTF::StringImpl::destroy(v102, v99);
              else
                *(_DWORD *)v102 -= 2;
            }
            if (v109)
              v24 = 1;
            v100 = (WTF *)((char *)v100 + 16);
          }
          while (v100 != v101);
        }
      }
    }
  }
  WebCore::assignedShadowRootsIfSlotted(v19, (uint64_t)&v140);
  v37 = (WTF *)v140;
  if (HIDWORD(v140))
  {
    v135 = v35;
    v38 = (WTF *)(v140 + 8 * HIDWORD(v140));
    do
    {
      v39 = *(_QWORD *)(*(_QWORD *)v37 + 216);
      if (!*(_QWORD *)(v39 + 32))
      {
        if (*(_QWORD *)(v39 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(*(_QWORD *)v37 + 216));
        else
          WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(*(_QWORD *)v37 + 216));
        v113 = *(_QWORD *)(v39 + 32);
        if (*(_DWORD *)(v113 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v113 + 32), v112);
        if (*(_BYTE *)(v113 + 242)
          || *(_BYTE *)(v113 + 243)
          || *(_BYTE *)(v113 + 244)
          || *(_BYTE *)(v113 + 245)
          || *(_BYTE *)(v113 + 246)
          || *(_BYTE *)(v113 + 247)
          || *(_BYTE *)(v113 + 248))
        {
          *(_BYTE *)(v39 + 236) = 1;
        }
      }
      v40 = *(_QWORD *)(v39 + 32);
      v41 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
      v42 = *(_QWORD *)(v40 + 32);
      *v41 = off_1E344FDE0;
      if (v42)
      {
        v43 = *(_DWORD *)(v42 + 228);
        v44 = off_1E344FDE0;
        if (v43)
          goto LABEL_70;
      }
      v44 = off_1E344FDE0;
      v55 = v40 + 32;
      if (*(_BYTE *)(v40 + 348))
      {
        v55 = v40 + 32;
        do
        {
          v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v55 + 32) + 16) + 8) + 1328);
          if (!*(_QWORD *)(v56 + 32))
          {
            if (*(_QWORD *)(v56 + 24))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v55 + 32) + 16) + 8)
                                                                                           + 1328));
            else
              WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v55 + 32) + 16)
                                                                                                  + 8)
                                                                                      + 1328));
            v126 = *(_QWORD *)(v56 + 32);
            if (*(_DWORD *)(v126 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
            {
              v134 = *(_QWORD *)(v56 + 32);
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v126 + 32), v125);
              v126 = v134;
            }
            if (*(_BYTE *)(v126 + 242)
              || *(_BYTE *)(v126 + 243)
              || *(_BYTE *)(v126 + 244)
              || *(_BYTE *)(v126 + 245)
              || *(_BYTE *)(v126 + 246)
              || *(_BYTE *)(v126 + 247)
              || *(_BYTE *)(v126 + 248))
            {
              *(_BYTE *)(v56 + 236) = 1;
            }
          }
          v57 = *(_QWORD *)(v56 + 32);
          v55 = v57 + 32;
        }
        while (*(_BYTE *)(v57 + 348));
        v44 = *v41;
      }
      if (*(_QWORD *)(v55 + 24)
        && (v129 = ((uint64_t (*)(uint64_t (***)()))v44[2])(v41), v44 = *v41, (v129 & 1) != 0))
      {
LABEL_70:
        ((void (*)(uint64_t (***)()))v44[1])(v41);
        if (*(_DWORD *)(v40 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v40 + 32), v36);
        if (HIDWORD(v137))
        {
          v45 = v136;
          v46 = (WTF *)((char *)v136 + 16 * HIDWORD(v137));
          do
          {
            v47 = *(WTF::StringImpl **)v45;
            if (*(_QWORD *)v45)
              *(_DWORD *)v47 += 2;
            v48 = *(_QWORD *)(v40 + 200);
            if (v48
              && (v49 = 0,
                  v50 = *(_DWORD *)(v48 - 8),
                  v51 = (*((_DWORD *)v47 + 4) >> 8) & v50,
                  (v52 = *(WTF::StringImpl **)(v48 + 8 * v51)) != 0))
            {
              while (v52 == (WTF::StringImpl *)-1 || v52 != v47)
              {
                v51 = (++v49 + v51) & v50;
                v52 = *(WTF::StringImpl **)(v48 + 8 * v51);
                if (!v52)
                  goto LABEL_83;
              }
              v54 = 1;
            }
            else
            {
LABEL_83:
              v54 = 0;
            }
            if (v47)
            {
              if (*(_DWORD *)v47 == 2)
                WTF::StringImpl::destroy(v47, v36);
              else
                *(_DWORD *)v47 -= 2;
            }
            if (v54)
              v24 = 1;
            v45 = (WTF *)((char *)v45 + 16);
          }
          while (v45 != v46);
        }
      }
      else
      {
        ((void (*)(uint64_t (***)()))v44[1])(v41);
      }
      v37 = (WTF *)((char *)v37 + 8);
    }
    while (v37 != v38);
    v37 = (WTF *)v140;
    v35 = v135;
    if (HIDWORD(v140))
    {
      v130 = 8 * HIDWORD(v140);
      do
      {
        v131 = *(_QWORD *)v37;
        *(_QWORD *)v37 = 0;
        if (v131)
        {
          if (*(_DWORD *)(v131 + 24) == 2)
          {
            if ((*(_WORD *)(v131 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v131, v36);
          }
          else
          {
            *(_DWORD *)(v131 + 24) -= 2;
          }
        }
        v37 = (WTF *)((char *)v37 + 8);
        v130 -= 8;
      }
      while (v130);
      v37 = (WTF *)v140;
      v35 = v135;
    }
  }
  if (v37)
  {
    *(_QWORD *)&v140 = 0;
    DWORD2(v140) = 0;
    WTF::fastFree(v37, v36);
  }
  if ((*((_BYTE *)v19 + 22) & 0x10) != 0)
  {
    v58 = *(_QWORD *)v19[5];
    if (v58 && (*(_WORD *)(v58 + 28) & 0x80) != 0)
    {
      v60 = *(_QWORD *)(*(_QWORD *)(v58 + 200) + 8);
      if ((*(_BYTE *)(v60 + 22) & 8) != 0)
      {
        v61 = *(_QWORD **)(v60 + 40);
        if (*v61)
          v62 = (*(_WORD *)(*v61 + 28) & 0x80) == 0;
        else
          v62 = 1;
        if (v62)
          v121 = (WebCore::Style::Scope **)(v61[1] + 1328);
        else
          v121 = (WebCore::Style::Scope **)(*v61 + 216);
        WebCore::Style::Scope::resolver(*v121);
      }
    }
  }
  if (v35)
    WebCore::Element::invalidateStyleForSubtree(*(WebCore::Element **)(a1 + 8));
  if (v24)
    WebCore::Element::invalidateStyle(*(WebCore::Node **)(a1 + 8));
  v63 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 40);
  if (*v63)
    v64 = (*(_WORD *)(*v63 + 28) & 0x80) == 0;
  else
    v64 = 1;
  if (v64)
    v115 = v63[1] + 1328;
  else
    v115 = *v63 + 216;
  v65 = *(_QWORD *)v115;
  if (!*(_QWORD *)(*(_QWORD *)v115 + 32))
  {
    if (*(_QWORD *)(v65 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v65);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v65);
    v124 = *(_QWORD *)(v65 + 32);
    if (*(_DWORD *)(v124 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v124 + 32), v123);
    if (*(_BYTE *)(v124 + 242)
      || *(_BYTE *)(v124 + 243)
      || *(_BYTE *)(v124 + 244)
      || *(_BYTE *)(v124 + 245)
      || *(_BYTE *)(v124 + 246)
      || *(_BYTE *)(v124 + 247)
      || *(_BYTE *)(v124 + 248))
    {
      *(_BYTE *)(v65 + 236) = 1;
    }
  }
  WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_0::operator()<WebCore::Style::ScopeRuleSets>((uint64_t)v136, HIDWORD(v137), a1, *(_QWORD *)(v65 + 32) + 32, 0);
  if ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v110 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v110)
    {
      v111 = WebCore::Style::Scope::resolver(*(WebCore::Style::Scope **)(v110 + 216));
      WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_0::operator()<WebCore::Style::ScopeRuleSets>((uint64_t)v136, HIDWORD(v137), a1, v111 + 32, 273);
    }
  }
  result = v136;
  if (v138 != (_BYTE *)v136)
  {
    if (v136)
    {
      v136 = 0;
      LODWORD(v137) = 0;
      return (WTF *)WTF::fastFree(result, v66);
    }
  }
  return result;
}

uint64_t WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_0::operator()<WebCore::Style::ScopeRuleSets>(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  BOOL v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  WTF::StringImpl *v37;

  if (a2)
  {
    v5 = result;
    v36 = result + 16 * a2;
    v6 = (uint64_t *)(a3 + 16);
    v7 = (uint64_t *)(a3 + 24);
    v8 = (uint64_t *)(a4 + 256);
    v9 = (uint64_t *)(a4 + 120);
    if ((a5 & 0xFF00) != 0)
    {
      v10 = a5;
      if (a5 <= 0x10u && ((1 << a5) & 0x1C320) != 0)
      {
        do
        {
          v12 = *(WTF::StringImpl **)v5;
          if (*(_QWORD *)v5)
          {
            *(_DWORD *)v12 += 2;
            v37 = v12;
            result = (uint64_t)WebCore::Style::ensureInvalidationRuleSets<WTF::AtomString,WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>(&v37, v8, v9);
            v11 = result;
            if (*(_DWORD *)v12 == 2)
              result = WTF::StringImpl::destroy(v12, v13);
            else
              *(_DWORD *)v12 -= 2;
          }
          else
          {
            v37 = 0;
            result = (uint64_t)WebCore::Style::ensureInvalidationRuleSets<WTF::AtomString,WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>(&v37, v8, v9);
            v11 = result;
          }
          if (v11)
          {
            v14 = *(unsigned int *)(v11 + 12);
            if ((_DWORD)v14)
            {
              v15 = *(unsigned __int8 **)v11;
              v16 = 32 * v14;
              do
              {
                if (v15[24] == v10)
                {
                  result = (uint64_t)WebCore::Style::Invalidator::addToMatchElementRuleSets(v6, v15);
                  v17 = v15[24];
                  v18 = v17 > 0x10;
                  v19 = (1 << v17) & 0x1C320;
                  v20 = v18 || v19 == 0;
                  if (!v20 || (v15[25] != 0) != (*(_BYTE *)(v5 + 8) == 0))
                    result = (uint64_t)WebCore::Style::Invalidator::addToMatchElementRuleSets(v7, v15);
                }
                v15 += 32;
                v16 -= 32;
              }
              while (v16);
            }
          }
          v5 += 16;
        }
        while (v5 != v36);
      }
      else
      {
        do
        {
          v30 = *(WTF::StringImpl **)v5;
          if (*(_QWORD *)v5)
          {
            *(_DWORD *)v30 += 2;
            v37 = v30;
            result = (uint64_t)WebCore::Style::ensureInvalidationRuleSets<WTF::AtomString,WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>(&v37, v8, v9);
            v29 = result;
            if (*(_DWORD *)v30 == 2)
              result = WTF::StringImpl::destroy(v30, v31);
            else
              *(_DWORD *)v30 -= 2;
          }
          else
          {
            v37 = 0;
            result = (uint64_t)WebCore::Style::ensureInvalidationRuleSets<WTF::AtomString,WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>(&v37, v8, v9);
            v29 = result;
          }
          if (v29)
          {
            v32 = *(unsigned int *)(v29 + 12);
            if ((_DWORD)v32)
            {
              v33 = *(unsigned __int8 **)v29;
              v34 = 32 * v32;
              do
              {
                if (v33[24] == v10)
                {
                  v35 = v10;
                  if ((v33[25] != 0) != (*(_BYTE *)(v5 + 8) != 0))
                  {
                    result = (uint64_t)WebCore::Style::Invalidator::addToMatchElementRuleSets(v6, v33);
                    v35 = v33[24];
                  }
                  if (v35 <= 0x10 && ((1 << v35) & 0x1C320) != 0 || (v33[25] != 0) != (*(_BYTE *)(v5 + 8) == 0))
                    result = (uint64_t)WebCore::Style::Invalidator::addToMatchElementRuleSets(v7, v33);
                }
                v33 += 32;
                v34 -= 32;
              }
              while (v34);
            }
          }
          v5 += 16;
        }
        while (v5 != v36);
      }
    }
    else
    {
      do
      {
        v21 = *(WTF::StringImpl **)v5;
        if (*(_QWORD *)v5)
        {
          *(_DWORD *)v21 += 2;
          v37 = v21;
          result = (uint64_t)WebCore::Style::ensureInvalidationRuleSets<WTF::AtomString,WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>(&v37, v8, v9);
          v23 = result;
          if (*(_DWORD *)v21 == 2)
            result = WTF::StringImpl::destroy(v21, v22);
          else
            *(_DWORD *)v21 -= 2;
        }
        else
        {
          v37 = 0;
          result = (uint64_t)WebCore::Style::ensureInvalidationRuleSets<WTF::AtomString,WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>(&v37, v8, v9);
          v23 = result;
        }
        if (v23)
        {
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(unsigned __int8 **)v23;
            v26 = 32 * v24;
            do
            {
              v27 = v25[24];
              v28 = v27 > 0x10 || ((1 << v27) & 0x1C320) == 0;
              if (!v28 || (v25[25] != 0) != (*(_BYTE *)(v5 + 8) != 0))
              {
                result = (uint64_t)WebCore::Style::Invalidator::addToMatchElementRuleSets(v6, v25);
                v27 = v25[24];
              }
              if (v27 <= 0x10 && ((1 << v27) & 0x1C320) != 0 || (v25[25] != 0) != (*(_BYTE *)(v5 + 8) == 0))
                result = (uint64_t)WebCore::Style::Invalidator::addToMatchElementRuleSets(v7, v25);
              v25 += 32;
              v26 -= 32;
            }
            while (v26);
          }
        }
        v5 += 16;
      }
      while (v5 != v36);
    }
  }
  return result;
}

void WebCore::Style::colorFromValueID(WebCore::Document *a1@<X0>, const WebCore::RenderStyle *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(WebCore::RenderThemeIOS *__hidden);
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t *v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  const WebCore::RenderStyle *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WebCore::Document *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  switch((int)a3)
  {
    case 227:
      WebCore::Document::activeLinkColor(a1, a2, &v30);
      v8 = v30;
      goto LABEL_4;
    case 228:
      if ((a4 & 1) != 0)
      {
        WebCore::Document::visitedLinkColor(a1, a2, &v31);
LABEL_11:
        v8 = v31;
        goto LABEL_4;
      }
      v8 = *((_QWORD *)a1 + 177);
      if ((v8 & 0x4000000000000) == 0)
      {
        v9 = WebCore::Document::styleColorOptions(a1, a2);
        {
          v10 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
        }
        else
        {
          v23 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
          *(_OWORD *)(v23 + 40) = 0u;
          *(_OWORD *)(v23 + 24) = 0u;
          v10 = &off_1E335BC30;
          *(_QWORD *)v23 = &off_1E335BC30;
        }
        ((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))v10[34])(&v31, &WebCore::RenderTheme::singleton(void)::theme, 228, v9);
        goto LABEL_11;
      }
      v31 = *((_QWORD *)a1 + 177);
      if ((v8 & 0x8000000000000) != 0)
      {
        v19 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
        goto LABEL_11;
      }
LABEL_4:
      *(_QWORD *)a5 = v8;
      *(_DWORD *)(a5 + 8) = 0;
      return;
    case 229:
      {
        v28 = a1;
        v24 = a2;
        WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
        a1 = v28;
        a2 = v24;
        unk_1ECE88AD0 = 0u;
        unk_1ECE88AC0 = 0u;
        WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
      }
      v11 = WebCore::Document::styleColorOptions(a1, a2);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t))(WebCore::RenderTheme::singleton(void)::theme + 1072))(&WebCore::RenderTheme::singleton(void)::theme, v11);
      v14 = *(_QWORD *)(v12 + 32);
      v13 = (unint64_t *)(v12 + 32);
      v8 = v14;
      if ((v14 & 0x4000000000000) == 0)
      {
        v17 = v13;
        (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t))(WebCore::RenderTheme::singleton(void)::theme
                                                                          + 240))(&v32, &WebCore::RenderTheme::singleton(void)::theme, v11);
        WebCore::Color::operator=(v17, &v32);
        if ((v32 & 0x8000000000000) != 0)
        {
          v25 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v18);
          }
        }
        v8 = *v17;
      }
      if ((v8 & 0x8000000000000) != 0)
      {
        v15 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      goto LABEL_4;
    case 230:
      v8 = *((_QWORD *)a1 + 176);
      if ((v8 & 0x8000000000000) != 0)
      {
        v21 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 + 1, v21));
      }
      goto LABEL_4;
    default:
      if ((_DWORD)a3 != 124)
      {
        v7 = WebCore::Document::styleColorOptions(a1, a2);
        WebCore::StyleColor::colorFromKeyword(a3, v7, &v29);
        v8 = v29;
        goto LABEL_4;
      }
      WebCore::StyleColor::currentColor(a5);
      return;
  }
}

uint64_t WebCore::Style::colorFromPrimitiveValueWithResolvedCurrentColor(WebCore::Style *this, const WebCore::Document *a2, WebCore::RenderStyle *a3, const WebCore::CSSPrimitiveValue *a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD v17[4];
  _QWORD *v18;

  v7 = *((_WORD *)a3 + 2) & 0x7F;
  if (v7 == 80 && *((_WORD *)a3 + 4) == 124
    || v7 == 78
    && WebCore::CSSUnresolvedColor::containsCurrentColor(*((WebCore::CSSUnresolvedColor **)a3 + 1)))
  {
    *((_QWORD *)a2 + 2) |= 0x3000000000uLL;
  }
  v8 = *((_WORD *)a3 + 2) & 0x7F;
  if (v8 == 24)
  {
    v9 = *((_QWORD *)a3 + 1);
    if ((v9 & 0x8000000000000) != 0)
    {
      v12 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
    }
    v14 = v9;
    v15 = 0;
  }
  else
  {
    if (v8 == 80)
    {
      v11 = *((unsigned __int16 *)a3 + 4);
    }
    else
    {
      if (v8 == 78)
        goto LABEL_22;
      v11 = 0;
    }
    WebCore::Style::colorFromValueID(this, a2, v11, 0, (uint64_t)&v14);
  }
  while (1)
  {
    v16 = *((_QWORD *)a2 + 4) + 328;
    v17[0] = &v16;
    v17[1] = &v16;
    v17[2] = &v16;
    v17[3] = &v16;
    if (v15 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_22:
    WebCore::CSSUnresolvedColor::createStyleColor(*((_QWORD *)a3 + 1), (uint64_t)this, (uint64_t)a2, 0);
  }
  v18 = v17;
  result = ((uint64_t (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v15])(&v18, &v14);
  if (v15 != -1)
    return ((uint64_t (*)(_QWORD *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v15])(v17, &v14);
  return result;
}

uint64_t WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateCondition(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v3;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;

  v3 = *((_DWORD *)a2 + 5);
  if (!v3)
  {
    LOBYTE(v10) = 2;
    return v10;
  }
  v6 = *a2;
  if (*a2)
  {
    if (v6 != 1)
    {
      if (v6 == 2)
      {
        v7 = *((_QWORD *)a2 + 1);
        v20 = a1;
        v21 = a3;
        v22 = a1;
        v23 = a3;
        v8 = *(unsigned int *)(v7 + 80);
        if ((_DWORD)v8 == -1)
        {
LABEL_26:
          std::__throw_bad_variant_access[abi:sn180100]();
        }
        else
        {
          v24 = &v20;
          v9 = ((uint64_t (*)(uint64_t **))off_1E344FDF8[v8])(&v24);
          if (v9 < 3)
            return (0x20001u >> (8 * v9));
        }
      }
      __break(0xC471u);
      JUMPOUT(0x196580FF0);
    }
    LOBYTE(v10) = 0;
    v15 = *((_QWORD *)a2 + 1);
    v16 = 88 * v3;
    while (1)
    {
      v20 = a1;
      v21 = a3;
      v22 = a1;
      v23 = a3;
      v17 = *(unsigned int *)(v15 + 80);
      if ((_DWORD)v17 == -1)
        goto LABEL_26;
      v24 = &v20;
      v18 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E344FDF8[v17])(&v24, v15);
      if (v18 == 1)
        break;
      if (v18 == 2)
        LOBYTE(v10) = 2;
      v15 += 88;
      v16 -= 88;
      if (!v16)
        return v10;
    }
    LOBYTE(v10) = 1;
  }
  else
  {
    v11 = *((_QWORD *)a2 + 1);
    v12 = 88 * v3;
    LOBYTE(v10) = 1;
    while (1)
    {
      v20 = a1;
      v21 = a3;
      v22 = a1;
      v23 = a3;
      v13 = *(unsigned int *)(v11 + 80);
      if ((_DWORD)v13 == -1)
        goto LABEL_26;
      v24 = &v20;
      v14 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E344FDF8[v13])(&v24, v11);
      if (!v14)
        break;
      if (v14 == 2)
        LOBYTE(v10) = 2;
      v11 += 88;
      v12 -= 88;
      if (!v12)
        return v10;
    }
    LOBYTE(v10) = 0;
  }
  return v10;
}

uint64_t WebCore::Style::ContainerQueryEvaluator::selectContainer(char a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  __int16 v24;
  uint64_t *v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::Node *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v51;
  _QWORD v52[5];
  char *v53;
  uint64_t *v54;
  char v55;

  v6 = a3;
  v55 = a1;
  v54 = a6;
  v52[4] = a3;
  v53 = &v55;
  v52[0] = &v55;
  v52[1] = &v54;
  v52[2] = &v53;
  v52[3] = a2;
  if (a4 == 2)
  {
    v7 = **(_QWORD **)(a3 + 40);
    v9 = (*(_WORD *)(v7 + 28) & 0x80) == 0 || v7 == 0;
    if ((a5 & 0x80000000) == 0)
    {
      if (v9)
        goto LABEL_43;
      v10 = *(_QWORD *)(v7 + 200);
      if (!v10)
        goto LABEL_43;
      v11 = *(_QWORD *)(v10 + 8);
      goto LABEL_12;
    }
    if (v9)
      goto LABEL_43;
    v20 = *(_QWORD *)(v7 + 200);
    if (!v20)
      goto LABEL_43;
    v11 = *(_QWORD *)(v20 + 8);
    if (a5 != -1 && v11)
    {
      v33 = 255;
      while (1)
      {
        v34 = **(_QWORD **)(v11 + 40);
        if (!v34 || (*(_WORD *)(v34 + 28) & 0x80) == 0)
          goto LABEL_38;
        v36 = *(_QWORD *)(v34 + 200);
        if (!v36)
          goto LABEL_38;
        v11 = *(_QWORD *)(v36 + 8);
        if (v11)
        {
          if (--v33 != a5)
            continue;
        }
        break;
      }
    }
LABEL_12:
    if (v11)
    {
      *(_DWORD *)(v11 + 24) += 4;
      v12 = v11;
      while (1)
      {
        v6 = v12;
        if ((WebCore::Style::ContainerQueryEvaluator::selectContainer(WTF::OptionSet<WebCore::CQ::Axis>,WTF::String const&,WebCore::Element const&,WebCore::Style::ContainerQueryEvaluator::SelectionMode,WebCore::Style::ScopeOrdinal,WebCore::Style::ContainerQueryEvaluationState const*)::$_1::operator()((uint64_t)v52, (WebCore::Element *)v12, (const WTF::StringImpl *)v11) & 1) != 0)
        {
          if (*(_DWORD *)(v12 + 24) == 2)
          {
            if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v12);
          }
          else
          {
            *(_DWORD *)(v12 + 24) -= 2;
          }
LABEL_81:
          if (*(_DWORD *)(v11 + 24) != 2)
          {
            *(_DWORD *)(v11 + 24) -= 2;
            return v6;
          }
          if ((*(_WORD *)(v11 + 30) & 0x400) != 0)
            return v6;
          v47 = (WebCore::Node *)v11;
LABEL_111:
          WebCore::Node::removedLastRef(v47);
          return v6;
        }
        if ((*(_WORD *)(v12 + 28) & 0x80) != 0)
        {
          v16 = *(_QWORD *)(v12 + 200);
          if (!v16)
            goto LABEL_30;
          v13 = (uint64_t *)(v16 + 8);
        }
        else
        {
          v13 = (uint64_t *)(v12 + 32);
        }
        v12 = *v13;
        if (!*v13)
          goto LABEL_31;
        v14 = *(_WORD *)(v12 + 28);
        if ((v14 & 0x80) != 0)
        {
          v17 = *(_QWORD *)(v12 + 200);
          if (!v17)
          {
LABEL_30:
            v12 = 0;
LABEL_31:
            v15 = 1;
            goto LABEL_21;
          }
          v12 = *(_QWORD *)(v17 + 8);
          if (!v12)
            goto LABEL_31;
        }
        else if ((v14 & 8) == 0)
        {
          goto LABEL_30;
        }
        v15 = 0;
        *(_DWORD *)(v12 + 24) += 2;
LABEL_21:
        if (*(_DWORD *)(v6 + 24) == 2)
        {
          if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v6);
        }
        else
        {
          *(_DWORD *)(v6 + 24) -= 2;
        }
        if ((v15 & 1) != 0)
        {
          v6 = 0;
          goto LABEL_81;
        }
      }
    }
    goto LABEL_38;
  }
  if ((a5 - 127) >= 0x82u)
  {
    v18 = *(_QWORD *)(a3 + 32);
    if (v18)
    {
      if ((*(_WORD *)(v18 + 28) & 8) != 0)
      {
        v19 = *(_QWORD *)(v18 + 72) & 0xFFFFFFFFFFFFLL;
        if (v19)
        {
          v37 = *(_QWORD *)(v19 + 88);
          if (v37)
          {
            v38 = *(_QWORD *)(v37 + 224);
            if (v38)
            {
              v39 = a4;
              v41 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, a3);
              v11 = v41;
              v51 = a5;
              if (a5 != 1 && v41)
              {
                v42 = 1;
                a4 = v39;
                while (1)
                {
                  v43 = *(_QWORD *)(v11 + 32);
                  if (!v43)
                    goto LABEL_38;
                  if ((*(_WORD *)(v43 + 28) & 8) == 0)
                    goto LABEL_38;
                  v44 = *(_QWORD *)(v43 + 72) & 0xFFFFFFFFFFFFLL;
                  if (!v44)
                    goto LABEL_38;
                  v45 = *(_QWORD *)(v44 + 88);
                  if (!v45)
                    goto LABEL_38;
                  v46 = *(_QWORD *)(v45 + 224);
                  if (!v46)
                    goto LABEL_38;
                  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 16))(v46, v11);
                  if (!v11)
                    break;
                  ++v42;
                  a4 = v39;
                  if (v42 == v51)
                    goto LABEL_12;
                }
              }
              a4 = v39;
              goto LABEL_12;
            }
          }
        }
      }
    }
  }
LABEL_38:
  if (a4 == 1
    && (WebCore::Style::ContainerQueryEvaluator::selectContainer(WTF::OptionSet<WebCore::CQ::Axis>,WTF::String const&,WebCore::Element const&,WebCore::Style::ContainerQueryEvaluator::SelectionMode,WebCore::Style::ScopeOrdinal,WebCore::Style::ContainerQueryEvaluationState const*)::$_1::operator()((uint64_t)v52, (WebCore::Element *)v6, 0) & 1) != 0)
  {
    return v6;
  }
LABEL_43:
  if (v54)
    v21 = v55 == 0;
  else
    v21 = 1;
  if (v21)
  {
    if ((*(_WORD *)(v6 + 28) & 0x80) != 0)
    {
      v48 = *(_QWORD *)(v6 + 200);
      if (!v48)
        return 0;
      v22 = (uint64_t *)(v48 + 8);
    }
    else
    {
      v22 = (uint64_t *)(v6 + 32);
    }
    v23 = *v22;
    if (*v22)
    {
      v24 = *(_WORD *)(v23 + 28);
      if ((v24 & 0x80) != 0)
      {
        v49 = *(_QWORD *)(v23 + 200);
        if (v49)
        {
          v23 = *(_QWORD *)(v49 + 8);
          if (v23)
            goto LABEL_53;
        }
      }
      else if ((v24 & 8) != 0)
      {
LABEL_53:
        *(_DWORD *)(v23 + 24) += 2;
        do
        {
          v6 = v23;
          if ((WebCore::Style::ContainerQueryEvaluator::selectContainer(WTF::OptionSet<WebCore::CQ::Axis>,WTF::String const&,WebCore::Element const&,WebCore::Style::ContainerQueryEvaluator::SelectionMode,WebCore::Style::ScopeOrdinal,WebCore::Style::ContainerQueryEvaluationState const*)::$_1::operator()((uint64_t)v52, (WebCore::Element *)v23, 0) & 1) != 0)
          {
            if (*(_DWORD *)(v23 + 24) == 2)
            {
              if ((*(_WORD *)(v23 + 30) & 0x400) != 0)
                return v6;
              v47 = (WebCore::Node *)v23;
              goto LABEL_111;
            }
            *(_DWORD *)(v23 + 24) -= 2;
            return v6;
          }
          if ((*(_WORD *)(v23 + 28) & 0x80) != 0)
          {
            v28 = *(_QWORD *)(v23 + 200);
            if (!v28)
              goto LABEL_70;
            v25 = (uint64_t *)(v28 + 8);
          }
          else
          {
            v25 = (uint64_t *)(v23 + 32);
          }
          v23 = *v25;
          if (!*v25)
            goto LABEL_71;
          v26 = *(_WORD *)(v23 + 28);
          if ((v26 & 0x80) != 0)
          {
            v29 = *(_QWORD *)(v23 + 200);
            if (!v29)
            {
LABEL_70:
              v23 = 0;
LABEL_71:
              v27 = 1;
              goto LABEL_61;
            }
            v23 = *(_QWORD *)(v29 + 8);
            if (!v23)
              goto LABEL_71;
          }
          else if ((v26 & 8) == 0)
          {
            goto LABEL_70;
          }
          v27 = 0;
          *(_DWORD *)(v23 + 24) += 2;
LABEL_61:
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
        while ((v27 & 1) == 0);
      }
    }
    return 0;
  }
  v30 = *v54;
  v31 = 8 * *((unsigned int *)v54 + 3);
  do
  {
    if (!v31)
      return 0;
    v32 = WebCore::Style::ContainerQueryEvaluator::selectContainer(WTF::OptionSet<WebCore::CQ::Axis>,WTF::String const&,WebCore::Element const&,WebCore::Style::ContainerQueryEvaluator::SelectionMode,WebCore::Style::ScopeOrdinal,WebCore::Style::ContainerQueryEvaluationState const*)::$_1::operator()((uint64_t)v52, *(WebCore::Element **)(v30 + v31 - 8), 0);
    v31 -= 8;
  }
  while (!v32);
  return *(_QWORD *)(v30 + v31);
}

uint64_t WebCore::Style::ContainerQueryEvaluator::selectContainer(WTF::OptionSet<WebCore::CQ::Axis>,WTF::String const&,WebCore::Element const&,WebCore::Style::ContainerQueryEvaluator::SelectionMode,WebCore::Style::ScopeOrdinal,WebCore::Style::ContainerQueryEvaluationState const*)::$_1::operator()(uint64_t a1, WebCore::Element *a2, const WTF::StringImpl *a3)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  const WTF::StringImpl **v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  _BOOL4 v25;
  BOOL v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  BOOL v37;
  _BOOL4 v38;
  BOOL v39;

  v6 = **(_QWORD **)(a1 + 8);
  if (**(_BYTE **)a1)
    v7 = 1;
  else
    v7 = v6 == 0;
  if (v7)
  {
    if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x30)) == 0
      && ((result = *(_QWORD *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
       || ((v27 = *(_QWORD *)(result + 16) & 0x1FLL, v27 != 26) ? (v28 = v27 == 18) : (v28 = 1), !v28)))
    {
      v8 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL;
      if (!v8)
        return 0;
      if ((*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v8 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v8)
          v8 = *(_QWORD *)(v8 + 8);
      }
      result = v8 + 80;
    }
LABEL_13:
    v10 = *(_QWORD *)(*(_QWORD *)(result + 8) + 40);
    if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) == 0
      || (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v11 = ***(unsigned __int8 ***)(a1 + 16);
      if (!***(_BYTE ***)(a1 + 16))
        goto LABEL_25;
      v12 = *(_BYTE *)(v10 + 642) & 3;
      if ((*(_BYTE *)(v10 + 642) & 3) == 0)
        return 0;
      if (v12 == 1)
        goto LABEL_25;
      if (v12 == 2)
      {
        if ((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((v11 & 1) != 0)
            return 0;
          v13 = (*(_BYTE *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x10) != 0 ? 4 : 8;
          if ((v13 & v11) != 0)
            return 0;
        }
LABEL_25:
        v14 = *(const WTF::StringImpl ***)(a1 + 24);
        if (!*v14 || !*((_DWORD *)*v14 + 1))
          return 1;
        if (*(_DWORD *)(v10 + 348))
        {
          v15 = 0;
          v16 = 0;
          if (a3)
          {
            while (1)
            {
              v17 = *(_QWORD *)(v10 + 336);
              v18 = **((_QWORD **)a3 + 5);
              v19 = !v18 || (*(_WORD *)(v18 + 28) & 0x80) == 0;
              if (!v19 && (v20 = *(_QWORD *)(v18 + 200)) != 0 && (v21 = *(_QWORD *)(v20 + 8)) != 0)
              {
                v23 = *(_DWORD *)(v21 + 24);
                *(_DWORD *)(v21 + 24) = v23 + 2;
                v22 = *(unsigned __int8 *)(v17 + v15 + 8);
                if (v23)
                {
                  *(_DWORD *)(v21 + 24) = v23;
                }
                else if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v21);
                }
              }
              else
              {
                v21 = 0;
                v22 = *(unsigned __int8 *)(v17 + v15 + 8);
              }
              v24 = (WebCore::Element *)v21 == a2 && v22 == 127;
              v25 = v24;
              v26 = (char)v22 >= 1 && !v25;
              if (!v26 && (WTF::equal(*(WTF **)(v17 + v15), *v14, a3) & 1) != 0)
                break;
              result = 0;
              ++v16;
              v15 += 16;
              if (v16 >= *(unsigned int *)(v10 + 348))
                return result;
            }
          }
          else
          {
            v29 = *(_QWORD *)(a1 + 32);
            while (1)
            {
              v30 = *(_QWORD *)(v10 + 336);
              v31 = **(_QWORD **)(v29 + 40);
              v32 = !v31 || (*(_WORD *)(v31 + 28) & 0x80) == 0;
              if (!v32 && (v33 = *(_QWORD *)(v31 + 200)) != 0 && (v34 = *(_QWORD *)(v33 + 8)) != 0)
              {
                v36 = *(_DWORD *)(v34 + 24);
                *(_DWORD *)(v34 + 24) = v36 + 2;
                v35 = *(unsigned __int8 *)(v30 + v15 + 8);
                if (v36)
                {
                  *(_DWORD *)(v34 + 24) = v36;
                }
                else if ((*(_WORD *)(v34 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v34);
                }
              }
              else
              {
                v34 = 0;
                v35 = *(unsigned __int8 *)(v30 + v15 + 8);
              }
              v37 = (WebCore::Element *)v34 == a2 && v35 == 127;
              v38 = v37;
              v39 = (char)v35 >= 1 && !v38;
              if (!v39 && (WTF::equal(*(WTF **)(v30 + v15), *v14, a3) & 1) != 0)
                break;
              result = 0;
              ++v16;
              v15 += 16;
              if (v16 >= *(unsigned int *)(v10 + 348))
                return result;
            }
          }
          return 1;
        }
        return 0;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x196581768);
  }
  result = WebCore::Style::Update::elementStyle(*(WebCore::Style::Update **)(v6 + 16), a2);
  if (result)
    goto LABEL_13;
  return result;
}

uint64_t WebCore::Style::CustomPropertyRegistry::get(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int j;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    goto LABEL_2;
  v5 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = ++v5 + v7)
  {
    v7 = i & *(_DWORD *)(v2 - 8);
    v8 = *(_QWORD *)(v2 + 16 * v7);
    if (v8 != -1)
    {
      if (!v8)
        goto LABEL_2;
      if (v8 == *(_QWORD *)a2)
        break;
    }
  }
  v3 = *(_QWORD *)(v2 + 16 * v7 + 8);
  if (!v3)
  {
LABEL_2:
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v9 = 0;
      for (j = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; j = v9 + v11)
      {
        v11 = j & *(_DWORD *)(v3 - 8);
        v12 = *(_QWORD *)(v3 + 16 * v11);
        if (v12 != -1)
        {
          if (!v12)
            return 0;
          if (v12 == *(_QWORD *)a2)
            break;
        }
        ++v9;
      }
      return *(_QWORD *)(v3 + 16 * v11 + 8);
    }
  }
  return v3;
}

uint64_t WebCore::Style::CustomPropertyRegistry::registerFromAPI(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  _QWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  int i;
  unsigned int v11;
  _QWORD *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  WebCore::CSSRegisteredCustomProperty *v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t result;
  void *v36;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(a1 + 8), 8u), (v4 = *v5) != 0))
  {
    v6 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
  v8 = *(_DWORD **)a2;
  v9 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v11 = v9 & v6;
    v12 = (_QWORD *)(v4 + 16 * v11);
    v13 = (_DWORD *)*v12;
    if (*v12 == -1)
    {
      v7 = (_QWORD *)(v4 + 16 * v11);
      goto LABEL_10;
    }
    if (!v13)
      break;
    if (v13 == v8)
      return 0;
LABEL_10:
    v9 = i + v11;
  }
  if (v7)
  {
    *v7 = 0;
    v7[1] = 0;
    --*(_DWORD *)(*v5 - 16);
    v8 = *(_DWORD **)a2;
    v12 = v7;
  }
  if (v8)
    *v8 += 2;
  *v12 = v8;
  result = WTF::fastMalloc((WTF *)0x30);
  v15 = result;
  v16 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v16 += 2;
  v17 = *(unsigned int *)(a2 + 20);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v16;
  *(_DWORD *)(result + 20) = v17;
  if (!(_DWORD)v17)
  {
LABEL_24:
    *(_BYTE *)(v15 + 24) = *(_BYTE *)(a2 + 24);
    v23 = *(_DWORD **)(a2 + 32);
    if (v23)
      *v23 += 2;
    *(_QWORD *)(v15 + 32) = v23;
    v24 = *(_DWORD **)(a2 + 40);
    if (v24)
      ++*v24;
    *(_QWORD *)(v15 + 40) = v24;
    v25 = (WebCore::CSSRegisteredCustomProperty *)v12[1];
    v12[1] = v15;
    if (v25)
    {
      WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(v25, v14);
      WTF::fastFree(v26, v27);
    }
    v28 = *v5;
    if (*v5)
      v29 = *(_DWORD *)(v28 - 12) + 1;
    else
      v29 = 1;
    *(_DWORD *)(v28 - 12) = v29;
    v30 = *v5;
    if (*v5)
      v31 = *(_DWORD *)(v30 - 12);
    else
      v31 = 0;
    v32 = (*(_DWORD *)(v30 - 16) + v31);
    v33 = *(unsigned int *)(v30 - 4);
    if (v33 > 0x400)
    {
      if (v33 > 2 * v32)
        goto LABEL_41;
    }
    else
    {
      if (3 * v33 > 4 * v32)
      {
LABEL_41:
        *(_BYTE *)(a1 + 32) = 1;
        WebCore::Style::Scope::invalidateMatchedDeclarationsCache(*(_QWORD *)a1, v14);
        if (*(_QWORD *)a2)
          WebCore::Style::CustomPropertyRegistry::notifyAnimationsOfCustomPropertyRegistration(*(_DWORD **)(*(_QWORD *)a1 + 16), (const WTF::AtomString *)a2);
        WebCore::Style::Scope::didChangeStyleSheetEnvironment(*(WebCore::Style::Scope **)a1, v36);
        return 1;
      }
      if (!(_DWORD)v33)
      {
        v34 = 8;
        goto LABEL_40;
      }
    }
    v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
LABEL_40:
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v5, v34);
    goto LABEL_41;
  }
  if (!(v17 >> 28))
  {
    v18 = WTF::fastMalloc((WTF *)(16 * v17));
    *(_DWORD *)(v15 + 16) = v17;
    *(_QWORD *)(v15 + 8) = v18;
    v19 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v19)
    {
      v20 = *(_QWORD *)(a2 + 8);
      v21 = v20 + 16 * v19;
      do
      {
        *(_WORD *)v18 = *(_WORD *)v20;
        v22 = *(_DWORD **)(v20 + 8);
        if (v22)
          *v22 += 2;
        *(_QWORD *)(v18 + 8) = v22;
        v20 += 16;
        v18 += 16;
      }
      while (v20 != v21);
    }
    goto LABEL_24;
  }
  __break(0xC471u);
  return result;
}

_DWORD *WebCore::Style::CustomPropertyRegistry::invalidate(WebCore::Style::CustomPropertyRegistry *this, const WTF::AtomString *a2)
{
  _DWORD *result;

  *((_BYTE *)this + 32) = 1;
  result = (_DWORD *)WebCore::Style::Scope::invalidateMatchedDeclarationsCache(*(_QWORD *)this, a2);
  if (*(_QWORD *)a2)
    return WebCore::Style::CustomPropertyRegistry::notifyAnimationsOfCustomPropertyRegistration(*(_DWORD **)(*(_QWORD *)this + 16), a2);
  return result;
}

void WebCore::Style::CustomPropertyRegistry::registerFromStylesheet(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  WebCore *v13;
  _DWORD *v14;
  int v15;
  uint64_t *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  char v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF *v29;
  char *v30;
  char *v31;
  _DWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  unsigned int v40;
  _QWORD *v41;
  int v42;
  int i;
  uint64_t v44;
  _QWORD *v45;
  _DWORD *v46;
  WebCore::CSSRegisteredCustomProperty *v47;
  WTF *v48;
  void *v49;
  int v50;
  _DWORD *v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  _DWORD *v56;
  WebCore::CSSRegisteredCustomProperty *v57;
  WTF *v58;
  void *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  WTF::StringImpl *v64;
  _DWORD *v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  char v69;
  _DWORD *v70;
  _DWORD *v71;
  uint64_t v72;
  char *v73[2];
  WTF *v74;
  int v75;
  unsigned int v76;
  unsigned __int8 v77;

  v2 = a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 16);
    v6 = *(WTF::StringImpl **)(v4 + 8);
    LODWORD(v4) = *(_DWORD *)(v4 + 4);
    v7 = (v5 >> 2) & 1;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  WebCore::CSSCustomPropertySyntax::parse(v6, (WTF::StringImpl *)(v4 | (unint64_t)(v7 << 32)), (uint64_t)&v74);
  v9 = *(_QWORD *)(v2 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(*a1 + 16);
    v11 = (char *)(*(_QWORD *)(v9 + 16) + 24 * *(unsigned int *)(v9 + 28));
    v73[0] = *(char **)(v9 + 16);
    v73[1] = v11;
    v12 = v77;
    if (!v77)
      goto LABEL_92;
    v13 = WebCore::Style::CustomPropertyRegistry::parseInitialValue(v10, v2);
    if (v67 == -1)
      goto LABEL_78;
    if (v67)
    {
      ((void (*)(uint64_t *, _DWORD **))off_1E344FCA8[v67])(&v72, &v65);
      goto LABEL_78;
    }
    v14 = v65;
    if (v65)
      *v65 += 2;
    v15 = v66;
    if ((_BYTE)v66)
    {
      v16 = WebCore::strictCSSParserContext(v13);
      v17 = (_DWORD *)WTF::fastMalloc((WTF *)0x60);
      WebCore::CSSVariableData::CSSVariableData((uint64_t)v17, v73, (const WebCore::CSSParserContext *)v16);
      v72 = 0;
      WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v72, v18);
      *(_BYTE *)(*(_QWORD *)(*a1 + 16) + 3407) = 1;
      v15 = v67;
      if (v67 == -1)
        goto LABEL_21;
    }
    else
    {
      v17 = 0;
    }
    ((void (*)(uint64_t *, _DWORD **))off_1E344FCA8[v15])(&v72, &v65);
  }
  else
  {
    v12 = v77;
    if (!v77)
      goto LABEL_92;
    if (v76)
      goto LABEL_78;
    v19 = WTF::fastCompactMalloc((WTF *)0x60);
    v14 = (_DWORD *)v19;
    *(_DWORD *)v19 = 2;
    v20 = *(_BYTE *)(v19 + 6);
    *(_WORD *)(v19 + 4) = -6144;
    *(_BYTE *)(v19 + 6) = v20 & 0xFC;
    v21 = *(_DWORD **)v2;
    if (*(_QWORD *)v2)
      *v21 += 2;
    v17 = 0;
    *(_QWORD *)(v19 + 8) = v21;
    *(_WORD *)(v19 + 24) = 0;
    *(_DWORD *)(v19 + 72) = 1;
    *(_QWORD *)(v19 + 80) = 0;
    *(_QWORD *)(v19 + 88) = 0;
  }
LABEL_21:
  v22 = *(_DWORD **)v2;
  if (*(_QWORD *)v2)
    *v22 += 2;
  v65 = v22;
  v12 = v77;
  if (!v77)
    goto LABEL_92;
  v23 = v76;
  v66 = 0;
  v67 = 0;
  v68 = v76;
  v24 = v76 >> 28;
  v25 = (WTF *)(16 * v76);
  if (v76)
  {
    if (v24)
      goto LABEL_95;
    v26 = WTF::fastMalloc((WTF *)(16 * v76));
    v27 = v26;
    v67 = v23;
    v66 = v26;
    if (v76)
    {
      v28 = 0;
      v29 = v74;
      v30 = (char *)v74 + 16 * v76;
      do
      {
        v31 = (char *)v29 + v28;
        *(_WORD *)(v26 + v28) = *(_WORD *)((char *)v29 + v28);
        v32 = *(_DWORD **)((char *)v29 + v28 + 8);
        if (v32)
          *v32 += 2;
        *(_QWORD *)(v26 + v28 + 8) = v32;
        v28 += 16;
      }
      while (v31 + 16 != v30);
    }
  }
  else
  {
    v27 = 0;
  }
  v12 = *(unsigned __int8 *)(v2 + 17);
  if (!*(_BYTE *)(v2 + 17))
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v33 = *(_BYTE *)(v2 + 16);
  v69 = v33;
  v70 = v14;
  v71 = v17;
  v34 = WTF::fastMalloc((WTF *)0x30);
  v35 = v34;
  if (v22)
    *v22 += 2;
  *(_QWORD *)(v34 + 8) = 0;
  *(_QWORD *)(v34 + 16) = 0;
  *(_QWORD *)v34 = v22;
  *(_DWORD *)(v34 + 20) = v23;
  if (!(_DWORD)v23)
    goto LABEL_42;
  if (v24)
  {
LABEL_95:
    __break(0xC471u);
    JUMPOUT(0x196582088);
  }
  v36 = WTF::fastMalloc(v25);
  *(_DWORD *)(v35 + 16) = v23;
  *(_QWORD *)(v35 + 8) = v36;
  v37 = v27 + 16 * v23;
  do
  {
    *(_WORD *)v36 = *(_WORD *)v27;
    v38 = *(_DWORD **)(v27 + 8);
    if (v38)
      *v38 += 2;
    *(_QWORD *)(v36 + 8) = v38;
    v27 += 16;
    v36 += 16;
  }
  while (v27 != v37);
LABEL_42:
  *(_BYTE *)(v35 + 24) = v33;
  if (v14)
    *v14 += 2;
  v2 = (uint64_t)(a1 + 2);
  *(_QWORD *)(v35 + 32) = v14;
  if (v17)
    ++*v17;
  *(_QWORD *)(v35 + 40) = v17;
  v39 = *(_DWORD **)v2;
  if (*(_QWORD *)v2
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1 + 2, 8u), (v39 = *(_DWORD **)v2) != 0))
  {
    v40 = *(v39 - 2);
  }
  else
  {
    v40 = 0;
  }
  v41 = 0;
  v42 = v22[4] >> 8;
  for (i = 1; ; ++i)
  {
    v44 = v42 & v40;
    v45 = &v39[4 * v44];
    v46 = (_DWORD *)*v45;
    if (*v45 == -1)
    {
      v41 = &v39[4 * v44];
      goto LABEL_55;
    }
    if (!v46)
      break;
    if (v46 == v22)
    {
      v56 = &v39[4 * v44];
      v57 = (WebCore::CSSRegisteredCustomProperty *)*((_QWORD *)v56 + 1);
      *((_QWORD *)v56 + 1) = v35;
      if (v57)
      {
        WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(v57, v8);
        WTF::fastFree(v58, v59);
      }
      goto LABEL_75;
    }
LABEL_55:
    v42 = i + v44;
  }
  if (v41)
  {
    *v41 = 0;
    v41[1] = 0;
    --*(_DWORD *)(*(_QWORD *)v2 - 16);
    v22 = v65;
    v45 = v41;
  }
  if (v22)
    *v22 += 2;
  *v45 = v22;
  v47 = (WebCore::CSSRegisteredCustomProperty *)v45[1];
  v45[1] = v35;
  if (v47)
  {
    WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(v47, v8);
    WTF::fastFree(v48, v49);
  }
  v12 = *(_QWORD *)v2;
  if (!*(_QWORD *)v2)
  {
    v50 = 1;
    goto LABEL_64;
  }
LABEL_93:
  v50 = *(_DWORD *)(v12 - 12) + 1;
LABEL_64:
  *(_DWORD *)(v12 - 12) = v50;
  v51 = *(_DWORD **)v2;
  if (*(_QWORD *)v2)
    v52 = *(v51 - 3);
  else
    v52 = 0;
  v53 = (*(v51 - 4) + v52);
  v54 = *(v51 - 1);
  if (v54 > 0x400)
  {
    if (v54 <= 2 * v53)
    {
LABEL_69:
      v55 = (_DWORD)v54 << (6 * *(v51 - 3) >= (2 * v54));
      goto LABEL_74;
    }
  }
  else if (3 * v54 <= 4 * v53)
  {
    if ((_DWORD)v54)
      goto LABEL_69;
    v55 = 8;
LABEL_74:
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)v2, v55);
  }
LABEL_75:
  *((_BYTE *)a1 + 32) = 1;
  WebCore::Style::Scope::invalidateMatchedDeclarationsCache(*a1, v8);
  if (v65)
    WebCore::Style::CustomPropertyRegistry::notifyAnimationsOfCustomPropertyRegistration(*(_DWORD **)(*a1 + 16), (const WTF::AtomString *)&v65);
  WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty((WebCore::CSSRegisteredCustomProperty *)&v65, v60);
LABEL_78:
  if (v77)
  {
    v61 = v74;
    if (v76)
    {
      v62 = 16 * v76;
      v63 = (WTF::StringImpl **)((char *)v74 + 8);
      do
      {
        v64 = *v63;
        *v63 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v8);
          else
            *(_DWORD *)v64 -= 2;
        }
        v63 += 2;
        v62 -= 16;
      }
      while (v62);
      v61 = v74;
    }
    if (v61)
    {
      v74 = 0;
      v75 = 0;
      WTF::fastFree(v61, v8);
    }
  }
}

WTF *WebCore::Style::CustomPropertyRegistry::parseInitialValue(uint64_t a1, uint64_t a2)
{
  WebCore *v2;
  char *v3;
  char *v4;
  WebCore::Node *v5;
  WebCore::Node *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD **v9;
  _DWORD **v10;
  WebCore *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  void *v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  WebCore::Node *v27;
  WebCore::Node *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD **v36;
  _DWORD *v37;
  WTF *v38;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  _DWORD *v43;
  WTF *v44;
  WTF *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD **v50;
  _DWORD *v51;
  WTF *v52;
  uint64_t v54;
  unint64_t v55;
  unsigned int *v56;
  _DWORD *v57;
  WTF *v58;
  WTF *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD **v64;
  _DWORD *v65;
  WTF *v66;
  uint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  _DWORD *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  int v74;
  char v75;
  void *v76;
  WTF *v77;
  WTF *result;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int *v81;
  _DWORD **v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF *v85[2];
  WTF *v86[2];
  WTF::StringImpl *v87[2];
  WTF *v88;
  uint64_t v89;
  uint64_t v90;
  WebCore::Node *v91;
  WebCore::Node *v92;
  WTF::StringImpl **v93;
  WebCore::Node *v94;
  uint64_t v95;
  unsigned __int8 v96[15464];
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  WTF *v106;
  int v107;
  int v108;
  WTF *v109;
  int v110;
  int v111;
  char v112;
  char v113;
  __int128 v114;
  uint64_t v115;

  v2 = (WebCore *)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  v13 = v12;
  *(_QWORD *)&v114 = v5;
  *((_QWORD *)&v114 + 1) = v3;
  v14 = WebCore::strictCSSParserContext(v2);
  WebCore::CSSPropertyParser::collectParsedCustomPropertyValueDependencies(v8, &v114, (uint64_t)v14, (uint64_t)&v106);
  if (v108)
    v16 = 0;
  else
    v16 = v111 == 0;
  if (v16 && v112 == 0)
  {
    v82 = v10;
    {
      WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    }
    v98 = 0;
    v18 = qword_1ECE913C0;
    ++*(_DWORD *)qword_1ECE913C0;
    v19 = qword_1ECE913D0;
    v99 = v18;
    v100 = qword_1ECE913C8;
    ++*(_DWORD *)qword_1ECE913D0;
    v101 = v19;
    v20 = qword_1ECE913D8;
    ++*(_DWORD *)qword_1ECE913D8;
    v102 = v20;
    v103 = qword_1ECE913E0;
    v104 = 0;
    v21 = qword_1ECE913F0;
    ++*(_DWORD *)qword_1ECE913F0;
    v105 = v21;
    *((_DWORD *)v11 + 6) += 2;
    v91 = v11;
    v92 = (WebCore::Node *)&WebCore::RenderStyle::defaultStyle(void)::style;
    v94 = 0;
    v95 = 0;
    v93 = 0;
    LOWORD(v84) = 0;
    BYTE2(v84) = 0;
    *(_OWORD *)v85 = 0u;
    *(_OWORD *)v86 = 0u;
    *(_OWORD *)v87 = 0u;
    v88 = (WTF *)&v90;
    v89 = 4;
    WebCore::Style::Builder::Builder(v96, (uint64_t)&v98, (uint64_t *)&v91, (uint64_t)&v84, 0, 3u, 0);
    v23 = v88;
    if (&v90 != (uint64_t *)v88 && v88)
    {
      v88 = 0;
      LODWORD(v89) = 0;
      WTF::fastFree(v23, v22);
    }
    if (HIDWORD(v87[1]))
    {
      v30 = v87[0];
      v31 = (WTF::StringImpl *)((char *)v87[0] + 16 * HIDWORD(v87[1]));
      do
      {
        v32 = *(_QWORD *)v30;
        *(_QWORD *)v30 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 1)
          {
            v33 = *(unsigned int *)(v32 + 4);
            if ((v33 & 8) != 0)
            {
              v34 = *(unsigned int *)(v32 + 28);
              if ((_DWORD)v34)
              {
                v35 = 16 * v34;
                v36 = (_DWORD **)(*(_QWORD *)(v32 + 16) + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*v37 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, (WTF::StringImpl *)v22);
                    else
                      *v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
              }
              v38 = *(WTF **)(v32 + 16);
              if ((WTF *)(v32 + 32) != v38 && v38 != 0)
              {
                *(_QWORD *)(v32 + 16) = 0;
                *(_DWORD *)(v32 + 24) = 0;
                WTF::fastFree(v38, v22);
              }
              v40 = *(_QWORD *)(v32 + 8);
              *(_QWORD *)(v32 + 8) = 0;
              if (v40)
                (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            }
            else if (v33 >= 0x10)
            {
              v41 = 0;
              v42 = (unsigned int *)(v32 + ((v33 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v43 = (_DWORD *)(*v42 | ((unint64_t)*((unsigned __int8 *)v42 + 4) << 32));
                if (*v43 == 2)
                {
                  v79 = v42;
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, (WTF::StringImpl *)v22);
                  v42 = v79;
                }
                else
                {
                  *v43 -= 2;
                }
                ++v41;
                v42 = (unsigned int *)((char *)v42 + 5);
              }
              while (v41 < (unint64_t)*(unsigned int *)(v32 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v32, v22);
          }
          else
          {
            --*(_DWORD *)v32;
          }
        }
        v30 = (WTF::StringImpl *)((char *)v30 + 16);
      }
      while (v30 != v31);
    }
    v24 = v87[0];
    if (v87[0])
    {
      v87[0] = 0;
      LODWORD(v87[1]) = 0;
      WTF::fastFree(v24, v22);
    }
    if (HIDWORD(v86[1]))
    {
      v44 = v86[0];
      v45 = (WTF *)((char *)v86[0] + 16 * HIDWORD(v86[1]));
      do
      {
        v46 = *(_QWORD *)v44;
        *(_QWORD *)v44 = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 1)
          {
            v47 = *(unsigned int *)(v46 + 4);
            if ((v47 & 8) != 0)
            {
              v48 = *(unsigned int *)(v46 + 28);
              if ((_DWORD)v48)
              {
                v49 = 16 * v48;
                v50 = (_DWORD **)(*(_QWORD *)(v46 + 16) + 8);
                do
                {
                  v51 = *v50;
                  *v50 = 0;
                  if (v51)
                  {
                    if (*v51 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v51, (WTF::StringImpl *)v22);
                    else
                      *v51 -= 2;
                  }
                  v50 += 2;
                  v49 -= 16;
                }
                while (v49);
              }
              v52 = *(WTF **)(v46 + 16);
              if ((WTF *)(v46 + 32) != v52 && v52 != 0)
              {
                *(_QWORD *)(v46 + 16) = 0;
                *(_DWORD *)(v46 + 24) = 0;
                WTF::fastFree(v52, v22);
              }
              v54 = *(_QWORD *)(v46 + 8);
              *(_QWORD *)(v46 + 8) = 0;
              if (v54)
                (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
            }
            else if (v47 >= 0x10)
            {
              v55 = 0;
              v56 = (unsigned int *)(v46 + ((v47 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v57 = (_DWORD *)(*v56 | ((unint64_t)*((unsigned __int8 *)v56 + 4) << 32));
                if (*v57 == 2)
                {
                  v80 = v56;
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v57, (WTF::StringImpl *)v22);
                  v56 = v80;
                }
                else
                {
                  *v57 -= 2;
                }
                ++v55;
                v56 = (unsigned int *)((char *)v56 + 5);
              }
              while (v55 < (unint64_t)*(unsigned int *)(v46 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v46, v22);
          }
          else
          {
            --*(_DWORD *)v46;
          }
        }
        v44 = (WTF *)((char *)v44 + 16);
      }
      while (v44 != v45);
    }
    v25 = v86[0];
    if (v86[0])
    {
      v86[0] = 0;
      LODWORD(v86[1]) = 0;
      WTF::fastFree(v25, v22);
    }
    if (HIDWORD(v85[1]))
    {
      v58 = v85[0];
      v59 = (WTF *)((char *)v85[0] + 16 * HIDWORD(v85[1]));
      do
      {
        v60 = *(_QWORD *)v58;
        *(_QWORD *)v58 = 0;
        if (v60)
        {
          if (*(_DWORD *)v60 == 1)
          {
            v61 = *(unsigned int *)(v60 + 4);
            if ((v61 & 8) != 0)
            {
              v62 = *(unsigned int *)(v60 + 28);
              if ((_DWORD)v62)
              {
                v63 = 16 * v62;
                v64 = (_DWORD **)(*(_QWORD *)(v60 + 16) + 8);
                do
                {
                  v65 = *v64;
                  *v64 = 0;
                  if (v65)
                  {
                    if (*v65 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, (WTF::StringImpl *)v22);
                    else
                      *v65 -= 2;
                  }
                  v64 += 2;
                  v63 -= 16;
                }
                while (v63);
              }
              v66 = *(WTF **)(v60 + 16);
              if ((WTF *)(v60 + 32) != v66 && v66 != 0)
              {
                *(_QWORD *)(v60 + 16) = 0;
                *(_DWORD *)(v60 + 24) = 0;
                WTF::fastFree(v66, v22);
              }
              v68 = *(_QWORD *)(v60 + 8);
              *(_QWORD *)(v60 + 8) = 0;
              if (v68)
                (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
            }
            else if (v61 >= 0x10)
            {
              v69 = 0;
              v70 = (unsigned int *)(v60 + ((v61 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v71 = (_DWORD *)(*v70 | ((unint64_t)*((unsigned __int8 *)v70 + 4) << 32));
                if (*v71 == 2)
                {
                  v81 = v70;
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v71, (WTF::StringImpl *)v22);
                  v70 = v81;
                }
                else
                {
                  *v71 -= 2;
                }
                ++v69;
                v70 = (unsigned int *)((char *)v70 + 5);
              }
              while (v69 < (unint64_t)*(unsigned int *)(v60 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v60, v22);
          }
          else
          {
            --*(_DWORD *)v60;
          }
        }
        v58 = (WTF *)((char *)v58 + 16);
      }
      while (v58 != v59);
    }
    v26 = v85[0];
    if (v85[0])
    {
      v85[0] = 0;
      LODWORD(v85[1]) = 0;
      WTF::fastFree(v26, v22);
    }
    v27 = v94;
    v94 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 6) == 2)
      {
        if ((*((_WORD *)v27 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v27);
      }
      else
      {
        *((_DWORD *)v27 + 6) -= 2;
      }
    }
    v28 = v91;
    v91 = 0;
    if (v28)
    {
      if (*((_DWORD *)v28 + 6) == 2)
      {
        if ((*((_WORD *)v28 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v28);
      }
      else
      {
        *((_DWORD *)v28 + 6) -= 2;
      }
    }
    WebCore::CSSParserContext::CSSParserContext((WebCore::CSSParserContext *)&v84, v11);
    if (*(_DWORD *)(v8 + 12))
    {
      v91 = v6;
      v92 = (WebCore::Node *)v4;
      v93 = &v84;
      v94 = 0;
      WebCore::CSSPropertyParser::parseTypedCustomPropertyValue((WebCore::CSSParserTokenRange *)&v91, v82, v8, (uint64_t)&v97, &v115);
      if (v115)
      {
        if (v91 != v92 || *(_DWORD *)(v115 + 72) == 1 && *(unsigned __int16 *)(v115 + 24) - 1 < 5)
        {
          v83 = 0;
          if (*(_DWORD *)v115 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v115, v29);
          else
            *(_DWORD *)v115 -= 2;
        }
        else
        {
          v83 = v115;
        }
      }
      else
      {
        v83 = 0;
      }
    }
    else
    {
      WebCore::CSSVariableParser::parseInitialValueForUniversalSyntax((unint64_t)v82, (char *)v6, v4, &v83);
    }
    v72 = v87[0];
    v87[0] = 0;
    if (v72)
    {
      if (*(_DWORD *)v72 == 2)
        WTF::StringImpl::destroy(v72, v29);
      else
        *(_DWORD *)v72 -= 2;
    }
    v73 = v84;
    v84 = 0;
    if (v73)
    {
      if (*(_DWORD *)v73 == 2)
        WTF::StringImpl::destroy(v73, v29);
      else
        *(_DWORD *)v73 -= 2;
    }
    if (v83)
    {
      v74 = 0;
      v75 = v113;
      *(_QWORD *)v13 = v83;
      *(_BYTE *)(v13 + 8) = v75;
    }
    else
    {
      v74 = 1;
      *(_BYTE *)v13 = 1;
    }
    *(_DWORD *)(v13 + 16) = v74;
    WebCore::Style::Builder::~Builder((WebCore::Style::Builder *)v96, v29);
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v98, v76);
  }
  else
  {
    *(_BYTE *)v13 = 0;
    *(_DWORD *)(v13 + 16) = 1;
  }
  v77 = v109;
  if (v109)
  {
    v109 = 0;
    v110 = 0;
    WTF::fastFree(v77, v15);
  }
  result = v106;
  if (v106)
  {
    v106 = 0;
    v107 = 0;
    return (WTF *)WTF::fastFree(result, v15);
  }
  return result;
}

_DWORD *WebCore::Style::CustomPropertyRegistry::clearRegisteredFromStylesheets(_DWORD *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  WebCore::Style::CustomPropertyRegistry *v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (*(_DWORD *)(v2 - 12))
    {
      v3 = (WebCore::Style::CustomPropertyRegistry *)this;
      WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear((WTF::StringImpl ***)this + 2, a2);
      return WebCore::Style::CustomPropertyRegistry::invalidate(v3, MEMORY[0x1E0CBF2F8]);
    }
  }
  return this;
}

WTF::StringImpl ***WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear(WTF::StringImpl ***result, WTF::StringImpl *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WebCore::CSSRegisteredCustomProperty *v6;
  WTF *v7;
  void *v8;

  v2 = *result;
  if (*result)
  {
    *result = 0;
    v3 = *((unsigned int *)v2 - 1);
    if ((_DWORD)v3)
    {
      v4 = v2;
      do
      {
        v5 = *v4;
        if (*v4 != (WTF::StringImpl *)-1)
        {
          v6 = v4[1];
          v4[1] = 0;
          if (v6)
          {
            WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(v6, a2);
            WTF::fastFree(v7, v8);
            v5 = *v4;
          }
          *v4 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2)
              WTF::StringImpl::destroy(v5, a2);
            else
              *(_DWORD *)v5 -= 2;
          }
        }
        v4 += 2;
        --v3;
      }
      while (v3);
    }
    return (WTF::StringImpl ***)WTF::fastFree((WTF *)(v2 - 2), a2);
  }
  return result;
}

double std::exchange[abi:sn180100]<std::unique_ptr<WebCore::RenderStyle>,std::unique_ptr<WebCore::RenderStyle>>@<D0>(WebCore::RenderStyle **a1@<X0>, WebCore::RenderStyle **a2@<X1>, WebCore::RenderStyle **a3@<X8>)
{
  WebCore::RenderStyle *v4;
  WebCore::RenderStyle *v5;
  WebCore::RenderStyle *v6;
  WTF *v7;
  void *v8;
  double result;

  v4 = *a1;
  *a1 = 0;
  *a3 = v4;
  v5 = *a2;
  *a2 = 0;
  v6 = *a1;
  *a1 = v5;
  if (v6)
  {
    WebCore::RenderStyle::~RenderStyle(v6, a2);
    if (*(_DWORD *)v7)
    {
      result = 0.0;
      *((_OWORD *)v7 + 2) = 0u;
      *((_OWORD *)v7 + 3) = 0u;
      *(_OWORD *)v7 = 0u;
      *((_OWORD *)v7 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v7, v8);
    }
  }
  return result;
}

_DWORD *WebCore::Style::CustomPropertyRegistry::initialValuePrototypeStyle(void)const::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits> const>(_DWORD *result, _QWORD *a2)
{
  _DWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  _DWORD *v14;

  v2 = result;
  v3 = (_QWORD *)*a2;
  if (!*a2)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = &v3[2 * v5];
    goto LABEL_4;
  }
  v5 = *((unsigned int *)v3 - 1);
  v6 = &v3[2 * v5];
  if (!*((_DWORD *)v3 - 3))
  {
    v4 = &v3[2 * v5];
    goto LABEL_3;
  }
  v4 = (_QWORD *)*a2;
  if ((_DWORD)v5)
  {
    v13 = 16 * v5;
    v4 = (_QWORD *)*a2;
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 2;
      v13 -= 16;
      if (!v13)
      {
        v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  if (v3)
    v7 = &v3[2 * *((unsigned int *)v3 - 1)];
  else
    v7 = 0;
  while (v4 != v7)
  {
    v8 = v4[1];
    v9 = *(_QWORD *)(v8 + 32);
    if (v9 && (*(_DWORD *)(v9 + 72) != 1 || *(_WORD *)(v9 + 24)))
    {
      v10 = *((_QWORD *)v2 + 3);
      *(_DWORD *)v9 += 2;
      v14 = (_DWORD *)v9;
      WebCore::RenderStyle::setCustomPropertyValue(v10, (WTF::StringImpl *)&v14, *(unsigned __int8 *)(v8 + 24));
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*result == 2)
          result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v11);
        else
          *result -= 2;
      }
    }
    v12 = v4 + 2;
    v4 = v6;
    if (v12 != v6)
    {
      v4 = v12;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v6)
        {
          v4 = v6;
          break;
        }
      }
    }
  }
  return result;
}

_DWORD *WebCore::Style::CustomPropertyRegistry::notifyAnimationsOfCustomPropertyRegistration(_DWORD *this, const WTF::AtomString *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  WebCore::KeyframeEffect *v8;
  uint64_t v9;

  {
    if (WebCore::WebAnimation::instances(void)::instances
      && *(_DWORD *)(WebCore::WebAnimation::instances(void)::instances - 12))
    {
      v3 = this;
      v4 = *(unsigned int *)(WebCore::WebAnimation::instances(void)::instances - 4);
      if ((_DWORD)v4)
      {
        v5 = 8 * v4;
        for (i = WebCore::WebAnimation::instances(void)::instances; (unint64_t)(*(_QWORD *)i + 1) <= 1; i += 8)
        {
          v5 -= 8;
          if (!v5)
            return this;
        }
      }
      else
      {
        i = WebCore::WebAnimation::instances(void)::instances;
      }
      v7 = WebCore::WebAnimation::instances(void)::instances + 8 * v4;
      if (v7 != i)
      {
LABEL_11:
        v8 = *(WebCore::KeyframeEffect **)(*(_QWORD *)i + 56);
        if (v8)
        {
          this = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 24))(*(_QWORD *)(*(_QWORD *)i + 56));
          if ((_DWORD)this)
          {
            v9 = *((_QWORD *)v8 + 33);
            if (v9)
            {
              if (*(_DWORD **)(*(_QWORD *)(v9 + 40) + 8) == v3)
                this = WebCore::KeyframeEffect::customPropertyRegistrationDidChange(v8, a2);
            }
          }
        }
        while (1)
        {
          i += 8;
          if (i == v7)
            break;
          if ((unint64_t)(*(_QWORD *)i + 1) > 1)
          {
            if (i != v7)
              goto LABEL_11;
            return this;
          }
        }
      }
    }
  }
  else
  {
    WebCore::WebAnimation::instances(void)::instances = 0;
  }
  return this;
}

uint64_t WebCore::Style::CustomPropertyRegistry::invalidatePropertiesWithViewportUnits(WebCore::Document &)::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  const WTF::AtomString *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char v20;

  v2 = result;
  v3 = (_QWORD *)*a2;
  if (!*a2)
  {
    v4 = 0;
    v5 = 0;
LABEL_3:
    v6 = &v3[2 * v5];
    goto LABEL_4;
  }
  v5 = *((unsigned int *)v3 - 1);
  v6 = &v3[2 * v5];
  if (!*((_DWORD *)v3 - 3))
  {
    v4 = &v3[2 * v5];
    goto LABEL_3;
  }
  v4 = (_QWORD *)*a2;
  if ((_DWORD)v5)
  {
    v17 = 16 * v5;
    v4 = (_QWORD *)*a2;
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 2;
      v17 -= 16;
      if (!v17)
      {
        v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  if (v3)
    v7 = &v3[2 * *((unsigned int *)v3 - 1)];
  else
    v7 = 0;
  if (v7 != v4)
  {
    v8 = *(_QWORD *)(result + 8);
    do
    {
      v9 = v4[1];
      if (*(_QWORD *)(v9 + 40))
      {
        result = (uint64_t)WebCore::Style::CustomPropertyRegistry::parseInitialValue(*(_QWORD *)v2, v9);
        v11 = v19;
        if (!v19)
        {
          v12 = v4[1];
          v13 = v18;
          v18 = 0;
          v14 = *(_DWORD **)(v12 + 32);
          *(_QWORD *)(v12 + 32) = v13;
          if (v14)
          {
            if (*v14 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v14, v10);
            else
              *v14 -= 2;
          }
          v15 = (const WTF::AtomString *)v4[1];
          *(_BYTE *)(v8 + 32) = 1;
          result = WebCore::Style::Scope::invalidateMatchedDeclarationsCache(*(_QWORD *)v8, v10);
          if (*(_QWORD *)v15)
            result = (uint64_t)WebCore::Style::CustomPropertyRegistry::notifyAnimationsOfCustomPropertyRegistration(*(_DWORD **)(*(_QWORD *)v8 + 16), v15);
          **(_BYTE **)(v2 + 16) = 1;
          v11 = v19;
        }
        if (v11 != 0xFFFFFFFFLL)
          result = ((uint64_t (*)(char *, uint64_t *))off_1E344FCA8[v11])(&v20, &v18);
      }
      v16 = v4 + 2;
      v4 = v6;
      if (v16 != v6)
      {
        v4 = v16;
        while ((unint64_t)(*v4 + 1) <= 1)
        {
          v4 += 2;
          if (v4 == v6)
          {
            v4 = v6;
            break;
          }
        }
      }
    }
    while (v4 != v7);
  }
  return result;
}

WebCore::Style::ElementRuleCollector *WebCore::Style::ElementRuleCollector::ElementRuleCollector(WebCore::Style::ElementRuleCollector *this, const WebCore::Element *a2, WebCore::Style::RuleSet **a3, WebCore::Style::SelectorMatchingState *a4)
{
  WebCore::Style::RuleSet *v8;
  const WebCore::Style::ScopeRuleSets *v9;
  _DWORD *v10;
  int v11;
  WebCore::Style::RuleSet *v12;
  WebCore::Style::RuleSet *v13;
  char v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  __int128 v22;
  WebCore::Style::RuleSet *v23;
  WebCore::Style::RuleSet *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  unsigned __int8 *v30[2];
  _QWORD v31[2];
  char v32;
  __int128 v33;
  __int128 v34;
  char v35;
  WebCore::Style::RuleSet *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  *((_DWORD *)a2 + 6) += 2;
  *(_QWORD *)this = a2;
  v8 = *a3;
  *(_DWORD *)v8 = *(_DWORD *)*a3 + 1;
  *((_QWORD *)this + 1) = v8;
  v9 = (const WebCore::Style::ScopeRuleSets *)a3;
  if (*((_BYTE *)a3 + 316))
  {
    v9 = (const WebCore::Style::ScopeRuleSets *)a3;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v9 + 4) + 16) + 8) + 1328);
      if (!*(_QWORD *)(v17 + 32))
      {
        if (*(_QWORD *)(v17 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v17);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v17);
        v27 = *(_QWORD *)(v17 + 32);
        if (*(_DWORD *)(v27 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v27 + 32));
        if (*(_BYTE *)(v27 + 242)
          || *(_BYTE *)(v27 + 243)
          || *(_BYTE *)(v27 + 244)
          || *(_BYTE *)(v27 + 245)
          || *(_BYTE *)(v27 + 246)
          || *(_BYTE *)(v27 + 247)
          || *(_BYTE *)(v27 + 248))
        {
          *(_BYTE *)(v17 + 236) = 1;
        }
      }
      v18 = *(_QWORD *)(v17 + 32);
      v9 = (const WebCore::Style::ScopeRuleSets *)(v18 + 32);
    }
    while (*(_BYTE *)(v18 + 348));
  }
  v10 = (_DWORD *)*((_QWORD *)v9 + 3);
  if (v10)
    ++*v10;
  *((_QWORD *)this + 2) = v10;
  if (WebCore::Style::UserAgentStyle::mediaQueryStyleSheet)
  {
    v11 = *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 68)
        + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 52)
        + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 84)
        + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 100);
    if (!a3[1] || v11 != *((_DWORD *)a3 + 78))
    {
      *((_DWORD *)a3 + 78) = v11;
      v19 = (uint64_t)a3[4] + 360;
      v20 = WTF::fastMalloc((WTF *)0x328);
      *(_DWORD *)v20 = 1;
      v22 = 0uLL;
      *(_OWORD *)(v20 + 8) = 0u;
      *(_OWORD *)(v20 + 24) = 0u;
      *(_OWORD *)(v20 + 40) = 0u;
      *(_OWORD *)(v20 + 56) = 0u;
      *(_QWORD *)(v20 + 72) = v20 + 88;
      *(_QWORD *)(v20 + 80) = 1;
      *(_QWORD *)(v20 + 120) = v20 + 136;
      *(_QWORD *)(v20 + 128) = 1;
      *(_QWORD *)(v20 + 168) = v20 + 184;
      *(_QWORD *)(v20 + 176) = 1;
      *(_QWORD *)(v20 + 216) = v20 + 232;
      *(_QWORD *)(v20 + 224) = 1;
      *(_QWORD *)(v20 + 264) = v20 + 280;
      *(_QWORD *)(v20 + 272) = 1;
      *(_QWORD *)(v20 + 312) = v20 + 328;
      *(_QWORD *)(v20 + 320) = 1;
      *(_QWORD *)(v20 + 360) = v20 + 376;
      *(_QWORD *)(v20 + 368) = 1;
      *(_QWORD *)(v20 + 408) = v20 + 424;
      *(_QWORD *)(v20 + 416) = 1;
      *(_QWORD *)(v20 + 645) = 0;
      *(_OWORD *)(v20 + 616) = 0u;
      *(_OWORD *)(v20 + 632) = 0u;
      *(_OWORD *)(v20 + 584) = 0u;
      *(_OWORD *)(v20 + 600) = 0u;
      *(_OWORD *)(v20 + 552) = 0u;
      *(_OWORD *)(v20 + 568) = 0u;
      *(_OWORD *)(v20 + 520) = 0u;
      *(_OWORD *)(v20 + 536) = 0u;
      *(_OWORD *)(v20 + 488) = 0u;
      *(_OWORD *)(v20 + 504) = 0u;
      *(_OWORD *)(v20 + 456) = 0u;
      *(_OWORD *)(v20 + 472) = 0u;
      *(_QWORD *)(v20 + 672) = 0;
      *(_DWORD *)(v20 + 680) = 0;
      *(_OWORD *)(v20 + 656) = 0u;
      *(_OWORD *)(v20 + 688) = 0u;
      *(_OWORD *)(v20 + 704) = 0u;
      *(_OWORD *)(v20 + 720) = 0u;
      *(_OWORD *)(v20 + 736) = 0u;
      *(_OWORD *)(v20 + 752) = 0u;
      *(_OWORD *)(v20 + 768) = 0u;
      *(_OWORD *)(v20 + 784) = 0u;
      *(_WORD *)(v20 + 800) = 0;
      v23 = a3[1];
      a3[1] = (WebCore::Style::RuleSet *)v20;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v23, v21);
          WTF::fastFree(v28, v29);
          v22 = 0uLL;
          v20 = (uint64_t)a3[1];
        }
        else
        {
          --*(_DWORD *)v23;
        }
      }
      v24 = a3[4];
      ++*(_DWORD *)v20;
      v31[0] = v20;
      v31[1] = v19;
      v32 = 0;
      v33 = v22;
      v34 = v22;
      v35 = 0;
      v36 = v24;
      v37 = 0;
      v39 = 0;
      v40 = 0;
      v38 = 0;
      v41 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v49 = 0;
      v44 = 0;
      v42 = 0;
      v43 = 0;
      v30[0] = 0;
      v30[1] = 0;
      WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)v31, (const WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::mediaQueryStyleSheet, v30);
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v25);
      WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)v31, v26);
    }
  }
  v12 = a3[1];
  if (v12)
    ++*(_DWORD *)v12;
  *((_QWORD *)this + 3) = v12;
  v13 = a3[2];
  if (v13)
    ++*(_DWORD *)v13;
  *((_QWORD *)this + 4) = v13;
  *((_QWORD *)this + 5) = a4;
  *((_WORD *)this + 24) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 14) = (char *)this + 128;
  *((_QWORD *)this + 15) = 64;
  *((_QWORD *)this + 208) = 0;
  *((_QWORD *)this + 210) = 0;
  *((_QWORD *)this + 209) = 0;
  *((_BYTE *)this + 1688) = 0;
  v14 = *((_BYTE *)a2 + 30) & 1;
  v15 = WTF::fastMalloc((WTF *)0x50);
  *(_BYTE *)v15 = v14;
  *(_WORD *)(v15 + 1) = 0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 8) = 0u;
  *(_QWORD *)(v15 + 56) = v15 + 72;
  *(_QWORD *)(v15 + 64) = 4;
  *((_QWORD *)this + 212) = v15;
  *((_QWORD *)this + 213) = (char *)this + 1720;
  *((_QWORD *)this + 214) = 8;
  *((_DWORD *)this + 462) = 0;
  return this;
}

WTF::StringImpl *WebCore::Style::ElementRuleCollector::matchSlottedPseudoElementRules(WTF::StringImpl *result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Node *v6;
  char v7;
  _QWORD *v8;
  BOOL v9;
  WebCore::Style::Scope *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Style::Scope **v13;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)result + 32);
  if (v2)
  {
    if ((*(_WORD *)(v2 + 28) & 8) != 0)
    {
      v3 = *(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL;
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 88);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 224);
          if (v5)
          {
            v14 = (uint64_t)result;
            result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, *(_QWORD *)result);
            if (result)
            {
              v6 = result;
              v7 = 1;
              do
              {
                v8 = (_QWORD *)*((_QWORD *)v6 + 5);
                if (*v8)
                  v9 = (*(_WORD *)(*v8 + 28) & 0x80) == 0;
                else
                  v9 = 1;
                if (v9)
                  v13 = (WebCore::Style::Scope **)(v8[1] + 1328);
                else
                  v13 = (WebCore::Style::Scope **)(*v8 + 216);
                v10 = *v13;
                if (*(_BYTE *)(WebCore::Style::Scope::resolver(*v13) + 349))
                {
                  v11 = WebCore::Style::Scope::resolver(v10);
                  v12 = WebCore::Style::ScopeRuleSets::styleForCascadeLevel((WebCore::Style::ScopeRuleSets *)(v11 + 32), a2);
                  if (v12)
                  {
                    result = WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(v14, v12 + 216);
                    if (v7 == 126)
                      break;
                  }
                }
                result = (WTF::StringImpl *)WebCore::Node::assignedSlot(v6);
                v6 = result;
                ++v7;
              }
              while (result);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::Style::ElementRuleCollector::matchPartPseudoElementRules(uint64_t result, WTF::StringImpl *a2)
{
  _QWORD *v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v2 = *(_QWORD **)result;
  v3 = **(_QWORD **)(*(_QWORD *)result + 40);
  if (v3)
    v4 = (*(_WORD *)(v3 + 28) & 0x80) == 0;
  else
    v4 = 1;
  if (!v4)
  {
    if (!*(_BYTE *)(v3 + 193))
    {
      v5 = v2[13];
      if (v5
        && ((v6 = *(_DWORD *)(v5 + 4), (v6 & 1) != 0)
          ? (v7 = *(_QWORD *)(v5 + 40), LODWORD(v8) = *(_DWORD *)(v5 + 52))
          : (v7 = v5 + 32, LODWORD(v8) = v6 >> 5),
            (_DWORD)v8))
      {
        v8 = v8;
        v9 = (_QWORD *)(v7 + 8);
        while (1)
        {
          v10 = *(v9 - 1);
          if (v10 == WebCore::HTMLNames::useragentpartAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
          {
            break;
          }
          v9 += 2;
          if (!--v8)
          {
            v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
            break;
          }
        }
      }
      else
      {
        v9 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      }
      if (*v9)
        v2 = *(_QWORD **)(*(_QWORD *)(v3 + 200) + 8);
    }
    if ((v2[9] & 0xFFFFFFFFFFFFLL) != 0)
    {
      v11 = *(WTF **)((v2[9] & 0xFFFFFFFFFFFFLL) + 0xD0);
      if (v11)
      {
        v16 = result;
        v15 = (int)a2;
        v12 = *((_DWORD *)v11 + 2);
        *((_DWORD *)v11 + 2) = v12 + 1;
        v14 = (uint64_t)v2;
        v13 = v2[2];
        if (v12)
          *((_DWORD *)v11 + 2) = v12;
        else
          WebCore::SpaceSplitStringData::destroy(v11, a2);
        result = v16;
        if ((v13 & 0x10000000000000) != 0)
          return WebCore::Style::ElementRuleCollector::matchPartPseudoElementRulesForScope(v16, v14, v15);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::Style::ElementRuleCollector::collectMatchingUserAgentPartRules(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v3 = *a2;
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 176))(*a1);
  if ((_DWORD)result)
    result = WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)a1, v3 + 120);
  v5 = *(_QWORD *)(*a1 + 104);
  if (v5
    && ((v6 = *(_DWORD *)(v5 + 4), (v6 & 1) != 0)
      ? (v7 = *(_QWORD *)(v5 + 40), LODWORD(v8) = *(_DWORD *)(v5 + 52))
      : (v7 = v5 + 32, LODWORD(v8) = v6 >> 5),
        (_DWORD)v8))
  {
    v8 = v8;
    v9 = (uint64_t *)(v7 + 8);
    while (1)
    {
      v10 = *(v9 - 1);
      if (v10 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      v9 += 2;
      if (!--v8)
      {
        v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v9 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v11 = *v9;
  if (v11 && *(_DWORD *)(v11 + 4))
  {
    v12 = *(_QWORD *)(v3 + 56);
    if (v12)
    {
      v13 = 0;
      for (i = *(_DWORD *)(v11 + 16) >> 8; ; i = v13 + v15)
      {
        v15 = i & *(_DWORD *)(v12 - 8);
        v16 = *(_QWORD *)(v12 + 16 * v15);
        if (!v16)
          break;
        if (v16 != -1 && v16 == v11)
        {
          v18 = *(_QWORD *)(v12 + 16 * v15 + 8);
          return WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)a1, v18);
        }
        ++v13;
      }
    }
    v18 = 0;
    return WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)a1, v18);
  }
  return result;
}

uint64_t WebCore::Style::RuleSet::namedPseudoElementRules(uint64_t result, uint64_t a2)
{
  int v2;
  unsigned int i;
  uint64_t v4;
  uint64_t v5;

  if (result)
  {
    v2 = 0;
    for (i = *(_DWORD *)(a2 + 16) >> 8; ; i = v2 + v4)
    {
      v4 = i & *(_DWORD *)(result - 8);
      v5 = *(_QWORD *)(result + 16 * v4);
      if (!v5)
        return 0;
      if (v5 != -1 && v5 == a2)
        break;
      ++v2;
    }
    return *(_QWORD *)(result + 16 * v4 + 8);
  }
  return result;
}

__int16 *WebCore::Style::ElementRuleCollector::matchAuthorRules(WebCore::Style::ElementRuleCollector *this, void *a2)
{
  WebCore::Style::ElementRuleCollector *v3;
  __int16 *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;
  BOOL (***v18)(uint64_t, uint64_t);
  BOOL (**v19)(uint64_t, uint64_t);
  BOOL (*v20)(uint64_t, uint64_t);
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL (**v35)(uint64_t, uint64_t);
  _QWORD *v36;
  int v37;
  _DWORD *v38;
  _DWORD **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v53;
  __int16 *v54;
  WTF *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD **v64;
  _DWORD *v65;
  WTF *v66;
  uint64_t v68;
  WTF *v69;
  WebCore::Style::Scope **v70;
  unint64_t v71;
  unsigned int *v72;
  _DWORD *v73;
  unsigned int *v74;
  BOOL (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  WTF *v79;
  WTF *v80;
  BOOL (*v81)(uint64_t, uint64_t);
  __int16 v82;
  char v83;
  char v84;
  __int16 v85;
  BOOL v86;
  char v87;

  if (!*((_DWORD *)this + 30))
    goto LABEL_6;
  if (*((_DWORD *)this + 31))
    *((_DWORD *)this + 31) = 0;
  v3 = (WebCore::Style::ElementRuleCollector *)*((_QWORD *)this + 14);
  if ((WebCore::Style::ElementRuleCollector *)((char *)this + 128) == v3)
  {
LABEL_5:
    if (v3)
      goto LABEL_6;
    goto LABEL_114;
  }
  if (v3)
  {
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v3, a2);
    v3 = (WebCore::Style::ElementRuleCollector *)*((_QWORD *)this + 14);
    goto LABEL_5;
  }
LABEL_114:
  *((_QWORD *)this + 14) = (char *)this + 128;
  *((_DWORD *)this + 30) = 64;
LABEL_6:
  *((_QWORD *)this + 208) = 0;
  v81 = (BOOL (*)(uint64_t, uint64_t))*((_QWORD *)this + 1);
  v82 = 0;
  result = (__int16 *)WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)this, (uint64_t)&v81);
  v5 = *(_QWORD *)this;
  v6 = *(_QWORD *)(*(_QWORD *)this + 32);
  if (v6)
  {
    if ((*(_WORD *)(v6 + 28) & 8) != 0)
    {
      v7 = *(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL;
      if (v7)
      {
        if (*(_QWORD *)(v7 + 88))
        {
          result = (__int16 *)WebCore::Style::ElementRuleCollector::matchSlottedPseudoElementRules(this, 4);
          v5 = *(_QWORD *)this;
        }
      }
    }
  }
  v8 = *(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v41 = *(_QWORD *)(v8 + 88);
    if (v41)
    {
      result = (__int16 *)WebCore::Style::Scope::resolver(*(WebCore::Style::Scope **)(v41 + 216));
      v42 = *((_QWORD *)result + 4);
      if (v42)
      {
        if (*(_DWORD *)(v42 + 180))
        {
          v81 = (BOOL (*)(uint64_t, uint64_t))*((_QWORD *)result + 4);
          v82 = 127;
          result = (__int16 *)WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)this, v42 + 168);
        }
      }
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)this + 22) & 0x10) != 0)
  {
    v43 = **(_QWORD **)(*(_QWORD *)this + 40);
    if (v43)
      v44 = (*(_WORD *)(v43 + 28) & 0x80) == 0;
    else
      v44 = 1;
    if (!v44 && !*(_BYTE *)(v43 + 193))
    {
      v59 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v43 + 200) + 8) + 40);
      v60 = !*v59 || (*(_WORD *)(*v59 + 28) & 0x80) == 0;
      v70 = (WebCore::Style::Scope **)(v60 ? v59[1] + 1328 : *v59 + 216);
      v61 = WebCore::Style::Scope::resolver(*v70);
      if (*(_QWORD *)(v61 + 32))
      {
        v81 = *(BOOL (**)(uint64_t, uint64_t))(v61 + 32);
        v82 = 255;
        WebCore::Style::ElementRuleCollector::collectMatchingUserAgentPartRules(this, (uint64_t *)&v81);
      }
    }
    result = (__int16 *)WebCore::Style::ElementRuleCollector::matchPartPseudoElementRules((uint64_t)this, (WTF::StringImpl *)4);
  }
  v9 = *((unsigned int *)this + 31);
  if ((_DWORD)v9)
  {
    v10 = *((_QWORD *)this + 14);
    v81 = WebCore::Style::compareRules;
    result = (__int16 *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(v10, (__int128 *)(v10 + 24 * v9), (uint64_t (**)(__int128 *, __int128 *))&v81, 126 - 2 * __clz(v9), 1);
    if (*((_BYTE *)this + 104) != 1)
    {
      v12 = *((_QWORD *)this + 212);
      v13 = *((unsigned int *)this + 31);
      if (*(_DWORD *)(v12 + 48) < v13)
      {
        if (v13 >> 28)
        {
          __break(0xC471u);
          return result;
        }
        v14 = *(WTF **)(v12 + 40);
        v15 = *(unsigned int *)(v12 + 52);
        result = (__int16 *)WTF::fastMalloc((WTF *)(16 * v13));
        *(_DWORD *)(v12 + 48) = v13;
        *(_QWORD *)(v12 + 40) = result;
        if ((_DWORD)v15)
        {
          v54 = result;
          v55 = (WTF *)((char *)v14 + 16 * v15);
          v56 = v14;
          do
          {
            v57 = *(_QWORD *)v56;
            *(_QWORD *)v56 = 0;
            *(_QWORD *)v54 = v57;
            *((_QWORD *)v54 + 1) = *((_QWORD *)v56 + 1);
            v58 = *(_QWORD *)v56;
            *(_QWORD *)v56 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 1)
              {
                v79 = v55;
                v80 = v56;
                if ((*(_BYTE *)(v58 + 4) & 8) != 0)
                {
                  v62 = *(unsigned int *)(v58 + 28);
                  if ((_DWORD)v62)
                  {
                    v63 = 16 * v62;
                    v64 = (_DWORD **)(*(_QWORD *)(v58 + 16) + 8);
                    do
                    {
                      v65 = *v64;
                      *v64 = 0;
                      if (v65)
                      {
                        if (*v65 == 2)
                        {
                          v78 = v63;
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v65, v11);
                          v63 = v78;
                        }
                        else
                        {
                          *v65 -= 2;
                        }
                      }
                      v64 += 2;
                      v63 -= 16;
                    }
                    while (v63);
                  }
                  v66 = *(WTF **)(v58 + 16);
                  if ((WTF *)(v58 + 32) != v66 && v66 != 0)
                  {
                    *(_QWORD *)(v58 + 16) = 0;
                    *(_DWORD *)(v58 + 24) = 0;
                    WTF::fastFree(v66, v11);
                  }
                  v68 = *(_QWORD *)(v58 + 8);
                  *(_QWORD *)(v58 + 8) = 0;
                  if (v68)
                    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
                  v69 = (WTF *)v58;
                }
                else
                {
                  WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v58, v11);
                }
                result = (__int16 *)WTF::fastFree(v69, v11);
                v55 = v79;
                v56 = v80;
              }
              else
              {
                --*(_DWORD *)v58;
              }
            }
            v54 += 8;
            v56 = (WTF *)((char *)v56 + 16);
          }
          while (v56 != v55);
        }
        if (v14)
        {
          if (*(WTF **)(v12 + 40) == v14)
          {
            *(_QWORD *)(v12 + 40) = 0;
            *(_DWORD *)(v12 + 48) = 0;
          }
          result = (__int16 *)WTF::fastFree(v14, v11);
        }
      }
    }
    for (i = *((_QWORD *)this + 208); i < *((unsigned int *)this + 31); *((_QWORD *)this + 208) = i)
    {
      v17 = *((_QWORD *)this + 14);
      v18 = (BOOL (***)(uint64_t, uint64_t))(v17 + 24 * i);
      if (*((_BYTE *)this + 104) == 1)
      {
        result = (__int16 *)((char *)this + 1672);
        v75 = **v18;
        v81 = v75;
        v76 = *((unsigned int *)this + 421);
        if ((_DWORD)v76 == *((_DWORD *)this + 420))
        {
          result = (__int16 *)WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>((uint64_t)result, (_DWORD **)&v81);
        }
        else
        {
          v77 = *(_QWORD *)result;
          if (v75)
            ++*(_DWORD *)v75;
          *(_QWORD *)(v77 + 8 * v76) = v75;
          *((_DWORD *)this + 421) = v76 + 1;
        }
        goto LABEL_36;
      }
      v19 = *v18;
      v20 = (BOOL (*)(uint64_t, uint64_t))*((_QWORD *)**v18 + 1);
      v21 = *(_DWORD *)v20 + 1;
      *(_DWORD *)v20 = v21;
      v81 = v20;
      v22 = ((unint64_t)v19[1] >> 58) & 3;
      LOBYTE(v82) = ((unint64_t)v19[1] >> 58) & 3;
      v23 = ((unint64_t)v19[1] >> 60) & 3;
      HIBYTE(v82) = ((unint64_t)v19[1] >> 60) & 3;
      v24 = v17 + 24 * i;
      v25 = *(unsigned __int8 *)(v24 + 16);
      v83 = *(_BYTE *)(v24 + 16);
      v84 = 0;
      v26 = *(unsigned __int16 *)(v24 + 18);
      v85 = *(_WORD *)(v24 + 18);
      v27 = (unint64_t)v19[1] & 0x4000000000000000;
      v86 = v27 != 0;
      v87 = 2;
      v28 = *((_QWORD *)this + 212);
      result = (__int16 *)(v28 + 40);
      v29 = *(unsigned int *)(v28 + 52);
      if ((_DWORD)v29
        && (v30 = v29 - 1,
            v31 = *(_QWORD *)result,
            *(BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16 * (v29 - 1)) == v20)
        && (v32 = v31 + 16 * v30,
            v11 = (WTF::StringImpl *)*(unsigned __int8 *)(v32 + 8),
            __PAIR64__(*(unsigned __int8 *)(v32 + 9), v11) == __PAIR64__(v23, v22))
        && (v33 = v31 + 16 * v30, *(unsigned __int8 *)(v33 + 10) == v25)
        && !*(_BYTE *)(v33 + 11)
        && (v34 = v31 + 16 * v30, *(unsigned __int16 *)(v34 + 12) == v26)
        && (v27 != 0) != (*(_BYTE *)(v34 + 14) == 0)
        && *(_BYTE *)(v31 + 16 * v30 + 15) == 2)
      {
        v81 = 0;
      }
      else
      {
        if (v27 >> 62)
          *(_BYTE *)(v28 + 2) = 1;
        if ((_DWORD)v29 == *(_DWORD *)(v28 + 48))
        {
          v45 = (_QWORD *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v29 + 1, (unint64_t)&v81);
          v46 = *(_QWORD *)(v28 + 40);
          v47 = *v45;
          *v45 = 0;
          result = (__int16 *)(v45 + 1);
          v48 = (_QWORD *)(v46 + 16 * *(unsigned int *)(v28 + 52));
          *v48 = v47;
          v36 = v48 + 1;
        }
        else
        {
          v35 = (BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16 * v29);
          v81 = 0;
          *v35 = v20;
          v36 = v35 + 1;
          result = &v82;
        }
        *v36 = *(_QWORD *)result;
        ++*(_DWORD *)(v28 + 52);
        v20 = v81;
        v81 = 0;
        if (!v20)
          goto LABEL_36;
        v21 = *(_DWORD *)v20;
      }
      v37 = v21 - 1;
      if (v37)
      {
        *(_DWORD *)v20 = v37;
      }
      else
      {
        v49 = *((unsigned int *)v20 + 1);
        if ((v49 & 8) != 0)
        {
          v50 = *((unsigned int *)v20 + 7);
          if ((_DWORD)v50)
          {
            v40 = 16 * v50;
            v39 = (_DWORD **)(*((_QWORD *)v20 + 2) + 8);
            do
            {
              v38 = *v39;
              *v39 = 0;
              if (v38)
              {
                if (*v38 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v38, v11);
                else
                  *v38 -= 2;
              }
              v39 += 2;
              v40 -= 16;
            }
            while (v40);
          }
          v51 = (WTF *)*((_QWORD *)v20 + 2);
          if ((WTF *)((char *)v20 + 32) != v51 && v51 != 0)
          {
            *((_QWORD *)v20 + 2) = 0;
            *((_DWORD *)v20 + 6) = 0;
            WTF::fastFree(v51, v11);
          }
          v53 = *((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = 0;
          if (v53)
            (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
        }
        else if (v49 >= 0x10)
        {
          v71 = 0;
          v72 = (unsigned int *)((char *)v20 + ((v49 >> 3) & 0x1FFFFFFE) + 8);
          do
          {
            v73 = (_DWORD *)(*v72 | ((unint64_t)*((unsigned __int8 *)v72 + 4) << 32));
            if (*v73 == 2)
            {
              v74 = v72;
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v73, v11);
              v72 = v74;
            }
            else
            {
              *v73 -= 2;
            }
            ++v71;
            v72 = (unsigned int *)((char *)v72 + 5);
          }
          while (v71 < (unint64_t)*((unsigned int *)v20 + 1) >> 4);
        }
        result = (__int16 *)WTF::fastFree((WTF *)v20, v11);
      }
LABEL_36:
      i = *((_QWORD *)this + 208) + 1;
    }
  }
  return result;
}

BOOL WebCore::Style::ElementRuleCollector::matchesAnyAuthorRules(WebCore::Style::ElementRuleCollector *this, void *a2)
{
  WTF *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  WebCore::Style::Scope **v18;
  uint64_t v19;
  __int16 v20;

  if (*((_DWORD *)this + 30))
  {
    if (*((_DWORD *)this + 31))
      *((_DWORD *)this + 31) = 0;
    v3 = (WTF *)*((_QWORD *)this + 14);
    v4 = (char *)this + 128;
    if ((WebCore::Style::ElementRuleCollector *)((char *)this + 128) != v3)
    {
      if (!v3)
        goto LABEL_34;
      *((_QWORD *)this + 14) = 0;
      *((_DWORD *)this + 30) = 0;
      WTF::fastFree(v3, a2);
      v4 = (char *)this + 128;
      v3 = (WTF *)*((_QWORD *)this + 14);
    }
    if (v3)
      goto LABEL_6;
LABEL_34:
    *((_QWORD *)this + 14) = v4;
    *((_DWORD *)this + 30) = 64;
  }
LABEL_6:
  *((_QWORD *)this + 208) = 0;
  v19 = *((_QWORD *)this + 1);
  v20 = 0;
  WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)this, (uint64_t)&v19);
  v5 = *(_QWORD *)this;
  v6 = *(_QWORD *)(*(_QWORD *)this + 32);
  if (v6)
  {
    if ((*(_WORD *)(v6 + 28) & 8) != 0)
    {
      v7 = *(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL;
      if (v7)
      {
        if (*(_QWORD *)(v7 + 88))
        {
          WebCore::Style::ElementRuleCollector::matchSlottedPseudoElementRules(this, 4);
          v5 = *(_QWORD *)this;
        }
      }
    }
  }
  v8 = *(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 88);
    if (v10)
    {
      v11 = WebCore::Style::Scope::resolver(*(WebCore::Style::Scope **)(v10 + 216));
      v12 = *(_QWORD *)(v11 + 32);
      if (v12)
      {
        if (*(_DWORD *)(v12 + 180))
        {
          v19 = *(_QWORD *)(v11 + 32);
          v20 = 127;
          WebCore::Style::ElementRuleCollector::collectMatchingRulesForList((uint64_t)this, v12 + 168);
        }
      }
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)this + 22) & 0x10) != 0)
  {
    v13 = **(_QWORD **)(*(_QWORD *)this + 40);
    if (v13)
      v14 = (*(_WORD *)(v13 + 28) & 0x80) == 0;
    else
      v14 = 1;
    if (!v14 && !*(_BYTE *)(v13 + 193))
    {
      v15 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v13 + 200) + 8) + 40);
      if (*v15)
        v16 = (*(_WORD *)(*v15 + 28) & 0x80) == 0;
      else
        v16 = 1;
      if (v16)
        v18 = (WebCore::Style::Scope **)(v15[1] + 1328);
      else
        v18 = (WebCore::Style::Scope **)(*v15 + 216);
      v17 = WebCore::Style::Scope::resolver(*v18);
      if (*(_QWORD *)(v17 + 32))
      {
        v19 = *(_QWORD *)(v17 + 32);
        v20 = 255;
        WebCore::Style::ElementRuleCollector::collectMatchingUserAgentPartRules(this, &v19);
      }
    }
    WebCore::Style::ElementRuleCollector::matchPartPseudoElementRules((uint64_t)this, (WTF::StringImpl *)4);
  }
  return *((_DWORD *)this + 31) != 0;
}

uint64_t WebCore::Style::ElementRuleCollector::matchPartPseudoElementRulesForScope(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  WebCore::Style::Scope *v10;
  uint64_t result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::ShadowRoot *v14;
  uint64_t v15;
  uint64_t v17;
  WebCore::Style::Scope **v18;

  v6 = 0;
  v7 = a2;
  do
  {
    v8 = *(_QWORD **)(v7 + 40);
    if (*v8)
      v9 = (*(_WORD *)(*v8 + 28) & 0x80) == 0;
    else
      v9 = 1;
    if (v9)
      v18 = (WebCore::Style::Scope **)(v8[1] + 1328);
    else
      v18 = (WebCore::Style::Scope **)(*v8 + 216);
    v10 = *v18;
    result = WebCore::Style::Scope::resolver(*v18);
    if (*(_BYTE *)(result + 349))
    {
      v12 = WebCore::Style::Scope::resolver(v10);
      result = WebCore::Style::ScopeRuleSets::styleForCascadeLevel((WebCore::Style::ScopeRuleSets *)(v12 + 32), a3);
      if (result)
      {
        result = (uint64_t)WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(a1, result + 264);
        if (v7 != a2)
        {
          v14 = (*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) != 0
              ? *(WebCore::ShadowRoot **)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
              : 0;
          result = (uint64_t)WebCore::ShadowRoot::partMappings(v14, v13);
          if (!*(_QWORD *)result || !*(_DWORD *)(*(_QWORD *)result - 12))
            break;
        }
        if (v6 == 128)
          break;
      }
    }
    v15 = **(_QWORD **)(v7 + 40);
    if (!v15 || (*(_WORD *)(v15 + 28) & 0x80) == 0)
      break;
    v17 = *(_QWORD *)(v15 + 200);
    if (!v17)
      break;
    v7 = *(_QWORD *)(v17 + 8);
    --v6;
  }
  while (v7);
  return result;
}

__int16 *WebCore::Style::ElementRuleCollector::matchUserRules(__int16 *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  unint64_t i;
  uint64_t v15;
  BOOL (***v16)(uint64_t, uint64_t);
  BOOL (**v17)(uint64_t, uint64_t);
  BOOL (*v18)(uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL (**v33)(uint64_t, uint64_t);
  _QWORD *v34;
  int v35;
  _DWORD *v36;
  _DWORD **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v51;
  __int16 *v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  BOOL v58;
  uint64_t v59;
  BOOL (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _DWORD **v63;
  _DWORD *v64;
  WTF *v65;
  uint64_t v67;
  WTF *v68;
  WebCore::Style::Scope **v69;
  unint64_t v70;
  unsigned int *v71;
  _DWORD *v72;
  unsigned int *v73;
  BOOL (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF *v78;
  WTF *v79;
  BOOL (*v80)(uint64_t, uint64_t);
  __int16 v81;
  char v82;
  char v83;
  __int16 v84;
  BOOL v85;
  char v86;

  v2 = (uint64_t)this;
  if (!*((_DWORD *)this + 30))
    goto LABEL_6;
  if (*((_DWORD *)this + 31))
    *((_DWORD *)this + 31) = 0;
  this = (__int16 *)*((_QWORD *)this + 14);
  if ((__int16 *)(v2 + 128) != this)
  {
    if (!this)
      goto LABEL_116;
    *(_QWORD *)(v2 + 112) = 0;
    *(_DWORD *)(v2 + 120) = 0;
    WTF::fastFree((WTF *)this, a2);
    this = *(__int16 **)(v2 + 112);
  }
  if (!this)
  {
LABEL_116:
    *(_QWORD *)(v2 + 112) = v2 + 128;
    *(_DWORD *)(v2 + 120) = 64;
  }
LABEL_6:
  *(_QWORD *)(v2 + 1664) = 0;
  if (*(_QWORD *)(v2 + 16))
  {
    v80 = *(BOOL (**)(uint64_t, uint64_t))(v2 + 16);
    v81 = 0;
    this = (__int16 *)WebCore::Style::ElementRuleCollector::collectMatchingRules(v2, (uint64_t)&v80);
  }
  v3 = *(_QWORD *)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 32);
  if (v4)
  {
    if ((*(_WORD *)(v4 + 28) & 8) != 0)
    {
      v5 = *(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL;
      if (v5)
      {
        if (*(_QWORD *)(v5 + 88))
        {
          this = (__int16 *)WebCore::Style::ElementRuleCollector::matchSlottedPseudoElementRules((WTF::StringImpl *)v2, 2);
          v3 = *(_QWORD *)v2;
        }
      }
    }
  }
  v6 = *(_QWORD *)(v3 + 72) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v39 = *(_QWORD *)(v6 + 88);
    if (v39)
    {
      v40 = WebCore::Style::Scope::resolver(*(WebCore::Style::Scope **)(v39 + 216));
      this = (__int16 *)WebCore::Style::ScopeRuleSets::styleForCascadeLevel((WebCore::Style::ScopeRuleSets *)(v40 + 32), 2);
      if (this)
      {
        if (*((_DWORD *)this + 45))
        {
          v80 = (BOOL (*)(uint64_t, uint64_t))this;
          v81 = 127;
          this = (__int16 *)WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(v2, (uint64_t)(this + 84));
        }
      }
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)v2 + 22) & 0x10) != 0)
  {
    v41 = **(_QWORD **)(*(_QWORD *)v2 + 40);
    if (v41)
      v42 = (*(_WORD *)(v41 + 28) & 0x80) == 0;
    else
      v42 = 1;
    if (!v42 && !*(_BYTE *)(v41 + 193))
    {
      v57 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v41 + 200) + 8) + 40);
      v58 = !*v57 || (*(_WORD *)(*v57 + 28) & 0x80) == 0;
      v69 = (WebCore::Style::Scope **)(v58 ? v57[1] + 1328 : *v57 + 216);
      v59 = WebCore::Style::Scope::resolver(*v69);
      v60 = (BOOL (*)(uint64_t, uint64_t))WebCore::Style::ScopeRuleSets::styleForCascadeLevel((WebCore::Style::ScopeRuleSets *)(v59 + 32), 2);
      if (v60)
      {
        v80 = v60;
        v81 = 255;
        WebCore::Style::ElementRuleCollector::collectMatchingUserAgentPartRules((_QWORD *)v2, (uint64_t *)&v80);
      }
    }
    this = (__int16 *)WebCore::Style::ElementRuleCollector::matchPartPseudoElementRules(v2, (WTF::StringImpl *)2);
  }
  v7 = *(unsigned int *)(v2 + 124);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(v2 + 112);
    v80 = WebCore::Style::compareRules;
    this = (__int16 *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(v8, (__int128 *)(v8 + 24 * v7), (uint64_t (**)(__int128 *, __int128 *))&v80, 126 - 2 * __clz(v7), 1);
    if (*(_BYTE *)(v2 + 104) != 1)
    {
      v10 = *(_QWORD *)(v2 + 1696);
      v11 = *(unsigned int *)(v2 + 124);
      if (*(_DWORD *)(v10 + 32) < v11)
      {
        if (v11 >> 28)
        {
          __break(0xC471u);
          return this;
        }
        v12 = *(WTF **)(v10 + 24);
        v13 = *(unsigned int *)(v10 + 36);
        this = (__int16 *)WTF::fastMalloc((WTF *)(16 * v11));
        *(_DWORD *)(v10 + 32) = v11;
        *(_QWORD *)(v10 + 24) = this;
        if ((_DWORD)v13)
        {
          v52 = this;
          v53 = (WTF *)((char *)v12 + 16 * v13);
          v54 = v12;
          do
          {
            v55 = *(_QWORD *)v54;
            *(_QWORD *)v54 = 0;
            *(_QWORD *)v52 = v55;
            *((_QWORD *)v52 + 1) = *((_QWORD *)v54 + 1);
            v56 = *(_QWORD *)v54;
            *(_QWORD *)v54 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 1)
              {
                v78 = v53;
                v79 = v54;
                if ((*(_BYTE *)(v56 + 4) & 8) != 0)
                {
                  v61 = *(unsigned int *)(v56 + 28);
                  if ((_DWORD)v61)
                  {
                    v62 = 16 * v61;
                    v63 = (_DWORD **)(*(_QWORD *)(v56 + 16) + 8);
                    do
                    {
                      v64 = *v63;
                      *v63 = 0;
                      if (v64)
                      {
                        if (*v64 == 2)
                        {
                          v77 = v62;
                          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v64, v9);
                          v62 = v77;
                        }
                        else
                        {
                          *v64 -= 2;
                        }
                      }
                      v63 += 2;
                      v62 -= 16;
                    }
                    while (v62);
                  }
                  v65 = *(WTF **)(v56 + 16);
                  if ((WTF *)(v56 + 32) != v65 && v65 != 0)
                  {
                    *(_QWORD *)(v56 + 16) = 0;
                    *(_DWORD *)(v56 + 24) = 0;
                    WTF::fastFree(v65, v9);
                  }
                  v67 = *(_QWORD *)(v56 + 8);
                  *(_QWORD *)(v56 + 8) = 0;
                  if (v67)
                    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
                  v68 = (WTF *)v56;
                }
                else
                {
                  WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)v56, v9);
                }
                this = (__int16 *)WTF::fastFree(v68, v9);
                v53 = v78;
                v54 = v79;
              }
              else
              {
                --*(_DWORD *)v56;
              }
            }
            v52 += 8;
            v54 = (WTF *)((char *)v54 + 16);
          }
          while (v54 != v53);
        }
        if (v12)
        {
          if (*(WTF **)(v10 + 24) == v12)
          {
            *(_QWORD *)(v10 + 24) = 0;
            *(_DWORD *)(v10 + 32) = 0;
          }
          this = (__int16 *)WTF::fastFree(v12, v9);
        }
      }
    }
    for (i = *(_QWORD *)(v2 + 1664); i < *(unsigned int *)(v2 + 124); *(_QWORD *)(v2 + 1664) = i)
    {
      v15 = *(_QWORD *)(v2 + 112);
      v16 = (BOOL (***)(uint64_t, uint64_t))(v15 + 24 * i);
      if (*(_BYTE *)(v2 + 104) == 1)
      {
        this = (__int16 *)(v2 + 1672);
        v74 = **v16;
        v80 = v74;
        v75 = *(unsigned int *)(v2 + 1684);
        if ((_DWORD)v75 == *(_DWORD *)(v2 + 1680))
        {
          this = (__int16 *)WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>((uint64_t)this, (_DWORD **)&v80);
        }
        else
        {
          v76 = *(_QWORD *)this;
          if (v74)
            ++*(_DWORD *)v74;
          *(_QWORD *)(v76 + 8 * v75) = v74;
          *(_DWORD *)(v2 + 1684) = v75 + 1;
        }
        goto LABEL_38;
      }
      v17 = *v16;
      v18 = (BOOL (*)(uint64_t, uint64_t))*((_QWORD *)**v16 + 1);
      v19 = *(_DWORD *)v18 + 1;
      *(_DWORD *)v18 = v19;
      v80 = v18;
      v20 = ((unint64_t)v17[1] >> 58) & 3;
      LOBYTE(v81) = ((unint64_t)v17[1] >> 58) & 3;
      v21 = ((unint64_t)v17[1] >> 60) & 3;
      HIBYTE(v81) = ((unint64_t)v17[1] >> 60) & 3;
      v22 = v15 + 24 * i;
      v23 = *(unsigned __int8 *)(v22 + 16);
      v82 = *(_BYTE *)(v22 + 16);
      v83 = 0;
      v24 = *(unsigned __int16 *)(v22 + 18);
      v84 = *(_WORD *)(v22 + 18);
      v25 = (unint64_t)v17[1] & 0x4000000000000000;
      v85 = v25 != 0;
      v86 = 2;
      v26 = *(_QWORD *)(v2 + 1696);
      this = (__int16 *)(v26 + 24);
      v27 = *(unsigned int *)(v26 + 36);
      if ((_DWORD)v27
        && (v28 = v27 - 1,
            v29 = *(_QWORD *)this,
            *(BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)this + 16 * (v27 - 1)) == v18)
        && (v30 = v29 + 16 * v28,
            v9 = (WTF::StringImpl *)*(unsigned __int8 *)(v30 + 8),
            __PAIR64__(*(unsigned __int8 *)(v30 + 9), v9) == __PAIR64__(v21, v20))
        && (v31 = v29 + 16 * v28, *(unsigned __int8 *)(v31 + 10) == v23)
        && !*(_BYTE *)(v31 + 11)
        && (v32 = v29 + 16 * v28, *(unsigned __int16 *)(v32 + 12) == v24)
        && (v25 != 0) != (*(_BYTE *)(v32 + 14) == 0)
        && *(_BYTE *)(v29 + 16 * v28 + 15) == 2)
      {
        v80 = 0;
      }
      else
      {
        if (v25 >> 62)
          *(_BYTE *)(v26 + 2) = 1;
        if ((_DWORD)v27 == *(_DWORD *)(v26 + 32))
        {
          v43 = (_QWORD *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this, v27 + 1, (unint64_t)&v80);
          v44 = *(_QWORD *)(v26 + 24);
          v45 = *v43;
          *v43 = 0;
          this = (__int16 *)(v43 + 1);
          v46 = (_QWORD *)(v44 + 16 * *(unsigned int *)(v26 + 36));
          *v46 = v45;
          v34 = v46 + 1;
        }
        else
        {
          v33 = (BOOL (**)(uint64_t, uint64_t))(*(_QWORD *)this + 16 * v27);
          v80 = 0;
          *v33 = v18;
          v34 = v33 + 1;
          this = &v81;
        }
        *v34 = *(_QWORD *)this;
        ++*(_DWORD *)(v26 + 36);
        v18 = v80;
        v80 = 0;
        if (!v18)
          goto LABEL_38;
        v19 = *(_DWORD *)v18;
      }
      v35 = v19 - 1;
      if (v35)
      {
        *(_DWORD *)v18 = v35;
      }
      else
      {
        v47 = *((unsigned int *)v18 + 1);
        if ((v47 & 8) != 0)
        {
          v48 = *((unsigned int *)v18 + 7);
          if ((_DWORD)v48)
          {
            v38 = 16 * v48;
            v37 = (_DWORD **)(*((_QWORD *)v18 + 2) + 8);
            do
            {
              v36 = *v37;
              *v37 = 0;
              if (v36)
              {
                if (*v36 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v9);
                else
                  *v36 -= 2;
              }
              v37 += 2;
              v38 -= 16;
            }
            while (v38);
          }
          v49 = (WTF *)*((_QWORD *)v18 + 2);
          if ((WTF *)((char *)v18 + 32) != v49 && v49 != 0)
          {
            *((_QWORD *)v18 + 2) = 0;
            *((_DWORD *)v18 + 6) = 0;
            WTF::fastFree(v49, v9);
          }
          v51 = *((_QWORD *)v18 + 1);
          *((_QWORD *)v18 + 1) = 0;
          if (v51)
            (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
        }
        else if (v47 >= 0x10)
        {
          v70 = 0;
          v71 = (unsigned int *)((char *)v18 + ((v47 >> 3) & 0x1FFFFFFE) + 8);
          do
          {
            v72 = (_DWORD *)(*v71 | ((unint64_t)*((unsigned __int8 *)v71 + 4) << 32));
            if (*v72 == 2)
            {
              v73 = v71;
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v72, v9);
              v71 = v73;
            }
            else
            {
              *v72 -= 2;
            }
            ++v70;
            v71 = (unsigned int *)((char *)v71 + 5);
          }
          while (v70 < (unint64_t)*((unsigned int *)v18 + 1) >> 4);
        }
        this = (__int16 *)WTF::fastFree((WTF *)v18, v9);
      }
LABEL_38:
      i = *(_QWORD *)(v2 + 1664) + 1;
    }
  }
  return this;
}

WebCore::ImmutableStyleProperties *WebCore::Style::ElementRuleCollector::matchUARules(WebCore::Style::ElementRuleCollector *this, const WebCore::Style::RuleSet *a2)
{
  WTF *v4;
  WebCore::ImmutableStyleProperties *result;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  WebCore::ImmutableStyleProperties ***v15;
  WebCore::ImmutableStyleProperties **v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::ImmutableStyleProperties **v31;
  _QWORD *v32;
  __int16 *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  WTF *v41;
  WebCore::MutableStyleProperties *v42;
  WebCore::MutableStyleProperties *v43;
  WTF *v44;
  void *v45;
  WebCore::ImmutableStyleProperties *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WebCore::ImmutableStyleProperties *v52;
  __int16 v53;
  char v54;
  char v55;
  __int16 v56;
  BOOL v57;
  char v58;

  if (!*((_DWORD *)this + 30))
    goto LABEL_6;
  if (*((_DWORD *)this + 31))
    *((_DWORD *)this + 31) = 0;
  v4 = (WTF *)*((_QWORD *)this + 14);
  if ((WebCore::Style::ElementRuleCollector *)((char *)this + 128) != v4)
  {
    if (!v4)
      goto LABEL_55;
    *((_QWORD *)this + 14) = 0;
    *((_DWORD *)this + 30) = 0;
    WTF::fastFree(v4, a2);
    v4 = (WTF *)*((_QWORD *)this + 14);
  }
  if (!v4)
  {
LABEL_55:
    *((_QWORD *)this + 14) = (char *)this + 128;
    *((_DWORD *)this + 30) = 64;
  }
LABEL_6:
  *((_QWORD *)this + 208) = 0;
  v52 = a2;
  v53 = 0;
  result = (WebCore::ImmutableStyleProperties *)WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)this, (uint64_t)&v52);
  v6 = *((unsigned int *)this + 31);
  if ((_DWORD)v6)
  {
    v7 = *((_QWORD *)this + 14);
    v52 = (WebCore::ImmutableStyleProperties *)WebCore::Style::compareRules;
    result = (WebCore::ImmutableStyleProperties *)std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,false>(v7, (__int128 *)(v7 + 24 * v6), (uint64_t (**)(__int128 *, __int128 *))&v52, 126 - 2 * __clz(v6), 1);
    if (*((_BYTE *)this + 104) != 1)
    {
      v9 = *((_QWORD *)this + 212);
      v10 = *((unsigned int *)this + 31);
      if (*(_DWORD *)(v9 + 16) < v10)
      {
        if (v10 >> 28)
        {
          __break(0xC471u);
          return result;
        }
        v11 = *(WTF **)(v9 + 8);
        v12 = *(unsigned int *)(v9 + 20);
        result = (WebCore::ImmutableStyleProperties *)WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(v9 + 16) = v10;
        *(_QWORD *)(v9 + 8) = result;
        if ((_DWORD)v12)
        {
          v40 = (WTF *)((char *)v11 + 16 * v12);
          v41 = v11;
          do
          {
            v42 = *(WebCore::MutableStyleProperties **)v41;
            *(_QWORD *)v41 = 0;
            *(_QWORD *)result = v42;
            *((_QWORD *)result + 1) = *((_QWORD *)v41 + 1);
            v43 = *(WebCore::MutableStyleProperties **)v41;
            *(_QWORD *)v41 = 0;
            if (v43)
            {
              if (*(_DWORD *)v43 == 1)
              {
                v50 = v40;
                v51 = v41;
                v49 = (uint64_t)result;
                if ((*((_BYTE *)v43 + 4) & 8) != 0)
                  WebCore::MutableStyleProperties::~MutableStyleProperties(v43, (WTF::StringImpl *)v8);
                else
                  WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(v43, (WTF::StringImpl *)v8);
                WTF::fastFree(v44, v45);
                result = (WebCore::ImmutableStyleProperties *)v49;
                v40 = v50;
                v41 = v51;
              }
              else
              {
                --*(_DWORD *)v43;
              }
            }
            v41 = (WTF *)((char *)v41 + 16);
            result = (WebCore::ImmutableStyleProperties *)((char *)result + 16);
          }
          while (v41 != v40);
        }
        if (v11)
        {
          if (*(WTF **)(v9 + 8) == v11)
          {
            *(_QWORD *)(v9 + 8) = 0;
            *(_DWORD *)(v9 + 16) = 0;
          }
          result = (WebCore::ImmutableStyleProperties *)WTF::fastFree(v11, v8);
        }
      }
    }
    for (i = *((_QWORD *)this + 208); i < *((unsigned int *)this + 31); *((_QWORD *)this + 208) = i)
    {
      v14 = *((_QWORD *)this + 14);
      v15 = (WebCore::ImmutableStyleProperties ***)(v14 + 24 * i);
      if (*((_BYTE *)this + 104) == 1)
      {
        result = (WebCore::Style::ElementRuleCollector *)((char *)this + 1672);
        v46 = **v15;
        v52 = v46;
        v47 = *((unsigned int *)this + 421);
        if ((_DWORD)v47 == *((_DWORD *)this + 420))
        {
          result = (WebCore::ImmutableStyleProperties *)WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>((uint64_t)result, (_DWORD **)&v52);
        }
        else
        {
          v48 = *(_QWORD *)result;
          if (v46)
            ++*(_DWORD *)v46;
          *(_QWORD *)(v48 + 8 * v47) = v46;
          *((_DWORD *)this + 421) = v47 + 1;
        }
        goto LABEL_32;
      }
      v16 = *v15;
      result = (WebCore::ImmutableStyleProperties *)*((_QWORD *)**v15 + 1);
      v17 = *(_DWORD *)result + 1;
      *(_DWORD *)result = v17;
      v52 = result;
      v18 = ((unint64_t)v16[1] >> 58) & 3;
      LOBYTE(v53) = ((unint64_t)v16[1] >> 58) & 3;
      v19 = ((unint64_t)v16[1] >> 60) & 3;
      HIBYTE(v53) = ((unint64_t)v16[1] >> 60) & 3;
      v20 = v14 + 24 * i;
      v21 = *(unsigned __int8 *)(v20 + 16);
      v54 = *(_BYTE *)(v20 + 16);
      v55 = 0;
      v22 = *(unsigned __int16 *)(v20 + 18);
      v56 = *(_WORD *)(v20 + 18);
      v23 = (unint64_t)v16[1] & 0x4000000000000000;
      v57 = v23 != 0;
      v58 = 2;
      v24 = *((_QWORD *)this + 212);
      v25 = (uint64_t *)(v24 + 8);
      v26 = *(unsigned int *)(v24 + 20);
      if ((_DWORD)v26
        && (v27 = v26 - 1, v28 = *v25,
                           v8 = *(unsigned __int8 **)(*v25 + 16 * (v26 - 1)),
                           v8 == (unsigned __int8 *)result)
        && (v8 = (unsigned __int8 *)(v28 + 16 * v27), v8[8] == (_DWORD)v18)
        && v8[9] == (_DWORD)v19
        && (v29 = v28 + 16 * v27, *(unsigned __int8 *)(v29 + 10) == v21)
        && !*(_BYTE *)(v29 + 11)
        && (v30 = v28 + 16 * v27, *(unsigned __int16 *)(v30 + 12) == v22)
        && (v23 != 0) != (*(_BYTE *)(v30 + 14) == 0)
        && *(_BYTE *)(v28 + 16 * v27 + 15) == 2)
      {
        v52 = 0;
      }
      else
      {
        if (v23 >> 62)
          *(_BYTE *)(v24 + 2) = 1;
        if ((_DWORD)v26 == *(_DWORD *)(v24 + 16))
        {
          v34 = (uint64_t *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v24 + 8, v26 + 1, (unint64_t)&v52);
          v35 = *(_QWORD *)(v24 + 8);
          v36 = *v34;
          *v34 = 0;
          v33 = (__int16 *)(v34 + 1);
          v37 = (_QWORD *)(v35 + 16 * *(unsigned int *)(v24 + 20));
          *v37 = v36;
          v32 = v37 + 1;
        }
        else
        {
          v31 = (WebCore::ImmutableStyleProperties **)(*v25 + 16 * v26);
          v52 = 0;
          *v31 = result;
          v32 = v31 + 1;
          v33 = &v53;
        }
        *v32 = *(_QWORD *)v33;
        ++*(_DWORD *)(v24 + 20);
        result = v52;
        v52 = 0;
        if (!result)
          goto LABEL_32;
        v17 = *(_DWORD *)result;
      }
      if (v17 == 1)
      {
        if ((*((_BYTE *)result + 4) & 8) != 0)
          WebCore::MutableStyleProperties::~MutableStyleProperties(result, (WTF::StringImpl *)v8);
        else
          WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(result, (WTF::StringImpl *)v8);
        result = (WebCore::ImmutableStyleProperties *)WTF::fastFree(v38, v39);
      }
      else
      {
        *(_DWORD *)result = v17 - 1;
      }
LABEL_32:
      i = *((_QWORD *)this + 208) + 1;
    }
  }
  return result;
}

uint64_t WebCore::Style::ElementRuleCollector::containerQueriesMatch(WebCore::Node **a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  WTF *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  char *v14;
  WTF *v15;
  char v16;
  WebCore::Node *v17;
  uint64_t *v18;
  WebCore::Node *v19;
  char v20;
  uint64_t v21;
  WebCore::Node *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  WTF *v34;
  int v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  int v46;
  unsigned int *v47;
  unsigned int v48;
  WTF *v49;
  uint64_t v50;
  char v51;
  int v52;
  _BOOL8 v53;
  int v54;
  WebCore::Node *v55;
  WTF *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  WTF *v63;
  WebCore::Node *v64;
  WTF *v66;
  uint64_t v67;
  WebCore::Node *v68;
  unsigned __int8 v69;
  char v70;
  uint64_t *v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74[5];
  WebCore::Node *v75;
  int v76;
  char v77;
  __int16 v78;
  char v79;
  char v80;
  char v81;
  int v82;
  char v83;
  WTF *v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  int v88;
  char v89;
  __int16 v90;
  char v91;

  v3 = *(_QWORD *)a3;
  v4 = *(_DWORD *)(a2 + 12) & 0x1FFFFF;
  if (v4 >= *(unsigned int *)(*(_QWORD *)a3 + 764))
    return 1;
  v72 = 0;
  v73 = 0;
  v5 = *(_DWORD *)(*(_QWORD *)(v3 + 752) + 4 * v4);
  if (!v5)
    return 1;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = (v5 - 1);
    if (*(_DWORD *)(v3 + 748) <= v11)
    {
      __break(0xC471u);
LABEL_154:
      JUMPOUT(0x1965850A4);
    }
    v12 = *(_QWORD *)(v3 + 736);
    v13 = (WTF *)(*(_QWORD *)(v12 + 16 * (v5 - 1)) + 24);
    v74[0] = v13;
    if (v10 == (_DWORD)v73)
    {
      v14 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v72, v10 + 1, (unint64_t)v74);
      v10 = HIDWORD(v73);
      v9 = v72;
      *((_QWORD *)v72 + HIDWORD(v73)) = *(_QWORD *)v14;
    }
    else
    {
      *((_QWORD *)v9 + v10) = v13;
    }
    HIDWORD(v73) = ++v10;
    v5 = *(_DWORD *)(v12 + 16 * v11 + 8);
  }
  while (v5);
  v15 = v72;
  if (!v10)
  {
    v53 = 1;
    if (v72)
      goto LABEL_142;
    return v53;
  }
  if (a3[9])
    v16 = 2;
  else
    v16 = *(_BYTE *)(a2 + 15) & 1;
  v17 = a1[5];
  if (v17)
    v18 = (uint64_t *)((char *)v17 + 4112);
  else
    v18 = 0;
  v19 = *a1;
  v20 = a3[8];
  *((_DWORD *)v19 + 6) = *((_DWORD *)*a1 + 6) + 2;
  v68 = v19;
  v69 = v16;
  v70 = v20;
  v71 = v18;
  v66 = (WTF *)((char *)v15 + 8 * v10);
  while (1)
  {
    v21 = *(_QWORD *)v15;
    if (*(_BYTE *)(*(_QWORD *)v15 + 41))
      break;
    v22 = v68;
    *((_DWORD *)v68 + 6) += 2;
    v23 = WebCore::Style::ContainerQueryEvaluator::selectContainer(*(_BYTE *)(v21 + 40), v21, (uint64_t)v22, v69, v70, v71);
    if (!v23)
    {
      v35 = 0;
      LOBYTE(v74[0]) = 0;
      v87 = 0;
      goto LABEL_89;
    }
    v24 = v23;
    *(_DWORD *)(v23 + 24) += 2;
    if (*(_BYTE *)(v21 + 40))
      v25 = 1;
    else
      v25 = v71 == 0;
    if (v25)
    {
      if ((*(_QWORD *)(v23 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v27 = *(WTF **)((*(_QWORD *)(v23 + 72) & 0xFFFFFFFFFFFFLL) + 0x30);
        if (v27)
          goto LABEL_29;
        v27 = *(WTF **)((*(_QWORD *)(v23 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
        if (v27)
        {
          v36 = *((_QWORD *)v27 + 2) & 0x1FLL;
          if (v36 == 26 || v36 == 18)
            goto LABEL_29;
        }
      }
      v26 = *(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL;
      if (v26)
      {
        if ((*(_BYTE *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          v26 = *(_QWORD *)((*(_QWORD *)(v23 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
          if (v26)
            v26 = *(_QWORD *)(v26 + 8);
        }
        v27 = (WTF *)(v26 + 80);
LABEL_29:
        ++*(_DWORD *)v27;
        v29 = *(_QWORD *)(v24 + 32);
        if (v29)
        {
          if ((*(_WORD *)(v29 + 28) & 8) != 0)
          {
            v30 = *(_QWORD *)(v29 + 72) & 0xFFFFFFFFFFFFLL;
            if (v30)
            {
              v38 = *(_QWORD *)(v30 + 88);
              if (v38)
              {
                v39 = *(_QWORD *)(v38 + 224);
                if (v39)
                {
                  v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 16))(v39, v24);
                  if (v32)
                  {
LABEL_54:
                    *(_DWORD *)(v32 + 24) += 2;
                    if (*(_BYTE *)(v21 + 40) || !v71)
                    {
                      if ((*(_QWORD *)(v32 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                      {
                        v34 = *(WTF **)((*(_QWORD *)(v32 + 72) & 0xFFFFFFFFFFFFLL) + 0x30);
                        if (v34)
                          goto LABEL_64;
                        v34 = *(WTF **)((*(_QWORD *)(v32 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
                        if (v34)
                        {
                          v59 = *((_QWORD *)v34 + 2) & 0x1FLL;
                          if (v59 == 26 || v59 == 18)
                            goto LABEL_64;
                        }
                      }
                      v40 = *(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL;
                      if (v40)
                      {
                        if ((*(_BYTE *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                        {
                          v40 = *(_QWORD *)((*(_QWORD *)(v32 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
                          if (v40)
                            v40 = *(_QWORD *)(v40 + 8);
                        }
                        v34 = (WTF *)(v40 + 80);
                        goto LABEL_64;
                      }
                      LOBYTE(v67) = 0;
                      v34 = 0;
LABEL_42:
                      BYTE4(v67) = 1;
                    }
                    else
                    {
                      v34 = (WTF *)WebCore::Style::Update::elementStyle((WebCore::Style::Update *)v71[2], (const WebCore::Element *)v32);
                      if (!v34)
                      {
                        LOBYTE(v67) = 0;
                        goto LABEL_42;
                      }
LABEL_64:
                      v67 = 0;
                      ++*(_DWORD *)v34;
                    }
                    v41 = *(_QWORD *)(*((_QWORD *)v22 + 5) + 8);
                    *(_DWORD *)(v41 + 24) += 2;
                    v42 = *(_QWORD *)(*(_QWORD *)(v41 + 1272) + 64);
                    v43 = v42 & 0xFFFFFFFFFFFFLL;
                    if ((v42 & 0xFFFFFFFFFFFFLL) != 0)
                    {
                      v44 = v42 & 0xFFFFFFFFFFFFLL;
                      if ((*(_BYTE *)((v42 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                      {
                        v61 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFLL) + 0x20);
                        if (v61)
                          v44 = *(_QWORD *)(v61 + 8);
                        else
                          v44 = 0;
                      }
                      v46 = *(_DWORD *)(v44 + 80);
                      v45 = (WTF *)(v44 + 80);
                      *(_DWORD *)v45 = v46 + 1;
                    }
                    else
                    {
                      v45 = 0;
                    }
                    v47 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v41);
                    do
                      v48 = __ldaxr(v47);
                    while (__stlxr(v48 + 1, v47));
                    v49 = *(WTF **)(v41 + 1944);
                    *(_DWORD *)(v24 + 24) += 2;
                    v50 = *(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL;
                    if (v50)
                    {
                      if ((*(_BYTE *)((*(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x196585104);
                      }
                      ++*(_DWORD *)((*(_QWORD *)(v24 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
                    }
                    v74[0] = (WTF *)v47;
                    v74[1] = v27;
                    v74[2] = v45;
                    v74[3] = v34;
                    v74[4] = v49;
                    v75 = (WebCore::Node *)v24;
                    v76 = 1065353216;
                    v77 = 1;
                    v78 = v90;
                    v79 = v91;
                    v80 = 0;
                    v81 = 0;
                    v82 = v88;
                    v83 = v89;
                    v84 = v27;
                    v85 = 0;
                    v86 = v50;
                    v87 = 1;
                    if (v43)
                    {
                      if (!*(_DWORD *)v45)
                      {
                        __break(0xC471u);
                        goto LABEL_154;
                      }
                      --*(_DWORD *)v45;
                    }
                    if (*(_DWORD *)(v41 + 24) == 2)
                    {
                      v51 = BYTE4(v67);
                      if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v41);
                    }
                    else
                    {
                      *(_DWORD *)(v41 + 24) -= 2;
                      v51 = BYTE4(v67);
                    }
                    if ((v51 & 1) == 0)
                    {
                      if (!*(_DWORD *)v34)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x1965850E4);
                      }
                      --*(_DWORD *)v34;
                    }
                    if ((v67 & 1) == 0)
                    {
                      if (*(_DWORD *)(v32 + 24) == 2)
                      {
                        if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v32);
                      }
                      else
                      {
                        *(_DWORD *)(v32 + 24) -= 2;
                      }
                    }
                    if (!*(_DWORD *)v27)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1965850C4);
                    }
                    --*(_DWORD *)v27;
                    v35 = 1;
                    goto LABEL_87;
                  }
                }
              }
            }
          }
        }
        if ((~*(unsigned __int16 *)(v24 + 28) & 0x408) != 0
          || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 368))(v24))
        {
          v32 = *(_QWORD *)(v24 + 32);
          if (v32)
          {
            v33 = *(_WORD *)(v32 + 28);
            if ((v33 & 0x80) != 0)
            {
              v31 = *(_QWORD *)(v32 + 200);
              if (v31)
                goto LABEL_35;
            }
            else if ((v33 & 8) != 0)
            {
              goto LABEL_54;
            }
            goto LABEL_40;
          }
        }
        else
        {
          v31 = *(_QWORD *)(v24 + 112);
          if (v31)
          {
LABEL_35:
            v32 = *(_QWORD *)(v31 + 8);
            if (v32)
              goto LABEL_54;
            goto LABEL_41;
          }
LABEL_40:
          v32 = 0;
        }
LABEL_41:
        v34 = 0;
        LOBYTE(v67) = 1;
        goto LABEL_42;
      }
    }
    else
    {
      v28 = WebCore::Style::Update::elementStyle((WebCore::Style::Update *)v71[2], (const WebCore::Element *)v23);
      v27 = (WTF *)v28;
      if (v28)
        goto LABEL_29;
    }
    v35 = 0;
    LOBYTE(v74[0]) = 0;
    v87 = 0;
LABEL_87:
    if (*(_DWORD *)(v24 + 24) == 2)
    {
      if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v24);
    }
    else
    {
      *(_DWORD *)(v24 + 24) -= 2;
    }
LABEL_89:
    if (*((_DWORD *)v22 + 6) == 2)
    {
      if ((*((_WORD *)v22 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v22);
    }
    else
    {
      *((_DWORD *)v22 + 6) -= 2;
    }
    if (!v35)
      break;
    v52 = WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateCondition((uint64_t)&v68, (unsigned __int8 *)(v21 + 8), (uint64_t)v74);
    v53 = v52 == 1;
    if (v87)
    {
      if (v86)
      {
        v54 = *(_DWORD *)(v86 + 16);
        if (!v54)
        {
          __break(0xC471u);
          JUMPOUT(0x196585124);
        }
        *(_DWORD *)(v86 + 16) = v54 - 1;
      }
      v55 = v75;
      v75 = 0;
      if (v55)
      {
        if (*((_DWORD *)v55 + 6) == 2)
        {
          if ((*((_WORD *)v55 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v55);
        }
        else
        {
          *((_DWORD *)v55 + 6) -= 2;
        }
      }
      v56 = v74[0];
      v74[0] = 0;
      if (v56)
      {
        do
        {
          v57 = __ldaxr((unsigned int *)v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, (unsigned int *)v56));
        if (!v58)
        {
          atomic_store(1u, (unsigned int *)v56);
          v62 = *((unsigned int *)v56 + 7);
          if ((_DWORD)v62)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v56 + 2), (WTF::StringImpl *)(*((_QWORD *)v56 + 2) + 32 * v62));
          v63 = (WTF *)*((_QWORD *)v56 + 2);
          if (v63)
          {
            *((_QWORD *)v56 + 2) = 0;
            *((_DWORD *)v56 + 6) = 0;
            WTF::fastFree(v63, (void *)a2);
          }
          WTF::fastFree(v56, (void *)a2);
        }
      }
    }
    if (v52 == 1)
    {
      v15 = (WTF *)((char *)v15 + 8);
      if (v15 != v66)
        continue;
    }
    goto LABEL_138;
  }
  v53 = 0;
LABEL_138:
  v64 = v68;
  v68 = 0;
  if (v64)
  {
    if (*((_DWORD *)v64 + 6) == 2)
    {
      if ((*((_WORD *)v64 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v64);
    }
    else
    {
      *((_DWORD *)v64 + 6) -= 2;
    }
  }
  v15 = v72;
  if (v72)
LABEL_142:
    WTF::fastFree(v15, (void *)a2);
  return v53;
}

WTF::StringImpl *WebCore::Style::ElementRuleCollector::scopeRulesMatch(uint64_t a1, uint64_t *a2, WTF::StringImpl *a3, _DWORD *a4)
{
  WTF::StringImpl *result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  const WebCore::CSSSelector *v12;
  uint64_t v13;
  int v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  __n128 v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  __n128 v24;
  int v25;
  char *v26;
  WTF *v27;
  WTF::StringImpl *v29;
  int v30;
  int v31;
  WTF::StringImpl *v32;
  __n128 v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  uint64_t v37;
  __n128 v38;
  int v39;
  char *v40;
  WTF *v41;
  WTF::StringImpl *v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  WebCore::StyleSheetContents *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  WebCore::StyleSheetContents *j;
  uint64_t v53;
  char *v54;
  WebCore::CSSStyleSheet **v55;
  WebCore::CSSStyleSheet *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  int v66;
  char *v67;
  WTF *v68;
  WTF *v69;
  const WebCore::CSSSelector *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  __n128 v73;
  uint64_t v74;
  WTF *v75;
  WTF *v76;
  uint64_t v77;
  __n128 v78;
  uint64_t v79;
  char v80;
  WTF *v81;
  WTF::StringImpl *v83;
  int v84;
  int v85;
  int v86;
  char *v87;
  WTF *v88;
  unsigned int v89;
  unsigned int v90;
  char v91;
  WTF *v92;
  void *v93;
  WTF *v94;
  void *v95;
  WebCore::StyleSheetContents *v96;
  uint64_t v97;
  unsigned int v98;
  WTF *v99;
  WTF *v100;
  WTF *v101;
  uint64_t i;
  uint64_t v103;
  WTF *v104;
  WTF *v105;
  uint64_t *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  WTF *v110;
  WTF *v111;
  unint64_t v112;
  uint64_t v113;
  WTF::StringImpl *v114;
  __int128 v115;
  __int128 v116;
  __n128 v117;
  uint64_t v118;
  WTF *v119;
  uint64_t v120;
  _BYTE v121[128];
  int v122;
  char v123;
  _BYTE v124[2];
  WTF *v125;
  int v126;
  unsigned int v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __n128 v133;
  uint64_t v134;
  WTF *v135;
  int v136;
  int v137;
  _BYTE v138[128];
  int v139;
  char v140;

  result = (WTF::StringImpl *)WebCore::Style::RuleSet::scopeRulesFor(a4, a3, (uint64_t)&v125);
  if (!v127)
  {
    *(_BYTE *)a1 = 1;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
LABEL_170:
    v99 = v125;
    goto LABEL_178;
  }
  v8 = *a2;
  if ((*(_BYTE *)(*a2 + 22) & 8) != 0)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 8) + 1272);
  }
  else
  {
    for (i = *(_QWORD *)(v8 + 32); i; i = *(_QWORD *)(i + 32))
    {
      if ((*(_WORD *)(i + 28) & 8) == 0)
        break;
      v8 = i;
    }
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8);
  v124[0] = *(_BYTE *)(v9 + 3384) != 2;
  v124[1] = *(_BYTE *)(v9 + 3358) & 1;
  LOBYTE(v113) = 2;
  HIDWORD(v113) = 0;
  v114 = 0;
  LOBYTE(v115) = 0;
  LOBYTE(v116) = 0;
  *((_QWORD *)&v116 + 1) = 0;
  v117.n128_u64[0] = 0;
  v117.n128_u16[4] = 0;
  v118 = 0;
  v119 = (WTF *)v121;
  v120 = 8;
  v111 = 0;
  v122 = 0;
  v123 = 0;
  v10 = v125;
  v104 = (WTF *)((char *)v125 + 8 * v127);
  v112 = 0;
  v106 = a2;
  while (2)
  {
    v110 = v111;
    v11 = HIDWORD(v112);
    v111 = 0;
    v112 = 0;
    v12 = *(const WebCore::CSSSelector **)(*(_QWORD *)v10 + 24);
    v105 = v10;
    if (!v12)
    {
      v46 = *(_QWORD *)(*(_QWORD *)v10 + 56);
      if (!v46)
        goto LABEL_154;
      do
        v47 = __ldaxr((unsigned int *)v46);
      while (__stlxr(v47 + 1, (unsigned int *)v46));
      v48 = *(WebCore::StyleSheetContents **)(v46 + 8);
      if (v48)
      {
        ++*(_DWORD *)v48;
        do
        {
          v49 = __ldaxr((unsigned int *)v46);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, (unsigned int *)v46));
        if (!v50)
        {
          atomic_store(1u, (unsigned int *)v46);
          WTF::fastFree((WTF *)v46, v7);
        }
        v51 = *((_QWORD *)v48 + 2);
        j = v48;
        if (v51)
        {
          v96 = *(WebCore::StyleSheetContents **)(v51 + 8);
          for (j = v48; v96; v96 = *(WebCore::StyleSheetContents **)(v97 + 8))
          {
            j = v96;
            v97 = *((_QWORD *)v96 + 2);
            if (!v97)
              break;
          }
        }
        ++*(_DWORD *)j;
        if (*(_DWORD *)v48 == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(v48, v7);
          WTF::fastFree(v92, v93);
        }
        else
        {
          --*(_DWORD *)v48;
        }
        v53 = *((unsigned int *)j + 53);
        if ((_DWORD)v53)
        {
          if (v53 >> 29)
          {
LABEL_198:
            __break(0xC471u);
            JUMPOUT(0x196585AF8);
          }
          v54 = (char *)WTF::fastMalloc((WTF *)(8 * v53));
          memcpy(v54, *((const void **)j + 25), 8 * *((unsigned int *)j + 53));
          v55 = (WebCore::CSSStyleSheet **)v54;
          do
          {
            v56 = *v55;
            v57 = WebCore::CSSStyleSheet::ownerDocument(*v55);
            v59 = *v106;
            if (v57 == *(_QWORD *)(*(_QWORD *)(*v106 + 40) + 8))
            {
              v60 = *((_QWORD *)v56 + 12);
              if (v60)
              {
                v61 = *(_QWORD *)(v60 + 8);
                if (v61)
                {
                  v62 = *(_QWORD *)(v61 + 32);
                  if (v59 == v62)
                  {
                    v63 = 0;
                  }
                  else
                  {
                    v63 = 1;
                    do
                    {
                      v59 = *(_QWORD *)(v59 + 32);
                      if (!v59)
                        goto LABEL_99;
                      v64 = *(_WORD *)(v59 + 28);
                      if ((v64 & 8) != 0)
                        v65 = v59;
                      else
                        v65 = 0;
                      ++v63;
                    }
                    while ((v64 & 8) != 0 && v65 != v62);
                    --v63;
                  }
LABEL_99:
                  *(_QWORD *)&v130 = v62;
                  DWORD2(v130) = v63;
                  v66 = HIDWORD(v112);
                  if (HIDWORD(v112) == (_DWORD)v112)
                  {
                    v67 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, HIDWORD(v112) + 1, (unint64_t)&v130);
                    v66 = HIDWORD(v112);
                    *((_OWORD *)v111 + HIDWORD(v112)) = *(_OWORD *)v67;
                  }
                  else
                  {
                    *((_OWORD *)v111 + HIDWORD(v112)) = v130;
                  }
                  HIDWORD(v112) = v66 + 1;
                }
              }
            }
            ++v55;
          }
          while (v55 != (WebCore::CSSStyleSheet **)&v54[8 * v53]);
          WTF::fastFree((WTF *)v54, v58);
        }
        if (*(_DWORD *)j == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(j, v7);
          WTF::fastFree(v94, v95);
        }
        else
        {
          --*(_DWORD *)j;
        }
        goto LABEL_107;
      }
      do
        v98 = __ldaxr((unsigned int *)v46);
      while (__stlxr(v98 - 1, (unsigned int *)v46));
      if (v98 != 1)
        goto LABEL_154;
      atomic_store(1u, (unsigned int *)v46);
LABEL_153:
      WTF::fastFree((WTF *)v46, v7);
      goto LABEL_154;
    }
    v108 = *(_QWORD *)v10;
    v13 = *a2;
    if (!*a2)
      goto LABEL_71;
    v14 = 0;
    if (!v11)
    {
      while (!v12)
      {
LABEL_69:
        v13 = *(_QWORD *)(v13 + 32);
        if (!v13 || (*(_WORD *)(v13 + 28) & 8) == 0)
          goto LABEL_71;
        ++v14;
        v12 = *(const WebCore::CSSSelector **)(v108 + 24);
      }
      while (1)
      {
        v32 = v114;
        *(_QWORD *)&v130 = v113;
        if (v114)
          *(_DWORD *)v114 += 2;
        v131 = v115;
        v132 = v116;
        v33 = v117;
        v133 = v117;
        v134 = v118;
        v34 = HIDWORD(v120);
        *((_QWORD *)&v130 + 1) = v32;
        v135 = (WTF *)v138;
        v136 = 8;
        v137 = HIDWORD(v120);
        if (HIDWORD(v120) >= 9)
          break;
        v35 = (WTF *)v138;
        if (HIDWORD(v120))
          goto LABEL_50;
LABEL_52:
        v139 = v122;
        v140 = v123;
        *((_QWORD *)&v132 + 1) = 0;
        if (WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v124, v12, (const WebCore::Element *)v13, (WebCore::SelectorChecker::CheckingContext *)&v130, v33))
        {
          *(_QWORD *)&v129 = v13;
          DWORD2(v129) = v14;
          v39 = HIDWORD(v112);
          if (HIDWORD(v112) == (_DWORD)v112)
          {
            v40 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, HIDWORD(v112) + 1, (unint64_t)&v129);
            v39 = HIDWORD(v112);
            *((_OWORD *)v111 + HIDWORD(v112)) = *(_OWORD *)v40;
          }
          else
          {
            *((_OWORD *)v111 + HIDWORD(v112)) = v129;
          }
          HIDWORD(v112) = v39 + 1;
        }
        v41 = v135;
        if (v138 != (_BYTE *)v135 && v135 != 0)
        {
          v135 = 0;
          v136 = 0;
          WTF::fastFree(v41, v7);
        }
        v43 = (WTF::StringImpl *)*((_QWORD *)&v130 + 1);
        *((_QWORD *)&v130 + 1) = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v7);
          else
            *(_DWORD *)v43 -= 2;
        }
        do
        {
          v45 = *(_DWORD *)v12;
          v12 = (const WebCore::CSSSelector *)((char *)v12 + 16);
          v44 = v45;
        }
        while ((v45 & 0x80000) == 0);
        if ((v44 & 0x20000) != 0)
          goto LABEL_69;
      }
      if (HIDWORD(v120) >> 28)
      {
        __break(0xC471u);
        JUMPOUT(0x196585B54);
      }
      v35 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v120)));
      v136 = v34;
      v135 = v35;
      v34 = HIDWORD(v120);
      if (!HIDWORD(v120))
        goto LABEL_52;
LABEL_50:
      v36 = v119;
      v37 = 16 * v34;
      do
      {
        v38 = *(__n128 *)v36;
        v36 = (WTF *)((char *)v36 + 16);
        v33 = v38;
        *(__n128 *)v35 = v38;
        v35 = (WTF *)((char *)v35 + 16);
        v37 -= 16;
      }
      while (v37);
      goto LABEL_52;
    }
    v15 = (WTF *)((char *)v110 + 16 * v11);
    do
    {
LABEL_9:
      v16 = v110;
      do
      {
        v17 = *(_QWORD *)v16;
        v18 = v114;
        *(_QWORD *)&v130 = v113;
        if (v114)
          *(_DWORD *)v114 += 2;
        v131 = v115;
        v132 = v116;
        v19 = v117;
        v133 = v117;
        v134 = v118;
        v20 = HIDWORD(v120);
        *((_QWORD *)&v130 + 1) = v18;
        v135 = (WTF *)v138;
        v136 = 8;
        v137 = HIDWORD(v120);
        if (HIDWORD(v120) < 9)
        {
          v21 = (WTF *)v138;
          if (!HIDWORD(v120))
            goto LABEL_19;
LABEL_17:
          v22 = v119;
          v23 = 16 * v20;
          do
          {
            v24 = *(__n128 *)v22;
            v22 = (WTF *)((char *)v22 + 16);
            v19 = v24;
            *(__n128 *)v21 = v24;
            v21 = (WTF *)((char *)v21 + 16);
            v23 -= 16;
          }
          while (v23);
          goto LABEL_19;
        }
        if (HIDWORD(v120) >> 28)
          goto LABEL_198;
        v21 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v120)));
        v136 = v20;
        v135 = v21;
        v20 = HIDWORD(v120);
        if (HIDWORD(v120))
          goto LABEL_17;
LABEL_19:
        v139 = v122;
        v140 = v123;
        *((_QWORD *)&v132 + 1) = v17;
        if (WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v124, v12, (const WebCore::Element *)v13, (WebCore::SelectorChecker::CheckingContext *)&v130, v19))
        {
          *(_QWORD *)&v129 = v13;
          DWORD2(v129) = v14;
          v25 = HIDWORD(v112);
          if (HIDWORD(v112) == (_DWORD)v112)
          {
            v26 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v111, HIDWORD(v112) + 1, (unint64_t)&v129);
            v25 = HIDWORD(v112);
            *((_OWORD *)v111 + HIDWORD(v112)) = *(_OWORD *)v26;
          }
          else
          {
            *((_OWORD *)v111 + HIDWORD(v112)) = v129;
          }
          HIDWORD(v112) = v25 + 1;
        }
        v27 = v135;
        if (v138 != (_BYTE *)v135 && v135 != 0)
        {
          v135 = 0;
          v136 = 0;
          WTF::fastFree(v27, v7);
        }
        v29 = (WTF::StringImpl *)*((_QWORD *)&v130 + 1);
        *((_QWORD *)&v130 + 1) = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v7);
          else
            *(_DWORD *)v29 -= 2;
        }
        v16 = (WTF *)((char *)v16 + 16);
      }
      while (v16 != v15);
      do
      {
        v31 = *(_DWORD *)v12;
        v12 = (const WebCore::CSSSelector *)((char *)v12 + 16);
        v30 = v31;
      }
      while ((v31 & 0x80000) == 0);
    }
    while ((v30 & 0x20000) == 0);
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 32);
      if (!v13 || (*(_WORD *)(v13 + 28) & 8) == 0)
        break;
      ++v14;
      v12 = *(const WebCore::CSSSelector **)(v108 + 24);
      if (v12)
        goto LABEL_9;
    }
LABEL_71:
    v10 = v105;
    if (!HIDWORD(v112))
    {
LABEL_154:
      v91 = 0;
      goto LABEL_155;
    }
LABEL_107:
    v109 = *(_QWORD *)v10;
    if (!*(_QWORD *)(*(_QWORD *)v10 + 32))
    {
      v91 = 1;
      goto LABEL_155;
    }
    v129 = 0uLL;
    if (!HIDWORD(v112))
      goto LABEL_154;
    v68 = v111;
    v107 = (char *)v111 + 16 * HIDWORD(v112);
    while (2)
    {
      v69 = v68;
      v128 = *(_OWORD *)v68;
      v70 = *(const WebCore::CSSSelector **)(v109 + 32);
      if (v70)
      {
        while (2)
        {
          v71 = v128;
          v72 = v114;
          *(_QWORD *)&v130 = v113;
          if (v114)
            *(_DWORD *)v114 += 2;
          v131 = v115;
          v132 = v116;
          v73 = v117;
          v133 = v117;
          v134 = v118;
          v74 = HIDWORD(v120);
          *((_QWORD *)&v130 + 1) = v72;
          v135 = (WTF *)v138;
          v136 = 8;
          v137 = HIDWORD(v120);
          if (HIDWORD(v120) < 9)
          {
            v75 = (WTF *)v138;
            if (!HIDWORD(v120))
              goto LABEL_120;
          }
          else
          {
            if (HIDWORD(v120) >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x196585B4CLL);
            }
            v75 = (WTF *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v120)));
            v136 = v74;
            v135 = v75;
            v74 = HIDWORD(v120);
            if (!HIDWORD(v120))
            {
LABEL_120:
              v139 = v122;
              v140 = v123;
              *((_QWORD *)&v132 + 1) = v71;
              v79 = *v106;
              if (*v106)
              {
                do
                {
                  v80 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v124, v70, (const WebCore::Element *)v79, (WebCore::SelectorChecker::CheckingContext *)&v130, v73);
                  if ((v80 & 1) != 0)
                    break;
                  if (v79 == v71)
                    break;
                  v79 = *(_QWORD *)(v79 + 32);
                  if (!v79)
                    break;
                }
                while ((*(_WORD *)(v79 + 28) & 8) != 0);
              }
              else
              {
                v80 = 0;
              }
              v81 = v135;
              if (v138 != (_BYTE *)v135 && v135 != 0)
              {
                v135 = 0;
                v136 = 0;
                WTF::fastFree(v81, v7);
              }
              v83 = (WTF::StringImpl *)*((_QWORD *)&v130 + 1);
              *((_QWORD *)&v130 + 1) = 0;
              if (!v83)
                goto LABEL_135;
              if (*(_DWORD *)v83 == 2)
              {
                WTF::StringImpl::destroy(v83, (WTF::StringImpl *)v7);
                if ((v80 & 1) != 0)
                  goto LABEL_145;
              }
              else
              {
                *(_DWORD *)v83 -= 2;
LABEL_135:
                if ((v80 & 1) != 0)
                  goto LABEL_145;
              }
              do
              {
                v85 = *(_DWORD *)v70;
                v70 = (const WebCore::CSSSelector *)((char *)v70 + 16);
                v84 = v85;
              }
              while ((v85 & 0x80000) == 0);
              if ((v84 & 0x20000) != 0)
                goto LABEL_141;
              continue;
            }
          }
          break;
        }
        v76 = v119;
        v77 = 16 * v74;
        do
        {
          v78 = *(__n128 *)v76;
          v76 = (WTF *)((char *)v76 + 16);
          v73 = v78;
          *(__n128 *)v75 = v78;
          v75 = (WTF *)((char *)v75 + 16);
          v77 -= 16;
        }
        while (v77);
        goto LABEL_120;
      }
LABEL_141:
      v86 = HIDWORD(v129);
      if (HIDWORD(v129) == DWORD2(v129))
      {
        v87 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v129, HIDWORD(v129) + 1, (unint64_t)&v128);
        v86 = HIDWORD(v129);
        *(_OWORD *)(v129 + 16 * HIDWORD(v129)) = *(_OWORD *)v87;
      }
      else
      {
        *(_OWORD *)(v129 + 16 * HIDWORD(v129)) = v128;
      }
      HIDWORD(v129) = v86 + 1;
LABEL_145:
      v68 = (WTF *)((char *)v69 + 16);
      if ((char *)v69 + 16 != v107)
        continue;
      break;
    }
    v88 = (WTF *)v129;
    v89 = HIDWORD(v129);
    if (!HIDWORD(v129))
    {
      v10 = v105;
      if (!(_QWORD)v129)
        goto LABEL_154;
      v46 = v129;
      goto LABEL_153;
    }
    v90 = DWORD2(v129);
    v10 = v105;
    if (v111)
      WTF::fastFree(v111, v7);
    v111 = v88;
    v91 = 1;
    v112 = __PAIR64__(v89, v90);
LABEL_155:
    if (v110)
      WTF::fastFree(v110, v7);
    a2 = v106;
    if ((v91 & 1) != 0)
    {
      v10 = (WTF *)((char *)v10 + 8);
      if (v10 == v104)
      {
        v100 = v111;
        *(_BYTE *)a1 = 1;
        *(_QWORD *)(a1 + 8) = v100;
        *(_QWORD *)(a1 + 16) = v112;
        *(_BYTE *)(a1 + 24) = 1;
        goto LABEL_173;
      }
      continue;
    }
    break;
  }
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (v111)
    WTF::fastFree(v111, v7);
LABEL_173:
  v101 = v119;
  if (v121 != (_BYTE *)v119 && v119)
  {
    v119 = 0;
    LODWORD(v120) = 0;
    WTF::fastFree(v101, v7);
  }
  result = v114;
  v114 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)result -= 2;
  }
  v99 = v125;
  if (v127)
  {
    v103 = 8 * v127;
    do
    {
      result = *(WTF::StringImpl **)v99;
      *(_QWORD *)v99 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, (WTF::StringImpl *)v7);
        else
          --*(_DWORD *)result;
      }
      v99 = (WTF *)((char *)v99 + 8);
      v103 -= 8;
    }
    while (v103);
    goto LABEL_170;
  }
LABEL_178:
  if (v99)
  {
    v125 = 0;
    v126 = 0;
    return (WTF::StringImpl *)WTF::fastFree(v99, v7);
  }
  return result;
}

uint64_t std::optional<WTF::Vector<WebCore::Style::ElementRuleCollector::ScopingRootWithDistance,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100](uint64_t a1, uint64_t *a2)
{
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;

  if (*(unsigned __int8 *)(a1 + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v4 = *(WTF **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree(v4, a2);
      }
      v5 = *a2;
      *a2 = 0;
      *(_QWORD *)a1 = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(a1 + 8) = v5;
      LODWORD(v5) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(a1 + 12) = v5;
    }
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    v6 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v6, a2);
    }
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)a1 = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(a1 + 8) = v7;
    LODWORD(v7) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(a1 + 12) = v7;
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t WebCore::Style::ElementRuleCollector::collectMatchingRulesForList(WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*,WebCore::Style::MatchRequest const&)::$_0::operator()(uint64_t *a1, uint64_t a2, unsigned int a3, __n128 a4)
{
  _QWORD *v6;
  uint64_t result;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;

  v18 = 0;
  v6 = (_QWORD *)*a1;
  result = WebCore::Style::ElementRuleCollector::ruleMatches((_QWORD *)*a1, (_QWORD *)a1[1], (int *)&v18, *(_BYTE *)(a1[2] + 8), a2, a4);
  if ((_DWORD)result)
  {
    v8 = (_BYTE *)a1[2];
    v9 = *(_QWORD *)v8;
    v10 = *(_DWORD *)(a1[1] + 12) & 0x1FFFFF;
    if (v10 < *(unsigned int *)(*(_QWORD *)v8 + 716) && (v16 = *(_DWORD *)(*(_QWORD *)(v9 + 704) + 4 * v10)) != 0)
    {
      v17 = v16 - 1;
      if (*(_DWORD *)(v9 + 700) <= v17)
      {
        __break(0xC471u);
        return result;
      }
      v11 = *(_WORD *)(*(_QWORD *)(v9 + 688) + 24 * v17 + 20);
    }
    else
    {
      v11 = -1;
    }
    result = (uint64_t)(v6 + 14);
    *(_QWORD *)&v19 = a1[1];
    *((_QWORD *)&v19 + 1) = __PAIR64__(a3, v18);
    LOBYTE(v20) = v8[8];
    WORD1(v20) = v11;
    v12 = *((unsigned int *)v6 + 31);
    if ((_DWORD)v12 == *((_DWORD *)v6 + 30))
    {
      result = WTF::Vector<WebCore::Style::MatchedRule,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, (void *)(v12 + 1), (unint64_t)&v19);
      v13 = v6[14] + 24 * *((unsigned int *)v6 + 31);
      v14 = *(_OWORD *)result;
      v15 = *(_QWORD *)(result + 16);
    }
    else
    {
      v13 = *(_QWORD *)result + 24 * v12;
      v14 = v19;
      v15 = v20;
    }
    *(_QWORD *)(v13 + 16) = v15;
    *(_OWORD *)v13 = v14;
    ++*((_DWORD *)v6 + 31);
  }
  return result;
}

BOOL WebCore::Style::compareRules(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  unsigned int v11;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v2 != v3)
    return (char)v2 > (char)v3;
  v4 = *(unsigned __int16 *)(a1 + 18);
  v5 = *(unsigned __int16 *)(a2 + 18);
  v6 = v4 >= v5;
  if (v4 != v5)
    return !v6;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a2 + 8);
  v6 = v7 >= v8;
  if (v7 != v8)
    return !v6;
  v10 = *(_DWORD *)(a1 + 12);
  v11 = *(_DWORD *)(a2 + 12);
  if (v10 == v11)
    return (*(_DWORD *)(*(_QWORD *)a1 + 12) & 0x1FFFFFu) < (*(_DWORD *)(*(_QWORD *)a2 + 12) & 0x1FFFFFu);
  else
    return v11 < v10;
}

__int16 *WebCore::Style::ElementRuleCollector::addElementStyleProperties(__int16 *result, WTF *a2, int a3, int a4, int a5)
{
  WTF *v5;
  __int16 *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF **v19;
  _QWORD *v20;
  uint64_t v21;
  WTF *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD **v26;
  _DWORD *v27;
  WTF *v28;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  _QWORD *v34;
  __int16 v35;
  uint64_t v36;
  _WORD *v37;
  WTF *v38;
  unint64_t v39;
  unsigned int *v40;
  _DWORD *v41;
  WTF *v42;
  __int16 v43;
  char v44;
  char v45;
  __int16 v46;
  char v47;
  char v48;
  __int16 v49;

  v5 = a2;
  v6 = result;
  v7 = *((_DWORD *)a2 + 1);
  if ((v7 & 8) != 0)
    v8 = *((_DWORD *)a2 + 7);
  else
    v8 = v7 >> 4;
  if (!v8)
    return result;
  v9 = (*(_DWORD *)a2)++;
  v42 = a2;
  v43 = 3;
  v44 = 0;
  v47 = 0;
  v46 = a3;
  v45 = a5;
  v48 = a4;
  v10 = *((_QWORD *)result + 212);
  v11 = (uint64_t *)(v10 + 40);
  v12 = *(unsigned int *)(v10 + 52);
  if ((_DWORD)v12)
  {
    v13 = v12 - 1;
    v14 = *v11;
    if (*(WTF **)(*v11 + 16 * v13) == a2)
    {
      v15 = v14 + 16 * v13;
      if (*(_BYTE *)(v15 + 8) == 3 && !*(_BYTE *)(v15 + 9))
      {
        v16 = v14 + 16 * v13;
        if (!*(_BYTE *)(v16 + 10) && (*(_BYTE *)(v16 + 11) == 0) != a5)
        {
          v17 = v14 + 16 * v13;
          if (*(unsigned __int16 *)(v17 + 12) == a3
            && !*(_BYTE *)(v17 + 14)
            && *(unsigned __int8 *)(v14 + 16 * v13 + 15) == a4)
          {
            v42 = 0;
LABEL_19:
            if (v9)
            {
              *(_DWORD *)v5 = v9;
            }
            else
            {
              v23 = *((unsigned int *)v5 + 1);
              if ((v23 & 8) != 0)
              {
                v24 = *((unsigned int *)v5 + 7);
                if ((_DWORD)v24)
                {
                  v25 = 16 * v24;
                  v26 = (_DWORD **)(*((_QWORD *)v5 + 2) + 8);
                  do
                  {
                    v27 = *v26;
                    *v26 = 0;
                    if (v27)
                    {
                      if (*v27 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, a2);
                      else
                        *v27 -= 2;
                    }
                    v26 += 2;
                    v25 -= 16;
                  }
                  while (v25);
                }
                v28 = (WTF *)*((_QWORD *)v5 + 2);
                if ((WTF *)((char *)v5 + 32) != v28 && v28 != 0)
                {
                  *((_QWORD *)v5 + 2) = 0;
                  *((_DWORD *)v5 + 6) = 0;
                  WTF::fastFree(v28, a2);
                }
                v30 = *((_QWORD *)v5 + 1);
                *((_QWORD *)v5 + 1) = 0;
                if (v30)
                  (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
              }
              else if (v23 >= 0x10)
              {
                v39 = 0;
                v40 = (unsigned int *)((char *)v5 + ((v23 >> 3) & 0x1FFFFFFE) + 8);
                do
                {
                  v41 = (_DWORD *)(*v40 | ((unint64_t)*((unsigned __int8 *)v40 + 4) << 32));
                  if (*v41 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v41, a2);
                  else
                    *v41 -= 2;
                  ++v39;
                  v40 = (unsigned int *)((char *)v40 + 5);
                }
                while (v39 < (unint64_t)*((unsigned int *)v5 + 1) >> 4);
              }
              return (__int16 *)WTF::fastFree(v5, a2);
            }
            return result;
          }
        }
      }
    }
  }
  if (a4 == 1)
  {
    if (!*(_BYTE *)(v10 + 1))
    {
      v31 = 0;
      while (1)
      {
        if ((v7 & 8) != 0)
        {
          if (*((_DWORD *)v5 + 7) <= v31)
            break;
          v32 = (_WORD *)(*((_QWORD *)v5 + 2) + 16 * v31);
        }
        else
        {
          if (v31 >= v7 >> 4)
            break;
          v32 = (_WORD *)((char *)v5 + 2 * v31 + 8);
        }
        v33 = *((_QWORD *)v6 + 212);
        v34 = (_QWORD *)(v33 + 56);
        v35 = *v32 & 0x3FF;
        v49 = v35;
        v36 = *(unsigned int *)(v33 + 68);
        if ((_DWORD)v36 == *(_DWORD *)(v33 + 64))
        {
          v37 = (_WORD *)WTF::Vector<WebCore::CSSPropertyID,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v34, v36 + 1, (unint64_t)&v49);
          v36 = *(unsigned int *)(v33 + 68);
          *(_WORD *)(*(_QWORD *)(v33 + 56) + 2 * v36) = *v37;
        }
        else
        {
          *(_WORD *)(*v34 + 2 * v36) = v35;
        }
        *(_DWORD *)(v33 + 68) = v36 + 1;
        v31 = (v31 + 1);
        v7 = *((_DWORD *)v5 + 1);
      }
    }
  }
  else if (!a4)
  {
    *(_BYTE *)(v10 + 1) = 1;
    if (*(_DWORD *)(v10 + 64))
    {
      if (*(_DWORD *)(v10 + 68))
        *(_DWORD *)(v10 + 68) = 0;
      v38 = *(WTF **)(v10 + 56);
      if ((WTF *)(v10 + 72) != v38 && v38)
      {
        *(_QWORD *)(v10 + 56) = 0;
        *(_DWORD *)(v10 + 64) = 0;
        WTF::fastFree(v38, a2);
        v38 = *(WTF **)(v10 + 56);
      }
      if (!v38)
      {
        *(_QWORD *)(v10 + 56) = v10 + 72;
        *(_DWORD *)(v10 + 64) = 4;
      }
    }
  }
  v18 = *(unsigned int *)(v10 + 52);
  if ((_DWORD)v18 == *(_DWORD *)(v10 + 48))
  {
    v20 = (_QWORD *)WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10 + 40, v18 + 1, (unint64_t)&v42);
    v21 = *(_QWORD *)(v10 + 40);
    v22 = (WTF *)*v20;
    *v20 = 0;
    result = (__int16 *)(v20 + 1);
    v19 = (WTF **)(v21 + 16 * *(unsigned int *)(v10 + 52));
    *v19 = v22;
  }
  else
  {
    result = &v43;
    v19 = (WTF **)(*v11 + 16 * v18);
    v42 = 0;
    *v19 = v5;
  }
  v19[1] = *(WTF **)result;
  ++*(_DWORD *)(v10 + 52);
  v5 = v42;
  v42 = 0;
  if (v5)
  {
    v9 = *(_DWORD *)v5 - 1;
    goto LABEL_19;
  }
  return result;
}

__n128 WTF::Vector<WebCore::Style::ClassChange,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::ClassChange>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WebCore::Style::ClassChange,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  result = *v3;
  *(__n128 *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 12))++) = *v3;
  return result;
}

uint64_t WTF::Vector<WebCore::Style::ClassChange,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  uint64_t v21;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 16 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      if (v10 < 5)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_33;
      }
      if (!(v10 >> 28))
      {
        v11 = WTF::fastMalloc((WTF *)(16 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_33:
        v21 = 0;
        do
        {
          *(_OWORD *)(v11 + v21) = *(_OWORD *)((char *)v5 + v21);
          v21 += 16;
        }
        while (16 * v6 != v21);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return *(_QWORD *)a1 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_42:
      __break(0xC471u);
      JUMPOUT(0x19658634CLL);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 5)
    {
      v17 = (_OWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 28)
        goto LABEL_42;
      v17 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 16 * v16;
    v19 = v5;
    do
    {
      v20 = *(_OWORD *)v19;
      v19 = (WTF *)((char *)v19 + 16);
      *v17++ = v20;
      v18 -= 16;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

uint64_t WebCore::Style::ElementRuleCollector::ruleMatches(_QWORD *a1, _QWORD *a2, int *a3, char a4, uint64_t a5, __n128 a6)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  const WebCore::CSSSelector *v21;
  int v22;
  int v23;
  WTF *v24;
  uint64_t v25;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  const WebCore::CSSSelector *v37;
  const WebCore::Element *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  WTF *v43;
  _OWORD *v44;
  uint64_t v45;
  WTF *v46;
  __int128 v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  _BYTE v63[2];
  unsigned int *v64;
  WTF::StringImpl *v65;
  __n128 v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  _BYTE v74[128];
  int v75;
  char v76;

  v11 = a2[1];
  v12 = (v11 >> 53) & 7;
  if ((_DWORD)v12 && (*(_WORD *)(*a1 + 28) & 0x10) != 0)
  {
    switch((int)v12)
    {
      case 1:
        *a3 = 0;
        goto LABEL_43;
      case 2:
        v36 = 0x10000;
        goto LABEL_42;
      case 3:
        v36 = 256;
LABEL_42:
        *a3 = v36;
        goto LABEL_43;
      case 4:
        v19 = 1;
        *a3 = 1;
        return v19;
      default:
LABEL_43:
        v19 = 1;
        break;
    }
  }
  else
  {
    v13 = *a2;
    v14 = WORD1(v11);
    v15 = *(_QWORD **)(*a2 + 24);
    if (!v15)
    {
      v48 = *(unsigned int **)(v13 + 16);
      if (!v48)
        goto LABEL_80;
      v49 = *v48;
      if ((*v48 & 0x20000) != 0)
      {
        v51 = 1;
      }
      else
      {
        v50 = v48 + 4;
        v51 = 1;
        do
        {
          v51 += (v49 >> 19) & 1;
          v52 = *v50;
          v50 += 4;
          v49 = v52;
        }
        while ((v52 & 0x20000) == 0);
      }
      if (v51 <= v14)
      {
LABEL_80:
        __break(0xC471u);
        JUMPOUT(0x196586824);
      }
      v53 = v51;
      v54 = 24 * v51;
      v55 = (_QWORD *)WTF::fastMalloc((WTF *)(v54 + 16));
      *v55 = 24;
      v55[1] = v53;
      v15 = v55 + 2;
      bzero(v55 + 2, 24 * ((v54 - 24) / 0x18uLL) + 24);
      v57 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = v15;
      if (v57)
      {
        v58 = *(_QWORD *)(v57 - 8);
        if (v58)
        {
          v59 = v57 + 24 * v58;
          do
          {
            v60 = *(unsigned int **)(v59 - 8);
            *(_QWORD *)(v59 - 8) = 0;
            if (v60)
            {
              do
              {
                v61 = __ldaxr(v60);
                v62 = v61 - 1;
              }
              while (__stlxr(v62, v60));
              if (!v62)
              {
                atomic_store(1u, v60);
                v64 = v60;
                WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v64);
              }
            }
            v59 -= 24;
          }
          while (v59 != v57);
        }
        WTF::fastFree((WTF *)(v57 - 16), v56);
        v15 = *(_QWORD **)(v13 + 24);
      }
    }
    v16 = v14;
    v17 = &v15[3 * v14];
    v18 = *v17;
    if (!*v17)
    {
      WebCore::SelectorCompiler::compileSelector((uint64_t)v17, *(_QWORD *)(*a2 + 16) + 16 * *((unsigned __int16 *)a2 + 4));
      v18 = *v17;
    }
    if (v18 == 2)
    {
      if (((unsigned int (*)(_QWORD, int *))v15[3 * v16 + 1])(*a1, a3))
      {
        v19 = 1;
        if ((*((_BYTE *)a2 + 15) & 2) != 0)
          *((_BYTE *)a1 + 1688) = 1;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      LOBYTE(v64) = *((_BYTE *)a1 + 104);
      HIDWORD(v64) = 0;
      v65 = 0;
      v66.n128_u8[0] = 0;
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v70 = 0;
      v72 = (WTF *)v74;
      a6.n128_u64[0] = 8;
      v73 = 8;
      v75 = 0;
      v76 = 0;
      if (*((_BYTE *)a1 + 96))
      {
        HIDWORD(v64) = *((_DWORD *)a1 + 14);
        v28 = (WTF::StringImpl *)a1[8];
        if (v28)
          *(_DWORD *)v28 += 2;
        v65 = v28;
        a6 = *(__n128 *)(a1 + 9);
        v66 = a6;
        v67 = *((_BYTE *)a1 + 88);
      }
      HIBYTE(v70) = a4;
      v71 = a1[5];
      v68 = a5;
      if (*v17 == 3)
      {
        v19 = ((unsigned int (*)(_QWORD, unsigned int **, int *))v15[3 * v16 + 1])(*a1, &v64, a3) != 0;
      }
      else
      {
        v37 = (const WebCore::CSSSelector *)(*(_QWORD *)(*a2 + 16) + 16 * *((unsigned __int16 *)a2 + 4));
        v38 = (const WebCore::Element *)*a1;
        v39 = *(_QWORD *)(*(_QWORD *)(*a1 + 40) + 8);
        v63[0] = *(_BYTE *)(v39 + 3384) != 2;
        v63[1] = *(_BYTE *)(v39 + 3358) & 1;
        v19 = WebCore::SelectorChecker::match((WebCore::SelectorChecker *)v63, v37, v38, (WebCore::SelectorChecker::CheckingContext *)&v64, a6);
        if ((_DWORD)v19)
          *a3 = WebCore::selectorSpecificity(v37, v21);
      }
      v22 = v75;
      if (v75)
        v23 = 1;
      else
        v23 = v19;
      if ((*((_BYTE *)a2 + 15) & 2) != 0 && v23)
        *((_BYTE *)a1 + 1688) = 1;
      *((_DWORD *)a1 + 462) |= v22;
      v24 = v72;
      v25 = HIDWORD(v73);
      if (HIDWORD(v73))
      {
        v29 = *((unsigned int *)a1 + 429);
        v30 = v29 + HIDWORD(v73);
        v31 = *((unsigned int *)a1 + 428);
        if (v30 > v31)
        {
          v40 = v31 + (v31 >> 2);
          if (v40 >= 0x10)
            v41 = v40 + 1;
          else
            v41 = 16;
          if (v41 <= v30)
            v42 = v29 + HIDWORD(v73);
          else
            v42 = v41;
          v43 = (WTF *)a1[213];
          if (v42 < 9)
          {
            v44 = a1 + 215;
            a1[213] = a1 + 215;
            *((_DWORD *)a1 + 428) = 8;
          }
          else
          {
            if (v42 >> 28)
            {
              __break(0xC471u);
              JUMPOUT(0x196586848);
            }
            v44 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v42));
            *((_DWORD *)a1 + 428) = v42;
            a1[213] = v44;
          }
          if ((_DWORD)v29)
          {
            v45 = 16 * v29;
            v46 = v43;
            do
            {
              v47 = *(_OWORD *)v46;
              v46 = (WTF *)((char *)v46 + 16);
              *v44++ = v47;
              v45 -= 16;
            }
            while (v45);
          }
          if (a1 + 215 != (_QWORD *)v43 && v43)
          {
            if ((WTF *)a1[213] == v43)
            {
              a1[213] = 0;
              *((_DWORD *)a1 + 428) = 0;
            }
            WTF::fastFree(v43, v21);
          }
        }
        v32 = *((unsigned int *)a1 + 429);
        if (v30 < v32)
        {
          __break(0xC471u);
          JUMPOUT(0x196586840);
        }
        v33 = (_OWORD *)(a1[213] + 16 * v32);
        v34 = 16 * v25;
        do
        {
          v35 = *(_OWORD *)v24;
          v24 = (WTF *)((char *)v24 + 16);
          *v33++ = v35;
          v34 -= 16;
        }
        while (v34);
        *((_DWORD *)a1 + 429) = v30;
        v24 = v72;
      }
      if (v74 != (_BYTE *)v24 && v24 != 0)
      {
        v72 = 0;
        LODWORD(v73) = 0;
        WTF::fastFree(v24, v21);
      }
      v27 = v65;
      v65 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v21);
        else
          *(_DWORD *)v27 -= 2;
      }
    }
  }
  return v19;
}

uint64_t WTF::Vector<WebCore::Style::MatchedRule,64ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 24 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v9 = (unint64_t)a2;
      if (v9 <= v7)
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      if (v9 < 0x41)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 64;
        goto LABEL_31;
      }
      if (v9 < 0xAAAAAAB)
      {
        v10 = 24 * v9;
        v11 = WTF::fastMalloc((WTF *)(24 * v9));
        *(_DWORD *)(a1 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
        *(_QWORD *)a1 = v11;
LABEL_31:
        v21 = 0;
        do
        {
          v22 = v11 + v21;
          v23 = *(_OWORD *)((char *)v5 + v21);
          *(_QWORD *)(v22 + 16) = *(_QWORD *)((char *)v5 + v21 + 16);
          *(_OWORD *)v22 = v23;
          v21 += 24;
        }
        while (24 * v6 != v21);
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (*(WTF **)a1 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
        }
        return *(_QWORD *)a1 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x196586A90);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v14 = (unint64_t)a2;
  if (v14 > v12)
  {
    v15 = *(unsigned int *)(a1 + 12);
    if (v14 < 0x41)
    {
      v17 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 64;
      if (!(_DWORD)v15)
        goto LABEL_25;
    }
    else
    {
      if (v14 >= 0xAAAAAAB)
        goto LABEL_40;
      v16 = 24 * v14;
      v17 = WTF::fastMalloc((WTF *)(24 * v14));
      *(_DWORD *)(a1 + 8) = (v16 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v15)
        goto LABEL_25;
    }
    v18 = 24 * v15;
    v19 = v5;
    do
    {
      v20 = *(_OWORD *)v19;
      *(_QWORD *)(v17 + 16) = *((_QWORD *)v19 + 2);
      *(_OWORD *)v17 = v20;
      v17 += 24;
      v19 = (WTF *)((char *)v19 + 24);
      v18 -= 24;
    }
    while (v18);
LABEL_25:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return v3;
}

uint64_t std::__insertion_sort_unguarded[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>(uint64_t result, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(__int128 *, __int128 *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t (*v16)(__int128 *, __int128 *);
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 24;
    if (result + 24 != a2)
    {
      v7 = 0;
      v8 = -2;
      v9 = 1;
      while (1)
      {
        v10 = v4 + 24 * v7;
        v7 = v9;
        v11 = *a3;
        v25 = *(_OWORD *)v5;
        v26 = *(_QWORD *)(v5 + 16);
        v23 = *(_OWORD *)v10;
        v24 = *(_QWORD *)(v10 + 16);
        result = v11(&v25, &v23);
        if ((_DWORD)result)
          break;
LABEL_9:
        v9 = v7 + 1;
        v5 += 24;
        --v8;
        if (v5 == a2)
          return result;
      }
      v21 = *(_OWORD *)v5;
      v22 = *(_QWORD *)(v5 + 16);
      v12 = v8;
      v13 = v5;
      while (1)
      {
        *(_OWORD *)v13 = *(_OWORD *)(v13 - 24);
        *(_DWORD *)(v13 + 16) = *(_DWORD *)(v13 - 8);
        if (__CFADD__(v12++, 1))
          break;
        v15 = v13 - 24;
        v16 = *a3;
        v19 = v21;
        v20 = v22;
        v17 = *(_OWORD *)(v13 - 48);
        v18 = *(_QWORD *)(v13 - 32);
        result = v16(&v19, &v17);
        v13 = v15;
        if ((result & 1) == 0)
        {
          *(_OWORD *)v15 = v21;
          *(_DWORD *)(v15 + 16) = v22;
          goto LABEL_9;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  uint64_t (*v8)(__int128 *, __int128 *);
  char v9;
  uint64_t (*v10)(__int128 *, __int128 *);
  __int128 v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  int v17;
  uint64_t (*v18)(__int128 *, __int128 *);
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  uint64_t (*v26)(__int128 *, __int128 *);
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;

  v8 = *a4;
  v49 = *a2;
  v50 = *((_QWORD *)a2 + 2);
  v47 = *a1;
  v48 = *((_QWORD *)a1 + 2);
  v9 = v8(&v49, &v47);
  v10 = *a4;
  if ((v9 & 1) == 0)
  {
    v45 = *a3;
    v46 = *((_QWORD *)a3 + 2);
    v43 = *a2;
    v44 = *((_QWORD *)a2 + 2);
    result = v10(&v45, &v43);
    if (!(_DWORD)result)
      return result;
    v15 = *a2;
    v16 = *((_QWORD *)a2 + 2);
    v17 = *((_DWORD *)a3 + 4);
    *a2 = *a3;
    *((_DWORD *)a2 + 4) = v17;
    *((_DWORD *)a3 + 4) = v16;
    *a3 = v15;
    v18 = *a4;
    v42 = *((_QWORD *)a2 + 2);
    v41 = *a2;
    v19 = *a1;
    v40 = *((_QWORD *)a1 + 2);
    v39 = v19;
    if (!v18(&v41, &v39))
      return 1;
    v20 = *a1;
    v21 = *((_QWORD *)a1 + 2);
    v22 = *((_DWORD *)a2 + 4);
    *a1 = *a2;
    *((_DWORD *)a1 + 4) = v22;
    *((_DWORD *)a2 + 4) = v21;
    *a2 = v20;
    return 2;
  }
  v37 = *a3;
  v38 = *((_QWORD *)a3 + 2);
  v35 = *a2;
  v36 = *((_QWORD *)a2 + 2);
  if (!v10(&v37, &v35))
  {
    v23 = *a1;
    v24 = *((_QWORD *)a1 + 2);
    v25 = *((_DWORD *)a2 + 4);
    *a1 = *a2;
    *((_DWORD *)a1 + 4) = v25;
    *((_DWORD *)a2 + 4) = v24;
    *a2 = v23;
    v26 = *a4;
    v34 = *((_QWORD *)a3 + 2);
    v33 = *a3;
    v27 = *a2;
    v32 = *((_QWORD *)a2 + 2);
    v31 = v27;
    if (!v26(&v33, &v31))
      return 1;
    v28 = *a2;
    v29 = *((_QWORD *)a2 + 2);
    v30 = *((_DWORD *)a3 + 4);
    *a2 = *a3;
    *((_DWORD *)a2 + 4) = v30;
    *((_DWORD *)a3 + 4) = v29;
    *a3 = v28;
    return 2;
  }
  v11 = *a1;
  v12 = *((_QWORD *)a1 + 2);
  v13 = *((_DWORD *)a3 + 4);
  *a1 = *a3;
  *((_DWORD *)a1 + 4) = v13;
  *((_DWORD *)a3 + 4) = v12;
  *a3 = v11;
  return 1;
}

uint64_t std::__partition_with_equals_on_left[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::MatchedRule *,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t (*v6)(__int128 *, __int128 *);
  uint64_t result;
  __int128 *v8;
  uint64_t (*v9)(__int128 *, __int128 *);
  __int128 *v10;
  __int128 *v11;
  uint64_t (*v12)(__int128 *, __int128 *);
  __int128 *v13;
  __int128 *v14;
  uint64_t (*v15)(__int128 *, __int128 *);
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  uint64_t (*v20)(__int128 *, __int128 *);
  uint64_t v21;
  __int128 v22;
  __int128 *v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;

  v53 = *a1;
  v54 = *((_QWORD *)a1 + 2);
  v6 = *a3;
  v51 = v53;
  v52 = v54;
  v49 = *(__int128 *)((char *)a2 - 24);
  v50 = *((_QWORD *)a2 - 1);
  result = v6(&v51, &v49);
  if ((result & 1) != 0)
  {
    v8 = (__int128 *)((char *)a1 + 24);
    while (v8 != a2)
    {
      v9 = *a3;
      v47 = v53;
      v48 = v54;
      v45 = *v8;
      v46 = *((_QWORD *)v8 + 2);
      result = v9(&v47, &v45);
      v8 = (__int128 *)((char *)v8 + 24);
      if ((result & 1) != 0)
      {
        v10 = (__int128 *)((char *)v8 - 24);
        goto LABEL_9;
      }
    }
    goto LABEL_24;
  }
  v11 = (__int128 *)((char *)a1 + 24);
  do
  {
    v10 = v11;
    if (v11 >= a2)
      break;
    v12 = *a3;
    v43 = v53;
    v44 = v54;
    v41 = *v10;
    v42 = *((_QWORD *)v10 + 2);
    result = v12(&v43, &v41);
    v11 = (__int128 *)((char *)v10 + 24);
  }
  while ((result & 1) == 0);
LABEL_9:
  v13 = a2;
  if (v10 < a2)
  {
    v14 = a2;
    while (v14 != a1)
    {
      v13 = (__int128 *)((char *)v14 - 24);
      v15 = *a3;
      v39 = v53;
      v40 = v54;
      v37 = *(__int128 *)((char *)v14 - 24);
      v38 = *((_QWORD *)v14 - 1);
      result = v15(&v39, &v37);
      v14 = v13;
      if ((result & 1) == 0)
        goto LABEL_20;
    }
    goto LABEL_24;
  }
LABEL_20:
  if (v10 < v13)
  {
    v16 = *v10;
    v56 = *((_QWORD *)v10 + 2);
    v55 = v16;
    v17 = *v13;
    *((_DWORD *)v10 + 4) = *((_DWORD *)v13 + 4);
    *v10 = v17;
    v18 = (__int128 *)((char *)v10 + 24);
    v19 = v55;
    *((_DWORD *)v13 + 4) = v56;
    *v13 = v19;
    while (v18 != a2)
    {
      v20 = *a3;
      v35 = v53;
      v36 = v54;
      v21 = *((_QWORD *)v18 + 2);
      v22 = *v18;
      v18 = (__int128 *)((char *)v18 + 24);
      v33 = v22;
      v34 = v21;
      result = v20(&v35, &v33);
      if ((_DWORD)result)
      {
        v10 = (__int128 *)((char *)v18 - 24);
        v23 = v13;
        while (v23 != a1)
        {
          v13 = (__int128 *)((char *)v23 - 24);
          v24 = *a3;
          v31 = v53;
          v32 = v54;
          v25 = *((_QWORD *)v23 - 1);
          v29 = *(__int128 *)((char *)v23 - 24);
          v30 = v25;
          result = v24(&v31, &v29);
          v23 = v13;
          if ((result & 1) == 0)
            goto LABEL_20;
        }
        break;
      }
    }
LABEL_24:
    __break(1u);
    return result;
  }
  v26 = (__int128 *)((char *)v10 - 24);
  if ((__int128 *)((char *)v10 - 24) != a1)
  {
    v27 = *v26;
    *((_DWORD *)a1 + 4) = *((_DWORD *)v10 - 2);
    *a1 = v27;
  }
  v28 = v53;
  *((_DWORD *)v10 - 2) = v54;
  *v26 = v28;
  return (uint64_t)v10;
}

uint64_t std::__partition_with_equals_on_right[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::MatchedRule *,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule)>(uint64_t result, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t (*v8)(__int128 *, __int128 *);
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t (*v12)(__int128 *, __int128 *);
  uint64_t (*v13)(__int128 *, __int128 *);
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  uint64_t (*v20)(__int128 *, __int128 *);
  uint64_t v21;
  __int128 v22;
  __int128 *v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v5 = result;
  v6 = 0;
  v48 = *(_OWORD *)result;
  v49 = *(_QWORD *)(result + 16);
  do
  {
    v7 = (__int128 *)(v5 + v6 + 24);
    if (v7 == a2)
      goto LABEL_25;
    v8 = *a3;
    v46 = *v7;
    v47 = *(_QWORD *)(v5 + v6 + 40);
    v44 = v48;
    v45 = v49;
    result = v8(&v46, &v44);
    v6 += 24;
  }
  while ((result & 1) != 0);
  v9 = (__int128 *)(v5 + v6);
  v10 = a2;
  if (v6 != 24)
  {
    while (v10 != (__int128 *)v5)
    {
      v11 = (__int128 *)((char *)v10 - 24);
      v12 = *a3;
      v38 = *(__int128 *)((char *)v10 - 24);
      v39 = *((_QWORD *)v10 - 1);
      v36 = v48;
      v37 = v49;
      result = v12(&v38, &v36);
      v10 = v11;
      if ((_DWORD)result)
        goto LABEL_11;
    }
    goto LABEL_25;
  }
  while (v9 < v10)
  {
    v13 = *a3;
    v11 = (__int128 *)((char *)v10 - 24);
    v42 = *(__int128 *)((char *)v10 - 24);
    v43 = *((_QWORD *)v10 - 1);
    v40 = v48;
    v41 = v49;
    result = v13(&v42, &v40);
    v10 = v11;
    if ((result & 1) != 0)
      goto LABEL_11;
  }
  v11 = v10;
LABEL_11:
  if (v9 < v11)
  {
    v14 = v9;
    v15 = v11;
LABEL_13:
    v16 = *v14;
    v51 = *((_QWORD *)v14 + 2);
    v50 = v16;
    v17 = *v15;
    *((_DWORD *)v14 + 4) = *((_DWORD *)v15 + 4);
    *v14 = v17;
    v18 = v50;
    *((_DWORD *)v15 + 4) = v51;
    *v15 = v18;
    v19 = (__int128 *)((char *)v14 + 24);
    while (v19 != a2)
    {
      v20 = *a3;
      v21 = *((_QWORD *)v19 + 2);
      v22 = *v19;
      v19 = (__int128 *)((char *)v19 + 24);
      v34 = v22;
      v35 = v21;
      v32 = v48;
      v33 = v49;
      result = v20(&v34, &v32);
      if ((result & 1) == 0)
      {
        v14 = (__int128 *)((char *)v19 - 24);
        v23 = v15;
        while (v23 != (__int128 *)v5)
        {
          v15 = (__int128 *)((char *)v23 - 24);
          v24 = *a3;
          v25 = *((_QWORD *)v23 - 1);
          v30 = *(__int128 *)((char *)v23 - 24);
          v31 = v25;
          v28 = v48;
          v29 = v49;
          result = v24(&v30, &v28);
          v23 = v15;
          if ((_DWORD)result)
          {
            if (v14 < v15)
              goto LABEL_13;
            result = (uint64_t)(v19 - 3);
            goto LABEL_22;
          }
        }
        break;
      }
    }
LABEL_25:
    __break(1u);
    return result;
  }
  result = (uint64_t)v9 - 24;
LABEL_22:
  if (result != v5)
  {
    v26 = *(_OWORD *)result;
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(result + 16);
    *(_OWORD *)v5 = v26;
  }
  v27 = v48;
  *(_DWORD *)(result + 16) = v49;
  *(_OWORD *)result = v27;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t (*v8)(__int128 *, __int128 *);
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t (*v17)(__int128 *, __int128 *);
  uint64_t v18;
  __int128 v19;
  uint64_t (*v20)(__int128 *, __int128 *);
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t (*v24)(__int128 *, __int128 *);
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t (*v28)(__int128 *, __int128 *);
  __int128 v29;
  uint64_t v30;
  int v31;
  uint64_t (*v32)(__int128 *, __int128 *);
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t (*v36)(__int128 *, __int128 *);
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t (*v40)(__int128 *, __int128 *);
  __int128 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t (*v47)(__int128 *, __int128 *);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(__int128 *, __int128 *);
  uint64_t v52;
  __int128 *v53;
  uint64_t (*v54)(__int128 *, __int128 *);
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  int v58;
  uint64_t (*v59)(__int128 *, __int128 *);
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  uint64_t (*v63)(__int128 *, __int128 *);
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      v77 = *(_OWORD *)(a2 - 24);
      v78 = *(_QWORD *)(a2 - 8);
      v75 = *(_OWORD *)a1;
      v76 = *(_QWORD *)(a1 + 16);
      if (v8(&v77, &v75))
      {
        v9 = a2 - 24;
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a1 + 16);
        v12 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 16) = v12;
        *(_DWORD *)(v9 + 16) = v11;
        *(_OWORD *)v9 = v10;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      v13 = a1 + 24;
      v53 = (__int128 *)(a1 + 48);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v54 = *a3;
      v93 = *(_OWORD *)(a2 - 24);
      v94 = *(_QWORD *)(a2 - 8);
      v91 = *(_OWORD *)(a1 + 48);
      v92 = *(_QWORD *)(a1 + 64);
      if (!v54(&v93, &v91))
        return 1;
      v55 = a2 - 24;
      v56 = *v53;
      v57 = *(_QWORD *)(a1 + 64);
      v58 = *(_DWORD *)(a2 - 8);
      *v53 = *(_OWORD *)(a2 - 24);
      *(_DWORD *)(a1 + 64) = v58;
      *(_DWORD *)(v55 + 16) = v57;
      *(_OWORD *)v55 = v56;
      v59 = *a3;
      v90 = *(_QWORD *)(a1 + 64);
      v89 = *v53;
      v60 = *(_OWORD *)v13;
      v88 = *(_QWORD *)(a1 + 40);
      v87 = v60;
      if (!v59(&v89, &v87))
        return 1;
      v61 = *(_QWORD *)(a1 + 40);
      v62 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *v53;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
      *v53 = v62;
      *(_DWORD *)(a1 + 64) = v61;
      v63 = *a3;
      v86 = *(_QWORD *)(a1 + 40);
      v85 = *(_OWORD *)v13;
      v64 = *(_OWORD *)a1;
      v84 = *(_QWORD *)(a1 + 16);
      v83 = v64;
      v42 = v63(&v85, &v83);
      goto LABEL_27;
    case 5uLL:
      v13 = a1 + 24;
      v14 = (__int128 *)(a1 + 48);
      v15 = (__int128 *)(a1 + 72);
      v16 = (__int128 *)(a2 - 24);
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v17 = *a3;
      v93 = *(_OWORD *)(a1 + 72);
      v94 = *(_QWORD *)(a1 + 88);
      v91 = *(_OWORD *)(a1 + 48);
      v92 = *(_QWORD *)(a1 + 64);
      if (v17(&v93, &v91))
      {
        v18 = *(_QWORD *)(a1 + 64);
        v19 = *v14;
        *v14 = *v15;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
        *v15 = v19;
        *(_DWORD *)(a1 + 88) = v18;
        v20 = *a3;
        v90 = *(_QWORD *)(a1 + 64);
        v89 = *v14;
        v21 = *(_OWORD *)v13;
        v88 = *(_QWORD *)(a1 + 40);
        v87 = v21;
        if (v20(&v89, &v87))
        {
          v22 = *(_QWORD *)(a1 + 40);
          v23 = *(_OWORD *)v13;
          *(_OWORD *)v13 = *v14;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
          *v14 = v23;
          *(_DWORD *)(a1 + 64) = v22;
          v24 = *a3;
          v86 = *(_QWORD *)(a1 + 40);
          v85 = *(_OWORD *)v13;
          v25 = *(_OWORD *)a1;
          v84 = *(_QWORD *)(a1 + 16);
          v83 = v25;
          if (v24(&v85, &v83))
          {
            v26 = *(_QWORD *)(a1 + 16);
            v27 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 40);
            *(_OWORD *)v13 = v27;
            *(_DWORD *)(a1 + 40) = v26;
          }
        }
      }
      v28 = *a3;
      v93 = *v16;
      v94 = *((_QWORD *)v16 + 2);
      v91 = *v15;
      v92 = *(_QWORD *)(a1 + 88);
      if (!v28(&v93, &v91))
        return 1;
      v29 = *v15;
      v30 = *(_QWORD *)(a1 + 88);
      v31 = *((_DWORD *)v16 + 4);
      *v15 = *v16;
      *(_DWORD *)(a1 + 88) = v31;
      *((_DWORD *)v16 + 4) = v30;
      *v16 = v29;
      v32 = *a3;
      v90 = *(_QWORD *)(a1 + 88);
      v89 = *v15;
      v33 = *v14;
      v88 = *(_QWORD *)(a1 + 64);
      v87 = v33;
      if (!v32(&v89, &v87))
        return 1;
      v34 = *(_QWORD *)(a1 + 64);
      v35 = *v14;
      *v14 = *v15;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a1 + 88);
      *v15 = v35;
      *(_DWORD *)(a1 + 88) = v34;
      v36 = *a3;
      v86 = *(_QWORD *)(a1 + 64);
      v85 = *v14;
      v37 = *(_OWORD *)v13;
      v84 = *(_QWORD *)(a1 + 40);
      v83 = v37;
      if (!v36(&v85, &v83))
        return 1;
      v38 = *(_QWORD *)(a1 + 40);
      v39 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *v14;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a1 + 64);
      *v14 = v39;
      *(_DWORD *)(a1 + 64) = v38;
      v40 = *a3;
      v82 = *(_QWORD *)(a1 + 40);
      v81 = *(_OWORD *)v13;
      v41 = *(_OWORD *)a1;
      v80 = *(_QWORD *)(a1 + 16);
      v79 = v41;
      v42 = v40(&v81, &v79);
LABEL_27:
      if (v42)
      {
        v65 = *(_QWORD *)(a1 + 16);
        v66 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v13;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(v13 + 16);
        *(_OWORD *)v13 = v66;
        *(_DWORD *)(v13 + 16) = v65;
      }
      return 1;
    default:
      v43 = a1 + 48;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v44 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v45 = 0;
      v46 = 0;
      break;
  }
  while (1)
  {
    v47 = *a3;
    v73 = *(_OWORD *)v44;
    v74 = *(_QWORD *)(v44 + 16);
    v48 = *(_QWORD *)(v43 + 16);
    v71 = *(_OWORD *)v43;
    v72 = v48;
    if (v47(&v73, &v71))
    {
      v93 = *(_OWORD *)v44;
      v94 = *(_QWORD *)(v44 + 16);
      v49 = v45;
      while (1)
      {
        v50 = a1 + v49;
        *(_OWORD *)(v50 + 72) = *(_OWORD *)(a1 + v49 + 48);
        *(_DWORD *)(v50 + 88) = *(_DWORD *)(a1 + v49 + 64);
        if (v49 == -48)
          break;
        v51 = *a3;
        v69 = v93;
        v70 = v94;
        v67 = *(_OWORD *)(v50 + 24);
        v68 = *(_QWORD *)(v50 + 40);
        v49 -= 24;
        if ((v51(&v69, &v67) & 1) == 0)
        {
          v52 = a1 + v49 + 72;
          goto LABEL_21;
        }
      }
      v52 = a1;
LABEL_21:
      *(_OWORD *)v52 = v93;
      *(_DWORD *)(v52 + 16) = v94;
      if (++v46 == 8)
        return v44 + 24 == a2;
    }
    v43 = v44;
    v45 += 24;
    v44 += 24;
    if (v44 == a2)
      return 1;
  }
}

__int128 *std::__partial_sort_impl[abi:sn180100]<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::Style::MatchedRule,WebCore::Style::MatchedRule),WebCore::Style::MatchedRule*,WebCore::Style::MatchedRule*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  __int128 *v4;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t (*v13)(__int128 *, __int128 *);
  __int128 *v14;
  uint64_t (*v15)(__int128 *, __int128 *);
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(__int128 *, __int128 *);
  unsigned int (*v21)(__int128 *, __int128 *);
  __int128 v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  unsigned int (*v27)(__int128 *, __int128 *);
  __int128 v28;
  uint64_t v29;
  int v30;
  __int128 *v31;
  uint64_t v32;
  unsigned int (*v33)(__int128 *, __int128 *);
  __int128 v34;
  uint64_t v35;
  int v36;
  unsigned int (*v37)(__int128 *, __int128 *);
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(__int128 *, __int128 *);
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(__int128 *, __int128 *);
  unsigned int (*v48)(__int128 *, __int128 *);
  unsigned int v49;
  __int128 v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(__int128 *, __int128 *);
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(__int128 *, __int128 *);
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t (*v70)(__int128 *, __int128 *);
  __int128 v71;
  uint64_t v74;
  __int128 *v76;
  __int128 *v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;

  v4 = a3;
  if ((__int128 *)a1 != a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
    v74 = (uint64_t)a2 - a1;
    if ((uint64_t)a2 - a1 >= 25 && (unint64_t)v74 >= 0x30)
    {
      v8 = (unint64_t)(v7 - 2) >> 1;
      v9 = v8;
      do
      {
        v10 = v9;
        if (v8 >= v9)
        {
          v11 = (2 * v9) | 1;
          v12 = (__int128 *)(a1 + 24 * v11);
          if (2 * v9 + 2 < v7)
          {
            v13 = *a4;
            v99 = *v12;
            v100 = *((_QWORD *)v12 + 2);
            v97 = *(__int128 *)((char *)v12 + 24);
            v98 = *((_QWORD *)v12 + 5);
            if (v13(&v99, &v97))
            {
              v12 = (__int128 *)((char *)v12 + 24);
              v11 = 2 * v10 + 2;
            }
          }
          v14 = (__int128 *)(a1 + 24 * v10);
          v15 = *a4;
          v95 = *v12;
          v96 = *((_QWORD *)v12 + 2);
          v93 = *v14;
          v94 = *((_QWORD *)v14 + 2);
          if ((v15(&v95, &v93) & 1) == 0)
          {
            v91 = *v14;
            v92 = *((_QWORD *)v14 + 2);
            do
            {
              v16 = v12;
              v17 = *v12;
              *((_DWORD *)v14 + 4) = *((_DWORD *)v12 + 4);
              *v14 = v17;
              if (v8 < v11)
                break;
              v18 = (2 * v11) | 1;
              v12 = (__int128 *)(a1 + 24 * v18);
              v19 = 2 * v11 + 2;
              if (v19 < v7)
              {
                v20 = (unsigned int (*)(__int128 *, __int128 *))*a4;
                v89 = *v12;
                v90 = *((_QWORD *)v12 + 2);
                v87 = *(__int128 *)((char *)v12 + 24);
                v88 = *((_QWORD *)v12 + 5);
                if (v20(&v89, &v87))
                {
                  v12 = (__int128 *)((char *)v12 + 24);
                  v18 = v19;
                }
              }
              v21 = (unsigned int (*)(__int128 *, __int128 *))*a4;
              v85 = *v12;
              v86 = *((_QWORD *)v12 + 2);
              v83 = v91;
              v84 = v92;
              v14 = v16;
              v11 = v18;
            }
            while (!v21(&v85, &v83));
            v22 = v91;
            *((_DWORD *)v16 + 4) = v92;
            *v16 = v22;
            v4 = a3;
          }
        }
        v9 = v10 - 1;
      }
      while (v10);
    }
    v23 = a2;
    v24 = a2;
    v25 = v74;
    if (a2 != v4)
    {
      if (v74 >= 48)
      {
        v31 = a2;
        v32 = a1 + 24;
        do
        {
          v33 = (unsigned int (*)(__int128 *, __int128 *))*a4;
          v81 = *v31;
          v82 = *((_QWORD *)v31 + 2);
          v79 = *(_OWORD *)a1;
          v80 = *(_QWORD *)(a1 + 16);
          if (v33(&v81, &v79))
          {
            v34 = *v31;
            v35 = *((_QWORD *)v31 + 2);
            v36 = *(_DWORD *)(a1 + 16);
            *v31 = *(_OWORD *)a1;
            *((_DWORD *)v31 + 4) = v36;
            *(_DWORD *)(a1 + 16) = v35;
            *(_OWORD *)a1 = v34;
            if ((unint64_t)v7 < 3)
            {
              v39 = v32;
              v40 = 1;
            }
            else
            {
              v37 = (unsigned int (*)(__int128 *, __int128 *))*a4;
              v99 = *(_OWORD *)v32;
              v100 = *(_QWORD *)(v32 + 16);
              v97 = *(_OWORD *)(a1 + 48);
              v98 = *(_QWORD *)(a1 + 64);
              v38 = v37(&v99, &v97);
              v39 = v38 ? a1 + 48 : v32;
              v40 = v38 ? 2 : 1;
            }
            v41 = *a4;
            v95 = *(_OWORD *)v39;
            v96 = *(_QWORD *)(v39 + 16);
            v93 = *(_OWORD *)a1;
            v94 = *(_QWORD *)(a1 + 16);
            if ((v41(&v95, &v93) & 1) == 0)
            {
              v91 = *(_OWORD *)a1;
              v92 = *(_QWORD *)(a1 + 16);
              v42 = a1;
              do
              {
                v43 = v39;
                v44 = *(_OWORD *)v39;
                *(_DWORD *)(v42 + 16) = *(_DWORD *)(v39 + 16);
                *(_OWORD *)v42 = v44;
                if ((uint64_t)((unint64_t)(v7 - 2) >> 1) < v40)
                  break;
                v45 = (2 * v40) | 1;
                v39 = a1 + 24 * v45;
                v46 = 2 * v40 + 2;
                if (v46 < v7)
                {
                  v47 = (unsigned int (*)(__int128 *, __int128 *))*a4;
                  v89 = *(_OWORD *)v39;
                  v90 = *(_QWORD *)(v39 + 16);
                  v87 = *(_OWORD *)(v39 + 24);
                  v88 = *(_QWORD *)(v39 + 40);
                  if (v47(&v89, &v87))
                  {
                    v39 += 24;
                    v45 = v46;
                  }
                }
                v48 = (unsigned int (*)(__int128 *, __int128 *))*a4;
                v85 = *(_OWORD *)v39;
                v86 = *(_QWORD *)(v39 + 16);
                v83 = v91;
                v84 = v92;
                v49 = v48(&v85, &v83);
                v42 = v43;
                v40 = v45;
              }
              while (!v49);
              v50 = v91;
              *(_DWORD *)(v43 + 16) = v92;
              *(_OWORD *)v43 = v50;
              v4 = a3;
              v32 = a1 + 24;
            }
          }
          v31 = (__int128 *)((char *)v31 + 24);
        }
        while (v31 != v4);
        v24 = v4;
        v23 = a2;
        v25 = v74;
      }
      else
      {
        v26 = a2;
        do
        {
          v27 = (unsigned int (*)(__int128 *, __int128 *))*a4;
          v81 = *v26;
          v82 = *((_QWORD *)v26 + 2);
          v79 = *(_OWORD *)a1;
          v80 = *(_QWORD *)(a1 + 16);
          if (v27(&v81, &v79))
          {
            v28 = *v26;
            v29 = *((_QWORD *)v26 + 2);
            v30 = *(_DWORD *)(a1 + 16);
            *v26 = *(_OWORD *)a1;
            *((_DWORD *)v26 + 4) = v30;
            *(_DWORD *)(a1 + 16) = v29;
            *(_OWORD *)a1 = v28;
          }
          v26 = (__int128 *)((char *)v26 + 24);
        }
        while (v26 != v4);
        v24 = v4;
      }
    }
    if (v25 < 25)
    {
      return v24;
    }
    else
    {
      v76 = v24;
      v51 = v25 / 0x18uLL;
      do
      {
        v78 = v23;
        v52 = 0;
        v89 = *(_OWORD *)a1;
        v90 = *(_QWORD *)(a1 + 16);
        v53 = a1;
        do
        {
          v54 = v53 + 24 * v52 + 24;
          v55 = (2 * v52) | 1;
          v56 = 2 * v52 + 2;
          if (v56 < v51)
          {
            v57 = (unsigned int (*)(__int128 *, __int128 *))*a4;
            v58 = *(_QWORD *)(v54 + 16);
            v99 = *(_OWORD *)v54;
            v100 = v58;
            v59 = *(_QWORD *)(v54 + 40);
            v97 = *(_OWORD *)(v54 + 24);
            v98 = v59;
            if (v57(&v99, &v97))
            {
              v54 += 24;
              v55 = v56;
            }
          }
          v60 = *(_OWORD *)v54;
          *(_DWORD *)(v53 + 16) = *(_DWORD *)(v54 + 16);
          *(_OWORD *)v53 = v60;
          v53 = v54;
          v52 = v55;
        }
        while (v55 <= (uint64_t)((unint64_t)(v51 - 2) >> 1));
        v23 = (__int128 *)((char *)v23 - 24);
        if ((__int128 *)v54 == (__int128 *)((char *)v78 - 24))
        {
          v71 = v89;
          *(_DWORD *)(v54 + 16) = v90;
          *(_OWORD *)v54 = v71;
        }
        else
        {
          v61 = *v23;
          *(_DWORD *)(v54 + 16) = *((_DWORD *)v78 - 2);
          *(_OWORD *)v54 = v61;
          *v23 = v89;
          *((_DWORD *)v23 + 4) = v90;
          v62 = v54 - a1 + 24;
          if (v62 >= 25)
          {
            v63 = (v62 / 0x18uLL - 2) >> 1;
            v64 = a1 + 24 * v63;
            v65 = (unsigned int (*)(__int128 *, __int128 *))*a4;
            v99 = *(_OWORD *)v64;
            v100 = *(_QWORD *)(v64 + 16);
            v66 = *(_QWORD *)(v54 + 16);
            v97 = *(_OWORD *)v54;
            v98 = v66;
            if (v65(&v99, &v97))
            {
              v67 = *(_OWORD *)v54;
              v96 = *(_QWORD *)(v54 + 16);
              v95 = v67;
              do
              {
                v68 = v64;
                v69 = *(_OWORD *)v64;
                *(_DWORD *)(v54 + 16) = *(_DWORD *)(v64 + 16);
                *(_OWORD *)v54 = v69;
                if (!v63)
                  break;
                v63 = (v63 - 1) >> 1;
                v64 = a1 + 24 * v63;
                v70 = *a4;
                v93 = *(_OWORD *)v64;
                v94 = *(_QWORD *)(v64 + 16);
                v91 = v95;
                v92 = v96;
                v54 = v68;
              }
              while ((v70(&v93, &v91) & 1) != 0);
              *(_OWORD *)v68 = v95;
              *(_DWORD *)(v68 + 16) = v96;
            }
          }
        }
      }
      while (v51-- > 2);
      return v76;
    }
  }
  return v4;
}

WebCore::MutableStyleProperties *WebCore::Style::leftToRightDeclaration(void)::$_0::operator()()
{
  WebCore::MutableStyleProperties *v0;

  v0 = (WebCore::MutableStyleProperties *)WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v0 = 0x900000001;
  *((_QWORD *)v0 + 1) = 0;
  *((_QWORD *)v0 + 2) = (char *)v0 + 32;
  *((_QWORD *)v0 + 3) = 4;
  WebCore::MutableStyleProperties::setProperty(v0, 6, 0x1B1u, 0);
  return v0;
}

void WTF::WeakHashMap<WebCore::Element,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_31;
    v5 = 0;
    do
    {
      while (1)
      {
        v6 = (uint64_t *)(v3 + 16 * --v4);
        v7 = *v6;
        if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(v7 + 8))
          break;
        if (!v4)
          goto LABEL_20;
      }
      *v6 = 0;
      do
      {
        v8 = __ldaxr((unsigned int *)v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v7));
      if (!v9)
      {
        atomic_store(1u, (unsigned int *)v7);
        v13 = *(unsigned int *)(v7 + 28);
        if ((_DWORD)v13)
        {
          v30 = v7;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v7 + 16), (WTF::StringImpl *)(*(_QWORD *)(v7 + 16) + 32 * v13));
          v7 = v30;
        }
        v14 = *(WTF **)(v7 + 16);
        if (v14)
        {
          *(_QWORD *)(v7 + 16) = 0;
          *(_DWORD *)(v7 + 24) = 0;
          v29 = v7;
          WTF::fastFree(v14, a2);
          v7 = v29;
        }
        WTF::fastFree((WTF *)v7, a2);
      }
      *v6 = -1;
      v10 = v3 + 16 * v4;
      v12 = *(void **)(v10 + 8);
      v11 = (_QWORD *)(v10 + 8);
      a2 = v12;
      *v11 = 0;
      if (v12)
        std::default_delete<WebCore::Style::AnchorPositionedElementState>::operator()[abi:sn180100]((int)v11, (WTF *)a2);
      ++v5;
    }
    while (v4);
LABEL_20:
    v3 = *(_QWORD *)a1;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v15 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v16 = *(_DWORD *)(v15 - 12);
      else
        v16 = 0;
      *(_DWORD *)(v15 - 12) = v16 - v5;
      v3 = *(_QWORD *)a1;
    }
    if (v3)
    {
      v17 = *(_DWORD *)(v3 - 4);
      v18 = *(unsigned int *)(v3 - 12);
      if (v17 >= 9 && 6 * (int)v18 < v17)
      {
        v22 = (v18 - 1) | ((v18 - 1) >> 1) | ((((_DWORD)v18 - 1) | ((v18 - 1) >> 1)) >> 2);
        v23 = v22 | (v22 >> 4) | ((v22 | (v22 >> 4)) >> 8);
        v24 = (v23 | HIWORD(v23)) + 1;
        if (v24 > 0x400)
        {
          if (v24 > 2 * v18)
            goto LABEL_42;
        }
        else if (3 * v24 > 4 * v18)
        {
LABEL_40:
          v25 = (double)v18;
          v26 = (double)v24;
          v27 = 0.604166667;
          goto LABEL_43;
        }
        LODWORD(v24) = 2 * v24;
        if (v24 <= 0x400)
          goto LABEL_40;
LABEL_42:
        v25 = (double)v18;
        v26 = (double)v24;
        v27 = 0.416666667;
LABEL_43:
        if (v26 * v27 <= v25)
          LODWORD(v24) = 2 * v24;
        if (v24 <= 8)
          v28 = 8;
        else
          v28 = v24;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a1, v28, 0);
        v3 = *(_QWORD *)a1;
        *(_DWORD *)(a1 + 8) = 0;
        if (!v3)
        {
          v20 = 0;
          goto LABEL_35;
        }
LABEL_32:
        v20 = *(_DWORD *)(v3 - 12);
        v21 = 0x7FFFFFFF;
        if (v20 >= 0x7FFFFFFF)
          goto LABEL_36;
        goto LABEL_35;
      }
LABEL_31:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_32;
    }
  }
  v20 = 0;
  *(_DWORD *)(a1 + 8) = 0;
LABEL_35:
  v21 = v20;
LABEL_36:
  *(_DWORD *)(a1 + 12) = 2 * v21;
}

void std::default_delete<WebCore::Style::AnchorPositionedElementState>::operator()[abi:sn180100](int a1, WTF *this)
{
  WTF::StringImpl **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  if (this)
  {
    v3 = (WTF::StringImpl **)*((_QWORD *)this + 1);
    if (v3)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v3, this);
    v4 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v5 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)this;
        do
        {
          v7 = *(WTF::StringImpl **)v6;
          if (*(_QWORD *)v6 != -1)
          {
            v8 = *(_QWORD *)(v6 + 8);
            *(_QWORD *)(v6 + 8) = 0;
            if (v8)
            {
              if (*(_DWORD *)(v8 + 24) == 2)
              {
                if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
                {
                  WebCore::Node::removedLastRef((WebCore::Node *)v8);
                  v7 = *(WTF::StringImpl **)v6;
                }
              }
              else
              {
                *(_DWORD *)(v8 + 24) -= 2;
              }
            }
            *(_QWORD *)v6 = 0;
            if (v7)
            {
              if (*(_DWORD *)v7 == 2)
                WTF::StringImpl::destroy(v7, this);
              else
                *(_DWORD *)v7 -= 2;
            }
          }
          v6 += 16;
          --v5;
        }
        while (v5);
      }
      WTF::fastFree((WTF *)(v4 - 16), this);
    }
    WTF::fastFree(this, this);
  }
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  WTF *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  WTF *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  WTF **v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *result;
  uint64_t v53;
  uint64_t v54;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = (uint64_t *)(v6 + 16 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v23 = *a1;
          if (*a1)
            v24 = *(_DWORD *)(v23 - 8);
          else
            v24 = 0;
          v25 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
          v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
          v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
          v28 = v24 & ((v27 >> 31) ^ v27);
          v29 = 1;
          do
          {
            v30 = v28;
            v31 = *(_QWORD *)(v23 + 16 * v28);
            v28 = (v28 + v29++) & v24;
          }
          while (v31);
          v32 = (_QWORD *)(v23 + 16 * v30);
          v34 = v32 + 1;
          v33 = (WTF *)v32[1];
          v32[1] = 0;
          if (v33)
          {
            std::default_delete<WebCore::Style::AnchorPositionedElementState>::operator()[abi:sn180100]((int)v34, v33);
            v36 = *v32;
            *v32 = 0;
            if (v36)
            {
              do
              {
                v37 = __ldaxr((unsigned int *)v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, (unsigned int *)v36));
              if (!v38)
              {
                atomic_store(1u, (unsigned int *)v36);
                v39 = *(unsigned int *)(v36 + 28);
                if ((_DWORD)v39)
                {
                  v54 = v36;
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v36 + 16), (WTF::StringImpl *)(*(_QWORD *)(v36 + 16) + 32 * v39));
                  v36 = v54;
                }
                v40 = *(WTF **)(v36 + 16);
                if (v40)
                {
                  *(_QWORD *)(v36 + 16) = 0;
                  *(_DWORD *)(v36 + 24) = 0;
                  v53 = v36;
                  WTF::fastFree(v40, v35);
                  v36 = v53;
                }
                WTF::fastFree((WTF *)v36, v35);
              }
            }
          }
          else
          {
            *v32 = 0;
          }
          v41 = *v14;
          *v14 = 0;
          *v32 = v41;
          v42 = v6 + 16 * v11;
          v44 = *(_QWORD *)(v42 + 8);
          v43 = (WTF **)(v42 + 8);
          *v43 = 0;
          *v34 = v44;
          v10 = *v43;
          *v43 = 0;
          if (v10)
            std::default_delete<WebCore::Style::AnchorPositionedElementState>::operator()[abi:sn180100]((int)v43, v10);
          v45 = *v14;
          *v14 = 0;
          if (v45)
          {
            do
            {
              v46 = __ldaxr((unsigned int *)v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, (unsigned int *)v45));
            if (!v47)
            {
              atomic_store(1u, (unsigned int *)v45);
              v48 = *(unsigned int *)(v45 + 28);
              if ((_DWORD)v48)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v45 + 16), (WTF::StringImpl *)(*(_QWORD *)(v45 + 16) + 32 * v48));
              v49 = *(WTF **)(v45 + 16);
              if (v49)
              {
                *(_QWORD *)(v45 + 16) = 0;
                *(_DWORD *)(v45 + 24) = 0;
                WTF::fastFree(v49, v10);
              }
              WTF::fastFree((WTF *)v45, v10);
            }
          }
          if (v14 == a3)
            v12 = v32;
        }
        else
        {
          v16 = v6 + 16 * v11;
          v18 = *(WTF **)(v16 + 8);
          v17 = (_QWORD *)(v16 + 8);
          v10 = v18;
          *v17 = 0;
          if (v18)
          {
            std::default_delete<WebCore::Style::AnchorPositionedElementState>::operator()[abi:sn180100]((int)v17, v10);
            v15 = *v14;
          }
          *v14 = 0;
          if (v15)
          {
            do
            {
              v19 = __ldaxr((unsigned int *)v15);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, (unsigned int *)v15));
            if (!v20)
            {
              atomic_store(1u, (unsigned int *)v15);
              v21 = *(unsigned int *)(v15 + 28);
              if ((_DWORD)v21)
              {
                v51 = v15;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v15 + 16), (WTF::StringImpl *)(*(_QWORD *)(v15 + 16) + 32 * v21));
                v15 = v51;
              }
              v22 = *(WTF **)(v15 + 16);
              if (v22)
              {
                *(_QWORD *)(v15 + 16) = 0;
                *(_DWORD *)(v15 + 24) = 0;
                v50 = v15;
                WTF::fastFree(v22, v10);
                v15 = v50;
              }
              WTF::fastFree((WTF *)v15, v10);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeatures<WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1>(WebCore::Element &,WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1 &&)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 56);
  return v2 && *(_DWORD *)(v2 - 12) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeatures<WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1>(WebCore::Element &,WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1 &&)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1&)#2},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 132) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeaturesInShadowTree<WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1 &>(WebCore::Element &,WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1 &)::{lambda(WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1 &&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 180) | *(unsigned __int8 *)(a2 + 800)) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeaturesForSlotted<WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1 &>(WebCore::Element &,WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1 &)::{lambda(WebCore::Style::AttributeChangeInvalidation::invalidateStyle(WebCore::QualifiedName const&,WTF::AtomString const&,WTF::AtomString const&)::$_1 &&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 228) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeatures<WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1>(WebCore::Element &,WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1 &&)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 56);
  return v2 && *(_DWORD *)(v2 - 12) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeatures<WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1>(WebCore::Element &,WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1 &&)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1&)#2},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 132) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeaturesInShadowTree<WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1 &>(WebCore::Element &,WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1 &)::{lambda(WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1 &&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 180) | *(unsigned __int8 *)(a2 + 800)) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeaturesForSlotted<WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1 &>(WebCore::Element &,WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1 &)::{lambda(WebCore::Style::ClassChangeInvalidation::computeInvalidation(WebCore::SpaceSplitString const&,WebCore::SpaceSplitString const&)::$_1 &&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 228) != 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Condition const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Feature const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t **a1, unsigned __int8 *a2)
{
  return WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateCondition(**a1, a2, (*a1)[1]);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Condition const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Feature const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t (***v2)(_QWORD);

  v2 = *(uint64_t (****)(_QWORD))(a2 + 72);
  if (v2)
    return (**v2)(v2);
  else
    return 2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Condition const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::Feature const&)#1},WebCore::MQ::GenericMediaQueryEvaluator<WebCore::Style::ContainerQueryEvaluator>::evaluateQueryInParens(std::variant<WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&,WebCore::MQ::FeatureEvaluationContext const&)::{lambda(WebCore::MQ::GeneralEnclosed const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::MQ::Condition,WebCore::MQ::Feature,WebCore::MQ::GeneralEnclosed> const&>()
{
  return 2;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::CSSRegisteredCustomProperty *v13;
  WTF *v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WebCore::CSSRegisteredCustomProperty *v22;
  WTF *v23;
  void *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WebCore::CSSRegisteredCustomProperty *v29;
  WTF *v30;
  void *v31;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (WTF::StringImpl **)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != (WTF::StringImpl *)-1)
      {
        if (v11)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = *((_DWORD *)v11 + 4) >> 8;
          do
          {
            v20 = v19 & v17;
            v19 = ++v18 + v20;
          }
          while (*(_QWORD *)(v16 + 16 * v20));
          v21 = (WTF::StringImpl **)(v16 + 16 * v20);
          v22 = v21[1];
          v21[1] = 0;
          if (v22)
          {
            WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(v22, v8);
            WTF::fastFree(v23, v24);
            v25 = *v21;
            *v21 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v8);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            *v21 = 0;
          }
          v26 = *v10;
          *v10 = 0;
          *v21 = v26;
          v27 = v4 + 16 * v9;
          v28 = *(WTF::StringImpl **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          v21[1] = v28;
          v29 = *(WebCore::CSSRegisteredCustomProperty **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(v29, v8);
            WTF::fastFree(v30, v31);
          }
          v11 = *v10;
          *v10 = 0;
          if (!v11)
            goto LABEL_27;
          if (*(_DWORD *)v11 == 2)
            goto LABEL_29;
          *(_DWORD *)v11 -= 2;
        }
        else
        {
          v12 = v4 + 16 * v9;
          v13 = *(WebCore::CSSRegisteredCustomProperty **)(v12 + 8);
          *(_QWORD *)(v12 + 8) = 0;
          if (v13)
          {
            WebCore::CSSRegisteredCustomProperty::~CSSRegisteredCustomProperty(v13, v8);
            WTF::fastFree(v14, v15);
            v11 = *v10;
          }
          *v10 = 0;
          if (!v11)
            goto LABEL_27;
          if (*(_DWORD *)v11 == 2)
          {
LABEL_29:
            WTF::StringImpl::destroy(v11, v8);
            goto LABEL_27;
          }
          *(_DWORD *)v11 -= 2;
        }
      }
LABEL_27:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Vector<WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const*&>(uint64_t a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = (_QWORD *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleRule const*>(uint64_t result, _DWORD **a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v9, v11);
    }
  }
  v12 = *(unsigned int *)(v3 + 12);
  v13 = *(_QWORD *)v3;
  v14 = *a2;
  if (*a2)
    ++*v14;
  *(_QWORD *)(v13 + 8 * v12) = v14;
  *(_DWORD *)(v3 + 12) = v12 + 1;
  return 1;
}

uint64_t WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  WTF *v14;
  void *v15;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = (_QWORD *)result;
        v11 = (uint64_t *)((char *)v7 + 16 * v8);
        v12 = (uint64_t *)v7;
        do
        {
          v13 = *v12;
          *v12 = 0;
          *v10 = v13;
          v10[1] = v12[1];
          result = *v12;
          *v12 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
            {
              if ((*(_BYTE *)(result + 4) & 8) != 0)
                WebCore::MutableStyleProperties::~MutableStyleProperties((WebCore::MutableStyleProperties *)result, v9);
              else
                WebCore::ImmutableStyleProperties::~ImmutableStyleProperties((WebCore::ImmutableStyleProperties *)result, v9);
              result = WTF::fastFree(v14, v15);
            }
            else
            {
              --*(_DWORD *)result;
            }
          }
          v12 += 2;
          v10 += 2;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

void WebCore::Style::createFilterOperations(WebCore::Style *this@<X0>, const WebCore::Document *a2@<X1>, WebCore::RenderStyle *a3@<X2>, const WebCore::CSSToLengthConversionData *a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  int v9;
  const WebCore::Document *v10;
  unint64_t v11;
  int v12;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  __n128 v34;
  double v35;
  _BOOL4 v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  const WebCore::CSSPrimitiveValue *v43;
  __n128 v44;
  double v45;
  _BOOL4 v46;
  uint64_t v47;
  int v48;
  const WebCore::Document *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  double v54;
  double v55;
  int v57;
  WebCore::RenderStyle *v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  WTF *v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  char v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  WTF *v82;
  WTF *v83;
  char v84;
  uint64_t v85;
  WTF *v86;
  WTF *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  BOOL v98;
  double v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  uint64_t v105;
  int v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  int v109;
  double v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  uint64_t v117;
  const WebCore::Document *v118;
  WebCore::RenderStyle *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  char *v134;
  int v135;
  int v136;
  __int16 v137;
  char v138;
  WTF::StringImpl *v139[5];
  _QWORD v140[2];
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF *v143;
  uint64_t v144;

  v9 = *((unsigned __int16 *)a4 + 2) | (*((unsigned __int8 *)a4 + 6) << 16);
  if ((v9 & 0x3F800) != 0x1D800)
  {
    if ((v9 & 0x3F800) == 0 && (*((_WORD *)a4 + 2) & 0x7F) == 0x50 && *((_WORD *)a4 + 4) == 6)
    {
      v139[0] = 0;
      *(_QWORD *)a5 = 0;
      v139[1] = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_BYTE *)(a5 + 16) = 1;
      WebCore::FilterOperations::~FilterOperations((unsigned int ***)v139, a2);
    }
    else
    {
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 16) = 0;
    }
    return;
  }
  v10 = a2;
  v11 = 0;
  v143 = 0;
  v144 = 0;
  v12 = *((_DWORD *)a4 + 2);
  if (!v12)
  {
LABEL_126:
    WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v143, v11);
    *(_QWORD *)a5 = v143;
    v85 = v144;
    v143 = 0;
    v144 = 0;
    *(_QWORD *)(a5 + 8) = v85;
    *(_BYTE *)(a5 + 16) = 1;
    goto LABEL_127;
  }
  v14 = 0;
  v15 = 0;
  v16 = (char *)a4 + 16;
  v135 = *((_DWORD *)a4 + 2);
  v134 = (char *)a4 + 16;
  while (1)
  {
    if (v14 > 3)
    {
      if (*((_DWORD *)a4 + 2) <= v14)
      {
        __break(0xC471u);
        JUMPOUT(0x196589774);
      }
      v17 = *((_QWORD *)a4 + 6) + 8 * (v15 - 4);
    }
    else
    {
      v17 = (uint64_t)&v16[8 * v15];
    }
    v18 = *(_QWORD *)v17;
    v19 = *(unsigned __int16 *)(*(_QWORD *)v17 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v17 + 6) << 16);
    v20 = v19 & 0x3F800;
    if (v18)
      v21 = v20 == 0;
    else
      v21 = 0;
    if (v21)
    {
      if ((v19 & 0x7F) == 0x15)
      {
        WebCore::CSSPrimitiveValue::stringValue((uint64_t *)v18, &v142);
        WebCore::Document::completeURL(this, &v142, 0, (WTF::URL *)v139);
        v140[0] = WTF::URL::fragmentIdentifier((WTF::URL *)v139);
        v140[1] = v102;
        WTF::StringView::toAtomString((WTF::StringView *)v140, &v141);
        v104 = v139[0];
        v139[0] = 0;
        if (v104)
        {
          if (*(_DWORD *)v104 == 2)
            WTF::StringImpl::destroy(v104, v103);
          else
            *(_DWORD *)v104 -= 2;
        }
        v105 = WTF::fastMalloc((WTF *)0x28);
        WebCore::ReferenceFilterOperation::ReferenceFilterOperation(v105, (_DWORD **)&v142, (uint64_t *)&v141);
        v106 = HIDWORD(v144);
        if (HIDWORD(v144) == (_DWORD)v144)
        {
          WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)&v143, HIDWORD(v144) + 1);
          v106 = HIDWORD(v144);
        }
        *((_QWORD *)v143 + HIDWORD(v144)) = v105;
        HIDWORD(v144) = v106 + 1;
        v107 = v141;
        v141 = 0;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v107 -= 2;
        }
        v108 = v142;
        v142 = 0;
        if (v108)
        {
          if (*(_DWORD *)v108 == 2)
            WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v108 -= 2;
        }
      }
      goto LABEL_124;
    }
    if (v18 && v20 == 122880)
      break;
LABEL_124:
    v14 = v15 + 1;
    v15 = (v15 + 1);
    if (v12 == v14)
    {
      v11 = HIDWORD(v144);
      goto LABEL_126;
    }
  }
  v22 = 0;
  switch(*(_WORD *)(v18 + 56))
  {
    case 0x328:
      v22 = 1;
      goto LABEL_14;
    case 0x329:
      v22 = 2;
      goto LABEL_14;
    case 0x32A:
      v22 = 3;
      goto LABEL_14;
    case 0x32B:
      v22 = 4;
      goto LABEL_14;
    case 0x32C:
      v22 = 7;
      goto LABEL_14;
    case 0x32D:
      v22 = 8;
      goto LABEL_14;
    case 0x32E:
      v22 = 9;
      goto LABEL_14;
    case 0x32F:
      v22 = 10;
      goto LABEL_14;
    case 0x330:
      LODWORD(v23) = *(_DWORD *)(v18 + 8);
LABEL_27:
      if ((_DWORD)v23 == 1)
      {
        v27 = *(_QWORD *)(v18 + 16);
        if (v27 && ((*(unsigned __int16 *)(v27 + 4) | (*(unsigned __int8 *)(v27 + 6) << 16)) & 0x3F800) == 0x1A800)
        {
          v28 = *(_QWORD *)(v27 + 8);
          v29 = *(_WORD *)(v28 + 4) & 0x7F;
          if (v29 == 73)
          {
            v34.n128_f64[0] = WebCore::CSSCalcValue::computeLengthPx(*(WebCore::CSSCalcValue **)(v28 + 8), a3);
          }
          else
          {
            v30 = v29 - 79;
            if (v29 == 63)
              v31 = 22;
            else
              v31 = *(_WORD *)(v28 + 4) & 0x7F;
            if (v29 == 77)
              v32 = 20;
            else
              v32 = v31;
            if (v30 >= 2)
              v33 = v32;
            else
              v33 = 22;
            a6.n128_u64[0] = *(_QWORD *)(v28 + 8);
            v34.n128_f64[0] = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a3, (void *)v33, a6);
          }
          v35 = v34.n128_f64[0] + dbl_1968DE9C0[v34.n128_f64[0] < 0.0];
          v36 = v35 < -2147483650.0 || v35 > 2147483650.0;
          v37 = *(_QWORD *)(v27 + 16);
          v38 = *(_WORD *)(v37 + 4) & 0x7F;
          if (v38 == 73)
          {
            v44.n128_f64[0] = WebCore::CSSCalcValue::computeLengthPx(*(WebCore::CSSCalcValue **)(v37 + 8), a3);
          }
          else
          {
            v39 = v38 - 79;
            if (v38 == 63)
              v40 = 22;
            else
              v40 = *(_WORD *)(v37 + 4) & 0x7F;
            if (v38 == 77)
              v41 = 20;
            else
              v41 = v40;
            if (v39 >= 2)
              v42 = v41;
            else
              v42 = 22;
            v34.n128_u64[0] = *(_QWORD *)(v37 + 8);
            v44.n128_f64[0] = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a3, (void *)v42, v34);
          }
          v45 = v44.n128_f64[0] + dbl_1968DE9C0[v44.n128_f64[0] < 0.0];
          v46 = v45 < -2147483650.0 || v45 > 2147483650.0;
          v47 = *(_QWORD *)(v27 + 24);
          v132 = a5;
          if (v47)
          {
            v48 = *(_WORD *)(v47 + 4) & 0x7F;
            v49 = v10;
            if (v48 == 73)
            {
              v54 = WebCore::CSSCalcValue::computeLengthPx(*(WebCore::CSSCalcValue **)(v47 + 8), a3);
            }
            else
            {
              v50 = v48 - 79;
              if (v48 == 63)
                v51 = 22;
              else
                v51 = *(_WORD *)(v47 + 4) & 0x7F;
              if (v48 == 77)
                v52 = 20;
              else
                v52 = v51;
              if (v50 >= 2)
                v53 = v52;
              else
                v53 = 22;
              v44.n128_u64[0] = *(_QWORD *)(v47 + 8);
              v54 = WebCore::CSSPrimitiveValue::computeNonCalcLengthDouble((uint64_t)a3, (void *)v53, v44);
            }
            v55 = v54 + dbl_1968DE9C0[v54 < 0.0];
            if (v55 >= -2147483650.0 && v55 <= 2147483650.0)
              v57 = (int)v55;
            else
              v57 = 0;
          }
          else
          {
            v49 = v10;
            v57 = 0;
          }
          v58 = *(WebCore::RenderStyle **)(v27 + 48);
          if (v58)
          {
            WebCore::Style::colorFromPrimitiveValueWithResolvedCurrentColor((uint64_t *)v139, this, v49, v58, v43);
          }
          else
          {
            v59 = *(WTF::StringImpl **)(*((_QWORD *)v49 + 4) + 328);
            v139[0] = v59;
            if (((unint64_t)v59 & 0x8000000000000) != 0)
            {
              v124 = (unsigned int *)((unint64_t)v59 & 0xFFFFFFFFFFFFLL);
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 + 1, v124));
            }
          }
          v60 = (uint64_t)v139[0];
          if (((unint64_t)v139[0] & 0x4000000000000) != 0)
          {
            if (((unint64_t)v139[0] & 0x8000000000000) != 0)
            {
              v115 = (unsigned int *)((unint64_t)v139[0] & 0xFFFFFFFFFFFFLL);
              do
                v116 = __ldaxr(v115);
              while (__stlxr(v116 + 1, v115));
            }
          }
          else
          {
            v60 = 0x1104000000000000;
          }
          v61 = WTF::fastMalloc((WTF *)0x28);
          v62 = v61;
          *(_DWORD *)(v61 + 8) = 1;
          *(_BYTE *)(v61 + 12) = 11;
          *(_QWORD *)v61 = off_1E3416388;
          v63 = (unint64_t)(int)v45 << 32;
          if (v46)
            v63 = 0;
          if (v36)
            v64 = 0;
          else
            v64 = (int)v35;
          *(_QWORD *)(v61 + 16) = v63 | v64;
          *(_DWORD *)(v61 + 24) = v57;
          *(_QWORD *)(v61 + 32) = v60;
          if ((v60 & 0x8000000000000) != 0)
          {
            v122 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
            do
              v123 = __ldaxr(v122);
            while (__stlxr(v123 + 1, v122));
          }
          v65 = HIDWORD(v144);
          if (HIDWORD(v144) == (_DWORD)v144)
          {
            v66 = HIDWORD(v144) + ((unint64_t)HIDWORD(v144) >> 2);
            if (v66 >= 0x10)
              v67 = v66 + 1;
            else
              v67 = 16;
            if (v67 <= (unint64_t)HIDWORD(v144) + 1)
              v68 = HIDWORD(v144) + 1;
            else
              v68 = v67;
            if (v68 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x196589830);
            }
            v69 = v143;
            v70 = (WTF *)WTF::fastMalloc((WTF *)(8 * v68));
            LODWORD(v144) = v68;
            v143 = v70;
            memcpy(v70, v69, 8 * v65);
            if (v69)
            {
              if (v70 == v69)
              {
                v70 = 0;
                v143 = 0;
                LODWORD(v144) = 0;
              }
              WTF::fastFree(v69, (void *)v11);
            }
          }
          else
          {
            v70 = v143;
          }
          *((_QWORD *)v70 + v65) = v62;
          HIDWORD(v144) = v65 + 1;
          if ((v60 & 0x8000000000000) != 0)
          {
            v126 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFLL);
            do
            {
              v127 = __ldaxr(v126);
              v128 = v127 - 1;
            }
            while (__stlxr(v128, v126));
            if (!v128)
            {
              atomic_store(1u, v126);
              WTF::fastFree((WTF *)v126, (void *)v11);
            }
          }
          v10 = v49;
          if (((unint64_t)v139[0] & 0x8000000000000) != 0)
          {
            v129 = (unsigned int *)((unint64_t)v139[0] & 0xFFFFFFFFFFFFLL);
            do
            {
              v130 = __ldaxr(v129);
              v131 = v130 - 1;
            }
            while (__stlxr(v131, v129));
            if (!v131)
            {
              atomic_store(1u, v129);
              WTF::fastFree((WTF *)v129, (void *)v11);
            }
          }
          a5 = v132;
          v12 = v135;
          v16 = v134;
        }
        goto LABEL_124;
      }
      *(_BYTE *)a5 = 0;
      *(_BYTE *)(a5 + 16) = 0;
LABEL_127:
      v86 = v143;
      if (HIDWORD(v144))
      {
        v87 = (WTF *)((char *)v143 + 8 * HIDWORD(v144));
        do
        {
          v88 = *(unsigned int **)v86;
          *(_QWORD *)v86 = 0;
          if (v88)
          {
            v89 = v88 + 2;
            do
            {
              v90 = __ldaxr(v89);
              v91 = v90 - 1;
            }
            while (__stlxr(v91, v89));
            if (!v91)
            {
              atomic_store(1u, v88 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 8))(v88);
            }
          }
          v86 = (WTF *)((char *)v86 + 8);
        }
        while (v86 != v87);
        v86 = v143;
      }
      if (v86)
      {
        v143 = 0;
        LODWORD(v144) = 0;
        WTF::fastFree(v86, (void *)v11);
      }
      return;
    case 0x331:
      goto LABEL_14;
    case 0x332:
    case 0x333:
    case 0x334:
      goto LABEL_191;
    case 0x335:
      v22 = 6;
      goto LABEL_14;
    default:
      if (*(_WORD *)(v18 + 56) == 462)
        v22 = 5;
      else
LABEL_191:
        v22 = 14;
LABEL_14:
      v23 = *(unsigned int *)(v18 + 8);
      if ((_DWORD)v23)
      {
        v24 = *(_QWORD *)(v18 + 16);
        if (((*(unsigned __int16 *)(v24 + 4) | (*(unsigned __int8 *)(v24 + 6) << 16)) & 0x3F800) != 0)
          goto LABEL_124;
        if ((_DWORD)v23 != 1)
        {
          if (((*(unsigned __int16 *)(*(_QWORD *)(v18 + 24) + 4) | (*(unsigned __int8 *)(*(_QWORD *)(v18 + 24) + 6) << 16)) & 0x3F800) != 0)
            goto LABEL_124;
          if ((_DWORD)v23 != 2)
          {
            if (((*(unsigned __int16 *)(*(_QWORD *)(v18 + 32) + 4) | (*(unsigned __int8 *)(*(_QWORD *)(v18 + 32) + 6) << 16)) & 0x3F800) != 0)
              goto LABEL_124;
            if ((_DWORD)v23 != 3)
            {
              if (((*(unsigned __int16 *)(*(_QWORD *)(v18 + 40) + 4) | (*(unsigned __int8 *)(*(_QWORD *)(v18 + 40)
                                                                                              + 6) << 16)) & 0x3F800) != 0)
                goto LABEL_124;
              if ((_DWORD)v23 != 4)
              {
                v117 = a5;
                v118 = v10;
                v119 = a3;
                v120 = *(_QWORD *)(v18 + 48);
                v121 = v23 - 4;
                do
                {
                  a3 = v119;
                  v10 = v118;
                  a5 = v117;
                  v12 = v135;
                  v16 = v134;
                  if (((*(unsigned __int16 *)(*(_QWORD *)v120 + 4) | (*(unsigned __int8 *)(*(_QWORD *)v120 + 6) << 16)) & 0x3F800) != 0)
                    goto LABEL_124;
                  v120 += 8;
                  --v121;
                }
                while (v121);
                a3 = v119;
                v10 = v118;
                a5 = v117;
                v12 = v135;
                v16 = v134;
              }
            }
          }
        }
      }
      else
      {
        v24 = 0;
      }
      if (v22 != 10)
      {
        switch(v22)
        {
          case 1:
          case 2:
          case 3:
            v99 = 1.0;
            if ((_DWORD)v23 == 1)
            {
              v99 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)v24);
              if (WebCore::CSSPrimitiveValue::primitiveType((WebCore::CSSPrimitiveValue *)v24) == 3)
                v99 = v99 / 100.0;
            }
            v93 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)(v93 + 8) = 1;
            *(_BYTE *)(v93 + 12) = v22;
            *(_QWORD *)v93 = off_1E34161C8;
            *(double *)(v93 + 16) = v99;
            v139[0] = (WTF::StringImpl *)v93;
            v94 = HIDWORD(v144);
            if (HIDWORD(v144) != (_DWORD)v144)
              goto LABEL_214;
            WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>>((uint64_t)&v143, (uint64_t *)v139);
            v95 = (unsigned int *)v139[0];
            v139[0] = 0;
            if (!v95)
              goto LABEL_124;
            v100 = v95 + 2;
            do
            {
              v101 = __ldaxr(v100);
              v98 = --v101 == 0;
            }
            while (__stlxr(v101, v100));
            goto LABEL_166;
          case 4:
            v110 = 0.0;
            if ((_DWORD)v23 == 1)
              v110 = WebCore::CSSPrimitiveValue::computeDegrees((WebCore::CSSPrimitiveValue *)v24);
            v93 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)(v93 + 8) = 1;
            *(_BYTE *)(v93 + 12) = 4;
            *(_QWORD *)v93 = off_1E34161C8;
            *(double *)(v93 + 16) = v110;
            v139[0] = (WTF::StringImpl *)v93;
            v94 = HIDWORD(v144);
            if (HIDWORD(v144) != (_DWORD)v144)
              goto LABEL_214;
            WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>>((uint64_t)&v143, (uint64_t *)v139);
            v95 = (unsigned int *)v139[0];
            v139[0] = 0;
            if (!v95)
              goto LABEL_124;
            v111 = v95 + 2;
            do
            {
              v112 = __ldaxr(v111);
              v98 = --v112 == 0;
            }
            while (__stlxr(v112, v111));
            goto LABEL_166;
          case 5:
          case 7:
          case 8:
          case 9:
            v92 = 1.0;
            if ((_DWORD)v23 == 1)
            {
              v92 = WebCore::CSSPrimitiveValue::doubleValue((WebCore::CSSPrimitiveValue *)v24);
              if (WebCore::CSSPrimitiveValue::primitiveType((WebCore::CSSPrimitiveValue *)v24) == 3)
                v92 = v92 / 100.0;
            }
            v93 = WTF::fastMalloc((WTF *)0x18);
            *(_DWORD *)(v93 + 8) = 1;
            *(_BYTE *)(v93 + 12) = v22;
            *(_QWORD *)v93 = off_1E3416238;
            *(double *)(v93 + 16) = v92;
            v139[0] = (WTF::StringImpl *)v93;
            v94 = HIDWORD(v144);
            if (HIDWORD(v144) != (_DWORD)v144)
              goto LABEL_214;
            WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>>((uint64_t)&v143, (uint64_t *)v139);
            v95 = (unsigned int *)v139[0];
            v139[0] = 0;
            if (!v95)
              goto LABEL_124;
            v96 = v95 + 2;
            do
            {
              v97 = __ldaxr(v96);
              v98 = --v97 == 0;
            }
            while (__stlxr(v97, v96));
            goto LABEL_166;
          case 6:
            v93 = WTF::fastMalloc((WTF *)0x10);
            *(_DWORD *)(v93 + 8) = 1;
            *(_BYTE *)(v93 + 12) = 6;
            *(_QWORD *)v93 = off_1E34162A8;
            v139[0] = (WTF::StringImpl *)v93;
            v94 = HIDWORD(v144);
            if (HIDWORD(v144) == (_DWORD)v144)
            {
              WTF::Vector<WTF::RefPtr<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::MediaSourceHandle,WTF::RawPtrTraits<WebCore::MediaSourceHandle>,WTF::DefaultRefDerefTraits<WebCore::MediaSourceHandle>>>((uint64_t)&v143, (uint64_t *)v139);
              v95 = (unsigned int *)v139[0];
              v139[0] = 0;
              if (v95)
              {
                v113 = v95 + 2;
                do
                {
                  v114 = __ldaxr(v113);
                  v98 = --v114 == 0;
                }
                while (__stlxr(v114, v113));
LABEL_166:
                if (v98)
                {
                  atomic_store(1u, v95 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v95 + 8))(v95);
                }
              }
            }
            else
            {
LABEL_214:
              *((_QWORD *)v143 + v94) = v93;
              HIDWORD(v144) = v94 + 1;
            }
            break;
          case 11:
            goto LABEL_27;
          default:
            goto LABEL_124;
        }
        goto LABEL_124;
      }
      LODWORD(v139[0]) = 0;
      WORD2(v139[0]) = 4;
      BYTE6(v139[0]) = 0;
      if (!(_DWORD)v23)
      {
        v137 = 4;
        v138 = 0;
        goto LABEL_25;
      }
      if (!v24)
      {
        v25 = 0;
        LODWORD(v140[0]) = 0;
        v26 = 13;
        WORD2(v140[0]) = 13;
        BYTE6(v140[0]) = 0;
        WORD2(v139[0]) = 13;
LABEL_20:
        LODWORD(v139[0]) = 0;
        goto LABEL_21;
      }
      WebCore::CSSPrimitiveValue::convertToLength<26>(v24, a3, (uint64_t)v140);
      if (BYTE4(v139[0]) == 11)
        WebCore::Length::deref((WebCore::Length *)v139);
      v26 = BYTE4(v140[0]);
      WORD2(v139[0]) = WORD2(v140[0]);
      v25 = BYTE5(v140[0]);
      if (BYTE4(v140[0]) - 2 < 9)
      {
        BYTE6(v139[0]) = BYTE6(v140[0]);
        if (BYTE6(v140[0]))
        {
          LODWORD(v139[0]) = v140[0];
          goto LABEL_22;
        }
LABEL_262:
        LODWORD(v139[0]) = v140[0];
        goto LABEL_22;
      }
      if (BYTE4(v140[0]) > 0xDu)
      {
        v12 = v135;
        v16 = v134;
      }
      else
      {
        if (BYTE4(v140[0]) == 11)
          goto LABEL_262;
        v12 = v135;
        v16 = v134;
        if (((1 << SBYTE4(v140[0])) & 0x3003) != 0)
          goto LABEL_20;
      }
LABEL_21:
      if (v26 == 13)
      {
        *(_BYTE *)a5 = 0;
        *(_BYTE *)(a5 + 16) = 0;
        v84 = 1;
        goto LABEL_121;
      }
LABEL_22:
      v136 = 0;
      v138 = 0;
      LOBYTE(v137) = v26;
      HIBYTE(v137) = v25;
      if ((v26 - 2) >= 9)
      {
        if (v26 == 11)
        {
          v136 = (int)v139[0];
          WebCore::Length::ref(&v136);
        }
      }
      else
      {
        v138 = BYTE6(v139[0]);
        if (!BYTE6(v139[0]))
        {
          LODWORD(v23) = v139[0];
LABEL_25:
          v136 = v23;
          goto LABEL_104;
        }
        v136 = (int)v139[0];
      }
LABEL_104:
      v71 = WTF::fastMalloc((WTF *)0x18);
      v72 = v71;
      v73 = v137;
      v74 = HIBYTE(v137);
      v75 = v137 - 2;
      if (v75 >= 9)
      {
        if (v137 == 11)
        {
          v109 = v136;
          v136 = 0;
          LOBYTE(v137) = 0;
          *(_DWORD *)(v71 + 8) = 1;
          *(_BYTE *)(v71 + 12) = 10;
          *(_QWORD *)v71 = off_1E3416318;
          *(_BYTE *)(v71 + 22) = 0;
          *(_BYTE *)(v71 + 20) = 11;
          *(_BYTE *)(v71 + 21) = v74;
          *(_DWORD *)(v71 + 16) = v109;
          goto LABEL_108;
        }
        v76 = 0;
        v77 = 0;
      }
      else
      {
        v76 = v138;
        v77 = v136;
      }
      LOBYTE(v137) = 0;
      *(_DWORD *)(v71 + 8) = 1;
      *(_BYTE *)(v71 + 12) = 10;
      *(_QWORD *)v71 = off_1E3416318;
      *(_DWORD *)(v71 + 16) = 0;
      *(_BYTE *)(v71 + 22) = 0;
      *(_BYTE *)(v71 + 20) = v73;
      *(_BYTE *)(v71 + 21) = v74;
      if (v75 <= 8)
      {
        *(_BYTE *)(v71 + 22) = v76;
        *(_DWORD *)(v71 + 16) = v77;
      }
LABEL_108:
      v78 = HIDWORD(v144);
      if (HIDWORD(v144) == (_DWORD)v144)
      {
        v79 = HIDWORD(v144) + ((unint64_t)HIDWORD(v144) >> 2);
        if (v79 >= 0x10)
          v80 = v79 + 1;
        else
          v80 = 16;
        if (v80 <= (unint64_t)HIDWORD(v144) + 1)
          v81 = HIDWORD(v144) + 1;
        else
          v81 = v80;
        if (v81 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x196589838);
        }
        v82 = v143;
        v83 = (WTF *)WTF::fastMalloc((WTF *)(8 * v81));
        LODWORD(v144) = v81;
        v143 = v83;
        memcpy(v83, v82, 8 * v78);
        if (v82)
        {
          if (v83 == v82)
          {
            v83 = 0;
            v143 = 0;
            LODWORD(v144) = 0;
          }
          WTF::fastFree(v82, (void *)v11);
        }
        *((_QWORD *)v83 + v78) = v72;
        HIDWORD(v144) = v78 + 1;
        if (v137 == 11)
          WebCore::Length::deref((WebCore::Length *)&v136);
        v84 = 0;
      }
      else
      {
        v84 = 0;
        *((_QWORD *)v143 + HIDWORD(v144)) = v71;
        HIDWORD(v144) = v78 + 1;
      }
      v12 = v135;
      v16 = v134;
LABEL_121:
      if (BYTE4(v139[0]) == 11)
        WebCore::Length::deref((WebCore::Length *)v139);
      if ((v84 & 1) != 0)
        goto LABEL_127;
      goto LABEL_124;
  }
}

uint64_t WebCore::Style::HasSelectorFilter::HasSelectorFilter(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  __int16 v6;
  uint64_t i;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  __int16 v12;
  BOOL v13;
  BOOL v14;

  *(_BYTE *)a1 = a3;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  *(_OWORD *)(a1 + 196) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 244) = 0u;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 276) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 340) = 0u;
  *(_OWORD *)(a1 + 356) = 0u;
  *(_OWORD *)(a1 + 372) = 0u;
  *(_OWORD *)(a1 + 388) = 0u;
  *(_OWORD *)(a1 + 404) = 0u;
  *(_OWORD *)(a1 + 420) = 0u;
  *(_OWORD *)(a1 + 436) = 0u;
  *(_OWORD *)(a1 + 452) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_OWORD *)(a1 + 484) = 0u;
  *(_OWORD *)(a1 + 500) = 0u;
  if (a3)
  {
    if (a3 == 1)
    {
      v5 = *(_QWORD *)(a2 + 80);
      if (v5)
      {
        v6 = *(_WORD *)(v5 + 28);
        if ((v6 & 8) != 0)
        {
          i = *(_QWORD *)(a2 + 80);
          goto LABEL_25;
        }
        while (1)
        {
          if ((v6 & 4) == 0 || (i = *(_QWORD *)(v5 + 80)) == 0)
          {
            if (v5 == a2)
              return a1;
            while (1)
            {
              i = *(_QWORD *)(v5 + 56);
              if (i)
                break;
              v5 = *(_QWORD *)(v5 + 32);
              if (v5)
                v8 = v5 == a2;
              else
                v8 = 1;
              if (v8)
                return a1;
            }
          }
          v6 = *(_WORD *)(i + 28);
          v5 = i;
          if ((v6 & 8) != 0)
          {
            while (1)
            {
LABEL_25:
              WebCore::Style::HasSelectorFilter::add((WebCore::Style::HasSelectorFilter *)a1, (const WebCore::Element *)i);
              v11 = *(_QWORD *)(i + 80);
              if (!v11)
              {
                if (i == a2)
                  return a1;
                while (1)
                {
                  v11 = *(_QWORD *)(i + 56);
                  if (v11)
                    break;
                  i = *(_QWORD *)(i + 32);
                  if (i)
                    v14 = i == a2;
                  else
                    v14 = 1;
                  if (v14)
                    return a1;
                }
              }
              v12 = *(_WORD *)(v11 + 28);
              for (i = v11; (v12 & 8) == 0; v11 = i)
              {
                if ((v12 & 4) == 0 || (i = *(_QWORD *)(v11 + 80)) == 0)
                {
                  if (v11 == a2)
                    return a1;
                  while (1)
                  {
                    i = *(_QWORD *)(v11 + 56);
                    if (i)
                      break;
                    v11 = *(_QWORD *)(v11 + 32);
                    if (v11)
                      v13 = v11 == a2;
                    else
                      v13 = 1;
                    if (v13)
                      return a1;
                  }
                }
                v12 = *(_WORD *)(i + 28);
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 80);
    if (v9)
    {
      while ((*(_WORD *)(v9 + 28) & 8) == 0)
      {
        v9 = *(_QWORD *)(v9 + 56);
        if (!v9)
          return a1;
      }
LABEL_20:
      WebCore::Style::HasSelectorFilter::add((WebCore::Style::HasSelectorFilter *)a1, (const WebCore::Element *)v9);
      while (1)
      {
        v9 = *(_QWORD *)(v9 + 56);
        if (!v9)
          break;
        if ((*(_WORD *)(v9 + 28) & 8) != 0)
          goto LABEL_20;
      }
    }
  }
  return a1;
}

WTF *WebCore::Style::HasSelectorFilter::add(WebCore::Style::HasSelectorFilter *this, const WebCore::Element *a2)
{
  void *v4;
  WTF *result;
  char *v6;
  uint64_t v7;
  WTF *v8;
  unsigned int v9;
  BOOL isUserActionElementHovered;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  WTF *v15;
  uint64_t v16;
  _BYTE v17[16];

  v15 = (WTF *)v17;
  v16 = 4;
  WebCore::SelectorFilter::collectElementIdentifierHashes((uint64_t)a2, (unsigned int *)&v15);
  result = v15;
  if (HIDWORD(v16))
  {
    v6 = (char *)this + 4;
    v7 = 4 * HIDWORD(v16);
    v8 = v15;
    do
    {
      v9 = *(_DWORD *)v8;
      v8 = (WTF *)((char *)v8 + 4);
      *(_DWORD *)&v6[4 * (((unint64_t)v9 >> 5) & 0x7F)] |= 1 << v9;
      *(_DWORD *)&v6[4 * (((unint64_t)v9 >> 21) & 0x7F)] |= 1 << SBYTE2(v9);
      v7 -= 4;
    }
    while (v7);
  }
  if ((*((_BYTE *)a2 + 54) & 2) != 0)
  {
    isUserActionElementHovered = WebCore::Element::isUserActionElementHovered(a2);
    result = v15;
    if (isUserActionElementHovered)
    {
      if (HIDWORD(v16))
      {
        v11 = 0;
        v12 = (char *)this + 4;
        v13 = 4 * HIDWORD(v16);
        do
        {
          v14 = 101 * *(_DWORD *)((char *)result + v11);
          *(_DWORD *)&v12[4 * ((v14 >> 5) & 0x7F)] |= 1 << v14;
          *(_DWORD *)&v12[4 * ((v14 >> 21) & 0x7F)] |= 1 << SBYTE2(v14);
          v11 += 4;
        }
        while (v13 != v11);
      }
    }
  }
  if (v17 != (_BYTE *)result)
  {
    if (result)
    {
      v15 = 0;
      LODWORD(v16) = 0;
      return (WTF *)WTF::fastFree(result, v4);
    }
  }
  return result;
}

uint64_t WebCore::Style::HasSelectorFilter::makeKey(WebCore::Style::HasSelectorFilter *this, const WebCore::CSSSelector *a2)
{
  char v3;
  void *v4;
  int v5;
  uint64_t result;
  WTF *v7;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  _BYTE v18[32];
  WTF *v19;
  uint64_t v20;
  _BYTE v21[32];
  WTF *v22;
  uint64_t v23;
  _BYTE v24[32];
  WTF *v25;
  uint64_t v26;
  _BYTE v27[32];

  v3 = 0;
  v16 = (WTF *)v18;
  v17 = 8;
  v19 = (WTF *)v21;
  v20 = 8;
  v22 = (WTF *)v24;
  v23 = 8;
  v25 = (WTF *)v27;
  v26 = 8;
  while (1)
  {
    if ((*(_DWORD *)this & 0x1FFF0) == 0x4A80)
      v3 = 1;
    WebCore::SelectorFilter::collectSimpleSelectorHash((uint64_t)&v16, this);
    if (HIDWORD(v17))
      break;
    v5 = *(_DWORD *)this;
    this = (WebCore::Style::HasSelectorFilter *)((char *)this + 16);
    if ((v5 & 0x8000F) != 0)
      goto LABEL_11;
  }
  if (v3)
    result = (101 * *(_DWORD *)v16);
  else
    result = *(unsigned int *)v16;
  if ((_DWORD)result)
    goto LABEL_26;
LABEL_11:
  if (!HIDWORD(v20)
    || (v3 ? (result = (101 * *(_DWORD *)v19)) : (result = *(unsigned int *)v19), !(_DWORD)result))
  {
    if (!HIDWORD(v26)
      || (v3 ? (result = (101 * *(_DWORD *)v25)) : (result = *(unsigned int *)v25), !(_DWORD)result))
    {
      if (HIDWORD(v23))
      {
        if (v3)
          result = (101 * *(_DWORD *)v22);
        else
          result = *(unsigned int *)v22;
      }
      else
      {
        result = 0;
      }
    }
  }
LABEL_26:
  v7 = v25;
  if (v27 != (_BYTE *)v25 && v25 != 0)
  {
    v25 = 0;
    LODWORD(v26) = 0;
    v15 = result;
    WTF::fastFree(v7, v4);
    result = v15;
  }
  v9 = v22;
  if (v24 != (_BYTE *)v22 && v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    v12 = result;
    WTF::fastFree(v9, v4);
    result = v12;
  }
  v10 = v19;
  if (v21 != (_BYTE *)v19 && v19)
  {
    v19 = 0;
    LODWORD(v20) = 0;
    v13 = result;
    WTF::fastFree(v10, v4);
    result = v13;
  }
  v11 = v16;
  if (v18 != (_BYTE *)v16)
  {
    if (v16)
    {
      v16 = 0;
      LODWORD(v17) = 0;
      v14 = result;
      WTF::fastFree(v11, v4);
      return v14;
    }
  }
  return result;
}

unsigned __int8 **WebCore::Style::IdChangeInvalidation::invalidateStyle(unsigned __int8 **this, const WTF::AtomString *a2)
{
  unsigned __int8 **v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int i;
  unsigned int v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::Node *ElementSibling;
  WebCore::Element *v28;
  _QWORD *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  BOOL hasMatchingUserOrAuthorStyle;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  _BOOL4 v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  int v44;
  int j;
  unsigned int v46;
  uint64_t v47;
  uint64_t v49;
  unsigned __int8 **v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  uint64_t v63;
  int v64;
  int k;
  unsigned int v66;
  uint64_t v67;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  WTF *v77;
  BOOL v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  WTF *v89;
  unsigned __int8 **v90;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return this;
  v3 = this;
  v4 = this[1];
  v5 = (_QWORD *)*((_QWORD *)v4 + 5);
  if (*v5)
    v6 = (*(_WORD *)(*v5 + 28) & 0x80) == 0;
  else
    v6 = 1;
  if (v6)
    v71 = v5[1] + 1328;
  else
    v71 = *v5 + 216;
  v7 = *(_QWORD *)v71;
  if (!*(_QWORD *)(*(_QWORD *)v71 + 32))
  {
    if (*(_QWORD *)(v7 + 24))
      this = (unsigned __int8 **)WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v7);
    else
      this = (unsigned __int8 **)WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v7);
    v74 = *(_QWORD *)(v7 + 32);
    if (*(_DWORD *)(v74 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      this = (unsigned __int8 **)WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v74 + 32), a2);
    if (*(_BYTE *)(v74 + 242)
      || *(_BYTE *)(v74 + 243)
      || *(_BYTE *)(v74 + 244)
      || *(_BYTE *)(v74 + 245)
      || *(_BYTE *)(v74 + 246)
      || *(_BYTE *)(v74 + 247)
      || *(_BYTE *)(v74 + 248))
    {
      *(_BYTE *)(v7 + 236) = 1;
    }
  }
  v8 = *(_QWORD *)(v7 + 32);
  if (*(_DWORD *)(v8 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    this = (unsigned __int8 **)WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v8 + 32), a2);
  if ((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_14;
  v34 = *(_QWORD *)((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v34)
    goto LABEL_14;
  if ((*(_WORD *)(v34 + 28) & 0x80) == 0)
    goto LABEL_14;
  if (*(_BYTE *)(v34 + 193))
    goto LABEL_14;
  v35 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v35 = off_1E344FEA0;
  v89 = v35;
  hasMatchingUserOrAuthorStyle = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v8 + 32), &v89);
  this = (unsigned __int8 **)(*(uint64_t (**)(WTF *))(*(_QWORD *)v35 + 8))(v35);
  if (hasMatchingUserOrAuthorStyle
    || (this = (unsigned __int8 **)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 824))(v4),
        (_DWORD)this)
    && (v77 = (WTF *)WTF::fastMalloc((WTF *)0x10),
        *(_QWORD *)v77 = off_1E344FEC8,
        v89 = v77,
        v78 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v8 + 32), &v89),
        this = (unsigned __int8 **)(*(uint64_t (**)(WTF *))(*(_QWORD *)v77 + 8))(v77),
        v78))
  {
    v9 = 1;
  }
  else
  {
LABEL_14:
    v9 = 0;
  }
  v10 = *(_QWORD *)(v8 + 72);
  if (v10)
  {
    v11 = 0;
    for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v11 + v13)
    {
      v13 = i & *(_DWORD *)(v10 - 8);
      v14 = *(_QWORD *)(v10 + 8 * v13);
      if (!v14)
        break;
      if (v14 != -1 && v14 == *(_QWORD *)a2)
      {
        v16 = 1;
        goto LABEL_24;
      }
      ++v11;
    }
  }
  v16 = 0;
  v9 = 0;
LABEL_24:
  if ((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v37 = *(_QWORD *)((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    if (v37)
    {
      v38 = *(_QWORD *)(v37 + 216);
      if (!*(_QWORD *)(v38 + 32))
      {
        if (*(_QWORD *)(v38 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v38);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v38);
        v82 = *(_QWORD *)(v38 + 32);
        if (*(_DWORD *)(v82 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v82 + 32), v81);
        if (*(_BYTE *)(v82 + 242)
          || *(_BYTE *)(v82 + 243)
          || *(_BYTE *)(v82 + 244)
          || *(_BYTE *)(v82 + 245)
          || *(_BYTE *)(v82 + 246)
          || *(_BYTE *)(v82 + 247)
          || *(_BYTE *)(v82 + 248))
        {
          *(_BYTE *)(v38 + 236) = 1;
        }
      }
      v39 = *(_QWORD *)(v38 + 32);
      v40 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v40 = off_1E344FEF0;
      v89 = v40;
      v41 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v39 + 32), &v89);
      this = (unsigned __int8 **)(*(uint64_t (**)(WTF *))(*(_QWORD *)v40 + 8))(v40);
      if (v41)
      {
        if (*(_DWORD *)(v39 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          this = (unsigned __int8 **)WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v39 + 32), v42);
        v43 = *(_QWORD *)(v39 + 72);
        if (v43)
        {
          v44 = 0;
          for (j = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; j = v44 + v46)
          {
            v46 = j & *(_DWORD *)(v43 - 8);
            v47 = *(_QWORD *)(v43 + 8 * v46);
            if (!v47)
              break;
            if (v47 != -1 && v47 == *(_QWORD *)a2)
            {
              v16 = 1;
              break;
            }
            ++v44;
          }
        }
      }
    }
  }
  v89 = 0;
  v90 = 0;
  v17 = *((_QWORD *)v4 + 4);
  if (v17)
  {
    if ((*(_WORD *)(v17 + 28) & 8) != 0)
    {
      v18 = *(_QWORD *)(v17 + 72) & 0xFFFFFFFFFFFFLL;
      if (v18)
      {
        v49 = *(_QWORD *)(v18 + 88);
        if (v49)
        {
          this = *(unsigned __int8 ***)(v49 + 224);
          if (this)
          {
            v86 = v9;
            v87 = v16;
            this = (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **, unsigned __int8 *))*this + 2))(this, v4);
            if (this)
            {
              v50 = this;
              do
              {
                if ((*(_WORD *)(*(_QWORD *)v50[5] + 28) & 0x80) != 0)
                  v51 = *(WTF::StringImpl **)v50[5];
                else
                  v51 = 0;
                v52 = HIDWORD(v90);
                if (HIDWORD(v90) == (_DWORD)v90)
                {
                  this = (unsigned __int8 **)WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShadowRoot&>((uint64_t)&v89, (uint64_t)v51);
                }
                else
                {
                  v53 = v89;
                  *((_DWORD *)v51 + 6) += 2;
                  *((_QWORD *)v53 + v52) = v51;
                  HIDWORD(v90) = v52 + 1;
                }
                v54 = v50[4];
                if (!v54)
                  break;
                if ((*((_WORD *)v54 + 14) & 8) == 0)
                  break;
                v55 = *((_QWORD *)v54 + 9) & 0xFFFFFFFFFFFFLL;
                if (!v55)
                  break;
                v56 = *(_QWORD *)(v55 + 88);
                if (!v56)
                  break;
                this = *(unsigned __int8 ***)(v56 + 224);
                if (!this)
                  break;
                this = (unsigned __int8 **)(*((uint64_t (**)(unsigned __int8 **, unsigned __int8 **))*this + 2))(this, v50);
                v50 = this;
              }
              while (this);
              v57 = v89;
              if (HIDWORD(v90))
              {
                v58 = (WTF *)((char *)v89 + 8 * HIDWORD(v90));
                do
                {
                  v59 = *(_QWORD *)(*(_QWORD *)v57 + 216);
                  if (!*(_QWORD *)(v59 + 32))
                  {
                    if (*(_QWORD *)(v59 + 24))
                      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(*(_QWORD *)v57 + 216));
                    else
                      WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(*(_QWORD *)v57 + 216));
                    v70 = *(_QWORD *)(v59 + 32);
                    if (*(_DWORD *)(v70 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v70 + 32), v69);
                    if (*(_BYTE *)(v70 + 242)
                      || *(_BYTE *)(v70 + 243)
                      || *(_BYTE *)(v70 + 244)
                      || *(_BYTE *)(v70 + 245)
                      || *(_BYTE *)(v70 + 246)
                      || *(_BYTE *)(v70 + 247)
                      || *(_BYTE *)(v70 + 248))
                    {
                      *(_BYTE *)(v59 + 236) = 1;
                    }
                  }
                  v60 = *(_QWORD *)(v59 + 32);
                  v61 = WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v61 = off_1E344FF18;
                  v88 = v61;
                  v62 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v60 + 32), &v88);
                  this = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
                  if (v62)
                  {
                    if (*(_DWORD *)(v60 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                      this = (unsigned __int8 **)WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v60 + 32), v51);
                    v63 = *(_QWORD *)(v60 + 72);
                    if (v63)
                    {
                      v64 = 0;
                      for (k = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; k = v64 + v66)
                      {
                        v66 = k & *(_DWORD *)(v63 - 8);
                        v67 = *(_QWORD *)(v63 + 8 * v66);
                        if (!v67)
                          break;
                        if (v67 != -1 && v67 == *(_QWORD *)a2)
                        {
                          v87 = 1;
                          break;
                        }
                        ++v64;
                      }
                    }
                  }
                  v57 = (WTF *)((char *)v57 + 8);
                }
                while (v57 != v58);
                v57 = v89;
                if (HIDWORD(v90))
                {
                  v85 = 8 * HIDWORD(v90);
                  do
                  {
                    this = *(unsigned __int8 ***)v57;
                    *(_QWORD *)v57 = 0;
                    if (this)
                    {
                      if (*((_DWORD *)this + 6) == 2)
                      {
                        if ((*((_WORD *)this + 15) & 0x400) == 0)
                          this = (unsigned __int8 **)WebCore::Node::removedLastRef((WebCore::Node *)this, v51);
                      }
                      else
                      {
                        *((_DWORD *)this + 6) -= 2;
                      }
                    }
                    v57 = (WTF *)((char *)v57 + 8);
                    v85 -= 8;
                  }
                  while (v85);
                  v57 = v89;
                  if (!v89)
                    goto LABEL_196;
                  goto LABEL_195;
                }
              }
              if (v57)
              {
LABEL_195:
                v89 = 0;
                LODWORD(v90) = 0;
                this = (unsigned __int8 **)WTF::fastFree(v57, v51);
              }
            }
LABEL_196:
            v9 = v86;
            v16 = v87;
          }
        }
      }
    }
  }
  if ((v4[22] & 0x10) != 0)
  {
    v19 = **((_QWORD **)v4 + 5);
    if (v19 && (*(_WORD *)(v19 + 28) & 0x80) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v19 + 200) + 8);
      if ((*(_BYTE *)(v21 + 22) & 8) != 0)
      {
        v22 = *(_QWORD **)(v21 + 40);
        v23 = !*v22 || (*(_WORD *)(*v22 + 28) & 0x80) == 0;
        v73 = v23 ? v22[1] + 1328 : *v22 + 216;
        v24 = *(_QWORD *)v73;
        if (!*(_QWORD *)(*(_QWORD *)v73 + 32))
        {
          if (*(_QWORD *)(v24 + 24))
            this = (unsigned __int8 **)WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v24);
          else
            this = (unsigned __int8 **)WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v24);
          v80 = *(_QWORD *)(v24 + 32);
          if (*(_DWORD *)(v80 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
            this = (unsigned __int8 **)WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v80 + 32), v79);
          if (*(_BYTE *)(v80 + 242)
            || *(_BYTE *)(v80 + 243)
            || *(_BYTE *)(v80 + 244)
            || *(_BYTE *)(v80 + 245)
            || *(_BYTE *)(v80 + 246)
            || *(_BYTE *)(v80 + 247)
            || *(_BYTE *)(v80 + 248))
          {
            *(_BYTE *)(v24 + 236) = 1;
          }
        }
      }
    }
  }
  if (v16)
  {
    v25 = (uint64_t)v3[1];
    if (v9)
    {
      this = (unsigned __int8 **)WebCore::Node::invalidateStyle((uint64_t)v3[1], 4u, 0);
      if ((*(_BYTE *)(v25 + 71) & 1) != 0)
      {
        v26 = *(_QWORD *)(v25 + 32);
        if (!v26 || (*(_WORD *)(v26 + 28) & 8) == 0 || (*(_BYTE *)(v26 + 70) & 4) == 0)
        {
          ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v25);
          return (unsigned __int8 **)WebCore::invalidateForSiblingCombinators(ElementSibling, v28);
        }
      }
    }
    else
    {
      WebCore::Element::invalidateStyle((WebCore::Node *)v3[1]);
      v89 = a2;
      v90 = v3;
      v29 = (_QWORD *)*((_QWORD *)v3[1] + 5);
      if (*v29)
        v30 = (*(_WORD *)(*v29 + 28) & 0x80) == 0;
      else
        v30 = 1;
      if (v30)
        v72 = v29[1] + 1328;
      else
        v72 = *v29 + 216;
      v31 = *(_QWORD *)v72;
      if (!*(_QWORD *)(*(_QWORD *)v72 + 32))
      {
        if (*(_QWORD *)(v31 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v31);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v31);
        v76 = *(_QWORD *)(v31 + 32);
        if (*(_DWORD *)(v76 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v76 + 32), v75);
        if (*(_BYTE *)(v76 + 242)
          || *(_BYTE *)(v76 + 243)
          || *(_BYTE *)(v76 + 244)
          || *(_BYTE *)(v76 + 245)
          || *(_BYTE *)(v76 + 246)
          || *(_BYTE *)(v76 + 247)
          || *(_BYTE *)(v76 + 248))
        {
          *(_BYTE *)(v31 + 236) = 1;
        }
      }
      this = WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_0::operator()<WebCore::Style::ScopeRuleSets>((WTF::StringImpl ***)&v89, (WebCore::Style::ScopeRuleSets *)(*(_QWORD *)(v31 + 32) + 32), 0);
      if ((*((_QWORD *)v3[1] + 9) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v32 = *(_QWORD *)((*((_QWORD *)v3[1] + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 216);
          if (!*(_QWORD *)(v33 + 32))
          {
            if (*(_QWORD *)(v33 + 24))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v33);
            else
              WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v33);
            v84 = *(_QWORD *)(v33 + 32);
            if (*(_DWORD *)(v84 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v84 + 32), v83);
            if (*(_BYTE *)(v84 + 242)
              || *(_BYTE *)(v84 + 243)
              || *(_BYTE *)(v84 + 244)
              || *(_BYTE *)(v84 + 245)
              || *(_BYTE *)(v84 + 246)
              || *(_BYTE *)(v84 + 247)
              || *(_BYTE *)(v84 + 248))
            {
              *(_BYTE *)(v33 + 236) = 1;
            }
          }
          return WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_0::operator()<WebCore::Style::ScopeRuleSets>((WTF::StringImpl ***)&v89, (WebCore::Style::ScopeRuleSets *)(*(_QWORD *)(v33 + 32) + 32), 273);
        }
      }
    }
  }
  return this;
}

unsigned __int8 **WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_0::operator()<WebCore::Style::ScopeRuleSets>(WTF::StringImpl ***a1, WebCore::Style::ScopeRuleSets *this, __int16 a3)
{
  WTF::StringImpl **v6;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  int i;
  unsigned int v11;
  WTF::StringImpl *v12;
  unsigned __int8 **result;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::Node *ElementSibling;
  WebCore::Element *v21;
  uint64_t v22;

  v6 = a1[1];
  if (*((_DWORD *)this + 77) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    WebCore::Style::ScopeRuleSets::collectFeatures(this, this);
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    v9 = **a1;
    for (i = *((_DWORD *)v9 + 4) >> 8; ; i = v8 + v11)
    {
      v11 = i & *(_DWORD *)(v7 - 8);
      v12 = *(WTF::StringImpl **)(v7 + 8 * v11);
      if (!v12)
        break;
      if (v12 != (WTF::StringImpl *)-1 && v12 == v9)
      {
        v18 = (uint64_t)v6[1];
        WebCore::Node::invalidateStyle(v18, 4u, 0);
        if ((*(_BYTE *)(v18 + 71) & 1) != 0)
        {
          v19 = *(_QWORD *)(v18 + 32);
          if (!v19 || (*(_WORD *)(v19 + 28) & 8) == 0 || (*(_BYTE *)(v19 + 70) & 4) == 0)
          {
            ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v18);
            WebCore::invalidateForSiblingCombinators(ElementSibling, v21);
          }
        }
        goto LABEL_12;
      }
      ++v8;
    }
  }
  WebCore::Element::invalidateStyle(v6[1]);
LABEL_12:
  result = (unsigned __int8 **)WebCore::Style::ensureInvalidationRuleSets<WTF::AtomString,WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>(*a1, (uint64_t *)this + 31, (uint64_t *)this + 14);
  if (result)
  {
    v15 = *((unsigned int *)result + 3);
    if ((_DWORD)v15)
    {
      v16 = *result;
      if ((a3 & 0xFF00) != 0)
      {
        v17 = 32 * v15;
        do
        {
          if (v16[24] == a3)
            result = (unsigned __int8 **)WebCore::Style::Invalidator::addToMatchElementRuleSets((uint64_t *)v6 + 3, v16);
          v16 += 32;
          v17 -= 32;
        }
        while (v17);
      }
      else
      {
        v22 = 32 * v15;
        do
        {
          result = (unsigned __int8 **)WebCore::Style::Invalidator::addToMatchElementRuleSets((uint64_t *)v6 + 3, v16);
          v16 += 32;
          v22 -= 32;
        }
        while (v22);
      }
    }
  }
  return result;
}

void WebCore::Style::IdChangeInvalidation::invalidateStyleWithRuleSets(WebCore::Style::IdChangeInvalidation *this)
{
  WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(*((_QWORD *)this + 1), (unsigned __int8 **)this + 3);
}

float WebCore::wavyStrokeParameters(WebCore *this, float a2)
{
  return a2 * 1.5 * 0.0625;
}

float WebCore::computedUnderlineOffset(uint64_t a1, void *a2)
{
  WebCore::RenderStyle *v3;
  WTF *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  float v9;
  float v10;
  float result;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;

  v3 = *(WebCore::RenderStyle **)a1;
  v4 = WebCore::RenderStyle::metricsOfPrimaryFont(*(WebCore::RenderStyle **)a1, a2);
  v6 = *((_QWORD *)v3 + 3);
  v7 = *(_DWORD *)(v6 + 236) & 7;
  if (v7 == 1)
    goto LABEL_14;
  if (((*((_DWORD *)v3 + 11) >> 13) & 6u) - 2 > 3)
  {
    if ((v7 - 3) >= 2 && v7 != 0)
    {
LABEL_24:
      if (v7 == 2)
      {
        v15 = *(float *)(v6 + 188);
        if (!*(_BYTE *)(v6 + 192))
          v15 = 0.0;
        return (float)(*((float *)v4 + 7) + (float)*((int *)v4 + 11)) + v15;
      }
    }
LABEL_8:
    v9 = *(float *)(v6 + 188);
    v10 = fmaxf(ceilf((float)(*(float *)(*((_QWORD *)v3 + 4) + 204) * 0.0625) * 0.5), 1.0);
    if (!*(_BYTE *)(v6 + 192))
      v9 = v10;
    return v9 + (float)*((int *)v4 + 11);
  }
  v5 = v7 - 3;
  if ((v7 - 3) >= 2)
  {
    if (v7)
      goto LABEL_23;
    if (*(_BYTE *)(v6 + 192))
      goto LABEL_8;
LABEL_14:
    v7 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
    {
      v12 = *(float *)(a1 + 12);
      if (v12 < 0.0)
        v12 = 0.0;
      v13 = *(float *)(a1 + 8) + v12;
      v14 = *(float *)(v6 + 188);
      if (!*(_BYTE *)(v6 + 192))
        v14 = 0.0;
      result = v13 + (float)(v14 + fmaxf(ceilf((float)(*(float *)(*((_QWORD *)v3 + 4) + 204) * 0.0625) * 0.5), 1.0));
      if (result < (float)*((int *)v4 + 11))
        return (float)*((int *)v4 + 11);
      return result;
    }
    __break(1u);
LABEL_23:
    if (v5 >= 2)
      goto LABEL_24;
    goto LABEL_8;
  }
  if (v7 != 4)
    goto LABEL_14;
  v16 = *(float *)(v6 + 188);
  if (!*(_BYTE *)(v6 + 192))
    v16 = 0.0;
  return 0.0 - (float)(v16 + fmaxf(ceilf((float)(*(float *)(*((_QWORD *)v3 + 4) + 204) * 0.0625) * 0.5), 1.0));
}

void WebCore::computedVisualOverflowForDecorations(uint64_t a1, WebCore::RenderStyle *this, uint64_t a3)
{
  _BYTE *v3;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  unsigned int v9;
  int v10;
  uint64_t v12;
  float v13;
  WTF *v14;
  void *v15;
  float v16;
  float v17;
  int v18;
  int v19;
  uint64_t v20;
  void *v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  void *v27;
  WTF *v28;
  float v29;
  float v30;
  double v31;
  int v32;
  int v33;
  double v34;
  int v35;
  double v36;
  int v37;
  double v38;
  int v39;
  double v40;
  double v41;
  double v42;
  int v43;
  float v44;
  float v45;
  WTF *v46;
  float v47;
  float v48;
  float v49;
  double v50;
  int v51;
  int v52;
  double v53;
  int v54;
  float v55;
  float v56;
  double v57;
  int v58;
  double v59;
  int v60;
  float v61;
  float v62;
  _BYTE v63[4];
  int v64[2];

  v5 = -1.0;
  if (*(float *)&a3 >= 0.0)
    v5 = 1.0;
  v6 = v5 + *(float *)&a3;
  v7 = a3 & 0xFF00000000;
  if ((a3 & 0xFF00000000) != 0)
    v8 = v6;
  else
    v8 = *(float *)&a3;
  v9 = *((_DWORD *)this + 10);
  v10 = (v9 >> 15) & 0xF;
  if (!v10)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return;
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v63[0] = *(_BYTE *)(v12 + 448);
  v64[0] = 0;
  BYTE2(v64[1]) = 0;
  LOWORD(v64[1]) = *(_WORD *)(v12 + 456);
  if (LOBYTE(v64[1]) - 2 >= 9)
  {
    if (LOBYTE(v64[1]) == 11)
    {
      v64[0] = *(_DWORD *)(v12 + 452);
      WebCore::Length::ref(v64);
    }
  }
  else
  {
    BYTE2(v64[1]) = *(_BYTE *)(v12 + 458);
    v64[0] = *(_DWORD *)(v12 + 452);
  }
  v13 = *(float *)(*((_QWORD *)this + 4) + 204);
  v14 = WebCore::RenderStyle::metricsOfPrimaryFont(this, this);
  if (!v63[0])
  {
    v16 = 0.0625;
LABEL_14:
    v17 = v13 * v16;
    goto LABEL_15;
  }
  if (v63[0] == 1)
  {
    v17 = *((float *)v14 + 8);
  }
  else if (LOBYTE(v64[1]) == 11)
  {
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)v64, v13);
    v17 = v56;
  }
  else
  {
    if (LOBYTE(v64[1]) == 3)
    {
      v55 = *(float *)v64;
      if (!BYTE2(v64[1]))
        v55 = (float)v64[0];
      v16 = v55 / 100.0;
      goto LABEL_14;
    }
    if (BYTE2(v64[1]))
      v17 = *(float *)v64;
    else
      v17 = (float)v64[0];
  }
LABEL_15:
  if (LOBYTE(v64[1]) == 11)
    WebCore::Length::deref((WebCore::Length *)v64);
  v18 = (v9 >> 15);
  v19 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 636);
  v20 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 4) + 32), v15);
  v22 = 0.0;
  v23 = *(float *)(v20 + 4) + *(float *)(v20 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  v24 = v19 & 0x7000;
  if (v24 != 0x4000)
  {
    if ((v18 & 1) == 0)
    {
      LODWORD(v7) = 0;
      v18 = 0;
LABEL_20:
      v25 = 0.0;
      goto LABEL_21;
    }
    if (v7)
    {
      v36 = ceilf((float)(v8 + v17) - v23) * 64.0;
      if (v36 >= 2147483650.0)
      {
        v37 = 0x7FFFFFFF;
      }
      else if (v36 <= -2147483650.0)
      {
        v37 = 0x80000000;
      }
      else
      {
        v37 = (int)v36;
      }
      LODWORD(v7) = v37 & ~(v37 >> 31);
      *(_DWORD *)(a1 + 12) = v7;
      v38 = ceilf(-v8) * 64.0;
      if (v38 >= 2147483650.0)
      {
        v39 = 0x7FFFFFFF;
      }
      else if (v38 <= -2147483650.0)
      {
        v39 = 0x80000000;
      }
      else
      {
        v39 = (int)v38;
      }
      v18 = v39 & ~(v39 >> 31);
      *(_DWORD *)(a1 + 8) = v18;
      goto LABEL_20;
    }
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  v40 = *(float *)(*((_QWORD *)this + 4) + 204) * 1.5 * 0.0625;
  v41 = v17 * 64.0;
  if (v41 >= 2147483650.0)
  {
    v43 = 0x7FFFFFFF;
    *(_DWORD *)a1 = 0x7FFFFFFF;
  }
  else
  {
    v42 = -2147483650.0;
    if (v41 > -2147483650.0)
      v42 = v17 * 64.0;
    *(_DWORD *)a1 = (int)v42;
    if (v41 <= -2147483650.0)
      v43 = 0x80000000;
    else
      v43 = (int)v41;
  }
  v44 = v40;
  *(_DWORD *)(a1 + 4) = v43;
  if ((v18 & 1) != 0)
  {
    if (!v7)
      goto LABEL_97;
    v57 = ceilf((float)(v17 + (float)((float)(v8 + 1.0) + v44)) - v23) * 64.0;
    if (v57 >= 2147483650.0)
    {
      v58 = 0x7FFFFFFF;
    }
    else if (v57 > -2147483650.0)
    {
      v58 = (int)v57;
    }
    else
    {
      v58 = 0x80000000;
    }
    LODWORD(v7) = v58 & ~(v58 >> 31);
    *(_DWORD *)(a1 + 12) = v7;
    v59 = ceilf(-(float)((float)((float)(v8 + 1.0) - v44) - v17)) * 64.0;
    if (v59 >= 2147483650.0)
    {
      v60 = 0x7FFFFFFF;
    }
    else if (v59 <= -2147483650.0)
    {
      v60 = 0x80000000;
    }
    else
    {
      v60 = (int)v59;
    }
    v18 = v60 & ~(v60 >> 31);
    *(_DWORD *)(a1 + 8) = v18;
  }
  else
  {
    LODWORD(v7) = 0;
    v18 = 0;
  }
  v22 = 1.0;
  v25 = v44;
LABEL_21:
  if ((v10 & 2) != 0)
  {
    v61 = v22;
    v62 = v25;
    v63[0] = 0;
    v3 = v63;
    memset(v64, 0, 7);
    v45 = *(float *)(*((_QWORD *)this + 4) + 204);
    v46 = WebCore::RenderStyle::metricsOfPrimaryFont(this, v21);
    v8 = WebCore::TextDecorationThickness::resolve(v63, v45, *((float *)v46 + 8));
    if (LOBYTE(v64[1]) != 11)
    {
LABEL_59:
      v47 = (float)((float)((float)(v8 - v17) - v61) + 0.0) - v62;
      v48 = -0.0;
      if (v24 == 0x4000)
        v48 = v62 + v62;
      v49 = v17 + v48;
      v50 = ceilf(-v47) * 64.0;
      if (v50 > -2147483650.0)
        v51 = (int)v50;
      else
        v51 = 0x80000000;
      if (v50 < 2147483650.0)
        v52 = v51;
      else
        v52 = 0x7FFFFFFF;
      if (v18 <= v52)
        v18 = v52;
      *(_DWORD *)(a1 + 8) = v18;
      v53 = ceilf((float)(v49 + v47) - v23) * 64.0;
      if (v53 >= 2147483650.0)
      {
        v54 = 0x7FFFFFFF;
      }
      else if (v53 <= -2147483650.0)
      {
        v54 = 0x80000000;
      }
      else
      {
        v54 = (int)v53;
      }
      if ((int)v7 <= v54)
        LODWORD(v7) = v54;
      *(_DWORD *)(a1 + 12) = v7;
      v25 = v62;
      goto LABEL_22;
    }
LABEL_98:
    WebCore::Length::deref((WebCore::Length *)(v3 + 4));
    goto LABEL_59;
  }
LABEL_22:
  if ((v10 & 4) != 0)
  {
    v26 = *(float *)(*((_QWORD *)this + 4) + 204);
    WebCore::RenderStyle::metricsOfPrimaryFont(this, v21);
    v28 = WebCore::RenderStyle::metricsOfPrimaryFont(this, v27);
    v29 = (float)((float)((float)((float)(v26 * 0.0625) * 0.5)
                        + (float)((float)(*((float *)v28 + 1) + *((float *)v28 + 1)) / 3.0))
                - (float)(v17 * 0.5))
        + 0.0;
    v30 = v17 + (float)(v25 + v25);
    if (v24 == 0x4000)
      v29 = v29 - v25;
    else
      v30 = v17;
    v31 = ceilf(-v29) * 64.0;
    if (v31 > -2147483650.0)
      v32 = (int)v31;
    else
      v32 = 0x80000000;
    if (v31 < 2147483650.0)
      v33 = v32;
    else
      v33 = 0x7FFFFFFF;
    if (v18 > v33)
      v33 = v18;
    *(_DWORD *)(a1 + 8) = v33;
    v34 = ceilf((float)(v30 + v29) - v23) * 64.0;
    if (v34 >= 2147483650.0)
    {
      v35 = 0x7FFFFFFF;
    }
    else if (v34 <= -2147483650.0)
    {
      v35 = 0x80000000;
    }
    else
    {
      v35 = (int)v34;
    }
    if ((int)v7 > v35)
      v35 = v7;
    *(_DWORD *)(a1 + 12) = v35;
  }
}

void WebCore::underlineOffsetForTextBoxPainting(WebCore *this, const WebCore::InlineIterator::InlineBox *a2, const WebCore::RenderStyle *a3)
{
  uint64_t v3;
  int v4;
  const WebCore::InlineIterator::LineBoxIterator *v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  unsigned __int32 v9;
  __n128 v10;
  __n128 v11;
  const WebCore::RenderElement *v12;
  const WebCore::InlineIterator::InlineBox *v13;
  int v14;
  int v15;
  int v16;
  const WebCore::InlineIterator::InlineBox *v18;
  int v19;
  int v20;
  int v21;
  char v22;

  v3 = *((_QWORD *)a2 + 3);
  v4 = *(_DWORD *)(v3 + 236) & 7;
  if (v4 != 1
    && (((*((_DWORD *)a2 + 11) >> 13) & 6u) - 2 > 3 || (v4 - 3) >= 2 && (v4 || *(_BYTE *)(v3 + 192))))
  {
    v18 = a2;
    LOBYTE(v19) = 0;
    LOBYTE(v21) = 0;
  }
  else
  {
    WebCore::InlineIterator::Box::lineBox((uint64_t *)&v18, this);
    v6 = (const WebCore::InlineIterator::LineBoxIterator *)WebCore::InlineIterator::InlineBox::renderer(this);
    WebCore::InlineIterator::Box::logicalTop(this);
    v8 = v7;
    WebCore::InlineIterator::Box::logicalBottom(this);
    v10.n128_u32[0] = v9;
    v11.n128_u32[0] = v8;
    WebCore::boxOffsetFromBottomMost((WebCore *)&v18, v6, v12, v11, v10);
    v15 = v14;
    if (v21 != -1)
      ((void (*)(char *, const WebCore::InlineIterator::InlineBox **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore14InlineIterator25LineBoxIteratorModernPathENS7_25LineBoxIteratorLegacyPathEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_3[v21])(&v22, &v18);
    v18 = a2;
    WebCore::inlineBoxContentBoxHeight(this, v13);
    v19 = v16;
    v20 = v15;
    LOBYTE(v21) = 1;
  }
  WebCore::computedUnderlineOffset((uint64_t)&v18, a2);
}

uint64_t WebCore::boxOffsetFromBottomMost(WebCore *this, const WebCore::InlineIterator::LineBoxIterator *a2, const WebCore::RenderElement *a3, __n128 a4, __n128 a5)
{
  unsigned int v6;
  BOOL v7;
  int v8;
  uint64_t v10;
  unsigned __int32 v11;
  uint64_t result;
  float v13;
  const WebCore::InlineIterator::LineBoxIterator *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  int v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int32 v30;
  float v31;
  const WebCore::InlineIterator::LineBoxIterator *v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InlineIterator::Box *v40;
  _QWORD v41[2];
  int v42;
  char v43;
  char *v44;

  v6 = (unsigned __int16)*((_DWORD *)a2 + 31) >> 13;
  v7 = v6 > 4;
  v8 = (1 << v6) & 0x16;
  if (v7 || v8 == 0)
  {
    v10 = *((unsigned int *)this + 4);
    if ((_DWORD)v10 != -1)
    {
      v11 = a5.n128_u32[0];
      v44 = &v43;
      ((void (*)(_QWORD *__return_ptr, char **, WebCore *, const WebCore::RenderElement *, __n128))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix + v10))(v41, &v44, this, a3, a4);
      result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v41);
      if ((result & 1) == 0)
      {
        v13 = *(float *)&v11;
        while (v42 != -1)
        {
          v44 = &v43;
          if ((*(_DWORD *)(((uint64_t (*)(char **, _QWORD *))off_1E344FE10[v42])(&v44, v41) + 20) & 0x1800000) != 0x1000000)
          {
            if (v42 == -1)
              goto LABEL_79;
            v44 = &v43;
            if ((*(_BYTE *)(((uint64_t (*)(char **, _QWORD *))off_1E344FE20[v42])(&v44, v41) + 41) & 0x80) != 0)
            {
              if ((*((_BYTE *)a2 + 45) & 0x20) != 0)
                v14 = a2;
              else
                v14 = 0;
              if ((*((_BYTE *)a2 + 45) & 0x20) != 0)
              {
                if (v42 == -1)
                  goto LABEL_79;
                v44 = &v43;
                v27 = ((uint64_t (*)(char **, _QWORD *))off_1E344FE10[v42])(&v44, v41);
                do
                {
                  if ((*(_BYTE *)(v27 + 45) & 0x40) != 0 && (*(_BYTE *)(v27 + 20) & 1) != 0)
                    break;
                  if ((const WebCore::InlineIterator::LineBoxIterator *)v27 == v14)
                    goto LABEL_17;
                  v28 = *(_QWORD *)(v27 + 32);
                  if (!v28)
                    break;
                  v27 = *(_QWORD *)(v28 + 8);
                }
                while (v27);
              }
              else
              {
LABEL_17:
                if (v42 == -1)
                  goto LABEL_79;
                v44 = &v43;
                if ((((uint64_t (*)(char **, _QWORD *))off_1E344FE30[v42])(&v44, v41) & 1) != 0)
                  goto LABEL_82;
                if (v42 == -1)
                  goto LABEL_79;
                v44 = &v43;
                if ((*(_BYTE *)(*(_QWORD *)(((uint64_t (*)(char **, _QWORD *))off_1E344FE20[v42])(&v44, v41)
                                           + 24)
                               + 235) & 0x30) == 0)
                {
LABEL_82:
                  if (v42 == -1)
                    goto LABEL_79;
                  v44 = &v43;
                  ((void (*)(char **, _QWORD *))off_1E344FE50[v42])(&v44, v41);
                  if (v42 == -1)
                    goto LABEL_79;
                  v19 = v15;
                  v20 = v16;
                  v21 = v17;
                  v22 = v18;
                  v44 = &v43;
                  v23 = ((uint64_t (*)(char **, _QWORD *))off_1E344FE60[v42])(&v44, v41);
                  if (v23)
                    v24 = v20;
                  else
                    v24 = v19;
                  if (v23)
                    v25 = v22;
                  else
                    v25 = v21;
                  v26 = v24 + v25;
                  if (v13 < v26)
                    v13 = v26;
                }
              }
            }
          }
          if (v42 == -1)
            goto LABEL_79;
          v44 = &v43;
          ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v42])(&v44, v41);
          result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v41);
          if ((result & 1) != 0)
            goto LABEL_41;
        }
        goto LABEL_79;
      }
LABEL_41:
      if (v42 != -1)
        return ((uint64_t (*)(char **, _QWORD *))off_1E344FE40[v42])(&v44, v41);
      return result;
    }
LABEL_79:
    v40 = (WebCore::InlineIterator::Box *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::InlineIterator::Box::logicalBottom(v40);
  }
  v29 = *((unsigned int *)this + 4);
  if ((_DWORD)v29 == -1)
    goto LABEL_79;
  v30 = a4.n128_u32[0];
  v44 = &v43;
  ((void (*)(_QWORD *__return_ptr, char **, WebCore *, const WebCore::RenderElement *, __n128, __n128))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14InlineIterator7LineBox12firstLeafBoxEvE3__0JEEEEEJRKNS0_6__implIJNS9_25LineBoxIteratorModernPathENS9_25LineBoxIteratorLegacyPathEEEEEEEDcOT_DpOT0____fmatrix + v29))(v41, &v44, this, a3, a4, a5);
  result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v41);
  if ((result & 1) == 0)
  {
    v31 = *(float *)&v30;
    while (v42 != -1)
    {
      v44 = &v43;
      if ((*(_DWORD *)(((uint64_t (*)(char **, _QWORD *))off_1E344FE10[v42])(&v44, v41) + 20) & 0x1800000) != 0x1000000)
      {
        if (v42 == -1)
          goto LABEL_79;
        v44 = &v43;
        if ((*(_BYTE *)(((uint64_t (*)(char **, _QWORD *))off_1E344FE20[v42])(&v44, v41) + 41) & 0x80) != 0)
        {
          if ((*((_BYTE *)a2 + 45) & 0x20) != 0)
            v32 = a2;
          else
            v32 = 0;
          if ((*((_BYTE *)a2 + 45) & 0x20) != 0)
          {
            if (v42 == -1)
              goto LABEL_79;
            v44 = &v43;
            v38 = ((uint64_t (*)(char **, _QWORD *))off_1E344FE10[v42])(&v44, v41);
            do
            {
              if ((*(_BYTE *)(v38 + 45) & 0x40) != 0 && (*(_BYTE *)(v38 + 20) & 1) != 0)
                break;
              if ((const WebCore::InlineIterator::LineBoxIterator *)v38 == v32)
                goto LABEL_55;
              v39 = *(_QWORD *)(v38 + 32);
              if (!v39)
                break;
              v38 = *(_QWORD *)(v39 + 8);
            }
            while (v38);
          }
          else
          {
LABEL_55:
            if (v42 == -1)
              goto LABEL_79;
            v44 = &v43;
            if ((((uint64_t (*)(char **, _QWORD *))off_1E344FE30[v42])(&v44, v41) & 1) != 0)
              goto LABEL_83;
            if (v42 == -1)
              goto LABEL_79;
            v44 = &v43;
            if ((*(_BYTE *)(*(_QWORD *)(((uint64_t (*)(char **, _QWORD *))off_1E344FE20[v42])(&v44, v41) + 24)
                           + 235) & 0x30) == 0)
            {
LABEL_83:
              if (v42 == -1)
                goto LABEL_79;
              v44 = &v43;
              ((void (*)(char **, _QWORD *))off_1E344FE50[v42])(&v44, v41);
              if (v42 == -1)
                goto LABEL_79;
              v35 = v33;
              v36 = v34;
              v44 = &v43;
              if (((unsigned int (*)(char **, _QWORD *))off_1E344FE60[v42])(&v44, v41))
                v37 = v36;
              else
                v37 = v35;
              if (v37 < v31)
                v31 = v37;
            }
          }
        }
      }
      if (v42 == -1)
        goto LABEL_79;
      v44 = &v43;
      ((void (*)(char **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore14InlineIterator15LeafBoxIterator18traverseNextOnLineEvE3__0JEEEEEJRNS0_6__implIJNS9_13BoxModernPathENS9_13BoxLegacyPathEEEEEEEDcOT_DpOT0____fmatrix[v42])(&v44, v41);
      result = WebCore::InlineIterator::BoxIterator::atEnd((WebCore::InlineIterator::BoxIterator *)v41);
      if ((result & 1) != 0)
        goto LABEL_76;
    }
    goto LABEL_79;
  }
LABEL_76:
  if (v42 != -1)
    return ((uint64_t (*)(char **, _QWORD *))off_1E344FE40[v42])(&v44, v41);
  return result;
}

uint64_t WebCore::InlineIterator::Box::logicalBottom(WebCore::InlineIterator::Box *this)
{
  uint64_t v1;
  uint64_t v3;
  WebCore *v5;
  const WebCore::InlineIterator::InlineBox *v6;
  char v7;
  char *v8;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1 == -1
    || (v8 = &v7,
        ((void (*)(char **, WebCore::InlineIterator::Box *))off_1E344FE50[v1])(&v8, this),
        v3 = *((unsigned int *)this + 4),
        (_DWORD)v3 == -1))
  {
    v5 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::inlineBoxContentBoxHeight(v5, v6);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(char **, WebCore::InlineIterator::Box *))off_1E344FE60[v3])(&v8, this);
  }
}

uint64_t WebCore::inlineBoxContentBoxHeight(WebCore *this, const WebCore::InlineIterator::InlineBox *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t *v13;
  WebCore::CSSStyleSheet *v14;
  char v15;
  char *v16;

  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 == -1)
    goto LABEL_13;
  v16 = &v15;
  ((void (*)(char **, WebCore *))off_1E344FE50[v2])(&v16, this);
  v4 = *((unsigned int *)this + 4);
  if ((_DWORD)v4 == -1)
    goto LABEL_13;
  v16 = &v15;
  ((uint64_t (*)(char **, WebCore *))off_1E344FE60[v4])(&v16, this);
  v5 = *((unsigned int *)this + 4);
  if ((_DWORD)v5 == -1)
    goto LABEL_13;
  v16 = &v15;
  result = ((uint64_t (*)(char **, WebCore *))off_1E344FE80[v5])(&v16, this);
  if ((result & 1) != 0)
    return result;
  v7 = *((unsigned int *)this + 4);
  if ((_DWORD)v7 == -1)
    goto LABEL_13;
  v16 = &v15;
  v8 = (_BYTE *)((uint64_t (*)(char **, WebCore *))off_1E344FE10[v7])(&v16, this);
  if ((v8[45] & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19658B940);
  }
  v9 = v8;
  (*(void (**)(_BYTE *))(*(_QWORD *)v8 + 1048))(v8);
  (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 960))(v9);
  v10 = *((unsigned int *)this + 4);
  if ((_DWORD)v10 == -1)
  {
LABEL_13:
    v13 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(v13, v14);
  }
  v16 = &v15;
  v11 = (_BYTE *)((uint64_t (*)(char **, WebCore *))off_1E344FE10[v10])(&v16, this);
  if ((v11[45] & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19658B960);
  }
  v12 = v11;
  (*(void (**)(_BYTE *))(*(_QWORD *)v11 + 1056))(v11);
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v12 + 968))(v12);
}

uint64_t *WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(uint64_t *result, WebCore::CSSStyleSheet *this)
{
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  int v10;
  WebCore::CSSStyleRule *v11;
  uint64_t v12;
  WebCore::CSSStyleSheet *v13;
  _BYTE v14[24];
  WebCore::CSSStyleRule *v15;
  uint64_t v16;

  if (this)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 3);
    v4 = v3[13];
    v5 = v3[17];
    v6 = v3[21];
    v7 = v3[25];
    if (v5 + v4 + v6 + v7)
    {
      v8 = result;
      v9 = 0;
      v10 = v4 + v6 + v7 + v5;
      do
      {
        result = (uint64_t *)WebCore::CSSStyleSheet::item(this, v9);
        if (result)
        {
          v11 = (WebCore::CSSStyleRule *)result;
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 16))(result);
          if ((int)result > 11)
          {
            switch((_DWORD)result)
            {
              case 0xC:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSSupportsRule>(v8, (uint64_t)v11);
                break;
              case 0x10:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSLayerBlockRule>(v8, (uint64_t)v11);
                break;
              case 0x12:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSContainerRule>(v8, (uint64_t)v11);
                break;
            }
          }
          else
          {
            switch((_DWORD)result)
            {
              case 1:
                v12 = *((_QWORD *)v11 + 4);
                v15 = v11;
                v16 = v12;
                WTF::HashMap<WebCore::StyleRule const*,WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>,WTF::DefaultHash<WebCore::StyleRule const*>,WTF::HashTraits<WebCore::StyleRule const*>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>>,WTF::HashTableTraits>::add<WebCore::CSSStyleRule*>(v8, &v16, (uint64_t *)&v15, (uint64_t)v14);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleRule>((uint64_t)v8, v11);
                break;
              case 3:
                v13 = (WebCore::CSSStyleSheet *)WebCore::CSSImportRule::styleSheet(v11);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>((int)v8, v13);
                break;
              case 4:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSMediaRule>(v8, (uint64_t)v11);
                break;
            }
          }
        }
        ++v9;
      }
      while (v10 != v9);
    }
  }
  return result;
}

uint64_t *WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(uint64_t *this, WebCore::StyleSheetContents *a2)
{
  uint64_t *v2;
  WebCore::CSSStyleSheet *v3;
  void *v4;
  WebCore::CSSStyleSheet *v5;
  WTF *v6;
  void *v7;
  WebCore::StyleSheetContents *v8[3];
  WebCore::CSSStyleSheet *v9;

  if (a2)
  {
    v2 = this;
    ++*(_DWORD *)a2;
    v8[0] = a2;
    v3 = (WebCore::CSSStyleSheet *)WTF::fastMalloc((WTF *)0x98);
    WebCore::CSSStyleSheet::CSSStyleSheet((uint64_t)v3, (uint64_t *)v8, 0);
    if (v8[0])
    {
      if (*(_DWORD *)v8[0] == 1)
      {
        WebCore::StyleSheetContents::~StyleSheetContents(v8[0], v4);
        WTF::fastFree(v6, v7);
      }
      else
      {
        --*(_DWORD *)v8[0];
      }
    }
    ++*((_DWORD *)v3 + 2);
    v9 = v3;
    WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::add(v2 + 1, (uint64_t *)&v9, (uint64_t)v8);
    v5 = v9;
    v9 = 0;
    if (v5)
    {
      if (*((_DWORD *)v5 + 2) == 1)
        (*(void (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v5 + 8))(v5);
      else
        --*((_DWORD *)v5 + 2);
    }
    this = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(v2, v3);
    if (*((_DWORD *)v3 + 2) == 1)
      return (uint64_t *)(*(uint64_t (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v3 + 8))(v3);
    else
      --*((_DWORD *)v3 + 2);
  }
  return this;
}

uint64_t *WebCore::Style::InspectorCSSOMWrappers::maybeCollectFromStyleSheets(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15[24];

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(uint64_t **)a2;
    v5 = *(_QWORD *)a2 + 8 * v2;
    v6 = result + 1;
    while (1)
    {
      v7 = *v6;
      if (!*v6)
        goto LABEL_9;
      v8 = *(_DWORD *)(v7 - 8);
      v9 = ~(*v4 << 32) + *v4;
      v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
      v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
      v12 = v8 & (((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~((_DWORD)v11 << 27)));
      v13 = *(_QWORD *)(v7 + 8 * v12);
      if (v13 != *v4)
        break;
LABEL_10:
      if (++v4 == (uint64_t *)v5)
        return result;
    }
    v14 = 1;
    while (v13)
    {
      v12 = (v12 + v14) & v8;
      v13 = *(_QWORD *)(v7 + 8 * v12);
      ++v14;
      if (v13 == *v4)
        goto LABEL_10;
    }
LABEL_9:
    WTF::HashTable<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>>>::add(v6, v4, (uint64_t)v15);
    result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(v3, (WebCore::CSSStyleSheet *)*v4);
    goto LABEL_10;
  }
  return result;
}

uint64_t *WebCore::Style::InspectorCSSOMWrappers::collectDocumentWrappers(uint64_t *this, WebCore::CSSStyleSheet ***a2)
{
  uint64_t *v3;
  const WTF::String *v4;
  WebCore::CSSStyleSheet *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  WebCore::CSSStyleSheet **v9;
  uint64_t v10;
  WebCore::CSSStyleSheet *v11;
  uint64_t v12;
  WebCore::CSSStyleSheet **v13;
  uint64_t v14;
  WebCore::CSSStyleSheet *v15;
  uint64_t v16;
  WebCore::CSSStyleSheet **v17;
  uint64_t v18;
  WebCore::CSSStyleSheet *v19;
  uint64_t v20;
  WebCore::CSSStyleSheet **v21;
  uint64_t v22;
  WebCore::CSSStyleSheet *v23;

  v3 = this;
  if (!*this || !*(_DWORD *)(*this - 12))
  {
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(this, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::defaultStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::quirksStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::svgStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::mathMLStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::mediaControlsStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::horizontalFormControlsStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::viewTransitionsStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::htmlSwitchControlStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::fullscreenStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::dataListStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::colorInputStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::plugInsStyleSheet);
    WebCore::Style::InspectorCSSOMWrappers::collectFromStyleSheetContents(v3, (WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::mediaQueryStyleSheet);
    v5 = (WebCore::CSSStyleSheet *)WebCore::ExtensionStyleSheets::pageUserSheet((WebCore::ExtensionStyleSheets *)a2, v4);
    WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(v3, v5);
    WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache((uint64_t)a2, v6);
    v8 = *((unsigned int *)a2 + 9);
    if ((_DWORD)v8)
    {
      v9 = a2[3];
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(v3, v11);
        v10 -= 8;
      }
      while (v10);
    }
    v12 = *((unsigned int *)a2 + 21);
    if ((_DWORD)v12)
    {
      v13 = a2[9];
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(v3, v15);
        v14 -= 8;
      }
      while (v14);
    }
    this = (uint64_t *)WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache((uint64_t)a2, v7);
    v16 = *((unsigned int *)a2 + 13);
    if ((_DWORD)v16)
    {
      v17 = a2[5];
      v18 = 8 * v16;
      do
      {
        v19 = *v17++;
        this = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(v3, v19);
        v18 -= 8;
      }
      while (v18);
    }
    v20 = *((unsigned int *)a2 + 25);
    if ((_DWORD)v20)
    {
      v21 = a2[11];
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        this = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(v3, v23);
        v22 -= 8;
      }
      while (v22);
    }
  }
  return this;
}

WebCore::Style::Resolver *WebCore::Style::MatchedDeclarationsCache::sweep(WebCore::Style::MatchedDeclarationsCache *this, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  WebCore::Style::Resolver *result;
  bmalloc::api *v27;
  void *v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  unsigned int v35;

  ++**(_DWORD **)(*(_QWORD *)this + 8);
  v3 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  if (!v4)
    goto LABEL_29;
  v5 = *(_DWORD *)(v4 - 4);
  if (!v5)
    goto LABEL_29;
  v6 = 0;
  do
  {
    v7 = (_DWORD *)(v4 + 112 * --v5);
    if ((*v7 + 1) < 2)
      continue;
    v8 = v4 + 112 * v5;
    v9 = *(unsigned int *)(v8 + 28);
    if ((_DWORD)v9)
    {
      v10 = *(_DWORD ***)(v8 + 16);
      v11 = 16 * v9;
      while (**v10 != 1)
      {
        v10 += 2;
        v11 -= 16;
        if (!v11)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      v12 = v4 + 112 * v5;
      v13 = *(unsigned int *)(v12 + 44);
      if ((_DWORD)v13)
      {
        v14 = *(_DWORD ***)(v12 + 32);
        v15 = 16 * v13;
        while (**v14 != 1)
        {
          v14 += 2;
          v15 -= 16;
          if (!v15)
            goto LABEL_13;
        }
      }
      else
      {
LABEL_13:
        v16 = v4 + 112 * v5;
        v17 = *(unsigned int *)(v16 + 60);
        if (!(_DWORD)v17)
          continue;
        v18 = *(_DWORD ***)(v16 + 48);
        v19 = 16 * v17;
        while (**v18 != 1)
        {
          v18 += 2;
          v19 -= 16;
          if (!v19)
            goto LABEL_19;
        }
      }
    }
    *v7 = -1;
    WebCore::Style::MatchedDeclarationsCache::Entry::~Entry((WebCore::Style::MatchedDeclarationsCache::Entry *)(v4 + 112 * v5 + 8), a2);
    ++v6;
LABEL_19:
    ;
  }
  while (v5);
  v20 = *v3;
  if (v6)
  {
    *(_DWORD *)(v20 - 16) += v6;
    v21 = *v3;
    if (*v3)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    *(_DWORD *)(v21 - 12) = v22 - v6;
    v20 = *v3;
  }
  if (v20)
  {
    v23 = *(_DWORD *)(v20 - 4);
    v24 = *(unsigned int *)(v20 - 12);
    if (6 * (int)v24 < v23 && v23 >= 9)
    {
      v29 = (v24 - 1) | ((v24 - 1) >> 1) | ((((_DWORD)v24 - 1) | ((v24 - 1) >> 1)) >> 2);
      v30 = v29 | (v29 >> 4) | ((v29 | (v29 >> 4)) >> 8);
      v31 = (v30 | HIWORD(v30)) + 1;
      if (v31 > 0x400)
      {
        if (v31 > 2 * v24)
          goto LABEL_38;
      }
      else if (3 * v31 > 4 * v24)
      {
LABEL_36:
        v32 = (double)v24;
        v33 = (double)v31;
        v34 = 0.604166667;
LABEL_39:
        if (v33 * v34 <= v32)
          LODWORD(v31) = 2 * v31;
        if (v31 <= 8)
          v35 = 8;
        else
          v35 = v31;
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v3, v35, 0);
        goto LABEL_29;
      }
      LODWORD(v31) = 2 * v31;
      if (v31 <= 0x400)
        goto LABEL_36;
LABEL_38:
      v32 = (double)v24;
      v33 = (double)v31;
      v34 = 0.416666667;
      goto LABEL_39;
    }
  }
LABEL_29:
  *((_DWORD *)this + 18) = 0;
  result = *(WebCore::Style::Resolver **)(*(_QWORD *)this + 8);
  if (*(_DWORD *)result == 1)
  {
    WebCore::Style::Resolver::~Resolver(result);
    return (WebCore::Style::Resolver *)bmalloc::api::isoDeallocate(v27, v28);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebCore::Style::MatchedDeclarationsCache *WebCore::Style::MatchedDeclarationsCache::MatchedDeclarationsCache(WebCore::Style::MatchedDeclarationsCache *this, const WebCore::Style::Resolver *a2)
{
  uint64_t v3;
  void *v5;
  WTF *v6;
  unint64_t StatusReg;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;

  v3 = *((_QWORD *)a2 + 1);
  if (!v3)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v6 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v3;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        WTF::fastFree(v6, v5);
        v3 = *((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  ++*(_DWORD *)v3;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v8 = *(unsigned int **)(StatusReg + 736);
  if (!v8)
    v8 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)this + 7) = v8;
  *((_QWORD *)this + 2) = off_1E31F7378;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = off_1E344FF40;
  v10[1] = WebCore::Style::MatchedDeclarationsCache::sweep;
  v10[2] = 0;
  v10[3] = this;
  *((_QWORD *)this + 8) = v10;
  *((_DWORD *)this + 18) = 0;
  return this;
}

BOOL WebCore::Style::MatchedDeclarationsCache::isCacheable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebCore::Document *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  WebCore::Document *v12;
  uint64_t v13;
  int v14;
  unint64_t StatusReg;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WTF::Thread *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int *v28;
  _QWORD *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;

  v5 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
  if (*((_QWORD *)v5 + 159) == a1)
    return 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(v7 + 40);
  if (*(_QWORD *)(v8 + 592))
    return 0;
  if ((*(_BYTE *)(*(_QWORD *)(v7 + 32) + 148) & 1) != 0)
    return 0;
  v10 = *(_QWORD *)(a2 + 16);
  if ((v10 & 0xF80000000000) != 0 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 148) & 1) != 0)
    return 0;
  if (*(float *)(v8 + 588) != 1.0 || (*(_BYTE *)(a2 + 45) & 0xE0) != 0)
    return 0;
  v11 = 0;
  if ((v10 & 0x40000000) != 0 || (*(_DWORD *)(a2 + 40) & 0x4000000) != 0)
    return v11;
  if (a4)
  {
    ++*(_DWORD *)(a4 + 8);
    if ((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL) != 0)
    {
      if (*(_QWORD *)((*(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL) + 8))
      {
        v44 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
        if (*(_QWORD *)a4)
        {
          if (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WebCore::WeakPtrImplWithEventTargetData const*>((uint64_t *)a4, &v44))
          {
            return 0;
          }
          v5 = *(WebCore::Document **)(*(_QWORD *)(a1 + 40) + 8);
        }
      }
    }
  }
  v12 = (WebCore::Document *)*((_QWORD *)v5 + 331);
  if (!v12)
  {
    v5 = (WebCore::Document *)WebCore::Document::ensureFontSelector(v5);
    v12 = v5;
  }
  v13 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(v13 + 248);
  if (!v11)
    return v11;
  v14 = *(unsigned __int16 *)(v11 + 148);
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v16 = *(_QWORD *)(StatusReg + 736);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 96);
    if (v17)
      goto LABEL_19;
  }
  else
  {
    v16 = WTF::Thread::initializeCurrentTLS(v5);
    v17 = *(_QWORD *)(v16 + 96);
    if (v17)
      goto LABEL_19;
  }
  v17 = WTF::fastMalloc((WTF *)0x60);
  *(_DWORD *)(v17 + 8) = 1;
  v28 = (unsigned int *)(v17 + 8);
  *(_QWORD *)v17 = off_1E31F4A70;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v29 = 0;
  *(_QWORD *)(v17 + 16) = v29;
  *(_QWORD *)v17 = off_1E3407108;
  *(_BYTE *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = 0;
  v30 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v30 + 28) = 0;
  *(_QWORD *)(v30 + 32) = 0;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(v30 + 16) = 0;
  *(_QWORD *)v30 = 0;
  *(_WORD *)(v30 + 24) = 0;
  if (WTF::isUIThread((WTF *)v30))
  {
    {
      WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
      qword_1ECE90CE8 = 0;
    }
    WebCore::ThreadTimers::setSharedTimer((uint64_t **)v30, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
  }
  *(_QWORD *)(v17 + 48) = v30;
  *(_OWORD *)(v17 + 56) = 0u;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_BYTE *)(v17 + 88) = 0;
  if (pthread_main_np())
  {
    WebCore::sharedMainThreadStaticData = v17;
    do
      v31 = __ldaxr(v28);
    while (__stlxr(v31 + 1, v28));
  }
  v32 = *(unsigned int **)(v16 + 96);
  *(_QWORD *)(v16 + 96) = v17;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v32 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
    }
  }
LABEL_19:
  v18 = *(_QWORD *)(v17 + 80);
  if (!v18)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v17);
    v18 = *(_QWORD *)(v17 + 80);
  }
  if (v14 != *(unsigned __int16 *)(v18 + 120))
    return 0;
  v19 = *(_DWORD *)(*(_QWORD *)(v13 + 248) + 144);
  v20 = (WTF::Thread *)(*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v12 + 80))(v12);
  if (v19 != (_DWORD)v20)
    return 0;
  v21 = *(_QWORD *)(a3 + 32);
  v11 = *(_QWORD *)(v21 + 248);
  if (v11)
  {
    v22 = *(unsigned __int16 *)(v11 + 148);
    v23 = *(_QWORD *)(StatusReg + 736);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 96);
      if (v24)
        goto LABEL_26;
    }
    else
    {
      v23 = WTF::Thread::initializeCurrentTLS(v20);
      v24 = *(_QWORD *)(v23 + 96);
      if (v24)
        goto LABEL_26;
    }
    v24 = WTF::fastMalloc((WTF *)0x60);
    *(_DWORD *)(v24 + 8) = 1;
    v36 = (unsigned int *)(v24 + 8);
    *(_QWORD *)v24 = off_1E31F4A70;
    v37 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v37 = 0;
    *(_QWORD *)(v24 + 16) = v37;
    *(_QWORD *)v24 = off_1E3407108;
    *(_BYTE *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = 0;
    v38 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)(v38 + 28) = 0;
    *(_QWORD *)(v38 + 32) = 0;
    *(_QWORD *)(v38 + 8) = 0;
    *(_QWORD *)(v38 + 16) = 0;
    *(_QWORD *)v38 = 0;
    *(_WORD *)(v38 + 24) = 0;
    if (WTF::isUIThread((WTF *)v38))
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      WebCore::ThreadTimers::setSharedTimer((uint64_t **)v38, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
    }
    *(_QWORD *)(v24 + 48) = v38;
    *(_OWORD *)(v24 + 56) = 0u;
    *(_OWORD *)(v24 + 72) = 0u;
    *(_BYTE *)(v24 + 88) = 0;
    if (pthread_main_np())
    {
      WebCore::sharedMainThreadStaticData = v24;
      do
        v39 = __ldaxr(v36);
      while (__stlxr(v39 + 1, v36));
    }
    v40 = *(unsigned int **)(v23 + 96);
    *(_QWORD *)(v23 + 96) = v24;
    if (v40)
    {
      v41 = v40 + 2;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
      {
        atomic_store(1u, v40 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
      }
    }
LABEL_26:
    v25 = *(_QWORD *)(v24 + 80);
    if (!v25)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v24);
      v25 = *(_QWORD *)(v24 + 80);
    }
    if (v22 == *(unsigned __int16 *)(v25 + 120))
    {
      v26 = *(_DWORD *)(*(_QWORD *)(v21 + 248) + 144);
      return v26 == (*(unsigned int (**)(WebCore::Document *))(*(_QWORD *)v12 + 80))(v12);
    }
    return 0;
  }
  return v11;
}

void WebCore::Style::MatchedDeclarationsCache::remove(WebCore::Style::MatchedDeclarationsCache *this, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  unsigned int v5;
  int *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v14;

  v3 = (uint64_t *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = v4 & a2;
    v6 = (int *)(v2 + 112 * (v4 & a2));
    v7 = *v6;
    if (*v6 != (_DWORD)a2)
    {
      v14 = 1;
      while (v7)
      {
        v5 = (v5 + v14) & v4;
        v6 = (int *)(v2 + 112 * v5);
        v7 = *v6;
        ++v14;
        if (*v6 == (_DWORD)a2)
          goto LABEL_3;
      }
      v6 = (int *)(v2 + 112 * *(unsigned int *)(v2 - 4));
    }
LABEL_3:
    if ((int *)(v2 + 112 * *(unsigned int *)(v2 - 4)) != v6)
    {
      v8 = -1;
      *v6 = -1;
      WebCore::Style::MatchedDeclarationsCache::Entry::~Entry((WebCore::Style::MatchedDeclarationsCache::Entry *)(v6 + 2), a2);
      ++*(_DWORD *)(*v3 - 16);
      v9 = *v3;
      if (*v3)
        v8 = *(_DWORD *)(v9 - 12) - 1;
      *(_DWORD *)(v9 - 12) = v8;
      v10 = *v3;
      if (*v3)
      {
        v11 = 6 * *(_DWORD *)(v10 - 12);
        v12 = *(_DWORD *)(v10 - 4);
        if (v11 < v12 && v12 >= 9)
          WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v3, v12 >> 1, 0);
      }
    }
  }
}

WebCore::Style::Resolver *WebCore::Style::MatchedDeclarationsCache::clearEntriesAffectedByViewportUnits(WebCore::Style::MatchedDeclarationsCache *this, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  WebCore::Style::Resolver *result;
  bmalloc::api *v17;
  void *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  ++**(_DWORD **)(*(_QWORD *)this + 8);
  v3 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 4);
    if (v5)
    {
      v6 = 0;
      v7 = v5 - 1;
      do
      {
        v8 = v7;
        v9 = v4 + 112 * v7;
        if ((*(_DWORD *)v9 + 1) >= 2 && (*(_BYTE *)(*(_QWORD *)(v9 + 88) + 19) & 0x20) != 0)
        {
          *(_DWORD *)v9 = -1;
          WebCore::Style::MatchedDeclarationsCache::Entry::~Entry((WebCore::Style::MatchedDeclarationsCache::Entry *)(v4 + 112 * v7 + 8), a2);
          ++v6;
        }
        --v7;
      }
      while (v8);
      v10 = *v3;
      if (v6)
      {
        *(_DWORD *)(v10 - 16) += v6;
        v11 = *v3;
        if (*v3)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v6;
        v10 = *v3;
      }
      if (v10)
      {
        v13 = *(_DWORD *)(v10 - 4);
        v14 = *(unsigned int *)(v10 - 12);
        if (6 * (int)v14 < v13 && v13 >= 9)
        {
          v19 = (v14 - 1) | ((v14 - 1) >> 1) | ((((_DWORD)v14 - 1) | ((v14 - 1) >> 1)) >> 2);
          v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
          v21 = (v20 | HIWORD(v20)) + 1;
          if (v21 > 0x400)
          {
            if (v21 > 2 * v14)
              goto LABEL_32;
          }
          else if (3 * v21 > 4 * v14)
          {
LABEL_24:
            v22 = (double)v14;
            v23 = (double)v21;
            v24 = 0.604166667;
LABEL_25:
            if (v23 * v24 <= v22)
              LODWORD(v21) = 2 * v21;
            if (v21 <= 8)
              v25 = 8;
            else
              v25 = v21;
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v3, v25, 0);
            goto LABEL_17;
          }
          LODWORD(v21) = 2 * v21;
          if (v21 <= 0x400)
            goto LABEL_24;
LABEL_32:
          v22 = (double)v14;
          v23 = (double)v21;
          v24 = 0.416666667;
          goto LABEL_25;
        }
      }
    }
  }
LABEL_17:
  result = *(WebCore::Style::Resolver **)(*(_QWORD *)this + 8);
  if (*(_DWORD *)result == 1)
  {
    WebCore::Style::Resolver::~Resolver(result);
    return (WebCore::Style::Resolver *)bmalloc::api::isoDeallocate(v17, v18);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebCore::Style::PageRuleCollector::matchAllPageRules(WebCore::Style::PageRuleCollector *this, int a2)
{
  char v4;
  const WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::StringImpl *v13;

  v4 = *((_BYTE *)this + 8) + a2;
  v5 = (const WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v5 += 2;
  v13 = v5;
  WebCore::Style::PageRuleCollector::matchPageRules(this, (WebCore::Style::RuleSet *)WebCore::Style::UserAgentStyle::defaultPrintStyle, (const WTF::StringImpl *)(v4 & 1), a2 == 0, &v13);
  v6 = *(_QWORD *)this;
  if (*(_BYTE *)(*(_QWORD *)this + 316))
  {
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 16) + 8) + 1328);
      if (!*(_QWORD *)(v8 + 32))
      {
        if (*(_QWORD *)(v8 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v8);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v8);
        v11 = *(_QWORD *)(v8 + 32);
        if (*(_DWORD *)(v11 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        {
          v12 = *(_QWORD *)(v8 + 32);
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v11 + 32), v10);
          v11 = v12;
        }
        if (*(_BYTE *)(v11 + 242)
          || *(_BYTE *)(v11 + 243)
          || *(_BYTE *)(v11 + 244)
          || *(_BYTE *)(v11 + 245)
          || *(_BYTE *)(v11 + 246)
          || *(_BYTE *)(v11 + 247)
          || *(_BYTE *)(v11 + 248))
        {
          *(_BYTE *)(v8 + 236) = 1;
        }
      }
      v9 = *(_QWORD *)(v8 + 32);
      v6 = v9 + 32;
    }
    while (*(_BYTE *)(v9 + 348));
  }
  WebCore::Style::PageRuleCollector::matchPageRules(this, *(WebCore::Style::RuleSet **)(v6 + 24), (const WTF::StringImpl *)(v4 & 1), a2 == 0, &v13);
  if (*(_BYTE *)(*(_QWORD *)this + 317))
    WebCore::Style::PageRuleCollector::matchPageRules(this, **(WebCore::Style::RuleSet ***)this, (const WTF::StringImpl *)(v4 & 1), a2 == 0, &v13);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v7);
    else
      *(_DWORD *)v5 -= 2;
  }
}

void WebCore::Style::PageRuleCollector::matchPageRules(WebCore::Style::PageRuleCollector *this, WebCore::Style::RuleSet *a2, const WTF::StringImpl *a3, int a4, const WTF::StringImpl **a5)
{
  unint64_t v9;
  unsigned __int8 v10;
  BOOL (*v11)(uint64_t, uint64_t);
  unsigned int *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  int v20;
  _QWORD *v21;
  unint64_t v22;
  WTF *v23;
  const std::nothrow_t *v24;
  unint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  WTF *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD **v46;
  _DWORD *v47;
  WTF *v48;
  uint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  _DWORD *v53;
  WTF *v54;
  uint64_t v55;
  BOOL (*v56)(uint64_t, uint64_t);

  if (!a2)
    return;
  v54 = 0;
  v55 = 0;
  if (!*((_DWORD *)a2 + 117))
    return;
  v9 = 0;
  if ((_DWORD)a3)
    v10 = 2;
  else
    v10 = 1;
  do
  {
    v56 = 0;
    v11 = *(BOOL (**)(uint64_t, uint64_t))(*((_QWORD *)a2 + 57) + 8 * v9);
    v56 = v11;
    v12 = (unsigned int *)*((_QWORD *)v11 + 2);
    if (v12)
    {
      do
      {
        v13 = *v12;
        v14 = (*v12 >> 4) & 0x1F;
        if (v14 == 13)
        {
          if ((v13 >> 9))
            v16 = 1;
          else
            v16 = a4;
          if ((v13 >> 9) == v10 || v16 == 0)
            goto LABEL_27;
        }
        else if (v14 == 1)
        {
          v15 = *(WTF **)(*((_QWORD *)v12 + 1) + 24);
          if (v15 != (WTF *)WebCore::starAtomData)
          {
            if (!WTF::equal(v15, *a5, a3))
              goto LABEL_27;
            v13 = *v12;
          }
        }
        v12 += 4;
      }
      while ((v13 & 0x80000) == 0);
      v11 = v56;
    }
    v18 = *((_QWORD *)v11 + 1);
    v19 = *(_DWORD *)(v18 + 4);
    if ((v19 & 8) != 0)
    {
      if (!*(_DWORD *)(v18 + 28))
        goto LABEL_27;
    }
    else if (!(v19 >> 4))
    {
      goto LABEL_27;
    }
    v20 = HIDWORD(v55);
    if (HIDWORD(v55) == (_DWORD)v55)
    {
      v21 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::SVGNumber,WTF::RawPtrTraits<WebCore::SVGNumber>,WTF::DefaultRefDerefTraits<WebCore::SVGNumber>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, HIDWORD(v55) + 1, (unint64_t)&v56);
      v20 = HIDWORD(v55);
      *((_QWORD *)v54 + HIDWORD(v55)) = *v21;
    }
    else
    {
      *((_QWORD *)v54 + HIDWORD(v55)) = v11;
    }
    HIDWORD(v55) = v20 + 1;
LABEL_27:
    ++v9;
  }
  while (v9 < *((unsigned int *)a2 + 117));
  v22 = HIDWORD(v55);
  v23 = v54;
  if (!HIDWORD(v55))
  {
LABEL_49:
    if (v23)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      WTF::fastFree(v23, a2);
    }
    return;
  }
  v56 = WebCore::Style::comparePageRules;
  if (HIDWORD(v55) < 0x81)
  {
LABEL_36:
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>((uint64_t)v23, (uint64_t *)v23 + v22, (uint64_t (**)(uint64_t, uint64_t))&v56, v22, 0, 0);
  }
  else
  {
    v24 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v25 = HIDWORD(v55);
    while (1)
    {
      v26 = (uint64_t *)operator new(8 * v25, v24);
      if (v26)
        break;
      v27 = v25 > 1;
      v25 >>= 1;
      if (!v27)
        goto LABEL_36;
    }
    v28 = v26;
    std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>((uint64_t)v23, (uint64_t *)v23 + v22, (uint64_t (**)(uint64_t, uint64_t))&v56, v22, v26, v25);
    operator delete(v28);
  }
  v29 = *((unsigned int *)this + 17);
  v30 = HIDWORD(v55) + v29;
  if (v30 <= *((unsigned int *)this + 16))
  {
LABEL_45:
    v23 = v54;
    if (HIDWORD(v55))
    {
      v33 = *((_DWORD *)this + 17);
      v34 = 8 * HIDWORD(v55);
      do
      {
        v35 = *(_QWORD *)v23;
        v23 = (WTF *)((char *)v23 + 8);
        v36 = *(_DWORD **)(v35 + 8);
        ++*v36;
        v37 = (_QWORD *)(*((_QWORD *)this + 7) + 16 * v33);
        *v37 = v36;
        v37[1] = 0x200FFFF00000003;
        v33 = *((_DWORD *)this + 17) + 1;
        *((_DWORD *)this + 17) = v33;
        v34 -= 8;
      }
      while (v34);
      v23 = v54;
    }
    goto LABEL_49;
  }
  if (!(v30 >> 28))
  {
    v31 = (WTF *)*((_QWORD *)this + 7);
    v32 = WTF::fastMalloc((WTF *)(16 * v30));
    *((_DWORD *)this + 16) = v30;
    *((_QWORD *)this + 7) = v32;
    if ((_DWORD)v29)
    {
      v38 = (_QWORD *)v32;
      v39 = (WTF *)((char *)v31 + 16 * v29);
      v40 = v31;
      do
      {
        v41 = *(_QWORD *)v40;
        *(_QWORD *)v40 = 0;
        *v38 = v41;
        v38[1] = *((_QWORD *)v40 + 1);
        v42 = *(_QWORD *)v40;
        *(_QWORD *)v40 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 1)
          {
            v43 = *(unsigned int *)(v42 + 4);
            if ((v43 & 8) != 0)
            {
              v44 = *(unsigned int *)(v42 + 28);
              if ((_DWORD)v44)
              {
                v45 = 16 * v44;
                v46 = (_DWORD **)(*(_QWORD *)(v42 + 16) + 8);
                do
                {
                  v47 = *v46;
                  *v46 = 0;
                  if (v47)
                  {
                    if (*v47 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v47, a2);
                    else
                      *v47 -= 2;
                  }
                  v46 += 2;
                  v45 -= 16;
                }
                while (v45);
              }
              v48 = *(WTF **)(v42 + 16);
              if ((WTF *)(v42 + 32) != v48 && v48 != 0)
              {
                *(_QWORD *)(v42 + 16) = 0;
                *(_DWORD *)(v42 + 24) = 0;
                WTF::fastFree(v48, a2);
              }
              v50 = *(_QWORD *)(v42 + 8);
              *(_QWORD *)(v42 + 8) = 0;
              if (v50)
                (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
            }
            else if (v43 >= 0x10)
            {
              v51 = 0;
              v52 = (unsigned int *)(v42 + ((v43 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v53 = (_DWORD *)(*v52 | ((unint64_t)*((unsigned __int8 *)v52 + 4) << 32));
                if (*v53 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v53, a2);
                else
                  *v53 -= 2;
                ++v51;
                v52 = (unsigned int *)((char *)v52 + 5);
              }
              while (v51 < (unint64_t)*(unsigned int *)(v42 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v42, a2);
          }
          else
          {
            --*(_DWORD *)v42;
          }
        }
        v38 += 2;
        v40 = (WTF *)((char *)v40 + 16);
      }
      while (v40 != v39);
    }
    if (v31)
    {
      if (*((WTF **)this + 7) == v31)
      {
        *((_QWORD *)this + 7) = 0;
        *((_DWORD *)this + 16) = 0;
      }
      WTF::fastFree(v31, a2);
    }
    goto LABEL_45;
  }
  __break(0xC471u);
}

BOOL WebCore::Style::comparePageRules(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = 0;
  if (v2)
  {
    v4 = *(unsigned int **)(a1 + 16);
    do
    {
      v5 = *v4;
      v6 = (*v4 >> 4) & 0x1F;
      if (v6 == 13)
      {
        if ((v5 >> 9))
          v7 = v3;
        else
          v7 = v3 + 2;
        if ((v5 >> 9) - 1 < 2)
          ++v3;
        else
          v3 = v7;
      }
      else if (v6 == 1)
      {
        v3 += 4 * (*(_QWORD *)(*(_QWORD *)(v2 + 8) + 24) != WebCore::starAtomData);
      }
      v4 += 4;
    }
    while ((v5 & 0x80000) == 0);
  }
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    v9 = 0;
    v10 = *(unsigned int **)(a2 + 16);
    do
    {
      v11 = *v10;
      v12 = (*v10 >> 4) & 0x1F;
      if (v12 == 13)
      {
        if ((v11 >> 9))
          v13 = v9;
        else
          v13 = v9 + 2;
        if ((v11 >> 9) - 1 < 2)
          ++v9;
        else
          v9 = v13;
      }
      else if (v12 == 1)
      {
        v9 += 4 * (*(_QWORD *)(*(_QWORD *)(v8 + 8) + 24) != WebCore::starAtomData);
      }
      v10 += 4;
    }
    while ((v11 & 0x80000) == 0);
  }
  else
  {
    v9 = 0;
  }
  return v3 < v9;
}

uint64_t WebCore::Style::isValidMarkerStyleProperty(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (a1 <= 246)
  {
    if ((a1 > 0x37 || ((1 << a1) & 0xBFC0101F7FEF62) == 0)
      && ((a1 - 141) > 0x32 || ((1 << (a1 + 115)) & 0x4000000003001) == 0)
      && a1 != 101)
    {
      return 0;
    }
  }
  else
  {
    if (a1 <= 349)
    {
      v3 = a1 - 247;
      if (v3 <= 0x32 && ((1 << v3) & 0x4805F01987201) != 0)
        return result;
      return 0;
    }
    if (((a1 - 492) > 0x30 || ((1 << (a1 + 20)) & 0x1080000001003) == 0)
      && a1 != 350
      && a1 != 448)
    {
      return 0;
    }
  }
  return result;
}

float WebCore::TextDecorationThickness::resolve(_BYTE *a1, float a2, float a3)
{
  float result;
  WebCore::Length *v5;
  int v6;
  float v7;

  if (!*a1)
    return a2 * 0.0625;
  if (*a1 == 1)
    return a3;
  v5 = (WebCore::Length *)(a1 + 4);
  v6 = a1[8];
  if (v6 == 11)
  {
    WebCore::Length::nonNanCalculatedValue(v5, a2);
  }
  else if (v6 == 3)
  {
    if (a1[10])
      v7 = *(float *)v5;
    else
      v7 = (float)*(int *)v5;
    return (float)(v7 / 100.0) * a2;
  }
  else if (a1[10])
  {
    return *(float *)v5;
  }
  else
  {
    return (float)*(int *)v5;
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::Style::MatchedProperties>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  void *v5;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          if ((*((_BYTE *)result + 4) & 8) != 0)
            WebCore::MutableStyleProperties::~MutableStyleProperties(result, a2);
          else
            WebCore::ImmutableStyleProperties::~ImmutableStyleProperties(result, a2);
          result = (WTF::StringImpl *)WTF::fastFree(v4, v5);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 16);
    }
    while (v3 != a2);
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeatures<WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1>(WebCore::Element &,WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1 &&)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 56);
  return v2 && *(_DWORD *)(v2 - 12) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeatures<WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1>(WebCore::Element &,WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1 &&)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1&)#2},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 132) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeaturesInShadowTree<WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1 &>(WebCore::Element &,WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1 &)::{lambda(WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1 &&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 180) | *(unsigned __int8 *)(a2 + 800)) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeaturesForSlotted<WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1 &>(WebCore::Element &,WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1 &)::{lambda(WebCore::Style::IdChangeInvalidation::invalidateStyle(WTF::AtomString const&)::$_1 &&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 228) != 0;
}

uint64_t *WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSContainerRule>(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CSSStyleRule *v8;
  uint64_t v9;
  WebCore::CSSStyleSheet *v10;
  uint64_t v11[3];
  WebCore::CSSStyleRule *v12;
  uint64_t v13;

  if (a2)
  {
    v3 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
    if ((_DWORD)v3)
    {
      v4 = result;
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(a2 + 24);
        if (v5 >= *(unsigned int *)(v6 + 20))
          goto LABEL_24;
        if (v5 >= *(unsigned int *)(a2 + 44))
        {
          __break(0xC471u);
          return result;
        }
        v7 = *(_QWORD *)(a2 + 32);
        v8 = *(WebCore::CSSStyleRule **)(v7 + 8 * v5);
        if (v8)
        {
LABEL_11:
          result = (uint64_t *)(*(uint64_t (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v8 + 16))(v8);
          if ((int)result > 11)
          {
            switch((_DWORD)result)
            {
              case 0xC:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSSupportsRule>(v4, (uint64_t)v8);
                break;
              case 0x10:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSLayerBlockRule>(v4, (uint64_t)v8);
                break;
              case 0x12:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSContainerRule>(v4, v8);
                break;
            }
          }
          else
          {
            switch((_DWORD)result)
            {
              case 1:
                v9 = *((_QWORD *)v8 + 4);
                v12 = v8;
                v13 = v9;
                WTF::HashMap<WebCore::StyleRule const*,WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>,WTF::DefaultHash<WebCore::StyleRule const*>,WTF::HashTraits<WebCore::StyleRule const*>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>>,WTF::HashTableTraits>::add<WebCore::CSSStyleRule*>(v4, &v13, (uint64_t *)&v12, (uint64_t)v11);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleRule>((uint64_t)v4, v8);
                break;
              case 3:
                v10 = (WebCore::CSSStyleSheet *)WebCore::CSSImportRule::styleSheet(v8);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>((int)v4, v10);
                break;
              case 4:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSMediaRule>(v4, (uint64_t)v8);
                break;
            }
          }
          goto LABEL_24;
        }
        WebCore::StyleRuleBase::createCSSOMWrapper(*(WebCore::StyleRuleBase **)(*(_QWORD *)(v6 + 8) + 8 * v5), 0, (WebCore::CSSRule *)a2, v11);
        v8 = (WebCore::CSSStyleRule *)v11[0];
        result = *(uint64_t **)(v7 + 8 * v5);
        *(_QWORD *)(v7 + 8 * v5) = v11[0];
        if (!result)
          goto LABEL_10;
        if (*((_DWORD *)result + 2) != 1)
          break;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        v8 = *(WebCore::CSSStyleRule **)(v7 + 8 * v5);
        if (v8)
          goto LABEL_11;
LABEL_24:
        if (v3 == ++v5)
          return result;
      }
      --*((_DWORD *)result + 2);
LABEL_10:
      if (v8)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t *WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSLayerBlockRule>(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CSSStyleRule *v8;
  uint64_t v9;
  WebCore::CSSStyleSheet *v10;
  uint64_t v11[3];
  WebCore::CSSStyleRule *v12;
  uint64_t v13;

  if (a2)
  {
    v3 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
    if ((_DWORD)v3)
    {
      v4 = result;
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(a2 + 24);
        if (v5 >= *(unsigned int *)(v6 + 20))
          goto LABEL_24;
        if (v5 >= *(unsigned int *)(a2 + 44))
        {
          __break(0xC471u);
          return result;
        }
        v7 = *(_QWORD *)(a2 + 32);
        v8 = *(WebCore::CSSStyleRule **)(v7 + 8 * v5);
        if (v8)
        {
LABEL_11:
          result = (uint64_t *)(*(uint64_t (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v8 + 16))(v8);
          if ((int)result > 11)
          {
            switch((_DWORD)result)
            {
              case 0xC:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSSupportsRule>(v4, (uint64_t)v8);
                break;
              case 0x10:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSLayerBlockRule>(v4, v8);
                break;
              case 0x12:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSContainerRule>(v4, v8);
                break;
            }
          }
          else
          {
            switch((_DWORD)result)
            {
              case 1:
                v9 = *((_QWORD *)v8 + 4);
                v12 = v8;
                v13 = v9;
                WTF::HashMap<WebCore::StyleRule const*,WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>,WTF::DefaultHash<WebCore::StyleRule const*>,WTF::HashTraits<WebCore::StyleRule const*>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>>,WTF::HashTableTraits>::add<WebCore::CSSStyleRule*>(v4, &v13, (uint64_t *)&v12, (uint64_t)v11);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleRule>((uint64_t)v4, v8);
                break;
              case 3:
                v10 = (WebCore::CSSStyleSheet *)WebCore::CSSImportRule::styleSheet(v8);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>((int)v4, v10);
                break;
              case 4:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSMediaRule>(v4, (uint64_t)v8);
                break;
            }
          }
          goto LABEL_24;
        }
        WebCore::StyleRuleBase::createCSSOMWrapper(*(WebCore::StyleRuleBase **)(*(_QWORD *)(v6 + 8) + 8 * v5), 0, (WebCore::CSSRule *)a2, v11);
        v8 = (WebCore::CSSStyleRule *)v11[0];
        result = *(uint64_t **)(v7 + 8 * v5);
        *(_QWORD *)(v7 + 8 * v5) = v11[0];
        if (!result)
          goto LABEL_10;
        if (*((_DWORD *)result + 2) != 1)
          break;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        v8 = *(WebCore::CSSStyleRule **)(v7 + 8 * v5);
        if (v8)
          goto LABEL_11;
LABEL_24:
        if (v3 == ++v5)
          return result;
      }
      --*((_DWORD *)result + 2);
LABEL_10:
      if (v8)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t *WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSMediaRule>(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CSSStyleRule *v8;
  uint64_t v9;
  WebCore::CSSStyleSheet *v10;
  uint64_t v11[3];
  WebCore::CSSStyleRule *v12;
  uint64_t v13;

  if (a2)
  {
    v3 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
    if ((_DWORD)v3)
    {
      v4 = result;
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(a2 + 24);
        if (v5 >= *(unsigned int *)(v6 + 20))
          goto LABEL_24;
        if (v5 >= *(unsigned int *)(a2 + 44))
        {
          __break(0xC471u);
          return result;
        }
        v7 = *(_QWORD *)(a2 + 32);
        v8 = *(WebCore::CSSStyleRule **)(v7 + 8 * v5);
        if (v8)
        {
LABEL_11:
          result = (uint64_t *)(*(uint64_t (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v8 + 16))(v8);
          if ((int)result > 11)
          {
            switch((_DWORD)result)
            {
              case 0xC:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSSupportsRule>(v4, (uint64_t)v8);
                break;
              case 0x10:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSLayerBlockRule>(v4, v8);
                break;
              case 0x12:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSContainerRule>(v4, v8);
                break;
            }
          }
          else
          {
            switch((_DWORD)result)
            {
              case 1:
                v9 = *((_QWORD *)v8 + 4);
                v12 = v8;
                v13 = v9;
                WTF::HashMap<WebCore::StyleRule const*,WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>,WTF::DefaultHash<WebCore::StyleRule const*>,WTF::HashTraits<WebCore::StyleRule const*>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>>,WTF::HashTableTraits>::add<WebCore::CSSStyleRule*>(v4, &v13, (uint64_t *)&v12, (uint64_t)v11);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleRule>((uint64_t)v4, v8);
                break;
              case 3:
                v10 = (WebCore::CSSStyleSheet *)WebCore::CSSImportRule::styleSheet(v8);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>((int)v4, v10);
                break;
              case 4:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSMediaRule>(v4, v8);
                break;
            }
          }
          goto LABEL_24;
        }
        WebCore::StyleRuleBase::createCSSOMWrapper(*(WebCore::StyleRuleBase **)(*(_QWORD *)(v6 + 8) + 8 * v5), 0, (WebCore::CSSRule *)a2, v11);
        v8 = (WebCore::CSSStyleRule *)v11[0];
        result = *(uint64_t **)(v7 + 8 * v5);
        *(_QWORD *)(v7 + 8 * v5) = v11[0];
        if (!result)
          goto LABEL_10;
        if (*((_DWORD *)result + 2) != 1)
          break;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        v8 = *(WebCore::CSSStyleRule **)(v7 + 8 * v5);
        if (v8)
          goto LABEL_11;
LABEL_24:
        if (v3 == ++v5)
          return result;
      }
      --*((_DWORD *)result + 2);
LABEL_10:
      if (v8)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t *WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSSupportsRule>(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CSSStyleRule *v8;
  uint64_t v9;
  WebCore::CSSStyleSheet *v10;
  uint64_t v11[3];
  WebCore::CSSStyleRule *v12;
  uint64_t v13;

  if (a2)
  {
    v3 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20);
    if ((_DWORD)v3)
    {
      v4 = result;
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(a2 + 24);
        if (v5 >= *(unsigned int *)(v6 + 20))
          goto LABEL_24;
        if (v5 >= *(unsigned int *)(a2 + 44))
        {
          __break(0xC471u);
          return result;
        }
        v7 = *(_QWORD *)(a2 + 32);
        v8 = *(WebCore::CSSStyleRule **)(v7 + 8 * v5);
        if (v8)
        {
LABEL_11:
          result = (uint64_t *)(*(uint64_t (**)(WebCore::CSSStyleRule *))(*(_QWORD *)v8 + 16))(v8);
          if ((int)result > 11)
          {
            switch((_DWORD)result)
            {
              case 0xC:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSSupportsRule>(v4, v8);
                break;
              case 0x10:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSLayerBlockRule>(v4, v8);
                break;
              case 0x12:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSContainerRule>(v4, v8);
                break;
            }
          }
          else
          {
            switch((_DWORD)result)
            {
              case 1:
                v9 = *((_QWORD *)v8 + 4);
                v12 = v8;
                v13 = v9;
                WTF::HashMap<WebCore::StyleRule const*,WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>,WTF::DefaultHash<WebCore::StyleRule const*>,WTF::HashTraits<WebCore::StyleRule const*>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>>,WTF::HashTableTraits>::add<WebCore::CSSStyleRule*>(v4, &v13, (uint64_t *)&v12, (uint64_t)v11);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleRule>((uint64_t)v4, v8);
                break;
              case 3:
                v10 = (WebCore::CSSStyleSheet *)WebCore::CSSImportRule::styleSheet(v8);
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>((int)v4, v10);
                break;
              case 4:
                result = (uint64_t *)WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSMediaRule>(v4, v8);
                break;
            }
          }
          goto LABEL_24;
        }
        WebCore::StyleRuleBase::createCSSOMWrapper(*(WebCore::StyleRuleBase **)(*(_QWORD *)(v6 + 8) + 8 * v5), 0, (WebCore::CSSRule *)a2, v11);
        v8 = (WebCore::CSSStyleRule *)v11[0];
        result = *(uint64_t **)(v7 + 8 * v5);
        *(_QWORD *)(v7 + 8 * v5) = v11[0];
        if (!result)
          goto LABEL_10;
        if (*((_DWORD *)result + 2) != 1)
          break;
        result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        v8 = *(WebCore::CSSStyleRule **)(v7 + 8 * v5);
        if (v8)
          goto LABEL_11;
LABEL_24:
        if (v3 == ++v5)
          return result;
      }
      --*((_DWORD *)result + 2);
LABEL_10:
      if (v8)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::StyleRule const*,WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>,WTF::DefaultHash<WebCore::StyleRule const*>,WTF::HashTraits<WebCore::StyleRule const*>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>>,WTF::HashTableTraits>::add<WebCore::CSSStyleRule*>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v30 = v8 + 16 * v28;
        goto LABEL_36;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  if (*a3)
    ++*(_DWORD *)(v20 + 8);
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  v21 = *v6;
  if (*v6)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_24;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
LABEL_31:
      result = WTF::HashTable<WebCore::Node *,WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashMap<WebCore::Node *,WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>,WTF::DefaultHash<WebCore::Node *>,WTF::HashTraits<WebCore::Node *>,WTF::HashTraits<WTF::Ref<WebCore::InspectorStyleSheetForInlineStyle,WTF::RawPtrTraits<WebCore::InspectorStyleSheetForInlineStyle>,WTF::DefaultRefDerefTraits<WebCore::InspectorStyleSheetForInlineStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::Node *>>::rehash(v6, v27, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
      goto LABEL_35;
    }
LABEL_24:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
    goto LABEL_31;
  }
LABEL_35:
  v30 = v23 + 16 * v26;
  v29 = 1;
LABEL_36:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleRule>(uint64_t result, WebCore::CSSStyleRule *a2)
{
  uint64_t *v3;
  int v4;
  unsigned int i;
  WebCore::CSSImportRule *v6;
  uint64_t v7;
  WebCore::CSSStyleSheet *v8;
  _BYTE v9[24];
  WebCore::CSSImportRule *v10;
  uint64_t v11;

  if (a2)
  {
    v3 = (uint64_t *)result;
    result = WebCore::CSSStyleRule::length((uint64_t)a2);
    if ((_DWORD)result)
    {
      v4 = result;
      for (i = 0; i != v4; ++i)
      {
        result = WebCore::CSSStyleRule::item(a2, i);
        if (result)
        {
          v6 = (WebCore::CSSImportRule *)result;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          if ((int)result > 11)
          {
            switch((_DWORD)result)
            {
              case 0xC:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSSupportsRule>(v3, v6);
                break;
              case 0x10:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSLayerBlockRule>(v3, v6);
                break;
              case 0x12:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSContainerRule>(v3, v6);
                break;
            }
          }
          else
          {
            switch((_DWORD)result)
            {
              case 1:
                v7 = *((_QWORD *)v6 + 4);
                v10 = v6;
                v11 = v7;
                WTF::HashMap<WebCore::StyleRule const*,WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>,WTF::DefaultHash<WebCore::StyleRule const*>,WTF::HashTraits<WebCore::StyleRule const*>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSStyleRule,WTF::RawPtrTraits<WebCore::CSSStyleRule>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleRule>>>,WTF::HashTableTraits>::add<WebCore::CSSStyleRule*>(v3, &v11, (uint64_t *)&v10, (uint64_t)v9);
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleRule>(v3, v6);
                break;
              case 3:
                v8 = (WebCore::CSSStyleSheet *)WebCore::CSSImportRule::styleSheet(v6);
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>((int)v3, v8);
                break;
              case 4:
                result = WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSMediaRule>(v3, v6);
                break;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::Style::MatchedDeclarationsCache::*&)(void),WebCore::Style::MatchedDeclarationsCache*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WebCore::WeakPtrImplWithEventTargetData const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ~(*a2 << 32) + *a2;
  v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
  v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
  v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
  for (i = 1; ; ++i)
  {
    v10 = v8;
    v11 = *(_QWORD *)(v2 + 16 * v8);
    if (v11 != -1)
    {
      if (!v11)
        return 0;
      if (v11 == *a2)
        break;
    }
    v8 = (v10 + i) & v4;
  }
  return v2 + 16 * v10;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  char *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  if (a4 >= 2)
  {
    v8 = (uint64_t *)result;
    if (a4 == 2)
    {
      result = (*a3)(*(a2 - 1), *(_QWORD *)result);
      if ((_DWORD)result)
      {
        v9 = *v8;
        *v8 = *(a2 - 1);
        *(a2 - 1) = v9;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v20 = (char *)a5;
      v21 = a4 >> 1;
      v22 = (uint64_t *)(result + 8 * (a4 >> 1));
      v23 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>((uint64_t *)result, v22, a3, v23, a5);
        v24 = (uint64_t *)&v20[8 * v21];
        result = (uint64_t)std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v24);
        v25 = &v20[8 * a4];
        v26 = v24;
        while (v26 != (uint64_t *)v25)
        {
          result = (*a3)(*v26, *(_QWORD *)v20);
          if ((_DWORD)result)
            v27 = (char *)v26;
          else
            v27 = v20;
          v20 += 8 * (result ^ 1);
          v26 += result;
          *v8++ = *(_QWORD *)v27;
          if (v20 == (char *)v24)
          {
            if (v26 != (uint64_t *)v25)
            {
              v28 = 0;
              do
              {
                v8[v28] = v26[v28];
                ++v28;
              }
              while (&v26[v28] != (uint64_t *)v25);
            }
            return result;
          }
        }
        if (v20 != (char *)v24)
        {
          v29 = 0;
          do
          {
            v8[v29] = *(_QWORD *)&v20[v29 * 8];
            ++v29;
          }
          while (&v20[v29 * 8] != (char *)v24);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(result, v22, a3, v23, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v20, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>((uint64_t)v8, (char *)&v8[a4 >> 1], (char *)a2, a3, a4 >> 1, a4 - (a4 >> 1), v20, a6);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v11 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        v12 = 0;
        v13 = (uint64_t *)result;
        do
        {
          v15 = *v13;
          v14 = v13[1];
          v13 = v11;
          result = (*a3)(v14, v15);
          if ((_DWORD)result)
          {
            v16 = *v13;
            v17 = v12;
            while (1)
            {
              *(uint64_t *)((char *)v8 + v17 + 8) = *(uint64_t *)((char *)v8 + v17);
              if (!v17)
                break;
              result = (*a3)(v16, *(uint64_t *)((char *)v8 + v17 - 8));
              v17 -= 8;
              if ((result & 1) == 0)
              {
                v18 = (uint64_t *)((char *)v8 + v17 + 8);
                goto LABEL_15;
              }
            }
            v18 = v8;
LABEL_15:
            *v18 = v16;
          }
          v11 = v13 + 1;
          v12 += 8;
        }
        while (v13 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t *std::__stable_sort_move<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(uint64_t *result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (a4)
  {
    v5 = a5;
    v7 = result;
    if (a4 == 1)
    {
LABEL_9:
      *v5 = *v7;
      return result;
    }
    if (a4 == 2)
    {
      v10 = a2 - 1;
      result = (uint64_t *)(*a3)(*(a2 - 1), *result);
      if ((_DWORD)result)
        v11 = v10;
      else
        v11 = v7;
      *v5++ = *v11;
      if (!(_DWORD)result)
        v7 = v10;
      goto LABEL_9;
    }
    if ((uint64_t)a4 > 8)
    {
      v20 = &result[a4 >> 1];
      std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(result, v20, a3, a4 >> 1, a5, a4 >> 1);
      result = (uint64_t *)std::__stable_sort<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
      v21 = &v7[a4 >> 1];
      while (v21 != a2)
      {
        result = (uint64_t *)(*a3)(*v21, *v7);
        if ((_DWORD)result)
          v22 = v21;
        else
          v22 = v7;
        v21 += result;
        v7 += result ^ 1;
        *v5++ = *v22;
        if (v7 == v20)
        {
          if (v21 != a2)
          {
            v23 = 0;
            do
            {
              v5[v23] = v21[v23];
              ++v23;
            }
            while (&v21[v23] != a2);
          }
          return result;
        }
      }
      if (v7 != v20)
      {
        v24 = 0;
        do
        {
          v5[v24] = v7[v24];
          ++v24;
        }
        while (&v7[v24] != v20);
      }
    }
    else if (result != a2)
    {
      v12 = result + 1;
      *a5 = *result;
      if (result + 1 != a2)
      {
        v13 = 0;
        v14 = a5;
        do
        {
          v15 = v14;
          v16 = *v14++;
          result = (uint64_t *)(*a3)(*v12, v16);
          v17 = v14;
          if ((_DWORD)result)
          {
            v15[1] = *v15;
            v17 = v5;
            if (v15 != v5)
            {
              v18 = v13;
              while (1)
              {
                v17 = (uint64_t *)((char *)v5 + v18);
                result = (uint64_t *)(*a3)(*v12, *(uint64_t *)((char *)v5 + v18 - 8));
                if (!(_DWORD)result)
                  break;
                *v17 = *(v17 - 1);
                v18 -= 8;
                if (!v18)
                {
                  v17 = v5;
                  break;
                }
              }
            }
          }
          v19 = *v12++;
          *v17 = v19;
          v13 += 8;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(uint64_t result, char *a2, char *a3, uint64_t (**a4)(_QWORD, _QWORD), uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  uint64_t v10;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unsigned int (**v22)(_QWORD, uint64_t);
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t (*v29)(uint64_t, _QWORD);
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (**v91)(_QWORD, _QWORD);

  if (a6)
  {
    v10 = a6;
    v14 = (char *)result;
    while (a5 > a8 && v10 > a8)
    {
      if (!a5)
        return result;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        result = (*a4)(*(_QWORD *)a2, *(_QWORD *)&v14[8 * v16]);
        if ((result & 1) != 0)
          break;
        ++v16;
        v15 -= 8;
        if (a5 == v16)
          return result;
      }
      result = (uint64_t)&v14[-v15];
      v91 = a4;
      if (a5 - v16 >= v10)
      {
        if (a5 - 1 == v16)
        {
          v78 = *(_QWORD *)&v14[8 * v16];
          *(_QWORD *)&v14[8 * v16] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v78;
          return result;
        }
        v27 = (a5 - v16) / 2;
        v28 = &v14[8 * v27];
        if (a3 == a2)
        {
          v35 = a3;
          v19 = a3;
        }
        else
        {
          v84 = &v14[-v15];
          v88 = v10;
          v82 = a7;
          v29 = *v91;
          v30 = (a3 - a2) >> 3;
          v19 = a2;
          do
          {
            v31 = &v19[8 * (v30 >> 1)];
            v33 = *(_QWORD *)v31;
            v32 = v31 + 8;
            v34 = v29(v33, *(_QWORD *)&v28[8 * v16]);
            if (v34)
              v30 += ~(v30 >> 1);
            else
              v30 >>= 1;
            if (v34)
              v19 = v32;
          }
          while (v30);
          v35 = a2;
          a7 = v82;
          result = (uint64_t)v84;
          v10 = v88;
          v27 = (a5 - v16) / 2;
        }
        v21 = &v28[-v15];
        v18 = (v19 - v35) >> 3;
      }
      else
      {
        if (v10 >= 0)
          v17 = v10;
        else
          v17 = v10 + 1;
        v18 = v17 >> 1;
        v19 = &a2[8 * (v17 >> 1)];
        if ((char *)result == a2)
        {
          v21 = a2;
          v26 = a2;
        }
        else
        {
          v80 = v17 >> 1;
          v81 = a8;
          v83 = &v14[-v15];
          v87 = v10;
          v20 = (a2 - v14 + v15) >> 3;
          v21 = &v14[-v15];
          v22 = (unsigned int (**)(_QWORD, uint64_t))a4;
          do
          {
            v23 = &v21[8 * (v20 >> 1)];
            v25 = *(_QWORD *)v23;
            v24 = v23 + 8;
            if ((*v22)(*(_QWORD *)v19, v25))
            {
              v20 >>= 1;
            }
            else
            {
              v21 = v24;
              v20 += ~(v20 >> 1);
            }
          }
          while (v20);
          result = (uint64_t)v83;
          v26 = v83;
          v18 = v80;
          a8 = v81;
          v10 = v87;
        }
        v27 = (v21 - v26) >> 3;
      }
      v36 = v19;
      if (v21 != a2)
      {
        v36 = v21;
        if (a2 != v19)
        {
          if (v21 + 8 == a2)
          {
            v85 = *(_QWORD *)v21;
            v89 = v10;
            v43 = v19 - a2;
            v44 = result;
            v45 = a2;
            v46 = v19 - a2;
            v47 = v18;
            v48 = v27;
            memmove(v21, v45, v46);
            v27 = v48;
            v18 = v47;
            result = v44;
            v36 = &v21[v43];
            v10 = v89;
            *(_QWORD *)&v21[v43] = v85;
          }
          else if (a2 + 8 == v19)
          {
            v90 = v10;
            v49 = *((_QWORD *)v19 - 1);
            v36 = v21 + 8;
            if (v19 - 8 != v21)
            {
              v86 = result;
              v50 = v18;
              v51 = v27;
              memmove(v21 + 8, v21, v19 - 8 - v21);
              v27 = v51;
              v18 = v50;
              result = v86;
            }
            *(_QWORD *)v21 = v49;
            v10 = v90;
          }
          else
          {
            v37 = (a2 - v21) >> 3;
            if (v37 == (v19 - a2) >> 3)
            {
              v38 = 0;
              do
              {
                v39 = *(_QWORD *)&v21[v38];
                *(_QWORD *)&v21[v38] = *(_QWORD *)&a2[v38];
                v40 = (uint64_t)&v21[v38 + 8];
                *(_QWORD *)&a2[v38] = v39;
                v41 = (uint64_t)&a2[v38 + 8];
                v38 += 8;
              }
              while ((char *)v40 != a2 && v41 != (_QWORD)v19);
              v36 = a2;
            }
            else
            {
              v52 = (v19 - a2) >> 3;
              v53 = (a2 - v21) >> 3;
              do
              {
                v54 = v53;
                v53 = v52;
                v52 = v54 % v52;
              }
              while (v52);
              if (v53)
              {
                v55 = &v21[8 * v53];
                do
                {
                  v57 = *((_QWORD *)v55 - 1);
                  v55 -= 8;
                  v56 = v57;
                  v58 = &v55[8 * v37];
                  v59 = v55;
                  do
                  {
                    v60 = v59;
                    v59 = v58;
                    *(_QWORD *)v60 = *(_QWORD *)v58;
                    v61 = __OFSUB__(v37, (v19 - v58) >> 3);
                    v63 = v37 - ((v19 - v58) >> 3);
                    v62 = (v63 < 0) ^ v61;
                    v58 = &v21[8 * v63];
                    if (v62)
                      v58 = &v59[8 * v37];
                  }
                  while (v58 != v55);
                  *(_QWORD *)v59 = v56;
                }
                while (v55 != v21);
              }
              v36 = &v21[8 * ((v19 - a2) >> 3)];
            }
          }
        }
      }
      v64 = a5 - v27 - v16;
      v65 = v10 - v18;
      if (v27 + v18 >= v10 + a5 - (v27 + v18) - v16)
      {
        v67 = result;
        v68 = v27;
        v69 = v64;
        v70 = v18;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(v36, v19, a3, v91, v69, v65, a7, a8);
        v66 = (char *)v67;
        v19 = v21;
        v65 = v70;
        v64 = v68;
        a3 = v36;
      }
      else
      {
        result = std::__inplace_merge<std::_ClassicAlgPolicy,BOOL (*&)(WebCore::StyleRulePage const*,WebCore::StyleRulePage const*),WebCore::StyleRulePage**>(result, v21, v36, v91, v27, v18, a7, a8);
        v66 = v36;
      }
      a5 = v64;
      v10 = v65;
      v14 = v66;
      a2 = v19;
      a4 = v91;
      if (!v65)
        return result;
    }
    if (a5 <= v10)
    {
      if (v14 != a2)
      {
        v75 = 0;
        do
        {
          *(_QWORD *)&a7[v75] = *(_QWORD *)&v14[v75];
          v75 += 8;
        }
        while (&v14[v75] != a2);
        if (v75)
        {
          v76 = a7;
          while (a2 != a3)
          {
            result = (*a4)(*(_QWORD *)a2, *(_QWORD *)v76);
            if ((_DWORD)result)
              v77 = a2;
            else
              v77 = v76;
            v76 += 8 * (result ^ 1);
            a2 += 8 * result;
            *(_QWORD *)v14 = *(_QWORD *)v77;
            v14 += 8;
            if (&a7[v75] == v76)
              return result;
          }
          return (uint64_t)memmove(v14, v76, a7 - v76 + v75);
        }
      }
    }
    else if (a2 != a3)
    {
      v71 = 0;
      do
      {
        *(_QWORD *)&a7[v71] = *(_QWORD *)&a2[v71];
        v71 += 8;
      }
      while (&a2[v71] != a3);
      if (v71)
      {
        v72 = &a7[v71];
        v73 = a3 - 8;
        while (a2 != v14)
        {
          result = (*a4)(*((_QWORD *)v72 - 1), *((_QWORD *)a2 - 1));
          if ((_DWORD)result)
            v74 = a2;
          else
            v74 = v72;
          if ((_DWORD)result)
            a2 -= 8;
          else
            v72 -= 8;
          *(_QWORD *)v73 = *((_QWORD *)v74 - 1);
          v73 -= 8;
          if (v72 == a7)
            return result;
        }
        v79 = 0;
        do
        {
          *(_QWORD *)&v73[v79] = *(_QWORD *)&v72[v79 - 8];
          v79 -= 8;
        }
        while (&v72[v79] != a7);
      }
    }
  }
  return result;
}

unint64_t WebCore::Style::PropertyCascade::buildCascade(WebCore::Style::PropertyCascade *this, __n128 a2, __n128 a3)
{
  char v3;
  unsigned __int16 *v5;
  uint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  WebCore::Style::PropertyCascade *v25;

  v5 = (unsigned __int16 *)((char *)this + 15220);
  if (!*((_BYTE *)this + 9))
    goto LABEL_24;
  v6 = *(unsigned int *)(*(_QWORD *)this + 20);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = *(uint64_t **)(*(_QWORD *)this + 8);
    v9 = 16 * v6;
    do
    {
      v7 |= WebCore::Style::PropertyCascade::addMatch((uint64_t)this, v8, 1u, 0, a2, a3);
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
    v3 = (v7 & 1) != 0;
  }
  else
  {
    v3 = 0;
  }
  if (*((unsigned __int8 *)this + 9) >= 2u)
  {
    v10 = *(unsigned int *)(*(_QWORD *)this + 36);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(uint64_t **)(*(_QWORD *)this + 24);
      v13 = 16 * v10;
      do
      {
        v11 |= WebCore::Style::PropertyCascade::addMatch((uint64_t)this, v12, 2u, 0, a2, a3);
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
      if ((v11 & 1) != 0)
        v3 |= 2u;
    }
    if (*((unsigned __int8 *)this + 9) >= 4u)
    {
      v14 = *(unsigned int *)(*(_QWORD *)this + 52);
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = *(uint64_t **)(*(_QWORD *)this + 40);
        v17 = 16 * v14;
        do
        {
          v15 |= WebCore::Style::PropertyCascade::addMatch((uint64_t)this, v16, 4u, 0, a2, a3);
          v16 += 2;
          v17 -= 16;
        }
        while (v17);
        if ((v15 & 1) != 0)
          goto LABEL_35;
      }
    }
  }
  while (1)
  {
    if ((v3 & 4) != 0)
      WebCore::Style::PropertyCascade::addImportantMatches(this, (void *)4, a2, a3);
    if ((v3 & 2) != 0)
      WebCore::Style::PropertyCascade::addImportantMatches(this, (void *)2, a2, a3);
    if ((v3 & 1) != 0)
      WebCore::Style::PropertyCascade::addImportantMatches(this, (void *)1, a2, a3);
LABEL_24:
    v18 = v5[110];
    v19 = v5[111];
    v20 = v5;
    if (v18 > v19)
      break;
    v20 = v5;
    while (1)
    {
      v21 = (unsigned __int16)v18 - 351;
      if (v21 >= 0x6C)
        break;
      if (*((_DWORD *)this + v21 + 3696))
      {
        *v20++ = v18;
        LOWORD(v19) = v5[111];
      }
      LOWORD(v18) = v18 + 1;
      if ((unsigned __int16)v18 > (unsigned __int16)v19)
        goto LABEL_30;
    }
    __break(1u);
LABEL_35:
    v3 |= 4u;
  }
LABEL_30:
  v22 = 126 - 2 * __clz(v20 - v5);
  *((_DWORD *)this + 3859) = (unint64_t)((char *)v20 - (char *)v5) >> 1;
  v25 = this;
  if (v20 == v5)
    v23 = 0;
  else
    v23 = v22;
  return std::__introsort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *,false>((unint64_t)v5, v20, (uint64_t *)&v25, v23, 1);
}

void WebCore::Style::PropertyCascade::~PropertyCascade(WebCore::Style::PropertyCascade *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  char v13;
  char *v14;
  char v15;

  v3 = *((_QWORD *)this + 1931);
  if (v3)
  {
    v9 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v9)
    {
      v10 = (WTF::StringImpl **)*((_QWORD *)this + 1931);
      do
      {
        v11 = *v10;
        if (*v10 != (WTF::StringImpl *)-1)
        {
          *v10 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
        }
        v10 += 5;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  if (*((_BYTE *)this + 40))
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
    {
      v5 = *(unsigned int *)(v4 - 4);
      if ((_DWORD)v5)
      {
        v6 = *((_QWORD *)this + 3);
        while (1)
        {
          v7 = *(unsigned int *)(v6 + 8);
          if ((_DWORD)v7 == -1)
            break;
          v14 = &v13;
          if ((((uint64_t (*)(char **, uint64_t))off_1E344FF58[v7])(&v14, v6) & 1) == 0)
          {
            v8 = *(unsigned int *)(v6 + 8);
            if ((_DWORD)v8 != -1)
              ((void (*)(char *, uint64_t))off_1E344FF78[v8])(&v15, v6);
            *(_DWORD *)(v6 + 8) = -1;
          }
          v6 += 16;
          if (!--v5)
            goto LABEL_13;
        }
        v12 = std::__throw_bad_variant_access[abi:sn180100]();
        WebCore::Style::PropertyCascade::addImportantMatches(v12);
      }
      else
      {
LABEL_13:
        WTF::fastFree((WTF *)(v4 - 16), a2);
      }
    }
  }
}

WTF *WebCore::Style::PropertyCascade::addImportantMatches(_QWORD *a1, void *a2, __n128 a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  unint64_t v9;
  WTF *v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char *v27;
  int v28;
  BOOL v29;
  char v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *result;
  const std::nothrow_t *v37;
  unint64_t v38;
  void *v39;
  BOOL v40;
  void *v41;
  uint64_t v42;
  int v43;
  WTF *v44;
  uint64_t v45;

  v44 = 0;
  v45 = 0;
  v4 = *a1 + 24;
  if ((_DWORD)a2 != 2)
    v4 = *a1 + 40;
  if ((_DWORD)a2 == 4)
    v4 = *a1 + 40;
  if ((_DWORD)a2 == 1)
    v5 = *a1 + 8;
  else
    v5 = v4;
  v6 = *(unsigned int *)(v5 + 12);
  if (!(_DWORD)v6)
    goto LABEL_39;
  v7 = a2;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  do
  {
    v13 = *(_QWORD *)v5;
    v14 = *(_QWORD *)(*(_QWORD *)v5 + 16 * v9);
    v15 = *(_DWORD *)(v14 + 4);
    if ((v15 & 8) != 0)
    {
      v20 = *(_DWORD *)(v14 + 28);
      if (!v20)
        goto LABEL_31;
      v21 = 0;
      v22 = 0;
      while (1)
      {
        if (v20 <= v21)
        {
          __break(0xC471u);
          JUMPOUT(0x19658EBD0);
        }
        if ((*(_WORD *)(*(_QWORD *)(v14 + 16) + 16 * v22) & 0x2000) != 0)
          break;
        v21 = v22 + 1;
        v22 = (v22 + 1);
        if (v20 <= v21)
          goto LABEL_31;
      }
    }
    else
    {
      if (v15 < 0x10)
        goto LABEL_31;
      v16 = 0;
      v17 = v15 >> 4;
      v18 = v14 + 8;
      while ((*(_WORD *)(v18 + 2 * v16) & 0x2000) == 0)
      {
        v19 = v16 + 1;
        v16 = (v16 + 1);
        if (v17 <= v19)
          goto LABEL_31;
      }
    }
    LODWORD(v42) = v9;
    v23 = v13 + 16 * v9;
    v25 = *(_BYTE *)(v23 + 10);
    v24 = v23 + 10;
    BYTE4(v42) = v25;
    HIWORD(v42) = *(_WORD *)(v24 + 2);
    LOBYTE(v43) = *(_BYTE *)(v24 + 1);
    if (v11 == (_DWORD)v45)
    {
      v26 = WTF::Vector<WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v44, v11 + 1, (unint64_t)&v42);
      v10 = v44;
      v11 = HIDWORD(v45);
      v27 = (char *)v44 + 12 * HIDWORD(v45);
      v28 = *(_DWORD *)(v26 + 8);
      *(_QWORD *)v27 = *(_QWORD *)v26;
      *((_DWORD *)v27 + 2) = v28;
    }
    else
    {
      v31 = v42;
      v32 = (char *)v10 + 12 * v11;
      *((_DWORD *)v32 + 2) = v43;
      *(_QWORD *)v32 = v31;
    }
    HIDWORD(v45) = ++v11;
    if (*(_BYTE *)v24)
      v29 = 0;
    else
      v29 = *(__int16 *)(v24 + 2) == -1;
    v30 = !v29;
    v12 |= v30;
    v6 = *(unsigned int *)(v5 + 12);
LABEL_31:
    ++v9;
  }
  while (v9 < v6);
  if (v11)
  {
    v33 = v11;
    if ((v12 & 1) != 0)
    {
      if (v11 < 0x81)
      {
LABEL_46:
        std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>((uint64_t)v10, (char *)v10 + 12 * v33, v33, 0, 0);
      }
      else
      {
        v37 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
        v38 = v11;
        while (1)
        {
          v39 = operator new(12 * v38, v37);
          if (v39)
            break;
          v40 = v38 > 1;
          v38 >>= 1;
          if (!v40)
            goto LABEL_46;
        }
        v41 = v39;
        std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>((uint64_t)v10, (char *)v10 + 12 * v33, v33, (uint64_t)v39, v38);
        operator delete(v41);
      }
      v10 = v44;
    }
    v34 = 12 * v33;
    do
    {
      v35 = *(unsigned int *)v10;
      if (*(_DWORD *)(v5 + 12) <= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x19658EBD8);
      }
      WebCore::Style::PropertyCascade::addMatch((uint64_t)a1, (uint64_t *)(*(_QWORD *)v5 + 16 * v35), v7, 1, a3, a4);
      v10 = (WTF *)((char *)v10 + 12);
      v34 -= 12;
    }
    while (v34);
  }
LABEL_39:
  result = v44;
  if (v44)
    return (WTF *)WTF::fastFree(v44, a2);
  return result;
}

uint64_t WebCore::Style::PropertyCascade::addMatch(WebCore::Style::MatchedProperties const&,WebCore::Style::CascadeLevel,BOOL)::$_0::operator()(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)result;
  if (*(_BYTE *)(*(_QWORD *)result + 11) && *(char *)(*(_QWORD *)(result + 8) + 10) > *(char *)(v1 + 10)
    || **(unsigned __int8 **)(result + 16) < *(unsigned __int8 *)(v1 + 9))
  {
    return 1;
  }
  v2 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v2 + 11))
    return 0;
  if (*(_BYTE *)(v1 + 14))
    return *(unsigned __int16 *)(v2 + 12) <= *(unsigned __int16 *)(v1 + 12);
  __break(1u);
  return result;
}

void WebCore::ComputedStyleDependencies::~ComputedStyleDependencies(WebCore::ComputedStyleDependencies *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v4, a2);
  }
}

WTF::StringImpl *WebCore::Style::makePseudoClassInvalidationKeys@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD **v10;
  uint64_t i;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  WTF::StringImpl *v31;

  v4 = (int)result;
  *(_QWORD *)a3 = a3 + 16;
  *(_QWORD *)(a3 + 8) = 4;
  v6 = *(_QWORD *)(a2 + 104);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 24)) == 0)
  {
    v7 = *MEMORY[0x1E0CBF2F8];
    if (!*MEMORY[0x1E0CBF2F8])
      goto LABEL_4;
    if (!*(_DWORD *)(v7 + 4))
    {
      v7 = 0;
LABEL_4:
      if (!v6)
        goto LABEL_15;
      goto LABEL_5;
    }
    if (v6 && *(_QWORD *)(v6 + 24))
      v7 = *(_QWORD *)(v6 + 24);
LABEL_28:
    *(_DWORD *)v7 += 2;
    *(_BYTE *)(a3 + 20) = 3;
    *(_QWORD *)(a3 + 24) = v7;
    v7 = 1;
    *(_DWORD *)(a3 + 12) = 1;
    *(_DWORD *)(a3 + 16) = (_DWORD)result;
    goto LABEL_4;
  }
  if (*(_DWORD *)(v7 + 4))
    goto LABEL_28;
  v7 = 0;
LABEL_5:
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    result = WTF::Vector<std::tuple<unsigned int,unsigned char,WTF::AtomString>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a3, v7 + *(unsigned int *)(v8 + 12));
    v9 = *(_QWORD *)(v6 + 16);
    v10 = v9 ? (_DWORD **)(v9 + 16) : 0;
    for (i = v9 ? v9 + 16 + 8 * *(unsigned int *)(v9 + 12) : 0; v10 != (_DWORD **)i; ++v10)
    {
      v12 = *v10;
      if (*v10)
        *v12 += 2;
      v13 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12);
      *(_DWORD *)v13 = v4;
      *(_BYTE *)(v13 + 4) = 2;
      *(_QWORD *)(v13 + 8) = v12;
      ++*(_DWORD *)(a3 + 12);
    }
  }
LABEL_15:
  v14 = *(_QWORD *)(a2 + 96);
  v29 = v4;
  v30 = 4;
  v15 = *(WTF::StringImpl **)(v14 + 40);
  if (v15)
    *(_DWORD *)v15 += 2;
  v31 = v15;
  v16 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v16 == *(_DWORD *)(a3 + 8))
  {
    v21 = WTF::Vector<std::tuple<unsigned int,unsigned char,WTF::AtomString>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a3, v16 + 1, (unint64_t)&v29);
    v23 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12);
    *(_DWORD *)v23 = *(_DWORD *)v21;
    *(_BYTE *)(v23 + 4) = *(_BYTE *)(v21 + 4);
    v24 = *(_QWORD *)(v21 + 8);
    *(_QWORD *)(v21 + 8) = 0;
    *(_QWORD *)(v23 + 8) = v24;
    result = v31;
    ++*(_DWORD *)(a3 + 12);
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v22);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v17 = *(_QWORD *)a3 + 16 * v16;
    *(_DWORD *)v17 = v4;
    *(_BYTE *)(v17 + 4) = 4;
    *(_QWORD *)(v17 + 8) = v15;
    ++*(_DWORD *)(a3 + 12);
  }
  v29 = v4;
  v30 = 1;
  v18 = (WTF::StringImpl *)WebCore::starAtomData;
  if (WebCore::starAtomData)
    *(_DWORD *)WebCore::starAtomData += 2;
  v31 = v18;
  v19 = *(unsigned int *)(a3 + 12);
  if ((_DWORD)v19 == *(_DWORD *)(a3 + 8))
  {
    v25 = WTF::Vector<std::tuple<unsigned int,unsigned char,WTF::AtomString>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a3, v19 + 1, (unint64_t)&v29);
    v27 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 12);
    *(_DWORD *)v27 = *(_DWORD *)v25;
    *(_BYTE *)(v27 + 4) = *(_BYTE *)(v25 + 4);
    v28 = *(_QWORD *)(v25 + 8);
    *(_QWORD *)(v25 + 8) = 0;
    *(_QWORD *)(v27 + 8) = v28;
    result = v31;
    ++*(_DWORD *)(a3 + 12);
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v20 = *(_QWORD *)a3 + 16 * v19;
    *(_DWORD *)v20 = v4;
    *(_BYTE *)(v20 + 4) = 1;
    *(_QWORD *)(v20 + 8) = v18;
    ++*(_DWORD *)(a3 + 12);
  }
  return result;
}

void WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(uint64_t *a1, WTF::StringImpl *a2, int a3, int a4)
{
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF *v23;
  _QWORD *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v60;
  int v61;
  WebCore::Style::RuleSet *v62;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v69;
  int v70;
  WTF *v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v80;
  _DWORD *v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  WebCore::Style::RuleSet **v91;
  int v92;
  WebCore::Style::RuleSet *v93;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v100;
  int v101;
  WTF *v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  WebCore::Style::RuleSet **v111;
  _DWORD *v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned __int8 *v117;
  WebCore::Style::RuleSet *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unsigned __int8 *v122;
  void *v123;
  uint64_t *v125;
  uint64_t v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  unsigned __int8 *v132;
  int v133;
  WebCore::Style::RuleSet *v134;
  unsigned __int8 *v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  unsigned int v146;
  _DWORD *v147;
  unint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned __int8 *v153;
  void *v154;
  int v155;
  int v156;
  unsigned int v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unsigned __int8 *v161;
  void *v162;
  unint64_t v163;
  _QWORD *v164;
  uint64_t *v166;
  uint64_t v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  unsigned __int8 *v173;
  int v174;
  WebCore::Style::RuleSet *v175;
  unsigned __int8 *v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  _DWORD *v185;
  uint64_t v186;
  uint64_t v187;
  const WebCore::CSSSelector *v188;
  uint64_t v189;
  unsigned __int8 *v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  uint64_t v200;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v201;
  int v202;
  WebCore::Style::RuleSet *v203;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  int v209;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v210;
  int v211;
  WTF *v212;
  uint64_t v213;
  unint64_t v214;
  int v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v221;
  _DWORD *v222;
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unsigned __int8 *v228;
  void *v229;
  uint64_t v230;
  WTF::StringImpl **v231;
  WTF::StringImpl *v232;
  uint64_t v234;
  WTF *v235;
  BOOL hasMatchingUserOrAuthorStyle;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  int v241;
  int v242;
  int v243;
  uint64_t v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  WTF *v253;
  _BOOL4 v254;
  uint64_t v255;
  _DWORD *v256;
  WTF::StringImpl *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  unint64_t v265;
  unsigned int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  WebCore::Node *v270;
  uint64_t v271;
  uint64_t v272;
  WTF *v273;
  void *v274;
  WTF *v275;
  WTF *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t (***v280)();
  uint64_t v281;
  int v282;
  uint64_t (**v283)();
  uint64_t v284;
  unsigned int v285;
  unsigned int v286;
  int v287;
  unsigned int v288;
  uint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unint64_t v307;
  int i;
  unsigned int v309;
  unsigned __int8 *v310;
  int v311;
  int v312;
  uint64_t v314;
  WTF::StringImpl *v315;
  const WebCore::CSSSelector *v316;
  uint64_t v317;
  void *v318;
  __int16 v319;
  __int16 v320;
  WebCore::Style::RuleSet *v321;
  WTF *v322;
  int v323;
  int v324;
  uint64_t v325;
  unint64_t v326;
  WebCore::Style::RuleSet **v327;
  uint64_t v328;
  uint64_t v329;
  unsigned __int8 *v330;
  uint64_t v331;
  int v332;
  void *v334;
  uint64_t v335;
  unsigned int v336;
  __int16 v337;
  uint64_t v338;
  __int128 v339;
  int v340;
  void *v342;
  uint64_t v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  int v347;
  int v348;
  WebCore::Style::Scope **v349;
  uint64_t v350;
  WTF *v351;
  void *v352;
  WTF *v353;
  _BOOL4 v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  void *v358;
  int v359;
  uint64_t v360;
  void *v361;
  int v362;
  uint64_t v363;
  void *v364;
  uint64_t v365;
  uint64_t v366;
  WebCore::Node *ElementSibling;
  WebCore::Element *v368;
  char v369;
  uint64_t v370;
  uint64_t v371;
  WTF *v372;
  WTF *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t *v381;
  WebCore::Style::Scope *v382;
  WTF *v383;
  uint64_t v384;
  uint64_t v385;
  unsigned __int8 *v386;
  const WebCore::CSSSelector *v387;
  uint64_t v388;
  _BYTE v389[24];

  v5 = a1[1];
  v6 = *(_QWORD **)(v5 + 40);
  if (*v6)
    v7 = (*(_WORD *)(*v6 + 28) & 0x80) == 0;
  else
    v7 = 1;
  if (v7)
    v294 = v6[1] + 1328;
  else
    v294 = *v6 + 216;
  v8 = *(_QWORD *)v294;
  if (!*(_QWORD *)(*(_QWORD *)v294 + 32))
  {
    if (*(_QWORD *)(v8 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v8);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v8);
    v350 = *(_QWORD *)(v8 + 32);
    if (*(_DWORD *)(v350 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v350 + 32));
    if (*(_BYTE *)(v350 + 242)
      || *(_BYTE *)(v350 + 243)
      || *(_BYTE *)(v350 + 244)
      || *(_BYTE *)(v350 + 245)
      || *(_BYTE *)(v350 + 246)
      || *(_BYTE *)(v350 + 247)
      || *(_BYTE *)(v350 + 248))
    {
      *(_BYTE *)(v8 + 236) = 1;
    }
  }
  v9 = *(_QWORD *)(v8 + 32);
  if (*(_DWORD *)(v9 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v9 + 32));
  if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_11;
  v234 = *(_QWORD *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v234)
    goto LABEL_11;
  if ((*(_WORD *)(v234 + 28) & 0x80) == 0)
    goto LABEL_11;
  if (*(_BYTE *)(v234 + 193))
    goto LABEL_11;
  v235 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v235 = off_1E344FFC8;
  v383 = v235;
  hasMatchingUserOrAuthorStyle = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v9 + 32), &v383);
  (*(void (**)(WTF *))(*(_QWORD *)v235 + 8))(v235);
  if (!hasMatchingUserOrAuthorStyle)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 824))(v5))
      goto LABEL_11;
    v353 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v353 = off_1E344FFF0;
    v383 = v353;
    v354 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v9 + 32), &v383);
    (*(void (**)(WTF *))(*(_QWORD *)v353 + 8))(v353);
    if (!v354)
      goto LABEL_11;
  }
  v237 = *(_QWORD *)(v9 + 224);
  if (v237)
  {
    v238 = *(_DWORD *)(v237 - 8);
    v239 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
    LODWORD(v240) = v238 & (((v239 ^ (v239 >> 6)) + ~((v239 ^ (v239 >> 6)) << 11)) ^ (((v239 ^ (v239 >> 6))
                                                                                     + ~((v239 ^ (v239 >> 6)) << 11)) >> 16));
    v241 = *(unsigned __int8 *)(v237 + v240);
    v11 = a4;
    if (v241 == (_DWORD)a2)
    {
      v10 = 0;
    }
    else
    {
      v242 = 1;
      do
      {
        v243 = ~(_BYTE)v241;
        v10 = v243 == 0;
        if (!v243)
          break;
        v240 = ((_DWORD)v240 + v242) & v238;
        v241 = *(unsigned __int8 *)(v237 + v240);
        ++v242;
      }
      while (v241 != (_DWORD)a2);
    }
  }
  else
  {
LABEL_11:
    v10 = 1;
    v11 = a4;
  }
  if ((*(_QWORD *)(a1[1] + 72) & 0xFFFFFFFFFFFFLL) == 0
    || !*(_QWORD *)((*(_QWORD *)(a1[1] + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
    || (v244 = *(_QWORD *)(v9 + 216)) == 0)
  {
LABEL_13:
    v12 = 0;
    goto LABEL_14;
  }
  v245 = *(_DWORD *)(v244 - 8);
  v246 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
  LODWORD(v247) = v245 & (((v246 ^ (v246 >> 6)) + ~((v246 ^ (v246 >> 6)) << 11)) ^ (((v246 ^ (v246 >> 6))
                                                                                   + ~((v246 ^ (v246 >> 6)) << 11)) >> 16));
  v248 = *(unsigned __int8 *)(v244 + v247);
  if (v248 != (_DWORD)a2)
  {
    v249 = 1;
    v12 = 1;
    while ((_BYTE)v248 != 0xFF)
    {
      v247 = ((_DWORD)v247 + v249) & v245;
      v248 = *(unsigned __int8 *)(v244 + v247);
      ++v249;
      if (v248 == (_DWORD)a2)
        goto LABEL_14;
    }
    goto LABEL_13;
  }
  v12 = 1;
LABEL_14:
  if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_15;
  v250 = *(_QWORD *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  if (!v250)
    goto LABEL_15;
  v251 = *(_QWORD *)(v250 + 216);
  if (!*(_QWORD *)(v251 + 32))
  {
    if (*(_QWORD *)(v251 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v251);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v251);
    v355 = *(_QWORD *)(v251 + 32);
    if (*(_DWORD *)(v355 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v355 + 32));
    if (*(_BYTE *)(v355 + 242)
      || *(_BYTE *)(v355 + 243)
      || *(_BYTE *)(v355 + 244)
      || *(_BYTE *)(v355 + 245)
      || *(_BYTE *)(v355 + 246)
      || *(_BYTE *)(v355 + 247)
      || *(_BYTE *)(v355 + 248))
    {
      *(_BYTE *)(v251 + 236) = 1;
    }
  }
  v252 = *(_QWORD *)(v251 + 32);
  v253 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v253 = off_1E3450018;
  v383 = v253;
  v254 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)(v252 + 32), &v383);
  (*(void (**)(WTF *))(*(_QWORD *)v253 + 8))(v253);
  if (!v254)
    goto LABEL_404;
  if (*(_DWORD *)(v252 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v252 + 32));
  if ((*(_QWORD *)(a1[1] + 72) & 0xFFFFFFFFFFFFLL) == 0)
  {
LABEL_404:
    v13 = v12;
    v11 = a4;
    goto LABEL_16;
  }
  v11 = a4;
  if (!*(_QWORD *)((*(_QWORD *)(a1[1] + 72) & 0xFFFFFFFFFFFFLL) + 0x58) || (v343 = *(_QWORD *)(v252 + 216)) == 0)
  {
LABEL_15:
    v13 = v12;
    goto LABEL_16;
  }
  v344 = *(_DWORD *)(v343 - 8);
  v345 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
  LODWORD(v346) = v344 & (((v345 ^ (v345 >> 6)) + ~((v345 ^ (v345 >> 6)) << 11)) ^ (((v345 ^ (v345 >> 6))
                                                                                   + ~((v345 ^ (v345 >> 6)) << 11)) >> 16));
  v347 = *(unsigned __int8 *)(v343 + v346);
  if (v347 != (_DWORD)a2)
  {
    v348 = 1;
    v13 = 1;
    while ((_BYTE)v347 != 0xFF)
    {
      v346 = ((_DWORD)v346 + v348) & v344;
      v347 = *(unsigned __int8 *)(v343 + v346);
      ++v348;
      if (v347 == (_DWORD)a2)
        goto LABEL_16;
    }
    goto LABEL_15;
  }
  v13 = 1;
LABEL_16:
  v383 = 0;
  v384 = 0;
  v14 = *(_QWORD *)(v5 + 32);
  if (!v14)
    goto LABEL_19;
  if ((*(_WORD *)(v14 + 28) & 8) == 0)
    goto LABEL_19;
  v15 = *(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v15)
    goto LABEL_19;
  v267 = *(_QWORD *)(v15 + 88);
  if (!v267)
    goto LABEL_19;
  v268 = *(_QWORD *)(v267 + 224);
  if (!v268)
    goto LABEL_19;
  v269 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v268 + 16))(v268, v5);
  if (!v269)
    goto LABEL_659;
  v270 = (WebCore::Node *)v269;
  do
  {
    if ((*(_WORD *)(**((_QWORD **)v270 + 5) + 28) & 0x80) != 0)
      v271 = **((_QWORD **)v270 + 5);
    else
      v271 = 0;
    v272 = HIDWORD(v384);
    if (HIDWORD(v384) == (_DWORD)v384)
    {
      WTF::Vector<WTF::Ref<WebCore::ShadowRoot,WTF::RawPtrTraits<WebCore::ShadowRoot>,WTF::DefaultRefDerefTraits<WebCore::ShadowRoot>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShadowRoot&>((uint64_t)&v383, v271);
    }
    else
    {
      v273 = v383;
      *(_DWORD *)(v271 + 24) += 2;
      *((_QWORD *)v273 + v272) = v271;
      HIDWORD(v384) = v272 + 1;
    }
    v270 = (WebCore::Node *)WebCore::Node::assignedSlot(v270);
  }
  while (v270);
  v275 = v383;
  if (!HIDWORD(v384))
    goto LABEL_657;
  v276 = (WTF *)((char *)v383 + 8 * HIDWORD(v384));
  do
  {
    v277 = v13;
    v278 = *(_QWORD *)(*(_QWORD *)v275 + 216);
    if (!*(_QWORD *)(v278 + 32))
    {
      if (*(_QWORD *)(v278 + 24))
        WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*(unsigned int **)(*(_QWORD *)v275 + 216));
      else
        WebCore::Style::Scope::createDocumentResolver(*(WebCore::Style::Scope **)(*(_QWORD *)v275 + 216));
      v365 = *(_QWORD *)(v278 + 32);
      if (*(_DWORD *)(v365 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v365 + 32));
      if (*(_BYTE *)(v365 + 242)
        || *(_BYTE *)(v365 + 243)
        || *(_BYTE *)(v365 + 244)
        || *(_BYTE *)(v365 + 245)
        || *(_BYTE *)(v365 + 246)
        || *(_BYTE *)(v365 + 247)
        || *(_BYTE *)(v365 + 248))
      {
        *(_BYTE *)(v278 + 236) = 1;
      }
    }
    v279 = *(_QWORD *)(v278 + 32);
    v280 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
    v281 = *(_QWORD *)(v279 + 32);
    *v280 = off_1E3450040;
    if (!v281 || (v282 = *(_DWORD *)(v281 + 228), v283 = off_1E3450040, !v282))
    {
      v283 = off_1E3450040;
      v292 = v279 + 32;
      if (*(_BYTE *)(v279 + 348))
      {
        v292 = v279 + 32;
        do
        {
          v382 = *(WebCore::Style::Scope **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v292 + 32) + 16) + 8) + 1328);
          if (!*((_QWORD *)v382 + 4))
          {
            if (*((_QWORD *)v382 + 3))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v382);
            else
              WebCore::Style::Scope::createDocumentResolver(v382);
            v380 = *((_QWORD *)v382 + 4);
            if (*(_DWORD *)(v380 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v380 + 32));
            if (*(_BYTE *)(v380 + 242)
              || *(_BYTE *)(v380 + 243)
              || *(_BYTE *)(v380 + 244)
              || *(_BYTE *)(v380 + 245)
              || *(_BYTE *)(v380 + 246)
              || *(_BYTE *)(v380 + 247)
              || *(_BYTE *)(v380 + 248))
            {
              *((_BYTE *)v382 + 236) = 1;
            }
          }
          v293 = *((_QWORD *)v382 + 4);
          v292 = v293 + 32;
        }
        while (*(_BYTE *)(v293 + 348));
        v283 = *v280;
      }
      if (!*(_QWORD *)(v292 + 24)
        || (v369 = ((uint64_t (*)(uint64_t (***)()))v283[2])(v280), v283 = *v280, (v369 & 1) == 0))
      {
        ((void (*)(uint64_t (***)()))v283[1])(v280);
LABEL_454:
        v13 = v277;
        goto LABEL_455;
      }
    }
    ((void (*)(uint64_t (***)()))v283[1])(v280);
    if (*(_DWORD *)(v279 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v279 + 32));
    if ((*(_QWORD *)(a1[1] + 72) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_454;
    if (!*(_QWORD *)((*(_QWORD *)(a1[1] + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
      goto LABEL_454;
    v284 = *(_QWORD *)(v279 + 216);
    if (!v284)
      goto LABEL_454;
    v285 = 9 * ((~((_DWORD)a2 << 15) + (_DWORD)a2) ^ ((~((_DWORD)a2 << 15) + (_DWORD)a2) >> 10));
    v286 = (v285 ^ (v285 >> 6)) + ~((v285 ^ (v285 >> 6)) << 11);
    v287 = v286 ^ HIWORD(v286);
    v288 = *(_DWORD *)(v284 - 8);
    LODWORD(v289) = v288 & v287;
    v290 = *(unsigned __int8 *)(v284 + v289);
    if (v290 != (_DWORD)a2)
    {
      v291 = 1;
      while ((_BYTE)v290 != 0xFF)
      {
        v289 = ((_DWORD)v289 + v291) & v288;
        v290 = *(unsigned __int8 *)(v284 + v289);
        ++v291;
        v13 = 1;
        if (v290 == (_DWORD)a2)
          goto LABEL_455;
      }
      goto LABEL_454;
    }
    v13 = 1;
LABEL_455:
    v275 = (WTF *)((char *)v275 + 8);
  }
  while (v275 != v276);
  v275 = v383;
  if (HIDWORD(v384))
  {
    v370 = 8 * HIDWORD(v384);
    do
    {
      v371 = *(_QWORD *)v275;
      *(_QWORD *)v275 = 0;
      if (v371)
      {
        if (*(_DWORD *)(v371 + 24) == 2)
        {
          if ((*(_WORD *)(v371 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v371);
        }
        else
        {
          *(_DWORD *)(v371 + 24) -= 2;
        }
      }
      v275 = (WTF *)((char *)v275 + 8);
      v370 -= 8;
    }
    while (v370);
    v275 = v383;
  }
LABEL_657:
  if (v275)
  {
    v383 = 0;
    LODWORD(v384) = 0;
    WTF::fastFree(v275, v274);
  }
LABEL_659:
  v11 = a4;
LABEL_19:
  if ((*(_BYTE *)(v5 + 22) & 0x10) != 0)
  {
    v16 = **(_QWORD **)(v5 + 40);
    if (v16 && (*(_WORD *)(v16 + 28) & 0x80) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v16 + 200) + 8);
      if ((*(_BYTE *)(v18 + 22) & 8) != 0)
      {
        v19 = *(_QWORD **)(v18 + 40);
        if (*v19)
          v20 = (*(_WORD *)(*v19 + 28) & 0x80) == 0;
        else
          v20 = 1;
        if (v20)
          v349 = (WebCore::Style::Scope **)(v19[1] + 1328);
        else
          v349 = (WebCore::Style::Scope **)(*v19 + 216);
        WebCore::Style::Scope::resolver(*v349);
      }
    }
  }
  v21 = a1[1];
  if (!v10)
  {
    WebCore::Node::invalidateStyle(a1[1], 4u, 0);
    if ((*(_BYTE *)(v21 + 71) & 1) != 0)
    {
      v366 = *(_QWORD *)(v21 + 32);
      if (!v366 || (*(_WORD *)(v366 + 28) & 8) == 0 || (*(_BYTE *)(v366 + 70) & 4) == 0)
      {
        ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v21);
        WebCore::invalidateForSiblingCombinators(ElementSibling, v368);
      }
    }
    v21 = a1[1];
  }
  if ((_DWORD)v13)
  {
    WebCore::Element::invalidateStyle((WebCore::Node *)v21);
    v21 = a1[1];
  }
  WebCore::Style::makePseudoClassInvalidationKeys(a2, v21, (uint64_t)&v383);
  v23 = v383;
  if (HIDWORD(v384))
  {
    v379 = a1 + 2;
    v381 = a1 + 3;
    v372 = (WTF *)((char *)v383 + 16 * HIDWORD(v384));
    while (1)
    {
      v24 = *(_QWORD **)(a1[1] + 40);
      if (*v24)
        v25 = (*(_WORD *)(*v24 + 28) & 0x80) == 0;
      else
        v25 = 1;
      if (v25)
        v255 = v24[1] + 1328;
      else
        v255 = *v24 + 216;
      v26 = *(_QWORD *)v255;
      if (!*(_QWORD *)(*(_QWORD *)v255 + 32))
      {
        if (*(_QWORD *)(v26 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v26);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v26);
        v295 = *(_QWORD *)(v26 + 32);
        if (*(_DWORD *)(v295 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v295 + 32));
        if (*(_BYTE *)(v295 + 242)
          || *(_BYTE *)(v295 + 243)
          || *(_BYTE *)(v295 + 244)
          || *(_BYTE *)(v295 + 245)
          || *(_BYTE *)(v295 + 246)
          || *(_BYTE *)(v295 + 247)
          || *(_BYTE *)(v295 + 248))
        {
          *(_BYTE *)(v26 + 236) = 1;
        }
      }
      v27 = *(_QWORD *)(v26 + 32);
      v28 = (uint64_t *)(v27 + 304);
      v29 = *(_QWORD *)(v27 + 304);
      if (v29
        || (WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(v27 + 304), 8u, 0), (v29 = *v28) != 0))
      {
        v30 = *(_DWORD *)(v29 - 8);
      }
      else
      {
        v30 = 0;
      }
      v31 = 0;
      v32 = *(_DWORD *)v23;
      v33 = 9 * ((v32 + ~(v32 << 15)) ^ ((v32 + ~(v32 << 15)) >> 10));
      v34 = (v33 ^ (v33 >> 6)) + ~((v33 ^ (v33 >> 6)) << 11);
      v35 = *((unsigned __int8 *)v23 + 4);
      v36 = 9 * ((~(v35 << 15) + v35) ^ ((~(v35 << 15) + v35) >> 10));
      v37 = (v36 ^ (v36 >> 6)) + ~((v36 ^ (v36 >> 6)) << 11);
      v38 = v37 ^ HIWORD(v37);
      v39 = *((_QWORD *)v23 + 1);
      v40 = (0xD7862706ELL
           * (unint64_t)(277951225 * (v34 ^ HIWORD(v34))
                              + 95187966
                              * ((0xD7862706ELL
                                              * (unint64_t)(95187966 * (*(_DWORD *)(v39 + 16) >> 8)
                                                                               + 277951225 * v38)) >> 4))) >> 4;
      v41 = 1;
      v376 = v23;
      while (1)
      {
        v42 = v40 & v30;
        v43 = v29 + 24 * v42;
        v44 = *(_DWORD *)v43;
        v45 = *(unsigned __int8 *)(v43 + 4);
        if (!(*(_DWORD *)v43 | v45))
          break;
        if (v44 == -1)
        {
          v31 = (_QWORD *)(v29 + 24 * v42);
          goto LABEL_56;
        }
LABEL_51:
        if (v44 == v32 && v45 == v35 && *(_QWORD *)(v43 + 8) == v39)
          goto LABEL_57;
LABEL_56:
        LODWORD(v40) = v41 + v42;
        ++v41;
      }
      if (*(_QWORD *)(v43 + 8))
        goto LABEL_51;
      if (v31)
      {
        *v31 = 0;
        v31[1] = 0;
        v31[2] = 0;
        --*(_DWORD *)(*v28 - 16);
        v32 = *(_DWORD *)v23;
        v43 = (uint64_t)v31;
      }
      *(_DWORD *)v43 = v32;
      *(_BYTE *)(v43 + 4) = *((_BYTE *)v23 + 4);
      v256 = (_DWORD *)*((_QWORD *)v23 + 1);
      if (v256)
        *v256 += 2;
      v257 = *(WTF::StringImpl **)(v43 + 8);
      *(_QWORD *)(v43 + 8) = v256;
      if (v257)
      {
        if (*(_DWORD *)v257 == 2)
          WTF::StringImpl::destroy(v257, v22);
        else
          *(_DWORD *)v257 -= 2;
      }
      v258 = WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>,std::tuple<unsigned int,unsigned char,WTF::AtomString>>((uint64_t *)(v27 + 168), (int *)v23);
      if (!v258)
      {
        v259 = 0;
        goto LABEL_414;
      }
      v386 = 0;
      v296 = *(unsigned int *)(v258 + 12);
      if (!(_DWORD)v296)
        goto LABEL_578;
      v297 = *(_QWORD *)v258;
      v378 = *(_QWORD *)v258 + 16 * v296;
      while (2)
      {
        v298 = *(unsigned __int8 *)(v297 + 12);
        v299 = *(unsigned __int8 *)(v297 + 13);
        v300 = (uint64_t)v386;
        if (v386
          || (WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::rehash((uint64_t *)&v386, 8u, 0), (v300 = (uint64_t)v386) != 0))
        {
          v301 = *(_DWORD *)(v300 - 8);
        }
        else
        {
          v301 = 0;
        }
        v302 = 0;
        v303 = 9 * ((~(v298 << 15) + v298) ^ ((~(v298 << 15) + v298) >> 10));
        v304 = (v303 ^ (v303 >> 6)) + ~((v303 ^ (v303 >> 6)) << 11);
        v305 = 9 * ((~(v299 << 15) + v299) ^ ((~(v299 << 15) + v299) >> 10));
        v306 = (v305 ^ (v305 >> 6)) + ~((v305 ^ (v305 >> 6)) << 11);
        v307 = (0xD7862706ELL
              * (unint64_t)(277951225 * (v304 ^ HIWORD(v304))
                                 + 95187966
                                 * ((0xD7862706ELL
                                                 * (unint64_t)(277951225 * (v306 ^ HIWORD(v306)) + 425104576)) >> 4))) >> 4;
        for (i = 1; ; ++i)
        {
          v309 = v307 & v301;
          v310 = (unsigned __int8 *)(v300 + 40 * v309);
          v311 = *v310;
          v312 = v310[1];
          if (!(v311 | v312) && !v310[2])
            break;
          if (v311 == v298 && v312 == v299 && v310[2] != 0)
            goto LABEL_494;
          if (v311 == 255)
            v302 = v300 + 40 * v309;
          LODWORD(v307) = i + v309;
        }
        if (v302)
        {
          *(_BYTE *)(v302 + 2) = 0;
          *(_WORD *)v302 = 0;
          *(_OWORD *)(v302 + 8) = 0u;
          *(_OWORD *)(v302 + 24) = 0u;
          --*((_DWORD *)v386 - 4);
          v310 = (unsigned __int8 *)v302;
        }
        *v310 = v298;
        v310[1] = v299;
        v310[2] = 1;
        v317 = WTF::fastMalloc((WTF *)0x328);
        *(_DWORD *)v317 = 1;
        *(_OWORD *)(v317 + 8) = 0u;
        *(_OWORD *)(v317 + 24) = 0u;
        *(_OWORD *)(v317 + 40) = 0u;
        *(_OWORD *)(v317 + 56) = 0u;
        *(_QWORD *)(v317 + 72) = v317 + 88;
        *(_QWORD *)(v317 + 80) = 1;
        *(_QWORD *)(v317 + 120) = v317 + 136;
        *(_QWORD *)(v317 + 128) = 1;
        *(_QWORD *)(v317 + 168) = v317 + 184;
        *(_QWORD *)(v317 + 176) = 1;
        *(_QWORD *)(v317 + 216) = v317 + 232;
        *(_QWORD *)(v317 + 224) = 1;
        *(_QWORD *)(v317 + 264) = v317 + 280;
        *(_QWORD *)(v317 + 272) = 1;
        *(_QWORD *)(v317 + 312) = v317 + 328;
        *(_QWORD *)(v317 + 320) = 1;
        *(_QWORD *)(v317 + 360) = v317 + 376;
        *(_QWORD *)(v317 + 368) = 1;
        *(_QWORD *)(v317 + 408) = v317 + 424;
        *(_QWORD *)(v317 + 416) = 1;
        *(_QWORD *)(v317 + 645) = 0;
        *(_OWORD *)(v317 + 616) = 0u;
        *(_OWORD *)(v317 + 632) = 0u;
        *(_OWORD *)(v317 + 584) = 0u;
        *(_OWORD *)(v317 + 600) = 0u;
        *(_OWORD *)(v317 + 552) = 0u;
        *(_OWORD *)(v317 + 568) = 0u;
        *(_OWORD *)(v317 + 520) = 0u;
        *(_OWORD *)(v317 + 536) = 0u;
        *(_OWORD *)(v317 + 488) = 0u;
        *(_OWORD *)(v317 + 504) = 0u;
        *(_OWORD *)(v317 + 456) = 0u;
        *(_OWORD *)(v317 + 472) = 0u;
        *(_QWORD *)(v317 + 672) = 0;
        *(_DWORD *)(v317 + 680) = 0;
        *(_OWORD *)(v317 + 656) = 0u;
        *(_OWORD *)(v317 + 688) = 0u;
        *(_OWORD *)(v317 + 704) = 0u;
        *(_OWORD *)(v317 + 720) = 0u;
        *(_OWORD *)(v317 + 736) = 0u;
        *(_OWORD *)(v317 + 752) = 0u;
        *(_OWORD *)(v317 + 768) = 0u;
        *(_OWORD *)(v317 + 784) = 0u;
        *(_WORD *)(v317 + 800) = 0;
        v319 = *(unsigned __int8 *)(v297 + 12);
        v320 = *(unsigned __int8 *)(v297 + 13);
        v321 = (WebCore::Style::RuleSet *)*((_QWORD *)v310 + 1);
        *((_QWORD *)v310 + 1) = v317;
        if (v321)
        {
          if (*(_DWORD *)v321 == 1)
          {
            WebCore::Style::RuleSet::~RuleSet(v321, v318);
            WTF::fastFree(v351, v352);
          }
          else
          {
            --*(_DWORD *)v321;
          }
        }
        v322 = (WTF *)*((_QWORD *)v310 + 2);
        if (v322)
        {
          *((_QWORD *)v310 + 2) = 0;
          *((_DWORD *)v310 + 6) = 0;
          WTF::fastFree(v322, v318);
        }
        *((_QWORD *)v310 + 2) = 0;
        *((_QWORD *)v310 + 3) = 0;
        *((_WORD *)v310 + 16) = v319 | (v320 << 8);
        v323 = v386 ? *((_DWORD *)v386 - 3) + 1 : 1;
        v11 = a4;
        v23 = v376;
        *((_DWORD *)v386 - 3) = v323;
        v324 = v386 ? *((_DWORD *)v386 - 3) : 0;
        v325 = (*((_DWORD *)v386 - 4) + v324);
        v326 = *((unsigned int *)v386 - 1);
        if (v326 > 0x400)
        {
          if (v326 <= 2 * v325)
            goto LABEL_522;
        }
        else if (3 * v326 <= 4 * v325)
        {
LABEL_522:
          v310 = WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::expand((uint64_t *)&v386, v310);
        }
LABEL_494:
        v314 = *((_QWORD *)v310 + 1);
        WebCore::Style::RuleData::RuleData(&v387, *(const WebCore::CSSSelector **)v297, *(_WORD *)(v297 + 8), *(unsigned __int16 *)(v297 + 10), *(_DWORD *)(v314 + 680), 0);
        WebCore::Style::RuleSet::addRule(v314, &v387, 0, 0, 0);
        v316 = v387;
        v387 = 0;
        if (v316)
        {
          if (*(_DWORD *)v316 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v316, v315);
          else
            --*(_DWORD *)v316;
        }
        v297 += 16;
        if (v297 != v378)
          continue;
        break;
      }
      v327 = (WebCore::Style::RuleSet **)v386;
      if (!v386)
      {
        v335 = 0;
        v336 = 0;
        goto LABEL_553;
      }
      v328 = *((unsigned int *)v386 - 3);
      if (!(_DWORD)v328)
      {
LABEL_578:
        v335 = 0;
        LODWORD(v327) = 0;
        v336 = 0;
        goto LABEL_553;
      }
      v329 = *((unsigned int *)v386 - 1);
      v330 = &v386[40 * v329];
      if ((_DWORD)v329)
      {
        v331 = 40 * v329;
        while (1)
        {
          v332 = *(unsigned __int8 *)v327;
          if (v332 != 255 && (v332 | *((unsigned __int8 *)v327 + 1) | *((unsigned __int8 *)v327 + 2)) != 0)
            break;
          v327 += 5;
          v331 -= 40;
          if (!v331)
          {
            v327 = (WebCore::Style::RuleSet **)v330;
            break;
          }
        }
      }
      if (v328 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x196592264);
      }
      v335 = WTF::fastMalloc((WTF *)(32 * v328));
      if (v330 == (unsigned __int8 *)v327)
      {
        LODWORD(v327) = v328;
        v336 = 0;
      }
      else
      {
        v336 = 0;
LABEL_544:
        WebCore::Style::RuleSet::shrinkToFit(v327[1], v334);
        v337 = *((_WORD *)v327 + 16);
        v338 = v335 + 32 * v336;
        v339 = *(_OWORD *)(v327 + 1);
        v327[1] = 0;
        v327[2] = 0;
        *(_OWORD *)v338 = v339;
        *(_QWORD *)&v339 = v327[3];
        v327[3] = 0;
        *(_QWORD *)(v338 + 16) = v339;
        *(_WORD *)(v338 + 24) = v337;
        ++v336;
        while (1)
        {
          v327 += 5;
          if (v327 == (WebCore::Style::RuleSet **)v330)
            break;
          v340 = *(unsigned __int8 *)v327;
          if (v340 != 255 && (v340 | *((unsigned __int8 *)v327 + 1) | *((unsigned __int8 *)v327 + 2)) != 0)
          {
            if (v327 != (WebCore::Style::RuleSet **)v330)
              goto LABEL_544;
            break;
          }
        }
        LODWORD(v327) = v328;
      }
LABEL_553:
      v259 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v259 = v335;
      *(_DWORD *)(v259 + 8) = (_DWORD)v327;
      *(_DWORD *)(v259 + 12) = v336;
      WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::~HashTable((uint64_t *)&v386, v342);
LABEL_414:
      v22 = *(WTF::StringImpl **)(v43 + 16);
      *(_QWORD *)(v43 + 16) = v259;
      if (v22)
        std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v43 + 16, v22);
      v260 = *v28;
      if (*v28)
        v261 = *(_DWORD *)(v260 - 12) + 1;
      else
        v261 = 1;
      *(_DWORD *)(v260 - 12) = v261;
      v262 = *v28;
      if (*v28)
        v263 = *(_DWORD *)(v262 - 12);
      else
        v263 = 0;
      v264 = (*(_DWORD *)(v262 - 16) + v263);
      v265 = *(unsigned int *)(v262 - 4);
      if (v265 > 0x400)
      {
        if (v265 <= 2 * v264)
          goto LABEL_524;
      }
      else if (3 * v265 <= 4 * v264)
      {
        if (!(_DWORD)v265)
        {
          v266 = 8;
          goto LABEL_424;
        }
LABEL_524:
        v266 = (_DWORD)v265 << (6 * *(_DWORD *)(v262 - 12) >= (2 * v265));
LABEL_424:
        v43 = WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(v28, v266, (int *)v43);
      }
LABEL_57:
      v47 = *(uint64_t **)(v43 + 16);
      if (v47)
      {
        v48 = *((unsigned int *)v47 + 3);
        if ((_DWORD)v48)
        {
          v49 = *v47;
          v377 = *v47 + 32 * v48;
          if (a3 == 2)
          {
            while (1)
            {
              v52 = *(_BYTE *)(v49 + 24) == 2 && *((_BYTE *)v23 + 4) == 1;
              if (v11 == 2)
              {
                if (v52)
                  goto LABEL_75;
              }
              else if (v11 != 1 || !v52)
              {
LABEL_75:
                v53 = *v379;
                if (*v379)
                  goto LABEL_77;
                v54 = WTF::fastMalloc((WTF *)0x110);
                *(_BYTE *)(v54 + 16) = -1;
                v54 += 16;
                *(_QWORD *)(v54 + 8) = v54 + 24;
                *(_QWORD *)(v54 + 16) = 1;
                *(_BYTE *)(v54 + 32) = -1;
                *(_QWORD *)(v54 + 40) = v54 + 56;
                *(_QWORD *)(v54 + 48) = 1;
                *(_BYTE *)(v54 + 64) = -1;
                *(_QWORD *)(v54 + 72) = v54 + 88;
                *(_QWORD *)(v54 + 80) = 1;
                *(_BYTE *)(v54 + 96) = -1;
                *(_QWORD *)(v54 + 104) = v54 + 120;
                *(_QWORD *)(v54 + 112) = 1;
                *(_BYTE *)(v54 + 128) = -1;
                *(_QWORD *)(v54 + 136) = v54 + 152;
                *(_QWORD *)(v54 + 144) = 1;
                *(_BYTE *)(v54 + 160) = -1;
                *(_QWORD *)(v54 + 168) = v54 + 184;
                *(_QWORD *)(v54 + 176) = 1;
                *(_BYTE *)(v54 + 192) = -1;
                *(_QWORD *)(v54 + 200) = v54 + 216;
                *(_QWORD *)(v54 + 208) = 1;
                *(_BYTE *)(v54 + 224) = -1;
                *(_QWORD *)(v54 + 232) = v54 + 248;
                *(_QWORD *)(v54 + 240) = 1;
                *v379 = v54;
                *(_DWORD *)(v54 - 4) = 8;
                *(_DWORD *)(*v379 - 8) = 7;
                *(_DWORD *)(*v379 - 16) = 0;
                *(_DWORD *)(*v379 - 12) = 0;
                v53 = *v379;
                if (*v379)
LABEL_77:
                  v55 = *(_DWORD *)(v53 - 8);
                else
                  v55 = 0;
                v56 = *(unsigned __int8 *)(v49 + 24);
                v57 = 9 * ((~(v56 << 15) + v56) ^ ((~(v56 << 15) + v56) >> 10));
                v58 = (v57 ^ (v57 >> 6)) + ~((v57 ^ (v57 >> 6)) << 11);
                v59 = (v58 ^ HIWORD(v58)) & v55;
                v60 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)(v53 + 32 * v59);
                v61 = *(unsigned __int8 *)v60;
                if (v61 == 255)
                {
LABEL_79:
                  v62 = (WebCore::Style::RuleSet *)*((_QWORD *)v60 + 1);
                  v63 = v60;
LABEL_80:
                  *(_BYTE *)v63 = v56;
                  v387 = (const WebCore::CSSSelector *)v389;
                  v388 = 1;
                  v64 = *((unsigned int *)v63 + 5);
                  if ((_DWORD)v64)
                  {
                    WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>::destruct(v62, (char *)v62 + 8 * v64);
                    v62 = (WebCore::Style::RuleSet *)*((_QWORD *)v63 + 1);
                  }
                  if (v62 != (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v63 + 24))
                  {
                    if (v62)
                    {
                      *((_QWORD *)v63 + 1) = 0;
                      *((_DWORD *)v63 + 4) = 0;
                      WTF::fastFree(v62, v22);
                    }
                    *((_QWORD *)v63 + 1) = (char *)v63 + 24;
                    v11 = a4;
                    v23 = v376;
                  }
                  if (v387 == (const WebCore::CSSSelector *)v389)
                  {
                    v65 = HIDWORD(v388);
                    memcpy((char *)v63 + 24, v389, 8 * HIDWORD(v388));
                    v66 = v388;
                  }
                  else
                  {
                    *((_QWORD *)v63 + 1) = v387;
                    v66 = v388;
                    v65 = HIDWORD(v388);
                  }
                  *((_DWORD *)v63 + 4) = v66;
                  *((_DWORD *)v63 + 5) = v65;
                  v67 = *v379;
                  if (*v379)
                    v68 = *(_DWORD *)(v67 - 12) + 1;
                  else
                    v68 = 1;
                  *(_DWORD *)(v67 - 12) = v68;
                  v69 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)*v379;
                  if (*v379)
                    v70 = *((_DWORD *)v69 - 3);
                  else
                    v70 = 0;
                  v71 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v69 - 16);
                  v72 = (*((_DWORD *)v69 - 4) + v70);
                  v73 = *((unsigned int *)v69 - 1);
                  if (v73 > 0x400)
                  {
                    if (v73 <= 2 * v72)
                      goto LABEL_161;
LABEL_91:
                    v60 = v63;
                  }
                  else
                  {
                    if (3 * v73 > 4 * v72)
                      goto LABEL_91;
                    if (!(_DWORD)v73)
                    {
                      v75 = *((_DWORD *)v69 - 3);
                      v76 = 8;
                      goto LABEL_101;
                    }
LABEL_161:
                    v75 = *((_DWORD *)v69 - 3);
                    v76 = (_DWORD)v73 << (6 * v75 >= (2 * v73));
LABEL_101:
                    v77 = v76;
                    v78 = WTF::fastMalloc((WTF *)((32 * v76) | 0x10));
                    if (v76)
                    {
                      v79 = v78 + 40;
                      do
                      {
                        *(_BYTE *)(v79 - 24) = -1;
                        *(_QWORD *)(v79 - 16) = v79;
                        *(_QWORD *)(v79 - 8) = 1;
                        v79 += 32;
                        --v77;
                      }
                      while (v77);
                    }
                    *v379 = v78 + 16;
                    *(_DWORD *)(v78 + 12) = v76;
                    *(_DWORD *)(*v379 - 8) = v76 - 1;
                    *(_DWORD *)(*v379 - 16) = 0;
                    *(_DWORD *)(*v379 - 12) = v75;
                    v80 = 0;
                    if ((_DWORD)v73)
                    {
                      do
                      {
                        v356 = *(unsigned __int8 *)v69;
                        if (v356 != 254)
                        {
                          if (v356 == 255)
                          {
                            WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v69, v22);
                          }
                          else
                          {
                            v357 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::reinsert(v379, (uint64_t)v69);
                            WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v69, v358);
                            if (v69 == v63)
                              v80 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)v357;
                          }
                        }
                        v69 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v69 + 32);
                        --v73;
                        v11 = a4;
                        v23 = v376;
                      }
                      while (v73);
                    }
                    else
                    {
                      v60 = 0;
                      v11 = a4;
                      v23 = v376;
                      if (!v69)
                        goto LABEL_106;
                    }
                    WTF::fastFree(v71, v22);
                    v60 = v80;
                  }
                }
                else
                {
                  v63 = 0;
                  v74 = 1;
                  while (v61 != v56)
                  {
                    if (v61 == 254)
                      v63 = v60;
                    v59 = ((_DWORD)v59 + v74) & v55;
                    v60 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)(v53 + 32 * v59);
                    v61 = *(unsigned __int8 *)v60;
                    ++v74;
                    if (v61 == 255)
                    {
                      if (!v63)
                        goto LABEL_79;
                      *(_BYTE *)v63 = -1;
                      v62 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v63 + 24);
                      *((_QWORD *)v63 + 1) = (char *)v63 + 24;
                      *((_QWORD *)v63 + 2) = 1;
                      --*(_DWORD *)(*v379 - 16);
                      LOBYTE(v56) = *(_BYTE *)(v49 + 24);
                      goto LABEL_80;
                    }
                  }
                }
LABEL_106:
                v81 = *(_DWORD **)v49;
                if (*(_QWORD *)v49)
                  ++*v81;
                v82 = *((unsigned int *)v60 + 5);
                if ((_DWORD)v82 == *((_DWORD *)v60 + 4))
                {
                  v119 = v82 + (v82 >> 2);
                  if (v119 >= 0x10)
                    v120 = v119 + 1;
                  else
                    v120 = 16;
                  if (v120 <= v82 + 1)
                    v121 = v82 + 1;
                  else
                    v121 = v120;
                  v122 = (unsigned __int8 *)*((_QWORD *)v60 + 1);
                  if (v121 < 2)
                  {
                    v123 = (char *)v60 + 24;
                    *((_QWORD *)v60 + 1) = (char *)v60 + 24;
                    *((_DWORD *)v60 + 4) = 1;
                  }
                  else
                  {
                    if (v121 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1965921ACLL);
                    }
                    v123 = (void *)WTF::fastMalloc((WTF *)(8 * v121));
                    *((_DWORD *)v60 + 4) = v121;
                    *((_QWORD *)v60 + 1) = v123;
                  }
                  memcpy(v123, v122, 8 * v82);
                  v23 = v376;
                  if ((unsigned __int8 *)((char *)v60 + 24) != v122 && v122)
                  {
                    if (*((unsigned __int8 **)v60 + 1) == v122)
                    {
                      *((_QWORD *)v60 + 1) = 0;
                      *((_DWORD *)v60 + 4) = 0;
                    }
                    WTF::fastFree((WTF *)v122, v22);
                  }
                  v82 = *((unsigned int *)v60 + 5);
                  v83 = (_QWORD *)(*((_QWORD *)v60 + 1) + 8 * v82);
                }
                else
                {
                  v83 = (_QWORD *)(*((_QWORD *)v60 + 1) + 8 * v82);
                }
                *v83 = v81;
                *((_DWORD *)v60 + 5) = v82 + 1;
                v84 = *v381;
                if (*v381)
                  goto LABEL_112;
                v85 = WTF::fastMalloc((WTF *)0x110);
                *(_BYTE *)(v85 + 16) = -1;
                v85 += 16;
                *(_QWORD *)(v85 + 8) = v85 + 24;
                *(_QWORD *)(v85 + 16) = 1;
                *(_BYTE *)(v85 + 32) = -1;
                *(_QWORD *)(v85 + 40) = v85 + 56;
                *(_QWORD *)(v85 + 48) = 1;
                *(_BYTE *)(v85 + 64) = -1;
                *(_QWORD *)(v85 + 72) = v85 + 88;
                *(_QWORD *)(v85 + 80) = 1;
                *(_BYTE *)(v85 + 96) = -1;
                *(_QWORD *)(v85 + 104) = v85 + 120;
                *(_QWORD *)(v85 + 112) = 1;
                *(_BYTE *)(v85 + 128) = -1;
                *(_QWORD *)(v85 + 136) = v85 + 152;
                *(_QWORD *)(v85 + 144) = 1;
                *(_BYTE *)(v85 + 160) = -1;
                *(_QWORD *)(v85 + 168) = v85 + 184;
                *(_QWORD *)(v85 + 176) = 1;
                *(_BYTE *)(v85 + 192) = -1;
                *(_QWORD *)(v85 + 200) = v85 + 216;
                *(_QWORD *)(v85 + 208) = 1;
                *(_BYTE *)(v85 + 224) = -1;
                *(_QWORD *)(v85 + 232) = v85 + 248;
                *(_QWORD *)(v85 + 240) = 1;
                *v381 = v85;
                *(_DWORD *)(v85 - 4) = 8;
                *(_DWORD *)(*v381 - 8) = 7;
                *(_DWORD *)(*v381 - 16) = 0;
                *(_DWORD *)(*v381 - 12) = 0;
                v84 = *v381;
                if (*v381)
LABEL_112:
                  v86 = *(_DWORD *)(v84 - 8);
                else
                  v86 = 0;
                v87 = *(unsigned __int8 *)(v49 + 24);
                v88 = 9 * ((~(v87 << 15) + v87) ^ ((~(v87 << 15) + v87) >> 10));
                v89 = (v88 ^ (v88 >> 6)) + ~((v88 ^ (v88 >> 6)) << 11);
                v90 = (v89 ^ HIWORD(v89)) & v86;
                v91 = (WebCore::Style::RuleSet **)(v84 + 32 * v90);
                v92 = *(unsigned __int8 *)v91;
                if (v92 != 255)
                {
                  v94 = 0;
                  v105 = 1;
                  while (v92 != v87)
                  {
                    if (v92 == 254)
                      v94 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)v91;
                    v90 = ((_DWORD)v90 + v105) & v86;
                    v91 = (WebCore::Style::RuleSet **)(v84 + 32 * v90);
                    v92 = *(unsigned __int8 *)v91;
                    ++v105;
                    if (v92 == 255)
                    {
                      if (!v94)
                        goto LABEL_114;
                      *(_BYTE *)v94 = -1;
                      v93 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v94 + 24);
                      *((_QWORD *)v94 + 1) = (char *)v94 + 24;
                      *((_QWORD *)v94 + 2) = 1;
                      --*(_DWORD *)(*v381 - 16);
                      LOBYTE(v87) = *(_BYTE *)(v49 + 24);
                      goto LABEL_115;
                    }
                  }
                  goto LABEL_141;
                }
LABEL_114:
                v93 = v91[1];
                v94 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)v91;
LABEL_115:
                *(_BYTE *)v94 = v87;
                v387 = (const WebCore::CSSSelector *)v389;
                v388 = 1;
                v95 = *((unsigned int *)v94 + 5);
                if ((_DWORD)v95)
                {
                  WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>::destruct(v93, (char *)v93 + 8 * v95);
                  v93 = (WebCore::Style::RuleSet *)*((_QWORD *)v94 + 1);
                }
                if (v93 != (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v94 + 24))
                {
                  if (v93)
                  {
                    *((_QWORD *)v94 + 1) = 0;
                    *((_DWORD *)v94 + 4) = 0;
                    WTF::fastFree(v93, v22);
                  }
                  *((_QWORD *)v94 + 1) = (char *)v94 + 24;
                  v11 = a4;
                  v23 = v376;
                }
                if (v387 == (const WebCore::CSSSelector *)v389)
                {
                  v96 = HIDWORD(v388);
                  memcpy((char *)v94 + 24, v389, 8 * HIDWORD(v388));
                  v97 = v388;
                }
                else
                {
                  *((_QWORD *)v94 + 1) = v387;
                  v97 = v388;
                  v96 = HIDWORD(v388);
                }
                *((_DWORD *)v94 + 4) = v97;
                *((_DWORD *)v94 + 5) = v96;
                v98 = *v381;
                if (*v381)
                  v99 = *(_DWORD *)(v98 - 12) + 1;
                else
                  v99 = 1;
                *(_DWORD *)(v98 - 12) = v99;
                v100 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)*v381;
                if (*v381)
                  v101 = *((_DWORD *)v100 - 3);
                else
                  v101 = 0;
                v102 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v100 - 16);
                v103 = (*((_DWORD *)v100 - 4) + v101);
                v104 = *((unsigned int *)v100 - 1);
                if (v104 <= 0x400)
                {
                  if (3 * v104 > 4 * v103)
                    goto LABEL_126;
                  if (!(_DWORD)v104)
                  {
                    v106 = *((_DWORD *)v100 - 3);
                    v107 = 8;
                    goto LABEL_136;
                  }
LABEL_163:
                  v106 = *((_DWORD *)v100 - 3);
                  v107 = (_DWORD)v104 << (6 * v106 >= (2 * v104));
LABEL_136:
                  v108 = v107;
                  v109 = WTF::fastMalloc((WTF *)((32 * v107) | 0x10));
                  if (v107)
                  {
                    v110 = v109 + 40;
                    do
                    {
                      *(_BYTE *)(v110 - 24) = -1;
                      *(_QWORD *)(v110 - 16) = v110;
                      *(_QWORD *)(v110 - 8) = 1;
                      v110 += 32;
                      --v108;
                    }
                    while (v108);
                  }
                  *v381 = v109 + 16;
                  *(_DWORD *)(v109 + 12) = v107;
                  *(_DWORD *)(*v381 - 8) = v107 - 1;
                  *(_DWORD *)(*v381 - 16) = 0;
                  *(_DWORD *)(*v381 - 12) = v106;
                  v111 = 0;
                  if ((_DWORD)v104)
                  {
                    do
                    {
                      v359 = *(unsigned __int8 *)v100;
                      if (v359 != 254)
                      {
                        if (v359 == 255)
                        {
                          WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v100, v22);
                        }
                        else
                        {
                          v360 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::reinsert(v381, (uint64_t)v100);
                          WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v100, v361);
                          if (v100 == v94)
                            v111 = (WebCore::Style::RuleSet **)v360;
                        }
                      }
                      v100 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v100 + 32);
                      --v104;
                      v11 = a4;
                      v23 = v376;
                    }
                    while (v104);
                  }
                  else
                  {
                    v91 = 0;
                    v11 = a4;
                    v23 = v376;
                    if (!v100)
                      goto LABEL_141;
                  }
                  WTF::fastFree(v102, v22);
                  v91 = v111;
                  goto LABEL_141;
                }
                if (v104 <= 2 * v103)
                  goto LABEL_163;
LABEL_126:
                v91 = (WebCore::Style::RuleSet **)v94;
LABEL_141:
                v112 = *(_DWORD **)v49;
                if (*(_QWORD *)v49)
                  ++*v112;
                v113 = *((unsigned int *)v91 + 5);
                if ((_DWORD)v113 == *((_DWORD *)v91 + 4))
                {
                  v114 = v113 + (v113 >> 2);
                  if (v114 >= 0x10)
                    v115 = v114 + 1;
                  else
                    v115 = 16;
                  if (v115 <= v113 + 1)
                    v116 = v113 + 1;
                  else
                    v116 = v115;
                  v117 = (unsigned __int8 *)v91[1];
                  if (v116 < 2)
                  {
                    v118 = (WebCore::Style::RuleSet *)(v91 + 3);
                    v91[1] = (WebCore::Style::RuleSet *)(v91 + 3);
                    *((_DWORD *)v91 + 4) = 1;
                  }
                  else
                  {
                    if (v116 >> 29)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1965921A4);
                    }
                    v118 = (WebCore::Style::RuleSet *)WTF::fastMalloc((WTF *)(8 * v116));
                    *((_DWORD *)v91 + 4) = v116;
                    v91[1] = v118;
                  }
                  memcpy(v118, v117, 8 * v113);
                  v23 = v376;
                  if (v91 + 3 != (WebCore::Style::RuleSet **)v117 && v117)
                  {
                    if (v91[1] == (WebCore::Style::RuleSet *)v117)
                    {
                      v91[1] = 0;
                      *((_DWORD *)v91 + 4) = 0;
                    }
                    WTF::fastFree((WTF *)v117, v22);
                  }
                  v113 = *((unsigned int *)v91 + 5);
                  v50 = (_QWORD *)((char *)v91[1] + 8 * v113);
                }
                else
                {
                  v50 = (_QWORD *)((char *)v91[1] + 8 * v113);
                }
                *v50 = v112;
                *((_DWORD *)v91 + 5) = v113 + 1;
              }
              v49 += 32;
              if (v49 == v377)
                goto LABEL_292;
            }
          }
          if (v11 != 2)
          {
            if (v11 == 1)
            {
              while (*(_BYTE *)(v49 + 24) == 2 && *((_BYTE *)v23 + 4) == 1)
              {
LABEL_217:
                v49 += 32;
                if (v49 == v377)
                  goto LABEL_292;
              }
              if (*(unsigned __int8 *)(v49 + 25) == a3)
                v125 = a1 + 2;
              else
                v125 = a1 + 3;
              v126 = *v125;
              if (*v125
                || (WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::rehash(v125, 8u, 0), (v126 = *v125) != 0))
              {
                v127 = *(_DWORD *)(v126 - 8);
              }
              else
              {
                v127 = 0;
              }
              v128 = *(unsigned __int8 *)(v49 + 24);
              v129 = 9 * ((~(v128 << 15) + v128) ^ ((~(v128 << 15) + v128) >> 10));
              v130 = (v129 ^ (v129 >> 6)) + ~((v129 ^ (v129 >> 6)) << 11);
              v131 = (v130 ^ HIWORD(v130)) & v127;
              v132 = (unsigned __int8 *)(v126 + 32 * v131);
              v133 = *v132;
              if (v133 == 255)
              {
LABEL_189:
                v134 = (WebCore::Style::RuleSet *)*((_QWORD *)v132 + 1);
                v135 = v132;
LABEL_190:
                *v135 = v128;
                v387 = (const WebCore::CSSSelector *)v389;
                v388 = 1;
                v136 = *((unsigned int *)v135 + 5);
                if ((_DWORD)v136)
                {
                  WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>::destruct(v134, (char *)v134 + 8 * v136);
                  v134 = (WebCore::Style::RuleSet *)*((_QWORD *)v135 + 1);
                }
                if (v134 != (WebCore::Style::RuleSet *)(v135 + 24))
                {
                  if (v134)
                  {
                    *((_QWORD *)v135 + 1) = 0;
                    *((_DWORD *)v135 + 4) = 0;
                    WTF::fastFree(v134, v22);
                  }
                  *((_QWORD *)v135 + 1) = v135 + 24;
                  v11 = a4;
                  v23 = v376;
                }
                if (v387 == (const WebCore::CSSSelector *)v389)
                {
                  v137 = HIDWORD(v388);
                  memcpy(v135 + 24, v389, 8 * HIDWORD(v388));
                  v138 = v388;
                }
                else
                {
                  *((_QWORD *)v135 + 1) = v387;
                  v138 = v388;
                  v137 = HIDWORD(v388);
                }
                *((_DWORD *)v135 + 4) = v138;
                *((_DWORD *)v135 + 5) = v137;
                v139 = *v125;
                if (*v125)
                  v140 = *(_DWORD *)(v139 - 12) + 1;
                else
                  v140 = 1;
                *(_DWORD *)(v139 - 12) = v140;
                v141 = *v125;
                if (*v125)
                  v142 = *(_DWORD *)(v141 - 12);
                else
                  v142 = 0;
                v143 = (*(_DWORD *)(v141 - 16) + v142);
                v144 = *(unsigned int *)(v141 - 4);
                if (v144 > 0x400)
                {
                  if (v144 <= 2 * v143)
                    goto LABEL_222;
LABEL_201:
                  v132 = v135;
                }
                else
                {
                  if (3 * v144 > 4 * v143)
                    goto LABEL_201;
                  if (!(_DWORD)v144)
                  {
                    v146 = 8;
                    goto LABEL_211;
                  }
LABEL_222:
                  v146 = (_DWORD)v144 << (6 * *(_DWORD *)(v141 - 12) >= (2 * v144));
LABEL_211:
                  v132 = (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::rehash(v125, v146, (WebCore::Style::DynamicMediaQueryEvaluationChanges *)v135);
                }
              }
              else
              {
                v135 = 0;
                v145 = 1;
                while (v133 != v128)
                {
                  if (v133 == 254)
                    v135 = v132;
                  v131 = ((_DWORD)v131 + v145) & v127;
                  v132 = (unsigned __int8 *)(v126 + 32 * v131);
                  v133 = *v132;
                  ++v145;
                  if (v133 == 255)
                  {
                    if (!v135)
                      goto LABEL_189;
                    *v135 = -1;
                    v134 = (WebCore::Style::RuleSet *)(v135 + 24);
                    *((_QWORD *)v135 + 1) = v135 + 24;
                    *((_QWORD *)v135 + 2) = 1;
                    --*(_DWORD *)(*v125 - 16);
                    LOBYTE(v128) = *(_BYTE *)(v49 + 24);
                    goto LABEL_190;
                  }
                }
              }
              v147 = *(_DWORD **)v49;
              if (*(_QWORD *)v49)
                ++*v147;
              v148 = *((unsigned int *)v132 + 5);
              if ((_DWORD)v148 == *((_DWORD *)v132 + 4))
              {
                v150 = v148 + (v148 >> 2);
                if (v150 >= 0x10)
                  v151 = v150 + 1;
                else
                  v151 = 16;
                if (v151 <= v148 + 1)
                  v152 = v148 + 1;
                else
                  v152 = v151;
                v153 = (unsigned __int8 *)*((_QWORD *)v132 + 1);
                if (v152 < 2)
                {
                  v154 = v132 + 24;
                  *((_QWORD *)v132 + 1) = v132 + 24;
                  *((_DWORD *)v132 + 4) = 1;
                }
                else
                {
                  if (v152 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659224CLL);
                  }
                  v154 = (void *)WTF::fastMalloc((WTF *)(8 * v152));
                  *((_DWORD *)v132 + 4) = v152;
                  *((_QWORD *)v132 + 1) = v154;
                }
                memcpy(v154, v153, 8 * v148);
                v23 = v376;
                if (v132 + 24 != v153 && v153)
                {
                  if (*((unsigned __int8 **)v132 + 1) == v153)
                  {
                    *((_QWORD *)v132 + 1) = 0;
                    *((_DWORD *)v132 + 4) = 0;
                  }
                  WTF::fastFree((WTF *)v153, v22);
                }
                v148 = *((unsigned int *)v132 + 5);
                v149 = (_QWORD *)(*((_QWORD *)v132 + 1) + 8 * v148);
              }
              else
              {
                v149 = (_QWORD *)(*((_QWORD *)v132 + 1) + 8 * v148);
              }
              *v149 = v147;
              *((_DWORD *)v132 + 5) = v148 + 1;
              goto LABEL_217;
            }
            while (2)
            {
              if (*(unsigned __int8 *)(v49 + 25) == a3)
                v193 = a1 + 2;
              else
                v193 = a1 + 3;
              v194 = *v193;
              if (*v193)
                goto LABEL_316;
              v195 = WTF::fastMalloc((WTF *)0x110);
              *(_BYTE *)(v195 + 16) = -1;
              v195 += 16;
              *(_QWORD *)(v195 + 8) = v195 + 24;
              *(_QWORD *)(v195 + 16) = 1;
              *(_BYTE *)(v195 + 32) = -1;
              *(_QWORD *)(v195 + 40) = v195 + 56;
              *(_QWORD *)(v195 + 48) = 1;
              *(_BYTE *)(v195 + 64) = -1;
              *(_QWORD *)(v195 + 72) = v195 + 88;
              *(_QWORD *)(v195 + 80) = 1;
              *(_BYTE *)(v195 + 96) = -1;
              *(_QWORD *)(v195 + 104) = v195 + 120;
              *(_QWORD *)(v195 + 112) = 1;
              *(_BYTE *)(v195 + 128) = -1;
              *(_QWORD *)(v195 + 136) = v195 + 152;
              *(_QWORD *)(v195 + 144) = 1;
              *(_BYTE *)(v195 + 160) = -1;
              *(_QWORD *)(v195 + 168) = v195 + 184;
              *(_QWORD *)(v195 + 176) = 1;
              *(_BYTE *)(v195 + 192) = -1;
              *(_QWORD *)(v195 + 200) = v195 + 216;
              *(_QWORD *)(v195 + 208) = 1;
              *(_BYTE *)(v195 + 224) = -1;
              *(_QWORD *)(v195 + 232) = v195 + 248;
              *(_QWORD *)(v195 + 240) = 1;
              *v193 = v195;
              *(_DWORD *)(v195 - 4) = 8;
              *(_DWORD *)(*v193 - 8) = 7;
              *(_DWORD *)(*v193 - 16) = 0;
              *(_DWORD *)(*v193 - 12) = 0;
              v194 = *v193;
              if (*v193)
LABEL_316:
                v196 = *(_DWORD *)(v194 - 8);
              else
                v196 = 0;
              v197 = *(unsigned __int8 *)(v49 + 24);
              v198 = 9 * ((~(v197 << 15) + v197) ^ ((~(v197 << 15) + v197) >> 10));
              v199 = (v198 ^ (v198 >> 6)) + ~((v198 ^ (v198 >> 6)) << 11);
              v200 = (v199 ^ HIWORD(v199)) & v196;
              v201 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)(v194 + 32 * v200);
              v202 = *(unsigned __int8 *)v201;
              if (v202 == 255)
              {
LABEL_318:
                v203 = (WebCore::Style::RuleSet *)*((_QWORD *)v201 + 1);
                v204 = v201;
LABEL_319:
                *(_BYTE *)v204 = v197;
                v387 = (const WebCore::CSSSelector *)v389;
                v388 = 1;
                v205 = *((unsigned int *)v204 + 5);
                if ((_DWORD)v205)
                {
                  WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>::destruct(v203, (char *)v203 + 8 * v205);
                  v203 = (WebCore::Style::RuleSet *)*((_QWORD *)v204 + 1);
                }
                if (v203 != (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v204 + 24))
                {
                  if (v203)
                  {
                    *((_QWORD *)v204 + 1) = 0;
                    *((_DWORD *)v204 + 4) = 0;
                    WTF::fastFree(v203, v22);
                  }
                  *((_QWORD *)v204 + 1) = (char *)v204 + 24;
                  v11 = a4;
                  v23 = v376;
                }
                if (v387 == (const WebCore::CSSSelector *)v389)
                {
                  v206 = HIDWORD(v388);
                  memcpy((char *)v204 + 24, v389, 8 * HIDWORD(v388));
                  v207 = v388;
                }
                else
                {
                  *((_QWORD *)v204 + 1) = v387;
                  v207 = v388;
                  v206 = HIDWORD(v388);
                }
                *((_DWORD *)v204 + 4) = v207;
                *((_DWORD *)v204 + 5) = v206;
                v208 = *v193;
                if (*v193)
                  v209 = *(_DWORD *)(v208 - 12) + 1;
                else
                  v209 = 1;
                *(_DWORD *)(v208 - 12) = v209;
                v210 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)*v193;
                if (*v193)
                  v211 = *((_DWORD *)v210 - 3);
                else
                  v211 = 0;
                v212 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v210 - 16);
                v213 = (*((_DWORD *)v210 - 4) + v211);
                v214 = *((unsigned int *)v210 - 1);
                if (v214 > 0x400)
                {
                  if (v214 <= 2 * v213)
                    goto LABEL_354;
LABEL_330:
                  v201 = v204;
                }
                else
                {
                  if (3 * v214 > 4 * v213)
                    goto LABEL_330;
                  if (!(_DWORD)v214)
                  {
                    v216 = *((_DWORD *)v210 - 3);
                    v217 = 8;
                    goto LABEL_340;
                  }
LABEL_354:
                  v216 = *((_DWORD *)v210 - 3);
                  v217 = (_DWORD)v214 << (6 * v216 >= (2 * v214));
LABEL_340:
                  v218 = v217;
                  v219 = WTF::fastMalloc((WTF *)((32 * v217) | 0x10));
                  if (v217)
                  {
                    v220 = v219 + 40;
                    do
                    {
                      *(_BYTE *)(v220 - 24) = -1;
                      *(_QWORD *)(v220 - 16) = v220;
                      *(_QWORD *)(v220 - 8) = 1;
                      v220 += 32;
                      --v218;
                    }
                    while (v218);
                  }
                  *v193 = v219 + 16;
                  *(_DWORD *)(v219 + 12) = v217;
                  *(_DWORD *)(*v193 - 8) = v217 - 1;
                  *(_DWORD *)(*v193 - 16) = 0;
                  *(_DWORD *)(*v193 - 12) = v216;
                  v221 = 0;
                  if ((_DWORD)v214)
                  {
                    do
                    {
                      v362 = *(unsigned __int8 *)v210;
                      if (v362 != 254)
                      {
                        if (v362 == 255)
                        {
                          WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v210, v22);
                        }
                        else
                        {
                          v363 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::reinsert(v193, (uint64_t)v210);
                          WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v210, v364);
                          if (v210 == v204)
                            v221 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)v363;
                        }
                      }
                      v210 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v210 + 32);
                      --v214;
                      v11 = a4;
                      v23 = v376;
                    }
                    while (v214);
                  }
                  else
                  {
                    v201 = 0;
                    v11 = a4;
                    v23 = v376;
                    if (!v210)
                      goto LABEL_345;
                  }
                  WTF::fastFree(v212, v22);
                  v201 = v221;
                }
              }
              else
              {
                v204 = 0;
                v215 = 1;
                while (v202 != v197)
                {
                  if (v202 == 254)
                    v204 = v201;
                  v200 = ((_DWORD)v200 + v215) & v196;
                  v201 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)(v194 + 32 * v200);
                  v202 = *(unsigned __int8 *)v201;
                  ++v215;
                  if (v202 == 255)
                  {
                    if (!v204)
                      goto LABEL_318;
                    *(_BYTE *)v204 = -1;
                    v203 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v204 + 24);
                    *((_QWORD *)v204 + 1) = (char *)v204 + 24;
                    *((_QWORD *)v204 + 2) = 1;
                    --*(_DWORD *)(*v193 - 16);
                    LOBYTE(v197) = *(_BYTE *)(v49 + 24);
                    goto LABEL_319;
                  }
                }
              }
LABEL_345:
              v222 = *(_DWORD **)v49;
              if (*(_QWORD *)v49)
                ++*v222;
              v223 = *((unsigned int *)v201 + 5);
              if ((_DWORD)v223 == *((_DWORD *)v201 + 4))
              {
                v225 = v223 + (v223 >> 2);
                if (v225 >= 0x10)
                  v226 = v225 + 1;
                else
                  v226 = 16;
                if (v226 <= v223 + 1)
                  v227 = v223 + 1;
                else
                  v227 = v226;
                v228 = (unsigned __int8 *)*((_QWORD *)v201 + 1);
                if (v227 < 2)
                {
                  v229 = (char *)v201 + 24;
                  *((_QWORD *)v201 + 1) = (char *)v201 + 24;
                  *((_DWORD *)v201 + 4) = 1;
                }
                else
                {
                  if (v227 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659225CLL);
                  }
                  v229 = (void *)WTF::fastMalloc((WTF *)(8 * v227));
                  *((_DWORD *)v201 + 4) = v227;
                  *((_QWORD *)v201 + 1) = v229;
                }
                memcpy(v229, v228, 8 * v223);
                v23 = v376;
                if ((unsigned __int8 *)((char *)v201 + 24) != v228 && v228)
                {
                  if (*((unsigned __int8 **)v201 + 1) == v228)
                  {
                    *((_QWORD *)v201 + 1) = 0;
                    *((_DWORD *)v201 + 4) = 0;
                  }
                  WTF::fastFree((WTF *)v228, v22);
                }
                v223 = *((unsigned int *)v201 + 5);
                v224 = (_QWORD *)(*((_QWORD *)v201 + 1) + 8 * v223);
              }
              else
              {
                v224 = (_QWORD *)(*((_QWORD *)v201 + 1) + 8 * v223);
              }
              *v224 = v222;
              *((_DWORD *)v201 + 5) = v223 + 1;
              v49 += 32;
              if (v49 == v377)
                goto LABEL_292;
              continue;
            }
          }
          while (2)
          {
            if (*(_BYTE *)(v49 + 24) != 2 || *((_BYTE *)v23 + 4) != 1)
            {
LABEL_291:
              v49 += 32;
              if (v49 == v377)
                goto LABEL_292;
              continue;
            }
            break;
          }
          if (*(unsigned __int8 *)(v49 + 25) == a3)
            v166 = a1 + 2;
          else
            v166 = a1 + 3;
          v167 = *v166;
          if (*v166
            || (WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::rehash(v166, 8u, 0), (v167 = *v166) != 0))
          {
            v168 = *(_DWORD *)(v167 - 8);
          }
          else
          {
            v168 = 0;
          }
          v169 = *(unsigned __int8 *)(v49 + 24);
          v170 = 9 * ((~(v169 << 15) + v169) ^ ((~(v169 << 15) + v169) >> 10));
          v171 = (v170 ^ (v170 >> 6)) + ~((v170 ^ (v170 >> 6)) << 11);
          v172 = (v171 ^ HIWORD(v171)) & v168;
          v173 = (unsigned __int8 *)(v167 + 32 * v172);
          v174 = *v173;
          if (v174 != 255)
          {
            v176 = 0;
            v184 = 1;
            while (v174 != v169)
            {
              if (v174 == 254)
                v176 = v173;
              v172 = ((_DWORD)v172 + v184) & v168;
              v173 = (unsigned __int8 *)(v167 + 32 * v172);
              v174 = *v173;
              ++v184;
              if (v174 == 255)
              {
                if (!v176)
                  goto LABEL_263;
                *v176 = -1;
                v175 = (WebCore::Style::RuleSet *)(v176 + 24);
                *((_QWORD *)v176 + 1) = v176 + 24;
                *((_QWORD *)v176 + 2) = 1;
                --*(_DWORD *)(*v166 - 16);
                LOBYTE(v169) = *(_BYTE *)(v49 + 24);
                goto LABEL_264;
              }
            }
            goto LABEL_286;
          }
LABEL_263:
          v175 = (WebCore::Style::RuleSet *)*((_QWORD *)v173 + 1);
          v176 = v173;
LABEL_264:
          *v176 = v169;
          v387 = (const WebCore::CSSSelector *)v389;
          v388 = 1;
          v177 = *((unsigned int *)v176 + 5);
          if ((_DWORD)v177)
          {
            WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>::destruct(v175, (char *)v175 + 8 * v177);
            v175 = (WebCore::Style::RuleSet *)*((_QWORD *)v176 + 1);
          }
          if (v175 != (WebCore::Style::RuleSet *)(v176 + 24))
          {
            if (v175)
            {
              *((_QWORD *)v176 + 1) = 0;
              *((_DWORD *)v176 + 4) = 0;
              WTF::fastFree(v175, v22);
            }
            *((_QWORD *)v176 + 1) = v176 + 24;
            v11 = a4;
            v23 = v376;
          }
          if (v387 == (const WebCore::CSSSelector *)v389)
          {
            v178 = HIDWORD(v388);
            memcpy(v176 + 24, v389, 8 * HIDWORD(v388));
            v179 = v388;
          }
          else
          {
            *((_QWORD *)v176 + 1) = v387;
            v179 = v388;
            v178 = HIDWORD(v388);
          }
          *((_DWORD *)v176 + 4) = v179;
          *((_DWORD *)v176 + 5) = v178;
          v180 = *v166;
          if (*v166)
            v155 = *(_DWORD *)(v180 - 12) + 1;
          else
            v155 = 1;
          *(_DWORD *)(v180 - 12) = v155;
          v181 = *v166;
          if (*v166)
            v156 = *(_DWORD *)(v181 - 12);
          else
            v156 = 0;
          v182 = (*(_DWORD *)(v181 - 16) + v156);
          v183 = *(unsigned int *)(v181 - 4);
          if (v183 > 0x400)
          {
            if (v183 > 2 * v182)
              goto LABEL_275;
          }
          else
          {
            if (3 * v183 > 4 * v182)
            {
LABEL_275:
              v173 = v176;
LABEL_286:
              v185 = *(_DWORD **)v49;
              if (*(_QWORD *)v49)
                ++*v185;
              v163 = *((unsigned int *)v173 + 5);
              if ((_DWORD)v163 == *((_DWORD *)v173 + 4))
              {
                v158 = v163 + (v163 >> 2);
                if (v158 >= 0x10)
                  v159 = v158 + 1;
                else
                  v159 = 16;
                if (v159 <= v163 + 1)
                  v160 = v163 + 1;
                else
                  v160 = v159;
                v161 = (unsigned __int8 *)*((_QWORD *)v173 + 1);
                if (v160 < 2)
                {
                  v162 = v173 + 24;
                  *((_QWORD *)v173 + 1) = v173 + 24;
                  *((_DWORD *)v173 + 4) = 1;
                }
                else
                {
                  if (v160 >> 29)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x196592254);
                  }
                  v162 = (void *)WTF::fastMalloc((WTF *)(8 * v160));
                  *((_DWORD *)v173 + 4) = v160;
                  *((_QWORD *)v173 + 1) = v162;
                }
                memcpy(v162, v161, 8 * v163);
                v23 = v376;
                if (v173 + 24 != v161 && v161)
                {
                  if (*((unsigned __int8 **)v173 + 1) == v161)
                  {
                    *((_QWORD *)v173 + 1) = 0;
                    *((_DWORD *)v173 + 4) = 0;
                  }
                  WTF::fastFree((WTF *)v161, v22);
                }
                v163 = *((unsigned int *)v173 + 5);
                v164 = (_QWORD *)(*((_QWORD *)v173 + 1) + 8 * v163);
              }
              else
              {
                v164 = (_QWORD *)(*((_QWORD *)v173 + 1) + 8 * v163);
              }
              *v164 = v185;
              *((_DWORD *)v173 + 5) = v163 + 1;
              goto LABEL_291;
            }
            if (!(_DWORD)v183)
            {
              v157 = 8;
              goto LABEL_285;
            }
          }
          v157 = (_DWORD)v183 << (6 * *(_DWORD *)(v181 - 12) >= (2 * v183));
LABEL_285:
          v173 = (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::rehash(v166, v157, (WebCore::Style::DynamicMediaQueryEvaluationChanges *)v176);
          goto LABEL_286;
        }
      }
LABEL_292:
      if ((*(_QWORD *)(a1[1] + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v186 = *(_QWORD *)((*(_QWORD *)(a1[1] + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v186)
        {
          v187 = WebCore::Style::Scope::resolver(*(WebCore::Style::Scope **)(v186 + 216));
          v188 = WebCore::Style::ScopeRuleSets::pseudoClassInvalidationRuleSets(v187 + 32, (uint64_t)v23);
          if (v188)
          {
            if (v11 != 2)
            {
              v189 = *((unsigned int *)v188 + 3);
              if ((_DWORD)v189)
              {
                v190 = *(unsigned __int8 **)v188;
                v191 = 32 * v189;
                if (a3 == 2)
                {
                  do
                  {
                    if (v190[24] == 17)
                    {
                      WebCore::Style::Invalidator::addToMatchElementRuleSets(v379, v190);
                      WebCore::Style::Invalidator::addToMatchElementRuleSets(v381, v190);
                    }
                    v190 += 32;
                    v191 -= 32;
                  }
                  while (v191);
                }
                else
                {
                  do
                  {
                    if (v190[24] == 17)
                    {
                      if (v190[25] == a3)
                        v192 = a1 + 2;
                      else
                        v192 = a1 + 3;
                      WebCore::Style::Invalidator::addToMatchElementRuleSets(v192, v190);
                    }
                    v190 += 32;
                    v191 -= 32;
                  }
                  while (v191);
                }
              }
            }
          }
        }
      }
      v23 = (WTF *)((char *)v23 + 16);
      if (v23 == v372)
      {
        v23 = v383;
        if (HIDWORD(v384))
        {
          v230 = 16 * HIDWORD(v384);
          v231 = (WTF::StringImpl **)((char *)v383 + 8);
          do
          {
            v232 = *v231;
            *v231 = 0;
            if (v232)
            {
              if (*(_DWORD *)v232 == 2)
                WTF::StringImpl::destroy(v232, v22);
              else
                *(_DWORD *)v232 -= 2;
            }
            v231 += 2;
            v230 -= 16;
          }
          while (v230);
          v23 = v383;
        }
        break;
      }
    }
  }
  if (&v385 != (uint64_t *)v23 && v23 != 0)
  {
    v383 = 0;
    LODWORD(v384) = 0;
    WTF::fastFree(v23, v22);
  }
}

const WebCore::CSSSelector **WebCore::Style::RuleData::RuleData(const WebCore::CSSSelector **a1, const WebCore::CSSSelector *a2, unsigned __int16 a3, int a4, int a5, int a6)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int CanMatchPseudoElement;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  const WebCore::CSSSelector *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  const WebCore::CSSSelector *v35;
  const WebCore::CSSSelector *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int16 v40;
  WTF::StringImpl *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  WTF *v46;
  WTF *v47;
  WTF *v48;
  int v50;
  uint64_t v51;
  WTF *v52;
  int v53;
  uint64_t v54;
  int v55;
  WTF *v56;
  int v57;
  WTF *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v63;
  BOOL v64;
  BOOL v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  WTF *v70;
  uint64_t v71;
  _BYTE v72[32];
  WTF *v73;
  uint64_t v74;
  _BYTE v75[32];
  WTF *v76;
  uint64_t v77;
  _BYTE v78[32];
  WTF *v79;
  uint64_t v80;
  _BYTE v81[32];
  __int128 v82;

  ++*(_DWORD *)a2;
  v9 = a3;
  v10 = (unint64_t)a1[1] & 0xFFE0000000000000 | (a4 << 16) | ((unint64_t)(a5 & 0x1FFFFF) << 32) | v9;
  *a1 = a2;
  a1[1] = (const WebCore::CSSSelector *)v10;
  v11 = *((_QWORD *)a2 + 2);
  v12 = *(_DWORD *)(v11 + 16 * v9);
  if ((v12 & 0x80000) == 0)
  {
LABEL_2:
    v13 = 0;
    goto LABEL_3;
  }
  v50 = (v12 >> 4) & 0x1F;
  if (v50 == 1)
  {
    v60 = *(_QWORD *)(v11 + 16 * v9 + 8);
    v61 = *(_QWORD *)(v60 + 32);
    if (v61 != WebCore::starAtomData && v61 != WebCore::HTMLNames::xhtmlNamespaceURI)
      goto LABEL_2;
    v30 = v60 == WebCore::anyName;
    v13 = 0x80000000000000;
    if (v30)
      v13 = 0x20000000000000;
  }
  else if ((*(_DWORD *)(v11 + 16 * v9) & 0x1F0) == 0x80
         && ((v63 = (v12 >> 9), (v63 - 29) <= 0x33)
           ? (v64 = ((1 << (v63 - 29)) & 0x8000000020001) == 0)
           : (v64 = 1),
             v64 ? (v65 = v63 == 13) : (v65 = 1),
             v65))
  {
    v13 = 0x60000000000000;
  }
  else
  {
    v51 = 0x60000000000000;
    if (v50 != 3)
      v51 = 0;
    if (v50 == 2)
      v13 = 0x40000000000000;
    else
      v13 = v51;
  }
LABEL_3:
  v14 = v13 | v10 & 0xFF1FFFFFFFFFFFFFLL;
  a1[1] = (const WebCore::CSSSelector *)v14;
  CanMatchPseudoElement = WebCore::Style::selectorCanMatchPseudoElement((int *)(*((_QWORD *)a2 + 2) + 16 * v9), a2);
  v17 = 0x100000000000000;
  if (!CanMatchPseudoElement)
    v17 = 0;
  v18 = v17 | v14 & 0xFEFFFFFFFFFFFFFFLL;
  a1[1] = (const WebCore::CSSSelector *)v18;
  v19 = WebCore::Style::computeContainsUncommonAttributeSelector((unsigned int *)(*((_QWORD *)a2 + 2) + 16 * v9), 1, v16);
  v21 = 0x200000000000000;
  if (!v19)
    v21 = 0;
  v22 = v21 | v18 & 0xFDFFFFFFFFFFFFFFLL;
  a1[1] = (const WebCore::CSSSelector *)v22;
  v23 = *((_QWORD *)a2 + 2);
  if (v23)
  {
    v24 = (int *)(v23 + 16 * v9);
    v25 = 3;
    while (1)
    {
      v26 = *v24;
      v27 = (*v24 >> 9);
      v28 = v25 & 0xFFFFFFFD;
      if (v27 != 46)
        v28 = v25;
      if (v27 == 80)
        v29 = v25 & 0xFFFFFFFE;
      else
        v29 = v28;
      if ((*v24 & 0x1F0) == 0x80)
        v25 = v29;
      if ((v26 & 0xF) != 0)
      {
        if ((v26 & 0x80000) != 0)
          goto LABEL_28;
        v30 = (*v24 & 0xFu) <= 2 && v25 == 3;
        if (!v30)
          goto LABEL_28;
        v25 = 3;
      }
      else if ((v26 & 0x80000) != 0)
      {
        goto LABEL_28;
      }
      v24 += 4;
    }
  }
  LOBYTE(v25) = 3;
LABEL_28:
  a1[1] = (const WebCore::CSSSelector *)(v22 & 0xF3FFFFFFFFFFFFFFLL | ((unint64_t)(v25 & 3) << 58));
  v31 = WebCore::Style::determinePropertyAllowlist(*((_QWORD *)a2 + 2) + 16 * v9, v20);
  v33 = 0x4000000000000000;
  if (!a6)
    v33 = 0;
  v34 = v33 | ((unint64_t)(v31 & 3) << 60);
  v36 = *a1;
  v35 = a1[1];
  a1[1] = (const WebCore::CSSSelector *)(v34 & 0xF000000000000000 | (unint64_t)v35 & 0xFFFFFFFFFFFFFFFLL | 0x8000000000000000);
  v37 = (unsigned __int16)v35;
  v38 = *((_QWORD *)v36 + 2);
  v70 = (WTF *)v72;
  v71 = 8;
  v73 = (WTF *)v75;
  v74 = 8;
  v76 = (WTF *)v78;
  v77 = 8;
  v79 = (WTF *)v81;
  v80 = 8;
  v39 = *(_DWORD *)(v38 + 16 * v37);
  if ((v39 & 0x80000) == 0)
  {
    v40 = v39 & 0xF | 0x100;
    v41 = (WTF::StringImpl *)(v38 + 16 * v37 + 16);
    do
    {
      if ((_BYTE)v40)
      {
        if (v40 - 1 >= 2)
        {
          if (v40 - 3 < 5)
            v40 = 256;
        }
        else
        {
          v31 = WebCore::SelectorFilter::collectSimpleSelectorHash((uint64_t)&v70, v41);
          v40 = 0;
        }
      }
      else if ((v40 & 0xFF00) == 0)
      {
        v31 = WebCore::SelectorFilter::collectSimpleSelectorHash((uint64_t)&v70, v41);
      }
      v42 = *(_DWORD *)v41;
      v41 = (WTF::StringImpl *)((char *)v41 + 16);
      v40 = v40 & 0xFF00 | v42 & 0xF;
    }
    while ((v42 & 0x80000) == 0);
    if (HIDWORD(v71))
    {
      v43 = 0;
      v52 = v70;
      v44 = 4 * HIDWORD(v71);
      while (1)
      {
        v53 = *(_DWORD *)v52;
        if (!v43)
          break;
        if ((_DWORD)v82 != v53)
        {
          if (v43 == 1)
            break;
          if (DWORD1(v82) == v53)
            goto LABEL_64;
          if (v43 == 2)
            break;
          if (DWORD2(v82) != v53)
          {
            if (v43 == 3)
            {
              HIDWORD(v82) = *(_DWORD *)v52;
              v31 = (uint64_t)v79;
              goto LABEL_47;
            }
            if (HIDWORD(v82) != v53)
              goto LABEL_71;
          }
        }
LABEL_64:
        v52 = (WTF *)((char *)v52 + 4);
        v44 -= 4;
        if (!v44)
          goto LABEL_42;
      }
      *((_DWORD *)&v82 + v43++) = v53;
      goto LABEL_64;
    }
  }
  v43 = 0;
LABEL_42:
  v31 = (uint64_t)v79;
  v44 = HIDWORD(v80);
  if (HIDWORD(v80))
    goto LABEL_72;
LABEL_43:
  if (HIDWORD(v74))
  {
    v56 = v73;
    v44 = 4 * HIDWORD(v74);
    while (1)
    {
      v57 = *(_DWORD *)v56;
      if (!v43)
        goto LABEL_90;
      if ((_DWORD)v82 != v57)
        break;
LABEL_91:
      if (v43 == 4)
        goto LABEL_47;
      v56 = (WTF *)((char *)v56 + 4);
      v44 -= 4;
      if (!v44)
        goto LABEL_44;
    }
    if (v43 != 1)
    {
      if (DWORD1(v82) == v57)
        goto LABEL_91;
      if (v43 != 2)
      {
        if (DWORD2(v82) == v57)
          goto LABEL_91;
        if (v43 != 3)
        {
          if (HIDWORD(v82) != v57)
            goto LABEL_71;
          goto LABEL_91;
        }
      }
    }
LABEL_90:
    *((_DWORD *)&v82 + v43++) = v57;
    goto LABEL_91;
  }
LABEL_44:
  v44 = HIDWORD(v77);
  if (HIDWORD(v77))
  {
    v58 = v76;
    v44 = 4 * HIDWORD(v77);
    while (1)
    {
      v59 = *(_DWORD *)v58;
      if (!v43)
        goto LABEL_104;
      if ((_DWORD)v82 != v59)
        break;
LABEL_105:
      if (v43 == 4)
        goto LABEL_47;
      v58 = (WTF *)((char *)v58 + 4);
      v44 -= 4;
      if (!v44)
        goto LABEL_45;
    }
    if (v43 != 1)
    {
      if (DWORD1(v82) == v59)
        goto LABEL_105;
      if (v43 != 2)
      {
        if (DWORD2(v82) == v59)
          goto LABEL_105;
        if (v43 != 3)
        {
          if (HIDWORD(v82) != v59)
            goto LABEL_71;
          goto LABEL_105;
        }
      }
    }
LABEL_104:
    *((_DWORD *)&v82 + v43++) = v59;
    goto LABEL_105;
  }
LABEL_45:
  if (v43 >= 4)
  {
LABEL_71:
    while (2)
    {
      __break(1u);
LABEL_72:
      v54 = 0;
      v44 *= 4;
      while (1)
      {
        v55 = *(_DWORD *)(v31 + v54);
        if (!v43)
          goto LABEL_76;
        if ((_DWORD)v82 != v55)
          break;
LABEL_77:
        if (v43 == 4)
          goto LABEL_47;
        v54 += 4;
        if (v44 == v54)
          goto LABEL_43;
      }
      if (v43 != 1)
      {
        if (DWORD1(v82) == v55)
          goto LABEL_77;
        if (v43 != 2)
        {
          if (DWORD2(v82) == v55)
            goto LABEL_77;
          if (v43 != 3)
          {
            if (HIDWORD(v82) != v55)
              continue;
            goto LABEL_77;
          }
        }
      }
      break;
    }
LABEL_76:
    *((_DWORD *)&v82 + v43++) = v55;
    goto LABEL_77;
  }
  *((_DWORD *)&v82 + v43) = 0;
LABEL_47:
  v45 = v82;
  if (v81 != (_BYTE *)v31 && v31)
  {
    v79 = 0;
    LODWORD(v80) = 0;
    v66 = v82;
    WTF::fastFree((WTF *)v31, v32);
    v45 = v66;
  }
  v46 = v76;
  if (v78 != (_BYTE *)v76 && v76)
  {
    v76 = 0;
    LODWORD(v77) = 0;
    v67 = v45;
    WTF::fastFree(v46, v32);
    v45 = v67;
  }
  v47 = v73;
  if (v75 != (_BYTE *)v73 && v73)
  {
    v73 = 0;
    LODWORD(v74) = 0;
    v68 = v45;
    WTF::fastFree(v47, v32);
    v45 = v68;
  }
  v48 = v70;
  if (v72 != (_BYTE *)v70 && v70)
  {
    v70 = 0;
    LODWORD(v71) = 0;
    v69 = v45;
    WTF::fastFree(v48, v32);
    v45 = v69;
  }
  *((_OWORD *)a1 + 1) = v45;
  return a1;
}

uint64_t WebCore::Style::computeHasPseudoClassMatchElement(WebCore::Style *this, const WebCore::CSSSelector *a2)
{
  int v2;
  unsigned __int8 v3;
  int *v4;
  int v5;
  int v6;
  unint64_t v7;

  v2 = *(_DWORD *)this;
  if ((*(_DWORD *)this & 0x80000) != 0)
  {
    LOBYTE(v7) = 10;
  }
  else
  {
    v3 = 0;
    v4 = (int *)((char *)this + 16);
    do
    {
      if (v3 <= 0x12u && ((1 << v3) & 0x65039) != 0)
      {
        switch(v2 & 0xF)
        {
          case 1:
            goto LABEL_8;
          case 2:
            v3 = 1;
            break;
          case 3:
            v6 = v3;
            if (v3)
              v3 = 4;
            else
              v3 = 3;
            if (v6 == 5)
              v3 = 5;
            break;
          case 4:
            if (v3 == 5)
              v3 = 5;
            else
              v3 = 4;
            break;
          case 5:
          case 6:
            goto LABEL_6;
          case 7:
            goto LABEL_24;
          default:
            break;
        }
      }
      else
      {
        switch(v2 & 0xF)
        {
          case 1:
          case 2:
LABEL_8:
            v3 = 2;
            break;
          case 3:
          case 4:
            if (v3 == 1)
              v3 = 6;
            else
              v3 = 7;
            break;
          case 5:
          case 6:
LABEL_6:
            v3 = 17;
            break;
          case 7:
LABEL_24:
            v3 = 18;
            break;
          default:
            break;
        }
      }
      v5 = *v4;
      v4 += 4;
      LOBYTE(v2) = v5;
    }
    while ((v5 & 0x80000) == 0);
    v7 = 0xD0D0D0D0C0C0C0BuLL >> (8 * (v3 - 2));
    if ((v3 - 2) >= 8u)
      LOBYTE(v7) = 10;
  }
  return v7;
}

uint64_t *WebCore::Style::RuleFeatureSet::collectFeatures(WebCore::Style::RuleData const&,WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0::operator()<WebCore::CSSSelectorList>(uint64_t *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *result;
    do
    {
      WebCore::Style::RuleFeatureSet::recursivelyCollectFeaturesFromSelector(v4, v3[1], v2, 2, 0, 0);
      result = (uint64_t *)WebCore::Style::RuleFeatureSet::recursivelyCollectFeaturesFromSelector(v4, v3[1], v2, 0, 0, 0);
      do
      {
        v6 = *v2;
        v2 += 4;
        v5 = v6;
      }
      while ((v6 & 0x80000) == 0);
    }
    while ((v5 & 0x20000) == 0);
  }
  return result;
}

WTF::StringImpl *WebCore::Style::makePseudoClassInvalidationKey(uint64_t a1, WTF::StringImpl *a2, int *a3)
{
  int v3;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  int v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  v3 = (int)a2;
  v7 = *a3;
  v5 = a3 + 2;
  v6 = v7;
  do
  {
    v8 = (uint64_t)v5;
    if ((v6 & 0x40000) != 0)
      break;
    v6 = *(v5 - 6);
    v5 -= 4;
  }
  while ((v6 & 0xF) == 0);
  result = 0;
  v10 = 0;
  while (1)
  {
    v11 = *(_DWORD *)(v8 - 8);
    v12 = (v11 >> 4) & 0x1F;
    if (v12 == 3)
    {
      if (!v10)
      {
        v14 = (WTF::StringImpl **)v8;
        if ((v11 & 0x100000) != 0)
          v14 = (WTF::StringImpl **)(*(_QWORD *)v8 + 8);
        v10 = *v14;
        if (*v14)
        {
          *(_DWORD *)v10 += 2;
          v11 = *(_DWORD *)(v8 - 8);
        }
      }
      goto LABEL_7;
    }
    if (v12 == 2)
      break;
LABEL_7:
    if ((v11 & 0x1F0) == 0x10)
    {
      v15 = *(WTF::StringImpl **)(*(_QWORD *)v8 + 40);
      if (v15)
        *(_DWORD *)v15 += 2;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      result = v15;
    }
    v13 = *(_DWORD *)(v8 - 8);
    v8 += 16;
    if ((v13 & 0x8000F) != 0)
    {
      if (v10 && *((_DWORD *)v10 + 1))
      {
        *(_DWORD *)a1 = v3;
        *(_BYTE *)(a1 + 4) = 2;
        v16 = v10;
      }
      else if (result && *((_DWORD *)result + 1))
      {
        if (result != (WTF::StringImpl *)WebCore::starAtomData)
        {
          *(_DWORD *)a1 = v3;
          *(_BYTE *)(a1 + 4) = 4;
          *(_DWORD *)result += 2;
          *(_QWORD *)(a1 + 8) = result;
          goto LABEL_29;
        }
        *(_DWORD *)a1 = v3;
        *(_BYTE *)(a1 + 4) = 1;
        v16 = result;
      }
      else
      {
        v16 = (WTF::StringImpl *)WebCore::starAtomData;
        *(_DWORD *)a1 = v3;
        *(_BYTE *)(a1 + 4) = 1;
        if (!v16)
          goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
  if ((v11 & 0x100000) != 0)
    v8 = *(_QWORD *)v8 + 8;
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 4) = 3;
  v16 = *(WTF::StringImpl **)v8;
  if (*(_QWORD *)v8)
LABEL_27:
    *(_DWORD *)v16 += 2;
LABEL_28:
  *(_QWORD *)(a1 + 8) = v16;
  if (!result)
    goto LABEL_31;
LABEL_29:
  if (*(_DWORD *)result == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
  else
    *(_DWORD *)result -= 2;
LABEL_31:
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return result;
}

uint64_t WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::ensure<WebCore::Style::RuleFeatureSet::collectFeatures(WebCore::Style::RuleData const&,WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_4>(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v6;
  char v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int i;
  unsigned int v20;
  unsigned int *v21;
  WTF::StringImpl *v22;
  uint64_t result;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  WTF *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a3;
  v11 = 9 * ((v10 + ~(v10 << 15)) ^ ((v10 + ~(v10 << 15)) >> 10));
  v12 = (v11 ^ (v11 >> 6)) + ~((v11 ^ (v11 >> 6)) << 11);
  v13 = *((unsigned __int8 *)a3 + 4);
  v14 = 9 * ((~(v13 << 15) + v13) ^ ((~(v13 << 15) + v13) >> 10));
  v15 = (v14 ^ (v14 >> 6)) + ~((v14 ^ (v14 >> 6)) << 11);
  v16 = v15 ^ HIWORD(v15);
  v17 = *((_QWORD *)a3 + 1);
  v18 = (0xD7862706ELL
       * (unint64_t)(277951225 * (v12 ^ HIWORD(v12))
                          + 95187966
                          * ((0xD7862706ELL
                                          * (unint64_t)(95187966 * (*(_DWORD *)(v17 + 16) >> 8)
                                                                           + 277951225 * v16)) >> 4))) >> 4;
  for (i = 1; ; ++i)
  {
    v20 = v18 & v8;
    v21 = (unsigned int *)(v6 + 24 * v20);
    v22 = (WTF::StringImpl *)*v21;
    result = *((unsigned __int8 *)v21 + 4);
    if (v22 | result)
    {
      if ((_DWORD)v22 == -1)
      {
        v9 = (unsigned int *)(v6 + 24 * v20);
        goto LABEL_17;
      }
    }
    else if (!*((_QWORD *)v21 + 1))
    {
      if (v9)
      {
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
        --*(_DWORD *)(*a2 - 16);
        v10 = *a3;
        v21 = v9;
      }
      *v21 = v10;
      *((_BYTE *)v21 + 4) = *((_BYTE *)a3 + 4);
      v28 = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = 0;
      v29 = (WTF::StringImpl *)*((_QWORD *)v21 + 1);
      *((_QWORD *)v21 + 1) = v28;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v22);
        else
          *(_DWORD *)v29 -= 2;
      }
      result = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      v31 = (WTF *)*((_QWORD *)v21 + 2);
      *((_QWORD *)v21 + 2) = result;
      if (v31)
      {
        v32 = *((unsigned int *)v31 + 3);
        if ((_DWORD)v32)
        {
          v33 = *(WTF **)v31;
          v34 = 24 * v32;
          do
          {
            v35 = *(_DWORD **)v33;
            *(_QWORD *)v33 = 0;
            if (v35)
            {
              if (*v35 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v35, v30);
              else
                --*v35;
            }
            v33 = (WTF *)((char *)v33 + 24);
            v34 -= 24;
          }
          while (v34);
        }
        v36 = *(WTF **)v31;
        if (*(_QWORD *)v31)
        {
          *(_QWORD *)v31 = 0;
          *((_DWORD *)v31 + 2) = 0;
          WTF::fastFree(v36, v30);
        }
        result = WTF::fastFree(v31, v30);
      }
      v37 = *a2;
      if (*a2)
        v38 = *(_DWORD *)(v37 - 12) + 1;
      else
        v38 = 1;
      *(_DWORD *)(v37 - 12) = v38;
      v39 = *a2;
      if (*a2)
        v40 = *(_DWORD *)(v39 - 12);
      else
        v40 = 0;
      v41 = (*(_DWORD *)(v39 - 16) + v40);
      v42 = *(unsigned int *)(v39 - 4);
      if (v42 > 0x400)
      {
        if (v42 <= 2 * v41)
          goto LABEL_45;
      }
      else if (3 * v42 <= 4 * v41)
      {
        if (!(_DWORD)v42)
        {
          v43 = 8;
LABEL_48:
          result = WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(a2, v43, (int *)v21);
          v21 = (unsigned int *)result;
          v39 = *a2;
          if (*a2)
            LODWORD(v42) = *(_DWORD *)(v39 - 4);
          else
            LODWORD(v42) = 0;
          goto LABEL_50;
        }
LABEL_45:
        v43 = (_DWORD)v42 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v42));
        goto LABEL_48;
      }
LABEL_50:
      v27 = v39 + 24 * v42;
      v26 = 1;
      goto LABEL_51;
    }
    if ((_DWORD)v22 == v10 && (_DWORD)result == v13 && *((_QWORD *)v21 + 1) == v17)
      break;
LABEL_17:
    LODWORD(v18) = i + v20;
  }
  if ((v7 & 1) != 0)
    v25 = 0;
  else
    v25 = *(_DWORD *)(v6 - 4);
  v26 = 0;
  v27 = v6 + 24 * v25;
LABEL_51:
  *(_QWORD *)a1 = v21;
  *(_QWORD *)(a1 + 8) = v27;
  *(_BYTE *)(a1 + 16) = v26;
  return result;
}

uint64_t *WebCore::Style::RuleFeatureSet::add(WebCore::Style::RuleFeatureSet const&)::$_0::operator()<WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits> const>(uint64_t *result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t **v10;
  uint64_t *v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t **v15;
  WTF::StringImpl *v16;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _QWORD *v43;

  v2 = result;
  if (a2)
  {
    v3 = *((unsigned int *)a2 - 1);
    v4 = &a2[2 * v3];
    if (*((_DWORD *)a2 - 3))
    {
      v5 = a2;
      if ((_DWORD)v3)
      {
        v6 = 16 * v3;
        v5 = a2;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            v5 = v4;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v5 = &a2[2 * v3];
  }
  else
  {
    v5 = 0;
    v3 = 0;
  }
  v4 = &a2[2 * v3];
  if (a2)
  {
LABEL_8:
    v7 = &a2[2 * *((unsigned int *)a2 - 1)];
    goto LABEL_12;
  }
  v7 = 0;
LABEL_12:
  if (v7 == v5)
    return result;
  do
  {
    v8 = *v2;
    if (*v2
      || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v2, 8u, 0), (v8 = *v2) != 0))
    {
      v9 = *(_DWORD *)(v8 - 8);
    }
    else
    {
      v9 = 0;
    }
    v10 = 0;
    v11 = (uint64_t *)*v5;
    v12 = *(_DWORD *)(*v5 + 16) >> 8;
    for (i = 1; ; ++i)
    {
      v14 = v12 & v9;
      v15 = (uint64_t **)(v8 + 16 * v14);
      result = *v15;
      if (*v15 == (uint64_t *)-1)
      {
        v10 = (uint64_t **)(v8 + 16 * v14);
        goto LABEL_22;
      }
      if (!result)
        break;
      if (result == v11)
        goto LABEL_48;
LABEL_22:
      v12 = i + v14;
    }
    if (v10)
    {
      *v10 = 0;
      v10[1] = 0;
      --*(_DWORD *)(*v2 - 16);
      v11 = (uint64_t *)*v5;
      v15 = v10;
    }
    if (v11)
      *(_DWORD *)v11 += 2;
    *v15 = v11;
    result = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    *result = 0;
    result[1] = 0;
    v17 = (WTF *)v15[1];
    v15[1] = result;
    if (v17)
    {
      v18 = *((unsigned int *)v17 + 3);
      if ((_DWORD)v18)
      {
        v19 = *(WTF **)v17;
        v20 = 16 * v18;
        do
        {
          v21 = *(_DWORD **)v19;
          *(_QWORD *)v19 = 0;
          if (v21)
          {
            if (*v21 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v21, v16);
            else
              --*v21;
          }
          v19 = (WTF *)((char *)v19 + 16);
          v20 -= 16;
        }
        while (v20);
      }
      v22 = *(WTF **)v17;
      if (*(_QWORD *)v17)
      {
        *(_QWORD *)v17 = 0;
        *((_DWORD *)v17 + 2) = 0;
        WTF::fastFree(v22, v16);
      }
      result = (uint64_t *)WTF::fastFree(v17, v16);
    }
    v23 = *v2;
    if (*v2)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *v2;
    if (*v2)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
        goto LABEL_72;
    }
    else if (3 * v28 <= 4 * v27)
    {
      if (!(_DWORD)v28)
      {
        v29 = 8;
        goto LABEL_47;
      }
LABEL_72:
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
LABEL_47:
      result = (uint64_t *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v2, v29, (uint64_t)v15);
      v15 = (uint64_t **)result;
    }
LABEL_48:
    v30 = (uint64_t *)v5[1];
    v31 = *((unsigned int *)v30 + 3);
    if ((_DWORD)v31)
    {
      v32 = (uint64_t)v15[1];
      v33 = *v30;
      v35 = *(unsigned int *)(v32 + 8);
      v34 = *(unsigned int *)(v32 + 12);
      v36 = v34 + v31;
      if (v34 + v31 > v35)
      {
        v37 = v35 + (v35 >> 2);
        v38 = v37 >= 0x10 ? v37 + 1 : 16;
        v39 = v38 <= v36 ? v36 : v38;
        result = (uint64_t *)WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v32, v39);
        v34 = *(unsigned int *)(v32 + 12);
        if (v36 < v34)
        {
          __break(0xC471u);
          JUMPOUT(0x196593314);
        }
      }
      v40 = *(_QWORD *)v32 + 16 * v34;
      v41 = v33 + 16 * v31;
      do
      {
        v42 = *(_DWORD **)v33;
        if (*(_QWORD *)v33)
          ++*v42;
        *(_QWORD *)v40 = v42;
        *(_DWORD *)(v40 + 8) = *(_DWORD *)(v33 + 8);
        *(_WORD *)(v40 + 12) = *(_WORD *)(v33 + 12);
        v33 += 16;
        v40 += 16;
      }
      while (v33 != v41);
      *(_DWORD *)(v32 + 12) = v36;
    }
    v43 = v5 + 2;
    v5 = v4;
    if (v43 != v4)
    {
      v5 = v43;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  while (v5 != v7);
  return result;
}

const WebCore::CSSSelector *WebCore::Style::RuleSet::addRule(WebCore::Style::RuleSet *this, const WebCore::StyleRule *a2, unsigned __int16 a3, int a4)
{
  WTF::StringImpl *v5;
  const WebCore::CSSSelector *result;
  const WebCore::CSSSelector *v7[4];

  WebCore::Style::RuleData::RuleData(v7, a2, a3, a4, *((_DWORD *)this + 170), 0);
  WebCore::Style::RuleSet::addRule((uint64_t)this, v7, 0, 0, 0);
  result = v7[0];
  v7[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (const WebCore::CSSSelector *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v5);
    else
      --*(_DWORD *)result;
  }
  return result;
}

_DWORD *WebCore::Style::RuleSet::scopeRulesFor@<X0>(_DWORD *result@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  v3 = *((_DWORD *)a2 + 3) & 0x1FFFFF;
  if (v3 < result[199])
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v10 = result;
    v4 = *(_DWORD *)(*((_QWORD *)result + 98) + 4 * v3);
    if (v4)
    {
      while (1)
      {
        v5 = (v4 - 1);
        if (v10[195] <= v5)
          break;
        v6 = *((_QWORD *)v10 + 96);
        a2 = (WTF::StringImpl *)(v6 + 16 * v5);
        v7 = *(unsigned int *)(a3 + 12);
        if ((_DWORD)v7 == *(_DWORD *)(a3 + 8))
        {
          result = (_DWORD *)WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>> const&>(a3, (unint64_t)a2);
        }
        else
        {
          v8 = *(_QWORD *)a3;
          v9 = *(_DWORD **)a2;
          *v9 = **(_DWORD **)a2 + 1;
          *(_QWORD *)(v8 + 8 * v7) = v9;
          *(_DWORD *)(a3 + 12) = v7 + 1;
        }
        v4 = *(_DWORD *)(v6 + 16 * v5 + 8);
        if (!v4)
          return WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverse((_DWORD *)a3, a2);
      }
      __break(0xC471u);
    }
    else
    {
      return WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverse((_DWORD *)a3, a2);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

void WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(WebCore::Style::DynamicMediaQueryEvaluationChanges *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::Style::RuleSet **v6;
  uint64_t v7;
  WebCore::Style::RuleSet *v8;
  WTF *v9;
  void *v10;

  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v6 = (WebCore::Style::RuleSet **)*((_QWORD *)this + 1);
    v7 = 8 * v3;
    do
    {
      v8 = *v6;
      *v6 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v8, a2);
          WTF::fastFree(v9, v10);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  v4 = (WTF *)*((_QWORD *)this + 1);
  if ((WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)this + 24) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
}

uint64_t WTF::HashMap<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::HashTableTraits>::ensure<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&)::$_0>(uint64_t a1, uint64_t *a2, char **a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  int v27;
  uint64_t result;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int *v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  unint64_t v66;
  const WebCore::CSSSelector *v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int *i;
  int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  char v77;
  unsigned __int16 v78;
  const WebCore::CSSSelector *v79;
  WTF::StringImpl *v80;
  _DWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  int j;
  unsigned int v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int v120;
  int v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int v130;
  char v131;
  uint64_t v132;
  WTF *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  _QWORD *v139;
  char v140;
  _QWORD *v141;
  char **v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146[2];
  char v147;
  __int128 v148;
  __int128 v149;
  char v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  unsigned __int8 v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  WTF::StringImpl *v168;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = -1640531527;
  v12 = *a3;
  v13 = *((unsigned int *)a3 + 3);
  v136 = a1;
  v138 = a2;
  v142 = a3;
  v144 = a4;
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = (unint64_t *)*a3;
    do
    {
      v16 = *v15++;
      v17 = (v16 >> 5) & 0x7FFF800 ^ ((v11 + (unsigned __int16)v16) << 16) ^ (v11 + (unsigned __int16)v16);
      v18 = v17 + WORD2(v16) + (v17 >> 11);
      v19 = (v16 >> 37) & 0x7FFF800 ^ (v18 << 16);
      v11 = (v19 ^ v18) + ((v19 ^ v18) >> 11);
      v14 -= 8;
    }
    while (v14);
  }
  v20 = (v11 ^ (8 * v11)) + ((v11 ^ (8 * v11)) >> 5);
  v21 = (v20 ^ (4 * v20)) + ((v20 ^ (4 * v20)) >> 15);
  v22 = v21 ^ (v21 << 10);
  if (!v22)
    v22 = 0x800000;
  v23 = v22 & v10;
  v24 = v8 + 24 * (v22 & v10);
  v25 = *(_DWORD *)(v24 + 12);
  if (v25)
  {
    v140 = v9;
    v26 = 0;
    v27 = 1;
    while (1)
    {
      if (v25 == (_DWORD)v13)
      {
        result = memcmp(*(const void **)v24, v12, 8 * v13);
        if (!(_DWORD)result)
          break;
      }
      if (v25 == -1)
        v26 = (_QWORD *)v24;
      v23 = (v23 + v27) & v10;
      v24 = v8 + 24 * v23;
      v25 = *(_DWORD *)(v24 + 12);
      ++v27;
      if (!v25)
      {
        if (v26)
        {
          *v26 = 0;
          v26[1] = 0;
          v26[2] = 0;
          --*(_DWORD *)(*v138 - 16);
          v24 = (uint64_t)v26;
        }
        goto LABEL_18;
      }
    }
    if ((v140 & 1) != 0)
      v36 = 0;
    else
      v36 = *(_DWORD *)(v8 - 4);
    v123 = v136;
    v131 = 0;
    v132 = v8 + 24 * v36;
LABEL_168:
    *(_QWORD *)v123 = v24;
    *(_QWORD *)(v123 + 8) = v132;
    *(_BYTE *)(v123 + 16) = v131;
    return result;
  }
LABEL_18:
  v135 = v24;
  if ((char **)v24 != v142)
  {
    v29 = *(_DWORD *)(v24 + 12);
    v30 = *((_DWORD *)v142 + 3);
    if (v29 <= v30)
    {
      v31 = *(_DWORD *)(v24 + 8);
      if (v30 > v31)
      {
        if (v31)
        {
          if (v29)
            *(_DWORD *)(v24 + 12) = 0;
          v32 = *(WTF **)v24;
          if (*(_QWORD *)v24)
          {
            *(_QWORD *)v24 = 0;
            *(_DWORD *)(v24 + 8) = 0;
            WTF::fastFree(v32, a2);
          }
        }
        WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v24, *((unsigned int *)v142 + 3));
        v29 = *(_DWORD *)(v24 + 12);
      }
    }
    else
    {
      *(_DWORD *)(v24 + 12) = v30;
      v29 = v30;
    }
    v33 = *v142;
    v34 = *(char **)v24;
    if (v29)
    {
      memmove(v34, v33, 8 * v29);
      v35 = *(unsigned int *)(v24 + 12);
      v33 = *v142;
      v34 = *(char **)v24;
    }
    else
    {
      v35 = 0;
    }
    memcpy(&v34[8 * v35], &v33[8 * v35], 8 * *((unsigned int *)v142 + 3) - 8 * v35);
    *(_DWORD *)(v24 + 12) = *((_DWORD *)v142 + 3);
  }
  v38 = WTF::fastMalloc((WTF *)0x328);
  *(_DWORD *)v38 = 1;
  *(_OWORD *)(v38 + 8) = 0u;
  *(_OWORD *)(v38 + 24) = 0u;
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_QWORD *)(v38 + 72) = v38 + 88;
  *(_QWORD *)(v38 + 80) = 1;
  *(_QWORD *)(v38 + 120) = v38 + 136;
  *(_QWORD *)(v38 + 128) = 1;
  *(_QWORD *)(v38 + 168) = v38 + 184;
  *(_QWORD *)(v38 + 176) = 1;
  *(_QWORD *)(v38 + 216) = v38 + 232;
  *(_QWORD *)(v38 + 224) = 1;
  *(_QWORD *)(v38 + 264) = v38 + 280;
  *(_QWORD *)(v38 + 272) = 1;
  *(_QWORD *)(v38 + 312) = v38 + 328;
  *(_QWORD *)(v38 + 320) = 1;
  *(_QWORD *)(v38 + 360) = v38 + 376;
  *(_QWORD *)(v38 + 368) = 1;
  *(_QWORD *)(v38 + 408) = v38 + 424;
  *(_QWORD *)(v38 + 416) = 1;
  *(_QWORD *)(v38 + 645) = 0;
  *(_OWORD *)(v38 + 616) = 0u;
  *(_OWORD *)(v38 + 632) = 0u;
  *(_OWORD *)(v38 + 584) = 0u;
  *(_OWORD *)(v38 + 600) = 0u;
  *(_OWORD *)(v38 + 552) = 0u;
  *(_OWORD *)(v38 + 568) = 0u;
  *(_OWORD *)(v38 + 520) = 0u;
  *(_OWORD *)(v38 + 536) = 0u;
  *(_OWORD *)(v38 + 488) = 0u;
  *(_OWORD *)(v38 + 504) = 0u;
  *(_OWORD *)(v38 + 456) = 0u;
  *(_OWORD *)(v38 + 472) = 0u;
  *(_QWORD *)(v38 + 672) = 0;
  *(_DWORD *)(v38 + 680) = 0;
  *(_OWORD *)(v38 + 656) = 0u;
  *(_OWORD *)(v38 + 688) = 0u;
  *(_OWORD *)(v38 + 704) = 0u;
  *(_OWORD *)(v38 + 720) = 0u;
  *(_OWORD *)(v38 + 736) = 0u;
  *(_OWORD *)(v38 + 752) = 0u;
  *(_OWORD *)(v38 + 768) = 0u;
  *(_OWORD *)(v38 + 784) = 0u;
  *(_WORD *)(v38 + 800) = 0;
  v39 = (WTF::StringImpl *)WebCore::screenAtomData;
  if (WebCore::screenAtomData)
    *(_DWORD *)WebCore::screenAtomData += 2;
  v167 = 0;
  LOBYTE(v168) = 1;
  ++*(_DWORD *)v38;
  v146[0] = v38;
  v146[1] = (uint64_t)&v165;
  v147 = 0;
  v148 = 0uLL;
  v149 = 0uLL;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v154 = 0;
  v155 = 0;
  v153 = 0;
  v156 = 0;
  v160 = 0;
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v159 = 0;
  v157 = 0;
  v158 = 0;
  v165 = 0;
  v166 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v37);
    else
      *(_DWORD *)v39 -= 2;
  }
  v137 = v38;
  v40 = *(unsigned int *)(*(_QWORD *)v144 + 36);
  if (!(_DWORD)v40)
  {
LABEL_146:
    WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)v146, v37);
    v24 = v135;
    v123 = v136;
    result = *(_QWORD *)(v135 + 16);
    *(_QWORD *)(v135 + 16) = v137;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::Style::RuleSet::~RuleSet((WebCore::Style::RuleSet *)result, v122);
        result = WTF::fastFree(v133, v134);
        v24 = v135;
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
    v124 = *v138;
    if (*v138)
      v125 = *(_DWORD *)(v124 - 12) + 1;
    else
      v125 = 1;
    *(_DWORD *)(v124 - 12) = v125;
    v126 = *v138;
    if (*v138)
      v127 = *(_DWORD *)(v126 - 12);
    else
      v127 = 0;
    v128 = (*(_DWORD *)(v126 - 16) + v127);
    v129 = *(unsigned int *)(v126 - 4);
    if (v129 > 0x400)
    {
      if (v129 <= 2 * v128)
        goto LABEL_158;
    }
    else if (3 * v129 <= 4 * v128)
    {
      if (!(_DWORD)v129)
      {
        v130 = 8;
LABEL_161:
        result = WTF::HashTable<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v138, v130, v24);
        v24 = result;
        v126 = *v138;
        if (*v138)
          LODWORD(v129) = *(_DWORD *)(v126 - 4);
        else
          LODWORD(v129) = 0;
        goto LABEL_167;
      }
LABEL_158:
      v130 = (_DWORD)v129 << (6 * *(_DWORD *)(v126 - 12) >= (2 * v129));
      goto LABEL_161;
    }
LABEL_167:
    v132 = v126 + 24 * v129;
    v131 = 1;
    goto LABEL_168;
  }
  v41 = *(_QWORD **)(*(_QWORD *)v144 + 24);
  v139 = &v41[v40];
  v42 = v38;
LABEL_41:
  v141 = v41;
  v43 = (uint64_t **)*v41;
  v44 = *((unsigned int *)v43 + 3);
  if (!(_DWORD)v44)
    goto LABEL_145;
  v45 = *v43;
  v46 = (uint64_t)&(*v43)[v44];
  v145 = v46;
LABEL_43:
  v47 = *v45;
  v48 = *(_QWORD *)(*v45 + 16);
  if (!v48)
    goto LABEL_144;
  v49 = 0;
  v50 = 0;
LABEL_45:
  v51 = *(_DWORD *)(v42 + 680);
  v52 = v161;
  ++*(_DWORD *)v47;
  v53 = v166 & 0xFFE0000000000000 | (v50 << 16) | ((unint64_t)(v51 & 0x1FFFFF) << 32) | (unsigned __int16)v49;
  v165 = v47;
  v166 = v53;
  v54 = (int *)(v48 + 16 * (unsigned __int16)v49);
  v55 = *v54;
  if ((*v54 & 0x80000) == 0)
    goto LABEL_46;
  v57 = (v55 >> 4) & 0x1F;
  if (v57 != 1)
  {
    if ((*v54 & 0x1F0) == 0x80)
    {
      v121 = (v55 >> 9);
      v56 = 0x60000000000000;
      if ((v121 - 29) <= 0x33 && ((1 << (v121 - 29)) & 0x8000000020001) != 0)
        goto LABEL_60;
      if (v121 == 13)
        goto LABEL_60;
    }
    v56 = 0x60000000000000;
    if (v57 != 3)
      v56 = 0;
    v58 = v57 == 2;
    v59 = 0x40000000000000;
LABEL_58:
    if (v58)
      v56 = v59;
    goto LABEL_60;
  }
  v60 = *(_QWORD *)(v48 + 16 * (unsigned __int16)v49 + 8);
  v61 = *(_QWORD *)(v60 + 32);
  if (v61 == WebCore::starAtomData || v61 == WebCore::HTMLNames::xhtmlNamespaceURI)
  {
    v58 = v60 == WebCore::anyName;
    v56 = 0x80000000000000;
    v59 = 0x20000000000000;
    goto LABEL_58;
  }
LABEL_46:
  v56 = 0;
LABEL_60:
  v63 = v56 | v53 & 0xFF1FFFFFFFFFFFFFLL;
  v166 = v63;
  if (WebCore::Style::selectorCanMatchPseudoElement(v54, v37))
    v65 = 0x100000000000000;
  else
    v65 = 0;
  v66 = v65 | v63 & 0xFEFFFFFFFFFFFFFFLL;
  v166 = v66;
  if (WebCore::Style::computeContainsUncommonAttributeSelector((unsigned int *)v54, 1, v64))
    v68 = 0x200000000000000;
  else
    v68 = 0;
  v69 = v68 | v66 & 0xFDFFFFFFFFFFFFFFLL;
  v166 = v69;
  v70 = 3;
  for (i = v54; ; i += 4)
  {
    v72 = *i;
    v73 = (*i >> 9);
    v74 = v70 & 0xFFFFFFFD;
    if (v73 != 46)
      v74 = v70;
    if (v73 == 80)
      v75 = v70 & 0xFFFFFFFE;
    else
      v75 = v74;
    if ((*i & 0x1F0) == 0x80)
      v70 = v75;
    if ((v72 & 0xF) != 0)
      break;
    if ((v72 & 0x80000) != 0)
      goto LABEL_84;
LABEL_83:
    ;
  }
  if ((v72 & 0x80000) == 0 && (*i & 0xFu) <= 2 && v70 == 3)
  {
    v70 = 3;
    goto LABEL_83;
  }
LABEL_84:
  v166 = v69 & 0xF3FFFFFFFFFFFFFFLL | ((unint64_t)(v70 & 3) << 58);
  v77 = WebCore::Style::determinePropertyAllowlist((uint64_t)v54, v67);
  v78 = v166;
  v166 = ((unint64_t)(v52 != 0) << 62) | ((unint64_t)(v77 & 3) << 60) | v166 & 0xFFFFFFFFFFFFFFFLL | 0x8000000000000000;
  result = WebCore::SelectorFilter::collectHashes((WebCore::SelectorFilter *)(*(_QWORD *)(v165 + 16) + 16 * v78), v79);
  v167 = result;
  v168 = v80;
  if (!HIDWORD(v148))
    goto LABEL_85;
  v86 = HIDWORD(v148) - 1;
  v87 = v148;
  v88 = v148 + 32 * v86;
  v89 = v88 + 8;
  v90 = HIDWORD(v166);
  v91 = *(unsigned int *)(v88 + 20);
  if ((_DWORD)v91 != *(_DWORD *)(v88 + 16))
  {
    v92 = (uint64_t *)(*(_QWORD *)v89 + 8 * v91);
LABEL_109:
    *v92 = *(_QWORD *)&v90 & 0x1FFFFFLL;
    *(_DWORD *)(v89 + 12) = v91 + 1;
    v98 = v87 + 32 * v86;
    v99 = v165;
    ++*(_DWORD *)v165;
    v102 = *(_QWORD *)(v98 + 24);
    v101 = (uint64_t *)(v98 + 24);
    v100 = v102;
    if (v102
      || (v103 = WTF::fastZeroedMalloc((WTF *)0x50),
          *v101 = v103 + 16,
          *(_DWORD *)(v103 + 12) = 8,
          *(_DWORD *)(*v101 - 8) = 7,
          *(_DWORD *)(*v101 - 16) = 0,
          *(_DWORD *)(*v101 - 12) = 0,
          (v100 = *v101) != 0))
    {
      v104 = *(_DWORD *)(v100 - 8);
    }
    else
    {
      v104 = 0;
    }
    v46 = v145;
    v105 = 0;
    v106 = (~(v99 << 32) + v99) ^ ((unint64_t)(~(v99 << 32) + v99) >> 22);
    v107 = 9 * ((v106 + ~(v106 << 13)) ^ ((v106 + ~(v106 << 13)) >> 8));
    v108 = (v107 ^ (v107 >> 15)) + ~((v107 ^ (v107 >> 15)) << 27);
    v109 = (v108 >> 31) ^ v108;
    for (j = 1; ; ++j)
    {
      v111 = v109 & v104;
      v112 = (uint64_t *)(v100 + 8 * v111);
      v113 = *v112;
      if (!*v112)
        break;
      if (v113 != -1)
      {
        v112 = v105;
        if (v113 == v99)
        {
          if (*(_DWORD *)v99 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v99, v80);
          else
            --*(_DWORD *)v99;
LABEL_85:
          v42 = v146[0];
          WebCore::Style::RuleSet::addRule(v146[0], &v165, v156, (WTF *)v160, HIDWORD(v160));
          v81 = (_DWORD *)v165;
          v165 = 0;
          if (v81)
          {
            if (*v81 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v81, v37);
            else
              --*v81;
          }
          ++v50;
          v48 = *(_QWORD *)(v47 + 16);
          v82 = 16 * v49;
          do
          {
            v83 = *(_DWORD *)(v48 + v82);
            v82 += 16;
          }
          while ((v83 & 0x80000) == 0);
          v84 = v48 + v82;
          if ((v83 & 0x20000) != 0)
            v84 = 0;
          v85 = v84 - v48;
          if ((v83 & 0x20000) != 0)
            v49 = -1;
          else
            v49 = v85 >> 4;
          if (v49 == -1)
          {
LABEL_144:
            if (++v45 != (uint64_t *)v46)
              goto LABEL_43;
LABEL_145:
            v41 = v141 + 1;
            if (v141 + 1 == v139)
              goto LABEL_146;
            goto LABEL_41;
          }
          goto LABEL_45;
        }
      }
      v109 = j + v111;
      v105 = v112;
    }
    if (v105)
    {
      *v105 = 0;
      --*(_DWORD *)(*v101 - 16);
      *v105 = v99;
    }
    else
    {
      *v112 = v99;
    }
    v114 = *v101;
    if (*v101)
      v115 = *(_DWORD *)(v114 - 12) + 1;
    else
      v115 = 1;
    *(_DWORD *)(v114 - 12) = v115;
    v116 = *v101;
    if (*v101)
      v117 = *(_DWORD *)(v116 - 12);
    else
      v117 = 0;
    v118 = (*(_DWORD *)(v116 - 16) + v117);
    v119 = *(unsigned int *)(v116 - 4);
    if (v119 > 0x400)
    {
      if (v119 > 2 * v118)
        goto LABEL_85;
    }
    else
    {
      if (3 * v119 > 4 * v118)
        goto LABEL_85;
      if (!(_DWORD)v119)
      {
        v120 = 8;
LABEL_127:
        WTF::HashTable<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>,WTF::HashTraits<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>,WTF::HashTraits<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>>::rehash(v101, v120);
        goto LABEL_85;
      }
    }
    v120 = (_DWORD)v119 << (6 * *(_DWORD *)(v116 - 12) >= (2 * v119));
    goto LABEL_127;
  }
  v143 = HIDWORD(v166);
  v93 = v91 + (v91 >> 2);
  if (v93 >= 0x10)
    v94 = v93 + 1;
  else
    v94 = 16;
  if (v94 <= v91 + 1)
    v95 = v91 + 1;
  else
    v95 = v94;
  if (!(v95 >> 29))
  {
    v96 = *(void **)v89;
    v97 = (void *)WTF::fastMalloc((WTF *)(8 * v95));
    *(_DWORD *)(v89 + 8) = v95;
    *(_QWORD *)v89 = v97;
    memcpy(v97, v96, 8 * v91);
    if (v96)
    {
      if (*(void **)v89 == v96)
      {
        *(_QWORD *)v89 = 0;
        *(_DWORD *)(v89 + 8) = 0;
      }
      WTF::fastFree((WTF *)v96, v80);
    }
    v91 = *(unsigned int *)(v89 + 12);
    v92 = (uint64_t *)(*(_QWORD *)v89 + 8 * v91);
    v90 = v143;
    goto LABEL_109;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t a1, _DWORD **a2, unint64_t a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  _DWORD *v9;

  result = a1 + 16;
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 1;
  if (a3 < 2)
  {
    if (!a3)
      return a1;
    v7 = 0;
LABEL_4:
    v8 = 8 * a3;
    do
    {
      v9 = *a2;
      if (*a2)
        ++*v9;
      *(_QWORD *)(result + 8 * v7) = v9;
      ++a2;
      ++v7;
      v8 -= 8;
    }
    while (v8);
    *(_DWORD *)(a1 + 12) = v7;
    return a1;
  }
  if (!(a3 >> 29))
  {
    result = WTF::fastMalloc((WTF *)(8 * a3));
    *(_DWORD *)(a1 + 8) = a3;
    *(_QWORD *)a1 = result;
    v7 = *(_DWORD *)(a1 + 12);
    goto LABEL_4;
  }
  __break(0xC471u);
  return result;
}

WebCore::Style::RuleSet **WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>::~Ref(WebCore::Style::RuleSet **a1, void *a2)
{
  WebCore::Style::RuleSet *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

_DWORD *WebCore::Style::shrinkMapVectorsToFit(_DWORD *result, void *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  WTF *v9;
  WTF *v10;
  _QWORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  WTF *__src;

  if (!result)
  {
    v2 = 0;
    v3 = 0;
LABEL_3:
    v4 = &result[4 * v3];
    goto LABEL_4;
  }
  v3 = *(result - 1);
  v4 = &result[4 * v3];
  if (!*(result - 3))
  {
    v2 = &result[4 * v3];
    goto LABEL_3;
  }
  v2 = result;
  if ((_DWORD)v3)
  {
    v14 = 16 * v3;
    v2 = result;
    while ((unint64_t)(*v2 + 1) <= 1)
    {
      v2 += 2;
      v14 -= 16;
      if (!v14)
      {
        v2 = v4;
        break;
      }
    }
  }
LABEL_4:
  if (result)
    v5 = &result[4 * *(result - 1)];
  else
    v5 = 0;
  while (v2 != v5)
  {
    v6 = v2[1];
    v8 = *(_DWORD *)(v6 + 8);
    v7 = *(unsigned int *)(v6 + 12);
    if (v8 > v7)
    {
      v9 = *(WTF **)v6;
      v10 = *(WTF **)v6;
      if (!(_DWORD)v7)
        goto LABEL_9;
      if (v8 >= v7)
        v13 = *(_DWORD *)(v6 + 12);
      else
        v13 = *(_DWORD *)(v6 + 8);
      if (v13 < 2)
      {
        v15 = *(unsigned int *)(v6 + 12);
        __src = *(WTF **)v6;
        WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(v2[1], v7);
        v9 = __src;
        result = *(_DWORD **)v6;
        v10 = __src;
        if (*(WTF **)v6 != __src)
        {
          result = memcpy(result, __src, 32 * v15);
          v9 = __src;
          v10 = *(WTF **)v6;
        }
LABEL_9:
        if ((WTF *)(v6 + 16) != v9 && v9 != 0)
        {
          if (v10 == v9)
          {
            *(_QWORD *)v6 = 0;
            *(_DWORD *)(v6 + 8) = 0;
          }
          result = (_DWORD *)WTF::fastFree(v9, a2);
          v10 = *(WTF **)v6;
        }
        if (!v10)
        {
          *(_QWORD *)v6 = v6 + 16;
          *(_DWORD *)(v6 + 8) = 1;
        }
        goto LABEL_16;
      }
      *(_DWORD *)(v6 + 8) = v7;
      result = (_DWORD *)WTF::fastRealloc(v9, (void *)(32 * v7));
      *(_QWORD *)v6 = result;
    }
LABEL_16:
    v12 = v2 + 2;
    v2 = v4;
    if (v12 != v4)
    {
      v2 = v12;
      while ((unint64_t)(*v2 + 1) <= 1)
      {
        v2 += 2;
        if (v2 == v4)
        {
          v2 = v4;
          break;
        }
      }
    }
  }
  return result;
}

_DWORD *WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverse(_DWORD *result, WTF::StringImpl *a2)
{
  unint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  LODWORD(v2) = result[3];
  if (v2 >= 2)
  {
    v3 = result;
    v4 = 0;
    v5 = 0;
    do
    {
      if (v5 >= v2 || (v6 = v4 + (v2 - 1), v6 >= v2))
      {
        __break(0xC471u);
        JUMPOUT(0x19659431CLL);
      }
      v7 = *(_QWORD *)v3;
      v8 = *(_QWORD *)(*(_QWORD *)v3 + 8 * v5);
      *(_QWORD *)(*(_QWORD *)v3 + 8 * v5) = 0;
      v9 = *(_QWORD *)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = 0;
      v10 = *(_DWORD **)(v7 + 8 * v5);
      *(_QWORD *)(v7 + 8 * v5) = v9;
      if (v10)
      {
        if (*v10 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v10, a2);
        else
          --*v10;
      }
      result = *(_DWORD **)(v7 + 8 * v6);
      *(_QWORD *)(v7 + 8 * v6) = v8;
      if (result)
      {
        if (*result == 1)
          result = (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          --*result;
      }
      ++v5;
      v2 = v3[3];
      --v4;
    }
    while (v5 < v2 >> 1);
  }
  return result;
}

_DWORD *WebCore::Style::RuleSetBuilder::addChildRules(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD **v4;
  uint64_t v5;
  _DWORD *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *(_DWORD ***)a2;
    v5 = 8 * v2;
    do
    {
      if (*((_BYTE *)v3 + 160))
        break;
      v6 = *v4;
      *v6 = **v4 + 1;
      v8 = v6;
      WebCore::Style::RuleSetBuilder::addChildRule(v3, &v8);
      result = v8;
      v8 = 0;
      if (result)
      {
        if (*result == 1)
          result = (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v7);
        else
          --*result;
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

WTF::StringImpl *WebCore::Style::RuleSetBuilder::addChildRule(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  int v23;
  char v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  const WebCore::CSSSelectorList *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;

  v2 = result;
  v3 = *(_QWORD *)a2;
  if ((*(_BYTE *)(*(_QWORD *)a2 + 4) & 0x1F) != 1)
  {
    switch(*(_BYTE *)(*(_QWORD *)a2 + 4) & 0x1F)
    {
      case 4:
        *(_QWORD *)a2 = 0;
        if (!WebCore::Style::RuleSetBuilder::MediaQueryCollector::pushAndEvaluate((uint64_t)result + 8, (unsigned __int8 **)(v3 + 24))|| (v5 = *(unsigned int *)(v3 + 20), !(_DWORD)v5))
        {
          result = (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::MediaQueryCollector::pop((uint64_t)v2 + 8, (void *)(v3 + 24));
          goto LABEL_4;
        }
        v6 = *(WTF::StringImpl ***)(v3 + 8);
        v7 = 8 * v5;
        do
        {
          if (*((_BYTE *)v2 + 160))
            break;
          v8 = *v6;
          *(_DWORD *)v8 = *(_DWORD *)*v6 + 1;
          v49 = v8;
          WebCore::Style::RuleSetBuilder::addChildRule(v2, &v49);
          v10 = v49;
          v49 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v10, v9);
            else
              --*(_DWORD *)v10;
          }
          ++v6;
          v7 -= 8;
        }
        while (v7);
        result = (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::MediaQueryCollector::pop((uint64_t)v2 + 8, (void *)(v3 + 24));
LABEL_19:
        if (!v3)
          return result;
        goto LABEL_4;
      case 5:
      case 7:
      case 0xB:
      case 0xE:
      case 0x13:
      case 0x15:
        if (!*(_QWORD *)result && *((_DWORD *)result + 9))
          *((_BYTE *)result + 160) = 1;
        if (!*((_QWORD *)result + 8))
          return result;
        ++*(_DWORD *)v3;
        v49 = (WTF::StringImpl *)v3;
        v11 = *((_DWORD *)result + 26);
        v50 = v11;
        v12 = *((unsigned int *)result + 39);
        if ((_DWORD)v12 == *((_DWORD *)result + 38))
        {
          v13 = WTF::Vector<WebCore::Style::RuleSet::ResolverMutatingRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result + 144, v12 + 1, (unint64_t)&v49);
          v15 = *((unsigned int *)v2 + 39);
          v16 = *((_QWORD *)v2 + 18) + 16 * v15;
          v17 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v16 = v17;
          *(_DWORD *)(v16 + 8) = *(_DWORD *)(v13 + 8);
          result = v49;
          *((_DWORD *)v2 + 39) = v15 + 1;
          v49 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              return (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v14);
            else
              --*(_DWORD *)result;
          }
        }
        else
        {
          v18 = *((_QWORD *)result + 18) + 16 * v12;
          *(_QWORD *)v18 = v3;
          *(_DWORD *)(v18 + 8) = v11;
          *((_DWORD *)result + 39) = v12 + 1;
        }
        return result;
      case 6:
        result = *(WTF::StringImpl **)result;
        if (!*(_QWORD *)v2)
          return result;
        ++*(_DWORD *)v3;
        result = (WTF::StringImpl *)WebCore::Style::RuleSet::addPageRule(result, v3);
        goto LABEL_4;
      case 0xC:
        *(_QWORD *)a2 = 0;
        if (!*(_BYTE *)(v3 + 32))
          goto LABEL_4;
        v19 = *(unsigned int *)(v3 + 20);
        if (!(_DWORD)v19)
          goto LABEL_4;
        v20 = *(WTF::StringImpl ***)(v3 + 8);
        v21 = 8 * v19;
        do
        {
          if (*((_BYTE *)v2 + 160))
            break;
          v22 = *v20;
          *(_DWORD *)v22 = *(_DWORD *)*v20 + 1;
          v49 = v22;
          WebCore::Style::RuleSetBuilder::addChildRule(v2, &v49);
          result = v49;
          v49 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
            else
              --*(_DWORD *)result;
          }
          ++v20;
          v21 -= 8;
        }
        while (v21);
        goto LABEL_19;
      case 0x10:
      case 0x11:
        if (!*(_QWORD *)result && *((_DWORD *)result + 9))
          *((_BYTE *)result + 160) = 1;
        *(_QWORD *)a2 = 0;
        v23 = *(_DWORD *)(v3 + 40);
        if ((*(_BYTE *)(v3 + 4) & 0x1F) == 0x11)
        {
          if (v23 == 1)
          {
            result = WebCore::Style::RuleSetBuilder::registerLayers(result, *(_QWORD *)(v3 + 24), *(_DWORD *)(v3 + 36));
            goto LABEL_4;
          }
        }
        else if (!v23)
        {
          WebCore::Style::RuleSetBuilder::pushCascadeLayer(result, (uint64_t *)(v3 + 24));
          WebCore::Style::RuleSetBuilder::addChildRules(v2, v3 + 8);
          if (!*(_DWORD *)(v3 + 40))
          {
            result = (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::popCascadeLayer((unsigned int *)v2, (WTF::StringImpl *)*(unsigned int *)(v3 + 36));
            goto LABEL_4;
          }
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_103:
        __break(0xC471u);
        JUMPOUT(0x1965949D8);
      case 0x12:
        *(_QWORD *)a2 = 0;
        v29 = *((_DWORD *)result + 33);
        v30 = *(WTF::StringImpl **)result;
        if (*(_QWORD *)result)
        {
          ++*(_DWORD *)v3;
          v49 = (WTF::StringImpl *)v3;
          v50 = v29;
          v31 = *((unsigned int *)v30 + 187);
          if ((_DWORD)v31 == *((_DWORD *)v30 + 186))
          {
            WTF::Vector<WebCore::Style::RuleSet::ScopeAndParent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleSet::ScopeAndParent>((uint64_t)v30 + 736, (unint64_t)&v49);
            v33 = v49;
            v49 = 0;
            if (v33)
            {
              if (*(_DWORD *)v33 == 1)
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v33, v32);
              else
                --*(_DWORD *)v33;
            }
          }
          else
          {
            v48 = *((_QWORD *)v30 + 92) + 16 * v31;
            *(_QWORD *)v48 = v3;
            *(_DWORD *)(v48 + 8) = v29;
            *((_DWORD *)v30 + 187) = v31 + 1;
          }
          *((_DWORD *)v2 + 33) = *(_DWORD *)(*(_QWORD *)v2 + 748);
        }
        result = (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::addChildRules(v2, v3 + 8);
        if (*(_QWORD *)v2)
          *((_DWORD *)v2 + 33) = v29;
        goto LABEL_95;
      case 0x16:
        if (!*(_QWORD *)result)
          return result;
        ++*(_DWORD *)v3;
        result = (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::addStyleRule((uint64_t)result, v3);
        goto LABEL_4;
      case 0x17:
        *(_QWORD *)a2 = 0;
        v26 = *((_DWORD *)result + 34);
        v27 = *(WTF::StringImpl **)result;
        if (*(_QWORD *)result)
        {
          ++*(_DWORD *)v3;
          v49 = (WTF::StringImpl *)v3;
          v50 = v26;
          v28 = *((unsigned int *)v27 + 195);
          if ((_DWORD)v28 == *((_DWORD *)v27 + 194))
          {
            WTF::Vector<WebCore::Style::RuleSet::ScopeAndParent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleSet::ScopeAndParent>((uint64_t)v27 + 768, (unint64_t)&v49);
          }
          else
          {
            v34 = v28 + 1;
            v35 = *((_QWORD *)v27 + 96);
            v49 = 0;
            v36 = v35 + 16 * v28;
            *(_QWORD *)v36 = v3;
            *(_DWORD *)(v36 + 8) = v26;
            *((_DWORD *)v27 + 195) = v34;
          }
          v37 = v49;
          v49 = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v37, a2);
            else
              --*(_DWORD *)v37;
          }
          *((_DWORD *)v2 + 34) = *(_DWORD *)(*(_QWORD *)v2 + 780);
        }
        if (*((_BYTE *)v2 + 128))
        {
          v38 = *((unsigned int *)v2 + 31);
          if ((_DWORD)v38)
            v39 = *(const WebCore::CSSSelectorList **)(*((_QWORD *)v2 + 14) + 8 * v38 - 8);
          else
            v39 = 0;
          if (*(_QWORD *)(v3 + 40))
          {
            WebCore::CSSSelectorParser::resolveNestingParent((WebCore::CSSSelectorParser *)(v3 + 40), v39, &v49);
            v40 = *(WTF::StringImpl **)(v3 + 24);
            v41 = v49;
            v49 = 0;
            *(_QWORD *)(v3 + 24) = v41;
            if (v40)
            {
              WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(v3 + 24, v40);
              v42 = v49;
              v49 = 0;
              if (v42)
                WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v49, v42);
            }
          }
          if (*(_QWORD *)(v3 + 48))
          {
            WebCore::CSSSelectorParser::resolveNestingParent((WebCore::CSSSelectorParser *)(v3 + 48), (const WebCore::CSSSelectorList *)(v3 + 24), &v49);
            v43 = *(WTF::StringImpl **)(v3 + 32);
            v44 = v49;
            v49 = 0;
            *(_QWORD *)(v3 + 32) = v44;
            if (v43)
            {
              WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(v3 + 32, v43);
              v45 = v49;
              v49 = 0;
              if (v45)
                WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v49, v45);
            }
          }
        }
        if (*(_QWORD *)(v3 + 24))
        {
          v49 = (WTF::StringImpl *)(v3 + 24);
          v46 = *((unsigned int *)v2 + 31);
          if ((_DWORD)v46 == *((_DWORD *)v2 + 30))
          {
            WTF::Vector<__CTFont const*,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,__CTFont const*>((uint64_t)v2 + 112, (unint64_t)&v49);
          }
          else
          {
            *(_QWORD *)(*((_QWORD *)v2 + 14) + 8 * v46) = v3 + 24;
            *((_DWORD *)v2 + 31) = v46 + 1;
          }
        }
        result = (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::addChildRules(v2, v3 + 8);
        if (!*(_QWORD *)(v3 + 24))
          goto LABEL_89;
        v47 = *((_DWORD *)v2 + 31);
        if (!v47)
          goto LABEL_103;
        *((_DWORD *)v2 + 31) = v47 - 1;
LABEL_89:
        if (*(_QWORD *)v2)
          *((_DWORD *)v2 + 34) = v26;
LABEL_95:
        v4 = *(_DWORD *)v3 - 1;
        if (*(_DWORD *)v3 != 1)
          goto LABEL_5;
        result = (WTF::StringImpl *)v3;
        return (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v14);
      case 0x18:
        v24 = *((_BYTE *)result + 140);
        *((_BYTE *)result + 140) = 1;
        *(_QWORD *)a2 = 0;
        result = (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::addChildRules(result, v3 + 8);
        if (*(_DWORD *)v3 == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v3, v25);
        else
          --*(_DWORD *)v3;
        *((_BYTE *)v2 + 140) = v24;
        return result;
      default:
        return result;
    }
  }
  if (!*(_QWORD *)result)
    return result;
  ++*(_DWORD *)v3;
  result = WebCore::Style::RuleSetBuilder::addStyleRuleWithSelectorList(result, (const WebCore::CSSSelector *)(v3 + 16), (WTF *)v3);
LABEL_4:
  v4 = *(_DWORD *)v3 - 1;
  if (*(_DWORD *)v3 == 1)
    return (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v3, a2);
LABEL_5:
  *(_DWORD *)v3 = v4;
  return result;
}

char **WebCore::Style::RuleSetBuilder::addStyleRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const WebCore::CSSSelectorList *v5;
  WebCore::CSSSelector *v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  char **result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD **v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  char **v26;
  WTF::StringImpl *v27;
  unsigned int *v28;

  if (!*(_BYTE *)(a1 + 128))
    goto LABEL_23;
  v4 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v4)
    v5 = *(const WebCore::CSSSelectorList **)(*(_QWORD *)(a1 + 112) + 8 * v4 - 8);
  else
    v5 = 0;
  v6 = *(WebCore::CSSSelector **)(a2 + 48);
  if (v6)
  {
    while ((WebCore::forEachTagSelector<WebCore::CSSSelectorList::hasExplicitNestingParent(void)::$_0>(v6) & 1) == 0)
    {
      do
      {
        v8 = *(_DWORD *)v6;
        v6 = (WebCore::CSSSelector *)((char *)v6 + 16);
        v7 = v8;
      }
      while ((v8 & 0x80000) == 0);
      if ((v7 & 0x20000) != 0)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    if (!v5)
      goto LABEL_23;
  }
  WebCore::CSSSelectorParser::resolveNestingParent((WebCore::CSSSelectorParser *)(a2 + 48), v5, &v27);
  v9 = *(WTF::StringImpl **)(a2 + 16);
  v10 = v27;
  v27 = 0;
  *(_QWORD *)(a2 + 16) = v10;
  if (v9)
    WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()(a2 + 16, v9);
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 - 8);
    if (v12)
    {
      v13 = v11 + 24 * v12;
      do
      {
        v14 = *(unsigned int **)(v13 - 8);
        *(_QWORD *)(v13 - 8) = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            v28 = v14;
            WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v28);
          }
        }
        v13 -= 24;
      }
      while (v13 != v11);
    }
    WTF::fastFree((WTF *)(v11 - 16), v9);
  }
  v17 = v27;
  v27 = 0;
  if (v17)
    WTF::UniqueArrayMaker<false,WebCore::CSSSelector>::UniqueArrayElement::Deleter::operator()((uint64_t)&v27, v17);
LABEL_23:
  WebCore::Style::RuleSetBuilder::addStyleRuleWithSelectorList((WTF *)a1, (const WebCore::CSSSelector *)(a2 + 16), (WTF *)a2);
  result = (char **)(a1 + 112);
  v28 = (unsigned int *)(a2 + 16);
  v19 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v19 == *(_DWORD *)(a1 + 120))
  {
    result = (char **)WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v19 + 1, (unint64_t)&v28);
    v19 = *(unsigned int *)(a1 + 124);
    *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v19) = *result;
  }
  else
  {
    *(_QWORD *)&(*result)[8 * v19] = a2 + 16;
  }
  v20 = v19 + 1;
  *(_DWORD *)(a1 + 124) = v20;
  v21 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v21)
  {
    v22 = *(_DWORD ***)(a2 + 32);
    v23 = 8 * v21;
    do
    {
      v24 = *v22;
      *v24 = **v22 + 1;
      v26 = (char **)v24;
      WebCore::Style::RuleSetBuilder::addChildRule(a1, &v26);
      result = v26;
      v26 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (char **)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v25);
        else
          --*(_DWORD *)result;
      }
      ++v22;
      v23 -= 8;
    }
    while (v23);
    v20 = *(_DWORD *)(a1 + 124);
  }
  if (v20)
    *(_DWORD *)(a1 + 124) = v20 - 1;
  else
    __break(0xC471u);
  return result;
}

WTF::StringImpl *WebCore::Style::RuleSetBuilder::registerLayers(WTF::StringImpl *result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  if (a3)
  {
    v3 = a2;
    v4 = result;
    v5 = a2 + 16 * a3;
    do
    {
      result = (WTF::StringImpl *)WebCore::Style::RuleSetBuilder::pushCascadeLayer(v4, (uint64_t *)v3);
      if (*(_QWORD *)v4)
      {
        v7 = *(_DWORD *)(v3 + 12);
        if (v7 <= 1)
          v8 = 1;
        else
          v8 = v7;
        v9 = *((unsigned int *)v4 + 23);
        do
        {
          if (!(_DWORD)v9)
            goto LABEL_18;
          v10 = *((_QWORD *)v4 + 10) + 8 * v9;
          result = *(WTF::StringImpl **)(v10 - 8);
          *(_QWORD *)(v10 - 8) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
            else
              *(_DWORD *)result -= 2;
          }
          *((_DWORD *)v4 + 23) = v9 - 1;
          v11 = *((_DWORD *)v4 + 26) - 1;
          if (*(_DWORD *)(*(_QWORD *)v4 + 700) <= v11)
          {
LABEL_18:
            __break(0xC471u);
            JUMPOUT(0x196594D18);
          }
          *((_DWORD *)v4 + 26) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 688) + 24 * v11 + 16);
          --v9;
          --v8;
        }
        while (v8);
      }
      v3 += 16;
    }
    while (v3 != v5);
  }
  return result;
}

_QWORD *WebCore::Style::RuleSetBuilder::pushCascadeLayer(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  WTF::AtomStringImpl *v47;
  WTF::StringImpl *v48;
  WTF::AtomStringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  int v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF *v57;
  uint64_t v58;
  _DWORD **v59;
  uint64_t v60;
  _DWORD *v61;
  uint64_t v62;
  unsigned int v63;
  const void *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  int v80;
  WTF::StringImpl *v81;
  WTF::AtomStringImpl *v82;
  unsigned int *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  WTF::AtomStringImpl *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  WTF *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF *v113;
  unsigned int *v115;
  WTF *v116;
  _QWORD *v117;
  int v118;
  unsigned int *v119;
  unsigned int *v120;
  WTF *v121;
  uint64_t *v122;
  WTF::AtomStringImpl *v123;
  int v124;
  unsigned int v125;
  int v126;
  __int16 v127;
  _BYTE v128[40];
  WTF::StringImpl *v129[6];

  v129[4] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v2 = *result;
  if (!*result)
    return result;
  v3 = result;
  v4 = result[12];
  v122 = result + 12;
  v117 = result;
  if (!v4 || !*(_DWORD *)(v4 - 12))
  {
    v5 = *(_DWORD *)(v2 + 700);
    if (v5)
    {
      v6 = 0;
      v7 = *(unsigned int **)(v2 + 688);
      v115 = &v7[6 * v5];
      while (1)
      {
        v8 = *v122;
        if (*v122
          || (WTF::HashTable<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>>,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v122, 8u, 0), (v8 = *v122) != 0))
        {
          v9 = *(_DWORD *)(v8 - 8);
        }
        else
        {
          v9 = 0;
        }
        v10 = *(unint64_t **)v7;
        v120 = v7;
        v11 = v7[3];
        v12 = -1640531527;
        if ((_DWORD)v11)
        {
          v13 = 8 * v11;
          v14 = v10;
          do
          {
            v15 = *v14++;
            v16 = (v15 >> 5) & 0x7FFF800 ^ ((v12 + (unsigned __int16)v15) << 16) ^ (v12
                                                                                                + (unsigned __int16)v15);
            v17 = v16 + WORD2(v15) + (v16 >> 11);
            v18 = (v15 >> 37) & 0x7FFF800 ^ (v17 << 16);
            v12 = (v18 ^ v17) + ((v18 ^ v17) >> 11);
            v13 -= 8;
          }
          while (v13);
        }
        v19 = v6 + 1;
        v20 = (v12 ^ (8 * v12)) + ((v12 ^ (8 * v12)) >> 5);
        v21 = (v20 ^ (4 * v20)) + ((v20 ^ (4 * v20)) >> 15);
        v22 = v21 ^ (v21 << 10);
        if (!v22)
          v22 = 0x800000;
        v23 = v22 & v9;
        v24 = v8 + 24 * (v22 & v9);
        v25 = *(_DWORD *)(v24 + 12);
        v118 = v19;
        if (v25)
        {
          v26 = 0;
          v27 = 1;
          while (v25 != (_DWORD)v11 || memcmp(*(const void **)v24, v10, 8 * v11))
          {
            if (v25 == -1)
              v26 = (_QWORD *)v24;
            v23 = (v23 + v27) & v9;
            v24 = v8 + 24 * v23;
            v25 = *(_DWORD *)(v24 + 12);
            ++v27;
            if (!v25)
            {
              v19 = v118;
              if (v26)
              {
                *v26 = 0;
                v26[1] = 0;
                v26[2] = 0;
                --*(_DWORD *)(*v122 - 16);
                v24 = (uint64_t)v26;
              }
              goto LABEL_22;
            }
          }
          goto LABEL_33;
        }
LABEL_22:
        WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v24, v120);
        *(_DWORD *)(v24 + 16) = v19;
        v28 = *v122;
        v29 = *v122 ? *(_DWORD *)(v28 - 12) + 1 : 1;
        *(_DWORD *)(v28 - 12) = v29;
        v30 = *v122;
        v31 = *v122 ? *(_DWORD *)(v30 - 12) : 0;
        v32 = (*(_DWORD *)(v30 - 16) + v31);
        v33 = *(unsigned int *)(v30 - 4);
        if (v33 > 0x400)
          break;
        if (3 * v33 <= 4 * v32)
        {
          if ((_DWORD)v33)
            goto LABEL_29;
          v34 = 8;
          goto LABEL_32;
        }
LABEL_33:
        v7 = v120 + 6;
        v3 = v117;
        v6 = v118;
        if (v120 + 6 == v115)
          goto LABEL_40;
      }
      if (v33 > 2 * v32)
        goto LABEL_33;
LABEL_29:
      v34 = (_DWORD)v33 << (6 * *(_DWORD *)(v30 - 12) >= (2 * v33));
LABEL_32:
      WTF::HashTable<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>>,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v122, v34, v24);
      goto LABEL_33;
    }
  }
LABEL_40:
  v35 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v35)
  {
    if (v35 >> 29)
    {
      __break(0xC471u);
LABEL_151:
      JUMPOUT(0x1965956A4);
    }
    v113 = (WTF *)WTF::fastMalloc((WTF *)(8 * v35));
    v36 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v36)
    {
      v37 = 0;
      v38 = *a2;
      v39 = 8 * v36;
      do
      {
        v40 = *(_DWORD **)(v38 + v37);
        if (v40)
          *v40 += 2;
        *(_QWORD *)((char *)v113 + v37) = v40;
        v37 += 8;
      }
      while (v39 != v37);
    }
    goto LABEL_73;
  }
  v41 = WTF::cryptographicallyRandomNumber<unsigned long long>();
  v42 = 0;
  v43 = v41;
  do
  {
    ++v42;
    v44 = v43 > 9;
    v43 /= 0xAuLL;
  }
  while (v44);
  if (v42 < 0)
    goto LABEL_148;
  v45 = (v42 + 5);
  if (__OFADD__(v42, 5))
    goto LABEL_148;
  if (v45 <= 0x3F)
  {
    v46 = 0;
    qmemcpy(&v123, "anon_", 5);
    do
    {
      *((_BYTE *)&v129[3] + v46--) = (v41 % 0xA) | 0x30;
      v44 = v41 > 9;
      v41 /= 0xAuLL;
    }
    while (v44);
    if (v46 + 26 <= 25)
      memcpy((char *)&v123 + 5, (char *)&v129[3] + v46 + 1, -v46);
    WTF::AtomStringImpl::add();
    v3 = v117;
    goto LABEL_58;
  }
  WTF::tryFastCompactMalloc((WTF *)(v45 + 20));
  v49 = v123;
  if (!v123)
  {
LABEL_148:
    v129[0] = 0;
    goto LABEL_149;
  }
  v50 = 0;
  *(_DWORD *)v123 = 2;
  *((_DWORD *)v49 + 1) = v45;
  *((_QWORD *)v49 + 1) = (char *)v49 + 20;
  *((_QWORD *)v49 + 2) = 0x6E6F6E6100000004;
  *((_BYTE *)v49 + 24) = 95;
  do
  {
    v128[v50--] = (v41 % 0xA) | 0x30;
    v44 = v41 > 9;
    v41 /= 0xAuLL;
  }
  while (v44);
  if (v50 + 26 < 26)
    memcpy((char *)v49 + 25, &v128[v50 + 1], -v50);
  v3 = v117;
  WTF::AtomStringImpl::addSlowCase(v49, v48);
  v52 = *(_DWORD *)v49;
  v47 = v123;
  v129[0] = v123;
  v53 = v52 - 2;
  if (!v53)
  {
    WTF::StringImpl::destroy(v49, v51);
LABEL_58:
    v47 = v129[0];
    goto LABEL_66;
  }
  *(_DWORD *)v49 = v53;
LABEL_66:
  if (!v47)
  {
LABEL_149:
    __break(0xC471u);
    JUMPOUT(0x1965956B0);
  }
  v113 = (WTF *)WTF::fastMalloc((WTF *)8);
  v55 = v129[0];
  if (v129[0])
    *(_DWORD *)v129[0] += 2;
  *(_QWORD *)v113 = v55;
  v56 = v129[0];
  v129[0] = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, v54);
    else
      *(_DWORD *)v56 -= 2;
  }
  LODWORD(v35) = 1;
LABEL_73:
  v112 = v35;
  v119 = (unsigned int *)(v3 + 10);
  v57 = v113;
  v116 = (WTF *)((char *)v113 + 8 * v35);
  do
  {
    v58 = *((unsigned int *)v3 + 23);
    if ((_DWORD)v58 == *((_DWORD *)v3 + 22))
    {
      v59 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v119, v58 + 1, (unint64_t)v57);
      v58 = *((unsigned int *)v3 + 23);
      v60 = v3[10];
      v61 = *v59;
      if (*v59)
        *v61 += 2;
      *(_QWORD *)(v60 + 8 * v58) = v61;
    }
    else
    {
      v103 = *(_QWORD *)v119;
      v104 = *(_DWORD **)v57;
      if (*(_QWORD *)v57)
        *v104 += 2;
      *(_QWORD *)(v103 + 8 * v58) = v104;
    }
    *((_DWORD *)v3 + 23) = v58 + 1;
    v62 = v3[12];
    v121 = v57;
    if (v62
      || (WTF::HashTable<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>>,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v122, 8u, 0), (v62 = *v122) != 0))
    {
      v63 = *(_DWORD *)(v62 - 8);
    }
    else
    {
      v63 = 0;
    }
    v64 = (const void *)v3[10];
    v65 = *((unsigned int *)v3 + 23);
    v66 = -1640531527;
    if ((_DWORD)v65)
    {
      v67 = 8 * v65;
      v68 = (unint64_t *)v3[10];
      do
      {
        v69 = *v68++;
        v70 = (v69 >> 5) & 0x7FFF800 ^ ((v66 + (unsigned __int16)v69) << 16) ^ (v66 + (unsigned __int16)v69);
        v71 = v70 + WORD2(v69) + (v70 >> 11);
        v72 = (v69 >> 37) & 0x7FFF800 ^ (v71 << 16);
        v66 = (v72 ^ v71) + ((v72 ^ v71) >> 11);
        v67 -= 8;
      }
      while (v67);
    }
    v73 = (v66 ^ (8 * v66)) + ((v66 ^ (8 * v66)) >> 5);
    v74 = (v73 ^ (4 * v73)) + ((v73 ^ (4 * v73)) >> 15);
    v75 = v74 ^ (v74 << 10);
    if (!v75)
      v75 = 0x800000;
    v76 = v75 & v63;
    v77 = v62 + 24 * (v75 & v63);
    v78 = *(_DWORD *)(v77 + 12);
    if (v78)
    {
      v79 = 0;
      v80 = 1;
      while (v78 != (_DWORD)v65 || memcmp(*(const void **)v77, v64, 8 * v65))
      {
        if (v78 == -1)
          v79 = (_QWORD *)v77;
        v76 = (v76 + v80) & v63;
        v77 = v62 + 24 * v76;
        v78 = *(_DWORD *)(v77 + 12);
        ++v80;
        if (!v78)
        {
          v3 = v117;
          if (v79)
          {
            *v79 = 0;
            v79[1] = 0;
            v79[2] = 0;
            --*(_DWORD *)(*v122 - 16);
            v77 = (uint64_t)v79;
          }
          goto LABEL_95;
        }
      }
      v3 = v117;
      v95 = v121;
      goto LABEL_113;
    }
LABEL_95:
    WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v77, v119);
    v82 = 0;
    v83 = (unsigned int *)*v3;
    v84 = *((unsigned int *)v3 + 23);
    v123 = 0;
    v124 = 0;
    v125 = v84;
    if ((_DWORD)v84)
    {
      if (v84 >> 29)
      {
        __break(0xC471u);
        goto LABEL_151;
      }
      v82 = (WTF::AtomStringImpl *)WTF::fastMalloc((WTF *)(8 * v84));
      v124 = v84;
      v123 = v82;
      v105 = *((unsigned int *)v3 + 23);
      if ((_DWORD)v105)
      {
        v106 = 0;
        v107 = v3[10];
        v108 = 8 * v105;
        do
        {
          v109 = *(_DWORD **)(v107 + v106);
          if (v109)
            *v109 += 2;
          *(_QWORD *)((char *)v82 + v106) = v109;
          v106 += 8;
        }
        while (v108 != v106);
      }
    }
    v126 = *((_DWORD *)v3 + 26);
    v127 = 0;
    v85 = v83[175];
    if ((_DWORD)v85 != v83[174])
    {
      v91 = *((_QWORD *)v83 + 86) + 24 * v85;
      *(_QWORD *)v91 = v82;
      *(_DWORD *)(v91 + 8) = v84;
      *(_DWORD *)(v91 + 12) = v84;
      v92 = v126;
      *(_WORD *)(v91 + 20) = v127;
      *(_DWORD *)(v91 + 16) = v92;
      ++v83[175];
      goto LABEL_101;
    }
    v86 = WTF::Vector<WebCore::Style::RuleSet::CascadeLayer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v83 + 172, v85 + 1, (unint64_t)&v123);
    v87 = *((_QWORD *)v83 + 86) + 24 * v83[175];
    *(_QWORD *)v87 = 0;
    *(_QWORD *)(v87 + 8) = 0;
    v88 = *(_QWORD *)v86;
    *(_QWORD *)v86 = 0;
    *(_QWORD *)v87 = v88;
    LODWORD(v88) = *(_DWORD *)(v86 + 8);
    *(_DWORD *)(v86 + 8) = 0;
    *(_DWORD *)(v87 + 8) = v88;
    LODWORD(v88) = *(_DWORD *)(v86 + 12);
    *(_DWORD *)(v86 + 12) = 0;
    *(_DWORD *)(v87 + 12) = v88;
    LODWORD(v88) = *(_DWORD *)(v86 + 16);
    *(_WORD *)(v87 + 20) = *(_WORD *)(v86 + 20);
    *(_DWORD *)(v87 + 16) = v88;
    v89 = v125;
    v90 = v123;
    ++v83[175];
    if ((_DWORD)v89)
    {
      v101 = 8 * v89;
      do
      {
        v102 = *(WTF::StringImpl **)v90;
        *(_QWORD *)v90 = 0;
        if (v102)
        {
          if (*(_DWORD *)v102 == 2)
            WTF::StringImpl::destroy(v102, v81);
          else
            *(_DWORD *)v102 -= 2;
        }
        v90 = (WTF::AtomStringImpl *)((char *)v90 + 8);
        v101 -= 8;
      }
      while (v101);
      v90 = v123;
      if (!v123)
        goto LABEL_101;
LABEL_99:
      v123 = 0;
      v124 = 0;
      WTF::fastFree(v90, v81);
      goto LABEL_101;
    }
    if (v90)
      goto LABEL_99;
LABEL_101:
    *(_DWORD *)(v77 + 16) = *(_DWORD *)(*v3 + 700);
    v93 = v3[12];
    if (v93)
      v94 = *(_DWORD *)(v93 - 12) + 1;
    else
      v94 = 1;
    *(_DWORD *)(v93 - 12) = v94;
    v95 = v121;
    v96 = *v122;
    if (*v122)
      v97 = *(_DWORD *)(v96 - 12);
    else
      v97 = 0;
    v98 = (*(_DWORD *)(v96 - 16) + v97);
    v99 = *(unsigned int *)(v96 - 4);
    if (v99 <= 0x400)
    {
      if (3 * v99 > 4 * v98)
        goto LABEL_113;
      if ((_DWORD)v99)
LABEL_108:
        v100 = (_DWORD)v99 << (6 * *(_DWORD *)(v96 - 12) >= (2 * v99));
      else
        v100 = 8;
      v77 = WTF::HashTable<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>>,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v122, v100, v77);
      goto LABEL_113;
    }
    if (v99 <= 2 * v98)
      goto LABEL_108;
LABEL_113:
    *((_DWORD *)v3 + 26) = *(_DWORD *)(v77 + 16);
    v57 = (WTF *)((char *)v95 + 8);
  }
  while (v57 != v116);
  v110 = 0;
  do
  {
    v111 = *(WTF::StringImpl **)((char *)v113 + v110);
    *(_QWORD *)((char *)v113 + v110) = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, v81);
      else
        *(_DWORD *)v111 -= 2;
    }
    v110 += 8;
  }
  while (8 * v112 != v110);
  return (_QWORD *)WTF::fastFree(v113, v81);
}

unsigned int *WebCore::Style::RuleSetBuilder::popCascadeLayer(unsigned int *result, WTF::StringImpl *a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (*(_QWORD *)result)
  {
    v2 = result;
    if (a2 <= 1)
      v3 = 1;
    else
      v3 = a2;
    v4 = result[23];
    do
    {
      if (!(_DWORD)v4)
        goto LABEL_15;
      v5 = *((_QWORD *)v2 + 10) + 8 * v4;
      result = *(unsigned int **)(v5 - 8);
      *(_QWORD *)(v5 - 8) = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *result -= 2;
      }
      v2[23] = v4 - 1;
      v6 = v2[26] - 1;
      if (*(_DWORD *)(*(_QWORD *)v2 + 700) <= v6)
      {
LABEL_15:
        __break(0xC471u);
        JUMPOUT(0x19659576CLL);
      }
      v2[26] = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v2 + 688) + 24 * v6 + 16);
      --v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t *WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_0,void>(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v2 = result;
  *result = 0;
  result[1] = 0;
  if (!a2)
    return v2;
  if (!(a2 >> 30))
  {
    v4 = WTF::fastMalloc((WTF *)(4 * a2));
    v5 = 0;
    *((_DWORD *)v2 + 2) = a2;
    *v2 = v4;
    v6 = *((_DWORD *)v2 + 3);
    do
    {
      *(_DWORD *)(v4 + 4 * v6) = ++v5;
      v6 = *((_DWORD *)v2 + 3) + 1;
      *((_DWORD *)v2 + 3) = v6;
    }
    while (a2 != v5);
    return v2;
  }
  __break(0xC471u);
  return result;
}

unint64_t std::sort[abi:sn180100]<unsigned int *,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1>(unint64_t a1, unsigned int *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v6;

  v3 = 126 - 2 * __clz((uint64_t)((uint64_t)a2 - a1) >> 2);
  v6 = a3;
  if (a2 == (unsigned int *)a1)
    v4 = 0;
  else
    v4 = v3;
  return std::__introsort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *,false>(a1, a2, &v6, v4, 1);
}

void std::stable_sort[abi:sn180100]<WebCore::Style::RuleSet::ResolverMutatingRule *,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0>(WTF::StringImpl *a1, WTF::StringImpl *a2, uint64_t *a3)
{
  unint64_t v5;
  const std::nothrow_t *v6;
  unint64_t v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;

  v11 = a3;
  v5 = (a2 - a1) >> 4;
  if (a2 - a1 < 1)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(a1, a2, &v11, v5, 0, 0);
  }
  else
  {
    v6 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v7 = (a2 - a1) >> 4;
    while (1)
    {
      v8 = (uint64_t *)operator new(16 * v7, v6);
      if (v8)
        break;
      v9 = v7 > 1;
      v7 >>= 1;
      if (!v9)
        goto LABEL_5;
    }
    v10 = v8;
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(a1, a2, &v11, v5, v8, v7);
    operator delete(v10);
  }
}

void WebCore::Style::RuleSetBuilder::MediaQueryCollector::DynamicContext::~DynamicContext(WebCore::Style::RuleSetBuilder::MediaQueryCollector::DynamicContext *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD **v5;
  _DWORD *v6;
  WTF *v7;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (_DWORD **)*((_QWORD *)this + 3);
      do
      {
        v6 = *v5;
        if (*v5 != (_DWORD *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*v6 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
            else
              --*v6;
          }
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (WTF *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v7, a2);
  }
}

void WebCore::RenderStyle::setIsInVisibilityAdjustmentSubtree(WebCore::RenderStyle *this)
{
  _DWORD *v1;
  int v2;
  uint64_t v4;
  _DWORD *v5;
  WTF::StringImpl *v6;
  WebCore::StyleRareInheritedData *v7;
  WTF *v8;
  void *v9;

  v1 = (_DWORD *)*((_QWORD *)this + 3);
  v2 = v1[59];
  if ((v2 & 0x4000000) == 0)
  {
    if (*v1 != 1)
    {
      v4 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v4, (uint64_t)v1);
      v7 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v5;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v7, v6);
          WTF::fastFree(v8, v9);
          v5 = (_DWORD *)*((_QWORD *)this + 3);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      v2 = v5[59];
      v1 = v5;
    }
    v1[59] = v2 | 0x4000000;
  }
}

WebCore::RenderStyle *WebCore::Style::Adjuster::adjustSVGElementStyle(WebCore::RenderStyle *this, WebCore::RenderStyle *a2, const WebCore::SVGElement *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 hasPositionedMask;
  uint64_t v14;
  WebCore::RenderStyle *v15;
  WebCore::RenderStyle *v16;
  WebCore::SVGElement *v17;
  WebCore::SVGElement *v18;

  if (*(_QWORD *)(*((_QWORD *)a2 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    goto LABEL_2;
  v5 = *((_QWORD *)a2 + 4);
  if (!v5)
    goto LABEL_3;
  v6 = *(_WORD *)(v5 + 28);
  if ((v6 & 0x20) != 0
    && *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
  {
    goto LABEL_3;
  }
  if ((*((_BYTE *)a2 + 22) & 0x10) != 0)
  {
    v7 = **((_QWORD **)a2 + 5);
    if (v7 && (*(_WORD *)(v7 + 28) & 0x80) != 0)
    {
      v9 = *(_QWORD *)(v7 + 200);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 8);
        if (v10)
        {
          if ((*(_WORD *)(v10 + 28) & 0x20) != 0)
          {
            if ((v6 & 0x20) == 0
              && *(_QWORD *)(*(_QWORD *)(v10 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
            {
              goto LABEL_3;
            }
            goto LABEL_2;
          }
        }
      }
    }
  }
  if ((v6 & 0x20) != 0)
LABEL_2:
    *((_QWORD *)this + 2) &= 0xFFFFFFFFFFC7FFFFLL;
LABEL_3:
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 680) + 680) & 0x800000000000) != 0
    && (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 68) & 2) != 0)
  {
    if ((v15 = this, v17 = a2, (WebCore::SVGElement::isOutermostSVGSVGElement((uint64_t)a2) & 1) != 0)
      || (v12 = *(_QWORD *)(*((_QWORD *)v17 + 12) + 24), v12 == *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
      || v12 == *(_QWORD *)(WebCore::SVGNames::imageTag + 24)
      || v12 == *(_QWORD *)(WebCore::SVGNames::markerTag + 24)
      || v12 == *(_QWORD *)(WebCore::SVGNames::maskTag + 24)
      || v12 == *(_QWORD *)(WebCore::SVGNames::patternTag + 24)
      || v12 == *(_QWORD *)(WebCore::SVGNames::symbolTag + 24)
      || v12 == *(_QWORD *)(WebCore::SVGNames::useTag + 24)
      || WebCore::SVGElement::isInnerSVGSVGElement((uint64_t)v17) && (*((_BYTE *)v15 + 17) & 0xFC) != 0
      || (hasPositionedMask = WebCore::RenderStyle::hasPositionedMask(v15), this = v15, a2 = v17, hasPositionedMask))
    {
      WebCore::RenderStyle::setUsedZIndex(v15, 0);
      this = v15;
      a2 = v17;
    }
  }
  v3 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24);
  v4 = *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24);
  if (v3 != v4)
  {
LABEL_5:
    if (v3 != v4 && v3 != *(_QWORD *)(WebCore::SVGNames::textTag + 24))
      return this;
    goto LABEL_28;
  }
  v18 = a2;
  if (*(float *)(*((_QWORD *)this + 3) + 184) != 1.0)
  {
    v16 = this;
    WTF::DataRef<WebCore::StyleRareInheritedData>::access((WebCore::StyleRareInheritedData **)this + 3);
    *(_DWORD *)(v14 + 184) = 1065353216;
    this = v16;
    v3 = *(_QWORD *)(*((_QWORD *)v18 + 12) + 24);
    v4 = *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24);
    goto LABEL_5;
  }
LABEL_28:
  v11 = *((_QWORD *)this + 2) & 0x1FLL;
  if (v11 <= 0x19 && ((1 << v11) & 0x3528029) != 0)
    *((_QWORD *)this + 2) = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFFFE0 | 1;
  return this;
}

WebCore::Document **WebCore::Style::Adjuster::adjustForSiteSpecificQuirks(WebCore::Document **this, WebCore::RenderStyle *a2)
{
  WebCore::Document **v3;
  WebCore::Document *v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Document **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  WebCore::Document *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::Document *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  const WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  __int16 v37;
  WebCore::Document *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::Document *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  WTF::StringImpl *v47;
  const WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  __int16 v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  WebCore::Document *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  const WTF::String *v81;
  WTF::StringImpl *v82;
  int IsEqualTo;
  uint64_t v84;
  uint64_t v85;
  float v86;
  WebCore::DOMTokenList *v87;
  WebCore::DOMTokenList *v88;
  WebCore::HTMLMediaElement *v89;
  WebCore::HTMLMediaElement *v90;
  WTF *v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  char v94;
  WTF::StringImpl *v95;

  if (this[3])
  {
    v3 = this;
    v4 = *this;
    v5 = (_BYTE *)*((_QWORD *)v4 + 86);
    if (!v5)
      v5 = (_BYTE *)WebCore::Document::ensureQuirks(v4);
    if (*(_QWORD *)v5)
    {
      v6 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 680);
        if (*(_BYTE *)(v7 + 243))
        {
          if (!*(_BYTE *)(v7 + 242))
            goto LABEL_8;
        }
        else if ((*(_QWORD *)(v7 + 688) & 0x80000) == 0)
        {
          goto LABEL_8;
        }
        if (v5[13])
        {
          if (!v5[12])
            goto LABEL_8;
        }
        else
        {
          v54 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v6 + 736));
          v56 = WTF::operator==(v54, v55, "mail.google.com", 16);
          *((_WORD *)v5 + 6) = v56 | 0x100;
          if (!v56)
            goto LABEL_8;
        }
        if ((_MergedGlobals_265 & 1) == 0)
        {
          v91 = (WTF *)"navigation";
          v92 = 11;
          WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE84C18, (uint64_t)&v91);
          _MergedGlobals_265 = 1;
        }
        if ((*((_QWORD *)a2 + 2) & 0xE000) == 0x2000
          && *(_QWORD *)WebCore::Element::attributeWithoutSynchronization((uint64_t)v3[3], &WebCore::HTMLNames::roleAttr) == qword_1ECE84C18)
        {
          *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFF1FFFLL | 0x8000;
        }
      }
    }
LABEL_8:
    v8 = (_BYTE *)*((_QWORD *)*v3 + 86);
    if (!v8)
      v8 = (_BYTE *)WebCore::Document::ensureQuirks(*v3);
    if (*(_QWORD *)v8)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(v9 + 680);
        if (*(_BYTE *)(v10 + 243))
        {
          if (!*(_BYTE *)(v10 + 242))
            goto LABEL_14;
        }
        else if ((*(_QWORD *)(v10 + 688) & 0x80000) == 0)
        {
          goto LABEL_14;
        }
        if (v8[15])
        {
          if (!v8[14])
            goto LABEL_14;
        }
        else
        {
          v60 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)(v9 + 736));
          v62 = WTF::operator==(v60, v61, "www.youtube.com", 16);
          *((_WORD *)v8 + 7) = v62 | 0x100;
          if (!v62)
            goto LABEL_14;
        }
        if ((byte_1ECE84C11 & 1) == 0)
        {
          v91 = (WTF *)"guide-inner-content";
          v92 = 20;
          WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE84C20, (uint64_t)&v91);
          byte_1ECE84C11 = 1;
        }
        if ((*((_QWORD *)a2 + 2) & 0xE000) == 0x2000)
        {
          v57 = *((_QWORD *)v3[3] + 13);
          if (!v57 || (v59 = *(_QWORD *)(v57 + 24), v58 = (_QWORD *)(v57 + 24), !v59))
            v58 = (_QWORD *)MEMORY[0x1E0CBF2F8];
          if (*v58 == qword_1ECE84C20)
            *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFF1FFFLL | 0x8000;
        }
      }
    }
LABEL_14:
    v11 = *((_QWORD *)*v3 + 86);
    if (!v11)
      v11 = WebCore::Document::ensureQuirks(*v3);
    if (*(_QWORD *)v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 680);
        if (*(_BYTE *)(v13 + 243))
        {
          if (!*(_BYTE *)(v13 + 242))
            goto LABEL_23;
        }
        else if ((*(_QWORD *)(v13 + 688) & 0x80000) == 0)
        {
          goto LABEL_23;
        }
        if ((WTF::linkedOnOrAfterSDKWithBehavior() & 1) != 0)
          goto LABEL_23;
        {
          if (!WebCore::IOSApplication::isWechat(void)::isWechat)
            goto LABEL_23;
          goto LABEL_218;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v80 = v91;
        v95 = v91;
        IsEqualTo = WebCore::applicationBundleIsEqualTo(&v95, v81);
        if (v80)
        {
          if (*(_DWORD *)v80 == 2)
            WTF::StringImpl::destroy(v80, v82);
          else
            *(_DWORD *)v80 -= 2;
        }
        WebCore::IOSApplication::isWechat(void)::isWechat = IsEqualTo;
        if (IsEqualTo)
        {
LABEL_218:
          if ((byte_1ECE84C12 & 1) == 0)
          {
            v91 = (WTF *)"tree-select";
            v92 = 12;
            WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE84C28, (uint64_t)&v91);
            byte_1ECE84C12 = 1;
          }
          if ((byte_1ECE84C13 & 1) == 0)
          {
            v91 = (WTF *)"v-tree-select";
            v92 = 14;
            WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE84C30, (uint64_t)&v91);
            byte_1ECE84C13 = 1;
          }
          v84 = *((_QWORD *)a2 + 1);
          if (!*(_BYTE *)(*(_QWORD *)(v84 + 8) + 40) && (*((_QWORD *)a2 + 2) & 0x1FLL) == 0x10)
          {
            v85 = *(_QWORD *)(*(_QWORD *)(v84 + 32) + 16);
            if (*(float *)(v85 + 4) == 1.0
              && *(float *)(v85 + 8) == 1.0
              && *(unsigned __int8 *)(v85 + 16) - 3 <= 1)
            {
              v86 = *(_BYTE *)(v85 + 18) ? *(float *)(v85 + 12) : (float)*(int *)(v85 + 12);
              if (v86 == 0.0)
              {
                v87 = (WebCore::DOMTokenList *)WebCore::Element::classList(v3[3]);
                if (WebCore::DOMTokenList::contains(v87, (const WTF::AtomString *)&qword_1ECE84C28))
                {
                  v88 = (WebCore::DOMTokenList *)WebCore::Element::classList(v3[3]);
                  if (WebCore::DOMTokenList::contains(v88, (const WTF::AtomString *)&qword_1ECE84C30))
                  {
                    LODWORD(v91) = 0;
                    WORD2(v91) = 4;
                    BYTE6(v91) = 0;
                    WebCore::RenderStyle::setMinHeight((uint64_t)a2, (WebCore::Length *)&v91);
                    if (BYTE4(v91) == 11)
                    {
                      {
                        WebCore::calculationValues(void)::map = 1;
                        qword_1ECE90C98 = 0;
                      }
                      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v91);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_23:
    v14 = (WebCore::Document **)*((_QWORD *)*v3 + 86);
    if (!v14)
      v14 = (WebCore::Document **)WebCore::Document::ensureQuirks(*v3);
    if (!*v14)
      goto LABEL_31;
    v15 = *((_QWORD *)*v14 + 1);
    if (!v15)
      goto LABEL_31;
    v16 = *(_QWORD *)(v15 + 680);
    if (*(_BYTE *)(v16 + 243))
    {
      if (!*(_BYTE *)(v16 + 242))
        goto LABEL_31;
    }
    else if ((*(_QWORD *)(v16 + 688) & 0x80000) == 0)
    {
      goto LABEL_31;
    }
    if (*((_BYTE *)v14 + 19))
    {
      while (1)
      {
LABEL_30:
        if (*((_BYTE *)v14 + 18))
        {
          v76 = v3[3];
          if (v76)
          {
            if ((*((_WORD *)v76 + 14) & 0x10) != 0
              && *(_QWORD *)(*((_QWORD *)v76 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::divTag + 24))
            {
              *((_DWORD *)v76 + 6) += 2;
              if ((*((_QWORD *)a2 + 2) & 0x1FLL) == 0x1A)
              {
                if ((byte_1ECE84C14 & 1) == 0)
                {
                  v91 = (WTF *)"instream-native-video--mobile";
                  v92 = 30;
                  WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE84C38, (uint64_t)&v91);
                  byte_1ECE84C14 = 1;
                }
                if ((byte_1ECE84C15 & 1) == 0)
                {
                  v91 = (WTF *)"vjs_video_3_html5_api";
                  v92 = 22;
                  WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE84C40, (uint64_t)&v91);
                  byte_1ECE84C15 = 1;
                }
                v77 = *((_QWORD *)v76 + 13);
                if (v77)
                {
                  v78 = *(_QWORD *)(v77 + 16);
                  if (v78)
                  {
                    v79 = 0;
                    while (*(_QWORD *)(v78 + 16 + 8 * v79) != qword_1ECE84C38)
                    {
                      if (++v79 >= (unint64_t)*(unsigned int *)(v78 + 12))
                        goto LABEL_212;
                    }
                    WebCore::TreeScope::getElementById(*((unsigned int **)v76 + 5), (const WTF::AtomString *)&qword_1ECE84C40, (uint64_t *)&v90);
                    v89 = v90;
                    if (v90)
                    {
                      if ((*((_WORD *)v90 + 14) & 0x10) != 0
                        && *(_QWORD *)(*((_QWORD *)v90 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
                      {
                        v90 = 0;
                        if (WebCore::HTMLMediaElement::isFullscreen(v89))
                          *((_QWORD *)a2 + 2) = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFFFE0 | 1;
                        WebCore::HTMLMediaElement::deref((uint64_t)v89);
                      }
                      else
                      {
                        v90 = 0;
                        if (*((_DWORD *)v89 + 6) == 2)
                        {
                          if ((*((_WORD *)v89 + 15) & 0x400) == 0)
                            WebCore::Node::removedLastRef(v89);
                        }
                        else
                        {
                          *((_DWORD *)v89 + 6) -= 2;
                        }
                      }
                    }
                    else
                    {
                      v90 = 0;
                    }
                  }
                }
              }
LABEL_212:
              if (*((_DWORD *)v76 + 6) == 2)
              {
                if ((*((_WORD *)v76 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v76);
              }
              else
              {
                *((_DWORD *)v76 + 6) -= 2;
              }
            }
          }
        }
LABEL_31:
        this = (WebCore::Document **)*v3;
        v17 = *((_QWORD *)*v3 + 249);
        if (!v17)
          return this;
        ++*(_DWORD *)(v17 + 8);
        v14 = (WebCore::Document **)this[86];
        if (!v14)
        {
          this = (WebCore::Document **)WebCore::Document::ensureQuirks((WebCore::Document *)this);
          v14 = this;
        }
        if (!*v14)
          goto LABEL_40;
        v18 = *((_QWORD *)*v14 + 1);
        if (!v18)
          goto LABEL_40;
        v19 = *(_QWORD *)(v18 + 680);
        if (*(_BYTE *)(v19 + 243))
        {
          if (!*(_BYTE *)(v19 + 242))
            goto LABEL_40;
        }
        else if ((*(_QWORD *)(v19 + 688) & 0x80000) == 0)
        {
          goto LABEL_40;
        }
        if (*((_BYTE *)v14 + 21))
          goto LABEL_39;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v38 = *v14;
        if (*v14)
          v38 = (WebCore::Document *)*((_QWORD *)v38 + 1);
        if (*((_BYTE *)v38 + 3362) || *((_BYTE *)v38 + 3405))
        {
          while (1)
          {
            v67 = *((_QWORD *)v38 + 66);
            if (!v67)
              break;
            v68 = *(_QWORD *)(v67 + 8);
            if (!v68)
              break;
            v69 = *(_QWORD *)(v68 + 120);
            if (!v69)
              break;
            v70 = *(_QWORD *)(v69 + 8);
            if (!v70)
              break;
            v38 = *(WebCore::Document **)(*(_QWORD *)(v70 + 40) + 8);
          }
        }
        else
        {
          v39 = *((_QWORD *)v38 + 66);
          if (v39)
          {
            v40 = *(_QWORD *)(v39 + 8);
            if (v40)
            {
              v41 = *(_QWORD *)(*(_QWORD *)(v40 + 128) + 8);
              if (v41)
              {
                if (!*(_BYTE *)(v41 + 144))
                {
                  v42 = *(WebCore::Document **)(v41 + 296);
                  if (v42)
                    v38 = v42;
                }
              }
            }
          }
        }
        v22 = v91;
        WTF::URL::host((WebCore::Document *)((char *)v38 + 736));
        if ((v43 & 0xFF00000000) != 0)
          WTF::String::String();
        else
          WTF::String::String();
        v44 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
        if (v44 != -1)
        {
          v91 = (WTF *)&v94;
          v95 = (WTF::StringImpl *)&v91;
          std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v95, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
        }
        if (v93)
        {
          v45 = *((_QWORD *)v93 + 1);
          v46 = *((unsigned int *)v93 + 1) | ((unint64_t)((*((_DWORD *)v93 + 4) >> 2) & 1) << 32);
        }
        else
        {
          v45 = 0;
          v46 = 0x100000000;
        }
        WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v45, v46, (uint64_t *)&v95);
        v33 = v93;
        if (v93)
        {
          if (*((_DWORD *)v93 + 1))
            break;
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v33 = v91;
        v49 = v95;
        v95 = v91;
        if (v49)
          goto LABEL_95;
LABEL_98:
        if (v33 && *((_DWORD *)v33 + 1))
          goto LABEL_118;
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v33 = v91;
        v50 = v95;
        v95 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
            WTF::StringImpl::destroy(v50, v47);
          else
            *(_DWORD *)v50 -= 2;
        }
LABEL_102:
        v51 = v93;
        v93 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v47);
          else
            *(_DWORD *)v51 -= 2;
        }
        this = (WebCore::Document **)WTF::equal(v33, v22, v48);
        v53 = (__int16)this;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            this = (WebCore::Document **)WTF::StringImpl::destroy(v33, v52);
          else
            *(_DWORD *)v33 -= 2;
        }
        *((_WORD *)v14 + 10) = v53 | 0x100;
        if (!v22)
          goto LABEL_39;
        if (*(_DWORD *)v22 != 2)
        {
          *(_DWORD *)v22 -= 2;
LABEL_39:
          if (*((_BYTE *)v14 + 20))
          {
            if ((byte_1ECE84C16 & 1) == 0)
            {
              v91 = (WTF *)"top-player-video-element";
              v92 = 25;
              this = (WebCore::Document **)WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&qword_1ECE84C48, (uint64_t)&v91);
              byte_1ECE84C16 = 1;
            }
            v71 = (uint64_t)v3[3];
            if (v71)
            {
              if ((*(_WORD *)(v71 + 28) & 0x10) != 0
                && *(_QWORD *)(*(_QWORD *)(v71 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::videoTag + 24))
              {
                v72 = *(_QWORD *)(v17 + 56);
                *(_DWORD *)(v71 + 24) += 2;
                if (v72)
                {
                  v73 = *(_QWORD *)(v71 + 104);
                  if (v73)
                  {
                    v74 = *(_QWORD *)(v73 + 16);
                    if (v74)
                    {
                      v75 = 0;
                      while (*(_QWORD *)(v74 + 16 + 8 * v75) != qword_1ECE84C48)
                      {
                        if (++v75 >= (unint64_t)*(unsigned int *)(v74 + 12))
                          goto LABEL_196;
                      }
                      if ((*(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 151) & 7) == 0)
                        WebCore::RenderStyle::setObjectFit((uint64_t)a2, 1);
                    }
                  }
                }
LABEL_196:
                this = (WebCore::Document **)WebCore::HTMLMediaElement::deref(v71);
              }
            }
          }
LABEL_40:
          v20 = *(_DWORD *)(v17 + 8);
          if (!v20)
          {
            __break(0xC471u);
            JUMPOUT(0x196596398);
          }
          *(_DWORD *)(v17 + 8) = v20 - 1;
          return this;
        }
        this = (WebCore::Document **)WTF::StringImpl::destroy(v22, v52);
        if (*((_BYTE *)v14 + 21))
          goto LABEL_39;
        while (1)
        {
          __break(1u);
LABEL_139:
          WTF::StringImpl::destroy((WTF::StringImpl *)this, v31);
LABEL_68:
          v35 = v93;
          v93 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v31);
            else
              *(_DWORD *)v35 -= 2;
          }
          v37 = WTF::equal(v33, v22, v32);
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v36);
            else
              *(_DWORD *)v33 -= 2;
          }
          *((_WORD *)v14 + 9) = v37 | 0x100;
          if (!v22)
            break;
          if (*(_DWORD *)v22 != 2)
          {
            *(_DWORD *)v22 -= 2;
            goto LABEL_30;
          }
          this = (WebCore::Document **)WTF::StringImpl::destroy(v22, v36);
          if (*((_BYTE *)v14 + 19))
            goto LABEL_30;
        }
      }
      v49 = v95;
      if (!v95)
      {
        *(_DWORD *)v93 += 2;
LABEL_118:
        v95 = 0;
        goto LABEL_102;
      }
      if (!*((_DWORD *)v95 + 1))
      {
        *(_DWORD *)v93 += 2;
        v95 = v33;
LABEL_95:
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v47);
        else
          *(_DWORD *)v49 -= 2;
      }
      v33 = v95;
      goto LABEL_98;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21 = *v14;
    if (*v14)
      v21 = (WebCore::Document *)*((_QWORD *)v21 + 1);
    v22 = v91;
    if (*((_BYTE *)v21 + 3362) || *((_BYTE *)v21 + 3405))
    {
      while (1)
      {
        v63 = *((_QWORD *)v21 + 66);
        if (!v63)
          break;
        v64 = *(_QWORD *)(v63 + 8);
        if (!v64)
          break;
        v65 = *(_QWORD *)(v64 + 120);
        if (!v65)
          break;
        v66 = *(_QWORD *)(v65 + 8);
        if (!v66)
          break;
        v21 = *(WebCore::Document **)(*(_QWORD *)(v66 + 40) + 8);
      }
    }
    else
    {
      v23 = *((_QWORD *)v21 + 66);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v24 + 128) + 8);
          if (v25)
          {
            if (!*(_BYTE *)(v25 + 144))
            {
              v26 = *(WebCore::Document **)(v25 + 296);
              if (v26)
                v21 = v26;
            }
          }
        }
      }
    }
    WTF::URL::host((WebCore::Document *)((char *)v21 + 736));
    if ((v27 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    v28 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
    if (v28 != -1)
    {
      v91 = (WTF *)&v94;
      v95 = (WTF::StringImpl *)&v91;
      std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v95, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
    }
    if (v93)
    {
      v29 = *((_QWORD *)v93 + 1);
      v30 = *((unsigned int *)v93 + 1) | ((unint64_t)((*((_DWORD *)v93 + 4) >> 2) & 1) << 32);
    }
    else
    {
      v29 = 0;
      v30 = 0x100000000;
    }
    WebCore::PublicSuffixStore::topPrivatelyControlledDomain((uint64_t *)&WebCore::PublicSuffixStore::singleton(void)::store, v29, v30, (uint64_t *)&v95);
    v33 = v93;
    if (v93 && *((_DWORD *)v93 + 1))
    {
      v34 = v95;
      if (!v95)
      {
        *(_DWORD *)v93 += 2;
        goto LABEL_114;
      }
      if (*((_DWORD *)v95 + 1))
        goto LABEL_63;
      *(_DWORD *)v93 += 2;
      v95 = v33;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v33 = v91;
      v34 = v95;
      v95 = v91;
      if (!v34)
      {
LABEL_64:
        if (!v33 || !*((_DWORD *)v33 + 1))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v33 = v91;
          this = (WebCore::Document **)v95;
          v95 = 0;
          if (!this)
            goto LABEL_68;
          if (*(_DWORD *)this != 2)
          {
            *(_DWORD *)this -= 2;
            goto LABEL_68;
          }
          goto LABEL_139;
        }
LABEL_114:
        v95 = 0;
        goto LABEL_68;
      }
    }
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v31);
    else
      *(_DWORD *)v34 -= 2;
LABEL_63:
    v33 = v95;
    goto LABEL_64;
  }
  return this;
}

void sub_196596A88(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, a2);
    else
      *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void WebCore::Style::Adjuster::adjustmentForTextAutosizing(WebCore::Style::Adjuster *this@<X0>, const WebCore::RenderStyle *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  float v22;
  float v23;
  _BOOL4 isIdempotentTextAutosizingCandidate;
  const WebCore::RenderStyle *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  BOOL v32;
  float v33;
  float v35;
  BOOL v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  int *v43;
  float *v44;
  float v45;
  float v46;
  float v47;
  float v48;
  BOOL v49;
  float v50;
  BOOL v51;
  float v52;
  uint64_t v53;
  int *v54;
  float *v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  float v62;
  int v63;
  float v64;
  float v65;
  unsigned int *v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  _DWORD v71[42];
  WTF *v72;
  float v73;
  __int16 v74;
  int v75;
  unsigned __int8 v76;
  char v77;
  char v78;

  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 12) = 0;
  *(_WORD *)(a3 + 16) = 0;
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  if ((*(_QWORD *)(*(_QWORD *)(v5 + 680) + 712) & 0x540000000000) == 0x500000000000)
  {
    v8 = *((_BYTE *)this + 46) & 0x1F;
    if ((*((_QWORD *)this + 2) & 0x1FLL) == 0x1A)
      goto LABEL_3;
    v9 = *((_QWORD *)this + 4);
    if (*(_BYTE *)(v9 + 24) != 4)
      goto LABEL_137;
    v10 = *(float *)(v9 + 20);
    if (!*(_BYTE *)(v9 + 26))
      v10 = (float)SLODWORD(v10);
    if ((float)(v10 - *(float *)(v9 + 224)) <= 5.0)
    {
LABEL_137:
      if ((*((_DWORD *)this + 10) & 0x78000000) != 0x40000000
        && WebCore::AutosizeStatus::probablyContainsASmallFixedNumberOfLines(this, a2))
      {
LABEL_3:
        v8 |= 1u;
      }
    }
    v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    v12 = v8 | 2;
    if (*(_BYTE *)(v11 + 16) != 4)
      v12 = v8;
    if (*(_BYTE *)(v11 + 8) == 4)
      v13 = v12 | 4;
    else
      v13 = v12;
    if ((*((_QWORD *)this + 2) & 0x1C00) == 0x400)
      v13 |= 0x10u;
    if ((*((_QWORD *)this + 2) & 0xE000000) != 0)
      v14 = v13 | 8;
    else
      v14 = v13;
    if ((*((_BYTE *)this + 46) & 0x1F) != v14)
    {
      *(_BYTE *)(a3 + 17) = 1;
      *(_BYTE *)(a3 + 16) = v14;
    }
    if (*(float *)(*((_QWORD *)this + 3) + 344) != -2.0)
    {
      v15 = *(_QWORD *)(v5 + 528);
      v16 = 1.0;
      if (v15)
      {
        v17 = *(_QWORD *)(v15 + 8);
        if (v17)
        {
          v18 = *(_QWORD *)(v17 + 24);
          if (v18)
          {
            v19 = *(_QWORD *)(v18 + 8);
            if (v19)
              v16 = *(float *)(v19 + 460);
          }
        }
      }
      v20 = *((_QWORD *)this + 4);
      WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v71, (const WebCore::FontDescription *)(v20 + 48));
      v21 = *(WTF **)(v20 + 216);
      ++*(_DWORD *)v21;
      v72 = v21;
      v73 = *(float *)(v20 + 224);
      v74 = *(_WORD *)(v20 + 228);
      v22 = *(float *)&v71[39];
      v23 = v73;
      isIdempotentTextAutosizingCandidate = WebCore::RenderStyle::isIdempotentTextAutosizingCandidate((uint64_t)this, v14);
      if (isIdempotentTextAutosizingCandidate)
      {
        if (v16 >= 1.0)
        {
          v23 = v73;
        }
        else
        {
          v23 = 0.0;
          if (v73 > 0.0)
          {
            v26 = 0.5;
            if (v16 >= 0.5)
              v26 = v16;
            if (v26 > 1.0)
              v26 = 1.0;
            v27 = (float)(v26 * -3.0) + 3.0;
            v28 = 6.0;
            if (v73 <= 6.0)
            {
              v42 = 0;
              v43 = &dword_1969FDF6C;
            }
            else
            {
              v28 = 14.0;
              if (v73 > 14.0)
              {
                v29 = (float)(v27 * 3.0) + 14.0;
                goto LABEL_70;
              }
              v43 = (int *)&unk_1969FDF74;
              v42 = 1;
            }
            v44 = (float *)&constinit_8[2 * v42];
            v45 = *v44 + (float)((float)(v44[1] - *v44) * v27);
            v29 = v45
                + (float)((float)((float)(v73 - *v44) / (float)(v28 - *v44))
                        * (float)((float)(v28 + (float)((float)(*((float *)v43 + 1) - v28) * v27)) - v45));
LABEL_70:
            v46 = roundf(v29);
            if (v46 >= v73)
              v23 = v46;
            else
              v23 = v73;
          }
        }
        if (v22 == v23)
          goto LABEL_117;
        v47 = vabds_f32(v22, v23);
        v48 = fabsf(v22);
        if (v48 < 1.0 && (float)(v48 * 3.4028e38) < v47
          || ((float)(v48 * 1.1755e-38) > v47 ? (v49 = v48 <= 1.0) : (v49 = 1),
              (v50 = v47 / v48, v49) ? (v51 = v50 > 0.00000011921) : (v51 = 0),
              v51 || (v52 = fabsf(v23), v52 < 1.0) && (float)(v52 * 3.4028e38) < v47))
        {
          v37 = v23;
        }
        else
        {
          if ((float)(v52 * 1.1755e-38) > v47 && v52 > 1.0)
            goto LABEL_117;
          v32 = (float)(v47 / v52) > 0.00000011921;
          v37 = v23;
          if (!v32)
            goto LABEL_117;
        }
LABEL_98:
        v59 = *((_QWORD *)a2 + 10);
        if (!v59)
          goto LABEL_117;
        while ((*(_WORD *)(v59 + 28) & 2) == 0)
        {
          v59 = *(_QWORD *)(v59 + 56);
          if (!v59)
            goto LABEL_117;
        }
        *(float *)a3 = v23;
        *(_BYTE *)(a3 + 4) = 1;
        if (!isIdempotentTextAutosizingCandidate)
          goto LABEL_117;
        v60 = *((_QWORD *)this + 4);
        v78 = 0;
        v76 = *(_BYTE *)(v60 + 24);
        v77 = *(_BYTE *)(v60 + 25);
        if (v76 - 2 >= 9)
        {
          if (v76 == 11)
          {
            v61 = (void *)*(unsigned int *)(v60 + 20);
            v75 = *(_DWORD *)(v60 + 20);
            WebCore::Length::ref(&v75);
            goto LABEL_132;
          }
          v61 = 0;
          v63 = 1;
          v62 = 0.0;
        }
        else if (*(_BYTE *)(v60 + 26))
        {
          v63 = 0;
          v62 = *(float *)(v60 + 20);
          v61 = (void *)LODWORD(v62);
        }
        else
        {
          v61 = (void *)*(unsigned int *)(v60 + 20);
          v62 = *(float *)(v60 + 20);
          v63 = 1;
        }
        if ((float)(v16 * v37) < 12.0 && v76 == 4)
        {
          v64 = v37 * 1.25;
          v65 = (float)SLODWORD(v62);
          if (!v63)
            v65 = v62;
          if (v65 < v64 && !WebCore::AutosizeStatus::probablyContainsASmallFixedNumberOfLines(this, v25))
          {
            *(float *)(a3 + 8) = v64;
            *(_BYTE *)(a3 + 12) = 1;
          }
          goto LABEL_117;
        }
        if (v76 != 11)
        {
LABEL_117:
          v66 = (unsigned int *)v72;
          v72 = 0;
          if (v66)
          {
            if (*v66 == 1)
            {
              v67 = v66[1];
              if ((_DWORD)v67)
              {
                v68 = (WTF::StringImpl **)(v66 + 2);
                v69 = 8 * v67;
                do
                {
                  v70 = *v68;
                  *v68 = 0;
                  if (v70)
                  {
                    if (*(_DWORD *)v70 == 2)
                      WTF::StringImpl::destroy(v70, v25);
                    else
                      *(_DWORD *)v70 -= 2;
                  }
                  ++v68;
                  v69 -= 8;
                }
                while (v69);
              }
              WTF::fastFree((WTF *)v66, v25);
            }
            else
            {
              --*v66;
            }
          }
          WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v71, v25);
          return;
        }
LABEL_132:
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v61);
        goto LABEL_117;
      }
      if (v22 == v23)
        goto LABEL_117;
      v30 = vabds_f32(v22, v23);
      v31 = fabsf(v22);
      if (v31 >= 1.0 || (float)(v31 * 3.4028e38) >= v30)
      {
        v32 = (float)(v31 * 1.1755e-38) <= v30 || v31 <= 1.0;
        v33 = v30 / v31;
        if (!v32 || v33 <= 0.00000011921)
        {
          v35 = fabsf(v23);
          if (v35 >= 1.0 || (float)(v35 * 3.4028e38) >= v30)
          {
            v36 = (float)(v35 * 1.1755e-38) <= v30 || v35 <= 1.0;
            if (!v36 || (float)(v30 / v35) <= 0.00000011921)
              goto LABEL_117;
          }
        }
      }
      v37 = v73;
      if (v16 >= 1.0)
        goto LABEL_98;
      if (v73 <= 0.0)
      {
        v37 = 0.0;
        goto LABEL_98;
      }
      v38 = 0.5;
      if (v16 >= 0.5)
        v38 = v16;
      if (v38 > 1.0)
        v38 = 1.0;
      v39 = (float)(v38 * -3.0) + 3.0;
      v40 = 6.0;
      if (v73 <= 6.0)
      {
        v53 = 0;
        v54 = &dword_1969FDF6C;
      }
      else
      {
        v40 = 14.0;
        if (v73 > 14.0)
        {
          v41 = (float)(v39 * 3.0) + 14.0;
          goto LABEL_96;
        }
        v54 = (int *)&unk_1969FDF74;
        v53 = 1;
      }
      v56 = (float *)&constinit_8[2 * v53];
      v57 = *v56 + (float)((float)(v56[1] - *v56) * v39);
      v41 = v57
          + (float)((float)((float)(v73 - *v56) / (float)(v40 - *v56))
                  * (float)((float)(v40 + (float)((float)(*((float *)v54 + 1) - v40) * v39)) - v57));
LABEL_96:
      v58 = roundf(v41);
      if (v58 >= v73)
        v37 = v58;
      goto LABEL_98;
    }
  }
}

BOOL WebCore::Style::Adjuster::adjustForTextAutosizing(uint64_t a1, WebCore::RenderStyle *a2, uint64_t a3)
{
  float v6;
  uint64_t v7;
  WTF *v8;
  float v9;
  float v10;
  uint64_t v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WebCore *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v22;
  WTF::StringImpl **v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WebCore *v26;
  unsigned int v27;
  __int16 v28;
  char v29;
  float v30;
  WTF *v31;
  int v32;
  __int16 v33;

  WebCore::AutosizeStatus::updateStatus(a1, a2);
  if (*(_BYTE *)(a3 + 4))
  {
    v6 = *(float *)a3;
    v7 = *(_QWORD *)(a1 + 32);
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)&v27, (const WebCore::FontDescription *)(v7 + 48));
    v8 = *(WTF **)(v7 + 216);
    ++*(_DWORD *)v8;
    v31 = v8;
    v32 = *(_DWORD *)(v7 + 224);
    v33 = *(_WORD *)(v7 + 228);
    v9 = 3.4028e38;
    v10 = -3.4028e38;
    if (v6 > -3.4028e38)
      v10 = v6;
    if (v6 < 3.4028e38)
      v9 = v10;
    v30 = v9;
    WebCore::RenderStyle::setFontDescription(a1, (uint64_t)&v27);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(WebCore **)(*(_QWORD *)(*((_QWORD *)a2 + 5) + 8) + 2648);
    if (!v12)
      v12 = (WebCore *)WebCore::Document::ensureFontSelector(*(WebCore::Document **)(*((_QWORD *)a2 + 5) + 8));
    v13 = v11 + 32;
    ++*((_DWORD *)v12 + 2);
    v26 = v12;
    v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
      v15 = WebCore::threadGlobalDataSlow(v12);
    v16 = *(_QWORD *)(v15 + 80);
    if (!v16)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v15);
      v16 = *(_QWORD *)(v15 + 80);
    }
    WebCore::FontCache::updateFontCascade(v16, v13, &v26);
    v18 = v26;
    v26 = 0;
    if (v18)
    {
      if (*((_DWORD *)v18 + 2) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v18 + 8))(v18);
      else
        --*((_DWORD *)v18 + 2);
    }
    v19 = (unsigned int *)v31;
    v31 = 0;
    if (v19)
    {
      if (*v19 == 1)
      {
        v22 = v19[1];
        if ((_DWORD)v22)
        {
          v23 = (WTF::StringImpl **)(v19 + 2);
          v24 = 8 * v22;
          do
          {
            v25 = *v23;
            *v23 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v17);
              else
                *(_DWORD *)v25 -= 2;
            }
            ++v23;
            v24 -= 8;
          }
          while (v24);
        }
        WTF::fastFree((WTF *)v19, v17);
      }
      else
      {
        --*v19;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)&v27, v17);
  }
  if (*(_BYTE *)(a3 + 12))
  {
    v27 = *(_DWORD *)(a3 + 8);
    v28 = 4;
    v29 = 1;
    WebCore::RenderStyle::setLineHeight(a1, (WebCore::Length *)&v27);
    if (v28 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v27);
    }
  }
  v20 = *(unsigned __int16 *)(a3 + 16);
  if (v20 >= 0x100)
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a1 + 44) & 0xFFE0FFFF | ((v20 & 0x1F) << 16);
  return *(_BYTE *)(a3 + 4) || *(_BYTE *)(a3 + 12) != 0;
}

unsigned __int8 *WebCore::Style::Builder::Builder(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, unsigned __int8 a6, char ***a7)
{
  int v7;
  unint64_t v11;
  int v12;
  char v13;
  __n128 v14;
  __n128 v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned __int16 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v38;
  __int16 v39;
  unsigned __int8 v40;

  *(_QWORD *)a1 = a4;
  a1[8] = a6;
  a1[9] = a5;
  *((_WORD *)a1 + 5) = 0;
  v11 = (unint64_t)(a1 + 15220);
  a1[12] = 0;
  a1[14] = 0;
  if (a7)
  {
    WebCore::Style::PropertyCascade::AnimationLayer::AnimationLayer((uint64_t)&v38, a7);
    *((_OWORD *)a1 + 1) = v38;
    *((_WORD *)a1 + 16) = v39;
    a1[34] = v40;
    v12 = a1[9];
    v13 = 1;
  }
  else
  {
    v12 = a5;
    v13 = 0;
    a1[16] = 0;
  }
  a1[40] = v13;
  bzero(a1 + 14736, 0x2C0uLL);
  *(_DWORD *)(v11 + 220) = 23003594;
  *((_QWORD *)a1 + 1931) = 0;
  if (v12)
  {
    v16 = *(unsigned int *)(*(_QWORD *)a1 + 20);
    if ((_DWORD)v16)
    {
      v17 = 0;
      v18 = *(uint64_t **)(*(_QWORD *)a1 + 8);
      v19 = 16 * v16;
      do
      {
        v17 |= WebCore::Style::PropertyCascade::addMatch((uint64_t)a1, v18, 1u, 0, v14, v15);
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
      v7 = (v17 & 1) != 0;
    }
    else
    {
      v7 = 0;
    }
    if (a1[9] >= 2u)
    {
      v20 = *(unsigned int *)(*(_QWORD *)a1 + 36);
      if ((_DWORD)v20)
      {
        v21 = 0;
        v22 = *(uint64_t **)(*(_QWORD *)a1 + 24);
        v23 = 16 * v20;
        do
        {
          v21 |= WebCore::Style::PropertyCascade::addMatch((uint64_t)a1, v22, 2u, 0, v14, v15);
          v22 += 2;
          v23 -= 16;
        }
        while (v23);
        if ((v21 & 1) != 0)
          v7 |= 2u;
      }
      if (a1[9] >= 4u)
      {
        v24 = *(unsigned int *)(*(_QWORD *)a1 + 52);
        if ((_DWORD)v24)
        {
          v25 = 0;
          v26 = *(uint64_t **)(*(_QWORD *)a1 + 40);
          v27 = 16 * v24;
          do
          {
            v25 |= WebCore::Style::PropertyCascade::addMatch((uint64_t)a1, v26, 4u, 0, v14, v15);
            v26 += 2;
            v27 -= 16;
          }
          while (v27);
          if ((v25 & 1) != 0)
            v7 |= 4u;
        }
      }
    }
    if (v7)
      goto LABEL_35;
  }
  while (1)
  {
    v28 = *(unsigned __int16 *)(v11 + 220);
    v29 = *(unsigned __int16 *)(v11 + 222);
    v30 = (unsigned __int16 *)v11;
    if (v28 > v29)
      break;
    v30 = (unsigned __int16 *)v11;
    while (1)
    {
      v31 = (unsigned __int16)v28 - 351;
      if (v31 >= 0x6C)
        break;
      if (*(_DWORD *)&a1[4 * v31 + 14784])
      {
        *v30++ = v28;
        LOWORD(v29) = *(_WORD *)(v11 + 222);
      }
      LOWORD(v28) = v28 + 1;
      if ((unsigned __int16)v28 > (unsigned __int16)v29)
        goto LABEL_28;
    }
    __break(1u);
LABEL_35:
    if ((v7 & 4) != 0)
      WebCore::Style::PropertyCascade::addImportantMatches(a1, (void *)4, v14, v15);
    if ((v7 & 2) != 0)
      WebCore::Style::PropertyCascade::addImportantMatches(a1, (void *)2, v14, v15);
    if ((v7 & 1) != 0)
      WebCore::Style::PropertyCascade::addImportantMatches(a1, (void *)1, v14, v15);
  }
LABEL_28:
  v32 = 126 - 2 * __clz((uint64_t)((uint64_t)v30 - v11) >> 1);
  *((_DWORD *)a1 + 3859) = ((unint64_t)v30 - v11) >> 1;
  *(_QWORD *)&v38 = a1;
  if (v30 == (unsigned __int16 *)v11)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *,false>(v11, v30, (uint64_t *)&v38, v33, 1);
  *((_QWORD *)a1 + 1932) = 0;
  *((_QWORD *)a1 + 1933) = a1;
  *((_QWORD *)a1 + 1934) = a1 + 15464;
  *((_QWORD *)a1 + 1935) = a2;
  v34 = *a3;
  *a3 = 0;
  *((_QWORD *)a1 + 1936) = v34;
  *(_OWORD *)(a1 + 15496) = *(_OWORD *)(a3 + 1);
  v35 = a3[3];
  a3[3] = 0;
  *((_QWORD *)a1 + 1939) = v35;
  v36 = a3[4];
  *((_QWORD *)a1 + 1940) = v36;
  *((_QWORD *)a1 + 1941) = a2;
  *((_QWORD *)a1 + 1942) = *((_QWORD *)a1 + 1938);
  *((_QWORD *)a1 + 1943) = *((_QWORD *)a1 + 1937);
  *((_QWORD *)a1 + 1944) = *(_QWORD *)(*((_QWORD *)a1 + 1936) + 1944);
  if (v35)
    *(_DWORD *)(v35 + 24) += 2;
  *((_QWORD *)a1 + 1945) = v35;
  a1[15568] = 0;
  a1[15572] = 0;
  a1[15576] = 0;
  a1[15578] = 0;
  *((_QWORD *)a1 + 1948) = a2;
  *((_QWORD *)a1 + 1949) = v36;
  *((_OWORD *)a1 + 975) = 0u;
  *((_OWORD *)a1 + 976) = 0u;
  *((_OWORD *)a1 + 977) = 0u;
  *((_OWORD *)a1 + 978) = 0u;
  *((_OWORD *)a1 + 979) = 0u;
  *((_OWORD *)a1 + 980) = 0u;
  *((_OWORD *)a1 + 981) = 0u;
  *((_OWORD *)a1 + 982) = 0u;
  *((_OWORD *)a1 + 983) = 0u;
  *((_OWORD *)a1 + 984) = 0u;
  *((_OWORD *)a1 + 985) = 0u;
  *(_QWORD *)(a1 + 15773) = 0;
  a1[15800] = 0;
  *((_QWORD *)a1 + 1974) = 0;
  *((_QWORD *)a1 + 1973) = 0;
  return a1;
}

void WebCore::Style::Builder::applyAllProperties(WebCore::Style::Builder *this)
{
  if (*((_QWORD *)this + 1842)
    || *((_QWORD *)this + 1843)
    || *((_QWORD *)this + 1844)
    || *((_QWORD *)this + 1845)
    || *((_QWORD *)this + 1846)
    || *((_QWORD *)this + 1847)
    || *((_DWORD *)this + 3859))
  {
    WebCore::Style::Builder::applyTopPriorityProperties(this);
    WebCore::Style::Builder::applyHighPriorityProperties(this);
    WebCore::Style::Builder::applyNonHighPriorityProperties(this);
  }
}

void WebCore::Style::Builder::applyCascadeProperty(unint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a1 + 15768);
  *(_QWORD *)(a1 + 15768) = a2;
  v5 = a2[1];
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 15776);
    *(_DWORD *)(a1 + 15776) = 0;
    WebCore::Style::Builder::applyProperty(a1, (WTF::StringImpl *)*(unsigned __int16 *)a2, v5, 0);
    *(_DWORD *)(a1 + 15776) = v6;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 15480) + 45) & 0xC) != 0)
  {
    v7 = a2[2];
    if (v7)
    {
      *(_DWORD *)(a1 + 15776) = 1;
      WebCore::Style::Builder::applyProperty(a1, (WTF::StringImpl *)*(unsigned __int16 *)a2, v7, 1u);
    }
    v8 = a2[3];
    if (v8)
    {
      *(_DWORD *)(a1 + 15776) = 2;
      WebCore::Style::Builder::applyProperty(a1, (WTF::StringImpl *)*(unsigned __int16 *)a2, v8, 2u);
    }
    *(_DWORD *)(a1 + 15776) = 0;
  }
  *(_QWORD *)(a1 + 15768) = v4;
}

uint64_t WebCore::Style::Builder::applyCustomPropertyImpl(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int ii;
  unsigned int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  char v50;
  WTF::StringImpl *v51;
  _DWORD *v52;
  uint64_t v53;
  int v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  int v57;
  WTF::StringImpl *v58;
  unsigned int jj;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  WTF::StringImpl **v72;
  WTF::StringImpl *v73;
  unsigned int v74;
  int kk;
  unsigned int v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  WTF::StringImpl *v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  WTF::StringImpl *v103;
  int v104;
  unsigned int j;
  uint64_t v106;
  _DWORD *v107;
  int v108;
  unsigned int k;
  uint64_t v110;
  _DWORD *v111;
  WTF::StringImpl *v112;
  int v113;
  unsigned int m;
  uint64_t v115;
  uint64_t v116;
  int v117;
  unsigned int n;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int16 *v126;
  __int16 v127;
  unsigned __int16 *v128;
  unsigned int v129;
  unsigned __int16 *v130;
  unsigned int v131;
  uint64_t v132;
  _DWORD *v133;

  v3 = *(_QWORD *)(a3 + 8);
  if (!v3)
    return result;
  if (((*(unsigned __int16 *)(v3 + 4) | (*(unsigned __int8 *)(v3 + 6) << 16)) & 0x3F800) != 0xE800)
  {
    __break(0xC471u);
    JUMPOUT(0x196598100);
  }
  v6 = result;
  *(_DWORD *)v3 += 2;
  v7 = (uint64_t *)(result + 15608);
  v8 = *(_QWORD *)(result + 15608);
  if (v8
    || (WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(result + 15608), 8u, 0), (v8 = *v7) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = *(WTF::StringImpl **)a2;
  v12 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v9;
    v15 = (WTF::StringImpl **)(v8 + 8 * v14);
    v16 = *v15;
    if (!*v15)
      break;
    if (v16 != (WTF::StringImpl *)-1)
    {
      v15 = v10;
      if (v16 == v11)
      {
        result = (uint64_t)WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)(v6 + 15616), a2, (uint64_t)&v128);
        if ((_BYTE)v130)
        {
          WebCore::Style::Builder::resolveCustomPropertyValue((WebCore::Style::Builder *)v6, (WebCore::CSSCustomPropertyValue *)v3, &v123);
          result = v123;
          v123 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v55);
            else
              *(_DWORD *)result -= 2;
          }
        }
        goto LABEL_115;
      }
    }
    v12 = i + v14;
    v10 = v15;
  }
  if (v10)
  {
    *v10 = 0;
    --*(_DWORD *)(*v7 - 16);
    v11 = *(WTF::StringImpl **)a2;
    v15 = v10;
  }
  if (v11)
    *(_DWORD *)v11 += 2;
  *v15 = v11;
  v17 = *v7;
  if (*v7)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *v7;
  if (*v7)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_20;
    goto LABEL_171;
  }
  if (3 * v22 <= 4 * v21)
  {
    if (!(_DWORD)v22)
    {
      v98 = 8;
LABEL_172:
      WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(v7, v98, v15);
      goto LABEL_20;
    }
LABEL_171:
    v98 = (_DWORD)v22 << (6 * *(_DWORD *)(v19 - 12) >= (2 * v22));
    goto LABEL_172;
  }
LABEL_20:
  v23 = (uint64_t *)(v6 + 15616);
  v24 = *(WTF::StringImpl **)(v6 + 15616);
  *(_QWORD *)(v6 + 15616) = 0;
  v25 = *(unsigned int *)(v3 + 72);
  if ((_DWORD)v25 == 1 && *(unsigned __int16 *)(v3 + 24) - 1 <= 4)
  {
    *(_DWORD *)v3 += 2;
    v122 = (_DWORD *)v3;
    goto LABEL_42;
  }
  v26 = *(_DWORD **)(v3 + 8);
  if (v26)
    *v26 += 2;
  v133 = v26;
  v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 15488) + 1328) + 296);
  v28 = *(_QWORD *)(v27 + 8);
  if (v28)
  {
    v103 = v24;
    v104 = 0;
    for (j = v26[4] >> 8; ; j = v104 + v106)
    {
      v106 = j & *(_DWORD *)(v28 - 8);
      v107 = *(_DWORD **)(v28 + 16 * v106);
      if (v107 != (_DWORD *)-1)
      {
        v24 = v103;
        if (!v107)
          goto LABEL_24;
        if (v107 == v26)
          break;
      }
      ++v104;
    }
    v30 = *(_QWORD *)(v28 + 16 * v106 + 8);
    v24 = v103;
    if (v30)
    {
      v31 = 0;
      goto LABEL_28;
    }
  }
LABEL_24:
  v29 = *(_QWORD *)(v27 + 16);
  if (v29)
  {
    v108 = 0;
    for (k = v26[4] >> 8; ; k = v108 + v110)
    {
      v110 = k & *(_DWORD *)(v29 - 8);
      v111 = *(_DWORD **)(v29 + 16 * v110);
      if (v111 != (_DWORD *)-1)
      {
        if (!v111)
          goto LABEL_25;
        if (v111 == v26)
          break;
      }
      ++v108;
    }
    v30 = *(_QWORD *)(v29 + 16 * v110 + 8);
  }
  else
  {
LABEL_25:
    v30 = 0;
  }
  v31 = v30 == 0;
  if (!(_DWORD)v25 || v30)
  {
LABEL_28:
    *(_QWORD *)&v125 = v6;
    if ((_DWORD)v25 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v128 = (unsigned __int16 *)&v125;
      ((void (*)(uint64_t *__return_ptr, unsigned __int16 **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore5Style7Builder26resolveCustomPropertyValueERNS8_22CSSCustomPropertyValueEE3__0JZNSA_26resolveCustomPropertyValueESC_E3__1ZNSA_26resolveCustomPropertyValueESC_E3__2EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS8_10CSSValueIDENSJ_INS8_15CSSVariableDataENSL_ISR_EENSN_ISR_EEEENS_7variantIJNS8_6LengthENSB_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSL_IS10_EENSN_IS10_EEEENS6_3URLENS6_6StringENSB_20TransformSyntaxValueEEEENSB_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v25])(&v132, &v128, v3 + 24);
      v32 = v132;
      if (!v132)
      {
        v122 = 0;
LABEL_37:
        v26 = v133;
        goto LABEL_38;
      }
      if (v31)
      {
        ++*(_DWORD *)v132;
        v33 = WTF::fastCompactMalloc((WTF *)0x60);
        *(_DWORD *)v33 = 2;
        v34 = *(_BYTE *)(v33 + 6);
        *(_WORD *)(v33 + 4) = -6144;
        *(_BYTE *)(v33 + 6) = v34 & 0xFC;
        v35 = v133;
        if (v133)
          *v133 += 2;
        *(_QWORD *)(v33 + 8) = v35;
        *(_QWORD *)(v33 + 24) = v32;
        *(_DWORD *)(v33 + 72) = 2;
        *(_QWORD *)(v33 + 80) = 0;
        *(_QWORD *)(v33 + 88) = 0;
        v122 = (_DWORD *)v33;
        goto LABEL_34;
      }
      v31 = (_BOOL8)v24;
      v30 += 8;
      v100 = *(_QWORD *)(v132 + 16) + 24 * *(unsigned int *)(v132 + 28);
      *(_QWORD *)&v125 = *(_QWORD *)(v132 + 16);
      *((_QWORD *)&v125 + 1) = v100;
      WebCore::CSSPropertyParser::collectParsedCustomPropertyValueDependencies(v30, &v125, v132 + 32, (uint64_t)&v128);
      v127 = 0;
      *(_QWORD *)&v125 = v6;
      *((_QWORD *)&v125 + 1) = (char *)&v127 + 1;
      v126 = &v127;
      WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_3::operator()<WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v125, v128, v129);
      if (*(_QWORD *)(v6 + 15512) == *(_QWORD *)(*(_QWORD *)(v6 + 15488) + 1272))
        WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_3::operator()<WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v125, v130, v131);
      if (HIBYTE(v127))
      {
        v122 = 0;
LABEL_187:
        WebCore::ComputedStyleDependencies::~ComputedStyleDependencies((WebCore::ComputedStyleDependencies *)&v128, v101);
        v24 = (WTF::StringImpl *)v31;
LABEL_34:
        v36 = v132;
        v132 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 1)
          {
            v93 = *(WTF::StringImpl **)(v36 + 72);
            *(_QWORD *)(v36 + 72) = 0;
            if (v93)
            {
              if (*(_DWORD *)v93 == 2)
                WTF::StringImpl::destroy(v93, a2);
              else
                *(_DWORD *)v93 -= 2;
            }
            v94 = *(WTF::StringImpl **)(v36 + 32);
            *(_QWORD *)(v36 + 32) = 0;
            if (v94)
            {
              if (*(_DWORD *)v94 == 2)
                WTF::StringImpl::destroy(v94, a2);
              else
                *(_DWORD *)v94 -= 2;
            }
            v95 = *(WTF **)(v36 + 16);
            if (v95)
            {
              *(_QWORD *)(v36 + 16) = 0;
              *(_DWORD *)(v36 + 24) = 0;
              WTF::fastFree(v95, a2);
            }
            v96 = *(WTF::StringImpl **)(v36 + 8);
            *(_QWORD *)(v36 + 8) = 0;
            if (v96)
            {
              if (*(_DWORD *)v96 == 2)
                WTF::StringImpl::destroy(v96, a2);
              else
                *(_DWORD *)v96 -= 2;
            }
            WTF::fastFree((WTF *)v36, a2);
          }
          else
          {
            --*(_DWORD *)v36;
          }
        }
        goto LABEL_37;
      }
    }
    if ((_BYTE)v127)
      WebCore::Style::BuilderState::updateFont((WebCore::Style::BuilderState *)(v6 + 15464));
    v102 = *(_QWORD *)(v132 + 16) + 24 * *(unsigned int *)(v132 + 28);
    *(_QWORD *)&v124 = *(_QWORD *)(v132 + 16);
    *((_QWORD *)&v124 + 1) = v102;
    WebCore::CSSPropertyParser::parseTypedCustomPropertyValue(&v133, v30, &v124, v6 + 15464, v132 + 32, &v122);
    goto LABEL_187;
  }
  *(_DWORD *)v3 += 2;
  v122 = (_DWORD *)v3;
LABEL_38:
  v133 = 0;
  if (v26)
  {
    if (*v26 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v26, a2);
    else
      *v26 -= 2;
  }
  if (!v122)
  {
LABEL_53:
    v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 15488) + 1328) + 296);
    v44 = *(_QWORD *)(v43 + 8);
    if (!v44)
      goto LABEL_54;
    v112 = v24;
    v113 = 0;
    for (m = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; m = ++v113 + v115)
    {
      v115 = m & *(_DWORD *)(v44 - 8);
      v116 = *(_QWORD *)(v44 + 16 * v115);
      if (v116 != -1)
      {
        v24 = v112;
        if (!v116)
          goto LABEL_54;
        if (v116 == *(_QWORD *)a2)
          break;
      }
    }
    v121 = *(_QWORD *)(v44 + 16 * v115 + 8);
    v24 = v112;
    if (!v121)
    {
LABEL_54:
      v45 = *(_QWORD *)(v43 + 16);
      if (!v45)
        goto LABEL_55;
      v117 = 0;
      for (n = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; n = ++v117 + v119)
      {
        v119 = n & *(_DWORD *)(v45 - 8);
        v120 = *(_QWORD *)(v45 + 16 * v119);
        if (v120 != -1)
        {
          if (!v120)
            goto LABEL_55;
          if (v120 == *(_QWORD *)a2)
            break;
        }
      }
      v121 = *(_QWORD *)(v45 + 16 * v119 + 8);
      if (!v121)
      {
LABEL_55:
        v46 = 0;
LABEL_56:
        v47 = WTF::fastCompactMalloc((WTF *)0x60);
        v49 = v47;
        *(_DWORD *)v47 = 2;
        v50 = *(_BYTE *)(v47 + 6);
        *(_WORD *)(v47 + 4) = -6144;
        *(_BYTE *)(v47 + 6) = v50 & 0xFC;
        v51 = *(WTF::StringImpl **)a2;
        if (*(_QWORD *)a2)
          *(_DWORD *)v51 += 2;
        *(_QWORD *)(v47 + 8) = v51;
        *(_WORD *)(v47 + 24) = v46;
        *(_DWORD *)(v47 + 72) = 1;
        *(_QWORD *)(v47 + 80) = 0;
        *(_QWORD *)(v47 + 88) = 0;
        v52 = v122;
        v122 = (_DWORD *)v49;
        if (v52)
        {
          if (*v52 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v52, v48);
          else
            *v52 -= 2;
        }
        goto LABEL_61;
      }
    }
    if (*(_DWORD *)(v121 + 20))
      v46 = 3;
    else
      v46 = 0;
    goto LABEL_56;
  }
LABEL_42:
  v37 = *v23;
  if (*v23)
  {
    v38 = 0;
    for (ii = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; ii = v38 + v40)
    {
      v40 = ii & *(_DWORD *)(v37 - 8);
      v41 = *(_QWORD *)(v37 + 8 * v40);
      if (!v41)
        break;
      if (v41 != -1 && v41 == *(_QWORD *)a2)
        goto LABEL_53;
      ++v38;
    }
  }
LABEL_61:
  v53 = *(_QWORD *)(v6 + 15768);
  *(_QWORD *)(v6 + 15768) = a3;
  v54 = *(_DWORD *)(v6 + 15776);
  *(_DWORD *)(v6 + 15776) = 0;
  WebCore::Style::Builder::applyProperty(v6, 1);
  v56 = *(_QWORD *)(v6 + 15608);
  if (v56)
  {
    v57 = 0;
    v58 = *(WTF::StringImpl **)a2;
    for (jj = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; jj = v57 + v60)
    {
      v60 = jj & *(_DWORD *)(v56 - 8);
      v61 = *(WTF::StringImpl **)(v56 + 8 * v60);
      if (!v61)
        break;
      if (v61 != (WTF::StringImpl *)-1 && v61 == v58)
      {
        if ((_DWORD)v60 != *(_DWORD *)(v56 - 4))
        {
          *(_QWORD *)(v56 + 8 * v60) = -1;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v55);
            else
              *(_DWORD *)v58 -= 2;
          }
          ++*(_DWORD *)(*v7 - 16);
          v63 = *v7;
          if (*v7)
            v64 = *(_DWORD *)(v63 - 12) - 1;
          else
            v64 = -1;
          *(_DWORD *)(v63 - 12) = v64;
          v65 = *v7;
          if (*v7)
          {
            v66 = 6 * *(_DWORD *)(v65 - 12);
            v67 = *(_DWORD *)(v65 - 4);
            if (v66 < v67 && v67 >= 9)
              WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash(v7, v67 >> 1, 0);
          }
        }
        break;
      }
      ++v57;
    }
  }
  v69 = (uint64_t *)(v6 + 15600);
  v70 = *(_QWORD *)(v6 + 15600);
  if (v70
    || (WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(v6 + 15600), 8u, 0), (v70 = *v69) != 0))
  {
    v71 = *(_DWORD *)(v70 - 8);
  }
  else
  {
    v71 = 0;
  }
  v72 = 0;
  v73 = *(WTF::StringImpl **)a2;
  v74 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (kk = 1; ; ++kk)
  {
    v76 = v74 & v71;
    v77 = (WTF::StringImpl **)(v70 + 8 * v76);
    v78 = *v77;
    if (!*v77)
      break;
    if (v78 != (WTF::StringImpl *)-1)
    {
      v77 = v72;
      if (v78 == v73)
        goto LABEL_98;
    }
    v74 = kk + v76;
    v72 = v77;
  }
  if (v72)
  {
    *v72 = 0;
    --*(_DWORD *)(*v69 - 16);
    v73 = *(WTF::StringImpl **)a2;
    v77 = v72;
  }
  if (v73)
    *(_DWORD *)v73 += 2;
  *v77 = v73;
  v79 = *v69;
  if (*v69)
    v80 = *(_DWORD *)(v79 - 12) + 1;
  else
    v80 = 1;
  *(_DWORD *)(v79 - 12) = v80;
  v81 = *v69;
  if (*v69)
    v82 = *(_DWORD *)(v81 - 12);
  else
    v82 = 0;
  v83 = (*(_DWORD *)(v81 - 16) + v82);
  v84 = *(unsigned int *)(v81 - 4);
  if (v84 > 0x400)
  {
    if (v84 > 2 * v83)
      goto LABEL_98;
    goto LABEL_173;
  }
  if (3 * v84 > 4 * v83)
    goto LABEL_98;
  if ((_DWORD)v84)
  {
LABEL_173:
    v99 = (_DWORD)v84 << (6 * *(_DWORD *)(v81 - 12) >= (2 * v84));
    goto LABEL_174;
  }
  v99 = 8;
LABEL_174:
  WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(v6 + 15600), v99, v77);
LABEL_98:
  if (!v24)
  {
    v87 = 0;
    v85 = 0;
LABEL_107:
    v86 = (WTF::StringImpl *)((char *)v24 + 8 * v85);
    goto LABEL_108;
  }
  v85 = *((unsigned int *)v24 - 1);
  v86 = (WTF::StringImpl *)((char *)v24 + 8 * v85);
  if (!*((_DWORD *)v24 - 3))
  {
    v87 = (WTF::StringImpl *)((char *)v24 + 8 * v85);
    goto LABEL_107;
  }
  v87 = v24;
  if ((_DWORD)v85)
  {
    v88 = 8 * v85;
    v87 = v24;
    while ((unint64_t)(*(_QWORD *)v87 + 1) <= 1)
    {
      v87 = (WTF::StringImpl *)((char *)v87 + 8);
      v88 -= 8;
      if (!v88)
      {
        v87 = v86;
        goto LABEL_105;
      }
    }
  }
LABEL_108:
  if (v24)
LABEL_105:
    v89 = (WTF::StringImpl *)((char *)v24 + 8 * *((unsigned int *)v24 - 1));
  else
    v89 = 0;
  while (v87 != v89)
  {
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)(v6 + 15616), v87, (uint64_t)&v128);
    v97 = (WTF::StringImpl *)((char *)v87 + 8);
    v87 = v86;
    if (v97 != v86)
    {
      v87 = v97;
      while ((unint64_t)(*(_QWORD *)v87 + 1) <= 1)
      {
        v87 = (WTF::StringImpl *)((char *)v87 + 8);
        if (v87 == v86)
        {
          v87 = v86;
          break;
        }
      }
    }
  }
  *(_DWORD *)(v6 + 15776) = v54;
  *(_QWORD *)(v6 + 15768) = v53;
  result = (uint64_t)v122;
  v122 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, v55);
    else
      *(_DWORD *)result -= 2;
  }
  if (v24)
  {
    v90 = *((unsigned int *)v24 - 1);
    if ((_DWORD)v90)
    {
      v91 = (WTF::StringImpl **)v24;
      do
      {
        v92 = *v91;
        if (*v91 != (WTF::StringImpl *)-1)
        {
          *v91 = 0;
          if (v92)
          {
            if (*(_DWORD *)v92 == 2)
              WTF::StringImpl::destroy(v92, v55);
            else
              *(_DWORD *)v92 -= 2;
          }
        }
        ++v91;
        --v90;
      }
      while (v90);
    }
    result = WTF::fastFree((WTF::StringImpl *)((char *)v24 - 16), v55);
  }
LABEL_115:
  if (*(_DWORD *)v3 == 2)
    return WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(v3, v55);
  *(_DWORD *)v3 -= 2;
  return result;
}

uint64_t WebCore::Style::Builder::applyCustomProperty(uint64_t this, const WTF::AtomString *a2)
{
  uint64_t v2;
  int v3;
  int i;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int j;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v16;

  v2 = *(_QWORD *)(this + 15600);
  if (v2)
  {
    v3 = 0;
    for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v3 + v5)
    {
      v5 = i & *(_DWORD *)(v2 - 8);
      v6 = *(_QWORD *)(v2 + 8 * v5);
      if (!v6)
        break;
      if (v6 != -1 && v6 == *(_QWORD *)a2)
        return this;
      ++v3;
    }
  }
  v8 = *(_QWORD *)(this + 15448);
  if (v8)
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
    for (j = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; j = v9 + v12)
    {
      v12 = j & v10;
      v13 = (uint64_t *)(v8 + 40 * (j & v10));
      v14 = *v13;
      if (!*v13)
      {
        v16 = *(_DWORD *)(v8 - 4);
        v13 = (uint64_t *)(v8 + 40 * v16);
        goto LABEL_18;
      }
      if (v14 != -1 && v14 == *(_QWORD *)a2)
        break;
      ++v9;
    }
    v16 = *(_DWORD *)(v8 - 4);
LABEL_18:
    if (v13 != (uint64_t *)(v8 + 40 * v16))
      return WebCore::Style::Builder::applyCustomPropertyImpl(this, a2, (uint64_t)(v13 + 1));
  }
  return this;
}

void WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::Style::Builder *this@<X0>, WebCore::CSSCustomPropertyValue *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;
  WebCore::Style::BuilderState *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int16 *v25;
  __int16 v26;
  unsigned __int16 *v27;
  unsigned int v28;
  unsigned __int16 *v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;

  v6 = *((unsigned int *)a2 + 18);
  if ((_DWORD)v6 == 1 && *((unsigned __int16 *)a2 + 12) - 1 <= 4)
  {
    *(_DWORD *)a2 += 2;
    *a3 = (uint64_t)a2;
    return;
  }
  v7 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v7)
    *v7 += 2;
  v32 = v7;
  v8 = WebCore::Style::CustomPropertyRegistry::get(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1936) + 1328) + 296), (uint64_t)&v32);
  v10 = v8;
  if (!(_DWORD)v6 || v8)
  {
    *(_QWORD *)&v24 = this;
    if ((_DWORD)v6 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v27 = (unsigned __int16 *)&v24;
      ((void (*)(uint64_t *__return_ptr, unsigned __int16 **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore5Style7Builder26resolveCustomPropertyValueERNS8_22CSSCustomPropertyValueEE3__0JZNSA_26resolveCustomPropertyValueESC_E3__1ZNSA_26resolveCustomPropertyValueESC_E3__2EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISK_EENS6_21DefaultRefDerefTraitsISK_EEEENS8_10CSSValueIDENSJ_INS8_15CSSVariableDataENSL_ISR_EENSN_ISR_EEEENS_7variantIJNS8_6LengthENSB_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSL_IS10_EENSN_IS10_EEEENS6_3URLENS6_6StringENSB_20TransformSyntaxValueEEEENSB_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v31, &v27, (char *)a2 + 24);
      v11 = v31;
      if (!v31)
      {
        *a3 = 0;
LABEL_15:
        v7 = v32;
        goto LABEL_16;
      }
      if (!v10)
      {
        ++*(_DWORD *)v31;
        v12 = WTF::fastCompactMalloc((WTF *)0x60);
        *(_DWORD *)v12 = 2;
        v13 = *(_BYTE *)(v12 + 6);
        *(_WORD *)(v12 + 4) = -6144;
        *(_BYTE *)(v12 + 6) = v13 & 0xFC;
        if (v7)
          *v7 += 2;
        *(_QWORD *)(v12 + 8) = v7;
        *(_QWORD *)(v12 + 24) = v11;
        *(_DWORD *)(v12 + 72) = 2;
        *(_QWORD *)(v12 + 80) = 0;
        *(_QWORD *)(v12 + 88) = 0;
        *a3 = v12;
        goto LABEL_12;
      }
      v7 = (_DWORD *)(v10 + 8);
      v19 = *(_QWORD *)(v31 + 16) + 24 * *(unsigned int *)(v31 + 28);
      *(_QWORD *)&v24 = *(_QWORD *)(v31 + 16);
      *((_QWORD *)&v24 + 1) = v19;
      WebCore::CSSPropertyParser::collectParsedCustomPropertyValueDependencies(v10 + 8, &v24, v31 + 32, (uint64_t)&v27);
      v26 = 0;
      *(_QWORD *)&v24 = this;
      *((_QWORD *)&v24 + 1) = (char *)&v26 + 1;
      v25 = &v26;
      WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_3::operator()<WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v24, v27, v28);
      if (*((_QWORD *)this + 1939) == *(_QWORD *)(*((_QWORD *)this + 1936) + 1272))
        WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_3::operator()<WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)&v24, v29, v30);
      if (HIBYTE(v26))
      {
        *a3 = 0;
LABEL_44:
        WebCore::ComputedStyleDependencies::~ComputedStyleDependencies((WebCore::ComputedStyleDependencies *)&v27, v20);
LABEL_12:
        v14 = v31;
        v31 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 1)
          {
            v15 = *(WTF::StringImpl **)(v14 + 72);
            *(_QWORD *)(v14 + 72) = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2)
                WTF::StringImpl::destroy(v15, v9);
              else
                *(_DWORD *)v15 -= 2;
            }
            v16 = *(WTF::StringImpl **)(v14 + 32);
            *(_QWORD *)(v14 + 32) = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 2)
                WTF::StringImpl::destroy(v16, v9);
              else
                *(_DWORD *)v16 -= 2;
            }
            v17 = *(WTF **)(v14 + 16);
            if (v17)
            {
              *(_QWORD *)(v14 + 16) = 0;
              *(_DWORD *)(v14 + 24) = 0;
              WTF::fastFree(v17, v9);
            }
            v18 = *(WTF::StringImpl **)(v14 + 8);
            *(_QWORD *)(v14 + 8) = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v9);
              else
                *(_DWORD *)v18 -= 2;
            }
            WTF::fastFree((WTF *)v14, v9);
          }
          else
          {
            --*(_DWORD *)v14;
          }
        }
        goto LABEL_15;
      }
    }
    v21 = (WebCore::Style::Builder *)((char *)this + 15464);
    if ((_BYTE)v26)
      WebCore::Style::BuilderState::updateFont(v21);
    v22 = *(_QWORD *)(v31 + 16) + 24 * *(unsigned int *)(v31 + 28);
    *(_QWORD *)&v23 = *(_QWORD *)(v31 + 16);
    *((_QWORD *)&v23 + 1) = v22;
    WebCore::CSSPropertyParser::parseTypedCustomPropertyValue(&v32, (uint64_t)v7, &v23, (uint64_t)v21, v31 + 32, a3);
    goto LABEL_44;
  }
  *(_DWORD *)a2 += 2;
  *a3 = (uint64_t)a2;
LABEL_16:
  v32 = 0;
  if (v7)
  {
    if (*v7 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v9);
    else
      *v7 -= 2;
  }
}

_DWORD *WebCore::Style::Builder::applyCustomPropertyValue(WebCore::CSSCustomPropertyValue const&,WebCore::Style::ApplyValueType,WebCore::CSSRegisteredCustomProperty const*)::$_1::operator()(uint64_t **a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t *v9;
  uint64_t v10;
  _DWORD *v11;
  char v12;
  _DWORD *v13;
  _BOOL4 v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  _DWORD *result;
  uint64_t v22;
  _DWORD *v23;

  v2 = **a1;
  if (!v2 || (v3 = *(_DWORD **)(v2 + 32)) == 0)
  {
    v9 = a1[2];
    v10 = WTF::fastCompactMalloc((WTF *)0x60);
    v11 = (_DWORD *)v10;
    v12 = *(_BYTE *)(v10 + 6);
    *(_WORD *)(v10 + 4) = -6144;
    *(_BYTE *)(v10 + 6) = v12 & 0xFC;
    v13 = (_DWORD *)v9[1];
    if (v13)
      *v13 += 2;
    *(_QWORD *)(v10 + 8) = v13;
    *(_WORD *)(v10 + 24) = 0;
    v14 = 1;
    *(_DWORD *)(v10 + 72) = 1;
    *(_QWORD *)(v10 + 80) = 0;
    *(_QWORD *)(v10 + 88) = 0;
    v15 = a1[1];
    v17 = (uint64_t *)*v15;
    v16 = v15[1];
    v18 = *v17;
    if (v18)
      v14 = *(unsigned __int8 *)(v18 + 24) != 0;
    v19 = *(_QWORD *)(v16 + 15480);
    *v11 = 4;
    v23 = v11;
    WebCore::RenderStyle::setCustomPropertyValue(v19, (WTF::StringImpl *)&v23, v14);
    result = v23;
    v23 = 0;
    if (result)
    {
      if (*result == 2)
        result = (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v20);
      else
        *result -= 2;
    }
    if (*v11 != 2)
    {
      *v11 -= 2;
      return result;
    }
    result = v11;
    return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v20);
  }
  v4 = a1[1];
  v6 = (uint64_t *)*v4;
  v5 = v4[1];
  v7 = *v6;
  if (v7)
    v8 = *(unsigned __int8 *)(v7 + 24) != 0;
  else
    v8 = 1;
  v22 = *(_QWORD *)(v5 + 15480);
  *v3 += 2;
  v23 = v3;
  WebCore::RenderStyle::setCustomPropertyValue(v22, (WTF::StringImpl *)&v23, v8);
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*result != 2)
    {
      *result -= 2;
      return result;
    }
    return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v20);
  }
  return result;
}

_DWORD *WebCore::Style::Builder::applyCustomPropertyValue(WebCore::CSSCustomPropertyValue const&,WebCore::Style::ApplyValueType,WebCore::CSSRegisteredCustomProperty const*)::$_2::operator()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int i;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int j;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v20;
  _DWORD *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  _DWORD *v34;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 15496);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 216);
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 8);
    do
    {
      v5 = *(_QWORD *)(v3 + 16);
      if (v5)
      {
        v6 = 0;
        for (i = *(_DWORD *)(v4 + 16) >> 8; ; i = v6 + v8)
        {
          v8 = i & *(_DWORD *)(v5 - 8);
          v9 = *(_QWORD *)(v5 + 16 * v8);
          if (!v9)
            break;
          if (v9 != -1 && v9 == v4)
          {
            v11 = *(_DWORD **)(v5 + 16 * v8 + 8);
            if (!v11)
              break;
            v22 = **(_QWORD **)(a1 + 16);
            if (!v22 || *(_BYTE *)(v22 + 24))
            {
              v23 = *(_QWORD *)(a1 + 24);
              v25 = *(uint64_t **)v23;
              v24 = *(_QWORD *)(v23 + 8);
              v26 = *v25;
              if (v26)
                v27 = *(unsigned __int8 *)(v26 + 24) != 0;
              else
                v27 = 1;
              v32 = *(_QWORD *)(v24 + 15480);
              *v11 += 2;
              v34 = v11;
LABEL_36:
              WebCore::RenderStyle::setCustomPropertyValue(v32, (WTF::StringImpl *)&v34, v27);
              result = v34;
              v34 = 0;
              if (result)
              {
                if (*result == 2)
                  return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v33);
                else
                  *result -= 2;
              }
              return result;
            }
            goto LABEL_13;
          }
          ++v6;
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3);
  }
LABEL_13:
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 40) + 288);
  if (v12)
  {
    v13 = *(_QWORD *)(v1 + 8);
    do
    {
      v14 = *(_QWORD *)(v12 + 16);
      if (v14)
      {
        v15 = 0;
        for (j = *(_DWORD *)(v13 + 16) >> 8; ; j = v15 + v17)
        {
          v17 = j & *(_DWORD *)(v14 - 8);
          v18 = *(_QWORD *)(v14 + 16 * v17);
          if (!v18)
            break;
          if (v18 != -1 && v18 == v13)
          {
            v20 = *(_DWORD **)(v14 + 16 * v17 + 8);
            if (!v20)
              break;
            v28 = *(_QWORD *)(a1 + 24);
            v30 = *(uint64_t **)v28;
            v29 = *(_QWORD *)(v28 + 8);
            v31 = *v30;
            if (v31)
              v27 = *(unsigned __int8 *)(v31 + 24) != 0;
            else
              v27 = 1;
            v32 = *(_QWORD *)(v29 + 15480);
            *v20 += 2;
            v34 = v20;
            goto LABEL_36;
          }
          ++v15;
        }
      }
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12);
  }
  return WebCore::Style::Builder::applyCustomPropertyValue(WebCore::CSSCustomPropertyValue const&,WebCore::Style::ApplyValueType,WebCore::CSSRegisteredCustomProperty const*)::$_1::operator()(*(uint64_t ***)(a1 + 32));
}

void WebCore::Style::Builder::resolveCustomPropertyForContainerQueries(WebCore::Style::Builder *this@<X0>, const WebCore::CSSCustomPropertyValue *a2@<X1>, uint64_t *a3@<X8>)
{
  WTF::StringImpl *v5;
  _DWORD *v6;
  unsigned int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int m;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int k;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v31;
  int v32;
  unsigned int i;
  uint64_t v34;
  _DWORD *v35;
  int v36;
  unsigned int j;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;

  if (*((_DWORD *)a2 + 18) != 1 || (v7 = *((unsigned __int16 *)a2 + 12) - 1, v7 > 4))
  {
    WebCore::Style::Builder::resolveCustomPropertyValue(this, a2, (uint64_t *)&v40);
    if (v40)
    {
      *a3 = (uint64_t)v40;
    }
    else
    {
      WebCore::CSSCustomPropertyValue::createWithID((_DWORD **)a2 + 1, 0, a3);
      v6 = v40;
      v40 = 0;
      if (v6)
      {
        if (*v6 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v5);
        else
          *v6 -= 2;
      }
    }
    return;
  }
  v8 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v8)
    *v8 += 2;
  v40 = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1936) + 1328) + 296);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10)
  {
    v32 = 0;
    for (i = v8[4] >> 8; ; i = v32 + v34)
    {
      v34 = i & *(_DWORD *)(v10 - 8);
      v35 = *(_DWORD **)(v10 + 16 * v34);
      if (v35 != (_DWORD *)-1)
      {
        if (!v35)
          goto LABEL_13;
        if (v35 == v8)
          break;
      }
      ++v32;
    }
    v11 = *(_QWORD *)(v10 + 16 * v34 + 8);
    if (v11)
      goto LABEL_70;
  }
LABEL_13:
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    v36 = 0;
    for (j = v8[4] >> 8; ; j = v36 + v38)
    {
      v38 = j & *(_DWORD *)(v11 - 8);
      v39 = *(_DWORD **)(v11 + 16 * v38);
      if (v39 != (_DWORD *)-1)
      {
        if (!v39)
        {
          v11 = 0;
          goto LABEL_14;
        }
        if (v39 == v8)
          break;
      }
      ++v36;
    }
    v11 = *(_QWORD *)(v11 + 16 * v38 + 8);
    if (v11)
    {
LABEL_70:
      v12 = 0;
      v13 = *(_BYTE *)(v11 + 24) != 0;
      goto LABEL_15;
    }
  }
LABEL_14:
  v12 = 1;
  v13 = 1;
LABEL_15:
  switch(v7)
  {
    case 0u:
      v14 = *((_QWORD *)this + 1937);
      if (v13)
        v15 = (uint64_t *)(*(_QWORD *)(v14 + 24) + 216);
      else
        v15 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 40) + 288);
      v24 = *v15;
      if (!v24)
        goto LABEL_45;
      while (1)
      {
        v25 = *(_QWORD *)(v24 + 16);
        if (v25)
        {
          v26 = 0;
          for (k = v8[4] >> 8; ; k = v26 + v28)
          {
            v28 = k & *(_DWORD *)(v25 - 8);
            v29 = *(_DWORD **)(v25 + 16 * v28);
            if (!v29)
              goto LABEL_44;
            if (v29 != (_DWORD *)-1 && v29 == v8)
              break;
            ++v26;
          }
          v23 = *(_DWORD **)(v25 + 16 * v28 + 8);
          if (v23)
            goto LABEL_54;
        }
LABEL_44:
        v24 = *(_QWORD *)(v24 + 8);
        if (!v24)
          goto LABEL_45;
      }
    case 1u:
      goto LABEL_45;
    case 2u:
      if (!v13)
        goto LABEL_45;
      v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1937) + 24) + 216);
      if (!v16)
        goto LABEL_45;
      break;
    default:
      *a3 = 0;
      if (!v8)
        return;
      goto LABEL_51;
  }
  do
  {
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = 0;
      for (m = v8[4] >> 8; ; m = v18 + v20)
      {
        v20 = m & *(_DWORD *)(v17 - 8);
        v21 = *(_DWORD **)(v17 + 16 * v20);
        if (!v21)
          break;
        if (v21 != (_DWORD *)-1 && v21 == v8)
        {
          v23 = *(_DWORD **)(v17 + 16 * v20 + 8);
          if (!v23)
            break;
LABEL_54:
          *v23 += 2;
          *a3 = (uint64_t)v23;
          if (v8)
            goto LABEL_51;
          return;
        }
        ++v18;
      }
    }
    v16 = *(_QWORD *)(v16 + 8);
  }
  while (v16);
LABEL_45:
  if ((v12 & 1) != 0)
  {
    WebCore::CSSCustomPropertyValue::createWithID(&v40, 0, a3);
    if (!v8)
      return;
    goto LABEL_51;
  }
  v31 = *(_DWORD **)(v11 + 32);
  if (v31)
    *v31 += 2;
  *a3 = (uint64_t)v31;
  if (v8)
  {
LABEL_51:
    if (*v8 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v8, a2);
    else
      *v8 -= 2;
  }
}

uint64_t WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_3::operator()<WTF::Vector<WebCore::CSSPropertyID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t result, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a3)
  {
    v3 = *(_QWORD *)result + 15624;
    v4 = *(_QWORD *)result + 15696;
    v5 = 2 * a3;
    while (1)
    {
      v6 = *a2;
      if (v6 >= 0x240)
        break;
      if ((*(_QWORD *)(v3 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
      {
        *(_QWORD *)(v4 + 8 * (v6 >> 6)) |= 1 << v6;
        **(_BYTE **)(result + 8) = 1;
      }
      if ((_DWORD)v6 == 13)
        **(_BYTE **)(result + 16) = 1;
      ++a2;
      v5 -= 2;
      if (!v5)
        return result;
    }
    __break(1u);
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *,false>(unint64_t result, unsigned __int16 *a2, uint64_t *a3, uint64_t a4, char a5)
{
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unsigned __int16 v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  unsigned __int16 v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned __int16 v67;
  unsigned __int16 v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned int v80;
  unsigned __int16 *v81;
  unsigned __int16 *v82;
  unsigned int v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned __int16 v87;
  uint64_t v88;
  unsigned __int16 *v89;
  unsigned __int16 *v90;
  unsigned __int16 *v91;
  unsigned int v92;
  unsigned __int16 *v93;
  char v94;
  unint64_t v95;
  unsigned __int16 *v96;
  unint64_t v97;
  unsigned __int16 *v98;
  unint64_t v99;
  unsigned int v100;
  unsigned __int16 *v101;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  unsigned __int16 v105;
  unsigned __int16 *v106;
  unsigned int v107;
  unint64_t v108;
  unsigned __int16 *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned __int16 *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int16 *v122;
  unsigned __int16 *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned __int16 *v129;
  int64_t v130;
  int64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned __int16 *v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  unsigned __int16 *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int16 v152;
  uint64_t v153;
  unsigned __int16 *v154;
  unsigned __int16 *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unsigned __int16 *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  unsigned __int16 *v166;
  uint64_t v168;
  uint64_t v169;
  unsigned __int16 *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned __int16 *v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unsigned int v178;
  uint64_t v179;
  unsigned __int16 *v180;
  uint64_t v181;

  v9 = (unsigned __int16 *)result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v110 = *(a2 - 1);
        if ((unint64_t)(v110 - 351) >= 0x6C)
          goto LABEL_259;
        v111 = *v10;
        if ((unint64_t)(v111 - 351) >= 0x6C)
          goto LABEL_259;
        if (*(_DWORD *)(*a3 + 14784 + 4 * (v110 - 351)) < *(_DWORD *)(*a3 + 14784 + 4 * (v111 - 351)))
        {
          *v10 = v110;
          goto LABEL_257;
        }
        return result;
      case 3:
        v112 = v10[1];
        if ((unint64_t)(v112 - 351) >= 0x6C)
          goto LABEL_259;
        v111 = *v10;
        if ((unint64_t)(v111 - 351) >= 0x6C)
          goto LABEL_259;
        v113 = *a3 + 14784;
        v114 = *(_DWORD *)(v113 + 4 * (v112 - 351));
        v115 = *(_DWORD *)(v113 + 4 * (v111 - 351));
        v116 = *(a2 - 1);
        v117 = v116 - 351;
        if (v114 >= v115)
        {
          if (v117 >= 0x6C)
            goto LABEL_259;
          if (*(_DWORD *)(v113 + 4 * v117) < v114)
          {
            v10[1] = v116;
            *(a2 - 1) = v112;
            v168 = v10[1];
            if ((unint64_t)(v168 - 351) >= 0x6C)
              goto LABEL_259;
            v169 = *v10;
            if ((unint64_t)(v169 - 351) >= 0x6C)
              goto LABEL_259;
            if (*(_DWORD *)(v113 + 4 * (v168 - 351)) < *(_DWORD *)(v113 + 4 * (v169 - 351)))
            {
              *v10 = v168;
              v10[1] = v169;
            }
          }
        }
        else
        {
          if (v117 >= 0x6C)
            goto LABEL_259;
          if (*(_DWORD *)(v113 + 4 * v117) < v114)
          {
            *v10 = v116;
LABEL_257:
            *(a2 - 1) = v111;
            return result;
          }
          *v10 = v112;
          v10[1] = v111;
          v181 = *(a2 - 1);
          if ((unint64_t)(v181 - 351) >= 0x6C)
            goto LABEL_259;
          if (*(_DWORD *)(v113 + 4 * (v181 - 351)) < v115)
          {
            v10[1] = v181;
            goto LABEL_257;
          }
        }
        return result;
      case 4:
        return (unint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *>(v10, v10 + 1, v10 + 2, a2 - 1, *a3);
      case 5:
        return (unint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *,0>(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1, a3);
      default:
        if (v11 <= 47)
        {
          v118 = *a3;
          if ((a5 & 1) != 0)
          {
            if (v10 == a2)
              return result;
            v119 = v10 + 1;
            if (v10 + 1 == a2)
              return result;
            v120 = v118 + 14784;
            v121 = 2;
            v122 = v10;
            while (1)
            {
              v123 = v119;
              v124 = v122[1];
              if ((unint64_t)(v124 - 351) >= 0x6C)
                break;
              v125 = *v122;
              if ((unint64_t)(v125 - 351) >= 0x6C)
                break;
              v126 = *(_DWORD *)(v120 + 4 * (v124 - 351));
              if (v126 < *(_DWORD *)(v120 + 4 * (v125 - 351)))
              {
                v127 = v121;
                while (1)
                {
                  *(unsigned __int16 *)((char *)v10 + v127) = v125;
                  v128 = v127 - 2;
                  if (v127 == 2)
                    break;
                  v125 = *(unsigned __int16 *)((char *)v10 + v127 - 4);
                  if ((unint64_t)(v125 - 351) >= 0x6C)
                    goto LABEL_259;
                  v127 -= 2;
                  if (v126 >= *(_DWORD *)(v120 + 4 * (v125 - 351)))
                  {
                    v129 = (unsigned __int16 *)((char *)v10 + v128);
                    goto LABEL_181;
                  }
                }
                v129 = v10;
LABEL_181:
                *v129 = v124;
              }
              v119 = v123 + 1;
              v121 += 2;
              v122 = v123;
              if (v123 + 1 == a2)
                return result;
            }
          }
          else
          {
            if (v10 == a2)
              return result;
            v170 = v10 + 1;
            if (v10 + 1 == a2)
              return result;
            v171 = 0;
            v172 = v118 + 14784;
            v173 = 1;
            v174 = v10;
            while (1)
            {
              v175 = v173;
              v176 = *v170;
              if ((unint64_t)(v176 - 351) >= 0x6C)
                break;
              v177 = *v174 - 351;
              if (v177 >= 0x6C)
                break;
              v178 = *(_DWORD *)(v172 + 4 * (v176 - 351));
              if (v178 < *(_DWORD *)(v172 + 4 * v177))
              {
                v179 = 0;
                LOWORD(v171) = v10[v171];
                while (1)
                {
                  v180 = &v170[v179];
                  *v180 = v171;
                  if (!(v175 + v179))
                    goto LABEL_259;
                  v171 = *(v180 - 2);
                  if ((unint64_t)(v171 - 351) >= 0x6C)
                    goto LABEL_259;
                  --v179;
                  if (v178 >= *(_DWORD *)(v172 + 4 * (v171 - 351)))
                  {
                    v170[v179] = v176;
                    break;
                  }
                }
              }
              v174 = &v10[v175];
              v173 = v175 + 1;
              ++v170;
              v171 = v175;
              if (v170 == a2)
                return result;
            }
          }
LABEL_259:
          __break(1u);
          return result;
        }
        if (a4)
        {
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = *a3;
          if ((unint64_t)v11 >= 0x101)
          {
            v16 = *v14;
            if ((unint64_t)(v16 - 351) >= 0x6C)
              goto LABEL_259;
            v17 = *v10;
            if ((unint64_t)(v17 - 351) >= 0x6C)
              goto LABEL_259;
            v18 = v15 + 14784;
            v19 = *(_DWORD *)(v15 + 14784 + 4 * (v16 - 351));
            v20 = *(_DWORD *)(v15 + 14784 + 4 * (v17 - 351));
            v21 = *(a2 - 1);
            v22 = v21 - 351;
            if (v19 >= v20)
            {
              if (v22 >= 0x6C)
                goto LABEL_259;
              if (*(_DWORD *)(v18 + 4 * v22) < v19)
              {
                *v14 = v21;
                *(a2 - 1) = v16;
                v30 = *v14;
                if ((unint64_t)(v30 - 351) >= 0x6C)
                  goto LABEL_259;
                v31 = *v10;
                if ((unint64_t)(v31 - 351) >= 0x6C)
                  goto LABEL_259;
                if (*(_DWORD *)(v18 + 4 * (v30 - 351)) < *(_DWORD *)(v18 + 4 * (v31 - 351)))
                {
                  *v10 = v30;
                  *v14 = v31;
                }
              }
            }
            else
            {
              if (v22 >= 0x6C)
                goto LABEL_259;
              if (*(_DWORD *)(v18 + 4 * v22) < v19)
              {
                *v10 = v21;
LABEL_34:
                *(a2 - 1) = v17;
                goto LABEL_35;
              }
              *v10 = v16;
              *v14 = v17;
              v34 = *(a2 - 1);
              if ((unint64_t)(v34 - 351) >= 0x6C)
                goto LABEL_259;
              if (*(_DWORD *)(v18 + 4 * (v34 - 351)) < v20)
              {
                *v14 = v34;
                goto LABEL_34;
              }
            }
LABEL_35:
            v35 = &v10[v13];
            v38 = *(v35 - 1);
            v36 = v35 - 1;
            v37 = v38;
            v39 = v38 - 351;
            if (v39 >= 0x6C)
              goto LABEL_259;
            v40 = v10[1];
            if ((unint64_t)(v40 - 351) >= 0x6C)
              goto LABEL_259;
            v41 = *(_DWORD *)(v18 + 4 * v39);
            v42 = *(_DWORD *)(v18 + 4 * (v40 - 351));
            v43 = *(a2 - 2);
            result = v43 - 351;
            if (v41 >= v42)
            {
              if (result >= 0x6C)
                goto LABEL_259;
              if (*(_DWORD *)(v18 + 4 * result) < v41)
              {
                *v36 = v43;
                *(a2 - 2) = v37;
                v44 = *v36;
                if ((unint64_t)(v44 - 351) >= 0x6C)
                  goto LABEL_259;
                v45 = v10[1];
                if ((unint64_t)(v45 - 351) >= 0x6C)
                  goto LABEL_259;
                if (*(_DWORD *)(v18 + 4 * (v44 - 351)) < *(_DWORD *)(v18 + 4 * (v45 - 351)))
                {
                  v10[1] = v44;
                  *v36 = v45;
                }
              }
            }
            else
            {
              if (result >= 0x6C)
                goto LABEL_259;
              result = *(unsigned int *)(v18 + 4 * result);
              if (result < v41)
              {
                v10[1] = v43;
LABEL_54:
                *(a2 - 2) = v40;
                goto LABEL_55;
              }
              v10[1] = v37;
              *v36 = v40;
              v47 = *(a2 - 2);
              if ((unint64_t)(v47 - 351) >= 0x6C)
                goto LABEL_259;
              if (*(_DWORD *)(v18 + 4 * (v47 - 351)) < v42)
              {
                *v36 = v47;
                goto LABEL_54;
              }
            }
LABEL_55:
            v48 = &v10[v13];
            v51 = v48[1];
            v49 = v48 + 1;
            v50 = v51;
            v52 = v51 - 351;
            if (v52 >= 0x6C)
              goto LABEL_259;
            v53 = v10[2];
            if ((unint64_t)(v53 - 351) >= 0x6C)
              goto LABEL_259;
            v54 = *(_DWORD *)(v18 + 4 * v52);
            v55 = *(_DWORD *)(v18 + 4 * (v53 - 351));
            v56 = *(a2 - 3);
            result = v56 - 351;
            if (v54 >= v55)
            {
              if (result >= 0x6C)
                goto LABEL_259;
              if (*(_DWORD *)(v18 + 4 * result) < v54)
              {
                *v49 = v56;
                *(a2 - 3) = v50;
                v57 = *v49;
                if ((unint64_t)(v57 - 351) >= 0x6C)
                  goto LABEL_259;
                v58 = v10[2];
                if ((unint64_t)(v58 - 351) >= 0x6C)
                  goto LABEL_259;
                if (*(_DWORD *)(v18 + 4 * (v57 - 351)) < *(_DWORD *)(v18 + 4 * (v58 - 351)))
                {
                  v10[2] = v57;
                  *v49 = v58;
                }
              }
            }
            else
            {
              if (result >= 0x6C)
                goto LABEL_259;
              result = *(unsigned int *)(v18 + 4 * result);
              if (result < v54)
              {
                v10[2] = v56;
LABEL_70:
                *(a2 - 3) = v53;
                goto LABEL_71;
              }
              v10[2] = v50;
              *v49 = v53;
              v59 = *(a2 - 3);
              if ((unint64_t)(v59 - 351) >= 0x6C)
                goto LABEL_259;
              if (*(_DWORD *)(v18 + 4 * (v59 - 351)) < v55)
              {
                *v49 = v59;
                goto LABEL_70;
              }
            }
LABEL_71:
            v60 = *v14;
            if ((unint64_t)(v60 - 351) >= 0x6C)
              goto LABEL_259;
            v61 = *v36;
            if ((unint64_t)(v61 - 351) >= 0x6C)
              goto LABEL_259;
            v62 = *(_DWORD *)(v18 + 4 * (v60 - 351));
            v63 = *(_DWORD *)(v18 + 4 * (v61 - 351));
            v64 = *v49;
            result = v64 - 351;
            if (v62 >= v63)
            {
              if (result >= 0x6C)
                goto LABEL_259;
              v66 = *(_DWORD *)(v18 + 4 * result);
              if (v66 >= v62)
                goto LABEL_83;
              *v14 = v64;
              *v49 = v60;
              v49 = v14;
              LOWORD(v60) = v61;
              if (v66 >= v63)
              {
                LOWORD(v60) = v64;
                goto LABEL_83;
              }
            }
            else
            {
              if (result >= 0x6C)
                goto LABEL_259;
              v65 = *(_DWORD *)(v18 + 4 * result);
              if (v65 >= v62)
              {
                *v36 = v60;
                *v14 = v61;
                v36 = v14;
                LOWORD(v60) = v64;
                if (v65 >= v63)
                {
                  LOWORD(v60) = v61;
LABEL_83:
                  v67 = *v10;
                  *v10 = v60;
                  *v14 = v67;
                  goto LABEL_84;
                }
              }
            }
            *v36 = v64;
            *v49 = v61;
            goto LABEL_83;
          }
          v23 = *v10;
          if ((unint64_t)(v23 - 351) >= 0x6C)
            goto LABEL_259;
          v24 = *v14;
          if ((unint64_t)(v24 - 351) >= 0x6C)
            goto LABEL_259;
          v25 = v15 + 14784;
          v26 = *(_DWORD *)(v15 + 14784 + 4 * (v23 - 351));
          v27 = *(_DWORD *)(v15 + 14784 + 4 * (v24 - 351));
          v28 = *(a2 - 1);
          v29 = v28 - 351;
          if (v26 >= v27)
          {
            if (v29 >= 0x6C)
              goto LABEL_259;
            if (*(_DWORD *)(v25 + 4 * v29) < v26)
            {
              *v10 = v28;
              *(a2 - 1) = v23;
              v32 = *v10;
              if ((unint64_t)(v32 - 351) >= 0x6C)
                goto LABEL_259;
              v33 = *v14;
              if ((unint64_t)(v33 - 351) >= 0x6C)
                goto LABEL_259;
              if (*(_DWORD *)(v25 + 4 * (v32 - 351)) < *(_DWORD *)(v25 + 4 * (v33 - 351)))
              {
                *v14 = v32;
                *v10 = v33;
              }
            }
          }
          else
          {
            if (v29 >= 0x6C)
              goto LABEL_259;
            if (*(_DWORD *)(v25 + 4 * v29) < v26)
            {
              *v14 = v28;
LABEL_50:
              *(a2 - 1) = v24;
              goto LABEL_84;
            }
            *v14 = v23;
            *v10 = v24;
            v46 = *(a2 - 1);
            if ((unint64_t)(v46 - 351) >= 0x6C)
              goto LABEL_259;
            if (*(_DWORD *)(v25 + 4 * (v46 - 351)) < v27)
            {
              *v10 = v46;
              goto LABEL_50;
            }
          }
LABEL_84:
          --a4;
          v68 = *v10;
          if ((a5 & 1) == 0)
          {
            v72 = *(v10 - 1) - 351;
            if (v72 >= 0x6C)
              goto LABEL_259;
            v73 = *v10 - 351;
            if (v73 >= 0x6C)
              goto LABEL_259;
            v74 = v15 + 14784;
            v75 = *(_DWORD *)(v74 + 4 * v72);
            v76 = *(_DWORD *)(v74 + 4 * v73);
            if (v75 < v76)
            {
              v70 = *a3 + 14784;
              v71 = (unsigned int *)(v70 + 4 * v73);
              goto LABEL_91;
            }
            v95 = *(a2 - 1) - 351;
            if (v95 >= 0x6C)
              goto LABEL_259;
            if (v76 >= *(_DWORD *)(v74 + 4 * v95))
            {
              v98 = v10 + 1;
              do
              {
                v10 = v98;
                if (v98 >= a2)
                  break;
                v99 = *v98 - 351;
                if (v99 >= 0x6C)
                  goto LABEL_259;
                v100 = *(_DWORD *)(v74 + 4 * v99);
                v98 = v10 + 1;
              }
              while (v76 >= v100);
            }
            else
            {
              v96 = v10 + 1;
              do
              {
                if (v96 == a2)
                  goto LABEL_259;
                v97 = *v96 - 351;
                if (v97 >= 0x6C)
                  goto LABEL_259;
                ++v96;
              }
              while (v76 >= *(_DWORD *)(v74 + 4 * v97));
              v10 = v96 - 1;
            }
            v101 = a2;
            if (v10 < a2)
            {
              v101 = a2;
              while (v101 != v9)
              {
                v102 = *--v101;
                v103 = v102 - 351;
                if (v103 >= 0x6C)
                  break;
                if (v76 >= *(_DWORD *)(v74 + 4 * v103))
                  goto LABEL_139;
              }
              goto LABEL_259;
            }
LABEL_139:
            if (v10 < v101)
            {
              LOWORD(v104) = *v10;
              v105 = *v101;
              do
              {
                *v10 = v105;
                v106 = v10 + 1;
                *v101 = v104;
                do
                {
                  if (v106 == a2)
                    goto LABEL_259;
                  v104 = *v106;
                  if ((unint64_t)(v104 - 351) >= 0x6C)
                    goto LABEL_259;
                  ++v106;
                }
                while (v76 >= *(_DWORD *)(v74 + 4 * (v104 - 351)));
                v10 = v106 - 1;
                do
                {
                  if (v101 != v9)
                  {
                    v107 = *--v101;
                    v105 = v107;
                    v108 = v107 - 351;
                    if (v108 < 0x6C)
                      continue;
                  }
                  goto LABEL_259;
                }
                while (v76 < *(_DWORD *)(v74 + 4 * v108));
              }
              while (v10 < v101);
            }
            v109 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v109;
            a5 = 0;
            *v109 = v68;
            continue;
          }
          v69 = *v10 - 351;
          if (v69 > 0x6B)
            goto LABEL_259;
          v70 = *a3 + 14784;
          v71 = (unsigned int *)(v70 + 4 * v69);
LABEL_91:
          v77 = 0;
          do
          {
            v78 = &v10[v77 + 1];
            if (v78 == a2)
              goto LABEL_259;
            v79 = *v78;
            if ((unint64_t)(v79 - 351) > 0x6B)
              goto LABEL_259;
            v80 = *v71;
            ++v77;
          }
          while (*(_DWORD *)(v70 + 4 * (v79 - 351)) < *v71);
          v81 = &v10[v77];
          v82 = a2;
          if (v77 != 1)
          {
            while (v82 != v10)
            {
              v83 = *--v82;
              v84 = v83 - 351;
              if (v84 >= 0x6C)
                break;
              if (*(_DWORD *)(v70 + 4 * v84) < v80)
                goto LABEL_104;
            }
            goto LABEL_259;
          }
          v82 = a2;
          do
          {
            if (v81 >= v82)
              break;
            v85 = *--v82;
            v86 = v85 - 351;
            if (v86 >= 0x6C)
              goto LABEL_259;
          }
          while (*(_DWORD *)(v70 + 4 * v86) >= v80);
LABEL_104:
          if (v81 >= v82)
          {
            v93 = v81 - 1;
          }
          else
          {
            v87 = *v82;
            LOWORD(v88) = v79;
            v89 = v81;
            v90 = v82;
            do
            {
              *v89 = v87;
              *v90 = v88;
              v91 = v89 + 1;
              do
              {
                if (v91 == a2)
                  goto LABEL_259;
                v88 = *v91;
                if ((unint64_t)(v88 - 351) >= 0x6C)
                  goto LABEL_259;
                ++v91;
              }
              while (*(_DWORD *)(v70 + 4 * (v88 - 351)) < v80);
              v89 = v91 - 1;
              do
              {
                if (v90 == v10)
                  goto LABEL_259;
                v92 = *--v90;
                v87 = v92;
                result = v92 - 351;
                if (result >= 0x6C)
                  goto LABEL_259;
                result = *(unsigned int *)(v70 + 4 * result);
              }
              while (result >= v80);
            }
            while (v89 < v90);
            v93 = v91 - 2;
          }
          if (v93 != v10)
            *v10 = *v93;
          *v93 = v68;
          if (v81 < v82)
            goto LABEL_122;
          v94 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *>((uint64_t)v10, v93, a3);
          v10 = v93 + 1;
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *>((uint64_t)(v93 + 1), a2, a3);
          if (!(_DWORD)result)
          {
            if ((v94 & 1) != 0)
              continue;
LABEL_122:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *,false>(v9, v93, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v93 + 1;
            continue;
          }
          a2 = v93;
          if ((v94 & 1) != 0)
            return result;
          goto LABEL_2;
        }
        if (v10 != a2)
        {
          v130 = (unint64_t)(v12 - 2) >> 1;
          v131 = v130;
          while (1)
          {
            v132 = v131;
            if (v130 >= v131)
            {
              v133 = *a3;
              v134 = (2 * v131) | 1;
              v135 = &v10[v134];
              result = *v135;
              if (2 * v132 + 2 < v12)
              {
                if (result - 351 >= 0x6C)
                  goto LABEL_259;
                v136 = v135[1];
                if ((unint64_t)(v136 - 351) >= 0x6C)
                  goto LABEL_259;
                v137 = *(_DWORD *)(v133 + 14784 + 4 * (result - 351));
                v138 = *(_DWORD *)(v133 + 14784 + 4 * (v136 - 351));
                if (v137 >= v138)
                  result = *v135;
                else
                  result = v135[1];
                if (v137 < v138)
                {
                  ++v135;
                  v134 = 2 * v132 + 2;
                }
              }
              v139 = result - 351;
              if (v139 >= 0x6C)
                goto LABEL_259;
              v140 = &v10[v132];
              v141 = *v140;
              if ((unint64_t)(v141 - 351) >= 0x6C)
                goto LABEL_259;
              v142 = v133 + 14784;
              v143 = *(_DWORD *)(v142 + 4 * v139);
              v144 = *(_DWORD *)(v142 + 4 * (v141 - 351));
              if (v143 >= v144)
              {
                LOWORD(v145) = result;
                do
                {
                  result = (unint64_t)v135;
                  *v140 = v145;
                  if (v130 < v134)
                    break;
                  v146 = (2 * v134) | 1;
                  v135 = &v10[v146];
                  v134 = 2 * v134 + 2;
                  v145 = *v135;
                  if (v134 >= v12)
                  {
                    v134 = v146;
                  }
                  else
                  {
                    if ((unint64_t)(v145 - 351) >= 0x6C)
                      goto LABEL_259;
                    v147 = v135[1];
                    if ((unint64_t)(v147 - 351) >= 0x6C)
                      goto LABEL_259;
                    if (*(_DWORD *)(v142 + 4 * (v145 - 351)) >= *(_DWORD *)(v142 + 4 * (v147 - 351)))
                    {
                      v134 = v146;
                    }
                    else
                    {
                      LODWORD(v145) = v135[1];
                      ++v135;
                    }
                  }
                  v148 = v145 - 351;
                  if (v148 >= 0x6C)
                    goto LABEL_259;
                  v149 = *(_DWORD *)(v142 + 4 * v148);
                  v140 = (unsigned __int16 *)result;
                }
                while (v149 >= v144);
                *(_WORD *)result = v141;
              }
            }
            v131 = v132 - 1;
            if (!v132)
            {
              v150 = (unint64_t)v11 >> 1;
              while (1)
              {
                v151 = 0;
                v152 = *v10;
                v153 = *a3 + 14784;
                v154 = v10;
                do
                {
                  result = 2 * v151 + 2;
                  v155 = (unsigned __int16 *)((char *)v154 + result);
                  v156 = *(unsigned __int16 *)((char *)v154 + result);
                  if ((uint64_t)result >= v150)
                  {
                    v151 = (2 * v151) | 1;
                  }
                  else
                  {
                    if ((unint64_t)(v156 - 351) >= 0x6C)
                      goto LABEL_259;
                    v157 = v155[1];
                    if ((unint64_t)(v157 - 351) >= 0x6C)
                      goto LABEL_259;
                    if (*(_DWORD *)(v153 + 4 * (v156 - 351)) >= *(_DWORD *)(v153 + 4 * (v157 - 351)))
                    {
                      v151 = (2 * v151) | 1;
                    }
                    else
                    {
                      LOWORD(v156) = v155[1];
                      ++v155;
                      v151 = 2 * v151 + 2;
                    }
                  }
                  *v154 = v156;
                  v154 = v155;
                }
                while (v151 <= (uint64_t)((unint64_t)(v150 - 2) >> 1));
                if (v155 == --a2)
                {
                  *v155 = v152;
                }
                else
                {
                  *v155 = *a2;
                  *a2 = v152;
                  v158 = (char *)v155 - (char *)v10 + 2;
                  if (v158 >= 3)
                  {
                    v159 = (((unint64_t)v158 >> 1) - 2) >> 1;
                    v160 = &v10[v159];
                    v161 = *v160;
                    if ((unint64_t)(v161 - 351) >= 0x6C)
                      goto LABEL_259;
                    v162 = *v155;
                    if ((unint64_t)(v162 - 351) >= 0x6C)
                      goto LABEL_259;
                    v163 = *a3 + 14784;
                    result = *(unsigned int *)(v163 + 4 * (v161 - 351));
                    v164 = *(_DWORD *)(v163 + 4 * (v162 - 351));
                    if (result < v164)
                    {
                      LOWORD(v165) = *v160;
                      do
                      {
                        v166 = v160;
                        *v155 = v165;
                        if (!v159)
                          break;
                        v159 = (v159 - 1) >> 1;
                        v160 = &v10[v159];
                        v165 = *v160;
                        if ((unint64_t)(v165 - 351) >= 0x6C)
                          goto LABEL_259;
                        result = *(unsigned int *)(v163 + 4 * (v165 - 351));
                        v155 = v166;
                      }
                      while (result < v164);
                      *v166 = v162;
                    }
                  }
                }
                if (v150-- <= 2)
                  return result;
              }
            }
          }
        }
        return result;
    }
  }
}

_WORD *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *,0>(_WORD *a1, _WORD *a2, _WORD *a3, _WORD *a4, _WORD *a5, uint64_t *a6)
{
  _WORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *>(a1, a2, a3, a4, *a6);
  v13 = (unsigned __int16)*a5;
  if ((unint64_t)(v13 - 351) >= 0x6C)
    goto LABEL_15;
  v14 = (unsigned __int16)*a4;
  if ((unint64_t)(v14 - 351) >= 0x6C)
    goto LABEL_15;
  v15 = *a6 + 14784;
  if (*(_DWORD *)(v15 + 4 * (v13 - 351)) >= *(_DWORD *)(v15 + 4 * (v14 - 351)))
    return result;
  *a4 = v13;
  *a5 = v14;
  v16 = (unsigned __int16)*a4;
  if ((unint64_t)(v16 - 351) >= 0x6C)
    goto LABEL_15;
  v17 = (unsigned __int16)*a3;
  if ((unint64_t)(v17 - 351) >= 0x6C)
    goto LABEL_15;
  if (*(_DWORD *)(v15 + 4 * (v16 - 351)) >= *(_DWORD *)(v15 + 4 * (v17 - 351)))
    return result;
  *a3 = v16;
  *a4 = v17;
  v18 = (unsigned __int16)*a3;
  if ((unint64_t)(v18 - 351) >= 0x6C)
    goto LABEL_15;
  v19 = (unsigned __int16)*a2;
  if ((unint64_t)(v19 - 351) >= 0x6C)
    goto LABEL_15;
  if (*(_DWORD *)(v15 + 4 * (v18 - 351)) >= *(_DWORD *)(v15 + 4 * (v19 - 351)))
    return result;
  *a2 = v18;
  *a3 = v19;
  v20 = (unsigned __int16)*a2;
  if ((unint64_t)(v20 - 351) >= 0x6C || (v21 = (unsigned __int16)*a1, (unint64_t)(v21 - 351) >= 0x6C))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  if (*(_DWORD *)(v15 + 4 * (v20 - 351)) < *(_DWORD *)(v15 + 4 * (v21 - 351)))
  {
    *a1 = v20;
    *a2 = v21;
  }
  return result;
}

uint64_t std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *>(uint64_t result, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = 1;
  switch(((uint64_t)a2 - result) >> 1)
  {
    case 0:
    case 1:
      return v3;
    case 2:
      v4 = *(a2 - 1);
      if ((unint64_t)(v4 - 351) >= 0x6C)
        goto LABEL_52;
      v5 = *(unsigned __int16 *)result;
      if ((unint64_t)(v5 - 351) >= 0x6C)
        goto LABEL_52;
      if (*(_DWORD *)(*a3 + 14784 + 4 * (v4 - 351)) >= *(_DWORD *)(*a3 + 14784 + 4 * (v5 - 351)))
        return 1;
      *(_WORD *)result = v4;
      goto LABEL_48;
    case 3:
      v17 = *(unsigned __int16 *)(result + 2);
      if ((unint64_t)(v17 - 351) >= 0x6C)
        goto LABEL_52;
      v5 = *(unsigned __int16 *)result;
      if ((unint64_t)(v5 - 351) >= 0x6C)
        goto LABEL_52;
      v18 = *a3 + 14784;
      v19 = *(_DWORD *)(v18 + 4 * (v17 - 351));
      v20 = *(_DWORD *)(v18 + 4 * (v5 - 351));
      v21 = *(a2 - 1);
      v22 = v21 - 351;
      if (v19 >= v20)
      {
        if (v22 >= 0x6C)
          goto LABEL_52;
        if (*(_DWORD *)(v18 + 4 * v22) < v19)
        {
          *(_WORD *)(result + 2) = v21;
          *(a2 - 1) = v17;
          v32 = *(unsigned __int16 *)(result + 2);
          if ((unint64_t)(v32 - 351) >= 0x6C)
            goto LABEL_52;
          v33 = *(unsigned __int16 *)result;
          if ((unint64_t)(v33 - 351) >= 0x6C)
            goto LABEL_52;
          if (*(_DWORD *)(v18 + 4 * (v32 - 351)) < *(_DWORD *)(v18 + 4 * (v33 - 351)))
          {
            *(_WORD *)result = v32;
            *(_WORD *)(result + 2) = v33;
          }
        }
      }
      else
      {
        if (v22 >= 0x6C)
          goto LABEL_52;
        if (*(_DWORD *)(v18 + 4 * v22) < v19)
        {
          *(_WORD *)result = v21;
LABEL_48:
          *(a2 - 1) = v5;
          return 1;
        }
        *(_WORD *)result = v17;
        *(_WORD *)(result + 2) = v5;
        v34 = *(a2 - 1);
        if ((unint64_t)(v34 - 351) >= 0x6C)
          goto LABEL_52;
        if (*(_DWORD *)(v18 + 4 * (v34 - 351)) < v20)
        {
          *(_WORD *)(result + 2) = v34;
          goto LABEL_48;
        }
      }
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *>((_WORD *)result, (_WORD *)(result + 2), (_WORD *)(result + 4), a2 - 1, *a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *,0>((_WORD *)result, (_WORD *)(result + 2), (_WORD *)(result + 4), (_WORD *)(result + 6), a2 - 1, a3);
      return 1;
    default:
      v6 = *(unsigned __int16 *)(result + 2);
      if ((unint64_t)(v6 - 351) >= 0x6C)
        goto LABEL_52;
      v8 = (unsigned __int16 *)(result + 4);
      v7 = *(unsigned __int16 *)result;
      if ((unint64_t)(v7 - 351) >= 0x6C)
        goto LABEL_52;
      v9 = *a3 + 14784;
      v10 = *(_DWORD *)(v9 + 4 * (v6 - 351));
      v11 = *(_DWORD *)(v9 + 4 * (v7 - 351));
      v12 = *v8;
      v13 = v12 - 351;
      if (v10 < v11)
      {
        if (v13 >= 0x6C)
          goto LABEL_52;
        v14 = *(_DWORD *)(v9 + 4 * v13);
        v15 = (_WORD *)result;
        v16 = (_WORD *)(result + 4);
        if (v14 < v10)
        {
LABEL_24:
          *v15 = v12;
          *v16 = v7;
          goto LABEL_25;
        }
        *(_WORD *)result = v6;
        *(_WORD *)(result + 2) = v7;
        v15 = (_WORD *)(result + 2);
        v16 = (_WORD *)(result + 4);
LABEL_23:
        if (v14 >= v11)
          goto LABEL_25;
        goto LABEL_24;
      }
      if (v13 >= 0x6C)
        goto LABEL_52;
      v14 = *(_DWORD *)(v9 + 4 * v13);
      if (v14 < v10)
      {
        *(_WORD *)(result + 2) = v12;
        *v8 = v6;
        v15 = (_WORD *)result;
        v16 = (_WORD *)(result + 2);
        goto LABEL_23;
      }
LABEL_25:
      v23 = (unsigned __int16 *)(result + 6);
      if ((unsigned __int16 *)(result + 6) == a2)
      {
        return 1;
      }
      else
      {
        v24 = 0;
        for (i = 6; ; i += 2)
        {
          v26 = *v23;
          if ((unint64_t)(v26 - 351) >= 0x6C)
            break;
          v27 = *v8;
          if ((unint64_t)(v27 - 351) >= 0x6C)
            break;
          v28 = *(_DWORD *)(v9 + 4 * (v26 - 351));
          if (v28 < *(_DWORD *)(v9 + 4 * (v27 - 351)))
          {
            v29 = i;
            while (1)
            {
              *(_WORD *)(result + v29) = v27;
              v30 = v29 - 2;
              if (v29 == 2)
                break;
              v27 = *(unsigned __int16 *)(result + v29 - 4);
              if ((unint64_t)(v27 - 351) >= 0x6C)
                goto LABEL_52;
              v29 -= 2;
              if (v28 >= *(_DWORD *)(v9 + 4 * (v27 - 351)))
              {
                v31 = (_WORD *)(result + v30);
                goto LABEL_36;
              }
            }
            v31 = (_WORD *)result;
LABEL_36:
            *v31 = v26;
            if (++v24 == 8)
              return v23 + 1 == a2;
          }
          v8 = v23++;
          if (v23 == a2)
            return 1;
        }
LABEL_52:
        __break(1u);
      }
      return result;
  }
}

_WORD *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::sortDeferredPropertyIDs(void)::$_0 &,WebCore::CSSPropertyID *>(_WORD *result, _WORD *a2, _WORD *a3, _WORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = (unsigned __int16)*a2;
  if ((unint64_t)(v5 - 351) >= 0x6C)
    goto LABEL_29;
  v6 = (unsigned __int16)*result;
  if ((unint64_t)(v6 - 351) >= 0x6C)
    goto LABEL_29;
  v7 = a5 + 14784;
  v8 = *(_DWORD *)(a5 + 14784 + 4 * (v5 - 351));
  v9 = *(_DWORD *)(a5 + 14784 + 4 * (v6 - 351));
  v10 = (unsigned __int16)*a3;
  v11 = v10 - 351;
  if (v8 >= v9)
  {
    if (v11 >= 0x6C)
      goto LABEL_29;
    if (*(_DWORD *)(v7 + 4 * v11) >= v8)
    {
      LODWORD(v5) = (unsigned __int16)*a3;
    }
    else
    {
      *a2 = v10;
      *a3 = v5;
      v12 = (unsigned __int16)*a2;
      if ((unint64_t)(v12 - 351) >= 0x6C)
        goto LABEL_29;
      v13 = (unsigned __int16)*result;
      if ((unint64_t)(v13 - 351) >= 0x6C)
        goto LABEL_29;
      if (*(_DWORD *)(v7 + 4 * (v12 - 351)) < *(_DWORD *)(v7 + 4 * (v13 - 351)))
      {
        *result = v12;
        *a2 = v13;
        LODWORD(v5) = (unsigned __int16)*a3;
      }
    }
  }
  else
  {
    if (v11 >= 0x6C)
      goto LABEL_29;
    if (*(_DWORD *)(v7 + 4 * v11) < v8)
    {
      *result = v10;
LABEL_16:
      *a3 = v6;
      LODWORD(v5) = v6;
      goto LABEL_18;
    }
    *result = v5;
    *a2 = v6;
    v5 = (unsigned __int16)*a3;
    if ((unint64_t)(v5 - 351) >= 0x6C)
      goto LABEL_29;
    if (*(_DWORD *)(v7 + 4 * (v5 - 351)) < v9)
    {
      *a2 = v5;
      goto LABEL_16;
    }
  }
LABEL_18:
  v14 = (unsigned __int16)*a4;
  if ((unint64_t)(v14 - 351) >= 0x6C)
    goto LABEL_29;
  v15 = v5 - 351;
  if (v15 >= 0x6C)
    goto LABEL_29;
  if (*(_DWORD *)(v7 + 4 * (v14 - 351)) >= *(_DWORD *)(v7 + 4 * v15))
    return result;
  *a3 = v14;
  *a4 = v5;
  v16 = (unsigned __int16)*a3;
  if ((unint64_t)(v16 - 351) >= 0x6C)
    goto LABEL_29;
  v17 = (unsigned __int16)*a2;
  if ((unint64_t)(v17 - 351) >= 0x6C)
    goto LABEL_29;
  if (*(_DWORD *)(v7 + 4 * (v16 - 351)) >= *(_DWORD *)(v7 + 4 * (v17 - 351)))
    return result;
  *a2 = v16;
  *a3 = v17;
  v18 = (unsigned __int16)*a2;
  if ((unint64_t)(v18 - 351) >= 0x6C || (v19 = (unsigned __int16)*result, (unint64_t)(v19 - 351) >= 0x6C))
  {
LABEL_29:
    __break(1u);
    return result;
  }
  if (*(_DWORD *)(v7 + 4 * (v18 - 351)) < *(_DWORD *)(v7 + 4 * (v19 - 351)))
  {
    *result = v18;
    *a2 = v19;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  _DWORD *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  do
  {
    v6 = v5 & v3;
    v5 = ++v4 + v6;
  }
  while (*(_QWORD *)(a1 + 16 * v6));
  v7 = (WTF::StringImpl **)(a1 + 16 * v6);
  v8 = v7[1];
  v7[1] = 0;
  if (v8)
  {
    v9 = *((unsigned int *)v8 + 3);
    if ((_DWORD)v9)
    {
      v10 = *(WTF **)v8;
      v11 = 16 * v9;
      do
      {
        v12 = *(_DWORD **)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          if (*v12 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v12, a2);
          else
            --*v12;
        }
        v10 = (WTF *)((char *)v10 + 16);
        v11 -= 16;
      }
      while (v11);
    }
    v13 = *(WTF **)v8;
    if (*(_QWORD *)v8)
    {
      *(_QWORD *)v8 = 0;
      *((_DWORD *)v8 + 2) = 0;
      WTF::fastFree(v13, a2);
    }
    WTF::fastFree(v8, a2);
    v15 = *v7;
    *v7 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  else
  {
    *v7 = 0;
  }
  v16 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *v7 = v16;
  v17 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v7[1] = v17;
  return v7;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::Style::RuleFeature>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          --*(_DWORD *)result;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 16);
    }
    while (v3 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::Style::RuleFeatureWithInvalidationSelector>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          --*(_DWORD *)result;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 24);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int i;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  _DWORD *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  _DWORD *v53;
  WTF *v54;
  WTF::StringImpl *v55;
  uint64_t result;
  uint64_t v57;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v57 = v4;
    do
    {
      v12 = (int *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        v14 = *((unsigned __int8 *)v12 + 4);
        if (v13)
          v15 = 0;
        else
          v15 = v14 == 0;
        if (v15 && !*((_QWORD *)v12 + 1))
        {
          v48 = v4 + 24 * v9;
          v49 = *(WTF **)(v48 + 16);
          *(_QWORD *)(v48 + 16) = 0;
          if (v49)
          {
            v50 = *((unsigned int *)v49 + 3);
            if ((_DWORD)v50)
            {
              v51 = *(WTF **)v49;
              v52 = 24 * v50;
              do
              {
                v53 = *(_DWORD **)v51;
                *(_QWORD *)v51 = 0;
                if (v53)
                {
                  if (*v53 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v53, v8);
                  else
                    --*v53;
                }
                v51 = (WTF *)((char *)v51 + 24);
                v52 -= 24;
              }
              while (v52);
            }
            v54 = *(WTF **)v49;
            if (*(_QWORD *)v49)
            {
              *(_QWORD *)v49 = 0;
              *((_DWORD *)v49 + 2) = 0;
              WTF::fastFree(v54, v8);
            }
            WTF::fastFree(v49, v8);
            v55 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
            *((_QWORD *)v12 + 1) = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, v8);
              else
                *(_DWORD *)v55 -= 2;
            }
          }
          else
          {
            *((_QWORD *)v12 + 1) = 0;
          }
        }
        else
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          v19 = (v18 ^ (v18 >> 6)) + ~((v18 ^ (v18 >> 6)) << 11);
          v20 = 9 * ((~(v14 << 15) + v14) ^ ((~(v14 << 15) + v14) >> 10));
          v21 = (v20 ^ (v20 >> 6)) + ~((v20 ^ (v20 >> 6)) << 11);
          v22 = v17 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * (v19 ^ HIWORD(v19))
                                         + 95187966
                                         * ((0xD7862706ELL
                                                         * (unint64_t)(277951225 * (v21 ^ HIWORD(v21))
                                                                            + 95187966
                                                                            * (*(_DWORD *)(*((_QWORD *)v12 + 1) + 16) >> 8))) >> 4))) >> 4);
          for (i = 1; ; ++i)
          {
            v24 = v16 + 24 * v22;
            v25 = !*(_DWORD *)v24 && *(_BYTE *)(v24 + 4) == 0;
            if (v25 && !*(_QWORD *)(v24 + 8))
              break;
            v22 = (v22 + i) & v17;
          }
          v26 = v16 + 24 * v22;
          v29 = *(WTF **)(v26 + 16);
          v27 = (_QWORD *)(v26 + 16);
          v28 = v29;
          *v27 = 0;
          if (v29)
          {
            v30 = v10;
            v31 = v11;
            v32 = *((unsigned int *)v28 + 3);
            if ((_DWORD)v32)
            {
              v33 = *(WTF **)v28;
              v34 = 24 * v32;
              do
              {
                v35 = *(_DWORD **)v33;
                *(_QWORD *)v33 = 0;
                if (v35)
                {
                  if (*v35 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v35, v8);
                  else
                    --*v35;
                }
                v33 = (WTF *)((char *)v33 + 24);
                v34 -= 24;
              }
              while (v34);
            }
            v36 = *(WTF **)v28;
            if (*(_QWORD *)v28)
            {
              *(_QWORD *)v28 = 0;
              *((_DWORD *)v28 + 2) = 0;
              WTF::fastFree(v36, v8);
            }
            WTF::fastFree(v28, v8);
            v37 = *(WTF::StringImpl **)(v24 + 8);
            *(_QWORD *)(v24 + 8) = 0;
            v11 = v31;
            v10 = v30;
            v4 = v57;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v8);
              else
                *(_DWORD *)v37 -= 2;
            }
          }
          else
          {
            *(_QWORD *)(v24 + 8) = 0;
          }
          *(_DWORD *)v24 = *v12;
          *(_BYTE *)(v24 + 4) = *((_BYTE *)v12 + 4);
          v38 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *(_QWORD *)(v24 + 8) = v38;
          v39 = v4 + 24 * v9;
          v40 = *(_QWORD *)(v39 + 16);
          *(_QWORD *)(v39 + 16) = 0;
          *v27 = v40;
          v41 = *(WTF **)(v39 + 16);
          *(_QWORD *)(v39 + 16) = 0;
          if (v41)
          {
            v42 = *((unsigned int *)v41 + 3);
            if ((_DWORD)v42)
            {
              v43 = *(WTF **)v41;
              v44 = 24 * v42;
              do
              {
                v45 = *(_DWORD **)v43;
                *(_QWORD *)v43 = 0;
                if (v45)
                {
                  if (*v45 == 1)
                    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v45, v8);
                  else
                    --*v45;
                }
                v43 = (WTF *)((char *)v43 + 24);
                v44 -= 24;
              }
              while (v44);
            }
            v46 = *(WTF **)v41;
            if (*(_QWORD *)v41)
            {
              *(_QWORD *)v41 = 0;
              *((_DWORD *)v41 + 2) = 0;
              WTF::fastFree(v46, v8);
            }
            WTF::fastFree(v41, v8);
          }
          v47 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, v8);
            else
              *(_DWORD *)v47 -= 2;
          }
          if (v12 == a3)
            v10 = v24;
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::Style::RuleSet **v4;
  WebCore::Style::RuleSet *v5;
  WTF *v6;
  WTF *v7;
  void *v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WebCore::Style::RuleSet **)(a1 + 16);
    do
    {
      if (*((_DWORD *)v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
          {
            WebCore::Style::RuleSet::~RuleSet(v5);
            WTF::fastFree(v7, v8);
          }
          else
          {
            --*(_DWORD *)v5;
          }
        }
        v6 = *(v4 - 2);
        if (v6)
        {
          *(v4 - 2) = 0;
          *((_DWORD *)v4 - 2) = 0;
          WTF::fastFree(v6, a2);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  WTF::StringImpl *v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 24 * i;
      if (*(_DWORD *)v5 != -1)
      {
        v6 = a1 + 24 * i;
        v7 = *(WTF **)(v6 + 16);
        *(_QWORD *)(v6 + 16) = 0;
        if (v7)
        {
          v8 = *((unsigned int *)v7 + 3);
          if ((_DWORD)v8)
          {
            v9 = *(WTF **)v7;
            v10 = 24 * v8;
            do
            {
              v11 = *(_DWORD **)v9;
              *(_QWORD *)v9 = 0;
              if (v11)
              {
                if (*v11 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v11, a2);
                else
                  --*v11;
              }
              v9 = (WTF *)((char *)v9 + 24);
              v10 -= 24;
            }
            while (v10);
          }
          v12 = *(WTF **)v7;
          if (*(_QWORD *)v7)
          {
            *(_QWORD *)v7 = 0;
            *((_DWORD *)v7 + 2) = 0;
            WTF::fastFree(v12, a2);
          }
          WTF::fastFree(v7, a2);
        }
        v13 = *(WTF::StringImpl **)(v5 + 8);
        *(_QWORD *)(v5 + 8) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, a2);
          else
            *(_DWORD *)v13 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::VectorTypeOperations<WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;

  for (; (void *)result != a2; a3 += 16)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v5 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    *(_QWORD *)a3 = v5;
    LODWORD(v5) = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = 0;
    *(_DWORD *)(a3 + 8) = v5;
    LODWORD(v5) = *(_DWORD *)(result + 12);
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(a3 + 12) = v5;
    result = WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2)
           + 16;
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          --*(_DWORD *)result;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 8);
    }
    while (v3 != a2);
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *,false>(unint64_t result, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
  unsigned int *v9;
  unsigned int *i;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int j;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int *v55;
  BOOL v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t *v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int *v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int64_t v111;
  int64_t v112;
  int64_t v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int *v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int k;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t *v148;
  unsigned int *v149;
  unsigned int *v150;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unsigned int *v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int *v171;
  unint64_t v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int *v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int *v197;

  v9 = (unsigned int *)result;
LABEL_2:
  v197 = a2 - 1;
  i = v9;
  while (2)
  {
    v9 = i;
    v11 = (char *)a2 - (char *)i;
    v12 = a2 - i;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        LODWORD(v20) = *(a2 - 1);
        v84 = **a3;
        v85 = *(_DWORD *)(v84 + 700);
        v86 = v20 - 1;
        if (v85 <= (int)v20 - 1)
          goto LABEL_213;
        LODWORD(v16) = *i;
        v87 = *(_QWORD *)(v84 + 688);
        LODWORD(v17) = *i;
        LODWORD(v18) = *(a2 - 1);
        while (2)
        {
          if (v85 <= (int)v17 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19659C01CLL);
          }
          v88 = *(_DWORD *)(v87 + 24 * v86 + 16);
          v89 = *(_DWORD *)(v87 + 24 * (v17 - 1) + 16);
          if (v88 == v89)
            goto LABEL_406;
          if (v88 == (_DWORD)v17)
            goto LABEL_407;
          if ((_DWORD)v18 != v89)
          {
            if (v88 <= v89)
              LODWORD(v17) = *(_DWORD *)(v87 + 24 * (v17 - 1) + 16);
            else
              LODWORD(v18) = v88;
            v86 = (_DWORD)v18 - 1;
            if (v85 <= (int)v18 - 1)
            {
LABEL_213:
              __break(0xC471u);
              JUMPOUT(0x19659B62CLL);
            }
            continue;
          }
          return result;
        }
      case 3:
        return (unint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(i, i + 1, v197, **a3);
      case 4:
        return (unint64_t)std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(i, i + 1, i + 2, v197, a3);
      case 5:
        return (unint64_t)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *,0>(i, i + 1, i + 2, i + 3, v197, a3);
      default:
        if (v11 <= 95)
        {
          v90 = *a3;
          if ((a5 & 1) != 0)
          {
            if (i == a2)
              return result;
            v91 = i + 1;
            if (i + 1 == a2)
              return result;
            v92 = *v90;
            v93 = i;
            while (1)
            {
              v94 = v93;
              v93 = v91;
              v95 = v94[1];
              v96 = *(_DWORD *)(v92 + 700);
              if (v96 <= v95 - 1)
              {
LABEL_435:
                __break(0xC471u);
                JUMPOUT(0x19659BF94);
              }
              v97 = *(_QWORD *)(v92 + 688);
              v98 = v95 - 1;
              v99 = *v94;
              result = v94[1];
              while (1)
              {
                if (v96 <= v99 - 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19659BF8CLL);
                }
                v100 = *(_DWORD *)(v97 + 24 * v98 + 16);
                v101 = *(_DWORD *)(v97 + 24 * (v99 - 1) + 16);
                if (v100 == v101)
                  break;
                if (v100 == v99)
                  goto LABEL_235;
                if ((_DWORD)result == v101)
                  goto LABEL_252;
                if (v100 <= v101)
                  result = result;
                else
                  result = v100;
                if (v100 <= v101)
                  v99 = *(_DWORD *)(v97 + 24 * (v99 - 1) + 16);
                v98 = result - 1;
                if (v96 <= (int)result - 1)
                  goto LABEL_435;
              }
              if (result < v99)
              {
LABEL_235:
                v94[1] = *v94;
                v102 = i;
                if (v94 == i)
                  goto LABEL_251;
                v103 = v94;
                while (1)
                {
                  v105 = *--v103;
                  v104 = v105;
                  v106 = *(_DWORD *)(v92 + 700);
                  v107 = v95 - 1;
                  result = v105;
                  v108 = v95;
                  if (v106 <= v95 - 1)
                  {
LABEL_441:
                    __break(0xC471u);
                    JUMPOUT(0x19659BFC4);
                  }
                  while (1)
                  {
                    if (v106 <= (int)result - 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19659BFBCLL);
                    }
                    v109 = *(_DWORD *)(v97 + 24 * v107 + 16);
                    v110 = *(_DWORD *)(v97 + 24 * (result - 1) + 16);
                    if (v109 == v110)
                      break;
                    if (v109 == (_DWORD)result)
                      goto LABEL_248;
                    if (v108 == v110)
                      goto LABEL_250;
                    if (v109 <= v110)
                    {
                      result = v110;
                    }
                    else
                    {
                      v108 = v109;
                      result = result;
                    }
                    v107 = v108 - 1;
                    if (v106 <= v108 - 1)
                      goto LABEL_441;
                  }
                  if (v108 >= result)
                    break;
LABEL_248:
                  *v94 = v104;
                  v94 = v103;
                  if (v103 == i)
                  {
                    v102 = i;
                    goto LABEL_251;
                  }
                }
LABEL_250:
                v102 = v94;
LABEL_251:
                *v102 = v95;
              }
LABEL_252:
              v91 = v93 + 1;
              if (v93 + 1 == a2)
                return result;
            }
          }
          if (i == a2)
            return result;
          v179 = i + 1;
          if (i + 1 == a2)
            return result;
          v180 = 0;
          v20 = *v90;
          v181 = 1;
          LODWORD(v16) = 24;
          v182 = i;
          while (1)
          {
            v17 = v180;
            v180 = v181;
            v183 = *v179;
            v184 = *(_DWORD *)(v20 + 700);
            v185 = *v179 - 1;
            if (v184 <= v185)
            {
LABEL_437:
              __break(0xC471u);
              JUMPOUT(0x19659BFA4);
            }
            v186 = *v182;
            v18 = *(unsigned int **)(v20 + 688);
            v187 = v183 - 1;
            result = *v179;
            while (1)
            {
              if (v184 <= v186 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19659BF9CLL);
              }
              v188 = v18[6 * v187 + 4];
              v189 = v18[6 * v186 - 2];
              if (v188 == v189)
                break;
              if (v188 == v186)
                goto LABEL_387;
              if ((_DWORD)result == v189)
                goto LABEL_403;
              if (v188 <= v189)
                result = result;
              else
                result = v188;
              if (v188 <= v189)
                v186 = v18[6 * v186 - 2];
              v187 = result - 1;
              if (v184 <= (int)result - 1)
                goto LABEL_437;
            }
            if (result < v186)
            {
LABEL_387:
              v190 = &i[v17];
              *v179 = *v190;
              while (1)
              {
                result = *(unsigned int *)(v20 + 700);
                if (result <= v185)
                {
LABEL_429:
                  __break(0xC471u);
                  JUMPOUT(0x19659BF54);
                }
                v191 = (unsigned int *)v17--;
                v192 = v183 - 1;
                v193 = i[v17];
                v194 = v183;
                while (1)
                {
                  if (result <= v193 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659BF4CLL);
                  }
                  v195 = v18[6 * v192 + 4];
                  v196 = v18[6 * v193 - 2];
                  if (v195 == v196)
                    break;
                  if (v195 == v193)
                    goto LABEL_400;
                  if (v194 == v196)
                    goto LABEL_402;
                  if (v195 <= v196)
                    v193 = v18[6 * v193 - 2];
                  else
                    v194 = v195;
                  v192 = v194 - 1;
                  if (result <= v194 - 1)
                    goto LABEL_429;
                }
                if (v194 >= v193)
                  break;
LABEL_400:
                *v190 = i[v17];
                v190 = &i[v17];
                if (!v191)
                  goto LABEL_405;
              }
LABEL_402:
              *v190 = v183;
            }
LABEL_403:
            v182 = &i[v180];
            v181 = v180 + 1;
            v179 = &i[v180 + 1];
            if (v179 == a2)
              return result;
          }
        }
        if (a4)
        {
          v13 = (unint64_t)v12 >> 1;
          v14 = &i[(unint64_t)v12 >> 1];
          v15 = **a3;
          if ((unint64_t)v11 < 0x201)
          {
            result = (unint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(v14, v9, v197, v15);
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(v9, v14, v197, v15);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(v9 + 1, v14 - 1, a2 - 2, **a3);
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(v9 + 2, &v9[v13 + 1], a2 - 3, **a3);
            result = (unint64_t)std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(v14 - 1, v14, &v9[v13 + 1], **a3);
            v19 = *v9;
            *v9 = *v14;
            *v14 = v19;
          }
          --a4;
          LODWORD(v20) = *v9;
          if ((a5 & 1) == 0)
          {
            v21 = *(v9 - 1);
            v22 = **a3;
            v23 = *(_DWORD *)(v22 + 700);
            v24 = v21 - 1;
            if (v23 <= v21 - 1)
            {
LABEL_423:
              __break(0xC471u);
              JUMPOUT(0x19659BF24);
            }
            v16 = *(_QWORD *)(v22 + 688);
            LODWORD(v17) = *v9;
            while (1)
            {
              if (v23 <= (int)v17 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19659BF1CLL);
              }
              LODWORD(v18) = *(_DWORD *)(v16 + 24 * v24 + 16);
              v25 = *(_DWORD *)(v16 + 24 * (v17 - 1) + 16);
              if ((_DWORD)v18 == v25)
                break;
              if ((_DWORD)v18 == (_DWORD)v17)
                goto LABEL_22;
              if (v21 == v25)
                goto LABEL_112;
              if (v18 <= v25)
                LODWORD(v17) = *(_DWORD *)(v16 + 24 * (v17 - 1) + 16);
              else
                v21 = v18;
              v24 = v21 - 1;
              if (v23 <= v21 - 1)
                goto LABEL_423;
            }
            if (v21 >= v17)
            {
LABEL_112:
              if (v23 <= (int)v20 - 1)
              {
LABEL_443:
                __break(0xC471u);
                JUMPOUT(0x19659BFD4);
              }
              LODWORD(v17) = *v197;
              v57 = v20 - 1;
              LODWORD(v18) = *v9;
              while (1)
              {
                if (v23 <= (int)v17 - 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19659BFCCLL);
                }
                v58 = *(_DWORD *)(v16 + 24 * v57 + 16);
                v59 = *(_DWORD *)(v16 + 24 * (v17 - 1) + 16);
                if (v58 == v59)
                  break;
                if (v58 == (_DWORD)v17)
                  goto LABEL_124;
                if ((_DWORD)v18 == v59)
                  goto LABEL_138;
                if (v58 <= v59)
                  LODWORD(v17) = *(_DWORD *)(v16 + 24 * (v17 - 1) + 16);
                else
                  LODWORD(v18) = v58;
                v57 = (_DWORD)v18 - 1;
                if (v23 <= (int)v18 - 1)
                  goto LABEL_443;
              }
              if (v18 < v17)
              {
LABEL_124:
                for (i = v9 + 1; i != a2; ++i)
                {
                  LODWORD(v17) = *i;
                  v60 = v20 - 1;
                  LODWORD(v18) = *v9;
                  while (1)
                  {
                    if (v23 <= (int)v17 - 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19659BF5CLL);
                    }
                    v61 = *(_DWORD *)(v16 + 24 * v60 + 16);
                    v62 = *(_DWORD *)(v16 + 24 * (v17 - 1) + 16);
                    if (v61 == v62)
                      break;
                    if (v61 == (_DWORD)v17)
                      goto LABEL_152;
                    if ((_DWORD)v18 == v62)
                      goto LABEL_137;
                    if (v61 <= v62)
                      LODWORD(v17) = *(_DWORD *)(v16 + 24 * (v17 - 1) + 16);
                    else
                      LODWORD(v18) = v61;
                    v60 = (_DWORD)v18 - 1;
                    if (v23 <= (int)v18 - 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19659BF64);
                    }
                  }
                  if (v18 < v17)
                    goto LABEL_152;
LABEL_137:
                  ;
                }
                goto LABEL_405;
              }
LABEL_138:
              for (i = v9 + 1; i < a2; ++i)
              {
                v63 = *i;
                v64 = v20 - 1;
                LODWORD(v18) = *v9;
                while (1)
                {
                  if (v23 <= v63 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659BFFCLL);
                  }
                  v65 = *(_DWORD *)(v16 + 24 * v64 + 16);
                  v66 = *(_DWORD *)(v16 + 24 * (v63 - 1) + 16);
                  if (v65 == v66)
                    break;
                  if (v65 == v63)
                    goto LABEL_152;
                  if ((_DWORD)v18 == v66)
                    goto LABEL_151;
                  if (v65 <= v66)
                    v63 = *(_DWORD *)(v16 + 24 * (v63 - 1) + 16);
                  else
                    LODWORD(v18) = v65;
                  v64 = (_DWORD)v18 - 1;
                  if (v23 <= (int)v18 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659C004);
                  }
                }
                if (v18 < v63)
                  break;
LABEL_151:
                ;
              }
LABEL_152:
              v17 = (unint64_t)a2;
              if (i < a2)
              {
                v17 = (unint64_t)a2;
                if (a2 == v9)
                  goto LABEL_405;
                while (1)
                {
                  v67 = *(_DWORD *)(v17 - 4);
                  v17 -= 4;
                  LODWORD(v18) = v67;
                  v68 = v20 - 1;
                  v69 = *v9;
                  while (1)
                  {
                    if (v23 <= (int)v18 - 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19659BF6CLL);
                    }
                    v70 = *(_DWORD *)(v16 + 24 * v68 + 16);
                    v71 = *(_DWORD *)(v16 + 24 * ((_DWORD)v18 - 1) + 16);
                    if (v70 == v71)
                      break;
                    if (v70 == (_DWORD)v18)
                      goto LABEL_165;
                    if (v69 == v71)
                      goto LABEL_167;
                    if (v70 <= v71)
                      LODWORD(v18) = *(_DWORD *)(v16 + 24 * ((_DWORD)v18 - 1) + 16);
                    else
                      v69 = v70;
                    v68 = v69 - 1;
                    if (v23 <= v69 - 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19659BF74);
                    }
                  }
                  if (v69 >= v18)
                    break;
LABEL_165:
                  if ((unsigned int *)v17 == v9)
                    goto LABEL_405;
                }
              }
LABEL_167:
              if ((unint64_t)i < v17)
              {
                v72 = *i;
                v73 = *(_DWORD *)v17;
                do
                {
                  *i++ = v73;
                  *(_DWORD *)v17 = v72;
                  if (i == a2)
                    goto LABEL_405;
                  LODWORD(v18) = *(_DWORD *)(v22 + 700);
                  if (v18 <= (int)v20 - 1)
                  {
LABEL_417:
                    __break(0xC471u);
                    JUMPOUT(0x19659BEECLL);
                  }
                  while (1)
                  {
                    v72 = *i;
                    v74 = v20 - 1;
                    v75 = *i;
                    v76 = v20;
                    while (1)
                    {
                      if (v18 <= v75 - 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19659BEE4);
                      }
                      v77 = *(_DWORD *)(v16 + 24 * v74 + 16);
                      result = *(unsigned int *)(v16 + 24 * (v75 - 1) + 16);
                      if (v77 == (_DWORD)result)
                        break;
                      if (v77 == v75)
                        goto LABEL_184;
                      if (v76 == (_DWORD)result)
                        goto LABEL_182;
                      if (v77 <= result)
                        v75 = *(_DWORD *)(v16 + 24 * (v75 - 1) + 16);
                      else
                        v76 = v77;
                      v74 = v76 - 1;
                      if (v18 <= v76 - 1)
                        goto LABEL_417;
                    }
                    if (v76 < v75)
                      break;
LABEL_182:
                    if (++i == a2)
                      goto LABEL_405;
                  }
                  do
                  {
LABEL_184:
                    if ((unsigned int *)v17 == v9)
                      goto LABEL_405;
                    v78 = *(_DWORD *)(v17 - 4);
                    v17 -= 4;
                    v73 = v78;
                    v79 = v20 - 1;
                    v80 = v78;
                    v81 = v20;
                    while (1)
                    {
                      if (v18 <= v80 - 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19659BEDCLL);
                      }
                      result = *(unsigned int *)(v16 + 24 * v79 + 16);
                      v82 = *(_DWORD *)(v16 + 24 * (v80 - 1) + 16);
                      if ((_DWORD)result == v82)
                        break;
                      if ((_DWORD)result == v80)
                        goto LABEL_184;
                      if (v81 == v82)
                        goto LABEL_196;
                      if (result <= v82)
                        v80 = *(_DWORD *)(v16 + 24 * (v80 - 1) + 16);
                      else
                        v81 = result;
                      v79 = v81 - 1;
                      if (v18 <= v81 - 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19659BEF4);
                      }
                    }
                  }
                  while (v81 < v80);
LABEL_196:
                  ;
                }
                while ((unint64_t)i < v17);
              }
              v83 = i - 1;
              if (i - 1 != v9)
                *v9 = *v83;
              a5 = 0;
              *v83 = v20;
              continue;
            }
          }
LABEL_22:
          v26 = v9 + 1;
          if (v9 + 1 == a2)
            goto LABEL_405;
          v16 = **a3;
          LODWORD(v18) = *(_DWORD *)(v16 + 700);
          v17 = (unint64_t)v9;
          while (1)
          {
            v27 = *(_DWORD *)(v17 + 4);
            v28 = v27 - 1;
            if (v18 <= v27 - 1)
            {
LABEL_419:
              __break(0xC471u);
              JUMPOUT(0x19659BF04);
            }
            v29 = v26;
            v30 = *(_QWORD *)(v16 + 688);
            v31 = *v9;
            v32 = *(_DWORD *)(v17 + 4);
            while (1)
            {
              if (v18 <= v31 - 1)
              {
                __break(0xC471u);
                JUMPOUT(0x19659BEFCLL);
              }
              v33 = *(_DWORD *)(v30 + 24 * v28 + 16);
              result = *(unsigned int *)(v30 + 24 * (v31 - 1) + 16);
              if (v33 == (_DWORD)result)
                break;
              if (v33 == v31)
                goto LABEL_36;
              if (v32 == (_DWORD)result)
                goto LABEL_38;
              if (v33 <= result)
                v31 = *(_DWORD *)(v30 + 24 * (v31 - 1) + 16);
              else
                v32 = v33;
              v28 = v32 - 1;
              if (v18 <= v32 - 1)
                goto LABEL_419;
            }
            if (v32 >= v31)
              break;
LABEL_36:
            v26 = v29 + 1;
            v17 = (unint64_t)v29;
            if (v29 + 1 == a2)
              goto LABEL_405;
          }
LABEL_38:
          if ((unsigned int *)v17 != v9)
          {
            v17 = (unint64_t)a2;
            if (a2 != v9)
            {
              do
              {
                v35 = *(_DWORD *)(v17 - 4);
                v17 -= 4;
                v34 = v35;
                v36 = v35 - 1;
                if (v18 <= v35 - 1)
                {
LABEL_421:
                  __break(0xC471u);
                  JUMPOUT(0x19659BF14);
                }
                v37 = *v9;
                while (1)
                {
                  if (v18 <= v37 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659BF0CLL);
                  }
                  v38 = *(_DWORD *)(v30 + 24 * v36 + 16);
                  result = *(unsigned int *)(v30 + 24 * (v37 - 1) + 16);
                  if (v38 == (_DWORD)result)
                    break;
                  if (v38 == v37)
                    goto LABEL_73;
                  if (v34 == (_DWORD)result)
                    goto LABEL_52;
                  if (v38 <= result)
                    v37 = *(_DWORD *)(v30 + 24 * (v37 - 1) + 16);
                  else
                    v34 = v38;
                  v36 = v34 - 1;
                  if (v18 <= v34 - 1)
                    goto LABEL_421;
                }
                if (v34 < v37)
                  goto LABEL_73;
LABEL_52:
                ;
              }
              while ((unsigned int *)v17 != v9);
            }
LABEL_405:
            __break(1u);
LABEL_406:
            if (v18 < v17)
            {
LABEL_407:
              *v9 = v20;
              *(a2 - 1) = v16;
            }
            return result;
          }
          v17 = (unint64_t)a2;
          if (v29 >= a2)
            goto LABEL_73;
          v39 = *v197;
          v40 = *v197 - 1;
          if (v18 <= v40)
          {
LABEL_425:
            __break(0xC471u);
            JUMPOUT(0x19659BF34);
          }
          v17 = (unint64_t)(a2 - 1);
LABEL_57:
          v41 = *v9;
          while (1)
          {
            if (v18 <= v41 - 1)
            {
              __break(0xC471u);
              JUMPOUT(0x19659BF2CLL);
            }
            v42 = *(_DWORD *)(v30 + 24 * v40 + 16);
            result = *(unsigned int *)(v30 + 24 * (v41 - 1) + 16);
            if (v42 == (_DWORD)result)
            {
              if ((unint64_t)v29 >= v17 || v39 < v41)
                goto LABEL_73;
LABEL_71:
              v43 = *(_DWORD *)(v17 - 4);
              v17 -= 4;
              v39 = v43;
              v40 = v43 - 1;
              if (v18 <= v43 - 1)
                goto LABEL_425;
              goto LABEL_57;
            }
            if (v42 == v41)
              goto LABEL_73;
            if (v39 == (_DWORD)result)
              break;
            if (v42 <= result)
              v41 = *(_DWORD *)(v30 + 24 * (v41 - 1) + 16);
            else
              v39 = v42;
            v40 = v39 - 1;
            if (v18 <= v39 - 1)
              goto LABEL_425;
          }
          if ((unint64_t)v29 < v17)
            goto LABEL_71;
LABEL_73:
          i = v29;
          if ((unint64_t)v29 < v17)
          {
            LODWORD(v44) = *(_DWORD *)v17;
            i = v29;
            v18 = (unsigned int *)v17;
            do
            {
              *i++ = v44;
              *v18 = v27;
              if (i == a2)
                goto LABEL_405;
              v45 = *(_DWORD *)(v16 + 700);
              while (1)
              {
                v27 = *i;
                v46 = *i - 1;
                v47 = v20;
                for (j = *i; ; v46 = j - 1)
                {
                  if (v45 <= v46)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659BEACLL);
                  }
                  if (v45 <= v47 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659BEB4);
                  }
                  result = *(unsigned int *)(v30 + 24 * v46 + 16);
                  v49 = *(_DWORD *)(v30 + 24 * (v47 - 1) + 16);
                  if ((_DWORD)result == v49)
                    break;
                  if ((_DWORD)result == v47)
                    goto LABEL_88;
                  if (j == v49)
                    goto LABEL_90;
                  if (result <= v49)
                    v47 = *(_DWORD *)(v30 + 24 * (v47 - 1) + 16);
                  else
                    j = result;
                }
                if (j >= v47)
                  break;
LABEL_88:
                if (++i == a2)
                  goto LABEL_405;
              }
              do
              {
LABEL_90:
                if (v18 == v9)
                  goto LABEL_405;
                v50 = *--v18;
                v44 = v50;
                v51 = v50 - 1;
                if (v45 <= v50 - 1)
                {
LABEL_412:
                  __break(0xC471u);
                  JUMPOUT(0x19659BEC4);
                }
                v52 = v20;
                result = v44;
                while (1)
                {
                  if (v45 <= v52 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659BEBCLL);
                  }
                  v53 = *(_DWORD *)(v30 + 24 * v51 + 16);
                  v54 = *(_DWORD *)(v30 + 24 * (v52 - 1) + 16);
                  if (v53 == v54)
                    break;
                  if (v53 == v52)
                    goto LABEL_105;
                  if ((_DWORD)result == v54)
                    goto LABEL_90;
                  if (v53 <= v54)
                    result = result;
                  else
                    result = v53;
                  if (v53 <= v54)
                    v52 = *(_DWORD *)(v30 + 24 * (v52 - 1) + 16);
                  v51 = result - 1;
                  if (v45 <= (int)result - 1)
                    goto LABEL_412;
                }
              }
              while (result >= v52);
LABEL_105:
              ;
            }
            while (i < v18);
          }
          v55 = i - 1;
          if (i - 1 != v9)
            *v9 = *v55;
          *v55 = v20;
          if ((unint64_t)v29 < v17)
          {
LABEL_111:
            result = std::__introsort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *,false>(v9, i - 1, a3, a4, a5 & 1);
            a5 = 0;
            continue;
          }
          v56 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(v9, i - 1, a3);
          result = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(i, a2, a3);
          if (!(_DWORD)result)
          {
            if (!v56)
              goto LABEL_111;
            continue;
          }
          a2 = i - 1;
          if (v56)
            return result;
          goto LABEL_2;
        }
        if (i == a2)
          return result;
        v111 = (unint64_t)(v12 - 2) >> 1;
        v112 = v111;
        while (2)
        {
          v113 = v112;
          if (v111 >= v112)
          {
            v114 = (2 * v112) | 1;
            v115 = &i[v114];
            v116 = 2 * v112 + 2;
            v117 = **a3;
            if (v116 >= v12)
            {
              result = *(unsigned int *)(v117 + 700);
            }
            else
            {
              v119 = v115 + 1;
              v118 = *v115;
              result = *(unsigned int *)(v117 + 700);
              v120 = *v115 - 1;
              if (result <= v120)
              {
LABEL_445:
                __break(0xC471u);
                JUMPOUT(0x19659BFE4);
              }
              v121 = *v119;
              v122 = *(_QWORD *)(v117 + 688);
              while (1)
              {
                if (result <= v121 - 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19659BFDCLL);
                }
                v123 = *(_DWORD *)(v122 + 24 * v120 + 16);
                v124 = *(_DWORD *)(v122 + 24 * (v121 - 1) + 16);
                if (v123 == v124)
                  break;
                if (v123 == v121)
                  goto LABEL_271;
                if (v118 == v124)
                  goto LABEL_270;
                if (v123 <= v124)
                  v121 = *(_DWORD *)(v122 + 24 * (v121 - 1) + 16);
                else
                  v118 = v123;
                v120 = v118 - 1;
                if (result <= v118 - 1)
                  goto LABEL_445;
              }
              if (v118 < v121)
              {
LABEL_271:
                v125 = *v119 - 1;
                if (result <= v125)
                {
LABEL_427:
                  __break(0xC471u);
                  JUMPOUT(0x19659BF44);
                }
                v126 = i[v113];
                v127 = *(_QWORD *)(v117 + 688);
                v128 = v126;
                v129 = *v119;
                while (1)
                {
                  if (result <= v128 - 1)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19659BF3CLL);
                  }
                  v130 = *(_DWORD *)(v127 + 24 * v125 + 16);
                  v131 = *(_DWORD *)(v127 + 24 * (v128 - 1) + 16);
                  if (v130 == v131)
                    break;
                  if (v130 == v128)
                    goto LABEL_286;
                  if (v129 == v131)
                    goto LABEL_283;
                  if (v130 <= v131)
                    v128 = *(_DWORD *)(v127 + 24 * (v128 - 1) + 16);
                  else
                    v129 = v130;
                  v125 = v129 - 1;
                  if (result <= v129 - 1)
                    goto LABEL_427;
                }
                if (v129 < v128)
                  goto LABEL_286;
LABEL_283:
                i[v113] = *v119;
                if (v111 >= v116)
                {
                  while (1)
                  {
                    v132 = 2 * v116;
                    v116 = (2 * v116) | 1;
                    result = (unint64_t)&i[v116];
                    v133 = v132 + 2;
                    v134 = *(_DWORD *)(v117 + 700);
                    if (v133 < v12)
                    {
                      v135 = *(_DWORD *)result;
                      v136 = *(_DWORD *)result - 1;
                      if (v134 <= v136)
                      {
LABEL_450:
                        __break(0xC471u);
                        JUMPOUT(0x19659C014);
                      }
                      v137 = *(_DWORD *)(result + 4);
                      while (1)
                      {
                        if (v134 <= v137 - 1)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x19659C00CLL);
                        }
                        v138 = *(_DWORD *)(v127 + 24 * v136 + 16);
                        v139 = *(_DWORD *)(v127 + 24 * (v137 - 1) + 16);
                        if (v138 == v139)
                          break;
                        if (v138 == v137)
                          goto LABEL_301;
                        if (v135 == v139)
                          goto LABEL_302;
                        if (v138 <= v139)
                          v137 = *(_DWORD *)(v127 + 24 * (v137 - 1) + 16);
                        else
                          v135 = v138;
                        v136 = v135 - 1;
                        if (v134 <= v135 - 1)
                          goto LABEL_450;
                      }
                      if (v135 < v137)
                      {
LABEL_301:
                        result += 4;
                        v116 = v133;
                      }
                    }
LABEL_302:
                    v140 = *(_DWORD *)result - 1;
                    v141 = v126;
                    for (k = *(_DWORD *)result; ; v140 = k - 1)
                    {
                      if (v134 <= v140)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19659BF7CLL);
                      }
                      if (v134 <= v141 - 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19659BF84);
                      }
                      v143 = *(_DWORD *)(v127 + 24 * v140 + 16);
                      v144 = *(_DWORD *)(v127 + 24 * (v141 - 1) + 16);
                      if (v143 == v144)
                        break;
                      if (v143 == v141)
                        goto LABEL_284;
                      if (k == v144)
                        goto LABEL_313;
                      if (v143 <= v144)
                        v141 = *(_DWORD *)(v127 + 24 * (v141 - 1) + 16);
                      else
                        k = v143;
                    }
                    if (k < v141)
                      break;
LABEL_313:
                    *v119 = *(_DWORD *)result;
                    v119 = (unsigned int *)result;
                    if (v111 < v116)
                      goto LABEL_285;
                  }
                }
LABEL_284:
                result = (unint64_t)v119;
LABEL_285:
                *(_DWORD *)result = v126;
                goto LABEL_286;
              }
            }
LABEL_270:
            v119 = &i[v114];
            v116 = (2 * v113) | 1;
            goto LABEL_271;
          }
LABEL_286:
          v112 = v113 - 1;
          if (v113)
            continue;
          break;
        }
        v145 = (unint64_t)v11 >> 2;
        do
        {
          v146 = 0;
          v147 = *i;
          v148 = *a3;
          v149 = i;
          do
          {
            v150 = v149;
            v149 += v146 + 1;
            v151 = 2 * v146;
            v146 = (2 * v146) | 1;
            v152 = v151 + 2;
            if (v152 < v145)
            {
              result = *v149;
              v153 = *(_DWORD *)(*v148 + 700);
              v154 = result - 1;
              if (v153 <= (int)result - 1)
              {
LABEL_414:
                __break(0xC471u);
                JUMPOUT(0x19659BED4);
              }
              v155 = v149[1];
              v156 = *(_QWORD *)(*v148 + 688);
              while (1)
              {
                if (v153 <= v155 - 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19659BECCLL);
                }
                v157 = *(_DWORD *)(v156 + 24 * v154 + 16);
                v158 = *(_DWORD *)(v156 + 24 * (v155 - 1) + 16);
                if (v157 == v158)
                  break;
                if (v157 == v155)
                  goto LABEL_333;
                if ((_DWORD)result == v158)
                  goto LABEL_334;
                if (v157 <= v158)
                  result = result;
                else
                  result = v157;
                if (v157 <= v158)
                  v155 = *(_DWORD *)(v156 + 24 * (v155 - 1) + 16);
                v154 = result - 1;
                if (v153 <= (int)result - 1)
                  goto LABEL_414;
              }
              if (result < v155)
              {
LABEL_333:
                ++v149;
                v146 = v152;
              }
            }
LABEL_334:
            *v150 = *v149;
          }
          while (v146 <= (uint64_t)((unint64_t)(v145 - 2) >> 1));
          if (v149 == --a2)
          {
            *v149 = v147;
          }
          else
          {
            *v149 = *a2;
            *a2 = v147;
            v159 = (char *)v149 - (char *)i + 4;
            if (v159 >= 5)
            {
              v160 = ((unint64_t)v159 >> 2) - 2;
              v161 = v160 >> 1;
              v162 = &i[v160 >> 1];
              v163 = **a3;
              result = *(unsigned int *)(v163 + 700);
              v164 = *v162 - 1;
              if (result <= v164)
              {
LABEL_439:
                __break(0xC471u);
                JUMPOUT(0x19659BFB4);
              }
              v165 = *v149;
              v166 = *(_QWORD *)(v163 + 688);
              v167 = *v149;
              v168 = *v162;
              while (1)
              {
                if (result <= v167 - 1)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19659BFACLL);
                }
                v169 = *(_DWORD *)(v166 + 24 * v164 + 16);
                v170 = *(_DWORD *)(v166 + 24 * (v167 - 1) + 16);
                if (v169 == v170)
                  break;
                if (v169 == v167)
                  goto LABEL_350;
                if (v168 == v170)
                  goto LABEL_353;
                if (v169 <= v170)
                  v167 = *(_DWORD *)(v166 + 24 * (v167 - 1) + 16);
                else
                  v168 = v169;
                v164 = v168 - 1;
                if (result <= v168 - 1)
                  goto LABEL_439;
              }
              if (v168 < v167)
              {
LABEL_350:
                *v149 = *v162;
                if (v160 >= 2)
                {
                  while (1)
                  {
                    v173 = v161 - 1;
                    v161 = (v161 - 1) >> 1;
                    v171 = &i[v161];
                    result = *(unsigned int *)(v163 + 700);
                    v174 = *v171 - 1;
                    if (result <= v174)
                    {
LABEL_447:
                      __break(0xC471u);
                      JUMPOUT(0x19659BFF4);
                    }
                    v175 = v165;
                    v176 = *v171;
                    while (1)
                    {
                      if (result <= v175 - 1)
                      {
                        __break(0xC471u);
                        JUMPOUT(0x19659BFECLL);
                      }
                      v177 = *(_DWORD *)(v166 + 24 * v174 + 16);
                      v178 = *(_DWORD *)(v166 + 24 * (v175 - 1) + 16);
                      if (v177 == v178)
                        break;
                      if (v177 == v175)
                        goto LABEL_368;
                      if (v176 == v178)
                        goto LABEL_351;
                      if (v177 <= v178)
                        v175 = *(_DWORD *)(v166 + 24 * (v175 - 1) + 16);
                      else
                        v176 = v177;
                      v174 = v176 - 1;
                      if (result <= v176 - 1)
                        goto LABEL_447;
                    }
                    if (v176 >= v175)
                      break;
LABEL_368:
                    *v162 = *v171;
                    v162 = &i[v161];
                    if (v173 < 2)
                      goto LABEL_352;
                  }
                }
LABEL_351:
                v171 = v162;
LABEL_352:
                *v171 = v165;
              }
            }
          }
LABEL_353:
          ;
        }
        while (v145-- > 2);
        return result;
    }
  }
}

unsigned int *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *,0>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t **a6)
{
  unsigned int *result;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;

  result = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(a1, a2, a3, a4, a6);
  v13 = **a6;
  v14 = *(_DWORD *)(v13 + 700);
  v15 = *a5 - 1;
  if (v14 <= v15)
  {
LABEL_54:
    __break(0xC471u);
    JUMPOUT(0x19659C0ECLL);
  }
  v16 = *a4;
  v17 = *(_QWORD *)(v13 + 688);
  v18 = *a4;
  v19 = *a5;
  while (1)
  {
    if (v14 <= v18 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19659C2B0);
    }
    v20 = *(_DWORD *)(v17 + 24 * v15 + 16);
    v21 = *(_DWORD *)(v17 + 24 * (v18 - 1) + 16);
    if (v20 == v21)
      break;
    if (v20 == v18)
      goto LABEL_13;
    if (v19 == v21)
      return result;
    if (v20 <= v21)
      v18 = *(_DWORD *)(v17 + 24 * (v18 - 1) + 16);
    else
      v19 = v20;
    v15 = v19 - 1;
    if (v14 <= v19 - 1)
      goto LABEL_54;
  }
  if (v19 < v18)
  {
LABEL_13:
    *a4 = *a5;
    *a5 = v16;
    v22 = *(_DWORD *)(v13 + 700);
    v23 = *a4 - 1;
    if (v22 <= v23)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x19659C174);
    }
    v24 = *a3;
    v25 = *a3;
    v26 = *a4;
    while (1)
    {
      if (v22 <= v25 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19659C2B8);
      }
      v27 = *(_DWORD *)(v17 + 24 * v23 + 16);
      v28 = *(_DWORD *)(v17 + 24 * (v25 - 1) + 16);
      if (v27 == v28)
        break;
      if (v27 == v25)
        goto LABEL_25;
      if (v26 == v28)
        return result;
      if (v27 <= v28)
        v25 = *(_DWORD *)(v17 + 24 * (v25 - 1) + 16);
      else
        v26 = v27;
      v23 = v26 - 1;
      if (v22 <= v26 - 1)
        goto LABEL_23;
    }
    if (v26 < v25)
    {
LABEL_25:
      *a3 = *a4;
      *a4 = v24;
      v29 = *(_DWORD *)(v13 + 700);
      v30 = *a3 - 1;
      if (v29 <= v30)
      {
LABEL_35:
        __break(0xC471u);
        JUMPOUT(0x19659C1FCLL);
      }
      v31 = *a2;
      v32 = *a2;
      v33 = *a3;
      while (1)
      {
        if (v29 <= v32 - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19659C2C0);
        }
        v34 = *(_DWORD *)(v17 + 24 * v30 + 16);
        v35 = *(_DWORD *)(v17 + 24 * (v32 - 1) + 16);
        if (v34 == v35)
          break;
        if (v34 == v32)
          goto LABEL_37;
        if (v33 == v35)
          return result;
        if (v34 <= v35)
          v32 = *(_DWORD *)(v17 + 24 * (v32 - 1) + 16);
        else
          v33 = v34;
        v30 = v33 - 1;
        if (v29 <= v33 - 1)
          goto LABEL_35;
      }
      if (v33 < v32)
      {
LABEL_37:
        *a2 = *a3;
        *a3 = v31;
        v36 = *(_DWORD *)(v13 + 700);
        v37 = *a2 - 1;
        if (v36 <= v37)
        {
LABEL_47:
          __break(0xC471u);
          JUMPOUT(0x19659C284);
        }
        v38 = *a1;
        v39 = *a1;
        v40 = *a2;
        while (1)
        {
          if (v36 <= v39 - 1)
            goto LABEL_54;
          v41 = *(_DWORD *)(v17 + 24 * v37 + 16);
          v42 = *(_DWORD *)(v17 + 24 * (v39 - 1) + 16);
          if (v41 == v42)
            break;
          if (v41 == v39)
            goto LABEL_49;
          if (v40 == v42)
            return result;
          if (v41 <= v42)
            v39 = *(_DWORD *)(v17 + 24 * (v39 - 1) + 16);
          else
            v40 = v41;
          v37 = v40 - 1;
          if (v36 <= v40 - 1)
            goto LABEL_47;
        }
        if (v40 < v39)
        {
LABEL_49:
          *a1 = *a2;
          *a2 = v38;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;

  v4 = *a2;
  v5 = *(_DWORD *)(a4 + 700);
  v6 = *a2 - 1;
  if (v5 <= v6)
  {
LABEL_70:
    __break(0xC471u);
    JUMPOUT(0x19659C344);
  }
  v7 = *result;
  v8 = *(_QWORD *)(a4 + 688);
  v9 = *result;
  v10 = *a2;
  while (1)
  {
    if (v5 <= v9 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19659C570);
    }
    v11 = *(_DWORD *)(v8 + 24 * v6 + 16);
    v12 = *(_DWORD *)(v8 + 24 * (v9 - 1) + 16);
    if (v11 == v12)
      break;
    if (v11 == v9)
      goto LABEL_13;
    if (v10 == v12)
      goto LABEL_24;
    if (v11 <= v12)
      v9 = *(_DWORD *)(v8 + 24 * (v9 - 1) + 16);
    else
      v10 = v11;
    v6 = v10 - 1;
    if (v5 <= v10 - 1)
      goto LABEL_70;
  }
  if (v10 >= v9)
  {
LABEL_24:
    v18 = *a3 - 1;
    if (v5 <= v18)
    {
LABEL_34:
      __break(0xC471u);
      JUMPOUT(0x19659C42CLL);
    }
    v19 = *a2;
    v20 = *a3;
    while (1)
    {
      if (v5 <= v19 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19659C580);
      }
      v21 = *(_DWORD *)(v8 + 24 * v18 + 16);
      v22 = *(_DWORD *)(v8 + 24 * (v19 - 1) + 16);
      if (v21 == v22)
        break;
      if (v21 == v19)
        goto LABEL_49;
      if (v20 == v22)
        return result;
      if (v21 <= v22)
        v19 = *(_DWORD *)(v8 + 24 * (v19 - 1) + 16);
      else
        v20 = v21;
      v18 = v20 - 1;
      if (v5 <= v20 - 1)
        goto LABEL_34;
    }
    if (v20 < v19)
    {
LABEL_49:
      *a2 = *a3;
      *a3 = v4;
      v29 = *(_DWORD *)(a4 + 700);
      v30 = *a2 - 1;
      if (v29 <= v30)
      {
LABEL_59:
        __break(0xC471u);
        JUMPOUT(0x19659C540);
      }
      v31 = *result;
      v32 = *result;
      v33 = *a2;
      while (1)
      {
        if (v29 <= v32 - 1)
          goto LABEL_70;
        v34 = *(_DWORD *)(v8 + 24 * v30 + 16);
        v35 = *(_DWORD *)(v8 + 24 * (v32 - 1) + 16);
        if (v34 == v35)
          break;
        if (v34 == v32)
          goto LABEL_65;
        if (v33 == v35)
          return result;
        if (v34 <= v35)
          v32 = *(_DWORD *)(v8 + 24 * (v32 - 1) + 16);
        else
          v33 = v34;
        v30 = v33 - 1;
        if (v29 <= v33 - 1)
          goto LABEL_59;
      }
      if (v33 < v32)
      {
LABEL_65:
        *result = *a2;
        *a2 = v31;
      }
    }
  }
  else
  {
LABEL_13:
    v13 = *a3 - 1;
    if (v5 <= v13)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x19659C3BCLL);
    }
    v14 = *a2;
    v15 = *a3;
    while (1)
    {
      if (v5 <= v14 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19659C578);
      }
      v16 = *(_DWORD *)(v8 + 24 * v13 + 16);
      v17 = *(_DWORD *)(v8 + 24 * (v14 - 1) + 16);
      if (v16 == v17)
        break;
      if (v16 == v14)
        goto LABEL_36;
      if (v15 == v17)
        goto LABEL_37;
      if (v16 <= v17)
        v14 = *(_DWORD *)(v8 + 24 * (v14 - 1) + 16);
      else
        v15 = v16;
      v13 = v15 - 1;
      if (v5 <= v15 - 1)
        goto LABEL_23;
    }
    if (v15 < v14)
    {
LABEL_36:
      *result = *a3;
LABEL_62:
      *a3 = v7;
      return result;
    }
LABEL_37:
    *result = v4;
    *a2 = v7;
    v23 = *(_DWORD *)(a4 + 700);
    v24 = *a3 - 1;
    if (v23 <= v24)
    {
LABEL_47:
      __break(0xC471u);
      JUMPOUT(0x19659C4B8);
    }
    v25 = v7;
    v26 = *a3;
    while (1)
    {
      if (v23 <= v25 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19659C588);
      }
      v27 = *(_DWORD *)(v8 + 24 * v24 + 16);
      v28 = *(_DWORD *)(v8 + 24 * (v25 - 1) + 16);
      if (v27 == v28)
        break;
      if (v27 == v25)
        goto LABEL_61;
      if (v26 == v28)
        return result;
      if (v27 <= v28)
        v25 = *(_DWORD *)(v8 + 24 * (v25 - 1) + 16);
      else
        v26 = v27;
      v24 = v26 - 1;
      if (v23 <= v26 - 1)
        goto LABEL_47;
    }
    if (v26 < v25)
    {
LABEL_61:
      *a2 = *a3;
      goto LABEL_62;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = **a3;
      v10 = *(_DWORD *)(v9 + 700);
      v11 = v8 - 1;
      if (v10 <= v8 - 1)
        goto LABEL_12;
      v12 = *a1;
      v13 = *(_QWORD *)(v9 + 688);
      v14 = *a1;
      v15 = *(a2 - 1);
      while (2)
      {
        if (v10 <= v14 - 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19659C894);
        }
        v16 = *(_DWORD *)(v13 + 24 * v11 + 16);
        v17 = *(_DWORD *)(v13 + 24 * (v14 - 1) + 16);
        if (v16 == v17)
        {
          if (v15 >= v14)
            return 1;
          goto LABEL_50;
        }
        if (v16 == v14)
        {
LABEL_50:
          *a1 = v8;
          *(a2 - 1) = v12;
          return 1;
        }
        if (v15 != v17)
        {
          if (v16 <= v17)
            v14 = *(_DWORD *)(v13 + 24 * (v14 - 1) + 16);
          else
            v15 = v16;
          v11 = v15 - 1;
          if (v10 <= v15 - 1)
          {
LABEL_12:
            __break(0xC471u);
            JUMPOUT(0x19659C65CLL);
          }
          continue;
        }
        return 1;
      }
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v18 = a1 + 2;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(a1, a1 + 1, a1 + 2, **a3);
      v19 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v20 = 0;
      v21 = **a3;
      while (2)
      {
        v22 = *v19;
        v23 = *(_DWORD *)(v21 + 700);
        v24 = *v19 - 1;
        if (v23 <= v24)
        {
LABEL_54:
          __break(0xC471u);
          JUMPOUT(0x19659C87CLL);
        }
        v25 = *(_QWORD *)(v21 + 688);
        v26 = v22 - 1;
        v27 = *v18;
        v28 = *v19;
        while (2)
        {
          if (v23 <= v27 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x19659C874);
          }
          v29 = *(_DWORD *)(v25 + 24 * v26 + 16);
          v30 = *(_DWORD *)(v25 + 24 * (v27 - 1) + 16);
          if (v29 == v30)
          {
            if (v28 < v27)
            {
LABEL_28:
              *v19 = *v18;
              v31 = a1;
              if (v18 != a1)
              {
                v32 = v18;
                while (2)
                {
                  v34 = *--v32;
                  v33 = v34;
                  v35 = *(_DWORD *)(v21 + 700);
                  v36 = v22 - 1;
                  v37 = v34;
                  v38 = v22;
                  if (v35 <= v24)
                  {
LABEL_56:
                    __break(0xC471u);
                    JUMPOUT(0x19659C88CLL);
                  }
                  while (1)
                  {
                    if (v35 <= v37 - 1)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19659C884);
                    }
                    v39 = *(_DWORD *)(v25 + 24 * v36 + 16);
                    v40 = *(_DWORD *)(v25 + 24 * (v37 - 1) + 16);
                    if (v39 == v40)
                      break;
                    if (v39 == v37)
                      goto LABEL_41;
                    if (v38 == v40)
                      goto LABEL_43;
                    if (v39 <= v40)
                      v37 = *(_DWORD *)(v25 + 24 * (v37 - 1) + 16);
                    else
                      v38 = v39;
                    v36 = v38 - 1;
                    if (v35 <= v38 - 1)
                      goto LABEL_56;
                  }
                  if (v38 >= v37)
                  {
LABEL_43:
                    v31 = v18;
                    goto LABEL_44;
                  }
LABEL_41:
                  *v18 = v33;
                  v18 = v32;
                  if (v32 != a1)
                    continue;
                  break;
                }
                v31 = a1;
              }
LABEL_44:
              *v31 = v22;
              if (++v20 == 8)
                return v19 + 1 == a2;
            }
          }
          else
          {
            if (v29 == v27)
              goto LABEL_28;
            if (v28 != v30)
            {
              if (v29 <= v30)
                v27 = *(_DWORD *)(v25 + 24 * (v27 - 1) + 16);
              else
                v28 = v29;
              v26 = v28 - 1;
              if (v23 <= v28 - 1)
                goto LABEL_54;
              continue;
            }
          }
          break;
        }
        v18 = v19++;
        if (v19 != a2)
          continue;
        return 1;
      }
  }
}

unsigned int *std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t **a5)
{
  unsigned int *result;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;

  result = std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::updateCascadeLayerPriorities(void)::$_1 &,unsigned int *>(a1, a2, a3, **a5);
  v11 = **a5;
  v12 = *(_DWORD *)(v11 + 700);
  v13 = *a4 - 1;
  if (v12 <= v13)
  {
LABEL_41:
    __break(0xC471u);
    JUMPOUT(0x19659C964);
  }
  v14 = *a3;
  v15 = *(_QWORD *)(v11 + 688);
  v16 = *a3;
  v17 = *a4;
  while (1)
  {
    if (v12 <= v16 - 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19659CAA0);
    }
    v18 = *(_DWORD *)(v15 + 24 * v13 + 16);
    v19 = *(_DWORD *)(v15 + 24 * (v16 - 1) + 16);
    if (v18 == v19)
      break;
    if (v18 == v16)
      goto LABEL_13;
    if (v17 == v19)
      return result;
    if (v18 <= v19)
      v16 = *(_DWORD *)(v15 + 24 * (v16 - 1) + 16);
    else
      v17 = v18;
    v13 = v17 - 1;
    if (v12 <= v17 - 1)
      goto LABEL_41;
  }
  if (v17 < v16)
  {
LABEL_13:
    *a3 = *a4;
    *a4 = v14;
    v20 = *(_DWORD *)(v11 + 700);
    v21 = *a3 - 1;
    if (v20 <= v21)
    {
LABEL_23:
      __break(0xC471u);
      JUMPOUT(0x19659C9ECLL);
    }
    v22 = *a2;
    v23 = *a2;
    v24 = *a3;
    while (1)
    {
      if (v20 <= v23 - 1)
      {
        __break(0xC471u);
        JUMPOUT(0x19659CAA8);
      }
      v25 = *(_DWORD *)(v15 + 24 * v21 + 16);
      v26 = *(_DWORD *)(v15 + 24 * (v23 - 1) + 16);
      if (v25 == v26)
        break;
      if (v25 == v23)
        goto LABEL_25;
      if (v24 == v26)
        return result;
      if (v25 <= v26)
        v23 = *(_DWORD *)(v15 + 24 * (v23 - 1) + 16);
      else
        v24 = v25;
      v21 = v24 - 1;
      if (v20 <= v24 - 1)
        goto LABEL_23;
    }
    if (v24 < v23)
    {
LABEL_25:
      *a2 = *a3;
      *a3 = v22;
      v27 = *(_DWORD *)(v11 + 700);
      v28 = *a2 - 1;
      if (v27 <= v28)
      {
LABEL_35:
        __break(0xC471u);
        JUMPOUT(0x19659CA74);
      }
      v29 = *a1;
      v30 = *a1;
      v31 = *a2;
      while (1)
      {
        if (v27 <= v30 - 1)
          goto LABEL_41;
        v32 = *(_DWORD *)(v15 + 24 * v28 + 16);
        v33 = *(_DWORD *)(v15 + 24 * (v30 - 1) + 16);
        if (v32 == v33)
          break;
        if (v32 == v30)
          goto LABEL_37;
        if (v31 == v33)
          return result;
        if (v32 <= v33)
          v30 = *(_DWORD *)(v15 + 24 * (v30 - 1) + 16);
        else
          v31 = v32;
        v28 = v31 - 1;
        if (v27 <= v31 - 1)
          goto LABEL_35;
      }
      if (v31 < v30)
      {
LABEL_37:
        *a1 = *a2;
        *a2 = v29;
      }
    }
  }
  return result;
}

void WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::Style::PropertyCascade::Property>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::Style::PropertyCascade::Property>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::Style::PropertyCascade::Property,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::Style::PropertyCascade::Property>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  WTF::StringImpl *v25;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  v9 = v7;
  v10 = v7 + 16;
  if (a2)
    bzero((void *)(v7 + 16), 40 * a2);
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = v5;
    do
    {
      v13 = (WTF::StringImpl **)(v4 + 40 * v11);
      v14 = *v13;
      if (*v13)
      {
        if (v14 != (WTF::StringImpl *)-1)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = 0;
          v18 = *((_DWORD *)v14 + 4) >> 8;
          do
          {
            v19 = v18 & v16;
            v20 = (WTF::StringImpl **)(v15 + 40 * (v18 & v16));
            v18 = ++v17 + (v18 & v16);
          }
          while (*v20);
          *v20 = 0;
          v21 = *v13;
          *v13 = 0;
          *v20 = v21;
          v22 = v15 + 40 * v19;
          v23 = v4 + 40 * v11;
          v24 = *(_OWORD *)(v23 + 8);
          *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 24);
          *(_OWORD *)(v22 + 8) = v24;
          v25 = *v13;
          *v13 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v8);
            else
              *(_DWORD *)v25 -= 2;
          }
        }
      }
      else
      {
        *v13 = 0;
      }
      ++v11;
    }
    while (v11 != v12);
  }
  else if (!v4)
  {
    return;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Vector<WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;

  v3 = a3;
  v4 = result;
  v5 = *(void **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 12 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= a2)
    v8 = a2;
  if (v8 <= v6)
    return v3;
  if (v8 < 0x15555556)
  {
    v9 = *(unsigned int *)(result + 12);
    v10 = 12 * v8;
    v11 = (void *)WTF::fastMalloc((WTF *)(12 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFFC) / 0xC;
    *(_QWORD *)v4 = v11;
    memcpy(v11, v5, 12 * v9);
    if (v5)
    {
      if (*(void **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree((WTF *)v5, v12);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

void **WTF::Vector<WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x15555556)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *result;
      v7 = *((unsigned int *)result + 3);
      v8 = 12 * v4;
      v9 = (void *)WTF::fastMalloc((WTF *)(12 * v4));
      *((_DWORD *)v5 + 2) = (v8 & 0xFFFFFFFC) / 0xC;
      *v5 = v9;
      result = (void **)memcpy(v9, v6, 12 * v7);
      if (v6)
      {
        if (*v5 == v6)
        {
          *v5 = 0;
          *((_DWORD *)v5 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v6, v10);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(uint64_t result, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  char v48;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v7 = *(a2 - 8);
    v8 = *(unsigned __int8 *)(result + 4);
    if (v7 == v8)
    {
      if ((*(a2 - 4) != 0) == (*(_BYTE *)(result + 8) != 0))
      {
        if (*((unsigned __int16 *)a2 - 3) <= *(unsigned __int16 *)(result + 6))
          return result;
      }
      else if (*(a2 - 4))
      {
        return result;
      }
    }
    else if ((char)v7 >= (char)v8)
    {
      return result;
    }
    v30 = a2 - 12;
    v31 = *(_DWORD *)(result + 8);
    v32 = *(_QWORD *)result;
    v33 = *((_DWORD *)a2 - 1);
    *(_QWORD *)result = *(_QWORD *)(a2 - 12);
    *(_DWORD *)(result + 8) = v33;
    *(_QWORD *)v30 = v32;
    *((_DWORD *)v30 + 2) = v31;
    return result;
  }
  if ((uint64_t)a3 > 128)
  {
    v26 = a4;
    v27 = a3 >> 1;
    v28 = result + 12 * (a3 >> 1);
    v29 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(result, v28, v29, a4, a5);
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(v6 + 12 * (a3 >> 1), a2, a3 - (a3 >> 1), v26, a5);
      return (uint64_t)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>((char *)v6, (char *)(v6 + 12 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (_QWORD *)v26, a5);
    }
    std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(result, v28, v29, a4);
    v34 = v26 + 12 * v27;
    result = std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(v6 + 12 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v34);
    v35 = v26 + 12 * a3;
    v36 = v34;
    while (1)
    {
      if (v36 == v35)
      {
        if (v26 != v34)
        {
          v41 = 0;
          do
          {
            v42 = v6 + v41;
            v43 = *(_QWORD *)(v26 + v41);
            *(_DWORD *)(v42 + 8) = *(_DWORD *)(v26 + v41 + 8);
            *(_QWORD *)v42 = v43;
            v41 += 12;
          }
          while (v26 + v41 != v34);
        }
        return result;
      }
      v37 = *(unsigned __int8 *)(v36 + 4);
      v38 = *(unsigned __int8 *)(v26 + 4);
      if (v37 == v38)
      {
        if ((*(_BYTE *)(v36 + 8) != 0) == (*(_BYTE *)(v26 + 8) != 0))
        {
          if (*(unsigned __int16 *)(v36 + 6) > *(unsigned __int16 *)(v26 + 6))
          {
LABEL_52:
            v40 = *(_QWORD *)v36;
            *(_DWORD *)(v6 + 8) = *(_DWORD *)(v36 + 8);
            *(_QWORD *)v6 = v40;
            v36 += 12;
            goto LABEL_53;
          }
        }
        else if (!*(_BYTE *)(v36 + 8))
        {
          goto LABEL_52;
        }
      }
      else if ((char)v37 < (char)v38)
      {
        goto LABEL_52;
      }
      v39 = *(_QWORD *)v26;
      *(_DWORD *)(v6 + 8) = *(_DWORD *)(v26 + 8);
      *(_QWORD *)v6 = v39;
      v26 += 12;
LABEL_53:
      v6 += 12;
      if (v26 == v34)
      {
        if (v36 != v35)
        {
          v44 = 0;
          do
          {
            v45 = v6 + v44;
            v46 = *(_QWORD *)(v36 + v44);
            *(_DWORD *)(v45 + 8) = *(_DWORD *)(v36 + v44 + 8);
            *(_QWORD *)v45 = v46;
            v44 += 12;
          }
          while (v36 + v44 != v35);
        }
        return result;
      }
    }
  }
  if ((char *)result == a2)
    return result;
  v10 = result + 12;
  if ((char *)(result + 12) == a2)
    return result;
  v11 = 0;
  v12 = result;
  do
  {
    v13 = v12;
    v12 = v10;
    v14 = *(unsigned __int8 *)(v13 + 16);
    v15 = *(unsigned __int8 *)(v13 + 4);
    if (v14 == v15)
    {
      v16 = *(unsigned __int8 *)(v13 + 20);
      if ((*(_BYTE *)(v13 + 20) != 0) == (*(_BYTE *)(v13 + 8) != 0))
      {
        if (*(unsigned __int16 *)(v13 + 18) <= *(unsigned __int16 *)(v13 + 6))
          goto LABEL_37;
      }
      else if (*(_BYTE *)(v13 + 20))
      {
        goto LABEL_37;
      }
    }
    else
    {
      if ((char)v14 >= (char)v15)
        goto LABEL_37;
      v16 = *(unsigned __int8 *)(v13 + 20);
    }
    v17 = *(_BYTE *)(v13 + 17);
    v18 = *(unsigned __int16 *)(v13 + 18);
    v47 = *(_WORD *)(v13 + 21);
    v48 = *(_BYTE *)(v13 + 23);
    result = *(unsigned int *)(v13 + 8);
    v19 = *(_DWORD *)(v13 + 12);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v20 = v6;
    *(_DWORD *)(v12 + 8) = result;
    if (v13 == v6)
      goto LABEL_36;
    result = v11;
    v21 = v11;
    if (v16)
    {
      while (1)
      {
        v22 = v6 + result;
        v23 = *(unsigned __int8 *)(v6 + result - 8);
        if (v14 == v23)
        {
          if (!*(_BYTE *)(v22 - 4))
            goto LABEL_35;
          v20 = v6 + result;
          if (v18 <= *(unsigned __int16 *)(v6 + result - 6))
            goto LABEL_36;
        }
        else if ((char)v14 >= (char)v23)
        {
          goto LABEL_35;
        }
        v13 -= 12;
        *(_QWORD *)v22 = *(_QWORD *)(v22 - 12);
        *(_DWORD *)(v22 + 8) = *(_DWORD *)(v22 - 4);
        result -= 12;
        if (!result)
          goto LABEL_34;
      }
    }
    while (1)
    {
      result = v6 + v21;
      v24 = *(unsigned __int8 *)(v6 + v21 - 8);
      if (v14 == v24)
      {
        if (!*(_BYTE *)(result - 4))
        {
          v20 = v6 + v21;
          if (v18 <= *(unsigned __int16 *)(v6 + v21 - 6))
            goto LABEL_36;
        }
        goto LABEL_33;
      }
      if ((char)v14 >= (char)v24)
        break;
LABEL_33:
      v13 -= 12;
      *(_QWORD *)result = *(_QWORD *)(result - 12);
      *(_DWORD *)(result + 8) = *(_DWORD *)(result - 4);
      v21 -= 12;
      if (!v21)
      {
LABEL_34:
        v20 = v6;
        goto LABEL_36;
      }
    }
LABEL_35:
    v20 = v13;
LABEL_36:
    *(_DWORD *)v20 = v19;
    *(_BYTE *)(v20 + 4) = v14;
    *(_BYTE *)(v20 + 5) = v17;
    *(_WORD *)(v20 + 6) = v18;
    *(_BYTE *)(v20 + 8) = v16;
    *(_WORD *)(v20 + 9) = v47;
    *(_BYTE *)(v20 + 11) = v48;
LABEL_37:
    v10 = v12 + 12;
    v11 += 12;
  }
  while ((char *)(v12 + 12) != a2);
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (!a3)
    return result;
  v4 = a4;
  v7 = result;
  if (a3 == 2)
  {
    v9 = (uint64_t *)(a2 - 12);
    v10 = *(unsigned __int8 *)(a2 - 8);
    v11 = *(unsigned __int8 *)(result + 4);
    if (v10 == v11)
    {
      if ((*(_BYTE *)(a2 - 4) != 0) == (*(_BYTE *)(result + 8) != 0))
      {
        if (*(unsigned __int16 *)(a2 - 6) <= *(unsigned __int16 *)(result + 6))
          goto LABEL_8;
      }
      else if (*(_BYTE *)(a2 - 4))
      {
LABEL_8:
        v12 = *(_QWORD *)result;
        *(_DWORD *)(a4 + 8) = *(_DWORD *)(result + 8);
        *(_QWORD *)a4 = v12;
        v13 = *v9;
        *(_DWORD *)(a4 + 20) = *(_DWORD *)(a2 - 4);
        *(_QWORD *)(a4 + 12) = v13;
        return result;
      }
    }
    else if ((char)v10 >= (char)v11)
    {
      goto LABEL_8;
    }
    v28 = *v9;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a2 - 4);
    *(_QWORD *)a4 = v28;
    v29 = *(_QWORD *)result;
    *(_DWORD *)(a4 + 20) = *(_DWORD *)(result + 8);
    *(_QWORD *)(a4 + 12) = v29;
    return result;
  }
  if (a3 == 1)
  {
    v8 = *(_QWORD *)result;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(result + 8);
    *(_QWORD *)a4 = v8;
    return result;
  }
  if ((uint64_t)a3 > 8)
  {
    v30 = result + 12 * (a3 >> 1);
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(result, v30, a3 >> 1, a4, a3 >> 1);
    result = std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(v7 + 12 * (a3 >> 1), a2, a3 - (a3 >> 1), v4 + 12 * (a3 >> 1), a3 - (a3 >> 1));
    v31 = v7 + 12 * (a3 >> 1);
    while (1)
    {
      if (v31 == a2)
      {
        if (v7 != v30)
        {
          v36 = 0;
          do
          {
            v37 = v4 + v36;
            v38 = *(_QWORD *)(v7 + v36);
            *(_DWORD *)(v37 + 8) = *(_DWORD *)(v7 + v36 + 8);
            *(_QWORD *)v37 = v38;
            v36 += 12;
          }
          while (v7 + v36 != v30);
        }
        return result;
      }
      v32 = *(unsigned __int8 *)(v31 + 4);
      v33 = *(unsigned __int8 *)(v7 + 4);
      if (v32 == v33)
      {
        if ((*(_BYTE *)(v31 + 8) != 0) == (*(_BYTE *)(v7 + 8) != 0))
        {
          if (*(unsigned __int16 *)(v31 + 6) > *(unsigned __int16 *)(v7 + 6))
          {
LABEL_43:
            v35 = *(_QWORD *)v31;
            *(_DWORD *)(v4 + 8) = *(_DWORD *)(v31 + 8);
            *(_QWORD *)v4 = v35;
            v31 += 12;
            goto LABEL_44;
          }
        }
        else if (!*(_BYTE *)(v31 + 8))
        {
          goto LABEL_43;
        }
      }
      else if ((char)v32 < (char)v33)
      {
        goto LABEL_43;
      }
      v34 = *(_QWORD *)v7;
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(v7 + 8);
      *(_QWORD *)v4 = v34;
      v7 += 12;
LABEL_44:
      v4 += 12;
      if (v7 == v30)
      {
        if (v31 != a2)
        {
          v39 = 0;
          do
          {
            v40 = v4 + v39;
            v41 = *(_QWORD *)(v31 + v39);
            *(_DWORD *)(v40 + 8) = *(_DWORD *)(v31 + v39 + 8);
            *(_QWORD *)v40 = v41;
            v39 += 12;
          }
          while (v31 + v39 != a2);
        }
        return result;
      }
    }
  }
  if (result != a2)
  {
    v14 = *(_QWORD *)result;
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(result + 8);
    *(_QWORD *)a4 = v14;
    v15 = result + 12;
    if (result + 12 != a2)
    {
      v16 = 0;
      v17 = a4;
      do
      {
        v18 = v7;
        v19 = v17;
        v7 = v15;
        v17 += 12;
        v20 = *(unsigned __int8 *)(v18 + 16);
        v21 = *(unsigned __int8 *)(v19 + 4);
        if (v20 == v21)
        {
          if ((*(_BYTE *)(v18 + 20) != 0) == (*(_BYTE *)(v19 + 8) != 0))
          {
            v22 = v17;
            if (*(unsigned __int16 *)(v18 + 18) <= *(unsigned __int16 *)(v19 + 6))
              goto LABEL_32;
          }
          else
          {
            v22 = v17;
            if (*(_BYTE *)(v18 + 20))
              goto LABEL_32;
          }
LABEL_20:
          *(_QWORD *)v17 = *(_QWORD *)v19;
          *(_DWORD *)(v17 + 8) = *(_DWORD *)(v19 + 8);
          v22 = a4;
          if (v19 == a4)
            goto LABEL_32;
          v23 = v16;
          while (1)
          {
            v24 = a4 + v23;
            v25 = *(unsigned __int8 *)(v18 + 16);
            v26 = *(unsigned __int8 *)(a4 + v23 - 8);
            if (v25 == v26)
            {
              if ((*(_BYTE *)(v18 + 20) != 0) == (*(_BYTE *)(v24 - 4) != 0))
              {
                v22 = a4 + v23;
                if (*(unsigned __int16 *)(v18 + 18) <= *(unsigned __int16 *)(a4 + v23 - 6))
                  goto LABEL_32;
              }
              else if (*(_BYTE *)(v18 + 20))
              {
                goto LABEL_31;
              }
            }
            else if ((char)v25 >= (char)v26)
            {
LABEL_31:
              v22 = v19;
              goto LABEL_32;
            }
            v19 -= 12;
            *(_QWORD *)v24 = *(_QWORD *)(v24 - 12);
            *(_DWORD *)(v24 + 8) = *(_DWORD *)(v24 - 4);
            v23 -= 12;
            if (!v23)
            {
              v22 = a4;
              goto LABEL_32;
            }
          }
        }
        v22 = v17;
        if ((char)v20 < (char)v21)
          goto LABEL_20;
LABEL_32:
        v27 = *(_QWORD *)v7;
        *(_DWORD *)(v22 + 8) = *(_DWORD *)(v7 + 8);
        *(_QWORD *)v22 = v27;
        v15 = v7 + 12;
        v16 += 12;
      }
      while (v7 + 12 != a2);
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  int v22;
  int v23;
  unsigned int v24;
  char *v25;
  unint64_t v26;
  char *v27;
  int v28;
  unint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  int v35;
  int v36;
  unsigned int v37;
  char *v38;
  unint64_t v39;
  char *v40;
  int v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  char *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;

  if (!a5)
    return result;
  v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4)
      return result;
    v10 = 0;
    v11 = a2[4];
    v12 = -a4;
    while (1)
    {
      v13 = result[v10 + 4];
      if (v13 != v11)
      {
        if (v11 < (char)v13)
          break;
        goto LABEL_14;
      }
      if ((a2[8] != 0) != (result[v10 + 8] != 0))
      {
        if (!a2[8])
          break;
        goto LABEL_14;
      }
      if (*((unsigned __int16 *)a2 + 3) > *(unsigned __int16 *)&result[v10 + 6])
        break;
LABEL_14:
      v10 += 12;
      if (__CFADD__(v12++, 1))
        return result;
    }
    v15 = -v12;
    v16 = &result[v10];
    if (-v12 >= v7)
    {
      if (v12 == -1)
      {
        v93 = &result[v10];
        v113 = *((_DWORD *)v93 + 2);
        v108 = *(_QWORD *)v93;
        v94 = *(_QWORD *)a2;
        *((_DWORD *)v93 + 2) = *((_DWORD *)a2 + 2);
        *(_QWORD *)v93 = v94;
        *((_DWORD *)a2 + 2) = v113;
        *(_QWORD *)a2 = v108;
        return result;
      }
      if (v12 > 0)
        v15 = 1 - v12;
      v32 = v15 >> 1;
      if (a3 == a2)
      {
        v38 = a3;
        v42 = a3;
LABEL_57:
        v25 = &result[12 * v32 + v10];
        v18 = 0xAAAAAAAAAAAAAAABLL * ((v38 - v42) >> 2);
        goto LABEL_58;
      }
      v33 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 2);
      v34 = &result[12 * v32 + v10];
      v35 = v34[4];
      v36 = v34[8];
      v37 = *((unsigned __int16 *)v34 + 3);
      v38 = a2;
      while (2)
      {
        v39 = v33 >> 1;
        v40 = &v38[12 * (v33 >> 1)];
        v41 = v40[4];
        if (v41 == v35)
        {
          if ((v36 != 0) == (v38[12 * v39 + 8] != 0))
          {
            if (*(unsigned __int16 *)&v38[12 * v39 + 6] > v37)
              goto LABEL_49;
          }
          else if (!v38[12 * v39 + 8])
          {
LABEL_49:
            v38 = v40 + 12;
            v39 = v33 + ~v39;
          }
        }
        else if ((char)v41 < v35)
        {
          goto LABEL_49;
        }
        v33 = v39;
        if (!v39)
        {
          v42 = a2;
          goto LABEL_57;
        }
        continue;
      }
    }
    if (v7 >= 0)
      v17 = v7;
    else
      v17 = v7 + 1;
    v18 = v17 >> 1;
    if (v16 != a2)
    {
      v19 = &result[v10];
      v20 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v10) >> 2);
      v21 = &a2[12 * v18];
      v22 = v21[4];
      v23 = v21[8];
      v24 = *((unsigned __int16 *)v21 + 3);
      v25 = v16;
      if (v23)
      {
        while (1)
        {
          v26 = v20 >> 1;
          v27 = &v25[12 * (v20 >> 1)];
          v28 = v27[4];
          if (v22 == v28)
            break;
          if ((char)v22 >= (char)v28)
            goto LABEL_28;
LABEL_29:
          v20 = v26;
          if (!v26)
            goto LABEL_55;
        }
        if (v25[12 * v26 + 8] && v24 > *(unsigned __int16 *)&v25[12 * v26 + 6])
          goto LABEL_29;
LABEL_28:
        v25 = v27 + 12;
        v26 = v20 + ~v26;
        goto LABEL_29;
      }
      while (1)
      {
        v29 = v20 >> 1;
        v30 = &v25[12 * (v20 >> 1)];
        v31 = v30[4];
        if (v22 == v31)
          break;
        if ((char)v22 >= (char)v31)
          goto LABEL_36;
LABEL_37:
        v20 = v29;
        if (!v29)
          goto LABEL_55;
      }
      if (v25[12 * v29 + 8] || v24 > *(unsigned __int16 *)&v25[12 * v29 + 6])
        goto LABEL_37;
LABEL_36:
      v25 = v30 + 12;
      v29 = v20 + ~v29;
      goto LABEL_37;
    }
    v19 = a2;
    v25 = a2;
LABEL_55:
    v38 = &a2[12 * v18];
    v32 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v19) >> 2);
LABEL_58:
    v43 = v38;
    if (v25 != a2)
    {
      v43 = v25;
      if (a2 != v38)
      {
        if (v25 + 12 == a2)
        {
          v110 = *((_DWORD *)v25 + 2);
          v102 = a7;
          v105 = *(_QWORD *)v25;
          v49 = (char *)(v38 - a2);
          v98 = a6;
          v100 = v18;
          v50 = a3;
          v51 = v32;
          memmove(v25, a2, v38 - a2);
          v32 = v51;
          v18 = v100;
          a7 = v102;
          a3 = v50;
          a6 = v98;
          v43 = &v49[(_QWORD)v25];
          *(_QWORD *)v43 = v105;
          *((_DWORD *)v43 + 2) = v110;
        }
        else if (a2 + 12 == v38)
        {
          v43 = v25 + 12;
          v111 = *((_DWORD *)v38 - 1);
          v106 = *(_QWORD *)(v38 - 12);
          if (v38 - 12 != v25)
          {
            v99 = a6;
            v101 = v18;
            v52 = a3;
            v103 = a7;
            v53 = v32;
            memmove(v25 + 12, v25, v38 - 12 - v25);
            v32 = v53;
            v18 = v101;
            a7 = v103;
            a3 = v52;
            a6 = v99;
          }
          *((_DWORD *)v25 + 2) = v111;
          *(_QWORD *)v25 = v106;
        }
        else
        {
          v44 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v25) >> 2);
          if (v44 == 0xAAAAAAAAAAAAAAABLL * ((v38 - a2) >> 2))
          {
            v45 = 0;
            do
            {
              v46 = &a2[v45];
              v47 = &v25[v45];
              v109 = *(_DWORD *)&v25[v45 + 8];
              v104 = *(_QWORD *)&v25[v45];
              v48 = *(_QWORD *)&a2[v45];
              *((_DWORD *)v47 + 2) = *(_DWORD *)&a2[v45 + 8];
              *(_QWORD *)v47 = v48;
              *((_DWORD *)v46 + 2) = v109;
              *(_QWORD *)v46 = v104;
              if (&v25[v45 + 12] == a2)
                break;
              v45 += 12;
            }
            while (v46 + 12 != v38);
            v43 = a2;
          }
          else
          {
            v54 = 0xAAAAAAAAAAAAAAABLL * ((v38 - a2) >> 2);
            v55 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v25) >> 2);
            do
            {
              v56 = v55;
              v55 = v54;
              v54 = v56 % v54;
            }
            while (v54);
            if (v55)
            {
              v57 = &v25[12 * v55];
              do
              {
                v58 = *(_QWORD *)(v57 - 12);
                v57 -= 12;
                v112 = *((_DWORD *)v57 + 2);
                v107 = v58;
                v59 = &v57[4 * ((a2 - v25) >> 2)];
                v60 = v57;
                do
                {
                  v61 = v60;
                  v60 = v59;
                  v62 = *(_QWORD *)v59;
                  *((_DWORD *)v61 + 2) = *((_DWORD *)v60 + 2);
                  *v61 = v62;
                  v63 = 0xAAAAAAAAAAAAAAABLL * ((v38 - (char *)v60) >> 2);
                  v64 = __OFSUB__(v44, v63);
                  v66 = v44 - v63;
                  v65 = (v66 < 0) ^ v64;
                  v59 = &v25[12 * v66];
                  if (v65)
                    v59 = (char *)v60 + 4 * ((a2 - v25) >> 2);
                }
                while (v59 != v57);
                *((_DWORD *)v60 + 2) = v112;
                *v60 = v107;
              }
              while (v57 != v25);
            }
            v43 = &v25[4 * ((v38 - a2) >> 2)];
          }
        }
      }
    }
    a4 = -(v32 + v12);
    v67 = v7 - v18;
    if (v32 + v18 >= v7 - (v32 + v18) - v12)
    {
      v72 = a3;
      v73 = -(v32 + v12);
      v74 = v16;
      v75 = v67;
      v70 = a6;
      v71 = a7;
      v67 = v18;
      a4 = v32;
      std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(v43, v38, v72, v73, v75);
      result = v74;
      v38 = v25;
      a3 = v43;
    }
    else
    {
      v68 = v16;
      v69 = a3;
      v70 = a6;
      v71 = a7;
      std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::$_0 &,WebCore::Style::PropertyCascade::addImportantMatches(WebCore::Style::CascadeLevel)::ImportantMatch *>(v68, v25, v43, v32, v18);
      a3 = v69;
      result = v43;
    }
    v7 = v67;
    a2 = v38;
    a6 = v70;
    a7 = v71;
    if (!v67)
      return result;
  }
  if (a4 <= v7)
  {
    if (result == a2)
      return result;
    v85 = 0;
    do
    {
      v86 = (char *)a6 + v85;
      v87 = *(_QWORD *)&result[v85];
      *((_DWORD *)v86 + 2) = *(_DWORD *)&result[v85 + 8];
      *(_QWORD *)v86 = v87;
      v85 += 12;
    }
    while (&result[v85] != a2);
    if (!v85)
      return result;
    v88 = a6;
    while (1)
    {
      if (a2 == a3)
        return (char *)memmove(result, v88, (char *)a6 - (char *)v88 + v85);
      v89 = a2[4];
      v90 = *((unsigned __int8 *)v88 + 4);
      if (v89 == v90)
      {
        if ((a2[8] != 0) == (*((_BYTE *)v88 + 8) != 0))
        {
          if (*((unsigned __int16 *)a2 + 3) > *((unsigned __int16 *)v88 + 3))
          {
LABEL_114:
            v92 = *(_QWORD *)a2;
            *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
            *(_QWORD *)result = v92;
            a2 += 12;
            goto LABEL_115;
          }
        }
        else if (!a2[8])
        {
          goto LABEL_114;
        }
      }
      else if ((char)v89 < (char)v90)
      {
        goto LABEL_114;
      }
      v91 = *v88;
      *((_DWORD *)result + 2) = *((_DWORD *)v88 + 2);
      *(_QWORD *)result = v91;
      v88 = (uint64_t *)((char *)v88 + 12);
LABEL_115:
      result += 12;
      if ((_QWORD *)((char *)a6 + v85) == v88)
        return result;
    }
  }
  if (a2 != a3)
  {
    v76 = 0;
    do
    {
      v77 = (char *)a6 + v76;
      v78 = *(_QWORD *)&a2[v76];
      *((_DWORD *)v77 + 2) = *(_DWORD *)&a2[v76 + 8];
      *(_QWORD *)v77 = v78;
      v76 += 12;
    }
    while (&a2[v76] != a3);
    if (v76)
    {
      v79 = (_QWORD *)((char *)a6 + v76);
      v80 = a3 - 12;
      do
      {
        if (a2 == result)
        {
          v95 = 0;
          do
          {
            v96 = &v80[v95];
            v97 = *(_QWORD *)((char *)v79 + v95 - 12);
            *((_DWORD *)v96 + 2) = *(_DWORD *)((char *)v79 + v95 - 4);
            *(_QWORD *)v96 = v97;
            v95 -= 12;
          }
          while ((_QWORD *)((char *)v79 + v95) != a6);
          return result;
        }
        v81 = a2 - 12;
        v82 = *((unsigned __int8 *)v79 - 8);
        v83 = *(a2 - 8);
        if (v82 == v83)
        {
          if ((*((_BYTE *)v79 - 4) != 0) == (*(a2 - 4) != 0))
          {
            if (*((unsigned __int16 *)v79 - 3) > *((unsigned __int16 *)a2 - 3))
            {
LABEL_98:
              a2 -= 12;
              goto LABEL_99;
            }
          }
          else if (!*((_BYTE *)v79 - 4))
          {
            goto LABEL_98;
          }
        }
        else if ((char)v82 < (char)v83)
        {
          goto LABEL_98;
        }
        v81 = (char *)v79 - 12;
        v79 = (_QWORD *)((char *)v79 - 12);
LABEL_99:
        v84 = *(_QWORD *)v81;
        *((_DWORD *)v80 + 2) = *((_DWORD *)v81 + 2);
        *(_QWORD *)v80 = v84;
        v80 -= 12;
      }
      while (v79 != a6);
    }
  }
  return result;
}

unint64_t WTF::Vector<std::tuple<unsigned int,unsigned char,WTF::AtomString>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v4 + 16 * (unint64_t)a1[3] <= a3)
  {
    v5 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v5 >= 0x10)
      v6 = v5 + 1;
    else
      v6 = 16;
    if (v6 > a2)
      a2 = v6;
    WTF::Vector<std::tuple<unsigned int,unsigned char,WTF::AtomString>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v8 = a3 - v4;
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<std::tuple<unsigned int,unsigned char,WTF::AtomString>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v8;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<std::tuple<unsigned int,unsigned char,WTF::AtomString>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  int v2;
  WTF::StringImpl *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;

  if (*((unsigned int *)result + 2) < a2)
  {
    v2 = a2;
    v3 = result;
    v4 = *(WTF **)result;
    v5 = *((unsigned int *)result + 3);
    if (a2 < 5)
    {
      v6 = (WTF::StringImpl *)((char *)result + 16);
      *(_QWORD *)result = (char *)result + 16;
      *((_DWORD *)result + 2) = 4;
    }
    else
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * a2));
      v6 = result;
      *((_DWORD *)v3 + 2) = v2;
      *(_QWORD *)v3 = result;
    }
    if ((_DWORD)v5)
    {
      v7 = (WTF *)((char *)v4 + 16 * v5);
      v8 = v4;
      do
      {
        *(_DWORD *)v6 = *(_DWORD *)v8;
        *((_BYTE *)v6 + 4) = *((_BYTE *)v8 + 4);
        v9 = *((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v6 + 1) = v9;
        result = (WTF::StringImpl *)*((_QWORD *)v8 + 1);
        *((_QWORD *)v8 + 1) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)result -= 2;
        }
        v8 = (WTF *)((char *)v8 + 16);
        v6 = (WTF::StringImpl *)((char *)v6 + 16);
      }
      while (v8 != v7);
    }
    if ((WTF::StringImpl *)((char *)v3 + 16) != v4 && v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *((_DWORD *)v3 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeatures<WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0>(WebCore::Element &,WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0 &&)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 56);
  return v2 && *(_DWORD *)(v2 - 12) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeatures<WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0>(WebCore::Element &,WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0 &&)::{lambda(void)#1}::operator() const(void)::{lambda(WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0&)#2},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 132) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeaturesInShadowTree<WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0 &>(WebCore::Element &,WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0 &)::{lambda(WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0 &&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(a2 + 180) | *(unsigned __int8 *)(a2 + 800)) != 0;
}

BOOL WTF::Detail::CallableWrapper<void WebCore::Style::traverseRuleFeaturesForSlotted<WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0 &>(WebCore::Element &,WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0 &)::{lambda(WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(WebCore::CSSSelectorPseudoClass,WebCore::Style::PseudoClassChangeInvalidation::Value,WebCore::Style::InvalidationScope)::$_0 &&)#1},BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 228) != 0;
}

unint64_t WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleAndSelector>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<WebCore::Style::RuleAndSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 12 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 8);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleFeatureWithInvalidationSelector>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = WTF::Vector<WebCore::Style::RuleFeatureWithInvalidationSelector,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v4 = v5;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(result + 8);
  *(_WORD *)(v4 + 12) = *(_WORD *)(result + 12);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(result + 16);
  ++*(_DWORD *)(a1 + 12);
  return result;
}

void **WTF::Vector<WebCore::Style::RuleData,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 2)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 1;
    }
    else
    {
      if (v5 >> 27)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(32 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 32 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<WebCore::Style::RuleData,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
  }
  else
  {
    v3 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,WTF::DefaultHash<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Ref<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned long,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::Style::RuleSet *v17;
  WTF *v18;
  uint64_t v19;
  unsigned int v20;
  WTF *v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::Style::RuleSet *v36;
  _QWORD *v37;
  WebCore::Style::RuleSet *v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Style::RuleSet *v43;
  WTF *v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  void *v48;
  WTF *v49;
  void *v50;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = v7;
    do
    {
      v14 = v6 + 24 * v11;
      v15 = *(unsigned int *)(v14 + 12);
      if ((_DWORD)v15 != -1)
      {
        if ((_DWORD)v15)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = *(WTF **)v14;
          v22 = 8 * v15;
          v23 = -1640531527;
          do
          {
            v24 = *(_QWORD *)v21;
            v21 = (WTF *)((char *)v21 + 8);
            v25 = (v24 >> 5) & 0x7FFF800 ^ ((v23 + (unsigned __int16)v24) << 16) ^ (v23
                                                                                                + (unsigned __int16)v24);
            v26 = v25 + WORD2(v24) + (v25 >> 11);
            v27 = (v24 >> 37) & 0x7FFF800 ^ (v26 << 16);
            v23 = (v27 ^ v26) + ((v27 ^ v26) >> 11);
            v22 -= 8;
          }
          while (v22);
          v28 = 0;
          v29 = (v23 ^ (8 * v23)) + ((v23 ^ (8 * v23)) >> 5);
          v30 = (v29 ^ (4 * v29)) + ((v29 ^ (4 * v29)) >> 15);
          v31 = v30 ^ (v30 << 10);
          if (v31)
            v32 = v31;
          else
            v32 = 0x800000;
          do
          {
            v33 = v32 & v20;
            v34 = v19 + 24 * (v32 & v20);
            v32 = ++v28 + (v32 & v20);
          }
          while (*(_DWORD *)(v34 + 12));
          v35 = v19 + 24 * v33;
          v38 = *(WebCore::Style::RuleSet **)(v35 + 16);
          v37 = (_QWORD *)(v35 + 16);
          v36 = v38;
          *v37 = 0;
          if (v38)
          {
            if (*(_DWORD *)v36 == 1)
            {
              WebCore::Style::RuleSet::~RuleSet(v36, v10);
              WTF::fastFree(v47, v48);
            }
            else
            {
              --*(_DWORD *)v36;
            }
          }
          v39 = *(WTF **)v34;
          if (*(_QWORD *)v34)
          {
            *(_QWORD *)v34 = 0;
            *(_DWORD *)(v34 + 8) = 0;
            WTF::fastFree(v39, v10);
          }
          *(_QWORD *)v34 = 0;
          *(_QWORD *)(v34 + 8) = 0;
          v40 = *(WTF **)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)v34 = v40;
          LODWORD(v40) = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v34 + 8) = (_DWORD)v40;
          LODWORD(v40) = *(_DWORD *)(v14 + 12);
          *(_DWORD *)(v14 + 12) = 0;
          *(_DWORD *)(v34 + 12) = (_DWORD)v40;
          v41 = v6 + 24 * v11;
          v42 = *(_QWORD *)(v41 + 16);
          *(_QWORD *)(v41 + 16) = 0;
          *v37 = v42;
          v43 = *(WebCore::Style::RuleSet **)(v41 + 16);
          *(_QWORD *)(v41 + 16) = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 1)
            {
              WebCore::Style::RuleSet::~RuleSet(v43, v10);
              WTF::fastFree(v49, v50);
            }
            else
            {
              --*(_DWORD *)v43;
            }
          }
          v44 = *(WTF **)v14;
          if (*(_QWORD *)v14)
          {
            *(_QWORD *)v14 = 0;
            *(_DWORD *)(v14 + 8) = 0;
            WTF::fastFree(v44, v10);
          }
          if (v14 == a3)
            v12 = v34;
        }
        else
        {
          v16 = v6 + 24 * v11;
          v17 = *(WebCore::Style::RuleSet **)(v16 + 16);
          *(_QWORD *)(v16 + 16) = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 1)
            {
              WebCore::Style::RuleSet::~RuleSet(v17, v10);
              WTF::fastFree(v45, v46);
            }
            else
            {
              --*(_DWORD *)v17;
            }
          }
          v18 = *(WTF **)v14;
          if (*(_QWORD *)v14)
          {
            *(_QWORD *)v14 = 0;
            *(_DWORD *)(v14 + 8) = 0;
            WTF::fastFree(v18, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

WebCore::Style::RuleSet *WTF::RefCounted<WebCore::Style::RuleSet>::deref(WebCore::Style::RuleSet *result, void *a2)
{
  WTF *v2;
  void *v3;

  if (*(_DWORD *)result == 1)
  {
    WebCore::Style::RuleSet::~RuleSet(result, a2);
    return (WebCore::Style::RuleSet *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t ****WebCore::Style::RuleSet::traverseRuleDatas<WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0>(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0 &&)::{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()<WTF::HashMap<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString,std::unique_ptr<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::Vector<WebCore::Style::RuleData,1ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::CrashOnOverflow,16ul,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTraits<WTF::HashMap>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::DefaultHash<WTF::HashMap><{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::AtomString::default_delete<{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::FastMalloc>>,{lambda(WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&,unsigned long)::$_0&)#2}::operator()::HashTableTraits>>(uint64_t ****result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;

  if (!a2)
  {
    v2 = 0;
    v3 = 0;
LABEL_3:
    v4 = &a2[2 * v3];
    goto LABEL_10;
  }
  v3 = *((unsigned int *)a2 - 1);
  v4 = &a2[2 * v3];
  if (!*((_DWORD *)a2 - 3))
  {
    v2 = &a2[2 * v3];
    goto LABEL_3;
  }
  v2 = a2;
  if ((_DWORD)v3)
  {
    v5 = 16 * v3;
    v2 = a2;
    while ((unint64_t)(*v2 + 1) <= 1)
    {
      v2 += 2;
      v5 -= 16;
      if (!v5)
      {
        v2 = v4;
        break;
      }
    }
  }
LABEL_10:
  if (a2)
    v6 = &a2[2 * *((unsigned int *)a2 - 1)];
  else
    v6 = 0;
  while (v2 != v6)
  {
    v7 = (uint64_t *)v2[1];
    v8 = *((unsigned int *)v7 + 3);
    if ((_DWORD)v8)
    {
      v9 = *result;
      if (****result)
      {
        v10 = *v7;
        v11 = v10 + 32 * v8;
        do
        {
          v12 = ***v9;
          if (v12)
          {
            v13 = *(_QWORD *)(v10 + 8);
            v14 = HIDWORD(v13) & 0x1FFFFF;
            v15 = *(_DWORD *)(v12 - 8);
            v16 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
            v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
            v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
            v19 = v15 & ((v18 >> 31) ^ v18);
            v20 = *(_QWORD *)(v12 + 16 * v19);
            if (v20 == v14)
            {
LABEL_22:
              *(_QWORD *)(v10 + 8) = v13 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(*(_BYTE *)(v12 + 16 * v19 + 8) != 0) << 63);
            }
            else
            {
              v21 = 1;
              while (v20 != -1)
              {
                v19 = ((_DWORD)v19 + v21) & v15;
                v20 = *(_QWORD *)(v12 + 16 * v19);
                ++v21;
                if (v20 == v14)
                  goto LABEL_22;
              }
            }
          }
          v10 += 32;
        }
        while (v10 != v11);
      }
    }
    v22 = v2 + 2;
    v2 = v4;
    if (v22 != v4)
    {
      v2 = v22;
      while ((unint64_t)(*v2 + 1) <= 1)
      {
        v2 += 2;
        if (v2 == v4)
        {
          v2 = v4;
          break;
        }
      }
    }
  }
  return result;
}

WTF *WTF::VectorTypeOperations<WebCore::Style::RuleSet::CascadeLayer>::move(WTF *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(WTF::StringImpl ***)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = (_DWORD)v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = (_DWORD)v6;
      LODWORD(v6) = *((_DWORD *)v5 + 4);
      *(_WORD *)(a3 + 20) = *((_WORD *)v5 + 10);
      *(_DWORD *)(a3 + 16) = (_DWORD)v6;
      v7 = *((unsigned int *)v5 + 3);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)v5;
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      result = *(WTF **)v5;
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      a3 += 24;
      v5 = (WTF *)((char *)v5 + 24);
    }
    while (v5 != a2);
  }
  return result;
}

WTF::StringImpl *WTF::VectorTypeOperations<WebCore::Style::RuleSet::ContainerQueryAndParent>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (result != a2)
  {
    v5 = result;
    do
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          --*(_DWORD *)result;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 16);
      a3 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::StyleRuleScope const,WTF::RawPtrTraits<WebCore::StyleRuleScope const>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleScope const>> const&>(uint64_t a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  char *v5;
  _DWORD *v6;

  v3 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(char **)a1;
  v6 = *(_DWORD **)v3;
  *v6 = **(_DWORD **)v3 + 1;
  *(_QWORD *)&v5[8 * v4] = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

unint64_t WTF::Vector<WebCore::Style::RuleSet::ScopeAndParent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleSet::ScopeAndParent>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = WTF::Vector<WebCore::Style::RuleSet::ScopeAndParent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  v7 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *(_QWORD *)v6 = v7;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(result + 8);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

unint64_t WTF::Vector<WebCore::Style::RuleSet::ScopeAndParent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::Style::RuleSet::ScopeAndParent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::Style::RuleSet::ScopeAndParent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::Style::RuleSet::ScopeAndParent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (WTF *)((char *)v7 + 16 * v8);
        v12 = v7;
        do
        {
          v13 = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          *(_QWORD *)v10 = v13;
          *(_DWORD *)(v10 + 8) = *((_DWORD *)v12 + 2);
          result = *(_QWORD *)v12;
          *(_QWORD *)v12 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, v9);
            else
              --*(_DWORD *)result;
          }
          v12 = (WTF *)((char *)v12 + 16);
          v10 += 16;
        }
        while (v12 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int>>,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,unsigned int,WTF::DefaultHash<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl **v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  WTF::StringImpl **v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  uint64_t result;
  uint64_t v44;

  v5 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v5 - 4);
    v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    v13 = a3;
    do
    {
      v14 = v5 + 24 * v11;
      v15 = *(unsigned int *)(v14 + 12);
      if ((_DWORD)v15 != -1)
      {
        if ((_DWORD)v15)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = *(WTF::StringImpl ***)v14;
          v21 = 8 * v15;
          v22 = -1640531527;
          do
          {
            v23 = (unint64_t)*v20++;
            v24 = (v23 >> 5) & 0x7FFF800 ^ ((v22 + (unsigned __int16)v23) << 16) ^ (v22
                                                                                                + (unsigned __int16)v23);
            v25 = v24 + WORD2(v23) + (v24 >> 11);
            v26 = (v23 >> 37) & 0x7FFF800 ^ (v25 << 16);
            v22 = (v26 ^ v25) + ((v26 ^ v25) >> 11);
            v21 -= 8;
          }
          while (v21);
          v27 = 0;
          v28 = (v22 ^ (8 * v22)) + ((v22 ^ (8 * v22)) >> 5);
          v29 = (v28 ^ (4 * v28)) + ((v28 ^ (4 * v28)) >> 15);
          v30 = v29 ^ (v29 << 10);
          if (!v30)
            v30 = 0x800000;
          do
          {
            v31 = v30 & v19;
            v32 = v18 + 24 * v31;
            v30 = ++v27 + v31;
          }
          while (*(_DWORD *)(v32 + 12));
          v33 = *(WTF **)v32;
          if (*(_QWORD *)v32)
          {
            *(_QWORD *)v32 = 0;
            *(_DWORD *)(v32 + 8) = 0;
            v38 = v13;
            WTF::fastFree(v33, v10);
            v13 = v38;
          }
          *(_QWORD *)v32 = 0;
          *(_QWORD *)(v32 + 8) = 0;
          v34 = *(WTF::StringImpl ***)v14;
          *(_QWORD *)v14 = 0;
          *(_QWORD *)v32 = v34;
          LODWORD(v34) = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v14 + 8) = 0;
          *(_DWORD *)(v32 + 8) = (_DWORD)v34;
          v35 = *(_QWORD *)(v14 + 12);
          *(_DWORD *)(v14 + 12) = 0;
          *(_QWORD *)(v32 + 12) = v35;
          v36 = *(unsigned int *)(v14 + 12);
          if ((_DWORD)v36)
          {
            v40 = *(WTF::StringImpl ***)v14;
            v41 = 8 * v36;
            do
            {
              v42 = *v40;
              *v40 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                {
                  v44 = v13;
                  WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v10);
                  v13 = v44;
                }
                else
                {
                  *(_DWORD *)v42 -= 2;
                }
              }
              ++v40;
              v41 -= 8;
            }
            while (v41);
          }
          v37 = *(WTF **)v14;
          if (*(_QWORD *)v14)
          {
            *(_QWORD *)v14 = 0;
            *(_DWORD *)(v14 + 8) = 0;
            v39 = v13;
            WTF::fastFree(v37, v10);
            v13 = v39;
          }
          if (v14 == v13)
            v12 = v32;
        }
        else
        {
          v16 = *(WTF **)v14;
          if (*(_QWORD *)v14)
          {
            *(_QWORD *)v14 = 0;
            *(_DWORD *)(v14 + 8) = 0;
            v17 = v13;
            WTF::fastFree(v16, v10);
            v13 = v17;
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v10);
  return v12;
}

unint64_t WTF::Vector<WebCore::Style::RuleSet::CascadeLayer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::Style::RuleSet::CascadeLayer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::Style::RuleSet::CascadeLayer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::Style::RuleSet::CascadeLayer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WTF *v8;
  WTF *v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
          v10 = *(WTF::StringImpl ***)v9;
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v7 = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 2);
          *((_DWORD *)v9 + 2) = 0;
          v7[2] = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 3);
          *((_DWORD *)v9 + 3) = 0;
          v7[3] = v10;
          LODWORD(v10) = *((_DWORD *)v9 + 4);
          *((_WORD *)v7 + 10) = *((_WORD *)v9 + 10);
          v7[4] = v10;
          v11 = *((unsigned int *)v9 + 3);
          if ((_DWORD)v11)
          {
            v12 = *(WTF::StringImpl ***)v9;
            v13 = 8 * v11;
            do
            {
              v14 = *v12;
              *v12 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, v6);
                else
                  *(_DWORD *)v14 -= 2;
              }
              ++v12;
              v13 -= 8;
            }
            while (v13);
          }
          result = *(unsigned int **)v9;
          if (*(_QWORD *)v9)
          {
            *(_QWORD *)v9 = 0;
            *((_DWORD *)v9 + 2) = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v7 += 6;
          v9 = (WTF *)((char *)v9 + 24);
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl *std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  WTF::StringImpl *v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;
  unsigned int v33;
  uint64_t i;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  int v45;
  uint64_t *v46;
  WTF::StringImpl *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  WTF::StringImpl *v65;

  if (a4 < 2)
    return result;
  v7 = result;
  v65 = a2;
  if (a4 == 2)
  {
    v8 = *((_DWORD *)a2 - 2);
    v9 = *((_DWORD *)result + 2);
    v10 = **a3;
    if (v8)
    {
      if (*(_DWORD *)(v10 + 700) <= (v8 - 1))
      {
        __break(0xC471u);
        JUMPOUT(0x19659F478);
      }
      v11 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 688) + 24 * (v8 - 1) + 20);
      if (v9)
        goto LABEL_7;
    }
    else
    {
      v11 = 0xFFFF;
      if (v9)
      {
LABEL_7:
        if (*(_DWORD *)(v10 + 700) <= (v9 - 1))
        {
LABEL_116:
          __break(0xC471u);
          JUMPOUT(0x19659F448);
        }
        v12 = *(unsigned __int16 *)(*(_QWORD *)(v10 + 688) + 24 * (v9 - 1) + 20);
LABEL_14:
        if (v11 < v12)
        {
          v19 = *(_DWORD **)result;
          *(_QWORD *)result = 0;
          v20 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = 0;
          v21 = *(_DWORD **)result;
          *(_QWORD *)v7 = v20;
          if (v21)
          {
            if (*v21 == 1)
            {
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v21, a2);
              a2 = v65;
              v8 = *((_DWORD *)v65 - 2);
            }
            else
            {
              --*v21;
            }
          }
          *((_DWORD *)v7 + 2) = v8;
          result = (WTF::StringImpl *)*((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v19;
          if (result)
          {
            if (*(_DWORD *)result == 1)
            {
              result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
              a2 = v65;
            }
            else
            {
              --*(_DWORD *)result;
            }
          }
          *((_DWORD *)a2 - 2) = v9;
        }
        return result;
      }
    }
    v12 = 0xFFFF;
    goto LABEL_14;
  }
  if ((uint64_t)a4 <= 0)
  {
    if (result == a2)
      return result;
    v22 = (char *)result + 16;
    if ((WTF::StringImpl *)((char *)result + 16) == a2)
      return result;
    v23 = 0;
    v24 = result;
    while (1)
    {
      v25 = v22;
      v26 = *((_DWORD *)v24 + 6);
      v27 = *((_DWORD *)v24 + 2);
      v28 = **a3;
      if (v26)
      {
        if (*(_DWORD *)(v28 + 700) <= (v26 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x19659F458);
        }
        v29 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 688) + 24 * (v26 - 1) + 20);
        if (!v27)
        {
LABEL_31:
          v30 = 0xFFFF;
          goto LABEL_32;
        }
      }
      else
      {
        v29 = 0xFFFF;
        if (!v27)
          goto LABEL_31;
      }
      if (*(_DWORD *)(v28 + 700) <= (v27 - 1))
      {
        __break(0xC471u);
        JUMPOUT(0x19659F460);
      }
      v30 = *(unsigned __int16 *)(*(_QWORD *)(v28 + 688) + 24 * (v27 - 1) + 20);
LABEL_32:
      if (v29 < v30)
      {
        v31 = *(_QWORD *)v25;
        *(_QWORD *)v25 = 0;
        if (v26)
        {
          v32 = 0;
          v33 = v26 - 1;
          for (i = v23; ; i -= 16)
          {
            v35 = (char *)v7 + i;
            v36 = *(_QWORD *)((char *)v7 + i);
            *(_QWORD *)v35 = 0;
            *((_QWORD *)v35 + 2) = v36;
            if (v32)
            {
              if (*v32 == 1)
              {
                WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v32, a2);
                a2 = v65;
              }
              else
              {
                --*v32;
              }
            }
            *((_DWORD *)v35 + 6) = *((_DWORD *)v35 + 2);
            if (!i)
            {
              v44 = v7;
              goto LABEL_54;
            }
            v37 = **a3;
            v38 = *(_DWORD *)(v37 + 700);
            if (v38 <= v33)
              goto LABEL_116;
            v39 = *(_DWORD *)((char *)v7 + i - 8);
            v40 = *(_QWORD *)(v37 + 688);
            if (v39)
            {
              v41 = v39 - 1;
              if (v38 <= v41)
                goto LABEL_110;
              v42 = *(unsigned __int16 *)(v40 + 24 * v41 + 20);
            }
            else
            {
              v42 = 0xFFFF;
            }
            if (*(unsigned __int16 *)(v40 + 24 * v33 + 20) >= v42)
              break;
            v32 = *(_DWORD **)v35;
          }
          v44 = (WTF::StringImpl *)((char *)v7 + i);
        }
        else
        {
          v43 = *(_QWORD *)v24;
          *(_QWORD *)v24 = 0;
          *((_QWORD *)v24 + 2) = v43;
          *((_DWORD *)v25 + 2) = v27;
          v44 = v7;
          if (v24 != v7)
          {
            v45 = *((_DWORD *)v24 - 2);
            if (v45)
            {
              v44 = v24;
              if (*(_DWORD *)(**a3 + 700) <= (v45 - 1))
              {
LABEL_110:
                __break(0xC471u);
                JUMPOUT(0x19659F450);
              }
            }
            else
            {
              v44 = v24;
            }
          }
        }
LABEL_54:
        result = *(WTF::StringImpl **)v44;
        *(_QWORD *)v44 = v31;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
            a2 = v65;
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        *((_DWORD *)v44 + 2) = v26;
      }
      v22 = v25 + 16;
      v23 += 16;
      v24 = (WTF::StringImpl *)v25;
      if (v25 + 16 == (char *)a2)
        return result;
    }
  }
  v15 = a5;
  v16 = a4 >> 1;
  v17 = (WTF::StringImpl *)((char *)result + 16 * (a4 >> 1));
  v18 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(result, v17, a3, v18, a5, a6);
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>((char *)v7 + 16 * (a4 >> 1), v65, a3, a4 - (a4 >> 1), v15, a6);
    return std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(v7, (WTF::StringImpl *)((char *)v7 + 16 * (a4 >> 1)), v65, a3, a4 >> 1, a4 - (a4 >> 1), (uint64_t)v15, a6);
  }
  std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>((uint64_t)result, v17, a3, v18, a5);
  v46 = &v15[2 * v16];
  result = (WTF::StringImpl *)std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>((uint64_t)v7 + 16 * (a4 >> 1), v65, a3, a4 - (a4 >> 1), v46);
  v48 = v46;
  v49 = v15;
  v50 = &v15[2 * a4];
  while (v48 != v50)
  {
    v51 = *((_DWORD *)v48 + 2);
    v52 = *((_DWORD *)v49 + 2);
    v53 = **a3;
    if (v51)
    {
      if (*(_DWORD *)(v53 + 700) <= (v51 - 1))
      {
        __break(0xC471u);
        JUMPOUT(0x19659F468);
      }
      v54 = *(unsigned __int16 *)(*(_QWORD *)(v53 + 688) + 24 * (v51 - 1) + 20);
      if (v52)
      {
LABEL_66:
        if (*(_DWORD *)(v53 + 700) <= (v52 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x19659F470);
        }
        v55 = *(unsigned __int16 *)(*(_QWORD *)(v53 + 688) + 24 * (v52 - 1) + 20);
        goto LABEL_70;
      }
    }
    else
    {
      v54 = 0xFFFF;
      if (v52)
        goto LABEL_66;
    }
    v55 = 0xFFFF;
LABEL_70:
    if (v54 >= v55)
    {
      v57 = *v49;
      *v49 = 0;
      result = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = v57;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v47);
          v52 = *((_DWORD *)v49 + 2);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      *((_DWORD *)v7 + 2) = v52;
      v49 += 2;
    }
    else
    {
      v56 = *v48;
      *v48 = 0;
      result = *(WTF::StringImpl **)v7;
      *(_QWORD *)v7 = v56;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v47);
          v51 = *((_DWORD *)v48 + 2);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      *((_DWORD *)v7 + 2) = v51;
      v48 += 2;
    }
    v7 = (WTF::StringImpl *)((char *)v7 + 16);
    if (v49 == v46)
    {
      if (v48 != v50)
      {
        v61 = 0;
        do
        {
          v62 = &v48[v61];
          v63 = v48[v61];
          v48[v61] = 0;
          result = *(WTF::StringImpl **)((char *)v7 + v61 * 8);
          *(_QWORD *)((char *)v7 + v61 * 8) = v63;
          if (result)
          {
            if (*(_DWORD *)result == 1)
              result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v47);
            else
              --*(_DWORD *)result;
          }
          *(_DWORD *)((char *)v7 + v61 * 8 + 8) = *((_DWORD *)v62 + 2);
          v61 += 2;
        }
        while (v62 + 2 != v50);
      }
      goto LABEL_99;
    }
  }
  if (v49 != v46)
  {
    v58 = 0;
    do
    {
      v59 = &v49[v58];
      v60 = v49[v58];
      v49[v58] = 0;
      result = *(WTF::StringImpl **)((char *)v7 + v58 * 8);
      *(_QWORD *)((char *)v7 + v58 * 8) = v60;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v47);
        else
          --*(_DWORD *)result;
      }
      *(_DWORD *)((char *)v7 + v58 * 8 + 8) = *((_DWORD *)v59 + 2);
      v58 += 2;
    }
    while (v59 + 2 != v46);
  }
LABEL_99:
  if (v15)
  {
    v64 = a4;
    do
    {
      result = (WTF::StringImpl *)*v15;
      *v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v47);
        else
          --*(_DWORD *)result;
      }
      v15 += 2;
      --v64;
    }
    while (v64);
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(uint64_t result, WTF::StringImpl *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  _QWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  WTF::StringImpl *v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  uint64_t v61;

  if (!a4)
    return result;
  v5 = a5;
  v9 = (_QWORD *)result;
  if (a4 == 2)
  {
    v13 = *((_DWORD *)a2 - 2);
    v14 = *(_DWORD *)(result + 8);
    v15 = **a3;
    if (v13)
    {
      if (*(_DWORD *)(v15 + 700) <= (v13 - 1))
      {
        __break(0xC471u);
        JUMPOUT(0x19659F938);
      }
      v16 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 688) + 24 * (v13 - 1) + 20);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v16 = 0xFFFF;
      if (v14)
      {
LABEL_8:
        if (*(_DWORD *)(v15 + 700) <= (v14 - 1))
        {
LABEL_82:
          __break(0xC471u);
          JUMPOUT(0x19659F908);
        }
        v17 = *(unsigned __int16 *)(*(_QWORD *)(v15 + 688) + 24 * (v14 - 1) + 20);
        goto LABEL_66;
      }
    }
    v17 = 0xFFFF;
LABEL_66:
    v12 = a5 + 3;
    if (v16 >= v17)
    {
      v56 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *a5 = v56;
      *((_DWORD *)a5 + 2) = v14;
      v57 = *((_QWORD *)a2 - 2);
      *((_QWORD *)a2 - 2) = 0;
      a5[2] = v57;
      v11 = (_DWORD *)((char *)a2 - 8);
    }
    else
    {
      v54 = *((_QWORD *)a2 - 2);
      *((_QWORD *)a2 - 2) = 0;
      *a5 = v54;
      *((_DWORD *)a5 + 2) = v13;
      v55 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      a5[2] = v55;
      v11 = (_DWORD *)(result + 8);
    }
    goto LABEL_69;
  }
  if (a4 == 1)
  {
    v10 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    v11 = (_DWORD *)(result + 8);
    *a5 = v10;
    v12 = a5 + 1;
LABEL_69:
    *v12 = *v11;
    return result;
  }
  if ((uint64_t)a4 > 8)
  {
    v42 = (_QWORD *)(result + 16 * (a4 >> 1));
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(result, v42, a3, a4 >> 1, a5, a4 >> 1);
    result = std::__stable_sort<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(&v9[2 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), &v5[2 * (a4 >> 1)], a4 - (a4 >> 1));
    v43 = (WTF::StringImpl *)&v9[2 * (a4 >> 1)];
    while (1)
    {
      if (v43 == a2)
      {
        if (v9 != v42)
        {
          v58 = 0;
          do
          {
            v59 = &v5[v58];
            v60 = &v9[v58];
            v61 = v9[v58];
            *v60 = 0;
            *v59 = v61;
            *((_DWORD *)v59 + 2) = v9[v58 + 1];
            v58 += 2;
          }
          while (v60 + 2 != v42);
        }
        return result;
      }
      v44 = *((_DWORD *)v43 + 2);
      v45 = *((_DWORD *)v9 + 2);
      v46 = **a3;
      if (v44)
      {
        if (*(_DWORD *)(v46 + 700) <= (v44 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x19659F918);
        }
        v47 = *(unsigned __int16 *)(*(_QWORD *)(v46 + 688) + 24 * (v44 - 1) + 20);
        if (v45)
        {
LABEL_52:
          if (*(_DWORD *)(v46 + 700) <= (v45 - 1))
          {
            __break(0xC471u);
            JUMPOUT(0x19659F920);
          }
          v48 = *(unsigned __int16 *)(*(_QWORD *)(v46 + 688) + 24 * (v45 - 1) + 20);
          goto LABEL_56;
        }
      }
      else
      {
        v47 = 0xFFFF;
        if (v45)
          goto LABEL_52;
      }
      v48 = 0xFFFF;
LABEL_56:
      if (v47 >= v48)
      {
        v49 = *v9;
        *v9 = 0;
        v9 += 2;
      }
      else
      {
        v49 = *(_QWORD *)v43;
        *(_QWORD *)v43 = 0;
        v43 = (WTF::StringImpl *)((char *)v43 + 16);
        v45 = v44;
      }
      *v5 = v49;
      *((_DWORD *)v5 + 2) = v45;
      v5 += 2;
      if (v9 == v42)
      {
        if (v43 != a2)
        {
          v50 = 0;
          do
          {
            v51 = (_QWORD *)((char *)v43 + v50);
            v52 = &v5[v50 / 8];
            v53 = *(_QWORD *)((char *)v43 + v50);
            *v51 = 0;
            *v52 = v53;
            *((_DWORD *)v52 + 2) = *(_DWORD *)((char *)v43 + v50 + 8);
            v50 += 16;
          }
          while (v51 + 2 != (_QWORD *)a2);
        }
        return result;
      }
    }
  }
  if ((WTF::StringImpl *)result == a2)
    return result;
  v18 = *(_QWORD *)result;
  *(_QWORD *)result = 0;
  *a5 = v18;
  *((_DWORD *)a5 + 2) = *(_DWORD *)(result + 8);
  v19 = (_QWORD *)(result + 16);
  if ((WTF::StringImpl *)(result + 16) == a2)
    return result;
  v20 = 0;
  v21 = a5;
  do
  {
    v22 = v19;
    v23 = *((_DWORD *)v9 + 6);
    v24 = *((_DWORD *)v21 + 2);
    v25 = **a3;
    if (v23)
    {
      if (*(_DWORD *)(v25 + 700) <= (v23 - 1))
      {
        __break(0xC471u);
        JUMPOUT(0x19659F928);
      }
      v26 = *(unsigned __int16 *)(*(_QWORD *)(v25 + 688) + 24 * (v23 - 1) + 20);
      if (v24)
      {
LABEL_17:
        if (*(_DWORD *)(v25 + 700) <= (v24 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x19659F930);
        }
        v27 = *(unsigned __int16 *)(*(_QWORD *)(v25 + 688) + 24 * (v24 - 1) + 20);
        goto LABEL_21;
      }
    }
    else
    {
      v26 = 0xFFFF;
      if (v24)
        goto LABEL_17;
    }
    v27 = 0xFFFF;
LABEL_21:
    if (v26 >= v27)
    {
      v40 = *v22;
      *v22 = 0;
      v21[2] = v40;
      *((_DWORD *)v21 + 6) = v23;
      goto LABEL_44;
    }
    v28 = *v21;
    *v21 = 0;
    v21[2] = v28;
    *((_DWORD *)v21 + 6) = v24;
    v29 = v5;
    if (v21 == v5)
      goto LABEL_40;
    v30 = v20;
    while (1)
    {
      v31 = (uint64_t)v5 + v30;
      v32 = *((_DWORD *)v9 + 6);
      v33 = *(_DWORD *)((char *)v5 + v30 - 8);
      v34 = **a3;
      if (v32)
      {
        v35 = v32 - 1;
        if (*(_DWORD *)(v34 + 700) <= v35)
          goto LABEL_82;
        v36 = *(unsigned __int16 *)(*(_QWORD *)(v34 + 688) + 24 * v35 + 20);
        if (!v33)
        {
LABEL_30:
          v37 = 0xFFFF;
          goto LABEL_31;
        }
      }
      else
      {
        v36 = 0xFFFF;
        if (!v33)
          goto LABEL_30;
      }
      if (*(_DWORD *)(v34 + 700) <= (v33 - 1))
      {
        __break(0xC471u);
        JUMPOUT(0x19659F910);
      }
      v37 = *(unsigned __int16 *)(*(_QWORD *)(v34 + 688) + 24 * (v33 - 1) + 20);
LABEL_31:
      if (v36 >= v37)
        break;
      v38 = *(_QWORD *)(v31 - 16);
      *(_QWORD *)(v31 - 16) = 0;
      v39 = *(_DWORD **)((char *)v5 + v30);
      *(uint64_t *)((char *)v5 + v30) = v38;
      if (v39)
      {
        if (*v39 == 1)
        {
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v39, a2);
          v33 = *(_DWORD *)(v31 - 8);
        }
        else
        {
          --*v39;
        }
      }
      *(_DWORD *)((char *)v5 + v30 + 8) = v33;
      v30 -= 16;
      if (!v30)
      {
        v29 = v5;
        goto LABEL_40;
      }
    }
    v29 = (uint64_t *)((char *)v5 + v30);
LABEL_40:
    v41 = *v22;
    *v22 = 0;
    result = *v29;
    *v29 = v41;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(result, a2);
      else
        --*(_DWORD *)result;
    }
    *((_DWORD *)v29 + 2) = *((_DWORD *)v9 + 6);
LABEL_44:
    v21 += 2;
    v19 = v22 + 2;
    v20 += 16;
    v9 = v22;
  }
  while (v22 + 2 != (_QWORD *)a2);
  return result;
}

WTF::StringImpl *std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl *a3, uint64_t **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  int v65;
  WTF::StringImpl *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  _DWORD *v71;
  int v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  _DWORD *v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t **v126;
  uint64_t v127;
  uint64_t v128;
  WTF::StringImpl *v129;

  if (!a6)
    return result;
  v13 = a2;
  v14 = result;
  v15 = a6;
  do
  {
    if (a5 <= a8 || v15 <= a8)
    {
      if (a5 > v15)
      {
        if (v13 == a3)
          return result;
        v80 = 0;
        v81 = 0;
        do
        {
          v82 = a7 + v80;
          v83 = (_QWORD *)((char *)v13 + v80);
          v84 = *(_QWORD *)((char *)v13 + v80);
          *v83 = 0;
          *(_QWORD *)v82 = v84;
          *(_DWORD *)(v82 + 8) = *(_DWORD *)((char *)v13 + v80 + 8);
          ++v81;
          v80 += 16;
        }
        while (v83 + 2 != (_QWORD *)a3);
        if (!v80)
          goto LABEL_182;
        v85 = a3;
        v86 = a7;
        v87 = a7 + v80;
        v88 = (uint64_t)v85 - 16;
        while (1)
        {
          if (v13 == v14)
          {
            v115 = 0;
            do
            {
              v116 = *(_QWORD *)(v87 + v115 - 16);
              *(_QWORD *)(v87 + v115 - 16) = 0;
              result = *(WTF::StringImpl **)(v88 + v115);
              *(_QWORD *)(v88 + v115) = v116;
              if (result)
              {
                if (*(_DWORD *)result == 1)
                  result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
                else
                  --*(_DWORD *)result;
              }
              *(_DWORD *)(v88 + v115 + 8) = *(_DWORD *)(v87 + v115 - 8);
              v115 -= 16;
            }
            while (v87 + v115 != v86);
LABEL_173:
            a7 = v86;
LABEL_182:
            if (a7)
            {
              v120 = 0;
              do
              {
                result = *(WTF::StringImpl **)a7;
                *(_QWORD *)a7 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 1)
                    result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
                  else
                    --*(_DWORD *)result;
                }
                ++v120;
                a7 += 16;
              }
              while (v120 < v81);
            }
            return result;
          }
          v89 = *((_DWORD *)v13 - 2);
          v90 = *(_DWORD *)(v87 - 8);
          v91 = **a4;
          if (v90)
          {
            if (*(_DWORD *)(v91 + 700) <= (v90 - 1))
            {
              __break(0xC471u);
              JUMPOUT(0x1965A02D0);
            }
            v92 = *(unsigned __int16 *)(*(_QWORD *)(v91 + 688) + 24 * (v90 - 1) + 20);
            if (!v89)
            {
LABEL_119:
              v93 = 0xFFFF;
              goto LABEL_120;
            }
          }
          else
          {
            v92 = 0xFFFF;
            if (!v89)
              goto LABEL_119;
          }
          if (*(_DWORD *)(v91 + 700) <= (v89 - 1))
          {
            __break(0xC471u);
            JUMPOUT(0x1965A02E0);
          }
          v93 = *(unsigned __int16 *)(*(_QWORD *)(v91 + 688) + 24 * (v89 - 1) + 20);
LABEL_120:
          if (v92 < v93)
          {
            v94 = (WTF::StringImpl *)((char *)v13 - 16);
            v95 = *((_QWORD *)v13 - 2);
            *((_QWORD *)v13 - 2) = 0;
            result = *(WTF::StringImpl **)v88;
            *(_QWORD *)v88 = v95;
            if (result)
            {
              if (*(_DWORD *)result == 1)
              {
                result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
                v89 = *((_DWORD *)v13 - 2);
              }
              else
              {
                --*(_DWORD *)result;
              }
            }
            goto LABEL_129;
          }
          v96 = *(_QWORD *)(v87 - 16);
          *(_QWORD *)(v87 - 16) = 0;
          result = *(WTF::StringImpl **)v88;
          *(_QWORD *)v88 = v96;
          if (result)
          {
            if (*(_DWORD *)result == 1)
            {
              result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
              v89 = *(_DWORD *)(v87 - 8);
              goto LABEL_128;
            }
            --*(_DWORD *)result;
          }
          v89 = v90;
LABEL_128:
          v94 = v13;
          v87 -= 16;
LABEL_129:
          *(_DWORD *)(v88 + 8) = v89;
          v88 -= 16;
          v13 = v94;
          if (v87 == v86)
            goto LABEL_173;
        }
      }
      if (v14 == v13)
        return result;
      v97 = 0;
      v81 = 0;
      do
      {
        v98 = a7 + v97;
        v99 = (_QWORD *)((char *)v14 + v97);
        v100 = *(_QWORD *)((char *)v14 + v97);
        *v99 = 0;
        *(_QWORD *)v98 = v100;
        *(_DWORD *)(v98 + 8) = *(_DWORD *)((char *)v14 + v97 + 8);
        ++v81;
        v97 += 16;
      }
      while (v99 + 2 != (_QWORD *)v13);
      if (!v97)
        goto LABEL_182;
      v101 = a7 + v97;
      v102 = a7 + v97 - 16;
      v103 = a7;
      while (1)
      {
        if (v13 == a3)
        {
          v117 = 0;
          do
          {
            v118 = a7 + v117;
            v119 = *(_QWORD *)(a7 + v117);
            *(_QWORD *)(a7 + v117) = 0;
            result = *(WTF::StringImpl **)((char *)v14 + v117);
            *(_QWORD *)((char *)v14 + v117) = v119;
            if (result)
            {
              if (*(_DWORD *)result == 1)
                result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
              else
                --*(_DWORD *)result;
            }
            *(_DWORD *)((char *)v14 + v117 + 8) = *(_DWORD *)(v118 + 8);
            v117 += 16;
          }
          while (v102 != v118);
LABEL_181:
          a7 = v103;
          goto LABEL_182;
        }
        v104 = *((_DWORD *)v13 + 2);
        v105 = *(_DWORD *)(a7 + 8);
        v106 = **a4;
        if (v104)
        {
          if (*(_DWORD *)(v106 + 700) <= (v104 - 1))
          {
            __break(0xC471u);
            JUMPOUT(0x1965A02D8);
          }
          v107 = *(unsigned __int16 *)(*(_QWORD *)(v106 + 688) + 24 * (v104 - 1) + 20);
          if (v105)
          {
LABEL_142:
            if (*(_DWORD *)(v106 + 700) <= (v105 - 1))
            {
LABEL_204:
              __break(0xC471u);
              JUMPOUT(0x1965A0284);
            }
            v108 = *(unsigned __int16 *)(*(_QWORD *)(v106 + 688) + 24 * (v105 - 1) + 20);
            goto LABEL_146;
          }
        }
        else
        {
          v107 = 0xFFFF;
          if (v105)
            goto LABEL_142;
        }
        v108 = 0xFFFF;
LABEL_146:
        if (v107 >= v108)
        {
          v110 = *(WTF::StringImpl **)a7;
          *(_QWORD *)a7 = 0;
          result = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = v110;
          if (result)
          {
            if (*(_DWORD *)result == 1)
            {
              result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
              v105 = *(_DWORD *)(a7 + 8);
            }
            else
            {
              --*(_DWORD *)result;
            }
          }
          *((_DWORD *)v14 + 2) = v105;
          a7 += 16;
        }
        else
        {
          v109 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          result = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = v109;
          if (result)
          {
            if (*(_DWORD *)result == 1)
            {
              result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
              v104 = *((_DWORD *)v13 + 2);
            }
            else
            {
              --*(_DWORD *)result;
            }
          }
          *((_DWORD *)v14 + 2) = v104;
          v13 = (WTF::StringImpl *)((char *)v13 + 16);
        }
        v14 = (WTF::StringImpl *)((char *)v14 + 16);
        if (v101 == a7)
          goto LABEL_181;
      }
    }
    if (!a5)
      return result;
    v16 = 0;
    v17 = *((_DWORD *)v13 + 2);
    v18 = **a4;
    v19 = v17 - 1;
    v20 = -a5;
    while (1)
    {
      v21 = *(_DWORD *)((char *)v14 + v16 + 8);
      if (v17)
      {
        if (*(_DWORD *)(v18 + 700) <= v19)
          goto LABEL_204;
        v22 = *(unsigned __int16 *)(*(_QWORD *)(v18 + 688) + 24 * v19 + 20);
        if (!v21)
        {
LABEL_13:
          v23 = 0xFFFF;
          goto LABEL_14;
        }
      }
      else
      {
        v22 = 0xFFFF;
        if (!v21)
          goto LABEL_13;
      }
      if (*(_DWORD *)(v18 + 700) <= (v21 - 1))
      {
        __break(0xC471u);
        JUMPOUT(0x1965A028CLL);
      }
      v23 = *(unsigned __int16 *)(*(_QWORD *)(v18 + 688) + 24 * (v21 - 1) + 20);
LABEL_14:
      if (v22 < v23)
        break;
      v16 += 16;
      if (__CFADD__(v20++, 1))
        return result;
    }
    v25 = (WTF::StringImpl *)((char *)v14 + v16);
    v126 = a4;
    v129 = a3;
    if (-v20 < v15)
    {
      if (v15 >= 0)
        v26 = v15;
      else
        v26 = v15 + 1;
      v127 = v26 >> 1;
      a3 = (WTF::StringImpl *)((char *)v13 + 16 * (v26 >> 1));
      v27 = v13;
      if (v25 != v13)
      {
        v28 = (v13 - v14 - v16) >> 4;
        v29 = *((_DWORD *)a3 + 2);
        if (v29)
        {
          v30 = v29 - 1;
          v31 = *(_DWORD *)(v18 + 700);
          if (v31 <= v30)
          {
            __break(0xC471u);
            JUMPOUT(0x1965A02C0);
          }
          v32 = *(_QWORD *)(v18 + 688);
          v33 = *(unsigned __int16 *)(v32 + 24 * v30 + 20);
          v27 = (WTF::StringImpl *)((char *)v14 + v16);
          do
          {
            v34 = v28 >> 1;
            v35 = (uint64_t)v27 + 16 * (v28 >> 1);
            v36 = *(_DWORD *)(v35 + 8);
            if (v36)
            {
              v37 = v36 - 1;
              if (v31 <= v37)
                goto LABEL_195;
              v38 = *(unsigned __int16 *)(v32 + 24 * v37 + 20);
            }
            else
            {
              v38 = 0xFFFF;
            }
            v39 = (WTF::StringImpl *)(v35 + 16);
            v28 += ~v34;
            if (v33 < v38)
              v28 = v34;
            else
              v27 = v39;
          }
          while (v28);
        }
        else
        {
          v27 = (WTF::StringImpl *)((char *)v14 + v16);
          do
          {
            v53 = (uint64_t)v27 + 16 * (v28 >> 1);
            v54 = *(_DWORD *)(v53 + 8);
            if (v54 && *(_DWORD *)(v18 + 700) <= (v54 - 1))
            {
LABEL_195:
              __break(0xC471u);
              JUMPOUT(0x1965A0294);
            }
            v27 = (WTF::StringImpl *)(v53 + 16);
            v28 += ~(v28 >> 1);
          }
          while (v28);
        }
      }
      v128 = (v27 - v14 - v16) >> 4;
      goto LABEL_69;
    }
    if (v20 == -1)
    {
      v111 = (_DWORD *)((char *)v14 + v16);
      v112 = *(_QWORD *)((char *)v14 + v16);
      *(_QWORD *)v111 = 0;
      v113 = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = 0;
      v114 = *(_DWORD **)((char *)v14 + v16);
      *(_QWORD *)v111 = v113;
      if (v114)
      {
        if (*v114 == 1)
        {
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v114, a2);
          v17 = *((_DWORD *)v13 + 2);
        }
        else
        {
          --*v114;
        }
      }
      v111[2] = v17;
      result = *(WTF::StringImpl **)v13;
      *(_QWORD *)v13 = v112;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          --*(_DWORD *)result;
      }
      *((_DWORD *)v13 + 2) = v21;
      return result;
    }
    if (v20 <= 0)
      v40 = -v20;
    else
      v40 = 1 - v20;
    v128 = v40 >> 1;
    v27 = (WTF::StringImpl *)((char *)v14 + 16 * (v40 >> 1) + v16);
    if (a3 == v13)
    {
      v52 = a3;
    }
    else
    {
      v41 = *((_DWORD *)v27 + 2);
      v42 = (a3 - v13) >> 4;
      if (v41)
      {
        v43 = v41 - 1;
        v44 = *(_DWORD *)(v18 + 700);
        if (v44 <= v43)
        {
          v121 = *((_DWORD *)v13 + 4 * (v42 >> 1) + 2);
          if (!v121 || v44 > v121 - 1)
          {
            __break(0xC471u);
            JUMPOUT(0x1965A02C8);
          }
LABEL_198:
          __break(0xC471u);
          JUMPOUT(0x1965A02B8);
        }
        a3 = v13;
        do
        {
          v45 = v42 >> 1;
          v46 = (uint64_t)a3 + 16 * (v42 >> 1);
          v47 = *(_DWORD *)(v46 + 8);
          if (v47)
          {
            v48 = v47 - 1;
            if (v44 <= v48)
              goto LABEL_198;
            v49 = *(_QWORD *)(v18 + 688);
            v50 = *(unsigned __int16 *)(v49 + 24 * v48 + 20);
          }
          else
          {
            v49 = *(_QWORD *)(v18 + 688);
            v50 = 0xFFFF;
          }
          v51 = (WTF::StringImpl *)(v46 + 16);
          v42 += ~v45;
          if (v50 < *(unsigned __int16 *)(v49 + 24 * v43 + 20))
            a3 = v51;
          else
            v42 = v45;
        }
        while (v42);
      }
      else
      {
        a3 = v13;
        do
        {
          v55 = v42 >> 1;
          v56 = (uint64_t)a3 + 16 * (v42 >> 1);
          v57 = *(_DWORD *)(v56 + 8);
          if (v57)
          {
            v58 = v57 - 1;
            if (*(_DWORD *)(v18 + 700) <= v58)
              goto LABEL_198;
            v59 = *(unsigned __int16 *)(*(_QWORD *)(v18 + 688) + 24 * v58 + 20);
          }
          else
          {
            v59 = 0xFFFF;
          }
          v60 = (WTF::StringImpl *)(v56 + 16);
          v42 += ~v55;
          if (v59 == 0xFFFF)
            v42 = v55;
          else
            a3 = v60;
        }
        while (v42);
      }
      v52 = v13;
    }
    v127 = (a3 - v52) >> 4;
LABEL_69:
    v61 = a3;
    if (v27 != v13)
    {
      v61 = v27;
      if (v13 != a3)
      {
        v123 = v25;
        v124 = v15;
        v125 = a8;
        v122 = a7;
        v62 = (WTF::StringImpl *)((char *)v27 + 16);
        v61 = v13;
        while (1)
        {
          v64 = (WTF::StringImpl **)((char *)v62 - 16);
          v63 = *((_QWORD *)v62 - 2);
          *v64 = 0;
          v65 = *((_DWORD *)v62 - 2);
          v66 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          v67 = (_DWORD *)*((_QWORD *)v62 - 2);
          *v64 = v66;
          if (v67)
          {
            if (*v67 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v67, a2);
            else
              --*v67;
          }
          *((_DWORD *)v62 - 2) = *((_DWORD *)v13 + 2);
          v68 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = v63;
          if (v68)
          {
            if (*(_DWORD *)v68 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v68, a2);
            else
              --*(_DWORD *)v68;
          }
          *((_DWORD *)v13 + 2) = v65;
          v13 = (WTF::StringImpl *)((char *)v13 + 16);
          if (v13 == a3)
            break;
          if (v62 == v61)
            v61 = v13;
          v62 = (WTF::StringImpl *)((char *)v62 + 16);
        }
        v15 = v124;
        a8 = v125;
        v25 = v123;
        if (v62 == v61)
        {
          a7 = v122;
        }
        else
        {
          v69 = v62;
          v70 = v61;
          do
          {
            while (1)
            {
              v71 = *(_DWORD **)v69;
              *(_QWORD *)v69 = 0;
              v72 = *((_DWORD *)v69 + 2);
              v73 = *(_DWORD **)v61;
              *(_QWORD *)v61 = 0;
              v74 = *(_DWORD **)v69;
              *(_QWORD *)v69 = v73;
              if (v74)
              {
                if (*v74 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v74, a2);
                else
                  --*v74;
              }
              *((_DWORD *)v69 + 2) = *((_DWORD *)v61 + 2);
              v75 = *(_DWORD **)v61;
              *(_QWORD *)v61 = v71;
              if (v75)
              {
                if (*v75 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v75, a2);
                else
                  --*v75;
              }
              *((_DWORD *)v61 + 2) = v72;
              v69 = (WTF::StringImpl *)((char *)v69 + 16);
              v61 = (WTF::StringImpl *)((char *)v61 + 16);
              if (v61 == a3)
                break;
              if (v69 == v70)
                v70 = v61;
            }
            v61 = v70;
          }
          while (v69 != v70);
          v61 = v62;
          a7 = v122;
          v25 = v123;
          v15 = v124;
          a8 = v125;
        }
      }
    }
    a5 = -v128 - v20;
    v76 = v15 - v127;
    if (v128 + v127 >= v15 - (v128 + v127) - v20)
    {
      v79 = v25;
      result = (WTF::StringImpl *)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(v61, a3, v129, v126, a5, v15 - v127, a7, a8);
      v78 = v79;
      a3 = v27;
      a4 = v126;
      v76 = v127;
      a5 = v128;
      v129 = v61;
    }
    else
    {
      v77 = v27;
      a4 = v126;
      result = (WTF::StringImpl *)std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::Style::RuleSetBuilder::addMutatingRulesToResolver(void)::$_0 &,WebCore::Style::RuleSet::ResolverMutatingRule *>(v25, v77, v61, v126, v128, v127, a7, a8);
      v78 = v61;
    }
    v15 = v76;
    v14 = v78;
    v13 = a3;
    a3 = v129;
  }
  while (v76);
  return result;
}

uint64_t WTF::Vector<WebCore::Style::RuleSet::ResolverMutatingRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::RuleSet::ResolverMutatingRule&>(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;

  result = WTF::Vector<WebCore::Style::RuleSet::ResolverMutatingRule,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = *(_QWORD *)a1 + 16 * v4;
  v7 = *(_DWORD **)result;
  *v7 = **(_DWORD **)result + 1;
  *(_QWORD *)v6 = v7;
  *(_DWORD *)(v6 + 8) = *(_DWORD *)(result + 8);
  *(_DWORD *)(a1 + 12) = v5;
  return result;
}

WTF *WTF::Vector<WebCore::Style::RuleSet::DynamicMediaQueryRules,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(WTF *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x4924925)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = result;
      v6 = *(WTF **)result;
      v7 = (WTF::StringImpl *)(*(_QWORD *)result + 56 * *((unsigned int *)result + 3));
      v8 = 56 * v4;
      v9 = WTF::fastMalloc((WTF *)(56 * v4));
      *((_DWORD *)v5 + 2) = v8 / 0x38;
      *(_QWORD *)v5 = v9;
      result = WTF::VectorMover<false,WebCore::Style::RuleSet::DynamicMediaQueryRules>::move(v6, v7, v9);
      if (v6)
      {
        if (*(WTF **)v5 == v6)
        {
          *(_QWORD *)v5 = 0;
          *((_DWORD *)v5 + 2) = 0;
        }
        return (WTF *)WTF::fastFree(v6, v10);
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>,WTF::HashTraits<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>,WTF::HashTraits<WTF::Ref<WebCore::StyleRule const,WTF::RawPtrTraits<WebCore::StyleRule const>,WTF::DefaultRefDerefTraits<WebCore::StyleRule const>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  WTF::StringImpl *v8;
  uint64_t i;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _DWORD *v22;
  _DWORD *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (_QWORD *)(v4 + 8 * i);
      v11 = (_DWORD *)*v10;
      if (*v10)
      {
        if (v11 != (_DWORD *)-1)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (_QWORD *)(v12 + 8 * v19);
          *v21 = 0;
          v22 = (_DWORD *)*v10;
          *v10 = 0;
          *v21 = v22;
          v23 = (_DWORD *)*v10;
          *v10 = 0;
          if (v23)
          {
            if (*v23 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v23, v8);
            else
              --*v23;
          }
        }
      }
      else
      {
        *v10 = 0;
      }
    }
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_0,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_1,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return WebCore::CSSVariableReferenceValue::resolveVariableReferences(*a2, (WebCore::Document **)(**(_QWORD **)a1 + 15464), a3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_0,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_1,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_0,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_1,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(_DWORD **a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  *v2 = **a1 + 1;
  *a2 = v2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_0,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_1,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_0,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_1,WebCore::Style::Builder::resolveCustomPropertyValue(WebCore::CSSCustomPropertyValue &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Ref<WebCore::CSSVariableReferenceValue,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::CSSValueID,std::__variant_detail::_Trait<WebCore::CSSVariableData,WebCore::CSSVariableReferenceValue<WebCore::CSSValueID>,WTF::RawPtrTraits<WTF::Ref><WebCore::CSSValueID>>,std::variant<WebCore::Length,WebCore::CSSCustomPropertyValue::NumericSyntaxValue,WebCore::StyleColor,WTF::RefPtr<WebCore::StyleImage,WebCore::CSSVariableReferenceValue<WTF::RefPtr>,WTF::RawPtrTraits<WTF::Ref><WTF::RefPtr>>,WTF::URL,WTF::String,WebCore::CSSCustomPropertyValue::TransformSyntaxValue>,WebCore::CSSCustomPropertyValue::SyntaxValueList> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned int,unsigned int>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashMap<std::tuple<unsigned int,unsigned int,unsigned int>,std::unique_ptr<WebCore::Style::PropertyCascade const>,WTF::DefaultHash<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::PropertyCascade const>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned int,unsigned int>>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int32x2_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int32x2_t v21;
  int8x8_t v22;
  int32x2_t v23;
  unsigned int v24;
  int i;
  uint64_t v26;
  uint64_t v27;
  WebCore::Style::PropertyCascade *v28;
  _QWORD *v29;
  WebCore::Style::PropertyCascade *v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::Style::PropertyCascade *v36;
  WTF *v37;
  void *v38;
  uint64_t v39;
  WebCore::Style::PropertyCascade *v40;
  WTF *v41;
  void *v42;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    v12 = v6;
    do
    {
      v13 = (_DWORD *)(v5 + 24 * v10);
      if (*v13 != -1)
      {
        if (*(_QWORD *)v13 || v13[2])
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = 9 * ((*v13 + ~(*v13 << 15)) ^ ((*v13 + ~(*v13 << 15)) >> 10));
          v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
          v18.i32[0] = v13[2];
          v18.i32[1] = v13[1];
          v19 = (int8x8_t)vadd_s32(v18, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v18, 0xFuLL)));
          v20 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v19, 0xAuLL), v19), (int32x2_t)0x900000009);
          v21 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v20, 6uLL), v20);
          v22 = (int8x8_t)vadd_s32(v21, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v21, 0xBuLL)));
          v23 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v22, 0x10uLL), v22), (int32x2_t)0x109132F905AC73FELL);
          v24 = v15 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * (v17 ^ HIWORD(v17))
                                         + 95187966
                                         * ((0xD7862706ELL
                                                         * (unint64_t)vadd_s32(v23, vdup_lane_s32(v23, 1)).u32[0]) >> 4))) >> 4);
          for (i = 1; ; ++i)
          {
            v26 = v14 + 24 * v24;
            if (!*(_QWORD *)v26 && !*(_DWORD *)(v26 + 8))
              break;
            v24 = (v24 + i) & v15;
          }
          v27 = v14 + 24 * v24;
          v30 = *(WebCore::Style::PropertyCascade **)(v27 + 16);
          v29 = (_QWORD *)(v27 + 16);
          v28 = v30;
          *v29 = 0;
          if (v30)
          {
            WebCore::Style::PropertyCascade::~PropertyCascade(v28, v9);
            WTF::fastFree(v31, v32);
          }
          v33 = *(_QWORD *)v13;
          *(_DWORD *)(v26 + 8) = v13[2];
          *(_QWORD *)v26 = v33;
          v34 = v5 + 24 * v10;
          v35 = *(_QWORD *)(v34 + 16);
          *(_QWORD *)(v34 + 16) = 0;
          *v29 = v35;
          v36 = *(WebCore::Style::PropertyCascade **)(v34 + 16);
          *(_QWORD *)(v34 + 16) = 0;
          if (v36)
          {
            WebCore::Style::PropertyCascade::~PropertyCascade(v36, v9);
            WTF::fastFree(v37, v38);
          }
          if (v13 == a3)
            v11 = v26;
        }
        else
        {
          v39 = v5 + 24 * v10;
          v40 = *(WebCore::Style::PropertyCascade **)(v39 + 16);
          *(_QWORD *)(v39 + 16) = 0;
          if (v40)
          {
            WebCore::Style::PropertyCascade::~PropertyCascade(v40, v9);
            WTF::fastFree(v41, v42);
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WebCore::Style::BuilderState::isColorFromPrimitiveValueDerivedFromElement(WebCore::Style::BuilderState *this, const WebCore::CSSPrimitiveValue *a2)
{
  const WebCore::CSSPrimitiveValue *v3;

  if ((WebCore::StyleColor::containsCurrentColor(this, a2) & 1) != 0)
    return 1;
  else
    return WebCore::StyleColor::containsColorSchemeDependentColor(this, v3);
}

WebCore *WebCore::Style::BuilderState::updateFont(WebCore::Style::BuilderState *this)
{
  WebCore *result;
  WebCore *v3;
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore *v9;

  result = (WebCore *)*((_QWORD *)this + 3);
  v3 = (WebCore *)*((_QWORD *)result + 331);
  if (!v3)
  {
    result = (WebCore *)WebCore::Document::ensureFontSelector(result);
    v3 = result;
  }
  if (*((_BYTE *)this + 316) || !*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 248))
  {
    WebCore::Style::BuilderState::updateFontForTextSizeAdjust(this);
    WebCore::Style::BuilderState::updateFontForGenericFamilyChange(this);
    WebCore::Style::BuilderState::updateFontForZoomChange(this);
    WebCore::Style::BuilderState::updateFontForOrientationChange(this);
    v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 32) + 32;
    ++*((_DWORD *)v3 + 2);
    v9 = v3;
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
      v7 = WebCore::threadGlobalDataSlow(v4);
    v8 = *(_QWORD *)(v7 + 80);
    if (!v8)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v7);
      v8 = *(_QWORD *)(v7 + 80);
    }
    WebCore::FontCache::updateFontCascade(v8, v5, &v9);
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*((_DWORD *)result + 2) == 1)
        result = (WebCore *)(*(uint64_t (**)(WebCore *))(*(_QWORD *)result + 8))(result);
      else
        --*((_DWORD *)result + 2);
    }
    *((_BYTE *)this + 316) = 0;
  }
  return result;
}

_QWORD *WebCore::Style::BuilderState::setFontSize(_QWORD *this, WebCore::FontCascadeDescription *a2, float a3)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  float v14;
  int v15;
  unsigned __int16 v16;
  float v17;

  v3 = 3.4028e38;
  v4 = -3.4028e38;
  if (a3 > -3.4028e38)
    v4 = a3;
  if (a3 < 3.4028e38)
    v3 = v4;
  *((float *)a2 + 44) = v3;
  v5 = this[6];
  if (v5 && (*(_WORD *)(v5 + 28) & 0x20) != 0)
  {
    if (fabsf(a3) >= 0.00000011921)
    {
LABEL_20:
      v17 = 3.4028e38;
      if (a3 < 3.4028e38)
      {
        v17 = a3;
        if (a3 <= -3.4028e38)
          v17 = -3.4028e38;
      }
      goto LABEL_23;
    }
LABEL_25:
    v17 = 0.0;
    goto LABEL_23;
  }
  v6 = this[3];
  v7 = *(_QWORD *)(this[2] + 24);
  v8 = *(float *)(v7 + 184);
  v9 = *(_QWORD *)(v6 + 528);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if ((*(_BYTE *)(v7 + 236) & 0x20) == 0)
        v8 = v8 * *(float *)(v10 + 596);
    }
  }
  if (fabsf(a3) < 0.00000011921)
    goto LABEL_25;
  v11 = *(_QWORD *)(v6 + 680);
  v12 = *(double *)(v11 + 504);
  v13 = (int)*(double *)(v11 + 496);
  v14 = v8 * a3;
  v15 = (int)v12;
  if (v14 < (float)v13)
    v14 = (float)v13;
  v16 = (float)v15 > a3;
  if (v14 >= (float)v15)
    a3 = v14;
  else
    a3 = (float)v15;
  if ((*((_WORD *)a2 + 90) & v16) != 0)
    a3 = v14;
  v17 = 1000000.0;
  if (a3 < 1000000.0)
    goto LABEL_20;
LABEL_23:
  *((float *)a2 + 39) = v17;
  return this;
}

float WebCore::Style::BuilderState::updateFontForGenericFamilyChange(void)::$_0::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  _BOOL4 v7;
  uint64_t v8;
  double v9;
  float v10;
  double v11;
  float v12;
  uint64_t v13;
  float result;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int *v22;
  unsigned int v23;
  float v24;

  v1 = *a1;
  v2 = a1[1];
  v3 = (*(unsigned __int16 *)(*a1 + 180) >> 3) & 0xF;
  if (v3)
  {
    v4 = *(_QWORD *)(v1 + 168);
    if (*(_DWORD *)(v4 + 4) == 1)
    {
      v15 = *(_QWORD *)(v4 + 8);
      v16 = *(_QWORD *)(v2 + 24);
      v6 = *(double **)(v16 + 680);
      v7 = *(unsigned __int8 *)(v16 + 3384) == 2;
      if (v15 == WebCore::WebKitFontFamilyNames::monospaceFamily)
      {
        v17 = v6 + 41;
LABEL_12:
        v18 = v3 + 93;
        v19 = (int)*v17;
        v20 = (v19 - 9);
        if (v20 > 7)
        {
          result = v6[63];
          v23 = v18 - 94;
          if (result < 1.0)
            result = 1.0;
          v24 = WebCore::Style::fontSizeFactors[v23];
          if ((float)(v24 * (float)v19) >= result)
            return v24 * (float)v19;
        }
        else
        {
          v21 = v18 - 94;
          v22 = (int *)&WebCore::Style::quirksFontSizeTable;
          if (!v7)
            v22 = (int *)&WebCore::Style::strictFontSizeTable;
          return (float)v22[8 * v20 + v21];
        }
        return result;
      }
    }
    else
    {
      v5 = *(_QWORD *)(v2 + 24);
      v6 = *(double **)(v5 + 680);
      v7 = *(unsigned __int8 *)(v5 + 3384) == 2;
    }
    v17 = v6 + 42;
    goto LABEL_12;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 680);
  v9 = *(double *)(v8 + 328);
  v10 = 1.0;
  if (v9 != 0.0)
  {
    v11 = *(double *)(v8 + 336);
    if (v11 != 0.0)
    {
      v12 = v9;
      v10 = v12 / v11;
    }
  }
  v13 = *(_QWORD *)(a1[2] + 168);
  if (*(_DWORD *)(v13 + 4) == 1 && *(_QWORD *)(v13 + 8) == WebCore::WebKitFontFamilyNames::monospaceFamily)
    return *(float *)(v1 + 176) / v10;
  else
    return v10 * *(float *)(v1 + 176);
}

float WebCore::Style::fontSizeForKeyword(int a1, int a2, double *a3)
{
  double *v3;
  int v4;
  uint64_t v5;
  float result;
  float v7;

  v3 = a3 + 13;
  if (a2)
    v3 = a3 + 12;
  v4 = (int)*v3;
  v5 = (v4 - 9);
  if (v5 <= 7)
    return (float)WebCore::Style::strictFontSizeTable[8 * v5 - 94 + a1];
  result = a3[34];
  if (result < 1.0)
    result = 1.0;
  v7 = WebCore::Style::fontSizeFactors[a1 - 94];
  if ((float)(v7 * (float)v4) >= result)
    return v7 * (float)v4;
  return result;
}

uint64_t WebCore::Style::legacyFontSizeForPixelSize(WebCore::Style *this, int a2, uint64_t a3, const WebCore::Document *a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float v16;
  float v17;

  v4 = 336;
  if (a2)
    v4 = 328;
  v5 = (int)*(double *)(*(_QWORD *)(a3 + 680) + v4);
  v6 = (v5 - 9);
  if (v6 <= 7)
  {
    v7 = (int *)((char *)&WebCore::Style::quirksFontSizeTable + 32 * v6);
    v8 = &WebCore::Style::strictFontSizeTable[8 * v6];
    if (*(_BYTE *)(a3 + 3384) != 2)
      v7 = v8;
    v9 = 2 * (_DWORD)this;
    v10 = v7[2];
    if (2 * (int)this >= v10 + v7[1])
    {
      v11 = v7[3];
      if (v9 >= v11 + v10)
      {
        v12 = v7[4];
        if (v9 >= v12 + v11)
        {
          v13 = v7[5];
          if (v9 >= v13 + v12)
          {
            v14 = v7[6];
            if (v9 >= v14 + v13)
            {
              if (v9 < v7[7] + v14)
                return 6;
              else
                return 7;
            }
            return 5;
          }
          return 4;
        }
        return 3;
      }
      return 2;
    }
    return 1;
  }
  v16 = (float)(2 * (int)this);
  v17 = (float)v5;
  if ((float)((float)v5 * 1.64) > v16)
    return 1;
  if ((float)(v17 * 1.89) > v16)
    return 2;
  if ((float)(v17 * 2.2) > v16)
    return 3;
  if ((float)(v17 * 2.7) > v16)
    return 4;
  if ((float)(v17 * 3.5) > v16)
    return 5;
  if ((float)(v17 * 5.0) <= v16)
    return 7;
  else
    return 6;
}

float WebCore::Style::adjustedFontSize(float *a1, float *a2, float a3)
{
  int v3;
  float v4;

  v3 = *(unsigned __int8 *)a1;
  if ((v3 - 3) < 2)
  {
    v4 = a2[4];
  }
  else if (v3 == 2)
  {
    v4 = a2[10];
  }
  else if (v3 == 1)
  {
    v4 = a2[2];
  }
  else
  {
    v4 = a2[9];
  }
  if (a3 == 0.0)
    return 0.0;
  else
    return (float)(a1[1] / (float)(v4 / a3)) * a3;
}

uint64_t WebCore::Style::Invalidator::Invalidator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const WebCore::StyleSheetContents *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ***v9;
  uint64_t v10;
  uint64_t v11;
  const WebCore::StyleSheetContents **v12;
  uint64_t v13;
  const WebCore::StyleSheetContents *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v28[2];
  _BYTE v29[168];

  v7 = WTF::fastMalloc((WTF *)0x328);
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 40) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_QWORD *)(v7 + 72) = v7 + 88;
  *(_QWORD *)(v7 + 80) = 1;
  *(_QWORD *)(v7 + 120) = v7 + 136;
  *(_QWORD *)(v7 + 128) = 1;
  *(_QWORD *)(v7 + 168) = v7 + 184;
  *(_QWORD *)(v7 + 176) = 1;
  *(_QWORD *)(v7 + 216) = v7 + 232;
  *(_QWORD *)(v7 + 224) = 1;
  *(_QWORD *)(v7 + 264) = v7 + 280;
  *(_QWORD *)(v7 + 272) = 1;
  *(_QWORD *)(v7 + 312) = v7 + 328;
  *(_QWORD *)(v7 + 320) = 1;
  *(_QWORD *)(v7 + 360) = v7 + 376;
  *(_QWORD *)(v7 + 368) = 1;
  *(_QWORD *)(v7 + 408) = v7 + 424;
  *(_QWORD *)(v7 + 416) = 1;
  *(_QWORD *)(v7 + 645) = 0;
  *(_OWORD *)(v7 + 616) = 0u;
  *(_OWORD *)(v7 + 632) = 0u;
  *(_OWORD *)(v7 + 584) = 0u;
  *(_OWORD *)(v7 + 600) = 0u;
  *(_OWORD *)(v7 + 552) = 0u;
  *(_OWORD *)(v7 + 568) = 0u;
  *(_OWORD *)(v7 + 520) = 0u;
  *(_OWORD *)(v7 + 536) = 0u;
  *(_OWORD *)(v7 + 488) = 0u;
  *(_OWORD *)(v7 + 504) = 0u;
  *(_OWORD *)(v7 + 456) = 0u;
  *(_OWORD *)(v7 + 472) = 0u;
  *(_QWORD *)(v7 + 672) = 0;
  *(_DWORD *)(v7 + 680) = 0;
  *(_OWORD *)(v7 + 656) = 0u;
  *(_OWORD *)(v7 + 688) = 0u;
  *(_OWORD *)(v7 + 704) = 0u;
  *(_OWORD *)(v7 + 720) = 0u;
  *(_OWORD *)(v7 + 736) = 0u;
  *(_OWORD *)(v7 + 752) = 0u;
  *(_OWORD *)(v7 + 768) = 0u;
  *(_OWORD *)(v7 + 784) = 0u;
  *(_WORD *)(v7 + 800) = 0;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x100000001;
  *(_DWORD *)v7 = 2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 36) = 0;
  v8 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t ****)a2;
    v10 = 8 * v8;
    while (!WebCore::Style::shouldDirtyAllStyle(*v9, v6))
    {
      ++v9;
      v10 -= 8;
      if (!v10)
        goto LABEL_5;
    }
    *(_BYTE *)(a1 + 38) = 1;
  }
  else
  {
LABEL_5:
    *(_BYTE *)(a1 + 38) = 0;
    WebCore::Style::RuleSetBuilder::RuleSetBuilder((uint64_t)v29, (_DWORD *)v7, a3, 0, 1, 0);
    v11 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v11)
    {
      v12 = *(const WebCore::StyleSheetContents ***)a2;
      v13 = 8 * v11;
      do
      {
        v14 = *v12++;
        v28[0] = 0;
        v28[1] = 0;
        WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)v29, v14, v28);
        WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v15);
        v13 -= 8;
      }
      while (v13);
    }
    v16 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v16)
    {
      LODWORD(v17) = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = *(uint64_t **)(a1 + 8);
      v24 = 8 * v16;
      do
      {
        v25 = *v23;
        if (*(_DWORD *)(*v23 + 228))
          v22 = 1;
        if (*(_DWORD *)(v25 + 180))
          v21 = 1;
        if (*(_BYTE *)(v25 + 800))
          v20 = 1;
        v26 = *(_QWORD *)(v25 + 56);
        if (v26 && *(_DWORD *)(v26 - 12))
          v19 = 1;
        if (*(_DWORD *)(v25 + 132))
          v18 = 1;
        if (*(_DWORD *)(v25 + 276))
          v17 = 1;
        else
          v17 = v17;
        ++v23;
        v24 -= 8;
      }
      while (v24);
    }
    else
    {
      v22 = 0;
      v21 = 0;
      v20 = 0;
      v19 = 0;
      v18 = 0;
      v17 = 0;
    }
    *(_DWORD *)(a1 + 32) = (v20 << 16) | (v19 << 24) | (v21 << 8) | v22;
    *(_WORD *)(a1 + 36) = (((unint64_t)v18 << 32) | (v17 << 40)) >> 32;
    WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)v29);
  }
  return a1;
}

uint64_t WebCore::Style::Invalidator::Invalidator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(unsigned int *)(a2 + 12);
  result = a1 + 24;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v4;
  if (v4 >= 2)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 8) = result;
  }
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD ***)a2;
    v8 = 8 * v6;
    v9 = (_QWORD *)result;
    do
    {
      v10 = *v7;
      if (*v7)
        ++*v10;
      *v9++ = v10;
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  v11 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 8 * v11;
    do
    {
      v19 = *(_QWORD *)result;
      if (*(_DWORD *)(*(_QWORD *)result + 228))
        v17 = 1;
      if (*(_DWORD *)(v19 + 180))
        v16 = 1;
      if (*(_BYTE *)(v19 + 800))
        v15 = 1;
      v20 = *(_QWORD *)(v19 + 56);
      if (v20 && *(_DWORD *)(v20 - 12))
        v14 = 1;
      if (*(_DWORD *)(v19 + 132))
        v13 = 1;
      if (*(_DWORD *)(v19 + 276))
        v12 = 1;
      else
        v12 = v12;
      result += 8;
      v18 -= 8;
    }
    while (v18);
  }
  else
  {
    v17 = 0;
    v16 = 0;
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
  }
  *(_DWORD *)(a1 + 32) = (v15 << 16) | (v14 << 24) | (v16 << 8) | v17;
  *(_WORD *)(a1 + 36) = (((unint64_t)v13 << 32) | (v12 << 40)) >> 32;
  *(_BYTE *)(a1 + 38) = 0;
  return a1;
}

WTF::MonotonicTime *WebCore::Style::invalidateAssignedElements(WTF::MonotonicTime *this, WebCore::HTMLSlotElement *a2)
{
  uint64_t v2;
  BOOL v3;
  WebCore::HTMLSlotElement *v4;
  int v5;
  WTF::MonotonicTime *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  BOOL v12;
  __int16 v13;
  __int16 v14;

  v2 = **((_QWORD **)this + 5);
  if (v2)
    v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3)
    return this;
  v4 = this;
  v5 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v5 + 2;
  this = *(WTF::MonotonicTime **)(v2 + 224);
  if (!this)
  {
    v6 = 0;
    if (v5)
      goto LABEL_7;
LABEL_26:
    v13 = *(_WORD *)(v2 + 30);
    if ((v13 & 0x400) == 0)
    {
      v14 = *(_WORD *)(v2 + 28);
      if ((v14 & 0xF000) == 0x9000)
      {
        this = (WTF::MonotonicTime *)WebCore::Document::removedLastRef((WebCore::Document *)v2);
      }
      else
      {
        if ((v14 & 0x20) != 0)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 160) + 16))(*(_QWORD *)(v2 + 160));
          v13 = *(_WORD *)(v2 + 30);
        }
        *(_WORD *)(v2 + 30) = v13 | 0x400;
        this = (WTF::MonotonicTime *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
      }
    }
    goto LABEL_8;
  }
  this = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *, WebCore::HTMLSlotElement *, uint64_t))(*(_QWORD *)this + 24))(this, v4, v2);
  v6 = this;
  v5 = *(_DWORD *)(v2 + 24) - 2;
  if (*(_DWORD *)(v2 + 24) == 2)
    goto LABEL_26;
LABEL_7:
  *(_DWORD *)(v2 + 24) = v5;
LABEL_8:
  if (v6)
  {
    v7 = *((unsigned int *)v6 + 3);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)v6;
      v9 = 8 * v7;
      do
      {
        if (*(_QWORD *)v8)
        {
          this = *(WTF::MonotonicTime **)(*(_QWORD *)v8 + 8);
          if (this)
          {
            v10 = *((_WORD *)this + 14);
            if ((v10 & 8) != 0)
            {
              if ((v10 & 0x10) != 0
                && *(_QWORD *)(*((_QWORD *)this + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24)
                && ((v11 = **((_QWORD **)this + 5)) != 0 ? (v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0) : (v12 = 1), !v12))
              {
                this = (WTF::MonotonicTime *)WebCore::Style::invalidateAssignedElements(this, v4);
              }
              else
              {
                this = WebCore::Element::invalidateStyleInternal(this);
              }
            }
          }
        }
        v8 += 8;
        v9 -= 8;
      }
      while (v9);
    }
  }
  return this;
}

uint64_t WebCore::Style::Invalidator::invalidateStyleForTree(WebCore::Style::Invalidator *this, WebCore::Element *a2, WebCore::Style::SelectorMatchingState *a3)
{
  int v4;
  int v5;
  uint64_t result;

  v4 = (int)a2;
  v5 = (int)this;
  result = WebCore::Style::Invalidator::invalidateIfNeeded(this, a2, a3);
  if ((_DWORD)result)
    return WebCore::Style::Invalidator::invalidateStyleForDescendants(v5, v4, a3);
  return result;
}

void WebCore::Style::Invalidator::invalidateStyle(WebCore::Style::Invalidator *this, WebCore::Style::Scope *a2)
{
  WTF *v2;
  WTF::StringImpl **v3;
  WebCore::Style::Invalidator *v4;
  WTF *v5;
  WebCore::Element *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[520];

  v2 = (WTF *)MEMORY[0x1E0C80A78](this, a2);
  v9[519] = *MEMORY[0x1E0C80C00];
  v4 = v3[3];
  if (*((_BYTE *)v2 + 38))
  {
    if (v4)
    {
      v8 = *((_QWORD *)v4 + 10);
      if (v8)
      {
        while ((*(_WORD *)(v8 + 28) & 8) == 0)
        {
          v8 = *(_QWORD *)(v8 + 56);
          if (!v8)
            goto LABEL_10;
        }
LABEL_15:
        WebCore::Element::invalidateStyleForSubtreeInternal((WTF::MonotonicTime *)v8);
        while (1)
        {
          v8 = *(_QWORD *)(v8 + 56);
          if (!v8)
            break;
          if ((*(_WORD *)(v8 + 28) & 8) != 0)
            goto LABEL_15;
        }
      }
LABEL_10:
      WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(v4, (WebCore::ShadowRoot *)v3);
    }
    else
    {
      WebCore::Document::scheduleFullStyleRebuild(v3[2]);
    }
  }
  else
  {
    v5 = v2;
    if (v4)
    {
      WebCore::Style::Invalidator::invalidateStyle(v2, v3[3]);
    }
    else
    {
      v6 = (WebCore::Element *)*((_QWORD *)v3[2] + 159);
      if (v6)
      {
        bzero(v9, 0x1038uLL);
        if (WebCore::Style::Invalidator::invalidateIfNeeded((uint64_t)v5, (uint64_t)v6))
          WebCore::Style::Invalidator::invalidateStyleForDescendants(v5, v6, (WebCore::SelectorFilter *)v9);
        WebCore::Style::SelectorMatchingState::~SelectorMatchingState((WebCore::Style::SelectorMatchingState *)v9, v7);
      }
    }
  }
}

void WebCore::Style::Invalidator::invalidateStyle(WebCore::Style::Invalidator *this, WebCore::ShadowRoot *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::Style::Invalidator *v5;
  uint64_t v6;
  WTF::MonotonicTime *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[520];

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v5 = (WebCore::Style::Invalidator *)v2;
  v10[519] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(v2 + 33))
  {
    v6 = *(_QWORD *)(v3 + 200);
    if (v6)
    {
      v7 = *(WTF::MonotonicTime **)(v6 + 8);
      if (v7)
        WebCore::Element::invalidateStyleInternal(v7);
    }
  }
  v8 = *(_QWORD *)(v4 + 80);
  if (v8)
  {
    while ((*(_WORD *)(v8 + 28) & 8) == 0)
    {
      v8 = *(_QWORD *)(v8 + 56);
      if (!v8)
        return;
    }
LABEL_9:
    bzero(v10, 0x1038uLL);
    WebCore::Style::Invalidator::invalidateStyleForTree(v5, (WebCore::Element *)v8, (WebCore::Style::SelectorMatchingState *)v10);
    WebCore::Style::SelectorMatchingState::~SelectorMatchingState((WebCore::Style::SelectorMatchingState *)v10, v9);
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 56);
      if (!v8)
        break;
      if ((*(_WORD *)(v8 + 28) & 8) != 0)
        goto LABEL_9;
    }
  }
}

void WebCore::Style::Invalidator::invalidateStyleWithMatchElement(uint64_t a1, uint64_t a2)
{
  WebCore::Style::Invalidator *v2;
  WebCore::ShadowRoot *v3;
  WebCore::ShadowRoot *v4;
  WebCore::Style::Invalidator *v5;
  int v6;
  WebCore::Element *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::ShadowRoot *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  WebCore::Element *v23;
  WebCore::Element *v24;
  WebCore::Element *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  WTF *v37;
  int v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  WebCore::Element *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WebCore::ShadowRoot *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  void *v54;
  WebCore::Element *v55;
  uint64_t v56;
  uint64_t v57;
  WebCore::Element *v58;
  WTF *v59;
  uint64_t v60;
  _QWORD v61[16];
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;

  v2 = (WebCore::Style::Invalidator *)MEMORY[0x1E0C80A78](a1, a2);
  v64 = *MEMORY[0x1E0C80C00];
  v4 = v3;
  v5 = v2;
  switch(v6)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v14 = *((_QWORD *)v3 + 10);
      if (!v14)
        return;
      while ((*(_WORD *)(v14 + 28) & 8) == 0)
      {
        v14 = *(_QWORD *)(v14 + 56);
        if (!v14)
          return;
      }
LABEL_45:
      WebCore::Style::Invalidator::invalidateIfNeeded(v5, (WebCore::Element *)v14, 0);
      while (1)
      {
        v14 = *(_QWORD *)(v14 + 56);
        if (!v14)
          return;
        if ((*(_WORD *)(v14 + 28) & 8) != 0)
          goto LABEL_45;
      }
    case 2:
      bzero(&v62, 0x1038uLL);
      v9 = (int)v5;
      LODWORD(v10) = (_DWORD)v4;
      goto LABEL_22;
    case 3:
      while (1)
      {
        v4 = (WebCore::ShadowRoot *)*((_QWORD *)v4 + 7);
        if (!v4)
          break;
        if ((*((_WORD *)v4 + 14) & 8) != 0)
        {
LABEL_4:
          v7 = v4;
LABEL_5:
          WebCore::Style::Invalidator::invalidateIfNeeded(v2, v7, 0);
          return;
        }
      }
      return;
    case 4:
      while (1)
      {
        v4 = (WebCore::ShadowRoot *)*((_QWORD *)v4 + 7);
        if (!v4)
          return;
        if ((*((_WORD *)v4 + 14) & 8) != 0)
        {
LABEL_8:
          WebCore::Style::Invalidator::invalidateIfNeeded(v5, v4, 0);
          while (1)
          {
            v4 = (WebCore::ShadowRoot *)*((_QWORD *)v4 + 7);
            if (!v4)
              return;
            if ((*((_WORD *)v4 + 14) & 8) != 0)
              goto LABEL_8;
          }
        }
      }
    case 5:
      v31 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 80);
      if (!v31)
        return;
      while ((*(_WORD *)(v31 + 28) & 8) == 0)
      {
        v31 = *(_QWORD *)(v31 + 56);
        if (!v31)
          return;
      }
LABEL_132:
      WebCore::Style::Invalidator::invalidateIfNeeded(v5, (WebCore::Element *)v31, 0);
      while (1)
      {
        v31 = *(_QWORD *)(v31 + 56);
        if (!v31)
          return;
        if ((*(_WORD *)(v31 + 28) & 8) != 0)
          goto LABEL_132;
      }
    case 6:
      while (1)
      {
        v4 = (WebCore::ShadowRoot *)*((_QWORD *)v4 + 7);
        if (!v4)
          return;
        if ((*((_WORD *)v4 + 14) & 8) != 0)
        {
LABEL_14:
          v8 = *((_QWORD *)v4 + 10);
          if (!v8)
            goto LABEL_15;
          while ((*(_WORD *)(v8 + 28) & 8) == 0)
          {
            v8 = *(_QWORD *)(v8 + 56);
            if (!v8)
              goto LABEL_15;
          }
LABEL_41:
          WebCore::Style::Invalidator::invalidateIfNeeded(v5, (WebCore::Element *)v8, 0);
          while (1)
          {
            v8 = *(_QWORD *)(v8 + 56);
            if (!v8)
              break;
            if ((*(_WORD *)(v8 + 28) & 8) != 0)
              goto LABEL_41;
          }
LABEL_15:
          while (1)
          {
            v4 = (WebCore::ShadowRoot *)*((_QWORD *)v4 + 7);
            if (!v4)
              return;
            if ((*((_WORD *)v4 + 14) & 8) != 0)
              goto LABEL_14;
          }
        }
      }
    case 7:
      bzero(&v62, 0x1038uLL);
      v12 = v4;
      while (1)
      {
        v12 = (WebCore::ShadowRoot *)*((_QWORD *)v12 + 7);
        if (!v12)
          goto LABEL_23;
        if ((*((_WORD *)v12 + 14) & 8) != 0)
        {
LABEL_159:
          v56 = *((_QWORD *)v4 + 4);
          if (v56)
          {
            if ((*(_WORD *)(v56 + 28) & 8) != 0)
              v55 = (WebCore::Element *)*((_QWORD *)v4 + 4);
            else
              v55 = 0;
          }
          else
          {
            v55 = 0;
          }
          WebCore::SelectorFilter::popParentsUntil((WebCore::SelectorFilter *)&v62, v55);
          WebCore::Style::Invalidator::invalidateStyleForDescendants((int)v5, (int)v12, (WebCore::SelectorFilter *)&v62);
          while (1)
          {
            v12 = (WebCore::ShadowRoot *)*((_QWORD *)v12 + 7);
            if (!v12)
              goto LABEL_23;
            if ((*((_WORD *)v12 + 14) & 8) != 0)
              goto LABEL_159;
          }
        }
      }
    case 8:
      v48 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 80);
      if (!v48)
        return;
      while ((*(_WORD *)(v48 + 28) & 8) == 0)
      {
        v48 = *(_QWORD *)(v48 + 56);
        if (!v48)
          return;
      }
LABEL_161:
      v57 = *(_QWORD *)(v48 + 80);
      if (!v57)
        goto LABEL_162;
      while ((*(_WORD *)(v57 + 28) & 8) == 0)
      {
        v57 = *(_QWORD *)(v57 + 56);
        if (!v57)
          goto LABEL_162;
      }
LABEL_168:
      WebCore::Style::Invalidator::invalidateIfNeeded(v5, (WebCore::Element *)v57, 0);
      while (1)
      {
        v57 = *(_QWORD *)(v57 + 56);
        if (!v57)
          break;
        if ((*(_WORD *)(v57 + 28) & 8) != 0)
          goto LABEL_168;
      }
LABEL_162:
      while (1)
      {
        v48 = *(_QWORD *)(v48 + 56);
        if (!v48)
          return;
        if ((*(_WORD *)(v48 + 28) & 8) != 0)
          goto LABEL_161;
      }
    case 9:
      bzero(&v62, 0x1038uLL);
      v46 = *((_QWORD *)v4 + 4);
      v47 = *(_QWORD *)(v46 + 80);
      if (!v47)
        goto LABEL_23;
      while ((*(_WORD *)(v47 + 28) & 8) == 0)
      {
        v47 = *(_QWORD *)(v47 + 56);
        if (!v47)
          goto LABEL_23;
      }
LABEL_179:
      if (v46)
      {
        if ((*(_WORD *)(v46 + 28) & 8) != 0)
          v58 = (WebCore::Element *)v46;
        else
          v58 = 0;
      }
      else
      {
        v58 = 0;
      }
      WebCore::SelectorFilter::popParentsUntil((WebCore::SelectorFilter *)&v62, v58);
      WebCore::Style::Invalidator::invalidateStyleForDescendants((int)v5, v47, (WebCore::SelectorFilter *)&v62);
      while (1)
      {
        v47 = *(_QWORD *)(v47 + 56);
        if (!v47)
          goto LABEL_23;
        if ((*(_WORD *)(v47 + 28) & 8) != 0)
        {
          v46 = *((_QWORD *)v4 + 4);
          goto LABEL_179;
        }
      }
    case 10:
      v7 = (WebCore::Element *)*((_QWORD *)v3 + 4);
      if (v7 && (*((_WORD *)v7 + 14) & 8) != 0)
        goto LABEL_5;
      return;
    case 11:
      v59 = (WTF *)v61;
      v60 = 16;
      v35 = *((_QWORD *)v3 + 4);
      if (v35 && (*(_WORD *)(v35 + 28) & 8) != 0)
      {
        do
        {
          v62 = v35;
          v39 = HIDWORD(v60);
          if (HIDWORD(v60) == (_DWORD)v60)
          {
            WTF::Vector<WebCore::Element *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element *&>((uint64_t)&v59, (unint64_t)&v62);
          }
          else
          {
            *((_QWORD *)v59 + HIDWORD(v60)) = v35;
            HIDWORD(v60) = v39 + 1;
          }
          v35 = *(_QWORD *)(v62 + 32);
        }
        while (v35 && (*(_WORD *)(v35 + 28) & 8) != 0);
        v40 = HIDWORD(v60);
        bzero(&v62, 0x1038uLL);
        if ((_DWORD)v40)
        {
          if (v40 >= 0x6666667)
          {
            __break(0xC471u);
            JUMPOUT(0x1965A1E74);
          }
          v41 = (WTF *)(40 * v40);
          v42 = WTF::fastMalloc(v41);
          v63 = (v41 & 0xFFFFFFF8) / 0x28;
          v62 = v42;
          if (HIDWORD(v60))
          {
            v43 = 8 * HIDWORD(v60);
            v44 = (char *)v59 - 8;
            do
            {
              v45 = *(WebCore::Element **)&v44[v43];
              WebCore::Style::Invalidator::invalidateIfNeeded(v5, v45, (WebCore::Style::SelectorMatchingState *)&v62);
              WebCore::SelectorFilter::pushParent((WebCore::SelectorFilter *)&v62, v45);
              v43 -= 8;
            }
            while (v43);
          }
        }
      }
      else
      {
        bzero(&v62, 0x1038uLL);
      }
      goto LABEL_101;
    case 12:
      v32 = (uint64_t)v3;
      while (1)
      {
        v32 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFLL;
        if (!v32)
          return;
        if ((*(_WORD *)(v32 + 28) & 8) != 0)
        {
          bzero(&v62, 0x1038uLL);
          v33 = *((_QWORD *)v4 + 4);
          if (v33 && (*(_WORD *)(v33 + 28) & 8) != 0)
          {
            *(_DWORD *)(v33 + 24) += 2;
            WebCore::SelectorFilter::pushParentInitializingIfNeeded((WebCore::SelectorFilter *)&v62, (WebCore::Element *)v33);
            if (*(_DWORD *)(v33 + 24) == 2)
            {
              if ((*(_WORD *)(v33 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v33);
            }
            else
            {
              *(_DWORD *)(v33 + 24) -= 2;
            }
          }
LABEL_94:
          WebCore::Style::Invalidator::invalidateIfNeeded(v5, (WebCore::Element *)v32, (WebCore::Style::SelectorMatchingState *)&v62);
          while (1)
          {
            v34 = *(_QWORD *)(v32 + 48);
            v32 = v34 & 0xFFFFFFFFFFFFLL;
            if ((v34 & 0xFFFFFFFFFFFFLL) == 0)
              goto LABEL_23;
            if ((*(_WORD *)((v34 & 0xFFFFFFFFFFFFLL) + 0x1C) & 8) != 0)
              goto LABEL_94;
          }
        }
      }
    case 13:
      v59 = (WTF *)v61;
      v61[0] = v3;
      v60 = 0x100000010;
      v16 = *((_QWORD *)v3 + 4);
      if (!v16 || (*(_WORD *)(v16 + 28) & 8) == 0)
      {
        bzero(&v62, 0x1038uLL);
        v17 = 1;
LABEL_59:
        v18 = (WTF *)(40 * v17);
        v19 = WTF::fastMalloc(v18);
        v63 = (v18 & 0xFFFFFFF8) / 0x28;
        v62 = v19;
        if (!HIDWORD(v60))
          goto LABEL_101;
        v21 = v59;
        v22 = (WTF *)((char *)v59 + 8 * HIDWORD(v60));
        while (1)
        {
          v24 = (WebCore::Element *)*((_QWORD *)v22 - 1);
          v22 = (WTF *)((char *)v22 - 8);
          v23 = v24;
          v25 = v24;
          do
          {
            v26 = *((_QWORD *)v25 + 6);
            v25 = (WebCore::Element *)(v26 & 0xFFFFFFFFFFFFLL);
            if ((v26 & 0xFFFFFFFFFFFFLL) == 0)
              goto LABEL_68;
          }
          while ((*(_WORD *)((v26 & 0xFFFFFFFFFFFFLL) + 0x1C) & 8) == 0);
LABEL_64:
          WebCore::Style::Invalidator::invalidateIfNeeded(v5, v25, (WebCore::Style::SelectorMatchingState *)&v62);
          while (1)
          {
            v27 = *((_QWORD *)v25 + 6);
            v25 = (WebCore::Element *)(v27 & 0xFFFFFFFFFFFFLL);
            if ((v27 & 0xFFFFFFFFFFFFLL) == 0)
              break;
            if ((*(_WORD *)((v27 & 0xFFFFFFFFFFFFLL) + 0x1C) & 8) != 0)
              goto LABEL_64;
          }
LABEL_68:
          WebCore::SelectorFilter::pushParent((WebCore::SelectorFilter *)&v62, v23);
          if (v22 == v21)
            goto LABEL_101;
        }
      }
      do
      {
        v62 = v16;
        v28 = HIDWORD(v60);
        if (HIDWORD(v60) == (_DWORD)v60)
        {
          WTF::Vector<WebCore::Element *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element *&>((uint64_t)&v59, (unint64_t)&v62);
        }
        else
        {
          *((_QWORD *)v59 + HIDWORD(v60)) = v16;
          HIDWORD(v60) = v28 + 1;
        }
        v16 = *(_QWORD *)(v62 + 32);
      }
      while (v16 && (*(_WORD *)(v16 + 28) & 8) != 0);
      v17 = HIDWORD(v60);
      bzero(&v62, 0x1038uLL);
      if ((_DWORD)v17)
      {
        if (v17 >= 0x6666667)
        {
          __break(0xC471u);
          JUMPOUT(0x1965A1ACCLL);
        }
        goto LABEL_59;
      }
LABEL_101:
      WebCore::Style::SelectorMatchingState::~SelectorMatchingState((WebCore::Style::SelectorMatchingState *)&v62, v20);
      v37 = v59;
      if (v61 != (_QWORD *)v59 && v59 != 0)
      {
        v59 = 0;
        LODWORD(v60) = 0;
        WTF::fastFree(v37, v36);
      }
      return;
    case 14:
      bzero(&v62, 0x1038uLL);
      v11 = *((_QWORD *)v4 + 4);
      if ((*(_WORD *)(v11 + 28) & 8) != 0)
      {
        WebCore::SelectorFilter::pushParentInitializingIfNeeded((WebCore::SelectorFilter *)&v62, (WebCore::Element *)v11);
        v11 = *((_QWORD *)v4 + 4);
      }
      v15 = *(_QWORD *)(v11 + 80);
      if (!v15)
        goto LABEL_23;
      while ((*(_WORD *)(v15 + 28) & 8) == 0)
      {
        v15 = *(_QWORD *)(v15 + 56);
        if (!v15)
          goto LABEL_23;
      }
LABEL_128:
      WebCore::Style::Invalidator::invalidateIfNeeded(v5, (WebCore::Element *)v15, (WebCore::Style::SelectorMatchingState *)&v62);
      while (1)
      {
        v15 = *(_QWORD *)(v15 + 56);
        if (!v15)
          break;
        if ((*(_WORD *)(v15 + 28) & 8) != 0)
          goto LABEL_128;
      }
LABEL_23:
      WebCore::Style::SelectorMatchingState::~SelectorMatchingState((WebCore::Style::SelectorMatchingState *)&v62, (void *)v11);
      return;
    case 15:
    case 16:
      bzero(&v62, 0x1038uLL);
      v10 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 8) + 1272);
      v9 = (int)v5;
LABEL_22:
      WebCore::Style::Invalidator::invalidateStyleForDescendants(v9, v10, (WebCore::SelectorFilter *)&v62);
      goto LABEL_23;
    case 17:
      if ((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) == 0)
        return;
      v13 = *(_QWORD *)((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (!v13)
        return;
      if (*((_BYTE *)v2 + 35))
      {
        v49 = *(WebCore::ShadowRoot **)((*((_QWORD *)v3 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
        WebCore::Style::Invalidator::invalidateUserAgentParts((uint64_t)v2, v49);
        v13 = (uint64_t)v49;
      }
      if (!*((_BYTE *)v5 + 34))
        goto LABEL_34;
      v50 = *(_QWORD *)(v13 + 80);
      if (!v50)
        goto LABEL_34;
      while (1)
      {
        v51 = v13;
        if ((*(_WORD *)(v50 + 28) & 8) != 0)
          break;
        v50 = *(_QWORD *)(v50 + 56);
        if (!v50)
          goto LABEL_34;
      }
LABEL_148:
      bzero(&v62, 0x1038uLL);
      WebCore::Style::Invalidator::invalidateStyleForTree(v5, (WebCore::Element *)v50, (WebCore::Style::SelectorMatchingState *)&v62);
      WebCore::Style::SelectorMatchingState::~SelectorMatchingState((WebCore::Style::SelectorMatchingState *)&v62, v54);
      while (1)
      {
        v50 = *(_QWORD *)(v50 + 56);
        v13 = v51;
        if (!v50)
          break;
        if ((*(_WORD *)(v50 + 28) & 8) != 0)
          goto LABEL_148;
      }
LABEL_34:
      if (*((_BYTE *)v5 + 36))
      {
        v52 = v13;
        v53 = (*(uint64_t (**)(WebCore::ShadowRoot *))(*(_QWORD *)v4 + 824))(v4);
        v13 = v52;
        if (v53)
        {
          WebCore::Element::invalidateStyleForSubtreeInternal(v4);
          v13 = v52;
        }
      }
      if (*((_BYTE *)v5 + 37))
        WebCore::Style::Invalidator::invalidateShadowParts(v13, v3);
      return;
    case 18:
      v29 = WebCore::Node::shadowHost(v3);
      if (!v29)
        return;
      v30 = *(_QWORD *)(v29 + 80);
      if (!v30)
        return;
      while ((*(_WORD *)(v30 + 28) & 8) == 0)
      {
        v30 = *(_QWORD *)(v30 + 56);
        if (!v30)
          return;
      }
LABEL_136:
      WebCore::Style::Invalidator::invalidateIfNeeded(v5, (WebCore::Element *)v30, 0);
      while (1)
      {
        v30 = *(_QWORD *)(v30 + 56);
        if (!v30)
          return;
        if ((*(_WORD *)(v30 + 28) & 8) != 0)
          goto LABEL_136;
      }
    default:
      return;
  }
}

uint64_t WebCore::Style::Invalidator::invalidateShadowParts(uint64_t this, WebCore::ShadowRoot *a2)
{
  WebCore::Element *v2;
  BOOL v3;
  uint64_t v4;
  BOOL v5;
  WTF *v6;
  int v7;
  uint64_t v8;
  WebCore::Style::Invalidator *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  WebCore::Element *v13;
  uint64_t v14;

  v2 = *(WebCore::Element **)(this + 80);
  if (*(_BYTE *)(this + 193))
    v3 = v2 == 0;
  else
    v3 = 1;
  if (!v3)
  {
    while ((*((_WORD *)v2 + 14) & 8) == 0)
    {
      v2 = (WebCore::Element *)*((_QWORD *)v2 + 7);
      if (!v2)
        return this;
    }
    do
    {
LABEL_26:
      v8 = *((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL;
      if (v8)
      {
        v13 = v2;
        v14 = this;
        v6 = *(WTF **)((*((_QWORD *)v2 + 9) & 0xFFFFFFFFFFFFLL) + 0xD0);
        if (!v6)
          goto LABEL_21;
        v7 = *((_DWORD *)v6 + 2);
        *((_DWORD *)v6 + 2) = v7 + 1;
        if (v7)
          *((_DWORD *)v6 + 2) = v7;
        else
          WebCore::SpaceSplitStringData::destroy(v6, a2);
        WebCore::Element::invalidateStyleInternal(v13);
        v2 = v13;
        v8 = *((_QWORD *)v13 + 9) & 0xFFFFFFFFFFFFLL;
        this = v14;
        if (v8)
        {
LABEL_21:
          v9 = *(WebCore::Style::Invalidator **)(v8 + 88);
          v2 = v13;
          this = v14;
          if (v9)
          {
            v10 = WebCore::ShadowRoot::partMappings(*(WebCore::ShadowRoot **)(v8 + 88), a2);
            v2 = v13;
            this = v14;
            v11 = *v10;
            if (v11)
            {
              if (*(_DWORD *)(v11 - 12))
              {
                WebCore::Style::Invalidator::invalidateShadowParts(v9, a2);
                v2 = v13;
                this = v14;
              }
            }
          }
        }
      }
      v4 = *((_QWORD *)v2 + 10);
      if (!v4)
      {
        if (v2 == (WebCore::Element *)this)
          return this;
        while (1)
        {
          v4 = *((_QWORD *)v2 + 7);
          if (v4)
            break;
          v2 = (WebCore::Element *)*((_QWORD *)v2 + 4);
          if (v2)
            v5 = v2 == (WebCore::Element *)this;
          else
            v5 = 1;
          if (v5)
            return this;
        }
      }
      v2 = (WebCore::Element *)v4;
    }
    while ((*(_WORD *)(v4 + 28) & 8) != 0);
    while (v4 != this)
    {
      while (1)
      {
        v2 = *(WebCore::Element **)(v4 + 56);
        if (v2)
          break;
        v4 = *(_QWORD *)(v4 + 32);
        if (v4)
          v12 = v4 == this;
        else
          v12 = 1;
        if (v12)
          return this;
      }
      v4 = *(_QWORD *)(v4 + 56);
      if ((*((_WORD *)v2 + 14) & 8) != 0)
        goto LABEL_26;
    }
  }
  return this;
}

uint64_t WebCore::Style::Invalidator::invalidateUserAgentParts(uint64_t this, WebCore::ShadowRoot *a2)
{
  WebCore::ShadowRoot *v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int i;
  uint64_t v17;
  uint64_t v18;
  WebCore::ShadowRoot *v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  WebCore::ShadowRoot *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::ShadowRoot *v27;
  uint64_t v28;

  v2 = (WebCore::ShadowRoot *)*((_QWORD *)a2 + 10);
  if (*((_BYTE *)a2 + 193))
    v3 = 1;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    while ((*((_WORD *)v2 + 14) & 8) == 0)
    {
      v2 = (WebCore::ShadowRoot *)*((_QWORD *)v2 + 7);
      if (!v2)
        return this;
    }
    v4 = MEMORY[0x1E0CBF2F8];
    do
    {
LABEL_11:
      v5 = *((_QWORD *)v2 + 13);
      if (v5
        && ((v6 = *(unsigned int *)(v5 + 4), (v6 & 1) != 0)
          ? (v7 = *(_QWORD *)(v5 + 40), v8 = *(unsigned int *)(v5 + 52))
          : (v7 = v5 + 32, v8 = v6 >> 5),
            v8))
      {
        v9 = v7 + 8;
        while (1)
        {
          v10 = *(_QWORD *)(v9 - 8);
          if (v10 == WebCore::HTMLNames::useragentpartAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
          {
            break;
          }
          v9 += 16;
          if (!--v8)
            goto LABEL_19;
        }
      }
      else
      {
LABEL_19:
        v9 = v4;
      }
      if (*(_QWORD *)v9)
      {
        v11 = *(unsigned int *)(this + 20);
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD *)(this + 8);
          v13 = v12 + 8 * v11;
          do
          {
            v14 = *(_QWORD *)(*(_QWORD *)v12 + 56);
            if (v14)
            {
              v15 = 0;
              for (i = *(_DWORD *)(*(_QWORD *)v9 + 16) >> 8; ; i = v15 + v17)
              {
                v17 = i & *(_DWORD *)(v14 - 8);
                v18 = *(_QWORD *)(v14 + 16 * v17);
                if (!v18)
                  break;
                if (v18 != -1 && v18 == *(_QWORD *)v9)
                {
                  if (*(_QWORD *)(v14 + 16 * v17 + 8))
                  {
                    v27 = a2;
                    v28 = this;
                    v23 = v12;
                    v24 = v2;
                    v25 = v13;
                    v26 = v9;
                    WebCore::Element::invalidateStyleInternal(v2);
                    v13 = v25;
                    v9 = v26;
                    v12 = v23;
                    v2 = v24;
                    v4 = MEMORY[0x1E0CBF2F8];
                    a2 = v27;
                    this = v28;
                  }
                  break;
                }
                ++v15;
              }
            }
            v12 += 8;
          }
          while (v12 != v13);
        }
      }
      v20 = (WebCore::ShadowRoot *)*((_QWORD *)v2 + 10);
      if (!v20)
      {
        if (v2 == a2)
          return this;
        while (1)
        {
          v20 = (WebCore::ShadowRoot *)*((_QWORD *)v2 + 7);
          if (v20)
            break;
          v2 = (WebCore::ShadowRoot *)*((_QWORD *)v2 + 4);
          if (v2)
            v22 = v2 == a2;
          else
            v22 = 1;
          if (v22)
            return this;
        }
      }
      v2 = v20;
    }
    while ((*((_WORD *)v20 + 14) & 8) != 0);
    while (v20 != a2)
    {
      while (1)
      {
        v2 = (WebCore::ShadowRoot *)*((_QWORD *)v20 + 7);
        if (v2)
          break;
        v20 = (WebCore::ShadowRoot *)*((_QWORD *)v20 + 4);
        if (v20)
          v21 = v20 == a2;
        else
          v21 = 1;
        if (v21)
          return this;
      }
      v20 = (WebCore::ShadowRoot *)*((_QWORD *)v20 + 7);
      if ((*((_WORD *)v2 + 14) & 8) != 0)
        goto LABEL_11;
    }
  }
  return this;
}

uint64_t *WebCore::Style::Invalidator::addToMatchElementRuleSets(uint64_t *result, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  WebCore::Style::RuleSet *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  _DWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  void *v31;
  void *v32;

  v3 = result;
  v4 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::rehash(result, 8u, 0), (v4 = *v3) != 0))
  {
    v5 = *(_DWORD *)(v4 - 8);
  }
  else
  {
    v5 = 0;
  }
  v6 = a2[24];
  v7 = 9 * ((~(v6 << 15) + v6) ^ ((~(v6 << 15) + v6) >> 10));
  v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
  v9 = (v8 ^ HIWORD(v8)) & v5;
  v10 = (uint64_t *)(v4 + 32 * v9);
  v11 = *(unsigned __int8 *)v10;
  if (v11 == 255)
  {
LABEL_5:
    v12 = (WebCore::Style::RuleSet *)v10[1];
    v13 = v10;
LABEL_6:
    *(_BYTE *)v13 = v6;
    v14 = *((unsigned int *)v13 + 5);
    if ((_DWORD)v14)
    {
      WTF::VectorTypeOperations<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>>::destruct(v12, (char *)v12 + 8 * v14);
      v12 = (WebCore::Style::RuleSet *)v13[1];
    }
    v15 = v13 + 3;
    if (v12 != (WebCore::Style::RuleSet *)(v13 + 3))
    {
      if (v12)
      {
        v13[1] = 0;
        *((_DWORD *)v13 + 4) = 0;
        WTF::fastFree(v12, a2);
      }
      v15 = v13 + 3;
      v13[1] = (uint64_t)(v13 + 3);
    }
    result = v15;
    *((_DWORD *)v13 + 4) = 1;
    *((_DWORD *)v13 + 5) = 0;
    v16 = *v3;
    if (*v3)
      v17 = *(_DWORD *)(v16 - 12) + 1;
    else
      v17 = 1;
    *(_DWORD *)(v16 - 12) = v17;
    v18 = *v3;
    if (*v3)
      v19 = *(_DWORD *)(v18 - 12);
    else
      v19 = 0;
    v20 = (*(_DWORD *)(v18 - 16) + v19);
    v21 = *(unsigned int *)(v18 - 4);
    if (v21 > 0x400)
    {
      if (v21 > 2 * v20)
        goto LABEL_15;
    }
    else
    {
      if (3 * v21 > 4 * v20)
      {
LABEL_15:
        v10 = v13;
        goto LABEL_26;
      }
      if (!(_DWORD)v21)
      {
        v23 = 8;
LABEL_25:
        result = (uint64_t *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::rehash(v3, v23, (WebCore::Style::DynamicMediaQueryEvaluationChanges *)v13);
        v10 = result;
        goto LABEL_26;
      }
    }
    v23 = (_DWORD)v21 << (6 * *(_DWORD *)(v18 - 12) >= (2 * v21));
    goto LABEL_25;
  }
  v13 = 0;
  v22 = 1;
  while (v11 != v6)
  {
    if (v11 == 254)
      v13 = v10;
    v9 = ((_DWORD)v9 + v22) & v5;
    v10 = (uint64_t *)(v4 + 32 * v9);
    v11 = *(unsigned __int8 *)v10;
    ++v22;
    if (v11 == 255)
    {
      if (!v13)
        goto LABEL_5;
      *(_BYTE *)v13 = -1;
      v12 = (WebCore::Style::RuleSet *)(v13 + 3);
      v13[1] = (uint64_t)(v13 + 3);
      v13[2] = 1;
      --*(_DWORD *)(*v3 - 16);
      LOBYTE(v6) = a2[24];
      goto LABEL_6;
    }
  }
LABEL_26:
  v24 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    ++*v24;
  v25 = *((unsigned int *)v10 + 5);
  if ((_DWORD)v25 != *((_DWORD *)v10 + 4))
  {
    v26 = (_QWORD *)(v10[1] + 8 * v25);
LABEL_30:
    *v26 = v24;
    *((_DWORD *)v10 + 5) = v25 + 1;
    return result;
  }
  v27 = v25 + (v25 >> 2);
  if (v27 >= 0x10)
    v28 = v27 + 1;
  else
    v28 = 16;
  if (v28 <= v25 + 1)
    v29 = v25 + 1;
  else
    v29 = v28;
  v30 = (unsigned __int8 *)v10[1];
  if (v29 < 2)
  {
    v31 = v10 + 3;
    v10[1] = (uint64_t)(v10 + 3);
    *((_DWORD *)v10 + 4) = 1;
LABEL_44:
    result = (uint64_t *)memcpy(v31, v30, 8 * v25);
    if (v10 + 3 != (uint64_t *)v30 && v30)
    {
      if ((unsigned __int8 *)v10[1] == v30)
      {
        v10[1] = 0;
        *((_DWORD *)v10 + 4) = 0;
      }
      result = (uint64_t *)WTF::fastFree((WTF *)v30, v32);
    }
    v25 = *((unsigned int *)v10 + 5);
    v26 = (_QWORD *)(v10[1] + 8 * v25);
    goto LABEL_30;
  }
  if (!(v29 >> 29))
  {
    v31 = (void *)WTF::fastMalloc((WTF *)(8 * v29));
    *((_DWORD *)v10 + 4) = v29;
    v10[1] = (uint64_t)v31;
    goto LABEL_44;
  }
  __break(0xC471u);
  return result;
}

void WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(uint64_t a1, unsigned __int8 **a2)
{
  _QWORD *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[40];

  v4 = *(_QWORD **)(a1 + 40);
  if (*v4)
    v5 = (*(_WORD *)(*v4 + 28) & 0x80) == 0;
  else
    v5 = 1;
  if (v5)
    v17 = v4[1] + 1328;
  else
    v17 = *v4 + 216;
  v6 = *(_QWORD *)v17;
  if (!*(_QWORD *)(*(_QWORD *)v17 + 32))
  {
    if (*(_QWORD *)(v6 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v6);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v6);
    v18 = *(_QWORD *)(v6 + 32);
    if (*(_DWORD *)(v18 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v18 + 32));
    if (*(_BYTE *)(v18 + 242)
      || *(_BYTE *)(v18 + 243)
      || *(_BYTE *)(v18 + 244)
      || *(_BYTE *)(v18 + 245)
      || *(_BYTE *)(v18 + 246)
      || *(_BYTE *)(v18 + 247)
      || *(_BYTE *)(v18 + 248))
    {
      *(_BYTE *)(v6 + 236) = 1;
    }
  }
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_BYTE *)(v7 + 350);
  *(_BYTE *)(v7 + 350) = 1;
  v9 = *a2;
  if (*a2)
  {
    v13 = *((unsigned int *)v9 - 1);
    v11 = &v9[32 * v13];
    if (*((_DWORD *)v9 - 3))
    {
      v10 = v9;
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        v10 = v9;
        while (*v10 >= 0xFEu)
        {
          v10 += 32;
          v14 -= 32;
          if (!v14)
          {
            v10 = v11;
            break;
          }
        }
      }
    }
    else
    {
      v10 = &v9[32 * v13];
      v11 = v10;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  if (v9)
    v12 = &v9[32 * *((unsigned int *)v9 - 1)];
  else
    v12 = 0;
  while (v10 != v12)
  {
    WebCore::Style::Invalidator::Invalidator((uint64_t)v19, (uint64_t)(v10 + 8));
    v15 = v10 + 32;
    WebCore::Style::Invalidator::invalidateStyleWithMatchElement((uint64_t)v19, a1);
    WebCore::Style::Invalidator::~Invalidator((WebCore::Style::Invalidator *)v19, v16);
    v10 = v11;
    if (v15 != v11)
    {
      v10 = v15;
      while (*v10 >= 0xFEu)
      {
        v10 += 32;
        if (v10 == v11)
        {
          v10 = v11;
          break;
        }
      }
    }
  }
  *(_BYTE *)(v7 + 350) = v8;
}

void WebCore::Style::Invalidator::invalidateWithScopeBreakingHasPseudoClassRuleSet(WebCore::Style::Invalidator *this, WebCore::Element *a2, const WebCore::Style::RuleSet *a3)
{
  uint64_t v3;
  WebCore::Style::RuleSet *v4;
  WebCore::Style::RuleSet *v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  void *v13;
  WTF *v14;
  void *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  WebCore::Style::RuleSet *v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[40];
  WTF *v28;
  int v29;
  unsigned int v30;
  _QWORD v31[518];

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v5 = v4;
  v6 = v3;
  v31[517] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(v3 + 40);
  if (*v7)
    v8 = (*(_WORD *)(*v7 + 28) & 0x80) == 0;
  else
    v8 = 1;
  if (v8)
    v25 = v7[1] + 1328;
  else
    v25 = *v7 + 216;
  v9 = *(_QWORD *)v25;
  if (!*(_QWORD *)(*(_QWORD *)v25 + 32))
  {
    if (*(_QWORD *)(v9 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v9);
    else
      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v9);
    v26 = *(_QWORD *)(v9 + 32);
    if (*(_DWORD *)(v26 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v26 + 32));
    if (*(_BYTE *)(v26 + 242)
      || *(_BYTE *)(v26 + 243)
      || *(_BYTE *)(v26 + 244)
      || *(_BYTE *)(v26 + 245)
      || *(_BYTE *)(v26 + 246)
      || *(_BYTE *)(v26 + 247)
      || *(_BYTE *)(v26 + 248))
    {
      *(_BYTE *)(v9 + 236) = 1;
    }
  }
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(_BYTE *)(v10 + 350);
  *(_BYTE *)(v10 + 350) = 1;
  if (v5)
  {
    v12 = *(_DWORD *)v5;
    v28 = (WTF *)v31;
    v29 = 1;
    *(_DWORD *)v5 = v12 + 2;
  }
  else
  {
    v28 = (WTF *)v31;
    v29 = 1;
  }
  v31[0] = v5;
  v30 = 1;
  WebCore::Style::Invalidator::Invalidator((uint64_t)v27, (uint64_t)&v28);
  if (v30)
  {
    v18 = v28;
    v19 = 8 * v30;
    do
    {
      v20 = *(WebCore::Style::RuleSet **)v18;
      *(_QWORD *)v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v20, v13);
          WTF::fastFree(v21, v22);
        }
        else
        {
          --*(_DWORD *)v20;
        }
      }
      v18 = (WTF *)((char *)v18 + 8);
      v19 -= 8;
    }
    while (v19);
  }
  v14 = v28;
  if (v31 == (_QWORD *)v28 || v28 == 0)
  {
    if (!v5)
      goto LABEL_19;
    goto LABEL_17;
  }
  v28 = 0;
  v29 = 0;
  WTF::fastFree(v14, v13);
  if (v5)
  {
LABEL_17:
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v5, v13);
      WTF::fastFree(v23, v24);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
LABEL_19:
  bzero(&v28, 0x1038uLL);
  WebCore::Style::Invalidator::invalidateStyleForDescendants((WTF *)v27, *(WebCore::Element **)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 1272), (WebCore::SelectorFilter *)&v28);
  WebCore::Style::SelectorMatchingState::~SelectorMatchingState((WebCore::Style::SelectorMatchingState *)&v28, v16);
  WebCore::Style::Invalidator::~Invalidator((WebCore::Style::Invalidator *)v27, v17);
  *(_BYTE *)(v10 + 350) = v11;
}

WTF::MonotonicTime *WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(WebCore::Style::Invalidator *this, WebCore::ShadowRoot *a2)
{
  uint64_t v2;
  WTF::MonotonicTime *v3;
  uint64_t v4;
  WTF::MonotonicTime *result;
  uint64_t v6;
  _QWORD *v7;
  WTF::MonotonicTime *v8;
  _BOOL4 hasMatchingUserOrAuthorStyle;
  WTF::MonotonicTime *v10;
  WTF::MonotonicTime *v11;
  _BOOL4 v12;
  WTF::MonotonicTime *v13;

  v2 = *((_QWORD *)this + 25);
  if (v2)
    v3 = *(WTF::MonotonicTime **)(v2 + 8);
  else
    v3 = 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 27) + 32);
  if (v4)
  {
    v7 = (_QWORD *)(v4 + 32);
    v8 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v8 = off_1E3450090;
    v13 = v8;
    hasMatchingUserOrAuthorStyle = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle(v7, &v13);
    v10 = v13;
    v13 = 0;
    if (v10)
      (*(void (**)(WTF::MonotonicTime *))(*(_QWORD *)v10 + 8))(v10);
    if (hasMatchingUserOrAuthorStyle)
      WebCore::Element::invalidateStyleInternal(v3);
    v11 = (WTF::MonotonicTime *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = &off_1E34500B8;
    v13 = v11;
    v12 = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle(v7, &v13);
    result = v13;
    v13 = 0;
    if (result)
      result = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)result + 8))(result);
    if (!v12)
      return result;
  }
  else
  {
    result = WebCore::Element::invalidateStyleInternal(v3);
  }
  v6 = *((_QWORD *)v3 + 10);
  if (v6)
  {
    while ((*(_WORD *)(v6 + 28) & 8) == 0)
    {
      v6 = *(_QWORD *)(v6 + 56);
      if (!v6)
        return result;
    }
LABEL_11:
    result = WebCore::Element::invalidateStyleInternal((WTF::MonotonicTime *)v6);
    while (1)
    {
      v6 = *(_QWORD *)(v6 + 56);
      if (!v6)
        break;
      if ((*(_WORD *)(v6 + 28) & 8) != 0)
        goto LABEL_11;
    }
  }
  return result;
}

void WebCore::Style::loadPendingImage(WebCore::Document *a1, uint64_t a2, WebCore::Node *a3, int a4)
{
  WebCore::CachedResourceLoader *v8;
  int *v9;
  int *v10;
  int v11;
  _DWORD *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD v28[2];
  _DWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  char v37;
  __int16 v38;
  _DWORD *v39;
  _DWORD *v40;
  char v41;
  __int128 v42;
  _DWORD *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  v8 = (WebCore::CachedResourceLoader *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if (!(_DWORD)v8)
    return;
  if (a3)
  {
    v8 = (WebCore::CachedResourceLoader *)WebCore::Node::isInUserAgentShadowTree(a3);
    LODWORD(a3) = (_DWORD)v8;
  }
  v9 = WebCore::CachedResourceLoader::defaultCachedResourceOptions(v8);
  v10 = v9;
  v11 = *(int *)((char *)v9 + 3);
  v28[0] = *v9;
  *(_DWORD *)((char *)v28 + 3) = v11;
  v12 = (_DWORD *)*((_QWORD *)v9 + 1);
  if (v12)
    *v12 += 2;
  v29 = v12;
  v13 = *((_OWORD *)v9 + 2);
  v30 = *((_OWORD *)v9 + 1);
  v31 = v13;
  v14 = *((_QWORD *)v9 + 6);
  v15 = v9[17];
  v33 = 0;
  v34 = 0;
  v32 = v14;
  v35 = v15;
  if ((_DWORD)v15)
  {
    if (v15 >> 28)
    {
      __break(0xC471u);
      return;
    }
    v23 = WTF::fastMalloc((WTF *)(16 * v15));
    v34 = v15;
    v33 = v23;
    v24 = v10[17];
    if ((_DWORD)v24)
    {
      v25 = *((_QWORD *)v10 + 7);
      v26 = v25 + 16 * v24;
      do
      {
        v27 = *(_DWORD **)v25;
        if (*(_QWORD *)v25)
          *v27 += 2;
        *(_QWORD *)v23 = v27;
        *(_BYTE *)(v23 + 8) = *(_BYTE *)(v25 + 8);
        v25 += 16;
        v23 += 16;
      }
      while (v25 != v26);
    }
  }
  v16 = v10[18];
  v37 = *((_BYTE *)v10 + 76);
  v36 = v16;
  LOBYTE(v38) = 0;
  v41 = 0;
  if (*((_BYTE *)v10 + 104))
  {
    v38 = *((_WORD *)v10 + 40);
    v17 = (_DWORD *)*((_QWORD *)v10 + 11);
    if (v17)
      *v17 += 2;
    v39 = v17;
    v18 = (_DWORD *)*((_QWORD *)v10 + 12);
    if (v18)
      *v18 += 2;
    v40 = v18;
    v41 = 1;
  }
  v42 = *((_OWORD *)v10 + 7);
  v19 = (_DWORD *)*((_QWORD *)v10 + 16);
  if (v19)
    *v19 += 2;
  v43 = v19;
  if ((_DWORD)a3)
    v20 = 0;
  else
    v20 = 256;
  v21 = *(_DWORD *)((_BYTE *)&v42 + 2) & 0xFFFFFEFF | v20;
  *(_DWORD *)((char *)&v42 + 2) = v21;
  if ((a3 & 1) == 0 && (*(_QWORD *)(*((_QWORD *)a1 + 85) + 696) & 0x8000000000000000) != 0)
  {
    if (a4)
    {
      if (a4 != 2)
        goto LABEL_24;
      v21 &= 0xFFFFFFCF;
    }
    *(_WORD *)((char *)v28 + 1) = 259;
    *(_DWORD *)((char *)&v42 + 2) = v21 & 0xFFFFF7FF;
  }
LABEL_24:
  if (!*((_QWORD *)a1 + 90))
    WebCore::Document::ensureCachedResourceLoader(a1, 0);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v28, v22);
}

WTF *WebCore::Style::resolveForFontRaw@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, WebCore::FontCascade *a4@<X8>)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  _DWORD *v25;
  _DWORD **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  __int16 v35;
  int v36;
  uint64_t v37;
  float v38;
  int v39;
  int v40;
  float v41;
  WebCore *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WebCore *v46;
  void *v47;
  WTF *result;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  int v60;
  int v61;
  double *v62;
  float v63;
  float v64;
  float v65;
  int v66;
  int v67;
  __int16 v68;
  unsigned int v69;
  int v70;
  double v71;
  float v72;
  double v73;
  _BOOL4 v74;
  WTF::StringImpl *v76;
  WTF::StringImpl **v77;
  int *v78;
  WTF::StringImpl **v79;
  int *v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  WTF::StringImpl *v86;
  WebCore *v87[2];

  v84 = *(_DWORD *)(a2 + 176);
  v7 = *(_QWORD *)(a2 + 168);
  if (*(_DWORD *)(v7 + 4) == 1)
  {
    if (HIDWORD(qword_1EE2F9BE8) <= 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1965A353CLL);
    }
    WTF::AtomStringImpl::add();
    v9 = *(_QWORD *)(v7 + 8) == (_QWORD)v76;
    if (v76)
    {
      if (*(_DWORD *)v76 == 2)
        WTF::StringImpl::destroy(v76, v8);
      else
        *(_DWORD *)v76 -= 2;
    }
  }
  else
  {
    v9 = 0;
  }
  v82 = 0;
  v83 = 0;
  v10 = *((unsigned int *)a1 + 45);
  if ((_DWORD)v10)
  {
    if (v10 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1965A3534);
    }
    LODWORD(v83) = *((_DWORD *)a1 + 45);
    v82 = WTF::fastMalloc((WTF *)(8 * v10));
    v11 = *((unsigned int *)a1 + 45);
    if ((_DWORD)v11)
    {
      v74 = v9;
      v12 = *((_QWORD *)a1 + 21);
      v13 = 16 * v11;
      v14 = 1;
      while (1)
      {
        v86 = 0;
        v85 = 0;
        v76 = (WTF::StringImpl *)&v85;
        v77 = &v86;
        v78 = a3;
        v79 = &v86;
        v15 = *(unsigned int *)(v12 + 8);
        if ((_DWORD)v15 == -1)
          goto LABEL_126;
        v87[0] = (WebCore *)&v76;
        ((void (*)(WebCore **, uint64_t))*(&off_1E34500D0 + v15))(v87, v12);
        v17 = v86;
        if (v86)
        {
          if (*((_DWORD *)v86 + 1))
          {
            if (v14)
              *(_WORD *)(a2 + 180) = *(_WORD *)(a2 + 180) & 0xFDFF | ((v85 == 0) << 9);
            v76 = v17;
            LODWORD(v18) = HIDWORD(v83);
            if (HIDWORD(v83) == (_DWORD)v83)
            {
              v54 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v82, HIDWORD(v83) + 1, (unint64_t)&v76);
              v18 = HIDWORD(v83);
              v55 = v82;
              v56 = *v54;
              *v54 = 0;
              *(_QWORD *)(v55 + 8 * v18) = v56;
            }
            else
            {
              v76 = 0;
              *(_QWORD *)(v82 + 8 * HIDWORD(v83)) = v17;
            }
            HIDWORD(v83) = v18 + 1;
            v19 = v76;
            v76 = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v16);
              else
                *(_DWORD *)v19 -= 2;
            }
            v14 = 0;
          }
          else
          {
            v86 = 0;
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v16);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        v12 += 16;
        v13 -= 16;
        if (!v13)
        {
          v20 = HIDWORD(v83);
          v9 = v74;
          goto LABEL_28;
        }
      }
    }
  }
  v20 = 0;
LABEL_28:
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v82, v20);
  v22 = HIDWORD(v83);
  if (!HIDWORD(v83))
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 296) = 0;
    goto LABEL_68;
  }
  v23 = (_DWORD *)WTF::fastMalloc((WTF *)(8 * HIDWORD(v83) + 8));
  v25 = v23;
  v26 = (_DWORD **)v82;
  v27 = HIDWORD(v83);
  *v23 = 1;
  v23[1] = v22;
  if ((_DWORD)v27)
  {
    v28 = v23 + 2;
    v29 = 8 * v27;
    do
    {
      v30 = *v26;
      if (*v26)
        *v30 += 2;
      *v28++ = v30;
      ++v26;
      v29 -= 8;
    }
    while (v29);
  }
  v31 = *(unsigned int **)(a2 + 168);
  *(_QWORD *)(a2 + 168) = v23;
  if (v31)
  {
    if (*v31 == 1)
    {
      v50 = v31[1];
      if ((_DWORD)v50)
      {
        v51 = (WTF::StringImpl **)(v31 + 2);
        v52 = 8 * v50;
        do
        {
          v53 = *v51;
          *v51 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v24);
            else
              *(_DWORD *)v53 -= 2;
          }
          ++v51;
          v52 -= 8;
        }
        while (v52);
      }
      WTF::fastFree((WTF *)v31, v24);
      v25 = *(_DWORD **)(a2 + 168);
      v22 = v25[1];
    }
    else
    {
      --*v31;
    }
  }
  if (v22 != 1)
  {
    if (!v9)
      goto LABEL_45;
    goto LABEL_95;
  }
  if (HIDWORD(qword_1EE2F9BE8) <= 2)
  {
    __break(0xC471u);
    JUMPOUT(0x1965A3544);
  }
  WTF::AtomStringImpl::add();
  v33 = v76;
  v34 = (WTF::StringImpl *)*((_QWORD *)v25 + 1);
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, v32);
    else
      *(_DWORD *)v76 -= 2;
  }
  if (v9 != (v34 == v33))
  {
LABEL_95:
    v60 = (*(unsigned __int16 *)(a2 + 180) >> 3) & 0xF;
    if (v60)
    {
      v61 = v60 + 93;
      v62 = (double *)(*(uint64_t (**)(int *))(*(_QWORD *)a3 + 136))(a3);
      v63 = WebCore::Style::fontSizeForKeyword(v61, !v9, v62);
      v64 = 3.4028e38;
      v65 = -3.4028e38;
      if (v63 > -3.4028e38)
        v65 = v63;
      if (v63 < 3.4028e38)
        v64 = v65;
      *(float *)(a2 + 176) = v64;
      (*(void (**)(int *))(*(_QWORD *)a3 + 136))(a3);
      if (fabsf(v63) < 0.00000011921)
      {
        v63 = 0.0;
      }
      else
      {
        v66 = 2139095039;
        if (v63 >= 3.4028e38 || (v66 = -8388609, v63 <= -3.4028e38))
          v63 = *(float *)&v66;
      }
      *(float *)(a2 + 156) = v63;
    }
  }
LABEL_45:
  v35 = *((unsigned __int8 *)a1 + 32);
  if (!*((_BYTE *)a1 + 32))
    goto LABEL_46;
  v67 = *a1;
  if (v67 == 48)
  {
    if (!*((_BYTE *)a1 + 24))
    {
      v72 = 0.0;
      goto LABEL_112;
    }
    v70 = *((unsigned __int8 *)a1 + 8);
    v71 = *((double *)a1 + 2);
    if (v70 != 12)
    {
      switch(v70)
      {
        case 64:
          v73 = 360.0;
          break;
        case 14:
          v73 = 0.9;
          break;
        case 13:
          v73 = 57.2957795;
          break;
        default:
          v71 = 0.0;
          goto LABEL_111;
      }
      v71 = v71 * v73;
    }
LABEL_111:
    v72 = v71;
LABEL_112:
    v68 = vcvts_n_s32_f32(v72, 2uLL);
    *(_BYTE *)(a2 + 150) = 1;
    goto LABEL_113;
  }
  if (v67 != 47)
  {
    v35 = 0;
    goto LABEL_46;
  }
  *(_BYTE *)(a2 + 150) = 1;
  v68 = 56;
LABEL_113:
  *(_WORD *)(a2 + 148) = v68;
  v35 = *((unsigned __int8 *)a1 + 32);
  if (*((_BYTE *)a1 + 32))
    v35 = (*a1 == 47) << 15;
LABEL_46:
  v36 = *(_WORD *)(a2 + 164) & 0x7FFF | (*(unsigned __int8 *)(a2 + 166) << 16);
  *(_WORD *)(a2 + 164) = *(_WORD *)(a2 + 164) & 0x7FFF | v35;
  *(_BYTE *)(a2 + 166) = BYTE2(v36);
  if (*((_BYTE *)a1 + 42))
  {
    switch(a1[20])
    {
      case '2':
        v69 = *(_DWORD *)(a2 + 160) & 0xE3FFFFFF | 0x4000000;
        goto LABEL_123;
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
        break;
      case ';':
        v69 = *(_DWORD *)(a2 + 160) & 0xE3FFFFFF | 0x8000000;
        goto LABEL_123;
      case '<':
        v69 = *(_DWORD *)(a2 + 160) & 0xE3FFFFFF | 0xC000000;
        goto LABEL_123;
      case '=':
        v69 = *(_DWORD *)(a2 + 160) & 0xE3FFFFFF | 0x10000000;
        goto LABEL_123;
      case '>':
        v69 = *(_DWORD *)(a2 + 160) & 0xE3FFFFFF | 0x14000000;
        goto LABEL_123;
      case '?':
        v69 = *(_DWORD *)(a2 + 160) & 0xE3FFFFFF | 0x18000000;
        goto LABEL_123;
      default:
        if (a1[20] != 90)
          break;
        v69 = *(_DWORD *)(a2 + 160) & 0xE3FFFFFF;
LABEL_123:
        *(_DWORD *)(a2 + 160) = v69;
        break;
    }
  }
  if (*((_BYTE *)a1 + 64))
  {
    v87[0] = (WebCore *)a2;
    v49 = *((unsigned int *)a1 + 14);
    if ((_DWORD)v49 == -1)
      goto LABEL_126;
    v76 = (WTF::StringImpl *)v87;
    *(_WORD *)(a2 + 144) = ((uint64_t (*)(WTF::StringImpl **, unsigned __int16 *))*(&off_1E34500E0 + v49))(&v76, a1 + 24);
  }
  *(_WORD *)(a2 + 180) &= 0xFF87u;
  v76 = (WTF::StringImpl *)a2;
  v77 = (WTF::StringImpl **)a3;
  v78 = &v84;
  v79 = (WTF::StringImpl **)a2;
  v80 = a3;
  v81 = &v84;
  v37 = *((unsigned int *)a1 + 28);
  if ((_DWORD)v37 == -1)
  {
LABEL_126:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_127;
  }
  v87[0] = (WebCore *)&v76;
  v38 = ((float (*)(WebCore **, unsigned __int16 *))*(&off_1E34500F0 + v37))(v87, a1 + 44);
  if (v38 > 0.0)
  {
    v39 = 2139095039;
    if (v38 < 3.4028e38)
    {
      v40 = -8388609;
      if (v38 <= -3.4028e38)
        v41 = -3.4028e38;
      else
        v41 = v38;
      *(float *)(a2 + 176) = v41;
      if (v38 > -3.4028e38)
        v40 = LODWORD(v38);
      goto LABEL_56;
    }
LABEL_127:
    *(_DWORD *)(a2 + 176) = v39;
    v40 = v39;
LABEL_56:
    *(_DWORD *)(a2 + 156) = v40;
  }
  WebCore::FontCascade::FontCascade((uint64_t)&v76, (uint64_t *)a2);
  v42 = (WebCore *)(*(uint64_t (**)(int *))(*(_QWORD *)a3 + 304))(a3);
  if (v42)
    ++*((_DWORD *)v42 + 2);
  v87[0] = v42;
  v43 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v43 || (v44 = *(_QWORD *)(v43 + 96)) == 0)
    v44 = WebCore::threadGlobalDataSlow(v42);
  v45 = *(_QWORD *)(v44 + 80);
  if (!v45)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v44);
    v45 = *(_QWORD *)(v44 + 80);
  }
  WebCore::FontCache::updateFontCascade(v45, (uint64_t)&v76, v87);
  v46 = v87[0];
  v87[0] = 0;
  if (v46)
  {
    if (*((_DWORD *)v46 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v46 + 8))(v46);
    else
      --*((_DWORD *)v46 + 2);
  }
  *((_BYTE *)WebCore::FontCascade::FontCascade(a4, (const WebCore::FontCascade *)&v76) + 296) = 1;
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&v76, v47);
  if (HIDWORD(v83))
  {
    v57 = (WTF::StringImpl **)v82;
    v58 = 8 * HIDWORD(v83);
    do
    {
      v59 = *v57;
      *v57 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v21);
        else
          *(_DWORD *)v59 -= 2;
      }
      ++v57;
      v58 -= 8;
    }
    while (v58);
  }
LABEL_68:
  result = (WTF *)v82;
  if (v82)
  {
    v82 = 0;
    LODWORD(v83) = 0;
    return (WTF *)WTF::fastFree(result, v21);
  }
  return result;
}

uint64_t WebCore::Style::shouldDirtyAllStyle(uint64_t **a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v8;

  v1 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v1)
    return 0;
  v2 = *a1;
  v3 = 8 * v1;
  while (1)
  {
    v4 = *v2;
    v5 = *(_BYTE *)(*v2 + 4) & 0x1F;
    if (*v2)
      v6 = v5 == 4;
    else
      v6 = 0;
    if (v6)
    {
      v8 = v4 + 8;
      goto LABEL_13;
    }
    if (v5 != 1)
      break;
LABEL_10:
    ++v2;
    v3 -= 8;
    if (!v3)
      return 0;
  }
  if (v5 != 22)
    return 1;
  v8 = v4 + 32;
LABEL_13:
  if ((WebCore::Style::shouldDirtyAllStyle(v8) & 1) == 0)
    goto LABEL_10;
  return 1;
}

char *WTF::Vector<WebCore::Element *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element *&>(uint64_t a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  result = WTF::Vector<WebCore::Element *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *(_QWORD *)result;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

char *WTF::Vector<WebCore::Element *,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 0x11)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 16;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x1965A3800);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x11)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 16;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

uint64_t WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::rehash(uint64_t *a1, unsigned int a2, WebCore::Style::DynamicMediaQueryEvaluationChanges *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  WebCore::Style::DynamicMediaQueryEvaluationChanges *v15;
  int v16;
  uint64_t v17;
  void *v18;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = a2;
  v10 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v12 = v10 + 40;
    do
    {
      *(_BYTE *)(v12 - 24) = -1;
      *(_QWORD *)(v12 - 16) = v12;
      *(_QWORD *)(v12 - 8) = 1;
      v12 += 32;
      --v9;
    }
    while (v9);
  }
  *a1 = v10 + 16;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v15 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)v6;
    do
    {
      v16 = *(unsigned __int8 *)v15;
      if (v16 != 254)
      {
        if (v16 == 255)
        {
          WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v15, v11);
        }
        else
        {
          v17 = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::reinsert(a1, (uint64_t)v15);
          WebCore::Style::DynamicMediaQueryEvaluationChanges::~DynamicMediaQueryEvaluationChanges(v15, v18);
          if (v15 == a3)
            v13 = v17;
        }
      }
      v15 = (WebCore::Style::DynamicMediaQueryEvaluationChanges *)((char *)v15 + 32);
      --v7;
    }
    while (v7);
    goto LABEL_17;
  }
  result = 0;
  if (v6)
  {
LABEL_17:
    WTF::fastFree((WTF *)(v6 - 16), v11);
    return v13;
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::reinsert(uint64_t *a1, uint64_t a2)
{
  uint64_t matched;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  const void *v9;
  int v10;
  int v11;
  WebCore::Style::RuleSet **v13;
  uint64_t v14;
  WebCore::Style::RuleSet *v15;
  WTF *v16;
  void *v17;

  matched = WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<WebCore::Style::MatchElement>>,WebCore::Style::MatchElement>(a1, (unsigned __int8 *)a2);
  v5 = matched;
  v6 = *(unsigned int *)(matched + 20);
  if ((_DWORD)v6)
  {
    v13 = *(WebCore::Style::RuleSet ***)(matched + 8);
    v14 = 8 * v6;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v15, v4);
          WTF::fastFree(v16, v17);
        }
        else
        {
          --*(_DWORD *)v15;
        }
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v7 = *(WTF **)(v5 + 8);
  if ((WTF *)(v5 + 24) != v7 && v7 != 0)
  {
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    WTF::fastFree(v7, v4);
  }
  *(_BYTE *)v5 = *(_BYTE *)a2;
  *(_QWORD *)(v5 + 8) = v5 + 24;
  *(_QWORD *)(v5 + 16) = 1;
  v9 = *(const void **)(a2 + 8);
  if (v9 == (const void *)(a2 + 24))
  {
    memcpy((void *)(v5 + 24), v9, 8 * *(unsigned int *)(a2 + 20));
  }
  else
  {
    *(_QWORD *)(a2 + 8) = a2 + 24;
    *(_QWORD *)(v5 + 8) = v9;
    v10 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 1;
    *(_DWORD *)(v5 + 16) = v10;
  }
  v11 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(v5 + 20) = v11;
  return v5;
}

BOOL WTF::Detail::CallableWrapper<WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(WebCore::ShadowRoot &)::$_0,BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 180) != 0;
}

BOOL WTF::Detail::CallableWrapper<WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(WebCore::ShadowRoot &)::$_1,BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 228) != 0;
}

WTF::AtomStringImpl *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::CSSValueID> WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &&,WebCore::ScriptExecutionContext &)::$_4::operator()<std::variant<WebCore::CSSValueID,WTF::AtomString> const> const(std::variant<WebCore::CSSValueID,WTF::AtomString> const &)::{lambda(std::variant)#1},std::optional WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &,WebCore::ScriptExecutionContext)::$_4<std::variant<WebCore::CSSValueID,WTF::AtomString>> const(std::variant<WebCore::CSSValueID,WTF::AtomString> const)::{lambda(WebCore::CSSValueID const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant,WebCore::CSSValueID> const&>(_QWORD *a1, WTF::StringImpl *a2)
{
  _BYTE **v2;
  int v3;
  int v4;
  unint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::AtomStringImpl *result;
  int v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::AtomStringImpl **v12;
  WTF::AtomStringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;

  v2 = (_BYTE **)*a1;
  v3 = *(unsigned __int16 *)a2;
  **(_BYTE **)*a1 = v3 != 121;
  if (v3 == 121)
  {
    v10 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2[2] + 136))(v2[2]);
    result = *(WTF::AtomStringImpl **)WebCore::genericFontFamilyForScript((WTF *)(v10 + 24), 0);
    if (result)
    {
      if ((*((_BYTE *)result + 16) & 0x10) != 0)
      {
        *(_DWORD *)result += 2;
      }
      else
      {
        WTF::AtomStringImpl::addSlowCase(result, v11);
        result = v17;
      }
    }
    v12 = (WTF::AtomStringImpl **)v2[1];
    v13 = *v12;
    *v12 = result;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        result = v13;
        return (WTF::AtomStringImpl *)WTF::StringImpl::destroy(result, v11);
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  else
  {
    v4 = v3 - 116;
    v5 = 5;
    switch(v4)
    {
      case 0:
        goto LABEL_17;
      case 1:
        v5 = 4;
        goto LABEL_17;
      case 2:
        v5 = 0;
        goto LABEL_17;
      case 3:
        v5 = 1;
        goto LABEL_17;
      case 4:
        v5 = 2;
        goto LABEL_17;
      case 6:
        v5 = 3;
        goto LABEL_17;
      case 7:
        {
          v6 = (WTF::StringImpl *)qword_1EE2EFDB8;
          if (qword_1EE2EFDB8)
          {
            v7 = (WTF::StringImpl **)v2[1];
LABEL_6:
            *(_DWORD *)v6 += 2;
            goto LABEL_7;
          }
        }
        else
        {
          bzero(WebCore::nameString(WebCore::CSSValueID)::strings, 0x2470uLL);
        }
        WTF::AtomString::AtomString(&v17, (uint64_t)"system-ui", 0xAuLL);
        v6 = v17;
        v17 = 0;
        v15 = (WTF::StringImpl *)qword_1EE2EFDB8;
        qword_1EE2EFDB8 = (uint64_t)v6;
        if (!v15)
          goto LABEL_35;
        v16 = *(_DWORD *)v15 - 2;
        if (*(_DWORD *)v15 != 2)
          goto LABEL_33;
        WTF::StringImpl::destroy(v15, a2);
        v15 = v17;
        v17 = 0;
        if (v15)
        {
          v16 = *(_DWORD *)v15 - 2;
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, a2);
          else
LABEL_33:
            *(_DWORD *)v15 = v16;
        }
        v6 = (WTF::StringImpl *)qword_1EE2EFDB8;
LABEL_35:
        v7 = (WTF::StringImpl **)v2[1];
        if (v6)
          goto LABEL_6;
LABEL_7:
        result = *v7;
        *v7 = v6;
        if (result)
        {
          v9 = *(_DWORD *)result - 2;
          if (*(_DWORD *)result == 2)
            result = (WTF::AtomStringImpl *)WTF::StringImpl::destroy(result, a2);
          else
LABEL_20:
            *(_DWORD *)result = v9;
        }
        break;
      default:
        v5 = 6;
LABEL_17:
        if (v5 >= HIDWORD(qword_1EE2F9BE8))
        {
          __break(0xC471u);
          JUMPOUT(0x1965A3CA4);
        }
        WTF::AtomStringImpl::add();
        v14 = (WTF::StringImpl **)v2[1];
        result = *v14;
        *v14 = v17;
        if (!result)
          return result;
        v9 = *(_DWORD *)result - 2;
        if (*(_DWORD *)result != 2)
          goto LABEL_20;
        return (WTF::AtomStringImpl *)WTF::StringImpl::destroy(result, v11);
    }
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<std::optional<WebCore::CSSValueID> WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &&,WebCore::ScriptExecutionContext &)::$_4::operator()<std::variant<WebCore::CSSValueID,WTF::AtomString> const> const(std::variant<WebCore::CSSValueID,WTF::AtomString> const &)::{lambda(std::variant)#1},std::optional WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &,WebCore::ScriptExecutionContext)::$_4<std::variant<WebCore::CSSValueID,WTF::AtomString>> const(std::variant<WebCore::CSSValueID,WTF::AtomString> const)::{lambda(WebCore::CSSValueID const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant,WebCore::CSSValueID> const&>(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl **v3;
  WTF::StringImpl *result;

  v2 = *(WTF::StringImpl **)a2;
  v3 = *(WTF::StringImpl ***)(*(_QWORD *)a1 + 24);
  if (*(_QWORD *)a2)
    *(_DWORD *)v2 += 2;
  result = *v3;
  *v3 = v2;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &&,WebCore::ScriptExecutionContext &)::$_0,WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &,WebCore::ScriptExecutionContext)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,double> const&>(uint64_t **a1, unsigned __int16 *a2)
{
  int v2;
  uint64_t v3;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v2 = *a2;
  v3 = **a1;
  switch(v2)
  {
    case ']':
      v5 = *(__int16 *)(v3 + 144);
      if ((unsigned __int16)v5 >= 0xBB8u)
        v6 = 2800;
      else
        v6 = 1600;
      if ((unsigned __int16)v5 < 0x898u)
        v6 = 400;
      if (v5 >= 400)
        return v6;
      else
        return (unsigned __int16)v5;
    case '\\':
      v7 = *(unsigned __int16 *)(v3 + 144);
      v8 = (__int16)v7;
      if (v7 <= 0xE10)
        v9 = 3600;
      else
        v9 = v7;
      if (v7 >= 0x898)
        v10 = v9;
      else
        v10 = 2800;
      if (v8 >= 1400)
        return v10;
      else
        return 1600;
    case '[':
      return 2800;
    default:
      return 1600;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &&,WebCore::ScriptExecutionContext &)::$_0,WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &,WebCore::ScriptExecutionContext)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,double> const&>(uint64_t a1, double *a2)
{
  float v2;
  float v3;
  BOOL v4;
  float v5;

  v2 = *a2;
  if (v2 > 8191.8)
    v2 = 8191.8;
  v3 = v2 * 4.0;
  v4 = v2 <= -8192.0;
  v5 = -32768.0;
  if (!v4)
    v5 = v3;
  return (int)v5;
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &&,WebCore::ScriptExecutionContext &)::$_3,WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &,WebCore::ScriptExecutionContext)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,std::variant<WebCore::LengthRaw,WebCore::PercentRaw>> const&>(float ***a1, unsigned __int16 *a2)
{
  float **v2;
  int v3;
  uint64_t v4;
  int v5;
  double *v6;
  float result;

  v2 = *a1;
  v3 = *a2;
  if ((v3 - 94) >= 8)
  {
    if (v3 == 103)
    {
      return *v2[2] / 1.2;
    }
    else
    {
      result = 0.0;
      if (v3 == 104)
        return *v2[2] * 1.2;
    }
  }
  else
  {
    *((_WORD *)*v2 + 90) = (_WORD)(*v2)[45] & 0xFF87 | (8 * (_BYTE)v3 + 24) & 0x78;
    v4 = *((_QWORD *)*v2 + 21);
    v5 = *(_DWORD *)(v4 + 4) == 1 && *(_QWORD *)(v4 + 8) == WebCore::WebKitFontFamilyNames::monospaceFamily;
    v6 = (double *)(*(uint64_t (**)(float *))(*(_QWORD *)v2[1] + 136))(v2[1]);
    return WebCore::Style::fontSizeForKeyword(v3, v5, v6);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &&,WebCore::ScriptExecutionContext &)::$_3,WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &,WebCore::ScriptExecutionContext)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::CSSValueID,std::variant<WebCore::LengthRaw,WebCore::PercentRaw>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v6 = *(_OWORD *)(*(_QWORD *)a1 + 24);
  v7 = v2;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &&,WebCore::ScriptExecutionContext &)::$_2::operator() const(std::variant<WebCore::LengthRaw,WebCore::PercentRaw> const&)::{lambda(std::variant const&)#1},WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &,WebCore::ScriptExecutionContext)::WebCore::ScriptExecutionContext &::operator() const(std::variant<WebCore::LengthRaw,WebCore::PercentRaw> const)::{lambda(WebCore::LengthRaw const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::variant,WebCore::LengthRaw> const&>(v5);
  }
  else
  {
    v8 = &v6;
    return ((uint64_t (*)(__int128 **))*(&off_1E3450100 + v3))(&v8);
  }
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &&,WebCore::ScriptExecutionContext &)::$_2::operator() const(std::variant<WebCore::LengthRaw,WebCore::PercentRaw> const&)::{lambda(std::variant const&)#1},WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &,WebCore::ScriptExecutionContext)::WebCore::ScriptExecutionContext &::operator() const(std::variant<WebCore::LengthRaw,WebCore::PercentRaw> const)::{lambda(WebCore::LengthRaw const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::variant,WebCore::LengthRaw> const&>(uint64_t **a1, double *a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  WebCore *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore *v12;
  uint64_t v13;
  WebCore::LocalFrameView **v14;
  float v15;
  void *v16;
  uint64_t v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebCore *v22[21];
  WTF *v23;
  int v24;
  __int16 v25;
  _BYTE v26[296];

  v3 = *a1;
  v4 = **a1;
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v22, (const WebCore::FontDescription *)v4);
  v5 = *(WTF **)(v4 + 168);
  ++*(_DWORD *)v5;
  v23 = v5;
  LOWORD(v5) = *(_WORD *)(v4 + 180);
  v24 = *(_DWORD *)(v4 + 176);
  v25 = (__int16)v5;
  WebCore::FontCascade::FontCascade((uint64_t)v26, (uint64_t *)v22);
  v7 = (unsigned int *)v23;
  v23 = 0;
  if (v7)
  {
    if (*v7 == 1)
    {
      v18 = v7[1];
      if ((_DWORD)v18)
      {
        v19 = (WTF::StringImpl **)(v7 + 2);
        v20 = 8 * v18;
        do
        {
          v21 = *v19;
          *v19 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2)
              WTF::StringImpl::destroy(v21, v6);
            else
              *(_DWORD *)v21 -= 2;
          }
          ++v19;
          v20 -= 8;
        }
        while (v20);
      }
      WTF::fastFree((WTF *)v7, v6);
    }
    else
    {
      --*v7;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v22, v6);
  v8 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3[1] + 304))(v3[1]);
  if (v8)
    ++*((_DWORD *)v8 + 2);
  v22[0] = v8;
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(v8);
  v11 = *(_QWORD *)(v10 + 80);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v10);
    v11 = *(_QWORD *)(v10 + 80);
  }
  WebCore::FontCache::updateFontCascade(v11, (uint64_t)v26, v22);
  v12 = v22[0];
  v22[0] = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v12 + 8))(v12);
    else
      --*((_DWORD *)v12 + 2);
  }
  v13 = v3[1];
  if (*(_BYTE *)(v13 + 274))
    v14 = 0;
  else
    v14 = *(WebCore::LocalFrameView ***)(v13 + 1752);
  v15 = WebCore::CSSPrimitiveValue::computeUnzoomedNonCalcLengthDouble(*(unsigned __int8 *)a2, (void *)0xD, (WebCore::FontCascade *)v26, v14, a2[1]);
  WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v26, v16);
  return v15;
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &&,WebCore::ScriptExecutionContext &)::$_2::operator() const(std::variant<WebCore::LengthRaw,WebCore::PercentRaw> const&)::{lambda(std::variant const&)#1},WebCore::Style::resolveForFontRaw(WebCore::CSSPropertyParserHelpers::FontRaw const&,WebCore::FontCascadeDescription &,WebCore::ScriptExecutionContext)::WebCore::ScriptExecutionContext &::operator() const(std::variant<WebCore::LengthRaw,WebCore::PercentRaw> const)::{lambda(WebCore::LengthRaw const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::variant,WebCore::LengthRaw> const&>(uint64_t a1, double *a2)
{
  return *a2 * **(float **)(*(_QWORD *)a1 + 16) / 100.0;
}

WebCore::Style::RuleSet *WebCore::Style::Resolver::initialize(WebCore::Style::RuleSet **this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  WebCore::Style::RuleSet *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  WebCore::Style::RuleSet *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WebCore::Node *v19;
  WebCore::RenderStyle *v20;
  WTF *v21;
  WebCore::Style::RuleSet *v22;
  WebCore::Document *v23;
  uint64_t v24;
  WebCore::Document *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  WTF::StringImpl *v33;
  WebCore::Style::RuleSet *v34;
  WebCore::Document *v35;
  uint64_t v36;
  char v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v40;
  char v41;
  uint64_t v42;
  WebCore::Style::RuleSet *v43;
  unsigned int *v44;
  WTF::StringImpl *v45;
  unsigned int *v46;
  unsigned int v47;
  WTF::StringImpl *v48;
  WebCore::Style::RuleSet *v49;
  unsigned int v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  WebCore::Style::RuleSet *v54;
  WebCore::Style::RuleSet *result;
  WTF *v56;
  void *v57;
  WTF *v58;
  void *v59;
  WebCore::Style::RuleSet *v60;
  WTF::StringImpl *v61;
  WebCore::Style::RuleSet *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF *v76;
  WebCore::Style::RuleSet *v77;
  uint64_t v78;
  WTF *v79;
  WebCore::Style::RuleSet *v80;
  WebCore::Style::RuleSet *v81;
  WebCore::Style::RuleSet *v82;
  WTF::StringImpl *v83;
  __int128 v84;
  __int128 v85;
  char v86;
  WebCore::Node *v87[3];

  WebCore::Style::UserAgentStyle::initDefaultStyleSheet((WebCore::Style::UserAgentStyle *)this);
  v3 = *(_QWORD *)(*((_QWORD *)this[2] + 1) + 528);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 288);
      if (v5)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + 328) + 280)
                                                                             + 16)
                                                               + 896))(&v83);
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v65 = *(_QWORD *)(*(_QWORD *)(v5 + 328) + 24);
          if (v65)
          {
            v66 = *(_QWORD *)(v65 + 8);
            if (v66)
            {
              v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 80) + 8) + 200);
              if (v67)
              {
                v8 = *(WTF::StringImpl **)(v67 + 136);
                if (v8)
                {
                  if (*((_DWORD *)v8 + 1))
                  {
                    *(_DWORD *)v8 += 2;
                    v68 = v83;
                    v83 = v8;
                    if (!v68)
                      goto LABEL_8;
                    if (*(_DWORD *)v68 == 2)
                      WTF::StringImpl::destroy(v68, v6);
                    else
                      *(_DWORD *)v68 -= 2;
                  }
                }
              }
            }
          }
        }
        v8 = v83;
        if (!v83)
        {
          v8 = *(WTF::StringImpl **)(v5 + 1040);
          if (!v8)
          {
            v9 = 1;
            goto LABEL_9;
          }
          *(_DWORD *)v8 += 2;
        }
LABEL_8:
        v9 = 0;
        *(_DWORD *)v8 += 2;
LABEL_9:
        v10 = this[45];
        this[45] = v8;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v6);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = this[46];
        this[46] = 0;
        if (v11)
        {
          do
          {
            v12 = __ldaxr((unsigned int *)v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, (unsigned int *)v11));
          if (!v13)
          {
            atomic_store(1u, (unsigned int *)v11);
            v69 = *((unsigned int *)v11 + 7);
            if ((_DWORD)v69)
            {
              v81 = v11;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v11 + 2), (WTF::StringImpl *)(*((_QWORD *)v11 + 2) + 32 * v69));
              v11 = v81;
            }
            v70 = (WTF *)*((_QWORD *)v11 + 2);
            if (v70)
            {
              *((_QWORD *)v11 + 2) = 0;
              *((_DWORD *)v11 + 6) = 0;
              v77 = v11;
              WTF::fastFree(v70, v6);
              v11 = v77;
            }
            WTF::fastFree(v11, v6);
          }
        }
        this[47] = 0;
        *((_BYTE *)this + 384) = 0;
        if ((v9 & 1) == 0)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, v6);
          else
            *(_DWORD *)v8 -= 2;
        }
        v14 = 1;
        goto LABEL_19;
      }
    }
  }
  v60 = (WebCore::Style::RuleSet *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *(_DWORD *)v60 += 2;
  v61 = this[45];
  this[45] = v60;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, v2);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = this[46];
  this[46] = 0;
  if (v62)
  {
    do
    {
      v63 = __ldaxr((unsigned int *)v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, (unsigned int *)v62));
    if (!v64)
    {
      atomic_store(1u, (unsigned int *)v62);
      v78 = *((unsigned int *)v62 + 7);
      if ((_DWORD)v78)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v62 + 2), (WTF::StringImpl *)(*((_QWORD *)v62 + 2) + 32 * v78));
      v79 = (WTF *)*((_QWORD *)v62 + 2);
      if (v79)
      {
        *((_QWORD *)v62 + 2) = 0;
        *((_DWORD *)v62 + 6) = 0;
        WTF::fastFree(v79, v2);
      }
      WTF::fastFree(v62, v2);
    }
  }
  v14 = 0;
  v5 = 0;
  this[47] = 0;
  *((_BYTE *)this + 384) = 0;
LABEL_19:
  v15 = this[2];
  if (v15)
  {
    v16 = *((_QWORD *)v15 + 1);
    v17 = *(_QWORD *)(v16 + 1272);
    if (v17)
    {
      v83 = *(WTF::StringImpl **)(v16 + 1952);
      v84 = 0u;
      v85 = 0u;
      v86 = 0;
      WebCore::Style::Resolver::styleForElement((uint64_t)this, v17, (uint64_t)&v83, 2, v87);
      v19 = v87[0];
      v87[0] = 0;
      v20 = this[49];
      this[49] = v19;
      if (v20)
      {
        WebCore::RenderStyle::~RenderStyle(v20, v18);
        if (*(_DWORD *)v21)
        {
          *((_OWORD *)v21 + 2) = 0u;
          *((_OWORD *)v21 + 3) = 0u;
          *(_OWORD *)v21 = 0u;
          *((_OWORD *)v21 + 1) = 0u;
        }
        else
        {
          WTF::fastFree(v21, v18);
        }
      }
      WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v87, v18);
      v22 = this[2];
      if (v22)
        v23 = (WebCore::Document *)*((_QWORD *)v22 + 1);
      else
        v23 = 0;
      v24 = *((_QWORD *)v23 + 331);
      if (!v24)
      {
        v24 = WebCore::Document::ensureFontSelector(v23);
        v22 = this[2];
      }
      ++*(_DWORD *)(v24 + 168);
      if (v22)
        v25 = (WebCore::Document *)*((_QWORD *)v22 + 1);
      else
        v25 = 0;
      v26 = *((_QWORD *)this[49] + 4);
      v27 = (WTF::StringImpl *)*((_QWORD *)v25 + 331);
      if (!v27)
      {
        v25 = (WebCore::Document *)WebCore::Document::ensureFontSelector(v25);
        v27 = v25;
      }
      v28 = v26 + 32;
      ++*((_DWORD *)v27 + 2);
      v83 = v27;
      v29 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v29 || (v30 = *(_QWORD *)(v29 + 96)) == 0)
        v30 = WebCore::threadGlobalDataSlow(v25);
      v31 = *(_QWORD *)(v30 + 80);
      if (!v31)
      {
        WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v30);
        v31 = *(_QWORD *)(v30 + 80);
      }
      WebCore::FontCache::updateFontCascade(v31, v28, &v83);
      v33 = v83;
      v83 = 0;
      if (v33)
      {
        if (*((_DWORD *)v33 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 8))(v33);
        else
          --*((_DWORD *)v33 + 2);
      }
      WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this[49] + 4) + 32), v32);
      v34 = this[2];
      if (v34)
        v35 = (WebCore::Document *)*((_QWORD *)v34 + 1);
      else
        v35 = 0;
      v36 = *((_QWORD *)v35 + 331);
      if (!v36)
        v36 = WebCore::Document::ensureFontSelector(v35);
      --*(_DWORD *)(v36 + 168);
    }
  }
  v37 = v14 ^ 1;
  if (!this[49])
    v37 = 1;
  if ((v37 & 1) == 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + 328) + 280)
                                                                         + 16)
                                                           + 896))(&v83);
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v71 = *(_QWORD *)(*(_QWORD *)(v5 + 328) + 24);
      if (v71)
      {
        v72 = *(_QWORD *)(v71 + 8);
        if (v72)
        {
          v73 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v72 + 80) + 8) + 200);
          if (v73)
          {
            v40 = *(WTF::StringImpl **)(v73 + 136);
            if (v40)
            {
              if (*((_DWORD *)v40 + 1))
              {
                *(_DWORD *)v40 += 2;
                v74 = v83;
                v83 = v40;
                if (!v74)
                  goto LABEL_52;
                if (*(_DWORD *)v74 == 2)
                  WTF::StringImpl::destroy(v74, v38);
                else
                  *(_DWORD *)v74 -= 2;
              }
            }
          }
        }
      }
    }
    v40 = v83;
    if (!v83)
    {
      v40 = *(WTF::StringImpl **)(v5 + 1040);
      if (!v40)
      {
        v42 = *((_QWORD *)this[2] + 1);
        v43 = this[49];
        v41 = 1;
        goto LABEL_53;
      }
      *(_DWORD *)v40 += 2;
    }
LABEL_52:
    v41 = 0;
    v42 = *((_QWORD *)this[2] + 1);
    v43 = this[49];
    *(_DWORD *)v40 += 2;
LABEL_53:
    v44 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v42);
    v46 = v44;
    if (v44)
    {
      do
        v47 = __ldaxr(v44);
      while (__stlxr(v47 + 1, v44));
    }
    v48 = this[45];
    this[45] = v40;
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
        WTF::StringImpl::destroy(v48, v45);
      else
        *(_DWORD *)v48 -= 2;
    }
    v49 = this[46];
    this[46] = (WebCore::Style::RuleSet *)v46;
    if (v49)
    {
      do
      {
        v50 = __ldaxr((unsigned int *)v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, (unsigned int *)v49));
      if (!v51)
      {
        atomic_store(1u, (unsigned int *)v49);
        v75 = *((unsigned int *)v49 + 7);
        if ((_DWORD)v75)
        {
          v82 = v49;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v49 + 2), (WTF::StringImpl *)(*((_QWORD *)v49 + 2) + 32 * v75));
          v49 = v82;
        }
        v76 = (WTF *)*((_QWORD *)v49 + 2);
        if (v76)
        {
          *((_QWORD *)v49 + 2) = 0;
          *((_DWORD *)v49 + 6) = 0;
          v80 = v49;
          WTF::fastFree(v76, v45);
          v49 = v80;
        }
        WTF::fastFree(v49, v45);
      }
    }
    this[47] = v43;
    *((_BYTE *)this + 384) = 2;
    if ((v41 & 1) == 0)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v45);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  *((_BYTE *)this + 349) = 1;
  v52 = WTF::fastMalloc((WTF *)0x328);
  *(_DWORD *)v52 = 1;
  *(_OWORD *)(v52 + 8) = 0u;
  *(_OWORD *)(v52 + 24) = 0u;
  *(_OWORD *)(v52 + 40) = 0u;
  *(_OWORD *)(v52 + 56) = 0u;
  *(_QWORD *)(v52 + 72) = v52 + 88;
  *(_QWORD *)(v52 + 80) = 1;
  *(_QWORD *)(v52 + 120) = v52 + 136;
  *(_QWORD *)(v52 + 128) = 1;
  *(_QWORD *)(v52 + 168) = v52 + 184;
  *(_QWORD *)(v52 + 176) = 1;
  *(_QWORD *)(v52 + 216) = v52 + 232;
  *(_QWORD *)(v52 + 224) = 1;
  *(_QWORD *)(v52 + 264) = v52 + 280;
  *(_QWORD *)(v52 + 272) = 1;
  *(_QWORD *)(v52 + 312) = v52 + 328;
  *(_QWORD *)(v52 + 320) = 1;
  *(_QWORD *)(v52 + 360) = v52 + 376;
  *(_QWORD *)(v52 + 368) = 1;
  *(_QWORD *)(v52 + 408) = v52 + 424;
  *(_QWORD *)(v52 + 416) = 1;
  *(_QWORD *)(v52 + 645) = 0;
  *(_OWORD *)(v52 + 616) = 0u;
  *(_OWORD *)(v52 + 632) = 0u;
  *(_OWORD *)(v52 + 584) = 0u;
  *(_OWORD *)(v52 + 600) = 0u;
  *(_OWORD *)(v52 + 552) = 0u;
  *(_OWORD *)(v52 + 568) = 0u;
  *(_OWORD *)(v52 + 520) = 0u;
  *(_OWORD *)(v52 + 536) = 0u;
  *(_OWORD *)(v52 + 488) = 0u;
  *(_OWORD *)(v52 + 504) = 0u;
  *(_OWORD *)(v52 + 456) = 0u;
  *(_OWORD *)(v52 + 472) = 0u;
  *(_QWORD *)(v52 + 672) = 0;
  *(_DWORD *)(v52 + 680) = 0;
  *(_OWORD *)(v52 + 656) = 0u;
  *(_OWORD *)(v52 + 688) = 0u;
  *(_OWORD *)(v52 + 704) = 0u;
  *(_OWORD *)(v52 + 720) = 0u;
  *(_OWORD *)(v52 + 736) = 0u;
  *(_OWORD *)(v52 + 752) = 0u;
  *(_OWORD *)(v52 + 768) = 0u;
  *(_OWORD *)(v52 + 784) = 0u;
  *(_WORD *)(v52 + 800) = 0;
  v54 = this[4];
  this[4] = (WebCore::Style::RuleSet *)v52;
  if (v54)
  {
    if (*(_DWORD *)v54 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v54, v53);
      WTF::fastFree(v56, v57);
    }
    else
    {
      --*(_DWORD *)v54;
    }
  }
  result = this[5];
  this[5] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(result, v53);
      return (WebCore::Style::RuleSet *)WTF::fastFree(v58, v59);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WebCore::Style::Resolver::styleForElement(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, WebCore::Node **a5@<X8>)
{
  const WebCore::RenderStyle *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  WebCore::Node *v18;
  const WTF::StringImpl *v19;
  WebCore::Node *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  const WebCore::Element *v25;
  const WTF::AtomString *v26;
  uint64_t v27;
  WebCore::Style::RuleSet *v28;
  uint64_t v29;
  WebCore::Style::RuleSet *v30;
  int v31;
  WebCore::Style::RuleSet *v32;
  WebCore::Style::RuleSet *v33;
  char v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  const WebCore::RenderStyle *v38;
  const WebCore::RenderStyle *v39;
  void *v40;
  WebCore::Node *v41;
  WTF *v42;
  WTF *v43;
  WTF *v44;
  WTF *v45;
  WTF::StringImpl *v47;
  WebCore::Style::RuleSet *v48;
  WebCore::Style::RuleSet *v49;
  WebCore::Style::RuleSet *v50;
  WebCore::Style::RuleSet *v51;
  WebCore::Node *v52;
  WTF *v53;
  WTF *v54;
  void *v55;
  WTF *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  int v61;
  WTF *v62;
  void *v63;
  WTF *v64;
  void *v65;
  WTF *v66;
  void *v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WebCore::Document *v75;
  WebCore::VisitedLinkState *v76;
  int v77;
  WTF *v78;
  WTF *v79;
  uint64_t v80;
  WTF *v81;
  uint64_t v82;
  WTF *v83;
  uint64_t v84;
  WTF *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  _DWORD *v89;
  _DWORD **v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  _DWORD *v97;
  _DWORD **v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  _DWORD *v105;
  _DWORD **v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  __int128 v113;
  WebCore::Style::RuleSet *v114;
  uint64_t v115;
  void *v116;
  void *v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  WTF *v125;
  uint64_t v127;
  WTF *v128;
  uint64_t v130;
  WTF *v131;
  uint64_t v133;
  uint64_t v134;
  WTF *v135;
  void *v136;
  WebCore::RenderStyle *v137;
  _DWORD *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  unint64_t v142;
  unsigned int *v143;
  _DWORD *v144;
  unint64_t v145;
  unsigned int *v146;
  _DWORD *v147;
  unint64_t v148;
  unsigned int *v149;
  _DWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  WTF *v156;
  uint64_t v157;
  _DWORD *v158;
  void *v159;
  void *v160;
  WebCore::Node *v161;
  WebCore::Style::RuleSet *v162;
  WebCore::Style::RuleSet *v163;
  WebCore::Style::RuleSet *v164;
  WebCore::Style::RuleSet *v165;
  uint64_t v166;
  __int16 v167;
  char v168;
  WTF::StringImpl *v169;
  char v170;
  char v171;
  WTF *v172;
  uint64_t v173;
  _QWORD v174[193];
  WTF *v175;
  uint64_t v176;
  char v177;
  WTF *v178;
  WTF *v179;
  uint64_t v180;
  _BYTE v181[128];
  unsigned int v182;
  uint64_t v183;
  WebCore::Node *v184;
  const WebCore::RenderStyle *v185;
  WebCore::RenderStyle *v186;
  uint64_t v187;
  WebCore::RenderStyle *v188;
  uint64_t v189;
  unsigned __int8 *v190[2];
  WebCore::RenderStyle *v191;
  uint64_t v192;
  const WebCore::RenderStyle *v193;
  __int128 v194;
  __int128 v195;
  char v196;
  uint64_t v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  char v210;

  v10 = *(const WebCore::RenderStyle **)a3;
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(a3 + 32);
  v183 = a2;
  v185 = v10;
  v186 = 0;
  v187 = 0;
  v188 = 0;
  v189 = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
  v14 = *(_QWORD *)(v13 + 1272);
  if (v14)
    v15 = v14 == a2;
  else
    v15 = 1;
  if (v15)
  {
    v11 = *(_QWORD *)(v13 + 1952);
  }
  else if (!v11)
  {
    v11 = *(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v11 = *(_QWORD *)((*(_QWORD *)(v14 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v11)
          v11 = *(_QWORD *)(v11 + 8);
      }
      v11 += 80;
    }
  }
  v187 = v11;
  if (v10)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 1328) + 296);
    if (*(_BYTE *)(v16 + 32))
    {
      *(_BYTE *)(v16 + 32) = 0;
      WebCore::RenderStyle::createPtr(&v191);
      std::exchange[abi:sn180100]<std::unique_ptr<WebCore::RenderStyle>,std::unique_ptr<WebCore::RenderStyle>>((WebCore::RenderStyle **)(v16 + 24), &v191, &v161);
      std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v191, v159);
      WebCore::Style::CustomPropertyRegistry::initialValuePrototypeStyle(void)const::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits> const>((_DWORD *)v16, (_QWORD *)(v16 + 16));
      WebCore::Style::CustomPropertyRegistry::initialValuePrototypeStyle(void)const::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits> const>((_DWORD *)v16, (_QWORD *)(v16 + 8));
      WebCore::RenderStyle::deduplicateCustomProperties(*(_QWORD **)(v16 + 24), (WTF **)v161);
      std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v161, v160);
    }
    v17 = *(_QWORD **)(v16 + 24);
    v18 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x40);
    v20 = v18;
    *(_DWORD *)v18 = 0;
    v21 = (_DWORD *)v17[1];
    ++*v21;
    *((_QWORD *)v18 + 1) = v21;
    *((_QWORD *)v18 + 2) = v17[2];
    v22 = (_DWORD *)v17[3];
    ++*v22;
    *((_QWORD *)v18 + 3) = v22;
    v23 = (_DWORD *)v17[4];
    ++*v23;
    *((_QWORD *)v18 + 4) = v23;
    *((_QWORD *)v18 + 5) = v17[5];
    *((_QWORD *)v18 + 6) = 0;
    v24 = (_DWORD *)v17[7];
    ++*v24;
    *((_QWORD *)v18 + 7) = v24;
    v184 = v18;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 1272) != a2 || *(_BYTE *)(a3 + 40))
      WebCore::RenderStyle::inheritFrom(v18, v10, v19);
    else
      WebCore::RenderStyle::inheritIgnoringCustomPropertiesFrom(v18, v10, v19);
  }
  else
  {
    WebCore::Style::Resolver::defaultStyleForElement((WebCore::Style::Resolver *)a1, (const WebCore::Element *)a2, (uint64_t *)&v161);
    v20 = v161;
    v184 = v161;
    v161 = 0;
    v137 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v137 = 0;
    v138 = (_DWORD *)*((_QWORD *)v20 + 1);
    ++*v138;
    *((_QWORD *)v137 + 1) = v138;
    *((_QWORD *)v137 + 2) = *((_QWORD *)v20 + 2);
    v139 = (_DWORD *)*((_QWORD *)v20 + 3);
    ++*v139;
    *((_QWORD *)v137 + 3) = v139;
    v140 = (_DWORD *)*((_QWORD *)v20 + 4);
    ++*v140;
    *((_QWORD *)v137 + 4) = v140;
    *((_QWORD *)v137 + 5) = *((_QWORD *)v20 + 5);
    *((_QWORD *)v137 + 6) = 0;
    v141 = (_DWORD *)*((_QWORD *)v20 + 7);
    ++*v141;
    *((_QWORD *)v137 + 7) = v141;
    v186 = v137;
    v185 = v137;
  }
  if ((*(_WORD *)(a2 + 30) & 1) != 0)
  {
    *((_QWORD *)v20 + 2) |= 0x40000000000uLL;
    v74 = *(_QWORD *)(a1 + 16);
    if (v74)
      v75 = *(WebCore::Document **)(v74 + 8);
    else
      v75 = 0;
    v76 = (WebCore::VisitedLinkState *)*((_QWORD *)v75 + 180);
    if (!v76)
      v76 = (WebCore::VisitedLinkState *)WebCore::Document::ensureVisitedLinkState(v75);
    if ((*(_WORD *)(a2 + 30) & 1) != 0)
    {
      v77 = WebCore::VisitedLinkState::determineLinkStateSlowCase(v76, (const WebCore::Element *)a2, v26);
      if (v77)
      {
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          v119 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8);
          v120 = *(_QWORD *)(v119 + 528);
          if (v120)
          {
            v121 = *(_QWORD *)(v120 + 8);
            if (v121)
            {
              v122 = *(_QWORD *)(v121 + 24);
              if (v122)
              {
                v123 = *(_QWORD *)(v122 + 8);
                if (v123)
                  goto LABEL_271;
              }
            }
          }
          v151 = *(_QWORD *)(v119 + 2632);
          if (v151)
          {
            v152 = *(_QWORD *)(v151 + 8);
            if (v152)
            {
              v153 = *(_QWORD *)(v152 + 528);
              if (v153)
              {
                v154 = *(_QWORD *)(v153 + 8);
                if (v154)
                {
                  v155 = *(_QWORD *)(v154 + 24);
                  if (v155)
                  {
                    v123 = *(_QWORD *)(v155 + 8);
                    if (v123)
                    {
LABEL_271:
                      if (WebCore::InspectorInstrumentation::forcePseudoStateImpl(*(_QWORD *)(*(_QWORD *)(v123 + 80) + 8), a2, 80))LOBYTE(v77) = 2;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      LOBYTE(v77) = 0;
    }
    *((_DWORD *)v20 + 11) = *((_DWORD *)v20 + 11) & 0xFFFFF3FF | ((v77 & 3) << 10);
    v20 = v184;
  }
  WebCore::Style::UserAgentStyle::ensureDefaultStyleSheetsForElement((WebCore::Style::UserAgentStyle *)a2, v25);
  v27 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 24) += 2;
  v161 = (WebCore::Node *)a2;
  v28 = *(WebCore::Style::RuleSet **)(a1 + 32);
  ++*(_DWORD *)v28;
  v162 = v28;
  v29 = a1;
  if (*(_BYTE *)(a1 + 348))
  {
    v29 = a1;
    do
    {
      v70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 64) + 16) + 8) + 1328);
      if (!*(_QWORD *)(v70 + 32))
      {
        if (*(_QWORD *)(v70 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v70);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v70);
        v134 = *(_QWORD *)(v70 + 32);
        if (*(_DWORD *)(v134 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v134 + 32));
        if (*(_BYTE *)(v134 + 242)
          || *(_BYTE *)(v134 + 243)
          || *(_BYTE *)(v134 + 244)
          || *(_BYTE *)(v134 + 245)
          || *(_BYTE *)(v134 + 246)
          || *(_BYTE *)(v134 + 247)
          || *(_BYTE *)(v134 + 248))
        {
          *(_BYTE *)(v70 + 236) = 1;
        }
      }
      v29 = *(_QWORD *)(v70 + 32);
    }
    while (*(_BYTE *)(v29 + 348));
  }
  v30 = *(WebCore::Style::RuleSet **)(v29 + 56);
  if (v30)
    ++*(_DWORD *)v30;
  v163 = v30;
  if (WebCore::Style::UserAgentStyle::mediaQueryStyleSheet)
  {
    v31 = *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 68)
        + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 52)
        + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 84)
        + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 100);
    if (!*(_QWORD *)(a1 + 40) || v31 != *(_DWORD *)(a1 + 344))
    {
      *(_DWORD *)(a1 + 344) = v31;
      v110 = *(_QWORD *)(a1 + 64) + 360;
      v111 = WTF::fastMalloc((WTF *)0x328);
      *(_DWORD *)v111 = 1;
      v113 = 0uLL;
      *(_OWORD *)(v111 + 8) = 0u;
      *(_OWORD *)(v111 + 24) = 0u;
      *(_OWORD *)(v111 + 40) = 0u;
      *(_OWORD *)(v111 + 56) = 0u;
      *(_QWORD *)(v111 + 72) = v111 + 88;
      *(_QWORD *)(v111 + 80) = 1;
      *(_QWORD *)(v111 + 120) = v111 + 136;
      *(_QWORD *)(v111 + 128) = 1;
      *(_QWORD *)(v111 + 168) = v111 + 184;
      *(_QWORD *)(v111 + 176) = 1;
      *(_QWORD *)(v111 + 216) = v111 + 232;
      *(_QWORD *)(v111 + 224) = 1;
      *(_QWORD *)(v111 + 264) = v111 + 280;
      *(_QWORD *)(v111 + 272) = 1;
      *(_QWORD *)(v111 + 312) = v111 + 328;
      *(_QWORD *)(v111 + 320) = 1;
      *(_QWORD *)(v111 + 360) = v111 + 376;
      *(_QWORD *)(v111 + 368) = 1;
      *(_QWORD *)(v111 + 408) = v111 + 424;
      *(_QWORD *)(v111 + 416) = 1;
      *(_QWORD *)(v111 + 645) = 0;
      *(_OWORD *)(v111 + 616) = 0u;
      *(_OWORD *)(v111 + 632) = 0u;
      *(_OWORD *)(v111 + 584) = 0u;
      *(_OWORD *)(v111 + 600) = 0u;
      *(_OWORD *)(v111 + 552) = 0u;
      *(_OWORD *)(v111 + 568) = 0u;
      *(_OWORD *)(v111 + 520) = 0u;
      *(_OWORD *)(v111 + 536) = 0u;
      *(_OWORD *)(v111 + 488) = 0u;
      *(_OWORD *)(v111 + 504) = 0u;
      *(_OWORD *)(v111 + 456) = 0u;
      *(_OWORD *)(v111 + 472) = 0u;
      *(_QWORD *)(v111 + 672) = 0;
      *(_DWORD *)(v111 + 680) = 0;
      *(_OWORD *)(v111 + 656) = 0u;
      *(_OWORD *)(v111 + 688) = 0u;
      *(_OWORD *)(v111 + 704) = 0u;
      *(_OWORD *)(v111 + 720) = 0u;
      *(_OWORD *)(v111 + 736) = 0u;
      *(_OWORD *)(v111 + 752) = 0u;
      *(_OWORD *)(v111 + 768) = 0u;
      *(_OWORD *)(v111 + 784) = 0u;
      *(_WORD *)(v111 + 800) = 0;
      v114 = *(WebCore::Style::RuleSet **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v111;
      if (v114)
      {
        if (*(_DWORD *)v114 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v114, v112);
          WTF::fastFree(v135, v136);
          v113 = 0uLL;
          v111 = *(_QWORD *)(a1 + 40);
        }
        else
        {
          --*(_DWORD *)v114;
        }
      }
      v115 = *(_QWORD *)(a1 + 64);
      ++*(_DWORD *)v111;
      v191 = (WebCore::RenderStyle *)v111;
      v192 = v110;
      LOBYTE(v193) = 0;
      v194 = v113;
      v195 = v113;
      v196 = 0;
      v197 = v115;
      v198 = 0;
      v201 = 0;
      v199 = 0;
      v200 = 0;
      v202 = 0;
      v206 = 0;
      v207 = 0;
      v209 = 0;
      v208 = 0;
      v210 = 0;
      v205 = 0;
      v203 = 0;
      v204 = 0;
      v190[1] = 0;
      v190[0] = 0;
      WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)&v191, (const WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::mediaQueryStyleSheet, v190);
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v190, v116);
      WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)&v191, v117);
    }
  }
  v32 = *(WebCore::Style::RuleSet **)(a1 + 40);
  if (v32)
    ++*(_DWORD *)v32;
  v164 = v32;
  v33 = *(WebCore::Style::RuleSet **)(a1 + 48);
  if (v33)
    ++*(_DWORD *)v33;
  v165 = v33;
  v166 = v27;
  v167 = 0;
  v168 = 0;
  v170 = 0;
  v171 = 0;
  v172 = (WTF *)v174;
  v173 = 64;
  v174[192] = 0;
  v176 = 0;
  v175 = 0;
  v34 = *(_BYTE *)(a2 + 30) & 1;
  v177 = 0;
  v35 = WTF::fastMalloc((WTF *)0x50);
  *(_BYTE *)v35 = v34;
  *(_WORD *)(v35 + 1) = 0;
  *(_OWORD *)(v35 + 8) = 0u;
  *(_OWORD *)(v35 + 24) = 0u;
  *(_OWORD *)(v35 + 40) = 0u;
  *(_QWORD *)(v35 + 56) = v35 + 72;
  *(_QWORD *)(v35 + 64) = 4;
  v178 = (WTF *)v35;
  v179 = (WTF *)v181;
  v180 = 8;
  v182 = 0;
  HIBYTE(v167) = *(_QWORD *)(a1 + 360) == WebCore::printAtomData;
  if (a4 == 2)
    WebCore::Style::ElementRuleCollector::matchUARules((WebCore::Style::ElementRuleCollector *)&v161, v36);
  else
    WebCore::Style::ElementRuleCollector::matchAllRules(&v161, (void *)*(unsigned __int8 *)(a1 + 496), a4 != 1);
  if (v182)
    *((_QWORD *)v20 + 2) |= (unint64_t)v182 >> 1 << 48;
  if (v177)
    *((_QWORD *)v20 + 2) |= 0x80000000uLL;
  if (HIDWORD(v180))
  {
    *((_QWORD *)v20 + 2) |= 0x80000000uLL;
    if (HIDWORD(v180))
    {
      v37 = 0;
      v56 = v179;
      v57 = 16 * HIDWORD(v180);
      while (1)
      {
        if (*(_QWORD *)v56 == a2)
        {
          v61 = *((_DWORD *)v56 + 2);
          if ((v61 - 1) >= 9)
          {
            switch(v61)
            {
              case 10:
                v72 = *((_QWORD *)v20 + 2);
                v73 = 0x10080000000;
                goto LABEL_100;
              case 11:
                v72 = *((_QWORD *)v20 + 2);
                v73 = 0x20080000000;
LABEL_100:
                *((_QWORD *)v20 + 2) = v72 | v73;
                goto LABEL_82;
              case 12:
              case 14:
                break;
              case 13:
                goto LABEL_82;
              default:
                if (v61)
                  goto LABEL_82;
                v124 = 0x80000000;
                if (*((_DWORD *)v56 + 3))
                  v124 = 0x8080000000;
                *((_QWORD *)v20 + 2) = v124 | *((_QWORD *)v20 + 2) & 0xFFFFFF7F7FFFFFFFLL;
                break;
            }
          }
        }
        if (!v37)
          break;
        v58 = *(unsigned int *)(v37 + 12);
        if ((_DWORD)v58 != *(_DWORD *)(v37 + 8))
        {
          v59 = *(_QWORD *)v37;
LABEL_80:
          v60 = *(_OWORD *)v56;
          goto LABEL_81;
        }
        v71 = (__int128 *)WTF::Vector<WebCore::Style::Relation,8ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v37, (void *)(v58 + 1), (unint64_t)v56);
        v58 = *(unsigned int *)(v37 + 12);
        v59 = *(_QWORD *)v37;
        v60 = *v71;
LABEL_81:
        *(_OWORD *)(v59 + 16 * v58) = v60;
        ++*(_DWORD *)(v37 + 12);
LABEL_82:
        v56 = (WTF *)((char *)v56 + 16);
        v57 -= 16;
        if (!v57)
          goto LABEL_33;
      }
      v37 = WTF::fastMalloc((WTF *)0x90);
      v58 = 0;
      v59 = v37 + 16;
      *(_QWORD *)v37 = v37 + 16;
      *(_QWORD *)(v37 + 8) = 8;
      goto LABEL_80;
    }
  }
  v37 = 0;
LABEL_33:
  WebCore::Style::Resolver::applyMatchedProperties(a1, (uint64_t)&v183);
  v38 = *(const WebCore::RenderStyle **)(a3 + 8);
  v191 = *(WebCore::RenderStyle **)(*(_QWORD *)(a1 + 16) + 8);
  v192 = (uint64_t)v185;
  if (v38)
    v39 = v38;
  else
    v39 = v185;
  v193 = v39;
  *(_QWORD *)&v194 = a2;
  WebCore::Style::Adjuster::adjust((WebCore::Style::Adjuster *)&v191, v20, v188);
  if ((*((_BYTE *)v20 + 19) & 0x20) != 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) + 3407) = 1;
  v41 = v184;
  v184 = 0;
  *a5 = v41;
  a5[1] = (WebCore::Node *)v37;
  v42 = v178;
  v178 = 0;
  a5[2] = v42;
  v43 = v179;
  if (v181 == (_BYTE *)v179 || !v179)
  {
    v178 = 0;
  }
  else
  {
    v179 = 0;
    LODWORD(v180) = 0;
    WTF::fastFree(v43, v40);
    v78 = v178;
    v178 = 0;
    if (v78)
    {
      v79 = (WTF *)*((_QWORD *)v78 + 7);
      if ((WTF *)((char *)v78 + 72) != v79 && v79)
      {
        *((_QWORD *)v78 + 7) = 0;
        *((_DWORD *)v78 + 16) = 0;
        WTF::fastFree(v79, v40);
      }
      v80 = *((unsigned int *)v78 + 13);
      if ((_DWORD)v80)
      {
        v86 = (uint64_t *)*((_QWORD *)v78 + 5);
        v87 = &v86[2 * v80];
        do
        {
          v88 = *v86;
          *v86 = 0;
          if (v88)
          {
            if (*(_DWORD *)v88 == 1)
            {
              v92 = *(unsigned int *)(v88 + 4);
              if ((v92 & 8) != 0)
              {
                v93 = *(unsigned int *)(v88 + 28);
                if ((_DWORD)v93)
                {
                  v91 = 16 * v93;
                  v90 = (_DWORD **)(*(_QWORD *)(v88 + 16) + 8);
                  do
                  {
                    v89 = *v90;
                    *v90 = 0;
                    if (v89)
                    {
                      if (*v89 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v89, (WTF::StringImpl *)v40);
                      else
                        *v89 -= 2;
                    }
                    v90 += 2;
                    v91 -= 16;
                  }
                  while (v91);
                }
                v125 = *(WTF **)(v88 + 16);
                if ((WTF *)(v88 + 32) != v125 && v125 != 0)
                {
                  *(_QWORD *)(v88 + 16) = 0;
                  *(_DWORD *)(v88 + 24) = 0;
                  WTF::fastFree(v125, v40);
                }
                v127 = *(_QWORD *)(v88 + 8);
                *(_QWORD *)(v88 + 8) = 0;
                if (v127)
                  (*(void (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
              }
              else if (v92 >= 0x10)
              {
                v142 = 0;
                v143 = (unsigned int *)(v88 + ((v92 >> 3) & 0x1FFFFFFE) + 8);
                do
                {
                  v144 = (_DWORD *)(*v143 | ((unint64_t)*((unsigned __int8 *)v143 + 4) << 32));
                  if (*v144 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v144, (WTF::StringImpl *)v40);
                  else
                    *v144 -= 2;
                  ++v142;
                  v143 = (unsigned int *)((char *)v143 + 5);
                }
                while (v142 < (unint64_t)*(unsigned int *)(v88 + 4) >> 4);
              }
              WTF::fastFree((WTF *)v88, v40);
            }
            else
            {
              --*(_DWORD *)v88;
            }
          }
          v86 += 2;
        }
        while (v86 != v87);
      }
      v81 = (WTF *)*((_QWORD *)v78 + 5);
      if (v81)
      {
        *((_QWORD *)v78 + 5) = 0;
        *((_DWORD *)v78 + 12) = 0;
        WTF::fastFree(v81, v40);
      }
      v82 = *((unsigned int *)v78 + 9);
      if ((_DWORD)v82)
      {
        v94 = (uint64_t *)*((_QWORD *)v78 + 3);
        v95 = &v94[2 * v82];
        do
        {
          v96 = *v94;
          *v94 = 0;
          if (v96)
          {
            if (*(_DWORD *)v96 == 1)
            {
              v100 = *(unsigned int *)(v96 + 4);
              if ((v100 & 8) != 0)
              {
                v101 = *(unsigned int *)(v96 + 28);
                if ((_DWORD)v101)
                {
                  v99 = 16 * v101;
                  v98 = (_DWORD **)(*(_QWORD *)(v96 + 16) + 8);
                  do
                  {
                    v97 = *v98;
                    *v98 = 0;
                    if (v97)
                    {
                      if (*v97 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v97, (WTF::StringImpl *)v40);
                      else
                        *v97 -= 2;
                    }
                    v98 += 2;
                    v99 -= 16;
                  }
                  while (v99);
                }
                v128 = *(WTF **)(v96 + 16);
                if ((WTF *)(v96 + 32) != v128 && v128 != 0)
                {
                  *(_QWORD *)(v96 + 16) = 0;
                  *(_DWORD *)(v96 + 24) = 0;
                  WTF::fastFree(v128, v40);
                }
                v130 = *(_QWORD *)(v96 + 8);
                *(_QWORD *)(v96 + 8) = 0;
                if (v130)
                  (*(void (**)(uint64_t))(*(_QWORD *)v130 + 8))(v130);
              }
              else if (v100 >= 0x10)
              {
                v145 = 0;
                v146 = (unsigned int *)(v96 + ((v100 >> 3) & 0x1FFFFFFE) + 8);
                do
                {
                  v147 = (_DWORD *)(*v146 | ((unint64_t)*((unsigned __int8 *)v146 + 4) << 32));
                  if (*v147 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v147, (WTF::StringImpl *)v40);
                  else
                    *v147 -= 2;
                  ++v145;
                  v146 = (unsigned int *)((char *)v146 + 5);
                }
                while (v145 < (unint64_t)*(unsigned int *)(v96 + 4) >> 4);
              }
              WTF::fastFree((WTF *)v96, v40);
            }
            else
            {
              --*(_DWORD *)v96;
            }
          }
          v94 += 2;
        }
        while (v94 != v95);
      }
      v83 = (WTF *)*((_QWORD *)v78 + 3);
      if (v83)
      {
        *((_QWORD *)v78 + 3) = 0;
        *((_DWORD *)v78 + 8) = 0;
        WTF::fastFree(v83, v40);
      }
      v84 = *((unsigned int *)v78 + 5);
      if ((_DWORD)v84)
      {
        v102 = (uint64_t *)*((_QWORD *)v78 + 1);
        v103 = &v102[2 * v84];
        do
        {
          v104 = *v102;
          *v102 = 0;
          if (v104)
          {
            if (*(_DWORD *)v104 == 1)
            {
              v108 = *(unsigned int *)(v104 + 4);
              if ((v108 & 8) != 0)
              {
                v109 = *(unsigned int *)(v104 + 28);
                if ((_DWORD)v109)
                {
                  v107 = 16 * v109;
                  v106 = (_DWORD **)(*(_QWORD *)(v104 + 16) + 8);
                  do
                  {
                    v105 = *v106;
                    *v106 = 0;
                    if (v105)
                    {
                      if (*v105 == 2)
                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v105, (WTF::StringImpl *)v40);
                      else
                        *v105 -= 2;
                    }
                    v106 += 2;
                    v107 -= 16;
                  }
                  while (v107);
                }
                v131 = *(WTF **)(v104 + 16);
                if ((WTF *)(v104 + 32) != v131 && v131 != 0)
                {
                  *(_QWORD *)(v104 + 16) = 0;
                  *(_DWORD *)(v104 + 24) = 0;
                  WTF::fastFree(v131, v40);
                }
                v133 = *(_QWORD *)(v104 + 8);
                *(_QWORD *)(v104 + 8) = 0;
                if (v133)
                  (*(void (**)(uint64_t))(*(_QWORD *)v133 + 8))(v133);
              }
              else if (v108 >= 0x10)
              {
                v148 = 0;
                v149 = (unsigned int *)(v104 + ((v108 >> 3) & 0x1FFFFFFE) + 8);
                do
                {
                  v150 = (_DWORD *)(*v149 | ((unint64_t)*((unsigned __int8 *)v149 + 4) << 32));
                  if (*v150 == 2)
                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v150, (WTF::StringImpl *)v40);
                  else
                    *v150 -= 2;
                  ++v148;
                  v149 = (unsigned int *)((char *)v149 + 5);
                }
                while (v148 < (unint64_t)*(unsigned int *)(v104 + 4) >> 4);
              }
              WTF::fastFree((WTF *)v104, v40);
            }
            else
            {
              --*(_DWORD *)v104;
            }
          }
          v102 += 2;
        }
        while (v102 != v103);
      }
      v85 = (WTF *)*((_QWORD *)v78 + 1);
      if (v85)
      {
        *((_QWORD *)v78 + 1) = 0;
        *((_DWORD *)v78 + 4) = 0;
        WTF::fastFree(v85, v40);
      }
      WTF::fastFree(v78, v40);
    }
  }
  if (HIDWORD(v176))
  {
    v156 = v175;
    v157 = 8 * HIDWORD(v176);
    do
    {
      v158 = *(_DWORD **)v156;
      *(_QWORD *)v156 = 0;
      if (v158)
      {
        if (*v158 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v158, (WTF::StringImpl *)v40);
        else
          --*v158;
      }
      v156 = (WTF *)((char *)v156 + 8);
      v157 -= 8;
    }
    while (v157);
  }
  v44 = v175;
  if (v175)
  {
    v175 = 0;
    LODWORD(v176) = 0;
    WTF::fastFree(v44, v40);
  }
  v45 = v172;
  if (v174 != (_QWORD *)v172 && v172 != 0)
  {
    v172 = 0;
    LODWORD(v173) = 0;
    WTF::fastFree(v45, v40);
  }
  if (v170)
  {
    v47 = v169;
    v169 = 0;
    if (v47)
    {
      if (*(_DWORD *)v47 == 2)
        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v40);
      else
        *(_DWORD *)v47 -= 2;
    }
  }
  v48 = v165;
  v165 = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v48, v40);
      WTF::fastFree(v64, v65);
    }
    else
    {
      --*(_DWORD *)v48;
    }
  }
  v49 = v164;
  v164 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v49, v40);
      WTF::fastFree(v66, v67);
    }
    else
    {
      --*(_DWORD *)v49;
    }
  }
  v50 = v163;
  v163 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v50, v40);
      WTF::fastFree(v68, v69);
    }
    else
    {
      --*(_DWORD *)v50;
    }
  }
  v51 = v162;
  v162 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v51, v40);
      WTF::fastFree(v62, v63);
    }
    else
    {
      --*(_DWORD *)v51;
    }
  }
  v52 = v161;
  v161 = 0;
  if (v52)
  {
    if (*((_DWORD *)v52 + 6) == 2)
    {
      if ((*((_WORD *)v52 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v52);
    }
    else
    {
      *((_DWORD *)v52 + 6) -= 2;
    }
  }
  if (v188)
  {
    WebCore::RenderStyle::~RenderStyle(v188, v40);
    if (*(_DWORD *)v53)
    {
      *((_OWORD *)v53 + 2) = 0u;
      *((_OWORD *)v53 + 3) = 0u;
      *(_OWORD *)v53 = 0u;
      *((_OWORD *)v53 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v53, v40);
    }
  }
  if (v186)
  {
    WebCore::RenderStyle::~RenderStyle(v186, v40);
    if (*(_DWORD *)v54)
    {
      *((_OWORD *)v54 + 2) = 0u;
      *((_OWORD *)v54 + 3) = 0u;
      *(_OWORD *)v54 = 0u;
      *((_OWORD *)v54 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v54, v55);
    }
  }
}

WebCore::Style::RuleSet *WebCore::Style::ScopeRuleSets::resetAuthorStyle(WebCore::Style::ScopeRuleSets *this)
{
  WebCore::Style::RuleSet *v2;
  void *v3;
  WebCore::Style::RuleSet *result;
  WTF *v5;
  void *v6;

  *((_BYTE *)this + 317) = 1;
  v2 = (WebCore::Style::RuleSet *)WTF::fastMalloc((WTF *)0x328);
  WebCore::Style::RuleSet::RuleSet(v2);
  result = *(WebCore::Style::RuleSet **)this;
  *(_QWORD *)this = v2;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(result, v3);
      return (WebCore::Style::RuleSet *)WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void WebCore::Style::ScopeRuleSets::appendAuthorStyleSheets(WebCore::Style::ScopeRuleSets *this, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::CSSStyleSheet *v9;
  WebCore::CSSStyleSheet **v10;
  uint64_t v11;
  WebCore::CSSStyleSheet *v12;
  const WebCore::StyleSheetContents *v13;
  WebCore::CSSStyleSheet *v14;
  void *v15;
  _QWORD v16[2];
  char v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v5 = *(_DWORD **)this;
  v6 = *((_QWORD *)this + 4);
  *v5 = **(_DWORD **)this + 1;
  v16[0] = v5;
  v16[1] = a3;
  v17 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  v21 = v6;
  v22 = 0;
  v27 = 0;
  v28 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v26 = 0;
  v29 = 1;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v7 = *(unsigned int *)(a2 + 12);
  if (!(_DWORD)v7)
  {
    WebCore::Style::ScopeRuleSets::collectFeatures(this);
    goto LABEL_22;
  }
  v9 = 0;
  v10 = *(WebCore::CSSStyleSheet ***)a2;
  v11 = 8 * v7;
  do
  {
    v12 = *v10;
    if (v9)
    {
      v13 = (const WebCore::StyleSheetContents *)*((_QWORD *)v9 + 3);
      if (v13 == *((const WebCore::StyleSheetContents **)v12 + 3))
      {
        if (!*((_DWORD *)v9 + 15) && !*((_DWORD *)v12 + 15))
        {
          if (*a4 && *(_DWORD *)(*a4 - 12))
            WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(a4, v12);
          goto LABEL_8;
        }
      }
      else
      {
        v13 = (const WebCore::StyleSheetContents *)*((_QWORD *)v12 + 3);
      }
    }
    else
    {
      v13 = (const WebCore::StyleSheetContents *)*((_QWORD *)v12 + 3);
    }
    WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)v16, v13, (unsigned __int8 **)v12 + 6);
    v14 = *v10;
    if (*a4 && *(_DWORD *)(*a4 - 12))
    {
      WebCore::Style::InspectorCSSOMWrappers::collect<WebCore::CSSStyleSheet>(a4, *v10);
      v14 = *v10;
    }
    if (v14)
      ++*((_DWORD *)v14 + 2);
    if (v9)
    {
      if (*((_DWORD *)v9 + 2) == 1)
        (*(void (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v9 + 8))(v9);
      else
        --*((_DWORD *)v9 + 2);
    }
    v9 = v14;
LABEL_8:
    ++v10;
    v11 -= 8;
  }
  while (v11);
  WebCore::Style::ScopeRuleSets::collectFeatures(this);
  if (v9)
  {
    if (*((_DWORD *)v9 + 2) == 1)
      (*(void (**)(WebCore::CSSStyleSheet *))(*(_QWORD *)v9 + 8))(v9);
    else
      --*((_DWORD *)v9 + 2);
  }
LABEL_22:
  WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)v16, v15);
}

WTF::StringImpl *WebCore::Style::Resolver::addUserAgentKeyframeStyle(WTF::StringImpl *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)a1;
  if ((_MergedGlobals_266 & 1) == 0)
  {
    qword_1ECE84C58 = 0;
    _MergedGlobals_266 = 1;
  }
  return WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>(&qword_1ECE84C58, (WTF::StringImpl *)(v1 + 24), a1, (uint64_t)v3);
}

double WebCore::Style::Resolver::State::setStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::RenderStyle *v4;
  WTF *v5;
  void *v6;
  double result;

  v3 = *a2;
  *a2 = 0;
  v4 = *(WebCore::RenderStyle **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  if (v4)
  {
    WebCore::RenderStyle::~RenderStyle(v4, a2);
    if (*(_DWORD *)v5)
    {
      result = 0.0;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v5, v6);
    }
  }
  return result;
}

void WebCore::Style::Resolver::defaultStyleForElement(WebCore::Style::Resolver *this@<X0>, const WebCore::Element *a2@<X1>, uint64_t *a3@<X8>)
{
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int *v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  WebCore::Document *v27;
  uint64_t v28;
  WebCore *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WebCore *v35;
  unsigned int *v36;
  uint64_t v37;
  WTF::StringImpl **v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WebCore *v41;
  _OWORD v42[6];
  uint64_t v43;
  char v44;
  _DWORD *v45;
  __int16 v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  int v53;
  __int16 v54;
  BOOL v55;
  WTF *v56;
  float v57;
  __int16 v58;

  WebCore::RenderStyle::createPtrWithRegisteredInitialValues(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 1328) + 296), a3);
  v43 = 256;
  memset(v42, 0, sizeof(v42));
  v44 = 0;
  v6 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v6 += 2;
  v45 = v6;
  v46 = 0;
  v47 = 2143289344;
  v48 = 0;
  v49 = 0;
  v50 = 26216000;
  v51 = 257;
  v53 = 57344;
  v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = 0x100000001;
  *((_QWORD *)v7 + 1) = 0;
  v56 = v7;
  v8 = WebCore::WebKitFontFamilyNames::standardFamily;
  if (WebCore::WebKitFontFamilyNames::standardFamily)
    *(_DWORD *)WebCore::WebKitFontFamilyNames::standardFamily += 2;
  *((_QWORD *)v7 + 1) = v8;
  v58 = 32;
  v9 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v10 = *(_QWORD *)(v9 + 680);
  v11 = (int)*(double *)(v10 + 336);
  v12 = (v11 - 9);
  if (v12 > 7)
  {
    v16 = *(double *)(v10 + 504);
    if (v16 < 1.0)
      v16 = 1.0;
    if (v16 <= (float)v11)
      v16 = (float)v11;
  }
  else
  {
    v13 = (int *)((char *)&WebCore::Style::quirksFontSizeTable + 32 * v12 + 12);
    v14 = &WebCore::Style::strictFontSizeTable[8 * v12 + 3];
    if (*(_BYTE *)(v9 + 3384) == 2)
      v15 = v13;
    else
      v15 = v14;
    v16 = (float)*v15;
  }
  v17 = 3.4028e38;
  if (v16 < 3.4028e38)
  {
    v17 = -3.4028e38;
    if (v16 > -3.4028e38)
      v17 = v16;
  }
  v57 = v17;
  if (a2)
  {
    v18 = *a3;
    if ((*((_WORD *)a2 + 14) & 0x20) != 0)
    {
      if (fabsf(v16) >= 0.00000011921)
      {
LABEL_25:
        v24 = 2139095039;
        if (v16 < 3.4028e38)
        {
          v24 = -8388609;
          if (v16 > -3.4028e38)
            v24 = LODWORD(v16);
        }
        goto LABEL_28;
      }
LABEL_57:
      v24 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    v18 = *a3;
  }
  v19 = *(_QWORD *)(v18 + 24);
  v20 = *(float *)(v19 + 184);
  v21 = *(_QWORD *)(v9 + 528);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
    {
      if ((*(_BYTE *)(v19 + 236) & 0x20) == 0)
        v20 = v20 * *(float *)(v22 + 596);
    }
  }
  if (fabsf(v16) < 0.00000011921)
    goto LABEL_57;
  v16 = v16 * v20;
  v23 = (int)*(double *)(v10 + 504);
  if (v16 < (float)(int)*(double *)(v10 + 496))
    v16 = (float)(int)*(double *)(v10 + 496);
  if (v16 < (float)v23)
    v16 = (float)v23;
  v24 = 1232348160;
  if (v16 < 1000000.0)
    goto LABEL_25;
LABEL_28:
  v52 = v24;
  v25 = *(_DWORD *)(v10 + 696);
  v54 = 0;
  v55 = (v25 & 0x800) != 0;
  WebCore::RenderStyle::setFontDescription(v18, (uint64_t)v42);
  v26 = *((_QWORD *)this + 2);
  if (v26)
    v27 = *(WebCore::Document **)(v26 + 8);
  else
    v27 = 0;
  v28 = *(_QWORD *)(v18 + 32);
  v29 = (WebCore *)*((_QWORD *)v27 + 331);
  if (!v29)
  {
    v27 = (WebCore::Document *)WebCore::Document::ensureFontSelector(v27);
    v29 = v27;
  }
  v30 = v28 + 32;
  ++*((_DWORD *)v29 + 2);
  v41 = v29;
  v31 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v31 || (v32 = *(_QWORD *)(v31 + 96)) == 0)
    v32 = WebCore::threadGlobalDataSlow(v27);
  v33 = *(_QWORD *)(v32 + 80);
  if (!v33)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v32);
    v33 = *(_QWORD *)(v32 + 80);
  }
  WebCore::FontCache::updateFontCascade(v33, v30, &v41);
  v35 = v41;
  v41 = 0;
  if (v35)
  {
    if (*((_DWORD *)v35 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v35 + 8))(v35);
    else
      --*((_DWORD *)v35 + 2);
  }
  v36 = (unsigned int *)v56;
  v56 = 0;
  if (v36)
  {
    if (*v36 == 1)
    {
      v37 = v36[1];
      if ((_DWORD)v37)
      {
        v38 = (WTF::StringImpl **)(v36 + 2);
        v39 = 8 * v37;
        do
        {
          v40 = *v38;
          *v38 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v34);
            else
              *(_DWORD *)v40 -= 2;
          }
          ++v38;
          v39 -= 8;
        }
        while (v39);
      }
      WTF::fastFree((WTF *)v36, v34);
    }
    else
    {
      --*v36;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v42, v34);
}

void WebCore::Style::Resolver::State::setParentStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::RenderStyle *v4;
  WTF *v5;
  void *v6;

  v3 = *a2;
  *a2 = 0;
  v4 = *(WebCore::RenderStyle **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (v4)
  {
    WebCore::RenderStyle::~RenderStyle(v4, a2);
    if (*(_DWORD *)v5)
    {
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v5, v6);
    }
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 24);
}

double WebCore::Style::Resolver::styleForKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderStyle **v4;
  const WebCore::StyleRuleKeyframe *v5;
  const WebCore::StyleRuleKeyframe *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::RenderStyle *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _QWORD *v34;
  WebCore::RenderStyle *v35;
  _DWORD *v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::Node *v43;
  WebCore::Node *v44;
  WebCore::Node *v45;
  WTF::StringImpl *v46;
  void *v47;
  void *v48;
  void *v49;
  double result;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  void *v53;
  _DWORD *v54;
  uint64_t v55;
  WebCore::RenderStyle **v56;
  WebCore::Node *v57;
  WebCore::RenderStyle *v58;
  WebCore::RenderStyle *v59;
  WebCore::Node *v60;
  uint64_t v61;
  __n128 v62;
  char v63;
  char v64;
  char v65;
  char v66;
  __int16 v67[24];
  BOOL v68;
  uint64_t v69;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v55 = v3;
  v56 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v2;
  v14 = 0;
  v15 = 0;
  v16 = *((_QWORD *)v5 + 1);
  while (1)
  {
    v17 = *(unsigned int *)(v16 + 4);
    if ((v17 & 8) != 0)
      break;
    if (v14 >= v17 >> 4)
      goto LABEL_23;
    v18 = v16 + 8 + 2 * v14;
    v19 = (unsigned int *)(v16 + 8 + 5 * v14 + ((v17 >> 3) & 0x1FFFFFFE));
    v20 = *v19 | ((unint64_t)*((unsigned __int8 *)v19 + 4) << 32);
LABEL_5:
    v21 = *(_WORD *)v18 & 0x3FF;
    if (WebCore::CSSProperty::isDirectionAwareProperty(v21))
      *(_BYTE *)(v55 + 42) = 1;
    if (v20)
    {
      v22 = WebCore::CSSProperty::resolveDirectionAwareProperty(v21, (*(_DWORD *)(v10 + 40) >> 26) & 1, (unsigned __int16)*(_DWORD *)(v10 + 44) >> 13);
      if (v22 != 46 && v22 != 55)
      {
        if (((*(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16)) & 0x3F800) == 0xE800)
        {
          v54 = *(_DWORD **)(v20 + 8);
          if (v54)
            *v54 += 2;
          v62.n128_u64[0] = (unint64_t)v54;
          v62.n128_u32[2] = 1;
        }
        else
        {
          v62.n128_u16[0] = v22;
          v62.n128_u32[2] = 0;
        }
        WebCore::BlendingKeyframe::addProperty(v55, (uint64_t)&v62);
        if (v62.n128_u32[2] != -1)
          ((void (*)(__int16 *, __n128 *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                     + v62.n128_u32[2]))(v67, &v62);
      }
      if (((*(unsigned __int16 *)(v20 + 4) | (*(unsigned __int8 *)(v20 + 6) << 16)) & 0x3F800) != 0)
      {
        v23 = 0;
      }
      else if ((*(_WORD *)(v20 + 4) & 0x7F) == 0x50)
      {
        v23 = *(_WORD *)(v20 + 8);
      }
      else
      {
        v23 = 0;
      }
      v15 |= v23 == 4;
    }
    v14 = (v14 + 1);
  }
  if (*(_DWORD *)(v16 + 28) > v14)
  {
    v18 = *(_QWORD *)(v16 + 16) + 16 * v14;
    v20 = *(_QWORD *)(v18 + 8);
    goto LABEL_5;
  }
LABEL_23:
  v24 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
  v25 = *(_QWORD *)(v24 + 1272);
  if (v25)
    v26 = v25 == v12;
  else
    v26 = 1;
  if (v26)
  {
    v27 = *(_QWORD *)(v24 + 1952);
  }
  else
  {
    v27 = *(_QWORD *)(v8 + 16);
    if (!v27)
    {
      v28 = *(_QWORD *)(v25 + 64) & 0xFFFFFFFFFFFFLL;
      if (v28)
      {
        if ((*(_BYTE *)(v28 + 45) & 2) != 0)
        {
          v28 = *(_QWORD *)(v28 + 32);
          if (v28)
            v28 = *(_QWORD *)(v28 + 8);
        }
        v27 = v28 + 80;
      }
      else
      {
        v27 = 0;
      }
    }
  }
  v29 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v29 = 0;
  v30 = *(_DWORD **)(v10 + 8);
  ++*v30;
  *((_QWORD *)v29 + 1) = v30;
  *((_QWORD *)v29 + 2) = *(_QWORD *)(v10 + 16);
  v31 = *(_DWORD **)(v10 + 24);
  ++*v31;
  *((_QWORD *)v29 + 3) = v31;
  v32 = *(_DWORD **)(v10 + 32);
  ++*v32;
  *((_QWORD *)v29 + 4) = v32;
  *((_QWORD *)v29 + 5) = *(_QWORD *)(v10 + 40);
  *((_QWORD *)v29 + 6) = 0;
  v33 = *(_DWORD **)(v10 + 56);
  ++*v33;
  *((_QWORD *)v29 + 7) = v33;
  if (*(_QWORD *)v8)
    v34 = *(_QWORD **)v8;
  else
    v34 = (_QWORD *)v10;
  v35 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v35 = 0;
  v36 = (_DWORD *)v34[1];
  ++*v36;
  *((_QWORD *)v35 + 1) = v36;
  *((_QWORD *)v35 + 2) = v34[2];
  v37 = (_DWORD *)v34[3];
  ++*v37;
  *((_QWORD *)v35 + 3) = v37;
  v38 = (_DWORD *)v34[4];
  ++*v38;
  *((_QWORD *)v35 + 4) = v38;
  *((_QWORD *)v35 + 5) = v34[5];
  *((_QWORD *)v35 + 6) = 0;
  v39 = (_DWORD *)v34[7];
  ++*v39;
  *((_QWORD *)v35 + 7) = v39;
  WebCore::Style::ElementRuleCollector::ElementRuleCollector((WebCore::Style::ElementRuleCollector *)v67, (const WebCore::Element *)v12, (WebCore::Style::RuleSet **)(v13 + 32), *(WebCore::Style::SelectorMatchingState **)(v8 + 24));
  v41 = (*(_QWORD *)(v10 + 16) >> 43) & 0x1FLL;
  if ((_DWORD)v41)
  {
    v51 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 40) + 592);
    if (v51)
      *(_DWORD *)v51 += 4;
    v62.n128_u32[0] = v41;
    v62.n128_u64[1] = (unint64_t)v51;
    v63 = 0;
    v64 = 0;
    v65 = 1;
    WebCore::Style::ElementRuleCollector::setPseudoElementRequest((uint64_t)v67, &v62);
    std::optional<WebCore::Style::PseudoElementRequest>::~optional((uint64_t)&v62, v52);
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v40);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  if ((v15 & 1) != 0)
  {
    v68 = *(_QWORD *)(v13 + 360) == WebCore::printAtomData;
    WebCore::Style::ElementRuleCollector::matchUARules((WebCore::Style::ElementRuleCollector *)v67, v40);
    WebCore::Style::ElementRuleCollector::matchUserRules(v67, v53);
  }
  WebCore::Style::ElementRuleCollector::addAuthorKeyframeRules((WebCore::ImmutableStyleProperties *)v67, v6);
  v42 = *(_QWORD *)(v13 + 16);
  if (v42)
    v42 = *(_QWORD *)(v42 + 8);
  *(_DWORD *)(v42 + 24) += 2;
  v57 = (WebCore::Node *)v42;
  v58 = v35;
  *(_DWORD *)(v12 + 24) += 2;
  v59 = (WebCore::RenderStyle *)v27;
  v60 = (WebCore::Node *)v12;
  v61 = 0;
  WebCore::Style::Builder::Builder((unsigned __int8 *)&v62, (uint64_t)v29, (uint64_t *)&v57, v69, 4, 3u, 0);
  v43 = v60;
  v60 = 0;
  if (v43)
  {
    if (*((_DWORD *)v43 + 6) == 2)
    {
      if ((*((_WORD *)v43 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v43);
    }
    else
    {
      *((_DWORD *)v43 + 6) -= 2;
    }
  }
  v44 = v57;
  v57 = 0;
  if (v44)
  {
    if (*((_DWORD *)v44 + 6) == 2)
    {
      if ((*((_WORD *)v44 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v44);
    }
    else
    {
      *((_DWORD *)v44 + 6) -= 2;
    }
  }
  v66 = 1;
  WebCore::Style::Builder::applyAllProperties((WebCore::Style::Builder *)&v62);
  if ((*(_QWORD *)(v10 + 16) & 0xF80000000000) != 0)
    v45 = 0;
  else
    v45 = (WebCore::Node *)v12;
  v57 = *(WebCore::Node **)(*(_QWORD *)(v13 + 16) + 8);
  v58 = v35;
  v59 = v35;
  v60 = v45;
  WebCore::Style::Adjuster::adjust((WebCore::Style::Adjuster *)&v57, v29, 0);
  *v56 = v29;
  WebCore::Style::Builder::~Builder((WebCore::Style::Builder *)&v62, v46);
  WebCore::Style::ElementRuleCollector::~ElementRuleCollector((WebCore::Style::ElementRuleCollector *)v67, v47);
  WebCore::RenderStyle::~RenderStyle(v35, v48);
  if (*(_DWORD *)v35)
  {
    result = 0.0;
    *((_OWORD *)v35 + 2) = 0u;
    *((_OWORD *)v35 + 3) = 0u;
    *(_OWORD *)v35 = 0u;
    *((_OWORD *)v35 + 1) = 0u;
  }
  else
  {
    WTF::fastFree(v35, v49);
  }
  return result;
}

__n128 WebCore::Style::ElementRuleCollector::setPseudoElementRequest(uint64_t a1, __n128 *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __n128 result;
  WTF::StringImpl *v7;
  _DWORD *v8;

  if (*(unsigned __int8 *)(a1 + 96) == a2[2].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 96))
    {
      *(_DWORD *)(a1 + 56) = a2->n128_u32[0];
      v4 = (_DWORD *)a2->n128_u64[1];
      if (v4)
        *v4 += 2;
      v5 = *(WTF::StringImpl **)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v4;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v5 -= 2;
      }
      result = a2[1];
      *(_BYTE *)(a1 + 88) = a2[2].n128_u8[0];
      *(__n128 *)(a1 + 72) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 96))
  {
    v7 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_BYTE *)(a1 + 96) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 56) = a2->n128_u32[0];
    v8 = (_DWORD *)a2->n128_u64[1];
    if (v8)
      *v8 += 2;
    *(_QWORD *)(a1 + 64) = v8;
    result = a2[1];
    *(_DWORD *)(a1 + 88) = a2[2].n128_u32[0];
    *(__n128 *)(a1 + 72) = result;
    *(_BYTE *)(a1 + 96) = 1;
  }
  return result;
}

uint64_t std::optional<WebCore::Style::PseudoElementRequest>::~optional(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF::StringImpl **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_3::operator()(uint64_t a1)
{
  _DWORD *v1;
  unsigned __int8 v2;
  WTF::StringImpl *v4;
  unsigned int v5;
  _DWORD *v6;

  WebCore::StyleProperties::getPropertyCSSValue(a1, 46, &v6);
  v1 = v6;
  if (v6)
  {
    v5 = (unsigned __int16)WebCore::toCompositeOperation((uint64_t)v6);
    if (v5 <= 0x100)
      v2 = 0;
    else
      v2 = v5;
    if (*v1 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v1, v4);
    else
      *v1 -= 2;
  }
  else
  {
    return 0;
  }
  return v2;
}

uint64_t WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_0::operator()(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  _DWORD **v10;
  _DWORD **v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;

  ++*(_DWORD *)a3;
  WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_1::operator()(&v17, *(_QWORD *)(a3 + 8));
  if (*(_DWORD *)a3 == 1)
    WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(a3, v6);
  else
    --*(_DWORD *)a3;
  v7 = *(uint64_t **)(a2 + 8);
  v8 = *v7;
  result = (uint64_t)WTF::HashTable<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>,WTF::HashTraits<WTF::RefPtr<WebCore::MutationObserver,WTF::RawPtrTraits<WebCore::MutationObserver>,WTF::DefaultRefDerefTraits<WebCore::MutationObserver>>>>::begin((_QWORD *)*v7);
  v10 = (_DWORD **)result;
  v12 = v11;
  if (v8)
    v13 = (_DWORD **)(v8 + 8 * *(unsigned int *)(v8 - 4));
  else
    v13 = 0;
  v14 = v17;
  if (v13 == (_DWORD **)result)
  {
LABEL_14:
    result = WTF::HashTable<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>>>::add((uint64_t)&v16, v7, (uint64_t *)&v17);
    *a1 = v14;
  }
  else
  {
    while (1)
    {
      v15 = *v10;
      if (*v10)
        ++v15[2];
      *a1 = v15;
      if (v14 == v15)
        break;
      if (v14 && v15)
      {
        result = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(_QWORD *)v14 + 32))(v14, v15);
        if ((result & 1) != 0)
          goto LABEL_16;
        *a1 = 0;
      }
      else
      {
        *a1 = 0;
        if (!v15)
          goto LABEL_10;
      }
      if (v15[2] == 1)
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
      else
        --v15[2];
LABEL_10:
      while (++v10 != v12)
      {
        if ((unint64_t)*v10 + 1 > 1)
          goto LABEL_12;
      }
      v10 = v12;
LABEL_12:
      if (v10 == v13)
      {
        v7 = *(uint64_t **)(a2 + 8);
        goto LABEL_14;
      }
    }
    if (!v14)
      return result;
LABEL_16:
    if (v14[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
    else
      --v14[2];
  }
  return result;
}

uint64_t *WTF::HashMap<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>,WTF::HashTableTraits>::~HashMap(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  double *v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (double *)(v3 + 24);
      do
      {
        if (*(v5 - 3) != -INFINITY)
        {
          v6 = *(_DWORD **)v5;
          *v5 = 0.0;
          if (v6)
          {
            if (*v6 == 1)
              WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v6, a2);
            else
              --*v6;
          }
          v7 = (_DWORD *)*((_QWORD *)v5 - 2);
          *(v5 - 2) = 0.0;
          if (v7)
          {
            if (v7[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
            else
              --v7[2];
          }
        }
        v5 += 4;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WebCore::Style::Resolver::keyframeStylesForAnimation(_DWORD **a1, uint64_t a2, int a3, int a4, WebCore::BlendingKeyframes *this)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WebCore::RenderStyle *v15;
  WTF *v16;
  void *v17;
  const WebCore::CSSValue *v18;
  WebCore::TimingFunction *v19;
  WebCore::TimingFunction *v20;
  void *v21;
  WTF::StringImpl *v23;
  WebCore::RenderStyle *v24;
  WebCore::RenderStyle *v25;
  unsigned __int16 v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WebCore::RenderStyle *v29;
  WebCore::TimingFunction *v30;
  WebCore::RenderStyle *v31;
  uint64_t (**v32)(WebCore::BlendingKeyframe *__hidden);
  __int128 v33;
  WebCore::RenderStyle *v34[3];
  uint64_t v35;
  unsigned int v36;

  WebCore::BlendingKeyframes::clear(this);
  WebCore::Style::Resolver::keyframeRulesForName(a1, this, (uint64_t)&v35);
  if (v36)
  {
    v9 = v35;
    v28 = v35 + 8 * v36;
    do
    {
      v10 = *(unsigned int *)(*(_QWORD *)v9 + 28);
      if ((_DWORD)v10)
      {
        v11 = *(uint64_t **)(*(_QWORD *)v9 + 16);
        v12 = 8 * v10;
        do
        {
          v13 = *v11;
          v32 = off_1E338CBD0;
          v33 = 0u;
          memset(v34, 0, 19);
          WebCore::Style::Resolver::styleForKeyframe((uint64_t)a1, a2);
          v15 = v34[0];
          v34[0] = v31;
          if (v15)
          {
            WebCore::RenderStyle::~RenderStyle(v15, v14);
            if (*(_DWORD *)v16)
            {
              *((_OWORD *)v16 + 2) = 0u;
              *((_OWORD *)v16 + 3) = 0u;
              *(_OWORD *)v16 = 0u;
              *((_OWORD *)v16 + 1) = 0u;
            }
            else
            {
              WTF::fastFree(v16, v17);
            }
          }
          v31 = 0;
          *(_QWORD *)&v33 = v13;
          WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(*(_QWORD *)v9 + 8), 55, &v30);
          v19 = v30;
          if (v30)
          {
            WebCore::TimingFunction::createFromCSSValue((uint64_t)v30, v18, (uint64_t *)&v29);
            v24 = v29;
            if (v29)
              ++*((_DWORD *)v29 + 2);
            v25 = v34[1];
            v34[1] = v24;
            if (v25)
            {
              if (*((_DWORD *)v25 + 2) == 1)
              {
                (*(void (**)(WebCore::RenderStyle *))(*(_QWORD *)v25 + 16))(v25);
                v24 = v29;
              }
              else
              {
                --*((_DWORD *)v25 + 2);
              }
            }
            v29 = 0;
            if (v24)
            {
              if (*((_DWORD *)v24 + 2) == 1)
                (*(void (**)(WebCore::RenderStyle *))(*(_QWORD *)v24 + 16))(v24);
              else
                --*((_DWORD *)v24 + 2);
            }
            if (*(_DWORD *)v19 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v23);
            else
              *(_DWORD *)v19 -= 2;
          }
          WebCore::StyleProperties::getPropertyCSSValue(*(_QWORD *)(*(_QWORD *)v9 + 8), 46, &v30);
          v20 = v30;
          if (v30)
          {
            v26 = WebCore::toCompositeOperation((uint64_t)v30);
            if (v26 >= 0x100u)
              LOWORD(v34[2]) = v26 | 0x100;
            if (*(_DWORD *)v20 == 2)
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v27);
            else
              *(_DWORD *)v20 -= 2;
          }
          WebCore::BlendingKeyframes::insert((uint64_t)this, (unint64_t)&v32);
          WebCore::BlendingKeyframes::updatePropertiesMetadata((uint64_t)this, *(const WebCore::StyleProperties **)(*(_QWORD *)v9 + 8));
          WebCore::BlendingKeyframe::~BlendingKeyframe((WebCore::BlendingKeyframe *)&v32, v21);
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      v9 += 8;
    }
    while (v9 != v28);
  }
  return WTF::Vector<WTF::Ref<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v8);
}

double WebCore::Style::Resolver::styleForPseudoElement@<D0>(WebCore::Style::Resolver *this@<X0>, WebCore::Element *a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  const WebCore::RenderStyle *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::Element *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  WebCore::RenderStyle *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  const WTF::StringImpl *v22;
  uint64_t v23;
  WebCore::Style::RuleSet *v24;
  WebCore::Style::Resolver *v25;
  WebCore::Style::RuleSet *v26;
  int v27;
  WebCore::Style::RuleSet *v28;
  WebCore::Style::RuleSet *v29;
  char v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *v34;
  int v35;
  int v36;
  WTF::StringImpl *v37;
  void *v38;
  double result;
  void *v40;
  _DWORD *v41;
  WebCore::RenderStyle *v42;
  WTF **v43;
  uint64_t v44;
  const WebCore::RenderStyle *v45;
  WebCore::RenderStyle *v46;
  const WebCore::RenderStyle *v47;
  uint64_t v48;
  _DWORD *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  WTF *v57;
  WTF *v58;
  WTF *v59;
  WTF::StringImpl *v61;
  WebCore::Style::RuleSet *v62;
  WebCore::Style::RuleSet *v63;
  WebCore::Style::RuleSet *v64;
  WebCore::Style::RuleSet *v65;
  WebCore::Node *v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  void *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD **v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD **v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD **v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  WTF *v95;
  void *v96;
  WTF *v97;
  void *v98;
  WTF *v99;
  void *v100;
  WTF *v101;
  void *v102;
  uint64_t v103;
  WTF *v104;
  uint64_t v106;
  WTF *v107;
  uint64_t v109;
  WTF *v110;
  uint64_t v112;
  WTF *v113;
  uint64_t v114;
  WTF *v115;
  uint64_t v116;
  WTF *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  _DWORD *v122;
  _DWORD **v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t v129;
  _DWORD *v130;
  _DWORD **v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD **v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  __int128 v146;
  WebCore::Style::RuleSet *v147;
  uint64_t v148;
  void *v149;
  void *v150;
  WTF *v151;
  uint64_t v153;
  WTF *v154;
  uint64_t v156;
  WTF *v157;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unsigned int *v162;
  _DWORD *v163;
  unint64_t v164;
  unsigned int *v165;
  _DWORD *v166;
  unint64_t v167;
  unsigned int *v168;
  _DWORD *v169;
  WTF *v170;
  void *v171;
  unint64_t v172;
  unsigned int *v173;
  _DWORD *v174;
  unint64_t v175;
  unsigned int *v176;
  _DWORD *v177;
  unint64_t v178;
  unsigned int *v179;
  _DWORD *v180;
  void *v181;
  void *v182;
  uint64_t v183;
  _DWORD *v184;
  WebCore::RenderStyle **v185;
  void *v186;
  void *v187;
  uint64_t v188;
  WebCore::Node *v189;
  WebCore::Style::RuleSet *v190;
  WebCore::Style::RuleSet *v191;
  WebCore::Style::RuleSet *v192;
  WebCore::Style::RuleSet *v193;
  uint64_t v194;
  __int16 v195;
  int v196;
  WTF::StringImpl *v197;
  __int128 v198;
  int v199;
  char v200;
  char v201;
  WTF *v202;
  uint64_t v203;
  _QWORD v204[193];
  WTF *v205;
  uint64_t v206;
  char v207;
  _DWORD *v208;
  WTF *v209;
  uint64_t v210;
  _DWORD v211[34];
  WebCore::RenderStyle *v212;
  WebCore::RenderStyle *v213;
  WebCore::Element *v214;
  WebCore::RenderStyle *v215;
  const WebCore::RenderStyle *v216;
  __int128 v217;
  __int128 v218;
  unsigned __int8 *v219[2];
  __int128 v220;
  const WebCore::RenderStyle *v221;
  __int128 v222;
  __int128 v223;
  char v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  char v238;

  v10 = *(const WebCore::RenderStyle **)a4;
  v11 = *(_QWORD *)(a4 + 16);
  v214 = a2;
  v215 = 0;
  v216 = v10;
  v217 = 0u;
  v218 = 0u;
  v12 = *(_QWORD *)(*((_QWORD *)a2 + 5) + 8);
  v13 = *(WebCore::Element **)(v12 + 1272);
  if (v13)
    v14 = v13 == a2;
  else
    v14 = 1;
  if (v14)
  {
    v11 = *(_QWORD *)(v12 + 1952);
  }
  else if (!v11)
  {
    v11 = *((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL;
    if (v11)
    {
      if ((*(_BYTE *)((*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v11 = *(_QWORD *)((*((_QWORD *)v13 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v11)
          v11 = *(_QWORD *)(v11 + 8);
      }
      v11 += 80;
    }
  }
  *((_QWORD *)&v217 + 1) = v11;
  if (v10)
  {
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 1328) + 296);
    if (*(_BYTE *)(v15 + 32))
    {
      *(_BYTE *)(v15 + 32) = 0;
      v185 = (WebCore::RenderStyle **)(v15 + 24);
      v188 = v15;
      WebCore::RenderStyle::createPtr(&v220);
      std::exchange[abi:sn180100]<std::unique_ptr<WebCore::RenderStyle>,std::unique_ptr<WebCore::RenderStyle>>(v185, (WebCore::RenderStyle **)&v220, &v189);
      std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100]((WebCore::RenderStyle **)&v220, v186);
      WebCore::Style::CustomPropertyRegistry::initialValuePrototypeStyle(void)const::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits> const>((_DWORD *)v188, (_QWORD *)(v188 + 16));
      WebCore::Style::CustomPropertyRegistry::initialValuePrototypeStyle(void)const::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits> const>((_DWORD *)v188, (_QWORD *)(v188 + 8));
      WebCore::RenderStyle::deduplicateCustomProperties(*(_QWORD **)(v188 + 24), (WTF **)v189);
      std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v189, v187);
      v15 = v188;
    }
    v16 = *(_QWORD **)(v15 + 24);
    v17 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v17 = 0;
    v18 = (_DWORD *)v16[1];
    ++*v18;
    *((_QWORD *)v17 + 1) = v18;
    *((_QWORD *)v17 + 2) = v16[2];
    v19 = (_DWORD *)v16[3];
    ++*v19;
    *((_QWORD *)v17 + 3) = v19;
    v20 = (_DWORD *)v16[4];
    ++*v20;
    *((_QWORD *)v17 + 4) = v20;
    *((_QWORD *)v17 + 5) = v16[5];
    *((_QWORD *)v17 + 6) = 0;
    v21 = (_DWORD *)v16[7];
    ++*v21;
    *((_QWORD *)v17 + 7) = v21;
    v215 = v17;
    WebCore::RenderStyle::inheritFrom(v17, v10, v22);
  }
  else
  {
    WebCore::Style::Resolver::defaultStyleForElement(this, a2, (uint64_t *)&v213);
    WebCore::Style::Resolver::State::setStyle((uint64_t)&v214, (uint64_t *)&v213);
    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v213, v181);
    WebCore::RenderStyle::clonePtr(v215, &v212);
    WebCore::Style::Resolver::State::setParentStyle((uint64_t)&v214, (uint64_t *)&v212);
    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v212, v182);
  }
  v23 = *(_QWORD *)(a4 + 24);
  *((_DWORD *)a2 + 6) += 2;
  v189 = a2;
  v24 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 4);
  ++*(_DWORD *)v24;
  v190 = v24;
  v25 = this;
  if (*((_BYTE *)this + 348))
  {
    v25 = this;
    do
    {
      v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v25 + 8) + 16) + 8) + 1328);
      if (!*(_QWORD *)(v103 + 32))
      {
        if (*(_QWORD *)(v103 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v103);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v103);
        v160 = *(_QWORD *)(v103 + 32);
        if (*(_DWORD *)(v160 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v160 + 32));
        if (*(_BYTE *)(v160 + 242)
          || *(_BYTE *)(v160 + 243)
          || *(_BYTE *)(v160 + 244)
          || *(_BYTE *)(v160 + 245)
          || *(_BYTE *)(v160 + 246)
          || *(_BYTE *)(v160 + 247)
          || *(_BYTE *)(v160 + 248))
        {
          *(_BYTE *)(v103 + 236) = 1;
        }
      }
      v25 = *(WebCore::Style::Resolver **)(v103 + 32);
    }
    while (*((_BYTE *)v25 + 348));
  }
  v26 = (WebCore::Style::RuleSet *)*((_QWORD *)v25 + 7);
  if (v26)
    ++*(_DWORD *)v26;
  v191 = v26;
  if (WebCore::Style::UserAgentStyle::mediaQueryStyleSheet)
  {
    v27 = *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 68)
        + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 52)
        + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 84)
        + *(_DWORD *)(WebCore::Style::UserAgentStyle::mediaQueryStyleSheet + 100);
    if (!*((_QWORD *)this + 5) || v27 != *((_DWORD *)this + 86))
    {
      *((_DWORD *)this + 86) = v27;
      v143 = *((_QWORD *)this + 8) + 360;
      v144 = WTF::fastMalloc((WTF *)0x328);
      *(_DWORD *)v144 = 1;
      v146 = 0uLL;
      *(_OWORD *)(v144 + 8) = 0u;
      *(_OWORD *)(v144 + 24) = 0u;
      *(_OWORD *)(v144 + 40) = 0u;
      *(_OWORD *)(v144 + 56) = 0u;
      *(_QWORD *)(v144 + 72) = v144 + 88;
      *(_QWORD *)(v144 + 80) = 1;
      *(_QWORD *)(v144 + 120) = v144 + 136;
      *(_QWORD *)(v144 + 128) = 1;
      *(_QWORD *)(v144 + 168) = v144 + 184;
      *(_QWORD *)(v144 + 176) = 1;
      *(_QWORD *)(v144 + 216) = v144 + 232;
      *(_QWORD *)(v144 + 224) = 1;
      *(_QWORD *)(v144 + 264) = v144 + 280;
      *(_QWORD *)(v144 + 272) = 1;
      *(_QWORD *)(v144 + 312) = v144 + 328;
      *(_QWORD *)(v144 + 320) = 1;
      *(_QWORD *)(v144 + 360) = v144 + 376;
      *(_QWORD *)(v144 + 368) = 1;
      *(_QWORD *)(v144 + 408) = v144 + 424;
      *(_QWORD *)(v144 + 416) = 1;
      *(_QWORD *)(v144 + 645) = 0;
      *(_OWORD *)(v144 + 616) = 0u;
      *(_OWORD *)(v144 + 632) = 0u;
      *(_OWORD *)(v144 + 584) = 0u;
      *(_OWORD *)(v144 + 600) = 0u;
      *(_OWORD *)(v144 + 552) = 0u;
      *(_OWORD *)(v144 + 568) = 0u;
      *(_OWORD *)(v144 + 520) = 0u;
      *(_OWORD *)(v144 + 536) = 0u;
      *(_OWORD *)(v144 + 488) = 0u;
      *(_OWORD *)(v144 + 504) = 0u;
      *(_OWORD *)(v144 + 456) = 0u;
      *(_OWORD *)(v144 + 472) = 0u;
      *(_QWORD *)(v144 + 672) = 0;
      *(_DWORD *)(v144 + 680) = 0;
      *(_OWORD *)(v144 + 656) = 0u;
      *(_OWORD *)(v144 + 688) = 0u;
      *(_OWORD *)(v144 + 704) = 0u;
      *(_OWORD *)(v144 + 720) = 0u;
      *(_OWORD *)(v144 + 736) = 0u;
      *(_OWORD *)(v144 + 752) = 0u;
      *(_OWORD *)(v144 + 768) = 0u;
      *(_OWORD *)(v144 + 784) = 0u;
      *(_WORD *)(v144 + 800) = 0;
      v147 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v144;
      if (v147)
      {
        if (*(_DWORD *)v147 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v147, v145);
          WTF::fastFree(v170, v171);
          v146 = 0uLL;
          v144 = *((_QWORD *)this + 5);
        }
        else
        {
          --*(_DWORD *)v147;
        }
      }
      v148 = *((_QWORD *)this + 8);
      ++*(_DWORD *)v144;
      *(_QWORD *)&v220 = v144;
      *((_QWORD *)&v220 + 1) = v143;
      LOBYTE(v221) = 0;
      v222 = v146;
      v223 = v146;
      v224 = 0;
      v225 = v148;
      v226 = 0;
      v229 = 0;
      v227 = 0;
      v228 = 0;
      v230 = 0;
      v234 = 0;
      v235 = 0;
      v237 = 0;
      v236 = 0;
      v238 = 0;
      v233 = 0;
      v231 = 0;
      v232 = 0;
      v219[1] = 0;
      v219[0] = 0;
      WebCore::Style::RuleSetBuilder::addRulesFromSheet((uint64_t)&v220, (const WebCore::StyleSheetContents *)WebCore::Style::UserAgentStyle::mediaQueryStyleSheet, v219);
      WTF::Vector<WebCore::MQ::MediaQuery,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v219, v149);
      WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)&v220, v150);
    }
  }
  v28 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 5);
  if (v28)
    ++*(_DWORD *)v28;
  v192 = v28;
  v29 = (WebCore::Style::RuleSet *)*((_QWORD *)this + 6);
  if (v29)
    ++*(_DWORD *)v29;
  v193 = v29;
  v194 = v23;
  v195 = 0;
  LOBYTE(v196) = 0;
  v200 = 0;
  v201 = 0;
  v202 = (WTF *)v204;
  v203 = 64;
  v204[192] = 0;
  v206 = 0;
  v205 = 0;
  v30 = *((_BYTE *)a2 + 30) & 1;
  v207 = 0;
  v31 = WTF::fastMalloc((WTF *)0x50);
  *(_BYTE *)v31 = v30;
  *(_WORD *)(v31 + 1) = 0;
  *(_OWORD *)(v31 + 40) = 0u;
  *(_OWORD *)(v31 + 24) = 0u;
  *(_OWORD *)(v31 + 8) = 0u;
  *(_QWORD *)(v31 + 56) = v31 + 72;
  *(_QWORD *)(v31 + 64) = 4;
  v208 = (_DWORD *)v31;
  v209 = (WTF *)v211;
  v210 = 8;
  v211[32] = 0;
  v33 = *a3;
  if (*a3)
  {
    v34 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
    if (v34)
    {
      v35 = *(_DWORD *)v34;
      *(_DWORD *)v34 += 2;
      v220 = *((_OWORD *)a3 + 1);
      LODWORD(v221) = a3[8];
      v196 = v33;
      v36 = v35 + 4;
      if (v200)
      {
        *(_DWORD *)v34 = v36;
LABEL_27:
        v37 = v197;
        v197 = v34;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2)
            WTF::StringImpl::destroy(v37, v32);
          else
            *(_DWORD *)v37 -= 2;
        }
        v198 = v220;
        LOBYTE(v199) = (_BYTE)v221;
        goto LABEL_31;
      }
      *(_DWORD *)v34 = v36;
    }
    else
    {
      v220 = *((_OWORD *)a3 + 1);
      LODWORD(v221) = a3[8];
      v196 = v33;
      if (v200)
        goto LABEL_27;
    }
    v197 = v34;
    v198 = v220;
    v199 = (int)v221;
    v200 = 1;
LABEL_31:
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v32);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  HIBYTE(v195) = *((_QWORD *)this + 45) == WebCore::printAtomData;
  WebCore::Style::ElementRuleCollector::matchUARules((WebCore::Style::ElementRuleCollector *)&v189, v32);
  if (*((_BYTE *)this + 496))
  {
    WebCore::Style::ElementRuleCollector::matchUserRules((__int16 *)&v189, v38);
    WebCore::Style::ElementRuleCollector::matchAuthorRules((WebCore::Style::ElementRuleCollector *)&v189, v40);
  }
  v41 = v208;
  if (!v208[5] && !v208[9] && !v208[13])
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 24) = 0;
    goto LABEL_54;
  }
  v42 = v215;
  *((_QWORD *)v215 + 2) = *((_QWORD *)v215 + 2) & 0xFFFF07FFFFFFFFFFLL | ((unint64_t)(*a3 & 0x1F) << 43);
  v44 = *((_QWORD *)a3 + 1);
  v43 = (WTF **)(a3 + 2);
  if (v44)
    WebCore::RenderStyle::setPseudoElementNameArgument(v42, v43);
  WebCore::Style::Resolver::applyMatchedProperties((uint64_t)this, (uint64_t)&v214);
  v45 = *(const WebCore::RenderStyle **)(a4 + 8);
  v46 = v215;
  *(_QWORD *)&v220 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  *((_QWORD *)&v220 + 1) = v216;
  if (v45)
    v47 = v45;
  else
    v47 = v216;
  v221 = v47;
  *(_QWORD *)&v222 = 0;
  WebCore::Style::Adjuster::adjust((WebCore::Style::Adjuster *)&v220, v215, (const WebCore::RenderStyle *)v218);
  v48 = *((_QWORD *)v46 + 2);
  if ((v48 & 0xF80000000000) == 0x300000000000)
  {
    if ((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) == 0
      || (*(_BYTE *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0xF8) & 2) == 0)
    {
      goto LABEL_51;
    }
  }
  else if ((v48 & 0xF80000000000) != 0x380000000000
         || (*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) == 0
         || (*(_BYTE *)((*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFLL) + 0xF8) & 4) == 0)
  {
    goto LABEL_51;
  }
  WebCore::RenderStyle::setIsInVisibilityAdjustmentSubtree(v46);
  v48 = *((_QWORD *)v46 + 2);
LABEL_51:
  if ((v48 & 0x20000000) != 0)
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 3407) = 1;
  v41 = 0;
  v215 = 0;
  v49 = v208;
  v208 = 0;
  *(_QWORD *)a5 = v46;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = v49;
  *(_BYTE *)(a5 + 24) = 1;
LABEL_54:
  v50 = v209;
  if (v211 == (_DWORD *)v209 && v209)
  {
    v208 = 0;
    if (!v41)
      goto LABEL_70;
    v51 = (WTF *)*((_QWORD *)v41 + 7);
    if (v41 + 18 != (_DWORD *)v51 && v51)
    {
      *((_QWORD *)v41 + 7) = 0;
      v41[16] = 0;
      WTF::fastFree(v51, v38);
    }
    v52 = v41[13];
    if ((_DWORD)v52)
    {
      v71 = (uint64_t *)*((_QWORD *)v41 + 5);
      v72 = &v71[2 * v52];
      do
      {
        v73 = *v71;
        *v71 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 1)
          {
            v77 = *(unsigned int *)(v73 + 4);
            if ((v77 & 8) != 0)
            {
              v78 = *(unsigned int *)(v73 + 28);
              if ((_DWORD)v78)
              {
                v76 = 16 * v78;
                v75 = (_DWORD **)(*(_QWORD *)(v73 + 16) + 8);
                do
                {
                  v74 = *v75;
                  *v75 = 0;
                  if (v74)
                  {
                    if (*v74 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v74, (WTF::StringImpl *)v38);
                    else
                      *v74 -= 2;
                  }
                  v75 += 2;
                  v76 -= 16;
                }
                while (v76);
              }
              v104 = *(WTF **)(v73 + 16);
              if ((WTF *)(v73 + 32) != v104 && v104 != 0)
              {
                *(_QWORD *)(v73 + 16) = 0;
                *(_DWORD *)(v73 + 24) = 0;
                WTF::fastFree(v104, v38);
              }
              v106 = *(_QWORD *)(v73 + 8);
              *(_QWORD *)(v73 + 8) = 0;
              if (v106)
                (*(void (**)(uint64_t))(*(_QWORD *)v106 + 8))(v106);
            }
            else if (v77 >= 0x10)
            {
              v161 = 0;
              v162 = (unsigned int *)(v73 + ((v77 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v163 = (_DWORD *)(*v162 | ((unint64_t)*((unsigned __int8 *)v162 + 4) << 32));
                if (*v163 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v163, (WTF::StringImpl *)v38);
                else
                  *v163 -= 2;
                ++v161;
                v162 = (unsigned int *)((char *)v162 + 5);
              }
              while (v161 < (unint64_t)*(unsigned int *)(v73 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v73, v38);
          }
          else
          {
            --*(_DWORD *)v73;
          }
        }
        v71 += 2;
      }
      while (v71 != v72);
    }
    v53 = (WTF *)*((_QWORD *)v41 + 5);
    if (v53)
    {
      *((_QWORD *)v41 + 5) = 0;
      v41[12] = 0;
      WTF::fastFree(v53, v38);
    }
    v54 = v41[9];
    if ((_DWORD)v54)
    {
      v79 = (uint64_t *)*((_QWORD *)v41 + 3);
      v80 = &v79[2 * v54];
      do
      {
        v81 = *v79;
        *v79 = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 1)
          {
            v85 = *(unsigned int *)(v81 + 4);
            if ((v85 & 8) != 0)
            {
              v86 = *(unsigned int *)(v81 + 28);
              if ((_DWORD)v86)
              {
                v84 = 16 * v86;
                v83 = (_DWORD **)(*(_QWORD *)(v81 + 16) + 8);
                do
                {
                  v82 = *v83;
                  *v83 = 0;
                  if (v82)
                  {
                    if (*v82 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v82, (WTF::StringImpl *)v38);
                    else
                      *v82 -= 2;
                  }
                  v83 += 2;
                  v84 -= 16;
                }
                while (v84);
              }
              v107 = *(WTF **)(v81 + 16);
              if ((WTF *)(v81 + 32) != v107 && v107 != 0)
              {
                *(_QWORD *)(v81 + 16) = 0;
                *(_DWORD *)(v81 + 24) = 0;
                WTF::fastFree(v107, v38);
              }
              v109 = *(_QWORD *)(v81 + 8);
              *(_QWORD *)(v81 + 8) = 0;
              if (v109)
                (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
            }
            else if (v85 >= 0x10)
            {
              v164 = 0;
              v165 = (unsigned int *)(v81 + ((v85 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v166 = (_DWORD *)(*v165 | ((unint64_t)*((unsigned __int8 *)v165 + 4) << 32));
                if (*v166 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v166, (WTF::StringImpl *)v38);
                else
                  *v166 -= 2;
                ++v164;
                v165 = (unsigned int *)((char *)v165 + 5);
              }
              while (v164 < (unint64_t)*(unsigned int *)(v81 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v81, v38);
          }
          else
          {
            --*(_DWORD *)v81;
          }
        }
        v79 += 2;
      }
      while (v79 != v80);
    }
    v55 = (WTF *)*((_QWORD *)v41 + 3);
    if (v55)
    {
      *((_QWORD *)v41 + 3) = 0;
      v41[8] = 0;
      WTF::fastFree(v55, v38);
    }
    v56 = v41[5];
    if ((_DWORD)v56)
    {
      v87 = (uint64_t *)*((_QWORD *)v41 + 1);
      v88 = &v87[2 * v56];
      do
      {
        v89 = *v87;
        *v87 = 0;
        if (v89)
        {
          if (*(_DWORD *)v89 == 1)
          {
            v93 = *(unsigned int *)(v89 + 4);
            if ((v93 & 8) != 0)
            {
              v94 = *(unsigned int *)(v89 + 28);
              if ((_DWORD)v94)
              {
                v92 = 16 * v94;
                v91 = (_DWORD **)(*(_QWORD *)(v89 + 16) + 8);
                do
                {
                  v90 = *v91;
                  *v91 = 0;
                  if (v90)
                  {
                    if (*v90 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v90, (WTF::StringImpl *)v38);
                    else
                      *v90 -= 2;
                  }
                  v91 += 2;
                  v92 -= 16;
                }
                while (v92);
              }
              v110 = *(WTF **)(v89 + 16);
              if ((WTF *)(v89 + 32) != v110 && v110 != 0)
              {
                *(_QWORD *)(v89 + 16) = 0;
                *(_DWORD *)(v89 + 24) = 0;
                WTF::fastFree(v110, v38);
              }
              v112 = *(_QWORD *)(v89 + 8);
              *(_QWORD *)(v89 + 8) = 0;
              if (v112)
                (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
            }
            else if (v93 >= 0x10)
            {
              v167 = 0;
              v168 = (unsigned int *)(v89 + ((v93 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v169 = (_DWORD *)(*v168 | ((unint64_t)*((unsigned __int8 *)v168 + 4) << 32));
                if (*v169 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v169, (WTF::StringImpl *)v38);
                else
                  *v169 -= 2;
                ++v167;
                v168 = (unsigned int *)((char *)v168 + 5);
              }
              while (v167 < (unint64_t)*(unsigned int *)(v89 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v89, v38);
          }
          else
          {
            --*(_DWORD *)v89;
          }
        }
        v87 += 2;
      }
      while (v87 != v88);
    }
    goto LABEL_67;
  }
  if (v211 != (_DWORD *)v209 && v209)
  {
    v209 = 0;
    LODWORD(v210) = 0;
    WTF::fastFree(v50, v38);
    v41 = v208;
  }
  v208 = 0;
  if (v41)
  {
    v113 = (WTF *)*((_QWORD *)v41 + 7);
    if (v41 + 18 != (_DWORD *)v113 && v113)
    {
      *((_QWORD *)v41 + 7) = 0;
      v41[16] = 0;
      WTF::fastFree(v113, v38);
    }
    v114 = v41[13];
    if ((_DWORD)v114)
    {
      v127 = (uint64_t *)*((_QWORD *)v41 + 5);
      v128 = &v127[2 * v114];
      do
      {
        v129 = *v127;
        *v127 = 0;
        if (v129)
        {
          if (*(_DWORD *)v129 == 1)
          {
            v133 = *(unsigned int *)(v129 + 4);
            if ((v133 & 8) != 0)
            {
              v134 = *(unsigned int *)(v129 + 28);
              if ((_DWORD)v134)
              {
                v132 = 16 * v134;
                v131 = (_DWORD **)(*(_QWORD *)(v129 + 16) + 8);
                do
                {
                  v130 = *v131;
                  *v131 = 0;
                  if (v130)
                  {
                    if (*v130 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v130, (WTF::StringImpl *)v38);
                    else
                      *v130 -= 2;
                  }
                  v131 += 2;
                  v132 -= 16;
                }
                while (v132);
              }
              v154 = *(WTF **)(v129 + 16);
              if ((WTF *)(v129 + 32) != v154 && v154 != 0)
              {
                *(_QWORD *)(v129 + 16) = 0;
                *(_DWORD *)(v129 + 24) = 0;
                WTF::fastFree(v154, v38);
              }
              v156 = *(_QWORD *)(v129 + 8);
              *(_QWORD *)(v129 + 8) = 0;
              if (v156)
                (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
            }
            else if (v133 >= 0x10)
            {
              v175 = 0;
              v176 = (unsigned int *)(v129 + ((v133 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v177 = (_DWORD *)(*v176 | ((unint64_t)*((unsigned __int8 *)v176 + 4) << 32));
                if (*v177 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v177, (WTF::StringImpl *)v38);
                else
                  *v177 -= 2;
                ++v175;
                v176 = (unsigned int *)((char *)v176 + 5);
              }
              while (v175 < (unint64_t)*(unsigned int *)(v129 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v129, v38);
          }
          else
          {
            --*(_DWORD *)v129;
          }
        }
        v127 += 2;
      }
      while (v127 != v128);
    }
    v115 = (WTF *)*((_QWORD *)v41 + 5);
    if (v115)
    {
      *((_QWORD *)v41 + 5) = 0;
      v41[12] = 0;
      WTF::fastFree(v115, v38);
    }
    v116 = v41[9];
    if ((_DWORD)v116)
    {
      v135 = (uint64_t *)*((_QWORD *)v41 + 3);
      v136 = &v135[2 * v116];
      do
      {
        v137 = *v135;
        *v135 = 0;
        if (v137)
        {
          if (*(_DWORD *)v137 == 1)
          {
            v141 = *(unsigned int *)(v137 + 4);
            if ((v141 & 8) != 0)
            {
              v142 = *(unsigned int *)(v137 + 28);
              if ((_DWORD)v142)
              {
                v140 = 16 * v142;
                v139 = (_DWORD **)(*(_QWORD *)(v137 + 16) + 8);
                do
                {
                  v138 = *v139;
                  *v139 = 0;
                  if (v138)
                  {
                    if (*v138 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v138, (WTF::StringImpl *)v38);
                    else
                      *v138 -= 2;
                  }
                  v139 += 2;
                  v140 -= 16;
                }
                while (v140);
              }
              v157 = *(WTF **)(v137 + 16);
              if ((WTF *)(v137 + 32) != v157 && v157 != 0)
              {
                *(_QWORD *)(v137 + 16) = 0;
                *(_DWORD *)(v137 + 24) = 0;
                WTF::fastFree(v157, v38);
              }
              v159 = *(_QWORD *)(v137 + 8);
              *(_QWORD *)(v137 + 8) = 0;
              if (v159)
                (*(void (**)(uint64_t))(*(_QWORD *)v159 + 8))(v159);
            }
            else if (v141 >= 0x10)
            {
              v178 = 0;
              v179 = (unsigned int *)(v137 + ((v141 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v180 = (_DWORD *)(*v179 | ((unint64_t)*((unsigned __int8 *)v179 + 4) << 32));
                if (*v180 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v180, (WTF::StringImpl *)v38);
                else
                  *v180 -= 2;
                ++v178;
                v179 = (unsigned int *)((char *)v179 + 5);
              }
              while (v178 < (unint64_t)*(unsigned int *)(v137 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v137, v38);
          }
          else
          {
            --*(_DWORD *)v137;
          }
        }
        v135 += 2;
      }
      while (v135 != v136);
    }
    v117 = (WTF *)*((_QWORD *)v41 + 3);
    if (v117)
    {
      *((_QWORD *)v41 + 3) = 0;
      v41[8] = 0;
      WTF::fastFree(v117, v38);
    }
    v118 = v41[5];
    if ((_DWORD)v118)
    {
      v119 = (uint64_t *)*((_QWORD *)v41 + 1);
      v120 = &v119[2 * v118];
      do
      {
        v121 = *v119;
        *v119 = 0;
        if (v121)
        {
          if (*(_DWORD *)v121 == 1)
          {
            v125 = *(unsigned int *)(v121 + 4);
            if ((v125 & 8) != 0)
            {
              v126 = *(unsigned int *)(v121 + 28);
              if ((_DWORD)v126)
              {
                v124 = 16 * v126;
                v123 = (_DWORD **)(*(_QWORD *)(v121 + 16) + 8);
                do
                {
                  v122 = *v123;
                  *v123 = 0;
                  if (v122)
                  {
                    if (*v122 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v122, (WTF::StringImpl *)v38);
                    else
                      *v122 -= 2;
                  }
                  v123 += 2;
                  v124 -= 16;
                }
                while (v124);
              }
              v151 = *(WTF **)(v121 + 16);
              if ((WTF *)(v121 + 32) != v151 && v151 != 0)
              {
                *(_QWORD *)(v121 + 16) = 0;
                *(_DWORD *)(v121 + 24) = 0;
                WTF::fastFree(v151, v38);
              }
              v153 = *(_QWORD *)(v121 + 8);
              *(_QWORD *)(v121 + 8) = 0;
              if (v153)
                (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
            }
            else if (v125 >= 0x10)
            {
              v172 = 0;
              v173 = (unsigned int *)(v121 + ((v125 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v174 = (_DWORD *)(*v173 | ((unint64_t)*((unsigned __int8 *)v173 + 4) << 32));
                if (*v174 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v174, (WTF::StringImpl *)v38);
                else
                  *v174 -= 2;
                ++v172;
                v173 = (unsigned int *)((char *)v173 + 5);
              }
              while (v172 < (unint64_t)*(unsigned int *)(v121 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v121, v38);
          }
          else
          {
            --*(_DWORD *)v121;
          }
        }
        v119 += 2;
      }
      while (v119 != v120);
    }
LABEL_67:
    v57 = (WTF *)*((_QWORD *)v41 + 1);
    if (v57)
    {
      *((_QWORD *)v41 + 1) = 0;
      v41[4] = 0;
      WTF::fastFree(v57, v38);
    }
    WTF::fastFree((WTF *)v41, v38);
  }
LABEL_70:
  v58 = v205;
  if (HIDWORD(v206))
  {
    v183 = 8 * HIDWORD(v206);
    do
    {
      v184 = *(_DWORD **)v58;
      *(_QWORD *)v58 = 0;
      if (v184)
      {
        if (*v184 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v184, (WTF::StringImpl *)v38);
        else
          --*v184;
      }
      v58 = (WTF *)((char *)v58 + 8);
      v183 -= 8;
    }
    while (v183);
    v58 = v205;
  }
  if (v58)
  {
    v205 = 0;
    LODWORD(v206) = 0;
    WTF::fastFree(v58, v38);
  }
  v59 = v202;
  if (v204 != (_QWORD *)v202 && v202 != 0)
  {
    v202 = 0;
    LODWORD(v203) = 0;
    WTF::fastFree(v59, v38);
  }
  if (v200)
  {
    v61 = v197;
    v197 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v38);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  v62 = v193;
  v193 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v62, v38);
      WTF::fastFree(v97, v98);
    }
    else
    {
      --*(_DWORD *)v62;
    }
  }
  v63 = v192;
  v192 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v63, v38);
      WTF::fastFree(v99, v100);
    }
    else
    {
      --*(_DWORD *)v63;
    }
  }
  v64 = v191;
  v191 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v64, v38);
      WTF::fastFree(v101, v102);
    }
    else
    {
      --*(_DWORD *)v64;
    }
  }
  v65 = v190;
  v190 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v65, v38);
      WTF::fastFree(v95, v96);
    }
    else
    {
      --*(_DWORD *)v65;
    }
  }
  v66 = v189;
  v189 = 0;
  if (v66)
  {
    if (*((_DWORD *)v66 + 6) == 2)
    {
      if ((*((_WORD *)v66 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v66);
    }
    else
    {
      *((_DWORD *)v66 + 6) -= 2;
    }
  }
  if ((_QWORD)v218)
  {
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v218, v38);
    if (*(_DWORD *)v67)
    {
      result = 0.0;
      *((_OWORD *)v67 + 2) = 0u;
      *((_OWORD *)v67 + 3) = 0u;
      *(_OWORD *)v67 = 0u;
      *((_OWORD *)v67 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v67, v38);
    }
  }
  if ((_QWORD)v217)
  {
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v217, v38);
    if (*(_DWORD *)v68)
    {
      result = 0.0;
      *((_OWORD *)v68 + 2) = 0u;
      *((_OWORD *)v68 + 3) = 0u;
      *(_OWORD *)v68 = 0u;
      *((_OWORD *)v68 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v68, v38);
    }
  }
  if (v215)
  {
    WebCore::RenderStyle::~RenderStyle(v215, v38);
    if (*(_DWORD *)v69)
    {
      result = 0.0;
      *((_OWORD *)v69 + 2) = 0u;
      *((_OWORD *)v69 + 3) = 0u;
      *(_OWORD *)v69 = 0u;
      *((_OWORD *)v69 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v69, v70);
    }
  }
  return result;
}

WTF **WebCore::RenderStyle::setPseudoElementNameArgument(WebCore::RenderStyle *this, WTF **a2)
{
  WTF **result;
  uint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WTF *v8;
  uint64_t v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;

  v3 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  if (*(WTF **)(*(_QWORD *)(v3 + 40) + 592) != *a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    v7 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v7 == 1)
    {
      result = (WTF **)*((_QWORD *)v5 + 5);
    }
    else
    {
      v8 = v5;
      v9 = WTF::fastMalloc((WTF *)0x288);
      result = (WTF **)WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v9, (uint64_t)v7);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v8 + 5);
      *((_QWORD *)v8 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v6);
          WTF::fastFree(v13, v14);
          result = (WTF **)*((_QWORD *)v8 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    v11 = *a2;
    if (*a2)
      *(_DWORD *)v11 += 2;
    v12 = result[74];
    result[74] = v11;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        return (WTF **)WTF::StringImpl::destroy(v12, v6);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return result;
}

double WebCore::Style::Resolver::styleForPage(WebCore::Style::Resolver *this, uint64_t a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  WebCore::Node *v7;
  int v8;
  uint64_t v9;
  WebCore::Node *v10;
  uint64_t v11;
  WebCore::Node *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const WTF::StringImpl *v21;
  WebCore::RenderStyle *v22;
  WTF *v23;
  void *v24;
  WebCore::RenderStyle *v25;
  WebCore::Node *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::Node *v29;
  void *v30;
  WebCore::Node *v31;
  WebCore::Node *v32;
  WTF::StringImpl *v33;
  void *v34;
  double result;
  WTF *v36;
  WTF *v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD **v54;
  _DWORD *v55;
  WTF *v56;
  uint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  _DWORD *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD **v68;
  _DWORD *v69;
  WTF *v70;
  uint64_t v72;
  unint64_t v73;
  unsigned int *v74;
  _DWORD *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD **v82;
  _DWORD *v83;
  WTF *v84;
  uint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  _DWORD *v89;
  WebCore::Node *v90[3];
  WebCore::Node *v91;
  uint64_t v92;
  unsigned __int8 v93[15808];
  uint64_t v94;
  BOOL v95;
  __int16 v96;
  char v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  WTF *v101;
  uint64_t v102;
  uint64_t v103;
  WebCore::RenderStyle *v104;
  WebCore::Node *v105;
  WebCore::RenderStyle *v106;
  WebCore::Node *v107;
  __int128 v108;
  __int128 v109;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v5 = v4;
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
  v7 = *(WebCore::Node **)(v6 + 1272);
  if (v7 && (*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v8 = v3;
    v9 = v2;
    v10 = *(WebCore::Node **)(v6 + 1952);
    v105 = v7;
    v106 = 0;
    v107 = v10;
    v108 = 0u;
    v109 = 0u;
    v11 = *(_QWORD *)(*((_QWORD *)v7 + 5) + 8);
    v12 = *(WebCore::Node **)(v11 + 1272);
    if (v12)
      v13 = v12 == v7;
    else
      v13 = 1;
    if (v13)
    {
      v14 = *(_QWORD *)(v11 + 1952);
    }
    else
    {
      v14 = *((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFLL;
      if (v14)
      {
        if ((*(_BYTE *)((*((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          v14 = *(_QWORD *)((*((_QWORD *)v12 + 8) & 0xFFFFFFFFFFFFLL) + 0x20);
          if (v14)
            v14 = *(_QWORD *)(v14 + 8);
        }
        v14 += 80;
      }
    }
    *((_QWORD *)&v108 + 1) = v14;
    {
      WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    }
    v15 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v15 = 0;
    v16 = qword_1ECE913C0;
    ++*(_DWORD *)qword_1ECE913C0;
    *(_QWORD *)(v15 + 8) = v16;
    *(_QWORD *)(v15 + 16) = qword_1ECE913C8;
    v17 = qword_1ECE913D0;
    ++*(_DWORD *)qword_1ECE913D0;
    *(_QWORD *)(v15 + 24) = v17;
    v18 = qword_1ECE913D8;
    ++*(_DWORD *)qword_1ECE913D8;
    *(_QWORD *)(v15 + 32) = v18;
    *(_QWORD *)(v15 + 40) = qword_1ECE913E0;
    *(_QWORD *)(v15 + 48) = 0;
    v19 = qword_1ECE913F0;
    ++*(_DWORD *)qword_1ECE913F0;
    *(_QWORD *)(v15 + 56) = v19;
    v104 = (WebCore::RenderStyle *)v15;
    WebCore::Style::Resolver::State::setStyle((uint64_t)&v105, (uint64_t *)&v104);
    v22 = v104;
    v104 = 0;
    if (v22)
    {
      WebCore::RenderStyle::~RenderStyle(v22, v20);
      if (*(_DWORD *)v23)
      {
        *((_OWORD *)v23 + 2) = 0u;
        *((_OWORD *)v23 + 3) = 0u;
        *(_OWORD *)v23 = 0u;
        *((_OWORD *)v23 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v23, v24);
      }
    }
    v25 = v106;
    v26 = (WebCore::Node *)*((_QWORD *)&v108 + 1);
    WebCore::RenderStyle::inheritFrom(v106, *((const WebCore::RenderStyle **)&v108 + 1), v21);
    v27 = *((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL;
    if ((*(_BYTE *)(v27 + 0x2D) & 2) != 0)
      v27 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)v7 + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
    v95 = (*(_DWORD *)(v27 + 120) & 0x4000000) != 0;
    v96 = 0;
    v97 = 0;
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    v94 = v9 + 32;
    v101 = (WTF *)&v103;
    v102 = 4;
    WebCore::Style::PageRuleCollector::matchAllPageRules((WebCore::Style::PageRuleCollector *)&v94, v8);
    v28 = *(_QWORD *)(v9 + 16);
    if (v28)
      v28 = *(_QWORD *)(v28 + 8);
    *(_DWORD *)(v28 + 24) += 2;
    v29 = v105;
    v90[0] = (WebCore::Node *)v28;
    v90[1] = v107;
    v90[2] = v26;
    if (v105)
      *((_DWORD *)v105 + 6) += 2;
    v91 = v29;
    v92 = *((_QWORD *)&v109 + 1);
    WebCore::Style::Builder::Builder(v93, (uint64_t)v25, (uint64_t *)v90, (uint64_t)&v96, 4, 3u, 0);
    v31 = v91;
    v91 = 0;
    if (v31)
    {
      if (*((_DWORD *)v31 + 6) == 2)
      {
        if ((*((_WORD *)v31 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v31, v30);
      }
      else
      {
        *((_DWORD *)v31 + 6) -= 2;
      }
    }
    v32 = v90[0];
    v90[0] = 0;
    if (v32)
    {
      if (*((_DWORD *)v32 + 6) == 2)
      {
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32, v30);
      }
      else
      {
        *((_DWORD *)v32 + 6) -= 2;
      }
    }
    WebCore::Style::Builder::applyAllProperties((WebCore::Style::Builder *)v93);
    v106 = 0;
    *v5 = v25;
    WebCore::Style::Builder::~Builder((WebCore::Style::Builder *)v93, v33);
    v36 = v101;
    if (&v103 != (uint64_t *)v101 && v101)
    {
      v101 = 0;
      LODWORD(v102) = 0;
      WTF::fastFree(v36, v34);
    }
    if (HIDWORD(v100))
    {
      v48 = (uint64_t *)v100;
      v49 = (uint64_t *)(v100 + 16 * HIDWORD(v100));
      do
      {
        v50 = *v48;
        *v48 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 1)
          {
            v51 = *(unsigned int *)(v50 + 4);
            if ((v51 & 8) != 0)
            {
              v52 = *(unsigned int *)(v50 + 28);
              if ((_DWORD)v52)
              {
                v53 = 16 * v52;
                v54 = (_DWORD **)(*(_QWORD *)(v50 + 16) + 8);
                do
                {
                  v55 = *v54;
                  *v54 = 0;
                  if (v55)
                  {
                    if (*v55 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v55, (WTF::StringImpl *)v34);
                    else
                      *v55 -= 2;
                  }
                  v54 += 2;
                  v53 -= 16;
                }
                while (v53);
              }
              v56 = *(WTF **)(v50 + 16);
              if ((WTF *)(v50 + 32) != v56 && v56 != 0)
              {
                *(_QWORD *)(v50 + 16) = 0;
                *(_DWORD *)(v50 + 24) = 0;
                WTF::fastFree(v56, v34);
              }
              v58 = *(_QWORD *)(v50 + 8);
              *(_QWORD *)(v50 + 8) = 0;
              if (v58)
                (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
            }
            else if (v51 >= 0x10)
            {
              v59 = 0;
              v60 = (unsigned int *)(v50 + ((v51 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v61 = (_DWORD *)(*v60 | ((unint64_t)*((unsigned __int8 *)v60 + 4) << 32));
                if (*v61 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v61, (WTF::StringImpl *)v34);
                else
                  *v61 -= 2;
                ++v59;
                v60 = (unsigned int *)((char *)v60 + 5);
              }
              while (v59 < (unint64_t)*(unsigned int *)(v50 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v50, v34);
          }
          else
          {
            --*(_DWORD *)v50;
          }
        }
        v48 += 2;
      }
      while (v48 != v49);
    }
    v37 = (WTF *)v100;
    if ((_QWORD)v100)
    {
      *(_QWORD *)&v100 = 0;
      DWORD2(v100) = 0;
      WTF::fastFree(v37, v34);
    }
    if (HIDWORD(v99))
    {
      v62 = (uint64_t *)v99;
      v63 = (uint64_t *)(v99 + 16 * HIDWORD(v99));
      do
      {
        v64 = *v62;
        *v62 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 1)
          {
            v65 = *(unsigned int *)(v64 + 4);
            if ((v65 & 8) != 0)
            {
              v66 = *(unsigned int *)(v64 + 28);
              if ((_DWORD)v66)
              {
                v67 = 16 * v66;
                v68 = (_DWORD **)(*(_QWORD *)(v64 + 16) + 8);
                do
                {
                  v69 = *v68;
                  *v68 = 0;
                  if (v69)
                  {
                    if (*v69 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v69, (WTF::StringImpl *)v34);
                    else
                      *v69 -= 2;
                  }
                  v68 += 2;
                  v67 -= 16;
                }
                while (v67);
              }
              v70 = *(WTF **)(v64 + 16);
              if ((WTF *)(v64 + 32) != v70 && v70 != 0)
              {
                *(_QWORD *)(v64 + 16) = 0;
                *(_DWORD *)(v64 + 24) = 0;
                WTF::fastFree(v70, v34);
              }
              v72 = *(_QWORD *)(v64 + 8);
              *(_QWORD *)(v64 + 8) = 0;
              if (v72)
                (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
            }
            else if (v65 >= 0x10)
            {
              v73 = 0;
              v74 = (unsigned int *)(v64 + ((v65 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v75 = (_DWORD *)(*v74 | ((unint64_t)*((unsigned __int8 *)v74 + 4) << 32));
                if (*v75 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v75, (WTF::StringImpl *)v34);
                else
                  *v75 -= 2;
                ++v73;
                v74 = (unsigned int *)((char *)v74 + 5);
              }
              while (v73 < (unint64_t)*(unsigned int *)(v64 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v64, v34);
          }
          else
          {
            --*(_DWORD *)v64;
          }
        }
        v62 += 2;
      }
      while (v62 != v63);
    }
    v38 = (WTF *)v99;
    if ((_QWORD)v99)
    {
      *(_QWORD *)&v99 = 0;
      DWORD2(v99) = 0;
      WTF::fastFree(v38, v34);
    }
    if (HIDWORD(v98))
    {
      v76 = (uint64_t *)v98;
      v77 = (uint64_t *)(v98 + 16 * HIDWORD(v98));
      do
      {
        v78 = *v76;
        *v76 = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 1)
          {
            v79 = *(unsigned int *)(v78 + 4);
            if ((v79 & 8) != 0)
            {
              v80 = *(unsigned int *)(v78 + 28);
              if ((_DWORD)v80)
              {
                v81 = 16 * v80;
                v82 = (_DWORD **)(*(_QWORD *)(v78 + 16) + 8);
                do
                {
                  v83 = *v82;
                  *v82 = 0;
                  if (v83)
                  {
                    if (*v83 == 2)
                      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v83, (WTF::StringImpl *)v34);
                    else
                      *v83 -= 2;
                  }
                  v82 += 2;
                  v81 -= 16;
                }
                while (v81);
              }
              v84 = *(WTF **)(v78 + 16);
              if ((WTF *)(v78 + 32) != v84 && v84 != 0)
              {
                *(_QWORD *)(v78 + 16) = 0;
                *(_DWORD *)(v78 + 24) = 0;
                WTF::fastFree(v84, v34);
              }
              v86 = *(_QWORD *)(v78 + 8);
              *(_QWORD *)(v78 + 8) = 0;
              if (v86)
                (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
            }
            else if (v79 >= 0x10)
            {
              v87 = 0;
              v88 = (unsigned int *)(v78 + ((v79 >> 3) & 0x1FFFFFFE) + 8);
              do
              {
                v89 = (_DWORD *)(*v88 | ((unint64_t)*((unsigned __int8 *)v88 + 4) << 32));
                if (*v89 == 2)
                  WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v89, (WTF::StringImpl *)v34);
                else
                  *v89 -= 2;
                ++v87;
                v88 = (unsigned int *)((char *)v88 + 5);
              }
              while (v87 < (unint64_t)*(unsigned int *)(v78 + 4) >> 4);
            }
            WTF::fastFree((WTF *)v78, v34);
          }
          else
          {
            --*(_DWORD *)v78;
          }
        }
        v76 += 2;
      }
      while (v76 != v77);
    }
    v39 = (WTF *)v98;
    if ((_QWORD)v98)
    {
      *(_QWORD *)&v98 = 0;
      DWORD2(v98) = 0;
      WTF::fastFree(v39, v34);
    }
    if ((_QWORD)v109)
    {
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v109, v34);
      if (*(_DWORD *)v40)
      {
        result = 0.0;
        *((_OWORD *)v40 + 2) = 0u;
        *((_OWORD *)v40 + 3) = 0u;
        *(_OWORD *)v40 = 0u;
        *((_OWORD *)v40 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v40, v34);
      }
    }
    if ((_QWORD)v108)
    {
      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v108, v34);
      if (*(_DWORD *)v41)
      {
        result = 0.0;
        *((_OWORD *)v41 + 2) = 0u;
        *((_OWORD *)v41 + 3) = 0u;
        *(_OWORD *)v41 = 0u;
        *((_OWORD *)v41 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v41, v42);
      }
    }
  }
  else
  {
    {
      WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    }
    v43 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v43 = 0;
    v44 = qword_1ECE913C0;
    ++*(_DWORD *)qword_1ECE913C0;
    *(_QWORD *)(v43 + 8) = v44;
    *(_QWORD *)(v43 + 16) = qword_1ECE913C8;
    v45 = qword_1ECE913D0;
    ++*(_DWORD *)qword_1ECE913D0;
    *(_QWORD *)(v43 + 24) = v45;
    v46 = qword_1ECE913D8;
    ++*(_DWORD *)qword_1ECE913D8;
    *(_QWORD *)(v43 + 32) = v46;
    *(_QWORD *)(v43 + 40) = qword_1ECE913E0;
    *(_QWORD *)(v43 + 48) = 0;
    v47 = qword_1ECE913F0;
    ++*(_DWORD *)qword_1ECE913F0;
    *(_QWORD *)(v43 + 56) = v47;
    *v5 = v43;
  }
  return result;
}

void WebCore::Style::Resolver::pseudoStyleRulesForElement(uint64_t a1@<X0>, const WebCore::Element *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  _QWORD *v12;
  _DWORD **v13;
  uint64_t v14;
  _DWORD *v15;
  __n128 v16;
  __int128 v17;
  int v18;
  char v19;
  __int16 v20[24];
  BOOL v21;
  BOOL v22;
  char v23;
  _DWORD **v24;
  unsigned int v25;

  if (a2)
  {
    WebCore::Style::ElementRuleCollector::ElementRuleCollector((WebCore::Style::ElementRuleCollector *)v20, a2, (WebCore::Style::RuleSet **)(a1 + 32), 0);
    v23 = 1;
    if (*(_BYTE *)(a3 + 40))
    {
      v16.n128_u32[0] = *(_DWORD *)a3;
      v10 = *(WTF::StringImpl **)(a3 + 8);
      if (v10)
      {
        *(_DWORD *)v10 += 2;
        v16.n128_u64[1] = (unint64_t)v10;
        v17 = *(_OWORD *)(a3 + 16);
        v18 = *(_DWORD *)(a3 + 32);
        v19 = 1;
        WebCore::Style::ElementRuleCollector::setPseudoElementRequest((uint64_t)v20, &v16);
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      else
      {
        v16.n128_u64[1] = 0;
        v17 = *(_OWORD *)(a3 + 16);
        v18 = *(_DWORD *)(a3 + 32);
        v19 = 1;
        WebCore::Style::ElementRuleCollector::setPseudoElementRequest((uint64_t)v20, &v16);
      }
    }
    v22 = *(_QWORD *)(a1 + 360) == WebCore::printAtomData;
    v21 = (a4 & 8) != 0;
    if ((a4 & 2) != 0)
    {
      WebCore::Style::ElementRuleCollector::matchUARules((WebCore::Style::ElementRuleCollector *)v20, v9);
      if (*(_BYTE *)(a1 + 496))
        WebCore::Style::ElementRuleCollector::matchUserRules(v20, v9);
    }
    if ((a4 & 4) != 0 && *(_BYTE *)(a1 + 496))
      WebCore::Style::ElementRuleCollector::matchAuthorRules((WebCore::Style::ElementRuleCollector *)v20, v9);
    v11 = v25;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 12) = v11;
    if (!(_DWORD)v11)
      goto LABEL_19;
    if (!(v11 >> 29))
    {
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a5 + 8) = v11;
      *(_QWORD *)a5 = v12;
      if (v25)
      {
        v13 = v24;
        v14 = 8 * v25;
        do
        {
          v15 = *v13;
          if (*v13)
            ++*v15;
          *v12++ = v15;
          ++v13;
          v14 -= 8;
        }
        while (v14);
      }
LABEL_19:
      WebCore::Style::ElementRuleCollector::~ElementRuleCollector((WebCore::Style::ElementRuleCollector *)v20, v9);
      return;
    }
    __break(0xC471u);
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
}

void WebCore::Style::Resolver::setViewTransitionStyles(uint64_t a1, int a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  WebCore::MutableCSSSelector *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl **v20;
  WTF *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::MutableCSSSelector *v32;
  WTF *v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WebCore::MutableCSSSelector *v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  uint64_t v41;
  WebCore::MutableCSSSelector *v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  uint64_t v46;
  WTF *v47;
  void *v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF *v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  WTF *v74;
  WTF::StringImpl *v75;
  WebCore::MutableCSSSelector *v76;
  WTF *v77;
  WTF::StringImpl *v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v8 = *a4;
    *a4 = 0;
    v54 = 0;
    v55 = 0;
    v9 = (WebCore::MutableCSSSelector *)WTF::fastMalloc((WTF *)0x10);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = 786433;
    v10[1] = 0;
    *(_QWORD *)v9 = v10;
    *((_QWORD *)v9 + 1) = 0;
    v76 = v9;
    **(_DWORD **)v9 = **(_DWORD **)v9 & 0xFFFFFE0F | 0x80;
    **(_DWORD **)v9 = **(_DWORD **)v9 & 0xFFFE01FF | 0x8800;
    v11 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, 1uLL, (unint64_t)&v76);
    v12 = HIDWORD(v55);
    v13 = v54;
    v14 = *v11;
    *v11 = 0;
    *((_QWORD *)v13 + v12) = v14;
    HIDWORD(v55) = v12 + 1;
    v15 = WTF::fastMalloc((WTF *)0x10);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = 786433;
    v16[1] = 0;
    *(_QWORD *)v15 = v16;
    *(_QWORD *)(v15 + 8) = 0;
    *(_DWORD *)v16 = *(_DWORD *)v16 & 0xFFFFFE0F | 0x90;
    **(_DWORD **)v15 = **(_DWORD **)v15 & 0xFFFE01FF | (a2 << 9);
    v75 = 0;
    switch(a2)
    {
      case 22:
      case 23:
      case 24:
      case 25:
        WTF::AtomStringImpl::add();
        v18 = v75;
        v75 = v78;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
        break;
      default:
        break;
    }
    WebCore::CSSSelector::setValue(*(WTF::StringImpl ***)v15, (const WTF::AtomString *)&v75, 0);
    v19 = *a3;
    if (*a3)
      *(_DWORD *)v19 += 2;
    v78 = v19;
    v79 = 0;
    WTF::FixedVector<WebCore::PossiblyQuotedIdentifier>::FixedVector(&v74, (uint64_t)&v78, 1);
    v20 = *(WTF::StringImpl ***)v15;
    v21 = v74;
    v74 = 0;
    v77 = v21;
    WebCore::CSSSelector::setArgumentList((uint64_t)v20, (WTF::StringImpl *)&v77);
    v23 = v77;
    v77 = 0;
    if (v23)
    {
      v25 = (WTF::StringImpl **)((char *)v23 + 8);
      v24 = *(unsigned int *)v23;
      if ((_DWORD)v24)
      {
        v50 = 16 * v24;
        do
        {
          v51 = *v25;
          *v25 = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, v22);
            else
              *(_DWORD *)v51 -= 2;
          }
          v25 += 2;
          v50 -= 16;
        }
        while (v50);
      }
      WTF::fastFree(v23, v22);
    }
    v26 = v74;
    v74 = 0;
    if (v26)
    {
      v28 = (WTF::StringImpl **)((char *)v26 + 8);
      v27 = *(unsigned int *)v26;
      if ((_DWORD)v27)
      {
        v52 = 16 * v27;
        do
        {
          v53 = *v28;
          *v28 = 0;
          if (v53)
          {
            if (*(_DWORD *)v53 == 2)
              WTF::StringImpl::destroy(v53, v22);
            else
              *(_DWORD *)v53 -= 2;
          }
          v28 += 2;
          v52 -= 16;
        }
        while (v52);
      }
      WTF::fastFree(v26, v22);
    }
    v29 = v78;
    v78 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v22);
      else
        *(_DWORD *)v29 -= 2;
    }
    if (!HIDWORD(v55))
    {
      __break(0xC471u);
      JUMPOUT(0x1965A8AC8);
    }
    v30 = *(_QWORD *)v54;
    do
    {
      v31 = v30;
      v30 = *(_QWORD *)(v30 + 8);
    }
    while (v30);
    **(_DWORD **)v31 &= 0xFFFFFFF0;
    v32 = *(WebCore::MutableCSSSelector **)(v31 + 8);
    *(_QWORD *)(v31 + 8) = v15;
    if (v32)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v32, v22);
      WTF::fastFree(v33, v34);
    }
    WebCore::CSSSelectorList::CSSSelectorList(&v78, (uint64_t)&v54);
    v36 = v75;
    v75 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v35);
      else
        *(_DWORD *)v36 -= 2;
    }
    v37 = v76;
    v76 = 0;
    if (v37)
    {
      WebCore::MutableCSSSelector::~MutableCSSSelector(v37, v35);
      WTF::fastFree(v38, v39);
    }
    if (HIDWORD(v55))
    {
      v40 = v54;
      v41 = 8 * HIDWORD(v55);
      do
      {
        v42 = *(WebCore::MutableCSSSelector **)v40;
        *(_QWORD *)v40 = 0;
        if (v42)
        {
          WebCore::MutableCSSSelector::~MutableCSSSelector(v42, v35);
          WTF::fastFree(v43, v44);
        }
        v40 = (WTF *)((char *)v40 + 8);
        v41 -= 8;
      }
      while (v41);
    }
    v45 = v54;
    if (v54)
    {
      v54 = 0;
      LODWORD(v55) = 0;
      WTF::fastFree(v45, v35);
    }
    v46 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)v46 = 1;
    *(_BYTE *)(v46 + 4) = *(_BYTE *)(v46 + 4) & 0xC0 | 0x21;
    *(_WORD *)(v46 + 5) = 0;
    *(_QWORD *)(v46 + 8) = v8;
    *(_QWORD *)(v46 + 16) = v78;
    *(_QWORD *)(v46 + 24) = 0;
    v47 = *(WTF **)(a1 + 48);
    ++*(_DWORD *)v47;
    v54 = v47;
    v55 = a1 + 360;
    v56 = 0;
    v57 = 0u;
    v58 = 0u;
    v59 = 0;
    v60 = a1;
    v61 = 0;
    v63 = 0;
    v64 = 0;
    v62 = 0;
    v65 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v68 = 0;
    v66 = 0;
    v67 = 0;
    WebCore::Style::RuleSetBuilder::addStyleRuleWithSelectorList((WTF *)&v54, (const WebCore::CSSSelector *)(v46 + 16), (WTF *)v46);
    WebCore::Style::RuleSetBuilder::~RuleSetBuilder((WebCore::Style::RuleSetBuilder *)&v54, v48);
    if (*(_DWORD *)v46 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>(v46, v49);
    else
      --*(_DWORD *)v46;
  }
}

WebCore::Style::Scope *WebCore::Style::Scope::Scope(WebCore::Style::Scope *this, WebCore::ShadowRoot *a2)
{
  unint64_t StatusReg;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 13);
  *((_QWORD *)this + 3) = a2;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 10) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  v4 = *(unsigned int **)(StatusReg + 736);
  if (!v4)
    v4 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 15) = v4;
  *((_QWORD *)this + 10) = off_1E31F7378;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E3450210;
  v6[1] = WebCore::Style::Scope::pendingUpdateTimerFired;
  v6[2] = 0;
  v6[3] = this;
  *((_QWORD *)this + 16) = v6;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 256) = 0;
  *(_QWORD *)((char *)this + 230) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = this;
  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v8 = 0;
  v9 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  *(_QWORD *)(v8 + 8) = v9;
  *(_QWORD *)(v8 + 16) = qword_1ECE913C8;
  v10 = qword_1ECE913D0;
  v11 = (_DWORD *)qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D0;
  ++*v11;
  *(_QWORD *)(v8 + 24) = v10;
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = qword_1ECE913E0;
  *(_QWORD *)(v8 + 48) = 0;
  v12 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *(_QWORD *)(v8 + 56) = v12;
  *(_QWORD *)(v7 + 24) = v8;
  *(_BYTE *)(v7 + 32) = 0;
  *((_QWORD *)this + 37) = v7;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = 0;
  v13[1] = 0;
  *((_BYTE *)v13 + 8) = 1;
  *((_QWORD *)this + 38) = v13;
  *((_QWORD *)this + 39) = 0;
  return this;
}

unsigned int *WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(unsigned int *this)
{
  unsigned int *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  void *v13;
  uint64_t v14;
  unsigned int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v24;
  WTF *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::Style::Resolver *v33;
  uint64_t v34;
  BOOL v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::Style::Resolver *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  bmalloc::api *v52;
  void *v53;
  uint64_t v54;
  WTF *v55;
  WTF *v56;
  void *v57;
  bmalloc::api *v58;
  void *v59;
  bmalloc::api *v60;
  void *v61;
  WTF *v62;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int *v66;
  int v67;
  unsigned int v68;
  WTF *v69;
  int v70;
  unsigned int v71;
  BOOL v72;
  char v73;

  v1 = this;
  v2 = (uint64_t *)(this + 14);
  v3 = this[17];
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v48 = WTF::fastMalloc((WTF *)(8 * v3));
    v5 = (WTF *)v48;
    v4 = v1[17];
    if ((_DWORD)v4)
    {
      v49 = 0;
      v50 = *v2;
      do
      {
        v51 = *(_DWORD **)(*(_QWORD *)(v50 + v49) + 24);
        ++*v51;
        *(_QWORD *)(v48 + v49) = v51;
        v49 += 8;
      }
      while (8 * v4 != v49);
    }
  }
  else
  {
    LODWORD(v4) = 0;
    v5 = 0;
  }
  v6 = *((_QWORD *)v1 + 3);
  if (v6)
    v7 = *(unsigned __int8 *)(v6 + 193) == 0;
  else
    v7 = 0;
  v68 = v4;
  v69 = v5;
  v70 = v3;
  v71 = v4;
  v72 = v7;
  v73 = 1;
  v8 = *(_QWORD *)(*((_QWORD *)v1 + 2) + 1328);
  v9 = (uint64_t *)(v8 + 312);
  v10 = *(_QWORD *)(v8 + 312);
  v65 = (uint64_t *)(v8 + 312);
  v66 = v1;
  v63 = v3;
  v64 = (uint64_t)v2;
  v67 = v7;
  if (v10
    || (WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::expand((uint64_t *)(v8 + 312)),
        (v10 = *v9) != 0))
  {
    v11 = *(_DWORD *)(v10 - 8);
  }
  else
  {
    v11 = 0;
  }
  v12 = WTF::TupleHash<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>::hash<0ul>((uint64_t)&v69);
  v14 = 0;
  v15 = v68;
  for (i = 1; ; ++i)
  {
    v17 = v12 & v11;
    v18 = v10 + 32 * v17;
    v19 = *(_DWORD *)(v18 + 12);
    v20 = *(unsigned __int8 *)(v18 + 16);
    v21 = !v19 && v20 == 0;
    if (v21 && !*(_BYTE *)(v18 + 17))
      break;
    if (v19 == v15)
    {
      v22 = memcmp(*(const void **)v18, v5, 8 * v68);
      v15 = v68;
      if (!v22 && v20 == v67 && *(_BYTE *)(v18 + 17) != 0)
      {
        v24 = *(_QWORD *)(v10 + 32 * v17 + 24);
        if (v24)
          ++*(_DWORD *)v24;
        this = (unsigned int *)*((_QWORD *)v66 + 4);
        *((_QWORD *)v66 + 4) = v24;
        if (this)
        {
          if (*this == 1)
          {
            WebCore::Style::Resolver::~Resolver((WebCore::Style::Resolver *)this);
            this = (unsigned int *)bmalloc::api::isoDeallocate(v52, v53);
            v24 = *((_QWORD *)v66 + 4);
          }
          else
          {
            --*this;
          }
        }
        *(_BYTE *)(v24 + 497) = 1;
        goto LABEL_31;
      }
    }
    if (v19 == -1)
      v14 = v10 + 32 * v17;
    v12 = i + v17;
  }
  v26 = v63;
  if (v14)
  {
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    --*(_DWORD *)(*v65 - 16);
    v27 = *(unsigned int *)(v14 + 12);
    if (!(_DWORD)v27)
    {
      v18 = v14;
      goto LABEL_37;
    }
    WTF::VectorTypeOperations<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>::destruct((WebCore::StyleSheetContents *)(8 * v27), v13);
    v18 = v14;
  }
  v62 = *(WTF **)v18;
  if (*(_QWORD *)v18)
  {
    *(_QWORD *)v18 = 0;
    *(_DWORD *)(v18 + 8) = 0;
    WTF::fastFree(v62, v13);
    v5 = v69;
    v26 = v70;
  }
LABEL_37:
  v69 = 0;
  *(_QWORD *)v18 = v5;
  *(_DWORD *)(v18 + 8) = v26;
  v28 = v71;
  v71 = 0;
  *(_DWORD *)(v18 + 12) = v28;
  *(_BYTE *)(v18 + 16) = v67;
  *(_BYTE *)(v18 + 17) = v73;
  v29 = *((_BYTE *)v66 + 237);
  *((_BYTE *)v66 + 237) = 1;
  v30 = *((_QWORD *)v66 + 2);
  v31 = bmalloc::api::isoAllocate();
  v32 = WebCore::Style::Resolver::Resolver(v31, v30, 1);
  v33 = (WebCore::Style::Resolver *)*((_QWORD *)v66 + 4);
  *((_QWORD *)v66 + 4) = v32;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      WebCore::Style::Resolver::~Resolver(v33);
      bmalloc::api::isoDeallocate(v58, v59);
      v32 = *((_QWORD *)v66 + 4);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
  v34 = *((_QWORD *)v66 + 3);
  if (v34)
    v35 = *(_BYTE *)(v34 + 193) != 0;
  else
    v35 = 1;
  *(_BYTE *)(v32 + 348) = v35;
  WebCore::Style::Resolver::appendAuthorStyleSheets((_QWORD *)v32, v64);
  v36 = (_DWORD *)*((_QWORD *)v66 + 4);
  ++*v36;
  *((_BYTE *)v66 + 237) = v29;
  this = *(unsigned int **)(v18 + 24);
  *(_QWORD *)(v18 + 24) = v36;
  if (this)
  {
    if (*this == 1)
    {
      WebCore::Style::Resolver::~Resolver((WebCore::Style::Resolver *)this);
      this = (unsigned int *)bmalloc::api::isoDeallocate(v60, v61);
    }
    else
    {
      --*this;
    }
  }
  v37 = *v65;
  if (*v65)
    v38 = *(_DWORD *)(v37 - 12) + 1;
  else
    v38 = 1;
  *(_DWORD *)(v37 - 12) = v38;
  v39 = *v65;
  if (*v65)
    v40 = *(_DWORD *)(v39 - 12);
  else
    v40 = 0;
  v41 = (*(_DWORD *)(v39 - 16) + v40);
  v42 = *(unsigned int *)(v39 - 4);
  if (v42 <= 0x400)
  {
    if (3 * v42 > 4 * v41)
      goto LABEL_54;
    if (!(_DWORD)v42)
    {
      v43 = 8;
LABEL_53:
      this = (unsigned int *)WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::rehash(v65, v43);
      goto LABEL_54;
    }
LABEL_64:
    v43 = (_DWORD)v42 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v42));
    goto LABEL_53;
  }
  if (v42 <= 2 * v41)
    goto LABEL_64;
LABEL_54:
  v44 = *(_QWORD *)(*((_QWORD *)v66 + 2) + 1328);
  v45 = *(_QWORD *)(v44 + 312);
  if (v45 && *(_DWORD *)(v45 - 12) >= 0x101u)
  {
    v46 = (WebCore::Style::Resolver *)(v44 + 312);
    v47 = (void *)WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::random((uint64_t *)(v44 + 312));
    this = (unsigned int *)WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::remove(v46, v47);
  }
LABEL_31:
  v25 = v69;
  if (v71)
  {
    v54 = 8 * v71;
    v55 = v69;
    do
    {
      this = *(unsigned int **)v55;
      *(_QWORD *)v55 = 0;
      if (this)
      {
        if (*this == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents((WebCore::StyleSheetContents *)this, v13);
          this = (unsigned int *)WTF::fastFree(v56, v57);
        }
        else
        {
          --*this;
        }
      }
      v55 = (WTF *)((char *)v55 + 8);
      v54 -= 8;
    }
    while (v54);
  }
  if (v25)
    return (unsigned int *)WTF::fastFree(v25, v13);
  return this;
}

uint64_t WebCore::Style::Scope::makeResolverSharingKey(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = this;
  v4 = *(unsigned int *)(a2 + 68);
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    this = WTF::fastMalloc((WTF *)(8 * v4));
    v5 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = *(_QWORD *)(a2 + 56);
      do
      {
        v9 = *(_DWORD **)(*(_QWORD *)(v8 + v7) + 24);
        ++*v9;
        *(_QWORD *)(this + v7) = v9;
        v7 += 8;
      }
      while (8 * v5 != v7);
    }
  }
  else
  {
    LODWORD(v5) = 0;
    this = 0;
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
    LOBYTE(v6) = *(_BYTE *)(v6 + 193) == 0;
  *(_QWORD *)v3 = this;
  *(_DWORD *)(v3 + 8) = v4;
  *(_DWORD *)(v3 + 12) = v5;
  *(_BYTE *)(v3 + 16) = v6;
  *(_BYTE *)(v3 + 17) = 1;
  return this;
}

WebCore::Style::Resolver *WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::remove(WebCore::Style::Resolver *result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  v2 = (uint64_t *)result;
  if (*(_QWORD *)result)
  {
    v3 = *(_QWORD *)result + 32 * *(unsigned int *)(*(_QWORD *)result - 4);
    if ((void *)v3 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v3 = 0;
  }
  if ((void *)v3 != a2)
  {
    result = WTF::KeyValuePairHashTraits<WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::customDeleteBucket((uint64_t)a2, a2);
    ++*(_DWORD *)(*v2 - 16);
    v4 = *v2;
    v5 = *v2 ? *(_DWORD *)(v4 - 12) - 1 : -1;
    *(_DWORD *)(v4 - 12) = v5;
    v6 = *v2;
    if (*v2)
    {
      v7 = 6 * *(_DWORD *)(v6 - 12);
      v8 = *(_DWORD *)(v6 - 4);
      if (v7 < v8 && v8 >= 9)
        return (WebCore::Style::Resolver *)WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::rehash(v2, v8 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::random(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  uint64_t result;
  int v6;

  v1 = *a1;
  if (!*a1)
    return 0;
  if (!*(_DWORD *)(v1 - 12))
    return v1 + 32 * *(unsigned int *)(v1 - 4);
  while (1)
  {
    v3 = WTF::weakRandomNumber<unsigned int>();
    if (*a1)
      v4 = *(_DWORD *)(*a1 - 8);
    else
      v4 = 0;
    result = v1 + 32 * (v4 & v3);
    v6 = *(_DWORD *)(result + 12);
    v1 = *a1;
    if (v6 != -1)
    {
      v1 = *a1;
      if (v6 | *(unsigned __int8 *)(result + 16) | *(unsigned __int8 *)(result + 17))
        break;
    }
  }
  return result;
}

uint64_t WebCore::Style::Scope::unshareShadowTreeResolverBeforeMutation(WebCore::Style::Scope *this)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  WTF *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  unsigned int v23;

  v1 = *(_QWORD *)(*((_QWORD *)this + 2) + 1328);
  result = WebCore::Style::Scope::makeResolverSharingKey((uint64_t)&v22, (uint64_t)this);
  v4 = *(_QWORD *)(v1 + 312);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 - 8);
    v6 = WTF::TupleHash<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>::hash<0ul>((uint64_t)&v22) & v5;
    v7 = v4 + 32 * v6;
    result = WTF::TupleHash<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>::equal<0ul>(v7, (uint64_t)&v22);
    if ((result & 1) == 0)
    {
      v8 = 1;
      while (1)
      {
        v9 = !*(_DWORD *)(v7 + 12) && *(_BYTE *)(v7 + 16) == 0;
        if (v9 && !*(_BYTE *)(v7 + 17))
          break;
        v6 = ((_DWORD)v6 + v8) & v5;
        v7 = v4 + 32 * v6;
        result = WTF::TupleHash<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>::equal<0ul>(v7, (uint64_t)&v22);
        ++v8;
        if ((result & 1) != 0)
          goto LABEL_13;
      }
      v7 = v4 + 32 * *(unsigned int *)(v4 - 4);
    }
LABEL_13:
    if (v4 + 32 * *(unsigned int *)(v4 - 4) != v7)
    {
      v10 = (uint64_t *)(v1 + 312);
      result = (uint64_t)WTF::KeyValuePairHashTraits<WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::customDeleteBucket(v7, v3);
      ++*(_DWORD *)(*v10 - 16);
      v11 = *v10;
      v12 = *v10 ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *v10;
      if (*v10)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          result = WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::rehash(v10, v15 >> 1);
      }
    }
  }
  v17 = v22;
  if (v23)
  {
    v18 = 8 * v23;
    v19 = v22;
    do
    {
      result = *(_QWORD *)v19;
      *(_QWORD *)v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents((WebCore::StyleSheetContents *)result, v3);
          result = WTF::fastFree(v20, v21);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      v19 = (WTF *)((char *)v19 + 8);
      v18 -= 8;
    }
    while (v18);
  }
  if (v17)
    return WTF::fastFree(v17, v3);
  return result;
}

uint64_t *WebCore::Style::Scope::releaseMemory(WebCore::Style::Scope *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  WebCore::Style::Resolver *v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *result;
  uint64_t v18;
  _QWORD *v19;

  if (!*((_QWORD *)this + 3))
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *(_QWORD **)(v3 + 2696);
    if (v4)
    {
      while (1)
      {
        v5 = *(_QWORD *)(*v4 + 8);
        if (v5)
          break;
        v4 = (_QWORD *)v4[2];
        if (!v4)
          goto LABEL_11;
      }
LABEL_6:
      WebCore::Style::Scope::releaseMemory(*(WebCore::Style::Scope **)(v5 + 216));
      while (1)
      {
        v4 = (_QWORD *)v4[2];
        if (!v4)
          break;
        v5 = *(_QWORD *)(*v4 + 8);
        if (v5)
        {
          ++*(_DWORD *)(v3 + 2712);
          goto LABEL_6;
        }
      }
      ++*(_DWORD *)(v3 + 2712);
    }
  }
LABEL_11:
  v6 = *((unsigned int *)this + 17);
  if ((_DWORD)v6)
  {
    v7 = *((_QWORD *)this + 7);
    v8 = 8 * v6;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)v7 + 24);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3450238;
      v19 = v10;
      WebCore::StyleSheetContents::traverseRules(v9, &v19);
      v11 = v19;
      v19 = 0;
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
      v7 += 8;
      v8 -= 8;
    }
    while (v8);
  }
  v12 = (WebCore::Style::Resolver *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
    WTF::RefCounted<WebCore::Style::Resolver>::deref(v12);
  v13 = (WTF::StringImpl ***)*((_QWORD *)this + 37);
  v14 = v13[2];
  if (v14 && *((_DWORD *)v14 - 3))
  {
    WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear(v13 + 2, a2);
    WebCore::Style::CustomPropertyRegistry::invalidate((WebCore::Style::CustomPropertyRegistry *)v13, MEMORY[0x1E0CBF2F8]);
  }
  v15 = *((_QWORD *)this + 38);
  if (*(_QWORD *)v15 && *(_DWORD *)(*(_QWORD *)v15 - 12))
  {
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*((WTF::StringImpl ****)this + 38), a2);
    *(_BYTE *)(v15 + 8) = 1;
  }
  v16 = *((_QWORD *)this + 39);
  if (v16)
  {
    *((_QWORD *)this + 39) = 0;
    WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::deallocateTable(v16, a2);
  }
  result = (uint64_t *)*((_QWORD *)this + 35);
  if (result)
  {
    *((_QWORD *)this + 35) = 0;
    result = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(result, a2);
    v18 = *((_QWORD *)this + 35);
    *((_DWORD *)this + 72) = 0;
    if (v18)
    {
      LODWORD(v18) = *(_DWORD *)(v18 - 12);
      if (v18 > 0x7FFFFFFE)
        LODWORD(v18) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v18) = 0;
    *((_DWORD *)this + 72) = 0;
  }
  *((_DWORD *)this + 73) = 2 * v18;
  return result;
}

uint64_t WebCore::Style::Scope::forNode(WebCore::Style::Scope *this, WebCore::Node *a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v5;

  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (*v2)
    v3 = (*(_WORD *)(*v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3)
    v5 = v2[1] + 1328;
  else
    v5 = *v2 + 216;
  return *(_QWORD *)v5;
}

uint64_t WebCore::Style::hostForScopeOrdinal(uint64_t a1, int a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  uint64_t v9;

  v2 = **(_QWORD **)(a1 + 40);
  if (v2)
    v3 = (*(_WORD *)(v2 + 28) & 0x80) == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v4 = *(_QWORD *)(v2 + 200);
  if (!v4)
    return 0;
  result = *(_QWORD *)(v4 + 8);
  if (a2 != -1 && result)
  {
    v6 = 255;
    while (1)
    {
      v7 = **(_QWORD **)(result + 40);
      if (!v7 || (*(_WORD *)(v7 + 28) & 0x80) == 0)
        break;
      v9 = *(_QWORD *)(v7 + 200);
      if (!v9)
        break;
      result = *(_QWORD *)(v9 + 8);
      if (result)
      {
        if (--v6 != a2)
          continue;
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t WebCore::Style::assignedSlotForScopeOrdinal(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    return 0;
  if ((*(_WORD *)(v2 + 28) & 8) == 0)
    return 0;
  v3 = *(_QWORD *)(v2 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v3)
    return 0;
  v6 = *(_QWORD *)(v3 + 88);
  if (!v6)
    return 0;
  v8 = *(_QWORD *)(v6 + 224);
  if (!v8)
    return 0;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a1);
  v4 = v10;
  v16 = a2;
  if (a2 != 1 && v10)
  {
    v11 = 1;
    while (1)
    {
      v12 = *(_QWORD *)(v4 + 32);
      if (!v12)
        break;
      if ((*(_WORD *)(v12 + 28) & 8) == 0)
        break;
      v13 = *(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL;
      if (!v13)
        break;
      v14 = *(_QWORD *)(v13 + 88);
      if (!v14)
        break;
      v15 = *(_QWORD *)(v14 + 224);
      if (!v15)
        break;
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
      if (v4)
      {
        if (++v11 != v16)
          continue;
      }
      return v4;
    }
    return 0;
  }
  return v4;
}

uint64_t WebCore::Style::Scope::setPreferredStylesheetSetName(WTF **this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  double v8;

  result = WTF::equal(this[28], *a2, a3);
  if ((result & 1) == 0)
  {
    v7 = *a2;
    if (*a2)
      *(_DWORD *)v7 += 2;
    result = (uint64_t)this[28];
    this[28] = v7;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
    if (!*((_BYTE *)this + 233))
    {
      *((_WORD *)this + 116) = 256;
      if (this[3])
        *(_BYTE *)(*((_QWORD *)this[2] + 166) + 234) = 1;
    }
    if (((unint64_t)this[14] & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)(((unint64_t)this[14] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      this[13] = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      return WebCore::TimerBase::setNextFireTime((uint64_t)(this + 10), v8 + 0.0);
    }
  }
  return result;
}

double WebCore::Style::Scope::didChangeActiveStyleSheetCandidates(WebCore::Style::Scope *this)
{
  char *v1;
  double v2;
  double result;

  if (!*((_BYTE *)this + 233))
  {
    *((_WORD *)this + 116) = 256;
    if (*((_QWORD *)this + 3))
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 1328) + 234) = 1;
  }
  if ((*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    v1 = (char *)this + 80;
    *((_QWORD *)this + 13) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime((uint64_t)v1, v2 + 0.0);
  }
  return result;
}

uint64_t WebCore::Style::Scope::addPendingSheet(WebCore::Style::Scope *this, const WebCore::Element *a2)
{
  uint64_t v2;
  __int16 v3;
  char *v4;
  _BYTE v6[24];

  v2 = *((_QWORD *)a2 + 4);
  if (v2 && (v3 = *(_WORD *)(v2 + 28), (v3 & 8) != 0))
  {
    while ((v3 & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::headTag + 24))
    {
      v2 = *(_QWORD *)(v2 + 32);
      if (v2)
      {
        v3 = *(_WORD *)(v2 + 28);
        if ((v3 & 8) != 0)
          continue;
      }
      goto LABEL_3;
    }
    v4 = (char *)this + 160;
  }
  else
  {
LABEL_3:
    v4 = (char *)this + 176;
  }
  return WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::Element>((uint64_t)v4, a2, (uint64_t)v6);
}

uint64_t WebCore::Style::Scope::removePendingSheet(WebCore::Document **this, const WebCore::Element *a2)
{
  uint64_t result;
  WTF::StringImpl *v5;
  double v6;

  if ((WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)(this + 20), a2) & 1) == 0)WTF::WeakHashSet<WebCore::Element const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Element>((uint64_t)(this + 22), a2);
  result = WebCore::Style::Scope::hasPendingSheets((WebCore::Style::Scope *)this);
  if ((result & 1) == 0)
  {
    if (!*((_BYTE *)this + 233))
    {
      *((_WORD *)this + 116) = 256;
      if (this[3])
        *(_BYTE *)(*((_QWORD *)this[2] + 166) + 234) = 1;
    }
    if (((unint64_t)this[14] & 0xFFFFFFFFFFFFLL) == 0
      || *(double *)(((unint64_t)this[14] & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
    {
      this[13] = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
      result = WebCore::TimerBase::setNextFireTime((uint64_t)(this + 10), v6 + 0.0);
    }
    if (!this[3])
      return (uint64_t)WebCore::Document::didRemoveAllPendingStylesheet(this[2], v5);
  }
  return result;
}

BOOL WebCore::Style::Scope::hasPendingSheets(WebCore::Style::Scope *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Style::Scope *v14;
  WebCore::Style::Scope *v15;
  uint64_t *v16[5];
  uint64_t *v17[5];

  v1 = *((_QWORD *)this + 20);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    v6 = *(unsigned int *)(v1 - 4);
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      v8 = *((_QWORD *)this + 20);
      while ((unint64_t)(*(_QWORD *)v8 + 1) <= 1)
      {
        v8 += 8;
        v7 -= 8;
        if (!v7)
          goto LABEL_2;
      }
    }
    else
    {
      v8 = *((_QWORD *)this + 20);
    }
    v13 = v1 + 8 * v6;
    if (v8 != v13)
    {
      if (*(_QWORD *)(*(_QWORD *)v8 + 8))
        return 1;
      v14 = this;
      while (1)
      {
        v8 += 8;
        this = v14;
        if (v8 == v13)
          break;
        if ((unint64_t)(*(_QWORD *)v8 + 1) > 1)
        {
          this = v14;
          if (v8 == v13)
            break;
          result = 1;
          if (*(_QWORD *)(*(_QWORD *)v8 + 8))
            return result;
        }
      }
    }
  }
LABEL_2:
  v3 = (uint64_t *)((char *)this + 144);
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    if (*(_DWORD *)(v2 - 12))
    {
      v15 = this;
      WTF::WeakHashSet<WebCore::ProcessingInstruction const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t *)this + 18, v17);
      WTF::WeakHashSet<WebCore::ProcessingInstruction const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(v3, v16);
      this = v15;
      if (v17[1] != v16[1])
        return 1;
    }
  }
  v4 = (_QWORD *)*((_QWORD *)this + 22);
  if (v4 && *((_DWORD *)v4 - 3))
  {
    v9 = *((unsigned int *)v4 - 1);
    v10 = &v4[v9];
    if ((_DWORD)v9)
    {
      v11 = 8 * v9;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        ++v4;
        v11 -= 8;
        if (!v11)
          goto LABEL_27;
      }
    }
    if (v4 != v10)
    {
      v12 = *v4;
LABEL_23:
      if (*(_QWORD *)(v12 + 8))
        return v4 != v10;
      while (++v4 != v10)
      {
        v12 = *v4;
        if ((unint64_t)(*v4 + 1) > 1)
        {
          if (v4 != v10)
            goto LABEL_23;
          break;
        }
      }
    }
LABEL_27:
    v4 = v10;
    return v4 != v10;
  }
  return 0;
}

uint64_t WebCore::Style::Scope::hasPendingSheetInBody(WebCore::Style::Scope *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;

  ++*((_DWORD *)this + 46);
  v2 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 8))
    {
      v3 = *((_QWORD *)this + 22);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 - 8);
        v5 = (v2 + ~(a2 << 32)) ^ ((v2 + ~(a2 << 32)) >> 22);
        v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
        v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
        v8 = v4 & ((v7 >> 31) ^ v7);
        for (i = 1; ; ++i)
        {
          v10 = *(_QWORD *)(v3 + 8 * v8);
          if (!v10)
            break;
          if (v10 != -1 && v10 == v2)
            return 1;
          v8 = (v8 + i) & v4;
        }
      }
    }
  }
  return 0;
}

uint64_t *WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::insertBefore<WebCore::Node,WebCore::Node>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int *v21;

  v8 = *(_DWORD *)(a2 + 28);
  v9 = *(_DWORD *)(a2 + 24) + 1;
  *(_DWORD *)(a2 + 24) = v9;
  if (v9 > v8)
    WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(a2);
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::createWeakPtr<WebCore::Node>(a3 + 16, a3, &v21);
  v10 = v21;
  WTF::WeakPtrFactoryWithBitField<WebCore::EventTarget,WebCore::WeakPtrImplWithEventTargetData>::createWeakPtr<WebCore::Node>(a4 + 16, a4, &v19);
  v11 = v19;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v20 = v11;
  v13 = WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::find<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)a2, (uint64_t)v10);
  WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::insertBefore(a1, (uint64_t *)a2, (uint64_t)v13, v14, (uint64_t *)&v20);
  WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>::~ListHashSetNode(&v20, v15);
  WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)&v19, v16);
  return WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr((uint64_t *)&v21, v17);
}

double WebCore::Style::Scope::removeStyleSheetCandidateNode(WebCore::Style::Scope *this, WebCore::Node *a2)
{
  _BOOL8 v3;
  double result;
  double v5;

  v3 = WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::Node>((uint64_t)this + 192, (uint64_t)a2);
  if (v3)
  {
    if (!*((_BYTE *)this + 233))
    {
      *((_WORD *)this + 116) = 256;
      if (*((_QWORD *)this + 3))
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 2) + 1328) + 234) = 1;
    }
    if ((*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFLL) == 0
      || (result = *(double *)((*((_QWORD *)this + 14) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      *((_QWORD *)this + 13) = 0;
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v3);
      WebCore::TimerBase::setNextFireTime((uint64_t)this + 80, v5 + 0.0);
    }
  }
  return result;
}

uint64_t WebCore::Style::Scope::collectXSLTransforms@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *__src;

  *a2 = 0;
  a2[1] = 0;
  v2 = *(_QWORD **)(this + 200);
  if (v2)
  {
    while (1)
    {
      v3 = *(_QWORD *)(*v2 + 8);
      if (v3)
        break;
      v2 = (_QWORD *)v2[2];
      if (!v2)
        return this;
    }
    v4 = 0;
    v5 = 0;
LABEL_6:
    if ((*(_WORD *)(v3 + 28) & 0xF000) != 0x7000)
      goto LABEL_7;
    v15 = v2;
    __src = v5;
    v6 = a2;
    v13 = v3;
    v14 = this;
    if (*(_BYTE *)(v3 + 156))
    {
      v7 = v4;
      if (v4 == *((_DWORD *)a2 + 2))
      {
        v8 = v4 + ((unint64_t)v4 >> 2);
        if (v8 >= 0x10)
          v9 = v8 + 1;
        else
          v9 = 16;
        if (v9 <= (unint64_t)v4 + 1)
          v10 = v4 + 1;
        else
          v10 = v9;
        if (v10 >> 29)
        {
          __break(0xC471u);
          return this;
        }
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)v6 + 2) = v10;
        *v6 = v11;
        memcpy(v11, __src, 8 * v4);
        if (__src)
        {
          if (v11 == __src)
          {
            v11 = 0;
            *v6 = 0;
            *((_DWORD *)v6 + 2) = 0;
          }
          WTF::fastFree((WTF *)__src, v12);
        }
        __src = v11;
      }
      ++v4;
      this = v14;
      *(_DWORD *)(v13 + 24) += 2;
      v5 = __src;
      *((_QWORD *)__src + v7) = v13;
      a2 = v6;
      *((_DWORD *)v6 + 3) = v4;
    }
    v2 = v15;
LABEL_7:
    while (1)
    {
      v2 = (_QWORD *)v2[2];
      if (!v2)
        break;
      v3 = *(_QWORD *)(*v2 + 8);
      if (v3)
      {
        ++*(_DWORD *)(this + 216);
        goto LABEL_6;
      }
    }
    ++*(_DWORD *)(this + 216);
  }
  return this;
}

uint64_t WTF::Vector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  if (a3)
  {
    v3 = a3;
    v4 = *(unsigned int *)(result + 12);
    v5 = v4 + a3;
    if (v5 > *(unsigned int *)(result + 8)
      && (v6 = result,
          WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)result, v4 + a3), result = v6, v4 = *(unsigned int *)(v6 + 12), v5 < v4))
    {
      __break(0xC471u);
    }
    else
    {
      v7 = (_QWORD *)(*(_QWORD *)result + 8 * v4);
      v8 = 8 * v3;
      v9 = a2;
      do
      {
        v10 = *v9;
        if (*v9)
          ++*(_DWORD *)(v10 + 8);
        *v7++ = v10;
        ++v9;
        v8 -= 8;
      }
      while (v8);
      *(_DWORD *)(result + 12) = v5;
    }
  }
  return result;
}

uint64_t WebCore::Style::Scope::activeStyleSheetsForInspector@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;

  v3 = this;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(this + 16) + 1336);
  if (v5)
  {
    ++*(_DWORD *)v5;
    v6 = WebCore::ExtensionStyleSheets::pageUserSheet((WebCore::ExtensionStyleSheets *)v5, a2);
    if (v6)
    {
      v7 = v6;
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
      *(_QWORD *)a3 = v8;
      ++*(_DWORD *)(v7 + 8);
      *v8 = v7;
      *(_QWORD *)(a3 + 8) = 0x100000010;
    }
    WTF::Vector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a3, *(uint64_t **)(v5 + 72), *(_DWORD *)(v5 + 84));
    WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(v5, v9);
    WTF::Vector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a3, *(uint64_t **)(v5 + 24), *(_DWORD *)(v5 + 36));
    WebCore::ExtensionStyleSheets::updateInjectedStyleSheetCache(v5, v10);
    WTF::Vector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a3, *(uint64_t **)(v5 + 40), *(_DWORD *)(v5 + 52));
    this = WTF::Vector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WTF::RefPtr<WebCore::CSSStyleSheet,WTF::RawPtrTraits<WebCore::CSSStyleSheet>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(a3, *(uint64_t **)(v5 + 88), *(_DWORD *)(v5 + 100));
    if (!*(_DWORD *)v5)
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x1965AA23CLL);
    }
    --*(_DWORD *)v5;
  }
  v11 = *(unsigned int *)(v3 + 52);
  if ((_DWORD)v11)
  {
    v12 = *(_QWORD **)(v3 + 40);
    LODWORD(v14) = *(_DWORD *)(a3 + 8);
    v13 = *(_DWORD *)(a3 + 12);
    v15 = 8 * v11;
    v16 = *(void **)a3;
    do
    {
      v17 = *v12;
      this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 112))(*v12);
      if ((_DWORD)this && !*(_BYTE *)(v17 + 33))
      {
        v18 = v13;
        if (v13 == (_DWORD)v14)
        {
          v19 = v13 + ((unint64_t)v13 >> 2);
          if (v19 >= 0x10)
            v20 = v19 + 1;
          else
            v20 = 16;
          if (v20 <= (unint64_t)v13 + 1)
            v14 = v13 + 1;
          else
            v14 = v20;
          if (v14 >> 29)
            goto LABEL_27;
          v21 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
          *(_DWORD *)(a3 + 8) = v14;
          *(_QWORD *)a3 = v21;
          this = (uint64_t)memcpy(v21, v16, 8 * v13);
          if (v16)
          {
            if (v21 == v16)
            {
              v21 = 0;
              LODWORD(v14) = 0;
              *(_QWORD *)a3 = 0;
              *(_DWORD *)(a3 + 8) = 0;
            }
            this = WTF::fastFree((WTF *)v16, v22);
          }
          v16 = v21;
        }
        ++*(_DWORD *)(v17 + 8);
        ++v13;
        *((_QWORD *)v16 + v18) = v17;
        *(_DWORD *)(a3 + 12) = v13;
      }
      ++v12;
      v15 -= 8;
    }
    while (v15);
  }
  return this;
}

uint64_t WebCore::Style::Scope::activeStyleSheetsContains(WebCore::Style::Scope *this, const WebCore::CSSStyleSheet *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  WTF **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int i;
  unsigned int v20;
  WTF **v21;
  WTF *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int j;
  uint64_t v36;

  v2 = *((unsigned int *)this + 17);
  if (!(_DWORD)v2)
    return 0;
  v5 = (uint64_t *)((char *)this + 136);
  v4 = *((_QWORD *)this + 17);
  if (v4 && *(_DWORD *)(v4 - 12))
    goto LABEL_44;
  v6 = (uint64_t *)*((_QWORD *)this + 7);
  v7 = &v6[v2];
  do
  {
    v8 = *v6;
    v9 = *(WTF **)(*v6 + 16);
    if (!v9)
    {
      v9 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v9 = 1;
      *((_QWORD *)v9 + 1) = v8;
      v10 = *(WTF **)(v8 + 16);
      *(_QWORD *)(v8 + 16) = v9;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WTF::fastFree(v10, a2);
          v9 = *(WTF **)(v8 + 16);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    ++*(_DWORD *)v9;
    v11 = *v5;
    if (*v5
      || (WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v5, 8u), (v11 = *v5) != 0))
    {
      v12 = *(_DWORD *)(v11 - 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = 0;
    v14 = *((_QWORD *)v9 + 1);
    v15 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
    v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
    v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
    v18 = (v17 >> 31) ^ v17;
    for (i = 1; ; ++i)
    {
      v20 = v18 & v12;
      v21 = (WTF **)(v11 + 8 * v20);
      v22 = *v21;
      if (*v21 != (WTF *)-1)
        break;
      v13 = (WTF **)(v11 + 8 * v20);
LABEL_18:
      v18 = i + v20;
    }
    if (!v22)
    {
      if (v13)
      {
        *v13 = 0;
        --*(_DWORD *)(*v5 - 16);
        *v13 = v9;
      }
      else
      {
        *v21 = v9;
      }
      v23 = *v5;
      if (*v5)
        v24 = *(_DWORD *)(v23 - 12) + 1;
      else
        v24 = 1;
      *(_DWORD *)(v23 - 12) = v24;
      v25 = *v5;
      if (*v5)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      v27 = (*(_DWORD *)(v25 - 16) + v26);
      v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27)
          goto LABEL_37;
      }
      else
      {
        if (3 * v28 > 4 * v27)
          goto LABEL_37;
        if (!(_DWORD)v28)
        {
          v29 = 8;
          goto LABEL_36;
        }
      }
      v29 = (_DWORD)v28 << (6 * *(_DWORD *)(v25 - 12) >= (2 * v28));
LABEL_36:
      WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v5, v29);
      goto LABEL_37;
    }
    if (*((_QWORD *)v22 + 1) != v14)
      goto LABEL_18;
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, a2);
    else
      --*(_DWORD *)v9;
LABEL_37:
    ++v6;
  }
  while (v6 != v7);
  v4 = *v5;
  if (!*v5)
    return 0;
LABEL_44:
  v30 = *(_DWORD *)(v4 - 8);
  v31 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v32 = 9 * ((v31 + ~(v31 << 13)) ^ ((v31 + ~(v31 << 13)) >> 8));
  v33 = (v32 ^ (v32 >> 15)) + ~((v32 ^ (v32 >> 15)) << 27);
  v34 = v30 & ((v33 >> 31) ^ v33);
  for (j = 1; ; ++j)
  {
    v36 = *(_QWORD *)(v4 + 8 * v34);
    if (v36 != -1)
    {
      if (!v36)
        return 0;
      if (*(const WebCore::CSSStyleSheet **)(v36 + 8) == a2)
        break;
    }
    v34 = (v34 + j) & v30;
  }
  return 1;
}

void WebCore::Style::Scope::flushPendingDescendantUpdates(WebCore::Style::Scope *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  WTF **v8;

  v4 = *((_QWORD *)this + 2);
  v5 = *(_QWORD **)(v4 + 2696);
  if (v5)
  {
    while (1)
    {
      v6 = *(_QWORD *)(*v5 + 8);
      if (v6)
        break;
      v5 = (_QWORD *)v5[2];
      if (!v5)
        goto LABEL_10;
    }
LABEL_3:
    v7 = *(_QWORD *)(v6 + 216);
    if (*(_BYTE *)(v7 + 234))
      WebCore::Style::Scope::flushPendingDescendantUpdates((WebCore::Style::Scope *)v7);
    if (*(_BYTE *)(v7 + 233))
    {
      v8 = (WTF **)*(unsigned __int8 *)(v7 + 232);
      if ((*(_QWORD *)(v7 + 112) & 0xFFFFFFFFFFFFLL) != 0)
        WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v7 + 80));
      *(_WORD *)(v7 + 232) = 0;
      WebCore::Style::Scope::updateActiveStyleSheets(v7, v8, a3);
    }
    while (1)
    {
      v5 = (_QWORD *)v5[2];
      if (!v5)
        break;
      v6 = *(_QWORD *)(*v5 + 8);
      if (v6)
      {
        ++*(_DWORD *)(v4 + 2712);
        goto LABEL_3;
      }
    }
    ++*(_DWORD *)(v4 + 2712);
  }
LABEL_10:
  *((_BYTE *)this + 234) = 0;
}

uint64_t WebCore::Style::Scope::evaluateMediaQueriesForAccessibilitySettingsChange(WebCore::Style::Scope *this, uint64_t a2)
{
  uint64_t *v2;
  WebCore::ShadowRoot *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Style::Invalidator *v15;
  WebCore::Element *v16;
  void *v17;
  uint64_t v18;
  WebCore::Style::Invalidator *v19;
  WebCore::Style::Resolver *v20;
  WTF::StringImpl ***v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  WTF *v28;
  WebCore::Style::RuleSet *v30;
  WTF *v31;
  uint64_t v32;
  WebCore::Style::RuleSet *v33;
  WTF *v34;
  void *v35;
  WTF *v36;
  void *v37;
  bmalloc::api *v38;
  void *v39;
  WTF *v40;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  WebCore::Style::RuleSet *v45;
  WTF *v46;
  void *v47;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  WebCore::Style::RuleSet *v61;
  WTF *v62;
  int v63;
  unsigned int v64;
  _BYTE v65[16];
  int v66;
  WTF *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned __int8 v71;
  uint64_t v72;
  _BYTE v73[4152];
  uint64_t v74;

  v2 = (uint64_t *)MEMORY[0x1E0C80A78](this, a2);
  v74 = *MEMORY[0x1E0C80C00];
  WebCore::Style::Scope::collectResolverScopes(&v72, v2);
  if (v72)
  {
    v4 = *(unsigned int *)(v72 - 4);
    v5 = v72 + 24 * v4;
    if (*(_DWORD *)(v72 - 12))
    {
      v6 = v72;
      if ((_DWORD)v4)
      {
        v7 = 24 * v4;
        v6 = v72;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 24;
          v7 -= 24;
          if (!v7)
          {
            v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v6 = v72 + 24 * v4;
  }
  else
  {
    v6 = 0;
    LODWORD(v4) = 0;
  }
  v5 = v72 + 24 * v4;
  if (v72)
  {
LABEL_8:
    v8 = v72 + 24 * *(unsigned int *)(v72 - 4);
    goto LABEL_9;
  }
  v8 = 0;
LABEL_9:
  if (v8 != v6)
  {
    v60 = v2;
    v9 = 0;
    do
    {
      WebCore::Style::ScopeRuleSets::evaluateDynamicMediaQueryRules((WebCore::Style::ScopeRuleSets *)&v66, (WebCore::Style::RuleSet **)(*(_QWORD *)v6 + 32), (const WebCore::MQ::MediaQueryEvaluator *)(*(_QWORD *)v6 + 360));
      if (v71)
      {
        v10 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v10)
        {
          v11 = *(_QWORD *)(v6 + 8);
          v12 = v11 + 8 * v10;
          do
          {
            v13 = v71;
            if (!v71)
            {
              __break(1u);
              goto LABEL_114;
            }
            if (v66 == 1)
            {
              if (*(_QWORD *)v11)
                v18 = *(_QWORD *)(*(_QWORD *)v11 + 8);
              else
                v18 = 0;
              v19 = *(WebCore::Style::Invalidator **)(v18 + 24);
              if (v19)
              {
                WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(v19, v3);
                WebCore::Style::Scope::unshareShadowTreeResolverBeforeMutation((WebCore::Style::Scope *)v18);
              }
              if (!*(_BYTE *)(v18 + 237) && !*(_BYTE *)(*(_QWORD *)(v18 + 16) + 3393))
              {
                v20 = *(WebCore::Style::Resolver **)(v18 + 32);
                *(_QWORD *)(v18 + 32) = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 1)
                  {
                    WebCore::Style::Resolver::~Resolver(v20);
                    bmalloc::api::isoDeallocate(v38, v39);
                  }
                  else
                  {
                    --*(_DWORD *)v20;
                  }
                }
                v21 = *(WTF::StringImpl ****)(v18 + 296);
                v22 = v21[2];
                if (v22 && *((_DWORD *)v22 - 3))
                {
                  WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits>::clear(v21 + 2, v3);
                  WebCore::Style::CustomPropertyRegistry::invalidate((WebCore::Style::CustomPropertyRegistry *)v21, MEMORY[0x1E0CBF2F8]);
                }
                v23 = *(_QWORD *)(v18 + 304);
                if (*(_QWORD *)v23 && *(_DWORD *)(*(_QWORD *)v23 - 12))
                {
                  WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::clear(*(WTF::StringImpl ****)(v18 + 304), v3);
                  *(_BYTE *)(v23 + 8) = 1;
                }
              }
              v24 = *(uint64_t **)(v18 + 280);
              if (v24)
              {
                *(_QWORD *)(v18 + 280) = 0;
                v24 = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(v24, v3);
                v25 = *(_QWORD *)(v18 + 280);
                *(_DWORD *)(v18 + 288) = 0;
                if (v25)
                {
                  LODWORD(v25) = *(_DWORD *)(v25 - 12);
                  if (v25 > 0x7FFFFFFE)
                    LODWORD(v25) = 0x7FFFFFFF;
                }
              }
              else
              {
                LODWORD(v25) = 0;
                *(_DWORD *)(v18 + 288) = 0;
              }
              *(_DWORD *)(v18 + 292) = 2 * v25;
              if (!*(_BYTE *)(v18 + 233) || !*(_BYTE *)(v18 + 232))
              {
                *(_WORD *)(v18 + 232) = 257;
                if (*(_QWORD *)(v18 + 24))
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v18 + 16) + 1328) + 234) = 1;
              }
              if ((*(_QWORD *)(v18 + 112) & 0xFFFFFFFFFFFFLL) == 0
                || *(double *)((*(_QWORD *)(v18 + 112) & 0xFFFFFFFFFFFFLL) + 8) == 0.0)
              {
                *(_QWORD *)(v18 + 104) = 0;
                WTF::MonotonicTime::now((WTF::MonotonicTime *)v24);
                WebCore::TimerBase::setNextFireTime(v18 + 80, v26 + 0.0);
              }
            }
            else if (!v66)
            {
              WebCore::Style::Invalidator::Invalidator((uint64_t)&v61, (uint64_t)&v67);
              v14 = *(_QWORD *)(*(_QWORD *)v11 + 8);
              v15 = *(WebCore::Style::Invalidator **)(v14 + 24);
              if (v65[14])
              {
                if (v15)
                {
                  v27 = *((_QWORD *)v15 + 10);
                  if (v27)
                  {
                    while ((*(_WORD *)(v27 + 28) & 8) == 0)
                    {
                      v27 = *(_QWORD *)(v27 + 56);
                      if (!v27)
                        goto LABEL_44;
                    }
LABEL_70:
                    WebCore::Element::invalidateStyleForSubtreeInternal((WTF::MonotonicTime *)v27);
                    while (1)
                    {
                      v27 = *(_QWORD *)(v27 + 56);
                      if (!v27)
                        break;
                      if ((*(_WORD *)(v27 + 28) & 8) != 0)
                        goto LABEL_70;
                    }
                  }
LABEL_44:
                  WebCore::Style::Invalidator::invalidateHostAndSlottedStyleIfNeeded(v15, v3);
                }
                else
                {
                  WebCore::Document::scheduleFullStyleRebuild(*(WTF::StringImpl **)(v14 + 16));
                }
              }
              else if (v15)
              {
                WebCore::Style::Invalidator::invalidateStyle((WebCore::Style::Invalidator *)&v61, *(WebCore::ShadowRoot **)(v14 + 24));
              }
              else
              {
                v16 = *(WebCore::Element **)(*(_QWORD *)(v14 + 16) + 1272);
                if (v16)
                {
                  bzero(v73, 0x1038uLL);
                  if (WebCore::Style::Invalidator::invalidateIfNeeded((uint64_t)&v61, (uint64_t)v16))
                    WebCore::Style::Invalidator::invalidateStyleForDescendants((WTF *)&v61, v16, (WebCore::SelectorFilter *)v73);
                  WebCore::Style::SelectorMatchingState::~SelectorMatchingState((WebCore::Style::SelectorMatchingState *)v73, v17);
                }
              }
              if (v64)
              {
                v31 = v62;
                v32 = 8 * v64;
                do
                {
                  v33 = *(WebCore::Style::RuleSet **)v31;
                  *(_QWORD *)v31 = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 1)
                    {
                      WebCore::Style::RuleSet::~RuleSet(v33, v3);
                      WTF::fastFree(v34, v35);
                    }
                    else
                    {
                      --*(_DWORD *)v33;
                    }
                  }
                  v31 = (WTF *)((char *)v31 + 8);
                  v32 -= 8;
                }
                while (v32);
              }
              v28 = v62;
              if (v65 != (_BYTE *)v62 && v62 != 0)
              {
                v62 = 0;
                v63 = 0;
                WTF::fastFree(v28, v3);
              }
              v30 = v61;
              v61 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 1)
                {
                  WebCore::Style::RuleSet::~RuleSet(v30, v3);
                  WTF::fastFree(v36, v37);
                }
                else
                {
                  --*(_DWORD *)v30;
                }
              }
            }
            v11 += 8;
          }
          while (v11 != v12);
          if (!v71)
            goto LABEL_90;
        }
        if (v69)
        {
          v43 = v67;
          v44 = 8 * v69;
          do
          {
            v45 = *(WebCore::Style::RuleSet **)v43;
            *(_QWORD *)v43 = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 1)
              {
                WebCore::Style::RuleSet::~RuleSet(v45, v3);
                WTF::fastFree(v46, v47);
              }
              else
              {
                --*(_DWORD *)v45;
              }
            }
            v43 = (WTF *)((char *)v43 + 8);
            v44 -= 8;
          }
          while (v44);
        }
        v40 = v67;
        if (&v70 != (uint64_t *)v67 && v67 != 0)
        {
          v67 = 0;
          v68 = 0;
          WTF::fastFree(v40, v3);
        }
LABEL_90:
        v9 = 1;
      }
      v42 = v6 + 24;
      v6 = v5;
      if (v42 != v5)
      {
        v6 = v42;
        while ((unint64_t)(*(_QWORD *)v6 + 1) <= 1)
        {
          v6 += 24;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    if ((v9 & 1) != 0)
    {
      v13 = v60[2];
      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      {
LABEL_114:
        v50 = *(_QWORD *)(v13 + 528);
        if (v50)
        {
          v51 = *(_QWORD *)(v50 + 8);
          if (v51)
          {
            v52 = *(_QWORD *)(v51 + 24);
            if (v52)
            {
              v53 = *(_QWORD *)(v52 + 8);
              if (v53)
                goto LABEL_124;
            }
          }
        }
        v54 = *(_QWORD *)(v13 + 2632);
        if (v54)
        {
          v55 = *(_QWORD *)(v54 + 8);
          if (v55)
          {
            v56 = *(_QWORD *)(v55 + 528);
            if (v56)
            {
              v57 = *(_QWORD *)(v56 + 8);
              if (v57)
              {
                v58 = *(_QWORD *)(v57 + 24);
                if (v58)
                {
                  v53 = *(_QWORD *)(v58 + 8);
                  if (v53)
                  {
LABEL_124:
                    v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v53 + 80) + 8) + 112);
                    if (v59)
                      Inspector::CSSFrontendDispatcher::mediaQueryResultChanged(*(Inspector::CSSFrontendDispatcher **)(v59 + 48));
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  result = v72;
  if (v72)
    return WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::deallocateTable(v72, v3);
  return result;
}

WTF *WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF *result, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  WTF *v7;
  uint64_t v8;
  char v9;
  int v10;
  WTF *v11;
  WebCore::Style::Resolver *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  WTF *v19;
  WebCore::Style::Resolver *v20;
  unsigned int v21;
  char v22;
  uint64_t v23;
  WebCore::Style::Resolver *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  bmalloc::api *v33;
  void *v34;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WTF *)WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = (WebCore::Style::Resolver *)*a3;
  v13 = ~(*a3 << 32) + *a3;
  v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
  v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
  v16 = ((v15 + ~(v15 << 27)) >> 31) ^ (v15 + ~((_DWORD)v15 << 27));
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = (WTF *)(v8 + 24 * v18);
    v20 = *(WebCore::Style::Resolver **)v19;
    if (!*(_QWORD *)v19)
    {
      if (v11)
      {
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = 0;
        --*(_DWORD *)(*a2 - 16);
        v12 = (WebCore::Style::Resolver *)*a3;
        v19 = v11;
      }
      *a3 = 0;
      v24 = *(WebCore::Style::Resolver **)v19;
      *(_QWORD *)v19 = v12;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
        {
          WebCore::Style::Resolver::~Resolver(v24);
          bmalloc::api::isoDeallocate(v33, v34);
        }
        else
        {
          --*(_DWORD *)v24;
        }
      }
      v25 = *((unsigned int *)v19 + 5);
      if ((_DWORD)v25)
        WTF::VectorTypeOperations<WTF::WeakPtr<WebCore::IntersectionObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>::destruct(*((unsigned int **)v19 + 1), (void *)(*((_QWORD *)v19 + 1) + 8 * v25));
      result = (WTF *)*((_QWORD *)v19 + 1);
      if (result)
      {
        *((_QWORD *)v19 + 1) = 0;
        *((_DWORD *)v19 + 4) = 0;
        result = (WTF *)WTF::fastFree(result, a2);
      }
      v26 = *a4;
      *a4 = 0;
      *((_QWORD *)v19 + 1) = v26;
      LODWORD(v26) = *((_DWORD *)a4 + 2);
      *((_DWORD *)a4 + 2) = 0;
      *((_DWORD *)v19 + 4) = v26;
      LODWORD(v26) = *((_DWORD *)a4 + 3);
      *((_DWORD *)a4 + 3) = 0;
      *((_DWORD *)v19 + 5) = v26;
      v27 = *a2;
      if (*a2)
        v28 = *(_DWORD *)(v27 - 12) + 1;
      else
        v28 = 1;
      *(_DWORD *)(v27 - 12) = v28;
      v29 = *a2;
      if (*a2)
        v30 = *(_DWORD *)(v29 - 12);
      else
        v30 = 0;
      v31 = (*(_DWORD *)(v29 - 16) + v30);
      v32 = *(unsigned int *)(v29 - 4);
      if (v32 > 0x400)
      {
        if (v32 > 2 * v31)
          goto LABEL_26;
      }
      else if (3 * v32 > 4 * v31)
      {
LABEL_26:
        v23 = v29 + 24 * v32;
        v22 = 1;
        goto LABEL_10;
      }
      result = (WTF *)WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::expand(a2, v19);
      v19 = result;
      v29 = *a2;
      if (*a2)
        LODWORD(v32) = *(_DWORD *)(v29 - 4);
      else
        LODWORD(v32) = 0;
      goto LABEL_26;
    }
    if (v20 != (WebCore::Style::Resolver *)-1)
      break;
    v11 = (WTF *)(v8 + 24 * v18);
LABEL_37:
    v16 = i + v18;
  }
  if (v20 != v12)
    goto LABEL_37;
  if ((v9 & 1) != 0)
    v21 = 0;
  else
    v21 = *(_DWORD *)(v8 - 4);
  v22 = 0;
  v23 = v8 + 24 * v21;
LABEL_10:
  *(_QWORD *)v7 = v19;
  *((_QWORD *)v7 + 1) = v23;
  *((_BYTE *)v7 + 16) = v22;
  return result;
}

double WebCore::Style::Scope::didChangeStyleSheetContents(WebCore::Style::Scope *this)
{
  return WebCore::Style::Scope::scheduleUpdate((uint64_t *)this, (WebCore::ShadowRoot *)1);
}

uint64_t WTF::WeakHashMap<WebCore::Element,WebCore::LayoutSize,WebCore::WeakPtrImplWithEventTargetData>::find(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  ++*((_DWORD *)a2 + 2);
  v3 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((a3 & 0xFFFFFFFFFFFFLL) + 8))
  {
    v4 = *a2;
    if (*a2)
    {
      v5 = *(_DWORD *)(v4 - 8);
      v6 = (v3 + ~(a3 << 32)) ^ ((unint64_t)(v3 + ~(a3 << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      for (i = 1; ; ++i)
      {
        v11 = v9;
        v12 = *(_QWORD *)(v4 + 16 * v9);
        if (v12 != -1)
        {
          if (!v12)
          {
            v19 = *(unsigned int *)(v4 - 4);
            v16 = v4 + 16 * v19;
            v17 = v16;
            goto LABEL_17;
          }
          if (v12 == v3)
            break;
        }
        v9 = (v11 + i) & v5;
      }
      v16 = v4 + 16 * v11;
      v19 = *(unsigned int *)(v4 - 4);
      v17 = v4 + 16 * v19;
LABEL_17:
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = v16;
      v20 = (_QWORD *)(result + 8);
      *(_QWORD *)(result + 16) = v17;
      v18 = v4 + 16 * v19;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 0;
      v20 = (_QWORD *)(result + 8);
      *(_QWORD *)(result + 16) = 0;
    }
    *(_QWORD *)(result + 24) = v18;
    *(_QWORD *)(result + 32) = v4 + 16 * v19;
    *(_DWORD *)(result + 40) = 0;
LABEL_19:
    while (v16 != v18 && !*(_QWORD *)(*(_QWORD *)v16 + 8))
    {
      v21 = v16 + 16;
      *v20 = v16 + 16;
      v16 = v17;
      if (v21 != v17)
      {
        v16 = v21;
        while ((unint64_t)(*(_QWORD *)v16 + 1) <= 1)
        {
          v16 += 16;
          *v20 = v16;
          if (v16 == v17)
          {
            v16 = v17;
            goto LABEL_19;
          }
        }
      }
    }
  }
  else
  {
    v13 = *a2;
    if (*a2)
    {
      v14 = *(unsigned int *)(v13 - 4);
      v15 = v13 + 16 * v14;
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = v15;
    }
    else
    {
      v15 = 0;
      v14 = 0;
      *(_QWORD *)result = a2;
      *(_QWORD *)(result + 8) = 0;
    }
    *(_QWORD *)(result + 16) = v15;
    *(_QWORD *)(result + 24) = v15;
    *(_QWORD *)(result + 32) = v13 + 16 * v14;
    *(_DWORD *)(result + 40) = 0;
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Element,WebCore::LayoutSize,WebCore::WeakPtrImplWithEventTargetData>::end(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 16 * v3;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v4 = 0;
    v3 = 0;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
  }
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = v2 + 16 * v3;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t WebCore::Style::Scope::updateQueryContainerState(WebCore::Style::Scope::QueryContainerUpdateContext &)::$_0::operator()(unint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  int v6;

  v4 = HIWORD(a1) & 3;
  if ((_DWORD)v4 == 1)
  {
    v5 = (_DWORD)a4 == a2 && HIDWORD(a4) == a3;
  }
  else
  {
    if ((_DWORD)v4 != 2)
    {
      __break(0xC471u);
      JUMPOUT(0x1965AB0C0);
    }
    v5 = (_DWORD)a4 == a2;
  }
  v6 = v5;
  return v6 ^ 1u;
}

uint64_t *WTF::WeakHashMap<WebCore::Element,WebCore::LayoutSize,WebCore::WeakPtrImplWithEventTargetData>::add<WebCore::LayoutSize&>(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  int i;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *result;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  WTF *v49;
  uint64_t v50;
  WTF *v51;
  uint64_t v52;
  WTF *v53;

  v8 = a2[2];
  v9 = a2[3];
  a2[2] = v8 + 1;
  if (v8 > v9)
    WTF::WeakHashMap<WebCore::Element,WebCore::LayoutSize,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t)a2, a2);
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 8) = a3;
    *(_BYTE *)(v10 + 32) = 0;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v11 & 0xFFFF000000000000 | v10;
    v12 = v11 & 0xFFFFFFFFFFFFLL;
    if ((v11 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v13 = __ldaxr((unsigned int *)v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v12));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v12);
        v50 = *(unsigned int *)(v12 + 28);
        if ((_DWORD)v50)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v50));
        v51 = *(WTF **)(v12 + 16);
        if (v51)
        {
          *(_QWORD *)(v12 + 16) = 0;
          *(_DWORD *)(v12 + 24) = 0;
          WTF::fastFree(v51, a2);
        }
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  v15 = *(_QWORD *)(a3 + 16);
  v16 = v15 & 0xFFFFFFFFFFFFLL;
  do
    v17 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v17 + 1, (unsigned int *)v16));
  do
    v18 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v18 + 1, (unsigned int *)v16));
  if (v16)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v16);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v16));
    if (!v20)
    {
      atomic_store(1u, (unsigned int *)v16);
      v48 = *(unsigned int *)((v15 & 0xFFFFFFFFFFFFLL) + 0x1C);
      if ((_DWORD)v48)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v15 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v48));
      v49 = *(WTF **)((v15 & 0xFFFFFFFFFFFFLL) + 0x10);
      if (v49)
      {
        *(_QWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
        *(_DWORD *)((v15 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
        WTF::fastFree(v49, a2);
      }
      WTF::fastFree((WTF *)(v15 & 0xFFFFFFFFFFFFLL), a2);
    }
  }
  v21 = *(_QWORD *)a2;
  if (*(_QWORD *)a2
    || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a2, 8u, 0), (v21 = *(_QWORD *)a2) != 0))
  {
    v22 = 0;
    v23 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    v23 = 0;
    v22 = 1;
  }
  v24 = 0;
  v25 = (v16 + ~(v15 << 32)) ^ ((unint64_t)(v16 + ~(v15 << 32)) >> 22);
  v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
  v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
  v28 = (v27 >> 31) ^ v27;
  for (i = 1; ; ++i)
  {
    v30 = v28 & v23;
    v31 = (uint64_t *)(v21 + 16 * v30);
    result = (uint64_t *)*v31;
    if (*v31 != -1)
      break;
    v24 = (uint64_t *)(v21 + 16 * v30);
LABEL_22:
    v28 = i + v30;
  }
  if (!result)
  {
    if (v24)
    {
      *v24 = 0;
      v24[1] = 0;
      --*(_DWORD *)(*(_QWORD *)a2 - 16);
      *v24 = v16;
      v31 = v24;
    }
    else
    {
      *v31 = v16;
    }
    v31[1] = *a4;
    v37 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v38 = *(_DWORD *)(v37 - 12) + 1;
    else
      v38 = 1;
    *(_DWORD *)(v37 - 12) = v38;
    v39 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v40 = *(_DWORD *)(v39 - 12);
    else
      v40 = 0;
    v41 = (*(_DWORD *)(v39 - 16) + v40);
    v42 = *(unsigned int *)(v39 - 4);
    if (v42 > 0x400)
    {
      if (v42 <= 2 * v41)
        goto LABEL_40;
    }
    else if (3 * v42 <= 4 * v41)
    {
      if (!(_DWORD)v42)
      {
        v43 = 8;
LABEL_43:
        result = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)a2, v43, v31);
        v31 = result;
        v39 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
          v42 = *(unsigned int *)(v39 - 4);
        else
          v42 = 0;
        goto LABEL_47;
      }
LABEL_40:
      v43 = (_DWORD)v42 << (6 * *(_DWORD *)(v39 - 12) >= (2 * v42));
      goto LABEL_43;
    }
LABEL_47:
    v34 = (uint64_t *)(v39 + 16 * v42);
    v36 = 1;
    goto LABEL_48;
  }
  if (result != (uint64_t *)v16)
    goto LABEL_22;
  if ((v22 & 1) != 0)
    v33 = 0;
  else
    v33 = *(unsigned int *)(v21 - 4);
  v34 = (uint64_t *)(v21 + 16 * v33);
  if (v16)
  {
    do
      v35 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v35 - 1, (unsigned int *)v16));
    if (v35 == 1)
    {
      atomic_store(1u, (unsigned int *)v16);
      v52 = *(unsigned int *)(v16 + 28);
      if ((_DWORD)v52)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v16 + 16), (WTF::StringImpl *)(*(_QWORD *)(v16 + 16) + 32 * v52));
      v53 = *(WTF **)(v16 + 16);
      if (v53)
      {
        *(_QWORD *)(v16 + 16) = 0;
        *(_DWORD *)(v16 + 24) = 0;
        WTF::fastFree(v53, a2);
      }
      result = (uint64_t *)WTF::fastFree((WTF *)v16, a2);
    }
  }
  v36 = 0;
LABEL_48:
  v44 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    v45 = *(unsigned int *)(v44 - 4);
    v46 = (uint64_t *)(v44 + 16 * v45);
  }
  else
  {
    v46 = 0;
    v45 = 0;
  }
  if (v31 != v46)
  {
    while (!*(_QWORD *)(*v31 + 8))
    {
      v47 = v31 + 2;
      v31 = v34;
      if (v47 != v34)
      {
        v31 = v47;
        while ((unint64_t)(*v31 + 1) <= 1)
        {
          v31 += 2;
          if (v31 == v34)
          {
            v31 = v34;
            break;
          }
        }
      }
      if (v31 == v46)
      {
        v31 = v46;
        break;
      }
    }
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 16) = v34;
  *(_QWORD *)(a1 + 24) = v46;
  *(_QWORD *)(a1 + 32) = v44 + 16 * v45;
  *(_DWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = v36;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Element const,WTF::UniqueRef<WebCore::Style::MatchResult>,WebCore::WeakPtrImplWithEventTargetData>::end(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    v4 = v2 + 16 * v3;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v4 = 0;
    v3 = 0;
    *(_QWORD *)result = a2;
    *(_QWORD *)(result + 8) = 0;
  }
  *(_QWORD *)(result + 16) = v4;
  *(_QWORD *)(result + 24) = v4;
  *(_QWORD *)(result + 32) = v2 + 16 * v3;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

uint64_t WebCore::Style::ScopeRuleSets::styleForCascadeLevel(WebCore::Style::ScopeRuleSets *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  switch(a2)
  {
    case 4:
      return *(_QWORD *)a1;
    case 2:
      if (*((_BYTE *)a1 + 316))
      {
        do
        {
          v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16) + 8) + 1328);
          if (!*(_QWORD *)(v3 + 32))
          {
            v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16) + 8) + 1328);
            if (*(_QWORD *)(v3 + 24))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v3);
            else
              WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v3);
            v3 = v7;
            v5 = *(_QWORD *)(v7 + 32);
            if (*(_DWORD *)(v5 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
            {
              v6 = *(_QWORD *)(v7 + 32);
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v5 + 32));
              v5 = v6;
              v3 = v7;
            }
            if (*(_BYTE *)(v5 + 242)
              || *(_BYTE *)(v5 + 243)
              || *(_BYTE *)(v5 + 244)
              || *(_BYTE *)(v5 + 245)
              || *(_BYTE *)(v5 + 246)
              || *(_BYTE *)(v5 + 247)
              || *(_BYTE *)(v5 + 248))
            {
              *(_BYTE *)(v3 + 236) = 1;
            }
          }
          v4 = *(_QWORD *)(v3 + 32);
          a1 = (WebCore::Style::ScopeRuleSets *)(v4 + 32);
        }
        while (*(_BYTE *)(v4 + 348));
      }
      return *((_QWORD *)a1 + 3);
    case 1:
      return WebCore::Style::ScopeRuleSets::userAgentMediaQueryStyle(a1);
    default:
      return 0;
  }
}

const WebCore::MQ::MediaQueryEvaluator **WebCore::Style::ScopeRuleSets::evaluateDynamicMediaQueryRules(WebCore::MQ::MediaQueryEvaluator const&)::$_0::operator()<WebCore::Style::RuleSet>(const WebCore::MQ::MediaQueryEvaluator **result, WebCore::Style::RuleSet *this)
{
  const WebCore::MQ::MediaQueryEvaluator **v2;
  void *v3;
  const WebCore::MQ::MediaQueryEvaluator *v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  const WebCore::MQ::MediaQueryEvaluator *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  WTF *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  int v30;
  WTF *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  char v35;

  if (!this)
    return result;
  v2 = result;
  result = (const WebCore::MQ::MediaQueryEvaluator **)WebCore::Style::RuleSet::evaluateDynamicMediaQueryRules(this, *result, (uint64_t)&v30);
  if (!v35)
    return result;
  v4 = v2[1];
  if (!*((_BYTE *)v4 + 32))
  {
    *(_DWORD *)v4 = v30;
    v7 = v33;
    result = (const WebCore::MQ::MediaQueryEvaluator **)((char *)v4 + 24);
    *((_QWORD *)v4 + 1) = (char *)v4 + 24;
    *((_DWORD *)v4 + 4) = 1;
    *((_DWORD *)v4 + 5) = v7;
    if (v7 >= 2)
    {
      if (v7 >> 29)
        goto LABEL_55;
      result = (const WebCore::MQ::MediaQueryEvaluator **)WTF::fastMalloc((WTF *)(8 * v7));
      *((_DWORD *)v4 + 4) = v7;
      *((_QWORD *)v4 + 1) = result;
    }
    if (v33)
    {
      v8 = v31;
      v9 = 8 * v33;
      do
      {
        v10 = *(const WebCore::MQ::MediaQueryEvaluator **)v8;
        if (*(_QWORD *)v8)
          ++*(_DWORD *)v10;
        *result++ = v10;
        v8 = (WTF *)((char *)v8 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    *((_BYTE *)v4 + 32) = 1;
    goto LABEL_34;
  }
  v5 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 <= v30)
    v5 = v30;
  *(_DWORD *)v4 = v5;
  v6 = (_QWORD *)((char *)v4 + 8);
  if (v5 != 1)
  {
    v11 = *((unsigned int *)v4 + 4);
    v12 = *((unsigned int *)v4 + 5);
    v13 = v33 + v12;
    if (v13 <= v11)
    {
LABEL_30:
      if (v33)
      {
        v20 = v31;
        v21 = *((_DWORD *)v4 + 5);
        v22 = 8 * v33;
        do
        {
          v23 = (_QWORD *)*v6;
          v24 = *(_QWORD *)v20;
          *(_QWORD *)v20 = 0;
          v20 = (WTF *)((char *)v20 + 8);
          v23[v21++] = v24;
          v22 -= 8;
        }
        while (v22);
        *((_DWORD *)v4 + 5) = v21;
      }
      goto LABEL_34;
    }
    v14 = v11 + (v11 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v13)
      v16 = v33 + v12;
    else
      v16 = v15;
    v17 = (_QWORD *)*v6;
    if (v16 < 2)
    {
      v18 = (char *)v4 + 24;
      *((_QWORD *)v4 + 1) = (char *)v4 + 24;
      *((_DWORD *)v4 + 4) = 1;
LABEL_25:
      result = (const WebCore::MQ::MediaQueryEvaluator **)memcpy(v18, v17, 8 * v12);
      if ((_QWORD *)((char *)v4 + 24) != v17 && v17 != 0)
      {
        if ((_QWORD *)*v6 == v17)
        {
          *((_QWORD *)v4 + 1) = 0;
          *((_DWORD *)v4 + 4) = 0;
        }
        result = (const WebCore::MQ::MediaQueryEvaluator **)WTF::fastFree((WTF *)v17, v3);
      }
      goto LABEL_30;
    }
    if (!(v16 >> 29))
    {
      v18 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
      *((_DWORD *)v4 + 4) = v16;
      *((_QWORD *)v4 + 1) = v18;
      goto LABEL_25;
    }
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x1965AB964);
  }
  result = (const WebCore::MQ::MediaQueryEvaluator **)WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)v4 + 2, 0);
LABEL_34:
  if (v35)
  {
    v25 = v31;
    if (v33)
    {
      v26 = 8 * v33;
      do
      {
        result = *(const WebCore::MQ::MediaQueryEvaluator ***)v25;
        *(_QWORD *)v25 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::Style::RuleSet::~RuleSet((WebCore::Style::RuleSet *)result, v3);
            result = (const WebCore::MQ::MediaQueryEvaluator **)WTF::fastFree(v27, v28);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        v25 = (WTF *)((char *)v25 + 8);
        v26 -= 8;
      }
      while (v26);
      v25 = v31;
    }
    if (&v34 != (uint64_t *)v25 && v25 != 0)
    {
      v31 = 0;
      v32 = 0;
      return (const WebCore::MQ::MediaQueryEvaluator **)WTF::fastFree(v25, v3);
    }
  }
  return result;
}

const WebCore::CSSSelector *WebCore::Style::ensureInvalidationRuleSets<WTF::AtomString,WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>(WTF::StringImpl **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  unsigned int j;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  int k;
  unsigned int v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  uint64_t v41;
  WTF::StringImpl *v42;
  const WebCore::CSSSelector *result;
  uint64_t v44;
  void *v45;
  __int16 v46;
  __int16 v47;
  WebCore::Style::RuleSet *v48;
  WTF *v49;
  int v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  WTF *v54;
  void *v55;
  WebCore::Style::RuleSet **v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  void *v63;
  uint64_t v64;
  unsigned int v65;
  __int16 v66;
  uint64_t v67;
  __int128 v68;
  int v69;
  uint64_t v71;
  void *v72;
  WTF *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned __int8 *v80;
  const WebCore::CSSSelector *v81[4];

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  v9 = *a1;
  v10 = *((_DWORD *)*a1 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v12 = v10 & v7;
    v13 = v6 + 16 * v12;
    v14 = *(WTF::StringImpl **)v13;
    if (!*(_QWORD *)v13)
      break;
    if (v14 == (WTF::StringImpl *)-1)
    {
      v8 = (_QWORD *)(v6 + 16 * v12);
    }
    else if (v14 == v9)
    {
      return *(const WebCore::CSSSelector **)(v13 + 8);
    }
    v10 = i + v12;
  }
  if (v8)
  {
    *v8 = 0;
    v8[1] = 0;
    --*(_DWORD *)(*a2 - 16);
    v9 = *a1;
    v13 = (uint64_t)v8;
  }
  if (v9)
    *(_DWORD *)v9 += 2;
  *(_QWORD *)v13 = v9;
  v15 = *a3;
  if (!*a3)
    goto LABEL_87;
  v16 = 0;
  for (j = *((_DWORD *)*a1 + 4) >> 8; ; j = ++v16 + v18)
  {
    v18 = j & *(_DWORD *)(v15 - 8);
    v19 = *(WTF::StringImpl **)(v15 + 16 * v18);
    if (!v19)
      goto LABEL_87;
    if (v19 != (WTF::StringImpl *)-1 && v19 == *a1)
      break;
  }
  v21 = *(uint64_t **)(v15 + 16 * v18 + 8);
  if (!v21)
  {
LABEL_87:
    v71 = 0;
    goto LABEL_91;
  }
  v80 = 0;
  v22 = *((unsigned int *)v21 + 3);
  if (!(_DWORD)v22)
    goto LABEL_88;
  v23 = *v21;
  v24 = *v21 + 16 * v22;
  do
  {
    v25 = *(unsigned __int8 *)(v23 + 12);
    v26 = *(unsigned __int8 *)(v23 + 13);
    v27 = (uint64_t)v80;
    if (v80
      || (WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::rehash((uint64_t *)&v80, 8u, 0), (v27 = (uint64_t)v80) != 0))
    {
      v28 = *(_DWORD *)(v27 - 8);
    }
    else
    {
      v28 = 0;
    }
    v29 = 0;
    v30 = 9 * ((~(v25 << 15) + v25) ^ ((~(v25 << 15) + v25) >> 10));
    v31 = (v30 ^ (v30 >> 6)) + ~((v30 ^ (v30 >> 6)) << 11);
    v32 = 9 * ((~(v26 << 15) + v26) ^ ((~(v26 << 15) + v26) >> 10));
    v33 = (v32 ^ (v32 >> 6)) + ~((v32 ^ (v32 >> 6)) << 11);
    v34 = (0xD7862706ELL
         * (unint64_t)(277951225 * (v31 ^ HIWORD(v31))
                            + 95187966
                            * ((0xD7862706ELL
                                            * (unint64_t)(277951225 * (v33 ^ HIWORD(v33)) + 425104576)) >> 4))) >> 4;
    for (k = 1; ; ++k)
    {
      v36 = v34 & v28;
      v37 = (unsigned __int8 *)(v27 + 40 * v36);
      v38 = *v37;
      v39 = v37[1];
      if (!(v38 | v39) && !v37[2])
        break;
      if (v38 == v25 && v39 == v26 && v37[2] != 0)
        goto LABEL_33;
      if (v38 == 255)
        v29 = v27 + 40 * v36;
      LODWORD(v34) = k + v36;
    }
    if (v29)
    {
      *(_BYTE *)(v29 + 2) = 0;
      *(_WORD *)v29 = 0;
      *(_OWORD *)(v29 + 8) = 0u;
      *(_OWORD *)(v29 + 24) = 0u;
      --*((_DWORD *)v80 - 4);
      v37 = (unsigned __int8 *)v29;
    }
    *v37 = v25;
    v37[1] = v26;
    v37[2] = 1;
    v44 = WTF::fastMalloc((WTF *)0x328);
    *(_DWORD *)v44 = 1;
    *(_OWORD *)(v44 + 8) = 0u;
    *(_OWORD *)(v44 + 24) = 0u;
    *(_OWORD *)(v44 + 40) = 0u;
    *(_OWORD *)(v44 + 56) = 0u;
    *(_QWORD *)(v44 + 72) = v44 + 88;
    *(_QWORD *)(v44 + 80) = 1;
    *(_QWORD *)(v44 + 120) = v44 + 136;
    *(_QWORD *)(v44 + 128) = 1;
    *(_QWORD *)(v44 + 168) = v44 + 184;
    *(_QWORD *)(v44 + 176) = 1;
    *(_QWORD *)(v44 + 216) = v44 + 232;
    *(_QWORD *)(v44 + 224) = 1;
    *(_QWORD *)(v44 + 264) = v44 + 280;
    *(_QWORD *)(v44 + 272) = 1;
    *(_QWORD *)(v44 + 312) = v44 + 328;
    *(_QWORD *)(v44 + 320) = 1;
    *(_QWORD *)(v44 + 360) = v44 + 376;
    *(_QWORD *)(v44 + 368) = 1;
    *(_QWORD *)(v44 + 408) = v44 + 424;
    *(_QWORD *)(v44 + 416) = 1;
    *(_QWORD *)(v44 + 645) = 0;
    *(_OWORD *)(v44 + 616) = 0u;
    *(_OWORD *)(v44 + 632) = 0u;
    *(_OWORD *)(v44 + 584) = 0u;
    *(_OWORD *)(v44 + 600) = 0u;
    *(_OWORD *)(v44 + 552) = 0u;
    *(_OWORD *)(v44 + 568) = 0u;
    *(_OWORD *)(v44 + 520) = 0u;
    *(_OWORD *)(v44 + 536) = 0u;
    *(_OWORD *)(v44 + 488) = 0u;
    *(_OWORD *)(v44 + 504) = 0u;
    *(_OWORD *)(v44 + 456) = 0u;
    *(_OWORD *)(v44 + 472) = 0u;
    *(_QWORD *)(v44 + 672) = 0;
    *(_DWORD *)(v44 + 680) = 0;
    *(_OWORD *)(v44 + 656) = 0u;
    *(_OWORD *)(v44 + 688) = 0u;
    *(_OWORD *)(v44 + 704) = 0u;
    *(_OWORD *)(v44 + 720) = 0u;
    *(_OWORD *)(v44 + 736) = 0u;
    *(_OWORD *)(v44 + 752) = 0u;
    *(_OWORD *)(v44 + 768) = 0u;
    *(_OWORD *)(v44 + 784) = 0u;
    *(_WORD *)(v44 + 800) = 0;
    v46 = *(unsigned __int8 *)(v23 + 12);
    v47 = *(unsigned __int8 *)(v23 + 13);
    v48 = (WebCore::Style::RuleSet *)*((_QWORD *)v37 + 1);
    *((_QWORD *)v37 + 1) = v44;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
      {
        WebCore::Style::RuleSet::~RuleSet(v48, v45);
        WTF::fastFree(v54, v55);
      }
      else
      {
        --*(_DWORD *)v48;
      }
    }
    v49 = (WTF *)*((_QWORD *)v37 + 2);
    if (v49)
    {
      *((_QWORD *)v37 + 2) = 0;
      *((_DWORD *)v37 + 6) = 0;
      WTF::fastFree(v49, v45);
    }
    *((_QWORD *)v37 + 2) = 0;
    *((_QWORD *)v37 + 3) = 0;
    *((_WORD *)v37 + 16) = v46 | (v47 << 8);
    if (v80)
      v50 = *((_DWORD *)v80 - 3) + 1;
    else
      v50 = 1;
    *((_DWORD *)v80 - 3) = v50;
    if (v80)
      v51 = *((_DWORD *)v80 - 3);
    else
      v51 = 0;
    v52 = (*((_DWORD *)v80 - 4) + v51);
    v53 = *((unsigned int *)v80 - 1);
    if (v53 > 0x400)
    {
      if (v53 > 2 * v52)
        goto LABEL_33;
    }
    else if (3 * v53 > 4 * v52)
    {
      goto LABEL_33;
    }
    v37 = WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::expand((uint64_t *)&v80, v37);
LABEL_33:
    v41 = *((_QWORD *)v37 + 1);
    WebCore::Style::RuleData::RuleData(v81, *(const WebCore::CSSSelector **)v23, *(_WORD *)(v23 + 8), *(unsigned __int16 *)(v23 + 10), *(_DWORD *)(v41 + 680), 0);
    WebCore::Style::RuleSet::addRule(v41, v81, 0, 0, 0);
    result = v81[0];
    v81[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (const WebCore::CSSSelector *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v42);
      else
        --*(_DWORD *)result;
    }
    v23 += 16;
  }
  while (v23 != v24);
  v56 = (WebCore::Style::RuleSet **)v80;
  if (!v80)
  {
LABEL_88:
    v64 = 0;
    LODWORD(v57) = 0;
    goto LABEL_89;
  }
  v57 = *((unsigned int *)v80 - 3);
  if (!(_DWORD)v57)
  {
    v64 = 0;
    goto LABEL_89;
  }
  v58 = *((unsigned int *)v80 - 1);
  v59 = &v80[40 * v58];
  if ((_DWORD)v58)
  {
    v60 = 40 * v58;
    while (1)
    {
      v61 = *(unsigned __int8 *)v56;
      if (v61 != 255 && (v61 | *((unsigned __int8 *)v56 + 1) | *((unsigned __int8 *)v56 + 2)) != 0)
        break;
      v56 += 5;
      v60 -= 40;
      if (!v60)
      {
        v56 = (WebCore::Style::RuleSet **)v59;
        break;
      }
    }
  }
  if (v57 >> 27)
  {
    __break(0xC471u);
    return result;
  }
  v64 = WTF::fastMalloc((WTF *)(32 * v57));
  if (v59 == (unsigned __int8 *)v56)
  {
LABEL_89:
    v65 = 0;
    goto LABEL_90;
  }
  v65 = 0;
LABEL_78:
  WebCore::Style::RuleSet::shrinkToFit(v56[1], v63);
  v66 = *((_WORD *)v56 + 16);
  v67 = v64 + 32 * v65;
  v68 = *(_OWORD *)(v56 + 1);
  v56[1] = 0;
  v56[2] = 0;
  *(_OWORD *)v67 = v68;
  *(_QWORD *)&v68 = v56[3];
  v56[3] = 0;
  *(_QWORD *)(v67 + 16) = v68;
  *(_WORD *)(v67 + 24) = v66;
  ++v65;
  while (1)
  {
    v56 += 5;
    if (v56 == (WebCore::Style::RuleSet **)v59)
      break;
    v69 = *(unsigned __int8 *)v56;
    if (v69 != 255 && (v69 | *((unsigned __int8 *)v56 + 1) | *((unsigned __int8 *)v56 + 2)) != 0)
    {
      if (v56 != (WebCore::Style::RuleSet **)v59)
        goto LABEL_78;
      break;
    }
  }
LABEL_90:
  v71 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v71 = v64;
  *(_DWORD *)(v71 + 8) = v57;
  *(_DWORD *)(v71 + 12) = v65;
  WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::~HashTable((uint64_t *)&v80, v72);
LABEL_91:
  v73 = *(WTF **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v71;
  if (v73)
    std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v13 + 8, v73);
  v74 = *a2;
  if (*a2)
    v75 = *(_DWORD *)(v74 - 12) + 1;
  else
    v75 = 1;
  *(_DWORD *)(v74 - 12) = v75;
  v76 = *a2;
  if (*a2)
    v77 = *(_DWORD *)(v76 - 12);
  else
    v77 = 0;
  v78 = (*(_DWORD *)(v76 - 16) + v77);
  v79 = *(unsigned int *)(v76 - 4);
  if (v79 > 0x400)
  {
    if (v79 <= 2 * v78)
      goto LABEL_103;
  }
  else
  {
    if (3 * v79 > 4 * v78)
      return *(const WebCore::CSSSelector **)(v13 + 8);
LABEL_103:
    v13 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a2, (WTF::StringImpl **)v13);
  }
  return *(const WebCore::CSSSelector **)(v13 + 8);
}

const WebCore::CSSSelector *WebCore::Style::ScopeRuleSets::attributeInvalidationRuleSets(WebCore::Style::ScopeRuleSets *this, WTF::StringImpl **a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  int v15;
  unsigned int j;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  int k;
  unsigned int v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  uint64_t v40;
  WTF::StringImpl *v41;
  const WebCore::CSSSelector *result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __int16 v47;
  __int16 v48;
  WebCore::Style::RuleSet *v49;
  WTF *v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  WebCore::Style::RuleSet **v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  int v69;
  void *v71;
  uint64_t v72;
  unsigned int v73;
  __int16 v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  void *v79;
  WTF *v80;
  void *v81;
  unsigned __int8 *v82;
  const WebCore::CSSSelector *v83[4];

  v4 = (uint64_t *)((char *)this + 264);
  v5 = *((_QWORD *)this + 33);
  if (v5
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)this + 33, 8u, 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
  v8 = *a2;
  v9 = *((_DWORD *)*a2 + 4) >> 8;
  for (i = 1; ; ++i)
  {
    v11 = v9 & v6;
    v12 = v5 + 16 * v11;
    v13 = *(WTF::StringImpl **)v12;
    if (!*(_QWORD *)v12)
      break;
    if (v13 == (WTF::StringImpl *)-1)
    {
      v7 = (_QWORD *)(v5 + 16 * v11);
    }
    else if (v13 == v8)
    {
      return *(const WebCore::CSSSelector **)(v12 + 8);
    }
    v9 = i + v11;
  }
  if (v7)
  {
    *v7 = 0;
    v7[1] = 0;
    --*(_DWORD *)(*v4 - 16);
    v8 = *a2;
    v12 = (uint64_t)v7;
  }
  if (v8)
    *(_DWORD *)v8 += 2;
  *(_QWORD *)v12 = v8;
  v14 = *((_QWORD *)this + 16);
  if (!v14)
    goto LABEL_69;
  v15 = 0;
  for (j = *((_DWORD *)*a2 + 4) >> 8; ; j = ++v15 + v17)
  {
    v17 = j & *(_DWORD *)(v14 - 8);
    v18 = *(WTF::StringImpl **)(v14 + 16 * v17);
    if (!v18)
      goto LABEL_69;
    if (v18 != (WTF::StringImpl *)-1 && v18 == *a2)
      break;
  }
  v20 = *(uint64_t **)(v14 + 16 * v17 + 8);
  if (!v20)
  {
LABEL_69:
    v55 = 0;
    goto LABEL_70;
  }
  v82 = 0;
  v21 = *((_DWORD *)v20 + 3);
  if (!v21)
    goto LABEL_108;
  v22 = *v20;
  v23 = *v20 + 24 * v21;
  do
  {
    v24 = *(unsigned __int8 *)(v22 + 12);
    v25 = *(unsigned __int8 *)(v22 + 13);
    v26 = (uint64_t)v82;
    if (v82
      || (WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::rehash((uint64_t *)&v82, 8u, 0), (v26 = (uint64_t)v82) != 0))
    {
      v27 = *(_DWORD *)(v26 - 8);
    }
    else
    {
      v27 = 0;
    }
    v28 = 0;
    v29 = 9 * ((~(v24 << 15) + v24) ^ ((~(v24 << 15) + v24) >> 10));
    v30 = (v29 ^ (v29 >> 6)) + ~((v29 ^ (v29 >> 6)) << 11);
    v31 = 9 * ((~(v25 << 15) + v25) ^ ((~(v25 << 15) + v25) >> 10));
    v32 = (v31 ^ (v31 >> 6)) + ~((v31 ^ (v31 >> 6)) << 11);
    v33 = (0xD7862706ELL
         * (unint64_t)(277951225 * (v30 ^ HIWORD(v30))
                            + 95187966
                            * ((0xD7862706ELL
                                            * (unint64_t)(277951225 * (v32 ^ HIWORD(v32)) + 425104576)) >> 4))) >> 4;
    for (k = 1; ; ++k)
    {
      v35 = v33 & v27;
      v36 = (unsigned __int8 *)(v26 + 40 * v35);
      v37 = *v36;
      v38 = v36[1];
      if (!(v37 | v38) && !v36[2])
        break;
      if (v37 == v24 && v38 == v25 && v36[2] != 0)
        goto LABEL_35;
      if (v37 == 255)
        v28 = v26 + 40 * v35;
      LODWORD(v33) = k + v35;
    }
    if (v28)
    {
      *(_BYTE *)(v28 + 2) = 0;
      *(_WORD *)v28 = 0;
      *(_OWORD *)(v28 + 8) = 0u;
      *(_OWORD *)(v28 + 24) = 0u;
      --*((_DWORD *)v82 - 4);
      v36 = (unsigned __int8 *)v28;
    }
    *v36 = v24;
    v36[1] = v25;
    v36[2] = 1;
    v45 = WTF::fastMalloc((WTF *)0x328);
    *(_DWORD *)v45 = 1;
    *(_OWORD *)(v45 + 8) = 0u;
    *(_OWORD *)(v45 + 24) = 0u;
    *(_OWORD *)(v45 + 40) = 0u;
    *(_OWORD *)(v45 + 56) = 0u;
    *(_QWORD *)(v45 + 72) = v45 + 88;
    *(_QWORD *)(v45 + 80) = 1;
    *(_QWORD *)(v45 + 120) = v45 + 136;
    *(_QWORD *)(v45 + 128) = 1;
    *(_QWORD *)(v45 + 168) = v45 + 184;
    *(_QWORD *)(v45 + 176) = 1;
    *(_QWORD *)(v45 + 216) = v45 + 232;
    *(_QWORD *)(v45 + 224) = 1;
    *(_QWORD *)(v45 + 264) = v45 + 280;
    *(_QWORD *)(v45 + 272) = 1;
    *(_QWORD *)(v45 + 312) = v45 + 328;
    *(_QWORD *)(v45 + 320) = 1;
    *(_QWORD *)(v45 + 360) = v45 + 376;
    *(_QWORD *)(v45 + 368) = 1;
    *(_QWORD *)(v45 + 408) = v45 + 424;
    *(_QWORD *)(v45 + 416) = 1;
    *(_QWORD *)(v45 + 645) = 0;
    *(_OWORD *)(v45 + 616) = 0u;
    *(_OWORD *)(v45 + 632) = 0u;
    *(_OWORD *)(v45 + 584) = 0u;
    *(_OWORD *)(v45 + 600) = 0u;
    *(_OWORD *)(v45 + 552) = 0u;
    *(_OWORD *)(v45 + 568) = 0u;
    *(_OWORD *)(v45 + 520) = 0u;
    *(_OWORD *)(v45 + 536) = 0u;
    *(_OWORD *)(v45 + 488) = 0u;
    *(_OWORD *)(v45 + 504) = 0u;
    *(_OWORD *)(v45 + 456) = 0u;
    *(_OWORD *)(v45 + 472) = 0u;
    *(_QWORD *)(v45 + 672) = 0;
    *(_DWORD *)(v45 + 680) = 0;
    *(_OWORD *)(v45 + 656) = 0u;
    *(_OWORD *)(v45 + 688) = 0u;
    *(_OWORD *)(v45 + 704) = 0u;
    *(_OWORD *)(v45 + 720) = 0u;
    *(_OWORD *)(v45 + 736) = 0u;
    *(_OWORD *)(v45 + 752) = 0u;
    *(_OWORD *)(v45 + 768) = 0u;
    *(_OWORD *)(v45 + 784) = 0u;
    *(_WORD *)(v45 + 800) = 0;
    v47 = *(unsigned __int8 *)(v22 + 12);
    v48 = *(unsigned __int8 *)(v22 + 13);
    v49 = (WebCore::Style::RuleSet *)*((_QWORD *)v36 + 1);
    *((_QWORD *)v36 + 1) = v45;
    if (v49)
    {
      if (*(_DWORD *)v49 == 1)
      {
        WebCore::Style::RuleSet::~RuleSet(v49, v46);
        WTF::fastFree(v80, v81);
      }
      else
      {
        --*(_DWORD *)v49;
      }
    }
    v50 = (WTF *)*((_QWORD *)v36 + 2);
    if (v50)
    {
      *((_QWORD *)v36 + 2) = 0;
      *((_DWORD *)v36 + 6) = 0;
      WTF::fastFree(v50, v46);
    }
    *((_QWORD *)v36 + 2) = 0;
    *((_QWORD *)v36 + 3) = 0;
    *((_WORD *)v36 + 16) = v47 | (v48 << 8);
    if (v82)
      v51 = *((_DWORD *)v82 - 3) + 1;
    else
      v51 = 1;
    *((_DWORD *)v82 - 3) = v51;
    if (v82)
      v52 = *((_DWORD *)v82 - 3);
    else
      v52 = 0;
    v53 = (*((_DWORD *)v82 - 4) + v52);
    v54 = *((unsigned int *)v82 - 1);
    if (v54 > 0x400)
    {
      if (v54 > 2 * v53)
        goto LABEL_35;
    }
    else if (3 * v54 > 4 * v53)
    {
      goto LABEL_35;
    }
    v36 = WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::expand((uint64_t *)&v82, v36);
LABEL_35:
    v40 = *((_QWORD *)v36 + 1);
    WebCore::Style::RuleData::RuleData(v83, *(const WebCore::CSSSelector **)v22, *(_WORD *)(v22 + 8), *(unsigned __int16 *)(v22 + 10), *(_DWORD *)(v40 + 680), 0);
    WebCore::Style::RuleSet::addRule(v40, v83, 0, 0, 0);
    result = v83[0];
    v83[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (const WebCore::CSSSelector *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v41);
      else
        --*(_DWORD *)result;
    }
    v43 = *(_QWORD *)(v22 + 16);
    if (v43)
    {
      result = (const WebCore::CSSSelector *)(v36 + 16);
      v44 = *((unsigned int *)v36 + 7);
      if ((_DWORD)v44 == *((_DWORD *)v36 + 6))
      {
        result = (const WebCore::CSSSelector *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v44 + 1, v22 + 16);
        v44 = *((unsigned int *)v36 + 7);
        *(_QWORD *)(*((_QWORD *)v36 + 2) + 8 * v44) = *(_QWORD *)result;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)result + 8 * v44) = v43;
      }
      *((_DWORD *)v36 + 7) = v44 + 1;
    }
    v22 += 24;
  }
  while (v22 != v23);
  v64 = (WebCore::Style::RuleSet **)v82;
  if (!v82)
  {
LABEL_108:
    v72 = 0;
    LODWORD(v65) = 0;
    goto LABEL_109;
  }
  v65 = *((unsigned int *)v82 - 3);
  if (!(_DWORD)v65)
  {
    v72 = 0;
    goto LABEL_109;
  }
  v66 = *((unsigned int *)v82 - 1);
  v67 = &v82[40 * v66];
  if ((_DWORD)v66)
  {
    v68 = 40 * v66;
    while (1)
    {
      v69 = *(unsigned __int8 *)v64;
      if (v69 != 255 && (v69 | *((unsigned __int8 *)v64 + 1) | *((unsigned __int8 *)v64 + 2)) != 0)
        break;
      v64 += 5;
      v68 -= 40;
      if (!v68)
      {
        v64 = (WebCore::Style::RuleSet **)v67;
        break;
      }
    }
  }
  if (v65 >> 27)
  {
    __break(0xC471u);
    return result;
  }
  v72 = WTF::fastMalloc((WTF *)(32 * v65));
  if (v67 == (unsigned __int8 *)v64)
  {
LABEL_109:
    v73 = 0;
    goto LABEL_110;
  }
  v73 = 0;
LABEL_96:
  WebCore::Style::RuleSet::shrinkToFit(v64[1], v71);
  v74 = *((_WORD *)v64 + 16);
  v75 = v72 + 32 * v73;
  v76 = *(_OWORD *)(v64 + 1);
  v64[1] = 0;
  v64[2] = 0;
  *(_OWORD *)v75 = v76;
  *(_QWORD *)&v76 = v64[3];
  v64[3] = 0;
  *(_QWORD *)(v75 + 16) = v76;
  *(_WORD *)(v75 + 24) = v74;
  ++v73;
  while (1)
  {
    v64 += 5;
    if (v64 == (WebCore::Style::RuleSet **)v67)
      break;
    v77 = *(unsigned __int8 *)v64;
    if (v77 != 255 && (v77 | *((unsigned __int8 *)v64 + 1) | *((unsigned __int8 *)v64 + 2)) != 0)
    {
      if (v64 != (WebCore::Style::RuleSet **)v67)
        goto LABEL_96;
      break;
    }
  }
LABEL_110:
  v55 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v55 = v72;
  *(_DWORD *)(v55 + 8) = v65;
  *(_DWORD *)(v55 + 12) = v73;
  WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::~HashTable((uint64_t *)&v82, v79);
LABEL_70:
  v56 = *(WTF **)(v12 + 8);
  *(_QWORD *)(v12 + 8) = v55;
  if (v56)
    std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v12 + 8, v56);
  v57 = *v4;
  if (*v4)
    v58 = *(_DWORD *)(v57 - 12) + 1;
  else
    v58 = 1;
  *(_DWORD *)(v57 - 12) = v58;
  v59 = *v4;
  if (*v4)
    v60 = *(_DWORD *)(v59 - 12);
  else
    v60 = 0;
  v61 = (*(_DWORD *)(v59 - 16) + v60);
  v62 = *(unsigned int *)(v59 - 4);
  if (v62 > 0x400)
  {
    if (v62 > 2 * v61)
      return *(const WebCore::CSSSelector **)(v12 + 8);
LABEL_82:
    v63 = (_DWORD)v62 << (6 * *(_DWORD *)(v59 - 12) >= (2 * v62));
    goto LABEL_107;
  }
  if (3 * v62 > 4 * v61)
    return *(const WebCore::CSSSelector **)(v12 + 8);
  if ((_DWORD)v62)
    goto LABEL_82;
  v63 = 8;
LABEL_107:
  v12 = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(v4, v63, (WTF::StringImpl **)v12);
  return *(const WebCore::CSSSelector **)(v12 + 8);
}

const WebCore::CSSSelector *WebCore::Style::ScopeRuleSets::pseudoClassInvalidationRuleSets(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  int i;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  _DWORD *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  const WebCore::CSSSelector *result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  int j;
  unsigned int v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  uint64_t v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  void *v58;
  __int16 v59;
  __int16 v60;
  WebCore::Style::RuleSet *v61;
  WTF *v62;
  int v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  WebCore::Style::RuleSet **v68;
  uint64_t v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  int v73;
  void *v75;
  uint64_t v76;
  unsigned int v77;
  __int16 v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  void *v83;
  WTF *v84;
  void *v85;
  uint64_t v86;
  unsigned __int8 *v87;
  const WebCore::CSSSelector *v88[4];

  v3 = (uint64_t *)(a1 + 272);
  v4 = (uint64_t *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 272);
  if (v5
    || (WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash((uint64_t *)(a1 + 272), 8u, 0), (v5 = *v3) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = 0;
  v8 = *(_DWORD *)a2;
  v9 = 9 * ((v8 + ~(v8 << 15)) ^ ((v8 + ~(v8 << 15)) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = v10 ^ HIWORD(v10);
  v12 = *(unsigned __int8 *)(a2 + 4);
  v13 = 9 * ((~(v12 << 15) + v12) ^ ((~(v12 << 15) + v12) >> 10));
  v14 = (v13 ^ (v13 >> 6)) + ~((v13 ^ (v13 >> 6)) << 11);
  v15 = v14 ^ HIWORD(v14);
  v16 = *(_QWORD *)(a2 + 8);
  v17 = (0xD7862706ELL
       * (unint64_t)(277951225 * v11
                          + 95187966
                          * ((0xD7862706ELL
                                          * (unint64_t)(95187966 * (*(_DWORD *)(v16 + 16) >> 8)
                                                                           + 277951225 * v15)) >> 4))) >> 4;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v6;
    v20 = v5 + 24 * v19;
    v21 = *(_DWORD *)v20;
    v22 = *(unsigned __int8 *)(v20 + 4);
    if (!(*(_DWORD *)v20 | v22))
      break;
    if (v21 == -1)
    {
      v7 = (_QWORD *)(v5 + 24 * v19);
      goto LABEL_13;
    }
LABEL_8:
    if (v21 == v8 && v22 == v12 && *(_QWORD *)(v20 + 8) == v16)
      return *(const WebCore::CSSSelector **)(v20 + 16);
LABEL_13:
    LODWORD(v17) = i + v19;
  }
  if (*(_QWORD *)(v20 + 8))
    goto LABEL_8;
  if (v7)
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    --*(_DWORD *)(*v3 - 16);
    v8 = *(_DWORD *)a2;
    v20 = (uint64_t)v7;
  }
  *(_DWORD *)v20 = v8;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(a2 + 4);
  v24 = *(_DWORD **)(a2 + 8);
  if (v24)
    *v24 += 2;
  v25 = *(WTF::StringImpl **)(v20 + 8);
  *(_QWORD *)(v20 + 8) = v24;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, 0);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>,std::tuple<unsigned int,unsigned char,WTF::AtomString>>(v4, (int *)a2);
  if (!v26)
  {
    v27 = 0;
    goto LABEL_23;
  }
  v87 = 0;
  v36 = *(unsigned int *)(v26 + 12);
  if (!(_DWORD)v36)
    goto LABEL_103;
  v37 = *(_QWORD *)v26;
  v38 = *(_QWORD *)v26 + 16 * v36;
  v86 = v38;
  while (2)
  {
    v39 = *(unsigned __int8 *)(v37 + 12);
    v40 = *(unsigned __int8 *)(v37 + 13);
    v41 = (uint64_t)v87;
    if (v87
      || (WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::rehash((uint64_t *)&v87, 8u, 0), (v41 = (uint64_t)v87) != 0))
    {
      v42 = *(_DWORD *)(v41 - 8);
    }
    else
    {
      v42 = 0;
    }
    v43 = 0;
    v44 = 9 * ((~(v39 << 15) + v39) ^ ((~(v39 << 15) + v39) >> 10));
    v45 = (v44 ^ (v44 >> 6)) + ~((v44 ^ (v44 >> 6)) << 11);
    v46 = 9 * ((~(v40 << 15) + v40) ^ ((~(v40 << 15) + v40) >> 10));
    v47 = (v46 ^ (v46 >> 6)) + ~((v46 ^ (v46 >> 6)) << 11);
    v48 = (0xD7862706ELL
         * (unint64_t)(277951225 * (v45 ^ HIWORD(v45))
                            + 95187966
                            * ((0xD7862706ELL
                                            * (unint64_t)(277951225 * (v47 ^ HIWORD(v47)) + 425104576)) >> 4))) >> 4;
    for (j = 1; ; ++j)
    {
      v50 = v48 & v42;
      v51 = (unsigned __int8 *)(v41 + 40 * v50);
      v52 = *v51;
      v53 = v51[1];
      if (!(v52 | v53) && !v51[2])
        break;
      if (v52 == v39 && v53 == v40 && v51[2] != 0)
        goto LABEL_44;
      if (v52 == 255)
        v43 = v41 + 40 * v50;
      LODWORD(v48) = j + v50;
    }
    if (v43)
    {
      *(_BYTE *)(v43 + 2) = 0;
      *(_WORD *)v43 = 0;
      *(_OWORD *)(v43 + 8) = 0u;
      *(_OWORD *)(v43 + 24) = 0u;
      --*((_DWORD *)v87 - 4);
      v51 = (unsigned __int8 *)v43;
    }
    *v51 = v39;
    v51[1] = v40;
    v51[2] = 1;
    v57 = WTF::fastMalloc((WTF *)0x328);
    *(_DWORD *)v57 = 1;
    *(_OWORD *)(v57 + 8) = 0u;
    *(_OWORD *)(v57 + 24) = 0u;
    *(_OWORD *)(v57 + 40) = 0u;
    *(_OWORD *)(v57 + 56) = 0u;
    *(_QWORD *)(v57 + 72) = v57 + 88;
    *(_QWORD *)(v57 + 80) = 1;
    *(_QWORD *)(v57 + 120) = v57 + 136;
    *(_QWORD *)(v57 + 128) = 1;
    *(_QWORD *)(v57 + 168) = v57 + 184;
    *(_QWORD *)(v57 + 176) = 1;
    *(_QWORD *)(v57 + 216) = v57 + 232;
    *(_QWORD *)(v57 + 224) = 1;
    *(_QWORD *)(v57 + 264) = v57 + 280;
    *(_QWORD *)(v57 + 272) = 1;
    *(_QWORD *)(v57 + 312) = v57 + 328;
    *(_QWORD *)(v57 + 320) = 1;
    *(_QWORD *)(v57 + 360) = v57 + 376;
    *(_QWORD *)(v57 + 368) = 1;
    *(_QWORD *)(v57 + 408) = v57 + 424;
    *(_QWORD *)(v57 + 416) = 1;
    *(_QWORD *)(v57 + 645) = 0;
    *(_OWORD *)(v57 + 616) = 0u;
    *(_OWORD *)(v57 + 632) = 0u;
    *(_OWORD *)(v57 + 584) = 0u;
    *(_OWORD *)(v57 + 600) = 0u;
    *(_OWORD *)(v57 + 552) = 0u;
    *(_OWORD *)(v57 + 568) = 0u;
    *(_OWORD *)(v57 + 520) = 0u;
    *(_OWORD *)(v57 + 536) = 0u;
    *(_OWORD *)(v57 + 488) = 0u;
    *(_OWORD *)(v57 + 504) = 0u;
    *(_OWORD *)(v57 + 456) = 0u;
    *(_OWORD *)(v57 + 472) = 0u;
    *(_QWORD *)(v57 + 672) = 0;
    *(_DWORD *)(v57 + 680) = 0;
    *(_OWORD *)(v57 + 656) = 0u;
    *(_OWORD *)(v57 + 688) = 0u;
    *(_OWORD *)(v57 + 704) = 0u;
    *(_OWORD *)(v57 + 720) = 0u;
    *(_OWORD *)(v57 + 736) = 0u;
    *(_OWORD *)(v57 + 752) = 0u;
    *(_OWORD *)(v57 + 768) = 0u;
    *(_OWORD *)(v57 + 784) = 0u;
    *(_WORD *)(v57 + 800) = 0;
    v59 = *(unsigned __int8 *)(v37 + 12);
    v60 = *(unsigned __int8 *)(v37 + 13);
    v61 = (WebCore::Style::RuleSet *)*((_QWORD *)v51 + 1);
    *((_QWORD *)v51 + 1) = v57;
    if (v61)
    {
      if (*(_DWORD *)v61 == 1)
      {
        WebCore::Style::RuleSet::~RuleSet(v61, v58);
        WTF::fastFree(v84, v85);
      }
      else
      {
        --*(_DWORD *)v61;
      }
    }
    v62 = (WTF *)*((_QWORD *)v51 + 2);
    if (v62)
    {
      *((_QWORD *)v51 + 2) = 0;
      *((_DWORD *)v51 + 6) = 0;
      WTF::fastFree(v62, v58);
    }
    *((_QWORD *)v51 + 2) = 0;
    *((_QWORD *)v51 + 3) = 0;
    *((_WORD *)v51 + 16) = v59 | (v60 << 8);
    v63 = v87 ? *((_DWORD *)v87 - 3) + 1 : 1;
    *((_DWORD *)v87 - 3) = v63;
    v38 = v86;
    v64 = v87 ? *((_DWORD *)v87 - 3) : 0;
    v65 = (*((_DWORD *)v87 - 4) + v64);
    v66 = *((unsigned int *)v87 - 1);
    if (v66 > 0x400)
    {
      if (v66 <= 2 * v65)
        goto LABEL_72;
    }
    else if (3 * v66 <= 4 * v65)
    {
LABEL_72:
      v51 = WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::expand((uint64_t *)&v87, v51);
    }
LABEL_44:
    v55 = *((_QWORD *)v51 + 1);
    WebCore::Style::RuleData::RuleData(v88, *(const WebCore::CSSSelector **)v37, *(_WORD *)(v37 + 8), *(unsigned __int16 *)(v37 + 10), *(_DWORD *)(v55 + 680), 0);
    WebCore::Style::RuleSet::addRule(v55, v88, 0, 0, 0);
    result = v88[0];
    v88[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (const WebCore::CSSSelector *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, v56);
      else
        --*(_DWORD *)result;
    }
    v37 += 16;
    if (v37 != v38)
      continue;
    break;
  }
  v68 = (WebCore::Style::RuleSet **)v87;
  if (!v87)
  {
LABEL_103:
    v76 = 0;
    LODWORD(v69) = 0;
    goto LABEL_104;
  }
  v69 = *((unsigned int *)v87 - 3);
  if (!(_DWORD)v69)
  {
    v76 = 0;
    goto LABEL_104;
  }
  v70 = *((unsigned int *)v87 - 1);
  v71 = &v87[40 * v70];
  if ((_DWORD)v70)
  {
    v72 = 40 * v70;
    while (1)
    {
      v73 = *(unsigned __int8 *)v68;
      if (v73 != 255 && (v73 | *((unsigned __int8 *)v68 + 1) | *((unsigned __int8 *)v68 + 2)) != 0)
        break;
      v68 += 5;
      v72 -= 40;
      if (!v72)
      {
        v68 = (WebCore::Style::RuleSet **)v71;
        break;
      }
    }
  }
  if (v69 >> 27)
  {
    __break(0xC471u);
    return result;
  }
  v76 = WTF::fastMalloc((WTF *)(32 * v69));
  if (v71 == (unsigned __int8 *)v68)
  {
LABEL_104:
    v77 = 0;
    goto LABEL_105;
  }
  v77 = 0;
LABEL_88:
  WebCore::Style::RuleSet::shrinkToFit(v68[1], v75);
  v78 = *((_WORD *)v68 + 16);
  v79 = v76 + 32 * v77;
  v80 = *(_OWORD *)(v68 + 1);
  v68[1] = 0;
  v68[2] = 0;
  *(_OWORD *)v79 = v80;
  *(_QWORD *)&v80 = v68[3];
  v68[3] = 0;
  *(_QWORD *)(v79 + 16) = v80;
  *(_WORD *)(v79 + 24) = v78;
  ++v77;
  while (1)
  {
    v68 += 5;
    if (v68 == (WebCore::Style::RuleSet **)v71)
      break;
    v81 = *(unsigned __int8 *)v68;
    if (v81 != 255 && (v81 | *((unsigned __int8 *)v68 + 1) | *((unsigned __int8 *)v68 + 2)) != 0)
    {
      if (v68 != (WebCore::Style::RuleSet **)v71)
        goto LABEL_88;
      break;
    }
  }
LABEL_105:
  v27 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v27 = v76;
  *(_DWORD *)(v27 + 8) = v69;
  *(_DWORD *)(v27 + 12) = v77;
  WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::~HashTable((uint64_t *)&v87, v83);
LABEL_23:
  v28 = *(WTF **)(v20 + 16);
  *(_QWORD *)(v20 + 16) = v27;
  if (v28)
    std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v20 + 16, v28);
  v29 = *v3;
  if (*v3)
    v30 = *(_DWORD *)(v29 - 12) + 1;
  else
    v30 = 1;
  *(_DWORD *)(v29 - 12) = v30;
  v31 = *v3;
  if (*v3)
    v32 = *(_DWORD *)(v31 - 12);
  else
    v32 = 0;
  v33 = (*(_DWORD *)(v31 - 16) + v32);
  v34 = *(unsigned int *)(v31 - 4);
  if (v34 > 0x400)
  {
    if (v34 > 2 * v33)
      return *(const WebCore::CSSSelector **)(v20 + 16);
LABEL_74:
    v67 = (_DWORD)v34 << (6 * *(_DWORD *)(v31 - 12) >= (2 * v34));
    goto LABEL_100;
  }
  if (3 * v34 > 4 * v33)
    return *(const WebCore::CSSSelector **)(v20 + 16);
  if ((_DWORD)v34)
    goto LABEL_74;
  v67 = 8;
LABEL_100:
  v20 = WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(v3, v67, (int *)v20);
  return *(const WebCore::CSSSelector **)(v20 + 16);
}

unsigned __int8 ***WebCore::Style::ScopeRuleSets::hasPseudoClassInvalidationRuleSets(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  _DWORD *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int j;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v37;
  int *v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  BOOL v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned __int8 *v50;
  int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int k;
  unsigned int v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  uint64_t v60;
  void *v61;
  int v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF *v68;
  void *v69;
  uint64_t v70;
  WTF *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 ***result;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  WTF *v83;
  unsigned int v84;
  WTF *v85;
  __int16 v86;
  uint64_t v87;
  __int128 v88;
  int v89;
  void *v91;
  WebCore::Style::RuleSet *v92;
  WTF *v93;
  WTF *v94;
  WTF *v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  char v98;
  unsigned __int8 *v99;

  v4 = (uint64_t *)(a1 + 280);
  v5 = *(_QWORD *)(a1 + 280);
  if (v5
    || (WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::expand((uint64_t *)(a1 + 280), 0), (v5 = *v4) != 0))
  {
    v6 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v6 = 0;
  }
  v7 = WTF::HashMapEnsureTranslator<WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::hash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>(a2);
  v9 = 0;
  v10 = *(_DWORD *)a2;
  for (i = 1; ; ++i)
  {
    v12 = v7 & v6;
    v13 = v5 + 24 * (v7 & v6);
    v14 = *(_DWORD *)v13;
    v15 = *(unsigned __int8 *)(v13 + 4);
    if (!(*(_DWORD *)v13 | v15))
      break;
    if (v14 == -1)
    {
      v9 = (_QWORD *)(v5 + 24 * v12);
      goto LABEL_17;
    }
LABEL_9:
    if (v14 == v10 && v15 == *(unsigned __int8 *)(a2 + 4) && *(_QWORD *)(v13 + 8) == *(_QWORD *)(a2 + 8))
      return *(unsigned __int8 ****)(v13 + 16);
LABEL_17:
    v7 = i + v12;
  }
  if (*(_QWORD *)(v13 + 8))
    goto LABEL_9;
  if (v9)
  {
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    --*(_DWORD *)(*v4 - 16);
    v10 = *(_DWORD *)a2;
    v13 = (uint64_t)v9;
  }
  *(_DWORD *)v13 = v10;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(a2 + 4);
  v17 = *(_DWORD **)(a2 + 8);
  if (v17)
    *v17 += 2;
  v18 = *(WTF::StringImpl **)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v8);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = *(_QWORD *)(a1 + 144);
  if (!v19)
    goto LABEL_96;
  v20 = *(_DWORD *)(v19 - 8);
  v21 = *(_DWORD *)a2;
  v22 = 9 * ((v21 + ~(v21 << 15)) ^ ((v21 + ~(v21 << 15)) >> 10));
  v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
  v24 = v23 ^ HIWORD(v23);
  v25 = *(unsigned __int8 *)(a2 + 4);
  v26 = 9 * ((~(v25 << 15) + v25) ^ ((~(v25 << 15) + v25) >> 10));
  v27 = (v26 ^ (v26 >> 6)) + ~((v26 ^ (v26 >> 6)) << 11);
  v28 = v27 ^ HIWORD(v27);
  v29 = *(_QWORD *)(a2 + 8);
  v30 = v20 & ((0xD7862706ELL
              * (unint64_t)(277951225 * v24
                                 + 95187966
                                 * ((0xD7862706ELL
                                                 * (unint64_t)(95187966
                                                                                  * (*(_DWORD *)(v29 + 16) >> 8)
                                                                                  + 277951225 * v28)) >> 4))) >> 4);
  if (!*(_DWORD *)a2)
  {
    for (j = 1; ; ++j)
    {
      v32 = v30;
      v33 = v19 + 24 * v30;
      v34 = *(unsigned __int8 *)(v33 + 4);
      if (*(_DWORD *)v33 | v34)
      {
        if (*(_DWORD *)v33)
          goto LABEL_37;
        v35 = *(_QWORD *)(v33 + 8);
      }
      else
      {
        v35 = *(_QWORD *)(v33 + 8);
        if (!v35)
          goto LABEL_96;
      }
      if (v34 == v25 && v35 == v29)
        goto LABEL_52;
LABEL_37:
      v30 = (v32 + j) & v20;
    }
  }
  v37 = 1;
  while (2)
  {
    v32 = v30;
    v38 = (int *)(v19 + 24 * v30);
    v39 = *v38;
    v40 = *((unsigned __int8 *)v38 + 4);
    if (!(*v38 | v40))
    {
      if (!*((_QWORD *)v38 + 1))
        goto LABEL_96;
      goto LABEL_51;
    }
    v41 = v39 != -1 && v39 == v21;
    if (!v41 || ((v42 = *((_QWORD *)v38 + 1), v40 == v25) ? (v43 = v42 == v29) : (v43 = 0), !v43))
    {
LABEL_51:
      v30 = (v32 + v37++) & v20;
      continue;
    }
    break;
  }
LABEL_52:
  v44 = *(uint64_t **)(v19 + 24 * v32 + 16);
  if (!v44)
  {
LABEL_96:
    v70 = 0;
    goto LABEL_97;
  }
  v99 = 0;
  v45 = *((_DWORD *)v44 + 3);
  if (v45)
  {
    v46 = *v44;
    v47 = *v44 + 24 * v45;
    while (1)
    {
      v48 = *(unsigned __int8 *)(v46 + 12);
      v49 = *(unsigned __int8 *)(v46 + 13);
      v96 = *(_BYTE *)(v46 + 12);
      v97 = v49;
      v98 = 1;
      v50 = v99;
      if (v99
        || (WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::expand((uint64_t *)&v99, 0), (v50 = v99) != 0))
      {
        v51 = *((_DWORD *)v50 - 2);
      }
      else
      {
        v51 = 0;
      }
      v52 = WTF::HashMapEnsureTranslator<WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>>::hash<std::tuple<unsigned char,BOOL,BOOL>>(&v96);
      v53 = 0;
      for (k = 1; ; ++k)
      {
        v55 = v52 & v51;
        v56 = &v50[40 * (v52 & v51)];
        v57 = *v56;
        v58 = v56[1];
        if (!(v57 | v58) && !v56[2])
          break;
        if (v57 == v48 && v58 == v49 && v56[2] != 0)
          goto LABEL_84;
        if (v57 == 255)
          v53 = &v50[40 * v55];
        v52 = k + v55;
      }
      if (v53)
      {
        v53[2] = 0;
        *(_WORD *)v53 = 0;
        *(_OWORD *)(v53 + 8) = 0uLL;
        *(_OWORD *)(v53 + 24) = 0uLL;
        --*((_DWORD *)v99 - 4);
        LOBYTE(v48) = v96;
        v56 = v53;
      }
      *v56 = v48;
      v56[1] = v97;
      v56[2] = v98;
      v60 = WTF::fastMalloc((WTF *)0x328);
      *(_DWORD *)v60 = 1;
      *(_OWORD *)(v60 + 8) = 0u;
      *(_OWORD *)(v60 + 24) = 0u;
      *(_OWORD *)(v60 + 40) = 0u;
      *(_OWORD *)(v60 + 56) = 0u;
      *(_QWORD *)(v60 + 72) = v60 + 88;
      *(_QWORD *)(v60 + 80) = 1;
      *(_QWORD *)(v60 + 120) = v60 + 136;
      *(_QWORD *)(v60 + 128) = 1;
      *(_QWORD *)(v60 + 168) = v60 + 184;
      *(_QWORD *)(v60 + 176) = 1;
      *(_QWORD *)(v60 + 216) = v60 + 232;
      *(_QWORD *)(v60 + 224) = 1;
      *(_QWORD *)(v60 + 264) = v60 + 280;
      *(_QWORD *)(v60 + 272) = 1;
      *(_QWORD *)(v60 + 312) = v60 + 328;
      *(_QWORD *)(v60 + 320) = 1;
      *(_QWORD *)(v60 + 360) = v60 + 376;
      *(_QWORD *)(v60 + 368) = 1;
      *(_QWORD *)(v60 + 408) = v60 + 424;
      *(_QWORD *)(v60 + 416) = 1;
      *(_QWORD *)(v60 + 645) = 0;
      *(_OWORD *)(v60 + 616) = 0u;
      *(_OWORD *)(v60 + 632) = 0u;
      *(_OWORD *)(v60 + 584) = 0u;
      *(_OWORD *)(v60 + 600) = 0u;
      *(_OWORD *)(v60 + 552) = 0u;
      *(_OWORD *)(v60 + 568) = 0u;
      *(_OWORD *)(v60 + 520) = 0u;
      *(_OWORD *)(v60 + 536) = 0u;
      *(_OWORD *)(v60 + 488) = 0u;
      *(_OWORD *)(v60 + 504) = 0u;
      *(_OWORD *)(v60 + 456) = 0u;
      *(_OWORD *)(v60 + 472) = 0u;
      *(_QWORD *)(v60 + 672) = 0;
      *(_DWORD *)(v60 + 680) = 0;
      *(_OWORD *)(v60 + 656) = 0u;
      *(_OWORD *)(v60 + 688) = 0u;
      *(_OWORD *)(v60 + 704) = 0u;
      *(_OWORD *)(v60 + 720) = 0u;
      *(_OWORD *)(v60 + 736) = 0u;
      *(_OWORD *)(v60 + 752) = 0u;
      *(_OWORD *)(v60 + 768) = 0u;
      *(_OWORD *)(v60 + 784) = 0u;
      *(_WORD *)(v60 + 800) = 0;
      v92 = (WebCore::Style::RuleSet *)v60;
      v93 = 0;
      v94 = 0;
      LOWORD(v95) = *(_WORD *)(v46 + 12);
      WTF::GenericHashTraits<WebCore::Style::InvalidationRuleSet>::assignToEmpty<WebCore::Style::InvalidationRuleSet,WebCore::Style::InvalidationRuleSet>((uint64_t)(v56 + 8), (uint64_t *)&v92);
      if (v93)
        WTF::fastFree(v93, v61);
      if (v92)
      {
        if (*(_DWORD *)v92 == 1)
        {
          WebCore::Style::RuleSet::~RuleSet(v92, v61);
          WTF::fastFree(v68, v69);
        }
        else
        {
          --*(_DWORD *)v92;
        }
      }
      v62 = v99 ? *((_DWORD *)v99 - 3) + 1 : 1;
      *((_DWORD *)v99 - 3) = v62;
      v63 = v99 ? *((_DWORD *)v99 - 3) : 0;
      v64 = (*((_DWORD *)v99 - 4) + v63);
      v65 = *((unsigned int *)v99 - 1);
      if (v65 > 0x400)
        break;
      if (3 * v65 <= 4 * v64)
        goto LABEL_83;
LABEL_84:
      WebCore::Style::RuleSet::addRule(*((WebCore::Style::RuleSet **)v56 + 1), *(const WebCore::StyleRule **)v46, *(_WORD *)(v46 + 8), *(unsigned __int16 *)(v46 + 10));
      v66 = *(_QWORD *)(v46 + 16);
      if (v66)
      {
        v67 = *((unsigned int *)v56 + 7);
        if ((_DWORD)v67 == *((_DWORD *)v56 + 6))
        {
          WTF::Vector<WebCore::RenderBox *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::RenderBox *&>((uint64_t)(v56 + 16), v46 + 16);
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)v56 + 2) + 8 * v67) = v66;
          *((_DWORD *)v56 + 7) = v67 + 1;
        }
      }
      v46 += 24;
      if (v46 == v47)
        goto LABEL_107;
    }
    if (v65 > 2 * v64)
      goto LABEL_84;
LABEL_83:
    v56 = WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::expand((uint64_t *)&v99, v56);
    goto LABEL_84;
  }
LABEL_107:
  result = WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::values((unsigned __int8 ***)&v92, &v99);
  if (!*(_QWORD *)v92)
  {
    LODWORD(v80) = 0;
LABEL_130:
    v81 = 0;
LABEL_111:
    v82 = v93;
    v83 = v95;
    if (v93 == v95)
    {
      v84 = 0;
    }
    else
    {
      v84 = 0;
      v85 = v94;
      do
      {
        WebCore::Style::RuleSet::shrinkToFit(*((WebCore::Style::RuleSet **)v82 + 1), v79);
        v86 = *((_WORD *)v82 + 16);
        v87 = v81 + 32 * v84;
        v88 = *(_OWORD *)((char *)v82 + 8);
        *((_QWORD *)v82 + 1) = 0;
        *((_QWORD *)v82 + 2) = 0;
        *(_OWORD *)v87 = v88;
        *(_QWORD *)&v88 = *((_QWORD *)v82 + 3);
        *((_QWORD *)v82 + 3) = 0;
        *(_QWORD *)(v87 + 16) = v88;
        *(_WORD *)(v87 + 24) = v86;
        while (1)
        {
          v82 = (WTF *)((char *)v82 + 40);
          if (v82 == v85)
            break;
          v89 = *(unsigned __int8 *)v82;
          if (v89 != 255 && (v89 | *((unsigned __int8 *)v82 + 1) | *((unsigned __int8 *)v82 + 2)) != 0)
            goto LABEL_122;
        }
        v82 = v85;
LABEL_122:
        ++v84;
      }
      while (v82 != v83);
    }
    v70 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v70 = v81;
    *(_DWORD *)(v70 + 8) = v80;
    *(_DWORD *)(v70 + 12) = v84;
    WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::~HashTable((uint64_t *)&v99, v91);
LABEL_97:
    v71 = *(WTF **)(v13 + 16);
    *(_QWORD *)(v13 + 16) = v70;
    if (v71)
      std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v13 + 16, v71);
    v72 = *v4;
    if (*v4)
      v73 = *(_DWORD *)(v72 - 12) + 1;
    else
      v73 = 1;
    *(_DWORD *)(v72 - 12) = v73;
    v74 = *v4;
    if (*v4)
      v75 = *(_DWORD *)(v74 - 12);
    else
      v75 = 0;
    v76 = (*(_DWORD *)(v74 - 16) + v75);
    v77 = *(unsigned int *)(v74 - 4);
    if (v77 > 0x400)
    {
      if (v77 > 2 * v76)
        return *(unsigned __int8 ****)(v13 + 16);
    }
    else if (3 * v77 > 4 * v76)
    {
      return *(unsigned __int8 ****)(v13 + 16);
    }
    v13 = WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::expand(v4, (int *)v13);
    return *(unsigned __int8 ****)(v13 + 16);
  }
  v80 = *(unsigned int *)(*(_QWORD *)v92 - 12);
  if (!(_DWORD)v80)
    goto LABEL_130;
  if (!(v80 >> 27))
  {
    v81 = WTF::fastMalloc((WTF *)(32 * v80));
    goto LABEL_111;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Style::ScopeRuleSets::customPropertyNamesInStyleContainerQueries(void)const::$_0::operator()<WebCore::Style::RuleSet>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  _DWORD **v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  _DWORD **v13;
  _DWORD **v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  _DWORD *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;

  if (a2)
  {
    v3 = *(unsigned int *)(a2 + 748);
    if ((_DWORD)v3)
    {
      if (!(v3 >> 29))
      {
        v4 = (uint64_t *)result;
        v5 = WTF::fastMalloc((WTF *)(8 * v3));
        v7 = (WTF *)v5;
        v8 = *(unsigned int *)(a2 + 748);
        if (!(_DWORD)v8)
          return WTF::fastFree(v7, v6);
        v9 = *(_DWORD ***)(a2 + 736);
        v10 = *(unsigned int *)(a2 + 748);
        v11 = (_QWORD *)v5;
        do
        {
          v12 = *v9;
          v9 += 2;
          ++*v12;
          *v11++ = v12;
          --v10;
        }
        while (v10);
        v23 = v8;
        v24 = (WTF *)v5;
        v13 = (_DWORD **)(v5 + 8 * v8);
        v14 = (_DWORD **)v5;
        while (1)
        {
          v15 = *v14;
          *v15 = **v14 + 1;
          v25 = *v4;
          v16 = v15[13];
          if (v16)
            break;
LABEL_13:
          if (*v15 == 1)
            WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v15, (WTF::StringImpl *)v6);
          else
            --*v15;
          if (++v14 == v13)
          {
            v7 = v24;
            v20 = 8 * v23;
            v21 = v24;
            do
            {
              v22 = *(_DWORD **)v21;
              *(_QWORD *)v21 = 0;
              if (v22)
              {
                if (*v22 == 1)
                  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v22, (WTF::StringImpl *)v6);
                else
                  --*v22;
              }
              v21 = (WTF *)((char *)v21 + 8);
              v20 -= 8;
            }
            while (v20);
            return WTF::fastFree(v7, v6);
          }
        }
        v17 = *((_QWORD *)v15 + 5);
        v18 = 88 * v16;
        while (1)
        {
          v26[0] = &v25;
          v26[1] = &v25;
          v26[2] = &v25;
          v19 = *(unsigned int *)(v17 + 80);
          if ((_DWORD)v19 == -1)
            break;
          v27 = v26;
          ((void (*)(_QWORD **, uint64_t))*(&off_1E3450130 + v19))(&v27, v17);
          v17 += 88;
          v18 -= 88;
          if (!v18)
            goto LABEL_13;
        }
        result = std::__throw_bad_variant_access[abi:sn180100]();
      }
      __break(0xC471u);
    }
  }
  return result;
}

BOOL WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  if (*a1 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) != 0)
    return 1;
  if (*((_BYTE *)v3 + 316))
  {
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3[4] + 16) + 8) + 1328);
      if (!*(_QWORD *)(v5 + 32))
      {
        v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3[4] + 16) + 8) + 1328);
        if (*(_QWORD *)(v5 + 24))
          WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v5);
        else
          WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v5);
        v5 = v7;
        v8 = *(_QWORD *)(v7 + 32);
        if (*(_DWORD *)(v8 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
        {
          v9 = v5;
          WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v8 + 32));
          v5 = v9;
        }
        if (*(_BYTE *)(v8 + 242)
          || *(_BYTE *)(v8 + 243)
          || *(_BYTE *)(v8 + 244)
          || *(_BYTE *)(v8 + 245)
          || *(_BYTE *)(v8 + 246)
          || *(_BYTE *)(v8 + 247)
          || *(_BYTE *)(v8 + 248))
        {
          *(_BYTE *)(v5 + 236) = 1;
        }
      }
      v6 = *(_QWORD *)(v5 + 32);
      v3 = (_QWORD *)(v6 + 32);
    }
    while (*(_BYTE *)(v6 + 348));
  }
  return v3[3] && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2) & 1) != 0;
}

uint64_t *WebCore::Style::StyleSheetContentsCache::singleton(WebCore::Style::StyleSheetContentsCache *this)
{
  {
    WebCore::Style::StyleSheetContentsCache::singleton(void)::cache = 0;
  }
  return &WebCore::Style::StyleSheetContentsCache::singleton(void)::cache;
}

WebCore::StyleSheetContents *WebCore::Style::StyleSheetContentsCache::add(uint64_t *a1, uint64_t a2, _DWORD **a3)
{
  WebCore::StyleSheetContents *result;
  uint64_t *v6;
  _BYTE v7[24];

  result = WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>&>(a1, a2, a3, (uint64_t)v7);
  ++(*a3)[32];
  if (*a1)
  {
    if (*(_DWORD *)(*a1 - 12) >= 0x101u)
    {
      v6 = WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::random(a1);
      WebCore::StyleSheetContents::removedFromMemoryCache(v6[9]);
      return (WebCore::StyleSheetContents *)WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::remove(a1, (WTF::StringImpl *)v6);
    }
  }
  return result;
}

WebCore::StyleSheetContents *WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>&>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  WebCore::StyleSheetContents *result;
  uint64_t *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  WTF *v46;
  void *v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t *v53;
  unsigned int v54;
  unsigned __int16 v55;
  char v56;
  int v57;

  v7 = *a1;
  if (*a1
    || (WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::expand(a1, 0), (v7 = *a1) != 0))
  {
    v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v8 = 0;
  }
  v9 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if (v9 < 0x100)
    v10 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
  else
    v10 = v9 >> 8;
  v53 = a1;
  v54 = -1640531527;
  v55 = 0;
  v56 = 0;
  v11 = (uint64_t *)(a2 + 8);
  v12 = *(unsigned __int16 *)(a2 + 59) | (*(unsigned __int8 *)(a2 + 61) << 16);
  v57 = (v12 >> 1) & 0x10 | v12 & 0xF | (v12 >> 2) & 0x20 | (v12 >> 1) & 0x780 | (v12 >> 3) & 0xFF800 | (v12 >> 2) & 0x200000 | (*(unsigned __int8 *)(a2 + 56) << 22);
  WTF::add<WTF::URL,WTF::String,WebCore::CSSPropertySettings,unsigned int>(&v54, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 48), (_DWORD *)(a2 + 62), &v57);
  v13 = v54;
  if (v56)
  {
    v50 = (v54 + v55) ^ ((v54 + v55) << 11);
    v13 = v50 + (v50 >> 17);
  }
  v14 = (v13 ^ (8 * v13)) + ((v13 ^ (8 * v13)) >> 5);
  v15 = (v14 ^ (4 * v14)) + ((v14 ^ (4 * v14)) >> 15);
  v16 = v15 ^ (v15 << 10);
  if (v16)
    v17 = 95187966 * v16;
  else
    v17 = -16777216;
  v18 = v8 & ((0xD7862706ELL * (unint64_t)(v17 + 277951225 * v10)) >> 4);
  v19 = v7 + 80 * v18;
  if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::CSSParserContext>>(v19))
  {
    v25 = v53;
  }
  else
  {
    v51 = a4;
    v22 = 0;
    v23 = 1;
    do
    {
      if (*(_QWORD *)v19 == -1)
      {
        v22 = v19;
      }
      else
      {
        result = (WebCore::StyleSheetContents *)WTF::PairHash<WTF::String,WebCore::CSSParserContext>::equal(v19, a2, v21);
        if ((_DWORD)result)
        {
          v48 = *v53;
          if (*v53)
            v49 = *(_DWORD *)(v48 - 4);
          else
            v49 = 0;
          a4 = v51;
          v45 = 0;
          v44 = v48 + 80 * v49;
          goto LABEL_37;
        }
      }
      v18 = (v18 + v23) & v8;
      v19 = v7 + 80 * v18;
      ++v23;
    }
    while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::CSSParserContext>>(v19));
    a4 = v51;
    v25 = v53;
    if (v22)
    {
      WTF::PairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CSSParserContext>>::emptyValue(v22);
      *(_QWORD *)(v22 + 72) = 0;
      --*(_DWORD *)(*v53 - 16);
      v19 = v22;
    }
  }
  v26 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v27 = *(WTF::StringImpl **)v19;
  *(_QWORD *)v19 = v26;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v20);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = *v11;
  *v11 = 0;
  v29 = *(WTF::StringImpl **)(v19 + 8);
  *(_QWORD *)(v19 + 8) = v28;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v20);
    else
      *(_DWORD *)v29 -= 2;
  }
  *(_DWORD *)(v19 + 16) = *(_DWORD *)(v19 + 16) & 0xFFFFFFFE | *(_DWORD *)(a2 + 16) & 1;
  v30 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v30 & 0xFFFFFFFE;
  v31 = *(_DWORD *)(v19 + 16) & 0xFFFFFFFD | (2 * ((v30 >> 1) & 1));
  *(_DWORD *)(v19 + 16) = v31;
  v32 = v31 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a2 + 16) >> 2) & 1));
  *(_DWORD *)(v19 + 16) = v32;
  v33 = v32 & 0xFFFFFFC7 | (8 * ((*(_DWORD *)(a2 + 16) >> 3) & 7));
  *(_DWORD *)(v19 + 16) = v33;
  *(_DWORD *)(v19 + 16) = *(_DWORD *)(a2 + 16) & 0xFFFFFFC0 | v33 & 0x3F;
  *(_OWORD *)(v19 + 20) = *(_OWORD *)(a2 + 20);
  *(_QWORD *)(v19 + 36) = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(v19 + 44) = *(_DWORD *)(a2 + 44);
  v34 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v35 = *(WTF::StringImpl **)(v19 + 48);
  *(_QWORD *)(v19 + 48) = v34;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v20);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = *(_QWORD *)(a2 + 56);
  *(_WORD *)(v19 + 64) = *(_WORD *)(a2 + 64);
  *(_QWORD *)(v19 + 56) = v36;
  v37 = *a3;
  *v37 = **a3 + 1;
  result = *(WebCore::StyleSheetContents **)(v19 + 72);
  *(_QWORD *)(v19 + 72) = v37;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(result, v20);
      result = (WebCore::StyleSheetContents *)WTF::fastFree(v46, v47);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  v38 = *v25;
  if (*v25)
    v39 = *(_DWORD *)(v38 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(v38 - 12) = v39;
  v40 = *v25;
  if (*v25)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 > 0x400)
  {
    if (v43 > 2 * v42)
      goto LABEL_36;
LABEL_40:
    result = (WebCore::StyleSheetContents *)WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::expand(v25, (_QWORD *)v19);
    v19 = (uint64_t)result;
    v40 = *v25;
    if (*v25)
      LODWORD(v43) = *(_DWORD *)(v40 - 4);
    else
      LODWORD(v43) = 0;
    goto LABEL_36;
  }
  if (3 * v43 <= 4 * v42)
    goto LABEL_40;
LABEL_36:
  v44 = v40 + 80 * v43;
  v45 = 1;
LABEL_37:
  *(_QWORD *)a4 = v19;
  *(_QWORD *)(a4 + 8) = v44;
  *(_BYTE *)(a4 + 16) = v45;
  return result;
}

_QWORD *WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::random(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *a1;
  if (!*a1)
    return 0;
  if (!*(_DWORD *)(v1 - 12))
    return (_QWORD *)(v1 + 80 * *(unsigned int *)(v1 - 4));
  do
  {
    v3 = *a1;
    v4 = WTF::weakRandomNumber<unsigned int>();
    v5 = *a1;
    if (*a1)
      LODWORD(v5) = *(_DWORD *)(v5 - 8);
    v6 = (_QWORD *)(v3 + 80 * (v5 & v4));
  }
  while (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::CSSParserContext>>((uint64_t)v6)
       || *v6 == -1);
  return v6;
}

uint64_t WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WebCore::StyleSheetContents *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v16;
  void *v17;

  if (!*a1)
  {
    if (a2)
    {
      v4 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v4 = *a1 + 80 * *(unsigned int *)(*a1 - 4);
  if ((WTF::StringImpl *)v4 == a2)
    return 0;
LABEL_3:
  if ((WTF::StringImpl *)v4 != a2)
  {
    v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
    v7 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, a2);
      else
        *(_DWORD *)v7 -= 2;
    }
    *(_QWORD *)a2 = -1;
    v8 = (WebCore::StyleSheetContents *)*((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::StyleSheetContents::~StyleSheetContents(v8, a2);
        WTF::fastFree(v16, v17);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
    ++*(_DWORD *)(*a1 - 16);
    v9 = *a1;
    if (*a1)
      v10 = *(_DWORD *)(v9 - 12) - 1;
    else
      v10 = -1;
    *(_DWORD *)(v9 - 12) = v10;
    v11 = *a1;
    if (*a1)
    {
      v12 = 6 * *(_DWORD *)(v11 - 12);
      v13 = *(_DWORD *)(v11 - 4);
      if (v12 < v13 && v13 >= 9)
        WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::rehash(a1, v13 >> 1, 0);
    }
  }
  return 1;
}

WTF::StringImpl **WebCore::Style::StyleSheetContentsCache::clear(WTF::StringImpl ***this, void *a2)
{
  WTF::StringImpl **result;

  result = *this;
  if (result)
  {
    *this = 0;
    return (WTF::StringImpl **)WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::deallocateTable(result, a2);
  }
  return result;
}

void WebCore::Style::TreeResolver::pushScope(WebCore::Style::TreeResolver *this, WebCore::ShadowRoot *a2)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  _DWORD *v11;
  void *v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  WebCore::Style::TreeResolver::Scope *v30;
  WTF *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::Style::TreeResolver::Scope *v35;

  v4 = (_DWORD *)WTF::fastMalloc((WTF *)0x1078);
  v5 = *((unsigned int *)this + 7);
  if (!(_DWORD)v5)
    goto LABEL_47;
  v6 = v4;
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v5 - 8);
  *v4 = 1;
  v8 = *((_QWORD *)a2 + 27);
  if (!*(_QWORD *)(v8 + 32))
  {
    if (*(_QWORD *)(v8 + 24))
      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver(*((unsigned int **)a2 + 27));
    else
      WebCore::Style::Scope::createDocumentResolver(*((WebCore::Style::Scope **)a2 + 27));
    v20 = *(_QWORD *)(v8 + 32);
    if (*(_DWORD *)(v20 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
    {
      v34 = *(_QWORD *)(v8 + 32);
      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v20 + 32));
      v20 = v34;
    }
    if (*(_BYTE *)(v20 + 242)
      || *(_BYTE *)(v20 + 243)
      || *(_BYTE *)(v20 + 244)
      || *(_BYTE *)(v20 + 245)
      || *(_BYTE *)(v20 + 246)
      || *(_BYTE *)(v20 + 247)
      || *(_BYTE *)(v20 + 248))
    {
      *(_BYTE *)(v8 + 236) = 1;
    }
  }
  v9 = *(int **)(v8 + 32);
  v10 = *v9 + 1;
  *((_QWORD *)v6 + 1) = v9;
  *v9 = v10;
  v11 = v9 + 8;
  bzero(v6 + 4, 0x1038uLL);
  *((_QWORD *)v6 + 521) = *((_QWORD *)a2 + 13);
  *((_QWORD *)v6 + 522) = v11;
  *((_QWORD *)v6 + 523) = v6 + 4;
  *((_QWORD *)v6 + 524) = 0;
  *((_DWORD *)a2 + 6) += 2;
  *((_QWORD *)v6 + 525) = a2;
  ++*(_DWORD *)v7;
  *((_QWORD *)v6 + 526) = v7;
  if ((_DWORD *)v7 != v6)
  {
    if (*(_DWORD *)(v7 + 4140))
    {
      WTF::Vector<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((WTF *)(v6 + 1032), v12);
      WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((void **)v6 + 516, *(unsigned int *)(v7 + 4140));
      v21 = v6[1035];
      v13 = (uint64_t *)*((_QWORD *)v6 + 516);
      v15 = *(uint64_t **)(v7 + 4128);
      if ((_DWORD)v21)
      {
        v22 = 8 * v21;
        do
        {
          v23 = *v15;
          *(_DWORD *)(v23 + 24) = *(_DWORD *)(*v15 + 24) + 2;
          v24 = *v13;
          *v13 = v23;
          if (v24)
          {
            if (*(_DWORD *)(v24 + 24) == 2)
            {
              if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              {
                v33 = v22;
                WebCore::Node::removedLastRef((WebCore::Node *)v24);
                v22 = v33;
              }
            }
            else
            {
              *(_DWORD *)(v24 + 24) -= 2;
            }
          }
          ++v15;
          ++v13;
          v22 -= 8;
        }
        while (v22);
        v15 = *(uint64_t **)(v7 + 4128);
        v14 = v6[1035];
        v13 = (uint64_t *)*((_QWORD *)v6 + 516);
      }
      else
      {
        v14 = 0;
      }
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v15 = *(uint64_t **)(v7 + 4128);
    }
    v16 = *(unsigned int *)(v7 + 4140);
    if (v14 != (_DWORD)v16)
    {
      v25 = &v13[v14];
      v26 = &v15[v14];
      v27 = 8 * v16 - 8 * v14;
      do
      {
        v28 = *v26++;
        *(_DWORD *)(v28 + 24) += 2;
        *v25++ = v28;
        v27 -= 8;
      }
      while (v27);
    }
    v6[1035] = v16;
  }
  v17 = *(_DWORD **)(v7 + 4144);
  if (v17)
    ++*v17;
  v18 = (_DWORD *)*((_QWORD *)v6 + 518);
  *((_QWORD *)v6 + 518) = v17;
  if (v18)
  {
    if (*v18)
    {
      --*v18;
      goto LABEL_13;
    }
LABEL_47:
    __break(0xC471u);
    JUMPOUT(0x1965AE108);
  }
LABEL_13:
  v35 = (WebCore::Style::TreeResolver::Scope *)v6;
  v19 = *((unsigned int *)this + 7);
  if ((_DWORD)v19 == *((_DWORD *)this + 6))
  {
    WTF::Vector<WTF::Ref<WebCore::Style::TreeResolver::Scope,WTF::RawPtrTraits<WebCore::Style::TreeResolver::Scope>,WTF::DefaultRefDerefTraits<WebCore::Style::TreeResolver::Scope>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Style::TreeResolver::Scope,WTF::RawPtrTraits<WebCore::Style::TreeResolver::Scope>,WTF::DefaultRefDerefTraits<WebCore::Style::TreeResolver::Scope>>>((uint64_t)this + 16, (unint64_t)&v35);
    v30 = v35;
    v35 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
      {
        WebCore::Style::TreeResolver::Scope::~Scope(v30, v29);
        WTF::fastFree(v31, v32);
      }
      else
      {
        --*(_DWORD *)v30;
      }
    }
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v19) = v6;
    *((_DWORD *)this + 7) = v19 + 1;
  }
}

uint64_t WebCore::Style::TreeResolver::pushEnclosingScope(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;

  v1 = *(unsigned int *)(this + 28);
  if (!(_DWORD)v1)
    goto LABEL_20;
  v2 = this;
  v3 = *(char **)(this + 16);
  v4 = &v3[8 * v1];
  v5 = *(_DWORD **)(*((_QWORD *)v4 - 1) + 4208);
  if ((_DWORD)v1 != *(_DWORD *)(this + 24))
    goto LABEL_16;
  v6 = v1 + (v1 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v1 + 1)
    v8 = v1 + 1;
  else
    v8 = v7;
  if (v8 < 5)
  {
    v9 = (void *)(this + 32);
    *(_QWORD *)(v2 + 16) = v2 + 32;
    *(_DWORD *)(v2 + 24) = 4;
    goto LABEL_14;
  }
  if (v8 >> 29)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1965AE340);
  }
  v9 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
  *(_DWORD *)(v2 + 24) = v8;
  *(_QWORD *)(v2 + 16) = v9;
LABEL_14:
  this = (uint64_t)memcpy(v9, v3, 8 * v1);
  if ((char *)(v2 + 32) != v3)
  {
    if (*(char **)(v2 + 16) == v3)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
    }
    this = WTF::fastFree((WTF *)v3, v10);
  }
  v1 = *(unsigned int *)(v2 + 28);
  v4 = (char *)(*(_QWORD *)(v2 + 16) + 8 * v1);
LABEL_16:
  ++*v5;
  *(_QWORD *)v4 = v5;
  *(_DWORD *)(v2 + 28) = v1 + 1;
  return this;
}

double WebCore::Style::TreeResolver::styleForStyleable(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  int jj;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  double result;
  WTF *v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  _DWORD *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WebCore::Length *v47;
  float v48;
  float v49;
  int v50;
  WebCore::Length *v51;
  float v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const WTF::StringImpl *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t *v69;
  uint64_t v70;
  int v71;
  WebCore::RenderStyle *v72;
  uint64_t v73;
  WebCore::RenderStyle *v74;
  WebCore::RenderStyle *v75;
  WebCore::RenderStyle *v76;
  uint64_t v77;
  uint64_t v78;
  __int16 *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  WebCore::RenderStyle *v83;
  unsigned int v84;
  uint64_t v85;
  void *v86;
  WTF *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  int mm;
  uint64_t v102;
  uint64_t v104;
  WebCore::Style::Resolver *v105;
  const WebCore::RenderStyle *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  _QWORD *v113;
  WebCore::RenderStyle *v114;
  const WTF::StringImpl *v115;
  WebCore::RenderStyle *v116;
  _DWORD *v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  const WTF::AtomString *v121;
  unint64_t v122;
  uint64_t v123;
  const WebCore::RenderStyle *v124;
  WebCore::RenderStyle *v125;
  const WebCore::RenderStyle *v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  void *v148;
  void *v149;
  WTF *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  BOOL hasDirectionAuto;
  _QWORD *v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int j;
  unsigned int v171;
  uint64_t v172;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  WebCore::Length *v183;
  float v184;
  float v185;
  int v186;
  WebCore::Length *v187;
  float v188;
  float v189;
  uint64_t v190;
  uint64_t v191;
  _DWORD *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v200;
  uint64_t *v201;
  WTF *v202;
  WTF *v203;
  uint64_t v205;
  uint64_t v206;
  int v207;
  int k;
  unsigned int v209;
  uint64_t v210;
  uint64_t v212;
  WebCore::VisitedLinkState *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  __int16 v220;
  uint64_t v221;
  int v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unsigned int v226;
  uint64_t *v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  BOOL v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  unint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  unint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  unsigned int v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t *v269;
  __int16 *v271;
  unsigned int v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  WebCore::Node *v278;
  unsigned int v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  int v283;
  int kk;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  WebCore::RenderStyle *v293;
  uint64_t v294;
  WTF *v295;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  void *v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  WTF *v310;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  void *v314;
  unsigned int v315;
  unsigned int v316;
  uint64_t v317;
  WTF *v318;
  uint64_t v319;
  WebCore::Document *v320;
  WebCore::VisitedLinkState *v321;
  int v322;
  unint64_t v323;
  _QWORD *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  unsigned int v329;
  unsigned int v330;
  uint64_t v331;
  WTF *v332;
  uint64_t v333;
  WTF *v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  int i;
  unsigned int v341;
  uint64_t v342;
  uint64_t v344;
  uint64_t *v345;
  int v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  char v358;
  uint64_t v359;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _DWORD *v366;
  uint64_t v367;
  _BOOL4 isUserActionElementHovered;
  uint64_t v369;
  BOOL v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  unsigned int v374;
  unsigned int v375;
  WTF *v377;
  _BOOL4 v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  _QWORD *v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char v398;
  char v399;
  int v400;
  int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  uint64_t v406;
  uint64_t v407;
  BOOL v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  int v416;
  uint64_t v417;
  WebCore::Style::RuleSet **v419;
  void *v420;
  WTF *v421;
  int v422;
  void *v423;
  void *v424;
  WTF *v425;
  int v426;
  void *v427;
  uint64_t v428;
  int v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  unsigned int v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t *v436;
  int v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  int v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  unsigned int v449;
  uint64_t *v450;
  uint64_t v451;
  int v452;
  _QWORD *v453;
  uint64_t v454;
  _DWORD *v455;
  _DWORD *v456;
  _DWORD *v457;
  _DWORD *v458;
  unint64_t v459;
  _QWORD *v460;
  unint64_t v461;
  unint64_t v462;
  _QWORD *v463;
  uint64_t v464;
  unint64_t v465;
  uint64_t v466;
  unint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  unint64_t v470;
  unint64_t v471;
  unint64_t v472;
  _QWORD *v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unint64_t v477;
  _QWORD *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t *v481;
  uint64_t v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t *v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unsigned int v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  int ii;
  unsigned int v501;
  uint64_t v502;
  BOOL v503;
  uint64_t v504;
  uint64_t v505;
  WebCore::RenderStyle *v506;
  unsigned int v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  int m;
  unsigned int v513;
  uint64_t v514;
  BOOL v515;
  uint64_t v516;
  _BOOL4 isUserActionElementFocused;
  uint64_t v518;
  BOOL v519;
  unsigned int *v520;
  unsigned int v521;
  WTF *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t *v527;
  int v528;
  int n;
  unsigned int v530;
  uint64_t v531;
  BOOL v532;
  uint64_t v533;
  uint64_t v534;
  BOOL v535;
  WebCore::RenderStyle *v536;
  _DWORD *v537;
  _DWORD *v538;
  _DWORD *v539;
  _DWORD *v540;
  int v541;
  uint64_t v542;
  uint64_t v543;
  BOOL v544;
  uint64_t v545;
  WTF *v546;
  uint64_t v547;
  uint64_t v548;
  BOOL v549;
  uint64_t v550;
  uint64_t *v551;
  uint64_t v552;
  uint64_t v554;
  int v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  void *v564;
  void *v565;
  WebCore::RenderStyle *v566;
  uint64_t v567;
  uint64_t v568;
  _QWORD *Attribute;
  _QWORD *v570;
  uint64_t v571;
  uint64_t *v572;
  uint64_t v573;
  uint64_t v574;
  BOOL v575;
  int v576;
  int v577;
  WTF *v578;
  WTF *v579;
  int v580;
  uint64_t *v581;
  uint64_t *v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t *v585;
  uint64_t v586;
  unsigned int *v587;
  unsigned int v588;
  unsigned int v589;
  unsigned int *v590;
  unsigned int v591;
  unsigned int v592;
  int v593;
  uint64_t v594;
  _QWORD *v595;
  uint64_t v596;
  int HasFocusVisible;
  int v598;
  int isUserActionElementActive;
  int HasFocusWithin;
  int v601;
  uint64_t *v602;
  int isUserActionElementDragged;
  WTF *v604;
  uint64_t v605;
  unsigned int v606;
  unsigned int v607;
  unsigned int v608;
  unsigned int v609;
  unsigned int v610;
  unsigned int v611;
  unsigned int v612;
  unsigned int v613;
  unsigned int v614;
  unsigned int v615;
  unsigned int v616;
  unsigned int v617;
  unsigned int v618;
  unsigned int v619;
  unsigned int v620;
  unsigned int v621;
  unsigned int v622;
  unsigned int v623;
  unsigned int v624;
  unsigned int v625;
  unsigned int v626;
  unsigned int v627;
  unsigned int v628;
  unsigned int v629;
  unsigned int v630;
  unsigned int v631;
  unsigned int v632;
  unsigned int v633;
  unsigned int v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  uint64_t *v655;
  uint64_t v656;
  uint64_t *v657;
  uint64_t *v658;
  uint64_t *v659;
  uint64_t *v660;
  uint64_t *v661;
  uint64_t *v662;
  uint64_t *v663;
  uint64_t *v664;
  uint64_t *v665;
  uint64_t *v666;
  uint64_t *v667;
  uint64_t *v668;
  uint64_t *v669;
  uint64_t *v670;
  uint64_t *v671;
  uint64_t *v672;
  uint64_t *v673;
  uint64_t *v674;
  uint64_t *v675;
  uint64_t *v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  WebCore::RenderStyle *v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  WebCore::RenderStyle *v687;
  uint64_t v688;
  WTF *v689;
  WTF *v690;
  WebCore::RenderStyle *v691;
  const WebCore::RenderStyle *v692;
  const WebCore::RenderStyle *v693;
  uint64_t v694;
  WebCore::RenderStyle *v695[2];
  const WebCore::RenderStyle *v696;
  WebCore::RenderStyle *v697;
  uint64_t v698;
  WebCore::RenderStyle *v699;
  uint64_t v700;
  char v701;
  WTF *v702;
  int v703;
  int v704;
  _BYTE v705[1536];
  uint64_t v706;
  WebCore::RenderStyle *v707[2];

  v10 = a2;
  v12 = *(_QWORD *)a3;
  if (a4 != 1)
    goto LABEL_2;
  if ((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v344 = *(unsigned int *)((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v344)
    goto LABEL_2;
  v345 = *(uint64_t **)((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  v346 = *(_DWORD *)(a3 + 8);
  v347 = 8 * v344;
  v348 = *(_QWORD *)(a3 + 16);
  v349 = v347;
  v350 = v345;
  if (*(_BYTE *)(a3 + 24))
  {
    while (1)
    {
      v351 = *v350;
      if (*(_BYTE *)(*v350 + 96))
      {
        if (*(_DWORD *)(v351 + 80) == v346 && *(_QWORD *)(v351 + 88) == v348)
          break;
      }
      ++v350;
      v349 -= 8;
      if (!v349)
        goto LABEL_2;
    }
  }
  else
  {
    while (1)
    {
      v351 = *v350;
      if (!*(_BYTE *)(*v350 + 96))
        break;
      ++v350;
      v349 -= 8;
      if (!v349)
        goto LABEL_2;
    }
  }
  if (!*(_QWORD *)(v351 + 8))
    goto LABEL_2;
  v550 = v347;
  v551 = *(uint64_t **)((*(_QWORD *)(v12 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*(_BYTE *)(a3 + 24))
  {
    while (1)
    {
      v552 = *v551;
      if (*(_BYTE *)(*v551 + 96))
      {
        if (*(_DWORD *)(v552 + 80) == v346 && *(_QWORD *)(v552 + 88) == v348)
          break;
      }
      ++v551;
      v550 -= 8;
      if (!v550)
        goto LABEL_901;
    }
  }
  else
  {
    while (1)
    {
      v552 = *v551;
      if (!*(_BYTE *)(*v551 + 96))
        break;
      ++v551;
      v550 -= 8;
      if (!v550)
        goto LABEL_901;
    }
  }
  if (*(_BYTE *)(v552 + 105))
  {
LABEL_2:
    if ((*(_WORD *)(v12 + 28) & 0x400) != 0)
    {
      v30 = *(unsigned int *)(a2 + 28);
      if (!(_DWORD)v30)
      {
        __break(0xC471u);
        JUMPOUT(0x1965B1D2CLL);
      }
      v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v30 - 8) + 4200);
      v32 = v31
          ? WebCore::Style::Update::elementStyle(*(WebCore::Style::Update **)(a2 + 936), *(const WebCore::Element **)(*(_QWORD *)(v31 + 200) + 8)): 0;
      (*(void (**)(WebCore::RenderStyle **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 1072))(v695, v12, a5, v32);
      if ((_BYTE)v697)
      {
        v35 = v695[1];
        if (v695[1])
        {
          v695[1] = 0;
          v690 = v35;
          WebCore::Style::commitRelations((uint64_t **)&v690, *(WebCore::Style::Update **)(v10 + 936));
          v12 = (uint64_t)v690;
          v690 = 0;
          if (v12)
          {
            v334 = *(WTF **)v12;
            if (v12 + 16 != *(_QWORD *)v12 && v334)
            {
              *(_QWORD *)v12 = 0;
              *(_DWORD *)(v12 + 8) = 0;
              WTF::fastFree(v334, (void *)a2);
            }
            WTF::fastFree((WTF *)v12, (void *)a2);
          }
        }
        if ((_BYTE)v697)
        {
          result = *(double *)v695;
          *(_OWORD *)a1 = *(_OWORD *)v695;
          a1[2] = (uint64_t)v696;
          return result;
        }
        __break(1u);
LABEL_813:
        *v33 = 0;
        v33[1] = 0;
        --*(_DWORD *)(*a1 - 16);
        *v33 = v12;
        v286 = v33;
LABEL_412:
        v294 = v286[1];
        v286[1] = a5;
        if (v294)
        {
          v295 = *(WTF **)(v294 + 56);
          if ((WTF *)(v294 + 72) != v295 && v295 != 0)
          {
            *(_QWORD *)(v294 + 56) = 0;
            *(_DWORD *)(v294 + 64) = 0;
            WTF::fastFree(v295, (void *)a2);
          }
          WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v294 + 40, (WTF::StringImpl *)a2);
          WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v294 + 24, v297);
          WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v294 + 8, v298);
          WTF::fastFree((WTF *)v294, v299);
        }
        v300 = *a1;
        if (*a1)
          v301 = *(_DWORD *)(v300 - 12) + 1;
        else
          v301 = 1;
        *(_DWORD *)(v300 - 12) = v301;
        v302 = *a1;
        if (*a1)
          v303 = *(_DWORD *)(v302 - 12);
        else
          v303 = 0;
        v304 = (*(_DWORD *)(v302 - 16) + v303);
        v305 = *(unsigned int *)(v302 - 4);
        if (v305 > 0x400)
        {
          if (v305 > 2 * v304)
            return result;
        }
        else
        {
          if (3 * v305 > 4 * v304)
            return result;
          if (!(_DWORD)v305)
          {
            v200 = 8;
            goto LABEL_427;
          }
        }
        v200 = (_DWORD)v305 << (6 * *(_DWORD *)(v302 - 12) >= (2 * v305));
LABEL_427:
        v201 = a1;
LABEL_428:
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v201, v200);
        return result;
      }
    }
    if (a4 != 2)
    {
      v13 = *(unsigned int *)(v10 + 28);
      if (!(_DWORD)v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1965B1CF4);
      }
      v14 = *(_QWORD *)a3;
      if (!*(_QWORD *)a3)
        goto LABEL_9;
      v15 = *(_WORD *)(v14 + 28);
      if ((v15 & 0x70) == 0)
        goto LABEL_9;
      v16 = *(_QWORD *)(v14 + 32);
      if (!v16)
        goto LABEL_9;
      if ((*(_WORD *)(v16 + 28) & 8) == 0)
        goto LABEL_9;
      a2 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v13 - 8);
      v62 = *(_QWORD *)(v10 + 936);
      if ((*(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if (*(_QWORD *)((*(_QWORD *)(v16 + 72) & 0xFFFFFFFFFFFFLL) + 0x58))
          goto LABEL_9;
      }
      v63 = *(_QWORD *)(v62 + 64);
      if (!v63)
        goto LABEL_162;
      v64 = *(_DWORD *)(v63 - 8);
      v65 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
      v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
      v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
      v68 = v64 & ((v67 >> 31) ^ v67);
      v69 = (uint64_t *)(v63 + 24 * v68);
      v70 = *v69;
      if (*v69 != v16)
      {
        v71 = 1;
        while (v70)
        {
          v68 = (v68 + v71) & v64;
          v69 = (uint64_t *)(v63 + 24 * v68);
          v70 = *v69;
          ++v71;
          if (*v69 == v16)
            goto LABEL_161;
        }
        v69 = (uint64_t *)(v63 + 24 * *(unsigned int *)(v63 - 4));
      }
LABEL_161:
      if (v69 != (uint64_t *)(v63 + 24 * *(unsigned int *)(v63 - 4)))
      {
        if (!v69[1])
          goto LABEL_9;
      }
      else
      {
LABEL_162:
        if ((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_9;
        if ((*(_BYTE *)((*(_QWORD *)(v16 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x1965B0EACLL);
        }
      }
      v151 = *(_QWORD *)(v14 + 104);
      if (v151 && *(_QWORD *)(v151 + 8))
        goto LABEL_9;
      v686 = a2;
      v688 = *(_QWORD *)(v10 + 936);
      if ((v15 & 0x20) != 0)
      {
        v563 = WebCore::SVGElement::animatedSMILStyleProperties((WebCore::SVGElement *)v14);
        a2 = v686;
        v62 = v688;
        if (v563)
          goto LABEL_9;
        v151 = *(_QWORD *)(v14 + 104);
      }
      if (!v151 || (v153 = *(_QWORD *)(v151 + 24), v152 = v151 + 24, !v153))
      {
        if (!*MEMORY[0x1E0CBF2F8])
          goto LABEL_170;
        v152 = MEMORY[0x1E0CBF2F8];
      }
      v337 = *(_QWORD *)(a2 + 4176);
      if (*(_DWORD *)(v337 + 308) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
      {
        v685 = *(_QWORD *)(a2 + 4176);
        WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)v337);
        v337 = v685;
        a2 = v686;
        v62 = v688;
      }
      v338 = *(_QWORD *)(v337 + 40);
      if (v338)
      {
        v339 = 0;
        for (i = *(_DWORD *)(*(_QWORD *)v152 + 16) >> 8; ; i = v339 + v341)
        {
          v341 = i & *(_DWORD *)(v338 - 8);
          v342 = *(_QWORD *)(v338 + 8 * v341);
          if (!v342)
            break;
          if (v342 != -1 && v342 == *(_QWORD *)v152)
            goto LABEL_9;
          ++v339;
        }
      }
LABEL_170:
      if ((*(_WORD *)(v16 + 70) & 0xF0C0) != 0)
        goto LABEL_9;
      v154 = *(_QWORD *)(*(_QWORD *)(a2 + 4168) + 1568);
      if (v154)
        v154 = *(_QWORD *)(v154 + 8);
      if (v14 == v154)
        goto LABEL_9;
      if ((*(_WORD *)(v14 + 28) & 0x10) != 0)
      {
        hasDirectionAuto = WebCore::HTMLElement::hasDirectionAuto((WebCore::HTMLElement *)v14);
        a2 = v686;
        v62 = v688;
        if (hasDirectionAuto)
          goto LABEL_9;
      }
      if ((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v291 = *(_QWORD *)((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v291)
        {
          v292 = *(_QWORD *)(v291 + 216);
          if (!*(_QWORD *)(v292 + 32))
          {
            if (*(_QWORD *)(v292 + 24))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v292);
            else
              WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v292);
            v682 = *(_QWORD *)(v292 + 32);
            if (*(_DWORD *)(v682 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v682 + 32));
            if (*(_BYTE *)(v682 + 242)
              || *(_BYTE *)(v682 + 243)
              || *(_BYTE *)(v682 + 244)
              || *(_BYTE *)(v682 + 245)
              || *(_BYTE *)(v682 + 246)
              || *(_BYTE *)(v682 + 247)
              || *(_BYTE *)(v682 + 248))
            {
              *(_BYTE *)(v292 + 236) = 1;
            }
          }
          v678 = *(_QWORD *)(v292 + 32) + 32;
          v293 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v293 = off_1E3450260;
          v695[0] = v293;
          LOBYTE(v678) = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)v678, v695);
          (*(void (**)(WebCore::RenderStyle *))(*(_QWORD *)v293 + 8))(v293);
          a2 = v686;
          v62 = v688;
          if ((v678 & 1) != 0)
            goto LABEL_9;
        }
      }
      if ((*(_QWORD *)(*(_QWORD *)a3 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v266 = *(unsigned int *)((*(_QWORD *)(*(_QWORD *)a3 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
        if ((_DWORD)v266)
        {
          v267 = *(uint64_t **)((*(_QWORD *)(*(_QWORD *)a3 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
          if (*(_BYTE *)(a3 + 24))
          {
            v268 = 8 * v266;
            while (1)
            {
              v269 = (uint64_t *)*v267;
              if (*(_BYTE *)(*v267 + 96))
              {
                if (*((_DWORD *)v269 + 20) == *(_DWORD *)(a3 + 8) && v269[11] == *(_QWORD *)(a3 + 16))
                  break;
              }
              ++v267;
              v268 -= 8;
              if (!v268)
                goto LABEL_178;
            }
          }
          else
          {
            v353 = 8 * v266;
            while (1)
            {
              v269 = (uint64_t *)*v267;
              if (!*(_BYTE *)(*v267 + 96))
                break;
              ++v267;
              v353 -= 8;
              if (!v353)
                goto LABEL_178;
            }
          }
          v354 = *v269;
          if (*v269)
          {
            v679 = WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v679 = off_1E3391D30;
            v355 = *(unsigned int *)(v354 + 12);
            if ((_DWORD)v355)
            {
              v356 = *(uint64_t **)v354;
              v656 = 8 * v355 - 8;
              do
              {
                v357 = *v356++;
                v358 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v679 + 16))(v679, *(_QWORD *)(v357 + 8));
                if ((v358 & 1) != 0)
                  break;
                v359 = v656;
                v656 -= 8;
              }
              while (v359);
              (*(void (**)(uint64_t))(*(_QWORD *)v679 + 8))(v679);
              a2 = v686;
              v62 = v688;
              if ((v358 & 1) != 0)
                goto LABEL_9;
            }
            else
            {
              WTF::Detail::CallableWrapper<WebCore::KeyframeEffectStack::hasEffectWithImplicitKeyframes(void)::$_0,BOOL,WebCore::KeyframeEffect const&>::~CallableWrapper(v679);
              a2 = v686;
              v62 = v688;
            }
          }
        }
      }
LABEL_178:
      v156 = *(_QWORD **)(v14 + 40);
      if (*v156)
        v157 = (*(_WORD *)(*v156 + 28) & 0x80) == 0;
      else
        v157 = 1;
      if (v157)
        v333 = v156[1] + 1328;
      else
        v333 = *v156 + 216;
      if (!*(_BYTE *)(*(_QWORD *)v333 + 236))
      {
        v158 = *(_QWORD *)(a2 + 4176);
        if (!*(_DWORD *)(*(_QWORD *)v158 + 780))
        {
          v159 = *(_QWORD *)(v158 + 24);
          if (!v159 || !*(_DWORD *)(v159 + 780))
          {
            v160 = *(_QWORD *)(v158 + 8);
            if (!v160 || !*(_DWORD *)(v160 + 780))
            {
              v161 = *(_QWORD *)(v14 + 104);
              if (v161)
              {
                v162 = *(_QWORD *)(v161 + 16);
                if (v162)
                {
                  v163 = *(unsigned int *)(v162 + 12);
                  if ((_DWORD)v163)
                  {
                    v164 = v162 + 16;
                    v165 = v162 + 16 + 8 * v163;
                    v166 = WebCore::Style::UserAgentStyle::defaultStyleVersion;
                    if (*(_DWORD *)(v158 + 308) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                    {
                      do
                      {
                        v167 = *(_QWORD *)(a2 + 4176);
                        if (*(_DWORD *)(v167 + 308) < v166)
                        {
                          v683 = v165;
                          WebCore::Style::ScopeRuleSets::collectFeatures(*(WebCore::Style::ScopeRuleSets **)(a2 + 4176));
                          v165 = v683;
                          a2 = v686;
                          v62 = v688;
                          v166 = WebCore::Style::UserAgentStyle::defaultStyleVersion;
                        }
                        v168 = *(_QWORD *)(v167 + 120);
                        if (v168)
                        {
                          v169 = 0;
                          for (j = *(_DWORD *)(*(_QWORD *)v164 + 16) >> 8; ; j = v169 + v171)
                          {
                            v171 = j & *(_DWORD *)(v168 - 8);
                            v172 = *(_QWORD *)(v168 + 16 * v171);
                            if (!v172)
                              break;
                            if (v172 != -1 && v172 == *(_QWORD *)v164)
                              goto LABEL_280;
                            ++v169;
                          }
                        }
                        v164 += 8;
                        v206 = 1;
                      }
                      while (v164 != v165);
                      goto LABEL_281;
                    }
                    v205 = *(_QWORD *)(v158 + 120);
                    if (v205)
                    {
                      v206 = 1;
                      do
                      {
                        v207 = 0;
                        for (k = *(_DWORD *)(*(_QWORD *)v164 + 16) >> 8; ; k = v207 + v209)
                        {
                          v209 = k & *(_DWORD *)(v205 - 8);
                          v210 = *(_QWORD *)(v205 + 16 * v209);
                          if (!v210)
                            break;
                          if (v210 != -1 && v210 == *(_QWORD *)v164)
                          {
LABEL_280:
                            v206 = 0;
                            goto LABEL_281;
                          }
                          ++v207;
                        }
                        v164 += 8;
                      }
                      while (v164 != v165);
                      goto LABEL_281;
                    }
                  }
                }
              }
              v206 = 1;
LABEL_281:
              v212 = *(_QWORD *)(a2 + 4168);
              v213 = *(WebCore::VisitedLinkState **)(v212 + 1440);
              if (!v213)
              {
                v612 = v206;
                v213 = (WebCore::VisitedLinkState *)WTF::fastMalloc((WTF *)0x18);
                *(_DWORD *)v213 = 0;
                v520 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v212);
                do
                  v521 = __ldaxr(v520);
                while (__stlxr(v521 + 1, v520));
                *((_QWORD *)v213 + 1) = v520;
                *((_QWORD *)v213 + 2) = 0;
                v522 = *(WTF **)(v212 + 1440);
                *(_QWORD *)(v212 + 1440) = v213;
                a2 = v686;
                v62 = v688;
                v206 = v612;
                if (v522)
                {
                  WebCore::VisitedLinkState::operator delete(v522, (void *)0x18);
                  v206 = v612;
                  a2 = v686;
                  v62 = v688;
                  v213 = *(WebCore::VisitedLinkState **)(v212 + 1440);
                }
              }
              if ((*(_WORD *)(v14 + 30) & 1) != 0)
              {
                v306 = v206;
                v307 = WebCore::VisitedLinkState::determineLinkStateSlowCase(v213, (const WebCore::Element *)v14, (const WTF::AtomString *)v206);
                v206 = v306;
                a2 = v686;
                v62 = v688;
                v214 = v307;
              }
              else
              {
                v214 = 0;
              }
              v215 = *(_QWORD *)(v14 + 48) & 0xFFFFFFFFFFFFLL;
              if (!v215)
                goto LABEL_9;
              v216 = 0;
              v217 = (uint64_t *)(a2 + 4192);
LABEL_286:
              v218 = v216;
              v219 = v215;
              while (1)
              {
                v220 = *(_WORD *)(v219 + 28);
                if ((v220 & 0x70) != 0)
                  break;
                v216 = v218;
LABEL_313:
                v219 = *(_QWORD *)(v219 + 48) & 0xFFFFFFFFFFFFLL;
                if (!v219)
                {
LABEL_356:
                  if (v216 <= 9)
                  {
                    v255 = *(_QWORD *)(v215 + 32);
                    if (v255)
                      v256 = (*(_WORD *)(v255 + 28) & 8) != 0 ? *(_QWORD *)(v215 + 32) : 0;
                    else
                      v256 = 0;
                    v257 = *v217;
                    if (*v217)
                    {
                      v258 = 0;
                      v259 = *(_DWORD *)(v257 - 8);
                      while (1)
                      {
                        v260 = (~(v256 << 32) + v256) ^ ((unint64_t)(~(v256 << 32) + v256) >> 22);
                        v261 = 9 * ((v260 + ~(v260 << 13)) ^ ((v260 + ~(v260 << 13)) >> 8));
                        v262 = (v261 ^ (v261 >> 15)) + ~((v261 ^ (v261 >> 15)) << 27);
                        v263 = v259 & ((v262 >> 31) ^ v262);
                        v264 = *(_QWORD *)(v257 + 16 * v263);
                        if (v264 != v256)
                          break;
LABEL_367:
                        v256 = *(_QWORD *)(v257 + 16 * v263 + 8);
                        if (!v256)
                          goto LABEL_9;
                        if ((*(_WORD *)(v256 + 70) & 0xF0C0) == 0)
                        {
                          v215 = *(_QWORD *)(v256 + 88);
                          if (v215)
                            goto LABEL_286;
                        }
                        if (++v258 == 10)
                          goto LABEL_9;
                      }
                      v265 = 1;
                      while (v264)
                      {
                        v263 = ((_DWORD)v263 + v265) & v259;
                        v264 = *(_QWORD *)(v257 + 16 * v263);
                        ++v265;
                        if (v264 == v256)
                          goto LABEL_367;
                      }
                    }
                  }
                  goto LABEL_9;
                }
              }
              v221 = *(_QWORD *)(v62 + 64);
              if (!v221)
                goto LABEL_296;
              v222 = *(_DWORD *)(v221 - 8);
              v223 = (~(v219 << 32) + v219) ^ ((unint64_t)(~(v219 << 32) + v219) >> 22);
              v224 = 9 * ((v223 + ~(v223 << 13)) ^ ((v223 + ~(v223 << 13)) >> 8));
              v225 = (v224 ^ (v224 >> 15)) + ~((v224 ^ (v224 >> 15)) << 27);
              v226 = v222 & ((v225 >> 31) ^ v225);
              v227 = (uint64_t *)(v221 + 24 * v226);
              v228 = *v227;
              if (*v227 != v219)
              {
                v229 = 1;
                while (v228)
                {
                  v226 = (v226 + v229) & v222;
                  v227 = (uint64_t *)(v221 + 24 * v226);
                  v228 = *v227;
                  ++v229;
                  if (*v227 == v219)
                    goto LABEL_295;
                }
                v227 = (uint64_t *)(v221 + 24 * *(unsigned int *)(v221 - 4));
              }
LABEL_295:
              if (v227 != (uint64_t *)(v221 + 24 * *(unsigned int *)(v221 - 4)))
              {
                v677 = v227[1];
                if (!v677)
                  goto LABEL_309;
              }
              else
              {
LABEL_296:
                if ((*(_QWORD *)(v219 + 64) & 0xFFFFFFFFFFFFLL) == 0)
                  goto LABEL_309;
                if ((*(_BYTE *)((*(_QWORD *)(v219 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1965B1114);
                }
                v677 = (*(_QWORD *)(v219 + 64) & 0xFFFFFFFFFFFFLL) + 80;
              }
              v230 = *(_QWORD *)(v677 + 16);
              if ((v230 & 0x80000000) != 0)
                goto LABEL_309;
              v231 = *(uint64_t **)(v677 + 48);
              if ((v230 & 0xF80000000000) == 0 && v231 != 0)
              {
                v233 = *((unsigned int *)v231 + 3);
                if ((_DWORD)v233)
                {
                  v234 = *v231;
                  v235 = 8 * v233;
                  while ((*(_BYTE *)(*(_QWORD *)v234 + 19) & 0x80) == 0)
                  {
                    v234 += 8;
                    v235 -= 8;
                    if (!v235)
                      goto LABEL_308;
                  }
                  goto LABEL_309;
                }
              }
LABEL_308:
              if (*(_QWORD *)(v219 + 96) != *(_QWORD *)(v14 + 96))
                goto LABEL_309;
              v237 = *(_QWORD *)(v219 + 104);
              if (v237)
              {
                if (*(_QWORD *)(v237 + 8))
                  goto LABEL_309;
              }
              if ((*(_BYTE *)(v219 + 70) & 7) != 0)
                goto LABEL_309;
              v238 = *(unsigned __int16 *)(v219 + 30);
              if ((v238 & 0x20) != 0)
                goto LABEL_309;
              v654 = v218;
              if ((v220 & 0x20) != 0)
              {
                v672 = v217;
                v567 = v206;
                v631 = v214;
                v650 = v215;
                v568 = WebCore::SVGElement::animatedSMILStyleProperties((WebCore::SVGElement *)v219);
                v215 = v650;
                v214 = v631;
                v206 = v567;
                v217 = v672;
                a2 = v686;
                v62 = v688;
                if (v568)
                  goto LABEL_309;
                v238 = *(unsigned __int16 *)(v219 + 30);
              }
              if (((v238 ^ *(unsigned __int16 *)(v14 + 30)) & 1) != 0)
                goto LABEL_309;
              if ((*(_BYTE *)(v219 + 54) & 2) != 0)
              {
                v635 = v215;
                v367 = v214;
                v607 = v206;
                v657 = v217;
                isUserActionElementHovered = WebCore::Element::isUserActionElementHovered((WebCore::Element *)v219);
                if ((*(_BYTE *)(v14 + 54) & 2) != 0)
                {
                  v598 = isUserActionElementHovered;
                  v541 = WebCore::Element::isUserActionElementHovered((WebCore::Element *)v14);
                  a2 = v686;
                  v62 = v688;
                  v217 = v657;
                  v206 = v607;
                  v214 = v367;
                  v215 = v635;
                  if (v598 != v541)
                    goto LABEL_309;
                }
                else
                {
                  a2 = v686;
                  v62 = v688;
                  v217 = v657;
                  v206 = v607;
                  v214 = v367;
                  v215 = v635;
                  if (isUserActionElementHovered)
                    goto LABEL_309;
                }
              }
              else if ((*(_BYTE *)(v14 + 54) & 2) != 0)
              {
                v658 = v217;
                v369 = v206;
                v621 = v214;
                v636 = v215;
                v370 = WebCore::Element::isUserActionElementHovered((WebCore::Element *)v14);
                v215 = v636;
                v214 = v621;
                v206 = v369;
                v217 = v658;
                a2 = v686;
                v62 = v688;
                if (v370)
                  goto LABEL_309;
              }
              if ((*(_BYTE *)(v219 + 54) & 2) != 0)
              {
                v645 = v215;
                v542 = v214;
                v614 = v206;
                v667 = v217;
                isUserActionElementActive = WebCore::Element::isUserActionElementActive((WebCore::Element *)v219);
                if ((*(_BYTE *)(v14 + 54) & 2) != 0)
                {
                  v576 = WebCore::Element::isUserActionElementActive((WebCore::Element *)v14);
                  a2 = v686;
                  v62 = v688;
                  v217 = v667;
                  v206 = v614;
                  v214 = v542;
                  v215 = v645;
                  if (isUserActionElementActive != v576)
                    goto LABEL_309;
                }
                else
                {
                  a2 = v686;
                  v62 = v688;
                  v217 = v667;
                  v206 = v614;
                  v214 = v542;
                  v215 = v645;
                  if ((isUserActionElementActive & 1) != 0)
                    goto LABEL_309;
                }
              }
              else if ((*(_BYTE *)(v14 + 54) & 2) != 0)
              {
                v668 = v217;
                v543 = v206;
                v628 = v214;
                v646 = v215;
                v544 = WebCore::Element::isUserActionElementActive((WebCore::Element *)v14);
                v215 = v646;
                v214 = v628;
                v206 = v543;
                v217 = v668;
                a2 = v686;
                v62 = v688;
                if (v544)
                  goto LABEL_309;
              }
              if ((*(_BYTE *)(v219 + 54) & 2) != 0)
              {
                v641 = v215;
                v516 = v214;
                v611 = v206;
                v663 = v217;
                isUserActionElementFocused = WebCore::Element::isUserActionElementFocused((WebCore::Element *)v219);
                if ((*(_BYTE *)(v14 + 54) & 2) != 0)
                {
                  v601 = isUserActionElementFocused;
                  v556 = WebCore::Element::isUserActionElementFocused((WebCore::Element *)v14);
                  a2 = v686;
                  v62 = v688;
                  v217 = v663;
                  v206 = v611;
                  v214 = v516;
                  v215 = v641;
                  if (v601 != v556)
                    goto LABEL_309;
                }
                else
                {
                  a2 = v686;
                  v62 = v688;
                  v217 = v663;
                  v206 = v611;
                  v214 = v516;
                  v215 = v641;
                  if (isUserActionElementFocused)
                    goto LABEL_309;
                }
              }
              else if ((*(_BYTE *)(v14 + 54) & 2) != 0)
              {
                v664 = v217;
                v518 = v206;
                v626 = v214;
                v642 = v215;
                v519 = WebCore::Element::isUserActionElementFocused((WebCore::Element *)v14);
                v215 = v642;
                v214 = v626;
                v206 = v518;
                v217 = v664;
                a2 = v686;
                v62 = v688;
                if (v519)
                  goto LABEL_309;
              }
              if ((*(_BYTE *)(v219 + 54) & 2) != 0)
              {
                v643 = v215;
                v533 = v214;
                v613 = v206;
                v665 = v217;
                HasFocusVisible = WebCore::Element::isUserActionElementHasFocusVisible((WebCore::Element *)v219);
                if ((*(_BYTE *)(v14 + 54) & 2) != 0)
                {
                  v557 = WebCore::Element::isUserActionElementHasFocusVisible((WebCore::Element *)v14);
                  a2 = v686;
                  v62 = v688;
                  v217 = v665;
                  v206 = v613;
                  v214 = v533;
                  v215 = v643;
                  if (HasFocusVisible != v557)
                    goto LABEL_309;
                }
                else
                {
                  a2 = v686;
                  v62 = v688;
                  v217 = v665;
                  v206 = v613;
                  v214 = v533;
                  v215 = v643;
                  if ((HasFocusVisible & 1) != 0)
                    goto LABEL_309;
                }
              }
              else if ((*(_BYTE *)(v14 + 54) & 2) != 0)
              {
                v666 = v217;
                v534 = v206;
                v627 = v214;
                v644 = v215;
                v535 = WebCore::Element::isUserActionElementHasFocusVisible((WebCore::Element *)v14);
                v215 = v644;
                v214 = v627;
                v206 = v534;
                v217 = v666;
                a2 = v686;
                v62 = v688;
                if (v535)
                  goto LABEL_309;
              }
              if ((*(_BYTE *)(v219 + 54) & 2) != 0)
              {
                v647 = v215;
                v547 = v214;
                v615 = v206;
                v669 = v217;
                HasFocusWithin = WebCore::Element::isUserActionElementHasFocusWithin((WebCore::Element *)v219);
                if ((*(_BYTE *)(v14 + 54) & 2) != 0)
                {
                  v577 = WebCore::Element::isUserActionElementHasFocusWithin((WebCore::Element *)v14);
                  a2 = v686;
                  v62 = v688;
                  v217 = v669;
                  v206 = v615;
                  v214 = v547;
                  v215 = v647;
                  if (HasFocusWithin != v577)
                    goto LABEL_309;
                }
                else
                {
                  a2 = v686;
                  v62 = v688;
                  v217 = v669;
                  v206 = v615;
                  v214 = v547;
                  v215 = v647;
                  if ((HasFocusWithin & 1) != 0)
                    goto LABEL_309;
                }
              }
              else if ((*(_BYTE *)(v14 + 54) & 2) != 0)
              {
                v670 = v217;
                v548 = v206;
                v629 = v214;
                v648 = v215;
                v549 = WebCore::Element::isUserActionElementHasFocusWithin((WebCore::Element *)v14);
                v215 = v648;
                v214 = v629;
                v206 = v548;
                v217 = v670;
                a2 = v686;
                v62 = v688;
                if (v549)
                  goto LABEL_309;
              }
              if ((*(_BYTE *)(v219 + 54) & 2) != 0)
              {
                v651 = v215;
                v573 = v214;
                v618 = v206;
                v674 = v217;
                isUserActionElementDragged = WebCore::Element::isUserActionElementDragged((WebCore::Element *)v219);
                if ((*(_BYTE *)(v14 + 54) & 2) != 0)
                {
                  v593 = WebCore::Element::isUserActionElementDragged((WebCore::Element *)v14);
                  a2 = v686;
                  v62 = v688;
                  v217 = v674;
                  v206 = v618;
                  v214 = v573;
                  v215 = v651;
                  if (isUserActionElementDragged != v593)
                    goto LABEL_309;
                }
                else
                {
                  a2 = v686;
                  v62 = v688;
                  v217 = v674;
                  v206 = v618;
                  v214 = v573;
                  v215 = v651;
                  if ((isUserActionElementDragged & 1) != 0)
                    goto LABEL_309;
                }
              }
              else if ((*(_BYTE *)(v14 + 54) & 2) != 0)
              {
                v675 = v217;
                v574 = v206;
                v633 = v214;
                v652 = v215;
                v575 = WebCore::Element::isUserActionElementDragged((WebCore::Element *)v14);
                v215 = v652;
                v214 = v633;
                v206 = v574;
                v217 = v675;
                a2 = v686;
                v62 = v688;
                if (v575)
                  goto LABEL_309;
              }
              v239 = **(_QWORD **)(v14 + 40);
              if (v239)
              {
                if ((*(_WORD *)(v239 + 28) & 0x80) != 0 && !*(_BYTE *)(v239 + 193))
                {
                  v655 = v217;
                  v606 = v206;
                  v620 = v214;
                  v335 = v215;
                  v595 = (_QWORD *)WebCore::Element::userAgentPart((WebCore::Element *)v219);
                  v336 = (_QWORD *)WebCore::Element::userAgentPart((WebCore::Element *)v14);
                  v215 = v335;
                  v206 = v606;
                  v214 = v620;
                  v217 = v655;
                  a2 = v686;
                  v62 = v688;
                  if (*v595 != *v336)
                    goto LABEL_309;
                }
              }
              if ((*(_BYTE *)(v14 + 22) & 0x10) != 0)
              {
                if ((*(_QWORD *)(v219 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v578 = *(WTF **)((*(_QWORD *)(v219 + 72) & 0xFFFFFFFFFFFFLL) + 0xD0);
                  v377 = v578;
                  if (v578)
                    ++*((_DWORD *)v578 + 2);
                  a2 = v686;
                  v62 = v688;
                }
                else
                {
                  v377 = 0;
                }
                if ((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) != 0
                  && (v579 = *(WTF **)((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) + 0xD0)) != 0)
                {
                  v653 = v215;
                  v619 = v206;
                  v634 = v214;
                  v676 = v217;
                  v580 = *((_DWORD *)v579 + 2);
                  *((_DWORD *)v579 + 2) = v580 + 1;
                  v604 = v377;
                  v378 = v377 == v579;
                  if (v580)
                    *((_DWORD *)v579 + 2) = v580;
                  else
                    WebCore::SpaceSplitStringData::destroy(v579, (WTF::StringImpl *)a2);
                  a2 = v686;
                  v62 = v688;
                  v217 = v676;
                  v206 = v619;
                  v214 = v634;
                  v215 = v653;
                  v377 = v604;
                }
                else
                {
                  v378 = v377 == 0;
                }
                if (v377)
                {
                  if (*((_DWORD *)v377 + 2) == 1)
                  {
                    v671 = v217;
                    v616 = v206;
                    v630 = v214;
                    v649 = v215;
                    WebCore::SpaceSplitStringData::destroy(v377, (WTF::StringImpl *)a2);
                    v215 = v649;
                    v206 = v616;
                    v214 = v630;
                    v217 = v671;
                    a2 = v686;
                    v62 = v688;
                  }
                  else
                  {
                    --*((_DWORD *)v377 + 2);
                  }
                }
                if (!v378)
                  goto LABEL_309;
              }
              v240 = *(_QWORD *)(*(_QWORD *)(a2 + 4168) + 1568);
              if (v240)
              {
                if (*(_QWORD *)(v240 + 8) == v219)
                {
LABEL_309:
                  v216 = (v218 + 1);
                  v236 = v218 > 9;
                  v218 = v216;
                  if (v236)
                    goto LABEL_356;
                  goto LABEL_313;
                }
              }
              v241 = *(_QWORD *)(v14 + 104);
              v242 = *(_QWORD *)(v219 + 104);
              if (v241 == v242)
              {
LABEL_606:
                v637 = v215;
                v608 = v206;
                v622 = v214;
                v659 = v217;
                v393 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v219 + 1136))(v219);
                v394 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 1136))(v14);
                LODWORD(v218) = v654;
                v215 = v637;
                v206 = v608;
                v214 = v622;
                v217 = v659;
                a2 = v686;
                v62 = v688;
                if (v393 != v394 || (*(_BYTE *)(v219 + 71) & 3) != 0)
                  goto LABEL_309;
                v395 = *(_QWORD *)(v219 + 104);
                if (v395 && (v397 = *(_QWORD *)(v395 + 24), v396 = v395 + 24, v397)
                  || (v396 = MEMORY[0x1E0CBF2F8], *MEMORY[0x1E0CBF2F8]))
                {
                  v509 = *(_QWORD *)(v686 + 4176);
                  if (*(_DWORD *)(v509 + 308) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                  {
                    v605 = *(_QWORD *)(v686 + 4176);
                    WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)v509);
                    v509 = v605;
                    LODWORD(v218) = v654;
                    v215 = v637;
                    v206 = v608;
                    v214 = v622;
                    v217 = v659;
                    v62 = v688;
                  }
                  v510 = *(_QWORD *)(v509 + 40);
                  if (v510)
                  {
                    v511 = 0;
                    for (m = *(_DWORD *)(*(_QWORD *)v396 + 16) >> 8; ; m = v511 + v513)
                    {
                      v513 = m & *(_DWORD *)(v510 - 8);
                      v514 = *(_QWORD *)(v510 + 8 * v513);
                      if (!v514)
                        break;
                      v515 = v514 != -1 && v514 == *(_QWORD *)v396;
                      a2 = v686;
                      if (v515)
                        goto LABEL_309;
                      ++v511;
                    }
                  }
                }
                v398 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v219 + 840))(v219, a2, v206, v217, v214, -1, 24, v215);
                LODWORD(v218) = v654;
                v215 = v637;
                v206 = v608;
                v214 = v622;
                v217 = v659;
                a2 = v686;
                v62 = v688;
                if ((v398 & 1) != 0)
                  goto LABEL_309;
                v399 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 840))(v14, v686, v608, v659, v622, -1, 24, v637);
                LODWORD(v218) = v654;
                v215 = v637;
                v206 = v608;
                v214 = v622;
                v217 = v659;
                a2 = v686;
                v62 = v688;
                if ((v399 & 1) != 0)
                  goto LABEL_309;
                v400 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v219 + 768))(v219, v686, v608, v659, v622, -1, 24, v637);
                v401 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 768))(v14);
                LODWORD(v218) = v654;
                v215 = v637;
                v206 = v608;
                v214 = v622;
                v217 = v659;
                a2 = v686;
                v62 = v688;
                if (v400 != v401)
                  goto LABEL_309;
                v402 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v219 + 808))(v219, v686, v608, v659, v622, -1, 24, v637);
                v403 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 808))(v14);
                LODWORD(v218) = v654;
                v215 = v637;
                v206 = v608;
                v214 = v622;
                v217 = v659;
                a2 = v686;
                v62 = v688;
                if (v402 != v403)
                  goto LABEL_309;
                v404 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v219 + 816))(v219, v686, v608, v659, v622, -1, 24, v637);
                v405 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 816))(v14);
                LODWORD(v218) = v654;
                v215 = v637;
                v206 = v608;
                v214 = v622;
                v217 = v659;
                a2 = v686;
                v62 = v688;
                if (v404 != v405)
                  goto LABEL_309;
                v406 = *(_QWORD *)(v219 + 72) & 0xFFFFFFFFFFFFLL;
                if (v406)
                {
                  v488 = *(unsigned int *)((*(_QWORD *)(v219 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
                  if ((_DWORD)v488)
                  {
                    v489 = *(uint64_t **)((*(_QWORD *)(v219 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
                    v490 = 8 * v488;
                    do
                    {
                      v491 = *v489;
                      if (!*(_BYTE *)(*v489 + 96))
                        break;
                      ++v489;
                      v490 -= 8;
                    }
                    while (v490);
                    if (*(_QWORD *)v491 && *(_DWORD *)(*(_QWORD *)v491 + 12))
                      goto LABEL_309;
                  }
                }
                if ((*(_WORD *)(v219 + 28) & 0x10) != 0)
                {
                  v407 = *(_QWORD *)(*(_QWORD *)(v219 + 96) + 24);
                  if (v407 == *(_QWORD *)(WebCore::HTMLNames::iframeTag + 24))
                    goto LABEL_309;
                  if (v407 == *(_QWORD *)(WebCore::HTMLNames::frameTag + 24))
                    goto LABEL_309;
                  if (v407 == *(_QWORD *)(WebCore::HTMLNames::embedTag + 24))
                    goto LABEL_309;
                  if (v407 == *(_QWORD *)(WebCore::HTMLNames::objectTag + 24))
                    goto LABEL_309;
                  if (v407 == *(_QWORD *)(WebCore::HTMLNames::appletTag + 24))
                    goto LABEL_309;
                  if (v407 == *(_QWORD *)(WebCore::HTMLNames::canvasTag + 24))
                    goto LABEL_309;
                  v408 = WebCore::HTMLElement::hasDirectionAuto((WebCore::HTMLElement *)v219);
                  LODWORD(v218) = v654;
                  v215 = v637;
                  v206 = v608;
                  v214 = v622;
                  v217 = v659;
                  a2 = v686;
                  v62 = v688;
                  if (v408)
                    goto LABEL_309;
                  v406 = *(_QWORD *)(v219 + 72) & 0xFFFFFFFFFFFFLL;
                }
                if (v406)
                {
                  LODWORD(v406) = *(unsigned __int16 *)(v406 + 32);
                  LOBYTE(v406) = v406 >= 0x100 && v406 != 0;
                }
                if ((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) != 0
                  && *(unsigned __int16 *)((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) + 0x20) > 0xFFu)
                {
                  LOBYTE(v406) = v406 ^ (*(_WORD *)((*(_QWORD *)(v14 + 72) & 0xFFFFFFFFFFFFLL) + 0x20) != 0);
                }
                if ((v406 & 1) != 0
                  || (*(_WORD *)(v219 + 30) & 1) != 0 && (_DWORD)v214 != ((*(_DWORD *)(v677 + 44) >> 10) & 3)
                  || (unint64_t)(*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v677 + 8) + 40) + 642) & 3) << 48)
                {
                  goto LABEL_309;
                }
                v409 = *(_QWORD *)(v219 + 104);
                v410 = *(_QWORD *)(v14 + 104);
                if (v409 == v410)
                {
LABEL_632:
                  if ((*(_QWORD *)(v219 + 72) & 0xFFFFFFFFFFFFLL) == 0)
                    goto LABEL_1070;
                  v504 = *(_QWORD *)((*(_QWORD *)(v219 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                  if (!v504)
                    goto LABEL_1070;
                  v505 = *(_QWORD *)(v504 + 216);
                  if (!*(_QWORD *)(v505 + 32))
                  {
                    if (*(_QWORD *)(v505 + 24))
                      WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v505);
                    else
                      WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v505);
                    v684 = *(_QWORD *)(v505 + 32);
                    if (*(_DWORD *)(v684 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                      WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v684 + 32));
                    if (*(_BYTE *)(v684 + 242)
                      || *(_BYTE *)(v684 + 243)
                      || *(_BYTE *)(v684 + 244)
                      || *(_BYTE *)(v684 + 245)
                      || *(_BYTE *)(v684 + 246)
                      || *(_BYTE *)(v684 + 247)
                      || *(_BYTE *)(v684 + 248))
                    {
                      *(_BYTE *)(v505 + 236) = 1;
                    }
                  }
                  v681 = *(_QWORD *)(v505 + 32) + 32;
                  v506 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x10);
                  *(_QWORD *)v506 = off_1E3450288;
                  v695[0] = v506;
                  LOBYTE(v681) = WebCore::Style::ScopeRuleSets::hasMatchingUserOrAuthorStyle((_QWORD *)v681, v695);
                  (*(void (**)(WebCore::RenderStyle *))(*(_QWORD *)v506 + 8))(v506);
                  a2 = v686;
                  v62 = v688;
                  v217 = v659;
                  v206 = v608;
                  v214 = v622;
                  v215 = v637;
                  LODWORD(v218) = v654;
                  if ((v681 & 1) == 0)
                  {
LABEL_1070:
                    v411 = *(_QWORD *)(v219 + 16);
                    if ((v411 & 0x1000000000000) == 0 || !*(_DWORD *)((v411 & 0xFFFFFFFFFFFFLL) + 0x1C))
                    {
                      v412 = *(_QWORD *)(v14 + 16);
                      if ((v412 & 0x1000000000000) == 0 || !*(_DWORD *)((v412 & 0xFFFFFFFFFFFFLL) + 0x1C))
                      {
                        v413 = *(_QWORD *)(a2 + 4168);
                        v414 = *(uint64_t **)(v413 + 3096);
                        if (!v414)
                          goto LABEL_636;
                        v581 = 0;
                        while (1)
                        {
                          v582 = v581 ? v581 + 1 : (uint64_t *)(v413 + 3104);
                          v581 = (uint64_t *)*v582;
                          v583 = *v581;
                          if ((*(_WORD *)(*v581 + 28) & 0x10) != 0
                            && *(_QWORD *)(*(_QWORD *)(v583 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag
                                                                                       + 24))
                          {
                            break;
                          }
                          if (v581 == v414)
                            goto LABEL_1017;
                        }
                        a2 = v686;
                        v62 = v688;
                        v217 = v659;
                        v206 = v608;
                        v214 = v622;
                        v215 = v637;
                        LODWORD(v218) = v654;
                        if (v583 == v219)
                          goto LABEL_309;
LABEL_1017:
                        v584 = 0;
                        while (1)
                        {
                          v585 = v584 ? v584 + 1 : (uint64_t *)(v413 + 3104);
                          v584 = (uint64_t *)*v585;
                          v586 = *v584;
                          if ((*(_WORD *)(*v584 + 28) & 0x10) != 0
                            && *(_QWORD *)(*(_QWORD *)(v586 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::dialogTag
                                                                                       + 24))
                          {
                            break;
                          }
                          if (v584 == v414)
                          {
                            v586 = 0;
                            break;
                          }
                        }
                        a2 = v686;
                        v62 = v688;
                        v217 = v659;
                        v206 = v608;
                        v214 = v622;
                        v215 = v637;
                        LODWORD(v218) = v654;
                        if (v14 != v586)
                        {
LABEL_636:
                          v415 = *(_QWORD *)(v413 + 1992);
                          if (!v415)
                            goto LABEL_642;
                          v416 = *(_DWORD *)(v415 + 8);
                          *(_DWORD *)(v415 + 8) = v416 + 1;
                          if (v416 == -1)
                          {
                            __break(0xC471u);
                            JUMPOUT(0x1965B1588);
                          }
                          v417 = *(_QWORD *)(v415 + 56);
                          *(_DWORD *)(v415 + 8) = v416;
                          if (v417 != v219 && v14 != v417)
                          {
LABEL_642:
                            v419 = *(WebCore::Style::RuleSet ***)(a2 + 4176);
                            if (v419[28])
                            {
                              v680 = v419[28];
                              WebCore::Style::ElementRuleCollector::ElementRuleCollector((WebCore::Style::ElementRuleCollector *)v695, (const WebCore::Element *)v14, v419, *(WebCore::Style::SelectorMatchingState **)(a2 + 4184));
                              if (!v703)
                                goto LABEL_648;
                              if (v704)
                                v704 = 0;
                              v421 = v702;
                              if (v705 == (_BYTE *)v702)
                              {
LABEL_647:
                                if (v421)
                                  goto LABEL_648;
                              }
                              else if (v702)
                              {
                                v702 = 0;
                                v703 = 0;
                                WTF::fastFree(v421, v420);
                                v421 = v702;
                                goto LABEL_647;
                              }
                              v702 = (WTF *)v705;
                              v703 = 64;
LABEL_648:
                              v706 = 0;
                              v701 = 2;
                              v691 = v680;
                              LOWORD(v692) = 0;
                              WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)v695, (uint64_t)&v691);
                              v422 = v704;
                              WebCore::Style::ElementRuleCollector::~ElementRuleCollector((WebCore::Style::ElementRuleCollector *)v695, v423);
                              a2 = v686;
                              v62 = v688;
                              v217 = v659;
                              if (v422)
                                goto LABEL_9;
                              v419 = *(WebCore::Style::RuleSet ***)(v686 + 4176);
                            }
                            if (v419[29])
                            {
                              v687 = v419[29];
                              WebCore::Style::ElementRuleCollector::ElementRuleCollector((WebCore::Style::ElementRuleCollector *)v695, (const WebCore::Element *)v14, v419, *(WebCore::Style::SelectorMatchingState **)(a2 + 4184));
                              if (v703)
                              {
                                if (v704)
                                  v704 = 0;
                                v425 = v702;
                                if (v705 == (_BYTE *)v702)
                                {
LABEL_655:
                                  if (v425)
                                    goto LABEL_656;
                                }
                                else if (v702)
                                {
                                  v702 = 0;
                                  v703 = 0;
                                  WTF::fastFree(v425, v424);
                                  v425 = v702;
                                  goto LABEL_655;
                                }
                                v702 = (WTF *)v705;
                                v703 = 64;
                              }
LABEL_656:
                              v706 = 0;
                              v701 = 2;
                              v691 = v687;
                              LOWORD(v692) = 0;
                              WebCore::Style::ElementRuleCollector::collectMatchingRules((uint64_t)v695, (uint64_t)&v691);
                              v426 = v704;
                              WebCore::Style::ElementRuleCollector::~ElementRuleCollector((WebCore::Style::ElementRuleCollector *)v695, v427);
                              v62 = v688;
                              v217 = v659;
                              if (v426)
                                goto LABEL_9;
                            }
                            if ((*(_WORD *)(v16 + 70) & 0xF0C0) != 0)
                              goto LABEL_9;
                            v428 = *v217;
                            if (*v217
                              || (WTF::HashTable<JSC::JSObject const*,WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>>,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashMap<JSC::JSObject const*,WebCore::JSCustomElementInterface *,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashTraits<JSC::JSObject const*>,WTF::HashTraits<WebCore::JSCustomElementInterface *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject const*>>::rehash(v217, 8u), v217 = v659, v62 = v688, (v428 = *v659) != 0))
                            {
                              v429 = *(_DWORD *)(v428 - 8);
                            }
                            else
                            {
                              v429 = 0;
                            }
                            v430 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
                            v431 = 9 * ((v430 + ~(v430 << 13)) ^ ((v430 + ~(v430 << 13)) >> 8));
                            v432 = (v431 ^ (v431 >> 15)) + ~((v431 ^ (v431 >> 15)) << 27);
                            v433 = v429 & ((v432 >> 31) ^ v432);
                            v434 = (uint64_t *)(v428 + 16 * v433);
                            v435 = *v434;
                            if (*v434)
                            {
                              v436 = 0;
                              v437 = 1;
                              while (v435 != v14)
                              {
                                if (v435 == -1)
                                  v436 = v434;
                                v433 = (v433 + v437) & v429;
                                v434 = (uint64_t *)(v428 + 16 * v433);
                                v435 = *v434;
                                ++v437;
                                if (!*v434)
                                {
                                  if (v436)
                                  {
                                    *v436 = 0;
                                    v436[1] = 0;
                                    --*(_DWORD *)(*v217 - 16);
                                    v434 = v436;
                                  }
                                  goto LABEL_668;
                                }
                              }
LABEL_674:
                              v444 = *(_QWORD *)(v62 + 64);
                              if (!v444)
                                goto LABEL_682;
                              v445 = *(_DWORD *)(v444 - 8);
                              v446 = (~(v219 << 32) + v219) ^ ((unint64_t)(~(v219 << 32) + v219) >> 22);
                              v447 = 9 * ((v446 + ~(v446 << 13)) ^ ((v446 + ~(v446 << 13)) >> 8));
                              v448 = (v447 ^ (v447 >> 15)) + ~((v447 ^ (v447 >> 15)) << 27);
                              v449 = v445 & ((v448 >> 31) ^ v448);
                              v450 = (uint64_t *)(v444 + 24 * v449);
                              v451 = *v450;
                              if (*v450 != v219)
                              {
                                v452 = 1;
                                while (v451)
                                {
                                  v449 = (v449 + v452) & v445;
                                  v450 = (uint64_t *)(v444 + 24 * v449);
                                  v451 = *v450;
                                  ++v452;
                                  if (*v450 == v219)
                                    goto LABEL_681;
                                }
                                v450 = (uint64_t *)(v444 + 24 * *(unsigned int *)(v444 - 4));
                              }
LABEL_681:
                              if (v450 != (uint64_t *)(v444 + 24 * *(unsigned int *)(v444 - 4)))
                              {
                                v453 = (_QWORD *)v450[1];
                              }
                              else
                              {
LABEL_682:
                                if ((*(_QWORD *)(v219 + 64) & 0xFFFFFFFFFFFFLL) != 0)
                                {
                                  if ((*(_BYTE *)((*(_QWORD *)(v219 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                                  {
                                    __break(0xC471u);
                                    JUMPOUT(0x1965B15E4);
                                  }
                                  v453 = (_QWORD *)((*(_QWORD *)(v219 + 64) & 0xFFFFFFFFFFFFLL) + 80);
                                }
                                else
                                {
                                  v453 = 0;
                                }
                              }
                              goto LABEL_685;
                            }
LABEL_668:
                            *v434 = v14;
                            v434[1] = v219;
                            v438 = *v217;
                            if (*v217)
                              v439 = *(_DWORD *)(v438 - 12) + 1;
                            else
                              v439 = 1;
                            *(_DWORD *)(v438 - 12) = v439;
                            v440 = *v217;
                            if (*v217)
                              v441 = *(_DWORD *)(v440 - 12);
                            else
                              v441 = 0;
                            v442 = (*(_DWORD *)(v440 - 16) + v441);
                            v443 = *(unsigned int *)(v440 - 4);
                            if (v443 > 0x400)
                            {
                              if (v443 > 2 * v442)
                                goto LABEL_674;
                            }
                            else
                            {
                              if (3 * v443 > 4 * v442)
                                goto LABEL_674;
                              if (!(_DWORD)v443)
                              {
                                v507 = 8;
                                goto LABEL_809;
                              }
                            }
                            v507 = (_DWORD)v443 << (6 * *(_DWORD *)(v440 - 12) >= (2 * v443));
LABEL_809:
                            WTF::HashTable<JSC::JSObject const*,WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSObject const*,WebCore::JSCustomElementInterface *>>,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashMap<JSC::JSObject const*,WebCore::JSCustomElementInterface *,WTF::DefaultHash<JSC::JSObject const*>,WTF::HashTraits<JSC::JSObject const*>,WTF::HashTraits<WebCore::JSCustomElementInterface *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<JSC::JSObject const*>>::rehash(v217, v507);
                            v62 = v688;
                            goto LABEL_674;
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_309;
                }
                if (v409)
                {
                  v459 = *(unsigned int *)(v409 + 4);
                  v460 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                  if ((v459 & 1) != 0)
                  {
                    v461 = *(_QWORD *)(v409 + 40);
                    v462 = *(unsigned int *)(v409 + 52);
                  }
                  else
                  {
                    v461 = v409 + 32;
                    v462 = v459 >> 5;
                  }
                  if (v462)
                  {
                    v463 = (_QWORD *)(v461 + 8);
                    do
                    {
                      v464 = *(v463 - 1);
                      if (v464 == WebCore::HTMLNames::readonlyAttr
                        || *(_QWORD *)(v464 + 24) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 24)
                        && *(_QWORD *)(v464 + 32) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 32))
                      {
                        goto LABEL_695;
                      }
                      v463 += 2;
                    }
                    while (--v462);
                  }
                }
                else
                {
                  v460 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                }
                v463 = v460;
LABEL_695:
                if (v410
                  && ((v465 = *(unsigned int *)(v410 + 4), (v465 & 1) != 0)
                    ? (v466 = *(_QWORD *)(v410 + 40), v467 = *(unsigned int *)(v410 + 52))
                    : (v466 = v410 + 32, v467 = v465 >> 5),
                      v467))
                {
                  v468 = (_QWORD *)(v466 + 8);
                  while (1)
                  {
                    v469 = *(v468 - 1);
                    if (v469 == WebCore::HTMLNames::readonlyAttr
                      || *(_QWORD *)(v469 + 24) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 24)
                      && *(_QWORD *)(v469 + 32) == *(_QWORD *)(WebCore::HTMLNames::readonlyAttr + 32))
                    {
                      break;
                    }
                    v468 += 2;
                    if (!--v467)
                      goto LABEL_703;
                  }
                }
                else
                {
LABEL_703:
                  v468 = v460;
                }
                if (*v463 != *v468)
                  goto LABEL_309;
                if ((*(_WORD *)(v219 + 28) & 0x20) != 0)
                {
                  Attribute = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v219, (const WebCore::QualifiedName *)&WebCore::HTMLNames::typeAttr);
                  v570 = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v14, (const WebCore::QualifiedName *)&WebCore::HTMLNames::typeAttr);
                  LODWORD(v218) = v654;
                  v215 = v637;
                  v206 = v608;
                  v214 = v622;
                  v217 = v659;
                  a2 = v686;
                  v62 = v688;
                  if (*Attribute != *v570)
                    goto LABEL_309;
                  v409 = *(_QWORD *)(v219 + 104);
                }
                else
                {
                  if (v409
                    && ((v470 = *(unsigned int *)(v409 + 4), (v470 & 1) != 0)
                      ? (v471 = *(_QWORD *)(v409 + 40), v472 = *(unsigned int *)(v409 + 52))
                      : (v471 = v409 + 32, v472 = v470 >> 5),
                        v472))
                  {
                    v473 = (_QWORD *)(v471 + 8);
                    while (1)
                    {
                      v474 = *(v473 - 1);
                      if (v474 == WebCore::HTMLNames::typeAttr
                        || *(_QWORD *)(v474 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
                        && *(_QWORD *)(v474 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
                      {
                        break;
                      }
                      v473 += 2;
                      if (!--v472)
                        goto LABEL_714;
                    }
                  }
                  else
                  {
LABEL_714:
                    v473 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                  }
                  if (v410
                    && ((v475 = *(unsigned int *)(v410 + 4), (v475 & 1) != 0)
                      ? (v476 = *(_QWORD *)(v410 + 40), v477 = *(unsigned int *)(v410 + 52))
                      : (v476 = v410 + 32, v477 = v475 >> 5),
                        v477))
                  {
                    v478 = (_QWORD *)(v476 + 8);
                    while (1)
                    {
                      v479 = *(v478 - 1);
                      if (v479 == WebCore::HTMLNames::typeAttr
                        || *(_QWORD *)(v479 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
                        && *(_QWORD *)(v479 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
                      {
                        break;
                      }
                      v478 += 2;
                      if (!--v477)
                        goto LABEL_723;
                    }
                  }
                  else
                  {
LABEL_723:
                    v478 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                  }
                  if (*v473 != *v478)
                    goto LABEL_309;
                }
                if (v409)
                {
                  v480 = *(unsigned int *)(v409 + 4);
                  if ((v480 & 1) != 0)
                  {
                    v481 = *(uint64_t **)(v409 + 40);
                    v409 = *(unsigned int *)(v409 + 52);
                  }
                  else
                  {
                    v481 = (uint64_t *)(v409 + 32);
                    v409 = v480 >> 5;
                  }
                  if (v409)
                  {
                    while (1)
                    {
                      v482 = *v481;
                      if (*v481 == WebCore::HTMLNames::inertAttr
                        || *(_QWORD *)(v482 + 24) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 24)
                        && *(_QWORD *)(v482 + 32) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 32))
                      {
                        break;
                      }
                      v481 += 2;
                      if (!--v409)
                        goto LABEL_732;
                    }
                    LODWORD(v409) = 1;
                  }
                }
LABEL_732:
                v483 = *(_QWORD *)(v14 + 104);
                if (v483
                  && ((v484 = *(unsigned int *)(v483 + 4), (v484 & 1) != 0)
                    ? (v485 = *(uint64_t **)(v483 + 40), v486 = *(unsigned int *)(v483 + 52))
                    : (v485 = (uint64_t *)(v483 + 32), v486 = v484 >> 5),
                      v486))
                {
                  while (1)
                  {
                    v487 = *v485;
                    if (*v485 == WebCore::HTMLNames::inertAttr
                      || *(_QWORD *)(v487 + 24) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 24)
                      && *(_QWORD *)(v487 + 32) == *(_QWORD *)(WebCore::HTMLNames::inertAttr + 32))
                    {
                      break;
                    }
                    v485 += 2;
                    if (!--v486)
                      goto LABEL_739;
                  }
                  if (!(_DWORD)v409)
                    goto LABEL_309;
                }
                else
                {
LABEL_739:
                  if ((v409 & 1) != 0)
                    goto LABEL_309;
                }
                goto LABEL_632;
              }
              if (v241)
              {
                v323 = *(unsigned int *)(v241 + 4);
                v324 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                if ((v323 & 1) != 0)
                {
                  v325 = *(_QWORD *)(v241 + 40);
                  v245 = *(unsigned int *)(v241 + 52);
                }
                else
                {
                  v325 = v241 + 32;
                  v245 = v323 >> 5;
                }
                if (v245)
                {
                  v244 = (_QWORD *)(v325 + 8);
                  while (1)
                  {
                    v243 = *(v244 - 1);
                    if (v243 == WebCore::XMLNames::langAttr
                      || *(_QWORD *)(v243 + 24) == *(_QWORD *)(WebCore::XMLNames::langAttr + 24)
                      && *(_QWORD *)(v243 + 32) == *(_QWORD *)(WebCore::XMLNames::langAttr + 32))
                    {
                      break;
                    }
                    v244 += 2;
                    if (!--v245)
                      goto LABEL_565;
                  }
LABEL_566:
                  if (v242
                    && ((v379 = *(unsigned int *)(v242 + 4), (v379 & 1) != 0)
                      ? (v380 = *(_QWORD *)(v242 + 40), v248 = *(unsigned int *)(v242 + 52))
                      : (v380 = v242 + 32, v248 = v379 >> 5),
                        v248))
                  {
                    v247 = (_QWORD *)(v380 + 8);
                    while (1)
                    {
                      v246 = *(v247 - 1);
                      if (v246 == WebCore::XMLNames::langAttr
                        || *(_QWORD *)(v246 + 24) == *(_QWORD *)(WebCore::XMLNames::langAttr + 24)
                        && *(_QWORD *)(v246 + 32) == *(_QWORD *)(WebCore::XMLNames::langAttr + 32))
                      {
                        break;
                      }
                      v247 += 2;
                      if (!--v248)
                        goto LABEL_571;
                    }
                  }
                  else
                  {
LABEL_571:
                    v247 = v324;
                  }
                  if (*v244 != *v247)
                    goto LABEL_309;
                  if (v241)
                  {
                    v381 = *(unsigned int *)(v241 + 4);
                    v382 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                    if ((v381 & 1) != 0)
                    {
                      v383 = *(_QWORD *)(v241 + 40);
                      v251 = *(unsigned int *)(v241 + 52);
                    }
                    else
                    {
                      v383 = v241 + 32;
                      v251 = v381 >> 5;
                    }
                    if (v251)
                    {
                      v250 = (_QWORD *)(v383 + 8);
                      do
                      {
                        v249 = *(v250 - 1);
                        if (v249 == WebCore::HTMLNames::langAttr
                          || *(_QWORD *)(v249 + 24) == *(_QWORD *)(WebCore::HTMLNames::langAttr + 24)
                          && *(_QWORD *)(v249 + 32) == *(_QWORD *)(WebCore::HTMLNames::langAttr + 32))
                        {
                          goto LABEL_582;
                        }
                        v250 += 2;
                      }
                      while (--v251);
                    }
                  }
                  else
                  {
                    v382 = (_QWORD *)MEMORY[0x1E0CBF2F8];
                  }
                  v250 = v382;
LABEL_582:
                  if (v242
                    && ((v384 = *(unsigned int *)(v242 + 4), (v384 & 1) != 0)
                      ? (v385 = *(_QWORD *)(v242 + 40), v254 = *(unsigned int *)(v242 + 52))
                      : (v385 = v242 + 32, v254 = v384 >> 5),
                        v254))
                  {
                    v253 = (_QWORD *)(v385 + 8);
                    while (1)
                    {
                      v252 = *(v253 - 1);
                      if (v252 == WebCore::HTMLNames::langAttr
                        || *(_QWORD *)(v252 + 24) == *(_QWORD *)(WebCore::HTMLNames::langAttr + 24)
                        && *(_QWORD *)(v252 + 32) == *(_QWORD *)(WebCore::HTMLNames::langAttr + 32))
                      {
                        break;
                      }
                      v253 += 2;
                      if (!--v254)
                        goto LABEL_587;
                    }
                  }
                  else
                  {
LABEL_587:
                    v253 = v382;
                  }
                  if (*v250 != *v253)
                    goto LABEL_309;
                  if ((v206 & 1) != 0)
                  {
                    if (v242)
                    {
                      v492 = *(_QWORD *)(v242 + 16);
                      if (v492)
                      {
                        v493 = *(unsigned int *)(v492 + 12);
                        if ((_DWORD)v493)
                        {
                          v494 = v492 + 16;
                          v596 = v492 + 16 + 8 * v493;
                          v495 = *(_QWORD *)(a2 + 4176);
                          v496 = WebCore::Style::UserAgentStyle::defaultStyleVersion;
                          if (*(_DWORD *)(v495 + 308) >= WebCore::Style::UserAgentStyle::defaultStyleVersion)
                          {
                            v523 = *(_QWORD *)(v495 + 120);
                            if (v523)
                            {
                              do
                              {
                                v524 = v215;
                                v525 = v214;
                                v526 = v206;
                                v527 = v217;
                                v528 = 0;
                                for (n = *(_DWORD *)(*(_QWORD *)v494 + 16) >> 8; ; n = v528 + v530)
                                {
                                  v530 = n & *(_DWORD *)(v523 - 8);
                                  v531 = *(_QWORD *)(v523 + 16 * v530);
                                  if (!v531)
                                    break;
                                  v532 = v531 != -1 && v531 == *(_QWORD *)v494;
                                  a2 = v686;
                                  v62 = v688;
                                  v217 = v527;
                                  v206 = v526;
                                  v214 = v525;
                                  v215 = v524;
                                  LODWORD(v218) = v654;
                                  if (v532)
                                    goto LABEL_309;
                                  ++v528;
                                }
                                v494 += 8;
                                a2 = v686;
                                v62 = v688;
                                v217 = v527;
                                v206 = v526;
                                v214 = v525;
                                v215 = v524;
                                LODWORD(v218) = v654;
                              }
                              while (v494 != v596);
                            }
                          }
                          else
                          {
                            v660 = v217;
                            v609 = v206;
                            v623 = v214;
                            v638 = v215;
                            do
                            {
                              v497 = *(_QWORD *)(a2 + 4176);
                              if (*(_DWORD *)(v497 + 308) < v496)
                              {
                                v594 = *(_QWORD *)(a2 + 4176);
                                WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)v497);
                                v497 = v594;
                                v496 = WebCore::Style::UserAgentStyle::defaultStyleVersion;
                              }
                              v498 = *(_QWORD *)(v497 + 120);
                              if (v498)
                              {
                                v499 = 0;
                                for (ii = *(_DWORD *)(*(_QWORD *)v494 + 16) >> 8; ; ii = v499 + v501)
                                {
                                  v501 = ii & *(_DWORD *)(v498 - 8);
                                  v502 = *(_QWORD *)(v498 + 16 * v501);
                                  if (!v502)
                                    break;
                                  v503 = v502 != -1 && v502 == *(_QWORD *)v494;
                                  a2 = v686;
                                  v62 = v688;
                                  v217 = v660;
                                  v206 = v609;
                                  v214 = v623;
                                  v215 = v638;
                                  LODWORD(v218) = v654;
                                  if (v503)
                                    goto LABEL_309;
                                  ++v499;
                                }
                              }
                              v494 += 8;
                              a2 = v686;
                              v62 = v688;
                              v217 = v660;
                              v206 = v609;
                              v214 = v623;
                              v215 = v638;
                              LODWORD(v218) = v654;
                            }
                            while (v494 != v596);
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    if (!v242)
                      goto LABEL_309;
                    v386 = *(_QWORD *)(v242 + 16);
                    if (!v386)
                      goto LABEL_309;
                    if ((*(_WORD *)(v14 + 28) & 0x20) != 0)
                    {
                      v673 = v217;
                      v617 = v206;
                      v632 = v214;
                      v571 = v215;
                      v602 = (uint64_t *)WebCore::Element::getAttribute((WebCore::Element *)v14, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr);
                      v572 = (uint64_t *)WebCore::Element::getAttribute((WebCore::Element *)v219, (const WebCore::QualifiedName *)&WebCore::HTMLNames::classAttr);
                      v215 = v571;
                      v206 = v617;
                      v214 = v632;
                      v217 = v673;
                      a2 = v686;
                      v62 = v688;
                      v387 = *v602;
                      v386 = *v572;
                    }
                    else
                    {
                      v387 = *(_QWORD *)(v241 + 16);
                    }
                    if (v387 != v386)
                      goto LABEL_309;
                  }
                  v388 = *(_QWORD *)(v14 + 104);
                  if (!v388)
                    goto LABEL_748;
                  v389 = *(_DWORD *)(v388 + 4);
                  if ((v389 & 4) != 0)
                  {
                    v661 = v217;
                    v508 = v206;
                    v624 = v214;
                    v639 = v215;
                    WebCore::StyledElement::rebuildPresentationalHintStyle((WebCore::StyledElement *)v14);
                    LODWORD(v218) = v654;
                    v215 = v639;
                    v214 = v624;
                    v206 = v508;
                    v217 = v661;
                    a2 = v686;
                    v62 = v688;
                    v388 = *(_QWORD *)(v14 + 104);
                    v389 = *(_DWORD *)(v388 + 4);
                  }
                  if ((v389 & 1) != 0)
                    v390 = *(_QWORD *)(v388 + 32);
                  else
LABEL_748:
                    v390 = 0;
                  v391 = *(_QWORD *)(v219 + 104);
                  if (v391)
                  {
                    v392 = *(_DWORD *)(v391 + 4);
                    if ((v392 & 4) != 0)
                    {
                      v662 = v217;
                      v610 = v206;
                      v625 = v214;
                      v640 = v215;
                      WebCore::StyledElement::rebuildPresentationalHintStyle((WebCore::StyledElement *)v219);
                      LODWORD(v218) = v654;
                      v215 = v640;
                      v206 = v610;
                      v214 = v625;
                      v217 = v662;
                      a2 = v686;
                      v62 = v688;
                      v391 = *(_QWORD *)(v219 + 104);
                      v392 = *(_DWORD *)(v391 + 4);
                    }
                    if ((v392 & 1) != 0)
                      v391 = *(_QWORD *)(v391 + 32);
                    else
                      v391 = 0;
                  }
                  if (v390 != v391)
                    goto LABEL_309;
                  goto LABEL_606;
                }
              }
              else
              {
                v324 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              }
LABEL_565:
              v244 = v324;
              goto LABEL_566;
            }
          }
        }
      }
LABEL_9:
      if (a4 != 3)
        goto LABEL_92;
      v17 = *(uint64_t **)(*(_QWORD *)v10 + 1328);
      v18 = v17 + 35;
      ++*((_DWORD *)v17 + 72);
      v19 = *(_QWORD *)(v12 + 16);
      v20 = v19 & 0xFFFFFFFFFFFFLL;
      if ((v19 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v19 & 0xFFFFFFFFFFFFLL) + 8))
      {
        v21 = *v18;
        if (*v18)
        {
          v22 = *(_DWORD *)(v21 - 8);
          v23 = (v20 + ~(v19 << 32)) ^ ((unint64_t)(v20 + ~(v19 << 32)) >> 22);
          v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
          v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
          v26 = v22 & ((v25 >> 31) ^ v25);
          for (jj = 1; ; ++jj)
          {
            v28 = *(_QWORD *)(v21 + 16 * v26);
            if (!v28)
              break;
            if (v28 != -1 && v28 == v20)
            {
              v72 = (WebCore::RenderStyle *)(v21 + 16 * v26);
              v73 = *(unsigned int *)(v21 - 4);
              v74 = (WebCore::RenderStyle *)(v21 + 16 * v73);
              goto LABEL_74;
            }
            v26 = (v26 + jj) & v22;
          }
          v73 = *(unsigned int *)(v21 - 4);
          v72 = (WebCore::RenderStyle *)(v21 + 16 * v73);
          v74 = v72;
LABEL_74:
          v695[0] = (WebCore::RenderStyle *)(v17 + 35);
          v695[1] = v72;
          v75 = (WebCore::RenderStyle *)(v21 + 16 * v73);
          v696 = v74;
        }
        else
        {
          v72 = 0;
          v74 = 0;
          v75 = 0;
          v695[1] = 0;
          v696 = 0;
          v695[0] = (WebCore::RenderStyle *)(v17 + 35);
        }
        v697 = v75;
LABEL_76:
        while (v72 != v75 && !*(_QWORD *)(*(_QWORD *)v72 + 8))
        {
          v566 = (WebCore::RenderStyle *)((char *)v72 + 16);
          v695[1] = v566;
          v72 = v74;
          if (v566 != v74)
          {
            v72 = v566;
            while ((unint64_t)(*(_QWORD *)v72 + 1) <= 1)
            {
              v72 = (WebCore::RenderStyle *)((char *)v72 + 16);
              v695[1] = v72;
              if (v72 == v74)
              {
                v72 = v74;
                goto LABEL_76;
              }
            }
          }
        }
      }
      else
      {
        WTF::WeakHashMap<WebCore::Element const,WTF::UniqueRef<WebCore::Style::MatchResult>,WebCore::WeakPtrImplWithEventTargetData>::end((uint64_t)v695, v17 + 35);
        v21 = *v18;
      }
      v76 = v21 ? (WebCore::RenderStyle *)(v21 + 16 * *(unsigned int *)(v21 - 4)) : 0;
      if (v695[1] == v76)
        goto LABEL_92;
      if ((*(_WORD *)(v12 + 28) & 0x70) != 0)
      {
        v77 = *(_QWORD *)(v12 + 104);
        if (v77)
        {
          v78 = *(_QWORD *)(v77 + 8);
          if (v78)
          {
            v79 = (__int16 *)*((_QWORD *)v695[1] + 1);
            v80 = *((unsigned int *)v79 + 13);
            if ((_DWORD)v80)
            {
              v81 = (_QWORD *)*((_QWORD *)v79 + 5);
              v82 = 16 * v80;
              while (*v81 != v78)
              {
                v81 += 2;
                v82 -= 16;
                if (!v82)
                  goto LABEL_88;
              }
              if (v79)
              {
                v104 = *(unsigned int *)(v10 + 28);
                if (!(_DWORD)v104)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1965B1D34);
                }
                v105 = *(WebCore::Style::Resolver **)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v104 - 8) + 8);
                v106 = *(const WebCore::RenderStyle **)a5;
                v107 = *(_QWORD *)(a5 + 16);
                v108 = *(_QWORD *)(a5 + 32);
                v695[0] = (WebCore::RenderStyle *)v12;
                v696 = v106;
                v697 = 0;
                v698 = 0;
                v699 = 0;
                v700 = v108;
                v109 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
                v110 = *(_QWORD *)(v109 + 1272);
                if (v110)
                  v111 = v110 == v12;
                else
                  v111 = 1;
                if (v111)
                {
                  v107 = *(_QWORD *)(v109 + 1952);
                }
                else if (!v107)
                {
                  v107 = *(_QWORD *)(v110 + 64) & 0xFFFFFFFFFFFFLL;
                  if (v107)
                  {
                    if ((*(_BYTE *)((*(_QWORD *)(v110 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                    {
                      v107 = *(_QWORD *)((*(_QWORD *)(v110 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
                      if (v107)
                        v107 = *(_QWORD *)(v107 + 8);
                    }
                    v107 += 80;
                  }
                }
                v698 = v107;
                if (v106)
                {
                  v112 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v105 + 2) + 8) + 1328) + 296);
                  if (*(_BYTE *)(v112 + 32))
                  {
                    *(_BYTE *)(v112 + 32) = 0;
                    WebCore::RenderStyle::createPtr(v707);
                    std::exchange[abi:sn180100]<std::unique_ptr<WebCore::RenderStyle>,std::unique_ptr<WebCore::RenderStyle>>((WebCore::RenderStyle **)(v112 + 24), v707, &v691);
                    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](v707, v564);
                    WebCore::Style::CustomPropertyRegistry::initialValuePrototypeStyle(void)const::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits> const>((_DWORD *)v112, (_QWORD *)(v112 + 16));
                    WebCore::Style::CustomPropertyRegistry::initialValuePrototypeStyle(void)const::$_0::operator()<WTF::HashMap<WTF::AtomString,WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::UniqueRef<WebCore::CSSRegisteredCustomProperty>>,WTF::HashTableTraits> const>((_DWORD *)v112, (_QWORD *)(v112 + 8));
                    WebCore::RenderStyle::deduplicateCustomProperties(*(_QWORD **)(v112 + 24), (WTF **)v691);
                    std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v691, v565);
                  }
                  v113 = *(_QWORD **)(v112 + 24);
                  v114 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
                  v116 = v114;
                  *(_DWORD *)v114 = 0;
                  v117 = (_DWORD *)v113[1];
                  ++*v117;
                  *((_QWORD *)v114 + 1) = v117;
                  *((_QWORD *)v114 + 2) = v113[2];
                  v118 = (_DWORD *)v113[3];
                  ++*v118;
                  *((_QWORD *)v114 + 3) = v118;
                  v119 = (_DWORD *)v113[4];
                  ++*v119;
                  *((_QWORD *)v114 + 4) = v119;
                  *((_QWORD *)v114 + 5) = v113[5];
                  *((_QWORD *)v114 + 6) = 0;
                  v120 = (_DWORD *)v113[7];
                  ++*v120;
                  *((_QWORD *)v114 + 7) = v120;
                  v695[1] = v114;
                  if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v105 + 2) + 8) + 1272) != v12 || *(_BYTE *)(a5 + 40))
                    WebCore::RenderStyle::inheritFrom(v114, v106, v115);
                  else
                    WebCore::RenderStyle::inheritIgnoringCustomPropertiesFrom(v114, v106, v115);
                }
                else
                {
                  WebCore::Style::Resolver::defaultStyleForElement(v105, (const WebCore::Element *)v12, (uint64_t *)&v691);
                  v116 = v691;
                  v695[1] = v691;
                  v691 = 0;
                  v536 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
                  *(_DWORD *)v536 = 0;
                  v537 = (_DWORD *)*((_QWORD *)v116 + 1);
                  ++*v537;
                  *((_QWORD *)v536 + 1) = v537;
                  *((_QWORD *)v536 + 2) = *((_QWORD *)v116 + 2);
                  v538 = (_DWORD *)*((_QWORD *)v116 + 3);
                  ++*v538;
                  *((_QWORD *)v536 + 3) = v538;
                  v539 = (_DWORD *)*((_QWORD *)v116 + 4);
                  ++*v539;
                  *((_QWORD *)v536 + 4) = v539;
                  *((_QWORD *)v536 + 5) = *((_QWORD *)v116 + 5);
                  *((_QWORD *)v536 + 6) = 0;
                  v540 = (_DWORD *)*((_QWORD *)v116 + 7);
                  ++*v540;
                  *((_QWORD *)v536 + 7) = v540;
                  v696 = v536;
                  v697 = v536;
                }
                if ((*(_WORD *)(v12 + 30) & 1) != 0)
                {
                  *((_QWORD *)v116 + 2) |= 0x40000000000uLL;
                  v319 = *((_QWORD *)v105 + 2);
                  if (v319)
                    v320 = *(WebCore::Document **)(v319 + 8);
                  else
                    v320 = 0;
                  v321 = (WebCore::VisitedLinkState *)*((_QWORD *)v320 + 180);
                  if (!v321)
                    v321 = (WebCore::VisitedLinkState *)WebCore::Document::ensureVisitedLinkState(v320);
                  if ((*(_WORD *)(v12 + 30) & 1) != 0)
                  {
                    v322 = WebCore::VisitedLinkState::determineLinkStateSlowCase(v321, (const WebCore::Element *)v12, v121);
                    if (v322)
                    {
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        v361 = *(_QWORD *)(*(_QWORD *)(v12 + 40) + 8);
                        v362 = *(_QWORD *)(v361 + 528);
                        if (v362)
                        {
                          v363 = *(_QWORD *)(v362 + 8);
                          if (v363)
                          {
                            v364 = *(_QWORD *)(v363 + 24);
                            if (v364)
                            {
                              v365 = *(_QWORD *)(v364 + 8);
                              if (v365)
                                goto LABEL_1071;
                            }
                          }
                        }
                        v558 = *(_QWORD *)(v361 + 2632);
                        if (v558)
                        {
                          v559 = *(_QWORD *)(v558 + 8);
                          if (v559)
                          {
                            v560 = *(_QWORD *)(v559 + 528);
                            if (v560)
                            {
                              v561 = *(_QWORD *)(v560 + 8);
                              if (v561)
                              {
                                v562 = *(_QWORD *)(v561 + 24);
                                if (v562)
                                {
                                  v365 = *(_QWORD *)(v562 + 8);
                                  if (v365)
                                  {
LABEL_1071:
                                    if (WebCore::InspectorInstrumentation::forcePseudoStateImpl(*(_QWORD *)(*(_QWORD *)(v365 + 80) + 8), v12, 80))LOBYTE(v322) = 2;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    LOBYTE(v322) = 0;
                  }
                  *((_DWORD *)v116 + 11) = *((_DWORD *)v116 + 11) & 0xFFFFF3FF | ((v322 & 3) << 10);
                  v116 = v695[1];
                }
                v122 = *((_QWORD *)v116 + 2) & 0xFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int16 *)(a6 + 22) << 48);
                *((_QWORD *)v116 + 2) = v122;
                v123 = *(_QWORD *)(a6 + 16);
                if ((v123 & 0x8000000000) != 0)
                {
                  v122 |= 0x8080000000uLL;
                  *((_QWORD *)v116 + 2) = v122;
                  v123 = *(_QWORD *)(a6 + 16);
                }
                if ((v123 & 0x10000000000) != 0)
                {
                  v122 |= 0x10080000000uLL;
                  *((_QWORD *)v116 + 2) = v122;
                  v123 = *(_QWORD *)(a6 + 16);
                }
                if ((v123 & 0x20000000000) != 0)
                {
                  v122 |= 0x20080000000uLL;
                  *((_QWORD *)v116 + 2) = v122;
                  v123 = *(_QWORD *)(a6 + 16);
                }
                if ((v123 & 0x80000000) != 0)
                  *((_QWORD *)v116 + 2) = v122 | 0x80000000;
                WebCore::Style::Resolver::applyMatchedProperties((uint64_t)v105, (uint64_t)v695);
                v124 = *(const WebCore::RenderStyle **)(a5 + 8);
                v125 = v699;
                v691 = *(WebCore::RenderStyle **)(*((_QWORD *)v105 + 2) + 8);
                v692 = v696;
                if (v124)
                  v126 = v124;
                else
                  v126 = v696;
                v693 = v126;
                v694 = v12;
                WebCore::Style::Adjuster::adjust((WebCore::Style::Adjuster *)&v691, v116, v699);
                if ((*((_BYTE *)v116 + 19) & 0x20) != 0)
                  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v105 + 2) + 8) + 3407) = 1;
                *a1 = (uint64_t)v695[1];
                a1[1] = 0;
                v127 = WTF::fastMalloc((WTF *)0x50);
                v128 = *v79;
                *(_BYTE *)(v127 + 2) = *((_BYTE *)v79 + 2);
                *(_WORD *)v127 = v128;
                v129 = *((unsigned int *)v79 + 5);
                *(_QWORD *)(v127 + 8) = 0;
                *(_QWORD *)(v127 + 16) = 0;
                *(_DWORD *)(v127 + 20) = v129;
                if ((_DWORD)v129)
                {
                  if (v129 >> 28)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1965B1D9CLL);
                  }
                  v130 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v129));
                  *(_DWORD *)(v127 + 16) = v129;
                  *(_QWORD *)(v127 + 8) = v130;
                  v131 = *((unsigned int *)v79 + 5);
                  if ((_DWORD)v131)
                  {
                    v132 = *((_QWORD *)v79 + 1);
                    v133 = v132 + 16 * v131;
                    do
                    {
                      v134 = *(_DWORD **)v132;
                      *v134 = **(_DWORD **)v132 + 1;
                      *v130 = v134;
                      v130[1] = *(_QWORD *)(v132 + 8);
                      v132 += 16;
                      v130 += 2;
                    }
                    while (v132 != v133);
                  }
                }
                v135 = *((unsigned int *)v79 + 9);
                *(_QWORD *)(v127 + 24) = 0;
                *(_QWORD *)(v127 + 32) = 0;
                *(_DWORD *)(v127 + 36) = v135;
                if ((_DWORD)v135)
                {
                  if (v135 >> 28)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1965B1DA4);
                  }
                  v136 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v135));
                  *(_DWORD *)(v127 + 32) = v135;
                  *(_QWORD *)(v127 + 24) = v136;
                  v137 = *((unsigned int *)v79 + 9);
                  if ((_DWORD)v137)
                  {
                    v138 = *((_QWORD *)v79 + 3);
                    v139 = v138 + 16 * v137;
                    do
                    {
                      v140 = *(_DWORD **)v138;
                      *v140 = **(_DWORD **)v138 + 1;
                      *v136 = v140;
                      v136[1] = *(_QWORD *)(v138 + 8);
                      v138 += 16;
                      v136 += 2;
                    }
                    while (v138 != v139);
                  }
                }
                v141 = *((unsigned int *)v79 + 13);
                *(_QWORD *)(v127 + 40) = 0;
                *(_QWORD *)(v127 + 48) = 0;
                *(_DWORD *)(v127 + 52) = v141;
                if ((_DWORD)v141)
                {
                  if (v141 >> 28)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1965B1DACLL);
                  }
                  v142 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v141));
                  *(_DWORD *)(v127 + 48) = v141;
                  *(_QWORD *)(v127 + 40) = v142;
                  v143 = *((unsigned int *)v79 + 13);
                  if ((_DWORD)v143)
                  {
                    v144 = *((_QWORD *)v79 + 5);
                    v145 = v144 + 16 * v143;
                    do
                    {
                      v146 = *(_DWORD **)v144;
                      *v146 = **(_DWORD **)v144 + 1;
                      *v142 = v146;
                      v142[1] = *(_QWORD *)(v144 + 8);
                      v144 += 16;
                      v142 += 2;
                    }
                    while (v144 != v145);
                  }
                }
                v147 = *((unsigned int *)v79 + 17);
                v148 = (void *)(v127 + 72);
                *(_QWORD *)(v127 + 56) = v127 + 72;
                *(_DWORD *)(v127 + 64) = 4;
                *(_DWORD *)(v127 + 68) = v147;
                if (v147 >= 5)
                {
                  if ((v147 & 0x80000000) != 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1965B1EA8);
                  }
                  v148 = (void *)WTF::fastMalloc((WTF *)(2 * v147));
                  *(_DWORD *)(v127 + 64) = v147;
                  *(_QWORD *)(v127 + 56) = v148;
                }
                memcpy(v148, *((const void **)v79 + 7), 2 * *((unsigned int *)v79 + 17));
                a1[2] = v127;
                if (v125)
                {
                  WebCore::RenderStyle::~RenderStyle(v125, v149);
                  if (*(_DWORD *)v125)
                  {
                    result = 0.0;
                    *((_OWORD *)v125 + 2) = 0u;
                    *((_OWORD *)v125 + 3) = 0u;
                    *(_OWORD *)v125 = 0u;
                    *((_OWORD *)v125 + 1) = 0u;
                  }
                  else
                  {
                    WTF::fastFree(v125, v149);
                  }
                }
                if (v697)
                {
                  WebCore::RenderStyle::~RenderStyle(v697, v149);
                  if (*(_DWORD *)v150)
                  {
                    result = 0.0;
                    *((_OWORD *)v150 + 2) = 0u;
                    *((_OWORD *)v150 + 3) = 0u;
                    *(_OWORD *)v150 = 0u;
                    *((_OWORD *)v150 + 1) = 0u;
                  }
                  else
                  {
LABEL_159:
                    WTF::fastFree(v150, (void *)a2);
                  }
                }
                return result;
              }
              goto LABEL_92;
            }
          }
        }
      }
LABEL_88:
      if (v21)
      {
        v83 = (WebCore::RenderStyle *)(v21 + 16 * *(unsigned int *)(v21 - 4));
        if (v83 == v695[1])
          goto LABEL_90;
      }
      else
      {
        if (!v695[1])
        {
LABEL_90:
          v84 = *((_DWORD *)v17 + 72);
          *((_DWORD *)v17 + 72) = v84 + 1;
          if (v84 > *((_DWORD *)v17 + 73))
            WTF::WeakHashMap<WebCore::Element const,WTF::UniqueRef<WebCore::Style::MatchResult>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(v17 + 35, (void *)a2);
LABEL_92:
          v85 = *(unsigned int *)(v10 + 28);
          if (!(_DWORD)v85)
          {
            __break(0xC471u);
            JUMPOUT(0x1965B1D94);
          }
          WebCore::Style::Resolver::styleForElement(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v85 - 8) + 8), v12, a5, 0, (WebCore::Node **)a1);
          v87 = (WTF *)a1[1];
          if (v87)
          {
            a1[1] = 0;
            v689 = v87;
            WebCore::Style::commitRelations((uint64_t **)&v689, *(WebCore::Style::Update **)(v10 + 936));
            v202 = v689;
            v689 = 0;
            if (v202)
            {
              v203 = *(WTF **)v202;
              if ((WTF *)((char *)v202 + 16) != *(WTF **)v202 && v203 != 0)
              {
                *(_QWORD *)v202 = 0;
                *((_DWORD *)v202 + 2) = 0;
                WTF::fastFree(v203, v86);
              }
              WTF::fastFree(v202, v86);
            }
          }
          v88 = *(_QWORD *)(*(_QWORD *)v10 + 1328);
          if ((*(_WORD *)(v12 + 28) & 0x70) != 0
            && (v89 = *(_QWORD *)(v12 + 104)) != 0
            && (v90 = *(_QWORD *)(v89 + 8)) != 0
            && (*(_BYTE *)(v90 + 4) & 8) != 0)
          {
            v271 = (__int16 *)a1[2];
            a1 = (uint64_t *)(v88 + 280);
            a5 = WTF::fastMalloc((WTF *)0x50);
            WebCore::Style::MatchResult::MatchResult(a5, v271);
            v272 = *(_DWORD *)(v88 + 288);
            *(_DWORD *)(v88 + 288) = v272 + 1;
            if (v272 > *(_DWORD *)(v88 + 292))
              WTF::WeakHashMap<WebCore::Element const,WTF::UniqueRef<WebCore::Style::MatchResult>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t *)(v88 + 280), (void *)a2);
            if ((*(_QWORD *)(v12 + 16) & 0xFFFFFFFFFFFFLL) == 0)
            {
              v326 = WTF::fastCompactMalloc((WTF *)0x28);
              *(_DWORD *)v326 = 1;
              *(_QWORD *)(v326 + 16) = 0;
              *(_QWORD *)(v326 + 24) = 0;
              *(_QWORD *)(v326 + 8) = v12;
              *(_BYTE *)(v326 + 32) = 0;
              v327 = *(_QWORD *)(v12 + 16);
              *(_QWORD *)(v12 + 16) = v327 & 0xFFFF000000000000 | v326;
              v328 = v327 & 0xFFFFFFFFFFFFLL;
              if ((v327 & 0xFFFFFFFFFFFFLL) != 0)
              {
                do
                {
                  v329 = __ldaxr((unsigned int *)v328);
                  v330 = v329 - 1;
                }
                while (__stlxr(v330, (unsigned int *)v328));
                if (!v330)
                {
                  atomic_store(1u, (unsigned int *)v328);
                  v331 = *(unsigned int *)(v328 + 28);
                  if ((_DWORD)v331)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v328 + 16), (WTF::StringImpl *)(*(_QWORD *)(v328 + 16) + 32 * v331));
                  v332 = *(WTF **)(v328 + 16);
                  if (v332)
                  {
                    *(_QWORD *)(v328 + 16) = 0;
                    *(_DWORD *)(v328 + 24) = 0;
                    WTF::fastFree(v332, (void *)a2);
                  }
                  WTF::fastFree((WTF *)v328, (void *)a2);
                }
              }
            }
            v273 = *(_QWORD *)(v12 + 16);
            v12 = v273 & 0xFFFFFFFFFFFFLL;
            do
              v274 = __ldaxr((unsigned int *)v12);
            while (__stlxr(v274 + 1, (unsigned int *)v12));
            do
              v275 = __ldaxr((unsigned int *)v12);
            while (__stlxr(v275 + 1, (unsigned int *)v12));
            if (v12)
            {
              do
              {
                v276 = __ldaxr((unsigned int *)v12);
                v277 = v276 - 1;
              }
              while (__stlxr(v277, (unsigned int *)v12));
              if (!v277)
              {
                atomic_store(1u, (unsigned int *)v12);
                v545 = *(unsigned int *)((v273 & 0xFFFFFFFFFFFFLL) + 0x1C);
                if ((_DWORD)v545)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)((v273 & 0xFFFFFFFFFFFFLL) + 0x10), (WTF::StringImpl *)(*(_QWORD *)((v273 & 0xFFFFFFFFFFFFLL) + 0x10) + 32 * v545));
                v546 = *(WTF **)((v273 & 0xFFFFFFFFFFFFLL) + 0x10);
                if (v546)
                {
                  *(_QWORD *)((v273 & 0xFFFFFFFFFFFFLL) + 0x10) = 0;
                  *(_DWORD *)((v273 & 0xFFFFFFFFFFFFLL) + 0x18) = 0;
                  WTF::fastFree(v546, (void *)a2);
                }
                WTF::fastFree((WTF *)(v273 & 0xFFFFFFFFFFFFLL), (void *)a2);
              }
            }
            v278 = (WebCore::Node *)*a1;
            if (*a1
              || (WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)(v88 + 280), 8u), (v278 = (WebCore::Node *)*a1) != 0))
            {
              v279 = *((_DWORD *)v278 - 2);
            }
            else
            {
              v279 = 0;
            }
            v33 = 0;
            v280 = (v12 + ~(v273 << 32)) ^ ((unint64_t)(v12 + ~(v273 << 32)) >> 22);
            v281 = 9 * ((v280 + ~(v280 << 13)) ^ ((v280 + ~(v280 << 13)) >> 8));
            v282 = (v281 ^ (v281 >> 15)) + ~((v281 ^ (v281 >> 15)) << 27);
            v283 = (v282 >> 31) ^ v282;
            for (kk = 1; ; ++kk)
            {
              v285 = v283 & v279;
              v286 = (uint64_t *)((char *)v278 + 16 * v285);
              v287 = *v286;
              if (!*v286)
              {
                if (v33)
                  goto LABEL_813;
                *v286 = v12;
                goto LABEL_412;
              }
              if (v287 != -1)
              {
                v286 = v33;
                if (v287 == v12)
                  break;
              }
              v283 = kk + v285;
              v33 = v286;
            }
            v308 = (char *)v278 + 16 * v285;
            v309 = *((_QWORD *)v308 + 1);
            *((_QWORD *)v308 + 1) = a5;
            if (v309)
            {
              v310 = *(WTF **)(v309 + 56);
              if ((WTF *)(v309 + 72) != v310 && v310 != 0)
              {
                *(_QWORD *)(v309 + 56) = 0;
                *(_DWORD *)(v309 + 64) = 0;
                WTF::fastFree(v310, (void *)a2);
              }
              WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v309 + 40, (WTF::StringImpl *)a2);
              WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v309 + 24, v312);
              WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v309 + 8, v313);
              WTF::fastFree((WTF *)v309, v314);
            }
            if (v12)
            {
              do
              {
                v315 = __ldaxr((unsigned int *)v12);
                v316 = v315 - 1;
              }
              while (__stlxr(v316, (unsigned int *)v12));
              if (!v316)
              {
                atomic_store(1u, (unsigned int *)v12);
                v317 = *(unsigned int *)(v12 + 28);
                if ((_DWORD)v317)
                  WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v317));
                v318 = *(WTF **)(v12 + 16);
                if (v318)
                {
                  *(_QWORD *)(v12 + 16) = 0;
                  *(_DWORD *)(v12 + 24) = 0;
                  WTF::fastFree(v318, (void *)a2);
                }
                v150 = (WTF *)v12;
                goto LABEL_159;
              }
            }
          }
          else
          {
            v91 = (uint64_t *)(v88 + 280);
            v92 = *(_DWORD *)(v88 + 288);
            *(_DWORD *)(v88 + 288) = v92 + 1;
            if (v92 > *(_DWORD *)(v88 + 292))
              WTF::WeakHashMap<WebCore::Element const,WTF::UniqueRef<WebCore::Style::MatchResult>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences((uint64_t *)(v88 + 280), v86);
            v93 = *(_QWORD *)(v12 + 16);
            v94 = v93 & 0xFFFFFFFFFFFFLL;
            if ((v93 & 0xFFFFFFFFFFFFLL) != 0)
            {
              if (*(_QWORD *)((v93 & 0xFFFFFFFFFFFFLL) + 8))
              {
                v95 = *v91;
                if (*v91)
                {
                  v96 = *(_DWORD *)(v95 - 8);
                  v97 = (v94 + ~(v93 << 32)) ^ ((unint64_t)(v94 + ~(v93 << 32)) >> 22);
                  v98 = 9 * ((v97 + ~(v97 << 13)) ^ ((v97 + ~(v97 << 13)) >> 8));
                  v99 = (v98 ^ (v98 >> 15)) + ~((v98 ^ (v98 >> 15)) << 27);
                  v100 = v96 & ((v99 >> 31) ^ v99);
                  for (mm = 1; ; ++mm)
                  {
                    v102 = *(_QWORD *)(v95 + 16 * v100);
                    if (!v102)
                      break;
                    if (v102 != -1 && v102 == v94)
                    {
                      if (v100 != *(_DWORD *)(v95 - 4))
                      {
                        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>>::customDeleteBucket((uint64_t *)(v95 + 16 * v100), v86);
                        ++*(_DWORD *)(*v91 - 16);
                        v194 = *v91;
                        v195 = *v91 ? *(_DWORD *)(v194 - 12) - 1 : -1;
                        *(_DWORD *)(v194 - 12) = v195;
                        v196 = *v91;
                        if (*v91)
                        {
                          v197 = 6 * *(_DWORD *)(v196 - 12);
                          v198 = *(_DWORD *)(v196 - 4);
                          if (v197 < v198 && v198 >= 9)
                          {
                            v200 = v198 >> 1;
                            v201 = (uint64_t *)(v88 + 280);
                            goto LABEL_428;
                          }
                        }
                      }
                      return result;
                    }
                    v100 = (v100 + mm) & v96;
                  }
                }
              }
            }
          }
          return result;
        }
        v83 = 0;
      }
      if (v83 != v695[1])
      {
        WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>>::customDeleteBucket((uint64_t *)v695[1], (void *)a2);
        ++*(_DWORD *)(*v18 - 16);
        v371 = *v18;
        v372 = *v18 ? *(_DWORD *)(v371 - 12) - 1 : -1;
        *(_DWORD *)(v371 - 12) = v372;
        v373 = *v18;
        if (*v18)
        {
          v374 = 6 * *(_DWORD *)(v373 - 12);
          v375 = *(_DWORD *)(v373 - 4);
          if (v374 < v375 && v375 >= 9)
            WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(v17 + 35, v375 >> 1);
        }
      }
      goto LABEL_90;
    }
    v36 = WTF::fastMalloc((WTF *)0x40);
    *(_DWORD *)v36 = 0;
    v37 = *(_DWORD **)(a6 + 8);
    ++*v37;
    *(_QWORD *)(v36 + 8) = v37;
    *(_QWORD *)(v36 + 16) = *(_QWORD *)(a6 + 16);
    v38 = *(_DWORD **)(a6 + 24);
    ++*v38;
    *(_QWORD *)(v36 + 24) = v38;
    v39 = *(_QWORD *)(a6 + 32);
    *(_QWORD *)(v36 + 32) = v39;
    v40 = (uint64_t *)(v36 + 32);
    ++*(_DWORD *)v39;
    *(_QWORD *)(v36 + 40) = *(_QWORD *)(a6 + 40);
    *(_QWORD *)(v36 + 48) = 0;
    v41 = *(_DWORD **)(a6 + 56);
    ++*v41;
    *(_QWORD *)(v36 + 56) = v41;
    v42 = *(_DWORD *)(v10 + 76);
    if (!v42)
    {
      __break(0xC471u);
      JUMPOUT(0x1965B1D8CLL);
    }
    v43 = v36;
    v44 = *(_QWORD *)(*(_QWORD *)(v10 + 64) + 24 * v42 - 16);
    *(_DWORD *)(v36 + 40) = *(_DWORD *)(v36 + 40) & 0xFFFFFFCF | (16 * ((*(_DWORD *)(v44 + 40) >> 4) & 3));
    v45 = *(_QWORD *)(v44 + 32);
    if (v39 == v45)
    {
LABEL_242:
      a1[1] = 0;
      a1[2] = 0;
      *a1 = v43;
      return result;
    }
    v46 = *(unsigned __int8 *)(v39 + 16);
    if (v46 == *(unsigned __int8 *)(v45 + 16) && (*(_BYTE *)(v39 + 17) != 0) == (*(_BYTE *)(v45 + 17) != 0))
    {
      if (v46 != 13)
      {
        v47 = (WebCore::Length *)(v39 + 12);
        if (v46 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v47, (const WebCore::Length *)(v45 + 12)) & 1) == 0)
            goto LABEL_537;
        }
        else
        {
          if (*(_BYTE *)(v39 + 18))
            v48 = *(float *)v47;
          else
            v48 = (float)*(int *)v47;
          v49 = *(float *)(v45 + 12);
          if (!*(_BYTE *)(v45 + 18))
            v49 = (float)SLODWORD(v49);
          if (v48 != v49)
            goto LABEL_537;
        }
      }
      v50 = *(unsigned __int8 *)(v39 + 24);
      if (v50 != *(unsigned __int8 *)(v45 + 24) || (*(_BYTE *)(v39 + 25) != 0) != (*(_BYTE *)(v45 + 25) != 0))
        goto LABEL_537;
      if (v50 != 13)
      {
        v51 = (WebCore::Length *)(v39 + 20);
        if (v50 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v51, (const WebCore::Length *)(v45 + 20)) & 1) == 0)
            goto LABEL_537;
        }
        else
        {
          if (*(_BYTE *)(v39 + 26))
            v52 = *(float *)v51;
          else
            v52 = (float)*(int *)v51;
          v53 = *(float *)(v45 + 20);
          if (!*(_BYTE *)(v45 + 26))
            v53 = (float)SLODWORD(v53);
          if (v52 != v53)
            goto LABEL_537;
        }
      }
      v54 = *(unsigned int *)(v39 + 60);
      if ((_DWORD)v54 != *(_DWORD *)(v45 + 60))
        goto LABEL_537;
      if (memcmp(*(const void **)(v39 + 48), *(const void **)(v45 + 48), 8 * v54))
        goto LABEL_537;
      v55 = *(unsigned int *)(v39 + 76);
      if ((_DWORD)v55 != *(_DWORD *)(v45 + 76)
        || memcmp(*(const void **)(v39 + 64), *(const void **)(v45 + 64), 8 * v55))
      {
        goto LABEL_537;
      }
      v58 = *(unsigned __int8 *)(v39 + 145);
      v59 = *(unsigned __int8 *)(v45 + 145);
      if (v59 | v58)
      {
        if ((v58 != 0) == (v59 == 0))
          goto LABEL_537;
      }
      else if ((WebCore::operator==(v39 + 80, v45 + 80, v57) & 1) == 0)
      {
        goto LABEL_537;
      }
      v60 = *(unsigned __int8 *)(v39 + 152);
      v61 = *(unsigned __int8 *)(v45 + 152);
      if (v60 == 3)
      {
        if (v61 != 3 || *(_QWORD *)(v39 + 160) != *(_QWORD *)(v45 + 160))
          goto LABEL_537;
      }
      else if (v60 != v61)
      {
        goto LABEL_537;
      }
      if (*(unsigned __int8 *)(v39 + 168) != *(unsigned __int8 *)(v45 + 168)
        || (*(_BYTE *)(v39 + 169) == 0) == (*(_BYTE *)(v45 + 169) != 0)
        || *(float *)(v39 + 172) != *(float *)(v45 + 172)
        || *(_QWORD *)(v39 + 176) != *(_QWORD *)(v45 + 176)
        || *(_QWORD *)(v39 + 184) != *(_QWORD *)(v45 + 184)
        || (float)((float)*(__int16 *)(v39 + 192) * 0.25) != (float)((float)*(__int16 *)(v45 + 192) * 0.25)
        || (float)((float)*(__int16 *)(v39 + 194) * 0.25) != (float)((float)*(__int16 *)(v45 + 194) * 0.25))
      {
        goto LABEL_537;
      }
      if (*(_BYTE *)(v39 + 198) && *(_BYTE *)(v45 + 198))
      {
        if ((float)((float)*(__int16 *)(v39 + 196) * 0.25) != (float)((float)*(__int16 *)(v45 + 196) * 0.25))
          goto LABEL_537;
      }
      else if ((*(_BYTE *)(v39 + 198) != 0) != (*(_BYTE *)(v45 + 198) != 0))
      {
        goto LABEL_537;
      }
      if ((*(_BYTE *)(v39 + 200) == 0) == (*(_BYTE *)(v45 + 200) != 0))
        goto LABEL_537;
      if ((*(_BYTE *)(v39 + 201) == 0) == (*(_BYTE *)(v45 + 201) != 0))
        goto LABEL_537;
      if (*(float *)(v39 + 204) != *(float *)(v45 + 204))
        goto LABEL_537;
      if (((*(_DWORD *)(v45 + 208) ^ *(_DWORD *)(v39 + 208)) & 0x7FFFFFFF) != 0)
        goto LABEL_537;
      if ((((*(unsigned __int16 *)(v45 + 212) | (*(unsigned __int8 *)(v45 + 214) << 16)) ^ (*(unsigned __int16 *)(v39 + 212) | (*(unsigned __int8 *)(v39 + 214) << 16))) & 0x3FFFF) != 0)
        goto LABEL_537;
      v174 = *(_QWORD *)(v39 + 216);
      v175 = *(_QWORD *)(v45 + 216);
      v176 = *(unsigned int *)(v174 + 4);
      if ((_DWORD)v176 != *(_DWORD *)(v175 + 4))
        goto LABEL_537;
      if (!(_DWORD)v176)
      {
LABEL_216:
        if (*(float *)(v39 + 224) != *(float *)(v45 + 224))
          goto LABEL_537;
        if (((*(_WORD *)(v45 + 228) ^ *(_WORD *)(v39 + 228)) & 0x3FF) != 0)
          goto LABEL_537;
        v182 = *(unsigned __int8 *)(v39 + 236);
        if (v182 != *(unsigned __int8 *)(v45 + 236) || (*(_BYTE *)(v39 + 237) != 0) != (*(_BYTE *)(v45 + 237) != 0))
          goto LABEL_537;
        if (v182 != 13)
        {
          v183 = (WebCore::Length *)(v39 + 232);
          if (v182 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual(v183, (const WebCore::Length *)(v45 + 232)) & 1) == 0)
              goto LABEL_537;
          }
          else
          {
            if (*(_BYTE *)(v39 + 238))
              v184 = *(float *)v183;
            else
              v184 = (float)*(int *)v183;
            v185 = *(float *)(v45 + 232);
            if (!*(_BYTE *)(v45 + 238))
              v185 = (float)SLODWORD(v185);
            if (v184 != v185)
              goto LABEL_537;
          }
        }
        v186 = *(unsigned __int8 *)(v39 + 244);
        if (v186 != *(unsigned __int8 *)(v45 + 244) || (*(_BYTE *)(v39 + 245) != 0) != (*(_BYTE *)(v45 + 245) != 0))
          goto LABEL_537;
        if (v186 != 13)
        {
          v187 = (WebCore::Length *)(v39 + 240);
          if (v186 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual(v187, (const WebCore::Length *)(v45 + 240)) & 1) == 0)
              goto LABEL_537;
          }
          else
          {
            if (*(_BYTE *)(v39 + 246))
              v188 = *(float *)v187;
            else
              v188 = (float)*(int *)v187;
            v189 = *(float *)(v45 + 240);
            if (!*(_BYTE *)(v45 + 246))
              v189 = (float)SLODWORD(v189);
            if (v188 != v189)
              goto LABEL_537;
          }
        }
        v190 = *(_QWORD *)(v39 + 248);
        v191 = *(_QWORD *)(v45 + 248);
        if ((v190 == v191
           || v190
           && v191
           && *(_QWORD *)(v190 + 112) == *(_QWORD *)(v191 + 112)
           && *(_DWORD *)(v190 + 144) == *(_DWORD *)(v191 + 144)
           && *(unsigned __int16 *)(v190 + 148) == *(unsigned __int16 *)(v191 + 148))
          && *(float *)(v39 + 4) == *(float *)(v45 + 4))
        {
          LODWORD(result) = *(_DWORD *)(v39 + 8);
          if (*(float *)&result == *(float *)(v45 + 8))
          {
            v192 = *(_DWORD **)(v44 + 32);
            ++*v192;
            v193 = *v40;
            *v40 = (uint64_t)v192;
            if (v193)
            {
              if (*(_DWORD *)v193 == 1)
              {
                v288 = *(_QWORD *)(v193 + 336);
                if ((v288 & 0x8000000000000) != 0)
                {
                  v587 = (unsigned int *)(v288 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v588 = __ldaxr(v587);
                    v589 = v588 - 1;
                  }
                  while (__stlxr(v589, v587));
                  if (!v589)
                  {
                    atomic_store(1u, v587);
                    WTF::fastFree((WTF *)v587, v56);
                  }
                }
                v289 = *(_QWORD *)(v193 + 328);
                if ((v289 & 0x8000000000000) != 0)
                {
                  v590 = (unsigned int *)(v289 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v591 = __ldaxr(v590);
                    v592 = v591 - 1;
                  }
                  while (__stlxr(v592, v590));
                  if (!v592)
                  {
                    atomic_store(1u, v590);
                    WTF::fastFree((WTF *)v590, v56);
                  }
                }
                WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)(v193 + 32), v56);
                if (*(_BYTE *)(v193 + 24) == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v193 + 20));
                }
                if (*(_BYTE *)(v193 + 16) == 11)
                {
                  {
                    WebCore::calculationValues(void)::map = 1;
                    qword_1ECE90C98 = 0;
                  }
                  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v193 + 12));
                }
                WTF::fastFree((WTF *)v193, v290);
              }
              else
              {
                --*(_DWORD *)v193;
              }
            }
            goto LABEL_242;
          }
        }
        goto LABEL_537;
      }
      if (*(_QWORD *)(v174 + 8) == *(_QWORD *)(v175 + 8))
      {
        v177 = 0;
        v178 = v175 + 16;
        v179 = v174 + 16;
        while (v176 - 1 != v177)
        {
          v180 = *(_QWORD *)(v179 + 8 * v177);
          v181 = *(_QWORD *)(v178 + 8 * v177++);
          if (v180 != v181)
          {
            if (v177 < v176)
              goto LABEL_537;
            goto LABEL_216;
          }
        }
        goto LABEL_216;
      }
    }
LABEL_537:
    v366 = WTF::DataRef<WebCore::StyleInheritedData>::access(v40);
    WebCore::StyleInheritedData::fastPathInheritFrom((uint64_t)v366, *(_QWORD **)(v44 + 32));
    goto LABEL_242;
  }
LABEL_901:
  if (*(_BYTE *)(a3 + 24))
  {
    while (1)
    {
      v554 = *v345;
      if (*(_BYTE *)(*v345 + 96))
      {
        if (*(_DWORD *)(v554 + 80) == v346 && *(_QWORD *)(v554 + 88) == v348)
          break;
      }
      v453 = 0;
      ++v345;
      v347 -= 8;
      if (!v347)
        goto LABEL_685;
    }
  }
  else
  {
    v453 = 0;
    while (1)
    {
      v554 = *v345;
      if (!*(_BYTE *)(*v345 + 96))
        break;
      ++v345;
      v347 -= 8;
      if (!v347)
        goto LABEL_685;
    }
  }
  v453 = *(_QWORD **)(v554 + 8);
LABEL_685:
  v454 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v454 = 0;
  v455 = (_DWORD *)v453[1];
  ++*v455;
  *(_QWORD *)(v454 + 8) = v455;
  *(_QWORD *)(v454 + 16) = v453[2];
  v456 = (_DWORD *)v453[3];
  ++*v456;
  *(_QWORD *)(v454 + 24) = v456;
  v457 = (_DWORD *)v453[4];
  ++*v457;
  *(_QWORD *)(v454 + 32) = v457;
  *(_QWORD *)(v454 + 40) = v453[5];
  *(_QWORD *)(v454 + 48) = 0;
  v458 = (_DWORD *)v453[7];
  ++*v458;
  *(_QWORD *)(v454 + 56) = v458;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v454;
  return result;
}

void WebCore::Style::TreeResolver::createAnimatedElementUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  int v4;
  int v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  WebCore::StyleOriginatedAnimation **v10;
  WebCore::StyleOriginatedAnimation **v11;
  uint64_t v12;
  unsigned __int16 *v13;
  const WebCore::RenderStyle **v14;
  unsigned __int16 *Ref;
  unsigned int *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  const WebCore::RenderStyle *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  const WebCore::RenderStyle *v35;
  int v36;
  int v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  WTF *v43;
  WebCore::StyleMiscNonInheritedData *v44;
  WTF *v45;
  WTF *v46;
  int v47;
  int v48;
  BOOL v49;
  WTF *v50;
  WTF *v51;
  void *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  WTF *v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  void *v82;
  WTF *v83;
  void *v84;
  uint64_t v85;
  _WORD *v86;
  uint64_t (**v87)();
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *i;
  _DWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  double v106;
  double v107;
  uint64_t j;
  unint64_t k;
  __int16 v110;
  WTF::StringImpl **v111;
  uint64_t v112;
  unsigned __int16 **v113;
  unsigned __int16 **v114;
  uint64_t v115;
  WTF *v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  WTF *v121;
  unsigned __int16 **v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int8x8_t *v127;
  uint64_t v128;
  uint64_t v130;
  _QWORD *v132;
  _DWORD *v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _QWORD *v137;
  WTF *v138;
  _DWORD *v139;
  _DWORD *v140;
  _DWORD *v141;
  _DWORD *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  WTF *v146;
  void *v147;
  _QWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  _DWORD *v152;
  uint64_t *v153;
  uint64_t v154;
  WTF **v155;
  const WTF::StringImpl *v156;
  int v157;
  void *v158;
  uint64_t v159;
  WebCore::RenderStyle *v160;
  uint64_t v161;
  _DWORD *v162;
  _DWORD *v163;
  _DWORD *v164;
  _DWORD *v165;
  uint64_t v166;
  WebCore::StyleOriginatedAnimation *v167;
  WTF *v168;
  WTF *v169;
  unsigned __int8 v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  unsigned __int16 *v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t *v177;
  _BOOL4 v178;
  WTF::StringImpl *v179;
  WebCore::KeyframeEffectStack *v180;
  WTF *v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  WTF::StringImpl **v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int16 *v192;
  uint64_t v193;
  uint64_t v194;
  unsigned __int16 *v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int16 *v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int16 *v201;
  WTF *v202;
  uint64_t v203;
  unsigned __int16 *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  WTF *v209;
  WTF *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  WebCore::KeyframeEffectStack **v234;
  WebCore::KeyframeEffectStack *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  BOOL v239;
  int v240;
  WTF::StringImpl *v241;
  const WTF::String *v242;
  uint64_t v243;
  WTF::StringImpl **v244;
  unsigned __int16 *v245;
  uint64_t v246;
  const WebCore::Animation **v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  const WTF::StringImpl **v251;
  unsigned __int8 v253;
  const WTF::StringImpl *v254;
  uint64_t m;
  unsigned int *v256;
  uint64_t v257;
  char **v258;
  unsigned int *v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t *v262;
  WTF *v263;
  WTF *v264;
  unsigned int v265;
  unsigned int v266;
  uint64_t *v267;
  WTF::StringImpl *v268;
  WTF *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v282;
  uint64_t v283;
  _QWORD *v285;
  WebCore::KeyframeEffectStack **v286;
  WTF::StringImpl *v287;
  uint64_t v288;
  WebCore::KeyframeEffectStack *v289;
  WTF *v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  WTF::StringImpl *v294;
  int v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  void *v300;
  WTF *v301;
  void *v302;
  WTF *v303;
  uint64_t v304;
  uint64_t v305;
  _QWORD *v306;
  char v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v315;
  WTF::StringImpl *v316;
  WTF *v317;
  uint64_t v318;
  WebCore::Animation **v319;
  uint64_t v320;
  WebCore::Animation *v321;
  WTF *v322;
  void *v323;
  WTF *v324;
  uint64_t v325;
  WebCore::KeyframeEffectStack *v327;
  WebCore::KeyframeEffect *v328;
  uint64_t *v329;
  uint64_t v330;
  unsigned __int16 *v331;
  uint64_t v332;
  uint64_t v333;
  unsigned __int16 *v335;
  uint64_t v336;
  unsigned __int16 *v337;
  unsigned __int16 *v338;
  uint64_t v339;
  int v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned __int16 *v344;
  unsigned int *v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int *v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v363;
  uint64_t v364;
  unsigned __int16 *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  int v372;
  uint64_t *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v377;
  uint64_t *n;
  WTF::StringImpl *v379;
  WTF *v380;
  unsigned __int16 **v381;
  unsigned __int16 *v382;
  unsigned __int16 **v383;
  uint64_t v384;
  WTF::StringImpl **v385;
  WTF::StringImpl *v386;
  uint64_t *v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  const WebCore::RenderStyle *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  const WTF::StringImpl *v397;
  WebCore::StyleOriginatedAnimation *v398;
  uint64_t v399;
  WTF::StringImpl *v400;
  uint64_t v401;
  int v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t v406;
  const WTF::StringImpl *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  BOOL v412;
  const WTF::String *v413;
  const WebCore::RenderStyle *v414;
  uint64_t v415;
  const WebCore::RenderStyle *v416;
  uint64_t v417;
  WebCore::KeyframeEffectStack **v418;
  WTF::StringImpl *v419;
  WebCore::KeyframeEffectStack *v420;
  WTF *v421;
  void *v422;
  WTF *v423;
  _DWORD *v424;
  uint64_t v425;
  uint64_t *v426;
  uint64_t v427;
  int v428;
  uint64_t v429;
  BOOL v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v435;
  uint64_t v436;
  unsigned __int16 *v437;
  uint64_t v438;
  uint64_t v439;
  unsigned int v440;
  unsigned int v441;
  unint64_t v442;
  double v443;
  double v444;
  double v445;
  unsigned __int16 *v446;
  unsigned int v447;
  uint64_t v448;
  WTF::String *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  unsigned int v454;
  uint64_t v455;
  int v456;
  int v457;
  BOOL v458;
  uint64_t v459;
  unsigned __int16 *v460;
  uint64_t v461;
  _DWORD *v462;
  unsigned int *v463;
  uint64_t v464;
  unsigned __int16 *v466;
  uint64_t v467;
  uint64_t v468;
  unsigned __int16 *v470;
  _QWORD *v471;
  unsigned __int16 *v472;
  uint64_t v473;
  _DWORD *v475;
  WTF *v476;
  _DWORD *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t *v480;
  WTF::String *v481;
  WTF::String *v482;
  WTF::String *v483;
  WTF::StringImpl **v484;
  WTF::String *v485;
  WebCore::RenderStyle *v486;
  uint64_t v487;
  unsigned __int16 *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  WTF::String *v492;
  int8x8_t *v493;
  uint64_t v494;
  const WebCore::RenderStyle **v495;
  _DWORD *v496;
  unsigned __int16 **v497;
  WebCore::StyleOriginatedAnimation **v498;
  int v499;
  uint64_t v500;
  WebCore::RenderStyle *v501;
  uint64_t v502;
  WTF *v503;
  uint64_t v504;
  char **v505;
  const WebCore::RenderStyle *v506;
  const WebCore::RenderStyle *v507;
  uint64_t v508;
  WTF::StringImpl **v509;
  char v510;
  WTF **v511;
  WTF *v512[2];
  __int128 v513;
  __int128 v514;
  __int128 v515;
  uint64_t v516;
  WebCore::StyleOriginatedAnimation *v517;
  const WebCore::RenderStyle *v518;
  const WebCore::RenderStyle *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522[2];

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  LOBYTE(v493) = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v2;
  v502 = *v6;
  v13 = *(unsigned __int16 **)(*(_QWORD *)(*v6 + 40) + 8);
  v495 = v14;
  v496 = v6 + 1;
  Ref = (unsigned __int16 *)WebCore::Element::renderOrDisplayContentsStyle(*v6, (int *)v6 + 2);
  v17 = Ref;
  v18 = *v9;
  v498 = v11;
  v499 = v5;
  if (Ref)
  {
    v19 = *(_QWORD *)(v18 + 16);
    v503 = 0;
    v504 = 0;
    v20 = *((_DWORD *)v11 + 19);
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x1965B49E8);
    }
    LODWORD(v494) = v19;
    if (*((_BYTE *)v11[8] + 24 * v20 - 4))
    {
      if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v21 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
        if ((_DWORD)v21)
        {
          v74 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
          if (*((_BYTE *)v7 + 24))
          {
            v75 = 8 * v21;
            while (1)
            {
              v76 = *v74;
              if (*(_BYTE *)(*v74 + 96))
              {
                if (*(_DWORD *)(v76 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v76 + 88) == v7[2])
                  break;
              }
              ++v74;
              v75 -= 8;
              if (!v75)
                goto LABEL_6;
            }
          }
          else
          {
            v93 = 8 * v21;
            while (1)
            {
              v76 = *v74;
              if (!*(_BYTE *)(*v74 + 96))
                break;
              ++v74;
              v93 -= 8;
              if (!v93)
                goto LABEL_6;
            }
          }
          for (i = *(_QWORD **)(v76 + 24); i; i = (_QWORD *)i[2])
          {
            v95 = (_DWORD *)*i;
            v95[6] = *(_DWORD *)(*i + 24) + 1;
            Ref = (unsigned __int16 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v95 + 112))(v95);
            if ((_DWORD)Ref)
            {
              v96 = *((_QWORD *)v95 + 7);
              if (v96)
              {
                Ref = (unsigned __int16 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v96 + 24))(*((_QWORD *)v95 + 7));
                if ((_DWORD)Ref)
                {
                  v97 = *(unsigned int *)(v96 + 156);
                  if ((_DWORD)v97)
                  {
                    v98 = 48 * v97;
                    v99 = *(_QWORD *)(v96 + 144) + 24;
                    while ((*(_BYTE *)(*(_QWORD *)v99 + 19) & 0x40) == 0)
                    {
                      v99 += 48;
                      v98 -= 48;
                      if (!v98)
                        goto LABEL_147;
                    }
                    Ref = (unsigned __int16 *)WebCore::CSSAnimation::keyframesRuleDidChange((WTF::StringImpl *)v95);
                  }
                }
              }
            }
LABEL_147:
            if (v95[6] == 1)
              Ref = (unsigned __int16 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v95 + 72))(v95);
            else
              --v95[6];
          }
        }
      }
    }
LABEL_6:
    v501 = 0;
    v22 = (uint64_t)v17;
    goto LABEL_10;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 8) + 32) + 72);
  if (!v23 || !*(_DWORD *)(v23 + 20))
  {
    v22 = 0;
    goto LABEL_9;
  }
  v73 = v9[2];
  if (!v73 || !*(_BYTE *)(v73 + 2))
  {
    v22 = 0;
    goto LABEL_100;
  }
  v204 = v13;
  v387 = v7;
  if (!*((_BYTE *)v7 + 24))
  {
    v388 = *((_DWORD *)v11 + 19);
    if (!v388)
    {
      __break(0xC471u);
      JUMPOUT(0x1965B4FE0);
    }
    v387 = (uint64_t *)((char *)v11[8] + 24 * v388 - 24);
  }
  v389 = *v387;
  if (!v389)
    goto LABEL_788;
  v390 = *(_QWORD *)(v389 + 72) & 0xFFFFFFFFFFFFLL;
  if (!v390)
    goto LABEL_788;
  v391 = *(unsigned int *)(v390 + 164);
  if (!(_DWORD)v391)
    goto LABEL_788;
  v431 = *(uint64_t **)(v390 + 152);
  v432 = 8 * v391;
  if (*((_BYTE *)v7 + 24))
  {
    while (1)
    {
      v433 = *v431;
      if (*(_BYTE *)(*v431 + 96))
      {
        if (*(_DWORD *)(v433 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v433 + 88) == v7[2])
          break;
      }
      ++v431;
      v432 -= 8;
      if (!v432)
        goto LABEL_788;
    }
  }
  else
  {
    while (1)
    {
      v433 = *v431;
      if (!*(_BYTE *)(*v431 + 96))
        break;
      ++v431;
      v432 -= 8;
      if (!v432)
        goto LABEL_788;
    }
  }
  v392 = *(const WebCore::RenderStyle **)(v433 + 8);
  if (!v392)
LABEL_788:
    v392 = *v495;
  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  v22 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v22 = 0;
  v393 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  *(_QWORD *)(v22 + 8) = v393;
  *(_QWORD *)(v22 + 16) = qword_1ECE913C8;
  v394 = qword_1ECE913D0;
  ++*(_DWORD *)qword_1ECE913D0;
  *(_QWORD *)(v22 + 24) = v394;
  v395 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  *(_QWORD *)(v22 + 32) = v395;
  *(_QWORD *)(v22 + 40) = qword_1ECE913E0;
  *(_QWORD *)(v22 + 48) = 0;
  v396 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *(_QWORD *)(v22 + 56) = v396;
  WebCore::RenderStyle::inheritFrom((WebCore::RenderStyle *)v22, v392, v397);
  if (*((_BYTE *)v7 + 24))
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v22 + 16) & 0xFFFF07FFFFFFFFFFLL | ((unint64_t)(*v496 & 0x1F) << 43);
  v398 = *v11;
  *((_DWORD *)v398 + 6) = *((_DWORD *)*v11 + 6) + 2;
  v517 = v398;
  v518 = v392;
  v519 = v495[2];
  v399 = *v7;
  if (*v7)
    *(_DWORD *)(v399 + 24) += 2;
  v520 = v399;
  v521 = 0;
  WebCore::Style::Builder::Builder((unsigned __int8 *)v512, v22, (uint64_t *)&v517, v9[2], 4, 0x23u, 0);
  WebCore::Style::Builder::applyAllProperties((WebCore::Style::Builder *)v512);
  if ((*(_QWORD *)(v22 + 16) & 0x1FLL) == 0x1A)
  {
    v205 = v22;
    v22 = 0;
  }
  else
  {
    v414 = v495[1];
    if (*((_BYTE *)v7 + 24))
      v415 = 0;
    else
      v415 = *v7;
    v505 = (char **)*v11;
    v506 = v392;
    if (v414)
      v416 = v414;
    else
      v416 = v392;
    v507 = v416;
    v508 = v415;
    WebCore::Style::Adjuster::adjust((WebCore::Style::Adjuster *)&v505, (WebCore::RenderStyle *)v22, 0);
    v205 = 0;
  }
  WebCore::Style::Builder::~Builder((WebCore::Style::Builder *)v512, v400);
  v417 = v520;
  v520 = 0;
  if (v417)
  {
    if (*(_DWORD *)(v417 + 24) == 2)
    {
      if ((*(_WORD *)(v417 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v417);
    }
    else
    {
      *(_DWORD *)(v417 + 24) -= 2;
    }
  }
  Ref = (unsigned __int16 *)v517;
  v517 = 0;
  if (Ref)
  {
    if (*((_DWORD *)Ref + 6) == 2)
    {
      if ((Ref[15] & 0x400) == 0)
        Ref = (unsigned __int16 *)WebCore::Node::removedLastRef((WebCore::Node *)Ref);
    }
    else
    {
      *((_DWORD *)Ref + 6) -= 2;
    }
  }
  if (!v205)
    goto LABEL_836;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v205, v16);
  if (!*(_DWORD *)v205)
  {
    Ref = (unsigned __int16 *)WTF::fastFree((WTF *)v205, v16);
    goto LABEL_836;
  }
LABEL_994:
  *(_OWORD *)(v205 + 32) = 0u;
  *(_OWORD *)(v205 + 48) = 0u;
  *(_OWORD *)v205 = 0u;
  *(_OWORD *)(v205 + 16) = 0u;
LABEL_836:
  v13 = v204;
LABEL_100:
  v18 = *v9;
LABEL_9:
  v494 = *(_QWORD *)(v18 + 16);
  v501 = (WebCore::RenderStyle *)v22;
  v503 = 0;
  v504 = 0;
LABEL_10:
  v497 = (unsigned __int16 **)v13;
  if (*((_BYTE *)v13 + 3362) || *((_BYTE *)v13 + 3382))
    goto LABEL_18;
  if (!v22)
    goto LABEL_17;
  v24 = *(_QWORD *)(*(_QWORD *)(v22 + 8) + 32);
  v25 = *(_QWORD *)(v24 + 72);
  if (v25)
  {
    v26 = (WTF *)*v9;
    if (*(_DWORD *)(v25 + 20))
    {
      if ((*(_QWORD *)(v22 + 16) & 0x1FLL) == 0x1A)
        goto LABEL_206;
      goto LABEL_154;
    }
  }
  else
  {
    v26 = (WTF *)*v9;
  }
  v27 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 1) + 32) + 72);
  if (!v27 || !*(_DWORD *)(v27 + 20))
    goto LABEL_16;
  if ((*(_QWORD *)(v22 + 16) & 0x1FLL) == 0x1A)
    goto LABEL_206;
  if (!v25 || !*(_DWORD *)(v25 + 20))
    goto LABEL_169;
LABEL_154:
  if ((*((_QWORD *)v26 + 2) & 0x1FLL) != 0x1A)
    goto LABEL_169;
  v100 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 1) + 32) + 72);
  if (!v100 || (v425 = *(unsigned int *)(v100 + 20), !(_DWORD)v425))
  {
LABEL_156:
    if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_206;
    v101 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
    if (!(_DWORD)v101)
      goto LABEL_206;
    v102 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
    v103 = 8 * v101;
    if (*((_BYTE *)v7 + 24))
    {
      while (1)
      {
        v104 = *v102;
        if (*(_BYTE *)(*v102 + 96))
        {
          if (*(_DWORD *)(v104 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v104 + 88) == v7[2])
            break;
        }
        ++v102;
        v103 -= 8;
        if (!v103)
          goto LABEL_206;
      }
    }
    else
    {
      while (1)
      {
        v104 = *v102;
        if (!*(_BYTE *)(*v102 + 96))
          break;
        ++v102;
        v103 -= 8;
        if (!v103)
          goto LABEL_206;
      }
    }
    v435 = *(_QWORD *)(v104 + 72);
    if (!v435 || !*(_DWORD *)(v435 - 12))
      goto LABEL_206;
    v436 = WebCore::Element::ensureAnimationRareData(*v7, v496);
    v517 = 0;
    v438 = *(_QWORD *)(v436 + 72);
    if (!v438)
    {
      v446 = 0;
      v204 = 0;
      goto LABEL_971;
    }
    v439 = *(unsigned int *)(v438 - 12);
    if (!(_DWORD)v439)
    {
LABEL_956:
      v446 = (unsigned __int16 *)v517;
      if (v517)
      {
        v438 = *((unsigned int *)v517 - 1);
        v466 = (unsigned __int16 *)((char *)v517 + 24 * v438);
        if (*((_DWORD *)v517 - 3))
        {
          if ((_DWORD)v438)
          {
            v467 = 24 * v438;
            v204 = (unsigned __int16 *)&v505;
            v205 = (uint64_t)&xmmword_1E3450120;
            while (1)
            {
              v468 = *((unsigned int *)v446 + 2);
              if ((_DWORD)v468 || *v446 != 0)
              {
                if ((_DWORD)v468 == -1)
                  goto LABEL_993;
                v512[0] = (WTF *)&v505;
                if (!(*((unsigned int (**)(WTF **, unsigned __int16 *))&xmmword_1E3450120 + v468))(v512, v446))break;
              }
              v446 += 12;
              v467 -= 24;
              if (!v467)
              {
                v446 = v466;
                break;
              }
            }
            v204 = v446;
            v446 = (unsigned __int16 *)v517;
            if (!v517)
              goto LABEL_974;
          }
          else
          {
            v204 = (unsigned __int16 *)v517;
          }
          goto LABEL_976;
        }
        v204 = (unsigned __int16 *)((char *)v517 + 24 * v438);
      }
      else
      {
        v204 = 0;
        LODWORD(v438) = 0;
      }
LABEL_971:
      v466 = &v446[12 * v438];
      if (!v446)
      {
LABEL_974:
        v470 = 0;
LABEL_977:
        if (v470 != v204)
        {
          v205 = (uint64_t)&v505;
          do
          {
            v471 = (_QWORD *)*((_QWORD *)v204 + 2);
            WebCore::StyleOriginatedAnimation::cancel(v471, 0);
            WebCore::StyleOriginatedAnimation::disassociateFromOwningElement((uint64_t)v471);
            v472 = v204 + 12;
            v204 = v466;
            if (v472 != v466)
            {
              v204 = v466;
              while (1)
              {
                v473 = *((unsigned int *)v472 + 2);
                if ((_DWORD)v473 || *v472 != 0)
                {
                  if ((_DWORD)v473 == -1)
                    goto LABEL_993;
                  v512[0] = (WTF *)&v505;
                  v204 = v466;
                  if (!(*((unsigned int (**)(WTF **, unsigned __int16 *))&xmmword_1E3450120 + v473))(v512, v472))break;
                }
                v472 += 12;
                if (v472 == v204)
                  goto LABEL_991;
              }
              v204 = v472;
            }
LABEL_991:
            ;
          }
          while (v204 != v470);
        }
        WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::~HashTable((uint64_t *)&v517, v437);
        goto LABEL_206;
      }
LABEL_976:
      v470 = &v446[12 * *((unsigned int *)v446 - 1)];
      goto LABEL_977;
    }
    v205 = v436;
    v440 = (v439 - 1) | ((v439 - 1) >> 1) | ((((_DWORD)v439 - 1) | ((v439 - 1) >> 1)) >> 2);
    v441 = v440 | (v440 >> 4) | ((v440 | (v440 >> 4)) >> 8);
    v442 = (v441 | HIWORD(v441)) + 1;
    if (v442 > 0x400)
    {
      if (v442 > 2 * v439)
        goto LABEL_894;
    }
    else if (3 * v442 > 4 * v439)
    {
LABEL_891:
      v443 = (double)v439;
      v444 = (double)v442;
      v445 = 0.604166667;
      goto LABEL_895;
    }
    LODWORD(v442) = 2 * v442;
    if (v442 <= 0x400)
      goto LABEL_891;
LABEL_894:
    v443 = (double)v439;
    v444 = (double)v442;
    v445 = 0.416666667;
LABEL_895:
    if (v444 * v445 <= v443)
      LODWORD(v442) = 2 * v442;
    if (v442 <= 8)
      v447 = 8;
    else
      v447 = v442;
    v448 = WTF::fastZeroedMalloc((WTF *)(24 * v447 + 16));
    v517 = (WebCore::StyleOriginatedAnimation *)(v448 + 16);
    *(_DWORD *)(v448 + 8) = v447 - 1;
    *(_DWORD *)(v448 + 12) = v447;
    *(_DWORD *)(v448 + 4) = v439;
    *((_DWORD *)v517 - 4) = 0;
    v449 = *(WTF::String **)(v205 + 72);
    if (v449)
    {
      v450 = *((unsigned int *)v449 - 1);
      v485 = (WTF::String *)((char *)v449 + 24 * v450);
      if (*((_DWORD *)v449 - 3))
      {
        if ((_DWORD)v450)
        {
          v451 = 24 * v450;
          v204 = (unsigned __int16 *)&v505;
          while (1)
          {
            v452 = *((unsigned int *)v449 + 2);
            if ((_DWORD)v452 || *(_WORD *)v449 != 0)
            {
              if ((_DWORD)v452 == -1)
                goto LABEL_993;
              v512[0] = (WTF *)&v505;
              if (!(*((unsigned int (**)(WTF **, WTF::String *))&xmmword_1E3450120 + v452))(v512, v449))
                break;
            }
            v449 = (WTF::String *)((char *)v449 + 24);
            v451 -= 24;
            if (!v451)
            {
              v449 = v485;
              break;
            }
          }
          v492 = v449;
          v449 = *(WTF::String **)(v205 + 72);
        }
        else
        {
          v492 = *(WTF::String **)(v205 + 72);
        }
        goto LABEL_921;
      }
      v492 = (WTF::String *)((char *)v449 + 24 * v450);
    }
    else
    {
      v492 = 0;
      LODWORD(v450) = 0;
    }
    v485 = (WTF::String *)((char *)v449 + 24 * v450);
LABEL_921:
    if (v449)
      v481 = (WTF::String *)((char *)v449 + 24 * *((unsigned int *)v449 - 1));
    else
      v481 = 0;
    while (v492 != v481)
    {
      v204 = (unsigned __int16 *)v517;
      if (v517)
        v454 = *((_DWORD *)v517 - 2);
      else
        v454 = 0;
      v455 = *((unsigned int *)v492 + 2);
      if ((_DWORD)v455 == -1)
        goto LABEL_993;
      v512[0] = (WTF *)&v505;
      v456 = (*((uint64_t (**)(WTF **, WTF::String *))&xmmword_1E3450140 + v455 + 1))(v512, v492);
      v457 = 0;
      do
      {
        v205 = v456 & v454;
        v437 = &v204[12 * v205];
        v456 = ++v457 + v205;
        if (*((_DWORD *)v437 + 2))
          v458 = 0;
        else
          v458 = *v437 == 0;
      }
      while (!v458);
      v459 = *((unsigned int *)v492 + 2);
      if ((_DWORD)v459 == -1)
      {
        *((_DWORD *)v437 + 2) = -1;
      }
      else
      {
        v512[0] = (WTF *)&v204[12 * v205];
        ((void (*)(WTF **))*(&off_1E3450178 + v459))(v512);
      }
      v460 = &v204[12 * v205];
      v461 = *((_QWORD *)v492 + 2);
      ++*(_DWORD *)(v461 + 24);
      v462 = (_DWORD *)*((_QWORD *)v460 + 2);
      *((_QWORD *)v460 + 2) = v461;
      if (v462)
      {
        if (v462[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v462 + 72))(v462);
        else
          --v462[6];
      }
      v463 = (unsigned int *)((char *)v492 + 24);
      v492 = v485;
      if (v463 != (unsigned int *)v485)
      {
        v492 = v485;
        while (1)
        {
          v464 = v463[2];
          if ((_DWORD)v464 || *(_WORD *)v463 != 0)
          {
            if ((_DWORD)v464 == -1)
              goto LABEL_993;
            v512[0] = (WTF *)&v505;
            v492 = v485;
            if (!(*((unsigned int (**)(WTF **, unsigned int *))&xmmword_1E3450120 + v464))(v512, v463))
              break;
          }
          v463 += 6;
          if (v463 == (unsigned int *)v492)
            goto LABEL_950;
        }
        v492 = (WTF::String *)v463;
      }
LABEL_950:
      ;
    }
    goto LABEL_956;
  }
  v426 = *(uint64_t **)(v100 + 8);
  v491 = 8 * v425;
  while (1)
  {
    v427 = *v426;
    v428 = *(unsigned __int8 *)(*v426 + 8);
    LOBYTE(v512[0]) = *(_BYTE *)(*v426 + 8);
    LOBYTE(v512[1]) = 0;
    LODWORD(v513) = -1;
    v429 = *(unsigned int *)(v427 + 24);
    if ((_DWORD)v429 != -1)
    {
      Ref = (unsigned __int16 *)((uint64_t (*)(WebCore::StyleOriginatedAnimation **, WTF **, uint64_t))*(&off_1E3450168 + v429))(&v517, &v512[1], v427 + 16);
      LODWORD(v513) = v429;
      v428 = LOBYTE(v512[0]);
    }
    if (v428 != 2)
      break;
    if ((_DWORD)v429)
      v430 = 0;
    else
      v430 = LOWORD(v512[1]) == 7;
    if (!v430)
      goto LABEL_858;
    if ((*(_DWORD *)(*v426 + 112) & 0x100) != 0)
      goto LABEL_877;
LABEL_861:
    Ref = (unsigned __int16 *)((uint64_t (*)(WebCore::StyleOriginatedAnimation **, WTF **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0 + v429))(&v517, &v512[1]);
LABEL_862:
    ++v426;
    v491 -= 8;
    if (!v491)
      goto LABEL_156;
  }
  if (v428 || (*(_DWORD *)(*v426 + 112) & 0x100) == 0)
  {
LABEL_858:
    if ((_DWORD)v429 == -1)
      goto LABEL_862;
    goto LABEL_861;
  }
  if ((_DWORD)v429 == -1)
    goto LABEL_169;
LABEL_877:
  Ref = (unsigned __int16 *)((uint64_t (*)(WebCore::StyleOriginatedAnimation **, WTF **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0 + v429))(&v517, &v512[1]);
LABEL_169:
  WTF::MonotonicTime::now((WTF::MonotonicTime *)Ref);
  v107 = v106;
  v510 = 0;
  v516 = 0;
  v514 = 0u;
  v515 = 0u;
  *(_OWORD *)v512 = 0u;
  v513 = 0u;
  v509 = 0;
  WebCore::compileTransitionPropertiesInStyle(v22, (uint64_t)v512, (uint64_t)&v509, &v510);
  WebCore::compileTransitionPropertiesInStyle((uint64_t)v26, (uint64_t)v512, (uint64_t)&v509, &v510);
  if (v510)
  {
    if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && (v183 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v183))
    {
      v270 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
      v271 = 8 * v183;
      if (*((_BYTE *)v7 + 24))
      {
        while (1)
        {
          v272 = *v270;
          if (*(_BYTE *)(*v270 + 96))
          {
            if (*(_DWORD *)(v272 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v272 + 88) == v7[2])
              break;
          }
          v184 = 0;
          ++v270;
          v271 -= 8;
          if (!v271)
            goto LABEL_284;
        }
      }
      else
      {
        while (1)
        {
          v272 = *v270;
          if (!*(_BYTE *)(*v270 + 96))
            break;
          v184 = 0;
          ++v270;
          v271 -= 8;
          if (!v271)
            goto LABEL_284;
        }
      }
      v184 = *(_QWORD *)(v272 + 8);
    }
    else
    {
      v184 = 0;
    }
LABEL_284:
    if (v184)
      v185 = v184;
    else
      v185 = v22;
    WebCore::RenderStyle::conservativelyCollectChangedAnimatableProperties(v185, (uint64_t)v26, (uint64_t)v512);
    v186 = *(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL;
    if (!v186)
      goto LABEL_289;
    v187 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
    if (!(_DWORD)v187)
      goto LABEL_289;
    v274 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
    v275 = *((_DWORD *)v7 + 2);
    v276 = 8 * v187;
    v277 = v7[2];
    v278 = v276;
    v279 = v274;
    if (*((_BYTE *)v7 + 24))
    {
      while (1)
      {
        v280 = *v279;
        if (*(_BYTE *)(*v279 + 96))
        {
          if (*(_DWORD *)(v280 + 80) == v275 && *(_QWORD *)(v280 + 88) == v277)
            break;
        }
        ++v279;
        v278 -= 8;
        if (!v278)
          goto LABEL_666;
      }
    }
    else
    {
      while (1)
      {
        v280 = *v279;
        if (!*(_BYTE *)(*v279 + 96))
          break;
        ++v279;
        v278 -= 8;
        if (!v278)
          goto LABEL_666;
      }
    }
    if (!*(_QWORD *)v280)
      goto LABEL_666;
    if (*((_BYTE *)v7 + 24))
    {
      while (1)
      {
        v325 = *v274;
        if (*(_BYTE *)(*v274 + 96))
        {
          if (*(_DWORD *)(v325 + 80) == v275 && *(_QWORD *)(v325 + 88) == v277)
            break;
        }
        v327 = 0;
        ++v274;
        v276 -= 8;
        if (!v276)
          goto LABEL_605;
      }
    }
    else
    {
      v327 = 0;
      while (1)
      {
        v325 = *v274;
        if (!*(_BYTE *)(*v274 + 96))
          break;
        ++v274;
        v276 -= 8;
        if (!v276)
          goto LABEL_605;
      }
    }
    v327 = *(WebCore::KeyframeEffectStack **)v325;
LABEL_605:
    WebCore::KeyframeEffectStack::sortedEffects((uint64_t *)&v517, v327);
    v205 = (uint64_t)v517;
    if (!HIDWORD(v518))
    {
LABEL_663:
      if (v205)
        WTF::fastFree((WTF *)v205, v16);
      v186 = *(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL;
LABEL_666:
      if (v186)
      {
        v348 = *(unsigned int *)(v186 + 164);
        if ((_DWORD)v348)
        {
          v349 = *(_QWORD *)(v186 + 152);
          v350 = 8 * v348;
          if (*((_BYTE *)v7 + 24))
          {
            while (1)
            {
              v204 = *(unsigned __int16 **)v349;
              if (*(_BYTE *)(*(_QWORD *)v349 + 96))
              {
                if (*((_DWORD *)v204 + 20) == *((_DWORD *)v7 + 2) && *((_QWORD *)v204 + 11) == v7[2])
                  break;
              }
              v349 += 8;
              v350 -= 8;
              if (!v350)
                goto LABEL_289;
            }
          }
          else
          {
            while (1)
            {
              v204 = *(unsigned __int16 **)v349;
              if (!*(_BYTE *)(*(_QWORD *)v349 + 96))
                break;
              v349 += 8;
              v350 -= 8;
              if (!v350)
                goto LABEL_289;
            }
          }
          v358 = *((_QWORD *)v204 + 9);
          v205 = v358;
          if (v358)
          {
            v359 = *(_DWORD *)(v358 - 12);
            v358 = *(unsigned int *)(v358 - 4);
            v490 = v205 + 24 * v358;
            if (v359)
            {
              if ((_DWORD)v358)
              {
                v360 = 24 * v358;
                while (1)
                {
                  v361 = *(unsigned int *)(v205 + 8);
                  if ((_DWORD)v361 || *(_WORD *)v205 != 0)
                  {
                    if ((_DWORD)v361 == -1)
                      goto LABEL_993;
                    v363 = v205;
                    v517 = (WebCore::StyleOriginatedAnimation *)&v505;
                    if (!(*((unsigned int (**)(WebCore::StyleOriginatedAnimation **, uint64_t))&xmmword_1E3450120
                           + v361))(&v517, v205))break;
                  }
                  v205 += 24;
                  v360 -= 24;
                  if (!v360)
                  {
                    v363 = v490;
                    break;
                  }
                }
                v364 = v363;
                v205 = *((_QWORD *)v204 + 9);
              }
              else
              {
                v364 = v205;
              }
              goto LABEL_722;
            }
            v364 = v205 + 24 * v358;
          }
          else
          {
            v364 = 0;
          }
          v490 = v205 + 24 * v358;
LABEL_722:
          if (v205)
            v204 = (unsigned __int16 *)(v205 + 24 * *(unsigned int *)(v205 - 4));
          else
            v204 = 0;
          if (v204 != (unsigned __int16 *)v364)
          {
            v205 = (uint64_t)&v505;
            do
            {
              v505 = (char **)v512;
              v367 = *(unsigned int *)(v364 + 8);
              if ((_DWORD)v367 == -1)
                goto LABEL_993;
              v517 = (WebCore::StyleOriginatedAnimation *)&v505;
              v368 = v364;
              (*((void (**)(WebCore::StyleOriginatedAnimation **, uint64_t))&xmmword_1E3450198 + v367))(&v517, v364);
              v364 = v490;
              if (v368 + 24 != v490)
              {
                v369 = v368 + 24;
                v364 = v490;
                while (1)
                {
                  v370 = *(unsigned int *)(v369 + 8);
                  if ((_DWORD)v370 || *(_WORD *)v369 != 0)
                  {
                    if ((_DWORD)v370 == -1)
                      goto LABEL_993;
                    v517 = (WebCore::StyleOriginatedAnimation *)&v505;
                    v372 = (*((uint64_t (**)(WebCore::StyleOriginatedAnimation **, uint64_t))&xmmword_1E3450120
                            + v370))(&v517, v369);
                    v364 = v490;
                    if (!v372)
                      break;
                  }
                  v369 += 24;
                  if (v369 == v364)
                    goto LABEL_740;
                }
                v364 = v369;
              }
LABEL_740:
              ;
            }
            while ((unsigned __int16 *)v364 != v204);
          }
        }
      }
LABEL_289:
      if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) == 0
        || (v188 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4), !(_DWORD)v188))
      {
LABEL_291:
        v189 = v509;
        if (v509)
        {
          v509 = 0;
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v189, (WTF::StringImpl *)v16);
        }
        v190 = *(_QWORD *)(*(_QWORD *)(v22 + 24) + 216);
        if (*(_BYTE *)(v190 + 32))
        {
          v191 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v191 = &xmmword_1E34501B8;
          *(_QWORD *)(v191 + 8) = &v509;
          v517 = (WebCore::StyleOriginatedAnimation *)v191;
          WebCore::StyleCustomPropertyData::forEachInternal<WTF::Function<WTF::IterationStatus ()(WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>> const&)> const&>(v190, &v517);
          v192 = (unsigned __int16 *)v517;
          v517 = 0;
          if (v192)
            (*(void (**)(unsigned __int16 *))(*(_QWORD *)v192 + 8))(v192);
        }
        v193 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 40) + 288);
        if (*(_BYTE *)(v193 + 32))
        {
          v194 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v194 = &xmmword_1E34501B8;
          *(_QWORD *)(v194 + 8) = &v509;
          v517 = (WebCore::StyleOriginatedAnimation *)v194;
          WebCore::StyleCustomPropertyData::forEachInternal<WTF::Function<WTF::IterationStatus ()(WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>> const&)> const&>(v193, &v517);
          v195 = (unsigned __int16 *)v517;
          v517 = 0;
          if (v195)
            (*(void (**)(unsigned __int16 *))(*(_QWORD *)v195 + 8))(v195);
        }
        v196 = *(_QWORD *)(*((_QWORD *)v26 + 3) + 216);
        if (*(_BYTE *)(v196 + 32))
        {
          v197 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v197 = &xmmword_1E34501B8;
          *(_QWORD *)(v197 + 8) = &v509;
          v517 = (WebCore::StyleOriginatedAnimation *)v197;
          WebCore::StyleCustomPropertyData::forEachInternal<WTF::Function<WTF::IterationStatus ()(WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>> const&)> const&>(v196, &v517);
          v198 = (unsigned __int16 *)v517;
          v517 = 0;
          if (v198)
            (*(void (**)(unsigned __int16 *))(*(_QWORD *)v198 + 8))(v198);
        }
        v199 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v26 + 1) + 40) + 288);
        if (*(_BYTE *)(v199 + 32))
        {
          v200 = WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v200 = &xmmword_1E34501B8;
          *(_QWORD *)(v200 + 8) = &v509;
          v517 = (WebCore::StyleOriginatedAnimation *)v200;
          WebCore::StyleCustomPropertyData::forEachInternal<WTF::Function<WTF::IterationStatus ()(WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>> const&)> const&>(v199, &v517);
          v201 = (unsigned __int16 *)v517;
          v517 = 0;
          if (v201)
            (*(void (**)(unsigned __int16 *))(*(_QWORD *)v201 + 8))(v201);
        }
        goto LABEL_170;
      }
      v282 = *(_QWORD *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
      v283 = 8 * v188;
      if (*((_BYTE *)v7 + 24))
      {
        while (1)
        {
          v204 = *(unsigned __int16 **)v282;
          if (*(_BYTE *)(*(_QWORD *)v282 + 96))
          {
            if (*((_DWORD *)v204 + 20) == *((_DWORD *)v7 + 2) && *((_QWORD *)v204 + 11) == v7[2])
              break;
          }
          v282 += 8;
          v283 -= 8;
          if (!v283)
            goto LABEL_291;
        }
      }
      else
      {
        while (1)
        {
          v204 = *(unsigned __int16 **)v282;
          if (!*(_BYTE *)(*(_QWORD *)v282 + 96))
            break;
          v282 += 8;
          v283 -= 8;
          if (!v283)
            goto LABEL_291;
        }
      }
      v352 = *((_QWORD *)v204 + 8);
      v205 = v352;
      if (v352)
      {
        v353 = *(_DWORD *)(v352 - 12);
        v352 = *(unsigned int *)(v352 - 4);
        v489 = v205 + 24 * v352;
        if (v353)
        {
          if ((_DWORD)v352)
          {
            v354 = 24 * v352;
            while (1)
            {
              v355 = *(unsigned int *)(v205 + 8);
              if ((_DWORD)v355 || *(_WORD *)v205 != 0)
              {
                if ((_DWORD)v355 == -1)
                  goto LABEL_993;
                v357 = (unsigned int *)v205;
                v517 = (WebCore::StyleOriginatedAnimation *)&v505;
                if (!(*((unsigned int (**)(WebCore::StyleOriginatedAnimation **, uint64_t))&xmmword_1E3450120
                       + v355))(&v517, v205))break;
              }
              v205 += 24;
              v354 -= 24;
              if (!v354)
              {
                v357 = (unsigned int *)v489;
                break;
              }
            }
            v16 = v357;
            v205 = *((_QWORD *)v204 + 8);
          }
          else
          {
            v16 = (unsigned int *)v205;
          }
LABEL_713:
          v517 = (WebCore::StyleOriginatedAnimation *)v16;
          v518 = (const WebCore::RenderStyle *)v489;
          if (v205)
            v365 = (unsigned __int16 *)(v205 + 24 * *(unsigned int *)(v205 - 4));
          else
            v365 = 0;
          if (v365 != (unsigned __int16 *)v16)
          {
            v204 = (unsigned __int16 *)v512;
            v205 = (uint64_t)&xmmword_1E3450198;
            while (1)
            {
              v522[0] = (uint64_t *)v512;
              v366 = v16[2];
              if ((_DWORD)v366 == -1)
                goto LABEL_993;
              v505 = (char **)v522;
              (*((void (**)(char ***))&xmmword_1E3450198 + v366))(&v505);
              WTF::HashTableConstIteratorAdapter<WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>::operator++((unsigned __int16 **)&v517);
              v16 = (unsigned int *)v517;
              if (v517 == (WebCore::StyleOriginatedAnimation *)v365)
                goto LABEL_291;
            }
          }
          goto LABEL_291;
        }
        v16 = (unsigned int *)(v205 + 24 * v352);
      }
      else
      {
        v16 = 0;
      }
      v489 = v205 + 24 * v352;
      goto LABEL_713;
    }
    v488 = (unsigned __int16 *)((char *)v517 + 8 * HIDWORD(v518));
    while (1)
    {
      v328 = *(_QWORD *)v205 ? *(WebCore::KeyframeEffect **)(*(_QWORD *)v205 + 8) : 0;
      v329 = WebCore::KeyframeEffect::animatedProperties(v328);
      v483 = (WTF::String *)v329;
      v204 = (unsigned __int16 *)*v329;
      if (!*v329)
        break;
      v330 = *((unsigned int *)v204 - 1);
      v331 = &v204[8 * v330];
      if (!*((_DWORD *)v204 - 3))
      {
        v335 = &v204[8 * v330];
LABEL_624:
        v331 = &v204[8 * v330];
        if (v204)
          goto LABEL_627;
        goto LABEL_628;
      }
      if ((_DWORD)v330)
      {
        v332 = 16 * v330;
        while (1)
        {
          v333 = *((unsigned int *)v204 + 2);
          if ((_DWORD)v333 || *v204 != 0)
          {
            if ((_DWORD)v333 == -1)
              goto LABEL_993;
            v505 = (char **)v522;
            if (!(*((unsigned int (**)(char ***, unsigned __int16 *))&xmmword_1E3450120 + v333))(&v505, v204))break;
          }
          v204 += 8;
          v332 -= 16;
          if (!v332)
          {
            v204 = v331;
            break;
          }
        }
        v335 = v204;
        v204 = *(unsigned __int16 **)v483;
        if (*(_QWORD *)v483)
LABEL_627:
          v204 += 8 * *((unsigned int *)v204 - 1);
      }
      else
      {
        v335 = (unsigned __int16 *)*v329;
        if (v204)
          goto LABEL_627;
      }
LABEL_628:
      if (v204 != v335)
      {
        while (1)
        {
          v522[0] = (uint64_t *)v512;
          v336 = *((unsigned int *)v335 + 2);
          if ((_DWORD)v336 == -1)
            break;
          v505 = (char **)v522;
          v337 = v335;
          (*((void (**)(char ***, unsigned __int16 *))&xmmword_1E3450198 + v336))(&v505, v335);
          v335 = v331;
          if (v337 + 8 != v331)
          {
            v338 = v337 + 8;
            v335 = v331;
            while (1)
            {
              v339 = *((unsigned int *)v338 + 2);
              if ((_DWORD)v339 || *v338 != 0)
              {
                if ((_DWORD)v339 == -1)
                  goto LABEL_993;
                v505 = (char **)v522;
                v341 = (*((uint64_t (**)(char ***, unsigned __int16 *))&xmmword_1E3450120 + v339))(&v505, v338);
                v335 = v331;
                if (!v341)
                  break;
              }
              v338 += 8;
              if (v338 == v335)
                goto LABEL_642;
            }
            v335 = v338;
          }
LABEL_642:
          if (v335 == v204)
            goto LABEL_643;
        }
LABEL_993:
        Ref = (unsigned __int16 *)std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_994;
      }
LABEL_643:
      v342 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v205 + 8) + 96);
      if (v342)
      {
        v343 = *(unsigned int **)(v342 + 8);
        if (v343)
        {
          if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)v343 + 120))(v343) & 1) != 0)
          {
            LOBYTE(v505) = 0;
            LODWORD(v506) = -1;
            v269 = (WTF *)v343[60];
            if ((_DWORD)v269 == -1)
            {
              v511 = v512;
              v475 = (_DWORD *)std::__throw_bad_variant_access[abi:sn180100]();
              goto LABEL_996;
            }
            ((void (*)(uint64_t **, char ***, unsigned int *))*(&off_1E3450168 + (_QWORD)v269))(v522, &v505, v343 + 58);
            LODWORD(v506) = (_DWORD)v269;
            v511 = v512;
            v522[0] = (uint64_t *)&v511;
            (*((void (**)(uint64_t **, char ***))&xmmword_1E3450198 + (_QWORD)v269))(v522, &v505);
            if ((_DWORD)v506 != -1)
              ((void (*)(uint64_t **, char ***))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                          + v506))(v522, &v505);
          }
        }
      }
      v205 += 8;
      if ((unsigned __int16 *)v205 == v488)
      {
        v205 = (uint64_t)v517;
        if (HIDWORD(v518))
        {
          v344 = (unsigned __int16 *)((char *)v517 + 8 * HIDWORD(v518));
          do
          {
            v345 = *(unsigned int **)v205;
            *(_QWORD *)v205 = 0;
            if (v345)
            {
              do
              {
                v346 = __ldaxr(v345);
                v347 = v346 - 1;
              }
              while (__stlxr(v347, v345));
              if (!v347)
              {
                atomic_store(1u, v345);
                WTF::fastFree((WTF *)v345, v16);
              }
            }
            v205 += 8;
          }
          while ((unsigned __int16 *)v205 != v344);
          v205 = (uint64_t)v517;
        }
        goto LABEL_663;
      }
    }
    v335 = 0;
    v330 = 0;
    goto LABEL_624;
  }
LABEL_170:
  for (j = 0; j != 9; ++j)
  {
    for (k = (unint64_t)v512[j]; k; k &= k - 1)
    {
      v110 = ((_WORD)j << 6) | __clz(__rbit64(k));
      if ((unsigned __int16)(v110 - 459) >= 0x5Fu)
      {
        LOWORD(v517) = v110;
        LODWORD(v518) = 0;
        WebCore::updateCSSTransitionsForStyleableAndProperty(v7, (WTF *)&v517, (WTF *)v22, v26, &v503, v107);
        if ((_DWORD)v518 != -1)
          ((void (*)(char ***, WebCore::StyleOriginatedAnimation **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                                                + v518))(&v505, &v517);
      }
    }
  }
  v111 = v509;
  if (!v509)
  {
    v114 = 0;
    v112 = 0;
LABEL_200:
    v113 = (unsigned __int16 **)&v509[v112];
    goto LABEL_201;
  }
  v112 = *((unsigned int *)v509 - 1);
  v113 = (unsigned __int16 **)&v509[v112];
  if (!*((_DWORD *)v509 - 3))
  {
    v114 = (unsigned __int16 **)&v509[v112];
    goto LABEL_200;
  }
  v114 = (unsigned __int16 **)v509;
  if ((_DWORD)v112)
  {
    v115 = 8 * v112;
    v114 = (unsigned __int16 **)v509;
    while ((unint64_t)*v114 + 1 <= 1)
    {
      ++v114;
      v115 -= 8;
      if (!v115)
      {
        v114 = v113;
        break;
      }
    }
  }
LABEL_201:
  if (v509)
    v122 = (unsigned __int16 **)&v509[*((unsigned int *)v509 - 1)];
  else
    v122 = 0;
  if (v122 == v114)
  {
    if (!v509)
      goto LABEL_206;
LABEL_772:
    v384 = *((unsigned int *)v111 - 1);
    if ((_DWORD)v384)
    {
      v385 = v111;
      do
      {
        v386 = *v385;
        if (*v385 != (WTF::StringImpl *)-1)
        {
          *v385 = 0;
          if (v386)
          {
            if (*(_DWORD *)v386 == 2)
              WTF::StringImpl::destroy(v386, (WTF::StringImpl *)v16);
            else
              *(_DWORD *)v386 -= 2;
          }
        }
        ++v385;
        --v384;
      }
      while (v384);
    }
    WTF::fastFree((WTF *)(v111 - 2), v16);
  }
  else
  {
    v381 = v122;
    do
    {
      v382 = *v114;
      if (*v114)
        *(_DWORD *)v382 += 2;
      v517 = (WebCore::StyleOriginatedAnimation *)v382;
      LODWORD(v518) = 1;
      WebCore::updateCSSTransitionsForStyleableAndProperty(v7, (WTF *)&v517, (WTF *)v22, v26, &v503, v107);
      if ((_DWORD)v518 != -1)
        ((void (*)(char ***, WebCore::StyleOriginatedAnimation **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                                              + v518))(&v505, &v517);
      v383 = v114 + 1;
      v114 = v113;
      if (v383 != v113)
      {
        v114 = v383;
        while ((unint64_t)*v114 + 1 <= 1)
        {
          if (++v114 == v113)
          {
            v114 = v113;
            break;
          }
        }
      }
    }
    while (v114 != v381);
    v111 = v509;
    if (v509)
      goto LABEL_772;
  }
LABEL_206:
  v24 = *(_QWORD *)(*(_QWORD *)(v22 + 8) + 32);
LABEL_16:
  v28 = *(_QWORD *)(v24 + 64);
  if (v28 && *(_DWORD *)(v28 + 20))
  {
    v29 = (const WebCore::RenderStyle *)*v9;
    goto LABEL_399;
  }
LABEL_17:
  v29 = (const WebCore::RenderStyle *)*v9;
  v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v9 + 8) + 32) + 64);
  if (v30 && *(_DWORD *)(v30 + 20))
  {
LABEL_399:
    v234 = (WebCore::KeyframeEffectStack **)WebCore::Element::ensureAnimationRareData(*v7, v496);
    v235 = *v234;
    if (!*v234)
    {
      v286 = v234;
      v288 = WTF::fastMalloc((WTF *)0x50);
      *(_OWORD *)v288 = 0u;
      *(_OWORD *)(v288 + 16) = 0u;
      *(_OWORD *)(v288 + 32) = 0u;
      *(_OWORD *)(v288 + 48) = 0u;
      *(_QWORD *)(v288 + 64) = 0;
      *(_BYTE *)(v288 + 72) = 1;
      v289 = *v286;
      *v286 = (WebCore::KeyframeEffectStack *)v288;
      if (v289)
      {
        WebCore::KeyframeEffectStack::~KeyframeEffectStack(v289, v287);
        WTF::fastFree(v290, v291);
        v235 = *v286;
      }
      else
      {
        v235 = (WebCore::KeyframeEffectStack *)v288;
      }
    }
    if (v22 && (*(_QWORD *)(v22 + 16) & 0x1FLL) == 0x1A || (*((_QWORD *)v29 + 2) & 0x1FLL) != 0x1A)
    {
      v487 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v29 + 1) + 32) + 64);
      v236 = *((_QWORD *)v235 + 8);
      v237 = *v7;
      if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) != 0
        && (v238 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v238))
      {
        v373 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
        v374 = 8 * v238;
        if (*((_BYTE *)v7 + 24))
        {
          while (1)
          {
            v375 = *v373;
            if (*(_BYTE *)(*v373 + 96))
            {
              if (*(_DWORD *)(v375 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v375 + 88) == v7[2])
                break;
            }
            v239 = 0;
            ++v373;
            v374 -= 8;
            if (!v374)
              goto LABEL_406;
          }
        }
        else
        {
          while (1)
          {
            v375 = *v373;
            if (!*(_BYTE *)(*v373 + 96))
              break;
            v239 = 0;
            ++v373;
            v374 -= 8;
            if (!v374)
              goto LABEL_406;
          }
        }
        v239 = *(_BYTE *)(v375 + 104) != 0;
      }
      else
      {
        v239 = 0;
      }
LABEL_406:
      if (!v239)
      {
        if (v236)
        {
          v240 = *(_DWORD *)(v236 + 20);
          if (v240)
          {
            if (v487)
            {
              v402 = *(_DWORD *)(v487 + 20);
              if (v402)
              {
                if (v240 == v402)
                {
                  v403 = 0;
                  do
                  {
                    if (v403 >= *(unsigned int *)(v487 + 20))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1965B4FD8);
                    }
                    if ((WebCore::Animation::animationsMatch(*(_QWORD *)(*(_QWORD *)(v236 + 8) + 8 * v403), *(_QWORD *)(*(_QWORD *)(v487 + 8) + 8 * v403), 1) & 1) == 0)goto LABEL_819;
                    ++v403;
                  }
                  while (v403 < *(unsigned int *)(v236 + 20));
                  v404 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v29 + 1) + 32) + 64);
                  v405 = (uint64_t *)WebCore::Element::ensureAnimationRareData(*v7, v496);
                  v406 = *v405;
                  if (!*v405)
                  {
                    v418 = (WebCore::KeyframeEffectStack **)v405;
                    v406 = WTF::fastMalloc((WTF *)0x50);
                    *(_OWORD *)v406 = 0u;
                    *(_OWORD *)(v406 + 16) = 0u;
                    *(_OWORD *)(v406 + 32) = 0u;
                    *(_OWORD *)(v406 + 48) = 0u;
                    *(_QWORD *)(v406 + 64) = 0;
                    *(_BYTE *)(v406 + 72) = 1;
                    v420 = *v418;
                    *v418 = (WebCore::KeyframeEffectStack *)v406;
                    if (v420)
                    {
                      WebCore::KeyframeEffectStack::~KeyframeEffectStack(v420, v419);
                      WTF::fastFree(v421, v422);
                      v406 = (uint64_t)*v418;
                    }
                  }
                  if (WebCore::KeyframeEffectStack::hasInvalidCSSAnimationNames((WebCore::KeyframeEffectStack *)v406))
                  {
                    v408 = *(unsigned int *)(v404 + 20);
                    if ((_DWORD)v408)
                    {
                      v409 = *(_QWORD *)(v404 + 8);
                      v410 = 8 * v408;
                      while (1)
                      {
                        v411 = *(_QWORD *)(*(_QWORD *)v409 + 32);
                        v484 = (WTF::StringImpl **)(*(_QWORD *)v409 + 32);
                        v412 = !v411 || v411 == WebCore::noneAtomData;
                        if (!v412
                          && *(_DWORD *)(v411 + 4)
                          && WebCore::KeyframeEffectStack::containsInvalidCSSAnimationName((WebCore::KeyframeEffectStack *)v406, v484, v407)&& (WebCore::keyframesRuleExistsForAnimation((WebCore *)*v7, (WebCore::Element *)*(unsigned __int8 *)(*(_QWORD *)v409 + 40), v484, v413) & 1) != 0)
                        {
                          break;
                        }
                        v409 += 8;
                        v410 -= 8;
                        if (!v410)
                          goto LABEL_18;
                      }
LABEL_819:
                      v237 = *v7;
                      goto LABEL_410;
                    }
                  }
                  goto LABEL_18;
                }
              }
            }
          }
        }
      }
LABEL_410:
      v512[0] = 0;
      v512[1] = 0;
      *(_QWORD *)&v513 = 0;
      v243 = WebCore::Element::ensureAnimationRareData(v237, v496);
      v244 = (WTF::StringImpl **)*((_QWORD *)v235 + 6);
      if (v244)
      {
        *((_QWORD *)v235 + 6) = 0;
        v377 = v243;
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v244, v241);
        v243 = v377;
      }
      v245 = (unsigned __int16 *)v487;
      if (v487)
      {
        v246 = *(unsigned int *)(v487 + 20);
        if ((_DWORD)v246)
        {
          v480 = (uint64_t *)(v243 + 40);
          v482 = *(WTF::String **)(v487 + 8);
          v247 = (const WebCore::Animation **)((char *)v482 + 8 * v246);
          do
          {
            v249 = (uint64_t)*--v247;
            v248 = v249;
            if ((*(_DWORD *)(v249 + 112) & 0x200000) == 0)
            {
              v251 = (const WTF::StringImpl **)(v248 + 32);
              v250 = *(_QWORD *)(v248 + 32);
              if (v250)
              {
                if (*(_DWORD *)(v250 + 4) && v250 != WebCore::noneAtomData)
                {
                  v479 = v243;
                  v253 = WebCore::keyframesRuleExistsForAnimation((WebCore *)*v7, (WebCore::Element *)*(unsigned __int8 *)(v248 + 40), (WTF::AtomStringImpl **)(v248 + 32), v242);
                  if ((v253 & 1) != 0)
                  {
                    for (m = *(_QWORD *)(v479 + 48); ; m = *(_QWORD *)(v478 + 16))
                    {
                      v478 = m;
                      if (!m)
                        break;
                      if (WTF::equal(*(WTF **)(*(_QWORD *)m + 232), *v251, v254))
                      {
                        WebCore::StyleOriginatedAnimation::setBackingAnimation(*(WebCore::StyleOriginatedAnimation **)v478, *v247);
                        WebCore::CSSAnimation::updateKeyframesIfNeeded(*(_QWORD *)v478, (const WebCore::RenderStyle *)v22, v29, (int)v495);
                        v259 = *(unsigned int **)v478;
                        v517 = *(WebCore::StyleOriginatedAnimation **)v478;
                        v260 = HIDWORD(v504);
                        if (HIDWORD(v504) == (_DWORD)v504)
                        {
                          WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSAnimation *>((uint64_t)&v503, (unsigned int **)&v517);
                        }
                        else
                        {
                          v264 = v503;
                          if (v259)
                          {
                            v259 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v259);
                            if (v259)
                            {
                              do
                                v266 = __ldaxr(v259);
                              while (__stlxr(v266 + 1, v259));
                            }
                          }
                          *((_QWORD *)v264 + v260) = v259;
                          ++HIDWORD(v504);
                        }
                        WTF::ListHashSet<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>::add((uint64_t)&v517, (uint64_t *)v512, (uint64_t *)v478);
                        v261 = WTF::ListHashSet<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>::find(v480, (uint64_t *)v478);
                        WTF::ListHashSet<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>::remove(v480, (uint64_t)v261, v262);
                        goto LABEL_438;
                      }
                    }
                    v245 = (unsigned __int16 *)v487;
                    v243 = v479;
                    if ((v493 & 1) != 0)
                      continue;
                    WebCore::CSSAnimation::create((const WebCore::Styleable *)v7, *v247, (const WebCore::RenderStyle *)v22, v29, (int)v495, (WebCore::StyleOriginatedAnimation **)&v505);
                    v256 = (unsigned int *)v505;
                    v517 = (WebCore::StyleOriginatedAnimation *)v505;
                    v257 = HIDWORD(v504);
                    if (HIDWORD(v504) == (_DWORD)v504)
                    {
                      WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSAnimation *>((uint64_t)&v503, (unsigned int **)&v517);
                    }
                    else
                    {
                      v263 = v503;
                      if (v505)
                      {
                        v256 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v505);
                        if (v256)
                        {
                          do
                            v265 = __ldaxr(v256);
                          while (__stlxr(v265 + 1, v256));
                        }
                      }
                      *((_QWORD *)v263 + v257) = v256;
                      ++HIDWORD(v504);
                    }
                    WTF::ListHashSet<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>::add((uint64_t)&v517, (uint64_t *)v512, (uint64_t *)&v505);
                    v258 = v505;
                    v505 = 0;
                    if (v258)
                    {
                      if (*((_DWORD *)v258 + 6) == 1)
                        (*((void (**)(char **))*v258 + 9))(v258);
                      else
                        --*((_DWORD *)v258 + 6);
                    }
                  }
                  else
                  {
                    WebCore::KeyframeEffectStack::addInvalidCSSAnimationName(v235, v251, v254);
                  }
LABEL_438:
                  v245 = (unsigned __int16 *)v487;
                  v243 = v479;
                }
              }
            }
          }
          while (v247 != (const WebCore::Animation **)v482);
        }
      }
      v267 = *(uint64_t **)(v243 + 48);
      if (v267)
      {
        v245 = (unsigned __int16 *)v487;
        do
        {
          if (!v512[0]
            || !WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::lookup<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>((uint64_t)v512[0], v267))
          {
            v292 = *v267;
            v293 = *(_QWORD *)(*v267 + 184);
            if (v293)
            {
              if (*(_QWORD *)(v293 + 8))
              {
                if (*(_BYTE *)(v292 + 208))
                {
                  v294 = *(WTF::StringImpl **)(v292 + 200);
                  if (v294)
                  {
                    v295 = *(_DWORD *)v294;
                    *(_DWORD *)v294 += 2;
                    if (v295)
                    {
                      *(_DWORD *)v294 = v295;
                    }
                    else
                    {
                      WTF::StringImpl::destroy(v294, v241);
                      v292 = *v267;
                    }
                  }
                }
                WebCore::StyleOriginatedAnimation::cancel((_QWORD *)v292, 0);
                WebCore::StyleOriginatedAnimation::disassociateFromOwningElement(v292);
              }
            }
          }
          v267 = (uint64_t *)v267[2];
        }
        while (v267);
      }
      WebCore::Element::setAnimationsCreatedByMarkup((_QWORD *)*v7, (uint64_t)v496, v512);
      if (v245)
        ++*(_DWORD *)v245;
      v517 = (WebCore::StyleOriginatedAnimation *)v245;
      WebCore::KeyframeEffectStack::setCSSAnimationList((uint64_t)v235, (WTF::StringImpl *)&v517);
      if (v517)
        WTF::RefCounted<WebCore::AnimationList>::deref((uint64_t)v517, v268);
      *(_BYTE *)(WebCore::Element::ensureAnimationRareData(*v7, v496) + 104) = 0;
      v269 = v512[1];
      while (v269)
      {
        v22 = (uint64_t)v269;
        v269 = (WTF *)*((_QWORD *)v269 + 2);
        v475 = *(_DWORD **)v22;
        *(_QWORD *)v22 = 0;
        if (v475)
        {
          if (v475[6] == 1)
LABEL_996:
            (*(void (**)(_DWORD *))(*(_QWORD *)v475 + 72))(v475);
          else
            --v475[6];
        }
        WTF::fastFree((WTF *)v22, v16);
      }
    }
    else
    {
      for (n = *(uint64_t **)(WebCore::Element::ensureAnimationRareData(*v7, v496) + 48); n; n = (uint64_t *)n[2])
      {
        v401 = *n;
        WebCore::StyleOriginatedAnimation::cancel((_QWORD *)*n, 0);
        WebCore::StyleOriginatedAnimation::disassociateFromOwningElement(v401);
      }
      v512[0] = 0;
      WebCore::KeyframeEffectStack::setCSSAnimationList((uint64_t)v235, (WTF::StringImpl *)v512);
      if (v512[0])
        WTF::RefCounted<WebCore::AnimationList>::deref((uint64_t)v512[0], v379);
      v512[0] = 0;
      v512[1] = 0;
      *(_QWORD *)&v513 = 0;
      WebCore::Element::setAnimationsCreatedByMarkup((_QWORD *)*v7, (uint64_t)v496, v512);
      v380 = v512[1];
      while (v380)
      {
        v476 = v380;
        v380 = (WTF *)*((_QWORD *)v380 + 2);
        v477 = *(_DWORD **)v476;
        *(_QWORD *)v476 = 0;
        if (v477)
        {
          if (v477[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v477 + 72))(v477);
          else
            --v477[6];
        }
        WTF::fastFree(v476, v16);
      }
    }
    if (v512[0])
      WTF::fastFree((WTF *)((char *)v512[0] - 16), v16);
  }
LABEL_18:
  if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_21;
  v31 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v31)
  {
    v512[0] = 0;
LABEL_21:
    v32 = v502;
    goto LABEL_22;
  }
  v57 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  v58 = *((_DWORD *)v7 + 2);
  v59 = 8 * v31;
  v60 = v7[2];
  v32 = v502;
  v61 = v59;
  v62 = v57;
  if (*((_BYTE *)v7 + 24))
  {
    while (1)
    {
      v63 = *v62;
      if (*(_BYTE *)(*v62 + 96))
      {
        if (*(_DWORD *)(v63 + 80) == v58 && *(_QWORD *)(v63 + 88) == v60)
          break;
      }
      ++v62;
      v61 -= 8;
      if (!v61)
        goto LABEL_219;
    }
  }
  else
  {
    while (1)
    {
      v63 = *v62;
      if (!*(_BYTE *)(*v62 + 96))
        break;
      ++v62;
      v61 -= 8;
      if (!v61)
        goto LABEL_219;
    }
  }
  if (!*(_QWORD *)v63 || !*(_DWORD *)(*(_QWORD *)v63 + 12))
  {
LABEL_219:
    v512[0] = 0;
    if (*((_BYTE *)v7 + 24))
    {
      while (1)
      {
        v128 = *v57;
        if (*(_BYTE *)(*v57 + 96))
        {
          if (*(_DWORD *)(v128 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v128 + 88) == v7[2])
            break;
        }
        ++v57;
        v59 -= 8;
        if (!v59)
          goto LABEL_22;
      }
    }
    else
    {
      while (1)
      {
        v128 = *v57;
        if (!*(_BYTE *)(*v57 + 96))
          break;
        ++v57;
        v59 -= 8;
        if (!v59)
          goto LABEL_22;
      }
    }
    WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle((uint64_t **)v128, v512);
    if (v512[0])
    {
      WebCore::RenderStyle::~RenderStyle(v512[0], v16);
      if (*(_DWORD *)v202)
      {
        *((_OWORD *)v202 + 2) = 0u;
        *((_OWORD *)v202 + 3) = 0u;
        *(_OWORD *)v202 = 0u;
        *((_OWORD *)v202 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v202, v16);
      }
    }
LABEL_22:
    if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v33 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
      if ((_DWORD)v33)
      {
        v69 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
        if (*((_BYTE *)v7 + 24))
        {
          v70 = 8 * v33;
          while (1)
          {
            v71 = *v69;
            if (*(_BYTE *)(*v69 + 96))
            {
              if (*(_DWORD *)(v71 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v71 + 88) == v7[2])
                break;
            }
            ++v69;
            v70 -= 8;
            if (!v70)
              goto LABEL_24;
          }
        }
        else
        {
          v80 = 8 * v33;
          while (1)
          {
            v71 = *v69;
            if (!*(_BYTE *)(*v69 + 96))
              break;
            ++v69;
            v80 -= 8;
            if (!v80)
              goto LABEL_24;
          }
        }
        *(_BYTE *)(v71 + 105) = 0;
      }
    }
LABEL_24:
    v34 = 0;
    v22 = *v9;
    *v9 = 0;
    goto LABEL_25;
  }
  v123 = v59;
  v124 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*((_BYTE *)v7 + 24))
  {
    while (1)
    {
      v125 = *v124;
      if (*(_BYTE *)(*v124 + 96))
      {
        if (*(_DWORD *)(v125 + 80) == v58 && *(_QWORD *)(v125 + 88) == v60)
          break;
      }
      v127 = 0;
      ++v124;
      v123 -= 8;
      if (!v123)
        goto LABEL_247;
    }
  }
  else
  {
    v127 = 0;
    while (1)
    {
      v125 = *v124;
      if (!*(_BYTE *)(*v124 + 96))
        break;
      ++v124;
      v123 -= 8;
      if (!v123)
        goto LABEL_247;
    }
  }
  if (*(_QWORD *)(v125 + 8))
  {
    if (*((_BYTE *)v7 + 24))
    {
      while (1)
      {
        v130 = *v57;
        if (*(_BYTE *)(*v57 + 96))
        {
          if (*(_DWORD *)(v130 + 80) == v58 && *(_QWORD *)(v130 + 88) == v60)
            break;
        }
        v132 = 0;
        ++v57;
        v59 -= 8;
        if (!v59)
          goto LABEL_246;
      }
    }
    else
    {
      v132 = 0;
      while (1)
      {
        v130 = *v57;
        if (!*(_BYTE *)(*v57 + 96))
          break;
        ++v57;
        v59 -= 8;
        if (!v59)
          goto LABEL_246;
      }
    }
    v132 = *(_QWORD **)(v130 + 8);
LABEL_246:
    v127 = (int8x8_t *)WTF::fastMalloc((WTF *)0x40);
    v127->i32[0] = 0;
    v133 = (_DWORD *)v132[1];
    ++*v133;
    v127[1] = (int8x8_t)v133;
    v127[2] = (int8x8_t)v132[2];
    v134 = (_DWORD *)v132[3];
    ++*v134;
    v127[3] = (int8x8_t)v134;
    v135 = (_DWORD *)v132[4];
    ++*v135;
    v127[4] = (int8x8_t)v135;
    v127[5] = (int8x8_t)v132[5];
    v127[6] = 0;
    v136 = (_DWORD *)v132[7];
    ++*v136;
    v127[7] = (int8x8_t)v136;
  }
  else
  {
    v127 = 0;
  }
LABEL_247:
  v137 = (_QWORD *)*v9;
  v138 = (WTF *)WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v138 = 0;
  v139 = (_DWORD *)v137[1];
  ++*v139;
  *((_QWORD *)v138 + 1) = v139;
  *((_QWORD *)v138 + 2) = v137[2];
  v140 = (_DWORD *)v137[3];
  ++*v140;
  *((_QWORD *)v138 + 3) = v140;
  v141 = (_DWORD *)v137[4];
  ++*v141;
  *((_QWORD *)v138 + 4) = v141;
  *((_QWORD *)v138 + 5) = v137[5];
  *((_QWORD *)v138 + 6) = 0;
  v142 = (_DWORD *)v137[7];
  ++*v142;
  *((_QWORD *)v138 + 7) = v142;
  v512[0] = v138;
  if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) != 0
    && (v143 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v143))
  {
    v215 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
    v216 = 8 * v143;
    if (*((_BYTE *)v7 + 24))
    {
      while (1)
      {
        v144 = *v215;
        if (*(_BYTE *)(*v215 + 96))
        {
          if (*(_DWORD *)(v144 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v144 + 88) == v7[2])
            break;
        }
        ++v215;
        v216 -= 8;
        if (!v216)
          goto LABEL_249;
      }
    }
    else
    {
      while (1)
      {
        v144 = *v215;
        if (!*(_BYTE *)(*v215 + 96))
          break;
        ++v215;
        v216 -= 8;
        if (!v216)
          goto LABEL_249;
      }
    }
  }
  else
  {
LABEL_249:
    v144 = WebCore::Element::ensureAnimationRareData(*v7, v496);
  }
  WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle((uint64_t **)v144, v512);
  if (v512[0])
  {
    WebCore::RenderStyle::~RenderStyle(v512[0], v145);
    if (*(_DWORD *)v146)
    {
      *((_OWORD *)v146 + 2) = 0u;
      *((_OWORD *)v146 + 3) = 0u;
      *(_OWORD *)v146 = 0u;
      *((_OWORD *)v146 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v146, v147);
    }
  }
  v505 = 0;
  v148 = (_QWORD *)*v9;
  v22 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v22 = 0;
  v149 = (_DWORD *)v148[1];
  ++*v149;
  *(_QWORD *)(v22 + 8) = v149;
  *(_QWORD *)(v22 + 16) = v148[2];
  v150 = (_DWORD *)v148[3];
  ++*v150;
  *(_QWORD *)(v22 + 24) = v150;
  v151 = (_DWORD *)v148[4];
  ++*v151;
  *(_QWORD *)(v22 + 32) = v151;
  *(_QWORD *)(v22 + 40) = v148[5];
  *(_QWORD *)(v22 + 48) = 0;
  v152 = (_DWORD *)v148[7];
  ++*v152;
  *(_QWORD *)(v22 + 56) = v152;
  v153 = (uint64_t *)WebCore::Element::ensureAnimationRareData(*v7, v496);
  v154 = *v153;
  v155 = v495;
  if (!*v153)
  {
    v154 = WTF::fastMalloc((WTF *)0x50);
    *(_OWORD *)v154 = 0u;
    *(_OWORD *)(v154 + 16) = 0u;
    *(_OWORD *)(v154 + 32) = 0u;
    *(_OWORD *)(v154 + 48) = 0u;
    *(_QWORD *)(v154 + 64) = 0;
    *(_BYTE *)(v154 + 72) = 1;
    v180 = (WebCore::KeyframeEffectStack *)*v153;
    *v153 = v154;
    if (v180)
    {
      WebCore::KeyframeEffectStack::~KeyframeEffectStack(v180, v179);
      WTF::fastFree(v181, v182);
      v154 = *v153;
    }
  }
  v34 = WebCore::KeyframeEffectStack::applyKeyframeEffects((WebCore::KeyframeEffectStack *)v154, (_QWORD *)v22, (uint64_t *)&v505, v127, (uint64_t)v495);
  WebCore::RenderStyle::operator==(*v9, v22, v156);
  if (v127 && v157 && !v34)
  {
    v159 = *v9;
    *v9 = 0;
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v22, v158);
    if (*(_DWORD *)v22)
    {
      v34 = 0;
      *(_OWORD *)(v22 + 32) = 0u;
      *(_OWORD *)(v22 + 48) = 0u;
      *(_OWORD *)v22 = 0u;
      *(_OWORD *)(v22 + 16) = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v22, v16);
      v34 = 0;
    }
    v22 = v159;
    goto LABEL_335;
  }
  if (v9[2])
  {
    v160 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
    LODWORD(v161) = 0;
    *(_DWORD *)v160 = 0;
    v162 = *(_DWORD **)(v22 + 8);
    ++*v162;
    *((_QWORD *)v160 + 1) = v162;
    *((_QWORD *)v160 + 2) = *(_QWORD *)(v22 + 16);
    v163 = *(_DWORD **)(v22 + 24);
    ++*v163;
    *((_QWORD *)v160 + 3) = v163;
    v164 = *(_DWORD **)(v22 + 32);
    ++*v164;
    *((_QWORD *)v160 + 4) = v164;
    *((_QWORD *)v160 + 5) = *(_QWORD *)(v22 + 40);
    *((_QWORD *)v160 + 6) = 0;
    v165 = *(_DWORD **)(v22 + 56);
    ++*v165;
    *((_QWORD *)v160 + 7) = v165;
    if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v161 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
      if ((_DWORD)v161)
      {
        v222 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
        v223 = 8 * v161;
        if (*((_BYTE *)v7 + 24))
        {
          v32 = v502;
          v155 = v495;
          while (1)
          {
            v224 = *v222;
            if (*(_BYTE *)(*v222 + 96))
            {
              if (*(_DWORD *)(v224 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v224 + 88) == v7[2])
                break;
            }
            LODWORD(v161) = 0;
            ++v222;
            v223 -= 8;
            if (!v223)
              goto LABEL_263;
          }
        }
        else
        {
          v32 = v502;
          v155 = v495;
          while (1)
          {
            v224 = *v222;
            if (!*(_BYTE *)(*v222 + 96))
              break;
            LODWORD(v161) = 0;
            ++v222;
            v223 -= 8;
            if (!v223)
              goto LABEL_263;
          }
        }
        v161 = *(_QWORD *)(v224 + 72);
        if (v161)
          LODWORD(v161) = *(_DWORD *)(v161 - 12) != 0;
        v32 = v502;
        v155 = v495;
      }
    }
LABEL_263:
    v166 = v9[2];
    v167 = *v498;
    v168 = *v155;
    v169 = v155[2];
    *((_DWORD *)v167 + 6) = *((_DWORD *)*v498 + 6) + 2;
    v517 = v167;
    v518 = v168;
    *(_DWORD *)(v32 + 24) += 2;
    v519 = v169;
    v520 = v32;
    v521 = 0;
    if ((_DWORD)v161)
      v170 = 16;
    else
      v170 = 8;
    WebCore::Style::Builder::Builder((unsigned __int8 *)v512, v22, (uint64_t *)&v517, v166, 4, v170, &v505);
    WebCore::Style::Builder::applyAllProperties((WebCore::Style::Builder *)v512);
    if (BYTE8(v514))
      WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::IdentityExtractor,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::HashTable(v522, (uint64_t *)&v513 + 1);
    else
      v522[0] = 0;
    WebCore::Style::Builder::~Builder((WebCore::Style::Builder *)v512, v171);
    v172 = v520;
    v520 = 0;
    v155 = v495;
    if (v172)
    {
      if (*(_DWORD *)(v172 + 24) == 2)
      {
        if ((*(_WORD *)(v172 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v172);
      }
      else
      {
        *(_DWORD *)(v172 + 24) -= 2;
      }
    }
    v173 = (unsigned __int16 *)v517;
    v517 = 0;
    if (v173)
    {
      if (*((_DWORD *)v173 + 6) == 2)
      {
        if ((v173[15] & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v173);
      }
      else
      {
        *((_DWORD *)v173 + 6) -= 2;
      }
    }
    if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && (v174 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v174))
    {
      v226 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
      v227 = 8 * v174;
      if (*((_BYTE *)v7 + 24))
      {
        while (1)
        {
          v228 = *v226;
          if (*(_BYTE *)(*v226 + 96))
          {
            if (*(_DWORD *)(v228 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v228 + 88) == v7[2])
              break;
          }
          v175 = 0;
          ++v226;
          v227 -= 8;
          if (!v227)
            goto LABEL_277;
        }
      }
      else
      {
        v175 = 0;
        while (1)
        {
          v228 = *v226;
          if (!*(_BYTE *)(*v226 + 96))
            break;
          ++v226;
          v227 -= 8;
          if (!v227)
            goto LABEL_277;
        }
      }
      v175 = *(_QWORD *)v228;
    }
    else
    {
      v175 = 0;
    }
LABEL_277:
    v493 = v127;
    WebCore::KeyframeEffectStack::cascadeDidOverrideProperties(v175, (unsigned __int16 **)v522, v497);
    v177 = v522[0];
    if (v522[0])
      v178 = *((_DWORD *)v522[0] - 3) != 0;
    else
      v178 = 0;
    if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) != 0
      && (v203 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4), (_DWORD)v203))
    {
      v230 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
      v231 = 8 * v203;
      if (*((_BYTE *)v7 + 24))
      {
        v32 = v502;
        v155 = v495;
        while (1)
        {
          v232 = *v230;
          if (*(_BYTE *)(*v230 + 96))
          {
            if (*(_DWORD *)(v232 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v232 + 88) == v7[2])
              break;
          }
          ++v230;
          v231 -= 8;
          if (!v231)
            goto LABEL_313;
        }
      }
      else
      {
        v32 = v502;
        v155 = v495;
        while (1)
        {
          v232 = *v230;
          if (!*(_BYTE *)(*v230 + 96))
            break;
          ++v230;
          v231 -= 8;
          if (!v231)
            goto LABEL_313;
        }
      }
    }
    else
    {
LABEL_313:
      if (!v178)
      {
        if (v522[0])
          goto LABEL_315;
        goto LABEL_324;
      }
      v232 = WebCore::Element::ensureAnimationRareData(*v7, v496);
      LOBYTE(v178) = 1;
      v177 = v522[0];
    }
    *(_BYTE *)(v232 + 105) = v178;
    v32 = v502;
    v155 = v495;
    if (v177)
    {
LABEL_315:
      v486 = v160;
      v204 = (unsigned __int16 *)*((unsigned int *)v177 - 1);
      if ((_DWORD)v204)
      {
        v205 = 0xFFFFFFFFLL;
        v9 = v177;
        do
        {
          v206 = *((unsigned int *)v9 + 2);
          if ((_DWORD)v206 == -1)
            goto LABEL_993;
          v512[0] = (WTF *)&v517;
          if (((*((uint64_t (**)(WTF **, uint64_t *))&xmmword_1E3450120 + v206))(v512, v9) & 1) == 0)
          {
            v207 = *((unsigned int *)v9 + 2);
            if ((_DWORD)v207 != -1)
              ((void (*)(WTF **, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                       + v207))(v512, v9);
            *((_DWORD *)v9 + 2) = -1;
          }
          v9 += 2;
          v204 = (unsigned __int16 *)((char *)v204 - 1);
        }
        while (v204);
      }
      WTF::fastFree((WTF *)(v177 - 2), v176);
      v32 = v502;
      v155 = v495;
      v160 = v486;
    }
LABEL_324:
    WebCore::RenderStyle::~RenderStyle(v160, v176);
    if (*(_DWORD *)v160)
    {
      *((_OWORD *)v160 + 2) = 0u;
      *((_OWORD *)v160 + 3) = 0u;
      *(_OWORD *)v160 = 0u;
      *((_OWORD *)v160 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v160, v208);
    }
    v127 = v493;
  }
  v209 = *v155;
  v210 = v155[1];
  if (*((_BYTE *)v7 + 24))
    v211 = 0;
  else
    v211 = *v7;
  v512[0] = (WTF *)v497;
  v512[1] = v209;
  if (v210)
    v209 = v210;
  *(_QWORD *)&v513 = v209;
  *((_QWORD *)&v513 + 1) = v211;
  WebCore::Style::Adjuster::adjust((WebCore::Style::Adjuster *)v512, (WebCore::RenderStyle *)v22, 0);
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8) + 68) & 2) != 0 && (v34 & 2) != 0)
    WebCore::RenderStyle::setUsedZIndex((WebCore::RenderStyle *)v22, 0);
LABEL_335:
  v204 = (unsigned __int16 *)v505;
  if (!v505)
    goto LABEL_345;
  v493 = v127;
  v212 = *((unsigned int *)v505 - 1);
  if ((_DWORD)v212)
  {
    v205 = 0xFFFFFFFFLL;
    v9 = (uint64_t *)v505;
    do
    {
      v213 = *((unsigned int *)v9 + 2);
      if ((_DWORD)v213 == -1)
        goto LABEL_993;
      v512[0] = (WTF *)&v517;
      if (((*((uint64_t (**)(WTF **, uint64_t *))&xmmword_1E3450120 + v213))(v512, v9) & 1) == 0)
      {
        v214 = *((unsigned int *)v9 + 2);
        if ((_DWORD)v214 != -1)
          ((void (*)(WTF **, uint64_t *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                   + v214))(v512, v9);
        *((_DWORD *)v9 + 2) = -1;
      }
      v9 += 2;
    }
    while (--v212);
  }
  WTF::fastFree((WTF *)(v204 - 8), v16);
  v32 = v502;
  v127 = v493;
LABEL_345:
  if (v127)
  {
    WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v127, v16);
    if (v127->i32[0])
    {
      *(_OWORD *)v127[4].i8 = 0u;
      *(_OWORD *)v127[6].i8 = 0u;
      *(_OWORD *)v127->i8 = 0u;
      *(_OWORD *)v127[2].i8 = 0u;
    }
    else
    {
      WTF::fastFree((WTF *)v127, v16);
    }
  }
LABEL_25:
  if (v17)
  {
    WebCore::RenderStyle::deduplicateCustomProperties((_QWORD *)v22, (WTF **)v17);
    v36 = WebCore::Style::determineChange((WebCore::Style *)v17, (const WebCore::RenderStyle *)v22, v35);
  }
  else
  {
    v36 = 5;
  }
  v37 = (*(unsigned __int16 *)(v32 + 30) >> 5) & 1;
  if (v499 == 5)
    v37 = 1;
  if (v37)
    v38 = 5;
  else
    v38 = v36;
  v39 = (_QWORD *)*v7;
  if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_35;
  v40 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v40)
    goto LABEL_35;
  v65 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*((_BYTE *)v7 + 24))
  {
    v66 = 8 * v40;
    while (1)
    {
      v67 = (uint64_t *)*v65;
      if (*(_BYTE *)(*v65 + 96))
      {
        if (*((_DWORD *)v67 + 20) == *((_DWORD *)v7 + 2) && v67[11] == v7[2])
          break;
      }
      ++v65;
      v66 -= 8;
      if (!v66)
        goto LABEL_35;
    }
  }
  else
  {
    v78 = 8 * v40;
    while (1)
    {
      v67 = (uint64_t *)*v65;
      if (!*(_BYTE *)(*v65 + 96))
        break;
      ++v65;
      v78 -= 8;
      if (!v78)
        goto LABEL_35;
    }
  }
  v79 = *v67;
  if (*v67)
  {
    if (((*(_DWORD *)(v22 + 16) ^ v494) & 0x1FLL) != 0)
    {
      v41 = 1;
    }
    else
    {
      v86 = (_WORD *)WTF::fastMalloc((WTF *)0x10);
      v87 = off_1E3391CE0;
      *(_QWORD *)v86 = off_1E3391CE0;
      v86[4] = 7;
      v88 = *(unsigned int *)(v79 + 12);
      if ((_DWORD)v88)
      {
        v89 = *(uint64_t **)v79;
        v500 = 8 * v88 - 8;
        do
        {
          v90 = *v89++;
          v91 = v86;
          v41 = (*(uint64_t (**)(_WORD *, _QWORD))(*(_QWORD *)v86 + 16))(v86, *(_QWORD *)(v90 + 8));
          v86 = v91;
          if ((v41 & 1) != 0)
            break;
          v92 = v500;
          v500 -= 8;
        }
        while (v92);
        v87 = (uint64_t (**)())*v91;
      }
      else
      {
        v41 = 0;
      }
      v87[1]();
      v39 = (_QWORD *)*v7;
    }
  }
  else
  {
LABEL_35:
    v41 = 0;
  }
  if ((*(_QWORD *)(v22 + 16) & 0x1FLL) != 0x1A
    || (v39[9] & 0xFFFFFFFFFFFFLL) != 0
    && (v85 = *(_QWORD *)((v39[9] & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
    && (*(_QWORD *)(v85 + 16) & 0x1FLL) == 0x12
    || (v39[8] & 0xFFFFFFFFFFFFLL) != 0
    || ((v41 | (*(unsigned int (**)(_QWORD *, uint64_t))(*v39 + 512))(v39, v22)) & 1) != 0)
  {
    if (HIDWORD(v504))
    {
      v42 = *((_QWORD *)*v498 + 366);
      if (v42)
        WebCore::DocumentTimeline::scheduleAnimationResolution(v42);
    }
  }
  else
  {
    v53 = (_QWORD *)*v7;
    v54 = *(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL;
    if (!v54)
      goto LABEL_67;
    v55 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
    if (!(_DWORD)v55)
      goto LABEL_67;
    v218 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
    v219 = 8 * v55;
    if (*((_BYTE *)v7 + 24))
    {
      while (1)
      {
        v220 = *v218;
        if (*(_BYTE *)(*v218 + 96))
        {
          if (*(_DWORD *)(v220 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v220 + 88) == v7[2])
            break;
        }
        ++v218;
        v219 -= 8;
        if (!v219)
          goto LABEL_553;
      }
    }
    else
    {
      while (1)
      {
        v220 = *v218;
        if (!*(_BYTE *)(*v218 + 96))
          break;
        ++v218;
        v219 -= 8;
        if (!v219)
          goto LABEL_553;
      }
    }
    v285 = *(_QWORD **)(v220 + 24);
    if (v285)
    {
      do
      {
        v308 = (_QWORD *)*v285;
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v285 + 104))(*v285))
        {
          if (HIDWORD(v504))
          {
            v303 = v503;
            v304 = HIDWORD(v504) - 1;
            do
            {
              v305 = v304;
              v306 = *(_QWORD **)v303;
              if (*(_QWORD *)v303)
                v306 = (_QWORD *)v306[1];
              v307 = v306 == v308;
              if (v306 == v308)
                break;
              v304 = v305 - 1;
              v303 = (WTF *)((char *)v303 + 8);
            }
            while (v305);
          }
          else
          {
            v307 = 0;
          }
          WebCore::StyleOriginatedAnimation::cancel(v308, v307);
          WebCore::StyleOriginatedAnimation::disassociateFromOwningElement((uint64_t)v308);
          v512[0] = 0;
          if ((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) != 0)
          {
            v309 = *(unsigned int *)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
            if ((_DWORD)v309)
            {
              v296 = *(uint64_t **)((*(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
              v297 = 8 * v309;
              if (*((_BYTE *)v7 + 24))
              {
                while (1)
                {
                  v298 = *v296;
                  if (*(_BYTE *)(*v296 + 96))
                  {
                    if (*(_DWORD *)(v298 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v298 + 88) == v7[2])
                      break;
                  }
                  ++v296;
                  v297 -= 8;
                  if (!v297)
                    goto LABEL_551;
                }
              }
              else
              {
                while (1)
                {
                  v298 = *v296;
                  if (!*(_BYTE *)(*v296 + 96))
                    break;
                  ++v296;
                  v297 -= 8;
                  if (!v297)
                    goto LABEL_551;
                }
              }
              WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle((uint64_t **)v298, v512);
              if (v512[0])
              {
                WebCore::RenderStyle::~RenderStyle(v512[0], v300);
                if (*(_DWORD *)v301)
                {
                  *((_OWORD *)v301 + 2) = 0u;
                  *((_OWORD *)v301 + 3) = 0u;
                  *(_OWORD *)v301 = 0u;
                  *((_OWORD *)v301 + 1) = 0u;
                }
                else
                {
                  WTF::fastFree(v301, v302);
                }
              }
            }
          }
        }
LABEL_551:
        v285 = (_QWORD *)v285[2];
      }
      while (v285);
      v53 = (_QWORD *)*v7;
      v54 = *(_QWORD *)(*v7 + 72) & 0xFFFFFFFFFFFFLL;
    }
LABEL_553:
    if (!v54 || (v310 = *(unsigned int *)(v54 + 164), !(_DWORD)v310))
    {
LABEL_573:
      v32 = v502;
      goto LABEL_67;
    }
    v311 = *(uint64_t **)(v54 + 152);
    v312 = 8 * v310;
    if (*((_BYTE *)v7 + 24))
    {
      v32 = v502;
      while (1)
      {
        v313 = *v311;
        if (*(_BYTE *)(*v311 + 96))
        {
          if (*(_DWORD *)(v313 + 80) == *((_DWORD *)v7 + 2) && *(_QWORD *)(v313 + 88) == v7[2])
            break;
        }
        ++v311;
        v312 -= 8;
        if (!v312)
          goto LABEL_67;
      }
    }
    else
    {
      v32 = v502;
      while (1)
      {
        v313 = *v311;
        if (!*(_BYTE *)(*v311 + 96))
          break;
        ++v311;
        v312 -= 8;
        if (!v312)
          goto LABEL_573;
      }
    }
    v315 = *(_QWORD *)v313;
    if (*(_QWORD *)v313)
    {
      v512[0] = 0;
      WebCore::KeyframeEffectStack::setCSSAnimationList(v315, (WTF::StringImpl *)v512);
      v317 = v512[0];
      if (v512[0])
      {
        if (*(_DWORD *)v512[0] == 1)
        {
          v318 = *((unsigned int *)v512[0] + 5);
          if ((_DWORD)v318)
          {
            v319 = (WebCore::Animation **)*((_QWORD *)v512[0] + 1);
            v320 = 8 * v318;
            do
            {
              v321 = *v319;
              *v319 = 0;
              if (v321)
              {
                if (*(_DWORD *)v321 == 1)
                {
                  WebCore::Animation::~Animation(v321, v316);
                  WTF::fastFree(v322, v323);
                }
                else
                {
                  --*(_DWORD *)v321;
                }
              }
              ++v319;
              v320 -= 8;
            }
            while (v320);
          }
          v324 = (WTF *)*((_QWORD *)v317 + 1);
          if (v324)
          {
            *((_QWORD *)v317 + 1) = 0;
            *((_DWORD *)v317 + 4) = 0;
            WTF::fastFree(v324, v316);
          }
          WTF::fastFree(v317, v316);
        }
        else
        {
          --*(_DWORD *)v512[0];
        }
      }
      v53 = (_QWORD *)*v7;
      goto LABEL_573;
    }
LABEL_67:
    v512[0] = 0;
    v512[1] = 0;
    *(_QWORD *)&v513 = 0;
    WebCore::Element::setAnimationsCreatedByMarkup(v53, (uint64_t)v496, v512);
    v56 = v512[1];
    if (v512[1])
    {
      v32 = v502;
      do
      {
        v423 = v56;
        v56 = (WTF *)*((_QWORD *)v56 + 2);
        v424 = *(_DWORD **)v423;
        *(_QWORD *)v423 = 0;
        if (v424)
        {
          if (v424[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v424 + 72))(v424);
          else
            --v424[6];
        }
        WTF::fastFree(v423, v16);
      }
      while (v56);
    }
    if (v512[0])
      WTF::fastFree((WTF *)((char *)v512[0] - 16), v16);
  }
  if (v41 && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 32) + 148) & 2) == 0)
  {
    v43 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(v22 + 8));
    v44 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v43 + 4);
    if (*(_DWORD *)v44 != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy(v44, (uint64_t *)v512);
      v45 = v512[0];
      v512[0] = 0;
      v46 = (WTF *)*((_QWORD *)v43 + 4);
      *((_QWORD *)v43 + 4) = v45;
      if (v46)
      {
        v47 = *(_DWORD *)v46 - 1;
        if (*(_DWORD *)v46 != 1)
          goto LABEL_45;
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v46, (WTF::StringImpl *)v16);
        WTF::fastFree(v81, v82);
        v46 = v512[0];
        v512[0] = 0;
        if (v46)
        {
          v47 = *(_DWORD *)v46 - 1;
          if (*(_DWORD *)v46 == 1)
          {
            WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v46, (WTF::StringImpl *)v16);
            WTF::fastFree(v83, v84);
          }
          else
          {
LABEL_45:
            *(_DWORD *)v46 = v47;
          }
        }
      }
      v44 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v43 + 4);
    }
    *((_DWORD *)v44 + 37) |= 2u;
  }
  if ((v34 & 1) != 0)
    LOBYTE(v48) = 1;
  else
    v48 = (*(unsigned __int16 *)(v32 + 30) >> 6) & 1;
  v49 = v38 == 5 || v17 && ((*(_DWORD *)(v22 + 16) ^ *((_DWORD *)v17 + 4)) & 0x380000) != 0;
  *(_QWORD *)v12 = v22;
  *(_BYTE *)(v12 + 8) = v38;
  *(_BYTE *)(v12 + 9) = v48;
  *(_BYTE *)(v12 + 10) = v49;
  v50 = v503;
  if (HIDWORD(v504))
  {
    v116 = (WTF *)((char *)v503 + 8 * HIDWORD(v504));
    do
    {
      v117 = *(_QWORD *)v50;
      *(_QWORD *)v50 = 0;
      if (v117)
      {
        do
        {
          v118 = __ldaxr((unsigned int *)v117);
          v119 = v118 - 1;
        }
        while (__stlxr(v119, (unsigned int *)v117));
        if (!v119)
        {
          atomic_store(1u, (unsigned int *)v117);
          v120 = *(unsigned int *)(v117 + 28);
          if ((_DWORD)v120)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v117 + 16), (WTF::StringImpl *)(*(_QWORD *)(v117 + 16) + 32 * v120));
          v121 = *(WTF **)(v117 + 16);
          if (v121)
          {
            *(_QWORD *)(v117 + 16) = 0;
            *(_DWORD *)(v117 + 24) = 0;
            WTF::fastFree(v121, v16);
          }
          WTF::fastFree((WTF *)v117, v16);
        }
      }
      v50 = (WTF *)((char *)v50 + 8);
    }
    while (v50 != v116);
    v50 = v503;
    if (v503)
      goto LABEL_196;
  }
  else
  {
    if (!v503)
      goto LABEL_58;
LABEL_196:
    v503 = 0;
    LODWORD(v504) = 0;
    WTF::fastFree(v50, v16);
  }
LABEL_58:
  if (v501)
  {
    WebCore::RenderStyle::~RenderStyle(v501, v16);
    if (*(_DWORD *)v51)
    {
      *((_OWORD *)v51 + 2) = 0u;
      *((_OWORD *)v51 + 3) = 0u;
      *(_OWORD *)v51 = 0u;
      *((_OWORD *)v51 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v51, v52);
    }
  }
}

BOOL WebCore::Style::styleChangeAffectsRelativeUnits(WebCore::Style *this, const WebCore::RenderStyle *a2, const WebCore::RenderStyle *a3)
{
  void *v6;
  float v7;
  void *v8;

  if (!a2)
    return 1;
  if (!WebCore::FontCascade::operator==(*((_QWORD *)a2 + 4) + 32, *((_QWORD *)this + 4) + 32))
    return 1;
  v7 = WebCore::RenderStyle::computedLineHeight(a2, v6);
  return v7 != WebCore::RenderStyle::computedLineHeight(this, v8);
}

uint64_t WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  WebCore::Element *v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl **v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v38;
  WebCore::Element *v39;
  uint64_t v40;
  WebCore::Style::Resolver *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::Style::Resolver *v57;
  WTF::StringImpl *v58;
  int v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WebCore::RenderStyle *v68;
  int v69;
  WTF *v70;
  WTF *v71;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  void *v75;
  WTF *v76;
  WTF *v77;
  WTF *v79;
  void *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  WTF::StringImpl **v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  WebCore::RenderStyle *v94;
  WTF *v95;
  void *v96;
  uint64_t v97;
  WTF::StringImpl **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  const WebCore::RenderStyle *v110;
  WebCore::Style *v111;
  WTF::StringImpl *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t *v117;
  WTF::StringImpl *v118;
  WebCore::Element *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WebCore::Style::Resolver *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WebCore::RenderStyle *v127;
  WebCore::RenderStyle *v128;
  WTF *v129;
  WTF::StringImpl **v130;
  WTF::StringImpl *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  WTF::StringImpl **v145;
  WTF::StringImpl *v146;
  int v147;
  uint64_t **v148;
  uint64_t v149;
  WebCore::Style::Resolver *v150;
  WTF::StringImpl *v151;
  WebCore::RenderStyle *v152;
  void *v153;
  WebCore::RenderStyle *v154;
  WTF *v155;
  uint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  WebCore::Element **v160;
  uint64_t v161;
  int v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF *v167;
  uint64_t v168;
  WTF *v169;
  uint64_t v170;
  WTF *v171;
  uint64_t v172;
  WTF *v173;
  WTF *v174;
  WTF *v175;
  WTF *v177;
  void *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _DWORD **v194;
  _DWORD *v195;
  WTF *v196;
  uint64_t v198;
  unint64_t v199;
  unsigned int *v200;
  _DWORD *v201;
  uint64_t *v202;
  uint64_t *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _DWORD **v208;
  _DWORD *v209;
  WTF *v210;
  uint64_t v212;
  unint64_t v213;
  unsigned int *v214;
  _DWORD *v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _DWORD **v222;
  _DWORD *v223;
  WTF *v224;
  uint64_t v226;
  unint64_t v227;
  unsigned int *v228;
  _DWORD *v229;
  uint64_t **v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  WebCore::RenderStyle *v239;
  WebCore::RenderStyle *v240;
  WebCore::RenderStyle *v241;
  _QWORD v242[3];
  char v243;
  WebCore::RenderStyle *v244;
  char v245;
  unsigned __int8 v246;
  WebCore::RenderStyle *v247;
  WTF *v248;
  WTF **v249;
  unsigned __int8 v250;
  __int128 v251;
  WTF::StringImpl *v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  WebCore::Element *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  char v262;
  __int128 v263;
  WTF::StringImpl *v264;
  unsigned __int8 v265;
  char v266;

  v3 = *(_QWORD *)a1;
  if (!*(_DWORD *)(*(_QWORD *)a1 + 76))
  {
    __break(0xC471u);
    JUMPOUT(0x1965B6754);
  }
  v6 = *(uint64_t **)(a1 + 16);
  v7 = *v6;
  v8 = *(_QWORD *)(*v6 + 16);
  if ((v8 & 0x1F) == 0x1A)
    goto LABEL_383;
  v9 = *(WebCore::Element **)(a1 + 8);
  v10 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 9)
  {
    if ((*((_BYTE *)v9 + 23) & 0x20) == 0)
      goto LABEL_383;
    v10 = 9;
  }
  else
  {
    switch(v10)
    {
      case 1:
        v22 = *(unsigned int *)(v3 + 28);
        if (!(_DWORD)v22)
        {
          __break(0xC471u);
          JUMPOUT(0x1965B6774);
        }
        v2 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v22 - 8) + 8);
        if (*((_DWORD *)v2 + 85) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WTF::StringImpl *)((char *)v2 + 32));
        if (!*((_BYTE *)v2 + 251))
          goto LABEL_383;
        v10 = *(_DWORD *)a2;
        break;
      case 5:
        if ((v8 & 0x1F) != 2)
          goto LABEL_383;
        v10 = 5;
        goto LABEL_9;
      case 2:
        v21 = *(unsigned int *)(v3 + 28);
        if (!(_DWORD)v21)
        {
          __break(0xC471u);
          JUMPOUT(0x1965B676CLL);
        }
        v2 = *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v21 - 8) + 8);
        if (*((_DWORD *)v2 + 85) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
          WebCore::Style::ScopeRuleSets::collectFeatures((WTF::StringImpl *)((char *)v2 + 32));
        if (!*((_BYTE *)v2 + 252))
          goto LABEL_383;
        v10 = *(_DWORD *)a2;
        break;
    }
    v7 = *v6;
    if (v10 == 10)
    {
      v8 = *(_QWORD *)(v7 + 16);
      if ((v8 & 0x1C00) != 0xC00 && (v8 & 0xE000) != 0x6000)
        goto LABEL_383;
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 16);
    }
  }
LABEL_9:
  if (((HIWORD(v8) >> (v10 - 1)) & 1) != 0)
  {
    if ((v10 - 1) <= 1)
    {
      v105 = v8 & 0x1F;
      v11 = v105 > 0x15;
      v106 = (1 << v105) & 0x20300E;
      if (v11 || v106 == 0)
        goto LABEL_383;
    }
    switch(v10)
    {
      case 13:
        v104 = 12;
        goto LABEL_308;
      case 14:
        v104 = 13;
        goto LABEL_308;
      case 15:
      case 16:
        v104 = 14;
        goto LABEL_308;
      default:
        if (v10 != 2)
          goto LABEL_123;
        v104 = 1;
LABEL_308:
        if ((v104 - 13) >= 2)
          v145 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
        else
          v145 = a2 + 1;
        v146 = *v145;
        if (*v145)
        {
          v147 = *(_DWORD *)v146;
          *(_DWORD *)v146 += 2;
          v148 = *(uint64_t ***)(v7 + 48);
          if (v148 && (v156 = *((unsigned int *)v148 + 3), (_DWORD)v156))
          {
            v157 = *v148;
            v158 = 8 * v156;
            do
            {
              v54 = *v157;
              if (((*(_QWORD *)(*v157 + 16) >> 43) & 0x1F) == v104
                && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v54 + 8) + 40) + 592) == v146)
              {
                break;
              }
              v54 = 0;
              ++v157;
              v158 -= 8;
            }
            while (v158);
          }
          else
          {
            v54 = 0;
          }
          if (v147)
            *(_DWORD *)v146 = v147;
          else
            WTF::StringImpl::destroy(v146, (WTF::StringImpl *)a2);
          v7 = *v6;
          if (!v54)
            goto LABEL_123;
        }
        else
        {
          v230 = *(uint64_t ***)(v7 + 48);
          if (!v230 || (v231 = *((unsigned int *)v230 + 3), !(_DWORD)v231))
          {
LABEL_123:
            v54 = v7;
            goto LABEL_124;
          }
          v232 = *v230;
          v233 = 8 * v231;
          while (1)
          {
            v54 = *v232;
            if (((*(_QWORD *)(*v232 + 16) >> 43) & 0x1F) == v104
              && !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 8) + 40) + 592))
            {
              break;
            }
            ++v232;
            v233 -= 8;
            if (!v233)
              goto LABEL_123;
          }
        }
LABEL_124:
        *(_QWORD *)&v251 = v54;
        if ((*(_DWORD *)(v7 + 16) & 0x1F) == 0x1A)
          goto LABEL_250;
        if ((*(_DWORD *)(v7 + 16) & 0x1F) == 0x12)
        {
          v113 = *(unsigned int *)(v3 + 76);
          v114 = *(_QWORD *)(v3 + 64) + 24 * v113;
          v115 = -24 * v113;
          while (v115)
          {
            v7 = *(_QWORD *)(v114 - 16);
            v116 = *(_BYTE *)(v7 + 16) & 0x1F;
            if (v116 == 26)
              break;
            v114 -= 24;
            v115 += 24;
            if (v116 != 18)
              goto LABEL_126;
          }
LABEL_250:
          v7 = 0;
        }
LABEL_126:
        *((_QWORD *)&v251 + 1) = v7;
        v252 = *(WTF::StringImpl **)(v3 + 8);
        v55 = *(unsigned int *)(v3 + 28);
        if (!(_DWORD)v55)
        {
          __break(0xC471u);
          JUMPOUT(0x1965B6818);
        }
        v56 = *(_QWORD *)(v3 + 16) + 8 * v55;
        v253 = *(_QWORD *)(v56 - 8) + 16;
        v254 = 0;
        v255 = 0;
        v57 = *(WebCore::Style::Resolver **)(*(_QWORD *)(v56 - 8) + 8);
        LODWORD(v256) = *(_DWORD *)a2;
        v2 = a2[1];
        if (v2)
        {
          *(_DWORD *)v2 += 2;
          v257 = v2;
          LOBYTE(v258) = 0;
          LOBYTE(v260) = 0;
          WebCore::Style::Resolver::styleForPseudoElement(v57, v9, (int *)&v256, (uint64_t)&v251, (uint64_t)&v247);
          if (*(_DWORD *)v2 == 2)
            WTF::StringImpl::destroy(v2, v58);
          else
            *(_DWORD *)v2 -= 2;
        }
        else
        {
          v257 = 0;
          LOBYTE(v258) = 0;
          LOBYTE(v260) = 0;
          WebCore::Style::Resolver::styleForPseudoElement(v57, v9, (int *)&v256, (uint64_t)&v251, (uint64_t)&v247);
        }
        v59 = v250;
        if (!v250)
          goto LABEL_192;
        v60 = *(_DWORD *)a2;
        v61 = a2[1];
        if (v61)
          *(_DWORD *)v61 += 4;
        v256 = v9;
        LODWORD(v257) = v60;
        v258 = v61;
        LOBYTE(v259) = 1;
        WebCore::Style::TreeResolver::createAnimatedElementUpdate((uint64_t)&v244, v3);
        if (!(_BYTE)v259)
          goto LABEL_137;
        v63 = v258;
        v258 = 0;
        if (!v63)
          goto LABEL_137;
        if (*(_DWORD *)v63 == 2)
        {
          WTF::StringImpl::destroy(v63, v62);
          if (!v61)
            goto LABEL_140;
        }
        else
        {
          *(_DWORD *)v63 -= 2;
LABEL_137:
          if (!v61)
          {
LABEL_140:
            if ((*(_DWORD *)a2 & 0xFFFFFFFE) != 6)
              goto LABEL_149;
            v64 = *(unsigned int *)(v3 + 28);
            if (!(_DWORD)v64)
            {
              __break(0xC471u);
              JUMPOUT(0x1965B684CLL);
            }
            v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v64 - 8) + 8);
            if (*(_DWORD *)(v65 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v65 + 32));
            if (!*(_BYTE *)(v65 + 251))
            {
LABEL_145:
              v66 = *(unsigned int *)(v3 + 28);
              if (!(_DWORD)v66)
              {
                __break(0xC471u);
                JUMPOUT(0x1965B6854);
              }
              v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v66 - 8) + 8);
              if (*(_DWORD *)(v67 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
                WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v67 + 32));
              if (!*(_BYTE *)(v67 + 252))
                goto LABEL_149;
              v130 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
              v131 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
              if (*MEMORY[0x1E0CBF2F8])
              {
                *(_DWORD *)v131 += 2;
                WebCore::Style::TreeResolver::makeResolutionContextForPseudoElement((uint64_t)&v256, v3, (uint64_t *)&v244, 2, v131);
                if (*(_DWORD *)v131 == 2)
                  WTF::StringImpl::destroy(v131, v62);
                else
                  *(_DWORD *)v131 -= 2;
              }
              else
              {
                WebCore::Style::TreeResolver::makeResolutionContextForPseudoElement((uint64_t)&v256, v3, (uint64_t *)&v244, 2, 0);
              }
              v132 = *(_QWORD *)(*v6 + 16);
              if ((v132 & 0x2000000000000) != 0
                && (v132 & 0x1Fu) <= 0x15
                && ((1 << (v132 & 0x1F)) & 0x20300E) != 0)
              {
                goto LABEL_320;
              }
              v133 = *(unsigned int *)(v3 + 76);
              if ((_DWORD)v133)
              {
                v134 = *(_QWORD *)(v3 + 64);
                if (*(_BYTE *)(v134 + 24 * v133 - 5))
                  goto LABEL_149;
                v135 = (*(_QWORD *)(*v6 + 16) & 0x1FLL) == 0;
                if ((v132 & 0x1F) != 0
                  && ((v132 & 0xE00FC00) != 0 || (v132 & 0x180000) == 0x100000 || (v132 & 0x1F) - 1 > 1))
                {
                  goto LABEL_149;
                }
                v136 = 24 * v133;
                while (1)
                {
                  v137 = *(_QWORD *)(*(_QWORD *)(v134 + v136 - 16) + 16);
                  v138 = v137 & 0x1F;
                  if (v138 != 18)
                  {
                    if (v135 && v138 == 0)
                    {
                      v135 = 1;
                    }
                    else
                    {
                      if (v138 > 0x15 || ((1 << v138) & 0x20300E) == 0)
                        goto LABEL_149;
                      if ((v137 & 0x2000000000000) != 0)
                      {
                        v9 = *(WebCore::Element **)(v134 + v136 - 24);
                        if (!v9)
                          goto LABEL_149;
LABEL_320:
                        v259 = 0;
                        v149 = *(unsigned int *)(v3 + 28);
                        if (!(_DWORD)v149)
                        {
                          __break(0xC471u);
                          JUMPOUT(0x1965B6914);
                        }
                        v150 = *(WebCore::Style::Resolver **)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v149 - 8) + 8);
                        LODWORD(v263) = 2;
                        v151 = *v130;
                        if (*v130)
                        {
                          *(_DWORD *)v151 += 2;
                          *((_QWORD *)&v263 + 1) = v151;
                          LOBYTE(v264) = 0;
                          v266 = 0;
                          WebCore::Style::Resolver::styleForPseudoElement(v150, v9, (int *)&v263, (uint64_t)&v256, (uint64_t)v242);
                          if (*(_DWORD *)v151 == 2)
                            WTF::StringImpl::destroy(v151, v62);
                          else
                            *(_DWORD *)v151 -= 2;
                        }
                        else
                        {
                          *((_QWORD *)&v263 + 1) = 0;
                          LOBYTE(v264) = 0;
                          v266 = 0;
                          WebCore::Style::Resolver::styleForPseudoElement(v150, v9, (int *)&v263, (uint64_t)&v256, (uint64_t)v242);
                        }
                        if (v243)
                        {
                          v152 = (WebCore::RenderStyle *)v242[0];
                          v242[0] = 0;
                          v240 = v152;
                          WebCore::RenderStyle::addCachedPseudoStyle((uint64_t)v244, (uint64_t *)&v240);
                          v154 = v240;
                          v240 = 0;
                          if (v154)
                          {
                            WebCore::RenderStyle::~RenderStyle(v154, v153);
                            if (*(_DWORD *)v155)
                            {
                              *((_OWORD *)v155 + 2) = 0u;
                              *((_OWORD *)v155 + 3) = 0u;
                              *(_OWORD *)v155 = 0u;
                              *((_OWORD *)v155 + 1) = 0u;
                            }
                            else
                            {
                              WTF::fastFree(v155, v153);
                            }
                          }
                          WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v242, v153);
                        }
LABEL_149:
                        v68 = v244;
                        LOBYTE(v2) = v245;
                        v69 = v246;
                        if (v250)
                        {
                          v70 = (WTF *)v249;
                          if (v249)
                          {
                            v71 = v249[7];
                            if (v249 + 9 != (WTF **)v71 && v71 != 0)
                            {
                              v249[7] = 0;
                              *((_DWORD *)v70 + 16) = 0;
                              WTF::fastFree(v71, v62);
                            }
                            WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v70 + 40, v62);
                            WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v70 + 24, v73);
                            WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v70 + 8, v74);
                            WTF::fastFree(v70, v75);
                          }
                          v76 = v248;
                          if (v248)
                          {
                            v77 = *(WTF **)v248;
                            if ((WTF *)((char *)v248 + 16) != *(WTF **)v248 && v77 != 0)
                            {
                              *(_QWORD *)v248 = 0;
                              *((_DWORD *)v76 + 2) = 0;
                              WTF::fastFree(v77, v62);
                            }
                            WTF::fastFree(v76, v62);
                          }
                          if (v247)
                          {
                            WebCore::RenderStyle::~RenderStyle(v247, v62);
                            if (*(_DWORD *)v79)
                            {
                              *((_OWORD *)v79 + 2) = 0u;
                              *((_OWORD *)v79 + 3) = 0u;
                              *(_OWORD *)v79 = 0u;
                              *((_OWORD *)v79 + 1) = 0u;
                            }
                            else
                            {
                              WTF::fastFree(v79, v80);
                            }
                          }
                        }
LABEL_193:
                        v90 = v2 != 0;
                        if (*(_DWORD *)a2 == 10)
                          v90 = v2;
                        v91 = *(_QWORD *)(a1 + 16);
                        if (*(unsigned __int8 *)(v91 + 8) > v90)
                          v90 = *(_BYTE *)(v91 + 8);
                        *(_BYTE *)(v91 + 8) = v90;
                        if (v69)
                          *(_BYTE *)(v91 + 9) = 1;
                        v92 = *(_QWORD *)v91;
                        v239 = v68;
                        WebCore::RenderStyle::addCachedPseudoStyle(v92, (uint64_t *)&v239);
                        v94 = v239;
                        v239 = 0;
                        if (v94)
                        {
                          WebCore::RenderStyle::~RenderStyle(v94, v93);
                          if (*(_DWORD *)v95)
                          {
                            *((_OWORD *)v95 + 2) = 0u;
                            *((_OWORD *)v95 + 3) = 0u;
                            *(_OWORD *)v95 = 0u;
                            *((_OWORD *)v95 + 1) = 0u;
                          }
                          else
                          {
                            WTF::fastFree(v95, v96);
                          }
                        }
                        return v2;
                      }
                      if ((v137 & 0xE00FC00) != 0)
                        goto LABEL_149;
                      if ((v137 & 0x180000) == 0x100000 || v138 - 1 > 1)
                        goto LABEL_149;
                      v135 = 0;
                    }
                  }
                  v136 -= 24;
                  if (!v136)
                    goto LABEL_149;
                }
              }
LABEL_527:
              __break(0xC471u);
              JUMPOUT(0x1965B690CLL);
            }
            v117 = *(uint64_t **)(*v6 + 48);
            v118 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
            if (*MEMORY[0x1E0CBF2F8])
              *(_DWORD *)v118 += 2;
            if (v117 && (v159 = *((unsigned int *)v117 + 3), (_DWORD)v159))
            {
              v160 = (WebCore::Element **)*v117;
              v161 = 8 * v159;
              do
              {
                v119 = *v160;
                if ((*((_QWORD *)*v160 + 2) & 0xF80000000000) == 0x80000000000
                  && *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v119 + 1) + 40) + 592) == v118)
                {
                  break;
                }
                v119 = 0;
                ++v160;
                v161 -= 8;
              }
              while (v161);
            }
            else
            {
              v119 = 0;
            }
            if (v118)
            {
              if (*(_DWORD *)v118 == 2)
              {
                WTF::StringImpl::destroy(v118, v62);
                if (!v119)
                  goto LABEL_145;
LABEL_259:
                v120 = (WTF::StringImpl *)*v6;
                if ((*(_DWORD *)(*v6 + 16) & 0x1F) != 0x1A)
                {
                  if ((*(_DWORD *)(*v6 + 16) & 0x1F) != 0x12)
                    goto LABEL_261;
                  v234 = *(unsigned int *)(v3 + 76);
                  v235 = *(_QWORD *)(v3 + 64) + 24 * v234;
                  v236 = -24 * v234;
                  while (v236)
                  {
                    v120 = *(WTF::StringImpl **)(v235 - 16);
                    v237 = *((_BYTE *)v120 + 16) & 0x1F;
                    if (v237 == 26)
                      break;
                    v235 -= 24;
                    v236 += 24;
                    if (v237 != 18)
                      goto LABEL_261;
                  }
                }
                v120 = 0;
LABEL_261:
                v121 = *(unsigned int *)(v3 + 28);
                if ((_DWORD)v121)
                {
                  v122 = *(WTF::StringImpl **)(v3 + 8);
                  v123 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v121 - 8);
                  v256 = v119;
                  v257 = v120;
                  v258 = v122;
                  v259 = v123 + 16;
                  v260 = 0;
                  v261 = 0;
                  v262 = 1;
                  v124 = *(WebCore::Style::Resolver **)(v123 + 8);
                  LODWORD(v263) = *(_DWORD *)a2;
                  v125 = a2[1];
                  if (v125)
                  {
                    *(_DWORD *)v125 += 2;
                    *((_QWORD *)&v263 + 1) = v125;
                    LOBYTE(v264) = 0;
                    v266 = 0;
                    WebCore::Style::Resolver::styleForPseudoElement(v124, v9, (int *)&v263, (uint64_t)&v256, (uint64_t)v242);
                    if (*(_DWORD *)v125 == 2)
                      WTF::StringImpl::destroy(v125, v126);
                    else
                      *(_DWORD *)v125 -= 2;
                  }
                  else
                  {
                    *((_QWORD *)&v263 + 1) = 0;
                    LOBYTE(v264) = 0;
                    v266 = 0;
                    WebCore::Style::Resolver::styleForPseudoElement(v124, v9, (int *)&v263, (uint64_t)&v256, (uint64_t)v242);
                  }
                  if (v243)
                  {
                    v127 = (WebCore::RenderStyle *)v242[0];
                    *(_QWORD *)(v242[0] + 16) = *(_QWORD *)(v242[0] + 16) & 0xFFFF07FFFFFFFFFFLL | 0x80000000000;
                    if (v243)
                    {
                      v241 = v127;
                      v242[0] = 0;
                      WebCore::RenderStyle::addCachedPseudoStyle((uint64_t)v244, (uint64_t *)&v241);
                      v128 = v241;
                      v241 = 0;
                      if (v128)
                      {
                        WebCore::RenderStyle::~RenderStyle(v128, v62);
                        if (*(_DWORD *)v129)
                        {
                          *((_OWORD *)v129 + 2) = 0u;
                          *((_OWORD *)v129 + 3) = 0u;
                          *(_OWORD *)v129 = 0u;
                          *((_OWORD *)v129 + 1) = 0u;
                        }
                        else
                        {
                          WTF::fastFree(v129, v62);
                        }
                      }
                      if (v243)
                        WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v242, v62);
                      goto LABEL_145;
                    }
                  }
                }
                else
                {
                  __break(0xC471u);
                }
                __break(1u);
                goto LABEL_527;
              }
              *(_DWORD *)v118 -= 2;
            }
            if (!v119)
              goto LABEL_145;
            goto LABEL_259;
          }
        }
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, v62);
        else
          *(_DWORD *)v61 -= 2;
        goto LABEL_140;
    }
  }
  if (v10 != 2)
  {
    if (v10 != 1)
      goto LABEL_190;
    if ((v8 & 0x1F) != 0)
    {
      if ((v8 & 0xE00FC00) == 0)
      {
        v11 = (v8 & 0x180000) == 0x100000 || (v8 & 0x1F) - 1 > 1;
        if (!v11)
        {
          v12 = *(unsigned int *)(v3 + 76);
          if (!(_DWORD)v12)
          {
            __break(0xC471u);
            JUMPOUT(0x1965B6810);
          }
          v13 = *(_QWORD *)(v3 + 64);
          if (!*(_BYTE *)(v13 + 24 * v12 - 5))
          {
            for (i = 24 * v12; ; i -= 24)
            {
              v15 = *(_QWORD *)(*(_QWORD *)(v13 + i - 16) + 16);
              v16 = v15 & 0x1F;
              if (v16 > 0x15)
                break;
              if (((1 << v16) & 0x20300E) != 0)
              {
                if ((v15 & 0x1000000000000) != 0)
                {
                  v2 = *(WTF::StringImpl **)(v13 + i - 24);
                  if (!v2)
                    break;
                  v84 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
                  v85 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
                  if (*MEMORY[0x1E0CBF2F8])
                  {
                    *(_DWORD *)v85 += 2;
                    WebCore::Style::TreeResolver::makeResolutionContextForPseudoElement((uint64_t)&v256, v3, v6, 1, v85);
                    if (*(_DWORD *)v85 == 2)
                      WTF::StringImpl::destroy(v85, v86);
                    else
                      *(_DWORD *)v85 -= 2;
                  }
                  else
                  {
                    WebCore::Style::TreeResolver::makeResolutionContextForPseudoElement((uint64_t)&v256, v3, v6, 1, 0);
                  }
                  v259 = 0;
                  v87 = *(unsigned int *)(v3 + 28);
                  if (!(_DWORD)v87)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1965B68B0);
                  }
                  v41 = *(WebCore::Style::Resolver **)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v87 - 8) + 8);
                  LODWORD(v251) = 1;
                  v88 = *v84;
                  if (!*v84)
                  {
                    *((_QWORD *)&v251 + 1) = 0;
                    LOBYTE(v252) = 0;
                    LOBYTE(v254) = 0;
                    v39 = v2;
                    goto LABEL_218;
                  }
                  *(_DWORD *)v88 += 2;
                  *((_QWORD *)&v251 + 1) = v88;
                  LOBYTE(v252) = 0;
                  LOBYTE(v254) = 0;
                  WebCore::Style::Resolver::styleForPseudoElement(v41, v2, (int *)&v251, (uint64_t)&v256, (uint64_t)&v263);
                  if (*(_DWORD *)v88 != 2)
                  {
                    *(_DWORD *)v88 -= 2;
                    goto LABEL_191;
                  }
                  v89 = v88;
                  goto LABEL_186;
                }
                if ((v15 & 0xE00FC00) != 0)
                  break;
                v17 = v16 - 1;
                v18 = (v15 & 0x180000) == 0x100000 || v17 > 1;
                if (v18 || i == 24)
                  break;
              }
              else if (v16 != 18 || i == 24)
              {
                break;
              }
            }
          }
        }
      }
LABEL_190:
      LOBYTE(v263) = 0;
      v265 = 0;
      goto LABEL_191;
    }
    v43 = *(unsigned int *)(v3 + 76);
    v44 = *(_QWORD *)(v3 + 64) + 24 * v43;
    v45 = -24 * v43;
    do
    {
      if (!v45)
        goto LABEL_190;
      v46 = *(_QWORD *)(v44 - 16);
      v47 = *(_BYTE *)(v46 + 16) & 0x1F;
      if (v47 == 26)
        goto LABEL_190;
      v44 -= 24;
      v45 += 24;
    }
    while (v47 == 18);
    v48 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *(_DWORD *)v48 += 2;
    v49 = *(_QWORD *)(v46 + 48);
    if (v49 && (v97 = *(unsigned int *)(v49 + 12), (_DWORD)v97))
    {
      v98 = *(WTF::StringImpl ***)v49;
      v99 = 8 * v97;
      do
      {
        v2 = *v98;
        if ((*((_QWORD *)*v98 + 2) & 0xF80000000000) == 0x80000000000
          && *(WTF::StringImpl **)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 40) + 592) == v48)
        {
          break;
        }
        v2 = 0;
        ++v98;
        v99 -= 8;
      }
      while (v99);
    }
    else
    {
      v2 = 0;
    }
    if (v48)
    {
      if (*(_DWORD *)v48 == 2)
      {
        WTF::StringImpl::destroy(v48, (WTF::StringImpl *)a2);
        if (!v2)
          goto LABEL_190;
LABEL_116:
        v50 = (WTF::StringImpl *)*v6;
        if ((*(_DWORD *)(*v6 + 16) & 0x1F) != 0x1A)
        {
          if ((*(_DWORD *)(*v6 + 16) & 0x1F) != 0x12)
          {
LABEL_118:
            v51 = *(unsigned int *)(v3 + 28);
            if (!(_DWORD)v51)
            {
              __break(0xC471u);
              JUMPOUT(0x1965B6844);
            }
            v52 = *(WTF::StringImpl **)(v3 + 8);
            v53 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v51 - 8);
            v256 = v2;
            v257 = v50;
            v258 = v52;
            v259 = v53 + 16;
            v260 = 0;
            v261 = 0;
            LOBYTE(v2) = 1;
            v262 = 1;
            WebCore::Style::Resolver::styleForElement(*(_QWORD *)(v53 + 8), (uint64_t)v9, (uint64_t)&v256, 0, (WebCore::Node **)&v251);
            v263 = v251;
            *(_QWORD *)(v251 + 16) = *(_QWORD *)(v251 + 16) & 0xFFFF07FFFFFFFFFFLL | 0x80000000000;
            v264 = v252;
            v265 = 1;
            goto LABEL_191;
          }
          v141 = *(unsigned int *)(v3 + 76);
          v142 = *(_QWORD *)(v3 + 64) + 24 * v141;
          v143 = -24 * v141;
          while (v143)
          {
            v50 = *(WTF::StringImpl **)(v142 - 16);
            v144 = *((_BYTE *)v50 + 16) & 0x1F;
            if (v144 == 26)
              break;
            v142 -= 24;
            v143 += 24;
            if (v144 != 18)
              goto LABEL_118;
          }
        }
        v50 = 0;
        goto LABEL_118;
      }
      *(_DWORD *)v48 -= 2;
    }
    if (!v2)
      goto LABEL_190;
    goto LABEL_116;
  }
  v23 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
  v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
  {
    *(_DWORD *)v2 += 2;
    v24 = *v23;
    if (*v23)
      *(_DWORD *)v24 += 2;
    v25 = *(_QWORD *)(v7 + 48);
    if (v25 && (v81 = *(unsigned int *)(v25 + 12), (_DWORD)v81))
    {
      v82 = *(uint64_t **)v25;
      v83 = 8 * v81;
      do
      {
        v26 = *v82;
        if ((*(_QWORD *)(*v82 + 16) & 0xF80000000000) == 0x80000000000
          && *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(v26 + 8) + 40) + 592) == v24)
        {
          break;
        }
        v26 = 0;
        ++v82;
        v83 -= 8;
      }
      while (v83);
    }
    else
    {
      v26 = 0;
    }
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    v27 = (WTF::StringImpl *)*v6;
    if (v26)
      v28 = v26;
    else
      v28 = *v6;
    v256 = (WebCore::Element *)v28;
    if ((*((_DWORD *)v27 + 4) & 0x1F) != 0x1A)
    {
      if ((*((_DWORD *)v27 + 4) & 0x1F) != 0x12)
      {
LABEL_69:
        v257 = v27;
        v258 = *(WTF::StringImpl **)(v3 + 8);
        if (!*(_DWORD *)(v3 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x1965B67CCLL);
        }
        v260 = 0;
        v261 = 0;
        if (*(_DWORD *)v2 == 2)
          WTF::StringImpl::destroy(v2, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v2 -= 2;
        goto LABEL_72;
      }
      v100 = *(unsigned int *)(v3 + 76);
      v101 = *(_QWORD *)(v3 + 64) + 24 * v100;
      v102 = -24 * v100;
      while (v102)
      {
        v27 = *(WTF::StringImpl **)(v101 - 16);
        v103 = *((_BYTE *)v27 + 16) & 0x1F;
        if (v103 == 26)
          break;
        v101 -= 24;
        v102 += 24;
        if (v103 != 18)
          goto LABEL_69;
      }
    }
    v27 = 0;
    goto LABEL_69;
  }
  WebCore::Style::TreeResolver::makeResolutionContextForPseudoElement((uint64_t)&v256, v3, v6, 2, 0);
LABEL_72:
  v29 = *(_QWORD *)(*v6 + 16);
  if ((v29 & 0x2000000000000) != 0)
  {
    v38 = (v29 & 0x1Fu) > 0x15 || ((1 << (v29 & 0x1F)) & 0x20300E) == 0;
    v39 = v9;
    if (!v38)
      goto LABEL_100;
  }
  v30 = *(unsigned int *)(v3 + 76);
  if (!(_DWORD)v30)
  {
    __break(0xC471u);
    JUMPOUT(0x1965B67E4);
  }
  v31 = *(_QWORD *)(v3 + 64);
  if (*(_BYTE *)(v31 + 24 * v30 - 5))
    goto LABEL_190;
  v32 = (*(_QWORD *)(*v6 + 16) & 0x1FLL) == 0;
  if ((v29 & 0x1F) != 0
    && ((v29 & 0xE00FC00) != 0 || (v29 & 0x180000) == 0x100000 || (v29 & 0x1F) - 1 > 1))
  {
    goto LABEL_190;
  }
  v33 = 24 * v30;
  while (1)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(v31 + v33 - 16) + 16);
    v35 = v34 & 0x1F;
    if (v35 == 18)
      goto LABEL_94;
    if (v32 && v35 == 0)
    {
      v32 = 1;
      goto LABEL_94;
    }
    if (v35 > 0x15 || ((1 << v35) & 0x20300E) == 0)
      goto LABEL_190;
    if ((v34 & 0x2000000000000) != 0)
      break;
    if ((v34 & 0xE00FC00) != 0)
      goto LABEL_190;
    if ((v34 & 0x180000) == 0x100000 || v35 - 1 > 1)
      goto LABEL_190;
    v32 = 0;
LABEL_94:
    v33 -= 24;
    if (!v33)
      goto LABEL_190;
  }
  v39 = *(WebCore::Element **)(v31 + v33 - 24);
  if (!v39)
    goto LABEL_190;
LABEL_100:
  v259 = 0;
  v40 = *(unsigned int *)(v3 + 28);
  if (!(_DWORD)v40)
  {
    __break(0xC471u);
    JUMPOUT(0x1965B67ECLL);
  }
  v41 = *(WebCore::Style::Resolver **)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v40 - 8) + 8);
  LODWORD(v251) = 2;
  v2 = *v23;
  if (*v23)
  {
    *(_DWORD *)v2 += 2;
    *((_QWORD *)&v251 + 1) = v2;
    LOBYTE(v252) = 0;
    LOBYTE(v254) = 0;
    WebCore::Style::Resolver::styleForPseudoElement(v41, v39, (int *)&v251, (uint64_t)&v256, (uint64_t)&v263);
    if (*(_DWORD *)v2 == 2)
    {
      v89 = v2;
LABEL_186:
      WTF::StringImpl::destroy(v89, v42);
    }
    else
    {
      *(_DWORD *)v2 -= 2;
    }
  }
  else
  {
    *((_QWORD *)&v251 + 1) = 0;
    LOBYTE(v252) = 0;
    LOBYTE(v254) = 0;
LABEL_218:
    WebCore::Style::Resolver::styleForPseudoElement(v41, v39, (int *)&v251, (uint64_t)&v256, (uint64_t)&v263);
  }
LABEL_191:
  v59 = v265;
  if (v265)
  {
    LODWORD(v256) = *(_DWORD *)a2;
    v108 = a2[1];
    if (v108)
      *(_DWORD *)v108 += 2;
    v257 = v108;
    LOBYTE(v258) = 1;
    v111 = (WebCore::Style *)WebCore::Element::renderOrDisplayContentsStyle((uint64_t)v9, (int *)&v256);
    if ((_BYTE)v258)
    {
      v112 = v257;
      v257 = 0;
      if (v112)
      {
        if (*(_DWORD *)v112 == 2)
        {
          WTF::StringImpl::destroy(v112, v109);
          if (!v111)
          {
LABEL_348:
            WebCore::Style::TreeResolver::makeResolutionContextForPseudoElement((uint64_t)&v256, v3, v6, *(_DWORD *)a2, a2[1]);
            v162 = *(_DWORD *)a2;
            v163 = a2[1];
            if (v163)
              *(_DWORD *)v163 += 4;
            *(_QWORD *)&v251 = v9;
            DWORD2(v251) = v162;
            v252 = v163;
            LOBYTE(v253) = 1;
            WebCore::Style::TreeResolver::createAnimatedElementUpdate((uint64_t)&v247, v3);
            v68 = v247;
            LOBYTE(v2) = (_BYTE)v248;
            v238 = BYTE1(v248);
            if ((_BYTE)v253)
            {
              v165 = v252;
              v252 = 0;
              if (v165)
              {
                if (*(_DWORD *)v165 == 2)
                {
                  WTF::StringImpl::destroy(v165, v164);
                  if (v163)
                  {
LABEL_355:
                    if (*(_DWORD *)v163 == 2)
                      WTF::StringImpl::destroy(v163, v164);
                    else
                      *(_DWORD *)v163 -= 2;
                  }
LABEL_357:
                  if (v265)
                  {
                    v166 = v264;
                    if (v264)
                    {
                      v167 = (WTF *)*((_QWORD *)v264 + 7);
                      if ((WTF::StringImpl *)((char *)v264 + 72) != v167 && v167)
                      {
                        *((_QWORD *)v264 + 7) = 0;
                        *((_DWORD *)v166 + 16) = 0;
                        WTF::fastFree(v167, v164);
                      }
                      v168 = *((unsigned int *)v166 + 13);
                      if ((_DWORD)v168)
                      {
                        v188 = (uint64_t *)*((_QWORD *)v166 + 5);
                        v189 = &v188[2 * v168];
                        do
                        {
                          v190 = *v188;
                          *v188 = 0;
                          if (v190)
                          {
                            if (*(_DWORD *)v190 == 1)
                            {
                              v191 = *(unsigned int *)(v190 + 4);
                              if ((v191 & 8) != 0)
                              {
                                v192 = *(unsigned int *)(v190 + 28);
                                if ((_DWORD)v192)
                                {
                                  v193 = 16 * v192;
                                  v194 = (_DWORD **)(*(_QWORD *)(v190 + 16) + 8);
                                  do
                                  {
                                    v195 = *v194;
                                    *v194 = 0;
                                    if (v195)
                                    {
                                      if (*v195 == 2)
                                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v195, v164);
                                      else
                                        *v195 -= 2;
                                    }
                                    v194 += 2;
                                    v193 -= 16;
                                  }
                                  while (v193);
                                }
                                v196 = *(WTF **)(v190 + 16);
                                if ((WTF *)(v190 + 32) != v196 && v196 != 0)
                                {
                                  *(_QWORD *)(v190 + 16) = 0;
                                  *(_DWORD *)(v190 + 24) = 0;
                                  WTF::fastFree(v196, v164);
                                }
                                v198 = *(_QWORD *)(v190 + 8);
                                *(_QWORD *)(v190 + 8) = 0;
                                if (v198)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
                              }
                              else if (v191 >= 0x10)
                              {
                                v199 = 0;
                                v200 = (unsigned int *)(v190 + ((v191 >> 3) & 0x1FFFFFFE) + 8);
                                do
                                {
                                  v201 = (_DWORD *)(*v200 | ((unint64_t)*((unsigned __int8 *)v200 + 4) << 32));
                                  if (*v201 == 2)
                                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v201, v164);
                                  else
                                    *v201 -= 2;
                                  ++v199;
                                  v200 = (unsigned int *)((char *)v200 + 5);
                                }
                                while (v199 < (unint64_t)*(unsigned int *)(v190 + 4) >> 4);
                              }
                              WTF::fastFree((WTF *)v190, v164);
                            }
                            else
                            {
                              --*(_DWORD *)v190;
                            }
                          }
                          v188 += 2;
                        }
                        while (v188 != v189);
                      }
                      v169 = (WTF *)*((_QWORD *)v166 + 5);
                      if (v169)
                      {
                        *((_QWORD *)v166 + 5) = 0;
                        *((_DWORD *)v166 + 12) = 0;
                        WTF::fastFree(v169, v164);
                      }
                      v170 = *((unsigned int *)v166 + 9);
                      if ((_DWORD)v170)
                      {
                        v202 = (uint64_t *)*((_QWORD *)v166 + 3);
                        v203 = &v202[2 * v170];
                        do
                        {
                          v204 = *v202;
                          *v202 = 0;
                          if (v204)
                          {
                            if (*(_DWORD *)v204 == 1)
                            {
                              v205 = *(unsigned int *)(v204 + 4);
                              if ((v205 & 8) != 0)
                              {
                                v206 = *(unsigned int *)(v204 + 28);
                                if ((_DWORD)v206)
                                {
                                  v207 = 16 * v206;
                                  v208 = (_DWORD **)(*(_QWORD *)(v204 + 16) + 8);
                                  do
                                  {
                                    v209 = *v208;
                                    *v208 = 0;
                                    if (v209)
                                    {
                                      if (*v209 == 2)
                                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v209, v164);
                                      else
                                        *v209 -= 2;
                                    }
                                    v208 += 2;
                                    v207 -= 16;
                                  }
                                  while (v207);
                                }
                                v210 = *(WTF **)(v204 + 16);
                                if ((WTF *)(v204 + 32) != v210 && v210 != 0)
                                {
                                  *(_QWORD *)(v204 + 16) = 0;
                                  *(_DWORD *)(v204 + 24) = 0;
                                  WTF::fastFree(v210, v164);
                                }
                                v212 = *(_QWORD *)(v204 + 8);
                                *(_QWORD *)(v204 + 8) = 0;
                                if (v212)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v212 + 8))(v212);
                              }
                              else if (v205 >= 0x10)
                              {
                                v213 = 0;
                                v214 = (unsigned int *)(v204 + ((v205 >> 3) & 0x1FFFFFFE) + 8);
                                do
                                {
                                  v215 = (_DWORD *)(*v214 | ((unint64_t)*((unsigned __int8 *)v214 + 4) << 32));
                                  if (*v215 == 2)
                                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v215, v164);
                                  else
                                    *v215 -= 2;
                                  ++v213;
                                  v214 = (unsigned int *)((char *)v214 + 5);
                                }
                                while (v213 < (unint64_t)*(unsigned int *)(v204 + 4) >> 4);
                              }
                              WTF::fastFree((WTF *)v204, v164);
                            }
                            else
                            {
                              --*(_DWORD *)v204;
                            }
                          }
                          v202 += 2;
                        }
                        while (v202 != v203);
                      }
                      v171 = (WTF *)*((_QWORD *)v166 + 3);
                      if (v171)
                      {
                        *((_QWORD *)v166 + 3) = 0;
                        *((_DWORD *)v166 + 8) = 0;
                        WTF::fastFree(v171, v164);
                      }
                      v172 = *((unsigned int *)v166 + 5);
                      if ((_DWORD)v172)
                      {
                        v216 = (uint64_t *)*((_QWORD *)v166 + 1);
                        v217 = &v216[2 * v172];
                        do
                        {
                          v218 = *v216;
                          *v216 = 0;
                          if (v218)
                          {
                            if (*(_DWORD *)v218 == 1)
                            {
                              v219 = *(unsigned int *)(v218 + 4);
                              if ((v219 & 8) != 0)
                              {
                                v220 = *(unsigned int *)(v218 + 28);
                                if ((_DWORD)v220)
                                {
                                  v221 = 16 * v220;
                                  v222 = (_DWORD **)(*(_QWORD *)(v218 + 16) + 8);
                                  do
                                  {
                                    v223 = *v222;
                                    *v222 = 0;
                                    if (v223)
                                    {
                                      if (*v223 == 2)
                                        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v223, v164);
                                      else
                                        *v223 -= 2;
                                    }
                                    v222 += 2;
                                    v221 -= 16;
                                  }
                                  while (v221);
                                }
                                v224 = *(WTF **)(v218 + 16);
                                if ((WTF *)(v218 + 32) != v224 && v224 != 0)
                                {
                                  *(_QWORD *)(v218 + 16) = 0;
                                  *(_DWORD *)(v218 + 24) = 0;
                                  WTF::fastFree(v224, v164);
                                }
                                v226 = *(_QWORD *)(v218 + 8);
                                *(_QWORD *)(v218 + 8) = 0;
                                if (v226)
                                  (*(void (**)(uint64_t))(*(_QWORD *)v226 + 8))(v226);
                              }
                              else if (v219 >= 0x10)
                              {
                                v227 = 0;
                                v228 = (unsigned int *)(v218 + ((v219 >> 3) & 0x1FFFFFFE) + 8);
                                do
                                {
                                  v229 = (_DWORD *)(*v228 | ((unint64_t)*((unsigned __int8 *)v228 + 4) << 32));
                                  if (*v229 == 2)
                                    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v229, v164);
                                  else
                                    *v229 -= 2;
                                  ++v227;
                                  v228 = (unsigned int *)((char *)v228 + 5);
                                }
                                while (v227 < (unint64_t)*(unsigned int *)(v218 + 4) >> 4);
                              }
                              WTF::fastFree((WTF *)v218, v164);
                            }
                            else
                            {
                              --*(_DWORD *)v218;
                            }
                          }
                          v216 += 2;
                        }
                        while (v216 != v217);
                      }
                      v173 = (WTF *)*((_QWORD *)v166 + 1);
                      if (v173)
                      {
                        *((_QWORD *)v166 + 1) = 0;
                        *((_DWORD *)v166 + 4) = 0;
                        WTF::fastFree(v173, v164);
                      }
                      WTF::fastFree(v166, v164);
                    }
                    v174 = (WTF *)*((_QWORD *)&v263 + 1);
                    if (*((_QWORD *)&v263 + 1))
                    {
                      v175 = (WTF *)**((_QWORD **)&v263 + 1);
                      if (*((_QWORD *)&v263 + 1) + 16 != **((_QWORD **)&v263 + 1) && v175 != 0)
                      {
                        **((_QWORD **)&v263 + 1) = 0;
                        *((_DWORD *)v174 + 2) = 0;
                        WTF::fastFree(v175, v164);
                      }
                      WTF::fastFree(v174, v164);
                    }
                    if ((_QWORD)v263)
                    {
                      WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v263, v164);
                      if (*(_DWORD *)v177)
                      {
                        *((_OWORD *)v177 + 2) = 0u;
                        *((_OWORD *)v177 + 3) = 0u;
                        *(_OWORD *)v177 = 0u;
                        *((_OWORD *)v177 + 1) = 0u;
                      }
                      else
                      {
                        WTF::fastFree(v177, v178);
                      }
                    }
                  }
                  v69 = v238;
                  goto LABEL_193;
                }
                *(_DWORD *)v165 -= 2;
              }
            }
            if (v163)
              goto LABEL_355;
            goto LABEL_357;
          }
LABEL_244:
          WebCore::Style::determineChange(v111, (const WebCore::RenderStyle *)v263, v110);
          goto LABEL_348;
        }
        *(_DWORD *)v112 -= 2;
      }
    }
    if (!v111)
      goto LABEL_348;
    goto LABEL_244;
  }
LABEL_192:
  v69 = 0;
  v68 = 0;
  if (v59)
    goto LABEL_193;
LABEL_383:
  v179 = **(_QWORD **)(a1 + 24);
  if (v179 && (v180 = *(uint64_t **)(v179 + 48)) != 0 && (v184 = *((unsigned int *)v180 + 3), (_DWORD)v184))
  {
    v185 = *v180;
    v186 = *(_DWORD *)a2;
    v187 = 8 * v184;
    while (((*(_QWORD *)(*(_QWORD *)v185 + 16) >> 43) & 0x1F) != v186
         || *(WTF::StringImpl **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v185 + 8) + 40) + 592) != a2[1])
    {
      LODWORD(v2) = 0;
      v185 += 8;
      v187 -= 8;
      if (!v187)
        goto LABEL_386;
    }
    if (v186 == 2)
      LODWORD(v2) = 5;
    else
      LODWORD(v2) = 1;
  }
  else
  {
    LODWORD(v2) = 0;
  }
LABEL_386:
  v181 = *(_QWORD *)(a1 + 16);
  v182 = *(unsigned __int8 *)(v181 + 8);
  if (v182 <= v2)
    LOBYTE(v182) = (_BYTE)v2;
  *(_BYTE *)(v181 + 8) = v182;
  return v2;
}

uint64_t WebCore::Style::TreeResolver::makeResolutionContextForPseudoElement(uint64_t result, uint64_t a2, uint64_t *a3, int a4, WTF::StringImpl *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t CachedPseudoStyle;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;

  v20 = a3;
  v17 = result;
  v18 = a2;
  switch(a4)
  {
    case 13:
      v9 = 12;
      goto LABEL_11;
    case 14:
      v9 = 13;
      goto LABEL_11;
    case 15:
    case 16:
      v9 = 14;
      goto LABEL_11;
    default:
      if (a4 != 2)
      {
        v5 = *a3;
LABEL_4:
        v6 = v5;
        goto LABEL_5;
      }
      v20 = a3;
      v17 = result;
      v18 = a2;
      v9 = 1;
LABEL_11:
      v21 = *v20;
      v22 = v9;
      if ((v9 - 13) >= 2)
        a5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
      if (a5)
      {
        v11 = *(_DWORD *)a5;
        *(_DWORD *)a5 += 2;
        v23 = a5;
        CachedPseudoStyle = WebCore::RenderStyle::getCachedPseudoStyle(v21, (uint64_t)&v22);
        if (v11)
        {
          *(_DWORD *)a5 = v11;
        }
        else
        {
          WTF::StringImpl::destroy(a5, v12);
          v21 = *v20;
        }
      }
      else
      {
        v23 = 0;
        CachedPseudoStyle = WebCore::RenderStyle::getCachedPseudoStyle(v21, (uint64_t)&v22);
      }
      result = v17;
      a2 = v18;
      v5 = v21;
      v6 = CachedPseudoStyle;
      if (!CachedPseudoStyle)
        goto LABEL_4;
LABEL_5:
      *(_QWORD *)result = v6;
      if ((*(_DWORD *)(v5 + 16) & 0x1F) == 0x1A)
        goto LABEL_24;
      if ((*(_DWORD *)(v5 + 16) & 0x1F) == 0x12)
      {
        v13 = *(unsigned int *)(a2 + 76);
        v14 = *(_QWORD *)(a2 + 64) + 24 * v13;
        v15 = -24 * v13;
        while (v15)
        {
          v5 = *(_QWORD *)(v14 - 16);
          v16 = *(_BYTE *)(v5 + 16) & 0x1F;
          if (v16 == 26)
            break;
          v14 -= 24;
          v15 += 24;
          if (v16 != 18)
            goto LABEL_7;
        }
LABEL_24:
        v5 = 0;
      }
LABEL_7:
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(result + 8) = v5;
      *(_QWORD *)(result + 16) = v7;
      v8 = *(unsigned int *)(a2 + 28);
      if (!(_DWORD)v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1965B6AD8);
      }
      *(_QWORD *)(result + 24) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v8 - 8) + 16;
      *(_QWORD *)(result + 32) = 0;
      *(_BYTE *)(result + 40) = 0;
      return result;
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(result + 12);
  if ((_DWORD)v1)
  {
    v2 = result;
    v3 = v1 - 1;
    v4 = *(_QWORD *)result;
    result = *(_QWORD *)(*(_QWORD *)result + 8 * v3);
    *(_QWORD *)(v4 + 8 * v3) = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    *(_DWORD *)(v2 + 12) = v3;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::Style::TreeResolver::findAnchorsForAnchorPositionedElement(uint64_t this, unint64_t a2, const WebCore::Element *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  WTF::StringImpl **v19;
  int j;
  unsigned int v21;
  WTF::StringImpl **v22;
  WTF *v23;
  WTF::StringImpl *v24;
  WebCore::Node *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int i;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v42;
  WebCore::Node *v43;
  char v44;

  v3 = this;
  ++*(_DWORD *)(this + 880);
  v4 = a2 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((a2 & 0xFFFFFFFFFFFFLL) + 8) && (v5 = *(_QWORD *)(this + 872)) != 0)
  {
    v34 = 0;
    v35 = (v4 + ~(a2 << 32)) ^ ((v4 + ~(a2 << 32)) >> 22);
    v36 = (9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8))) ^ ((9
                                                                       * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8))) >> 15);
    for (i = ((v36 + ~(v36 << 27)) >> 31) ^ (v36 + ~((_DWORD)v36 << 27)); ; i = v34 + v38)
    {
      v38 = i & *(_DWORD *)(v5 - 8);
      v39 = *(_QWORD *)(v5 + 16 * v38);
      if (v39 != -1)
      {
        if (!v39)
          goto LABEL_4;
        if (v39 == v4)
          break;
      }
      ++v34;
    }
    v6 = *(_QWORD *)(v5 + 16 * v38 + 8);
  }
  else
  {
LABEL_4:
    v6 = 0;
  }
  if (!*(_BYTE *)(v6 + 17))
  {
    this = (uint64_t)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(v6 + 8));
    v7 = (WTF::StringImpl **)this;
    v9 = v8;
    v10 = *(_QWORD *)(v6 + 8);
    if (v10)
      v11 = (WTF::StringImpl **)(v10 + 8 * *(unsigned int *)(v10 - 4));
    else
      v11 = 0;
    if (v11 != (WTF::StringImpl **)this)
    {
      v40 = v11;
      do
      {
        v12 = *v7;
        if (*v7)
        {
          *(_DWORD *)v12 += 2;
          v42 = v12;
          this = WebCore::Style::TreeResolver::findLastAcceptableAnchorWithName((uint64_t)&v43, v3, &v42, (uint64_t)a3);
          v42 = 0;
          if (*(_DWORD *)v12 == 2)
            this = WTF::StringImpl::destroy(v12, v13);
          else
            *(_DWORD *)v12 -= 2;
        }
        else
        {
          v42 = 0;
          this = WebCore::Style::TreeResolver::findLastAcceptableAnchorWithName((uint64_t)&v43, v3, &v42, (uint64_t)a3);
          v42 = 0;
        }
        if (v44)
        {
          v15 = *(_QWORD *)v6;
          if (*(_QWORD *)v6
            || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v6, 8u, 0), (v15 = *(_QWORD *)v6) != 0))
          {
            v16 = *(_DWORD *)(v15 - 8);
          }
          else
          {
            v16 = 0;
          }
          v17 = *((_DWORD *)*v7 + 4);
          if (v17 < 0x100)
            v18 = WTF::StringImpl::hashSlowCase(*v7);
          else
            v18 = v17 >> 8;
          v19 = 0;
          for (j = 1; ; ++j)
          {
            v21 = v18 & v16;
            v22 = (WTF::StringImpl **)(v15 + 16 * (v18 & v16));
            v23 = *v22;
            if (*v22 == (WTF::StringImpl *)-1)
            {
              v19 = (WTF::StringImpl **)(v15 + 16 * v21);
            }
            else
            {
              if (!v23)
              {
                if (v19)
                {
                  *v19 = 0;
                  v19[1] = 0;
                  --*(_DWORD *)(*(_QWORD *)v6 - 16);
                  v22 = v19;
                }
                v24 = *v7;
                if (*v7)
                  *(_DWORD *)v24 += 2;
                *v22 = v24;
                v25 = v43;
                *((_DWORD *)v43 + 6) += 2;
                v26 = v22[1];
                v22[1] = v25;
                if (v26)
                {
                  if (*((_DWORD *)v26 + 6) == 2)
                  {
                    if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                      WebCore::Node::removedLastRef(v26);
                  }
                  else
                  {
                    *((_DWORD *)v26 + 6) -= 2;
                  }
                }
                v27 = *(_QWORD *)v6;
                if (*(_QWORD *)v6)
                  v28 = *(_DWORD *)(v27 - 12) + 1;
                else
                  v28 = 1;
                *(_DWORD *)(v27 - 12) = v28;
                v29 = *(_QWORD *)v6;
                if (*(_QWORD *)v6)
                  v30 = *(_DWORD *)(v29 - 12);
                else
                  v30 = 0;
                v31 = (*(_DWORD *)(v29 - 16) + v30);
                v32 = *(unsigned int *)(v29 - 4);
                if (v32 > 0x400)
                {
                  if (v32 <= 2 * v31)
                  {
LABEL_43:
                    v33 = (_DWORD)v32 << (6 * *(_DWORD *)(v29 - 12) >= (2 * v32));
                    goto LABEL_47;
                  }
                }
                else if (3 * v32 <= 4 * v31)
                {
                  if ((_DWORD)v32)
                    goto LABEL_43;
                  v33 = 8;
LABEL_47:
                  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash((uint64_t *)v6, v33, v22);
                }
LABEL_48:
                this = (uint64_t)v43;
                v11 = v40;
                if (v43)
                {
                  if (*((_DWORD *)v43 + 6) == 2)
                  {
                    if ((*((_WORD *)v43 + 15) & 0x400) == 0)
                      this = WebCore::Node::removedLastRef(v43);
                  }
                  else
                  {
                    *((_DWORD *)v43 + 6) -= 2;
                  }
                }
                break;
              }
              if ((WTF::equal(v23, *v7, v14) & 1) != 0)
                goto LABEL_48;
            }
            v18 = j + v21;
          }
        }
        while (++v7 != v9)
        {
          if ((unint64_t)*v7 + 1 > 1)
            goto LABEL_55;
        }
        v7 = v9;
LABEL_55:
        ;
      }
      while (v7 != v11);
    }
    *(_BYTE *)(v6 + 17) = 1;
  }
  return this;
}

void WebCore::Style::TreeResolver::resolveComposedTree(WebCore::Style::TreeResolver *this, uint64_t a2)
{
  WTF *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::Node **v14;
  __int16 v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::RenderStyle *v22;
  int v23;
  WebCore::RenderStyle *v24;
  _QWORD *v25;
  WebCore::Node *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  WebCore::Node *v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  WebCore::Node ***v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int j;
  unsigned int v43;
  WebCore::Node ***v44;
  WebCore::Node **v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  WebCore::RenderStyle *v58;
  WTF *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  WTF *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  WTF *v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  WebCore::Node ***v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  int k;
  unsigned int v115;
  WebCore::Node **v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int v121;
  WebCore::Node *v122;
  WebCore::Node **v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  WebCore::Node ***v130;
  WebCore::Node ***v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  unsigned int v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  WebCore::Style::TreeResolver::Scope *v144;
  unsigned int v145;
  WTF *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  WTF *v150;
  WTF *v152;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  WTF *v158;
  WTF *v160;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  int v178;
  WTF *v179;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  _DWORD *v188;
  uint64_t v189;
  WebCore::RenderStyle *v190;
  WebCore::RenderStyle *v191;
  WebCore::RenderStyle *v192;
  WTF *v193;
  WebCore::RenderStyle *v194;
  WTF *v195;
  uint64_t v196;
  int v197;
  unsigned __int8 *v198;
  int v199;
  int v200;
  unsigned int v201;
  unsigned __int8 v202;
  uint64_t v203;
  _BOOL4 v204;
  uint64_t *v205;
  int hasPendingSheetInBody;
  uint64_t v207;
  _BYTE *v208;
  int v209;
  uint64_t v210;
  WTF *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  BOOL v224;
  int v225;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  const WTF::StringImpl *v235;
  unsigned int v236;
  char v237;
  WebCore::RenderStyle *v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t v241;
  WebCore::RenderStyle **v242;
  WebCore::RenderStyle *v243;
  uint64_t v244;
  WebCore::RenderStyle *v245;
  WebCore::RenderStyle *v246;
  uint64_t v247;
  WTF *v248;
  void *v249;
  BOOL v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  __int16 v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  WebCore::RenderStyle *v267;
  _DWORD *v268;
  _DWORD *v269;
  _DWORD *v270;
  _DWORD *v271;
  uint64_t v272;
  uint64_t v273;
  WebCore::Style::TreeResolver::Scope *v274;
  uint64_t v275;
  uint64_t v276;
  WebCore::RenderStyle *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  unsigned int m;
  uint64_t v285;
  uint64_t v286;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  unsigned int n;
  uint64_t v293;
  uint64_t v294;
  uint64_t v296;
  uint64_t v297;
  int v298;
  unsigned int ii;
  uint64_t v300;
  uint64_t v301;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  int v307;
  unsigned int jj;
  uint64_t v309;
  uint64_t v310;
  int v312;
  int v313;
  WebCore::RenderStyle *v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  BOOL v320;
  WebCore::RenderStyle *v321;
  BOOL v322;
  uint64_t v323;
  WTF::StringImpl **v325;
  WTF::StringImpl *v326;
  WTF::StringImpl *v327;
  int v328;
  WTF::StringImpl *v329;
  WTF::StringImpl *v330;
  int v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  int v334;
  WTF::StringImpl **v335;
  WTF::StringImpl *v336;
  WTF::StringImpl *v337;
  WTF::StringImpl *v338;
  WTF::StringImpl *v339;
  WTF::StringImpl *v340;
  WTF::StringImpl *v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  WebCore::Style::Scope *v344;
  uint64_t *v345;
  uint64_t v346;
  WTF::StringImpl *v347;
  uint64_t v348;
  uint64_t v349;
  WTF *v350;
  WebCore::Quirks *v351;
  uint64_t v352;
  uint64_t v353;
  WebCore::RenderStyle *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  WTF::StringImpl *v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  unint64_t v362;
  unint64_t v363;
  unsigned int *v364;
  unsigned int v365;
  unsigned int *v366;
  unsigned int v367;
  unsigned int v368;
  char v369;
  uint64_t v370;
  const WTF::StringImpl *v371;
  WebCore::RenderStyle *v372;
  float v373;
  void *v374;
  WebCore::RenderStyle *v375;
  WebCore::RenderStyle *v377;
  BOOL v378;
  uint64_t v379;
  BOOL v380;
  unint64_t v381;
  BOOL v382;
  uint64_t v383;
  WTF *v384;
  void *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v399;
  unsigned int v400;
  int v401;
  int i;
  unsigned int v403;
  uint64_t v404;
  WebCore::RenderStyle *v405;
  WTF *v406;
  WTF *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  WebCore::RenderStyle *v412;
  WTF *v413;
  __int128 *v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t v418;
  __int16 kk;
  uint64_t v420;
  BOOL v421;
  char v422;
  uint64_t v423;
  __int16 v424;
  BOOL v425;
  char v426;
  BOOL v427;
  unsigned int v428;
  int v429;
  int nn;
  unsigned int v431;
  uint64_t v432;
  uint64_t v433;
  WTF::StringImpl **v434;
  WTF::StringImpl *v435;
  uint64_t v436;
  WTF::StringImpl **v437;
  WTF::StringImpl *v438;
  uint64_t v439;
  WTF *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  void *v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _BYTE *v450;
  WTF::StringImpl **v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  int mm;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  WebCore::RenderObject *v465;
  WebCore::RenderElement *v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unsigned int *v475;
  unsigned int v476;
  unsigned int v477;
  int v478;
  int v479;
  WTF::StringImpl *v480;
  WTF::StringImpl *v481;
  WTF::StringImpl *v482;
  WTF::StringImpl *v483;
  WTF::StringImpl *v484;
  WTF::StringImpl *v485;
  WTF::StringImpl *v486;
  WTF::StringImpl *v487;
  uint64_t *v488;
  WebCore::Style::Scope *v489;
  uint64_t v490;
  WTF *v491;
  uint64_t *v492;
  uint64_t *v493;
  WebCore::RenderStyle *v494;
  uint64_t v495;
  char v496;
  __int16 v497;
  WTF *v498;
  uint64_t v499;
  _QWORD v500[3];
  _DWORD v501[66];
  uint64_t v502;
  _DWORD *v503;
  uint64_t v504;
  _DWORD v505[66];
  uint64_t v506;
  char v507[8];
  WTF *v508;
  int v509;
  unsigned int v510;
  uint64_t v511;
  WTF::StringImpl *v512;
  WTF::StringImpl *v513;
  WebCore::RenderStyle *v514[4];
  _QWORD *v515;
  __int16 v516;
  char v517;
  uint64_t v518[3];
  uint64_t v519;
  int v520;
  WTF::StringImpl *v521;
  char v522;
  __int128 v523;
  uint64_t v524;
  uint64_t v525;
  char *v526;
  char v527;
  WebCore::RenderStyle *v528;
  _QWORD v529[2];

  v2 = (WTF *)MEMORY[0x1E0C80A78](this, a2);
  WebCore::ComposedTreeIterator::ComposedTreeIterator((uint64_t)v507, *(_QWORD *)v2);
  v497 = 0;
  v491 = (WTF *)v500;
  v498 = (WTF *)v500;
  v500[0] = 0;
  v500[1] = v501;
  v500[2] = 16;
  v501[64] = 0;
  v502 = 0;
  v503 = v505;
  v504 = 16;
  v505[64] = 0;
  v506 = -1;
  v499 = 0x100000008;
  v4 = v510;
  if (!v510)
    goto LABEL_902;
  v5 = (uint64_t *)((char *)v2 + 64);
  v492 = (uint64_t *)((char *)v2 + 904);
  v493 = (uint64_t *)((char *)v2 + 64);
  v490 = (uint64_t)v2 + 912;
LABEL_3:
  if (!HIDWORD(v499))
  {
    __break(0xC471u);
    JUMPOUT(0x1965B9F70);
  }
  if (*((_QWORD *)v508 + 73 * v4 - 73) != *((_QWORD *)v498 + 73 * HIDWORD(v499) - 73)
    && (*((_DWORD *)v508 + 146 * v4 - 76) || *((_DWORD *)v498 + 146 * HIDWORD(v499) - 76)))
  {
    v6 = 0;
    v7 = 584 * v4;
    v8 = (_DWORD *)((char *)v508 + 280);
    do
    {
      v6 += *v8;
      v8 += 146;
      v7 -= 584;
    }
    while (v7);
    v9 = *((_DWORD *)v2 + 19);
    if (v9 > v6)
    {
      do
      {
        v72 = *((_QWORD *)v2 + 8) + 24 * v9;
        v73 = *(_QWORD *)(v72 - 24);
        v74 = *(_QWORD *)(v73 + 64);
        *(_WORD *)(v73 + 30) &= 0xFF8Fu;
        *(_QWORD *)(v73 + 64) = v74 & 0xFFE0FFFFFFFFFFFFLL;
        LODWORD(v74) = *(unsigned __int8 *)(v72 - 6);
        v75 = *((unsigned int *)v2 + 7);
        if ((_DWORD)v74)
        {
          if (!*((_DWORD *)v2 + 7))
          {
            __break(0xC471u);
            JUMPOUT(0x1965BA01CLL);
          }
          v142 = v75 - 1;
          v143 = *((_QWORD *)v2 + 2);
          v144 = *(WebCore::Style::TreeResolver::Scope **)(v143 + 8 * v142);
          *(_QWORD *)(v143 + 8 * v142) = 0;
          if (v144)
          {
            if (*(_DWORD *)v144 == 1)
            {
              WebCore::Style::TreeResolver::Scope::~Scope(v144, v3);
              WTF::fastFree(v248, v249);
              v5 = v493;
            }
            else
            {
              --*(_DWORD *)v144;
            }
          }
          v75 = v142;
          *((_DWORD *)v2 + 7) = v142;
        }
        if (!v75)
        {
          __break(0xC471u);
          JUMPOUT(0x1965BA00CLL);
        }
        v76 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v75 - 8);
        v77 = *(unsigned int *)(v76 + 28);
        if (!(_DWORD)v77)
        {
          __break(0xC471u);
          JUMPOUT(0x1965BA014);
        }
        v78 = v77 - 1;
        v79 = *(_QWORD *)(v76 + 16);
        v80 = v79 + 40 * v78;
        v81 = v80 + 8;
        v82 = *(unsigned int *)(v80 + 20);
        if ((_DWORD)v82)
        {
          v83 = 0;
          v84 = v76 + 32;
          do
          {
            if (v83 >= *(unsigned int *)(v81 + 12))
            {
              __break(0xC471u);
              JUMPOUT(0x1965B9FCCLL);
            }
            v85 = *(unsigned int *)(*(_QWORD *)v81 + 4 * v83);
            v86 = *(unsigned __int8 *)(v84 + (v85 & 0xFFF));
            if (v86 != 255)
              *(_BYTE *)(v84 + (v85 & 0xFFF)) = v86 - 1;
            v87 = (v85 >> 16) & 0xFFF;
            v88 = *(unsigned __int8 *)(v84 + v87);
            if (v88 != 255)
              *(_BYTE *)(v84 + v87) = v88 - 1;
            ++v83;
          }
          while (v82 != v83);
        }
        v89 = *(WTF **)v81;
        if (v79 + 40 * v78 + 24 != *(_QWORD *)v81 && v89 != 0)
        {
          *(_QWORD *)v81 = 0;
          *(_DWORD *)(v79 + 40 * v78 + 16) = 0;
          WTF::fastFree(v89, v3);
          v5 = v493;
        }
        *(_DWORD *)(v76 + 28) = v78;
        if (!(_DWORD)v78)
        {
          bzero((void *)(v76 + 32), 0x1000uLL);
          v5 = v493;
        }
        v91 = *((unsigned int *)v2 + 7);
        if (!(_DWORD)v91)
        {
          __break(0xC471u);
          JUMPOUT(0x1965B9FFCLL);
        }
        v92 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v91 - 8);
        v93 = *(unsigned int *)(v92 + 4140);
        if ((_DWORD)v93 && *(_QWORD *)(*(_QWORD *)(v92 + 4128) + 8 * v93 - 8) == v73)
        {
          WTF::Vector<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(v92 + 4128);
          v5 = v493;
        }
        if (*((_BYTE *)v2 + 929))
        {
          v94 = *v492;
          if (*v492)
          {
            v400 = *(_DWORD *)(v94 - 8);
            v401 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v73);
            for (i = 0; ; v401 = i + v403)
            {
              v403 = v401 & v400;
              v404 = *(_QWORD *)(v94 + 24 * (v401 & v400));
              if (v404 != -1)
              {
                v5 = v493;
                if (!v404)
                  goto LABEL_104;
                if (v404 == v73)
                  break;
              }
              ++i;
            }
            WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v523, v94 + 24 * v403 + 8);
            v407 = (WTF *)v523;
            if (HIDWORD(v523))
            {
              v408 = *(_QWORD *)v523;
              *(_DWORD *)(v408 + 24) = *(_DWORD *)(*(_QWORD *)v523 + 24) + 2;
              v519 = v408;
              WebCore::Style::TreeResolver::findAnchorsForAnchorPositionedElement((uint64_t)v2, *(_QWORD *)(v408 + 16), (const WebCore::Element *)v73);
              *((_BYTE *)v2 + 929) = 0;
              WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v519);
              v407 = (WTF *)v523;
              if (HIDWORD(v523))
              {
                v409 = 8 * HIDWORD(v523);
                do
                {
                  v410 = *(_QWORD *)v407;
                  *(_QWORD *)v407 = 0;
                  if (v410)
                  {
                    if (*(_DWORD *)(v410 + 24) == 2)
                    {
                      if ((*(_WORD *)(v410 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v410);
                    }
                    else
                    {
                      *(_DWORD *)(v410 + 24) -= 2;
                    }
                  }
                  v407 = (WTF *)((char *)v407 + 8);
                  v409 -= 8;
                }
                while (v409);
                v407 = (WTF *)v523;
              }
            }
            v5 = v493;
            if (v407)
            {
              *(_QWORD *)&v523 = 0;
              DWORD2(v523) = 0;
              WTF::fastFree(v407, v3);
              v5 = v493;
            }
          }
        }
LABEL_104:
        v95 = *((_DWORD *)v2 + 19);
        if (!v95)
        {
          __break(0xC471u);
          JUMPOUT(0x1965BA004);
        }
        v9 = v95 - 1;
        *((_DWORD *)v2 + 19) = v95 - 1;
      }
      while (v95 - 1 > v6);
      v4 = v510;
    }
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1965B9F90);
    }
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1965B9F88);
    }
    v10 = (uint64_t *)((char *)v508 + 584 * v4 - 584);
    v11 = *v10;
    v12 = v9 - 1;
    v13 = *v5;
    v14 = (WebCore::Node **)(*v5 + 24 * v12);
    v15 = *(_WORD *)(*v10 + 28);
    if ((v15 & 2) != 0 && v11)
    {
      *(_DWORD *)(v11 + 24) += 2;
      v16 = *(unsigned __int16 *)(v11 + 30);
      if ((v16 & 0x100) != 0)
      {
        v17 = (v16 >> 7) & 1;
LABEL_15:
        if ((v16 & 0x20) != 0 && *(_BYTE *)(v13 + 24 * v12 + 16) != 5)
        {
          v18 = *(_QWORD *)(v13 + 24 * v12 + 8);
        }
        else
        {
          v18 = *(_QWORD *)(v13 + 24 * v12 + 8);
          if ((*(_QWORD *)(v18 + 16) & 0x1FLL) != 0x12)
          {
            if ((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
              {
                __break(0xC471u);
                JUMPOUT(0x1965B8378);
              }
              goto LABEL_61;
            }
            if (!v17)
              goto LABEL_69;
            v66 = *(_DWORD *)(v18 + 40);
            v67 = (v66 >> 27) & 7;
            if ((v66 & 0x40000000) != 0 || v67 != 3)
            {
              if (!v67
                || ((v132 = v66 & 0x40000000) != 0 ? (v133 = 1) : (v133 = 2),
                    v67 != v133 && (v67 != 1) | (v132 >> 30) & 1))
              {
LABEL_70:
                *(_QWORD *)(v11 + 64) &= 0xFFF8FFFFFFFFFFFFLL;
                *(_WORD *)(v11 + 30) &= 0xFF8Fu;
                if (!v510)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1965B9F80);
                }
                v68 = v510 - 1;
                v69 = v508;
                v70 = (char *)v508 + 584 * v68;
                v71 = *(_QWORD *)v70;
                while (1)
                {
                  v71 = *(_QWORD *)(v71 + 56);
                  if (!v71)
                    break;
                  if ((*(_WORD *)(v71 + 28) & 0xA) != 0)
                  {
                    *(_QWORD *)v70 = v71;
                    goto LABEL_75;
                  }
                }
                v96 = *((unsigned int *)v70 + 5);
                if (!(_DWORD)v96)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1965BA024);
                }
                v97 = *((_QWORD *)v70 + 1) + 16 * v96;
                v71 = *(_QWORD *)(v97 - 16);
                *(_QWORD *)v70 = v71;
                *((_DWORD *)v70 + 70) = *(_DWORD *)(v97 - 8);
                *((_DWORD *)v70 + 5) = v96 - 1;
LABEL_75:
                if (v71 == *((_QWORD *)v69 + 73 * v68 + 36)
                  || !*((_DWORD *)v70 + 70) && !*((_DWORD *)v69 + 146 * v68 + 142))
                {
                  WebCore::ComposedTreeIterator::traverseNextLeavingContext((uint64_t)v507, v3);
                  v5 = v493;
                }
                if (*(_DWORD *)(v11 + 24) == 2)
                {
                  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v11);
                    goto LABEL_144;
                  }
                }
                else
                {
                  *(_DWORD *)(v11 + 24) -= 2;
                }
                goto LABEL_79;
              }
            }
          }
        }
        v19 = *((unsigned int *)v2 + 19);
        v20 = v13 + 24 * v19;
        v21 = -24 * v19;
        while (v21)
        {
          v22 = *(WebCore::RenderStyle **)(v20 - 16);
          v23 = *((_BYTE *)v22 + 16) & 0x1F;
          if (v23 == 26)
            break;
          v20 -= 24;
          v21 += 24;
          if (v23 != 18)
            goto LABEL_22;
        }
        v22 = 0;
LABEL_22:
        if ((*(_QWORD *)(v18 + 16) & 0x1FLL) == 0x12)
        {
          if (v22
            && (WebCore::RenderStyle::inheritedEqual(v22, (const WebCore::RenderStyle *)v18, (const WTF::StringImpl *)0x248), (v369 & 1) != 0))
          {
            v24 = 0;
          }
          else
          {
            WebCore::RenderStyle::createPtr(&v523);
            v24 = (WebCore::RenderStyle *)v523;
            WebCore::RenderStyle::inheritFrom((WebCore::RenderStyle *)v523, (const WebCore::RenderStyle *)v18, v371);
          }
          v5 = v493;
        }
        else
        {
          v24 = 0;
        }
        v25 = (_QWORD *)*((_QWORD *)v2 + 117);
        v26 = *v14;
        if (*v14)
        {
          if ((*((_BYTE *)v26 + 54) & 8) != 0)
            goto LABEL_40;
          v27 = v25[8];
          v28 = ~((_QWORD)v26 << 32);
          if (v27)
          {
            v29 = *(_DWORD *)(v27 - 8);
            v30 = (((unint64_t)v26 + v28) ^ (((unint64_t)v26 + v28) >> 22))
                + ~((((unint64_t)v26 + v28) ^ (((unint64_t)v26 + v28) >> 22)) << 13);
            v31 = (9 * (v30 ^ (v30 >> 8))) ^ ((9 * (v30 ^ (v30 >> 8))) >> 15);
            v32 = v29 & (((v31 + ~(v31 << 27)) >> 31) ^ (v31 + ~((_DWORD)v31 << 27)));
            v33 = *(WebCore::Node **)(v27 + 24 * v32);
            if (v33 == v26)
              goto LABEL_40;
            v34 = 1;
            while (v33)
            {
              v32 = (v32 + v34) & v29;
              v33 = *(WebCore::Node **)(v27 + 24 * v32);
              ++v34;
              if (v33 == v26)
                goto LABEL_40;
            }
          }
          *((_DWORD *)v26 + 6) += 2;
          v36 = v25 + 2;
          v35 = v25[2];
          if (v35
            || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v25 + 2, 8u, 0), v5 = v493, (v35 = *v36) != 0))
          {
            v37 = *(_DWORD *)(v35 - 8);
          }
          else
          {
            v37 = 0;
          }
          v38 = 0;
          v39 = (((unint64_t)v26 + v28) ^ (((unint64_t)v26 + v28) >> 22))
              + ~((((unint64_t)v26 + v28) ^ (((unint64_t)v26 + v28) >> 22)) << 13);
          v40 = (9 * (v39 ^ (v39 >> 8))) ^ ((9 * (v39 ^ (v39 >> 8))) >> 15);
          v41 = ((v40 + ~(v40 << 27)) >> 31) ^ (v40 + ~((_DWORD)v40 << 27));
          for (j = 1; ; ++j)
          {
            v43 = v41 & v37;
            v44 = (WebCore::Node ***)(v35 + 8 * v43);
            v45 = *v44;
            if (!*v44)
              break;
            if (v45 != (WebCore::Node **)-1)
            {
              v44 = v38;
              if (*v45 == v26)
              {
                if (*((_DWORD *)v26 + 6) != 2)
                {
                  *((_DWORD *)v26 + 6) -= 2;
                  goto LABEL_40;
                }
                if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                {
                  v122 = v26;
                  goto LABEL_159;
                }
                goto LABEL_40;
              }
            }
            v41 = j + v43;
            v38 = v44;
          }
          if (v38)
          {
            *v38 = 0;
            --*(_DWORD *)(*v36 - 16);
            v44 = v38;
          }
          v123 = (WebCore::Node **)WTF::fastMalloc((WTF *)0x18);
          v123[1] = 0;
          v123[2] = 0;
          *v123 = v26;
          *v44 = v123;
          v124 = *v36;
          if (*v36)
            v125 = *(_DWORD *)(v124 - 12) + 1;
          else
            v125 = 1;
          *(_DWORD *)(v124 - 12) = v125;
          v126 = *v36;
          v5 = v493;
          if (*v36)
            v127 = *(_DWORD *)(v126 - 12);
          else
            v127 = 0;
          v128 = (*(_DWORD *)(v126 - 16) + v127);
          v129 = *(unsigned int *)(v126 - 4);
          if (v129 > 0x400)
          {
            if (v129 > 2 * v128)
              goto LABEL_168;
          }
          else
          {
            if (3 * v129 > 4 * v128)
              goto LABEL_168;
            if (!(_DWORD)v129)
            {
              v140 = 8;
              goto LABEL_297;
            }
          }
          v140 = (_DWORD)v129 << (6 * *(_DWORD *)(v126 - 12) >= (2 * v129));
LABEL_297:
          v141 = v25 + 2;
          goto LABEL_298;
        }
        v105 = v25[1];
        *(_DWORD *)(v105 + 24) += 2;
        v107 = v25 + 2;
        v106 = v25[2];
        if (v106
          || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v25 + 2, 8u, 0), v5 = v493, (v106 = *v107) != 0))
        {
          v108 = *(_DWORD *)(v106 - 8);
        }
        else
        {
          v108 = 0;
        }
        v109 = 0;
        v110 = (~(v105 << 32) + v105) ^ ((unint64_t)(~(v105 << 32) + v105) >> 22);
        v111 = 9 * ((v110 + ~(v110 << 13)) ^ ((v110 + ~(v110 << 13)) >> 8));
        v112 = (v111 ^ (v111 >> 15)) + ~((v111 ^ (v111 >> 15)) << 27);
        v113 = (v112 >> 31) ^ v112;
        for (k = 1; ; ++k)
        {
          v115 = v113 & v108;
          v44 = (WebCore::Node ***)(v106 + 8 * v115);
          v116 = *v44;
          if (!*v44)
            break;
          if (v116 != (WebCore::Node **)-1)
          {
            v44 = v109;
            if (*v116 == (WebCore::Node *)v105)
            {
              if (v105)
              {
                if (*(_DWORD *)(v105 + 24) == 2)
                {
                  if ((*(_WORD *)(v105 + 30) & 0x400) == 0)
                  {
                    v122 = (WebCore::Node *)v105;
LABEL_159:
                    WebCore::Node::removedLastRef(v122);
                    v5 = v493;
                  }
                }
                else
                {
                  *(_DWORD *)(v105 + 24) -= 2;
                }
              }
LABEL_40:
              *(_DWORD *)(v11 + 24) += 2;
              v48 = v25[9];
              v47 = v25 + 9;
              v46 = v48;
              if (v48
                || (WTF::HashTable<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashMap<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WebCore::Style::TextUpdate>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>>::rehash(v47, 8u, 0), v5 = v493, (v46 = *v47) != 0))
              {
                v49 = *(_DWORD *)(v46 - 8);
              }
              else
              {
                v49 = 0;
              }
              v50 = (~(v11 << 32) + v11) ^ ((unint64_t)(~(v11 << 32) + v11) >> 22);
              v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
              v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
              v53 = v49 & ((v52 >> 31) ^ v52);
              v54 = v46 + 32 * v53;
              v55 = *(_QWORD *)v54;
              if (*(_QWORD *)v54)
              {
                v56 = 0;
                v57 = 1;
                while (v55 != v11)
                {
                  if (v55 == -1)
                    v56 = v54;
                  v53 = ((_DWORD)v53 + v57) & v49;
                  v54 = v46 + 32 * v53;
                  v55 = *(_QWORD *)v54;
                  ++v57;
                  if (!*(_QWORD *)v54)
                  {
                    if (v56)
                    {
                      *(_OWORD *)v56 = 0u;
                      *(_OWORD *)(v56 + 16) = 0u;
                      *(_DWORD *)(v56 + 12) = -1;
                      --*(_DWORD *)(*v47 - 16);
                      v54 = v56;
                    }
                    goto LABEL_50;
                  }
                }
                if (*(_DWORD *)(v11 + 24) == 2)
                {
                  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v11);
                    v5 = v493;
                  }
                }
                else
                {
                  *(_DWORD *)(v11 + 24) -= 2;
                }
                *(_QWORD *)(v54 + 8) = 0xFFFFFFFF00000000;
                if (!*(_BYTE *)(v54 + 24))
                {
                  *(_QWORD *)(v54 + 16) = v24;
                  *(_BYTE *)(v54 + 24) = 1;
                  goto LABEL_61;
                }
                if (v24)
                {
                  WebCore::RenderStyle::~RenderStyle(v24, v3);
                  if (*(_DWORD *)v24)
                  {
                    *((_OWORD *)v24 + 2) = 0u;
                    *((_OWORD *)v24 + 3) = 0u;
                    *(_OWORD *)v24 = 0u;
                    *((_OWORD *)v24 + 1) = 0u;
                  }
                  else
                  {
                    WTF::fastFree(v24, v3);
                  }
                  goto LABEL_174;
                }
LABEL_61:
                if ((v17 & 1) == 0)
LABEL_69:
                  *(_BYTE *)(v13 + 24 * v12 + 19) = 1;
                goto LABEL_70;
              }
LABEL_50:
              *(_QWORD *)v54 = v11;
              *(_QWORD *)(v54 + 8) = 0xFFFFFFFF00000000;
              if (*(_BYTE *)(v54 + 24))
              {
                v58 = *(WebCore::RenderStyle **)(v54 + 16);
                *(_QWORD *)(v54 + 16) = v24;
                if (v58)
                {
                  WebCore::RenderStyle::~RenderStyle(v58, v3);
                  if (*(_DWORD *)v59)
                  {
                    *((_OWORD *)v59 + 2) = 0u;
                    *((_OWORD *)v59 + 3) = 0u;
                    *(_OWORD *)v59 = 0u;
                    *((_OWORD *)v59 + 1) = 0u;
                  }
                  else
                  {
                    WTF::fastFree(v59, v3);
                  }
                  v5 = v493;
                }
              }
              else
              {
                *(_QWORD *)(v54 + 16) = v24;
                *(_BYTE *)(v54 + 24) = 1;
              }
              v60 = *v47;
              if (*v47)
                v61 = *(_DWORD *)(v60 - 12) + 1;
              else
                v61 = 1;
              *(_DWORD *)(v60 - 12) = v61;
              v62 = *v47;
              if (*v47)
                v63 = *(_DWORD *)(v62 - 12);
              else
                v63 = 0;
              v64 = (*(_DWORD *)(v62 - 16) + v63);
              v65 = *(unsigned int *)(v62 - 4);
              if (v65 > 0x400)
              {
                if (v65 > 2 * v64)
                  goto LABEL_61;
              }
              else
              {
                if (3 * v65 > 4 * v64)
                  goto LABEL_61;
                if (!(_DWORD)v65)
                {
                  v121 = 8;
                  goto LABEL_173;
                }
              }
              v121 = (_DWORD)v65 << (6 * *(_DWORD *)(v62 - 12) >= (2 * v65));
LABEL_173:
              WTF::HashTable<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashMap<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>,WebCore::Style::TextUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>,WTF::HashTraits<WebCore::Style::TextUpdate>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Text const,WTF::RawPtrTraits<WebCore::Text const>,WTF::DefaultRefDerefTraits<WebCore::Text const>>>>::rehash(v47, v121, (uint64_t *)v54);
LABEL_174:
              v5 = v493;
              goto LABEL_61;
            }
          }
          v113 = k + v115;
          v109 = v44;
        }
        if (v109)
        {
          *v109 = 0;
          --*(_DWORD *)(*v107 - 16);
          v44 = v109;
        }
        v123 = (WebCore::Node **)WTF::fastMalloc((WTF *)0x18);
        v123[1] = 0;
        v123[2] = 0;
        *v123 = (WebCore::Node *)v105;
        *v44 = v123;
        v134 = *v107;
        if (*v107)
          v135 = *(_DWORD *)(v134 - 12) + 1;
        else
          v135 = 1;
        *(_DWORD *)(v134 - 12) = v135;
        v136 = *v107;
        v5 = v493;
        if (*v107)
          v137 = *(_DWORD *)(v136 - 12);
        else
          v137 = 0;
        v138 = (*(_DWORD *)(v136 - 16) + v137);
        v139 = *(unsigned int *)(v136 - 4);
        if (v139 > 0x400)
        {
          if (v139 <= 2 * v138)
            goto LABEL_300;
        }
        else if (3 * v139 <= 4 * v138)
        {
          if (!(_DWORD)v139)
          {
            v140 = 8;
            goto LABEL_199;
          }
LABEL_300:
          v140 = (_DWORD)v139 << (6 * *(_DWORD *)(v136 - 12) >= (2 * v139));
LABEL_199:
          v141 = v25 + 2;
LABEL_298:
          v123 = (WebCore::Node **)*WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v141, v140, v44);
          v5 = v493;
        }
LABEL_168:
        v130 = (WebCore::Node ***)v25[4];
        v123[1] = (WebCore::Node *)v130;
        v123[2] = 0;
        if (v130)
          v131 = v130 + 2;
        else
          v131 = (WebCore::Node ***)(v25 + 3);
        *v131 = v123;
        v25[4] = v123;
        goto LABEL_40;
      }
      v98 = *(_QWORD *)(v11 + 80);
      if (v98)
      {
        v99 = *(unsigned __int8 **)(v98 + 8);
        v100 = *(unsigned int *)(v98 + 4);
        if ((*(_BYTE *)(v98 + 16) & 4) != 0)
        {
          if ((_DWORD)v100)
          {
            while (1)
            {
              v101 = *v99;
              v224 = v101 > 0x20;
              v102 = (1 << v101) & 0x100003600;
              if (v224 || v102 == 0)
                break;
              ++v99;
              if (!--v100)
                goto LABEL_124;
            }
LABEL_175:
            v17 = 0;
            v104 = v16 & 0xFF7F;
            goto LABEL_125;
          }
        }
        else if ((_DWORD)v100)
        {
          v117 = 2 * v100;
          do
          {
            v118 = *(unsigned __int16 *)v99;
            v224 = v118 > 0x20;
            v119 = (1 << v118) & 0x100003600;
            if (v224 || v119 == 0)
              goto LABEL_175;
            v99 += 2;
            v117 -= 2;
          }
          while (v117);
        }
      }
LABEL_124:
      v104 = v16 | 0x80;
      v17 = 1;
LABEL_125:
      LOWORD(v16) = v104 | 0x100;
      *(_WORD *)(v11 + 30) = v16;
      goto LABEL_15;
    }
    if ((v15 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1965B9634);
    }
    v186 = 0;
    v187 = 584 * v4;
    v188 = (_DWORD *)((char *)v508 + 280);
    do
    {
      v186 += *v188;
      v188 += 146;
      v187 -= 584;
    }
    while (v187);
    if (v186 >= 0x201)
    {
      WebCore::Style::resetStyleForNonRenderedDescendants(*v10, (WebCore::Element *)v3);
      WebCore::ComposedTreeIterator::traverseNextSkippingChildren((uint64_t)v507, v444);
      goto LABEL_144;
    }
    if ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) == 0
      || (v190 = *(WebCore::RenderStyle **)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
      || (*((_QWORD *)v190 + 2) & 0x1FLL) != 0x12)
    {
      v189 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
      if (!v189)
      {
        v190 = 0;
        goto LABEL_302;
      }
      if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v189 = *(_QWORD *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v189)
          v189 = *(_QWORD *)(v189 + 8);
      }
      v190 = (WebCore::RenderStyle *)(v189 + 80);
    }
    if (*(_QWORD *)(*(_QWORD *)v2 + 1272) == v11)
    {
      WebCore::Style::Adjuster::restoreUsedDocumentElementStyleToComputed(v190, &v523);
      v191 = (WebCore::RenderStyle *)v523;
      *(_QWORD *)&v523 = 0;
      v192 = (WebCore::RenderStyle *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = v191;
      if (v192)
      {
        WebCore::RenderStyle::~RenderStyle(v192, v3);
        if (*(_DWORD *)v193)
        {
          *((_OWORD *)v193 + 2) = 0u;
          *((_OWORD *)v193 + 3) = 0u;
          *(_OWORD *)v193 = 0u;
          *((_OWORD *)v193 + 1) = 0u;
        }
        else
        {
          WTF::fastFree(v193, v3);
        }
        v194 = (WebCore::RenderStyle *)v523;
        *(_QWORD *)&v523 = 0;
        if (v194)
        {
          WebCore::RenderStyle::~RenderStyle(v194, v3);
          if (*(_DWORD *)v195)
          {
            *((_OWORD *)v195 + 2) = 0u;
            *((_OWORD *)v195 + 3) = 0u;
            *(_OWORD *)v195 = 0u;
            *((_OWORD *)v195 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v195, v3);
          }
        }
        v191 = (WebCore::RenderStyle *)*((_QWORD *)v2 + 1);
      }
      v5 = v493;
      if (v191)
        v190 = v191;
    }
LABEL_302:
    v196 = v13 + 24 * v12;
    v199 = *(unsigned __int8 *)(v196 + 16);
    v198 = (unsigned __int8 *)(v196 + 16);
    v197 = v199;
    v200 = v198[1];
    v201 = *(_BYTE *)(v11 + 70) & 7;
    if ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v214 = *(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0xA8);
      if (v214)
      {
        v215 = *(_BYTE *)(v214 + 70) & 7;
        if (v201 <= v215)
          v201 = v215;
      }
      v216 = *(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0xB0);
      if (v216)
      {
        v217 = *(_BYTE *)(v216 + 70) & 7;
        if (v201 <= v217)
          v201 = v217;
      }
    }
    if (v198[1])
    {
      if (v201)
        goto LABEL_640;
      if (v200 != 3)
      {
        if (v200 == 4)
          goto LABEL_640;
        if (v200 == 2)
        {
          if (!v190)
          {
            LOBYTE(v203) = 0;
            v202 = 0;
            v5 = v493;
            goto LABEL_308;
          }
          v5 = v493;
          if ((*((_BYTE *)v190 + 20) & 0x10) == 0)
          {
            LODWORD(v203) = 0;
            v202 = 0;
            goto LABEL_723;
          }
          goto LABEL_640;
        }
        if (v200 != 1)
        {
          v202 = 0;
          LODWORD(v203) = 0;
          goto LABEL_586;
        }
        goto LABEL_920;
      }
      if (!v190 || v197 != 2 || (*((_BYTE *)v190 + 20) & 0x20) != 0)
        goto LABEL_640;
      v201 = 2;
    }
    else
    {
      if (!v201)
      {
        if ((*(_WORD *)(v11 + 30) & 0x20) == 0)
        {
          v202 = 0;
          LODWORD(v203) = 0;
          goto LABEL_307;
        }
LABEL_920:
        if (v190)
        {
          v201 = 0;
          goto LABEL_370;
        }
LABEL_640:
        WebCore::Element::resetComputedStyle((WebCore::Element *)v11, v3);
        WebCore::Element::resetStyleRelations(v11);
        v201 = 4;
        goto LABEL_371;
      }
      if (v201 != 1)
      {
        if (!v190 || v201 != 2)
          goto LABEL_640;
        v201 = 3;
      }
    }
LABEL_370:
    WebCore::Element::resetComputedStyle((WebCore::Element *)v11, v3);
LABEL_371:
    v227 = v493;
    if ((*(_WORD *)(v11 + 28) & 0x400) != 0)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 1016))(v11, *v198);
      v227 = v493;
    }
    v528 = v190;
    if (*((_BYTE *)v2 + 848))
    {
      if (((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) == 0
         || (v370 = *(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
         || (*(_QWORD *)(v370 + 16) & 0x1FLL) != 0x12)
        && (*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) == 0
        && !*(_BYTE *)(*(_QWORD *)v2 + 3379))
      {
        v202 = 0;
        v190 = 0;
        v203 = 0;
        *(_BYTE *)(*(_QWORD *)v2 + 3378) = 1;
        v494 = 0;
        v495 = 0;
        v496 = 0;
        goto LABEL_578;
      }
    }
    if (!v201)
    {
      v267 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
      *(_DWORD *)v267 = 0;
      v268 = (_DWORD *)*((_QWORD *)v190 + 1);
      ++*v268;
      *((_QWORD *)v267 + 1) = v268;
      *((_QWORD *)v267 + 2) = *((_QWORD *)v190 + 2);
      v269 = (_DWORD *)*((_QWORD *)v190 + 3);
      ++*v269;
      *((_QWORD *)v267 + 3) = v269;
      v270 = (_DWORD *)*((_QWORD *)v190 + 4);
      ++*v270;
      *((_QWORD *)v267 + 4) = v270;
      *((_QWORD *)v267 + 5) = *((_QWORD *)v190 + 5);
      *((_QWORD *)v267 + 6) = 0;
      v271 = (_DWORD *)*((_QWORD *)v190 + 7);
      ++*v271;
      *((_QWORD *)v267 + 7) = v271;
      v494 = v267;
      v203 = 5;
      LOWORD(v495) = 5;
      BYTE2(v495) = 0;
      v202 = 1;
      v496 = 1;
      v190 = v267;
      goto LABEL_578;
    }
    v228 = *((unsigned int *)v2 + 19);
    if (!(_DWORD)v228)
    {
      __break(0xC471u);
      JUMPOUT(0x1965BA070);
    }
    v229 = *v227 + 24 * v228;
    *(_QWORD *)&v523 = *(_QWORD *)(v229 - 16);
    v230 = -24 * v228;
    while (v230)
    {
      v231 = *(_QWORD *)(v229 - 16);
      v232 = *(_BYTE *)(v231 + 16) & 0x1F;
      if (v232 == 26)
        break;
      v229 -= 24;
      v230 += 24;
      if (v232 != 18)
        goto LABEL_383;
    }
    v231 = 0;
LABEL_383:
    v233 = *((_QWORD *)v2 + 1);
    *((_QWORD *)&v523 + 1) = v231;
    v524 = v233;
    v234 = *((unsigned int *)v2 + 7);
    if (!(_DWORD)v234)
    {
      __break(0xC471u);
      JUMPOUT(0x1965BA078);
    }
    v525 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v234 - 8) + 16;
    v526 = (char *)v2 + 872;
    v527 = 0;
    v519 = v11;
    LOBYTE(v520) = 0;
    v522 = 0;
    WebCore::Style::TreeResolver::styleForStyleable(v518, (uint64_t)v2, (uint64_t)&v519, v201, (uint64_t)&v523, (uint64_t)v190);
    if (!*((_DWORD *)v2 + 19))
    {
      __break(0xC471u);
      JUMPOUT(0x1965BA080);
    }
    WebCore::Style::TreeResolver::createAnimatedElementUpdate((uint64_t)&v515, (uint64_t)v2);
    v3 = v515;
    if ((v515[2] & 0x1FLL) == 0x1A
      && ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) == 0
       || (v393 = *(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
       || (*(_QWORD *)(v393 + 16) & 0x1FLL) != 0x12)
      && (*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) == 0
      && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 512))(v11) & 1) == 0)
    {
      v514[0] = 0;
      if ((*(_QWORD *)(v519 + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v394 = *(unsigned int *)((*(_QWORD *)(v519 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
        if ((_DWORD)v394)
        {
          v395 = *(uint64_t **)((*(_QWORD *)(v519 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
          v396 = 8 * v394;
          if (v522)
          {
            while (1)
            {
              v397 = *v395;
              if (*(_BYTE *)(*v395 + 96))
              {
                if (*(_DWORD *)(v397 + 80) == v520 && *(_QWORD *)(v397 + 88) == (_QWORD)v521)
                  break;
              }
              ++v395;
              v396 -= 8;
              if (!v396)
                goto LABEL_713;
            }
          }
          else
          {
            while (1)
            {
              v397 = *v395;
              if (!*(_BYTE *)(*v395 + 96))
                break;
              ++v395;
              v396 -= 8;
              if (!v396)
                goto LABEL_713;
            }
          }
          WebCore::ElementAnimationRareData::setLastStyleChangeEventStyle((uint64_t **)v397, v514);
          if (v514[0])
          {
            WebCore::RenderStyle::~RenderStyle(v514[0], v3);
            if (*(_DWORD *)v413)
            {
              *((_OWORD *)v413 + 2) = 0u;
              *((_OWORD *)v413 + 3) = 0u;
              *(_OWORD *)v413 = 0u;
              *((_OWORD *)v413 + 1) = 0u;
            }
            else
            {
              WTF::fastFree(v413, v3);
            }
          }
        }
      }
LABEL_713:
      v190 = (WebCore::RenderStyle *)v515;
      if ((v515[2] & 0x1FLL) == 0x1A
        && (*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) != 0
        && (v399 = *(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) != 0
        && (*(_QWORD *)(v399 + 16) & 0x1FLL) == 0x1A)
      {
        v202 = 0;
        v515 = 0;
        v494 = v190;
        LOWORD(v495) = v516;
        BYTE2(v495) = v517;
        v496 = 0;
      }
      else
      {
        v494 = 0;
        v495 = 0;
        v496 = 0;
        v515 = 0;
        WebCore::RenderStyle::~RenderStyle(v190, v3);
        if (*(_DWORD *)v190)
        {
          v202 = 0;
          *((_OWORD *)v190 + 2) = 0u;
          *((_OWORD *)v190 + 3) = 0u;
          *(_OWORD *)v190 = 0u;
          *((_OWORD *)v190 + 1) = 0u;
        }
        else
        {
          WTF::fastFree(v190, v3);
          v202 = 0;
        }
        v190 = 0;
      }
      goto LABEL_573;
    }
    v236 = *((_DWORD *)v2 + 19);
    if (!v236)
    {
      __break(0xC471u);
      JUMPOUT(0x1965BA088);
    }
    v488 = (uint64_t *)&v516;
    v489 = (WebCore::Style::Scope *)&v495;
    v237 = 4;
    if ((*(_BYTE *)(v11 + 70) & 4) != 0 || *(_BYTE *)(*v493 + 24 * v236 - 7) == 4)
      goto LABEL_516;
    v238 = v528;
    v239 = v516;
    if (!v528 || !(_BYTE)v516)
    {
LABEL_513:
      v224 = v239 > 5;
      v315 = 0x40403030200uLL >> (8 * v239);
      if (v224)
        v237 = 0;
      else
        v237 = v315;
      goto LABEL_516;
    }
    v240 = *((unsigned int *)v2 + 7);
    if (!(_DWORD)v240)
    {
      __break(0xC471u);
      JUMPOUT(0x1965BA058);
    }
    v241 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v240 - 8) + 8);
    v242 = (WebCore::RenderStyle **)(v241 + 320);
    if (!*(_BYTE *)(v241 + 328))
    {
      v512 = 0;
      v529[0] = &v512;
      WebCore::Style::ScopeRuleSets::customPropertyNamesInStyleContainerQueries(void)const::$_0::operator()<WebCore::Style::RuleSet>((uint64_t)v529, *(_QWORD *)(v241 + 32));
      v411 = v241;
      if (*(_BYTE *)(v241 + 348))
      {
        v411 = v241;
        do
        {
          v439 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v411 + 64) + 16) + 8) + 1328);
          if (!*(_QWORD *)(v439 + 32))
          {
            if (*(_QWORD *)(v439 + 24))
              WebCore::Style::Scope::createOrFindSharedShadowTreeResolver((unsigned int *)v439);
            else
              WebCore::Style::Scope::createDocumentResolver((WebCore::Style::Scope *)v439);
            v471 = *(_QWORD *)(v439 + 32);
            if (*(_DWORD *)(v471 + 340) < WebCore::Style::UserAgentStyle::defaultStyleVersion)
              WebCore::Style::ScopeRuleSets::collectFeatures((WebCore::Style::ScopeRuleSets *)(v471 + 32));
            if (*(_BYTE *)(v471 + 242)
              || *(_BYTE *)(v471 + 243)
              || *(_BYTE *)(v471 + 244)
              || *(_BYTE *)(v471 + 245)
              || *(_BYTE *)(v471 + 246)
              || *(_BYTE *)(v471 + 247)
              || *(_BYTE *)(v471 + 248))
            {
              *(_BYTE *)(v439 + 236) = 1;
            }
          }
          v411 = *(_QWORD *)(v439 + 32);
        }
        while (*(_BYTE *)(v411 + 348));
      }
      WebCore::Style::ScopeRuleSets::customPropertyNamesInStyleContainerQueries(void)const::$_0::operator()<WebCore::Style::RuleSet>((uint64_t)v529, *(_QWORD *)(v411 + 56));
      if (*(_BYTE *)(v241 + 328))
      {
        WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)v514, (uint64_t *)&v512);
        v412 = *v242;
        *v242 = v514[0];
        v514[0] = v412;
        v487 = v412;
        if (v412)
        {
          v436 = *((unsigned int *)v487 - 1);
          if ((_DWORD)v436)
          {
            v437 = (WTF::StringImpl **)v487;
            do
            {
              v438 = *v437;
              if (*v437 != (WTF::StringImpl *)-1)
              {
                *v437 = 0;
                if (v438)
                {
                  if (*(_DWORD *)v438 == 2)
                    WTF::StringImpl::destroy(v438, (WTF::StringImpl *)v3);
                  else
                    *(_DWORD *)v438 -= 2;
                }
              }
              ++v437;
              --v436;
            }
            while (v436);
          }
          WTF::fastFree((WTF::StringImpl *)((char *)v487 - 16), v3);
        }
      }
      else
      {
        WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)(v241 + 320), (uint64_t *)&v512);
        *(_BYTE *)(v241 + 328) = 1;
      }
      v487 = v512;
      if (v512)
      {
        v433 = *((unsigned int *)v487 - 1);
        if ((_DWORD)v433)
        {
          v434 = (WTF::StringImpl **)v487;
          do
          {
            v435 = *v434;
            if (*v434 != (WTF::StringImpl *)-1)
            {
              *v434 = 0;
              if (v435)
              {
                if (*(_DWORD *)v435 == 2)
                  WTF::StringImpl::destroy(v435, (WTF::StringImpl *)v3);
                else
                  *(_DWORD *)v435 -= 2;
              }
            }
            ++v434;
            --v433;
          }
          while (v433);
        }
        WTF::fastFree((WTF::StringImpl *)((char *)v487 - 16), v3);
      }
      if (!*(_BYTE *)(v241 + 328))
      {
        __break(1u);
LABEL_800:
        if (v2)
        {
          v508 = 0;
          v509 = 0;
          WTF::fastFree(v2, v3);
        }
        return;
      }
    }
    v243 = *v242;
    if (*v242)
    {
      v244 = *((unsigned int *)v243 - 1);
      v245 = (WebCore::RenderStyle *)((char *)v243 + 8 * v244);
      if (*((_DWORD *)v243 - 3))
      {
        v246 = *v242;
        if ((_DWORD)v244)
        {
          v247 = 8 * v244;
          v246 = *v242;
          do
          {
            if ((unint64_t)(*(_QWORD *)v246 + 1) > 1)
              goto LABEL_443;
            v246 = (WebCore::RenderStyle *)((char *)v246 + 8);
            v247 -= 8;
          }
          while (v247);
          v246 = v245;
        }
        goto LABEL_443;
      }
      v246 = (WebCore::RenderStyle *)((char *)v243 + 8 * v244);
    }
    else
    {
      v246 = 0;
      v244 = 0;
    }
    v245 = (WebCore::RenderStyle *)((char *)v243 + 8 * v244);
LABEL_443:
    if (v243)
      v277 = (WebCore::RenderStyle *)((char *)v243 + 8 * *((unsigned int *)v243 - 1));
    else
      v277 = 0;
    while (v246 != v277)
    {
      v278 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v238 + 1) + 40) + 288);
      v279 = *(_QWORD *)(*(_QWORD *)(v515[1] + 40) + 288);
      v280 = *(_QWORD *)(*((_QWORD *)v238 + 3) + 216);
      if (v278 != v279 || v280 != *(_QWORD *)(v515[3] + 216))
      {
        if (v278)
        {
          v281 = *(_QWORD *)v246;
          do
          {
            v282 = *(_QWORD *)(v278 + 16);
            if (v282)
            {
              v283 = 0;
              for (m = *(_DWORD *)(v281 + 16) >> 8; ; m = v283 + v285)
              {
                v285 = m & *(_DWORD *)(v282 - 8);
                v286 = *(_QWORD *)(v282 + 16 * v285);
                if (!v286)
                  break;
                if (v286 != -1 && v286 == v281)
                {
                  v288 = *(_QWORD *)(v282 + 16 * v285 + 8);
                  if (v288)
                    goto LABEL_473;
                  break;
                }
                ++v283;
              }
            }
            v278 = *(_QWORD *)(v278 + 8);
          }
          while (v278);
        }
        if (v280)
        {
          v289 = *(_QWORD *)v246;
          do
          {
            v290 = *(_QWORD *)(v280 + 16);
            if (v290)
            {
              v291 = 0;
              for (n = *(_DWORD *)(v289 + 16) >> 8; ; n = v291 + v293)
              {
                v293 = n & *(_DWORD *)(v290 - 8);
                v294 = *(_QWORD *)(v290 + 16 * v293);
                if (!v294)
                  break;
                if (v294 != -1 && v294 == v289)
                {
                  v288 = *(_QWORD *)(v290 + 16 * v293 + 8);
                  if (v288)
                    goto LABEL_473;
                  break;
                }
                ++v291;
              }
            }
            v280 = *(_QWORD *)(v280 + 8);
          }
          while (v280);
        }
        v288 = 0;
LABEL_473:
        if (v279)
        {
          v296 = *(_QWORD *)v246;
          do
          {
            v297 = *(_QWORD *)(v279 + 16);
            if (v297)
            {
              v298 = 0;
              for (ii = *(_DWORD *)(v296 + 16) >> 8; ; ii = v298 + v300)
              {
                v300 = ii & *(_DWORD *)(v297 - 8);
                v301 = *(_QWORD *)(v297 + 16 * v300);
                if (!v301)
                  break;
                if (v301 != -1 && v301 == v296)
                {
                  v303 = *(_QWORD *)(v297 + 16 * v300 + 8);
                  if (v303)
                    goto LABEL_498;
                  break;
                }
                ++v298;
              }
            }
            v279 = *(_QWORD *)(v279 + 8);
          }
          while (v279);
        }
        v304 = *(_QWORD *)(v515[3] + 216);
        if (v304)
        {
          v305 = *(_QWORD *)v246;
          do
          {
            v306 = *(_QWORD *)(v304 + 16);
            if (v306)
            {
              v307 = 0;
              for (jj = *(_DWORD *)(v305 + 16) >> 8; ; jj = v307 + v309)
              {
                v309 = jj & *(_DWORD *)(v306 - 8);
                v310 = *(_QWORD *)(v306 + 16 * v309);
                if (!v310)
                  break;
                if (v310 != -1 && v310 == v305)
                {
                  v303 = *(_QWORD *)(v306 + 16 * v309 + 8);
                  if (v303)
                    goto LABEL_498;
                  break;
                }
                ++v307;
              }
            }
            v304 = *(_QWORD *)(v304 + 8);
          }
          while (v304);
        }
        v303 = 0;
LABEL_498:
        if (v288 != v303)
        {
          v237 = 4;
          if (!v288 || !v303)
            goto LABEL_516;
          v312 = *(unsigned __int16 *)(v288 + 4) | (*(unsigned __int8 *)(v288 + 6) << 16);
          v313 = *(unsigned __int16 *)(v303 + 4) | (*(unsigned __int8 *)(v303 + 6) << 16);
          if (((v313 ^ v312) & 0x3F800) != 0)
          {
            if ((v312 & 0x3F800) == 0x1D800)
            {
LABEL_936:
              v445 = v288;
              while (*(_DWORD *)(v445 + 8) == 1)
              {
                v445 = *(_QWORD *)(v445 + 16);
                v446 = *(unsigned __int16 *)(v445 + 4) | (*(unsigned __int8 *)(v445 + 6) << 16);
                if (((v446 ^ v313) & 0x3F800) == 0)
                {
                  v512 = (WTF::StringImpl *)v303;
                  v514[0] = (WebCore::RenderStyle *)&v512;
                  if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v445, (const WebCore::CSSLinearGradientValue ***)v514, v235) & 1) != 0)goto LABEL_503;
                  goto LABEL_981;
                }
                if ((v446 & 0x3F800) != 0x1D800)
                {
                  v478 = v313 & 0x3F800;
                  v237 = 4;
                  v313 = *(unsigned __int16 *)(v445 + 4) | (*(unsigned __int8 *)(v445 + 6) << 16);
                  v288 = v303;
                  v303 = v445;
                  if (v478 == 120832)
                    goto LABEL_936;
                  goto LABEL_516;
                }
              }
              goto LABEL_981;
            }
            if ((v313 & 0x3F800) == 0x1D800)
            {
LABEL_977:
              v460 = v303;
              while (*(_DWORD *)(v460 + 8) == 1)
              {
                v460 = *(_QWORD *)(v460 + 16);
                v461 = *(unsigned __int16 *)(v460 + 4) | (*(unsigned __int8 *)(v460 + 6) << 16);
                if (((v461 ^ v312) & 0x3F800) == 0)
                {
                  v512 = (WTF::StringImpl *)v288;
                  v514[0] = (WebCore::RenderStyle *)&v512;
                  if (_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v460, (const WebCore::CSSLinearGradientValue ***)v514, v235))goto LABEL_503;
                  break;
                }
                if ((v461 & 0x3F800) != 0x1D800)
                {
                  v479 = v312 & 0x3F800;
                  v237 = 4;
                  v312 = *(unsigned __int16 *)(v460 + 4) | (*(unsigned __int8 *)(v460 + 6) << 16);
                  v303 = v288;
                  v288 = v460;
                  if (v479 == 120832)
                    goto LABEL_977;
                  goto LABEL_516;
                }
              }
LABEL_981:
              v237 = 4;
            }
LABEL_516:
            v487 = *(WTF::StringImpl **)(*(_QWORD *)v2 + 1272);
            if (v487 == (WTF::StringImpl *)v11)
            {
              v354 = v528;
              if (!v528
                || (v372 = (WebCore::RenderStyle *)v515,
                    !WebCore::FontCascade::operator==(*((_QWORD *)v528 + 4) + 32, v515[4] + 32))
                || (v373 = WebCore::RenderStyle::computedLineHeight(v354, v3),
                    v373 != WebCore::RenderStyle::computedLineHeight(v372, v374)))
              {
                v355 = *((unsigned int *)v2 + 7);
                if (!(_DWORD)v355)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1965BA0B0);
                }
                v356 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v355 - 8) + 8);
                v357 = *(_QWORD *)(v356 + 424);
                if (v357)
                {
                  *(_QWORD *)(v356 + 424) = 0;
                  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry>>,WTF::AlreadyHashed,WTF::HashMap<unsigned int,WebCore::Style::MatchedDeclarationsCache::Entry,WTF::AlreadyHashed,WTF::HashTraits<unsigned int>,WTF::HashTraits<WebCore::Style::MatchedDeclarationsCache::Entry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::deallocateTable(v357, v3);
                }
                v237 = 4;
              }
            }
            v316 = *(_QWORD *)v2;
            v317 = *(_QWORD *)(*(_QWORD *)v2 + 1272);
            if (!v317)
              goto LABEL_526;
            if ((*(_WORD *)(v317 + 28) & 0x10) == 0)
              goto LABEL_526;
            if (*(_QWORD *)(*(_QWORD *)(v317 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::htmlTag + 24))
              goto LABEL_526;
            v318 = *(_QWORD *)(v317 + 80);
            if (!v318)
              goto LABEL_526;
            while ((*(_WORD *)(v318 + 28) & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(v318 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::bodyTag + 24))
            {
              v318 = *(_QWORD *)(v318 + 56);
              if (!v318)
                goto LABEL_526;
            }
            if (v318 != v11)
            {
LABEL_526:
              if ((*(_WORD *)(v11 + 28) & 0x10) != 0)
              {
                v319 = *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24);
                v320 = v319 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24);
                if (v319 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
                {
                  *(_DWORD *)(v11 + 24) += 2;
                  v321 = v528;
                  if (*(_DWORD *)(*(_QWORD *)(v11 + 240) + 12) == 0x8000)
                  {
                    v322 = 0;
                    v323 = v11;
                    goto LABEL_537;
                  }
                  v323 = v11;
                }
                else
                {
                  v323 = 0;
                  v321 = v528;
                }
                v322 = !v320;
                if (v319 == *(_QWORD *)(WebCore::HTMLNames::meterTag + 24))
                {
LABEL_537:
                  if (v321)
                  {
LABEL_538:
                    if (((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v321 + 1) + 32) + 148) ^ *(_DWORD *)(*(_QWORD *)(v515[1] + 32) + 148)) & 0x1FC000) != 0)
                    {
                      LOBYTE(v516) = 5;
                      v237 = 4;
                    }
                  }
                }
                else if (v319 == *(_QWORD *)(WebCore::HTMLNames::progressTag + 24) && v321 != 0)
                {
                  goto LABEL_538;
                }
                if (!v322)
                {
                  if (*(_DWORD *)(v323 + 24) == 2)
                  {
                    if ((*(_WORD *)(v323 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v323);
                  }
                  else
                  {
                    *(_DWORD *)(v323 + 24) -= 2;
                  }
                }
              }
              v514[0] = v2;
              v514[1] = (WebCore::RenderStyle *)v11;
              v514[2] = (WebCore::RenderStyle *)&v515;
              v514[3] = (WebCore::RenderStyle *)&v528;
              LODWORD(v512) = 1;
              v325 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
              v326 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
              if (*MEMORY[0x1E0CBF2F8])
              {
                *(_DWORD *)v326 += 2;
                v513 = v326;
                v328 = WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                if (*(_DWORD *)v326 == 2)
                  WTF::StringImpl::destroy(v326, v327);
                else
                  *(_DWORD *)v326 -= 2;
              }
              else
              {
                v513 = 0;
                v328 = WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
              }
              LODWORD(v512) = 2;
              v329 = *v325;
              if (v329)
              {
                *(_DWORD *)v329 += 2;
                v513 = v329;
                v331 = WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                if (*(_DWORD *)v329 == 2)
                  WTF::StringImpl::destroy(v329, v330);
                else
                  *(_DWORD *)v329 -= 2;
              }
              else
              {
                v513 = 0;
                v331 = WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
              }
              LODWORD(v512) = 10;
              v332 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
              if (*MEMORY[0x1E0CBF2F8])
              {
                *(_DWORD *)v332 += 2;
                v513 = v332;
                v334 = WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                if (*(_DWORD *)v332 == 2)
                  WTF::StringImpl::destroy(v332, v333);
                else
                  *(_DWORD *)v332 -= 2;
              }
              else
              {
                v513 = 0;
                v334 = WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
              }
              if (v334 | v331 | v328)
                v202 = 4;
              else
                v202 = v237;
              LODWORD(v512) = 5;
              v335 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
              v336 = (WTF::StringImpl *)*MEMORY[0x1E0CBF2F8];
              if (*MEMORY[0x1E0CBF2F8])
              {
                *(_DWORD *)v336 += 2;
                v513 = v336;
                WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                v338 = v487;
                if (*(_DWORD *)v336 == 2)
                  WTF::StringImpl::destroy(v336, v337);
                else
                  *(_DWORD *)v336 -= 2;
              }
              else
              {
                v513 = 0;
                WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                v338 = v487;
              }
              LODWORD(v512) = 6;
              v339 = *v335;
              if (*v335)
              {
                *(_DWORD *)v339 += 2;
                v513 = v339;
                WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                if (*(_DWORD *)v339 == 2)
                  WTF::StringImpl::destroy(v339, v340);
                else
                  *(_DWORD *)v339 -= 2;
              }
              else
              {
                v513 = 0;
                WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
              }
              LODWORD(v512) = 7;
              v341 = *v335;
              if (*v335)
              {
                *(_DWORD *)v341 += 2;
                v513 = v341;
                WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                if (*(_DWORD *)v341 == 2)
                  WTF::StringImpl::destroy(v341, v342);
                else
                  *(_DWORD *)v341 -= 2;
              }
              else
              {
                v513 = 0;
                WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
              }
              LODWORD(v512) = 9;
              v343 = *v335;
              if (*v335)
              {
                *(_DWORD *)v343 += 2;
                v513 = v343;
                WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                if (*(_DWORD *)v343 == 2)
                  WTF::StringImpl::destroy(v343, (WTF::StringImpl *)v3);
                else
                  *(_DWORD *)v343 -= 2;
              }
              else
              {
                v513 = 0;
                WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
              }
              if (v338 == (WTF::StringImpl *)v11 && *(_BYTE *)(*(_QWORD *)v2 + 3440))
              {
                LODWORD(v512) = 12;
                v358 = *v335;
                if (*v335)
                {
                  *(_DWORD *)v358 += 2;
                  v513 = v358;
                  WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                  if (*(_DWORD *)v358 == 2)
                    WTF::StringImpl::destroy(v358, (WTF::StringImpl *)v3);
                  else
                    *(_DWORD *)v358 -= 2;
                }
                else
                {
                  v513 = 0;
                  WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                }
                v359 = *(_QWORD *)(*(_QWORD *)v2 + 2112);
                if (v359)
                  ++*(_DWORD *)(v359 + 24);
                v360 = *(_QWORD *)(v359 + 48);
                if (!v360)
                  goto LABEL_1069;
                do
                {
                  LODWORD(v512) = 13;
                  v480 = *(WTF::StringImpl **)v360;
                  if (*(_QWORD *)v360)
                  {
                    *(_DWORD *)v480 += 2;
                    v513 = v480;
                    WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                    if (*(_DWORD *)v480 == 2)
                      WTF::StringImpl::destroy(v480, v481);
                    else
                      *(_DWORD *)v480 -= 2;
                  }
                  else
                  {
                    v513 = 0;
                    WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                  }
                  LODWORD(v512) = 14;
                  v482 = *(WTF::StringImpl **)v360;
                  if (*(_QWORD *)v360)
                  {
                    *(_DWORD *)v482 += 2;
                    v513 = v482;
                    WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                    if (*(_DWORD *)v482 == 2)
                      WTF::StringImpl::destroy(v482, v483);
                    else
                      *(_DWORD *)v482 -= 2;
                  }
                  else
                  {
                    v513 = 0;
                    WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                  }
                  LODWORD(v512) = 16;
                  v484 = *(WTF::StringImpl **)v360;
                  if (*(_QWORD *)v360)
                  {
                    *(_DWORD *)v484 += 2;
                    v513 = v484;
                    WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                    if (*(_DWORD *)v484 == 2)
                      WTF::StringImpl::destroy(v484, v485);
                    else
                      *(_DWORD *)v484 -= 2;
                  }
                  else
                  {
                    v513 = 0;
                    WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                  }
                  LODWORD(v512) = 15;
                  v486 = *(WTF::StringImpl **)v360;
                  if (*(_QWORD *)v360)
                  {
                    *(_DWORD *)v486 += 2;
                    v513 = v486;
                    WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                    if (*(_DWORD *)v486 == 2)
                      WTF::StringImpl::destroy(v486, (WTF::StringImpl *)v3);
                    else
                      *(_DWORD *)v486 -= 2;
                  }
                  else
                  {
                    v513 = 0;
                    WebCore::Style::TreeResolver::resolveElement(WebCore::Element &,WebCore::RenderStyle const*,WebCore::Style::TreeResolver::ResolutionType)::$_0::operator()((uint64_t)v514, &v512);
                  }
                  v360 = *(_QWORD *)(v360 + 16);
                }
                while (v360);
                if (v359)
                {
LABEL_1069:
                  if (*(_DWORD *)(v359 + 24) == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v359 + 16))(v359);
                  else
                    --*(_DWORD *)(v359 + 24);
                }
              }
              v345 = v488;
              v344 = v489;
              if (*(_BYTE *)(*(_QWORD *)(v515[1] + 40) + 460) != 1)
              {
                v351 = *(WebCore::Quirks **)(*(_QWORD *)v2 + 688);
                if (!v351)
                  v351 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)v2);
                if ((WebCore::Quirks::shouldDisablePointerEventsQuirk(v351) & 1) == 0)
                  *(_BYTE *)(*(_QWORD *)v2 + 3443) = 1;
              }
              v190 = (WebCore::RenderStyle *)v515;
              v346 = v515[3];
              if ((*(_BYTE *)(v346 + 239) & 1) == 0 && (*(_BYTE *)(v346 + 228) & 0x30) != 0)
                *(_BYTE *)(*(_QWORD *)v2 + 3444) = 1;
              v515 = 0;
              v494 = v190;
              *(_WORD *)v344 = *(_WORD *)v345;
              *((_BYTE *)v344 + 2) = *((_BYTE *)v345 + 2);
              v496 = v202;
LABEL_573:
              WebCore::Style::ResolvedStyle::~ResolvedStyle((WebCore::Style::ResolvedStyle *)v518, v3);
              if (v522)
              {
                v347 = v521;
                v521 = 0;
                if (v347)
                {
                  if (*(_DWORD *)v347 == 2)
                    WTF::StringImpl::destroy(v347, (WTF::StringImpl *)v3);
                  else
                    *(_DWORD *)v347 -= 2;
                }
              }
              v203 = v495;
LABEL_578:
              if ((*(_WORD *)(v11 + 28) & 0x400) != 0)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 1024))(v11, v203);
              if (v190)
              {
                WebCore::Style::Update::addElement(*((uint64_t **)v2 + 117), (WebCore::Node *)v11, *v14, &v494);
                if (v11 == *(_QWORD *)(*(_QWORD *)v2 + 1272))
                {
                  WebCore::RenderStyle::clonePtr(v190, &v523);
                  v405 = (WebCore::RenderStyle *)*((_QWORD *)v2 + 1);
                  *((_QWORD *)v2 + 1) = v523;
                  if (v405)
                  {
                    WebCore::RenderStyle::~RenderStyle(v405, v3);
                    if (*(_DWORD *)v406)
                    {
                      *((_OWORD *)v406 + 2) = 0u;
                      *((_OWORD *)v406 + 3) = 0u;
                      *(_OWORD *)v406 = 0u;
                      *((_OWORD *)v406 + 1) = 0u;
                    }
                    else
                    {
                      WTF::fastFree(v406, v3);
                    }
                  }
                }
              }
              else if ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) != 0)
              {
                v383 = *(_QWORD *)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x38);
                if (v383)
                {
                  if ((*(_QWORD *)(v383 + 16) & 0x1FLL) == 0x1A)
                    WebCore::Style::Update::addElement(*((uint64_t **)v2 + 117), (WebCore::Node *)v11, *v14, &v494);
                }
              }
              v348 = *(_QWORD *)(v11 + 72);
              *(_QWORD *)(v11 + 64) &= 0xFFF8FFFFFFFFFFFFLL;
              *(_WORD *)(v11 + 30) &= 0xFF8Fu;
              v349 = v348 & 0xFFFFFFFFFFFFLL;
              if ((v348 & 0xFFFFFFFFFFFFLL) != 0)
              {
                v352 = *(_QWORD *)((v348 & 0xFFFFFFFFFFFFLL) + 0xA8);
                if (v352)
                {
                  *(_QWORD *)(v352 + 64) &= 0xFFF8FFFFFFFFFFFFLL;
                  *(_WORD *)(v352 + 30) &= 0xFF8Fu;
                }
                v353 = *(_QWORD *)(v349 + 176);
                if (v353)
                {
                  *(_QWORD *)(v353 + 64) &= 0xFFF8FFFFFFFFFFFFLL;
                  *(_WORD *)(v353 + 30) &= 0xFF8Fu;
                }
              }
              if (v494)
              {
                WebCore::RenderStyle::~RenderStyle(v494, v3);
                if (*(_DWORD *)v350)
                {
                  *((_OWORD *)v350 + 2) = 0u;
                  *((_OWORD *)v350 + 3) = 0u;
                  *(_OWORD *)v350 = 0u;
                  *((_OWORD *)v350 + 1) = 0u;
                }
                else
                {
                  WTF::fastFree(v350, v3);
                }
              }
LABEL_586:
              v5 = v493;
LABEL_307:
              if (!v190)
              {
LABEL_308:
                v190 = *(WebCore::RenderStyle **)(v11 + 80);
                if (v190)
                {
                  while ((*((_WORD *)v190 + 14) & 8) == 0)
                  {
                    v190 = (WebCore::RenderStyle *)*((_QWORD *)v190 + 7);
                    if (!v190)
                      goto LABEL_339;
                  }
                  while (1)
                  {
                    while (1)
                    {
LABEL_676:
                      v381 = *((_QWORD *)v190 + 8);
                      if ((v381 & 0x7000000000000) != 0 || (*((_WORD *)v190 + 15) & 0x20) != 0)
                      {
                        WebCore::Element::resetComputedStyle(v190, v3);
                        WebCore::Element::resetStyleRelations((uint64_t)v190);
                        v5 = v493;
                        v381 = *((_QWORD *)v190 + 8) & 0xFFF8FFFFFFFFFFFFLL;
                        *((_QWORD *)v190 + 8) = v381;
                        *((_WORD *)v190 + 15) &= 0xFF8Fu;
                      }
                      if ((v381 & 0x8000000000000) == 0)
                        break;
                      *((_QWORD *)v190 + 8) = v381 & 0xFFE7FFFFFFFFFFFFLL;
                      v379 = *((_QWORD *)v190 + 10);
                      if (!v379)
                      {
                        if (v190 == (WebCore::RenderStyle *)v11)
                          goto LABEL_339;
                        while (1)
                        {
                          v379 = *((_QWORD *)v190 + 7);
                          if (v379)
                            break;
                          v190 = (WebCore::RenderStyle *)*((_QWORD *)v190 + 4);
                          if (v190)
                            v380 = v190 == (WebCore::RenderStyle *)v11;
                          else
                            v380 = 1;
                          if (v380)
                            goto LABEL_339;
                        }
                      }
                      v190 = (WebCore::RenderStyle *)v379;
                      if ((*(_WORD *)(v379 + 28) & 8) == 0)
                      {
                        while (v379 != v11)
                        {
                          while (1)
                          {
                            v190 = *(WebCore::RenderStyle **)(v379 + 56);
                            if (v190)
                              break;
                            v379 = *(_QWORD *)(v379 + 32);
                            if (v379)
                              v382 = v379 == v11;
                            else
                              v382 = 1;
                            if (v382)
                              goto LABEL_339;
                          }
                          v379 = *(_QWORD *)(v379 + 56);
                          if ((*((_WORD *)v190 + 14) & 8) != 0)
                            goto LABEL_676;
                        }
                        goto LABEL_339;
                      }
                    }
                    if (v190 == (WebCore::RenderStyle *)v11)
                      goto LABEL_339;
                    if (!*((_QWORD *)v190 + 7))
                      break;
                    v190 = (WebCore::RenderStyle *)*((_QWORD *)v190 + 7);
LABEL_653:
                    if ((*((_WORD *)v190 + 14) & 8) == 0)
                    {
                      v377 = v190;
                      while (v377 != (WebCore::RenderStyle *)v11)
                      {
                        while (1)
                        {
                          v190 = (WebCore::RenderStyle *)*((_QWORD *)v377 + 7);
                          if (v190)
                            break;
                          v377 = (WebCore::RenderStyle *)*((_QWORD *)v377 + 4);
                          if (v377)
                            v378 = v377 == (WebCore::RenderStyle *)v11;
                          else
                            v378 = 1;
                          if (v378)
                            goto LABEL_339;
                        }
                        v377 = (WebCore::RenderStyle *)*((_QWORD *)v377 + 7);
                        if ((*((_WORD *)v190 + 14) & 8) != 0)
                          goto LABEL_676;
                      }
                      goto LABEL_339;
                    }
                  }
                  v375 = v190;
                  while (1)
                  {
                    v375 = (WebCore::RenderStyle *)*((_QWORD *)v375 + 4);
                    if (!v375 || v375 == (WebCore::RenderStyle *)v11)
                      break;
                    v190 = (WebCore::RenderStyle *)*((_QWORD *)v375 + 7);
                    if (v190)
                      goto LABEL_653;
                  }
LABEL_339:
                  v190 = 0;
                }
                v204 = 0;
                *(_QWORD *)(v11 + 64) &= 0xFFE7FFFFFFFFFFFFLL;
LABEL_310:
                if (!*((_BYTE *)v2 + 848))
                {
                  v205 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)v2 + 1328) + 176);
                  if (v205 && *((_DWORD *)v205 - 3))
                  {
                    v489 = *(WebCore::Style::Scope **)(*(_QWORD *)v2 + 1328);
                    v218 = *((unsigned int *)v205 - 1);
                    if ((_DWORD)v218)
                    {
                      v219 = 8 * v218;
                      v220 = v205;
                      v5 = v493;
                      while ((unint64_t)(*v220 + 1) <= 1)
                      {
                        LOBYTE(hasPendingSheetInBody) = 0;
                        ++v220;
                        v219 -= 8;
                        if (!v219)
                          goto LABEL_313;
                      }
                    }
                    else
                    {
                      v220 = v205;
                    }
                    v416 = &v205[v218];
                    if (v220 == v416)
                    {
LABEL_859:
                      LOBYTE(hasPendingSheetInBody) = 0;
                      v5 = v493;
                    }
                    else
                    {
                      v417 = *v220;
                      while (!*(_QWORD *)(v417 + 8))
                      {
                        if (++v220 != v416)
                        {
                          while (1)
                          {
                            v417 = *v220;
                            if ((unint64_t)(*v220 + 1) > 1)
                              break;
                            LOBYTE(hasPendingSheetInBody) = 0;
                            ++v220;
                            v5 = v493;
                            if (v220 == v416)
                              goto LABEL_313;
                          }
                          if (v220 != v416)
                            continue;
                        }
                        goto LABEL_859;
                      }
                      hasPendingSheetInBody = WebCore::Style::Scope::hasPendingSheetInBody(v489, *(_QWORD *)(v11 + 16));
                      v5 = v493;
                      if (((v204 | hasPendingSheetInBody) & 1) == 0)
                      {
                        v418 = *(_QWORD *)(v11 + 80);
                        if (v418)
                        {
                          for (kk = *(_WORD *)(v418 + 28); (kk & 8) == 0; v418 = v420)
                          {
                            if ((kk & 4) == 0 || (v420 = *(_QWORD *)(v418 + 80)) == 0)
                            {
                              if (v418 == v11)
                                goto LABEL_859;
                              while (1)
                              {
                                v420 = *(_QWORD *)(v418 + 56);
                                if (v420)
                                  break;
                                v418 = *(_QWORD *)(v418 + 32);
                                if (v418)
                                  v421 = v418 == v11;
                                else
                                  v421 = 1;
                                if (v421)
                                  goto LABEL_859;
                              }
                            }
                            kk = *(_WORD *)(v420 + 28);
                          }
                          v422 = WebCore::Style::Scope::hasPendingSheetInBody(v489, *(_QWORD *)(v418 + 16));
                          v5 = v493;
                          if ((v422 & 1) != 0)
                          {
                            LOBYTE(hasPendingSheetInBody) = 1;
                          }
                          else
                          {
                            do
                            {
                              v423 = *(_QWORD *)(v418 + 80);
                              if (!v423)
                              {
                                if (v418 == v11)
                                  goto LABEL_859;
                                while (1)
                                {
                                  v423 = *(_QWORD *)(v418 + 56);
                                  if (v423)
                                    break;
                                  v418 = *(_QWORD *)(v418 + 32);
                                  if (v418)
                                    v427 = v418 == v11;
                                  else
                                    v427 = 1;
                                  if (v427)
                                    goto LABEL_859;
                                }
                              }
                              v424 = *(_WORD *)(v423 + 28);
                              if ((v424 & 8) != 0)
                              {
                                v418 = v423;
                              }
                              else
                              {
                                do
                                {
                                  if ((v424 & 4) == 0 || (v418 = *(_QWORD *)(v423 + 80)) == 0)
                                  {
                                    if (v423 == v11)
                                      goto LABEL_859;
                                    while (1)
                                    {
                                      v418 = *(_QWORD *)(v423 + 56);
                                      if (v418)
                                        break;
                                      v423 = *(_QWORD *)(v423 + 32);
                                      if (v423)
                                        v425 = v423 == v11;
                                      else
                                        v425 = 1;
                                      if (v425)
                                        goto LABEL_859;
                                    }
                                  }
                                  v424 = *(_WORD *)(v418 + 28);
                                  v423 = v418;
                                }
                                while ((v424 & 8) == 0);
                              }
                              v426 = WebCore::Style::Scope::hasPendingSheetInBody(v489, *(_QWORD *)(v418 + 16));
                              LOBYTE(hasPendingSheetInBody) = 1;
                              v5 = v493;
                            }
                            while ((v426 & 1) == 0);
                          }
                        }
                        else
                        {
                          LOBYTE(hasPendingSheetInBody) = 0;
                          v5 = v493;
                        }
                      }
                    }
                  }
                  else
                  {
                    LOBYTE(hasPendingSheetInBody) = 0;
                  }
LABEL_313:
                  *((_BYTE *)v2 + 848) = hasPendingSheetInBody;
                }
                if (v190)
                {
                  v207 = v13 + 24 * v12;
                  v209 = *(unsigned __int8 *)(v207 + 19);
                  v208 = (_BYTE *)(v207 + 19);
                  if (!v209)
                  {
                    v223 = *((_QWORD *)v190 + 2) & 0x1FLL;
                    v224 = (*((_QWORD *)v190 + 2) & 0x17) == 0x12 || v223 > 0x15;
                    v225 = (1 << v223) & 0x20300E;
                    if (!v224 && v225 != 0)
                      *v208 = 1;
                  }
                }
                if (!v204)
                {
                  if (!v510)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1965BA060);
                  }
                  v210 = v510 - 1;
                  v211 = v508;
                  v212 = (char *)v508 + 584 * v210;
                  v213 = *(_QWORD *)v212;
                  while (1)
                  {
                    v213 = *(_QWORD *)(v213 + 56);
                    if (!v213)
                      break;
                    if ((*(_WORD *)(v213 + 28) & 0xA) != 0)
                    {
                      *(_QWORD *)v212 = v213;
                      goto LABEL_322;
                    }
                  }
                  v221 = *((unsigned int *)v212 + 5);
                  if (!(_DWORD)v221)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1965BA068);
                  }
                  v222 = *((_QWORD *)v212 + 1) + 16 * v221;
                  v213 = *(_QWORD *)(v222 - 16);
                  *(_QWORD *)v212 = v213;
                  *((_DWORD *)v212 + 70) = *(_DWORD *)(v222 - 8);
                  *((_DWORD *)v212 + 5) = v221 - 1;
LABEL_322:
                  if (v213 == *((_QWORD *)v211 + 73 * v210 + 36)
                    || !*((_DWORD *)v212 + 70) && !*((_DWORD *)v211 + 146 * v210 + 142))
                  {
                    WebCore::ComposedTreeIterator::traverseNextLeavingContext((uint64_t)v507, v3);
                    goto LABEL_144;
                  }
LABEL_79:
                  v4 = v510;
                  if (!v510)
                  {
LABEL_902:
                    __break(0xC471u);
                    JUMPOUT(0x1965B9F78);
                  }
                  goto LABEL_3;
                }
                if (v202 == 3)
                {
                  WebCore::Element::resetChildStyleRelations(v11);
                }
                else if (v202 == 4)
                {
                  WebCore::Element::resetAllDescendantStyleRelations(v11);
                }
                v250 = 1;
                if (v190 && !*(_BYTE *)(v13 + 24 * v12 + 21))
                  v250 = (*((_QWORD *)v190 + 2) & 0x1FLL) == 26;
                v251 = *((unsigned int *)v2 + 7);
                if (!(_DWORD)v251)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1965BA090);
                }
                WebCore::SelectorFilter::pushParent((WebCore::SelectorFilter *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v251 - 8) + 16), (WebCore::Element *)v11);
                if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v190 + 1) + 40) + 642) & 3) << 48)
                {
                  v447 = *((unsigned int *)v2 + 7);
                  if (!(_DWORD)v447)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1965BA16CLL);
                  }
                  v448 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v447 - 8);
                  v449 = *(unsigned int *)(v448 + 4140);
                  if ((_DWORD)v449 == *(_DWORD *)(v448 + 4136))
                  {
                    WTF::Vector<WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTMLElement&>(v448 + 4128, v11);
                  }
                  else
                  {
                    v462 = *(_QWORD *)(v448 + 4128);
                    *(_DWORD *)(v11 + 24) += 2;
                    *(_QWORD *)(v462 + 8 * v449) = v11;
                    *(_DWORD *)(v448 + 4140) = v449 + 1;
                  }
                }
                *(_QWORD *)&v523 = v11;
                *((_QWORD *)&v523 + 1) = v190;
                LOBYTE(v524) = v203;
                BYTE1(v524) = v202;
                WORD1(v524) = 0;
                BYTE5(v524) = v250;
                if ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) != 0)
                {
                  v3 = *(_QWORD **)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
                  if (v3)
                  {
                    WebCore::Style::TreeResolver::pushScope(v2, (WebCore::ShadowRoot *)v3);
                    BYTE2(v524) = 1;
                    goto LABEL_626;
                  }
                }
                v5 = v493;
                if ((*(_WORD *)(v11 + 28) & 0x10) != 0
                  && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::slotTag + 24))
                {
                  *(_DWORD *)(v11 + 24) += 2;
                  if (WebCore::HTMLSlotElement::assignedNodes((WebCore::HTMLSlotElement *)v11))
                  {
                    WebCore::Style::TreeResolver::pushEnclosingScope((uint64_t)v2);
                    BYTE2(v524) = 1;
                  }
                  if (*(_DWORD *)(v11 + 24) == 2)
                  {
                    v5 = v493;
                    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
                    {
                      WebCore::Node::removedLastRef((WebCore::Node *)v11);
                      v5 = v493;
                    }
                  }
                  else
                  {
                    *(_DWORD *)(v11 + 24) -= 2;
LABEL_626:
                    v5 = v493;
                  }
                }
                v252 = *((unsigned int *)v2 + 19);
                if (!(_DWORD)v252)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1965BA098);
                }
                v253 = *((_QWORD *)v2 + 8);
                v254 = *(_QWORD *)(v11 + 48);
                v255 = (v254 >> 52) & 1;
                if (*(_BYTE *)(v253 + 24 * v252 - 4))
                  LOBYTE(v255) = 1;
                BYTE4(v524) = v255;
                *(_QWORD *)(v11 + 48) = v254 & 0xFFEFFFFFFFFFFFFFLL;
                if ((_DWORD)v252 == *((_DWORD *)v2 + 18))
                {
                  v415 = WTF::Vector<WebCore::Style::TreeResolver::Parent,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v5, (void *)(v252 + 1), (unint64_t)&v523);
                  v5 = v493;
                  v257 = *((_QWORD *)v2 + 8) + 24 * *((unsigned int *)v2 + 19);
                  v256 = *(_OWORD *)v415;
                  *(_QWORD *)(v257 + 16) = *(_QWORD *)(v415 + 16);
                }
                else
                {
                  v256 = v523;
                  v257 = v253 + 24 * v252;
                  *(_QWORD *)(v257 + 16) = v524;
                }
                *(_OWORD *)v257 = v256;
                ++*((_DWORD *)v2 + 19);
                if (!v510)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1965BA0A0);
                }
                v258 = (char *)v508 + 584 * v510 - 584;
                v259 = *(_QWORD *)v258;
                v260 = *(_WORD *)(*(_QWORD *)v258 + 28);
                if (*(_QWORD *)v258
                  && (v260 & 8) != 0
                  && (*(_QWORD *)(v259 + 72) & 0xFFFFFFFFFFFFLL) != 0
                  && (v3 = *(_QWORD **)((*(_QWORD *)(v259 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)) != 0)
                {
                  WebCore::ComposedTreeIterator::traverseShadowRoot((WebCore::ComposedTreeIterator *)v507, (WebCore::ShadowRoot *)v3);
                }
                else
                {
                  if (v510 <= 1 && !v507[0])
                  {
                    if ((v260 & 4) != 0 && (v261 = *(_QWORD *)(v259 + 80)) != 0)
                    {
                      do
                      {
                        if ((*(_WORD *)(v261 + 28) & 0xA) != 0)
                        {
                          v262 = v261;
                          break;
                        }
                        v262 = 0;
                        v261 = *(_QWORD *)(v261 + 56);
                      }
                      while (v261);
                    }
                    else
                    {
                      v262 = 0;
                    }
                    while (1)
                    {
                      v259 = *(_QWORD *)(v259 + 56);
                      if (!v259)
                        break;
                      if ((*(_WORD *)(v259 + 28) & 0xA) != 0)
                      {
                        if (v262)
                        {
                          v263 = (uint64_t *)((char *)v508 + 584 * v510 - 576);
                          *(_QWORD *)&v523 = v259;
                          DWORD2(v523) = *((_DWORD *)v508 + 146 * v510 - 76);
                          v264 = *((unsigned int *)v508 + 146 * v510 - 141);
                          if ((_DWORD)v264 == *((_DWORD *)v508 + 146 * v510 - 142))
                          {
                            v414 = (__int128 *)WTF::Vector<WebCore::ElementAndTextDescendantIterator::AncestorSibling,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v263, v264 + 1, (unint64_t)&v523);
                            v5 = v493;
                            v264 = *((unsigned int *)v258 + 5);
                            v265 = *((_QWORD *)v258 + 1);
                            v266 = *v414;
                          }
                          else
                          {
                            v265 = *v263;
                            v266 = v523;
                          }
                          *(_OWORD *)(v265 + 16 * v264) = v266;
                          ++*((_DWORD *)v258 + 5);
                          goto LABEL_431;
                        }
                        *(_QWORD *)v258 = v259;
                        goto LABEL_79;
                      }
                    }
                    if (v262)
                    {
LABEL_431:
                      ++*((_DWORD *)v258 + 70);
                      *(_QWORD *)v258 = v262;
                      goto LABEL_79;
                    }
                    v275 = *((unsigned int *)v508 + 146 * v510 - 141);
                    if (!(_DWORD)v275)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1965BA0A8);
                    }
                    v276 = *((_QWORD *)v508 + 73 * v510 - 72) + 16 * v275;
                    *(_QWORD *)v258 = *(_QWORD *)(v276 - 16);
                    *((_DWORD *)v258 + 70) = *(_DWORD *)(v276 - 8);
                    *((_DWORD *)v258 + 5) = v275 - 1;
                    goto LABEL_79;
                  }
                  WebCore::ComposedTreeIterator::traverseNextInShadowTree((WebCore::ComposedTreeIterator *)v507, v3);
                }
LABEL_144:
                v5 = v493;
                goto LABEL_79;
              }
LABEL_723:
              v387 = *((_QWORD *)v2 + 107);
              if (v387)
              {
                v450 = (_BYTE *)WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WebCore::Element const*>(*((_QWORD *)v2 + 107), v11);
                v5 = v493;
                if (v450)
                {
                  if (v450 != (_BYTE *)(v387 + 16 * *(unsigned int *)(v387 - 4)))
                  {
                    if (v450[10])
                    {
                      if (v203 <= v450[8])
                        LOBYTE(v203) = v450[8];
                      if (v202 <= v450[9])
                        v202 = v450[9];
                      v450[8] = 0;
                      v450[10] = 0;
                    }
                    v5 = v493;
LABEL_732:
                    if (!*((_BYTE *)v2 + 929)
                      || (v389 = *(_QWORD *)(*((_QWORD *)v190 + 1) + 40),
                          v390 = *(unsigned int *)(v389 + 612),
                          !(_DWORD)v390))
                    {
                      v204 = 1;
                      goto LABEL_735;
                    }
                    v488 = (uint64_t *)((char *)v2 + 896);
                    v489 = (WTF *)((char *)v2 + 888);
                    v451 = *(WTF::StringImpl ***)(v389 + 600);
                    v452 = 8 * v390;
                    do
                    {
                      *(_DWORD *)(v11 + 24) += 2;
                      v519 = v11;
                      WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::add((uint64_t *)v489, &v519, (uint64_t)&v523);
                      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v519);
                      WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::ensure<WebCore::Style::TreeResolver::updateAnchorPositioningState(WebCore::Element&,WebCore::RenderStyle const*)::$_0>((uint64_t)&v523, v488, v451);
                      v453 = v523;
                      v454 = *(unsigned int *)(v523 + 20);
                      if ((_DWORD)v454 == *(_DWORD *)(v523 + 16))
                      {
                        WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v523 + 8, v11);
                      }
                      else
                      {
                        v455 = *(_QWORD *)(v523 + 8);
                        *(_DWORD *)(v11 + 24) += 2;
                        *(_QWORD *)(v455 + 8 * v454) = v11;
                        *(_DWORD *)(v453 + 20) = v454 + 1;
                      }
                      ++v451;
                      v204 = 1;
                      v452 -= 8;
                    }
                    while (v452);
LABEL_958:
                    v5 = v493;
LABEL_735:
                    ++*((_DWORD *)v2 + 220);
                    v391 = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFLL;
                    if (v391)
                    {
                      if (*(_QWORD *)((*(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFLL) + 8))
                      {
                        v392 = *((_QWORD *)v2 + 109);
                        if (v392)
                        {
                          LODWORD(v489) = *(_DWORD *)(v392 - 8);
                          v456 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v391);
                          for (mm = 0; ; v456 = mm + v458)
                          {
                            v458 = v456 & v489;
                            v459 = *(_QWORD *)(v392 + 16 * v458);
                            if (v459 != -1)
                            {
                              v5 = v493;
                              if (!v459)
                                goto LABEL_738;
                              if (v459 == v391)
                                break;
                            }
                            ++mm;
                          }
                          v463 = *(_QWORD *)(v392 + 16 * v458 + 8);
                          v5 = v493;
                          if (v463)
                          {
                            v464 = *(unsigned __int8 *)(v463 + 18);
                            *((_BYTE *)v2 + 928) = v464 ^ 1;
                            v465 = (WebCore::RenderObject *)(*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL);
                            if (!v465)
                            {
                              v472 = *(_QWORD *)(*((_QWORD *)v190 + 1) + 40);
                              if (*(_QWORD *)(v472 + 616))
                                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v463 + 8), (WTF::StringImpl **)(v472 + 616), (const WTF::StringImpl *)0x248, (uint64_t)&v523);
                              v204 = 0;
                              *(_BYTE *)(v463 + 16) = 1;
                              *((_BYTE *)v2 + 929) = 0;
                              goto LABEL_992;
                            }
                            if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                            {
                              __break(0xC471u);
                              JUMPOUT(0x1965BA538);
                            }
                            v5 = v493;
                            if (!v464)
                            {
                              v466 = WebCore::RenderObject::containingBlock(v465);
                              v467 = WebCore::RenderElement::element(v466);
                              if (v467)
                              {
                                *(_DWORD *)(v467 + 24) += 2;
                                v519 = v467;
                                WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::ensure<WebCore::Style::TreeResolver::updateAnchorPositioningState(WebCore::Element&,WebCore::RenderStyle const*)::$_1>((uint64_t)&v523, v492, &v519);
                                v468 = v523;
                                v469 = *(unsigned int *)(v523 + 20);
                                if ((_DWORD)v469 == *(_DWORD *)(v523 + 16))
                                {
                                  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v523 + 8, v11);
                                }
                                else
                                {
                                  v470 = *(_QWORD *)(v523 + 8);
                                  *(_DWORD *)(v11 + 24) += 2;
                                  *(_QWORD *)(v470 + 8 * v469) = v11;
                                  *(_DWORD *)(v468 + 20) = v469 + 1;
                                }
                                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v519);
LABEL_991:
                                v204 = 0;
                              }
                              else
                              {
                                v473 = *((unsigned int *)v2 + 231);
                                if ((_DWORD)v473 == *((_DWORD *)v2 + 230))
                                {
                                  WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Element&>(v490, v11);
                                  goto LABEL_991;
                                }
                                v204 = 0;
                                v474 = *((_QWORD *)v2 + 114);
                                *(_DWORD *)(v11 + 24) += 2;
                                *(_QWORD *)(v474 + 8 * v473) = v11;
                                *((_DWORD *)v2 + 231) = v473 + 1;
                              }
LABEL_992:
                              v5 = v493;
                              goto LABEL_310;
                            }
                          }
                        }
                      }
                    }
LABEL_738:
                    if (v204)
                      v204 = (*(_BYTE *)(v11 + 70) & 8 | v202) != 0;
                    goto LABEL_310;
                  }
                }
              }
              if ((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) == 0
                || (v3 = *(_QWORD **)((*(_QWORD *)(v11 + 72) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
                || (v3[2] & 0x1FLL) != 0x12)
              {
                v388 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
                if (v388)
                {
                  if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
                  {
                    v388 = *(_QWORD *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x20);
                    if (v388)
                      v388 = *(_QWORD *)(v388 + 8);
                    v5 = v493;
                  }
                  v3 = (_QWORD *)(v388 + 80);
                }
                else
                {
                  v3 = 0;
                }
              }
              if ((unint64_t)(*(_BYTE *)(*(_QWORD *)(*((_QWORD *)v190 + 1) + 40) + 642) & 3) << 48)
              {
                if (WebCore::Style::styleChangeAffectsRelativeUnits(v190, (const WebCore::RenderStyle *)v3, (const WebCore::RenderStyle *)0x248))
                {
                  goto LABEL_956;
                }
              }
              else
              {
                if (!v3 || !((unint64_t)(*(_BYTE *)(*(_QWORD *)(v3[1] + 40) + 642) & 3) << 48))
                  goto LABEL_732;
                if (!WebCore::Style::styleChangeAffectsRelativeUnits(v190, (const WebCore::RenderStyle *)v3, (const WebCore::RenderStyle *)0x248))goto LABEL_957;
LABEL_956:
                v202 = 4;
              }
LABEL_957:
              *(_DWORD *)(v11 + 24) += 2;
              v519 = v11;
              LOBYTE(v514[0]) = v203;
              BYTE1(v514[0]) = v202;
              WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::HashTableTraits>::add<WebCore::Style::TreeResolver::QueryContainerState>((uint64_t)&v523, (uint64_t *)v2 + 107, &v519, (__int16 *)v514);
              WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v519);
              v204 = 0;
              *((_BYTE *)v2 + 864) = 1;
              *((_BYTE *)v2 + 929) = 0;
              goto LABEL_958;
            }
            WebCore::RenderStyle::visitedDependentColor((uint64_t)v515, 5, 0, (uint64_t *)v514);
            v362 = *(_QWORD *)(v316 + 1408);
            if ((v362 & 0x8000000000000) != 0)
            {
              v475 = (unsigned int *)(v362 & 0xFFFFFFFFFFFFLL);
              if (((unint64_t)v514[0] & 0x8000000000000) == 0
                || (v366 = (unsigned int *)((unint64_t)v514[0] & 0xFFFFFFFFFFFFLL),
                    *(float *)((v362 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)(((unint64_t)v514[0] & 0xFFFFFFFFFFFFLL)
                                                                          + 4))
                || *(float *)((v362 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)(((unint64_t)v514[0] & 0xFFFFFFFFFFFFLL)
                                                                         + 8)
                || *(float *)((v362 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)(((unint64_t)v514[0] & 0xFFFFFFFFFFFFLL)
                                                                           + 0xC)
                || *(float *)((v362 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)(((unint64_t)v514[0] & 0xFFFFFFFFFFFFLL)
                                                                            + 0x10)
                || HIBYTE(v362) != (unint64_t)v514[0] >> 56
                || BYTE6(v362) != BYTE6(v514[0]))
              {
                do
                {
                  v476 = __ldaxr(v475);
                  v477 = v476 - 1;
                }
                while (__stlxr(v477, v475));
                if (!v477)
                {
                  atomic_store(1u, v475);
                  WTF::fastFree((WTF *)v475, v361);
                }
                goto LABEL_611;
              }
            }
            else
            {
              if ((WebCore::RenderStyle *)v362 == v514[0] && ((unint64_t)v514[0] & 0x8000000000000) == 0)
                goto LABEL_526;
LABEL_611:
              v363 = (unint64_t)v514[0];
              *(WebCore::RenderStyle **)(v316 + 1408) = v514[0];
              if ((v363 & 0x8000000000000) == 0)
                goto LABEL_526;
              v364 = (unsigned int *)(v363 & 0xFFFFFFFFFFFFLL);
              do
                v365 = __ldaxr(v364);
              while (__stlxr(v365 + 1, v364));
              if (((unint64_t)v514[0] & 0x8000000000000) == 0)
                goto LABEL_526;
              v366 = (unsigned int *)((unint64_t)v514[0] & 0xFFFFFFFFFFFFLL);
            }
            do
            {
              v367 = __ldaxr(v366);
              v368 = v367 - 1;
            }
            while (__stlxr(v368, v366));
            if (!v368)
            {
              atomic_store(1u, v366);
              WTF::fastFree((WTF *)v366, v361);
            }
            goto LABEL_526;
          }
          v512 = (WTF::StringImpl *)v303;
          v514[0] = (WebCore::RenderStyle *)&v512;
          if ((_ZN7WebCore8CSSValue12visitDerivedIZNKS0_12visitDerivedIZNKS0_6equalsERKS0_E3__0EEDcOT_EUlRS7_E_EES6_S8_(v288, (const WebCore::CSSLinearGradientValue ***)v514, v235) & 1) == 0)goto LABEL_516;
        }
      }
LABEL_503:
      v314 = (WebCore::RenderStyle *)((char *)v246 + 8);
      v246 = v245;
      if (v314 != v245)
      {
        v246 = v314;
        while ((unint64_t)(*(_QWORD *)v246 + 1) <= 1)
        {
          v246 = (WebCore::RenderStyle *)((char *)v246 + 8);
          if (v246 == v245)
          {
            v246 = v245;
            break;
          }
        }
      }
    }
    v239 = v516;
    goto LABEL_513;
  }
  v145 = *((_DWORD *)v2 + 19);
  if (v145 >= 2)
  {
    do
    {
      v162 = *((_QWORD *)v2 + 8) + 24 * v145;
      v163 = *(_QWORD *)(v162 - 24);
      v164 = *(_QWORD *)(v163 + 64);
      *(_WORD *)(v163 + 30) &= 0xFF8Fu;
      *(_QWORD *)(v163 + 64) = v164 & 0xFFE0FFFFFFFFFFFFLL;
      LODWORD(v164) = *(unsigned __int8 *)(v162 - 6);
      v165 = *((unsigned int *)v2 + 7);
      if ((_DWORD)v164)
      {
        if (!*((_DWORD *)v2 + 7))
        {
          __break(0xC471u);
          JUMPOUT(0x1965BA640);
        }
        v272 = v165 - 1;
        v273 = *((_QWORD *)v2 + 2);
        v274 = *(WebCore::Style::TreeResolver::Scope **)(v273 + 8 * v272);
        *(_QWORD *)(v273 + 8 * v272) = 0;
        if (v274)
        {
          if (*(_DWORD *)v274 == 1)
          {
            WebCore::Style::TreeResolver::Scope::~Scope(v274, v3);
            WTF::fastFree(v384, v385);
          }
          else
          {
            --*(_DWORD *)v274;
          }
        }
        v165 = v272;
        *((_DWORD *)v2 + 7) = v272;
      }
      if (!v165)
      {
        __break(0xC471u);
        JUMPOUT(0x1965BA5B4);
      }
      v166 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v165 - 8);
      v167 = *(unsigned int *)(v166 + 28);
      if (!(_DWORD)v167)
      {
        __break(0xC471u);
        JUMPOUT(0x1965BA5BCLL);
      }
      v168 = v167 - 1;
      v169 = *(_QWORD *)(v166 + 16);
      v170 = v169 + 40 * v168;
      v171 = v170 + 8;
      v172 = *(unsigned int *)(v170 + 20);
      if ((_DWORD)v172)
      {
        v173 = 0;
        v174 = v166 + 32;
        do
        {
          if (v173 >= *(unsigned int *)(v171 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x1965BA5A0);
          }
          v175 = *(unsigned int *)(*(_QWORD *)v171 + 4 * v173);
          v176 = *(unsigned __int8 *)(v174 + (v175 & 0xFFF));
          if (v176 != 255)
            *(_BYTE *)(v174 + (v175 & 0xFFF)) = v176 - 1;
          v177 = (v175 >> 16) & 0xFFF;
          v178 = *(unsigned __int8 *)(v174 + v177);
          if (v178 != 255)
            *(_BYTE *)(v174 + v177) = v178 - 1;
          ++v173;
        }
        while (v172 != v173);
      }
      v179 = *(WTF **)v171;
      if (v169 + 40 * v168 + 24 != *(_QWORD *)v171 && v179 != 0)
      {
        *(_QWORD *)v171 = 0;
        *(_DWORD *)(v169 + 40 * v168 + 16) = 0;
        WTF::fastFree(v179, v3);
      }
      *(_DWORD *)(v166 + 28) = v168;
      if (!(_DWORD)v168)
        bzero((void *)(v166 + 32), 0x1000uLL);
      v181 = *((unsigned int *)v2 + 7);
      if (!(_DWORD)v181)
      {
        __break(0xC471u);
        JUMPOUT(0x1965BA5C4);
      }
      v182 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 8 * v181 - 8);
      v183 = *(unsigned int *)(v182 + 4140);
      if ((_DWORD)v183 && *(_QWORD *)(*(_QWORD *)(v182 + 4128) + 8 * v183 - 8) == v163)
        WTF::Vector<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeLast(v182 + 4128);
      if (*((_BYTE *)v2 + 929))
      {
        v184 = *v492;
        if (*v492)
        {
          v428 = *(_DWORD *)(v184 - 8);
          v429 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(v163);
          for (nn = 0; ; v429 = nn + v431)
          {
            v431 = v429 & v428;
            v432 = *(_QWORD *)(v184 + 24 * (v429 & v428));
            if (v432 != -1)
            {
              if (!v432)
                goto LABEL_268;
              if (v432 == v163)
                break;
            }
            ++nn;
          }
          WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v523, v184 + 24 * v431 + 8);
          v440 = (WTF *)v523;
          if (HIDWORD(v523))
          {
            v441 = *(_QWORD *)v523;
            *(_DWORD *)(v441 + 24) = *(_DWORD *)(*(_QWORD *)v523 + 24) + 2;
            v519 = v441;
            WebCore::Style::TreeResolver::findAnchorsForAnchorPositionedElement((uint64_t)v2, *(_QWORD *)(v441 + 16), (const WebCore::Element *)v163);
            *((_BYTE *)v2 + 929) = 0;
            WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v519);
            v440 = (WTF *)v523;
            if (HIDWORD(v523))
            {
              v442 = 8 * HIDWORD(v523);
              do
              {
                v443 = *(_QWORD *)v440;
                *(_QWORD *)v440 = 0;
                if (v443)
                {
                  if (*(_DWORD *)(v443 + 24) == 2)
                  {
                    if ((*(_WORD *)(v443 + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)v443);
                  }
                  else
                  {
                    *(_DWORD *)(v443 + 24) -= 2;
                  }
                }
                v440 = (WTF *)((char *)v440 + 8);
                v442 -= 8;
              }
              while (v442);
              v440 = (WTF *)v523;
            }
          }
          if (v440)
          {
            *(_QWORD *)&v523 = 0;
            DWORD2(v523) = 0;
            WTF::fastFree(v440, v3);
          }
        }
      }
LABEL_268:
      v185 = *((_DWORD *)v2 + 19);
      if (!v185)
      {
        __break(0xC471u);
        JUMPOUT(0x1965BA5CCLL);
      }
      v145 = v185 - 1;
      *((_DWORD *)v2 + 19) = v145;
    }
    while (v145 > 1);
  }
  if (*((_DWORD *)v2 + 231))
  {
    v386 = **((_QWORD **)v2 + 114);
    *(_DWORD *)(v386 + 24) += 2;
    *(_QWORD *)&v523 = v386;
    WebCore::Style::TreeResolver::findAnchorsForAnchorPositionedElement((uint64_t)v2, *(_QWORD *)(v386 + 16), 0);
    *((_BYTE *)v2 + 929) = 0;
    WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v523);
  }
  v146 = v498;
  if (HIDWORD(v499))
  {
    v147 = 0;
    v148 = 584 * HIDWORD(v499);
    do
    {
      v149 = (char *)v146 + v147;
      v150 = *(WTF **)((char *)v146 + v147 + 296);
      if ((WTF *)((char *)v146 + v147 + 312) != v150 && v150 != 0)
      {
        *((_QWORD *)v149 + 37) = 0;
        *((_DWORD *)v149 + 76) = 0;
        WTF::fastFree(v150, v3);
      }
      v152 = (WTF *)*((_QWORD *)v149 + 1);
      if (v149 + 24 != (char *)v152 && v152 != 0)
      {
        *((_QWORD *)v149 + 1) = 0;
        *(_DWORD *)((char *)v146 + v147 + 16) = 0;
        WTF::fastFree(v152, v3);
      }
      v147 += 584;
    }
    while (v148 != v147);
    v146 = v498;
  }
  if (v491 != v146 && v146 != 0)
  {
    v498 = 0;
    LODWORD(v499) = 0;
    WTF::fastFree(v146, v3);
  }
  v2 = v508;
  if (v510)
  {
    v155 = 0;
    v156 = 584 * v510;
    do
    {
      v157 = (char *)v2 + v155;
      v158 = *(WTF **)((char *)v2 + v155 + 296);
      if ((WTF *)((char *)v2 + v155 + 312) != v158 && v158 != 0)
      {
        *((_QWORD *)v157 + 37) = 0;
        *((_DWORD *)v157 + 76) = 0;
        WTF::fastFree(v158, v3);
      }
      v160 = (WTF *)*((_QWORD *)v157 + 1);
      if (v157 + 24 != (char *)v160 && v160 != 0)
      {
        *((_QWORD *)v157 + 1) = 0;
        *(_DWORD *)((char *)v2 + v155 + 16) = 0;
        WTF::fastFree(v160, v3);
      }
      v155 += 584;
    }
    while (v156 != v155);
    v2 = v508;
  }
  if (&v511 != (uint64_t *)v2)
    goto LABEL_800;
}

uint64_t WebCore::Style::resetStyleForNonRenderedDescendants(uint64_t this, WebCore::Element *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v10;
  BOOL v11;

  v2 = this;
  v3 = *(_QWORD *)(this + 80);
  if (v3)
  {
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      v3 = *(_QWORD *)(v3 + 56);
      if (!v3)
        goto LABEL_2;
    }
    while (1)
    {
      while (1)
      {
LABEL_13:
        v6 = *(_QWORD *)(v3 + 64);
        if ((v6 & 0x7000000000000) != 0 || (*(_WORD *)(v3 + 30) & 0x20) != 0)
        {
          WebCore::Element::resetComputedStyle((WebCore::Element *)v3, a2);
          this = WebCore::Element::resetStyleRelations(v3);
          v6 = *(_QWORD *)(v3 + 64) & 0xFFF8FFFFFFFFFFFFLL;
          *(_QWORD *)(v3 + 64) = v6;
          *(_WORD *)(v3 + 30) &= 0xFF8Fu;
        }
        if ((v6 & 0x8000000000000) == 0)
          break;
        *(_QWORD *)(v3 + 64) = v6 & 0xFFE7FFFFFFFFFFFFLL;
        v4 = *(_QWORD *)(v3 + 80);
        if (!v4)
        {
          if (v3 == v2)
            goto LABEL_2;
          while (1)
          {
            v4 = *(_QWORD *)(v3 + 56);
            if (v4)
              break;
            v3 = *(_QWORD *)(v3 + 32);
            if (v3)
              v5 = v3 == v2;
            else
              v5 = 1;
            if (v5)
              goto LABEL_2;
          }
        }
        v3 = v4;
        if ((*(_WORD *)(v4 + 28) & 8) == 0)
        {
          while (v4 != v2)
          {
            while (1)
            {
              v3 = *(_QWORD *)(v4 + 56);
              if (v3)
                break;
              v4 = *(_QWORD *)(v4 + 32);
              if (v4)
                v7 = v4 == v2;
              else
                v7 = 1;
              if (v7)
                goto LABEL_2;
            }
            v4 = *(_QWORD *)(v4 + 56);
            if ((*(_WORD *)(v3 + 28) & 8) != 0)
              goto LABEL_13;
          }
          goto LABEL_2;
        }
      }
      if (v3 == v2)
        goto LABEL_2;
      if (!*(_QWORD *)(v3 + 56))
        break;
      v3 = *(_QWORD *)(v3 + 56);
LABEL_36:
      if ((*(_WORD *)(v3 + 28) & 8) == 0)
      {
        v10 = v3;
        while (v10 != v2)
        {
          while (1)
          {
            v3 = *(_QWORD *)(v10 + 56);
            if (v3)
              break;
            v10 = *(_QWORD *)(v10 + 32);
            if (v10)
              v11 = v10 == v2;
            else
              v11 = 1;
            if (v11)
              goto LABEL_2;
          }
          v10 = *(_QWORD *)(v10 + 56);
          if ((*(_WORD *)(v3 + 28) & 8) != 0)
            goto LABEL_13;
        }
        goto LABEL_2;
      }
    }
    v8 = v3;
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8 || v8 == v2)
        break;
      v3 = *(_QWORD *)(v8 + 56);
      if (v3)
        goto LABEL_36;
    }
  }
LABEL_2:
  *(_QWORD *)(v2 + 64) &= 0xFFE7FFFFFFFFFFFFLL;
  return this;
}

void WebCore::Style::Update::addElement(uint64_t *a1, WebCore::Node *this, WebCore::Node *a3, WebCore::Node **a4)
{
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int i;
  WTF *v17;
  int v18;
  int j;
  uint64_t v20;
  WebCore::Node **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  WebCore::Node *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  WebCore::Node *v39;
  int v40;
  uint64_t v41;
  int v42;
  WebCore::Node ***v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int k;
  unsigned int v49;
  WebCore::Node ***v50;
  WebCore::Node **v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  WebCore::Node **v60;
  WebCore::Node *v61;
  WebCore::Node **v62;
  int v63;
  WebCore::Node *v64;
  WebCore::RenderStyle *v65;
  WTF *v66;
  void *v67;
  __int16 v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  int v81;
  WebCore::Node **n;
  uint64_t v83;
  uint64_t *v84;
  int v85;
  WebCore::Node ***v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  WebCore::Node ***v93;
  WebCore::Node **v94;
  WebCore::Node **v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  WebCore::Node ***v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  WebCore::Node ***v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  int m;
  unsigned int v114;
  WebCore::Node ***v115;
  WebCore::Node **v116;
  unsigned int v117;
  WebCore::Node **v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  unint64_t v124;
  WebCore::Node ***v125;
  WebCore::Node ***v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  unsigned int v133;
  uint64_t *v134;
  WebCore::Node ***v135;

  v9 = a1 + 2;
  v8 = a1[2];
  if (v8)
  {
    v10 = *(_DWORD *)(v8 - 8);
    v11 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    v14 = v10 & ((v13 >> 31) ^ v13);
    v15 = 1;
    for (i = v14; ; i = (i + v15++) & v10)
    {
      v17 = *(WTF **)(v8 + 8 * i);
      if (!v17)
        break;
      if (v17 != (WTF *)-1 && *(WebCore::Node **)v17 == this)
      {
        v18 = *(_DWORD *)(v8 - 4);
        if (i != v18)
        {
          for (j = 1; ; ++j)
          {
            v20 = v14;
            v21 = *(WebCore::Node ***)(v8 + 8 * v14);
            if (v21 != (WebCore::Node **)-1)
            {
              if (!v21)
                goto LABEL_22;
              if (*v21 == this)
                break;
            }
            v14 = (v20 + j) & v10;
          }
          if (v18 != (_DWORD)v20)
          {
            *(_QWORD *)(v8 + 8 * v20) = -1;
            ++*(_DWORD *)(*v9 - 16);
            v22 = *v9;
            v23 = *v9 ? *(_DWORD *)(v22 - 12) - 1 : -1;
            *(_DWORD *)(v22 - 12) = v23;
            v24 = *v9;
            if (*v9)
            {
              v25 = 6 * *(_DWORD *)(v24 - 12);
              v26 = *(_DWORD *)(v24 - 4);
              if (v25 < v26 && v26 >= 9)
                WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(a1 + 2, v26 >> 1, 0);
            }
          }
LABEL_22:
          v28 = v17;
          v29 = *((_QWORD *)v17 + 1);
          v30 = *((_QWORD *)v17 + 2);
          if (v29)
          {
            *(_QWORD *)(v29 + 16) = v30;
            v30 = *((_QWORD *)v17 + 2);
          }
          else
          {
            a1[3] = v30;
          }
          if (v30)
            v31 = (_QWORD *)(v30 + 8);
          else
            v31 = a1 + 4;
          *v31 = v29;
          v32 = *(WebCore::Node **)v17;
          *(_QWORD *)v17 = 0;
          if (v32)
          {
            if (*((_DWORD *)v32 + 6) == 2)
            {
              if ((*((_WORD *)v32 + 15) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef(v32);
                v28 = v17;
              }
            }
            else
            {
              *((_DWORD *)v32 + 6) -= 2;
            }
          }
          WTF::fastFree(v28, this);
        }
        break;
      }
    }
  }
  if (a3)
  {
    if ((*((_BYTE *)a3 + 54) & 8) != 0)
      goto LABEL_47;
    v33 = a1[8];
    if (v33)
    {
      v34 = *(_DWORD *)(v33 - 8);
      v35 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v36 = 9 * ((v35 + ~(v35 << 13)) ^ ((v35 + ~(v35 << 13)) >> 8));
      v37 = (v36 ^ (v36 >> 15)) + ~((v36 ^ (v36 >> 15)) << 27);
      v38 = v34 & ((v37 >> 31) ^ v37);
      v39 = *(WebCore::Node **)(v33 + 24 * v38);
      if (v39 == a3)
        goto LABEL_47;
      v40 = 1;
      while (v39)
      {
        v38 = (v38 + v40) & v34;
        v39 = *(WebCore::Node **)(v33 + 24 * v38);
        ++v40;
        if (v39 == a3)
          goto LABEL_47;
      }
    }
    *((_DWORD *)a3 + 6) += 2;
    v41 = *v9;
    if (*v9
      || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v9, 8u, 0), (v41 = *v9) != 0))
    {
      v42 = *(_DWORD *)(v41 - 8);
    }
    else
    {
      v42 = 0;
    }
    v43 = 0;
    v44 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
    v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
    v47 = (v46 >> 31) ^ v46;
    for (k = 1; ; ++k)
    {
      v49 = v47 & v42;
      v50 = (WebCore::Node ***)(v41 + 8 * v49);
      v51 = *v50;
      if (!*v50)
        break;
      if (v51 != (WebCore::Node **)-1)
      {
        v50 = v43;
        if (*v51 == a3)
        {
          if (*((_DWORD *)a3 + 6) == 2)
          {
            if ((*((_WORD *)a3 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(a3);
          }
          else
          {
            *((_DWORD *)a3 + 6) -= 2;
          }
          goto LABEL_47;
        }
      }
      v47 = k + v49;
      v43 = v50;
    }
    if (v43)
    {
      *v43 = 0;
      --*(_DWORD *)(*v9 - 16);
      v50 = v43;
    }
    v118 = (WebCore::Node **)WTF::fastMalloc((WTF *)0x18);
    v118[1] = 0;
    v118[2] = 0;
    *v118 = a3;
    *v50 = v118;
    v119 = *v9;
    if (*v9)
      v120 = *(_DWORD *)(v119 - 12) + 1;
    else
      v120 = 1;
    *(_DWORD *)(v119 - 12) = v120;
    v121 = *v9;
    if (*v9)
      v122 = *(_DWORD *)(v121 - 12);
    else
      v122 = 0;
    v123 = (*(_DWORD *)(v121 - 16) + v122);
    v124 = *(unsigned int *)(v121 - 4);
    if (v124 > 0x400)
    {
      if (v124 > 2 * v123)
        goto LABEL_117;
    }
    else
    {
      if (3 * v124 > 4 * v123)
        goto LABEL_117;
      if (!(_DWORD)v124)
      {
        v133 = 8;
        goto LABEL_159;
      }
    }
    v133 = (_DWORD)v124 << (6 * *(_DWORD *)(v121 - 12) >= (2 * v124));
LABEL_159:
    v134 = v9;
    v135 = v50;
    goto LABEL_160;
  }
  v105 = a1[1];
  *(_DWORD *)(v105 + 24) += 2;
  v106 = a1[2];
  if (v106
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v9, 8u, 0), (v106 = *v9) != 0))
  {
    v107 = *(_DWORD *)(v106 - 8);
  }
  else
  {
    v107 = 0;
  }
  v108 = 0;
  v109 = (~(v105 << 32) + v105) ^ ((unint64_t)(~(v105 << 32) + v105) >> 22);
  v110 = 9 * ((v109 + ~(v109 << 13)) ^ ((v109 + ~(v109 << 13)) >> 8));
  v111 = (v110 ^ (v110 >> 15)) + ~((v110 ^ (v110 >> 15)) << 27);
  v112 = (v111 >> 31) ^ v111;
  for (m = 1; ; ++m)
  {
    v114 = v112 & v107;
    v115 = (WebCore::Node ***)(v106 + 8 * v114);
    v116 = *v115;
    if (!*v115)
    {
      if (v108)
      {
        *v108 = 0;
        --*(_DWORD *)(*v9 - 16);
        v115 = v108;
      }
      v118 = (WebCore::Node **)WTF::fastMalloc((WTF *)0x18);
      v118[1] = 0;
      v118[2] = 0;
      *v118 = (WebCore::Node *)v105;
      *v115 = v118;
      v127 = *v9;
      if (*v9)
        v128 = *(_DWORD *)(v127 - 12) + 1;
      else
        v128 = 1;
      *(_DWORD *)(v127 - 12) = v128;
      v129 = *v9;
      if (*v9)
        v130 = *(_DWORD *)(v129 - 12);
      else
        v130 = 0;
      v131 = (*(_DWORD *)(v129 - 16) + v130);
      v132 = *(unsigned int *)(v129 - 4);
      if (v132 > 0x400)
      {
        if (v132 <= 2 * v131)
          goto LABEL_162;
      }
      else if (3 * v132 <= 4 * v131)
      {
        if (!(_DWORD)v132)
        {
          v133 = 8;
          goto LABEL_143;
        }
LABEL_162:
        v133 = (_DWORD)v132 << (6 * *(_DWORD *)(v129 - 12) >= (2 * v132));
LABEL_143:
        v134 = v9;
        v135 = v115;
LABEL_160:
        v118 = (WebCore::Node **)*WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::ContainerNode,WTF::RawPtrTraits<WebCore::ContainerNode>,WTF::DefaultRefDerefTraits<WebCore::ContainerNode>>> *>>::rehash(v134, v133, v135);
      }
LABEL_117:
      v125 = (WebCore::Node ***)a1[4];
      v118[1] = (WebCore::Node *)v125;
      v118[2] = 0;
      if (v125)
        v126 = v125 + 2;
      else
        v126 = (WebCore::Node ***)(a1 + 3);
      *v126 = v118;
      a1[4] = (uint64_t)v118;
      goto LABEL_47;
    }
    if (v116 != (WebCore::Node **)-1)
    {
      v115 = v108;
      if (*v116 == (WebCore::Node *)v105)
        break;
    }
    v112 = m + v114;
    v108 = v115;
  }
  if (v105)
  {
    if (*(_DWORD *)(v105 + 24) == 2)
    {
      if ((*(_WORD *)(v105 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v105);
    }
    else
    {
      *(_DWORD *)(v105 + 24) -= 2;
    }
  }
LABEL_47:
  if (!*((_BYTE *)a4 + 10))
    goto LABEL_48;
  if (a3)
  {
    v75 = a1[5];
    if (v75)
    {
      v76 = *(_DWORD *)(v75 - 8);
      v77 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
      v78 = 9 * ((v77 + ~(v77 << 13)) ^ ((v77 + ~(v77 << 13)) >> 8));
      v79 = (v78 ^ (v78 >> 15)) + ~((v78 ^ (v78 >> 15)) << 27);
      v80 = v76 & ((v79 >> 31) ^ v79);
      v81 = 1;
      for (n = *(WebCore::Node ***)(v75 + 8 * v80); n; n = *(WebCore::Node ***)(v75 + 8 * v80))
      {
        if (n != (WebCore::Node **)-1 && *n == a3)
          goto LABEL_48;
        v80 = (v80 + v81++) & v76;
      }
    }
  }
  *((_DWORD *)this + 6) += 2;
  v84 = a1 + 5;
  v83 = a1[5];
  if (v83
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>>::rehash(a1 + 5, 8u, 0), (v83 = *v84) != 0))
  {
    v85 = *(_DWORD *)(v83 - 8);
  }
  else
  {
    v85 = 0;
  }
  v86 = 0;
  v87 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v88 = 9 * ((v87 + ~(v87 << 13)) ^ ((v87 + ~(v87 << 13)) >> 8));
  v89 = (v88 ^ (v88 >> 15)) + ~((v88 ^ (v88 >> 15)) << 27);
  v90 = (v89 >> 31) ^ v89;
  v91 = 1;
  while (2)
  {
    v92 = v90 & v85;
    v93 = (WebCore::Node ***)(v83 + 8 * v92);
    v94 = *v93;
    if (!*v93)
    {
      if (v86)
      {
        *v86 = 0;
        --*(_DWORD *)(*v84 - 16);
        v93 = v86;
      }
      v95 = (WebCore::Node **)WTF::fastMalloc((WTF *)0x18);
      v95[1] = 0;
      v95[2] = 0;
      *v95 = this;
      *v93 = v95;
      v96 = *v84;
      if (*v84)
        v97 = *(_DWORD *)(v96 - 12) + 1;
      else
        v97 = 1;
      *(_DWORD *)(v96 - 12) = v97;
      v98 = *v84;
      if (*v84)
        v99 = *(_DWORD *)(v98 - 12);
      else
        v99 = 0;
      v100 = (*(_DWORD *)(v98 - 16) + v99);
      v101 = *(unsigned int *)(v98 - 4);
      if (v101 > 0x400)
      {
        if (v101 > 2 * v100)
          goto LABEL_89;
      }
      else
      {
        if (3 * v101 > 4 * v100)
        {
LABEL_89:
          v102 = a1[7];
          v95[1] = (WebCore::Node *)v102;
          v95[2] = 0;
          if (v102)
            v103 = (WebCore::Node ***)(v102 + 16);
          else
            v103 = (WebCore::Node ***)(a1 + 6);
          *v103 = v95;
          a1[7] = (uint64_t)v95;
          goto LABEL_48;
        }
        if (!(_DWORD)v101)
        {
          v117 = 8;
          goto LABEL_152;
        }
      }
      v117 = (_DWORD)v101 << (6 * *(_DWORD *)(v98 - 12) >= (2 * v101));
LABEL_152:
      v95 = (WebCore::Node **)*WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>> *>>::rehash(a1 + 5, v117, v93);
      goto LABEL_89;
    }
    if (v94 == (WebCore::Node **)-1 || (v93 = v86, *v94 != this))
    {
      v90 = v91 + v92;
      ++v91;
      v86 = v93;
      continue;
    }
    break;
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
LABEL_48:
  *((_DWORD *)this + 6) += 2;
  v54 = a1[8];
  v53 = a1 + 8;
  v52 = v54;
  if (v54
    || (WTF::HashTable<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WebCore::Style::ElementUpdate>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WebCore::Style::ElementUpdate>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WebCore::Style::ElementUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WebCore::Style::ElementUpdate>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>>::rehash(v53, 8u), (v52 = *v53) != 0))
  {
    v55 = *(_DWORD *)(v52 - 8);
  }
  else
  {
    v55 = 0;
  }
  v56 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
  v57 = 9 * ((v56 + ~(v56 << 13)) ^ ((v56 + ~(v56 << 13)) >> 8));
  v58 = (v57 ^ (v57 >> 15)) + ~((v57 ^ (v57 >> 15)) << 27);
  v59 = v55 & ((v58 >> 31) ^ v58);
  v60 = (WebCore::Node **)(v52 + 24 * v59);
  v61 = *v60;
  if (!*v60)
  {
LABEL_58:
    *v60 = this;
    v64 = *a4;
    *a4 = 0;
    v65 = v60[1];
    v60[1] = v64;
    if (v65)
    {
      WebCore::RenderStyle::~RenderStyle(v65, this);
      if (*(_DWORD *)v66)
      {
        *((_OWORD *)v66 + 2) = 0u;
        *((_OWORD *)v66 + 3) = 0u;
        *(_OWORD *)v66 = 0u;
        *((_OWORD *)v66 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v66, v67);
      }
    }
    v68 = *((_WORD *)a4 + 4);
    *((_BYTE *)v60 + 18) = *((_BYTE *)a4 + 10);
    *((_WORD *)v60 + 8) = v68;
    v69 = *v53;
    if (*v53)
      v70 = *(_DWORD *)(v69 - 12) + 1;
    else
      v70 = 1;
    *(_DWORD *)(v69 - 12) = v70;
    v71 = *v53;
    if (*v53)
      v72 = *(_DWORD *)(v71 - 12);
    else
      v72 = 0;
    v73 = (*(_DWORD *)(v71 - 16) + v72);
    v74 = *(unsigned int *)(v71 - 4);
    if (v74 > 0x400)
    {
      if (v74 > 2 * v73)
        return;
    }
    else
    {
      if (3 * v74 > 4 * v73)
        return;
      if (!(_DWORD)v74)
      {
        v104 = 8;
        goto LABEL_123;
      }
    }
    v104 = (_DWORD)v74 << (6 * *(_DWORD *)(v71 - 12) >= (2 * v74));
LABEL_123:
    WTF::HashTable<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WebCore::Style::ElementUpdate>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WebCore::Style::ElementUpdate>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashMap<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,WebCore::Style::ElementUpdate,WTF::DefaultHash<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>,WTF::HashTraits<WebCore::Style::ElementUpdate>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>>>::rehash(v53, v104);
    return;
  }
  v62 = 0;
  v63 = 1;
  while (v61 != this)
  {
    if (v61 == (WebCore::Node *)-1)
      v62 = v60;
    v59 = (v59 + v63) & v55;
    v60 = (WebCore::Node **)(v52 + 24 * v59);
    v61 = *v60;
    ++v63;
    if (!*v60)
    {
      if (v62)
      {
        *v62 = 0;
        v62[1] = 0;
        v62[2] = 0;
        --*(_DWORD *)(*v53 - 16);
        v60 = v62;
      }
      goto LABEL_58;
    }
  }
  if (*((_DWORD *)this + 6) == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      WebCore::Node::removedLastRef(this);
  }
  else
  {
    *((_DWORD *)this + 6) -= 2;
  }
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::HashTableTraits>::add<WebCore::Style::TreeResolver::QueryContainerState>(uint64_t result, uint64_t *a2, uint64_t *a3, __int16 *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int i;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = ~(*a3 << 32) + *a3;
  v14 = 9
      * (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) ^ (((v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13)) >> 8));
  v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  v16 = (v15 >> 31) ^ v15;
  for (i = 1; ; ++i)
  {
    v18 = v16 & v10;
    v19 = v8 + 16 * v18;
    v20 = *(_QWORD *)v19;
    if (*(_QWORD *)v19 != -1)
      break;
    v11 = v8 + 16 * v18;
LABEL_10:
    v16 = i + v18;
  }
  if (!v20)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(v11 + 10) = 0;
      *(_WORD *)(v11 + 8) = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v19 = v11;
    }
    *a3 = 0;
    result = *(_QWORD *)v19;
    *(_QWORD *)v19 = v12;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 2)
      {
        if ((*(_WORD *)(result + 30) & 0x400) == 0)
          result = WebCore::Node::removedLastRef((WebCore::Node *)result);
      }
      else
      {
        *(_DWORD *)(result + 24) -= 2;
      }
    }
    v21 = *a4;
    if (!*(_BYTE *)(v19 + 10))
      *(_BYTE *)(v19 + 10) = 1;
    *(_WORD *)(v19 + 8) = v21;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v27 = *a2;
    if (*a2)
      v28 = *(_DWORD *)(v27 - 12);
    else
      v28 = 0;
    v29 = (*(_DWORD *)(v27 - 16) + v28);
    v30 = *(unsigned int *)(v27 - 4);
    if (v30 > 0x400)
    {
      if (v30 <= 2 * v29)
        goto LABEL_30;
    }
    else if (3 * v30 <= 4 * v29)
    {
      if (!(_DWORD)v30)
      {
        v31 = 8;
LABEL_33:
        result = WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a2, v31, (uint64_t *)v19);
        v19 = result;
        v27 = *a2;
        if (*a2)
          v30 = *(unsigned int *)(v27 - 4);
        else
          v30 = 0;
        goto LABEL_35;
      }
LABEL_30:
      v31 = (_DWORD)v30 << (6 * *(_DWORD *)(v27 - 12) >= (2 * v30));
      goto LABEL_33;
    }
LABEL_35:
    v26 = v27 + 16 * v30;
    v25 = 1;
    goto LABEL_36;
  }
  if (v20 != v12)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v24 = 0;
  else
    v24 = *(unsigned int *)(v8 - 4);
  v25 = 0;
  v26 = v8 + 16 * v24;
LABEL_36:
  *(_QWORD *)v7 = v19;
  *(_QWORD *)(v7 + 8) = v26;
  *(_BYTE *)(v7 + 16) = v25;
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Element,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WebCore::WeakPtrImplWithEventTargetData>::begin(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a2;
  if (!*a2)
  {
    v5 = 0;
    v3 = 0;
LABEL_10:
    v4 = v2 + 16 * v3;
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = v2 + 16 * v3;
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = v2 + 16 * v3;
    goto LABEL_10;
  }
  v5 = *a2;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = *a2;
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 += 16;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v4;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v8 = v2 + 16 * v7;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = v2 + 16 * v7;
  *(_DWORD *)(result + 40) = 0;
LABEL_15:
  while (v5 != v8 && !*(_QWORD *)(*(_QWORD *)v5 + 8))
  {
    v9 = v5 + 16;
    *(_QWORD *)(result + 8) = v5 + 16;
    v5 = v4;
    if (v9 != v4)
    {
      v5 = v9;
      while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
      {
        v5 += 16;
        *(_QWORD *)(result + 8) = v5;
        if (v5 == v4)
        {
          v5 = v4;
          goto LABEL_15;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::WeakHashMap<WebCore::Element,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WebCore::WeakPtrImplWithEventTargetData>::WeakHashMapIterator::operator++(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_QWORD *)(result + 8) + 16;
  *(_QWORD *)(result + 8) = v2;
  if (v2 != v1)
  {
    while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
    {
      v2 += 16;
      *(_QWORD *)(result + 8) = v2;
      if (v2 == v1)
      {
        v2 = v1;
        break;
      }
    }
  }
  ++*(_DWORD *)(result + 40);
  v3 = *(_QWORD *)(result + 24);
LABEL_6:
  while (v2 != v3 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v4 = v2 + 16;
    *(_QWORD *)(result + 8) = v2 + 16;
    v2 = v1;
    if (v4 != v1)
    {
      v2 = v4;
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 16;
        *(_QWORD *)(result + 8) = v2;
        if (v2 == v1)
        {
          v2 = v1;
          goto LABEL_6;
        }
      }
    }
  }
  ++*(_DWORD *)(*(_QWORD *)result + 8);
  return result;
}

WTF *WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::ensure<WebCore::Style::TreeResolver::updateAnchorPositioningState(WebCore::Element&,WebCore::RenderStyle const*)::$_0>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  int i;
  unsigned int v12;
  WTF *v13;
  WTF *v14;
  WTF *result;
  WTF::StringImpl *v16;
  WTF **v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  v8 = *((_DWORD *)*a3 + 4);
  if (v8 < 0x100)
    v9 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v9 = v8 >> 8;
  v10 = 0;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v7;
    v13 = (WTF *)(v6 + 24 * (v9 & v7));
    v14 = *(WTF **)v13;
    if (*(_QWORD *)v13 != -1)
      break;
    v10 = (WTF *)(v6 + 24 * v12);
LABEL_13:
    v9 = i + v12;
  }
  if (!v14)
  {
    if (v10)
    {
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      --*(_DWORD *)(*a2 - 16);
      v13 = v10;
    }
    v16 = *a3;
    if (*a3)
      *(_DWORD *)v16 += 2;
    *(_QWORD *)v13 = v16;
    v17 = (WTF **)((char *)v13 + 8);
    v18 = *((unsigned int *)v13 + 5);
    if ((_DWORD)v18)
    {
      v19 = *v17;
      v20 = 8 * v18;
      do
      {
        v21 = *(_QWORD *)v19;
        *(_QWORD *)v19 = 0;
        if (v21)
        {
          if (*(_DWORD *)(v21 + 24) == 2)
          {
            if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v21);
          }
          else
          {
            *(_DWORD *)(v21 + 24) -= 2;
          }
        }
        v19 = (WTF *)((char *)v19 + 8);
        v20 -= 8;
      }
      while (v20);
    }
    result = *v17;
    if (*v17)
    {
      *((_QWORD *)v13 + 1) = 0;
      *((_DWORD *)v13 + 4) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
    *v17 = 0;
    *((_QWORD *)v13 + 2) = 0;
    v22 = *a2;
    if (*a2)
      v23 = *(_DWORD *)(v22 - 12) + 1;
    else
      v23 = 1;
    *(_DWORD *)(v22 - 12) = v23;
    v26 = *a2;
    if (*a2)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 <= 2 * v28)
        goto LABEL_40;
    }
    else if (3 * v29 <= 4 * v28)
    {
      if (!(_DWORD)v29)
      {
        v30 = 8;
LABEL_45:
        result = (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a2, v30, (WTF::StringImpl **)v13);
        v13 = result;
        v26 = *a2;
        if (*a2)
          LODWORD(v29) = *(_DWORD *)(v26 - 4);
        else
          LODWORD(v29) = 0;
        goto LABEL_49;
      }
LABEL_40:
      v30 = (_DWORD)v29 << (6 * *(_DWORD *)(v26 - 12) >= (2 * v29));
      goto LABEL_45;
    }
LABEL_49:
    v32 = v26 + 24 * v29;
    v31 = 1;
    goto LABEL_50;
  }
  result = (WTF *)WTF::equal(v14, *a3, (const WTF::StringImpl *)a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v24 = *a2;
  if (*a2)
    v25 = *(_DWORD *)(v24 - 4);
  else
    v25 = 0;
  v31 = 0;
  v32 = v24 + 24 * v25;
LABEL_50:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v32;
  *(_BYTE *)(a1 + 16) = v31;
  return result;
}

uint64_t WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::ensure<WebCore::Style::TreeResolver::updateAnchorPositioningState(WebCore::Element&,WebCore::RenderStyle const*)::$_1>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t *v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  char v29;
  uint64_t v30;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>(a3);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = result & v7;
    v12 = (uint64_t *)(v6 + 24 * (result & v7));
    v13 = *v12;
    if (*v12 != -1)
      break;
    v9 = (uint64_t *)(v6 + 24 * v11);
LABEL_10:
    result = i + v11;
  }
  if (!v13)
  {
    if (v9)
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = v9;
    }
    WTF::GenericHashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>::assignToEmpty<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>(v12, a3);
    v15 = v12 + 1;
    v16 = *((unsigned int *)v12 + 5);
    if ((_DWORD)v16)
    {
      v17 = (uint64_t *)*v15;
      v18 = 8 * v16;
      do
      {
        v19 = *v17;
        *v17 = 0;
        if (v19)
        {
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
        ++v17;
        v18 -= 8;
      }
      while (v18);
    }
    result = *v15;
    if (*v15)
    {
      v12[1] = 0;
      *((_DWORD *)v12 + 4) = 0;
      result = WTF::fastFree((WTF *)result, v14);
    }
    *v15 = 0;
    v12[2] = 0;
    v20 = *a2;
    if (*a2)
      v21 = *(_DWORD *)(v20 - 12) + 1;
    else
      v21 = 1;
    *(_DWORD *)(v20 - 12) = v21;
    v24 = *a2;
    if (*a2)
      v25 = *(_DWORD *)(v24 - 12);
    else
      v25 = 0;
    v26 = (*(_DWORD *)(v24 - 16) + v25);
    v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
        goto LABEL_35;
    }
    else if (3 * v27 <= 4 * v26)
    {
      if (!(_DWORD)v27)
      {
        v28 = 8;
LABEL_40:
        result = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(a2, v28, v12);
        v12 = (uint64_t *)result;
        v24 = *a2;
        if (*a2)
          LODWORD(v27) = *(_DWORD *)(v24 - 4);
        else
          LODWORD(v27) = 0;
        goto LABEL_44;
      }
LABEL_35:
      v28 = (_DWORD)v27 << (6 * *(_DWORD *)(v24 - 12) >= (2 * v27));
      goto LABEL_40;
    }
LABEL_44:
    v30 = v24 + 24 * v27;
    v29 = 1;
    goto LABEL_45;
  }
  if (v13 != *a3)
    goto LABEL_10;
  v22 = *a2;
  if (*a2)
    v23 = *(_DWORD *)(v22 - 4);
  else
    v23 = 0;
  v29 = 0;
  v30 = v22 + 24 * v23;
LABEL_45:
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v30;
  *(_BYTE *)(a1 + 16) = v29;
  return result;
}

uint64_t WebCore::Style::TreeResolver::findLastAcceptableAnchorWithName(uint64_t result, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  _BYTE *v4;
  uint64_t v5;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int i;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v4 = (_BYTE *)result;
  v5 = *(_QWORD *)(a2 + 896);
  if (!v5)
    goto LABEL_28;
  v9 = *(_DWORD *)(v5 - 8);
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 < 0x100)
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  else
    v11 = v10 >> 8;
  for (i = 0; ; v11 = i + v13)
  {
    v13 = v11 & v9;
    v14 = v5 + 24 * (v11 & v9);
    result = *(_QWORD *)v14;
    if (*(_QWORD *)v14 != -1)
    {
      if (!result)
      {
        v15 = *(_QWORD *)(a2 + 896);
        if (!v15)
          goto LABEL_28;
        v16 = *(_DWORD *)(v15 - 4);
        v14 = v15 + 24 * v16;
        goto LABEL_14;
      }
      result = WTF::equal((WTF *)result, *a3, (const WTF::StringImpl *)a3);
      if ((result & 1) != 0)
        break;
    }
    ++i;
  }
  v15 = *(_QWORD *)(a2 + 896);
  if (!v15)
    goto LABEL_15;
  v16 = *(_DWORD *)(v15 - 4);
LABEL_14:
  if (v14 == v15 + 24 * v16)
    goto LABEL_28;
LABEL_15:
  v17 = *(uint64_t **)(v14 + 8);
  v18 = *(unsigned int *)(v14 + 20);
  v19 = &v17[v18];
  if (a4)
  {
    while (v19 != v17)
    {
      v20 = *--v19;
      v21 = *(_QWORD *)(v20 + 64);
      v22 = *(_QWORD *)(a4 + 64) & 0xFFFFFFFFFFFFLL;
      if (v22 && (*(_BYTE *)((*(_QWORD *)(a4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
        || (result = v21 & 0xFFFFFFFFFFFFLL, (v21 & 0xFFFFFFFFFFFFLL) != 0)
        && (*(_BYTE *)((v21 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1965BBF74);
      }
      do
        result = (uint64_t)WebCore::RenderObject::containingBlock((WebCore::RenderObject *)result);
      while (result != v22 && result);
      if (result)
        goto LABEL_27;
    }
    goto LABEL_28;
  }
  if (!(_DWORD)v18)
  {
LABEL_28:
    v24 = 0;
    *v4 = 0;
    goto LABEL_29;
  }
  --v19;
LABEL_27:
  v23 = *v19;
  *(_DWORD *)(v23 + 24) = *(_DWORD *)(*v19 + 24) + 2;
  *(_QWORD *)v4 = v23;
  v24 = 1;
LABEL_29:
  v4[8] = v24;
  return result;
}

const WebCore::Element **WebCore::Style::Update::elementUpdate(WebCore::Style::Update *this, const WebCore::Element *a2)
{
  const WebCore::Element **v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  const WebCore::Element **v8;
  const WebCore::Element *v9;
  int v10;

  v2 = (const WebCore::Element **)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = *((_DWORD *)v2 - 2);
    v4 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    v8 = &v2[3 * v7];
    v9 = *v8;
    if (*v8 != a2)
    {
      v10 = 1;
      while (v9)
      {
        v7 = (v7 + v10) & v3;
        v8 = &v2[3 * v7];
        v9 = *v8;
        ++v10;
        if (*v8 == a2)
          goto LABEL_8;
      }
      v8 = &v2[3 * *((unsigned int *)v2 - 1)];
    }
LABEL_8:
    v2 += 3 * *((unsigned int *)v2 - 1);
  }
  else
  {
    v8 = 0;
  }
  if (v8 == v2)
    return 0;
  else
    return v8 + 1;
}

void WebCore::Style::Update::addText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_DWORD *)(a2 + 24) += 2;
  v6 = *(unsigned __int16 *)(a2 + 28);
  if ((v6 & 0x80) != 0)
  {
    v12 = *(_QWORD *)(a2 + 200);
    if (v12)
      goto LABEL_19;
LABEL_17:
    v7 = 0;
    goto LABEL_8;
  }
  if ((~v6 & 0x408) == 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 368))(a2))
  {
    v12 = *(_QWORD *)(a2 + 112);
    if (v12)
      goto LABEL_19;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (!v7)
    goto LABEL_8;
  v8 = *(_WORD *)(v7 + 28);
  if ((v8 & 0x80) == 0)
  {
    if ((v8 & 8) != 0)
    {
      if ((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_8;
      v10 = *(_QWORD *)((*(_QWORD *)(v7 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
      if (!v10)
        goto LABEL_8;
      v11 = *(_QWORD *)(v10 + 224);
      if (v11)
      {
        v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2);
        goto LABEL_8;
      }
    }
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(v7 + 200);
  if (!v12)
    goto LABEL_17;
LABEL_19:
  v7 = *(_QWORD *)(v12 + 8);
LABEL_8:
  WebCore::Style::Update::addText(a1, (WebCore::Node *)a2, (WebCore::Element *)v7, a3);
  if (*(_DWORD *)(a2 + 24) == 2)
  {
    if ((*(_WORD *)(a2 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)a2, v9);
  }
  else
  {
    *(_DWORD *)(a2 + 24) -= 2;
  }
}

double WebCore::Style::Update::addInitialContainingBlockUpdate(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebCore::RenderStyle *v4;
  WTF *v5;
  void *v6;
  double result;

  v3 = *a2;
  *a2 = 0;
  v4 = *(WebCore::RenderStyle **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v3;
  if (v4)
  {
    WebCore::RenderStyle::~RenderStyle(v4, a2);
    if (*(_DWORD *)v5)
    {
      result = 0.0;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
    }
    else
    {
      WTF::fastFree(v5, v6);
    }
  }
  return result;
}

uint64_t WebCore::RenderDescendantIteratorAdapter<WebCore::RenderBox>::begin(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32))
  {
    v2 = *(_QWORD *)((*(unsigned int *)(a1 + 64) | ((unint64_t)*(unsigned __int8 *)(a1 + 68) << 32)) + 8);
    if (v2)
    {
      if ((*(_BYTE *)(v2 + 45) & 4) == 0)
      {
        do
        {
          v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
          if (!v5)
          {
            if (v2 == a1)
              return a1;
            v4 = *(unsigned int *)(v2 + 47);
            if (!(v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
              || (v5 = *(_QWORD *)((v4 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8)) == 0)
            {
              v6 = *(_QWORD *)(v2 + 32);
              if (!v6)
                return a1;
              v7 = *(_QWORD *)(v6 + 8);
              if (!v7 || v7 == a1)
                return a1;
              while (1)
              {
                v9 = *(unsigned int *)(v7 + 47);
                if (v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
                {
                  v5 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
                  if (v5)
                    break;
                }
                v10 = *(_QWORD *)(v7 + 32);
                if (v10)
                {
                  v7 = *(_QWORD *)(v10 + 8);
                  if (v7 && v7 != a1)
                    continue;
                }
                return a1;
              }
            }
          }
          v2 = v5;
        }
        while ((*(_BYTE *)(v5 + 45) & 4) == 0);
      }
    }
  }
  return a1;
}

uint64_t *WebCore::RenderDescendantIterator<WebCore::RenderBox>::operator++(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;

  v1 = *result;
  v2 = result[1];
  if (*(unsigned int *)(v2 + 64) | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)
    && (v3 = *(_QWORD *)((*(unsigned int *)(v2 + 64) | ((unint64_t)*(unsigned __int8 *)(v2 + 68) << 32)) + 8)) != 0)
  {
LABEL_3:
    while ((*(_BYTE *)(v3 + 45) & 4) == 0)
    {
      v12 = result;
      v13 = v1;
      v3 = WebCore::RenderObjectTraversal::next<WebCore::RenderObject>(v3, v1);
      result = v12;
      v1 = v13;
      v4 = 0;
      if (!v3)
        goto LABEL_5;
    }
    v4 = v3;
  }
  else
  {
    if (v2 != v1)
    {
      v5 = *(unsigned int *)(v2 + 47);
      if (v5 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32))
      {
        v3 = *(_QWORD *)((v5 | ((unint64_t)*(unsigned __int8 *)(v2 + 51) << 32)) + 8);
        if (v3)
          goto LABEL_3;
      }
      v6 = *(_QWORD *)(v2 + 32);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7 && v7 != v1)
        {
          while (1)
          {
            v9 = *(unsigned int *)(v7 + 47);
            if (v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32))
            {
              v3 = *(_QWORD *)((v9 | ((unint64_t)*(unsigned __int8 *)(v7 + 51) << 32)) + 8);
              if (v3)
                goto LABEL_3;
            }
            v10 = *(_QWORD *)(v7 + 32);
            if (!v10)
              break;
            v4 = 0;
            v7 = *(_QWORD *)(v10 + 8);
            if (v7)
              v11 = v7 == v1;
            else
              v11 = 1;
            if (v11)
              goto LABEL_5;
          }
        }
      }
    }
    v4 = 0;
  }
LABEL_5:
  result[1] = v4;
  return result;
}

unsigned __int16 *WebCore::Styleable::removeStyleOriginatedAnimationFromListsForOwningElement(WebCore::Styleable *this, WebCore::WebAnimation *a2)
{
  unsigned __int16 *result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  _BYTE v15[8];
  unsigned int v16;
  char v17;

  result = (unsigned __int16 *)(*(uint64_t (**)(WebCore::WebAnimation *))(*(_QWORD *)a2 + 120))(a2);
  if ((_DWORD)result)
  {
    v5 = (uint64_t *)(WebCore::Element::ensureAnimationRareData(*(_QWORD *)this, (char *)this + 8) + 72);
    v15[0] = 0;
    v16 = -1;
    v6 = *((unsigned int *)a2 + 60);
    if ((_DWORD)v6 != -1)
    {
      ((void (*)(char *, _BYTE *, char *))*(&off_1E3450168 + v6))(&v17, v15, (char *)a2 + 232);
      v16 = v6;
    }
    v7 = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(v5, (uint64_t)v15);
    if (v16 != -1)
      ((void (*)(char *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                             + v16))(&v17, v15);
    v8 = *v5;
    if (*v5)
      v8 += 24 * *(unsigned int *)(v8 - 4);
    if (v8 != v7 && *(WebCore::WebAnimation **)(v7 + 16) == a2)
    {
      v13 = (unsigned __int16 *)v5;
      v14 = v7;
      return WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::remove(v13, v14);
    }
    v9 = (uint64_t *)(WebCore::Element::ensureAnimationRareData(*(_QWORD *)this, (char *)this + 8) + 64);
    v15[0] = 0;
    v16 = -1;
    v10 = *((unsigned int *)a2 + 60);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *, _BYTE *, char *))*(&off_1E3450168 + v10))(&v17, v15, (char *)a2 + 232);
      v16 = v10;
    }
    result = (unsigned __int16 *)WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(v9, (uint64_t)v15);
    v11 = (uint64_t)result;
    if (v16 != -1)
      result = (unsigned __int16 *)((uint64_t (*)(char *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                                             + v16))(&v17, v15);
    v12 = *v9;
    if (*v9)
      v12 += 24 * *(unsigned int *)(v12 - 4);
    if (v12 != v11 && *(WebCore::WebAnimation **)(v11 + 16) == a2)
    {
      v13 = (unsigned __int16 *)v9;
      v14 = v11;
      return WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::remove(v13, v14);
    }
  }
  return result;
}

unsigned __int16 *WebCore::Styleable::animationWasRemoved(WebCore::Styleable *this, WebCore::WebAnimation *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  WTF *v14;
  unsigned __int16 *result;

  v4 = WebCore::Element::ensureAnimationRareData(*(_QWORD *)this, (char *)this + 8);
  v7 = *(_QWORD *)(v4 + 16);
  v5 = (uint64_t *)(v4 + 16);
  v6 = v7;
  if (v7)
  {
    v8 = *(_DWORD *)(v6 - 8);
    v9 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    for (i = 1; ; ++i)
    {
      v14 = *(WTF **)(v6 + 8 * v12);
      if (v14 != (WTF *)-1)
      {
        if (!v14)
          goto LABEL_8;
        if (*(WebCore::WebAnimation **)v14 == a2)
          break;
      }
      v12 = (v12 + i) & v8;
    }
    if (v12 == *(_DWORD *)(v6 - 4))
      v14 = 0;
  }
  else
  {
    v14 = 0;
  }
LABEL_8:
  WTF::ListHashSet<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::remove(v5, v5, v14);
  result = (unsigned __int16 *)(*(uint64_t (**)(WebCore::WebAnimation *))(*(_QWORD *)a2 + 120))(a2);
  if ((_DWORD)result)
    return WebCore::Styleable::removeStyleOriginatedAnimationFromListsForOwningElement(this, a2);
  return result;
}

uint64_t WTF::ListHashSet<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t *v9;
  int i;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = (uint64_t *)(v6 + 8 * (result & v7));
    v12 = (_QWORD *)*v11;
    if (!*v11)
      break;
    if (v12 != (_QWORD *)-1)
    {
      v11 = v9;
      if (*v12 == *a3)
      {
        v22 = 0;
        goto LABEL_20;
      }
    }
    result = i + (result & v7);
    v9 = v11;
  }
  if (v9)
  {
    *v9 = 0;
    --*(_DWORD *)(*a2 - 16);
    v11 = v9;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  v13 = *a3;
  *(_DWORD *)(v13 + 24) = *(_DWORD *)(*a3 + 24) + 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v13;
  *v11 = result;
  v14 = *a2;
  if (*a2)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18)
      goto LABEL_16;
LABEL_22:
    v11 = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::expand(a2, (_QWORD **)v11);
    result = *v11;
    goto LABEL_16;
  }
  if (3 * v19 <= 4 * v18)
    goto LABEL_22;
LABEL_16:
  v20 = a2[2];
  *(_QWORD *)(result + 8) = v20;
  *(_QWORD *)(result + 16) = 0;
  if (v20)
    v21 = (uint64_t *)(v20 + 16);
  else
    v21 = a2 + 1;
  *v21 = result;
  a2[2] = result;
  v12 = (_QWORD *)*v11;
  v22 = 1;
LABEL_20:
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

{
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t *v9;
  int i;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;

  v6 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::expand(a2, 0), (v6 = *a2) != 0))
  {
    v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v7 = 0;
  }
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a3);
  v9 = 0;
  for (i = 1; ; ++i)
  {
    v11 = (uint64_t *)(v6 + 8 * (result & v7));
    v12 = (_QWORD *)*v11;
    if (!*v11)
      break;
    if (v12 != (_QWORD *)-1)
    {
      v11 = v9;
      if (*v12 == *a3)
      {
        v22 = 0;
        goto LABEL_18;
      }
    }
    result = i + (result & v7);
    v9 = v11;
  }
  if (v9)
  {
    *v9 = 0;
    --*(_DWORD *)(*a2 - 16);
    v11 = v9;
  }
  result = WTF::fastMalloc((WTF *)0x18);
  v13 = *a3;
  *a3 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v13;
  *v11 = result;
  v14 = *a2;
  if (*a2)
    v15 = *(_DWORD *)(v14 - 12) + 1;
  else
    v15 = 1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *a2;
  if (*a2)
    v17 = *(_DWORD *)(v16 - 12);
  else
    v17 = 0;
  v18 = (*(_DWORD *)(v16 - 16) + v17);
  v19 = *(unsigned int *)(v16 - 4);
  if (v19 > 0x400)
  {
    if (v19 > 2 * v18)
      goto LABEL_14;
LABEL_20:
    v11 = WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::expand(a2, (_QWORD **)v11);
    result = *v11;
    goto LABEL_14;
  }
  if (3 * v19 <= 4 * v18)
    goto LABEL_20;
LABEL_14:
  v20 = a2[2];
  *(_QWORD *)(result + 8) = v20;
  *(_QWORD *)(result + 16) = 0;
  if (v20)
    v21 = (uint64_t *)(v20 + 16);
  else
    v21 = a2 + 1;
  *v21 = result;
  a2[2] = result;
  v12 = (_QWORD *)*v11;
  v22 = 1;
LABEL_18:
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v22;
  return result;
}

uint64_t WebCore::compileTransitionPropertiesInStyle(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  _BYTE v17[8];
  unsigned int v18;
  _QWORD v19[3];
  _QWORD *v20;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 32) + 72);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 + 20);
    if ((_DWORD)v6)
    {
      v9 = result;
      v10 = *(uint64_t **)(v5 + 8);
      for (i = 8 * v6; i; i -= 8)
      {
        v12 = *v10;
        v13 = *(unsigned __int8 *)(*v10 + 8);
        v16 = *(_BYTE *)(*v10 + 8);
        v17[0] = 0;
        v18 = -1;
        v14 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v14 != -1)
        {
          result = ((uint64_t (*)(_QWORD *, _BYTE *, uint64_t))*(&off_1E3450168 + v14))(v19, v17, v12 + 16);
          v18 = v14;
          v13 = v16;
        }
        if (v13 == 2)
        {
          v19[0] = v9;
          v19[1] = a2;
          v19[2] = a3;
          if (v14 == 0xFFFFFFFFLL)
          {
            v15 = std::__throw_bad_variant_access[abi:sn180100]();
            return WTF::HashTableConstIteratorAdapter<WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>::operator++(v15);
          }
          v20 = v19;
          result = ((uint64_t (*)(_QWORD **, _BYTE *))*(&off_1E3450188 + v14))(&v20, v17);
          v14 = v18;
        }
        else if (!v13)
        {
          *a4 = 1;
        }
        if (v14 != 0xFFFFFFFFLL)
          result = ((uint64_t (*)(_QWORD *, _BYTE *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                               + v14))(v19, v17);
        ++v10;
      }
    }
  }
  else
  {
    *a4 = 1;
  }
  return result;
}

unsigned __int16 **WTF::HashTableConstIteratorAdapter<WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>::operator++(unsigned __int16 **a1)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  BOOL v5;
  char v7;
  char *v8;

  v2 = a1[1];
  v3 = *a1 + 12;
  for (*a1 = v3; v3 != v2; *a1 = v3)
  {
    v4 = *((unsigned int *)v3 + 2);
    if ((_DWORD)v4)
      v5 = 0;
    else
      v5 = *v3 == 0;
    if (!v5)
    {
      if ((_DWORD)v4 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
      }
      else
      {
        v8 = &v7;
        if (!(*((unsigned int (**)(char **))&xmmword_1E3450120 + v4))(&v8))
          return a1;
      }
      v3 = *a1;
      v2 = a1[1];
    }
    v3 += 12;
  }
  return a1;
}

void WebCore::updateCSSTransitionsForStyleableAndProperty(_QWORD *a1, WTF *a2, WTF *a3, WTF *a4, _QWORD *a5, double a6)
{
  uint64_t v6;
  uint64_t v9;
  WTF **v10;
  char v11;
  uint64_t v12;
  WTF **v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  int hasRunningTransitionForProperty;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  WTF *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  WTF *v74;
  int v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF *v89;
  uint64_t v90;
  int v91;
  int v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t *v95;
  _QWORD *v96;
  _DWORD *v97;
  uint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  void *v107;
  WTF *v108;
  WTF *v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  int i;
  unsigned int v114;
  unsigned __int16 *v115;
  uint64_t v116;
  int v117;
  _BOOL4 v119;
  BOOL v121;
  char v122;
  BOOL v123;
  WTF *v124;
  unsigned int *v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 v128;
  _BOOL4 v129;
  int v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  double v135;
  WebCore::DocumentTimeline *v136;
  double v137;
  uint64_t v138;
  __n128 v139;
  char v140;
  unsigned __int8 v141;
  WTF *v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  WTF *v149;
  uint64_t v150;
  double v151;
  WTF::StringImpl *v152;
  int8x16_t ComputedTiming;
  double v154;
  WTF::StringImpl *v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  const WebCore::RenderStyle *v161;
  double v162;
  double v163;
  WTF *v164;
  double v165;
  uint64_t v167;
  _DWORD *v168;
  uint64_t v169;
  uint64_t v170;
  WebCore::Quirks *v171;
  double v172;
  double v173;
  uint64_t *v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  WTF **v178;
  unint64_t v179;
  WTF *v180;
  WebCore::Document *v181;
  char v183;
  _QWORD *v184;
  uint64_t v185;
  WTF *v188[2];
  _QWORD v189[4];
  WTF::StringImpl *v190;
  double v191;
  uint64_t v192;
  _QWORD *v193[6];
  WTF *v194;
  _DWORD *v195;
  uint64_t v196;
  _DWORD *v197;
  _DWORD *v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  uint64_t v202;
  _DWORD *v203;
  uint64_t v204;
  _DWORD *v205;
  _DWORD *v206;
  uint64_t v207;
  uint64_t v208;
  _DWORD *v209;
  uint64_t v210;
  double v211;
  _QWORD v212[2];

  v211 = a6;
  v9 = (uint64_t)(a1 + 1);
  if ((*(_QWORD *)(*a1 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_2;
  v55 = *(unsigned int *)((*(_QWORD *)(*a1 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v55)
    goto LABEL_2;
  v56 = *(uint64_t **)((*(_QWORD *)(*a1 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  if (*((_BYTE *)a1 + 24))
  {
    v57 = 8 * v55;
    while (1)
    {
      v58 = *v56;
      if (*(_BYTE *)(*v56 + 96))
      {
        v59 = *(_DWORD *)(v58 + 80) == *((_DWORD *)a1 + 2) && *(_QWORD *)(v58 + 88) == a1[2];
        if (v59)
          break;
      }
      v10 = 0;
      ++v56;
      v11 = 1;
      v57 -= 8;
      if (!v57)
        goto LABEL_3;
    }
  }
  else
  {
    v72 = 8 * v55;
    v10 = 0;
    while (1)
    {
      v58 = *v56;
      if (!*(_BYTE *)(*v56 + 96))
        break;
      ++v56;
      v11 = 1;
      v72 -= 8;
      if (!v72)
        goto LABEL_3;
    }
  }
  if (*(_QWORD *)v58)
  {
    WebCore::KeyframeEffectStack::sortedEffects((uint64_t *)v188, *(WebCore::KeyframeEffectStack **)v58);
    v74 = v188[0];
    v75 = HIDWORD(v188[1]);
    v76 = (WTF *)((char *)v188[0] + 8 * HIDWORD(v188[1]));
    v77 = 8 * HIDWORD(v188[1]);
    while (1)
    {
      v78 = v77;
      if (!v77)
        break;
      v79 = *(_QWORD *)((char *)v74 + v77 - 8);
      if (v79)
        v80 = *(_QWORD *)(v79 + 8);
      else
        v80 = 0;
      v81 = WebCore::KeyframeEffect::animatesProperty(v80, (uint64_t)a2);
      v77 = v78 - 8;
      if (v81)
      {
        v82 = *(_QWORD *)((char *)v74 + v77);
        if (v82)
          v6 = *(_QWORD *)(v82 + 8);
        else
          v6 = 0;
        break;
      }
    }
    if (v75)
    {
      do
      {
        v83 = *(unsigned int **)v74;
        *(_QWORD *)v74 = 0;
        if (v83)
        {
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            atomic_store(1u, v83);
            WTF::fastFree((WTF *)v83, v73);
          }
        }
        v74 = (WTF *)((char *)v74 + 8);
      }
      while (v74 != v76);
      v74 = v188[0];
    }
    if (v74)
      WTF::fastFree(v74, v73);
    v10 = 0;
    v11 = 1;
    if (!v78 || !v6)
      goto LABEL_3;
    v86 = *(_QWORD *)(v6 + 96);
    if (!v86)
    {
      v10 = 0;
      goto LABEL_3;
    }
    v10 = *(WTF ***)(v86 + 8);
    if (v10)
    {
      v87 = (WTF::StringImpl *)(*((uint64_t (**)(WTF **))*v10 + 13))(v10);
      if (!(_DWORD)v87)
        return;
      v89 = v10[23];
      if (!v89)
        return;
      v90 = *((_QWORD *)v89 + 1);
      if (!v90)
        return;
      v91 = *((unsigned __int8 *)v10 + 208);
      if (*((_BYTE *)v10 + 208))
      {
        v92 = *((_DWORD *)v10 + 48);
        v87 = v10[25];
        if (v87)
          *(_DWORD *)v87 += 2;
      }
      else
      {
        v92 = 0;
      }
      if (v90 == *a1)
      {
        v93 = (v91 != 0) == (*((_BYTE *)a1 + 24) != 0);
        if (v91 && *((_BYTE *)a1 + 24))
        {
          v93 = v92 == *((_DWORD *)a1 + 2) && v87 == (WTF::StringImpl *)a1[2];
LABEL_106:
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
            {
              WTF::StringImpl::destroy(v87, v88);
              if (!v93)
                return;
            }
            else
            {
              *(_DWORD *)v87 -= 2;
              if (!v93)
                return;
            }
            goto LABEL_109;
          }
LABEL_239:
          if (!v93)
            return;
LABEL_109:
          v11 = 0;
          goto LABEL_3;
        }
      }
      else
      {
        v93 = 0;
      }
      if (!v91)
        goto LABEL_239;
      goto LABEL_106;
    }
  }
  else
  {
LABEL_2:
    v10 = 0;
    v11 = 1;
  }
LABEL_3:
  v181 = *(WebCore::Document **)(*(_QWORD *)(*a1 + 40) + 8);
  v210 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 32) + 72);
  v184 = a5;
  v185 = v9;
  v183 = v11;
  v13 = v10;
  v14 = a1;
  if (v12)
  {
    v15 = *(unsigned int *)(v12 + 20);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = *(uint64_t **)(v12 + 8);
      v18 = 8 * v15;
      v19 = 0.0;
      while (1)
      {
        v20 = *v17;
        if ((*(_DWORD *)(*v17 + 112) & 0x10000000) == 0)
        {
          v21 = *(unsigned __int8 *)(v20 + 8);
          LOBYTE(v188[0]) = *(_BYTE *)(v20 + 8);
          LOBYTE(v188[1]) = 0;
          LODWORD(v189[0]) = -1;
          v22 = *(unsigned int *)(v20 + 24);
          if ((_DWORD)v22 != -1)
          {
            ((void (*)(uint64_t *, WTF **, uint64_t))*(&off_1E3450168 + v22))(&v202, &v188[1], v20 + 16);
            LODWORD(v189[0]) = v22;
            v21 = LOBYTE(v188[0]);
            ((void (*)(uint64_t *, WTF **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                     + v22))(&v202, &v188[1]);
          }
          if (v21 == 2)
          {
            LOBYTE(v202) = *(_BYTE *)(v20 + 8);
            LOBYTE(v203) = 0;
            LODWORD(v204) = -1;
            v23 = *(unsigned int *)(v20 + 24);
            if ((_DWORD)v23 == -1)
              goto LABEL_263;
            ((void (*)(WTF **, _DWORD **, uint64_t))*(&off_1E3450168 + v23))(v188, &v203, v20 + 16);
            LODWORD(v204) = v23;
            v188[0] = a2;
            v188[1] = a4;
            v189[0] = a2;
            v194 = (WTF *)v188;
            v24 = ((uint64_t (*)(WTF **, _DWORD **))off_1E34501D0[v23])(&v194, &v203);
            if ((_DWORD)v204 != -1)
              ((void (*)(WTF **, _DWORD **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                       + v204))(v188, &v203);
            if (!v24)
              goto LABEL_15;
          }
          else if (v21)
          {
            goto LABEL_15;
          }
          v210 = *v17;
          v19 = *(double *)(v210 + 56) + fmax(*(double *)(v210 + 64), 0.0);
          v16 = 1;
        }
LABEL_15:
        ++v17;
        v18 -= 8;
        if (!v18)
          goto LABEL_20;
      }
    }
    v16 = 0;
    v19 = 0.0;
LABEL_20:
    v25 = v16 & 1;
  }
  else
  {
    v171 = (WebCore::Quirks *)*((_QWORD *)v181 + 86);
    if (!v171)
      v171 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(v181);
    v25 = WebCore::Quirks::needsResettingTransitionCancelsRunningTransitionQuirk(v171) ^ 1;
    v19 = 0.0;
  }
  v26 = v185;
  v27 = (uint64_t)a2;
  if ((*(_QWORD *)(*v14 + 72) & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_22;
  v60 = *(unsigned int *)((*(_QWORD *)(*v14 + 72) & 0xFFFFFFFFFFFFLL) + 0xA4);
  if (!(_DWORD)v60)
    goto LABEL_22;
  v61 = *(uint64_t **)((*(_QWORD *)(*v14 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
  v62 = *((unsigned __int8 *)v14 + 24);
  if (*((_BYTE *)v14 + 24))
  {
    v63 = 8 * v60;
    v64 = *(uint64_t **)((*(_QWORD *)(*v14 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
    while (1)
    {
      v65 = *v64;
      if (*(_BYTE *)(*v64 + 96))
      {
        if (*(_DWORD *)(v65 + 80) == *((_DWORD *)v14 + 2) && *(_QWORD *)(v65 + 88) == v14[2])
          break;
      }
      ++v64;
      v63 -= 8;
      if (!v63)
        goto LABEL_22;
    }
  }
  else
  {
    v94 = 8 * v60;
    v95 = *(uint64_t **)((*(_QWORD *)(*v14 + 72) & 0xFFFFFFFFFFFFLL) + 0x98);
    while (1)
    {
      v65 = *v95;
      if (!*(_BYTE *)(*v95 + 96))
        break;
      ++v95;
      v94 -= 8;
      if (!v94)
        goto LABEL_22;
    }
  }
  v96 = *(_QWORD **)(v65 + 8);
  if (v96)
  {
    LODWORD(v202) = 0;
    v97 = (_DWORD *)v96[1];
    ++*v97;
    v98 = v96[2];
    v99 = (_DWORD *)v96[3];
    v203 = v97;
    v204 = v98;
    ++*v99;
    v205 = v99;
    v100 = (_DWORD *)v96[4];
    ++*v100;
    v101 = v96[5];
    v206 = v100;
    v207 = v101;
    v208 = 0;
    v102 = (_DWORD *)v96[7];
    ++*v102;
    v209 = v102;
    if (v62)
    {
      v103 = 8 * v60;
      while (1)
      {
        v104 = *v61;
        if (*(_BYTE *)(*v61 + 96))
        {
          if (*(_DWORD *)(v104 + 80) == *((_DWORD *)v14 + 2) && *(_QWORD *)(v104 + 88) == v14[2])
            break;
        }
        ++v61;
        v103 -= 8;
        if (!v103)
          goto LABEL_23;
      }
    }
    else
    {
      v106 = 8 * v60;
      while (1)
      {
        v104 = *v61;
        if (!*(_BYTE *)(*v61 + 96))
          break;
        ++v61;
        v106 -= 8;
        if (!v106)
          goto LABEL_23;
      }
    }
    if (*(_QWORD *)v104)
    {
      v177 = v14;
      v178 = v13;
      WebCore::KeyframeEffectStack::sortedEffects((uint64_t *)&v194, *(WebCore::KeyframeEffectStack **)v104);
      v108 = v194;
      if (HIDWORD(v195))
      {
        v179 = 0;
        v180 = (WTF *)((char *)v194 + 8 * HIDWORD(v195));
        while (1)
        {
          if (*(_QWORD *)v108)
            v13 = *(WTF ***)(*(_QWORD *)v108 + 8);
          else
            v13 = 0;
          if (*((_DWORD *)v13 + 39))
          {
            v109 = v13[20];
            if (v109)
            {
              v110 = *(unsigned int *)(v27 + 8);
              if ((_DWORD)v110 != -1)
              {
                v111 = *((_DWORD *)v109 - 2);
                v188[0] = (WTF *)v193;
                v112 = ((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNS6_11DefaultHashINS_7variantIJN7WebCore13CSSPropertyIDENS6_10AtomStringEEEEE4hashERKSD_EUlSB_E_JZNSE_4hashESG_EUlRKSC_E_EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v110])(v188, v27);
                for (i = 0; ; v112 = i + v114)
                {
                  v114 = v112 & v111;
                  v115 = (unsigned __int16 *)((char *)v109 + 16 * (v112 & v111));
                  v116 = *((unsigned int *)v115 + 2);
                  v117 = *(_DWORD *)(v27 + 8);
                  v119 = v117 == (_DWORD)v116 && v117 != -1;
                  if ((_DWORD)v116 == -1 || !v119)
                  {
                    v121 = v117 == -1;
                    if ((_DWORD)v116 != -1)
                      v121 = v119;
                    if (v121)
                      goto LABEL_183;
                  }
                  else
                  {
                    v188[0] = (WTF *)v193;
                    v122 = ((uint64_t (*)(WTF **, char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEESI_EEEDcmOT_DpOT0____fdiagonal[v116])(v188, (char *)v109 + 16 * v114, v27);
                    if ((v122 & 1) != 0)
                      goto LABEL_183;
                    LODWORD(v116) = *((_DWORD *)v115 + 2);
                  }
                  if ((_DWORD)v116)
                    v123 = 0;
                  else
                    v123 = *v115 == 0;
                  if (v123)
                    goto LABEL_162;
                  ++i;
                }
              }
LABEL_263:
              std::__throw_bad_variant_access[abi:sn180100]();
LABEL_264:
              (*((void (**)(WTF **))*v13 + 9))(v13);
              goto LABEL_40;
            }
          }
          else
          {
            v188[0] = (WTF *)v13;
            v188[1] = (WTF *)v13;
            v132 = *(unsigned int *)(v27 + 8);
            if ((_DWORD)v132 == -1)
              goto LABEL_263;
            v193[0] = v188;
            if (((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore14KeyframeEffect16animatesPropertyERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEEE3__0JZNKS9_16animatesPropertyESF_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v132])(v193, v27) != -1)goto LABEL_183;
          }
LABEL_162:
          v124 = v13[12];
          if (!v124)
            goto LABEL_194;
          v125 = (unsigned int *)*((_QWORD *)v124 + 1);
          if (!v125 || !(*(unsigned int (**)(unsigned int *))(*(_QWORD *)v125 + 120))(v125))
            goto LABEL_194;
          LOBYTE(v188[0]) = 0;
          LODWORD(v188[1]) = -1;
          v126 = v125[60];
          if ((_DWORD)v126 != -1)
          {
            ((void (*)(_QWORD **, WTF **, unsigned int *))*(&off_1E3450168 + v126))(v193, v188, v125 + 58);
            LODWORD(v188[1]) = v126;
          }
          v127 = *(unsigned int *)(v27 + 8);
          v128 = v127 == v126;
          v59 = v127 == 0xFFFFFFFFLL;
          v129 = v127 == 0xFFFFFFFFLL;
          if (v59)
            v128 = 0;
          if (v126 == 0xFFFFFFFFLL)
            v130 = v129;
          else
            v130 = v128;
          if (v126 != 0xFFFFFFFFLL && v128)
          {
            v193[0] = v212;
            v130 = ((uint64_t (*)(_QWORD **, WTF **, uint64_t))*(&off_1E3450158 + v126))(v193, v188, v27);
            v126 = LODWORD(v188[1]);
          }
          if (v126 != 0xFFFFFFFFLL)
            ((void (*)(_QWORD **, WTF **))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                     + v126))(v193, v188);
          if (!v130)
            goto LABEL_194;
LABEL_183:
          v133 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v108 + 8) + 96);
          if (v133)
          {
            v134 = *(_QWORD *)(v133 + 8);
            if (v134 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v134 + 120))(v134) & 1) != 0)
            {
              v135 = *(double *)(v134 + 96);
              v136 = (WebCore::DocumentTimeline *)*((_QWORD *)v181 + 366);
              if (!v136)
              {
                v167 = WTF::fastMalloc((WTF *)0xA0);
                v136 = (WebCore::DocumentTimeline *)WebCore::DocumentTimeline::DocumentTimeline(v167, v181, 0.0);
                v168 = (_DWORD *)*((_QWORD *)v181 + 366);
                *((_QWORD *)v181 + 366) = v136;
                if (v168)
                {
                  if (v168[2] == 1)
                  {
                    (*(void (**)(_DWORD *))(*(_QWORD *)v168 + 8))(v168);
                    v136 = (WebCore::DocumentTimeline *)*((_QWORD *)v181 + 366);
                  }
                  else
                  {
                    --v168[2];
                  }
                }
                v27 = (uint64_t)a2;
              }
              v137 = COERCE_DOUBLE(WebCore::DocumentTimeline::currentTime(v136));
              v138 = 0;
              v139 = 0uLL;
              *(_OWORD *)v188 = 0u;
              memset(v189, 0, 25);
              if (v140 && (v139.n128_f64[0] = v137, v135 == v137))
              {
                v139.n128_u64[0] = *(_QWORD *)(v134 + 256);
                v138 = 1;
                v141 = v139.n128_u8[0];
                v179 = v139.n128_u64[0] >> 8;
              }
              else
              {
                v141 = 0;
              }
              goto LABEL_193;
            }
          }
          else
          {
            v134 = 0;
          }
          v138 = 0;
          v141 = 0;
          v139 = 0uLL;
          *(_OWORD *)v188 = 0u;
          memset(v189, 0, 25);
LABEL_193:
          (*(void (**)(uint64_t, uint64_t *, WTF **, unint64_t, uint64_t, __n128))(*(_QWORD *)v134 + 272))(v134, &v202, v188, v141 | (v179 << 8), v138, v139);
LABEL_194:
          v108 = (WTF *)((char *)v108 + 8);
          if (v108 == v180)
          {
            v108 = v194;
            if (HIDWORD(v195))
            {
              v142 = (WTF *)((char *)v194 + 8 * HIDWORD(v195));
              do
              {
                v143 = *(unsigned int **)v108;
                *(_QWORD *)v108 = 0;
                if (v143)
                {
                  do
                  {
                    v144 = __ldaxr(v143);
                    v145 = v144 - 1;
                  }
                  while (__stlxr(v145, v143));
                  if (!v145)
                  {
                    atomic_store(1u, v143);
                    WTF::fastFree((WTF *)v143, v107);
                  }
                }
                v108 = (WTF *)((char *)v108 + 8);
              }
              while (v108 != v142);
              v108 = v194;
            }
            break;
          }
        }
      }
      if (v108)
      {
        v194 = 0;
        WTF::fastFree(v108, v107);
      }
      v26 = v185;
      v14 = v177;
      v13 = v178;
    }
  }
  else
  {
LABEL_22:
    LODWORD(v202) = 0;
    v28 = (_DWORD *)*((_QWORD *)a3 + 1);
    ++*v28;
    v29 = *((_QWORD *)a3 + 2);
    v30 = (_DWORD *)*((_QWORD *)a3 + 3);
    v203 = v28;
    v204 = v29;
    ++*v30;
    v205 = v30;
    v31 = (_DWORD *)*((_QWORD *)a3 + 4);
    ++*v31;
    v32 = *((_QWORD *)a3 + 5);
    v206 = v31;
    v207 = v32;
    v208 = 0;
    v33 = (_DWORD *)*((_QWORD *)a3 + 7);
    ++*v33;
    v209 = v33;
  }
LABEL_23:
  if ((v183 & 1) == 0 && (*((unsigned int (**)(WTF **))*v13 + 14))(v13) && *((_BYTE *)v13 + 158))
  {
    LODWORD(v194) = 0;
    v34 = (_DWORD *)*((_QWORD *)a4 + 1);
    ++*v34;
    v35 = *((_QWORD *)a4 + 2);
    v36 = (_DWORD *)*((_QWORD *)a4 + 3);
    v195 = v34;
    v196 = v35;
    ++*v36;
    v197 = v36;
    v37 = (_DWORD *)*((_QWORD *)a4 + 4);
    ++*v37;
    v38 = *((_QWORD *)a4 + 5);
    v198 = v37;
    v199 = v38;
    v200 = 0;
    v39 = (_DWORD *)*((_QWORD *)a4 + 7);
    ++*v39;
    v201 = v39;
    *(_OWORD *)v188 = 0u;
    memset(v189, 0, 25);
    (*((void (**)(WTF **, WTF **, WTF **, _QWORD, _QWORD))*v13 + 34))(v13, &v194, v188, 0, 0);
  }
  else
  {
    LODWORD(v194) = 0;
    v40 = (_DWORD *)*((_QWORD *)a4 + 1);
    ++*v40;
    v41 = *((_QWORD *)a4 + 2);
    v42 = (_DWORD *)*((_QWORD *)a4 + 3);
    v195 = v40;
    v196 = v41;
    ++*v42;
    v197 = v42;
    v43 = (_DWORD *)*((_QWORD *)a4 + 4);
    ++*v43;
    v44 = *((_QWORD *)a4 + 5);
    v198 = v43;
    v199 = v44;
    v200 = 0;
    v45 = (_DWORD *)*((_QWORD *)a4 + 7);
    ++*v45;
    v201 = v45;
  }
  if (v210)
    v46 = ((unint64_t)*(unsigned int *)(v210 + 112) >> 8) & 1;
  else
    LOBYTE(v46) = 0;
  v193[0] = v14;
  v193[1] = (_QWORD *)v27;
  v193[2] = &v211;
  v193[3] = &v210;
  v193[4] = &v194;
  v193[5] = v184;
  hasRunningTransitionForProperty = WebCore::Element::hasRunningTransitionForProperty(*v14, v26, v27);
  if ((v25 & ~hasRunningTransitionForProperty) == 1 && v19 > 0.0)
  {
    v188[0] = (WTF *)&v202;
    v188[1] = (WTF *)&v194;
    v189[0] = &v202;
    v189[1] = &v194;
    v48 = *(unsigned int *)(v27 + 8);
    if ((_DWORD)v48 == -1)
      goto LABEL_263;
    v212[0] = v188;
    if ((((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation15propertiesEqualERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_11RenderStyleESI_RKNS8_8DocumentEE3__0JZNS9_15propertiesEqualESF_SI_SI_SL_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v48])(v212, v27) & 1) == 0)
    {
      if ((v46 & 1) != 0)
        goto LABEL_37;
      v188[0] = (WTF *)&v202;
      v188[1] = (WTF *)&v194;
      v189[0] = &v202;
      v189[1] = &v194;
      v49 = *(unsigned int *)(v27 + 8);
      if ((_DWORD)v49 == -1)
        goto LABEL_263;
      v212[0] = v188;
      if (((unsigned int (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_11RenderStyleESI_RKNS8_8DocumentEE3__1JZNS9_25canPropertyBeInterpolatedESF_SI_SI_SL_E3__0EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v49])(v212, v27))
      {
LABEL_37:
        v50 = WebCore::Element::ensureAnimationRareData(*v14, v26);
        if (!WebCore::propertyInStyleMatchesValueForTransitionInMap(v27, (uint64_t)&v194, *(_QWORD *)(v50 + 64)))
        {
          v51 = WebCore::Element::ensureAnimationRareData(*v14, v26);
          WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::remove((uint64_t *)(v51 + 64), v27);
          WebCore::updateCSSTransitionsForStyleableAndProperty(WebCore::Styleable const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WTF::MonotonicTime,WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4::operator()(v193, (const WebCore::RenderStyle *)&v202, &v202, *(double *)(v210 + 56), *(double *)(v210 + 64), 1.0);
          goto LABEL_39;
        }
      }
    }
  }
  if (WebCore::Element::hasCompletedTransitionForProperty(*v14, v26, v27))
  {
    v169 = WebCore::Element::ensureAnimationRareData(*v14, v26);
    if ((WebCore::propertyInStyleMatchesValueForTransitionInMap(v27, (uint64_t)&v194, *(_QWORD *)(v169 + 64)) & 1) == 0)
    {
      v170 = WebCore::Element::ensureAnimationRareData(*v14, v26);
      WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::remove((uint64_t *)(v170 + 64), v27);
    }
  }
  if ((v25 & 1) != 0)
  {
    if (!hasRunningTransitionForProperty)
      goto LABEL_40;
LABEL_39:
    v52 = WebCore::Element::ensureAnimationRareData(*v14, v26);
    v13 = &v194;
    if ((WebCore::propertyInStyleMatchesValueForTransitionInMap(v27, (uint64_t)&v194, *(_QWORD *)(v52 + 72)) & 1) != 0)
      goto LABEL_40;
    v67 = (uint64_t *)(WebCore::Element::ensureAnimationRareData(*v14, v26) + 72);
    v68 = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(v67, v27);
    WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::take((unsigned __int16 *)&v192, v67, v68);
    v69 = v192;
    v70 = *(WTF **)(v192 + 272);
    v188[0] = v70;
    v188[1] = (WTF *)&v194;
    v189[0] = v70;
    v189[1] = &v194;
    v71 = *(unsigned int *)(v27 + 8);
    if ((_DWORD)v71 == -1)
      goto LABEL_263;
    v212[0] = v188;
    v13 = (WTF **)__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation15propertiesEqualERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_11RenderStyleESI_RKNS8_8DocumentEE3__0JZNS9_15propertiesEqualESF_SI_SI_SL_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix;
    if ((((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation15propertiesEqualERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_11RenderStyleESI_RKNS8_8DocumentEE3__0JZNS9_15propertiesEqualESF_SI_SI_SL_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v71])(v212, v27) & 1) != 0)goto LABEL_68;
    if ((v46 & 1) != 0)
    {
      if (v19 <= 0.0)
      {
LABEL_68:
        WebCore::StyleOriginatedAnimation::cancel((_QWORD *)v69, 0);
        WebCore::StyleOriginatedAnimation::disassociateFromOwningElement(v69);
LABEL_69:
        if (*(_DWORD *)(v69 + 24) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)v69 + 72))(v69);
        else
          --*(_DWORD *)(v69 + 24);
        goto LABEL_40;
      }
    }
    else
    {
      v188[0] = a3;
      v188[1] = (WTF *)&v194;
      v189[0] = a3;
      v189[1] = &v194;
      v146 = *(unsigned int *)(v27 + 8);
      if ((_DWORD)v146 == -1)
        goto LABEL_263;
      v212[0] = v188;
      if ((((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_11RenderStyleESI_RKNS8_8DocumentEE3__1JZNS9_25canPropertyBeInterpolatedESF_SI_SI_SL_E3__0EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v146])(v212, v27) & 1) == 0|| v19 <= 0.0)
      {
        goto LABEL_68;
      }
      v188[0] = v70;
      v188[1] = (WTF *)&v194;
      v189[0] = v70;
      v189[1] = &v194;
      v147 = *(unsigned int *)(v27 + 8);
      if ((_DWORD)v147 == -1)
        goto LABEL_263;
      v212[0] = v188;
      if ((((uint64_t (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation25canPropertyBeInterpolatedERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_11RenderStyleESI_RKNS8_8DocumentEE3__1JZNS9_25canPropertyBeInterpolatedESF_SI_SI_SL_E3__0EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v147])(v212, v27) & 1) == 0)goto LABEL_68;
    }
    v188[0] = *(WTF **)(v69 + 280);
    v188[1] = (WTF *)&v194;
    v189[0] = v188[0];
    v189[1] = &v194;
    v148 = *(unsigned int *)(v27 + 8);
    if ((_DWORD)v148 == -1)
      goto LABEL_263;
    v212[0] = v188;
    if (((unsigned int (*)(_QWORD *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation15propertiesEqualERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_11RenderStyleESI_RKNS8_8DocumentEE3__0JZNS9_15propertiesEqualESF_SI_SI_SL_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v148])(v212, v27))
    {
      v149 = *(WTF **)(v69 + 264);
      v150 = *(_QWORD *)(v69 + 56);
      v151 = 1.0;
      if (v150)
      {
        ComputedTiming = WebCore::AnimationEffect::getComputedTiming(v150, (uint64_t)v188);
        v154 = v191;
        v155 = v190;
        v190 = 0;
        if (v155)
        {
          if (*(_DWORD *)v155 == 2)
            WTF::StringImpl::destroy(v155, v152);
          else
            *(_DWORD *)v155 -= 2;
        }
        if (LODWORD(v188[1]) != -1)
          ((void (*)(_QWORD *, WTF **, __n128))off_1E34501E0[LODWORD(v188[1])])(v212, v188, (__n128)ComputedTiming);
        v151 = v154;
      }
      v156 = 1.0 - *(double *)(v69 + 288) + v151 * *(double *)(v69 + 288);
      if (v156 > 1.0)
        v156 = 1.0;
      if (v156 >= 0.0)
        v157 = v156;
      else
        v157 = 0.0;
      v158 = *(double *)(v210 + 56);
      if (v158 < 0.0)
        v159 = v158 * v157;
      else
        v159 = *(double *)(v210 + 56);
      v160 = v157 * *(double *)(v210 + 64);
      WebCore::StyleOriginatedAnimation::cancel((_QWORD *)v69, 0);
      WebCore::StyleOriginatedAnimation::disassociateFromOwningElement(v69);
      v161 = (const WebCore::RenderStyle *)&v202;
      v162 = v159;
      v163 = v160;
      v164 = v149;
      v165 = v157;
    }
    else
    {
      v172 = *(double *)(v210 + 56);
      v173 = *(double *)(v210 + 64);
      WebCore::StyleOriginatedAnimation::cancel((_QWORD *)v69, 0);
      WebCore::StyleOriginatedAnimation::disassociateFromOwningElement(v69);
      v165 = 1.0;
      v161 = v70;
      v162 = v172;
      v163 = v173;
      v164 = a3;
    }
    WebCore::updateCSSTransitionsForStyleableAndProperty(WebCore::Styleable const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WTF::MonotonicTime,WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4::operator()(v193, v161, v164, v162, v163, v165);
    goto LABEL_69;
  }
  if (hasRunningTransitionForProperty)
  {
    v174 = (uint64_t *)(WebCore::Element::ensureAnimationRareData(*v14, v185) + 72);
    v175 = WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(v174, (uint64_t)a2);
    WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::take((unsigned __int16 *)v188, v174, v175);
    v13 = (WTF **)v188[0];
    WebCore::StyleOriginatedAnimation::cancel((_QWORD *)v188[0], 0);
    WebCore::StyleOriginatedAnimation::disassociateFromOwningElement((uint64_t)v13);
    if (v13)
    {
      if (*((_DWORD *)v13 + 6) == 1)
        goto LABEL_264;
      --*((_DWORD *)v13 + 6);
    }
  }
  else if (WebCore::Element::hasCompletedTransitionForProperty(*v14, v185, (uint64_t)a2))
  {
    v176 = WebCore::Element::ensureAnimationRareData(*v14, v185);
    WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::remove((uint64_t *)(v176 + 64), (uint64_t)a2);
  }
LABEL_40:
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v194, v53);
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)&v202, v54);
}

uint64_t WebCore::Styleable::capturedInViewTransition(WebCore::Styleable *this, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v3;
  WebCore::Styleable *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _QWORD *v16;
  int v17;
  uint64_t v19;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 40) + 8) + 2112);
  if (!v3)
    return 0;
  ++*(_DWORD *)(v3 + 24);
  if (*(_BYTE *)(v3 + 72) != 3)
  {
LABEL_43:
    v19 = 0;
    goto LABEL_44;
  }
  v4 = this;
  v5 = *(_QWORD *)(v3 + 64);
  if (!v5)
  {
    v8 = 0;
    v6 = 0;
LABEL_48:
    v7 = (_QWORD *)(v5 + 16 * v6);
    goto LABEL_10;
  }
  v6 = *(unsigned int *)(v5 - 4);
  v7 = (_QWORD *)(v5 + 16 * v6);
  if (!*(_DWORD *)(v5 - 12))
  {
    v8 = (_QWORD *)(v5 + 16 * v6);
    goto LABEL_48;
  }
  v8 = *(_QWORD **)(v3 + 64);
  if ((_DWORD)v6)
  {
    v9 = 16 * v6;
    v8 = *(_QWORD **)(v3 + 64);
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        v8 = v7;
        break;
      }
    }
  }
LABEL_10:
  if (v5)
    v10 = (_QWORD *)(v5 + 16 * *(unsigned int *)(v5 - 4));
  else
    v10 = 0;
  if (v10 == v8)
    goto LABEL_43;
  while (1)
  {
    v11 = v8[1];
    v12 = *(_QWORD *)(v11 + 56);
    if (!v12)
      goto LABEL_26;
    v13 = *(_QWORD *)(v12 + 8);
    if (!v13)
      goto LABEL_26;
    v14 = *(unsigned __int8 *)(v11 + 80);
    v15 = *(_BYTE *)(v11 + 80) != 0;
    if (*(_BYTE *)(v11 + 80))
    {
      v2 = *(_DWORD *)(v11 + 64);
      this = *(WebCore::Styleable **)(v11 + 72);
      if (this)
        *(_DWORD *)this += 2;
      if (v13 != *(_QWORD *)v4)
        goto LABEL_21;
    }
    else
    {
      v2 &= 0xFFFFFF00;
      if (v13 != *(_QWORD *)v4)
        goto LABEL_21;
    }
    v17 = *((unsigned __int8 *)v4 + 24);
    if (v14 && v17 != 0)
      break;
    if ((v14 != 0) == (v17 != 0))
      goto LABEL_52;
LABEL_21:
    if (v14)
      goto LABEL_22;
LABEL_26:
    v16 = v8 + 2;
    v8 = v7;
    if (v16 != v7)
    {
      v8 = v16;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v8 == v10)
      goto LABEL_43;
  }
  if (v2 != *((_DWORD *)v4 + 2) || this != *((WebCore::Styleable **)v4 + 2))
  {
LABEL_22:
    if (this)
    {
      if (*(_DWORD *)this == 2)
        WTF::StringImpl::destroy(this, a2);
      else
        *(_DWORD *)this -= 2;
      this = 0;
    }
    goto LABEL_26;
  }
  v15 = 1;
LABEL_52:
  if (v15 && this != 0)
  {
    if (*(_DWORD *)this == 2)
      WTF::StringImpl::destroy(this, a2);
    else
      *(_DWORD *)this -= 2;
  }
  v19 = 1;
LABEL_44:
  if (*(_DWORD *)(v3 + 24) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  else
    --*(_DWORD *)(v3 + 24);
  return v19;
}

uint64_t WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>::~KeyValuePair(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    if (*v3 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
    else
      --*v3;
  }
  v4 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return a1;
}

unint64_t WTF::IdentityHashTranslator<WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::hash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;

  v1 = *(_QWORD *)a1 + ~(*(_QWORD *)a1 << 32);
  v2 = (v1 ^ (v1 >> 22)) + ~((v1 ^ (v1 >> 22)) << 13);
  v3 = (9 * (v2 ^ (v2 >> 8))) ^ ((9 * (v2 ^ (v2 >> 8))) >> 15);
  v4 = ~(*(_QWORD *)(a1 + 8) << 32) + *(_QWORD *)(a1 + 8);
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = ((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27));
  LODWORD(v6) = ~(*(unsigned __int8 *)(a1 + 16) << 15) + *(unsigned __int8 *)(a1 + 16);
  LODWORD(v6) = (9 * (v6 ^ (v6 >> 10))) ^ ((9 * (v6 ^ (v6 >> 10))) >> 6);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * (((v3 + ~(v3 << 27)) >> 31) ^ ((_DWORD)v3 + ~((_DWORD)v3 << 27)))
                           + 95187966
                           * ((0xD7862706ELL
                                           * (unint64_t)(95187966
                                                              * (((_DWORD)v6 + ~((_DWORD)v6 << 11)) ^ ((v6 + ~((_DWORD)v6 << 11)) >> 16))
                                                              + 277951225 * v7)) >> 4))) >> 4;
}

uint64_t WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::reinsert(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>(a1, a2);
  v5 = v4;
  v6 = *(_DWORD **)(v4 + 8);
  *(_QWORD *)(v5 + 8) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *, double))(*(_QWORD *)v6 + 16))(v6, v3);
    else
      --v6[2];
  }
  v7 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)v5 = v7;
  *(_QWORD *)(v5 + 8) = v8;
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(a2 + 16);
  return v5;
}

double WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::IdentityExtractor,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>,std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  int v4;
  int i;
  int v6;
  uint64_t v7;
  double result;
  BOOL v9;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = WTF::IdentityHashTranslator<WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::hash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>(a2);
  for (i = 0; ; v4 = i + v6)
  {
    v6 = v4 & v3;
    v7 = a1 + 24 * (v4 & v3);
    result = *(double *)v7;
    v9 = *(double *)v7 == INFINITY && *(_QWORD *)(v7 + 8) == 0;
    if (v9 && !*(_BYTE *)(v7 + 16))
      break;
    ++i;
  }
  return result;
}

void WebCore::Style::Resolver::keyframeRulesForName(WTF::AtomString const&)const::$_1::operator()(_QWORD *a1, uint64_t a2)
{
  WebCore::CubicBezierTimingFunction *PropertyCSSValue;
  const WebCore::CSSValue *v4;
  WebCore::TimingFunction *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::TimingFunction *v10;

  PropertyCSSValue = (WebCore::CubicBezierTimingFunction *)WebCore::StyleProperties::getPropertyCSSValue(a2, 55, &v10);
  v5 = v10;
  if (!v10)
    goto LABEL_2;
  PropertyCSSValue = (WebCore::CubicBezierTimingFunction *)WebCore::TimingFunction::createFromCSSValue((uint64_t)v10, v4, &v9);
  v8 = v9;
  if (v9)
    *a1 = v9;
  if (*(_DWORD *)v5 == 2)
    PropertyCSSValue = (WebCore::CubicBezierTimingFunction *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v5, v7);
  else
    *(_DWORD *)v5 -= 2;
  if (!v8)
  {
LABEL_2:
    WebCore::CubicBezierTimingFunction::defaultTimingFunction(PropertyCSSValue);
    ++*(_DWORD *)(v6 + 8);
    *a1 = v6;
  }
}

uint64_t WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  WebCore::Style::Resolver *v7;
  WTF *v8;
  bmalloc::api *v9;
  void *v10;
  WebCore::StyleSheetContents **v11;
  uint64_t v12;
  WebCore::StyleSheetContents *v13;
  WTF *v14;
  void *v15;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = a1 + 32 * i;
      v6 = *(unsigned int *)(v5 + 12);
      if ((_DWORD)v6 != -1)
      {
        v7 = *(WebCore::Style::Resolver **)(v5 + 24);
        *(_QWORD *)(v5 + 24) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 1)
          {
            WebCore::Style::Resolver::~Resolver(v7);
            bmalloc::api::isoDeallocate(v9, v10);
            v6 = *(unsigned int *)(v5 + 12);
          }
          else
          {
            --*(_DWORD *)v7;
          }
        }
        if (v6)
        {
          v11 = *(WebCore::StyleSheetContents ***)v5;
          v12 = 8 * v6;
          do
          {
            v13 = *v11;
            *v11 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 1)
              {
                WebCore::StyleSheetContents::~StyleSheetContents(v13, a2);
                WTF::fastFree(v14, v15);
              }
              else
              {
                --*(_DWORD *)v13;
              }
            }
            ++v11;
            v12 -= 8;
          }
          while (v12);
        }
        v8 = *(WTF **)v5;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
          WTF::fastFree(v8, a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != -1)
        a1 = WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>::~KeyValuePair(a1, a2);
      a1 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t *WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>::~KeyValuePair(uint64_t *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  void *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = *(WTF **)(v3 + 56);
    if ((WTF *)(v3 + 72) != v4 && v4 != 0)
    {
      *(_QWORD *)(v3 + 56) = 0;
      *(_DWORD *)(v3 + 64) = 0;
      WTF::fastFree(v4, a2);
    }
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 40, (WTF::StringImpl *)a2);
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 24, v6);
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v3 + 8, v7);
    WTF::fastFree((WTF *)v3, v8);
  }
  v9 = *a1;
  *a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)v9);
      v13 = *(unsigned int *)(v9 + 28);
      if ((_DWORD)v13)
      {
        v16 = v9;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v13));
        v9 = v16;
      }
      v14 = *(WTF **)(v9 + 16);
      if (v14)
      {
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 0;
        v15 = v9;
        WTF::fastFree(v14, a2);
        v9 = v15;
      }
      WTF::fastFree((WTF *)v9, a2);
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF *v5;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      v5 = *v4;
      if (*v4 != (WTF *)-1)
      {
        *v4 = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 1)
            WTF::fastFree(v5, a2);
          else
            --*(_DWORD *)v5;
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

WebCore::StyleSheetContents *WTF::VectorTypeOperations<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>::destruct(WebCore::StyleSheetContents *result, void *a2)
{
  WebCore::StyleSheetContents **v3;
  WTF *v4;
  void *v5;

  if (result != a2)
  {
    v3 = (WebCore::StyleSheetContents **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(result, a2);
          result = (WebCore::StyleSheetContents *)WTF::fastFree(v4, v5);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WebCore::Style::Resolver **v5;
  uint64_t v6;
  unsigned int ***v7;
  uint64_t v8;
  WTF *v9;
  WebCore::Style::Resolver *v10;
  unsigned int **v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  bmalloc::api *v16;
  void *v17;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WebCore::Style::Resolver **)(a1 + 24 * i);
      if (*v5 != (WebCore::Style::Resolver *)-1)
      {
        v6 = a1 + 24 * i;
        v7 = (unsigned int ***)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v11 = *v7;
          v12 = (uint64_t)&(*v7)[v8];
          do
          {
            v13 = *v11;
            *v11 = 0;
            if (v13)
            {
              do
              {
                v14 = __ldaxr(v13);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, v13));
              if (!v15)
              {
                atomic_store(1u, v13);
                WTF::fastFree((WTF *)v13, a2);
              }
            }
            ++v11;
          }
          while (v11 != (unsigned int **)v12);
        }
        v9 = (WTF *)*v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v9, a2);
        }
        v10 = *v5;
        *v5 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 1)
          {
            WebCore::Style::Resolver::~Resolver(v10);
            bmalloc::api::isoDeallocate(v16, v17);
          }
          else
          {
            --*(_DWORD *)v10;
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::Style::Resolver *v5;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  bmalloc::api *v12;
  void *v13;

  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v3)
  {
    v7 = *(unsigned int ***)(a1 + 8);
    v8 = &v7[v3];
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v4 = *(WTF **)(a1 + 8);
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WebCore::Style::Resolver **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Style::Resolver::~Resolver(v5);
      bmalloc::api::isoDeallocate(v12, v13);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return a1;
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::deallocateTable(uint64_t a1, WTF *a2)
{
  uint64_t v3;
  WTF **v4;
  WTF::StringImpl *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (WTF **)(a1 + 16);
    do
    {
      if (*((_DWORD *)v4 - 4) != -1)
      {
        a2 = *v4;
        *v4 = 0;
        if (a2)
          std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v4, a2);
        v5 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2)
            WTF::StringImpl::destroy(v5, a2);
          else
            *(_DWORD *)v5 -= 2;
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WebCore::Style::RuleSet *v8;
  WTF *v9;
  void *v10;

  if (this)
  {
    v3 = *((unsigned int *)this + 3);
    if ((_DWORD)v3)
    {
      v5 = 32 * v3;
      v6 = *(_QWORD *)this + 8;
      do
      {
        v7 = *(WTF **)v6;
        if (*(_QWORD *)v6)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
          WTF::fastFree(v7, this);
        }
        v8 = *(WebCore::Style::RuleSet **)(v6 - 8);
        *(_QWORD *)(v6 - 8) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
          {
            WebCore::Style::RuleSet::~RuleSet(v8, this);
            WTF::fastFree(v9, v10);
          }
          else
          {
            --*(_DWORD *)v8;
          }
        }
        v6 += 32;
        v5 -= 32;
      }
      while (v5);
    }
    v4 = *(WTF **)this;
    if (*(_QWORD *)this)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v4, this);
    }
    WTF::fastFree(this, this);
  }
}

uint64_t **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore2MQ16traverseFeaturesIRZZNKSA_5Style13ScopeRuleSets42customPropertyNamesInStyleContainerQueriesEvENK3__0clINSD_7RuleSetEEEDaPT_EUlRSJ_E_EEvRKNS_7variantIJNSB_9ConditionENSB_7FeatureENSB_15GeneralEnclosedEEEEOSJ_EUlRKSP_E_JZNSC_ISN_EEvSU_SV_EUlRKSQ_E_ZNSC_ISN_EEvSU_SV_EUlRKSR_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSP_SQ_SR_EEEEEEDcSJ_DpT0_(uint64_t **result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;

  v2 = *(_DWORD *)(a2 + 20);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 8);
    v4 = **result;
    v5 = 88 * v2;
    while (1)
    {
      v8[0] = v4;
      v8[1] = v4;
      v8[2] = v4;
      v6 = *(unsigned int *)(v3 + 80);
      if ((_DWORD)v6 == -1)
        break;
      v9 = v8;
      result = (uint64_t **)((uint64_t (*)(_QWORD **, uint64_t))*(&off_1E3450130 + v6))(&v9, v3);
      v3 += 88;
      v5 -= 88;
      if (!v5)
        return result;
    }
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t **)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore2MQ16traverseFeaturesIRZZNKSA_5Style13ScopeRuleSets42customPropertyNamesInStyleContainerQueriesEvENK3__0clINSD_7RuleSetEEEDaPT_EUlRSJ_E_EEvRKNS_7variantIJNSB_9ConditionENSB_7FeatureENSB_15GeneralEnclosedEEEEOSJ_EUlRKSP_E_JZNSC_ISN_EEvSU_SV_EUlRKSQ_E_ZNSC_ISN_EEvSU_SV_EUlRKSR_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSP_SQ_SR_EEEEEEDcSJ_DpT0_(v7);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore2MQ16traverseFeaturesIRZZNKSA_5Style13ScopeRuleSets42customPropertyNamesInStyleContainerQueriesEvENK3__0clINSD_7RuleSetEEEDaPT_EUlRSJ_E_EEvRKNS_7variantIJNSB_9ConditionENSB_7FeatureENSB_15GeneralEnclosedEEEEOSJ_EUlRKSP_E_JZNSC_ISN_EEvSU_SV_EUlRKSQ_E_ZNSC_ISN_EEvSU_SV_EUlRKSR_E_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSP_SQ_SR_EEEEEEDcSJ_DpT0_(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BYTE v5[24];

  v2 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 && *(_DWORD *)(v2 + 4) >= 3u)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v2 + 16) & 4) != 0)
    {
      if (*(_BYTE *)v3 != 45)
        return result;
      v4 = *(unsigned __int8 *)(v3 + 1);
    }
    else
    {
      if (*(_WORD *)v3 != 45)
        return result;
      v4 = *(unsigned __int16 *)(v3 + 2);
    }
    if (v4 == 45)
      return WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add(**(uint64_t ***)(*(_QWORD *)result + 8), a2, (uint64_t)v5);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 24 * i);
      if (*v5 != -1)
      {
        v6 = a1 + 24 * i;
        v7 = (WTF **)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v11 = *v7;
          v12 = 8 * v8;
          do
          {
            v13 = *(_QWORD *)v11;
            *(_QWORD *)v11 = 0;
            if (v13)
            {
              if (*(_DWORD *)(v13 + 24) == 2)
              {
                if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v13);
              }
              else
              {
                *(_DWORD *)(v13 + 24) -= 2;
              }
            }
            v11 = (WTF *)((char *)v11 + 8);
            v12 -= 8;
          }
          while (v12);
        }
        v9 = *v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v9, a2);
        }
        v10 = *v5;
        *v5 = 0;
        if (v10)
        {
          if (*(_DWORD *)(v10 + 24) == 2)
          {
            if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v10);
          }
          else
          {
            *(_DWORD *)(v10 + 24) -= 2;
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF **v7;
  uint64_t v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (WTF::StringImpl **)(a1 + 24 * i);
      if (*v5 != (WTF::StringImpl *)-1)
      {
        v6 = a1 + 24 * i;
        v7 = (WTF **)(v6 + 8);
        v8 = *(unsigned int *)(v6 + 20);
        if ((_DWORD)v8)
        {
          v11 = *v7;
          v12 = 8 * v8;
          do
          {
            v13 = *(_QWORD *)v11;
            *(_QWORD *)v11 = 0;
            if (v13)
            {
              if (*(_DWORD *)(v13 + 24) == 2)
              {
                if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
                  WebCore::Node::removedLastRef((WebCore::Node *)v13);
              }
              else
              {
                *(_DWORD *)(v13 + 24) -= 2;
              }
            }
            v11 = (WTF *)((char *)v11 + 8);
            v12 -= 8;
          }
          while (v12);
        }
        v9 = *v7;
        if (*v7)
        {
          *v7 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v9, a2);
        }
        v10 = *v5;
        *v5 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v10 -= 2;
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,std::unique_ptr<WebCore::Style::AnchorPositionedElementState>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<std::unique_ptr<WebCore::Style::AnchorPositionedElementState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(uint64_t a1, WTF *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (uint64_t *)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != -1)
      {
        a2 = (WTF *)v5[1];
        v5[1] = 0;
        if (a2)
        {
          std::default_delete<WebCore::Style::AnchorPositionedElementState>::operator()[abi:sn180100]((_DWORD)v5 + 8, a2);
          v6 = *v5;
        }
        *v5 = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr((unsigned int *)v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, (unsigned int *)v6));
          if (!v8)
          {
            atomic_store(1u, (unsigned int *)v6);
            v9 = *(unsigned int *)(v6 + 28);
            if ((_DWORD)v9)
            {
              v12 = v6;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
              v6 = v12;
            }
            v10 = *(WTF **)(v6 + 16);
            if (v10)
            {
              *(_QWORD *)(v6 + 16) = 0;
              *(_DWORD *)(v6 + 24) = 0;
              v11 = v6;
              WTF::fastFree(v10, a2);
              v6 = v11;
            }
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WTF *WTF::Vector<WTF::Ref<WebCore::Element const,WTF::RawPtrTraits<WebCore::Element const>,WTF::DefaultRefDerefTraits<WebCore::Element const>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(WTF *result, void *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (*((_DWORD *)result + 2))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 3);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)result;
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

double std::__optional_storage_base<std::unique_ptr<WebCore::RenderStyle>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::unique_ptr<WebCore::RenderStyle>,false>>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  WebCore::RenderStyle *v4;
  WTF *v5;
  void *v6;
  double result;
  WebCore::RenderStyle *v8;
  WTF *v9;
  void *v10;
  uint64_t v11;

  if (*(unsigned __int8 *)(a1 + 8) == a2[8])
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v3 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v4 = *(WebCore::RenderStyle **)a1;
      *(_QWORD *)a1 = v3;
      if (v4)
      {
        WebCore::RenderStyle::~RenderStyle(v4, a2);
        if (*(_DWORD *)v5)
        {
          result = 0.0;
          *((_OWORD *)v5 + 2) = 0u;
          *((_OWORD *)v5 + 3) = 0u;
          *(_OWORD *)v5 = 0u;
          *((_OWORD *)v5 + 1) = 0u;
        }
        else
        {
          WTF::fastFree(v5, v6);
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v8 = *(WebCore::RenderStyle **)a1;
    *(_QWORD *)a1 = 0;
    if (v8)
    {
      WebCore::RenderStyle::~RenderStyle(v8, a2);
      if (*(_DWORD *)v9)
      {
        result = 0.0;
        *((_OWORD *)v9 + 2) = 0u;
        *((_OWORD *)v9 + 3) = 0u;
        *(_OWORD *)v9 = 0u;
        *((_OWORD *)v9 + 1) = 0u;
      }
      else
      {
        WTF::fastFree(v9, v10);
      }
    }
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)a1 = v11;
    *(_BYTE *)(a1 + 8) = 1;
  }
  return result;
}

unsigned __int16 *WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::remove(unsigned __int16 *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  char v12;

  v3 = (uint64_t *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_QWORD *)result + 24 * *(unsigned int *)(*(_QWORD *)result - 4);
    if (v4 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v4 = 0;
  }
  if (v4 != a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                             + v5))(&v12, a2);
    *(_WORD *)a2 = -1;
    *(_DWORD *)(a2 + 8) = 0;
    result = *(unsigned __int16 **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    if (result)
    {
      if (*((_DWORD *)result + 6) == 1)
        result = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 72))(result);
      else
        --*((_DWORD *)result + 6);
    }
    ++*(_DWORD *)(*v3 - 16);
    v6 = *v3;
    if (*v3)
      v7 = *(_DWORD *)(v6 - 12) - 1;
    else
      v7 = -1;
    *(_DWORD *)(v6 - 12) = v7;
    v8 = *v3;
    if (*v3)
    {
      v9 = 6 * *(_DWORD *)(v8 - 12);
      v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9)
        return WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(v3, v10 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v17;
  char v18;
  uint64_t v20;
  char v21;
  char *v22;

  v2 = *a1;
  if (!*a1)
    return 0;
  v6 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v6 != -1)
  {
    v8 = *(_DWORD *)(v2 - 8);
    v22 = &v21;
    v9 = (*((uint64_t (**)(char **, uint64_t))&xmmword_1E3450140 + v6 + 1))(&v22, a2);
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v8;
      v3 = v2 + 24 * (v9 & v8);
      v12 = *(unsigned int *)(v3 + 8);
      v13 = *(_DWORD *)(a2 + 8);
      v14 = v13 != (_DWORD)v12 || v13 == -1;
      v15 = !v14;
      if ((_DWORD)v12 == -1 || !v15)
      {
        v17 = v13 == -1;
        if ((_DWORD)v12 != -1)
          v17 = v15;
        if (v17)
          return v3;
      }
      else
      {
        v22 = &v21;
        v18 = ((uint64_t (*)(char **, uint64_t, uint64_t))*(&off_1E3450158 + v12))(&v22, v2 + 24 * v11, a2);
        if ((v18 & 1) != 0)
          return v3;
        LODWORD(v12) = *(_DWORD *)(v3 + 8);
      }
      if (!(_DWORD)v12 && *(_WORD *)v3 == 0)
        break;
      ++i;
    }
    if (*a1)
      return *a1 + 24 * *(unsigned int *)(*a1 - 4);
    else
      return 0;
  }
  v20 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::compileTransitionPropertiesInStyle(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &,WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits> &,BOOL &)::$_0,WebCore::compileTransitionPropertiesInStyle(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &,WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits> &,BOOL &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(v20);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::compileTransitionPropertiesInStyle(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &,WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits> &,BOOL &)::$_0,WebCore::compileTransitionPropertiesInStyle(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &,WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits> &,BOOL &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(_QWORD **a1, unsigned __int16 *a2)
{
  _QWORD *v2;
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *a1;
  result = WebCore::CSSProperty::resolveDirectionAwareProperty(*a2, (*(_DWORD *)(*v2 + 40) >> 26) & 1, (unsigned __int16)*(_DWORD *)(*v2 + 44) >> 13);
  if ((result - 459) > 0x5E)
  {
    if ((_DWORD)result)
    {
      if (result >= 0x240)
      {
LABEL_11:
        __break(1u);
        return result;
      }
      *(_QWORD *)(v2[1] + (((unint64_t)result >> 3) & 0x1FF8)) |= 1 << result;
    }
  }
  else
  {
    result = WebCore::shorthandForProperty(result);
    if (v4)
    {
      v5 = v2[1];
      v6 = 2 * v4;
      while (1)
      {
        v7 = *(unsigned __int16 *)result;
        if (v7 >= 0x240)
          break;
        *(_QWORD *)(v5 + ((v7 >> 3) & 0x1FF8)) |= 1 << v7;
        result += 2;
        v6 -= 2;
        if (!v6)
          return result;
      }
      goto LABEL_11;
    }
  }
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::compileTransitionPropertiesInStyle(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &,WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits> &,BOOL &)::$_0,WebCore::compileTransitionPropertiesInStyle(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &,WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits> &,BOOL &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &>(uint64_t a1, WTF::StringImpl *a2)
{
  _BYTE v3[24];

  return WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add(*(uint64_t **)(*(_QWORD *)a1 + 16), a2, (uint64_t)v3);
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::Styleable::updateCSSTransitions(WebCore::RenderStyle const&,WebCore::RenderStyle const&,WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator() const(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WebCore::CSSPropertyID)#1},WebCore::Styleable::updateCSSTransitions(WebCore::RenderStyle const&,WebCore::RenderStyle const&,WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_0::operator() const(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::{lambda(WTF::AtomString const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(uint64_t **a1, _WORD *a2)
{
  uint64_t *v2;
  unint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *a1;
  result = (unsigned __int16)*a2;
  if ((unsigned __int16)(result - 459) > 0x5Eu)
  {
    if (*a2)
    {
      if (result >= 0x240)
      {
LABEL_11:
        __break(1u);
        return result;
      }
      *(_QWORD *)(*v2 + ((result >> 3) & 0x1FF8)) |= 1 << result;
    }
  }
  else
  {
    result = WebCore::shorthandForProperty(result);
    if (v4)
    {
      v5 = *v2;
      v6 = 2 * v4;
      while (1)
      {
        v7 = *(unsigned __int16 *)result;
        if (v7 >= 0x240)
          break;
        *(_QWORD *)(v5 + ((v7 >> 3) & 0x1FF8)) |= 1 << v7;
        result += 2;
        v6 -= 2;
        if (!v6)
          return result;
      }
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZNK7WebCore9Styleable20updateCSSTransitionsERKNS2_11RenderStyleES6_RNS_6VectorINS_7WeakPtrINS2_24StyleOriginatedAnimationENS2_30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsISA_EEEELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEENK3__3clERKNS2_23StyleCustomPropertyDataEEUlRT_E_NS_15IterationStatusEJRKNS_12KeyValuePairINS_10AtomStringENS_6RefPtrIKNS2_22CSSCustomPropertyValueENSB_ISU_EENS_21DefaultRefDerefTraitsISU_EEEEEEEE4callES11_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  char v7[24];
  WTF::StringImpl *v8;
  _DWORD *v9;

  v4 = *(WTF::StringImpl **)a2;
  v3 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2)
    *(_DWORD *)v4 += 2;
  v8 = v4;
  if (v3)
    *v3 += 2;
  v9 = v3;
  if ((v3[18] - 3) >= 2)
  {
    v9 = 0;
  }
  else
  {
    WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add(*(uint64_t **)(a1 + 8), (WTF::StringImpl *)&v8, (uint64_t)v7);
    v3 = v9;
    v9 = 0;
    if (!v3)
      goto LABEL_12;
  }
  if (*v3 == 2)
    WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v3, a2);
  else
    *v3 -= 2;
LABEL_12:
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return 0;
}

uint64_t WebCore::propertyInStyleMatchesValueForTransitionInMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v7;
  int v8;
  int i;
  unsigned int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[4];
  _QWORD *v26;

  if (!a3)
    return 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_31;
  v7 = *(_DWORD *)(a3 - 8);
  v25[0] = &v26;
  v8 = (*((uint64_t (**)(_QWORD *, uint64_t))&xmmword_1E3450140 + v4 + 1))(v25, a1);
  for (i = 0; ; v8 = i + v10)
  {
    v10 = v8 & v7;
    v11 = (unsigned __int16 *)(a3 + 24 * (v8 & v7));
    v12 = *((unsigned int *)v11 + 2);
    v13 = *(_DWORD *)(a1 + 8);
    v14 = v13 != (_DWORD)v12 || v13 == -1;
    v15 = !v14;
    if ((_DWORD)v12 == -1 || !v15)
      break;
    v25[0] = &v26;
    v18 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))*(&off_1E3450158 + v12))(v25, a3 + 24 * v10, a1);
    if ((v18 & 1) != 0)
      goto LABEL_20;
    LODWORD(v12) = *((_DWORD *)v11 + 2);
LABEL_25:
    if ((_DWORD)v12)
      v23 = 0;
    else
      v23 = *v11 == 0;
    if (v23)
      return 0;
    ++i;
  }
  v17 = v13 == -1;
  if ((_DWORD)v12 != -1)
    v17 = v15;
  if (!v17)
    goto LABEL_25;
LABEL_20:
  v19 = *(_QWORD *)(a3 + 24 * v10 + 16);
  if (!v19)
    return 0;
  v20 = *(_QWORD *)(v19 + 264);
  v25[0] = a2;
  v25[1] = v20;
  v25[2] = a2;
  v25[3] = v20;
  v21 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v21 == -1)
  {
LABEL_31:
    v24 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::remove(v24);
  }
  v26 = v25;
  return (((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation15propertiesEqualERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_11RenderStyleESI_RKNS8_8DocumentEE3__0JZNS9_15propertiesEqualESF_SI_SI_SL_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v21])(&v26, a1) & 1) != 0;
}

unsigned int *WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v13;

  result = (unsigned int *)WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>,std::variant<WebCore::CSSPropertyID,WTF::AtomString>>(a1, a2);
  v4 = result;
  if (*a1)
  {
    v5 = *a1 + 24 * *(unsigned int *)(*a1 - 4);
    if ((unsigned int *)v5 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v5 = 0;
  }
  if ((unsigned int *)v5 != result)
  {
    v6 = result[2];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                                    + v6))(&v13, result);
    *(_WORD *)v4 = -1;
    v4[2] = 0;
    result = (unsigned int *)*((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 2) = 0;
    if (result)
    {
      if (result[6] == 1)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 72))(result);
      else
        --result[6];
    }
    ++*(_DWORD *)(*a1 - 16);
    v7 = *a1;
    if (*a1)
      v8 = *(_DWORD *)(v7 - 12) - 1;
    else
      v8 = -1;
    *(_DWORD *)(v7 - 12) = v8;
    v9 = *a1;
    if (*a1)
    {
      v10 = 6 * *(_DWORD *)(v9 - 12);
      v11 = *(_DWORD *)(v9 - 4);
      if (v10 < v11 && v11 >= 9)
        return (unsigned int *)WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(a1, v11 >> 1, 0);
    }
  }
  return result;
}

void WebCore::updateCSSTransitionsForStyleableAndProperty(WebCore::Styleable const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&,WebCore::RenderStyle const&,WTF::MonotonicTime,WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)::$_4::operator()(_QWORD **a1, const WebCore::RenderStyle *a2, _QWORD *a3, double a4, double a5, double a6)
{
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  _DWORD *v19;
  WTF *v20;
  unsigned int *v21;
  unsigned int **v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  WTF *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF *v34;
  _QWORD *v35;
  char v36[24];
  _DWORD *v37;

  WebCore::CSSTransition::create((uint64_t)*a1, (uint64_t)a1[1], (_DWORD *)*a1[3], a2, (const WebCore::RenderStyle *)a1[4], a3, (uint64_t *)&v37, *(double *)a1[2], a4, a5, a6);
  v7 = a1[5];
  v8 = (uint64_t)v37;
  v9 = *((unsigned int *)v7 + 3);
  if ((_DWORD)v9 != *((_DWORD *)v7 + 2))
  {
    v20 = (WTF *)*v7;
    if (v37)
    {
      v21 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)v37);
      if (v21)
      {
        do
          v33 = __ldaxr(v21);
        while (__stlxr(v33 + 1, v21));
      }
    }
    else
    {
      v21 = 0;
    }
    *((_QWORD *)v20 + v9) = v21;
    goto LABEL_14;
  }
  v10 = v9 + (v9 >> 2);
  if (v10 >= 0x10)
    v11 = v10 + 1;
  else
    v11 = 16;
  if (v11 <= v9 + 1)
    v12 = v9 + 1;
  else
    v12 = v11;
  if (v12 >> 29)
  {
    __break(0xC471u);
    return;
  }
  v13 = (WTF *)*v7;
  v14 = WTF::fastMalloc((WTF *)(8 * v12));
  *((_DWORD *)v7 + 2) = v12;
  *v7 = v14;
  if ((_DWORD)v9)
  {
    v35 = (_QWORD *)v14;
    v22 = (unsigned int **)((char *)v13 + 8 * v9);
    v23 = (unsigned int **)v13;
    do
    {
      v24 = *v23;
      *v23 = 0;
      *v35 = v24;
      v25 = *v23;
      *v23 = 0;
      v34 = (WTF *)v25;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v28 = v25[7];
          if ((_DWORD)v28)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v34 + 2), (WTF::StringImpl *)(*((_QWORD *)v34 + 2) + 32 * v28));
          v29 = (WTF *)*((_QWORD *)v34 + 2);
          if (v29)
          {
            *((_QWORD *)v34 + 2) = 0;
            *((_DWORD *)v34 + 6) = 0;
            WTF::fastFree(v29, v15);
          }
          WTF::fastFree(v34, v15);
        }
      }
      ++v35;
      ++v23;
    }
    while (v23 != v22);
    v14 = *v7;
    if (!v13)
      goto LABEL_11;
    goto LABEL_33;
  }
  if (v13)
  {
LABEL_33:
    if ((WTF *)v14 == v13)
    {
      *v7 = 0;
      *((_DWORD *)v7 + 2) = 0;
    }
    WTF::fastFree(v13, v15);
    v14 = *v7;
  }
LABEL_11:
  v16 = *((unsigned int *)v7 + 3);
  if (v8)
  {
    v30 = v14;
    v31 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
    v17 = v31;
    if (v31)
    {
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
    }
    v14 = v30;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(v14 + 8 * v16) = v17;
LABEL_14:
  ++*((_DWORD *)v7 + 3);
  v18 = WebCore::Element::ensureAnimationRareData(**a1, *a1 + 1);
  WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::inlineSet<std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>((uint64_t *)(v18 + 72), (uint64_t)a1[1], (uint64_t *)&v37, (uint64_t)v36);
  v19 = v37;
  v37 = 0;
  if (v19)
  {
    if (v19[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 72))(v19);
    else
      --v19[6];
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::transitionMatchesProperty(WebCore::Animation const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&)::$_0,WebCore::transitionMatchesProperty(WebCore::Animation const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &&>(unsigned __int16 ***a1, unsigned __int16 *a2)
{
  unsigned __int16 **v2;
  unsigned __int16 *v3;
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;

  v2 = *a1;
  v3 = **a1;
  if (*((_DWORD *)v3 + 2))
    return 0;
  v5 = *v3;
  v6 = WebCore::CSSProperty::resolveDirectionAwareProperty(*a2, (*((_DWORD *)v2[1] + 10) >> 26) & 1, (unsigned __int16)*((_DWORD *)v2[1] + 11) >> 13);
  if (v6 == v5)
    return 1;
  v7 = WebCore::shorthandForProperty(v6);
  if (!v8)
    return 0;
  v9 = (unsigned __int16 *)v7;
  v10 = 2 * v8 - 2;
  do
  {
    v11 = *v9++;
    v12 = WebCore::CSSProperty::resolveDirectionAwareProperty(v11, (*((_DWORD *)v2[1] + 10) >> 26) & 1, (unsigned __int16)*((_DWORD *)v2[1] + 11) >> 13) == v5;
    result = v12;
    v12 = v12 || v10 == 0;
    v10 -= 2;
  }
  while (!v12);
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::transitionMatchesProperty(WebCore::Animation const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&)::$_0,WebCore::transitionMatchesProperty(WebCore::Animation const&,std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&,WebCore::RenderStyle const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> &&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  return *(_DWORD *)(v2 + 8) == 1 && *(_QWORD *)v2 == *a2;
}

uint64_t WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = 8 * v8;
        v11 = (uint64_t *)v7;
        v12 = (uint64_t *)v7;
        do
        {
          v13 = *v11;
          *v12++ = 0;
          *(_QWORD *)result = v13;
          v14 = result + 8;
          WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::~WeakPtr(v11, v9);
          result = v14;
          v11 = v12;
          v10 -= 8;
        }
        while (v10);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

unsigned __int16 *WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::take(unsigned __int16 *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  char v15;

  v5 = *a2;
  if (*a2)
    v6 = v5 + 24 * *(unsigned int *)(v5 - 4);
  else
    v6 = 0;
  if (v6 == a3)
  {
    *(_QWORD *)result = 0;
    return result;
  }
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    *(_QWORD *)(a3 + 16) = 0;
    v5 = *a2;
  }
  *(_QWORD *)result = v7;
  if (v5)
  {
    v8 = v5 + 24 * *(unsigned int *)(v5 - 4);
    if (v8 == a3)
      return result;
  }
  else
  {
    if (!a3)
      return result;
    v8 = 0;
  }
  if (v8 != a3)
  {
    v9 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v9 == -1)
    {
      *(_WORD *)a3 = -1;
      *(_DWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    else
    {
      ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore13CSSPropertyIDEN3WTF10AtomStringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSC_EEEDcOSD_DpOT0____fmatrix_0
                                             + v9))(&v15, a3);
      result = *(unsigned __int16 **)(a3 + 16);
      *(_WORD *)a3 = -1;
      *(_DWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      if (result)
      {
        if (*((_DWORD *)result + 6) == 1)
          result = (unsigned __int16 *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)result + 72))(result);
        else
          --*((_DWORD *)result + 6);
      }
    }
    ++*(_DWORD *)(*a2 - 16);
    v10 = *a2;
    if (*a2)
      v11 = *(_DWORD *)(v10 - 12) - 1;
    else
      v11 = -1;
    *(_DWORD *)(v10 - 12) = v11;
    v12 = *a2;
    if (*a2)
    {
      v13 = 6 * *(_DWORD *)(v12 - 12);
      v14 = *(_DWORD *)(v12 - 4);
      if (v13 < v14 && v14 >= 9)
        return WTF::HashTable<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashMap<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>,WTF::DefaultHash<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>,WTF::HashTraits<WTF::Ref<WebCore::CSSTransition,WTF::RawPtrTraits<WebCore::CSSTransition>,WTF::DefaultRefDerefTraits<WebCore::CSSTransition>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::variant<WebCore::CSSPropertyID,WTF::AtomString>>>::rehash(a2, v14 >> 1, 0);
    }
  }
  return result;
}

WebCore::Style::Resolver *WTF::RefCounted<WebCore::Style::Resolver>::deref(WebCore::Style::Resolver *result)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)result == 1)
  {
    WebCore::Style::Resolver::~Resolver(result);
    return (WebCore::Style::Resolver *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  int v13;
  int i;
  uint64_t v15;
  WTF::StringImpl *v16;
  _DWORD *v17;
  uint64_t v18;
  WTF::StringImpl *result;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, 8u, 0), (v8 = *a1) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *(_DWORD **)a2;
  v13 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v15 = v13 & v10;
    v16 = (WTF::StringImpl *)(v8 + 16 * v15);
    v17 = *(_DWORD **)v16;
    if (!*(_QWORD *)v16)
    {
      if (v11)
      {
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        --*(_DWORD *)(*a1 - 16);
        v12 = *(_DWORD **)a2;
        v16 = v11;
      }
      if (v12)
        *v12 += 2;
      *(_QWORD *)v16 = v12;
      v18 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      result = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = v18;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF::StringImpl *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
        else
          --*(_DWORD *)result;
      }
      v20 = *a1;
      if (*a1)
        v21 = *(_DWORD *)(v20 - 12) + 1;
      else
        v21 = 1;
      *(_DWORD *)(v20 - 12) = v21;
      v22 = *a1;
      if (*a1)
        v23 = *(_DWORD *)(v22 - 12);
      else
        v23 = 0;
      v24 = (*(_DWORD *)(v22 - 16) + v23);
      v25 = *(unsigned int *)(v22 - 4);
      if (v25 > 0x400)
      {
        if (v25 > 2 * v24)
          goto LABEL_19;
      }
      else if (3 * v25 > 4 * v24)
      {
LABEL_19:
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v22 + 16 * v25;
        *(_BYTE *)(a4 + 16) = 1;
        return result;
      }
      result = (WTF::StringImpl *)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(a1, v16);
      v16 = result;
      v22 = *a1;
      if (*a1)
        v25 = *(unsigned int *)(v22 - 4);
      else
        v25 = 0;
      goto LABEL_19;
    }
    if (v17 != (_DWORD *)-1)
      break;
    v11 = (WTF::StringImpl *)(v8 + 16 * v15);
LABEL_28:
    v13 = i + v15;
  }
  if (v17 != v12)
    goto LABEL_28;
  if ((v9 & 1) != 0)
    v26 = 0;
  else
    v26 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v8 + 16 * v26;
  *(_BYTE *)(a4 + 16) = 0;
  return (WTF::StringImpl *)WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>::operator=<WebCore::StyleRuleKeyframes>((_DWORD **)(v8 + 16 * v15 + 8), a3);
}

_DWORD **WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>::operator=<WebCore::StyleRuleKeyframes>(_DWORD **a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*v4 == 1)
      WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      --*v4;
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframes,WTF::RawPtrTraits<WebCore::StyleRuleKeyframes>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframes>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::reinsert(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = 0;
  v5 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  do
  {
    v6 = v5 & v3;
    v5 = ++v4 + v6;
  }
  while (*(_QWORD *)(a1 + 16 * v6));
  v7 = (WTF::StringImpl **)(a1 + 16 * v6);
  v8 = v7[1];
  v7[1] = 0;
  if (!v8)
    goto LABEL_8;
  if (*(_DWORD *)v8 != 1)
  {
    --*(_DWORD *)v8;
LABEL_8:
    *v7 = 0;
    goto LABEL_9;
  }
  WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v8, a2);
  v13 = *v7;
  *v7 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
LABEL_9:
  v9 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  *v7 = v9;
  v10 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v7[1] = v10;
  return v7;
}

uint64_t WTF::HashTable<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::KeyValuePair<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashMap<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>,WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::HashTraits<WTF::RefPtr<WebCore::StyleRuleKeyframe,WTF::RawPtrTraits<WebCore::StyleRuleKeyframe>,WTF::DefaultRefDerefTraits<WebCore::StyleRuleKeyframe>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  __n128 v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _DWORD *v22;
  _QWORD *v23;
  _DWORD *v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v3 - 4);
    v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = a2;
  result = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v9 = (_QWORD *)(result + 40);
    do
    {
      *(v9 - 3) = 0x7FF0000000000000;
      *(v9 - 2) = 0;
      *((_BYTE *)v9 - 8) = 0;
      *v9 = 0;
      v9 += 4;
      --v6;
    }
    while (v6);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    v10 = 0;
    while (1)
    {
      v11 = v3 + 32 * v10;
      if (*(double *)v11 != -INFINITY)
        break;
LABEL_37:
      if (++v10 == v4)
        return WTF::fastFree((WTF *)(v3 - 16), v8);
    }
    v12 = *(double *)v11 == INFINITY && *(_QWORD *)(v11 + 8) == 0;
    if (v12 && !*(_BYTE *)(v11 + 16))
    {
      v31 = v3 + 32 * v10;
      v32 = *(_DWORD **)(v31 + 24);
      *(_QWORD *)(v31 + 24) = 0;
      if (v32)
      {
        if (*v32 == 1)
          WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v32, (WTF::StringImpl *)v8);
        else
          --*v32;
      }
      v33 = *(_DWORD **)(v11 + 8);
      *(_QWORD *)(v11 + 8) = 0;
      if (v33)
      {
        if (v33[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
        else
          --v33[2];
      }
      goto LABEL_37;
    }
    v13 = *a1;
    if (*a1)
      v14 = *(_DWORD *)(v13 - 8);
    else
      v14 = 0;
    v15 = WTF::IdentityHashTranslator<WTF::HashTraits<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>,WTF::DefaultHash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>>::hash<std::tuple<double,WTF::RefPtr<WebCore::TimingFunction const,WTF::RawPtrTraits<WebCore::TimingFunction const>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction const>>,WebCore::CompositeOperation>>(v3 + 32 * v10);
    for (i = 0; ; v15 = i + v18)
    {
      v18 = v15 & v14;
      v19 = v13 + 32 * v18;
      v16.n128_u64[0] = *(_QWORD *)v19;
      v20 = *(double *)v19 == INFINITY && *(_QWORD *)(v19 + 8) == 0;
      if (v20 && !*(_BYTE *)(v19 + 16))
        break;
      ++i;
    }
    v21 = v13 + 32 * v18;
    v24 = *(_DWORD **)(v21 + 24);
    v23 = (_QWORD *)(v21 + 24);
    v22 = v24;
    *v23 = 0;
    if (v24)
    {
      if (*v22 == 1)
      {
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v22, (WTF::StringImpl *)v8);
        v34 = *(_DWORD **)(v19 + 8);
        *(_QWORD *)(v19 + 8) = 0;
        if (v34)
        {
          if (v34[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
          else
            --v34[2];
        }
        goto LABEL_31;
      }
      --*v22;
    }
    *(_QWORD *)(v19 + 8) = 0;
LABEL_31:
    v25 = *(double *)v11;
    v26 = *(_QWORD *)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    *(double *)v19 = v25;
    *(_QWORD *)(v19 + 8) = v26;
    *(_BYTE *)(v19 + 16) = *(_BYTE *)(v11 + 16);
    v27 = v3 + 32 * v10;
    v28 = *(_QWORD *)(v27 + 24);
    *(_QWORD *)(v27 + 24) = 0;
    *v23 = v28;
    v29 = *(_DWORD **)(v27 + 24);
    *(_QWORD *)(v27 + 24) = 0;
    if (v29)
    {
      if (*v29 == 1)
        WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)v29, (WTF::StringImpl *)v8);
      else
        --*v29;
    }
    v30 = *(_DWORD **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = 0;
    if (v30)
    {
      if (v30[2] == 1)
        (*(void (**)(_DWORD *, __n128))(*(_QWORD *)v30 + 16))(v30, v16);
      else
        --v30[2];
    }
    goto LABEL_37;
  }
  if (v3)
    return WTF::fastFree((WTF *)(v3 - 16), v8);
  return result;
}

WebCore::StyleSheetContents *WTF::VectorTypeOperations<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>::destruct(WebCore::StyleSheetContents *result, void *a2)
{
  WebCore::StyleSheetContents **v2;
  WebCore::StyleSheetContents **i;
  WTF *v4;
  void *v5;

  if (result)
  {
    v2 = (WebCore::StyleSheetContents **)result;
    for (i = 0; i != v2; ++i)
    {
      result = *i;
      *i = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(result, a2);
          result = (WebCore::StyleSheetContents *)WTF::fastFree(v4, v5);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::DefaultHash<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int i;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  WebCore::Style::Resolver *v22;
  _QWORD *v23;
  WebCore::Style::Resolver *v24;
  WTF *v25;
  WebCore::StyleSheetContents **v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::Style::Resolver *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WebCore::Style::Resolver *v33;
  WebCore::StyleSheetContents *v34;
  WebCore::StyleSheetContents **v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  WebCore::StyleSheetContents *v39;
  WebCore::StyleSheetContents **v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  bmalloc::api *v44;
  void *v45;
  uint64_t v46;
  bmalloc::api *v47;
  void *v48;
  bmalloc::api *v49;
  void *v50;
  uint64_t v51;
  WebCore::StyleSheetContents **v52;
  uint64_t v53;
  WebCore::StyleSheetContents *v54;
  WTF *v55;
  void *v56;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)((32 * a2) | 0x10));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = v4 + 32 * v9;
      v12 = *(_DWORD *)(v11 + 12);
      if (v12 != -1)
      {
        if (v12)
          v13 = 0;
        else
          v13 = *(_BYTE *)(v11 + 16) == 0;
        if (!v13 || *(_BYTE *)(v11 + 17))
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = WTF::TupleHash<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>::hash<0ul>(v4 + 32 * v9);
          for (i = 0; ; v16 = i + v18)
          {
            v18 = v16 & v15;
            v19 = v14 + 32 * v18;
            v20 = !*(_DWORD *)(v19 + 12) && *(_BYTE *)(v19 + 16) == 0;
            if (v20 && !*(_BYTE *)(v19 + 17))
              break;
            ++i;
          }
          v21 = v14 + 32 * v18;
          v24 = *(WebCore::Style::Resolver **)(v21 + 24);
          v23 = (_QWORD *)(v21 + 24);
          v22 = v24;
          *v23 = 0;
          if (v24)
          {
            if (*(_DWORD *)v22 == 1)
            {
              WebCore::Style::Resolver::~Resolver(v22);
              bmalloc::api::isoDeallocate(v44, v45);
              v46 = *(unsigned int *)(v19 + 12);
              if ((_DWORD)v46)
              {
                v40 = *(WebCore::StyleSheetContents ***)v19;
                v41 = 8 * v46;
                do
                {
                  v39 = *v40;
                  *v40 = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 1)
                    {
                      WebCore::StyleSheetContents::~StyleSheetContents(v39, v8);
                      WTF::fastFree(v42, v43);
                    }
                    else
                    {
                      --*(_DWORD *)v39;
                    }
                  }
                  ++v40;
                  v41 -= 8;
                }
                while (v41);
              }
            }
            else
            {
              --*(_DWORD *)v22;
            }
          }
          v25 = *(WTF **)v19;
          if (*(_QWORD *)v19)
          {
            *(_QWORD *)v19 = 0;
            *(_DWORD *)(v19 + 8) = 0;
            WTF::fastFree(v25, v8);
          }
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v19 + 8) = 0;
          v26 = *(WebCore::StyleSheetContents ***)v11;
          *(_QWORD *)v11 = 0;
          *(_QWORD *)v19 = v26;
          LODWORD(v26) = *(_DWORD *)(v11 + 8);
          *(_DWORD *)(v11 + 8) = 0;
          *(_DWORD *)(v19 + 8) = (_DWORD)v26;
          LODWORD(v26) = *(_DWORD *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = 0;
          *(_DWORD *)(v19 + 12) = (_DWORD)v26;
          *(_BYTE *)(v19 + 16) = *(_BYTE *)(v11 + 16);
          *(_BYTE *)(v19 + 17) = *(_BYTE *)(v11 + 17);
          v27 = v4 + 32 * v9;
          v28 = *(_QWORD *)(v27 + 24);
          *(_QWORD *)(v27 + 24) = 0;
          *v23 = v28;
          v29 = *(WebCore::Style::Resolver **)(v27 + 24);
          *(_QWORD *)(v27 + 24) = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 1)
            {
              WebCore::Style::Resolver::~Resolver(v29);
              bmalloc::api::isoDeallocate(v47, v48);
            }
            else
            {
              --*(_DWORD *)v29;
            }
          }
          v30 = *(unsigned int *)(v11 + 12);
          if ((_DWORD)v30)
          {
            v35 = *(WebCore::StyleSheetContents ***)v11;
            v36 = 8 * v30;
            do
            {
              v34 = *v35;
              *v35 = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 1)
                {
                  WebCore::StyleSheetContents::~StyleSheetContents(v34, v8);
                  WTF::fastFree(v37, v38);
                }
                else
                {
                  --*(_DWORD *)v34;
                }
              }
              ++v35;
              v36 -= 8;
            }
            while (v36);
          }
          v31 = *(WTF **)v11;
          if (!*(_QWORD *)v11)
            goto LABEL_31;
        }
        else
        {
          v32 = v4 + 32 * v9;
          v33 = *(WebCore::Style::Resolver **)(v32 + 24);
          *(_QWORD *)(v32 + 24) = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 1)
            {
              WebCore::Style::Resolver::~Resolver(v33);
              bmalloc::api::isoDeallocate(v49, v50);
              v51 = *(unsigned int *)(v11 + 12);
              if ((_DWORD)v51)
              {
                v52 = *(WebCore::StyleSheetContents ***)v11;
                v53 = 8 * v51;
                do
                {
                  v54 = *v52;
                  *v52 = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 1)
                    {
                      WebCore::StyleSheetContents::~StyleSheetContents(v54, v8);
                      WTF::fastFree(v55, v56);
                    }
                    else
                    {
                      --*(_DWORD *)v54;
                    }
                  }
                  ++v52;
                  v53 -= 8;
                }
                while (v53);
              }
            }
            else
            {
              --*(_DWORD *)v33;
            }
          }
          v31 = *(WTF **)v11;
          if (!*(_QWORD *)v11)
            goto LABEL_31;
        }
        *(_QWORD *)v11 = 0;
        *(_DWORD *)(v11 + 8) = 0;
        WTF::fastFree(v31, v8);
      }
LABEL_31:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

unint64_t WTF::TupleHash<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>::hash<0ul>(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int32x2_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int32x2_t v9;
  int8x8_t v10;
  int32x2_t v11;
  unint64_t v12;
  int v13;
  unint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  int v20;

  v1 = -1640531527;
  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2)
  {
    v15 = *(unint64_t **)a1;
    v16 = 8 * v2;
    do
    {
      v17 = *v15++;
      v18 = (v17 >> 5) & 0x7FFF800 ^ ((v1 + (unsigned __int16)v17) << 16) ^ (v1 + (unsigned __int16)v17);
      v19 = v18 + WORD2(v17) + (v18 >> 11);
      v20 = (v17 >> 37) & 0x7FFF800 ^ (v19 << 16);
      v1 = (v20 ^ v19) + ((v20 ^ v19) >> 11);
      v16 -= 8;
    }
    while (v16);
  }
  v3 = (v1 ^ (8 * v1)) + ((v1 ^ (8 * v1)) >> 5);
  v4 = (v3 ^ (4 * v3)) + ((v3 ^ (4 * v3)) >> 15);
  v5 = v4 ^ (v4 << 10);
  v6.i32[0] = *(unsigned __int8 *)(a1 + 16);
  v6.i32[1] = *(unsigned __int8 *)(a1 + 17);
  v7 = (int8x8_t)vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v6, 0xFuLL)), v6);
  v8 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v7, 0xAuLL), v7), (int32x2_t)0x900000009);
  v9 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v8, 6uLL), v8);
  v10 = (int8x8_t)vadd_s32(v9, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v9, 0xBuLL)));
  v11 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v10, 0x10uLL), v10), (int32x2_t)0x5AC73FE109132F9);
  v12 = (0xD7862706ELL * (unint64_t)vadd_s32(vdup_lane_s32(v11, 1), v11).u32[0]) >> 4;
  if (v5)
    v13 = 277951225 * v5;
  else
    v13 = 2088763392;
  return (0xD7862706ELL * (unint64_t)(v13 + 95187966 * v12)) >> 4;
}

BOOL WTF::TupleHash<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>::equal<0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 12) || memcmp(*(const void **)a1, *(const void **)a2, 8 * v2))
    return 0;
  return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17);
}

WebCore::Style::Resolver *WTF::KeyValuePairHashTraits<WTF::HashTraits<std::tuple<WTF::Vector<WTF::RefPtr<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL,BOOL>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::customDeleteBucket(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::Style::Resolver *result;
  bmalloc::api *v6;
  void *v7;
  WebCore::StyleSheetContents **v8;
  uint64_t v9;
  WebCore::StyleSheetContents *v10;
  WTF *v11;
  void *v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v8 = *(WebCore::StyleSheetContents ***)a1;
    v9 = 8 * v3;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleSheetContents::~StyleSheetContents(v10, a2);
          WTF::fastFree(v11, v12);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = -1;
  result = *(WebCore::Style::Resolver **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Style::Resolver::~Resolver(result);
      return (WebCore::Style::Resolver *)bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::Style::Scope::releaseMemory(void)::$_0,BOOL,WebCore::StyleRuleBase const&>::call(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  v2 = *(_BYTE *)(a2 + 4) & 0x1F;
  if (v2 == 22 || v2 == 1)
  {
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    if (v4)
    {
      v5 = *(_QWORD *)(v4 - 8);
      if (v5)
      {
        v6 = v4 + 24 * v5;
        do
        {
          v7 = *(unsigned int **)(v6 - 8);
          *(_QWORD *)(v6 - 8) = 0;
          if (v7)
          {
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v7);
              v11 = v7;
              WTF::ThreadSafeRefCounted<JSC::ExecutableMemoryHandle,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v11);
            }
          }
          v6 -= 24;
        }
        while (v6 != v4);
      }
      WTF::fastFree((WTF *)(v4 - 16), (void *)a2);
    }
  }
  return 0;
}

uint64_t *WTF::WeakHashSet<WebCore::ProcessingInstruction const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = *result;
  if (!*result)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*result;
  if ((_DWORD)v4)
  {
    v9 = 8 * v4;
    v3 = (uint64_t *)*result;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v9 -= 8;
      if (!v9)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *a2 = result;
  a2[1] = v3;
  a2[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  a2[3] = v6;
  a2[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_8:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v8 = v3 + 1;
    a2[1] = v3 + 1;
    v3 = v5;
    if (v8 != v5)
    {
      v3 = v8;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        a2[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_8;
        }
      }
    }
  }
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::ProcessingInstruction const,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end@<X0>(uint64_t *result@<X0>, uint64_t **a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *result;
  if (*result)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = (uint64_t *)(v2 + 8 * v4);
    *a2 = result;
    a2[1] = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *a2 = result;
    a2[1] = 0;
  }
  a2[2] = v3;
  a2[3] = v3;
  a2[4] = (uint64_t *)(v2 + 8 * v4);
  return result;
}

uint64_t WTF::WeakListHashSet<WebCore::Node,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::removeNullReferences(uint64_t result)
{
  WTF *v1;
  WTF *v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  v1 = *(WTF **)(result + 8);
  if (v1)
  {
    do
    {
      v2 = (WTF *)*((_QWORD *)v1 + 2);
      if (!*(_QWORD *)(*(_QWORD *)v1 + 8))
      {
        v4 = (WTF *)*((_QWORD *)v1 + 2);
        v5 = result;
        WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::remove((uint64_t *)result, (void *)result, v1);
        v2 = v4;
        result = v5;
      }
      v1 = v2;
    }
    while (v2);
  }
  *(_DWORD *)(result + 24) = 0;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    LODWORD(v3) = *(_DWORD *)(v3 - 12);
    if (v3 > 0x7FFFFFFE)
      LODWORD(v3) = 0x7FFFFFFF;
  }
  *(_DWORD *)(result + 28) = 2 * v3;
  return result;
}

_QWORD *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::expand(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::rehash(a1, v5, a2);
}

uint64_t WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::insertBefore(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  int i;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  v9 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::expand(a2, 0), (v9 = *a2) != 0))
  {
    v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    v10 = 0;
  }
  v11 = *a5;
  result = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a5);
  v13 = 0;
  for (i = 1; ; ++i)
  {
    v15 = (_QWORD *)(v9 + 8 * (result & v10));
    v16 = (_QWORD *)*v15;
    if (!*v15)
    {
      if (v13)
      {
        *v13 = 0;
        --*(_DWORD *)(*a2 - 16);
        v15 = v13;
      }
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      v18 = *a5;
      *a5 = 0;
      v17[1] = 0;
      v17[2] = 0;
      *v17 = v18;
      *v15 = v17;
      v19 = *a2;
      if (*a2)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *a2;
      if (*a2)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_16;
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_16:
        result = (uint64_t)WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::insertNodeBefore(a2, a4, (uint64_t)v17);
        v16 = (_QWORD *)*v15;
        v25 = 1;
        goto LABEL_17;
      }
      v15 = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>> *>>::expand(a2, (_QWORD **)v15);
      v17 = (_QWORD *)*v15;
      goto LABEL_16;
    }
    if (v16 != (_QWORD *)-1)
    {
      v15 = v13;
      if (*v16 == v11)
        break;
    }
    result = i + (result & v10);
    v13 = v15;
  }
  v25 = 0;
LABEL_17:
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v16;
  *(_BYTE *)(a1 + 16) = v25;
  return result;
}

uint64_t *WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::find<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  _QWORD *v9;

  v2 = *result;
  if (*result)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
    v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
    v7 = v3 & ((v6 >> 31) ^ v6);
    for (i = 1; ; ++i)
    {
      v9 = *(_QWORD **)(v2 + 8 * v7);
      if (!v9 || v9 != (_QWORD *)-1 && *v9 == a2)
        break;
      v7 = (v7 + i) & v3;
    }
  }
  return result;
}

_QWORD *WTF::ListHashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::insertNodeBefore(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  if (!a2)
  {
    v4 = result[2];
    result += 2;
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = 0;
    v5 = (_QWORD *)(v4 + 16);
    if (v4)
      v6 = v5;
    else
      v6 = result - 1;
    *v6 = a3;
    goto LABEL_6;
  }
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a3 + 16) = a2;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    *(_QWORD *)(v3 + 16) = a3;
  *(_QWORD *)(a2 + 8) = a3;
  if (!*(_QWORD *)(a3 + 8))
  {
    ++result;
LABEL_6:
    *result = a3;
  }
  return result;
}

uint64_t *WTF::Vector<WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebCore::StyleSheet,WTF::RawPtrTraits<WebCore::StyleSheet>,WTF::DefaultRefDerefTraits<WebCore::StyleSheet>>&>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  if (*result)
    ++*(_DWORD *)(v6 + 8);
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::StyleSheetContents&>(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_10:
    v12 = *(unsigned int *)(v3 + 12);
    v13 = *(_QWORD **)v3;
    ++*a2;
    v13[v12] = a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  if (!(v8 >> 29))
  {
    v9 = *(void **)result;
    v10 = (void *)WTF::fastMalloc((WTF *)(8 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
    result = (uint64_t)memcpy(v10, v9, 8 * v5);
    if (v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::CSSStyleSheet const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  WTF **v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  WTF **v21;
  WTF *v22;
  WTF *v23;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (WTF **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (WTF *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ~(*((_QWORD *)v11 + 1) << 32) + *((_QWORD *)v11 + 1);
          v15 = (v14 ^ (v14 >> 22)) + ~((v14 ^ (v14 >> 22)) << 13);
          v16 = (9 * (v15 ^ (v15 >> 8))) ^ ((9 * (v15 ^ (v15 >> 8))) >> 15);
          v17 = v13 & (((v16 + ~(v16 << 27)) >> 31) ^ (v16 + ~((_DWORD)v16 << 27)));
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (WTF **)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 1)
              WTF::fastFree(v23, v8);
            else
              --*(_DWORD *)v23;
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v13 = v7;
    v14 = (_QWORD *)v6;
    do
    {
      if (*v14)
      {
        if (*v14 != -1)
        {
          v15 = WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::reinsert(*a1, (uint64_t)v14);
          WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t)v14, v16);
          if (v14 == a3)
            v11 = v15;
        }
      }
      else
      {
        WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair((uint64_t)v14, v10);
      }
      v14 += 3;
      --v13;
    }
    while (v13);
    goto LABEL_15;
  }
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::reinsert(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>(a1, *(_QWORD *)a2);
  result = WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::~KeyValuePair(v3, v4);
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = v6;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(result + 8) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(result + 16) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(result + 20) = v7;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>::lookupForReinsert<WTF::IdentityHashTranslator<WTF::HashMap<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>,WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>,WTF::HashTraits<WTF::Vector<WTF::WeakPtr<WebCore::Style::Scope,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>>,WTF::Ref<WebCore::Style::Resolver,WTF::RawPtrTraits<WebCore::Style::Resolver>,WTF::DefaultRefDerefTraits<WebCore::Style::Resolver>>>(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  if (a1)
    v3 = *(_DWORD *)(a1 - 8);
  else
    v3 = 0;
  v4 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2);
  v5 = 0;
  do
  {
    v6 = v4 & v3;
    v4 = ++v5 + (v4 & v3);
  }
  while (*(_QWORD *)(a1 + 24 * v6));
  return a1 + 24 * v6;
}

uint64_t WTF::WeakHashMap<WebCore::Element,WebCore::LayoutSize,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_30;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          v9 = *(unsigned int *)(result + 28);
          if ((_DWORD)v9)
          {
            v26 = result;
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v9));
            result = v26;
          }
          v10 = *(WTF **)(result + 16);
          if (v10)
          {
            *(_QWORD *)(result + 16) = 0;
            *(_DWORD *)(result + 24) = 0;
            v25 = result;
            WTF::fastFree(v10, a2);
            result = v25;
          }
          result = WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v11 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v12 = *(_DWORD *)(v11 - 12);
      else
        v12 = 0;
      *(_DWORD *)(v11 - 12) = v12 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (!v3)
      goto LABEL_22;
    v15 = *(_DWORD *)(v3 - 4);
    v16 = *(unsigned int *)(v3 - 12);
    if (v15 < 9 || 6 * (int)v16 >= v15)
    {
LABEL_30:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_31;
    }
    v18 = (v16 - 1) | ((v16 - 1) >> 1) | ((((_DWORD)v16 - 1) | ((v16 - 1) >> 1)) >> 2);
    v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
    v20 = (v19 | HIWORD(v19)) + 1;
    if (v20 > 0x400)
    {
      if (v20 > 2 * v16)
        goto LABEL_39;
    }
    else if (3 * v20 > 4 * v16)
    {
LABEL_36:
      v21 = (double)v16;
      v22 = (double)v20;
      v23 = 0.604166667;
      goto LABEL_40;
    }
    LODWORD(v20) = 2 * v20;
    if (v20 <= 0x400)
      goto LABEL_36;
LABEL_39:
    v21 = (double)v16;
    v22 = (double)v20;
    v23 = 0.416666667;
LABEL_40:
    if (v22 * v23 <= v21)
      LODWORD(v20) = 2 * v20;
    if (v20 <= 8)
      v24 = 8;
    else
      v24 = v20;
    result = (uint64_t)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash((uint64_t *)v2, v24, 0);
    v13 = 0;
    v3 = *(_QWORD *)v2;
    *(_DWORD *)(v2 + 8) = 0;
    if (!v3)
      goto LABEL_23;
LABEL_31:
    v13 = *(_DWORD *)(v3 - 12);
    v14 = 0x7FFFFFFF;
    if (v13 >= 0x7FFFFFFF)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_22:
  v13 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_23:
  v14 = v13;
LABEL_24:
  *(_DWORD *)(v2 + 12) = 2 * v14;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WebCore::LayoutSize,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WebCore::LayoutSize>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  WTF *v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    bzero((void *)(v9 + 16), 16 * a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (uint64_t *)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (_QWORD *)(v17 + 16 * v24);
          *v26 = 0;
          v27 = *v15;
          *v15 = 0;
          *v26 = v27;
          v26[1] = *(_QWORD *)(v6 + 16 * v13 + 8);
          v28 = *v15;
          *v15 = 0;
          if (v28)
          {
            do
            {
              v29 = __ldaxr((unsigned int *)v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, (unsigned int *)v28));
            if (!v30)
            {
              atomic_store(1u, (unsigned int *)v28);
              v31 = *(unsigned int *)(v28 + 28);
              if ((_DWORD)v31)
              {
                v35 = v28;
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v31));
                v28 = v35;
              }
              v32 = *(WTF **)(v28 + 16);
              if (v32)
              {
                *(_QWORD *)(v28 + 16) = 0;
                *(_DWORD *)(v28 + 24) = 0;
                v34 = v28;
                WTF::fastFree(v32, v10);
                v28 = v34;
              }
              WTF::fastFree((WTF *)v28, v10);
            }
          }
          if (v15 == a3)
            v14 = v26;
        }
        else
        {
          *v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>>::customDeleteBucket(uint64_t *a1, void *a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1;
  result = *a1;
  *v2 = 0;
  if (result)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      v12 = *(unsigned int *)(result + 28);
      v13 = v2;
      if ((_DWORD)v12)
      {
        v16 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v12));
        result = v16;
      }
      v14 = *(WTF **)(result + 16);
      if (v14)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v15 = result;
        WTF::fastFree(v14, a2);
        result = v15;
      }
      result = WTF::fastFree((WTF *)result, a2);
      v2 = v13;
    }
  }
  v4 = v2[1];
  *v2 = -1;
  v2[1] = 0;
  if (v4)
  {
    v5 = *(WTF **)(v4 + 56);
    if ((WTF *)(v4 + 72) != v5 && v5 != 0)
    {
      *(_QWORD *)(v4 + 56) = 0;
      *(_DWORD *)(v4 + 64) = 0;
      WTF::fastFree(v5, a2);
    }
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 40, (WTF::StringImpl *)a2);
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24, v7);
    WTF::Vector<WebCore::Style::MatchedProperties,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 8, v8);
    return WTF::fastFree((WTF *)v4, v9);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    do
    {
      v11 = (uint64_t *)(v4 + 16 * v9);
      v12 = *v11;
      if (*v11)
      {
        if (v12 != -1)
        {
          v13 = *a1;
          if (*a1)
            v14 = *(_DWORD *)(v13 - 8);
          else
            v14 = 0;
          v15 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
          v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          v18 = v14 & ((v17 >> 31) ^ v17);
          v19 = 1;
          do
          {
            v20 = v18;
            v21 = *(_QWORD *)(v13 + 16 * v18);
            v18 = (v18 + v19++) & v14;
          }
          while (v21);
          v22 = (uint64_t *)(v13 + 16 * v20);
          WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>::~KeyValuePair(v22, v8);
          v23 = *v11;
          *v11 = 0;
          *v22 = v23;
          v24 = (uint64_t *)(v4 + 16 * v9);
          v25 = v24[1];
          v24[1] = 0;
          v22[1] = v25;
          WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>::~KeyValuePair(v24, v26);
        }
      }
      else
      {
        WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>::~KeyValuePair((uint64_t *)(v4 + 16 * v9), v8);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t *WTF::WeakHashMap<WebCore::Element const,WTF::UniqueRef<WebCore::Style::MatchResult>,WebCore::WeakPtrImplWithEventTargetData>::removeNullReferences(uint64_t *result, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v8;
  unsigned int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = result;
  v3 = *result;
  if (*result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_15;
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      result = (uint64_t *)(v3 + 16 * v6);
      if ((unint64_t)(*result + 1) >= 2 && !*(_QWORD *)(*result + 8))
      {
        result = (uint64_t *)WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>>::customDeleteBucket(result, a2);
        ++v5;
      }
    }
    while ((unint64_t)v6--);
    v3 = *v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v12 = *v2;
      if (*v2)
        v13 = *(_DWORD *)(v12 - 12);
      else
        v13 = 0;
      *(_DWORD *)(v12 - 12) = v13 - v5;
      v3 = *v2;
    }
    if (v3)
    {
      v8 = *(_DWORD *)(v3 - 4);
      if (v8 >= 9 && 6 * *(_DWORD *)(v3 - 12) < v8)
      {
        result = (uint64_t *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(v2);
        v3 = *v2;
        *((_DWORD *)v2 + 2) = 0;
        if (!v3)
        {
          v10 = 0;
          goto LABEL_19;
        }
LABEL_16:
        v10 = *(_DWORD *)(v3 - 12);
        v11 = 0x7FFFFFFF;
        if (v10 >= 0x7FFFFFFF)
          goto LABEL_20;
        goto LABEL_19;
      }
LABEL_15:
      *((_DWORD *)v2 + 2) = 0;
      goto LABEL_16;
    }
  }
  v10 = 0;
  *((_DWORD *)v2 + 2) = 0;
LABEL_19:
  v11 = v10;
LABEL_20:
  *((_DWORD *)v2 + 3) = 2 * v11;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::computeBestTableSize(v2);
  return WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashMap<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::UniqueRef<WebCore::Style::MatchResult>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::UniqueRef<WebCore::Style::MatchResult>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::computeBestTableSize(unsigned int a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = (a1 - 1) | ((a1 - 1) >> 1) | (((a1 - 1) | ((a1 - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  v3 = (v2 | HIWORD(v2)) + 1;
  if (v3 > 0x400)
  {
    if (v3 > 2 * (unint64_t)a1)
      goto LABEL_11;
  }
  else if (3 * v3 > 4 * (unint64_t)a1)
  {
LABEL_3:
    v4 = (double)a1;
    v5 = (double)v3;
    v6 = 0.604166667;
    goto LABEL_4;
  }
  LODWORD(v3) = 2 * v3;
  if (v3 <= 0x400)
    goto LABEL_3;
LABEL_11:
  v4 = (double)a1;
  v5 = (double)v3;
  v6 = 0.416666667;
LABEL_4:
  if (v5 * v6 <= v4)
    LODWORD(v3) = 2 * v3;
  if (v3 <= 8)
    return 8;
  else
    return v3;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF **v28;
  uint64_t v29;
  WTF::StringImpl *v30;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v11 = 0;
    do
    {
      v14 = (WTF::StringImpl **)(v6 + 16 * v13);
      v15 = *v14;
      if (*v14)
      {
        if (v15 != (WTF::StringImpl *)-1)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = *((_DWORD *)v15 + 4) >> 8;
          do
          {
            v20 = v19 & v17;
            v19 = ++v18 + v20;
          }
          while (*(_QWORD *)(v16 + 16 * v20));
          v21 = v16 + 16 * v20;
          v23 = (_QWORD *)(v21 + 8);
          v22 = *(WTF **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v22)
          {
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v23, v22);
            v25 = *(WTF::StringImpl **)v21;
            *(_QWORD *)v21 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v24);
              else
                *(_DWORD *)v25 -= 2;
            }
          }
          else
          {
            *(_QWORD *)v21 = 0;
          }
          v26 = *v14;
          *v14 = 0;
          *(_QWORD *)v21 = v26;
          v27 = v6 + 16 * v13;
          v29 = *(_QWORD *)(v27 + 8);
          v28 = (WTF **)(v27 + 8);
          *v28 = 0;
          *v23 = v29;
          v10 = *v28;
          *v28 = 0;
          if (v10)
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v28, v10);
          v30 = *v14;
          *v14 = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v10);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (v14 == a3)
            v11 = v21;
        }
      }
      else
      {
        v10 = v14[1];
        v14[1] = 0;
        if (v10)
        {
          std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((_DWORD)v14 + 8, v10);
          v15 = *v14;
        }
        *v14 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v10);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

unsigned __int8 ***WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::values(unsigned __int8 ***result, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  int v9;
  unsigned __int8 *v10;

  v2 = *a2;
  if (!*a2)
  {
    v5 = 0;
    LODWORD(v3) = 0;
LABEL_16:
    v4 = &v2[40 * v3];
    goto LABEL_11;
  }
  v3 = *((unsigned int *)v2 - 1);
  v4 = &v2[40 * v3];
  if (!*((_DWORD *)v2 - 3))
  {
    v5 = &v2[40 * v3];
    goto LABEL_16;
  }
  v5 = *a2;
  if ((_DWORD)v3)
  {
    v6 = 40 * v3;
    v5 = *a2;
    while (1)
    {
      v7 = *v5;
      if (v7 != 255 && (v7 | v5[1] | v5[2]) != 0)
        break;
      v5 += 40;
      v6 -= 40;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (v2)
  {
    v9 = *((_DWORD *)v2 - 1);
    v10 = &v2[40 * v9];
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  *result = a2;
  result[1] = (unsigned __int8 **)v5;
  result[2] = (unsigned __int8 **)v4;
  result[3] = (unsigned __int8 **)v10;
  result[4] = (unsigned __int8 **)&v2[40 * v9];
  return result;
}

unsigned __int8 *WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::expand(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::rehash(a1, v5, a2);
}

unint64_t WTF::HashMapEnsureTranslator<WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>>::hash<std::tuple<unsigned char,BOOL,BOOL>>(unsigned __int8 *a1)
{
  unsigned int v1;
  unsigned int v2;
  int32x2_t v3;
  int8x8_t v4;
  int8x8_t v5;
  int32x2_t v6;
  int8x8_t v7;
  int32x2_t v8;

  v1 = ~(*a1 << 15) + *a1;
  v2 = (9 * (v1 ^ (v1 >> 10))) ^ ((9 * (v1 ^ (v1 >> 10))) >> 6);
  v3.i32[0] = a1[1];
  v3.i32[1] = a1[2];
  v4 = (int8x8_t)vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v3, 0xFuLL)), v3);
  v5 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v4, 0xAuLL), v4), (int32x2_t)0x900000009);
  v6 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v5, 6uLL), v5);
  v7 = (int8x8_t)vadd_s32(v6, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v6, 0xBuLL)));
  v8 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v7, 0x10uLL), v7), (int32x2_t)0x5AC73FE109132F9);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v2 + ~(v2 << 11)) ^ ((v2 + ~(v2 << 11)) >> 16))
                           + 95187966
                           * ((0xD7862706ELL * (unint64_t)vadd_s32(vdup_lane_s32(v8, 1), v8).u32[0]) >> 4))) >> 4;
}

unsigned __int8 *WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::rehash(uint64_t *a1, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _OWORD *v12;
  unsigned __int8 *v13;
  unsigned __int8 *result;
  unsigned __int8 *v15;
  BOOL v16;
  unsigned __int8 *v17;
  void *v18;
  uint64_t v19;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(40 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_OWORD *)(v9 + 24);
    do
    {
      *((_BYTE *)v12 - 6) = 0;
      *((_WORD *)v12 - 4) = 0;
      *v12 = 0uLL;
      v12[1] = 0uLL;
      v12 = (_OWORD *)((char *)v12 + 40);
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v13 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v15 = (unsigned __int8 *)v6;
    do
    {
      if (*v15 != 255)
      {
        v19 = v6;
        if (*v15)
          v16 = 0;
        else
          v16 = v15[1] == 0;
        if (v16 && !v15[2])
        {
          WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>::~KeyValuePair((uint64_t)v15, v10);
        }
        else
        {
          v17 = WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::reinsert(a1, v15);
          WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>::~KeyValuePair((uint64_t)v15, v18);
          if (v15 == a3)
            v13 = v17;
        }
        v6 = v19;
      }
      v15 += 40;
      --v7;
    }
    while (v7);
    goto LABEL_22;
  }
  result = 0;
  if (v6)
  {
LABEL_22:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v13;
  }
  return result;
}

uint64_t WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>::~KeyValuePair(uint64_t a1, void *a2)
{
  WTF *v3;
  WebCore::Style::RuleSet *v4;
  WTF *v6;
  void *v7;

  v3 = *(WTF **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WebCore::Style::RuleSet **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

unsigned __int8 *WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::reinsert(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int32x2_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int32x2_t v10;
  int8x8_t v11;
  int32x2_t v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  WTF *v18;
  _QWORD *v19;
  WTF *v20;
  WebCore::Style::RuleSet **v21;
  WebCore::Style::RuleSet *v22;
  __int16 v23;
  WebCore::Style::RuleSet *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v28;
  void *v29;

  v3 = *a1;
  if (*a1)
    v4 = *(_DWORD *)(v3 - 8);
  else
    v4 = 0;
  v5 = ~(*a2 << 15) + *a2;
  v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  v7.i32[0] = a2[1];
  v7.i32[1] = a2[2];
  v8 = (int8x8_t)vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v7, 0xFuLL)), v7);
  v9 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v8, 0xAuLL), v8), (int32x2_t)0x900000009);
  v10 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v9, 6uLL), v9);
  v11 = (int8x8_t)vadd_s32(v10, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v10, 0xBuLL)));
  v12 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v11, 0x10uLL), v11), (int32x2_t)0x5AC73FE109132F9);
  v13 = v4 & ((0xD7862706ELL
             * (unint64_t)(277951225 * ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16))
                                + 95187966
                                * ((0xD7862706ELL
                                                * (unint64_t)vadd_s32(vdup_lane_s32(v12, 1), v12).u32[0]) >> 4))) >> 4);
  for (i = 1; ; ++i)
  {
    v15 = v13;
    v16 = (unsigned __int8 *)(v3 + 40 * v13);
    if (!(*v16 | v16[1]) && !v16[2])
      break;
    v13 = (v13 + i) & v4;
  }
  v17 = v3 + 40 * v13;
  v20 = *(WTF **)(v17 + 16);
  v19 = (_QWORD *)(v17 + 16);
  v18 = v20;
  v21 = (WebCore::Style::RuleSet **)(v19 - 1);
  if (v20)
  {
    *v19 = 0;
    *(_DWORD *)(v3 + 40 * v13 + 24) = 0;
    WTF::fastFree(v18, a2);
  }
  v22 = *v21;
  *v21 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v22, a2);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  v23 = *(_WORD *)a2;
  v16[2] = a2[2];
  *(_WORD *)v16 = v23;
  v24 = (WebCore::Style::RuleSet *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *v21 = v24;
  *v19 = 0;
  v19[1] = 0;
  v25 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  *v19 = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  v26 = v3 + 40 * v15;
  *(_DWORD *)(v26 + 24) = v25;
  LODWORD(v25) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(v26 + 28) = v25;
  *(_WORD *)(v26 + 32) = *((_WORD *)a2 + 16);
  return v16;
}

WTF *WTF::GenericHashTraits<WebCore::Style::InvalidationRuleSet>::assignToEmpty<WebCore::Style::InvalidationRuleSet,WebCore::Style::InvalidationRuleSet>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  WebCore::Style::RuleSet *v5;
  WTF *result;
  uint64_t v7;
  WTF *v8;
  void *v9;

  v4 = *a2;
  *a2 = 0;
  v5 = *(WebCore::Style::RuleSet **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v5, a2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  result = *(WTF **)(a1 + 8);
  if (result)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v7 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(a1 + 8) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v7;
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  return result;
}

uint64_t *WTF::HashTable<std::tuple<unsigned char,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet>>,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashMap<std::tuple<unsigned char,BOOL,BOOL>,WebCore::Style::InvalidationRuleSet,WTF::DefaultHash<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>,WTF::HashTraits<WebCore::Style::InvalidationRuleSet>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned char,BOOL,BOOL>>>::~HashTable(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WebCore::Style::RuleSet *v7;
  WTF *v8;
  void *v9;

  v3 = *a1;
  if (*a1)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = v3 + 16;
      do
      {
        if (*(unsigned __int8 *)(v5 - 16) != 255)
        {
          v6 = *(WTF **)v5;
          if (*(_QWORD *)v5)
          {
            *(_QWORD *)v5 = 0;
            *(_DWORD *)(v5 + 8) = 0;
            WTF::fastFree(v6, a2);
          }
          v7 = *(WebCore::Style::RuleSet **)(v5 - 8);
          *(_QWORD *)(v5 - 8) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 1)
            {
              WebCore::Style::RuleSet::~RuleSet(v7, a2);
              WTF::fastFree(v8, v9);
            }
            else
            {
              --*(_DWORD *)v7;
            }
          }
        }
        v5 += 40;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  return a1;
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::expand(uint64_t *a1, int *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(a1, v5, a2);
}

unint64_t WTF::HashMapEnsureTranslator<WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::hash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD *)a1 + ~(*(_DWORD *)a1 << 15);
  v2 = (9 * (v1 ^ (v1 >> 10))) ^ ((9 * (v1 ^ (v1 >> 10))) >> 6);
  v3 = ~(*(unsigned __int8 *)(a1 + 4) << 15) + *(unsigned __int8 *)(a1 + 4);
  v4 = (9 * (v3 ^ (v3 >> 10))) ^ ((9 * (v3 ^ (v3 >> 10))) >> 6);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * ((v2 + ~(v2 << 11)) ^ ((v2 + ~(v2 << 11)) >> 16))
                           + 95187966
                           * ((0xD7862706ELL
                                           * (unint64_t)(95187966
                                                              * (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 16) >> 8)
                                                              + 277951225
                                                              * ((v4 + ~(v4 << 11)) ^ ((v4 + ~(v4 << 11)) >> 16)))) >> 4))) >> 4;
}

uint64_t WTF::HashTable<std::tuple<unsigned int,unsigned char,WTF::AtomString>,WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int i;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  WTF *v31;
  _QWORD *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF **v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  uint64_t result;

  v5 = *a1;
  if (*a1)
  {
    v6 = *(_DWORD *)(v5 - 4);
    v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (int *)(v5 + 24 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        v14 = *((unsigned __int8 *)v12 + 4);
        if (v13)
          v15 = 0;
        else
          v15 = v14 == 0;
        if (!v15 || *((_QWORD *)v12 + 1))
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 9 * ((v13 + ~(v13 << 15)) ^ ((v13 + ~(v13 << 15)) >> 10));
          v23 = (v22 ^ (v22 >> 6)) + ~((v22 ^ (v22 >> 6)) << 11);
          v24 = 9 * ((~(v14 << 15) + v14) ^ ((~(v14 << 15) + v14) >> 10));
          v25 = (v24 ^ (v24 >> 6)) + ~((v24 ^ (v24 >> 6)) << 11);
          v26 = v21 & ((0xD7862706ELL
                      * (unint64_t)(277951225 * (v23 ^ HIWORD(v23))
                                         + 95187966
                                         * ((0xD7862706ELL
                                                         * (unint64_t)(277951225 * (v25 ^ HIWORD(v25))
                                                                            + 95187966
                                                                            * (*(_DWORD *)(*((_QWORD *)v12 + 1) + 16) >> 8))) >> 4))) >> 4);
          for (i = 1; ; ++i)
          {
            v28 = v20 + 24 * v26;
            v29 = !*(_DWORD *)v28 && *(_BYTE *)(v28 + 4) == 0;
            if (v29 && !*(_QWORD *)(v28 + 8))
              break;
            v26 = (v26 + i) & v21;
          }
          v30 = v20 + 24 * v26;
          v33 = *(WTF **)(v30 + 16);
          v32 = (_QWORD *)(v30 + 16);
          v31 = v33;
          *v32 = 0;
          if (v33)
          {
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v32, v31);
            v35 = *(WTF::StringImpl **)(v28 + 8);
            *(_QWORD *)(v28 + 8) = 0;
            if (v35)
            {
              if (*(_DWORD *)v35 == 2)
                WTF::StringImpl::destroy(v35, v34);
              else
                *(_DWORD *)v35 -= 2;
            }
          }
          else
          {
            *(_QWORD *)(v28 + 8) = 0;
          }
          *(_DWORD *)v28 = *v12;
          *(_BYTE *)(v28 + 4) = *((_BYTE *)v12 + 4);
          v36 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *(_QWORD *)(v28 + 8) = v36;
          v37 = v5 + 24 * v10;
          v39 = *(_QWORD *)(v37 + 16);
          v38 = (WTF **)(v37 + 16);
          *v38 = 0;
          *v32 = v39;
          v9 = *v38;
          *v38 = 0;
          if (v9)
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v38, v9);
          v40 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v9);
            else
              *(_DWORD *)v40 -= 2;
          }
          if (v12 == a3)
            v11 = v28;
        }
        else
        {
          v16 = v5 + 24 * v10;
          v18 = *(WTF **)(v16 + 16);
          v17 = (_QWORD *)(v16 + 16);
          v9 = v18;
          *v17 = 0;
          if (v18)
          {
            std::default_delete<WTF::Vector<WebCore::Style::InvalidationRuleSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((int)v17, v9);
            v19 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
            *((_QWORD *)v12 + 1) = 0;
            if (v19)
            {
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v9);
              else
                *(_DWORD *)v19 -= 2;
            }
          }
          else
          {
            *((_QWORD *)v12 + 1) = 0;
          }
        }
      }
      ++v10;
    }
    while (v10 != v6);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v5)
      return result;
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v11;
}

uint64_t WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned int,unsigned char,WTF::AtomString>,std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::tuple<unsigned int,unsigned char,WTF::AtomString>>,WTF::HashTraits<std::unique_ptr<WTF::Vector<WebCore::Style::RuleFeature,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,unsigned char,WTF::AtomString>>>,std::tuple<unsigned int,unsigned char,WTF::AtomString>>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int j;
  int *v21;
  int v22;
  int v23;
  uint64_t v25;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = *a2;
  v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
  v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
  v7 = v6 ^ HIWORD(v6);
  v8 = *((unsigned __int8 *)a2 + 4);
  v9 = 9 * ((~(v8 << 15) + v8) ^ ((~(v8 << 15) + v8) >> 10));
  v10 = (v9 ^ (v9 >> 6)) + ~((v9 ^ (v9 >> 6)) << 11);
  v11 = v10 ^ HIWORD(v10);
  v12 = *((_QWORD *)a2 + 1);
  v13 = v3 & ((0xD7862706ELL
             * (unint64_t)(277951225 * v7
                                + 95187966
                                * ((0xD7862706ELL
                                                * (unint64_t)(95187966
                                                                                 * (*(_DWORD *)(v12 + 16) >> 8)
                                                                                 + 277951225 * v11)) >> 4))) >> 4);
  if (!*a2)
  {
    for (i = 1; ; ++i)
    {
      v15 = v13;
      v16 = v2 + 24 * v13;
      v17 = *(unsigned __int8 *)(v16 + 4);
      if (*(_DWORD *)v16 | v17)
      {
        if (*(_DWORD *)v16)
          goto LABEL_13;
        v18 = *(_QWORD *)(v16 + 8);
      }
      else
      {
        v18 = *(_QWORD *)(v16 + 8);
        if (!v18)
          return 0;
      }
      if (v17 == v8 && v18 == v12)
        return *(_QWORD *)(v2 + 24 * v15 + 16);
LABEL_13:
      v13 = (v15 + i) & v3;
    }
  }
  for (j = 1; ; ++j)
  {
    v15 = v13;
    v21 = (int *)(v2 + 24 * v13);
    v22 = *v21;
    v23 = *((unsigned __int8 *)v21 + 4);
    if (*v21 | v23)
      break;
    if (!*((_QWORD *)v21 + 1))
      return 0;
LABEL_27:
    v13 = (v15 + j) & v3;
  }
  if (v22 == -1 || v22 != v4)
    goto LABEL_27;
  v25 = *((_QWORD *)v21 + 1);
  if (v23 != v8 || v25 != v12)
    goto LABEL_27;
  return *(_QWORD *)(v2 + 24 * v15 + 16);
}

BOOL WTF::Detail::CallableWrapper<WebCore::Style::SharingResolver::resolve(WebCore::Styleable const&,WebCore::Style::Update const&)::$_0,BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 180) != 0;
}

BOOL WTF::Detail::CallableWrapper<WebCore::Style::SharingResolver::canShareStyleWithElement(WebCore::Style::SharingResolver::Context const&,WebCore::StyledElement const&)::$_0,BOOL,WebCore::Style::RuleSet &>::call(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 180) != 0;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>>>,std::pair<WTF::String,WebCore::CSSParserContext>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  BOOL v22;
  const WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  unsigned int v26;
  int v27;
  int i;
  WTF::StringImpl *v29[5];
  char v30;
  char **v31;
  char *v32;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_DWORD *)(v2 - 8);
    v5 = *(_DWORD *)(*(_QWORD *)a2 + 16);
    if (v5 < 0x100)
      v6 = WTF::StringImpl::hashSlowCase(*(WTF::StringImpl **)a2);
    else
      v6 = v5 >> 8;
    LODWORD(v29[0]) = -1640531527;
    WORD2(v29[0]) = 0;
    BYTE6(v29[0]) = 0;
    v7 = *(unsigned __int16 *)(a2 + 59) | (*(unsigned __int8 *)(a2 + 61) << 16);
    LODWORD(v32) = (v7 >> 1) & 0x10 | v7 & 0xF | (v7 >> 2) & 0x20 | (v7 >> 1) & 0x780 | (v7 >> 3) & 0xFF800 | (v7 >> 2) & 0x200000 | (*(unsigned __int8 *)(a2 + 56) << 22);
    WTF::add<WTF::URL,WTF::String,WebCore::CSSPropertySettings,unsigned int>((unsigned int *)v29, (uint64_t *)(a2 + 8), (uint64_t *)(a2 + 48), (_DWORD *)(a2 + 62), &v32);
    v8 = v29[0];
    if (BYTE6(v29[0]))
    {
      v26 = (LODWORD(v29[0]) + WORD2(v29[0])) ^ ((LODWORD(v29[0]) + WORD2(v29[0])) << 11);
      v8 = v26 + (v26 >> 17);
    }
    v9 = (v8 ^ (8 * v8)) + ((v8 ^ (8 * v8)) >> 5);
    v10 = (v9 ^ (4 * v9)) + ((v9 ^ (4 * v9)) >> 15);
    v11 = v10 ^ (v10 << 10);
    if (v11)
      v12 = 95187966 * v11;
    else
      v12 = -16777216;
    v27 = v4;
    v13 = v4 & ((0xD7862706ELL * (unint64_t)(v12 + 277951225 * v6)) >> 4);
    for (i = 1; ; ++i)
    {
      v29[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v29);
      v16 = v29[0];
      if (v29[0])
        *(_DWORD *)v29[0] += 2;
      v17 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
      if (v17 != -1)
      {
        v31 = &v32;
        v32 = &v30;
        std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v31, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
      }
      v18 = v29[0];
      v29[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v14);
        else
          *(_DWORD *)v18 -= 2;
      }
      v19 = v2 + 80 * v13;
      v22 = WTF::equal(*(WTF **)v19, 0, v15)
         && WTF::equal(*(WTF **)(v19 + 8), v16, v21)
         && WTF::equal(*(WTF **)(v19 + 48), 0, v21)
         && !*(_BYTE *)(v19 + 56)
         && !*(_BYTE *)(v19 + 58)
         && !(*(unsigned __int16 *)(v19 + 59) | (*(unsigned __int8 *)(v19 + 61) << 16))
         && (*(_DWORD *)(v19 + 62) & 0x3FFFFFFF) == 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v20);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (v22)
        return 0;
      if (*(_QWORD *)v19 != -1
        && WTF::equal(*(WTF **)v19, *(const WTF::StringImpl **)a2, v21)
        && WTF::equal(*(WTF **)(v19 + 8), *(const WTF::StringImpl **)(a2 + 8), v23)
        && WTF::equal(*(WTF **)(v19 + 48), *(const WTF::StringImpl **)(a2 + 48), v24)
        && *(unsigned __int8 *)(v19 + 56) == *(unsigned __int8 *)(a2 + 56))
      {
        if (*(_BYTE *)(v19 + 58) && *(_BYTE *)(a2 + 58))
        {
          if (*(unsigned __int8 *)(v19 + 57) != *(unsigned __int8 *)(a2 + 57))
            goto LABEL_43;
        }
        else if ((*(_BYTE *)(v19 + 58) != 0) != (*(_BYTE *)(a2 + 58) != 0))
        {
          goto LABEL_43;
        }
        if ((*(unsigned __int16 *)(a2 + 59) | (*(unsigned __int8 *)(a2 + 61) << 16)) == (*(unsigned __int16 *)(v19 + 59) | (*(unsigned __int8 *)(v19 + 61) << 16))
          && ((*(_DWORD *)(a2 + 62) ^ *(_DWORD *)(v19 + 62)) & 0x3FFFFFFF) == 0)
        {
          return v19;
        }
      }
LABEL_43:
      v13 = (v13 + i) & v27;
    }
  }
  return 0;
}

BOOL WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::CSSParserContext>>(uint64_t a1)
{
  WTF::StringImpl *v2;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  const WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  _BOOL8 v16;
  _QWORD v18[6];
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int16 v22;
  unsigned __int8 v23;
  int v24;
  WTF::StringImpl *v25[5];

  v25[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v25);
  WebCore::CSSParserContext::CSSParserContext((uint64_t)v18, 0, (uint64_t)v25);
  v4 = v25[0];
  v25[0] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (const WTF::StringImpl *)v18[0];
  v6 = (const WTF::StringImpl *)v18[5];
  v7 = v19;
  v8 = v20;
  v9 = v21;
  v10 = v23;
  v11 = v22;
  v12 = v24;
  if (!WTF::equal(*(WTF **)a1, 0, v3) || !WTF::equal(*(WTF **)(a1 + 8), v5, v14))
    goto LABEL_15;
  v16 = 0;
  if (WTF::equal(*(WTF **)(a1 + 48), v6, v15) && *(unsigned __int8 *)(a1 + 56) == v7)
  {
    if (v9 && *(_BYTE *)(a1 + 58))
    {
      if (*(unsigned __int8 *)(a1 + 57) != v8)
        goto LABEL_15;
    }
    else if ((v9 != 0) != (*(_BYTE *)(a1 + 58) != 0))
    {
LABEL_15:
      v16 = 0;
      goto LABEL_16;
    }
    if (((v11 | (v10 << 16)) & 0xFFFFFF) == (*(unsigned __int16 *)(a1 + 59) | (*(unsigned __int8 *)(a1 + 61) << 16)))
    {
      v16 = ((*(_DWORD *)(a1 + 62) ^ v12) & 0x3FFFFFFF) == 0;
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_16:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v13);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v13);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v16;
}

WTF::StringImpl *WTF::PairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::CSSParserContext>>::emptyValue(uint64_t a1)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  __int128 v4;
  __int128 v5;
  unint64_t v6;
  WTF::StringImpl *result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  WTF::StringImpl *v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char **v16;
  char *v17;

  v12 = 0;
  WTF::URL::invalidate((WTF::URL *)&v12);
  v3 = v12;
  if (v12)
    *(_DWORD *)v12 += 2;
  v4 = v13;
  v5 = v14;
  v6 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v6 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    v8 = v14;
    v10 = v13;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
    v5 = v8;
    v4 = v10;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      v9 = v5;
      v11 = v4;
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      v5 = v9;
      v4 = v11;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 0;
  return result;
}

uint64_t WTF::PairHash<WTF::String,WebCore::CSSParserContext>::equal(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if ((_DWORD)result)
  {
    result = WTF::equal(*(WTF **)(a1 + 8), *(const WTF::StringImpl **)(a2 + 8), v6);
    if ((_DWORD)result)
    {
      result = WTF::equal(*(WTF **)(a1 + 48), *(const WTF::StringImpl **)(a2 + 48), v7);
      if ((_DWORD)result)
      {
        if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
        {
          if (*(_BYTE *)(a1 + 58) && *(_BYTE *)(a2 + 58))
          {
            if (*(unsigned __int8 *)(a1 + 57) != *(unsigned __int8 *)(a2 + 57))
              return 0;
          }
          else if ((*(_BYTE *)(a1 + 58) != 0) != (*(_BYTE *)(a2 + 58) != 0))
          {
            return 0;
          }
          if ((*(unsigned __int16 *)(a2 + 59) | (*(unsigned __int8 *)(a2 + 61) << 16)) == (*(unsigned __int16 *)(a1 + 59) | (*(unsigned __int8 *)(a1 + 61) << 16)))
            return ((*(_DWORD *)(a2 + 62) ^ *(_DWORD *)(a1 + 62)) & 0x3FFFFFFF) == 0;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::expand(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::rehash(uint64_t *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t Table;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  WebCore::StyleSheetContents *v28;
  _QWORD *v29;
  WebCore::StyleSheetContents *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::StyleSheetContents *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WebCore::StyleSheetContents *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  void *v54;
  WTF *v55;
  void *v56;
  WTF *v57;
  void *v58;
  uint64_t result;
  unsigned int v60;
  uint64_t v63;
  WTF::StringImpl **v64;
  WTF::StringImpl **v65;
  unsigned int v66;
  unsigned __int16 v67;
  char v68;
  int v69;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  Table = WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::allocateTable(a2);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v63 = v5;
    do
    {
      v11 = (_QWORD *)(v4 + 80 * v9);
      if (*v11 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::CSSParserContext>>(v4 + 80 * v9))
        {
          v48 = v4 + 80 * v9;
          v49 = *(WebCore::StyleSheetContents **)(v48 + 72);
          *(_QWORD *)(v48 + 72) = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 1)
            {
              WebCore::StyleSheetContents::~StyleSheetContents(v49, v8);
              WTF::fastFree(v57, v58);
            }
            else
            {
              --*(_DWORD *)v49;
            }
          }
          v50 = (WTF::StringImpl *)v11[6];
          v11[6] = 0;
          if (v50)
          {
            if (*(_DWORD *)v50 == 2)
              WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v50 -= 2;
          }
          v51 = (WTF::StringImpl *)v11[1];
          v11[1] = 0;
          if (v51)
          {
            if (*(_DWORD *)v51 == 2)
              WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v51 -= 2;
          }
          v52 = (WTF::StringImpl *)*v11;
          *v11 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
              WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v52 -= 2;
          }
        }
        else
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = *(_DWORD *)(*v11 + 16);
          if (v14 < 0x100)
            v15 = WTF::StringImpl::hashSlowCase((WTF::StringImpl *)*v11);
          else
            v15 = v14 >> 8;
          v66 = -1640531527;
          v67 = 0;
          v68 = 0;
          v16 = *(unsigned __int16 *)((char *)v11 + 59) | (*((unsigned __int8 *)v11 + 61) << 16);
          v69 = (v16 >> 1) & 0x10 | v16 & 0xF | (v16 >> 2) & 0x20 | (v16 >> 1) & 0x780 | (v16 >> 3) & 0xFF800 | (v16 >> 2) & 0x200000 | (*((unsigned __int8 *)v11 + 56) << 22);
          v64 = (WTF::StringImpl **)(v11 + 6);
          v65 = (WTF::StringImpl **)(v11 + 1);
          WTF::add<WTF::URL,WTF::String,WebCore::CSSPropertySettings,unsigned int>(&v66, v11 + 1, v11 + 6, (_QWORD *)((char *)v11 + 62), &v69);
          v17 = v66;
          if (v68)
          {
            v60 = (v66 + v67) ^ ((v66 + v67) << 11);
            v17 = v60 + (v60 >> 17);
          }
          v18 = (v17 ^ (8 * v17)) + ((v17 ^ (8 * v17)) >> 5);
          v19 = (v18 ^ (4 * v18)) + ((v18 ^ (4 * v18)) >> 15);
          v20 = v19 ^ (v19 << 10);
          if (v20)
            v21 = 95187966 * v20;
          else
            v21 = -16777216;
          v22 = v13 & ((0xD7862706ELL * (unint64_t)(v21 + 277951225 * v15)) >> 4);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = v12 + 80 * v22;
            v26 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,false>::isEmptyValue<std::pair<WTF::String,WebCore::CSSParserContext>>(v25);
            v22 = (v24 + v23++) & v13;
          }
          while (!v26);
          v27 = v12 + 80 * v24;
          v30 = *(WebCore::StyleSheetContents **)(v27 + 72);
          v29 = (_QWORD *)(v27 + 72);
          v28 = v30;
          *v29 = 0;
          if (v30)
          {
            if (*(_DWORD *)v28 == 1)
            {
              WebCore::StyleSheetContents::~StyleSheetContents(v28, v8);
              WTF::fastFree(v53, v54);
            }
            else
            {
              --*(_DWORD *)v28;
            }
          }
          v31 = *(WTF::StringImpl **)(v25 + 48);
          *(_QWORD *)(v25 + 48) = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v31 -= 2;
          }
          v32 = *(WTF::StringImpl **)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v32 -= 2;
          }
          v33 = *(WTF::StringImpl **)v25;
          *(_QWORD *)v25 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v33 -= 2;
          }
          v34 = (WTF::StringImpl *)*v11;
          *v11 = 0;
          *(_QWORD *)v25 = v34;
          v35 = v11[1];
          v11[1] = 0;
          *(_QWORD *)(v25 + 8) = v35;
          v36 = *(_DWORD *)(v25 + 16) & 0xFFFFFFFE | v11[2] & 1;
          *(_DWORD *)(v25 + 16) = v36;
          v37 = v36 & 0xFFFFFFFD | (2 * ((*((_DWORD *)v11 + 4) >> 1) & 1));
          *(_DWORD *)(v25 + 16) = v37;
          v38 = v37 & 0xFFFFFFFB | (4 * ((*((_DWORD *)v11 + 4) >> 2) & 1));
          *(_DWORD *)(v25 + 16) = v38;
          v39 = v38 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)v11 + 4) >> 3) & 7));
          *(_DWORD *)(v25 + 16) = v39;
          *(_DWORD *)(v25 + 16) = v11[2] & 0xFFFFFFC0 | v39 & 0x3F;
          *(_OWORD *)(v25 + 20) = *(_OWORD *)((char *)v11 + 20);
          *(_QWORD *)(v25 + 36) = *(_QWORD *)((char *)v11 + 36);
          *(_DWORD *)(v25 + 44) = *((_DWORD *)v11 + 11);
          *((_DWORD *)v11 + 4) &= ~1u;
          v40 = v11[6];
          v11[6] = 0;
          *(_QWORD *)(v25 + 48) = v40;
          v41 = v11[7];
          *(_WORD *)(v25 + 64) = *((_WORD *)v11 + 32);
          *(_QWORD *)(v25 + 56) = v41;
          v42 = v4 + 80 * v9;
          v43 = *(_QWORD *)(v42 + 72);
          *(_QWORD *)(v42 + 72) = 0;
          *v29 = v43;
          v44 = *(WebCore::StyleSheetContents **)(v42 + 72);
          *(_QWORD *)(v42 + 72) = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 1)
            {
              WebCore::StyleSheetContents::~StyleSheetContents(v44, v8);
              WTF::fastFree(v55, v56);
            }
            else
            {
              --*(_DWORD *)v44;
            }
          }
          v45 = *v64;
          *v64 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v45 -= 2;
          }
          v46 = *v65;
          *v65 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v46 -= 2;
          }
          v47 = (WTF::StringImpl *)*v11;
          *v11 = 0;
          if (v47)
          {
            if (*(_DWORD *)v47 == 2)
              WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v8);
            else
              *(_DWORD *)v47 -= 2;
          }
          if (v11 == a3)
            v10 = v25;
        }
      }
      ++v9;
    }
    while (v9 != v63);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::allocateTable(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  WTF::StringImpl *v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char **v21;
  char *v22;

  v2 = WTF::fastMalloc((WTF *)(80 * a1 + 16));
  v3 = v2 + 16;
  if (a1)
  {
    v4 = a1;
    v5 = v2 + 48;
    do
    {
      v17 = 0;
      WTF::URL::invalidate((WTF::URL *)&v17);
      v7 = v17;
      if (v17)
        *(_DWORD *)v17 += 2;
      v8 = v18;
      v9 = v19;
      v10 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
      if (v10 != -1)
      {
        v22 = &v20;
        v21 = &v22;
        v13 = v19;
        v15 = v18;
        std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v21, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
        v9 = v13;
        v8 = v15;
      }
      v11 = v17;
      v17 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
        {
          v14 = v9;
          v16 = v8;
          WTF::StringImpl::destroy(v11, v6);
          v9 = v14;
          v8 = v16;
        }
        else
        {
          *(_DWORD *)v11 -= 2;
        }
      }
      *(_QWORD *)(v5 - 32) = 0;
      *(_QWORD *)(v5 - 24) = v7;
      *(_OWORD *)(v5 - 16) = v8;
      *(_OWORD *)v5 = v9;
      *(_QWORD *)(v5 + 40) = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(v5 + 24) = 0;
      *(_WORD *)(v5 + 32) = 0;
      v5 += 80;
      --v4;
    }
    while (v4);
  }
  return v3;
}

WTF::StringImpl **WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>::~KeyValuePair(WTF::StringImpl **a1, void *a2)
{
  WebCore::StyleSheetContents *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF *v8;
  void *v9;

  v3 = a1[9];
  a1[9] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::StyleSheetContents::~StyleSheetContents(v3, a2);
      WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = a1[6];
  a1[6] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *a1;
  *a1 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashMap<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>,WTF::DefaultHash<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>,WTF::HashTraits<WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::String,WebCore::CSSParserContext>>>::deallocateTable(WTF::StringImpl **a1, void *a2)
{
  WTF::StringImpl **v2;
  uint64_t v3;

  v2 = a1;
  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    do
    {
      if (*a1 != (WTF::StringImpl *)-1)
        a1 = WTF::KeyValuePair<std::pair<WTF::String,WebCore::CSSParserContext>,WTF::Ref<WebCore::StyleSheetContents,WTF::RawPtrTraits<WebCore::StyleSheetContents>,WTF::DefaultRefDerefTraits<WebCore::StyleSheetContents>>>::~KeyValuePair(a1, a2);
      a1 += 10;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(v2 - 2), a2);
}

uint64_t *WTF::Vector<WTF::Ref<WebCore::Style::TreeResolver::Scope,WTF::RawPtrTraits<WebCore::Style::TreeResolver::Scope>,WTF::DefaultRefDerefTraits<WebCore::Style::TreeResolver::Scope>>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::Ref<WebCore::Style::TreeResolver::Scope,WTF::RawPtrTraits<WebCore::Style::TreeResolver::Scope>,WTF::DefaultRefDerefTraits<WebCore::Style::TreeResolver::Scope>>>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (uint64_t *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *result;
  *result = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return result;
}

__n128 WTF::Vector<WebCore::Style::TreeResolver::Parent,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::Style::TreeResolver::Parent>(uint64_t a1, unint64_t a2)
{
  __n128 *v3;
  __n128 *v4;
  __n128 result;

  v3 = (__n128 *)WTF::Vector<WebCore::Style::TreeResolver::Parent,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, (void *)(*(unsigned int *)(a1 + 12) + 1), a2);
  v4 = (__n128 *)(*(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 12));
  result = *v3;
  v4[1].n128_u64[0] = v3[1].n128_u64[0];
  *v4 = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::Style::TreeResolver::Parent,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  WTF *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  __int128 v14;

  v3 = a3;
  v4 = result;
  v5 = *(WTF **)result;
  if (*(_QWORD *)result <= a3 && (unint64_t)v5 + 24 * *(unsigned int *)(result + 12) > a3)
  {
    WTF::Vector<WebCore::Style::TreeResolver::Parent,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, a2);
    return *(_QWORD *)v4 + v3 - (_QWORD)v5;
  }
  v6 = *(unsigned int *)(result + 8);
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= (unint64_t)a2)
    v8 = (unint64_t)a2;
  if (v8 <= v6)
    return v3;
  v9 = *(unsigned int *)(result + 12);
  if (v8 < 0x21)
  {
    v11 = result + 16;
    *(_QWORD *)v4 = v4 + 16;
    *(_DWORD *)(v4 + 8) = 32;
    goto LABEL_11;
  }
  if (v8 < 0xAAAAAAB)
  {
    v10 = 24 * v8;
    v11 = WTF::fastMalloc((WTF *)(24 * v8));
    *(_DWORD *)(v4 + 8) = (v10 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)v4 = v11;
LABEL_11:
    if ((_DWORD)v9)
    {
      v12 = 24 * v9;
      v13 = v5;
      do
      {
        v14 = *(_OWORD *)v13;
        *(_QWORD *)(v11 + 16) = *((_QWORD *)v13 + 2);
        *(_OWORD *)v11 = v14;
        v11 += 24;
        v13 = (WTF *)((char *)v13 + 24);
        v12 -= 24;
      }
      while (v12);
    }
    if ((WTF *)(v4 + 16) != v5 && v5)
    {
      if (*(WTF **)v4 == v5)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<WebCore::Style::TreeResolver::Parent,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  WTF *v10;
  __int128 v11;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v4 = (unint64_t)a2;
  if (v4 > v2)
  {
    v5 = result;
    v6 = *(WTF **)result;
    v7 = *(unsigned int *)(result + 12);
    if (v4 < 0x21)
    {
      result += 16;
      *(_QWORD *)v5 = v5 + 16;
      *(_DWORD *)(v5 + 8) = 32;
    }
    else
    {
      if (v4 >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      v8 = 24 * v4;
      result = WTF::fastMalloc((WTF *)(24 * v4));
      *(_DWORD *)(v5 + 8) = (v8 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v5 = result;
    }
    if ((_DWORD)v7)
    {
      v9 = 24 * v7;
      v10 = v6;
      do
      {
        v11 = *(_OWORD *)v10;
        *(_QWORD *)(result + 16) = *((_QWORD *)v10 + 2);
        *(_OWORD *)result = v11;
        result += 24;
        v10 = (WTF *)((char *)v10 + 24);
        v9 -= 24;
      }
      while (v9);
    }
    if ((WTF *)(v5 + 16) != v6 && v6)
    {
      if (*(WTF **)v5 == v6)
      {
        *(_QWORD *)v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
      }
      return WTF::fastFree(v6, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  v3 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!(_DWORD)v3)
    return v2;
  if (!(v3 >> 29))
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(_QWORD *)v2 = v5;
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)a2;
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        *(_DWORD *)(v9 + 24) += 2;
        *v5++ = v9;
        v8 -= 8;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::lookup<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>,WebCore::Element const*>(uint64_t result, uint64_t a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int i;
  uint64_t v8;
  uint64_t v9;

  if (result)
  {
    v2 = *(_DWORD *)(result - 8);
    v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    v6 = v2 & ((v5 >> 31) ^ v5);
    for (i = 1; ; ++i)
    {
      v8 = v6;
      v9 = *(_QWORD *)(result + 16 * v6);
      if (v9 != -1)
      {
        if (!v9)
          return 0;
        if (v9 == a2)
          break;
      }
      v6 = (v8 + i) & v2;
    }
    result += 16 * v8;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,std::optional<WebCore::Style::TreeResolver::QueryContainerState>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<std::optional<WebCore::Style::TreeResolver::QueryContainerState>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = v9 + 24;
    do
    {
      *(_QWORD *)(v12 - 8) = 0;
      *(_BYTE *)(v12 + 2) = 0;
      *(_WORD *)v12 = 0;
      v12 += 16;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (uint64_t *)(v6 + 16 * v13);
      v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (~(v16 << 32) + v16) ^ ((unint64_t)(~(v16 << 32) + v16) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = v17 + 16 * v24;
          *(_QWORD *)v26 = 0;
          v27 = *v15;
          *v15 = 0;
          *(_QWORD *)v26 = v27;
          v28 = v6 + 16 * v13;
          v29 = *(_WORD *)(v28 + 8);
          *(_BYTE *)(v26 + 10) = *(_BYTE *)(v28 + 10);
          *(_WORD *)(v26 + 8) = v29;
          v30 = *v15;
          *v15 = 0;
          if (v30)
          {
            if (*(_DWORD *)(v30 + 24) == 2)
            {
              if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v30);
            }
            else
            {
              *(_DWORD *)(v30 + 24) -= 2;
            }
          }
          if (v15 == a3)
            v14 = v26;
        }
        else
        {
          *v15 = 0;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::GenericHashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>::assignToEmpty<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *a1;
  *a1 = v3;
  if (result)
  {
    if (*(_DWORD *)(result + 24) == 2)
    {
      if ((*(_WORD *)(result + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result);
    }
    else
    {
      *(_DWORD *)(result + 24) -= 2;
    }
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF **v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  WTF::StringImpl **v24;
  int v25;
  unsigned int v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  WTF **v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl **v42;
  WTF::StringImpl **v43;
  WTF::StringImpl **v44;
  WTF::StringImpl **v45;
  WTF::StringImpl **v46;
  WTF::StringImpl **v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl **result;
  WTF::StringImpl **v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  uint64_t v63;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  v9 = a1;
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    v12 = v5;
    v63 = v5;
    do
    {
      v13 = (WTF::StringImpl **)(v4 + 24 * v10);
      v14 = *v13;
      if (*v13 != (WTF::StringImpl *)-1)
      {
        if (v14)
        {
          v20 = *v9;
          if (*v9)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = *((_DWORD *)v14 + 4);
          if (v22 < 0x100)
          {
            v24 = v11;
            v23 = WTF::StringImpl::hashSlowCase(v14);
            v12 = v63;
            v9 = a1;
            v11 = v24;
          }
          else
          {
            v23 = v22 >> 8;
          }
          v25 = 0;
          do
          {
            v26 = v23 & v21;
            v27 = (WTF::StringImpl **)(v20 + 24 * (v23 & v21));
            v23 = ++v25 + (v23 & v21);
          }
          while (*v27);
          v28 = v20 + 24 * v26;
          v31 = *(_DWORD *)(v28 + 20);
          v30 = (_DWORD *)(v28 + 20);
          v29 = v31;
          v32 = (WTF **)(v30 - 3);
          if (v31)
          {
            v52 = *v32;
            v53 = 8 * v29;
            do
            {
              v54 = *(_QWORD *)v52;
              *(_QWORD *)v52 = 0;
              if (v54)
              {
                if (*(_DWORD *)(v54 + 24) == 2)
                {
                  if ((*(_WORD *)(v54 + 30) & 0x400) == 0)
                  {
                    v61 = v53;
                    v62 = v11;
                    WebCore::Node::removedLastRef((WebCore::Node *)v54);
                    v53 = v61;
                    v11 = v62;
                    v12 = v63;
                    v9 = a1;
                  }
                }
                else
                {
                  *(_DWORD *)(v54 + 24) -= 2;
                }
              }
              v52 = (WTF *)((char *)v52 + 8);
              v53 -= 8;
            }
            while (v53);
          }
          v33 = *v32;
          if (*v32)
          {
            *v32 = 0;
            *(_DWORD *)(v20 + 24 * v26 + 16) = 0;
            v46 = v11;
            WTF::fastFree(v33, v8);
            v12 = v63;
            v9 = a1;
            v11 = v46;
          }
          v34 = *v27;
          *v27 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
            {
              v43 = v11;
              WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v8);
              v12 = v63;
              v9 = a1;
              v11 = v43;
            }
            else
            {
              *(_DWORD *)v34 -= 2;
            }
          }
          v35 = *v13;
          *v13 = 0;
          *v27 = v35;
          v36 = v4 + 24 * v10;
          *v32 = 0;
          *(_QWORD *)(v30 - 1) = 0;
          v38 = *(WTF **)(v36 + 8);
          v37 = v36 + 8;
          *(_QWORD *)v37 = 0;
          *v32 = v38;
          LODWORD(v35) = *(_DWORD *)(v37 + 8);
          *(_DWORD *)(v37 + 8) = 0;
          *(_DWORD *)(v20 + 24 * v26 + 16) = (_DWORD)v35;
          LODWORD(v35) = *(_DWORD *)(v37 + 12);
          *(_DWORD *)(v37 + 12) = 0;
          *v30 = (_DWORD)v35;
          v39 = *(unsigned int *)(v37 + 12);
          if ((_DWORD)v39)
          {
            v55 = *(uint64_t **)v37;
            v56 = 8 * v39;
            do
            {
              v57 = *v55;
              *v55 = 0;
              if (v57)
              {
                if (*(_DWORD *)(v57 + 24) == 2)
                {
                  if ((*(_WORD *)(v57 + 30) & 0x400) == 0)
                  {
                    v58 = v11;
                    WebCore::Node::removedLastRef((WebCore::Node *)v57);
                    v12 = v63;
                    v9 = a1;
                    v11 = v58;
                  }
                }
                else
                {
                  *(_DWORD *)(v57 + 24) -= 2;
                }
              }
              ++v55;
              v56 -= 8;
            }
            while (v56);
          }
          v40 = *(WTF **)v37;
          if (*(_QWORD *)v37)
          {
            *(_QWORD *)v37 = 0;
            *(_DWORD *)(v37 + 8) = 0;
            v47 = v11;
            WTF::fastFree(v40, v8);
            v12 = v63;
            v9 = a1;
            v11 = v47;
          }
          v41 = *v13;
          *v13 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
            {
              v44 = v11;
              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v8);
              v12 = v63;
              v9 = a1;
              v11 = v44;
            }
            else
            {
              *(_DWORD *)v41 -= 2;
            }
          }
          if (v13 == a3)
            v11 = v27;
        }
        else
        {
          v15 = v4 + 24 * v10;
          v16 = (WTF **)(v15 + 8);
          v17 = *(unsigned int *)(v15 + 20);
          if ((_DWORD)v17)
          {
            v48 = *v16;
            v49 = 8 * v17;
            do
            {
              v50 = *(_QWORD *)v48;
              *(_QWORD *)v48 = 0;
              if (v50)
              {
                if (*(_DWORD *)(v50 + 24) == 2)
                {
                  if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
                  {
                    v51 = v11;
                    WebCore::Node::removedLastRef((WebCore::Node *)v50);
                    v12 = v63;
                    v9 = a1;
                    v11 = v51;
                  }
                }
                else
                {
                  *(_DWORD *)(v50 + 24) -= 2;
                }
              }
              v48 = (WTF *)((char *)v48 + 8);
              v49 -= 8;
            }
            while (v49);
          }
          v18 = *v16;
          if (*v16)
          {
            *v16 = 0;
            *(_DWORD *)(v4 + 24 * v10 + 16) = 0;
            v45 = v11;
            WTF::fastFree(v18, v8);
            v12 = v63;
            v9 = a1;
            v11 = v45;
          }
          v19 = *v13;
          *v13 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
            {
              v42 = v11;
              WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v8);
              v12 = v63;
              v9 = a1;
              v11 = v42;
            }
            else
            {
              *(_DWORD *)v19 -= 2;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v12);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  v60 = v11;
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v60;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashMap<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  WTF **v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  WTF **v28;
  WTF *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *result;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v52;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v49 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      if (*v12 != -1)
      {
        if (*v12)
        {
          v18 = *a1;
          v52 = v10;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = WTF::IdentityHashTranslator<WTF::HashMap<JSC::JSObject *,unsigned int,WTF::DefaultHash<JSC::JSObject *>,WTF::HashTraits<JSC::JSObject *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<JSC::JSObject *>>::hash<JSC::JSObject *>((_QWORD *)(v4 + 24 * v9));
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = (_QWORD *)(v18 + 24 * (v20 & v19));
            v20 = ++v21 + (v20 & v19);
          }
          while (*v23);
          v24 = v18 + 24 * v22;
          v27 = *(_DWORD *)(v24 + 20);
          v26 = (_DWORD *)(v24 + 20);
          v25 = v27;
          v28 = (WTF **)(v26 - 3);
          if (v27)
          {
            v41 = *v28;
            v42 = 8 * v25;
            do
            {
              v43 = *(_QWORD *)v41;
              *(_QWORD *)v41 = 0;
              if (v43)
              {
                if (*(_DWORD *)(v43 + 24) == 2)
                {
                  if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
                  {
                    v48 = v42;
                    WebCore::Node::removedLastRef((WebCore::Node *)v43);
                    v42 = v48;
                  }
                }
                else
                {
                  *(_DWORD *)(v43 + 24) -= 2;
                }
              }
              v41 = (WTF *)((char *)v41 + 8);
              v42 -= 8;
            }
            while (v42);
          }
          v29 = *v28;
          if (*v28)
          {
            *v28 = 0;
            *(_DWORD *)(v18 + 24 * v22 + 16) = 0;
            WTF::fastFree(v29, v8);
          }
          v30 = *v23;
          *v23 = 0;
          if (v30)
          {
            if (*(_DWORD *)(v30 + 24) == 2)
            {
              if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v30);
            }
            else
            {
              *(_DWORD *)(v30 + 24) -= 2;
            }
          }
          v31 = *v12;
          *v12 = 0;
          *v23 = v31;
          v32 = v4 + 24 * v9;
          *v28 = 0;
          *(_QWORD *)(v26 - 1) = 0;
          v34 = *(WTF **)(v32 + 8);
          v33 = v32 + 8;
          *(_QWORD *)v33 = 0;
          *v28 = v34;
          LODWORD(v31) = *(_DWORD *)(v33 + 8);
          *(_DWORD *)(v33 + 8) = 0;
          *(_DWORD *)(v18 + 24 * v22 + 16) = v31;
          LODWORD(v31) = *(_DWORD *)(v33 + 12);
          *(_DWORD *)(v33 + 12) = 0;
          *v26 = v31;
          v35 = *(unsigned int *)(v33 + 12);
          if ((_DWORD)v35)
          {
            v44 = *(uint64_t **)v33;
            v45 = 8 * v35;
            do
            {
              v46 = *v44;
              *v44 = 0;
              if (v46)
              {
                if (*(_DWORD *)(v46 + 24) == 2)
                {
                  if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v46);
                }
                else
                {
                  *(_DWORD *)(v46 + 24) -= 2;
                }
              }
              ++v44;
              v45 -= 8;
            }
            while (v45);
          }
          v36 = *(WTF **)v33;
          if (*(_QWORD *)v33)
          {
            *(_QWORD *)v33 = 0;
            *(_DWORD *)(v33 + 8) = 0;
            WTF::fastFree(v36, v8);
          }
          v37 = *v12;
          *v12 = 0;
          if (v37)
          {
            if (*(_DWORD *)(v37 + 24) == 2)
            {
              if ((*(_WORD *)(v37 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v37);
            }
            else
            {
              *(_DWORD *)(v37 + 24) -= 2;
            }
          }
          v10 = v52;
          if (v12 == a3)
            v10 = v23;
          v11 = v49;
        }
        else
        {
          v13 = v4 + 24 * v9;
          v14 = (WTF **)(v13 + 8);
          v15 = *(unsigned int *)(v13 + 20);
          if ((_DWORD)v15)
          {
            v38 = *v14;
            v39 = 8 * v15;
            do
            {
              v40 = *(_QWORD *)v38;
              *(_QWORD *)v38 = 0;
              if (v40)
              {
                if (*(_DWORD *)(v40 + 24) == 2)
                {
                  if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v40);
                }
                else
                {
                  *(_DWORD *)(v40 + 24) -= 2;
                }
              }
              v38 = (WTF *)((char *)v38 + 8);
              v39 -= 8;
            }
            while (v39);
          }
          v16 = *v14;
          if (*v14)
          {
            *v14 = 0;
            *(_DWORD *)(v4 + 24 * v9 + 16) = 0;
            WTF::fastFree(v16, v8);
          }
          v17 = *v12;
          *v12 = 0;
          if (v17)
          {
            if (*(_DWORD *)(v17 + 24) == 2)
            {
              if ((*(_WORD *)(v17 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v17);
            }
            else
            {
              *(_DWORD *)(v17 + 24) -= 2;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::RefCounted<WebCore::AnimationList>::deref(uint64_t this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::Animation **v4;
  uint64_t v5;
  WebCore::Animation *v6;
  WTF *v7;
  WTF *v8;
  void *v9;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = *(unsigned int *)(this + 20);
    if ((_DWORD)v3)
    {
      v4 = *(WebCore::Animation ***)(this + 8);
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 1)
          {
            WebCore::Animation::~Animation(v6, a2);
            WTF::fastFree(v8, v9);
          }
          else
          {
            --*(_DWORD *)v6;
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    v7 = *(WTF **)(v2 + 8);
    if (v7)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(v7, a2);
    }
    return WTF::fastFree((WTF *)v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::CSSAnimation *>(uint64_t a1, unsigned int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  WTF::Vector<WTF::WeakPtr<WebCore::StyleOriginatedAnimation,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  result = *a2;
  if (*a2)
  {
    v9 = *(_QWORD *)a1;
    v7 = *(unsigned int *)(a1 + 12);
    result = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)result);
    if (result)
    {
      do
        v8 = __ldaxr(result);
      while (__stlxr(v8 + 1, result));
    }
    v4 = v7;
    v5 = v9;
  }
  *(_QWORD *)(v5 + 8 * v4) = result;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t *WTF::ListHashSet<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>::remove(uint64_t *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;

  if (a3)
  {
    v4 = (uint64_t)result;
    v5 = a3;
    WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::remove(result, &v5);
    return (uint64_t *)WTF::ListHashSet<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>::unlinkAndDelete(v4, (WTF *)a3);
  }
  return result;
}

uint64_t *WTF::ListHashSet<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>::find(uint64_t *a1, uint64_t *a2)
{
  WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>(a1, a2);
  return a1;
}

uint64_t *WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::remove(uint64_t *a1, uint64_t **a2)
{
  uint64_t *result;
  uint64_t v4;

  result = (uint64_t *)WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>>,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>(a1, a2);
  v4 = *a1;
  if (*a1)
    v4 += 8 * *(unsigned int *)(v4 - 4);
  if ((uint64_t *)v4 != result)
    return WTF::HashTable<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::RefPtr<WebCore::PerformanceObserver,WTF::RawPtrTraits<WebCore::PerformanceObserver>,WTF::DefaultRefDerefTraits<WebCore::PerformanceObserver>>> *>>::remove(a1, result);
  return result;
}

uint64_t WTF::ListHashSet<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>,WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>::unlinkAndDelete(uint64_t a1, WTF *this)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  if (v3)
  {
    *(_QWORD *)(v3 + 16) = v4;
    v4 = *((_QWORD *)this + 2);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
  }
  if (v4)
    v5 = (_QWORD *)(v4 + 8);
  else
    v5 = (_QWORD *)(a1 + 16);
  *v5 = v3;
  v6 = *(_DWORD **)this;
  *(_QWORD *)this = 0;
  if (v6)
  {
    if (v6[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 72))(v6);
    else
      --v6[6];
  }
  return WTF::fastFree(this, this);
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>>,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>(uint64_t *a1, uint64_t **a2)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>>,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>(result, a2);
    if (!result)
    {
      if (*a1)
        return *a1 + 8 * *(unsigned int *)(*a1 - 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>>,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>(uint64_t result, uint64_t **a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int i;
  uint64_t v7;
  _QWORD *v8;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(**a2);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = *(_QWORD **)(v3 + 8 * v7);
      if (!v8)
        break;
      if (v8 != (_QWORD *)-1 && *v8 == **a2)
        return v3 + 8 * v7;
      ++i;
    }
    return 0;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::find<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;

  result = *a1;
  if (result)
  {
    result = WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::lookup<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>(result, a2);
    if (!result)
    {
      if (*a1)
        return *a1 + 8 * *(unsigned int *)(*a1 - 4);
      else
        return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>> *>>::lookup<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>>,WTF::Ref<WebCore::CSSAnimation,WTF::RawPtrTraits<WebCore::CSSAnimation>,WTF::DefaultRefDerefTraits<WebCore::CSSAnimation>>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int i;
  uint64_t v7;
  _QWORD *v8;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(*a2);
    for (i = 0; ; v5 = i + v7)
    {
      v7 = v5 & v4;
      v8 = *(_QWORD **)(v3 + 8 * v7);
      if (!v8)
        break;
      if (v8 != (_QWORD *)-1 && *v8 == *a2)
        return v3 + 8 * v7;
      ++i;
    }
    return 0;
  }
  return result;
}

WebCore::Style::RuleSet **WTF::Ref<WebCore::Style::RuleSet,WTF::RawPtrTraits<WebCore::Style::RuleSet>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet>>::~Ref(WebCore::Style::RuleSet **a1, void *a2)
{
  WebCore::Style::RuleSet *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::Style::RuleSet::~RuleSet(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

_WORD *WTF::makeString<std::span<char const,36288ul>,WTF::String>(_WORD *result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  uint64_t v8;
  __int128 v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int8x16_t *v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  __int128 v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int16 v28;
  size_t v29;
  _WORD *v30;
  _WORD *v31;
  unsigned __int128 v32;
  char v33;
  uint64_t v34;
  int8x16x2_t v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;
  int8x16x2_t v40;

  v3 = result;
  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 < 0)
      goto LABEL_37;
    v5 = (v4 + 36288);
    if (__OFADD__(v4, 36288))
      goto LABEL_37;
    if ((*(_BYTE *)(a2 + 16) & 4) == 0)
    {
      if (v5 <= 0x7FFFFFEF)
      {
        result = (_WORD *)WTF::tryFastCompactMalloc((WTF *)(2 * v5 + 20));
        v6 = v34;
        if (v34)
        {
          *(_DWORD *)v34 = 2;
          *(_DWORD *)(v34 + 4) = v5;
          *(_QWORD *)(v34 + 8) = v34 + 20;
          *(_DWORD *)(v34 + 16) = 0;
          result = (_WORD *)(v34 + 72596);
          v7 = (int8x16_t *)&WebCore::htmlUserAgentStyleSheet;
          v8 = 20;
          v9 = 0uLL;
          do
          {
            v35.val[0] = *v7;
            v10 = v7[1];
            v37.val[0] = v7[2];
            v11 = v7[3];
            v7 += 4;
            v12 = v11;
            v37.val[1] = 0uLL;
            v39.val[0] = v10;
            v35.val[1] = 0uLL;
            v13 = (char *)(v34 + v8);
            vst2q_s8(v13, v35);
            v13 += 32;
            v14 = (char *)(v34 + v8 + 64);
            v39.val[1] = 0uLL;
            vst2q_s8(v13, v39);
            v15 = (char *)(v34 + v8 + 96);
            v16 = v34 + v8 + 128;
            vst2q_s8(v14, v37);
            vst2q_s8(v15, *(int8x16x2_t *)(&v9 - 1));
            v8 += 128;
          }
          while ((_WORD *)v16 != result);
          v17 = *(int8x16_t **)(a2 + 8);
          v18 = *(unsigned int *)(a2 + 4);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          {
            v19 = &result[v18];
            if (v18 >= 0x40)
            {
              v20 = &result[v18 & 0xFFFFFFC0];
              v21 = 0uLL;
              do
              {
                v36.val[0] = *v17;
                v22 = v17[1];
                v38.val[0] = v17[2];
                v23 = v17[3];
                v17 += 4;
                v24 = v23;
                v38.val[1] = 0uLL;
                v40.val[0] = v22;
                v36.val[1] = 0uLL;
                v25 = (char *)result;
                vst2q_s8(v25, v36);
                v25 += 32;
                v40.val[1] = 0uLL;
                vst2q_s8(v25, v40);
                v26 = (char *)(result + 32);
                vst2q_s8(v26, v38);
                v27 = (char *)(result + 48);
                vst2q_s8(v27, *(int8x16x2_t *)(&v21 - 1));
                result += 64;
              }
              while (result != v20);
              result = v20;
            }
            while (result != v19)
            {
              v28 = v17->u8[0];
              v17 = (int8x16_t *)((char *)v17 + 1);
              *result++ = v28;
            }
            goto LABEL_26;
          }
          if ((_DWORD)v18 == 1)
          {
            *result = v17->i16[0];
            goto LABEL_26;
          }
          if (!(_DWORD)v18)
            goto LABEL_26;
          v29 = 2 * v18;
          goto LABEL_25;
        }
      }
      goto LABEL_37;
    }
  }
  else
  {
    v5 = 36288;
  }
  result = (_WORD *)WTF::tryFastCompactMalloc((WTF *)(v5 + 20));
  v6 = v34;
  if (v34)
  {
    *(_DWORD *)v34 = 2;
    *(_DWORD *)(v34 + 4) = v5;
    *(_QWORD *)(v34 + 8) = v34 + 20;
    *(_DWORD *)(v34 + 16) = 4;
    result = memcpy((void *)(v34 + 20), &WebCore::htmlUserAgentStyleSheet, 0x8DC0uLL);
    if (!a2)
      goto LABEL_26;
    result = (_WORD *)(v34 + 36308);
    v17 = *(int8x16_t **)(a2 + 8);
    v29 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) == 0)
    {
      v30 = (_WORD *)((char *)result + v29);
      if (v29 >= 0x10)
      {
        v31 = (_WORD *)((char *)result + (v29 & 0xFFFFFFF0));
        do
        {
          v32 = (unsigned __int128)vld2q_s8(v17->i8);
          v17 += 2;
          *(_OWORD *)result = v32;
          result += 8;
        }
        while (result != v31);
        result = v31;
      }
      while (result != v30)
      {
        v33 = v17->i8[0];
        v17 = (int8x16_t *)((char *)v17 + 2);
        *(_BYTE *)result = v33;
        result = (_WORD *)((char *)result + 1);
      }
      goto LABEL_26;
    }
    if (!(_DWORD)v29)
    {
LABEL_26:
      *v3 = v6;
      return result;
    }
    if ((_DWORD)v29 == 1)
    {
      *(_BYTE *)result = v17->i8[0];
      goto LABEL_26;
    }
LABEL_25:
    result = memcpy(result, v17, v29);
    goto LABEL_26;
  }
LABEL_37:
  *v3 = 0;
  __break(0xC471u);
  return result;
}

_WORD *WTF::makeString<std::span<char const,408ul>,WTF::String>(_WORD *result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  int8x16_t *v31;
  uint64_t v32;
  _WORD *v33;
  _WORD *v34;
  __int128 v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int16 v42;
  size_t v43;
  _WORD *v44;
  _WORD *v45;
  unsigned __int128 v46;
  char v47;
  uint64_t v48;
  int8x16x2_t v49;
  int8x16x2_t v50;
  int8x16x2_t v51;
  int8x16x2_t v52;
  int8x16x2_t v53;
  int8x16x2_t v54;
  int8x16x2_t v55;

  v3 = result;
  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 4);
    if (v4 < 0)
      goto LABEL_35;
    v5 = (v4 + 408);
    if (__OFADD__(v4, 408))
      goto LABEL_35;
    if ((*(_BYTE *)(a2 + 16) & 4) == 0)
    {
      if (v5 <= 0x7FFFFFEF)
      {
        result = (_WORD *)WTF::tryFastCompactMalloc((WTF *)(2 * v5 + 20));
        v6 = v48;
        if (v48)
        {
          v7 = (char *)(v48 + 20);
          *(_DWORD *)v48 = 2;
          *(_DWORD *)(v48 + 4) = v5;
          *(_QWORD *)(v48 + 8) = v48 + 20;
          *(_DWORD *)(v48 + 16) = 0;
          v50.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[0];
          v52.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[2];
          v49.val[1] = 0uLL;
          v49.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[3];
          v52.val[1] = 0u;
          v54.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[1];
          v50.val[1] = 0u;
          vst2q_s8(v7, v50);
          v54.val[1] = 0u;
          v8 = (char *)(v48 + 52);
          vst2q_s8(v8, v54);
          v9 = (char *)(v48 + 84);
          vst2q_s8(v9, v52);
          v10 = (char *)(v48 + 116);
          vst2q_s8(v10, v49);
          v11 = (char *)(v48 + 148);
          v50.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[4];
          v52.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[6];
          v49.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[7];
          v52.val[1] = 0u;
          v54.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[5];
          v50.val[1] = 0u;
          vst2q_s8(v11, v50);
          v54.val[1] = 0u;
          v12 = (char *)(v48 + 180);
          vst2q_s8(v12, v54);
          v13 = (char *)(v48 + 212);
          vst2q_s8(v13, v52);
          v14 = (char *)(v48 + 244);
          vst2q_s8(v14, v49);
          v15 = (char *)(v48 + 276);
          v50.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[8];
          v52.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[10];
          v49.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[11];
          v52.val[1] = 0u;
          v54.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[9];
          v50.val[1] = 0u;
          vst2q_s8(v15, v50);
          v54.val[1] = 0u;
          v16 = (char *)(v48 + 308);
          vst2q_s8(v16, v54);
          v17 = (char *)(v48 + 340);
          vst2q_s8(v17, v52);
          v18 = (char *)(v48 + 372);
          vst2q_s8(v18, v49);
          v19 = (char *)(v48 + 404);
          v50.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[12];
          v52.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[14];
          v49.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[15];
          v52.val[1] = 0u;
          v54.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[13];
          v50.val[1] = 0u;
          vst2q_s8(v19, v50);
          v54.val[1] = 0u;
          v20 = (char *)(v48 + 436);
          vst2q_s8(v20, v54);
          v21 = (char *)(v48 + 468);
          vst2q_s8(v21, v52);
          v22 = (char *)(v48 + 500);
          vst2q_s8(v22, v49);
          v23 = (char *)(v48 + 532);
          v50.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[16];
          v52.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[18];
          v49.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[19];
          v52.val[1] = 0u;
          v54.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[17];
          v50.val[1] = 0u;
          vst2q_s8(v23, v50);
          v54.val[1] = 0u;
          v24 = (char *)(v48 + 564);
          vst2q_s8(v24, v54);
          v25 = (char *)(v48 + 596);
          vst2q_s8(v25, v52);
          v26 = (char *)(v48 + 628);
          vst2q_s8(v26, v49);
          v27 = (char *)(v48 + 660);
          v50.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[20];
          v52.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[22];
          v49.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[23];
          v52.val[1] = 0u;
          v54.val[0] = (int8x16_t)WebCore::quirksUserAgentStyleSheet[21];
          v50.val[1] = 0u;
          vst2q_s8(v27, v50);
          v54.val[1] = 0u;
          v28 = (char *)(v48 + 692);
          vst2q_s8(v28, v54);
          v29 = (char *)(v48 + 724);
          vst2q_s8(v29, v52);
          v30 = (char *)(v48 + 756);
          vst2q_s8(v30, v49);
          result = (_WORD *)(v48 + 836);
          *(_OWORD *)(v48 + 788) = xmmword_1969FE5C0;
          *(_OWORD *)(v48 + 804) = xmmword_1969FE5D0;
          *(_OWORD *)(v48 + 820) = xmmword_1969FE5E0;
          v31 = *(int8x16_t **)(a2 + 8);
          v32 = *(unsigned int *)(a2 + 4);
          if ((*(_BYTE *)(a2 + 16) & 4) != 0)
          {
            v33 = &result[v32];
            if (v32 >= 0x40)
            {
              v34 = &result[v32 & 0xFFFFFFC0];
              v35 = 0uLL;
              do
              {
                v51.val[0] = *v31;
                v36 = v31[1];
                v53.val[0] = v31[2];
                v37 = v31[3];
                v31 += 4;
                v38 = v37;
                v53.val[1] = 0uLL;
                v55.val[0] = v36;
                v51.val[1] = 0uLL;
                v39 = (char *)result;
                vst2q_s8(v39, v51);
                v39 += 32;
                v55.val[1] = 0uLL;
                vst2q_s8(v39, v55);
                v40 = (char *)(result + 32);
                vst2q_s8(v40, v53);
                v41 = (char *)(result + 48);
                vst2q_s8(v41, *(int8x16x2_t *)(&v35 - 1));
                result += 64;
              }
              while (result != v34);
              result = v34;
            }
            while (result != v33)
            {
              v42 = v31->u8[0];
              v31 = (int8x16_t *)((char *)v31 + 1);
              *result++ = v42;
            }
            goto LABEL_24;
          }
          if ((_DWORD)v32 == 1)
          {
            *result = v31->i16[0];
            goto LABEL_24;
          }
          if (!(_DWORD)v32)
            goto LABEL_24;
          v43 = 2 * v32;
          goto LABEL_23;
        }
      }
      goto LABEL_35;
    }
  }
  else
  {
    v5 = 408;
  }
  result = (_WORD *)WTF::tryFastCompactMalloc((WTF *)(v5 + 20));
  v6 = v48;
  if (v48)
  {
    *(_DWORD *)v48 = 2;
    *(_DWORD *)(v48 + 4) = v5;
    *(_QWORD *)(v48 + 8) = v48 + 20;
    *(_DWORD *)(v48 + 16) = 4;
    result = memcpy((void *)(v48 + 20), WebCore::quirksUserAgentStyleSheet, 0x198uLL);
    if (!a2)
      goto LABEL_24;
    result = (_WORD *)(v48 + 428);
    v31 = *(int8x16_t **)(a2 + 8);
    v43 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) == 0)
    {
      v44 = (_WORD *)((char *)result + v43);
      if (v43 >= 0x10)
      {
        v45 = (_WORD *)((char *)result + (v43 & 0xFFFFFFF0));
        do
        {
          v46 = (unsigned __int128)vld2q_s8(v31->i8);
          v31 += 2;
          *(_OWORD *)result = v46;
          result += 8;
        }
        while (result != v45);
        result = v45;
      }
      while (result != v44)
      {
        v47 = v31->i8[0];
        v31 = (int8x16_t *)((char *)v31 + 2);
        *(_BYTE *)result = v47;
        result = (_WORD *)((char *)result + 1);
      }
      goto LABEL_24;
    }
    if (!(_DWORD)v43)
    {
LABEL_24:
      *v3 = v6;
      return result;
    }
    if ((_DWORD)v43 == 1)
    {
      *(_BYTE *)result = v31->i8[0];
      goto LABEL_24;
    }
LABEL_23:
    result = memcpy(result, v31, v43);
    goto LABEL_24;
  }
LABEL_35:
  *v3 = 0;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::Style::addToCounterStyleRegistry(WebCore::Style *this, WebCore::StyleSheetContents *a2)
{
  WebCore::Style *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  const WebCore::CSSCounterStyleDescriptors *v6;
  uint64_t v7;
  void *v8;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WebCore::CSSCounterStyle *v13;

  if ((_DWORD)a2)
  {
    v2 = this;
    v3 = 8 * a2;
    do
    {
      v4 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v5 = (*(_BYTE *)(*(_QWORD *)v2 + 4) & 0x1F) == 11;
      else
        v5 = 0;
      if (v5)
      {
        {
          WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters = 0;
        }
        v6 = (const WebCore::CSSCounterStyleDescriptors *)(v4 + 16);
        v7 = WTF::fastMalloc((WTF *)0xF0);
        *(_DWORD *)v7 = 1;
        *(_QWORD *)(v7 + 8) = 0;
        WebCore::CSSCounterStyleDescriptors::CSSCounterStyleDescriptors((WebCore::CSSCounterStyleDescriptors *)(v7 + 16), v6);
        *(_BYTE *)(v7 + 200) = 1;
        *(_QWORD *)(v7 + 216) = 0;
        *(_QWORD *)(v7 + 224) = 0;
        *(_QWORD *)(v7 + 208) = 0;
        *(_WORD *)(v7 + 232) = 256;
        v13 = (WebCore::CSSCounterStyle *)v7;
        WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>,WTF::HashTableTraits>::inlineSet<WTF::AtomString const&,WTF::Ref<WebCore::CSSCounterStyle,WTF::RawPtrTraits<WebCore::CSSCounterStyle>,WTF::DefaultRefDerefTraits<WebCore::CSSCounterStyle>>>(&WebCore::CSSCounterStyleRegistry::userAgentCounterStyles(void)::counters, (WTF::StringImpl **)v6, &v13, (uint64_t)&v12);
        this = v13;
        v13 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 1)
          {
            WebCore::CSSCounterStyle::~CSSCounterStyle(this, v8);
            this = (WebCore::Style *)WTF::fastFree(v10, v11);
          }
          else
          {
            --*(_DWORD *)this;
          }
        }
      }
      v2 = (WebCore::Style *)((char *)v2 + 8);
      v3 -= 8;
    }
    while (v3);
  }
  return WebCore::CSSCounterStyleRegistry::resolveUserAgentReferences(this);
}

_DWORD *WebCore::Style::addUserAgentKeyframes(_DWORD *this, WebCore::StyleSheetContents *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  BOOL v5;
  WTF::StringImpl *v6;
  _DWORD *v7;

  if ((_DWORD)a2)
  {
    v2 = this;
    v3 = 8 * a2;
    do
    {
      v4 = *(_DWORD **)v2;
      if (*(_QWORD *)v2)
        v5 = (*(_BYTE *)(*(_QWORD *)v2 + 4) & 0x1F) == 7;
      else
        v5 = 0;
      if (v5)
      {
        ++*v4;
        v7 = v4;
        WebCore::Style::Resolver::addUserAgentKeyframeStyle((WTF::StringImpl *)&v7);
        this = v7;
        v7 = 0;
        if (this)
        {
          if (*this == 1)
            this = (_DWORD *)WebCore::StyleRuleBase::visitDerived<WebCore::StyleRuleBase::operator delete(WebCore::StyleRuleBase*,std::destroying_delete_t)::$_0>((uint64_t)this, v6);
          else
            --*this;
        }
      }
      v2 += 2;
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t WebCore::DocumentSVG::rootElement@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(this + 1272);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 0x20) != 0
      && *(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) == *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      *(_DWORD *)(v3 + 24) += 2;
    }
    else
    {
      v3 = 0;
    }
  }
  *a2 = v3;
  return this;
}

void WebCore::SVGAElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char **v16;
  char *v17;

  v6 = bmalloc::api::isoAllocate();
  *(_QWORD *)v6 = off_1E34508B0;
  *(_QWORD *)(v6 + 112) = &unk_1E3450E20;
  *(_QWORD *)(v6 + 176) = &unk_1E3450E58;
  *(_QWORD *)(v6 + 216) = &unk_1E3450EB0;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3451530;
  *((_QWORD *)v7 + 1) = v6;
  v17 = v7;
  WebCore::SVGGraphicsElement::SVGGraphicsElement(v6, a1, a2, (uint64_t *)&v17, 0);
  v8 = (uint64_t)v17;
  v17 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *(_QWORD *)v6 = off_1E34508B0;
  *(_QWORD *)(v6 + 112) = &unk_1E3450E20;
  *(_QWORD *)(v6 + 176) = &unk_1E3450E58;
  *(_QWORD *)(v6 + 216) = &off_1E3452C78;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  *(_QWORD *)(v6 + 224) = v9;
  v11 = atomic_load(&WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::onceFlag);
  if (v11 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::onceFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::$_0 &&>>);
  }
  *(_QWORD *)v6 = off_1E34508B0;
  *(_QWORD *)(v6 + 112) = &unk_1E3450E20;
  *(_QWORD *)(v6 + 176) = &unk_1E3450E58;
  *(_QWORD *)(v6 + 216) = &unk_1E3450EB0;
  v12 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = v6;
  *(_QWORD *)v12 = &off_1E3452E28;
  v13 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)(v13 + 16) = 0;
  *(_WORD *)(v13 + 24) = 0;
  *(_QWORD *)v13 = &off_1E3452EA8;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v12 + 40) = v13;
  *(_QWORD *)(v12 + 48) = 0;
  *(_QWORD *)v12 = off_1E347BDB8;
  *(_QWORD *)(v6 + 232) = v12;
  *(_BYTE *)(v6 + 240) = 0;
  *(_BYTE *)(v6 + 244) = 0;
  *(_QWORD *)(v6 + 248) = 0;
  v14 = atomic_load(&WebCore::SVGAElement::SVGAElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag);
  if (v14 != -1)
  {
    v17 = &v15;
    v16 = &v17;
    std::__call_once(&WebCore::SVGAElement::SVGAElement(WebCore::QualifiedName const&,WebCore::Document &)::onceFlag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGAElement::SVGAElement(WebCore::QualifiedName const&,WebCore::Document &)::{lambda(void)#1} &&>>);
  }
  *a3 = v6;
}

unsigned int *WebCore::SVGAElement::title@<X0>(unsigned int *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;

  v2 = *((_QWORD *)this + 13);
  if (!v2)
    goto LABEL_12;
  v3 = *(_DWORD *)(v2 + 4);
  if ((v3 & 1) == 0)
  {
    v4 = v2 + 32;
    LODWORD(v5) = v3 >> 5;
    if ((_DWORD)v5)
      goto LABEL_4;
LABEL_12:
    v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 40);
  LODWORD(v5) = *(_DWORD *)(v2 + 52);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_4:
  v5 = v5;
  v6 = (WTF::StringImpl **)(v4 + 8);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 1);
    if (v7 == WebCore::XLinkNames::titleAttr
      || *(_QWORD *)(v7 + 24) == *(_QWORD *)(WebCore::XLinkNames::titleAttr + 24)
      && *(_QWORD *)(v7 + 32) == *(_QWORD *)(WebCore::XLinkNames::titleAttr + 32))
    {
      break;
    }
    v6 += 2;
    if (!--v5)
    {
      v6 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v8 = *v6;
  if (!v8 || !*((_DWORD *)v8 + 1))
    return WebCore::SVGElement::title(this, a2);
  *(_DWORD *)v8 += 2;
  *a2 = v8;
  return this;
}

WTF::StringImpl *WebCore::SVGAElement::attributeChanged(uint64_t a1, WTF::StringImpl *a2, WTF::AtomString *a3, const WTF::AtomString *a4, int a5, __n128 a6)
{
  uint64_t v11;
  __n128 v12;
  WTF::StringImpl *result;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;

  if (*(_QWORD *)a2 == WebCore::SVGNames::targetAttr)
  {
    v14 = *(_QWORD *)(a1 + 232);
    v15 = *(_DWORD *)(v14 + 8);
    *(_DWORD *)(v14 + 8) = v15 + 1;
    v16 = *(_QWORD *)(v14 + 40);
    v17 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v17 += 2;
    result = *(WTF::StringImpl **)(v16 + 32);
    *(_QWORD *)(v16 + 32) = v17;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        v15 = *(_DWORD *)(v14 + 8) - 1;
        if (*(_DWORD *)(v14 + 8) != 1)
          goto LABEL_13;
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
      *(_DWORD *)result -= 2;
    }
    if (v15)
    {
LABEL_13:
      *(_DWORD *)(v14 + 8) = v15;
      return result;
    }
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (*(_QWORD *)a2 == WebCore::SVGNames::relAttr)
  {
    v11 = *(_QWORD *)(a1 + 248);
    if (v11)
    {
      if (!*(_BYTE *)(v11 + 16))
        *(_BYTE *)(v11 + 17) = 1;
    }
  }
  WebCore::SVGURIReference::parseAttribute(a1 + 216, a2, a4, a4, a6);
  return (WTF::StringImpl *)WebCore::SVGGraphicsElement::attributeChanged(a1, a2, a3, a4, a5, v12);
}

uint64_t *WebCore::SVGAElement::svgAttributeChanged(WebCore::SVGAElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  WTF::StringImpl ***v4;
  WTF::StringImpl ***v5;
  uint64_t *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;
  void *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  WTF *v29;
  uint64_t *v30;
  uint64_t v31;

  {
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_40;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v4 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v5)
      goto LABEL_6;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v5 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_40:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_6:
  {
    if (v4)
      v4 += 2 * *((unsigned int *)v4 - 1);
  }
  else
  {
    v4 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v4 == v5 || !v5[1])
    return WebCore::SVGGraphicsElement::svgAttributeChanged(this, a2);
  if ((*((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = this;
    *(_BYTE *)(v7 + 32) = 0;
    v8 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v8 & 0xFFFF000000000000 | v7;
    v9 = v8 & 0xFFFFFFFFFFFFLL;
    if ((v8 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v10 = __ldaxr((unsigned int *)v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)v9));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)v9);
        v28 = *(unsigned int *)(v9 + 28);
        if ((_DWORD)v28)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v9 + 16), (WTF::StringImpl *)(*(_QWORD *)(v9 + 16) + 32 * v28));
        v29 = *(WTF **)(v9 + 16);
        if (v29)
        {
          *(_QWORD *)(v9 + 16) = 0;
          *(_DWORD *)(v9 + 24) = 0;
          WTF::fastFree(v29, a2);
        }
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  v12 = *((_QWORD *)this + 2) & 0xFFFFFFFFFFFFLL;
  do
    v13 = __ldaxr((unsigned int *)v12);
  while (__stlxr(v13 + 1, (unsigned int *)v12));
  v14 = *((_QWORD *)this + 28);
  v15 = *(_QWORD *)(v14 + 24);
  if (!v15 || !*(_DWORD *)(v15 - 12))
    goto LABEL_19;
  v23 = *(unsigned int *)(v15 - 4);
  if ((_DWORD)v23)
  {
    v24 = 8 * v23;
    v25 = *(uint64_t **)(v14 + 24);
    while ((unint64_t)(*v25 + 1) <= 1)
    {
      ++v25;
      v24 -= 8;
      if (!v24)
        goto LABEL_19;
    }
  }
  else
  {
    v25 = *(uint64_t **)(v14 + 24);
  }
  v30 = (uint64_t *)(v15 + 8 * v23);
  if (v25 == v30)
    goto LABEL_19;
  v31 = *v25;
LABEL_51:
  if (!*(_QWORD *)(v31 + 8))
  {
    while (++v25 != v30)
    {
      v31 = *v25;
      if ((unint64_t)(*v25 + 1) > 1)
      {
        if (v25 != v30)
          goto LABEL_51;
        break;
      }
    }
LABEL_19:
    v16 = v14 + 40;
    goto LABEL_20;
  }
  v16 = v14 + 48;
LABEL_20:
  v17 = *(WTF::StringImpl **)(*(_QWORD *)v16 + 32);
  if (v17)
  {
    *(_DWORD *)v17 += 2;
    v18 = WebCore::isInSVGImage(this, (const WebCore::Element *)a2);
    WebCore::Element::setIsLink((unsigned __int8 *)this, (void *)(v18 ^ 1u));
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v19);
    else
      *(_DWORD *)v17 -= 2;
  }
  else
  {
    WebCore::Element::setIsLink((unsigned __int8 *)this, 0);
  }
  result = WebCore::SVGElement::invalidateInstances(*(_QWORD **)(v12 + 8), v19);
  do
  {
    v21 = __ldaxr((unsigned int *)v12);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v12));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v12);
    v26 = *(unsigned int *)(v12 + 28);
    if ((_DWORD)v26)
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v12 + 16), (WTF::StringImpl *)(*(_QWORD *)(v12 + 16) + 32 * v26));
    v27 = *(WTF **)(v12 + 16);
    if (v27)
    {
      *(_QWORD *)(v12 + 16) = 0;
      *(_DWORD *)(v12 + 24) = 0;
      WTF::fastFree(v27, v20);
    }
    return (uint64_t *)WTF::fastFree((WTF *)v12, v20);
  }
  return result;
}

unsigned int *WebCore::SVGAElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  unsigned int *result;
  void *v10;
  uint64_t v11;
  int32x4_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    goto LABEL_4;
  if ((*(_WORD *)(v6 + 28) & 0x20) == 0)
  {
    v6 = 0;
LABEL_4:
    v7 = 1;
    goto LABEL_8;
  }
  *(_DWORD *)(v6 + 24) += 2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 1216))(v6))
  {
    v8 = bmalloc::api::isoAllocate();
    result = (unsigned int *)WebCore::RenderLayerModelObject::RenderLayerModelObject(v8, 71, a1, a2, 40, 0);
    *((_QWORD *)result + 19) = 0;
    *((_QWORD *)result + 20) = 0;
    result[5] |= 0x40000u;
    *(_QWORD *)result = off_1E3444728;
    *a3 = result;
LABEL_12:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v6, v10);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
    return result;
  }
  v7 = 0;
LABEL_8:
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    v13 = bmalloc::api::isoAllocate();
    result = (unsigned int *)WebCore::RenderLayerModelObject::RenderLayerModelObject(v13, 87, a1, a2, 0, 516);
    *(_OWORD *)(result + 47) = 0u;
    *(_OWORD *)(result + 43) = 0u;
    *((_QWORD *)result + 19) = 0;
    *((_QWORD *)result + 20) = 0;
    *(unsigned int *)((char *)result + 167) = 0;
    *(int32x4_t *)(result + 51) = vdupq_n_s32(0x7FC00000u);
    *(_QWORD *)result = off_1E34494D8;
    *((_OWORD *)result + 14) = constinit_3;
    *((_OWORD *)result + 15) = unk_1969FE0D0;
    *((_OWORD *)result + 16) = xmmword_1969FE0E0;
  }
  else
  {
    v11 = bmalloc::api::isoAllocate();
    result = (unsigned int *)WebCore::RenderElement::RenderElement(v11, 104, a1, a2, 0, 8964);
    v12 = vdupq_n_s32(0x7FC00000u);
    *((int32x4_t *)result + 10) = v12;
    *((int32x4_t *)result + 12) = v12;
    *(_OWORD *)(result + 54) = constinit_14;
    *((_WORD *)result + 104) = 256;
    *(_QWORD *)result = off_1E344F0D0;
    *((_BYTE *)result + 211) = *((_BYTE *)result + 211) & 0xFC | 1;
    *((_QWORD *)result + 18) = 0;
    *((_QWORD *)result + 19) = 0;
    *((_QWORD *)result + 22) = 0;
    *((_QWORD *)result + 23) = 0;
    *((_BYTE *)result + 210) = 0;
    *(_OWORD *)(result + 58) = unk_1969FE260;
    *(_OWORD *)(result + 62) = xmmword_1969FE270;
    *((_QWORD *)result + 33) = 0;
    *((_QWORD *)result + 34) = 0;
    *((_QWORD *)result + 35) = 0;
  }
  *a3 = result;
  if ((v7 & 1) == 0)
    goto LABEL_12;
  return result;
}

void WebCore::SVGAElement::defaultEventHandler(uint64_t this, WebCore::Event *a2)
{
  WebCore *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned __int8 *v14;
  int v15;
  const WebCore::TreeScope *v16;
  unsigned int *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  WTF::StringImpl *v23;
  double *v24;
  double v25;
  double v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  WebCore *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  char shouldOpenExternalURLsPolicyToPropagate;
  WTF::StringImpl *v46;
  unsigned int v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  uint64_t *v53;
  uint64_t v54;
  WTF::StringImpl *v55[39];
  char v56;
  char v57;
  _QWORD v58[5];
  WTF::AtomStringImpl *v59;
  _WORD *v60;
  uint64_t v61;

  v3 = (WebCore *)this;
  if ((*(_WORD *)(this + 30) & 1) == 0)
    goto LABEL_9;
  if ((*(_BYTE *)(this + 54) & 2) != 0)
  {
    this = WebCore::Element::isUserActionElementFocused((WebCore::Element *)this);
    if ((_DWORD)this)
    {
      v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v28 || (v29 = *(_QWORD *)(v28 + 96)) == 0)
      {
        this = WebCore::threadGlobalDataSlow((WebCore *)this);
        v29 = this;
      }
      v30 = *(_QWORD *)(v29 + 40);
      if (!v30)
      {
        this = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v29);
        v30 = *(_QWORD *)(v29 + 40);
      }
      if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v30 + 1048))
      {
        this = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2);
        if ((_DWORD)this)
        {
          this = MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Enter", 5);
          if ((_DWORD)this)
          {
            *((_DWORD *)a2 + 5) |= 0x80u;
            WebCore::simulateClick(v3, (uint64_t)a2, 0, 1, 1);
            return;
          }
        }
      }
    }
  }
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow((WebCore *)this);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v6 + 400)
    || (*(unsigned int (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2)
    && ((v7 = *((unsigned __int16 *)a2 + 77), v7 < 3) || v7 - 65534 <= 1)
    && *((_WORD *)a2 + 77) == 2)
  {
LABEL_9:
    WebCore::Node::defaultEventHandler(v3, (WebCore::Node **)a2);
    return;
  }
  v8 = *((_QWORD *)v3 + 28);
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9 || !*(_DWORD *)(v9 - 12))
    goto LABEL_15;
  v20 = *(unsigned int *)(v9 - 4);
  if ((_DWORD)v20)
  {
    v21 = 8 * v20;
    v22 = *(uint64_t **)(v8 + 24);
    while ((unint64_t)(*v22 + 1) <= 1)
    {
      ++v22;
      v21 -= 8;
      if (!v21)
        goto LABEL_15;
    }
  }
  else
  {
    v22 = *(uint64_t **)(v8 + 24);
  }
  v53 = (uint64_t *)(v9 + 8 * v20);
  if (v22 == v53)
    goto LABEL_15;
  v54 = *v22;
LABEL_130:
  if (!*(_QWORD *)(v54 + 8))
  {
    while (++v22 != v53)
    {
      v54 = *v22;
      if ((unint64_t)(*v22 + 1) > 1)
      {
        if (v22 != v53)
          goto LABEL_130;
        break;
      }
    }
LABEL_15:
    v10 = v8 + 40;
    goto LABEL_16;
  }
  v10 = v8 + 48;
LABEL_16:
  v11 = *(WTF::StringImpl **)(*(_QWORD *)v10 + 32);
  if (v11)
    *(_DWORD *)v11 += 2;
  v55[0] = v11;
  WTF::String::trim();
  v13 = v55[0];
  v55[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!v61 || !*(_DWORD *)(v61 + 4))
    goto LABEL_71;
  v14 = *(unsigned __int8 **)(v61 + 8);
  v15 = (*(_BYTE *)(v61 + 16) & 4) != 0 ? *v14 : *(unsigned __int16 *)v14;
  if (v15 != 35)
    goto LABEL_71;
  v16 = (const WebCore::TreeScope *)*((_QWORD *)v3 + 5);
  WTF::String::substringSharingImpl((WTF::String *)&v61);
  v17 = (unsigned int *)*((_QWORD *)v16 + 3);
  if (!v17)
    goto LABEL_31;
  v18 = v59;
  if (!v59)
    goto LABEL_31;
  if ((*((_BYTE *)v59 + 16) & 0x10) == 0)
  {
    WTF::AtomStringImpl::lookUpSlowCase(v59, v12);
    v18 = v55[0];
    v58[0] = v55[0];
    if (v55[0])
    {
      v17 = (unsigned int *)*((_QWORD *)v16 + 3);
      goto LABEL_40;
    }
LABEL_31:
    v19 = 0;
LABEL_45:
    v60 = 0;
    goto LABEL_49;
  }
  *(_DWORD *)v59 += 2;
  v58[0] = v18;
LABEL_40:
  WebCore::TreeScopeOrderedMap::getElementById(v17, (const WTF::AtomString *)v58, v16, (uint64_t *)&v60);
  if (*(_DWORD *)v18 == 2)
    WTF::StringImpl::destroy(v18, v12);
  else
    *(_DWORD *)v18 -= 2;
  v19 = (uint64_t)v60;
  if (!v60 || (v60[14] & 0x20) != 0 && (*(unsigned int (**)(_WORD *))(*(_QWORD *)v60 + 1224))(v60))
    goto LABEL_45;
  v60 = 0;
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19, v12);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
  v19 = 0;
LABEL_49:
  v23 = v59;
  v59 = 0;
  if (!v23)
    goto LABEL_52;
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
LABEL_52:
    if (v19)
      goto LABEL_53;
LABEL_71:
    WebCore::SVGAElement::target(v3, v12, &v59);
    v31 = v59;
    if (v59 && *((_DWORD *)v59 + 1))
    {
LABEL_90:
      *((_DWORD *)a2 + 5) |= 0x80u;
      v38 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v3 + 5) + 8) + 528);
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 8);
        if (v39)
        {
          v40 = (unsigned int *)(v39 + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 + 1, v40));
          v42 = *(WebCore **)(v39 + 280);
          ++*(_DWORD *)v42;
          v43 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 8);
          *(_DWORD *)(v43 + 24) += 2;
          WebCore::Document::completeURL((WebCore::Document *)v43, &v61, v43 + 848, 0, (WTF::URL *)v58);
          v57 = 0;
          shouldOpenExternalURLsPolicyToPropagate = WebCore::Document::shouldOpenExternalURLsPolicyToPropagate(*(WebCore::Document **)(*((_QWORD *)v3 + 5) + 8), v44);
          LOBYTE(v55[0]) = 0;
          v56 = 0;
          WebCore::FrameLoader::changeLocation(v42, (uint64_t)v58, (_DWORD **)&v59, a2, &v57, shouldOpenExternalURLsPolicyToPropagate, 0, MEMORY[0x1E0CBF2F8], (const WebCore::Document *)v55);
          if (v56)
            WebCore::PrivateClickMeasurement::~PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v55, v27);
          v46 = (WTF::StringImpl *)v58[0];
          v58[0] = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v27);
            else
              *(_DWORD *)v46 -= 2;
          }
          if (*(_DWORD *)(v43 + 24) == 2)
          {
            if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v43, v27);
          }
          else
          {
            *(_DWORD *)(v43 + 24) -= 2;
          }
          if (!*(_DWORD *)v42)
          {
            __break(0xC471u);
            JUMPOUT(0x1965C5BD4);
          }
          --*(_DWORD *)v42;
          do
          {
            v47 = __ldaxr(v40);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v40));
          if (!v48)
          {
            atomic_store(1u, v40);
            v51 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v51 = off_1E31FE290;
            *((_QWORD *)v51 + 1) = v40;
            v55[0] = v51;
            WTF::ensureOnMainThread();
            v52 = v55[0];
            v55[0] = 0;
            if (v52)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v52 + 8))(v52);
          }
        }
      }
      v49 = v59;
      v59 = 0;
      if (v49)
      {
        if (*(_DWORD *)v49 == 2)
          WTF::StringImpl::destroy(v49, v27);
        else
          *(_DWORD *)v49 -= 2;
      }
      goto LABEL_108;
    }
    v32 = *((_QWORD *)v3 + 13);
    if (v32)
    {
      v33 = *(_DWORD *)(v32 + 4);
      if ((v33 & 1) != 0)
      {
        v34 = *(_QWORD *)(v32 + 40);
        LODWORD(v35) = *(_DWORD *)(v32 + 52);
        if ((_DWORD)v35)
        {
LABEL_75:
          v35 = v35;
          v36 = (_QWORD *)(v34 + 8);
          while (1)
          {
            v37 = *(v36 - 1);
            if (v37 == WebCore::XLinkNames::showAttr
              || *(_QWORD *)(v37 + 24) == *(_QWORD *)(WebCore::XLinkNames::showAttr + 24)
              && *(_QWORD *)(v37 + 32) == *(_QWORD *)(WebCore::XLinkNames::showAttr + 32))
            {
              goto LABEL_86;
            }
            v36 += 2;
            if (!--v35)
            {
              v36 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              goto LABEL_86;
            }
          }
        }
      }
      else
      {
        v34 = v32 + 32;
        LODWORD(v35) = v33 >> 5;
        if ((_DWORD)v35)
          goto LABEL_75;
      }
    }
    v36 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_86:
    if (MEMORY[0x19AEA53F4](*v36, "new", 3))
    {
      WTF::AtomStringImpl::add();
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v27);
        else
          *(_DWORD *)v31 -= 2;
      }
    }
    goto LABEL_90;
  }
  v23 = (WTF::StringImpl *)WTF::StringImpl::destroy(v23, v12);
  if (!v19)
    goto LABEL_71;
LABEL_53:
  v24 = *(double **)(v19 + 312);
  v25 = 0.0;
  if (v24 && v24[1] != 0.0)
  {
    if (v24[2] == 0.0)
    {
      WTF::MonotonicTime::now(v23);
      v25 = v24[3] + v26 - v24[4];
    }
    else
    {
      v25 = v24[3];
    }
  }
  v55[0] = *(WTF::StringImpl **)&v25;
  WebCore::SVGSMILElement::addInstanceTime((WTF::MonotonicTime *)v19, 0, (uint64_t *)v55, 0);
  *((_DWORD *)a2 + 5) |= 0x80u;
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19, v27);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
LABEL_108:
  v50 = (WTF::StringImpl *)v61;
  v61 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v27);
    else
      *(_DWORD *)v50 -= 2;
  }
}

WTF::AtomStringImpl *WebCore::SVGAElement::target@<X0>(WebCore::SVGAElement *this@<X0>, WTF::StringImpl *a2@<X1>, WTF::AtomStringImpl **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::AtomStringImpl *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  WTF::AtomStringImpl *v13;

  v4 = *((_QWORD *)this + 29);
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v8 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = *(uint64_t **)(v4 + 24);
    while ((unint64_t)(*v10 + 1) <= 1)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_2;
    }
  }
  else
  {
    v10 = *(uint64_t **)(v4 + 24);
  }
  v11 = (uint64_t *)(v5 + 8 * v8);
  if (v10 == v11)
    goto LABEL_2;
  v12 = *v10;
LABEL_17:
  if (!*(_QWORD *)(v12 + 8))
  {
    while (++v10 != v11)
    {
      v12 = *v10;
      if ((unint64_t)(*v10 + 1) > 1)
      {
        if (v10 != v11)
          goto LABEL_17;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 40;
    goto LABEL_3;
  }
  v6 = v4 + 48;
LABEL_3:
  result = *(WTF::AtomStringImpl **)(*(_QWORD *)v6 + 32);
  if (result)
  {
    if ((*((_BYTE *)result + 16) & 0x10) != 0)
    {
      *(_DWORD *)result += 2;
    }
    else
    {
      WTF::AtomStringImpl::addSlowCase(result, a2);
      result = v13;
    }
  }
  *a3 = result;
  return result;
}

uint64_t WebCore::SVGAElement::defaultTabIndex(WebCore::SVGAElement *this)
{
  return 0;
}

uint64_t WebCore::SVGAElement::supportsFocus(WebCore::SVGAElement *this)
{
  if (!WebCore::Node::computeEditability((uint64_t)this, 0, 1) && (*((_WORD *)this + 15) & 1) != 0)
    return 1;
  else
    return (0xEu >> ((*((_QWORD *)this + 9) >> 58) & 3)) & 1;
}

BOOL WebCore::SVGAElement::isURLAttribute(WebCore::SVGAElement *this, WebCore::QualifiedName::QualifiedNameImpl **a2)
{
  WTF::StringImpl ***v2;
  WTF::StringImpl ***v3;

  {
    v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_12;
    v3 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v2 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v3)
      goto LABEL_6;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v3 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_12:
      v3 = 0;
  }
  else
  {
    v2 = 0;
    v3 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_6:
  {
    if (v2)
      v2 += 2 * *((unsigned int *)v2 - 1);
  }
  else
  {
    v2 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  return v2 != v3 && v3[1] != 0;
}

uint64_t WebCore::SVGAElement::isMouseFocusable(WebCore::SVGAElement *this)
{
  if ((*((_WORD *)this + 15) & 1) != 0)
    return (0xEu >> ((*((_QWORD *)this + 9) >> 58) & 3)) & 1;
  else
    return (*(uint64_t (**)(WebCore::SVGAElement *))(*(_QWORD *)this + 552))(this);
}

uint64_t WebCore::SVGAElement::isKeyboardFocusable(WebCore::SVGAElement *this, WebCore::KeyboardEvent *a2)
{
  uint64_t result;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  if (WebCore::Element::isFocusable(this) && ((*((_QWORD *)this + 9) >> 58) & 3) - 1 <= 2
    || (*((_WORD *)this + 15) & 1) == 0
    || (result = WebCore::EventHandler::tabsToLinks(*(WebCore::EventHandler **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528)+ 8)+ 640), a2), (_DWORD)result))
  {
    result = (*(uint64_t (**)(WebCore::SVGAElement *))(*(_QWORD *)this + 552))(this);
    if ((_DWORD)result)
    {
      if (((*(uint64_t (**)(WebCore::SVGAElement *))(*(_QWORD *)this + 1120))(this) & 0x80000000) == 0
        || (result = (*(uint64_t (**)(WebCore::SVGAElement *))(*(_QWORD *)this + 544))(this), (_DWORD)result))
      {
        v6 = *((_QWORD *)this + 9);
        v7 = (v6 >> 58) & 3;
        if ((_DWORD)v7 == 2)
          return 0;
        v8 = v6 & 0xFFFFFFFFFFFFLL;
        if ((_DWORD)v7 == 3 && (*(_DWORD *)(v8 + 28) & 0x80000000) != 0)
        {
          return 0;
        }
        else
        {
          if (v8 && (v10 = *(_QWORD *)(v8 + 88)) != 0)
          {
            v11 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v10 + 24) = v11 + 2;
            v9 = (*(unsigned __int8 *)(v10 + 192) >> 1) & 1;
            if (v11)
            {
              *(_DWORD *)(v10 + 24) = v11;
            }
            else if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v10, v5);
            }
          }
          else
          {
            v9 = 0;
          }
          return v9 ^ 1u;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGAElement::canStartSelection(WebCore::SVGAElement *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if ((*((_WORD *)this + 15) & 1) != 0)
    return WebCore::Node::computeEditability((uint64_t)this, 0, 1) != 0;
  if (!WebCore::Node::hasEditableStyle((uint64_t)this, 0))
  {
    v2 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v2)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
        v2 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x20) + 8);
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 88) + 32) + 148) & 0xC00000) == 0x800000)
      {
        v3 = *(_QWORD *)(v2 + 104);
        if ((*(_BYTE *)(v3 + 239) & 1) != 0 || (*(_DWORD *)(v3 + 228) & 0x18000) == 0)
          return 0;
      }
    }
    if ((*((_WORD *)this + 14) & 0x80) != 0)
    {
      v6 = *((_QWORD *)this + 25);
      if (v6)
      {
        v4 = *(_QWORD *)(v6 + 8);
        if (v4)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
      }
    }
    else
    {
      v4 = *((_QWORD *)this + 4);
      if (v4)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 248))(v4);
    }
  }
  return 1;
}

uint64_t WebCore::SVGAElement::childShouldCreateRenderer(WebCore::SVGAElement *this, const WebCore::Node *a2)
{
  __int16 v2;
  unsigned __int16 *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int isSVGLayerAwareElement;
  const WebCore::Node *v9;

  v2 = *((_WORD *)a2 + 14);
  if ((v2 & 0x20) != 0 && *(_QWORD *)(*((_QWORD *)a2 + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::aTag + 24))
    return 0;
  v3 = (unsigned __int16 *)*((_QWORD *)this + 4);
  if (v3 && (~v3[14] & 0x28) == 0)
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 968))(*((_QWORD *)this + 4));
  if ((v2 & 0x20) == 0)
    return 0;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    v7 = *((_QWORD *)a2 + 12);
    v9 = a2;
    isSVGLayerAwareElement = WebCore::isSVGLayerAwareElement((WebCore *)*(unsigned __int16 *)(v7 + 10), a2);
    v5 = v7;
    a2 = v9;
    if (!isSVGLayerAwareElement)
      return 0;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 12);
  }
  v6 = *(unsigned __int16 *)(v5 + 10);
  if ((v6 - 239) >= 3 && v6 != 177)
    return (*(uint64_t (**)(const WebCore::Node *))(*(_QWORD *)a2 + 1232))(a2);
  return 0;
}

uint64_t WebCore::SVGAElement::willRespondToMouseClickEventsWithEditability(uint64_t a1, int a2)
{
  if ((*(_WORD *)(a1 + 30) & 1) != 0)
    return 1;
  else
    return WebCore::Node::willRespondToMouseClickEventsWithEditability(a1, a2);
}

uint64_t WebCore::SVGAElement::relList(WebCore::SVGAElement *this)
{
  uint64_t v1;
  _QWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
  {
    v1 = WTF::fastMalloc((WTF *)0x38);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3451608;
    *(_QWORD *)v1 = this;
    *(_QWORD *)(v1 + 8) = &WebCore::SVGNames::relAttr;
    *(_WORD *)(v1 + 16) = 256;
    *(_QWORD *)(v1 + 24) = v1 + 40;
    *(_QWORD *)(v1 + 32) = 1;
    *(_QWORD *)(v1 + 48) = v3;
    v5 = *((_QWORD *)this + 31);
    *((_QWORD *)this + 31) = v1;
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v7)
      {
        v8 = *(WTF::StringImpl ***)(v5 + 24);
        v9 = 8 * v7;
        do
        {
          v10 = *v8;
          *v8 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, v4);
            else
              *(_DWORD *)v10 -= 2;
          }
          ++v8;
          v9 -= 8;
        }
        while (v9);
      }
      v11 = *(WTF **)(v5 + 24);
      if ((WTF *)(v5 + 40) != v11 && v11 != 0)
      {
        *(_QWORD *)(v5 + 24) = 0;
        *(_DWORD *)(v5 + 32) = 0;
        WTF::fastFree(v11, v4);
      }
      WTF::fastFree((WTF *)v5, v4);
      return *((_QWORD *)this + 31);
    }
  }
  return v1;
}

uint64_t WebCore::SVGAltGlyphDefElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3451630;
  v6[14] = &unk_1E3451B60;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3347E50;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v9, 0);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *v6 = off_1E3451630;
  v6[14] = &unk_1E3451B60;
  *a3 = v6;
  return result;
}

void WebCore::SVGAltGlyphElement::create(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char **v13;
  char *v14;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3450EF0;
  v6[14] = &unk_1E3451460;
  v6[22] = &unk_1E3451498;
  v6[35] = &unk_1E34514F0;
  v7 = (char *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v7 = off_1E3451B98;
  *((_QWORD *)v7 + 1) = v6;
  v14 = v7;
  WebCore::SVGTextPositioningElement::SVGTextPositioningElement(v6, a1, a2, (uint64_t *)&v14);
  v8 = (uint64_t)v14;
  v14 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *v6 = off_1E3450EF0;
  v6[14] = &unk_1E3451460;
  v6[22] = &unk_1E3451498;
  v6[35] = &off_1E3452C78;
  v9 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)v9 = &off_1E3452E28;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_WORD *)(v10 + 24) = 0;
  *(_QWORD *)v10 = &off_1E3452EA8;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v10;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)v9 = off_1E347BDB8;
  v6[36] = v9;
  v11 = atomic_load(&WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::onceFlag);
  if (v11 != -1)
  {
    v14 = &v12;
    v13 = &v14;
    std::__call_once(&WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::SVGURIReference::SVGURIReference(WebCore::SVGElement *)::$_0 &&>>);
  }
  *v6 = off_1E3450EF0;
  v6[14] = &unk_1E3451460;
  v6[22] = &unk_1E3451498;
  v6[35] = &unk_1E34514F0;
  *a3 = v6;
}

uint64_t WebCore::SVGAltGlyphElement::childShouldCreateRenderer(WebCore::SVGAltGlyphElement *this, const WebCore::Node *a2)
{
  return (*((unsigned __int16 *)a2 + 14) >> 1) & 1;
}

uint64_t WebCore::SVGAltGlyphElement::createElementRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = bmalloc::api::isoAllocate();
  result = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 84, a1, a2, 40, 0);
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 20) |= 0x40000u;
  *(_QWORD *)result = off_1E34527C0;
  *a3 = result;
  return result;
}

uint64_t WebCore::SVGAltGlyphItemElement::create@<X0>(_DWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;

  v6 = (_QWORD *)bmalloc::api::isoAllocate();
  *v6 = off_1E3451C08;
  v6[14] = &unk_1E3452138;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3347E50;
  v7[1] = v6;
  v9 = v7;
  WebCore::SVGElement::SVGElement((uint64_t)v6, a1, a2, (uint64_t *)&v9, 0);
  result = (uint64_t)v9;
  if (v9)
    result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  *v6 = off_1E3451C08;
  v6[14] = &unk_1E3452138;
  *a3 = v6;
  return result;
}

float *WebCore::SVGAngleValue::valueAsString@<X0>(float *this@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  uint64_t v4;

  switch(*(_DWORD *)this)
  {
    case 0:
    case 1:
      this = (float *)WTF::String::number((WTF::String *)this, this[1]);
      break;
    case 2:
      v3 = "deg";
      v4 = 4;
      this = (float *)WTF::tryMakeString<float,WTF::ASCIILiteral>((uint64_t)&v3, a2);
      if (!*a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1965C66DCLL);
      }
      return this;
    case 3:
      v3 = "rad";
      v4 = 4;
      this = (float *)WTF::tryMakeString<float,WTF::ASCIILiteral>((uint64_t)&v3, a2);
      if (!*a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1965C66A4);
      }
      return this;
    case 4:
      v3 = "grad";
      v4 = 5;
      this = (float *)WTF::tryMakeString<float,WTF::ASCIILiteral>((uint64_t)&v3, a2);
      if (!*a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1965C6764);
      }
      return this;
    case 5:
      v3 = "turn";
      v4 = 5;
      this = (float *)WTF::tryMakeString<float,WTF::ASCIILiteral>((uint64_t)&v3, a2);
      if (!*a2)
      {
        __break(0xC471u);
        JUMPOUT(0x1965C6714);
      }
      return this;
    default:
      *a2 = 0;
      break;
  }
  return this;
}

uint64_t WebCore::SVGAngleValue::setValueAsString@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, _QWORD *a3@<X8>)
{
  int *v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;

  v3 = (int *)this;
  v5 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || (v6 = *(unsigned int *)(v5 + 4), !(_DWORD)v6))
  {
    *(_DWORD *)this = 1;
LABEL_3:
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    return this;
  }
  if ((*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    v12 = *(unsigned __int16 **)(v5 + 8);
    v13 = v6;
    this = WebCore::genericParseNumber<char16_t,float>(&v12, 0);
    if ((this & 0xFF00000000) == 0)
      goto LABEL_39;
    if (v13)
    {
      if (v13 != 4)
      {
        if (v13 != 3)
          goto LABEL_39;
        if (*(_DWORD *)v12 != 6357106)
        {
          if (*(_DWORD *)v12 != 6619236)
            goto LABEL_39;
          v7 = v12[2];
          goto LABEL_20;
        }
        v11 = v12[2];
LABEL_34:
        if (v11 == 100)
        {
          v9 = 3;
          goto LABEL_23;
        }
        goto LABEL_39;
      }
      if (*(_DWORD *)v12 != 7667828)
      {
        if (*(_DWORD *)v12 != 7471207 || *((_DWORD *)v12 + 1) != 6553697)
          goto LABEL_39;
LABEL_31:
        v9 = 4;
        goto LABEL_23;
      }
      if (*((_DWORD *)v12 + 1) != 7209074)
        goto LABEL_39;
      goto LABEL_37;
    }
LABEL_22:
    v9 = 1;
    goto LABEL_23;
  }
  v12 = *(unsigned __int16 **)(v5 + 8);
  v13 = v6;
  this = WebCore::parseNumber((uint64_t *)&v12, 0);
  if ((this & 0xFF00000000) == 0)
    goto LABEL_39;
  if (!v13)
    goto LABEL_22;
  if (v13 == 4)
  {
    v10 = *v12;
    if (v10 != 30068)
    {
      if (v10 != 29287 || v12[1] != 25697)
        goto LABEL_39;
      goto LABEL_31;
    }
    if (v12[1] != 28274)
      goto LABEL_39;
LABEL_37:
    v9 = 5;
    goto LABEL_23;
  }
  if (v13 != 3)
    goto LABEL_39;
  v8 = *v12;
  if (v8 == 24946)
  {
    v11 = *((unsigned __int8 *)v12 + 2);
    goto LABEL_34;
  }
  if (v8 != 25956)
    goto LABEL_39;
  v7 = *((unsigned __int8 *)v12 + 2);
LABEL_20:
  if (v7 == 103)
  {
    v9 = 2;
LABEL_23:
    *v3 = v9;
    v3[1] = this;
    goto LABEL_3;
  }
LABEL_39:
  *(_BYTE *)a3 = 9;
  a3[1] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return this;
}

float *WebCore::SVGAngleValue::convertToSpecifiedUnits@<X0>(float *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  if (!a2 || a2 > 4 || (v3 = *this, !*(_DWORD *)this))
  {
    *(_BYTE *)a3 = 6;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  if (LODWORD(v3) == a2)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return this;
  }
  switch(LODWORD(v3))
  {
    case 1:
    case 2:
      if (a2 == 4)
      {
        v4 = this[1];
        goto LABEL_23;
      }
      if (a2 == 3)
      {
        v4 = this[1];
        goto LABEL_29;
      }
      goto LABEL_31;
    case 3:
      if (a2 - 1 < 2)
      {
        v4 = this[1];
        v5 = 57.296;
        goto LABEL_30;
      }
      if (a2 == 4)
      {
        v6 = this[1];
        v7 = 57.296;
        goto LABEL_22;
      }
      goto LABEL_31;
    case 4:
      if (a2 - 1 < 2)
      {
        v4 = this[1];
        v5 = 0.9;
        goto LABEL_30;
      }
      if (a2 == 3)
      {
        v8 = this[1];
        v9 = 0.9;
        goto LABEL_28;
      }
      goto LABEL_31;
    case 5:
      if (a2 - 1 < 2)
      {
        v4 = this[1];
        v5 = 360.0;
      }
      else if (a2 == 3)
      {
        v8 = this[1];
        v9 = 360.0;
LABEL_28:
        v4 = v8 * v9;
LABEL_29:
        v5 = 0.017453;
      }
      else
      {
        if (a2 != 4)
          goto LABEL_31;
        v6 = this[1];
        v7 = 360.0;
LABEL_22:
        v4 = v6 * v7;
LABEL_23:
        v5 = 1.1111;
      }
LABEL_30:
      this[1] = v4 * v5;
LABEL_31:
      *(_DWORD *)this = a2;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      return this;
    default:
      goto LABEL_31;
  }
}

WebCore::SVGAnimationElement *WebCore::SVGAnimateElement::create@<X0>(WebCore::SVGAnimateElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, WebCore::SVGAnimationElement **a3@<X8>)
{
  WebCore::SVGAnimationElement *v7;
  WebCore::SVGAnimationElement *result;

  v7 = (WebCore::SVGAnimationElement *)bmalloc::api::isoAllocate();
  result = WebCore::SVGAnimationElement::SVGAnimationElement(v7, this, a2);
  *((_QWORD *)result + 62) = 0;
  *((_WORD *)result + 252) = 0;
  *(_QWORD *)result = off_1E34502B0;
  *((_QWORD *)result + 14) = &unk_1E3450878;
  *a3 = result;
  return result;
}

uint64_t WebCore::SVGAnimateElementBase::animator(WebCore::SVGAnimateElementBase *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl ***v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WTF::StringImpl **v17;
  _DWORD *v18;
  WTF::StringImpl **v19;
  WTF::StringImpl **v20;

  result = *((_QWORD *)this + 62);
  if (result)
    return result;
  v3 = *((_QWORD *)this + 23);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
      *(_DWORD *)(v4 + 24) += 2;
  }
  else
  {
    v4 = 0;
  }
  v5 = *((_QWORD *)this + 13);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v5 + 40);
      LODWORD(v8) = *(_DWORD *)(v5 + 52);
      if ((_DWORD)v8)
      {
LABEL_8:
        v8 = v8;
        v9 = (WTF::StringImpl ***)(v7 + 8);
        while (1)
        {
          v10 = (uint64_t)*(v9 - 1);
          if (v10 == WebCore::SVGNames::accumulateAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::SVGNames::accumulateAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::SVGNames::accumulateAttr + 32))
          {
            goto LABEL_17;
          }
          v9 += 2;
          if (!--v8)
          {
            v9 = (WTF::StringImpl ***)MEMORY[0x1E0CBF2F8];
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v7 = v5 + 32;
      LODWORD(v8) = v6 >> 5;
      if ((_DWORD)v8)
        goto LABEL_8;
    }
  }
  v9 = (WTF::StringImpl ***)MEMORY[0x1E0CBF2F8];
LABEL_17:
  v11 = *((unsigned __int8 *)this + 489);
  v12 = *((unsigned __int8 *)this + 488);
  {
    v13 = (WTF::StringImpl **)WebCore::sumAtom(void)::sum;
  }
  else
  {
    WTF::AtomStringImpl::add();
    v13 = v20;
    WebCore::sumAtom(void)::sum = (uint64_t)v20;
  }
  v14 = *v9 == v13 && *((unsigned __int8 *)this + 489) != 3;
  v15 = (*(uint64_t (**)(WebCore::SVGAnimateElementBase *))(*(_QWORD *)this + 1336))(this);
  WebCore::SVGElement::createAnimator(v4, (WebCore::QualifiedName::QualifiedNameImpl **)this + 22, v11, v12, v14, v15, &v20);
  v17 = v20;
  v20 = 0;
  v18 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = v17;
  if (v18)
  {
    if (v18[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
      v19 = v20;
      v20 = 0;
      if (v19)
      {
        if (*((_DWORD *)v19 + 2) == 1)
          (*((void (**)(WTF::StringImpl **))*v19 + 1))(v19);
        else
          --*((_DWORD *)v19 + 2);
      }
    }
    else
    {
      --v18[2];
      v20 = 0;
    }
  }
  if (v4)
  {
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v16);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return *((_QWORD *)this + 62);
}

uint64_t WebCore::SVGAnimateElementBase::hasValidAttributeType(WebCore::SVGAnimateElementBase *this)
{
  uint64_t v1;
  _BOOL8 hasInvalidCSSAttributeType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;

  v1 = *((_QWORD *)this + 23);
  if (!v1)
    return 0;
  if (!*(_QWORD *)(v1 + 8))
    return 0;
  hasInvalidCSSAttributeType = WebCore::SVGAnimateElementBase::hasInvalidCSSAttributeType(this);
  if (hasInvalidCSSAttributeType)
    return 0;
  v5 = *((_QWORD *)this + 23);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      *(_DWORD *)(v6 + 24) += 2;
      v7 = WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)hasInvalidCSSAttributeType);
      v11 = *((_QWORD *)this + 22);
      v10 = (char *)this + 176;
      v9 = v11;
      v12 = *v7;
      if (*v7)
      {
        v13 = *(_DWORD *)(v12 - 8);
        v14 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
        v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
        v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
        v17 = v13 & ((v16 >> 31) ^ v16);
        v18 = *(_QWORD *)(v12 + 24 * v17);
        if (v18 == v9)
        {
LABEL_12:
          v4 = 1;
          goto LABEL_14;
        }
        v19 = 1;
        while (v18)
        {
          v17 = (v17 + v19) & v13;
          v18 = *(_QWORD *)(v12 + 24 * v17);
          ++v19;
          if (v18 == v9)
            goto LABEL_12;
        }
      }
      v4 = (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(v6 + 160) + 64))(*(_QWORD *)(v6 + 160), v10);
LABEL_14:
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
      return v4;
    }
  }
  v21 = WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator((WebCore::SVGPropertyAnimatorFactory *)hasInvalidCSSAttributeType);
  v24 = *((_QWORD *)this + 22);
  v23 = (char *)this + 176;
  v22 = v24;
  v25 = *v21;
  if (*v21)
  {
    v26 = *(_DWORD *)(v25 - 8);
    v27 = (~(v22 << 32) + v22) ^ ((unint64_t)(~(v22 << 32) + v22) >> 22);
    v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
    v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
    v30 = v26 & ((v29 >> 31) ^ v29);
    v31 = *(_QWORD *)(v25 + 24 * v30);
    if (v31 == v22)
      return 1;
    v32 = 1;
    v4 = 1;
    while (v31)
    {
      v30 = (v30 + v32) & v26;
      v31 = *(_QWORD *)(v25 + 24 * v30);
      ++v32;
      if (v31 == v22)
        return v4;
    }
  }
  return (*(uint64_t (**)(_QWORD, char *))(*MEMORY[0xA0] + 64))(MEMORY[0xA0], v23);
}

BOOL WebCore::SVGAnimateElementBase::hasInvalidCSSAttributeType(WebCore::SVGAnimateElementBase *this)
{
  uint64_t v1;
  WebCore::SVGPropertyAnimatorFactory *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;

  v1 = *((_QWORD *)this + 23);
  if (!v1 || !*(_QWORD *)(v1 + 8))
    return 0;
  if (*((_BYTE *)this + 505))
    return *((_BYTE *)this + 504) != 0;
  v3 = (WebCore::SVGPropertyAnimatorFactory *)(*(uint64_t (**)(WebCore::SVGAnimateElementBase *))(*(_QWORD *)this + 1320))(this);
  if (!(_DWORD)v3 || *((_BYTE *)this + 385))
  {
    *((_WORD *)this + 252) = 256;
    return *((_BYTE *)this + 504) != 0;
  }
  v5 = *((_QWORD *)this + 23);
  if (!v5)
    goto LABEL_25;
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
    *(_DWORD *)(v6 + 24) += 2;
  while (1)
  {
    v7 = WebCore::SVGPropertyAnimatorFactory::attributeAnimatorCreator(v3);
    v8 = (char *)this + 176;
    v9 = *((_QWORD *)this + 22);
    v10 = *v7;
    if (!*v7)
      goto LABEL_19;
    v11 = *(_DWORD *)(v10 - 8);
    v12 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(_QWORD *)(v10 + 24 * v15);
    if (v16 != v9)
    {
      v17 = 1;
      while (v16)
      {
        v15 = (v15 + v17) & v11;
        v16 = *(_QWORD *)(v10 + 24 * v15);
        ++v17;
        if (v16 == v9)
          goto LABEL_17;
      }
LABEL_19:
      *((_WORD *)this + 252) = (*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(v6 + 160) + 72))(*(_QWORD *)(v6 + 160), v8) ^ 1 | 0x100;
      goto LABEL_20;
    }
LABEL_17:
    *((_WORD *)this + 252) = 256;
    if (!v6)
      return *((_BYTE *)this + 504) != 0;
LABEL_20:
    if (*(_DWORD *)(v6 + 24) != 2)
      break;
    if ((*(_WORD *)(v6 + 30) & 0x400) != 0)
      return *((_BYTE *)this + 504) != 0;
    WebCore::Node::removedLastRef((WebCore::Node *)v6, v8);
    if (*((_BYTE *)this + 505))
      return *((_BYTE *)this + 504) != 0;
    v3 = (WebCore::SVGPropertyAnimatorFactory *)std::__throw_bad_optional_access[abi:sn180100]();
LABEL_25:
    v6 = 0;
  }
  *(_DWORD *)(v6 + 24) -= 2;
  return *((_BYTE *)this + 504) != 0;
}

uint64_t WebCore::SVGAnimateElementBase::setTargetElement(WebCore::SVGAnimateElementBase *this, WebCore::SVGElement *a2)
{
  WebCore::SVGSMILElement::setTargetElement(this, a2);
  return (*(uint64_t (**)(WebCore::SVGAnimateElementBase *))(*(_QWORD *)this + 1400))(this);
}

uint64_t WebCore::SVGAnimateElementBase::setAttributeName(WebCore::SVGAnimateElementBase *this, const WebCore::QualifiedName *a2)
{
  WebCore::SVGSMILElement::setAttributeName(this, a2);
  return (*(uint64_t (**)(WebCore::SVGAnimateElementBase *))(*(_QWORD *)this + 1400))(this);
}

_DWORD *WebCore::SVGAnimateElementBase::resetAnimation(WebCore::SVGAnimateElementBase *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  _DWORD *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  result = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  *((_WORD *)this + 252) = 0;
  return result;
}

uint64_t WebCore::SVGAnimateElementBase::setFromAndToValues(WebCore::SVGAnimateElementBase *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  uint64_t result;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v3 = *((_QWORD *)this + 23);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return 0;
  result = WebCore::SVGAnimateElementBase::animator(this);
  if (!result)
    return result;
  v8 = (_DWORD *)result;
  ++*(_DWORD *)(result + 8);
  v9 = *((_QWORD *)this + 23);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      *(_DWORD *)(v10 + 24) += 2;
  }
  else
  {
    v10 = 0;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::SVGAnimateElementBase *, const WTF::String *))(*(_QWORD *)this + 1456))(&v15, this, a2);
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::SVGAnimateElementBase *, const WTF::String *))(*(_QWORD *)this + 1456))(&v14, this, a3);
  (*(void (**)(_DWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v8 + 24))(v8, v10, &v15, &v14);
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v15;
  v15 = 0;
  if (!v13)
  {
LABEL_13:
    if (v10)
      goto LABEL_14;
    goto LABEL_16;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_13;
  }
  WTF::StringImpl::destroy(v13, v11);
  if (v10)
  {
LABEL_14:
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v11);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
LABEL_16:
  if (v8[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  else
    --v8[2];
  return 1;
}

uint64_t WebCore::SVGAnimateElementBase::setFromAndByValues(WebCore::SVGAnimateElementBase *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  int v7;
  uint64_t result;
  _DWORD *v9;
  _DWORD *v10;
  char v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  char v15;
  char v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  v3 = *((_QWORD *)this + 23);
  if (!v3 || !*(_QWORD *)(v3 + 8))
    return 0;
  v7 = *((unsigned __int8 *)this + 489);
  if (v7 == 4)
  {
    result = (*(uint64_t (**)(WebCore::SVGAnimateElementBase *))(*(_QWORD *)this + 1336))(this);
    if (!(_DWORD)result)
      return result;
    if ((*(unsigned int (**)(WebCore::SVGAnimateElementBase *))(*(_QWORD *)this + 1312))(this))
    {
      v9 = (_DWORD *)WebCore::SVGAnimateElementBase::animator(this);
      if (v9)
      {
        v10 = v9;
        ++v9[2];
        v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
        v12 = v11;
        if (v10[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          if ((v12 & 1) != 0)
            return 0;
        }
        else
        {
          --v10[2];
          if ((v11 & 1) != 0)
            return 0;
        }
      }
    }
    v7 = *((unsigned __int8 *)this + 489);
  }
  if (v7 == 2)
  {
    if ((*(unsigned int (**)(WebCore::SVGAnimateElementBase *))(*(_QWORD *)this + 1312))(this))
    {
      v13 = (_DWORD *)WebCore::SVGAnimateElementBase::animator(this);
      if (v13)
      {
        v14 = v13;
        ++v13[2];
        v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
        v16 = v15;
        if (v14[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          if ((v16 & 1) != 0)
            return 0;
        }
        else
        {
          --v14[2];
          if ((v15 & 1) != 0)
            return 0;
        }
      }
    }
  }
  result = WebCore::SVGAnimateElementBase::animator(this);
  if (result)
  {
    v17 = (_DWORD *)result;
    ++*(_DWORD *)(result + 8);
    v18 = *((_QWORD *)this + 23);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
        *(_DWORD *)(v19 + 24) += 2;
    }
    else
    {
      v19 = 0;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::SVGAnimateElementBase *, const WTF::String *))(*(_QWORD *)this + 1456))(&v24, this, a2);
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::SVGAnimateElementBase *, const WTF::String *))(*(_QWORD *)this + 1456))(&v23, this, a3);
    (*(void (**)(_DWORD *, uint64_t, WTF::StringImpl **, WTF::StringImpl **))(*(_QWORD *)v17 + 32))(v17, v19, &v24, &v23);
    v21 = v23;
    v23 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v24;
    v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v20);
        if (v19)
        {
LABEL_28:
          if (*(_DWORD *)(v19 + 24) == 2)
          {
            if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v19, v20);
          }
          else
          {
            *(_DWORD *)(v19 + 24) -= 2;
          }
        }
LABEL_30:
        if (v17[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
        else
          --v17[2];
        return 1;
      }
      *(_DWORD *)v22 -= 2;
    }
    if (v19)
      goto LABEL_28;
    goto LABEL_30;
  }
  return result;
}

uint64_t WebCore::SVGAnimateElementBase::setToAtEndOfDurationValue(WebCore::SVGAnimateElementBase *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  char v8;
  char v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v2 = *((_QWORD *)this + 23);
  if (!v2 || !*(_QWORD *)(v2 + 8) || !*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
    return 0;
  if ((*(unsigned int (**)(WebCore::SVGAnimateElementBase *))(*(_QWORD *)this + 1312))(this))
  {
    v6 = (_DWORD *)WebCore::SVGAnimateElementBase::animator(this);
    if (v6)
    {
      v7 = v6;
      ++v6[2];
      v8 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      v9 = v8;
      if (v7[2] != 1)
      {
        --v7[2];
        if ((v8 & 1) == 0)
          goto LABEL_11;
        return 1;
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      if ((v9 & 1) != 0)
        return 1;
    }
  }
LABEL_11:
  result = WebCore::SVGAnimateElementBase::animator(this);
  if (result)
  {
    v10 = (_DWORD *)result;
    ++*(_DWORD *)(result + 8);
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::SVGAnimateElementBase *, const WTF::String *))(*(_QWORD *)this + 1456))(&v13, this, a2);
    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v10 + 40))(v10, &v13);
    v12 = v13;
    v13 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
    return 1;
  }
  return result;
}

unsigned int *WebCore::SVGAnimateElementBase::startAnimation(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  void *v5;

  v1 = *((_QWORD *)this + 23);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = this;
      this = (unsigned int *)WebCore::SVGAnimateElementBase::animator((WebCore::SVGAnimateElementBase *)this);
      if (this)
      {
        v3 = this;
        ++this[2];
        v4 = *(_QWORD *)(*((_QWORD *)v2 + 23) + 8);
        *(_DWORD *)(v4 + 24) += 2;
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)this + 48))(this, v4);
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        if (v3[2] == 1)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
    }
  }
  return this;
}

unsigned int *WebCore::SVGAnimateElementBase::calculateAnimatedValue(unsigned int *this, float a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __n128 v10;
  unsigned int *v11;
  float v12;
  uint64_t v13;
  void *v14;

  v3 = *((_QWORD *)this + 23);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v6 = this;
      v7 = *(_QWORD *)(*((_QWORD *)this + 12) + 24);
      v8 = *(_QWORD *)(WebCore::SVGNames::setTag + 24);
      v9 = *((unsigned __int8 *)this + 488);
      this = (unsigned int *)WebCore::SVGAnimateElementBase::animator((WebCore::SVGAnimateElementBase *)this);
      if (this)
      {
        v11 = this;
        v10.n128_u32[0] = 1.0;
        if (v7 == v8)
          v12 = 1.0;
        else
          v12 = a2;
        if (v12 < 0.5)
          v10.n128_f32[0] = 0.0;
        if (v9)
          v10.n128_f32[0] = v12;
        ++this[2];
        v13 = *(_QWORD *)(*((_QWORD *)v6 + 23) + 8);
        *(_DWORD *)(v13 + 24) += 2;
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, __n128))(*(_QWORD *)this + 56))(this, v13, a3, v10);
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
        if (v11[2] == 1)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
        else
          --v11[2];
      }
    }
  }
  return this;
}

unsigned int *WebCore::SVGAnimateElementBase::applyResultsToTarget(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  void *v5;

  v1 = *((_QWORD *)this + 23);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = this;
      this = (unsigned int *)WebCore::SVGAnimateElementBase::animator((WebCore::SVGAnimateElementBase *)this);
      if (this)
      {
        v3 = this;
        ++this[2];
        v4 = *(_QWORD *)(*((_QWORD *)v2 + 23) + 8);
        *(_DWORD *)(v4 + 24) += 2;
        this = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)this + 64))(this, v4);
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            this = WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        if (v3[2] == 1)
          return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
        else
          --v3[2];
      }
    }
  }
  return this;
}

uint64_t WebCore::SVGAnimateElementBase::stopAnimation(uint64_t this, WebCore::SVGElement *a2)
{
  _DWORD *v2;

  if (a2)
  {
    v2 = *(_DWORD **)(this + 496);
    if (v2)
    {
      ++v2[2];
      this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 72))(v2);
      if (v2[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
      else
        --v2[2];
    }
  }
  return this;
}

unint64_t WebCore::SVGAnimateElementBase::calculateDistance(WebCore::SVGAnimateElementBase *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *((_QWORD *)this + 23);
  if (v3 && *(_QWORD *)(v3 + 8) && (v7 = (_DWORD *)WebCore::SVGAnimateElementBase::animator(this)) != 0)
  {
    v8 = v7;
    ++v7[2];
    v9 = *(_QWORD *)(*((_QWORD *)this + 23) + 8);
    *(_DWORD *)(v9 + 24) += 2;
    v10 = (*(uint64_t (**)(_DWORD *, uint64_t, const WTF::String *, const WTF::String *))(*(_QWORD *)v7 + 80))(v7, v9, a2, a3);
    v12 = v10;
    v13 = v10 >> 8;
    v14 = HIDWORD(v10);
    v15 = v10 >> 40;
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v11);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  else
  {
    v15 = 0;
    LOBYTE(v14) = 0;
    v12 = 0;
    LODWORD(v13) = 0;
  }
  return ((_DWORD)v13 << 8) | (v15 << 40) | ((unint64_t)v14 << 32) | v12;
}

void WebCore::SVGAElement::~SVGAElement(WebCore::SVGAElement *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGAElement::~SVGAElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF *v9;
  _DWORD *v11;
  _DWORD *v12;

  v3 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 48);
    *(_QWORD *)(v3 + 48) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(unsigned int *)(v3 + 36);
    if ((_DWORD)v5)
    {
      v6 = *(WTF::StringImpl ***)(v3 + 24);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v9 = *(WTF **)(v3 + 24);
    if ((WTF *)(v3 + 40) != v9 && v9 != 0)
    {
      *(_QWORD *)(v3 + 24) = 0;
      *(_DWORD *)(v3 + 32) = 0;
      WTF::fastFree(v9, a2);
    }
    WTF::fastFree((WTF *)v3, a2);
  }
  v11 = (_DWORD *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  v12 = (_DWORD *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 27) = &off_1E3452C78;
  *((_QWORD *)this + 28) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  WebCore::SVGGraphicsElement::~SVGGraphicsElement(this, a2);
}

uint64_t WebCore::SVGGraphicsElement::approximateMemoryCost(WebCore::SVGGraphicsElement *this)
{
  return 216;
}

uint64_t WebCore::SVGGraphicsElement::localCoordinateSpaceTransform(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 176) + 64))(a1 + 176);
}

uint64_t WebCore::SVGGraphicsElement::isSVGGraphicsElement(WebCore::SVGGraphicsElement *this)
{
  return 1;
}

uint64_t WebCore::SVGAElement::isValid(WebCore::SVGAElement *this, void *a2)
{
  return WebCore::SVGTests::isValid((WebCore::SVGAElement *)((char *)this + 184), a2);
}

uint64_t WebCore::SVGGraphicsElement::supplementalTransform(WebCore::SVGGraphicsElement *this)
{
  return *((_QWORD *)this + 24);
}

void `non-virtual thunk to'WebCore::SVGAElement::~SVGAElement(WebCore::SVGAElement *this, WTF::StringImpl *a2)
{
  WebCore::SVGAElement::~SVGAElement((WebCore::SVGAElement *)((char *)this - 112), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGAElement::~SVGAElement((WebCore::SVGAElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::SVGAElement::~SVGAElement((WebCore::SVGAElement *)((char *)this - 176), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGAElement::~SVGAElement((WebCore::SVGAElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::SVGAElement::~SVGAElement((WebCore::SVGAElement *)((char *)this - 216), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::SVGAElement::~SVGAElement((WebCore::SVGAElement *)((char *)this - 216), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::SVGGraphicsElement::localCoordinateSpaceTransform(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t WebCore::SVGURIReference::haveFiredLoadEvent(WebCore::SVGURIReference *this)
{
  return 0;
}

uint64_t WebCore::SVGURIReference::errorOccurred(WebCore::SVGURIReference *this)
{
  return 0;
}

void WebCore::SVGAltGlyphElement::~SVGAltGlyphElement(WebCore::SVGAltGlyphElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 35) = &off_1E3452C78;
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGTextPositioningElement::~SVGTextPositioningElement(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 35) = &off_1E3452C78;
  *((_QWORD *)this + 36) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGTextPositioningElement::~SVGTextPositioningElement(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::SVGTextContentElement::isTextContent(WebCore::SVGTextContentElement *this)
{
  return 1;
}

uint64_t WebCore::SVGTextContentElement::isValid(WebCore::SVGTextContentElement *this, void *a2)
{
  return WebCore::SVGTests::isValid((WebCore::SVGTextContentElement *)((char *)this + 184), a2);
}

void `non-virtual thunk to'WebCore::SVGAltGlyphElement::~SVGAltGlyphElement(WebCore::SVGAltGlyphElement *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = &off_1E3452C78;
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGTextPositioningElement::~SVGTextPositioningElement((WebCore::SVGAltGlyphElement *)((char *)this - 112), a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = &off_1E3452C78;
  *((_QWORD *)this + 22) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGTextPositioningElement::~SVGTextPositioningElement((WebCore::SVGAltGlyphElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = &off_1E3452C78;
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGTextPositioningElement::~SVGTextPositioningElement((WebCore::SVGAltGlyphElement *)((char *)this - 176), a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = &off_1E3452C78;
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGTextPositioningElement::~SVGTextPositioningElement((WebCore::SVGAltGlyphElement *)((char *)this - 176), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3452C78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGTextPositioningElement::~SVGTextPositioningElement((WebCore::SVGAltGlyphElement *)((char *)this - 280), a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3452C78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGTextPositioningElement::~SVGTextPositioningElement((WebCore::SVGAltGlyphElement *)((char *)this - 280), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void WebCore::SVGAnimateElementBase::~SVGAnimateElementBase(WebCore::SVGAnimateElementBase *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E34521C0;
  *((_QWORD *)this + 14) = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E34521C0;
  *((_QWORD *)this + 14) = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WebCore::SVGSMILElement::rendererIsNeeded(WebCore::SVGSMILElement *this, const WebCore::RenderStyle *a2)
{
  return 0;
}

uint64_t WebCore::SVGSMILElement::isSMILElement(WebCore::SVGSMILElement *this)
{
  return 1;
}

void WebCore::SVGAnimateElementBase::animateRangeString(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v3 += 2;
  *a2 = v3;
}

void `non-virtual thunk to'WebCore::SVGAnimateElementBase::~SVGAnimateElementBase(WebCore::SVGAnimateElementBase *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WebCore::SVGAnimationElement *v4;

  *(_QWORD *)this = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this - 14) = off_1E34521C0;
  v4 = (WebCore::SVGAnimateElementBase *)((char *)this - 112);
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(v4, a2);
}

{
  _DWORD *v3;
  WebCore::SVGAnimationElement *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this - 14) = off_1E34521C0;
  v4 = (WebCore::SVGAnimateElementBase *)((char *)this - 112);
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(v4, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::SVGAnimateElement::~SVGAnimateElement(WebCore::SVGAnimateElement *this, WTF::StringImpl *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = off_1E34521C0;
  *((_QWORD *)this + 14) = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E34521C0;
  *((_QWORD *)this + 14) = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void `non-virtual thunk to'WebCore::SVGAnimateElement::~SVGAnimateElement(WebCore::SVGAnimateElement *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WebCore::SVGAnimationElement *v4;

  *(_QWORD *)this = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this - 14) = off_1E34521C0;
  v4 = (WebCore::SVGAnimateElement *)((char *)this - 112);
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(v4, a2);
}

{
  _DWORD *v3;
  WebCore::SVGAnimationElement *v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E3452788;
  v3 = (_DWORD *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this - 14) = off_1E34521C0;
  v4 = (WebCore::SVGAnimateElement *)((char *)this - 112);
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::SVGAnimationElement::~SVGAnimationElement(v4, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::detachAllProperties(uint64_t result)
{
  uint64_t v1;
  WTF::StringImpl ***v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl ***v15;
  WTF::StringImpl **v16;
  int v17;
  WTF::StringImpl **v18;
  WTF *v20;
  void *v21;
  WTF::StringImpl ***v22;
  uint64_t v23;
  WTF::StringImpl ***v24;
  WTF::StringImpl **v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  WTF *v31;
  void *v32;
  uint64_t v33;
  WTF::StringImpl ***v34;
  WTF::StringImpl ***v35;
  WTF::StringImpl **v36;
  int v37;
  WTF::StringImpl **v38;
  WTF *v40;
  void *v41;
  WTF::StringImpl ***v42;
  uint64_t v43;
  WTF::StringImpl ***v44;
  WTF::StringImpl **v45;
  uint64_t v46;
  int v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  WTF *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl ***v55;
  WTF::StringImpl ***v56;
  WTF::StringImpl **v57;
  int v58;
  WTF::StringImpl **v59;
  WTF *v61;
  void *v62;
  WTF::StringImpl ***v63;
  WTF::StringImpl ***v64;
  uint64_t v65;
  WTF::StringImpl ***v66;
  WTF::StringImpl ***v67;
  WTF::StringImpl **v68;
  int v69;
  WTF::StringImpl **v70;
  WTF *v72;
  void *v73;
  WTF::StringImpl ***v74;
  uint64_t v75;
  WTF::StringImpl ***v76;
  uint64_t v77;
  WTF::StringImpl ***v78;
  char *v79;
  WTF::StringImpl **v80;
  uint64_t v81;
  int v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  WTF *v86;
  void *v87;
  uint64_t v88;

  v1 = result;
  if ((byte_1ECE84CC0 & 1) == 0)
  {
    v2 = 0;
    v13 = 0;
    v3 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
LABEL_20:
    v4 = (uint64_t)&v2[2 * v3];
    if (!v2)
      goto LABEL_31;
    goto LABEL_30;
  }
  v2 = (WTF::StringImpl ***)_MergedGlobals_268;
  if (!_MergedGlobals_268)
  {
    v13 = 0;
    v3 = 0;
    goto LABEL_20;
  }
  v3 = *(unsigned int *)(_MergedGlobals_268 - 4);
  v4 = _MergedGlobals_268 + 16 * v3;
  if (!*(_DWORD *)(_MergedGlobals_268 - 12))
  {
    v13 = _MergedGlobals_268 + 16 * v3;
    goto LABEL_20;
  }
  if (!(_DWORD)v3)
  {
    v13 = _MergedGlobals_268;
    if (!_MergedGlobals_268)
      goto LABEL_31;
LABEL_30:
    v2 += 2 * *((unsigned int *)v2 - 1);
    goto LABEL_31;
  }
  v5 = (WTF::StringImpl **)WebCore::nullName;
  v6 = 16 * v3;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v5)
      {
        v7 = (*(_DWORD *)v5)++;
        v8 = *v2;
        if (v7)
        {
          *(_DWORD *)v5 = v7;
          v9 = (uint64_t)v5;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v5);
          result = WTF::fastFree(v11, v12);
          v9 = WebCore::nullName;
        }
      }
      else
      {
        v9 = 0;
        v8 = *v2;
      }
      if (v8 != v5 && (WTF::StringImpl **)((char *)*v2 + 1) != 0)
        break;
      v2 += 2;
      v5 = (WTF::StringImpl **)v9;
      v6 -= 16;
      if (!v6)
      {
        v2 = (WTF::StringImpl ***)v4;
        break;
      }
    }
    v13 = (uint64_t)v2;
    v2 = (WTF::StringImpl ***)_MergedGlobals_268;
    if (_MergedGlobals_268)
      goto LABEL_30;
  }
  else
  {
    v14 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_268 + v14) + 1) <= 1)
    {
      v14 += 16;
      if (v6 == v14)
      {
        v13 = v4;
        if (_MergedGlobals_268)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v13 = _MergedGlobals_268 + v14;
    if (_MergedGlobals_268)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v13 != v2)
  {
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), *(_QWORD *)(v1 + 8));
    v15 = (WTF::StringImpl ***)(v13 + 16);
    v13 = v4;
    if (v15 != (WTF::StringImpl ***)v4)
    {
      v16 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_34:
        v17 = (*(_DWORD *)v16)++;
        v18 = *v15;
        if (v17)
        {
          *(_DWORD *)v16 = v17;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v16);
          result = WTF::fastFree(v20, v21);
        }
        while (v18 == v16 || (WTF::StringImpl **)((char *)*v15 + 1) == 0)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
            goto LABEL_47;
          v16 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_34;
          v18 = *v15;
        }
      }
      else
      {
        while ((unint64_t)*v15 + 1 <= 1)
        {
          v15 += 2;
          if (v15 == (WTF::StringImpl ***)v4)
          {
LABEL_47:
            v13 = v4;
            goto LABEL_49;
          }
        }
      }
      v13 = (uint64_t)v15;
    }
LABEL_49:
    ;
  }
  {
    v22 = 0;
    v34 = 0;
    v23 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_193;
  }
  v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v34 = 0;
    v23 = 0;
LABEL_193:
    v24 = &v22[2 * v23];
    goto LABEL_72;
  }
  v23 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v24 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v23);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v34 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v23);
    goto LABEL_193;
  }
  if ((_DWORD)v23)
  {
    v25 = (WTF::StringImpl **)WebCore::nullName;
    v26 = 16 * v23;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v25)
        {
          v27 = (*(_DWORD *)v25)++;
          v28 = *v22;
          if (v27)
          {
            *(_DWORD *)v25 = v27;
            v29 = (uint64_t)v25;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v25);
            result = WTF::fastFree(v31, v32);
            v29 = WebCore::nullName;
          }
        }
        else
        {
          v29 = 0;
          v28 = *v22;
        }
        if (v28 != v25 && (WTF::StringImpl **)((char *)*v22 + 1) != 0)
          break;
        v22 += 2;
        v25 = (WTF::StringImpl **)v29;
        v26 -= 16;
        if (!v26)
        {
          v22 = v24;
          break;
        }
      }
      v34 = v22;
      v22 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v33 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v33)
                               + 1) <= 1)
      {
        v33 += 16;
        if (v26 == v33)
        {
          v34 = v24;
          goto LABEL_72;
        }
      }
      v34 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v33);
    }
  }
  else
  {
    v34 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_72:
  if (v22)
    v22 += 2 * *((unsigned int *)v22 - 1);
  while (v34 != v22)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v34[1] + 2))(v34[1], *(_QWORD *)(v1 + 8));
    v35 = v34 + 2;
    v34 = v24;
    if (v35 != v24)
    {
      v36 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_77:
        v37 = (*(_DWORD *)v36)++;
        v38 = *v35;
        if (v37)
        {
          *(_DWORD *)v36 = v37;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v36);
          result = WTF::fastFree(v40, v41);
        }
        while (v38 == v36 || (WTF::StringImpl **)((char *)*v35 + 1) == 0)
        {
          v35 += 2;
          if (v35 == v24)
            goto LABEL_90;
          v36 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_77;
          v38 = *v35;
        }
      }
      else
      {
        while ((unint64_t)*v35 + 1 <= 1)
        {
          v35 += 2;
          if (v35 == v24)
          {
LABEL_90:
            v34 = v24;
            goto LABEL_92;
          }
        }
      }
      v34 = v35;
    }
LABEL_92:
    ;
  }
  {
    v42 = 0;
    v55 = 0;
    v43 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_195;
  }
  v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v55 = 0;
    v43 = 0;
LABEL_195:
    v44 = &v42[2 * v43];
    goto LABEL_116;
  }
  v43 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v44 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v43);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v43);
    goto LABEL_195;
  }
  if ((_DWORD)v43)
  {
    v45 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v46 = 16 * v43;
      while (1)
      {
        if (v45)
        {
          v47 = (*(_DWORD *)v45)++;
          v48 = *v42;
          if (v47)
          {
            *(_DWORD *)v45 = v47;
            v49 = (uint64_t)v45;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v45);
            result = WTF::fastFree(v51, v52);
            v49 = WebCore::nullName;
          }
        }
        else
        {
          v49 = 0;
          v48 = *v42;
        }
        if (v48 != v45 && (WTF::StringImpl **)((char *)*v42 + 1) != 0)
          break;
        v42 += 2;
        v45 = (WTF::StringImpl **)v49;
        v46 -= 16;
        if (!v46)
        {
          v42 = v44;
          break;
        }
      }
      v55 = v42;
      v42 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v53 = 0;
      v54 = 16 * v43;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v53)
                               + 1) <= 1)
      {
        v53 += 16;
        if (v54 == v53)
        {
          v55 = v44;
          goto LABEL_116;
        }
      }
      v55 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v53);
    }
  }
  else
  {
    v55 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_116:
  if (v42)
    v42 += 2 * *((unsigned int *)v42 - 1);
  while (v55 != v42)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD))*v55[1] + 2))(v55[1], *(_QWORD *)(v1 + 8));
    v56 = v55 + 2;
    v55 = v44;
    if (v56 != v44)
    {
      v57 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_121:
        v58 = (*(_DWORD *)v57)++;
        v59 = *v56;
        if (v58)
        {
          *(_DWORD *)v57 = v58;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v57);
          result = WTF::fastFree(v61, v62);
        }
        while (v59 == v57 || (WTF::StringImpl **)((char *)*v56 + 1) == 0)
        {
          v56 += 2;
          if (v56 == v44)
            goto LABEL_134;
          v57 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_121;
          v59 = *v56;
        }
      }
      else
      {
        while ((unint64_t)*v56 + 1 <= 1)
        {
          v56 += 2;
          if (v56 == v44)
          {
LABEL_134:
            v55 = v44;
            goto LABEL_136;
          }
        }
      }
      v55 = v56;
    }
LABEL_136:
    ;
  }
  {
    v63 = 0;
    v64 = 0;
    v65 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_140;
  }
  v63 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v64 = 0;
    v65 = 0;
LABEL_140:
    v66 = &v63[2 * v65];
    goto LABEL_141;
  }
  v65 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v66 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v65);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v64 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v65);
    goto LABEL_140;
  }
  if ((_DWORD)v65)
  {
    v80 = (WTF::StringImpl **)WebCore::nullName;
    v81 = 16 * v65;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v80)
        {
          v82 = (*(_DWORD *)v80)++;
          v83 = *v63;
          if (v82)
          {
            *(_DWORD *)v80 = v82;
            v84 = (uint64_t)v80;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v80);
            result = WTF::fastFree(v86, v87);
            v84 = WebCore::nullName;
          }
        }
        else
        {
          v84 = 0;
          v83 = *v63;
        }
        if (v83 != v80 && (WTF::StringImpl **)((char *)*v63 + 1) != 0)
          break;
        v63 += 2;
        v80 = (WTF::StringImpl **)v84;
        v81 -= 16;
        if (!v81)
        {
          v63 = v66;
          break;
        }
      }
      v64 = v63;
      v63 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v88 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v88)
                               + 1) <= 1)
      {
        v88 += 16;
        if (v81 == v88)
        {
          v64 = v66;
          goto LABEL_141;
        }
      }
      v64 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v88);
    }
  }
  else
  {
    v64 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_141:
  if (v63)
    v63 += 2 * *((unsigned int *)v63 - 1);
  while (v64 != v63)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v64[1] + 2))(v64[1], *(_QWORD *)(v1 + 8) + 184);
    v67 = v64 + 2;
    v64 = v66;
    if (v67 != v66)
    {
      v68 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_146:
        v69 = (*(_DWORD *)v68)++;
        v70 = *v67;
        if (v69)
        {
          *(_DWORD *)v68 = v69;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v68);
          result = WTF::fastFree(v72, v73);
        }
        while (v70 == v68 || (WTF::StringImpl **)((char *)*v67 + 1) == 0)
        {
          v67 += 2;
          if (v67 == v66)
            goto LABEL_159;
          v68 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_146;
          v70 = *v67;
        }
      }
      else
      {
        while ((unint64_t)*v67 + 1 <= 1)
        {
          v67 += 2;
          if (v67 == v66)
          {
LABEL_159:
            v64 = v66;
            goto LABEL_161;
          }
        }
      }
      v64 = v67;
    }
LABEL_161:
    ;
  }
  {
    v74 = 0;
    v78 = 0;
    v75 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_191;
  }
  v74 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v78 = 0;
    v75 = 0;
LABEL_191:
    v76 = &v74[2 * v75];
    goto LABEL_172;
  }
  v75 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v76 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v75);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v78 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v75);
    goto LABEL_191;
  }
  if ((_DWORD)v75)
  {
    v77 = 16 * v75;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v74);
      if ((result & 1) == 0 && *v74 != (WTF::StringImpl **)-1)
        break;
      v74 += 2;
      v77 -= 16;
      if (!v77)
      {
        v74 = v76;
        break;
      }
    }
    v78 = v74;
    v74 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v78 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_172:
  if (v74)
    v74 += 2 * *((unsigned int *)v74 - 1);
  while (v78 != v74)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t))*v78[1] + 2))(v78[1], *(_QWORD *)(v1 + 8) + 216);
    v79 = (char *)(v78 + 2);
    v78 = v76;
    if (v79 != (char *)v76)
    {
      v78 = (WTF::StringImpl ***)v79;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v78);
        if ((result & 1) == 0 && *v78 != (WTF::StringImpl **)-1)
          break;
        v78 += 2;
        if (v78 == v76)
        {
          v78 = v76;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::propertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl ***v45;
  uint64_t v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl ***v65;
  uint64_t v66;
  WTF::StringImpl ***v67;
  WTF::StringImpl ***v68;
  WTF::StringImpl **v69;
  int v70;
  WTF::StringImpl **v71;
  WTF *v73;
  void *v74;
  WTF::StringImpl ***v75;
  uint64_t v76;
  WTF::StringImpl ***v77;
  uint64_t v78;
  char *v79;
  WTF::StringImpl **v80;
  WTF *v81;
  void *v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  int v85;
  WTF::StringImpl **v86;
  uint64_t v87;
  WTF *v89;
  void *v90;
  uint64_t v91;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE84CC0 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)_MergedGlobals_268;
  if (!_MergedGlobals_268)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(_MergedGlobals_268 - 4);
  v9 = _MergedGlobals_268 + 16 * v8;
  if (!*(_DWORD *)(_MergedGlobals_268 - 12))
  {
    v17 = (WTF::StringImpl ***)(_MergedGlobals_268 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)_MergedGlobals_268;
    if (!_MergedGlobals_268)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)_MergedGlobals_268;
    if (_MergedGlobals_268)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_268 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (_MergedGlobals_268)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(_MergedGlobals_268 + v18);
    if (_MergedGlobals_268)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_191;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_207;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_207:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_207;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  while (v17 != v26)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_191;
    v38 = v17 + 2;
    v17 = v28;
    if (v38 != v28)
    {
      v39 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_81:
        v40 = (*(_DWORD *)v39)++;
        v41 = *v38;
        if (v40)
        {
          *(_DWORD *)v39 = v40;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
          result = WTF::fastFree(v43, v44);
        }
        while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
        {
          v38 += 2;
          if (v38 == v28)
            goto LABEL_94;
          v39 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_81;
          v41 = *v38;
        }
      }
      else
      {
        while ((unint64_t)*v38 + 1 <= 1)
        {
          v38 += 2;
          if (v38 == v28)
          {
LABEL_94:
            v17 = v28;
            goto LABEL_96;
          }
        }
      }
      v17 = v38;
    }
LABEL_96:
    ;
  }
  {
    v45 = 0;
    v17 = 0;
    v46 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_209;
  }
  v45 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v46 = 0;
LABEL_209:
    v47 = &v45[2 * v46];
    goto LABEL_121;
  }
  v46 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v47 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v46);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v46);
    goto LABEL_209;
  }
  if ((_DWORD)v46)
  {
    v48 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v49 = 16 * v46;
      while (1)
      {
        if (v48)
        {
          v50 = (*(_DWORD *)v48)++;
          v51 = *v45;
          if (v50)
          {
            *(_DWORD *)v48 = v50;
            v52 = (uint64_t)v48;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
            result = WTF::fastFree(v54, v55);
            v52 = WebCore::nullName;
          }
        }
        else
        {
          v52 = 0;
          v51 = *v45;
        }
        if (v51 != v48 && (WTF::StringImpl **)((char *)*v45 + 1) != 0)
          break;
        v45 += 2;
        v48 = (WTF::StringImpl **)v52;
        v49 -= 16;
        if (!v49)
        {
          v45 = v47;
          break;
        }
      }
      v17 = v45;
      v45 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v56 = 0;
      v57 = 16 * v46;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v56)
                               + 1) <= 1)
      {
        v56 += 16;
        if (v57 == v56)
        {
          v17 = v47;
          goto LABEL_121;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v56);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_121:
  if (v45)
    v45 += 2 * *((unsigned int *)v45 - 1);
  while (v17 != v45)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_191;
    v58 = v17 + 2;
    v17 = v47;
    if (v58 != v47)
    {
      v59 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v60 = (*(_DWORD *)v59)++;
        v61 = *v58;
        if (v60)
        {
          *(_DWORD *)v59 = v60;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
          result = WTF::fastFree(v63, v64);
        }
        while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
        {
          v58 += 2;
          if (v58 == v47)
            goto LABEL_140;
          v59 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v61 = *v58;
        }
      }
      else
      {
        while ((unint64_t)*v58 + 1 <= 1)
        {
          v58 += 2;
          if (v58 == v47)
          {
LABEL_140:
            v17 = v47;
            goto LABEL_142;
          }
        }
      }
      v17 = v58;
    }
LABEL_142:
    ;
  }
  {
    v65 = 0;
    v17 = 0;
    v66 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_146;
  }
  v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v66 = 0;
LABEL_146:
    v67 = &v65[2 * v66];
    goto LABEL_147;
  }
  v66 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v67 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v66);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v66);
    goto LABEL_146;
  }
  if ((_DWORD)v66)
  {
    v83 = (WTF::StringImpl **)WebCore::nullName;
    v84 = 16 * v66;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v83)
        {
          v85 = (*(_DWORD *)v83)++;
          v86 = *v65;
          if (v85)
          {
            *(_DWORD *)v83 = v85;
            v87 = (uint64_t)v83;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v83);
            result = WTF::fastFree(v89, v90);
            v87 = WebCore::nullName;
          }
        }
        else
        {
          v87 = 0;
          v86 = *v65;
        }
        if (v86 != v83 && (WTF::StringImpl **)((char *)*v65 + 1) != 0)
          break;
        v65 += 2;
        v83 = (WTF::StringImpl **)v87;
        v84 -= 16;
        if (!v84)
        {
          v65 = v67;
          break;
        }
      }
      v17 = v65;
      v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v91 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v91)
                               + 1) <= 1)
      {
        v91 += 16;
        if (v84 == v91)
        {
          v17 = v67;
          goto LABEL_147;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v91);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_147:
  if (v65)
    v65 += 2 * *((unsigned int *)v65 - 1);
  while (v17 != v65)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8) + 184, a2);
    if ((_DWORD)result)
      goto LABEL_191;
    v68 = v17 + 2;
    v17 = v67;
    if (v68 != v67)
    {
      v69 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_153:
        v70 = (*(_DWORD *)v69)++;
        v71 = *v68;
        if (v70)
        {
          *(_DWORD *)v69 = v70;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v69);
          result = WTF::fastFree(v73, v74);
        }
        while (v71 == v69 || (WTF::StringImpl **)((char *)*v68 + 1) == 0)
        {
          v68 += 2;
          if (v68 == v67)
            goto LABEL_166;
          v69 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_153;
          v71 = *v68;
        }
      }
      else
      {
        while ((unint64_t)*v68 + 1 <= 1)
        {
          v68 += 2;
          if (v68 == v67)
          {
LABEL_166:
            v17 = v67;
            goto LABEL_168;
          }
        }
      }
      v17 = v68;
    }
LABEL_168:
    ;
  }
  {
    v75 = 0;
    v17 = 0;
    v76 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_205;
  }
  v75 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v76 = 0;
LABEL_205:
    v77 = &v75[2 * v76];
    goto LABEL_179;
  }
  v76 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v77 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v76);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v76);
    goto LABEL_205;
  }
  if ((_DWORD)v76)
  {
    v78 = 16 * v76;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v75);
      if ((result & 1) == 0 && *v75 != (WTF::StringImpl **)-1)
        break;
      v75 += 2;
      v78 -= 16;
      if (!v78)
      {
        v75 = v77;
        break;
      }
    }
    v17 = v75;
    v75 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_179:
  if (v75)
    v75 += 2 * *((unsigned int *)v75 - 1);
  if (v75 != v17)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 5))(v17[1], *(_QWORD *)(v4 + 8) + 216, a2);
      if ((_DWORD)result)
        break;
      v79 = (char *)(v17 + 2);
      v17 = v77;
      if (v79 != (char *)v77)
      {
        v17 = (WTF::StringImpl ***)v79;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v17);
          if ((result & 1) == 0 && *v17 != (WTF::StringImpl **)-1)
            break;
          v17 += 2;
          if (v17 == v77)
          {
            v17 = v77;
            break;
          }
        }
      }
      if (v17 == v75)
        return result;
    }
LABEL_191:
    v80 = *v17;
    if (*v17)
      ++*(_DWORD *)v80;
    result = *a3;
    *a3 = (uint64_t)v80;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v81, v82);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::animatedPropertyAttributeName@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  WTF::StringImpl **v6;
  WTF::StringImpl ***v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF *v15;
  void *v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  WTF::StringImpl ***v19;
  WTF::StringImpl **v20;
  int v21;
  WTF::StringImpl **v22;
  WTF *v24;
  void *v25;
  WTF::StringImpl ***v26;
  uint64_t v27;
  WTF::StringImpl ***v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF *v35;
  void *v36;
  uint64_t v37;
  WTF::StringImpl ***v38;
  WTF::StringImpl **v39;
  int v40;
  WTF::StringImpl **v41;
  WTF *v43;
  void *v44;
  WTF::StringImpl ***v45;
  uint64_t v46;
  WTF::StringImpl ***v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  int v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl ***v58;
  WTF::StringImpl **v59;
  int v60;
  WTF::StringImpl **v61;
  WTF *v63;
  void *v64;
  WTF::StringImpl ***v65;
  uint64_t v66;
  WTF::StringImpl ***v67;
  WTF::StringImpl ***v68;
  WTF::StringImpl **v69;
  int v70;
  WTF::StringImpl **v71;
  WTF *v73;
  void *v74;
  WTF::StringImpl ***v75;
  uint64_t v76;
  WTF::StringImpl ***v77;
  uint64_t v78;
  char *v79;
  WTF::StringImpl **v80;
  WTF *v81;
  void *v82;
  WTF::StringImpl **v83;
  uint64_t v84;
  int v85;
  WTF::StringImpl **v86;
  uint64_t v87;
  WTF *v89;
  void *v90;
  uint64_t v91;

  v4 = result;
  v6 = (WTF::StringImpl **)WebCore::nullName;
  if (WebCore::nullName)
    ++*(_DWORD *)WebCore::nullName;
  *a3 = (uint64_t)v6;
  if ((byte_1ECE84CC0 & 1) == 0)
  {
    v7 = 0;
    v17 = 0;
    v8 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
LABEL_22:
    v9 = (uint64_t)&v7[2 * v8];
    if (!v7)
      goto LABEL_33;
    goto LABEL_32;
  }
  v7 = (WTF::StringImpl ***)_MergedGlobals_268;
  if (!_MergedGlobals_268)
  {
    v17 = 0;
    v8 = 0;
    goto LABEL_22;
  }
  v8 = *(unsigned int *)(_MergedGlobals_268 - 4);
  v9 = _MergedGlobals_268 + 16 * v8;
  if (!*(_DWORD *)(_MergedGlobals_268 - 12))
  {
    v17 = (WTF::StringImpl ***)(_MergedGlobals_268 + 16 * v8);
    goto LABEL_22;
  }
  if (!(_DWORD)v8)
  {
    v17 = (WTF::StringImpl ***)_MergedGlobals_268;
    if (!_MergedGlobals_268)
      goto LABEL_33;
LABEL_32:
    v7 += 2 * *((unsigned int *)v7 - 1);
    goto LABEL_33;
  }
  v10 = 16 * v8;
  if (v6)
  {
    while (1)
    {
      if (v6)
      {
        v11 = (*(_DWORD *)v6)++;
        v12 = *v7;
        if (v11)
        {
          *(_DWORD *)v6 = v11;
          v13 = (uint64_t)v6;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v6);
          result = WTF::fastFree(v15, v16);
          v13 = WebCore::nullName;
        }
      }
      else
      {
        v13 = 0;
        v12 = *v7;
      }
      if (v12 != v6 && (WTF::StringImpl **)((char *)*v7 + 1) != 0)
        break;
      v7 += 2;
      v6 = (WTF::StringImpl **)v13;
      v10 -= 16;
      if (!v10)
      {
        v7 = (WTF::StringImpl ***)v9;
        break;
      }
    }
    v17 = v7;
    v7 = (WTF::StringImpl ***)_MergedGlobals_268;
    if (_MergedGlobals_268)
      goto LABEL_32;
  }
  else
  {
    v18 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_268 + v18) + 1) <= 1)
    {
      v18 += 16;
      if (v10 == v18)
      {
        v17 = (WTF::StringImpl ***)v9;
        if (_MergedGlobals_268)
          goto LABEL_32;
        goto LABEL_33;
      }
    }
    v17 = (WTF::StringImpl ***)(_MergedGlobals_268 + v18);
    if (_MergedGlobals_268)
      goto LABEL_32;
  }
LABEL_33:
  while (v17 != v7)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_191;
    v19 = v17 + 2;
    v17 = (WTF::StringImpl ***)v9;
    if (v19 != (WTF::StringImpl ***)v9)
    {
      v20 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_37:
        v21 = (*(_DWORD *)v20)++;
        v22 = *v19;
        if (v21)
        {
          *(_DWORD *)v20 = v21;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v20);
          result = WTF::fastFree(v24, v25);
        }
        while (v22 == v20 || (WTF::StringImpl **)((char *)*v19 + 1) == 0)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
            goto LABEL_50;
          v20 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_37;
          v22 = *v19;
        }
      }
      else
      {
        while ((unint64_t)*v19 + 1 <= 1)
        {
          v19 += 2;
          if (v19 == (WTF::StringImpl ***)v9)
          {
LABEL_50:
            v17 = (WTF::StringImpl ***)v9;
            goto LABEL_52;
          }
        }
      }
      v17 = v19;
    }
LABEL_52:
    ;
  }
  {
    v26 = 0;
    v17 = 0;
    v27 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_207;
  }
  v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v27 = 0;
LABEL_207:
    v28 = &v26[2 * v27];
    goto LABEL_75;
  }
  v27 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v28 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v27);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v27);
    goto LABEL_207;
  }
  if ((_DWORD)v27)
  {
    v29 = (WTF::StringImpl **)WebCore::nullName;
    v30 = 16 * v27;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v29)
        {
          v31 = (*(_DWORD *)v29)++;
          v32 = *v26;
          if (v31)
          {
            *(_DWORD *)v29 = v31;
            v33 = (uint64_t)v29;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v29);
            result = WTF::fastFree(v35, v36);
            v33 = WebCore::nullName;
          }
        }
        else
        {
          v33 = 0;
          v32 = *v26;
        }
        if (v32 != v29 && (WTF::StringImpl **)((char *)*v26 + 1) != 0)
          break;
        v26 += 2;
        v29 = (WTF::StringImpl **)v33;
        v30 -= 16;
        if (!v30)
        {
          v26 = v28;
          break;
        }
      }
      v17 = v26;
      v26 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v37 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v37)
                               + 1) <= 1)
      {
        v37 += 16;
        if (v30 == v37)
        {
          v17 = v28;
          goto LABEL_75;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v37);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_75:
  if (v26)
    v26 += 2 * *((unsigned int *)v26 - 1);
  while (v17 != v26)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_191;
    v38 = v17 + 2;
    v17 = v28;
    if (v38 != v28)
    {
      v39 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_81:
        v40 = (*(_DWORD *)v39)++;
        v41 = *v38;
        if (v40)
        {
          *(_DWORD *)v39 = v40;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v39);
          result = WTF::fastFree(v43, v44);
        }
        while (v41 == v39 || (WTF::StringImpl **)((char *)*v38 + 1) == 0)
        {
          v38 += 2;
          if (v38 == v28)
            goto LABEL_94;
          v39 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_81;
          v41 = *v38;
        }
      }
      else
      {
        while ((unint64_t)*v38 + 1 <= 1)
        {
          v38 += 2;
          if (v38 == v28)
          {
LABEL_94:
            v17 = v28;
            goto LABEL_96;
          }
        }
      }
      v17 = v38;
    }
LABEL_96:
    ;
  }
  {
    v45 = 0;
    v17 = 0;
    v46 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_209;
  }
  v45 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v46 = 0;
LABEL_209:
    v47 = &v45[2 * v46];
    goto LABEL_121;
  }
  v46 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v47 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v46);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v46);
    goto LABEL_209;
  }
  if ((_DWORD)v46)
  {
    v48 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v49 = 16 * v46;
      while (1)
      {
        if (v48)
        {
          v50 = (*(_DWORD *)v48)++;
          v51 = *v45;
          if (v50)
          {
            *(_DWORD *)v48 = v50;
            v52 = (uint64_t)v48;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v48);
            result = WTF::fastFree(v54, v55);
            v52 = WebCore::nullName;
          }
        }
        else
        {
          v52 = 0;
          v51 = *v45;
        }
        if (v51 != v48 && (WTF::StringImpl **)((char *)*v45 + 1) != 0)
          break;
        v45 += 2;
        v48 = (WTF::StringImpl **)v52;
        v49 -= 16;
        if (!v49)
        {
          v45 = v47;
          break;
        }
      }
      v17 = v45;
      v45 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v56 = 0;
      v57 = 16 * v46;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v56)
                               + 1) <= 1)
      {
        v56 += 16;
        if (v57 == v56)
        {
          v17 = v47;
          goto LABEL_121;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v56);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_121:
  if (v45)
    v45 += 2 * *((unsigned int *)v45 - 1);
  while (v17 != v45)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, _QWORD, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8), a2);
    if ((_DWORD)result)
      goto LABEL_191;
    v58 = v17 + 2;
    v17 = v47;
    if (v58 != v47)
    {
      v59 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_127:
        v60 = (*(_DWORD *)v59)++;
        v61 = *v58;
        if (v60)
        {
          *(_DWORD *)v59 = v60;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v59);
          result = WTF::fastFree(v63, v64);
        }
        while (v61 == v59 || (WTF::StringImpl **)((char *)*v58 + 1) == 0)
        {
          v58 += 2;
          if (v58 == v47)
            goto LABEL_140;
          v59 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_127;
          v61 = *v58;
        }
      }
      else
      {
        while ((unint64_t)*v58 + 1 <= 1)
        {
          v58 += 2;
          if (v58 == v47)
          {
LABEL_140:
            v17 = v47;
            goto LABEL_142;
          }
        }
      }
      v17 = v58;
    }
LABEL_142:
    ;
  }
  {
    v65 = 0;
    v17 = 0;
    v66 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_146;
  }
  v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v66 = 0;
LABEL_146:
    v67 = &v65[2 * v66];
    goto LABEL_147;
  }
  v66 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v67 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v66);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v66);
    goto LABEL_146;
  }
  if ((_DWORD)v66)
  {
    v83 = (WTF::StringImpl **)WebCore::nullName;
    v84 = 16 * v66;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v83)
        {
          v85 = (*(_DWORD *)v83)++;
          v86 = *v65;
          if (v85)
          {
            *(_DWORD *)v83 = v85;
            v87 = (uint64_t)v83;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v83);
            result = WTF::fastFree(v89, v90);
            v87 = WebCore::nullName;
          }
        }
        else
        {
          v87 = 0;
          v86 = *v65;
        }
        if (v86 != v83 && (WTF::StringImpl **)((char *)*v65 + 1) != 0)
          break;
        v65 += 2;
        v83 = (WTF::StringImpl **)v87;
        v84 -= 16;
        if (!v84)
        {
          v65 = v67;
          break;
        }
      }
      v17 = v65;
      v65 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v91 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v91)
                               + 1) <= 1)
      {
        v91 += 16;
        if (v84 == v91)
        {
          v17 = v67;
          goto LABEL_147;
        }
      }
      v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v91);
    }
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_147:
  if (v65)
    v65 += 2 * *((unsigned int *)v65 - 1);
  while (v17 != v65)
  {
    result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8) + 184, a2);
    if ((_DWORD)result)
      goto LABEL_191;
    v68 = v17 + 2;
    v17 = v67;
    if (v68 != v67)
    {
      v69 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_153:
        v70 = (*(_DWORD *)v69)++;
        v71 = *v68;
        if (v70)
        {
          *(_DWORD *)v69 = v70;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v69);
          result = WTF::fastFree(v73, v74);
        }
        while (v71 == v69 || (WTF::StringImpl **)((char *)*v68 + 1) == 0)
        {
          v68 += 2;
          if (v68 == v67)
            goto LABEL_166;
          v69 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_153;
          v71 = *v68;
        }
      }
      else
      {
        while ((unint64_t)*v68 + 1 <= 1)
        {
          v68 += 2;
          if (v68 == v67)
          {
LABEL_166:
            v17 = v67;
            goto LABEL_168;
          }
        }
      }
      v17 = v68;
    }
LABEL_168:
    ;
  }
  {
    v75 = 0;
    v17 = 0;
    v76 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_205;
  }
  v75 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v17 = 0;
    v76 = 0;
LABEL_205:
    v77 = &v75[2 * v76];
    goto LABEL_179;
  }
  v76 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v77 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v76);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v17 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v76);
    goto LABEL_205;
  }
  if ((_DWORD)v76)
  {
    v78 = 16 * v76;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v75);
      if ((result & 1) == 0 && *v75 != (WTF::StringImpl **)-1)
        break;
      v75 += 2;
      v78 -= 16;
      if (!v78)
      {
        v75 = v77;
        break;
      }
    }
    v17 = v75;
    v75 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v17 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_179:
  if (v75)
    v75 += 2 * *((unsigned int *)v75 - 1);
  if (v75 != v17)
  {
    while (1)
    {
      result = (*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*v17[1] + 6))(v17[1], *(_QWORD *)(v4 + 8) + 216, a2);
      if ((_DWORD)result)
        break;
      v79 = (char *)(v17 + 2);
      v17 = v77;
      if (v79 != (char *)v77)
      {
        v17 = (WTF::StringImpl ***)v79;
        while (1)
        {
          result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v17);
          if ((result & 1) == 0 && *v17 != (WTF::StringImpl **)-1)
            break;
          v17 += 2;
          if (v17 == v77)
          {
            v17 = v77;
            break;
          }
        }
      }
      if (v17 == v75)
        return result;
    }
LABEL_191:
    v80 = *v17;
    if (*v17)
      ++*(_DWORD *)v80;
    result = *a3;
    *a3 = (uint64_t)v80;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl((WTF::StringImpl **)result);
        return WTF::fastFree(v81, v82);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::setAnimatedPropertyDirty(uint64_t a1, WebCore::QualifiedName::QualifiedNameImpl **a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl ***v7;
  WTF::StringImpl **result;
  uint64_t v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl ***v11;
  WTF::StringImpl ***v12;
  WTF::StringImpl ***v13;
  WTF::StringImpl **v14;

  if ((byte_1ECE84CC0 & 1) != 0)
  {
    v6 = _MergedGlobals_268;
    if (!_MergedGlobals_268)
      goto LABEL_6;
    v7 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a2);
    v6 = _MergedGlobals_268;
    if (v7)
      goto LABEL_7;
    if (_MergedGlobals_268)
      v7 = (WTF::StringImpl ***)(_MergedGlobals_268 + 16 * *(unsigned int *)(_MergedGlobals_268 - 4));
    else
LABEL_6:
      v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
LABEL_7:
  if ((byte_1ECE84CC0 & 1) != 0)
  {
    if (v6)
      v6 += 16 * *(unsigned int *)(v6 - 4);
  }
  else
  {
    v6 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
  if ((WTF::StringImpl ***)v6 != v7)
  {
    result = v7[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a2);
  if (result)
    goto LABEL_13;
  {
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_48;
    v11 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v10 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v11)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v11 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    else
LABEL_48:
      v11 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v10)
      v10 += 2 * *((unsigned int *)v10 - 1);
  }
  else
  {
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v10 != v11)
  {
    result = v11[1];
    if (result)
    {
LABEL_13:
      v9 = *(_QWORD *)(a1 + 8);
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v9, a3);
    }
  }
  {
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_26:
      v13 = 0;
      goto LABEL_27;
    }
    v13 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a2);
    v12 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v13)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_26;
      v13 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v12 = 0;
    v13 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_27:
  {
    if (v12)
      v12 += 2 * *((unsigned int *)v12 - 1);
  }
  else
  {
    v12 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v12 != v13)
  {
    result = v13[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 184;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v9, a3);
    }
  }
  {
    v14 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_45;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a2);
    v14 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_36;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_45:
      result = 0;
  }
  else
  {
    v14 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_36:
  {
    if (v14)
      v14 += 2 * *((unsigned int *)v14 - 1);
  }
  else
  {
    v14 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v14 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
      v9 = *(_QWORD *)(a1 + 8) + 216;
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **, uint64_t, uint64_t))*result + 7))(result, v9, a3);
    }
  }
  return result;
}

WTF::StringImpl **WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::synchronize@<X0>(WebCore::QualifiedName::QualifiedNameImpl **a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  WTF::StringImpl ***v5;
  WTF::StringImpl **result;
  WTF::StringImpl ***v7;
  WTF::StringImpl ***v8;
  WTF::StringImpl ***v9;
  WTF::StringImpl ***v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  char v13;

  *a2 = 0;
  a2[8] = 0;
  if ((byte_1ECE84CC0 & 1) != 0)
  {
    v4 = _MergedGlobals_268;
    if (!_MergedGlobals_268)
      goto LABEL_6;
    v5 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGAElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>(a1);
    v4 = _MergedGlobals_268;
    if (v5)
      goto LABEL_7;
    if (_MergedGlobals_268)
      v5 = (WTF::StringImpl ***)(_MergedGlobals_268 + 16 * *(unsigned int *)(_MergedGlobals_268 - 4));
    else
LABEL_6:
      v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
LABEL_7:
  if ((byte_1ECE84CC0 & 1) != 0)
  {
    if (v4)
      v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v4 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
  }
  if ((WTF::StringImpl ***)v4 != v5)
  {
    result = v5[1];
    if (result)
      goto LABEL_13;
  }
  result = WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::findAccessor((WTF::StringImpl ***)a1);
  if (result)
    goto LABEL_13;
  {
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_48;
    v8 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGElement> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGElement> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v7 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (v8)
      goto LABEL_20;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      v8 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                               + 16
                               * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                 - 1));
    else
LABEL_48:
      v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_20:
  {
    if (v7)
      v7 += 2 * *((unsigned int *)v7 - 1);
  }
  else
  {
    v7 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v7 != v8)
  {
    result = v8[1];
    if (result)
      goto LABEL_13;
  }
  {
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
    {
LABEL_26:
      v10 = 0;
      goto LABEL_27;
    }
    v10 = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGTests> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGTests> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, (uint64_t *)a1);
    v9 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!v10)
    {
      if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
        goto LABEL_26;
      v10 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + 16
                                * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  - 1));
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_27:
  {
    if (v9)
      v9 += 2 * *((unsigned int *)v9 - 1);
  }
  else
  {
    v9 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v9 != v10)
  {
    result = v10[1];
    if (result)
      goto LABEL_13;
  }
  {
    v11 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      goto LABEL_45;
    result = (WTF::StringImpl **)WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>>,WebCore::SVGAttributeHashTranslator,WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::QualifiedName,WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*,WebCore::SVGAttributeHashTranslator,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WebCore::SVGMemberAccessor<WebCore::SVGURIReference> const*>,WTF::HashTableTraits>::KeyValuePairTraits,WebCore::SVGAttributeHashTranslator>,WebCore::QualifiedName>((uint64_t *)&WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap, a1);
    v11 = (WTF::StringImpl **)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    if (result)
      goto LABEL_36;
    if (WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
      result = (WTF::StringImpl **)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                  + 16
                                  * *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                    - 1));
    else
LABEL_45:
      result = 0;
  }
  else
  {
    v11 = 0;
    result = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
LABEL_36:
  {
    if (v11)
      v11 += 2 * *((unsigned int *)v11 - 1);
  }
  else
  {
    v11 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
  }
  if (v11 != result)
  {
    result = (WTF::StringImpl **)result[1];
    if (result)
    {
LABEL_13:
      result = (WTF::StringImpl **)(*((_QWORD *(**)(uint64_t *__return_ptr))*result + 8))(&v12);
      if (v13)
      {
        *(_QWORD *)a2 = v12;
        a2[8] = 1;
      }
    }
  }
  return result;
}

uint64_t WebCore::SVGPropertyOwnerRegistry<WebCore::SVGAElement,WebCore::SVGGraphicsElement,WebCore::SVGURIReference>::synchronizeAllAttributes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  WTF::StringImpl ***v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  int v9;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl ***v18;
  WTF::StringImpl **v19;
  int v20;
  WTF::StringImpl **v21;
  WTF *v23;
  void *v24;
  WTF::StringImpl ***v25;
  uint64_t v26;
  WTF::StringImpl ***v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  int v30;
  WTF::StringImpl **v31;
  uint64_t v32;
  WTF *v34;
  void *v35;
  uint64_t v36;
  WTF::StringImpl ***v37;
  WTF::StringImpl *v38;
  WTF::StringImpl ***v39;
  WTF::StringImpl **v40;
  int v41;
  WTF::StringImpl **v42;
  WTF *v44;
  void *v45;
  WTF::StringImpl ***v46;
  uint64_t v47;
  WTF::StringImpl ***v48;
  WTF::StringImpl **v49;
  uint64_t v50;
  int v51;
  WTF::StringImpl **v52;
  uint64_t v53;
  WTF *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl ***v59;
  WTF::StringImpl *v60;
  WTF::StringImpl ***v61;
  WTF::StringImpl **v62;
  int v63;
  WTF::StringImpl **v64;
  WTF *v66;
  void *v67;
  WTF::StringImpl ***v68;
  WTF::StringImpl ***v69;
  uint64_t v70;
  WTF::StringImpl ***v71;
  WTF::StringImpl *v72;
  WTF::StringImpl ***v73;
  WTF::StringImpl **v74;
  int v75;
  WTF::StringImpl **v76;
  WTF *v78;
  void *v79;
  WTF::StringImpl ***v80;
  uint64_t v81;
  WTF::StringImpl ***v82;
  uint64_t v83;
  WTF::StringImpl ***v84;
  WTF::StringImpl *v85;
  char *v86;
  WTF::StringImpl **v87;
  uint64_t v88;
  int v89;
  WTF::StringImpl **v90;
  uint64_t v91;
  WTF *v93;
  void *v94;
  uint64_t v95;
  _BYTE v96[24];
  WTF::StringImpl *v97;
  char v98;

  v2 = result;
  *a2 = 0;
  if ((byte_1ECE84CC0 & 1) == 0)
  {
    v4 = 0;
    v15 = 0;
    v5 = 0;
    _MergedGlobals_268 = 0;
    byte_1ECE84CC0 = 1;
LABEL_20:
    v6 = (uint64_t)&v4[2 * v5];
    if (!v4)
      goto LABEL_31;
    goto LABEL_30;
  }
  v4 = (WTF::StringImpl ***)_MergedGlobals_268;
  if (!_MergedGlobals_268)
  {
    v15 = 0;
    v5 = 0;
    goto LABEL_20;
  }
  v5 = *(unsigned int *)(_MergedGlobals_268 - 4);
  v6 = _MergedGlobals_268 + 16 * v5;
  if (!*(_DWORD *)(_MergedGlobals_268 - 12))
  {
    v15 = _MergedGlobals_268 + 16 * v5;
    goto LABEL_20;
  }
  if (!(_DWORD)v5)
  {
    v15 = _MergedGlobals_268;
    if (!_MergedGlobals_268)
      goto LABEL_31;
LABEL_30:
    v4 += 2 * *((unsigned int *)v4 - 1);
    goto LABEL_31;
  }
  v7 = (WTF::StringImpl **)WebCore::nullName;
  v8 = 16 * v5;
  if (WebCore::nullName)
  {
    while (1)
    {
      if (v7)
      {
        v9 = (*(_DWORD *)v7)++;
        v10 = *v4;
        if (v9)
        {
          *(_DWORD *)v7 = v9;
          v11 = (uint64_t)v7;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v7);
          result = WTF::fastFree(v13, v14);
          v11 = WebCore::nullName;
        }
      }
      else
      {
        v11 = 0;
        v10 = *v4;
      }
      if (v10 != v7 && (WTF::StringImpl **)((char *)*v4 + 1) != 0)
        break;
      v4 += 2;
      v7 = (WTF::StringImpl **)v11;
      v8 -= 16;
      if (!v8)
      {
        v4 = (WTF::StringImpl ***)v6;
        break;
      }
    }
    v15 = (uint64_t)v4;
    v4 = (WTF::StringImpl ***)_MergedGlobals_268;
    if (_MergedGlobals_268)
      goto LABEL_30;
  }
  else
  {
    v16 = 0;
    while ((unint64_t)(*(_QWORD *)(_MergedGlobals_268 + v16) + 1) <= 1)
    {
      v16 += 16;
      if (v8 == v16)
      {
        v15 = v6;
        if (_MergedGlobals_268)
          goto LABEL_30;
        goto LABEL_31;
      }
    }
    v15 = _MergedGlobals_268 + v16;
    if (_MergedGlobals_268)
      goto LABEL_30;
  }
LABEL_31:
  while ((WTF::StringImpl ***)v15 != v4)
  {
    result = (uint64_t)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v15 + 8)
                                                                                                + 64))(&v97, *(_QWORD *)(v15 + 8), *(_QWORD *)(v2 + 8));
    if (v98)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v15, (WTF::StringImpl ***)&v97, (uint64_t)v96);
      if (v98)
      {
        result = (uint64_t)v97;
        v97 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v18 = (WTF::StringImpl ***)(v15 + 16);
    v15 = v6;
    if (v18 != (WTF::StringImpl ***)v6)
    {
      v19 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_39:
        v20 = (*(_DWORD *)v19)++;
        v21 = *v18;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v19);
          result = WTF::fastFree(v23, v24);
        }
        while (v21 == v19 || (WTF::StringImpl **)((char *)*v18 + 1) == 0)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
            goto LABEL_52;
          v19 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_39;
          v21 = *v18;
        }
      }
      else
      {
        while ((unint64_t)*v18 + 1 <= 1)
        {
          v18 += 2;
          if (v18 == (WTF::StringImpl ***)v6)
          {
LABEL_52:
            v15 = v6;
            goto LABEL_54;
          }
        }
      }
      v15 = (uint64_t)v18;
    }
LABEL_54:
    ;
  }
  {
    v25 = 0;
    v37 = 0;
    v26 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_228;
  }
  v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v37 = 0;
    v26 = 0;
LABEL_228:
    v27 = &v25[2 * v26];
    goto LABEL_79;
  }
  v26 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v27 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v26);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v26);
    goto LABEL_228;
  }
  if ((_DWORD)v26)
  {
    v28 = (WTF::StringImpl **)WebCore::nullName;
    v29 = 16 * v26;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v28)
        {
          v30 = (*(_DWORD *)v28)++;
          v31 = *v25;
          if (v30)
          {
            *(_DWORD *)v28 = v30;
            v32 = (uint64_t)v28;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v28);
            result = WTF::fastFree(v34, v35);
            v32 = WebCore::nullName;
          }
        }
        else
        {
          v32 = 0;
          v31 = *v25;
        }
        if (v31 != v28 && (WTF::StringImpl **)((char *)*v25 + 1) != 0)
          break;
        v25 += 2;
        v28 = (WTF::StringImpl **)v32;
        v29 -= 16;
        if (!v29)
        {
          v25 = v27;
          break;
        }
      }
      v37 = v25;
      v25 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v36 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v36)
                               + 1) <= 1)
      {
        v36 += 16;
        if (v29 == v36)
        {
          v37 = v27;
          goto LABEL_79;
        }
      }
      v37 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v36);
    }
  }
  else
  {
    v37 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGGraphicsElement,WebCore::SVGElement,WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_79:
  if (v25)
    v25 += 2 * *((unsigned int *)v25 - 1);
  while (v37 != v25)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v37[1] + 8))(&v97, v37[1], *(_QWORD *)(v2 + 8));
    if (v98)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v37, (WTF::StringImpl ***)&v97, (uint64_t)v96);
      if (v98)
      {
        result = (uint64_t)v97;
        v97 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v38);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v39 = v37 + 2;
    v37 = v27;
    if (v39 != v27)
    {
      v40 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_89:
        v41 = (*(_DWORD *)v40)++;
        v42 = *v39;
        if (v41)
        {
          *(_DWORD *)v40 = v41;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v40);
          result = WTF::fastFree(v44, v45);
        }
        while (v42 == v40 || (WTF::StringImpl **)((char *)*v39 + 1) == 0)
        {
          v39 += 2;
          if (v39 == v27)
            goto LABEL_102;
          v40 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_89;
          v42 = *v39;
        }
      }
      else
      {
        while ((unint64_t)*v39 + 1 <= 1)
        {
          v39 += 2;
          if (v39 == v27)
          {
LABEL_102:
            v37 = v27;
            goto LABEL_104;
          }
        }
      }
      v37 = v39;
    }
LABEL_104:
    ;
  }
  {
    v46 = 0;
    v59 = 0;
    v47 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_230;
  }
  v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v59 = 0;
    v47 = 0;
LABEL_230:
    v48 = &v46[2 * v47];
    goto LABEL_130;
  }
  v47 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v48 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v47);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v59 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v47);
    goto LABEL_230;
  }
  if ((_DWORD)v47)
  {
    v49 = (WTF::StringImpl **)WebCore::nullName;
    if (WebCore::nullName)
    {
      v50 = 16 * v47;
      while (1)
      {
        if (v49)
        {
          v51 = (*(_DWORD *)v49)++;
          v52 = *v46;
          if (v51)
          {
            *(_DWORD *)v49 = v51;
            v53 = (uint64_t)v49;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v49);
            result = WTF::fastFree(v55, v56);
            v53 = WebCore::nullName;
          }
        }
        else
        {
          v53 = 0;
          v52 = *v46;
        }
        if (v52 != v49 && (WTF::StringImpl **)((char *)*v46 + 1) != 0)
          break;
        v46 += 2;
        v49 = (WTF::StringImpl **)v53;
        v50 -= 16;
        if (!v50)
        {
          v46 = v48;
          break;
        }
      }
      v59 = v46;
      v46 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v57 = 0;
      v58 = 16 * v47;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v57)
                               + 1) <= 1)
      {
        v57 += 16;
        if (v58 == v57)
        {
          v59 = v48;
          goto LABEL_130;
        }
      }
      v59 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v57);
    }
  }
  else
  {
    v59 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGElement>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_130:
  if (v46)
    v46 += 2 * *((unsigned int *)v46 - 1);
  while (v59 != v46)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, _QWORD))*v59[1] + 8))(&v97, v59[1], *(_QWORD *)(v2 + 8));
    if (v98)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v59, (WTF::StringImpl ***)&v97, (uint64_t)v96);
      if (v98)
      {
        result = (uint64_t)v97;
        v97 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v60);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v61 = v59 + 2;
    v59 = v48;
    if (v61 != v48)
    {
      v62 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_140:
        v63 = (*(_DWORD *)v62)++;
        v64 = *v61;
        if (v63)
        {
          *(_DWORD *)v62 = v63;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v62);
          result = WTF::fastFree(v66, v67);
        }
        while (v64 == v62 || (WTF::StringImpl **)((char *)*v61 + 1) == 0)
        {
          v61 += 2;
          if (v61 == v48)
            goto LABEL_153;
          v62 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_140;
          v64 = *v61;
        }
      }
      else
      {
        while ((unint64_t)*v61 + 1 <= 1)
        {
          v61 += 2;
          if (v61 == v48)
          {
LABEL_153:
            v59 = v48;
            goto LABEL_155;
          }
        }
      }
      v59 = v61;
    }
LABEL_155:
    ;
  }
  {
    v68 = 0;
    v69 = 0;
    v70 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_161;
  }
  v68 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v69 = 0;
    v70 = 0;
LABEL_161:
    v71 = &v68[2 * v70];
    goto LABEL_162;
  }
  v70 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v71 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v70);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v69 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v70);
    goto LABEL_161;
  }
  if ((_DWORD)v70)
  {
    v87 = (WTF::StringImpl **)WebCore::nullName;
    v88 = 16 * v70;
    if (WebCore::nullName)
    {
      while (1)
      {
        if (v87)
        {
          v89 = (*(_DWORD *)v87)++;
          v90 = *v68;
          if (v89)
          {
            *(_DWORD *)v87 = v89;
            v91 = (uint64_t)v87;
          }
          else
          {
            WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v87);
            result = WTF::fastFree(v93, v94);
            v91 = WebCore::nullName;
          }
        }
        else
        {
          v91 = 0;
          v90 = *v68;
        }
        if (v90 != v87 && (WTF::StringImpl **)((char *)*v68 + 1) != 0)
          break;
        v68 += 2;
        v87 = (WTF::StringImpl **)v91;
        v88 -= 16;
        if (!v88)
        {
          v68 = v71;
          break;
        }
      }
      v69 = v68;
      v68 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
    }
    else
    {
      v95 = 0;
      while ((unint64_t)(*(_QWORD *)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                           + v95)
                               + 1) <= 1)
      {
        v95 += 16;
        if (v88 == v95)
        {
          v69 = v71;
          goto LABEL_162;
        }
      }
      v69 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                                + v95);
    }
  }
  else
  {
    v69 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGTests>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_162:
  if (v68)
    v68 += 2 * *((unsigned int *)v68 - 1);
  while (v69 != v68)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v69[1]
                       + 8))(&v97, v69[1], *(_QWORD *)(v2 + 8) + 184);
    if (v98)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v69, (WTF::StringImpl ***)&v97, (uint64_t)v96);
      if (v98)
      {
        result = (uint64_t)v97;
        v97 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v72);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v73 = v69 + 2;
    v69 = v71;
    if (v73 != v71)
    {
      v74 = (WTF::StringImpl **)WebCore::nullName;
      if (WebCore::nullName)
      {
LABEL_172:
        v75 = (*(_DWORD *)v74)++;
        v76 = *v73;
        if (v75)
        {
          *(_DWORD *)v74 = v75;
        }
        else
        {
          WebCore::QualifiedName::QualifiedNameImpl::~QualifiedNameImpl(v74);
          result = WTF::fastFree(v78, v79);
        }
        while (v76 == v74 || (WTF::StringImpl **)((char *)*v73 + 1) == 0)
        {
          v73 += 2;
          if (v73 == v71)
            goto LABEL_185;
          v74 = (WTF::StringImpl **)WebCore::nullName;
          if (WebCore::nullName)
            goto LABEL_172;
          v76 = *v73;
        }
      }
      else
      {
        while ((unint64_t)*v73 + 1 <= 1)
        {
          v73 += 2;
          if (v73 == v71)
          {
LABEL_185:
            v69 = v71;
            goto LABEL_187;
          }
        }
      }
      v69 = v73;
    }
LABEL_187:
    ;
  }
  {
    v80 = 0;
    v84 = 0;
    v81 = 0;
    WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap = 0;
    goto LABEL_226;
  }
  v80 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  if (!WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap)
  {
    v84 = 0;
    v81 = 0;
LABEL_226:
    v82 = &v80[2 * v81];
    goto LABEL_200;
  }
  v81 = *((unsigned int *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 1);
  v82 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                            + 16 * v81);
  if (!*((_DWORD *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
        - 3))
  {
    v84 = (WTF::StringImpl ***)((char *)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap
                              + 16 * v81);
    goto LABEL_226;
  }
  if ((_DWORD)v81)
  {
    v83 = 16 * v81;
    while (1)
    {
      result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v80);
      if ((result & 1) == 0 && *v80 != (WTF::StringImpl **)-1)
        break;
      v80 += 2;
      v83 -= 16;
      if (!v83)
      {
        v80 = v82;
        break;
      }
    }
    v84 = v80;
    v80 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
  else
  {
    v84 = (WTF::StringImpl ***)WebCore::SVGPropertyOwnerRegistry<WebCore::SVGURIReference>::attributeNameToAccessorMap(void)::attributeNameToAccessorMap;
  }
LABEL_200:
  if (v80)
    v80 += 2 * *((unsigned int *)v80 - 1);
  while (v84 != v80)
  {
    result = (uint64_t)(*((_QWORD *(**)(WTF::StringImpl **__return_ptr, WTF::StringImpl **, uint64_t))*v84[1]
                       + 8))(&v97, v84[1], *(_QWORD *)(v2 + 8) + 216);
    if (v98)
    {
      result = WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(a2, (WebCore::QualifiedName::QualifiedNameImpl **)v84, (WTF::StringImpl ***)&v97, (uint64_t)v96);
      if (v98)
      {
        result = (uint64_t)v97;
        v97 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v85);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    v86 = (char *)(v84 + 2);
    v84 = v82;
    if (v86 != (char *)v82)
    {
      v84 = (WTF::StringImpl ***)v86;
      while (1)
      {
        result = WTF::HashTable<WebCore::QualifiedName,WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::QualifiedName,WTF::String>>,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashMap<WebCore::QualifiedName,WTF::String,WTF::DefaultHash<WebCore::QualifiedName>,WTF::HashTraits<WebCore::QualifiedName>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::QualifiedName>>::isEmptyBucket(v84);
        if ((result & 1) == 0 && *v84 != (WTF::StringImpl **)-1)
          break;
        v84 += 2;
        if (v84 == v82)
        {
          v84 = v82;
          break;
        }
      }
    }
  }
  return result;
}

