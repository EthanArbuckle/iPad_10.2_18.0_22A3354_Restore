_QWORD *WTF::Detail::CallableWrapper<WebCore::PreviewConverter::delegateDidFailWithError(WebCore::ResourceError const&)::$_0,void,WTF::String const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WebCore::PreviewConverter *v3;
  WTF *v5;
  void *v6;

  *a1 = &off_1E3405CD8;
  v3 = (WebCore::PreviewConverter *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::PreviewConverter::~PreviewConverter(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PreviewConverter::delegateDidFailWithError(WebCore::ResourceError const&)::$_0,void,WTF::String const&>::~CallableWrapper(WTF *this, void *a2)
{
  WebCore::PreviewConverter *v3;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &off_1E3405CD8;
  v3 = (WebCore::PreviewConverter *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 4) == 1)
    {
      WebCore::PreviewConverter::~PreviewConverter(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 4);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::PreviewConverter::delegateDidFailWithError(WebCore::ResourceError const&)::$_0,void,WTF::String const&>::call(unsigned int *result, const WTF::String *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *((_QWORD *)result + 1);
  if (!*(_BYTE *)(v2 + 368))
  {
    WebCore::PreviewConverter::platformUnlockWithPassword(*((WebCore::PreviewConverter **)result + 1), a2);
    *(_QWORD *)(v2 + 416) = 0;
    if (!*(_BYTE *)(v2 + 408) && !*(_BYTE *)(v2 + 368))
    {
      v4 = *(_QWORD *)(v2 + 400);
      if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
      {
        ++*(_DWORD *)(v2 + 16);
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v6 = &off_1E3405C88;
        v6[1] = v2;
        v6[2] = v2;
        v8 = v6;
        (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v5 + 16))(v5, v2, &v8);
        v7 = v8;
        v8 = 0;
        if (v7)
          (*(void (**)(_QWORD *))(*v7 + 8))(v7);
      }
      else
      {
        WebCore::PreviewConverter::didFailUpdating((unsigned int *)v2, v3);
      }
    }
    return WebCore::PreviewConverter::finishUpdating((unsigned int *)v2);
  }
  return result;
}

uint64_t WebCore::ProcessCapabilities::isAVIFDecodingEnabled(WebCore::ProcessCapabilities *this)
{
  return WebCore::s_AVIFDecodingEnabled;
}

uint64_t WebCore::Process::setIdentifier(uint64_t result)
{
  if ((WebCore::Process::globalIdentifier & 1) == 0)
    WebCore::Process::globalIdentifier = 1;
  WebCore::Process::globalIdentifier = result;
  return result;
}

__int128 *WebCore::PublicSuffixStore::singleton(WebCore::PublicSuffixStore *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&WebCore::PublicSuffixStore::singleton(void)::flag);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&WebCore::PublicSuffixStore::singleton(void)::flag, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>);
  }
  return &WebCore::PublicSuffixStore::singleton(void)::store;
}

unsigned __int8 *WebCore::PublicSuffixStore::clearHostTopPrivatelyControlledDomainCache(unsigned __int8 *this, WTF::StringImpl *a2)
{
  unsigned __int8 *v2;
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;

  v2 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v4 = (WTF::StringImpl **)*((_QWORD *)v2 + 1);
  if (v4)
  {
    *((_QWORD *)v2 + 1) = 0;
    v5 = *((unsigned int *)v4 - 1);
    if ((_DWORD)v5)
    {
      v6 = v4;
      do
      {
        v7 = *v6;
        if (*v6 != (WTF::StringImpl *)-1)
        {
          v8 = v6[1];
          v6[1] = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
            {
              WTF::StringImpl::destroy(v8, a2);
              v7 = *v6;
            }
            else
            {
              *(_DWORD *)v8 -= 2;
            }
          }
          *v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 2;
        --v5;
      }
      while (v5);
    }
    this = (unsigned __int8 *)WTF::fastFree((WTF *)(v4 - 2), a2);
  }
  v9 = __ldxr(v2);
  if (v9 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return this;
}

uint64_t WebCore::PublicSuffixStore::publicSuffix@<X0>(uint64_t this@<X0>, const WTF::URL *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  int16x8_t *v16;
  unint64_t v17;
  int16x8_t v18;
  int8x16_t v19;
  int16x8_t *v20;
  __int8 *v21;
  int16x8_t v22;
  char *v23;
  const char *v24;
  uint64_t v25;

  if ((*((_BYTE *)a2 + 8) & 1) != 0)
  {
    v4 = this;
    v5 = WTF::URL::host(a2);
    v7 = v6;
    this = WTF::URL::hostIsIPAddress();
    if ((this & 1) == 0)
    {
      LODWORD(v8) = 0;
      if ((v7 & 0xFF00000000) != 0)
      {
        while (v8 < v7)
        {
          v9 = v7 - (unint64_t)v8;
          if (v9 >= 0x10)
            v10 = 16;
          else
            v10 = v7 - (unint64_t)v8;
          if (v10)
          {
            v11 = v10;
            this = v5 + v8;
            while (*(_BYTE *)this != 46)
            {
              ++this;
              if (!--v11)
                goto LABEL_13;
            }
          }
          else
          {
LABEL_13:
            if (v9 < 0x11)
              break;
            this = (uint64_t)memchr((void *)(v5 + v8 + v10), 46, v9 - v10);
            if (!this)
              break;
          }
          if (this - v5 == -1)
            break;
          v8 = (this - v5 + 1);
          v12 = (v7 - v8);
          if (v7 <= v8)
          {
            v14 = 0x100000000;
            v13 = "";
          }
          else
          {
            v13 = (const char *)v5;
            v14 = v7;
            if ((_DWORD)this - (_DWORD)v5 != -1)
            {
              if (v7 - (unint64_t)v8 < v12)
                goto LABEL_51;
              v13 = (const char *)(v5 + v8);
              v14 = v12 | 0x100000000;
            }
          }
          this = WebCore::PublicSuffixStore::platformIsPublicSuffix(v4, (uint64_t)v13, v14);
          if ((_DWORD)this)
            goto LABEL_47;
        }
      }
      else
      {
        v15 = v5 + 2 * v7;
        while (v7 > (unint64_t)v8)
        {
          v16 = (int16x8_t *)(v5 + 2 * v8);
          v17 = v15 - (_QWORD)v16;
          if ((uint64_t)(v15 - (_QWORD)v16) < -1)
            goto LABEL_51;
          if (v17 <= 0x3E)
          {
            while (v16->i16[0] != 46)
            {
              v16 = (int16x8_t *)((char *)v16 + 2);
              v17 -= 2;
              if (!v17)
                goto LABEL_3;
            }
          }
          else
          {
            if ((unint64_t)&v16->u64[1] + 6 >= v15)
            {
              v20 = (int16x8_t *)(v5 + 2 * v8);
LABEL_35:
              if ((unint64_t)v20 >= v15)
                break;
              v22.i64[0] = 0x2E002E002E002ELL;
              v22.i64[1] = 0x2E002E002E002ELL;
              v19 = (int8x16_t)vceqq_s16(*(int16x8_t *)(v15 - 16), v22);
              v22.i16[0] = vmaxvq_u16((uint16x8_t)v19);
              v16 = (int16x8_t *)(v15 - 16);
              if (!v22.i32[0])
                break;
            }
            else
            {
              while (1)
              {
                v18.i64[0] = 0x2E002E002E002ELL;
                v18.i64[1] = 0x2E002E002E002ELL;
                v19 = (int8x16_t)vceqq_s16(*v16, v18);
                v18.i16[0] = vmaxvq_u16((uint16x8_t)v19);
                if (v18.i32[0])
                  break;
                v20 = v16 + 1;
                v21 = &v16[1].i8[14];
                ++v16;
                if ((unint64_t)v21 >= v15)
                  goto LABEL_35;
              }
            }
            v16 = (int16x8_t *)((char *)v16
                              + 2 * vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v19)));
          }
          if (v16 == (int16x8_t *)v15)
            break;
          v23 = &v16->i8[-v5];
          if (v23 == (char *)-2)
            break;
          v8 = ((unint64_t)v23 >> 1) + 1;
          if (v7 <= v8)
          {
            v14 = 0x100000000;
            v24 = "";
          }
          else
          {
            v24 = (const char *)v5;
            v14 = v7;
            if (((unint64_t)v23 >> 1) != -1)
            {
              if (v7 - (unint64_t)v8 < (v7 - v8))
              {
LABEL_51:
                __break(1u);
                return this;
              }
              v24 = (const char *)(v5 + 2 * v8);
              v14 = (v7 - v8);
            }
          }
          this = WebCore::PublicSuffixStore::platformIsPublicSuffix(v4, (uint64_t)v24, v14);
          if ((this & 1) != 0)
          {
LABEL_47:
            if ((v14 & 0xFF00000000) != 0)
              this = WTF::String::String();
            else
              this = WTF::String::String();
            *a3 = v25;
            return this;
          }
        }
      }
    }
  }
LABEL_3:
  *a3 = 0;
  return this;
}

uint64_t *WebCore::PublicSuffixStore::topPrivatelyControlledDomain@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t *v20;
  uint64_t v21;
  int8x16_t v22;
  unsigned int v23;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  WTF::StringImpl **v44;
  unsigned __int8 *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unsigned int v48;
  WTF::StringImpl **v49;
  WTF::StringImpl *v50;
  unsigned __int16 *v51;
  unint64_t v52;
  unsigned __int16 *v53;
  int v54;
  int v55;
  unsigned __int16 *v56;
  int v57;
  int v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  double v71;
  double v72;
  float v73;
  uint64_t v74;
  unint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl **v77;
  unint64_t v78;
  unsigned __int8 *v79;
  char *v80;
  int v81;
  int v82;
  BOOL v83;
  unint64_t v84;
  unsigned __int8 *v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  WTF::StringImpl **v90;
  int v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  unsigned int v94;
  unint64_t v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;

  v97 = (unsigned __int8 *)a2;
  v98 = a3;
  if (!(_DWORD)a3)
  {
    *a4 = 0;
    return result;
  }
  v5 = (uint64_t)result;
  if ((a3 & 0xFF00000000) == 0)
  {
    if (WTF::charactersAreAllASCII<char16_t>(a2, a3))
      goto LABEL_24;
    return WTF::StringView::toString(a4, (WTF::StringView *)&v97);
  }
  v6 = a2 + a3;
  if ((a2 & 7) != 0)
  {
    v7 = 0;
    v8 = a3 - 1;
    v9 = a2 + 1;
    do
    {
      v10 = *(unsigned __int8 *)a2++;
      *(_QWORD *)&v7 |= v10;
      if ((v9 & 7) == 0)
        break;
      v11 = v8--;
      ++v9;
    }
    while (v11);
  }
  else
  {
    v7 = 0;
  }
  v12 = v6 & 0xFFFFFFFFFFFFFFF8;
  if (a2 >= (v6 & 0xFFFFFFFFFFFFFFF8))
  {
    v15 = (uint64_t *)a2;
  }
  else
  {
    v13 = a2 + 8;
    if (v12 > a2 + 8)
      v13 = v6 & 0xFFFFFFFFFFFFFFF8;
    v14 = v13 + ~a2;
    if (v14 >= 0x18)
    {
      v17 = (v14 >> 3) + 1;
      v15 = (uint64_t *)(a2 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = 0uLL;
      v19 = (int8x16_t)(unint64_t)v7;
      v20 = (int8x16_t *)(a2 + 16);
      v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19 = vorrq_s8(v20[-1], v19);
        v18 = vorrq_s8(*v20, v18);
        v20 += 2;
        v21 -= 4;
      }
      while (v21);
      v22 = vorrq_s8(v18, v19);
      v7 = vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_22;
    }
    else
    {
      v15 = (uint64_t *)a2;
    }
    do
    {
      v16 = *v15++;
      *(_QWORD *)&v7 |= v16;
    }
    while ((unint64_t)v15 < v12);
  }
LABEL_22:
  while (v15 != (uint64_t *)v6)
  {
    v23 = *(unsigned __int8 *)v15;
    v15 = (uint64_t *)((char *)v15 + 1);
    *(_QWORD *)&v7 |= v23;
  }
  if ((*(_QWORD *)&v7 & 0x8080808080808080) != 0)
    return WTF::StringView::toString(a4, (WTF::StringView *)&v97);
LABEL_24:
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_26:
    MEMORY[0x19AEA534C](v5);
    goto LABEL_27;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_26;
LABEL_27:
  v25 = (uint64_t *)(v5 + 8);
  v26 = *(_QWORD *)(v5 + 8);
  if (v26
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(v5 + 8), 0), (v26 = *v25) != 0))
  {
    v27 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = v97;
  v29 = v98;
  v30 = v98;
  v31 = MEMORY[0x1E0CBF868];
  v32 = v98 & 0xFF00000000;
  if ((v98 & 0xFF00000000) != 0)
  {
    v33 = -1640531527;
    if (v98 >= 2uLL)
    {
      v34 = 0;
      do
      {
        v35 = v33 + *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v97[v34]);
        v36 = (v35 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v97[v34 + 1]) << 11) ^ v35;
        v33 = v36 + (v36 >> 11);
        v37 = v34 + 3;
        v34 += 2;
      }
      while (v37 < v98);
    }
    if ((v98 & 1) != 0)
    {
      v38 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v97[v98 - 1]);
      v33 = ((v33 + v38) ^ ((v33 + v38) << 11)) + (((v33 + v38) ^ ((v33 + v38) << 11)) >> 17);
    }
    v39 = (v33 ^ (8 * v33)) + ((v33 ^ (8 * v33)) >> 5);
    v40 = (v39 ^ (4 * v39)) + ((v39 ^ (4 * v39)) >> 15);
    v41 = (v40 ^ (v40 << 10)) & 0xFFFFFF;
    if (v41)
      v42 = v41;
    else
      v42 = 0x800000;
  }
  else
  {
    v42 = WTF::ASCIICaseInsensitiveHash::hash<char16_t>((uint64_t)v97, v98);
    v32 = 0;
    v31 = MEMORY[0x1E0CBF868];
    v30 = v98;
    v28 = v97;
    v29 = v98;
  }
  v43 = 0;
  v44 = 0;
  v45 = v28 + 1;
  v46 = v30 - 1;
  v47 = v28 + 2;
  while (1)
  {
    v48 = v42 & v27;
    v49 = (WTF::StringImpl **)(v26 + 16 * (v42 & v27));
    v50 = *v49;
    if (!*v49)
    {
      if (v44)
        v49 = v44;
      if (*v49 == (WTF::StringImpl *)-1)
      {
        *v49 = 0;
        v49[1] = 0;
        --*(_DWORD *)(*v25 - 16);
        v29 = v98;
      }
      WTF::ASCIICaseInsensitiveStringViewHashTranslator::translate(v49, (uint64_t)v28, v29);
      WTF::StringView::convertToASCIILowercase((WTF::StringView *)&v97);
      if ((MEMORY[0x19AEA53F4](v100, "localhost", 9) & 1) != 0 || WTF::URL::hostIsIPAddress())
      {
        v60 = (WTF::StringImpl *)v100;
        if (v100)
          *(_DWORD *)v100 += 2;
        v99 = v60;
      }
      else
      {
        if (v100)
        {
          v74 = *(_QWORD *)(v100 + 8);
          v75 = *(unsigned int *)(v100 + 4) | ((unint64_t)((*(_DWORD *)(v100 + 16) >> 2) & 1) << 32);
        }
        else
        {
          v74 = 0;
          v75 = 0x100000000;
        }
        WebCore::PublicSuffixStore::platformTopPrivatelyControlledDomain(v5, v74, v75, &v99, v71, v72, v73);
        v60 = (WTF::StringImpl *)v100;
      }
      v100 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v59);
        else
          *(_DWORD *)v60 -= 2;
      }
      v61 = v99;
      v99 = 0;
      v62 = v49[1];
      v49[1] = v61;
      if (v62)
      {
        v63 = *(_DWORD *)v62 - 2;
        if (*(_DWORD *)v62 != 2)
        {
LABEL_75:
          *(_DWORD *)v62 = v63;
          goto LABEL_76;
        }
        WTF::StringImpl::destroy(v62, v59);
        v62 = v99;
        v99 = 0;
        if (v62)
        {
          v63 = *(_DWORD *)v62 - 2;
          if (*(_DWORD *)v62 != 2)
            goto LABEL_75;
          WTF::StringImpl::destroy(v62, v76);
        }
      }
LABEL_76:
      v64 = *v25;
      if (*v25)
        v65 = *(_DWORD *)(v64 - 12) + 1;
      else
        v65 = 1;
      *(_DWORD *)(v64 - 12) = v65;
      v66 = *v25;
      if (*v25)
        v67 = *(_DWORD *)(v66 - 12);
      else
        v67 = 0;
      v68 = (*(_DWORD *)(v66 - 16) + v67);
      v69 = *(unsigned int *)(v66 - 4);
      if (v69 > 0x400)
      {
        if (v69 > 2 * v68)
          goto LABEL_83;
      }
      else if (3 * v69 > 4 * v68)
      {
        goto LABEL_83;
      }
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand((uint64_t *)(v5 + 8), v49);
      goto LABEL_83;
    }
    if (v50 == (WTF::StringImpl *)-1)
    {
      v44 = (WTF::StringImpl **)(v26 + 16 * v48);
      goto LABEL_58;
    }
    if (*((_DWORD *)v50 + 1) != (_DWORD)v29)
      goto LABEL_58;
    v51 = (unsigned __int16 *)*((_QWORD *)v50 + 1);
    if ((*((_BYTE *)v50 + 16) & 4) != 0)
      break;
    if (v32)
    {
      if (!(_DWORD)v29)
        goto LABEL_83;
      if ((*v51 | (32 * (*v51 - 65 < 0x1A))) == *(unsigned __int8 *)(v31 + *v28))
      {
        v52 = 0;
        v53 = v51 + 1;
        while (v46 != v52)
        {
          v54 = v53[v52] | (32 * (v53[v52] - 65 < 0x1A));
          v55 = *(unsigned __int8 *)(v31 + v45[v52++]);
          if (v54 != v55)
            goto LABEL_50;
        }
        goto LABEL_83;
      }
    }
    else
    {
      if (!(_DWORD)v29)
        goto LABEL_83;
      if ((*v51 | (32 * (*v51 - 65 < 0x1A))) == (*(unsigned __int16 *)v28 | (32
                                                                                          * (*(unsigned __int16 *)v28
                                                                                           - 65 < 0x1A))))
      {
        v52 = 0;
        v56 = v51 + 1;
        while (v46 != v52)
        {
          v57 = v56[v52] | (32 * (v56[v52] - 65 < 0x1A));
          v58 = *(unsigned __int16 *)&v47[2 * v52++];
          if (v57 != (v58 | (32 * ((v58 - 65) < 0x1A))))
            goto LABEL_50;
        }
        goto LABEL_83;
      }
    }
LABEL_58:
    v42 = ++v43 + v48;
  }
  v94 = v48;
  v92 = v45;
  v93 = v47;
  v95 = v46;
  v96 = v29;
  v91 = v43;
  v90 = v44;
  v89 = v27;
  v87 = v32;
  v88 = v26;
  v78 = v30;
  v79 = v28;
  if (!v32)
  {
    v84 = v30;
    v85 = v28;
    v86 = WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>((_BOOL8)v51, v30, (uint64_t)v28, v30, v30);
    v30 = v84;
    v28 = v85;
    v46 = v95;
    v29 = v96;
    v32 = 0;
    v26 = v88;
    v27 = v89;
    v31 = MEMORY[0x1E0CBF868];
    v44 = v90;
    v43 = v91;
    v45 = v92;
    v47 = v93;
    v48 = v94;
    if (v86)
      goto LABEL_83;
    goto LABEL_58;
  }
  if (!(_DWORD)v29)
    goto LABEL_83;
  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)v51) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + *v28))
  {
    v31 = MEMORY[0x1E0CBF868];
    goto LABEL_58;
  }
  v52 = 0;
  v80 = (char *)v51 + 1;
  while (v46 != v52)
  {
    v31 = MEMORY[0x1E0CBF868];
    v81 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v80[v52]);
    v45 = v92;
    v47 = v93;
    v82 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v92[v52++]);
    v83 = v81 == v82;
    v28 = v79;
    v46 = v95;
    v29 = v96;
    v30 = v78;
    v32 = v87;
    v26 = v88;
    v27 = v89;
    v44 = v90;
    v43 = v91;
    v48 = v94;
    if (!v83)
    {
LABEL_50:
      if (v52 >= v30)
        break;
      goto LABEL_58;
    }
  }
LABEL_83:
  result = (uint64_t *)WTF::String::isolatedCopy();
  if (*v25)
  {
    if (*(_DWORD *)(*v25 - 12) >= 0x81u)
    {
      v77 = (WTF::StringImpl **)WTF::HashMap<WTF::AtomString,WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::Ref<WebCore::CSSPrimitiveValue,WTF::RawPtrTraits<WebCore::CSSPrimitiveValue>,WTF::DefaultRefDerefTraits<WebCore::CSSPrimitiveValue>>>,WTF::HashTableTraits>::random((_QWORD *)(v5 + 8));
      result = (uint64_t *)WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove((WTF::StringImpl *)(v5 + 8), v77);
    }
  }
  v70 = __ldxr((unsigned __int8 *)v5);
  if (v70 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

WTF::StringImpl *WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::remove(WTF::StringImpl *result, WTF::StringImpl **a2)
{
  uint64_t *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (uint64_t *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_QWORD *)result + 16 * *(unsigned int *)(*(_QWORD *)result - 4);
    if ((WTF::StringImpl **)v4 == a2)
      return result;
  }
  else
  {
    if (!a2)
      return result;
    v4 = 0;
  }
  if ((WTF::StringImpl **)v4 != a2)
  {
    v5 = *a2;
    *a2 = (WTF::StringImpl *)-1;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = a2[1];
    a2[1] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
    ++*(_DWORD *)(*v3 - 16);
    v6 = *v3;
    if (*v3)
      v7 = *(_DWORD *)(v6 - 12) - 1;
    else
      v7 = -1;
    *(_DWORD *)(v6 - 12) = v7;
    v8 = *v3;
    if (*v3)
    {
      v9 = 6 * *(_DWORD *)(v8 - 12);
      v10 = *(_DWORD *)(v8 - 4);
      if (v9 < v10 && v10 >= 9)
        return (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::ASCIICaseInsensitiveHash,WTF::HashMap<WTF::String,WTF::String,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v3, v10 >> 1, 0);
    }
  }
  return result;
}

uint64_t WebCore::RemoteCommandListener::resetCreationFunction(WebCore::RemoteCommandListener *this)
{
  _QWORD *v1;
  uint64_t result;

  {
    WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = 0;
  }
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E3405D98;
  result = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
  WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = (uint64_t)v1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::RemoteCommandListener::create(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  {
    v2 = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
    if (WebCore::remoteCommandListenerCreationFunction(void)::creationFunction)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a1);
  }
  else
  {
    WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = 0;
  }
  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3405D98;
  v3 = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
  WebCore::remoteCommandListenerCreationFunction(void)::creationFunction = v2;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v2 = WebCore::remoteCommandListenerCreationFunction(void)::creationFunction;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a1);
}

uint64_t WebCore::RemoteCommandListener::RemoteCommandListener(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_1E3405D38;
  *(_QWORD *)(result + 8) = a2;
  *(_BYTE *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_WORD *)(result + 32) = 0;
  return result;
}

void WebCore::RemoteCommandListener::~RemoteCommandListener(WebCore::RemoteCommandListener *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  *(_QWORD *)this = off_1E3405D38;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
    WTF::fastFree((WTF *)(v7 - 16), a2);
}

_BYTE *WebCore::RemoteCommandListener::scheduleSupportedCommandsUpdate(_BYTE *this)
{
  _BYTE *v1;
  uint64_t v2;
  _QWORD *v3;
  _BYTE *v4;

  if (!this[32])
  {
    v1 = this;
    v2 = (uint64_t)(this + 24);
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E3405DC0;
    v3[1] = v1;
    v4 = v3;
    WebCore::MainThreadDeferrableTask::scheduleTask(v2, (uint64_t *)&v4);
    this = v4;
    v4 = 0;
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t WebCore::MainThreadDeferrableTask::scheduleTask(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  if (!*(_BYTE *)(result + 9))
  {
    v3 = result;
    v4 = *(_QWORD *)result;
    *(_QWORD *)v3 = 0;
    if (v4)
    {
      *(_QWORD *)(v4 + 8) = 0;
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v4);
        WTF::fastFree((WTF *)v4, a2);
      }
      v7 = *(_QWORD *)v3;
      *(_BYTE *)(v3 + 8) = 1;
      if (v7)
      {
        do
LABEL_15:
          v12 = __ldaxr((unsigned int *)v7);
        while (__stlxr(v12 + 1, (unsigned int *)v7));
LABEL_16:
        v13 = *a2;
        *a2 = 0;
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        *v14 = &off_1E3405D70;
        v14[1] = v7;
        v14[2] = v13;
        v15 = v14;
        WTF::callOnMainThread();
        result = (uint64_t)v15;
        if (v15)
          return (*(uint64_t (**)(_QWORD *))(*v15 + 8))(v15);
        return result;
      }
    }
    else
    {
      *(_BYTE *)(v3 + 8) = 1;
    }
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v3;
    v9 = *(unsigned int **)v3;
    *(_QWORD *)v3 = v7;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v8);
      }
      v7 = *(_QWORD *)v3;
      if (!*(_QWORD *)v3)
        goto LABEL_16;
    }
    goto LABEL_15;
  }
  return result;
}

_BYTE *WebCore::RemoteCommandListener::setSupportsSeeking(_BYTE *this, int a2)
{
  _BYTE *v2;
  _QWORD *v3;
  _BYTE *v4;

  if (this[40] != a2)
  {
    v2 = this;
    this[40] = a2;
    if (!this[32])
    {
      v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v3 = off_1E3405DC0;
      v3[1] = v2;
      v4 = v3;
      WebCore::MainThreadDeferrableTask::scheduleTask((uint64_t)(v2 + 24), (uint64_t *)&v4);
      this = v4;
      v4 = 0;
      if (this)
        return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t *WebCore::RemoteCommandListener::addSupportedCommand(uint64_t a1, char a2)
{
  uint64_t *result;
  _QWORD *v4;
  uint64_t v5[3];
  char v6;

  v6 = a2;
  result = WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::add((uint64_t *)(a1 + 16), &v6, (uint64_t)v5);
  if (!*(_BYTE *)(a1 + 32))
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E3405DC0;
    v4[1] = a1;
    v5[0] = (uint64_t)v4;
    WebCore::MainThreadDeferrableTask::scheduleTask(a1 + 24, v5);
    result = (uint64_t *)v5[0];
    v5[0] = 0;
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

uint64_t *WebCore::RemoteCommandListener::removeSupportedCommand(uint64_t a1, int a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v17;
  uint64_t *v18;

  v5 = *(_QWORD *)(a1 + 16);
  result = (uint64_t *)(a1 + 16);
  v4 = v5;
  if (v5)
  {
    v6 = *(_DWORD *)(v4 - 8);
    v7 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v8 = v6 & (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) ^ (((v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11)) >> 16));
    v9 = *(unsigned __int8 *)(v4 + v8);
    if (v9 != a2)
    {
      v10 = 1;
      while (v9 != 255)
      {
        v8 = ((_DWORD)v8 + v10) & v6;
        v9 = *(unsigned __int8 *)(v4 + v8);
        ++v10;
        if (v9 == a2)
          goto LABEL_8;
      }
      v8 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v4 - 4))
    {
      *(_BYTE *)(v4 + v8) = -2;
      ++*(_DWORD *)(*result - 16);
      v11 = *result;
      v12 = *result ? *(_DWORD *)(v11 - 12) - 1 : -1;
      *(_DWORD *)(v11 - 12) = v12;
      v13 = *result;
      if (*result)
      {
        v14 = 6 * *(_DWORD *)(v13 - 12);
        v15 = *(_DWORD *)(v13 - 4);
        if (v14 < v15 && v15 >= 9)
          result = (uint64_t *)WTF::HashTable<WebCore::AccessibilityRole,WebCore::AccessibilityRole,WTF::IdentityExtractor,WTF::IntHash<WebCore::AccessibilityRole>,WTF::StrongEnumHashTraits<WebCore::AccessibilityRole>,WTF::StrongEnumHashTraits<WebCore::AccessibilityRole>>::rehash(result, v15 >> 1, 0);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 32))
  {
    v17 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
    *v17 = (uint64_t)off_1E3405DC0;
    v17[1] = a1;
    v18 = v17;
    WebCore::MainThreadDeferrableTask::scheduleTask(a1 + 24, (uint64_t *)&v18);
    result = v18;
    v18 = 0;
    if (result)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  return result;
}

uint64_t WebCore::RemoteCommandListener::setSupportedCommands(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  result = (uint64_t)WTF::HashTable<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteControlCommandType,WTF::IdentityExtractor,WTF::IntHash<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>,WTF::StrongEnumHashTraits<WebCore::PlatformMediaSessionRemoteControlCommandType>>::HashTable((uint64_t *)&v7, a2);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  v7 = (_QWORD *)v5;
  if (v5)
    result = WTF::fastFree((WTF *)(v5 - 16), v4);
  if (!*(_BYTE *)(a1 + 32))
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3405DC0;
    v6[1] = a1;
    v7 = v6;
    WebCore::MainThreadDeferrableTask::scheduleTask(a1 + 24, (uint64_t *)&v7);
    result = (uint64_t)v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::RemoteCommandListener::supportedCommands(WebCore::RemoteCommandListener *this)
{
  return (uint64_t)this + 16;
}

uint64_t WebCore::RemoteCommandListener::supportsSeeking(WebCore::RemoteCommandListener *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t WebCore::setAuxiliaryProcessTypeForTesting(uint64_t result)
{
  WebCore::auxiliaryProcessType(void)::auxiliaryProcessType = result;
  return result;
}

BOOL WebCore::checkAuxiliaryProcessType(int a1)
{
  return WebCore::auxiliaryProcessType(void)::auxiliaryProcessType > 0xFFu
      && a1 == WebCore::auxiliaryProcessType(void)::auxiliaryProcessType;
}

uint64_t WebCore::processType(WebCore *this)
{
  return WebCore::auxiliaryProcessType(void)::auxiliaryProcessType;
}

const char *WebCore::processTypeDescription(__int16 a1)
{
  int v1;
  const char *result;

  if ((a1 & 0xFF00) == 0)
    return "UI";
  v1 = a1;
  result = "Web";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "Network";
      break;
    case 2:
      result = "Plugin";
      break;
    case 3:
      result = "GPU";
      break;
    default:
      result = "Unknown";
      break;
  }
  return result;
}

BOOL WTF::charactersAreAllASCII<char16_t>(unint64_t a1, uint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t *v16;
  uint64_t v17;
  int8x16_t v18;
  unsigned int v19;

  v2 = 0;
  v3 = a1 + 2 * a2;
  if ((a1 & 7) != 0 && a2)
  {
    v2 = 0;
    v4 = 2 * a2 - 2;
    v5 = a1 + 2;
    do
    {
      v6 = *(unsigned __int16 *)a1;
      a1 += 2;
      *(_QWORD *)&v2 |= v6;
      if ((v5 & 7) == 0)
        break;
      v7 = v4;
      v4 -= 2;
      v5 += 2;
    }
    while (v7);
  }
  v8 = v3 & 0xFFFFFFFFFFFFFFF8;
  if (a1 >= (v3 & 0xFFFFFFFFFFFFFFF8))
  {
    v11 = (unsigned __int16 *)a1;
  }
  else
  {
    v9 = a1 + 8;
    if (v8 > a1 + 8)
      v9 = v3 & 0xFFFFFFFFFFFFFFF8;
    v10 = v9 + ~a1;
    if (v10 >= 0x18)
    {
      v13 = (v10 >> 3) + 1;
      v11 = (unsigned __int16 *)(a1 + 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL));
      v14 = 0uLL;
      v15 = (int8x16_t)(unint64_t)v2;
      v16 = (int8x16_t *)(a1 + 16);
      v17 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v15 = vorrq_s8(v16[-1], v15);
        v14 = vorrq_s8(*v16, v14);
        v16 += 2;
        v17 -= 4;
      }
      while (v17);
      v18 = vorrq_s8(v14, v15);
      v2 = vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL));
      if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_19;
    }
    else
    {
      v11 = (unsigned __int16 *)a1;
    }
    do
    {
      v12 = *(_QWORD *)v11;
      v11 += 4;
      *(_QWORD *)&v2 |= v12;
    }
    while ((unint64_t)v11 < v8);
  }
LABEL_19:
  while (v11 != (unsigned __int16 *)v3)
  {
    v19 = *v11++;
    *(_QWORD *)&v2 |= v19;
  }
  return (*(_QWORD *)&v2 & 0xFF80FF80FF80FF80) == 0;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MainThreadDeferrableTask::scheduleTask(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3405D70;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MainThreadDeferrableTask::scheduleTask(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3405D70;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MainThreadDeferrableTask::scheduleTask(WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      *(_BYTE *)(v2 + 8) = 0;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 16))(*(_QWORD *)(result + 16));
    }
  }
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>()
{
  uint64_t IdentifierInternal;

  if ((WebCore::Process::globalIdentifier & 1) == 0)
  {
    IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    if ((WebCore::Process::globalIdentifier & 1) == 0)
      WebCore::Process::globalIdentifier = 1;
    WebCore::Process::globalIdentifier = IdentifierInternal;
  }
}

double std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::PublicSuffixStore::singleton(void)::$_0 &&>>()
{
  double result;

  qword_1EE2F8538 = 0;
  result = 0.0;
  WebCore::PublicSuffixStore::singleton(void)::store = 0u;
  unk_1EE2F8528 = 0u;
  return result;
}

WTF::StringImpl *WTF::ASCIICaseInsensitiveStringViewHashTranslator::translate(WTF::StringImpl **a1, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  int v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD v10[2];

  v10[0] = a2;
  v10[1] = a3;
  WTF::StringView::toString((uint64_t *)&v9, (WTF::StringView *)v10);
  v5 = v9;
  v9 = 0;
  result = *a1;
  *a1 = v5;
  if (result)
  {
    v7 = *(_DWORD *)result - 2;
    if (*(_DWORD *)result != 2)
    {
LABEL_3:
      *(_DWORD *)result = v7;
      return result;
    }
    WTF::StringImpl::destroy(result, v4);
    result = v9;
    v9 = 0;
    if (result)
    {
      v7 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RemoteCommandListener::resetCreationFunction(void)::$_0,WTF::RefPtr<WebCore::RemoteCommandListener,WTF::RawPtrTraits<WebCore::RemoteCommandListener>,WTF::DefaultRefDerefTraits<WebCore::RemoteCommandListener>>,WebCore::RemoteCommandListenerClient &>::call@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x50);
  result = WebCore::RemoteCommandListenerCocoa::RemoteCommandListenerCocoa(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1960DB204(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RemoteCommandListener::scheduleSupportedCommandsUpdate(void)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

void WebCore::ScreenOrientationManager::~ScreenOrientationManager(WebCore::ScreenOrientationManager *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E3405DE8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WebCore::ScreenOrientationManager::setLockPromise(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v5 = *a3;
  *a3 = 0;
  v6 = *(_DWORD **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  result = a2[7];
  if (result)
    goto LABEL_19;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2 + 6;
  v8 = (unsigned int *)a2[7];
  a2[7] = result;
  if (!v8)
    goto LABEL_19;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, a2);
  }
  result = a2[7];
  if (result)
  {
LABEL_19:
    do
      v11 = __ldaxr((unsigned int *)result);
    while (__stlxr(v11 + 1, (unsigned int *)result));
  }
  v12 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = result;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      return WTF::fastFree((WTF *)v12, a2);
    }
  }
  return result;
}

uint64_t WebCore::operator<<(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  WTF::TextStream::operator<<();
  if (*a2 <= 6u)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (a2[1] <= 6u)
    WTF::TextStream::operator<<();
  result = WTF::TextStream::operator<<();
  if (a2[2] <= 6u)
    return WTF::TextStream::operator<<();
  return result;
}

uint64_t WebCore::ScrollAnimation::isActive(WebCore::ScrollAnimation *this)
{
  return *((unsigned __int8 *)this + 20);
}

void WebCore::ScrollAnimationKinetic::~ScrollAnimationKinetic(WebCore::ScrollAnimationKinetic *this, void *a2)
{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v3, a2);
  }
}

{
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 21);
  if (v3)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::fastFree(this, a2);
}

char *WebCore::ScrollAnimationKinetic::appendToScrollHistory(uint64_t a1, unint64_t a2)
{
  char *result;
  double *v4;
  double *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  double *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v5 = *(double **)(a1 + 168);
  result = (char *)(a1 + 168);
  v4 = v5;
  v6 = *((unsigned int *)result + 3);
  v7 = &v5[16 * v6];
  if ((_DWORD)v6)
  {
    LODWORD(v6) = 0;
    v8 = v7;
    v9 = v7;
    do
    {
      if (*(double *)a2 - *v4 > 0.15)
      {
        v10 = v4;
        if (v9 != (double *)(*(_QWORD *)(a1 + 168) + ((unint64_t)*(unsigned int *)(a1 + 180) << 7)))
        {
          if (v8 == v4)
          {
            v10 = v9;
          }
          else
          {
            if (v8 <= v9)
            {
              v20 = 0;
              v19 = ((char *)v4 - (char *)v8) >> 7;
              do
              {
                v21 = (_OWORD *)((char *)v9 + (((char *)v4 - (char *)v8) & 0xFFFFFFFFFFFFFF80) + v20 * 8 - 128);
                v22 = *(_OWORD *)&v4[v20 - 16];
                v23 = *(_OWORD *)&v4[v20 - 14];
                v24 = *(_OWORD *)&v4[v20 - 10];
                v21[2] = *(_OWORD *)&v4[v20 - 12];
                v21[3] = v24;
                *v21 = v22;
                v21[1] = v23;
                v25 = *(_OWORD *)&v4[v20 - 8];
                v26 = *(_OWORD *)&v4[v20 - 6];
                v27 = *(_OWORD *)&v4[v20 - 2];
                v21[6] = *(_OWORD *)&v4[v20 - 4];
                v21[7] = v27;
                v21[4] = v25;
                v21[5] = v26;
                v20 -= 16;
              }
              while (&v4[v20] != v8);
            }
            else
            {
              v11 = v9;
              v12 = v8;
              do
              {
                v13 = *(_OWORD *)v12;
                v14 = *((_OWORD *)v12 + 1);
                v15 = *((_OWORD *)v12 + 3);
                *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
                *((_OWORD *)v11 + 3) = v15;
                *(_OWORD *)v11 = v13;
                *((_OWORD *)v11 + 1) = v14;
                v16 = *((_OWORD *)v12 + 4);
                v17 = *((_OWORD *)v12 + 5);
                v18 = *((_OWORD *)v12 + 7);
                *((_OWORD *)v11 + 6) = *((_OWORD *)v12 + 6);
                *((_OWORD *)v11 + 7) = v18;
                *((_OWORD *)v11 + 4) = v16;
                *((_OWORD *)v11 + 5) = v17;
                v11 += 16;
                v12 += 16;
              }
              while (v12 != v4);
              v19 = ((char *)v4 - (char *)v8) >> 7;
            }
            v10 = &v9[16 * v19];
          }
        }
        v8 = v4 + 16;
        LODWORD(v6) = v6 + 1;
        v9 = v10;
      }
      v4 += 16;
    }
    while (v4 < v7);
    v4 = *(double **)(a1 + 168);
    v28 = *(unsigned int *)(a1 + 180);
    v7 = v9;
  }
  else
  {
    v28 = 0;
    v8 = v7;
  }
  v29 = &v4[16 * v28];
  if (v8 != v29)
  {
    if (v8 <= v7)
    {
      v36 = (_OWORD *)((char *)v7 + (((char *)v29 - (char *)v8) & 0xFFFFFFFFFFFFFF80) - 128);
      do
      {
        v37 = *((_OWORD *)v29 - 8);
        v38 = *((_OWORD *)v29 - 7);
        v39 = *((_OWORD *)v29 - 5);
        v36[2] = *((_OWORD *)v29 - 6);
        v36[3] = v39;
        *v36 = v37;
        v36[1] = v38;
        v40 = *((_OWORD *)v29 - 4);
        v41 = *((_OWORD *)v29 - 3);
        v42 = *((_OWORD *)v29 - 1);
        v36[6] = *((_OWORD *)v29 - 2);
        v36[7] = v42;
        v36[4] = v40;
        v36[5] = v41;
        v36 -= 8;
        v29 -= 16;
      }
      while (v29 != v8);
    }
    else
    {
      do
      {
        v30 = *(_OWORD *)v8;
        v31 = *((_OWORD *)v8 + 1);
        v32 = *((_OWORD *)v8 + 3);
        *((_OWORD *)v7 + 2) = *((_OWORD *)v8 + 2);
        *((_OWORD *)v7 + 3) = v32;
        *(_OWORD *)v7 = v30;
        *((_OWORD *)v7 + 1) = v31;
        v33 = *((_OWORD *)v8 + 4);
        v34 = *((_OWORD *)v8 + 5);
        v35 = *((_OWORD *)v8 + 7);
        *((_OWORD *)v7 + 6) = *((_OWORD *)v8 + 6);
        *((_OWORD *)v7 + 7) = v35;
        *((_OWORD *)v7 + 4) = v33;
        *((_OWORD *)v7 + 5) = v34;
        v7 += 16;
        v8 += 16;
      }
      while (v8 != v29);
    }
  }
  v43 = *(_DWORD *)(a1 + 176);
  v44 = (*(_DWORD *)(a1 + 180) - v6);
  *(_DWORD *)(a1 + 180) = v44;
  if ((_DWORD)v44 == v43)
  {
    result = WTF::Vector<WebCore::PlatformWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v44 + 1, a2);
    v45 = (_OWORD *)(*(_QWORD *)(a1 + 168) + ((unint64_t)*(unsigned int *)(a1 + 180) << 7));
    v46 = *((_OWORD *)result + 7);
    v48 = *((_OWORD *)result + 4);
    v47 = *((_OWORD *)result + 5);
    v45[6] = *((_OWORD *)result + 6);
    v45[7] = v46;
    v45[4] = v48;
    v45[5] = v47;
    v49 = *(_OWORD *)result;
    v50 = *((_OWORD *)result + 1);
    v51 = *((_OWORD *)result + 3);
    v45[2] = *((_OWORD *)result + 2);
    v45[3] = v51;
    *v45 = v49;
    v45[1] = v50;
  }
  else
  {
    v52 = (_OWORD *)(*(_QWORD *)result + (v44 << 7));
    v53 = *(_OWORD *)a2;
    v54 = *(_OWORD *)(a2 + 16);
    v55 = *(_OWORD *)(a2 + 48);
    v52[2] = *(_OWORD *)(a2 + 32);
    v52[3] = v55;
    *v52 = v53;
    v52[1] = v54;
    v56 = *(_OWORD *)(a2 + 64);
    v57 = *(_OWORD *)(a2 + 80);
    v58 = *(_OWORD *)(a2 + 112);
    v52[6] = *(_OWORD *)(a2 + 96);
    v52[7] = v58;
    v52[4] = v56;
    v52[5] = v57;
  }
  ++*(_DWORD *)(a1 + 180);
  return result;
}

uint64_t WebCore::ScrollAnimationKinetic::startAnimatedScrollWithInitialVelocity(WebCore::ScrollAnimationKinetic *this, const WebCore::FloatPoint *a2, const WebCore::FloatSize *a3, const WebCore::FloatSize *a4, int a5, int a6)
{
  float v12;
  float v13;
  uint64_t v14;
  WTF::MonotonicTime *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  double v31;
  int v32;
  BOOL v33;
  double v34;
  float v35;
  float v36;
  double v37;
  float v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  BOOL v44;
  double v45;
  int v46;
  BOOL v47;
  double v48;
  uint64_t v49;

  *((_QWORD *)this + 23) = *(_QWORD *)a2;
  *((_QWORD *)this + 24) = *(_QWORD *)a3;
  if (*((_BYTE *)this + 20))
  {
    *((_BYTE *)this + 20) = 0;
    (*(void (**)(_QWORD, WebCore::ScrollAnimationKinetic *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), this);
  }
  v12 = *(float *)a3;
  if (*(float *)a3 != 0.0)
  {
    if (v12 < 0.0)
      v12 = -v12;
    if (v12 >= 0.00000011921)
      goto LABEL_17;
  }
  v13 = *((float *)a3 + 1);
  if (v13 == 0.0)
    goto LABEL_68;
  if (v13 < 0.0)
    v13 = -v13;
  if (v13 < 0.00000011921)
  {
LABEL_68:
    if (*((_BYTE *)this + 96))
      *((_BYTE *)this + 96) = 0;
    v14 = 0;
    if (*((_BYTE *)this + 160))
      *((_BYTE *)this + 160) = 0;
  }
  else
  {
LABEL_17:
    v16 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD, WebCore::ScrollAnimationKinetic *))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), this);
    if (a5)
    {
      v21 = v17 - v19;
      if (v21 >= 0.0)
        v22 = v21;
      else
        v22 = 0.0;
      v23 = v22;
      v24 = *(float *)a2;
      v25 = *(float *)a2;
      v26 = *(float *)a3;
      v27 = *(float *)a4;
      if (((*(_QWORD *)&v27 ^ *(_QWORD *)&v26) & 0x8000000000000000) == 0 && fabs(v26) >= fabs(v27 * 0.33))
      {
        v28 = (v26 - v27 * 0.33) / (v27 - v27 * 0.33);
        if (v28 > 6.0)
          v28 = 6.0;
        v26 = v26 + v27 * v28;
      }
      v29 = v26 * 0.25 + v25;
      if (v24 <= 0.0)
        v25 = 0.0;
      v30 = v24 <= v22;
      if (v24 >= v22)
        v31 = v22;
      else
        v31 = v25;
      v32 = *((unsigned __int8 *)this + 96);
      *((_QWORD *)this + 5) = 0;
      v33 = !v30 || v24 < 0.0;
      *((double *)this + 6) = v23;
      *((double *)this + 7) = v29;
      *((double *)this + 8) = v26 * -0.25;
      *((_QWORD *)this + 9) = 0;
      if (v33)
        v34 = 0.0;
      else
        v34 = v26;
      *((double *)this + 10) = v31;
      *((double *)this + 11) = v34;
      if (!v32)
        *((_BYTE *)this + 96) = 1;
    }
    else if (*((_BYTE *)this + 96))
    {
      *((_BYTE *)this + 96) = 0;
    }
    if (a6)
    {
      v35 = v18 - v20;
      if (v35 >= 0.0)
        v36 = v35;
      else
        v36 = 0.0;
      v37 = v36;
      v38 = *((float *)a2 + 1);
      v39 = v38;
      v40 = *((float *)a3 + 1);
      v41 = *((float *)a4 + 1);
      if (((*(_QWORD *)&v41 ^ *(_QWORD *)&v40) & 0x8000000000000000) == 0 && fabs(v40) >= fabs(v41 * 0.33))
      {
        v42 = (v40 - v41 * 0.33) / (v41 - v41 * 0.33);
        if (v42 > 6.0)
          v42 = 6.0;
        v40 = v40 + v41 * v42;
      }
      v43 = v40 * 0.25 + v39;
      if (v38 <= 0.0)
        v39 = 0.0;
      v44 = v38 <= v36;
      if (v38 >= v36)
        v45 = v36;
      else
        v45 = v39;
      v46 = *((unsigned __int8 *)this + 160);
      *((_QWORD *)this + 13) = 0;
      v47 = !v44 || v38 < 0.0;
      *((double *)this + 14) = v37;
      *((double *)this + 15) = v43;
      *((double *)this + 16) = v40 * -0.25;
      *((_QWORD *)this + 17) = 0;
      if (v47)
        v48 = 0.0;
      else
        v48 = v40;
      *((double *)this + 18) = v45;
      *((double *)this + 19) = v48;
      if (!v46)
        *((_BYTE *)this + 160) = 1;
    }
    else if (*((_BYTE *)this + 160))
    {
      *((_BYTE *)this + 160) = 0;
    }
    *((_QWORD *)this + 4) = *(_QWORD *)a2;
    WTF::MonotonicTime::now(v16);
    *((_QWORD *)this + 3) = v49;
    v14 = 1;
    *((_BYTE *)this + 20) = 1;
    (*(void (**)(_QWORD, WebCore::ScrollAnimationKinetic *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), this);
  }
  return v14;
}

uint64_t WebCore::ScrollAnimation::stop(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
  {
    *(_BYTE *)(this + 20) = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 8) + 32))(*(_QWORD *)(this + 8), this);
  }
  return this;
}

uint64_t WebCore::ScrollAnimationKinetic::retargetActiveAnimation(WebCore::ScrollAnimationKinetic *this, const WebCore::FloatPoint *a2)
{
  return 0;
}

uint64_t WebCore::ScrollAnimationKinetic::serviceAnimation(WebCore::ScrollAnimationKinetic *this, MonotonicTime a2)
{
  double v3;
  double v4;
  double v5;
  long double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  char v11;
  double v12;
  double v13;
  long double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  char v19;
  float v20;
  float v21;
  uint64_t result;

  v3 = a2.m_value - *((double *)this + 3);
  if (!*((_BYTE *)this + 96))
    goto LABEL_10;
  v5 = *((double *)this + 9);
  v4 = *((double *)this + 10);
  *((double *)this + 9) = v3;
  v6 = exp(v3 * -4.0);
  v7 = *((double *)this + 8);
  v8 = *((double *)this + 7) + v7 * v6;
  v9 = v6 * (v7 * -4.0);
  *((double *)this + 10) = v8;
  *((double *)this + 11) = v9;
  v10 = *((double *)this + 5);
  if (v8 < v10 || (v10 = *((double *)this + 6), v8 > v10))
  {
    v9 = v10 - v8;
    *((double *)this + 10) = v10;
    *((double *)this + 11) = v10 - v8;
    v8 = v10;
  }
  if (fabs(v9) < 1.0 || v5 > 0.0 && vabdd_f64(v8, v4) < 1.0)
  {
    *((double *)this + 10) = round(v8);
    *((_QWORD *)this + 11) = 0;
LABEL_9:
    *((_BYTE *)this + 96) = 0;
LABEL_10:
    v11 = 1;
    goto LABEL_11;
  }
  if (v9 == 0.0)
    goto LABEL_9;
  v11 = 0;
LABEL_11:
  if (!*((_BYTE *)this + 160))
    goto LABEL_20;
  v13 = *((double *)this + 17);
  v12 = *((double *)this + 18);
  *((double *)this + 17) = v3;
  v14 = exp(v3 * -4.0);
  v15 = *((double *)this + 16);
  v16 = *((double *)this + 15) + v15 * v14;
  v17 = v14 * (v15 * -4.0);
  *((double *)this + 18) = v16;
  *((double *)this + 19) = v17;
  v18 = *((double *)this + 13);
  if (v16 < v18 || (v18 = *((double *)this + 14), v16 > v18))
  {
    v17 = v18 - v16;
    *((double *)this + 18) = v18;
    *((double *)this + 19) = v18 - v16;
    v16 = v18;
  }
  if (fabs(v17) < 1.0 || v13 > 0.0 && vabdd_f64(v16, v12) < 1.0)
  {
    *((double *)this + 18) = round(v16);
    *((_QWORD *)this + 19) = 0;
LABEL_19:
    *((_BYTE *)this + 160) = 0;
LABEL_20:
    v19 = 1;
    if ((v11 & 1) != 0)
      goto LABEL_21;
LABEL_27:
    v20 = *((double *)this + 10);
    if ((v19 & 1) == 0)
      goto LABEL_22;
    goto LABEL_28;
  }
  if (v17 == 0.0)
    goto LABEL_19;
  v19 = 0;
  if ((v11 & 1) == 0)
    goto LABEL_27;
LABEL_21:
  v20 = *((float *)this + 8);
  if ((v19 & 1) == 0)
  {
LABEL_22:
    v21 = *((double *)this + 18);
    goto LABEL_29;
  }
LABEL_28:
  v21 = *((float *)this + 9);
LABEL_29:
  *((float *)this + 8) = v20;
  *((float *)this + 9) = v21;
  result = (*(uint64_t (**)(_QWORD, WebCore::ScrollAnimationKinetic *, char *))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), this, (char *)this + 32);
  if (!*((_BYTE *)this + 96) && !*((_BYTE *)this + 160))
  {
    *((_BYTE *)this + 20) = 0;
    return (*(uint64_t (**)(_QWORD, WebCore::ScrollAnimationKinetic *))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), this);
  }
  return result;
}

WTF::StringImpl *WebCore::ScrollAnimationKinetic::debugDescription(WebCore::ScrollAnimationKinetic *this)
{
  float v2;
  float v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;
  int v11;
  __int16 v12;
  int v13;
  double v14;
  double v15;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v11 = 0;
  v12 = 256;
  v13 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v2 = *((float *)this + 8);
  v3 = *((float *)this + 9);
  WTF::TextStream::operator<<();
  v15 = v2;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v14 = v3;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::release((WTF::TextStream *)&v7);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

float WebCore::ScrollAnimationKinetic::accumulateVelocityFromPreviousGesture(WTF::MonotonicTime *a1, float *a2, float *a3, double a4)
{
  double v8;
  double v9;
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  float v19;
  double v20;

  WTF::MonotonicTime::now(a1);
  v9 = v8 - a4;
  v10 = (*(float (**)(_QWORD *, WTF::MonotonicTime *))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD **)a1 + 1), a1);
  v12 = v11;
  v13 = *a3;
  v14 = v13 * 0.25 + *a2;
  v15 = v13 * -0.25;
  v16 = exp(v9 * -4.0);
  v17 = v14 + v15 * v16;
  v18 = 0.0;
  if (v17 < 0.0)
    goto LABEL_5;
  v19 = v10 - v12;
  if ((float)(v10 - v12) < 0.0)
    v19 = 0.0;
  v18 = v19;
  if (v17 <= v18)
    v20 = v16 * (v15 * -4.0);
  else
LABEL_5:
    v20 = v18 - v17;
  if (fabs(v20) < 1.0)
    return 0.0;
  return v20;
}

void WebCore::ScrollAnimationSmooth::~ScrollAnimationSmooth(WebCore::ScrollAnimationSmooth *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[2];
  }
}

void WebCore::ScrollAnimationSmooth::~ScrollAnimationSmooth(WebCore::ScrollAnimationSmooth *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ScrollAnimationSmooth::startAnimatedScrollToDestination(WebCore::ScrollAnimationSmooth *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v16;
  _BYTE *v17;
  WTF::MonotonicTime *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  v6 = (*(float (**)(_QWORD, WebCore::ScrollAnimationSmooth *))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), this);
  v7 = *(_QWORD *)a2;
  *((_QWORD *)this + 6) = *(_QWORD *)a2;
  *((_QWORD *)this + 4) = v7;
  v9 = v6 - v8;
  v12 = v10 - v11;
  if (v9 < 0.0)
    v9 = 0.0;
  if (v12 < 0.0)
    v12 = 0.0;
  if (*(float *)a3 < v9)
    v9 = *(float *)a3;
  v13 = fmaxf(v9, 0.0);
  if (*((float *)a3 + 1) < v12)
    v12 = *((float *)a3 + 1);
  v14 = fmaxf(v12, 0.0);
  *((float *)this + 14) = v13;
  *((float *)this + 15) = v14;
  if (!*((_BYTE *)this + 20) && *(float *)a2 == v13 && *((float *)a2 + 1) == v14)
    return 0;
  v16 = (float)(hypotf(v13 - *(float *)&v7, v14 - *((float *)&v7 + 1)) / 1000.0);
  if (v16 > 0.2)
    v16 = 0.2;
  *((double *)this + 5) = v16;
  if (v16 == 0.0)
    return 0;
  v17 = (_BYTE *)*((_QWORD *)this + 8);
  v18 = (WTF::MonotonicTime *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v17 + 24))(v17);
  if ((_DWORD)v18 == 1)
  {
    v17[48] = 3;
    v19 = 1;
    if (!*((_BYTE *)this + 20))
    {
      WTF::MonotonicTime::now(v18);
      *((_QWORD *)this + 3) = v20;
      *((_BYTE *)this + 20) = 1;
      (*(void (**)(_QWORD, WebCore::ScrollAnimationSmooth *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), this);
    }
    return v19;
  }
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ScrollAnimationSmooth::retargetActiveAnimation(WebCore::ScrollAnimationSmooth *this, const WebCore::FloatPoint *a2)
{
  WTF::MonotonicTime *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  double v19;
  _BYTE *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t result;

  if (!*((_BYTE *)this + 20))
    return 0;
  v4 = (WTF::MonotonicTime *)(*(uint64_t (**)(_QWORD, WebCore::ScrollAnimationSmooth *))(**((_QWORD **)this + 1)
                                                                                                 + 40))(*((_QWORD *)this + 1), this);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  WTF::MonotonicTime::now(v4);
  *((_QWORD *)this + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 6) = v14;
  v15 = v6 - v10;
  v16 = v8 - v12;
  if ((float)(v6 - v10) < 0.0)
    v15 = 0.0;
  if (v16 < 0.0)
    v16 = 0.0;
  if (*(float *)a2 < v15)
    v15 = *(float *)a2;
  v17 = fmaxf(v15, 0.0);
  if (*((float *)a2 + 1) < v16)
    v16 = *((float *)a2 + 1);
  v18 = fmaxf(v16, 0.0);
  *((float *)this + 14) = v17;
  *((float *)this + 15) = v18;
  v19 = (float)(hypotf(v17 - *(float *)&v14, v18 - *((float *)&v14 + 1)) / 1000.0);
  if (v19 > 0.2)
    v19 = 0.2;
  *((double *)this + 5) = v19;
  v20 = (_BYTE *)*((_QWORD *)this + 8);
  if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)v20 + 24))(v20) == 1)
  {
    v20[48] = 2;
    v21 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)(v21 + 8) = 1;
    *(_QWORD *)v21 = &off_1E3347E18;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_OWORD *)(v21 + 32) = xmmword_1969F6BA0;
    *(_BYTE *)(v21 + 48) = 2;
    v22 = (_DWORD *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v21;
    if (v22)
    {
      if (v22[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 16))(v22);
      else
        --v22[2];
    }
    if (*((float *)this + 8) == *((float *)this + 14) && *((float *)this + 9) == *((float *)this + 15))
      return 0;
    return *((double *)this + 5) != 0.0;
  }
  else
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

float32x2_t WebCore::ScrollAnimationSmooth::updateScrollExtents(WebCore::ScrollAnimationSmooth *this)
{
  float32x2_t v2;
  __int32 v3;
  __int32 v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x2_t result;

  v2.f32[0] = (*(float (**)(_QWORD, WebCore::ScrollAnimationSmooth *))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), this);
  v2.i32[1] = v3;
  v5.i32[1] = v4;
  v6 = vsub_f32(v2, v5);
  v7 = (float32x2_t)vbic_s8((int8x8_t)v6, (int8x8_t)vcltz_f32(v6));
  result = vmaxnm_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, *(float32x2_t *)((char *)this + 56)), *(int8x8_t *)((char *)this + 56), (int8x8_t)v7), 0);
  *((float32x2_t *)this + 7) = result;
  return result;
}

uint64_t WebCore::ScrollAnimationSmooth::serviceAnimation(uint64_t a1, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t result;

  v3 = *(double *)(a1 + 40);
  v4 = *(double *)(a1 + 24);
  v5 = v3 + v4;
  if (v3 + v4 >= a2)
    v6 = a2;
  else
    v6 = v3 + v4;
  WebCore::TimingFunction::transformProgress(*(WebCore::TimingFunction **)(a1 + 64), (v6 - v4) / v3, v3);
  *(float *)&v7 = v7;
  *(float32x2_t *)(a1 + 32) = vmla_n_f32(*(float32x2_t *)(a1 + 48), vsub_f32(*(float32x2_t *)(a1 + 56), *(float32x2_t *)(a1 + 48)), *(float *)&v7);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1, a1 + 32);
  if (v6 >= v5)
  {
    *(_BYTE *)(a1 + 20) = 0;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a1);
  }
  return result;
}

WTF::StringImpl *WebCore::ScrollAnimationSmooth::debugDescription(WebCore::ScrollAnimationSmooth *this)
{
  float v2;
  float v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  char v10;
  int v11;
  __int16 v12;
  int v13;
  double v14;
  double v15;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v11 = 0;
  v12 = 256;
  v13 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v15 = *((float *)this + 12);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v14 = *((float *)this + 13);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v15 = *((float *)this + 14);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v14 = *((float *)this + 15);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v2 = *((float *)this + 8);
  v3 = *((float *)this + 9);
  WTF::TextStream::operator<<();
  v15 = v2;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v14 = v3;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::release((WTF::TextStream *)&v7);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ScrollAnimator::singleAxisScroll(uint64_t a1, int a2, char a3, int8x16_t a4, double a5, int8x16_t a6)
{
  _QWORD *v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  int *v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int8x16_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v36;
  float v37;
  unsigned int v39;
  unsigned int v40;
  int v41;
  float v42;
  BOOL v43;
  float v44;
  _DWORD *v45;
  uint64_t v46;
  char v47;
  float v48;
  float v49;
  uint64_t v50;
  WebCore::ScrollAnimator *v51;
  float v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  int8x16_t v57;
  _QWORD *v58;
  __int128 v59;

  v9 = *(_QWORD **)(a1 + 8);
  v10 = v9[3];
  if (!v10)
  {
    v57 = a4;
    if ((*(unsigned int (**)(_QWORD *))(*v9 + 688))(v9))
    {
      v58 = v9;
      std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v59, (uint64_t)v9, (uint64_t *)&v58);
      v54 = v59;
      *(_QWORD *)&v59 = 0;
      v55 = v9[3];
      v9[3] = v54;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100]((WTF **)&v59, v53);
    }
    else
    {
      (*(void (**)(_QWORD *))(*v9 + 304))(v9);
    }
    v10 = v9[3];
    a4 = v57;
    if (!v10)
    {
      __break(0xC471u);
      JUMPOUT(0x1960DC940);
    }
  }
  *(_BYTE *)(v10 + 16) = 1;
  if (a2 == 1)
    v11 = *(float *)a4.i32;
  else
    v11 = 0.0;
  if (a2)
    v12 = 0.0;
  else
    v12 = *(float *)a4.i32;
  if (a2)
    v13 = v11;
  else
    v13 = 0.0;
  if ((a3 & 1) != 0)
  {
    v15 = *(_QWORD *)(a1 + 104);
    v14 = *(int **)(a1 + 8);
    if (v15)
    {
      v16 = *(float *)(a1 + 120) + (float)v14[8];
      v17 = *(float *)(a1 + 124) + (float)v14[9];
      v18 = v12 + v16;
      v19 = v13 + v17;
      a6.i32[0] = 1.0;
      v20.i64[0] = 0x8000000080000000;
      v20.i64[1] = 0x8000000080000000;
      LODWORD(v56) = vbslq_s8(v20, a6, a4).u32[0];
      if (a2 == 1)
      {
        LODWORD(v59) = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 160))(*(_QWORD *)(a1 + 88));
        *(_QWORD *)((char *)&v59 + 4) = __PAIR64__(v40, v39);
        HIDWORD(v59) = v41;
        v42 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 152))(*(_QWORD *)(a1 + 88));
        v19 = WebCore::ScrollSnapAnimatorState::adjustedScrollDestination(v15, 1, LODWORD(v17) | 0x100000000, (uint64_t)&v59, v18, v19, v56, v42);
      }
      else
      {
        LODWORD(v59) = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 160))(*(_QWORD *)(a1 + 88));
        *(_QWORD *)((char *)&v59 + 4) = __PAIR64__(v22, v21);
        HIDWORD(v59) = v23;
        v24 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 152))(*(_QWORD *)(a1 + 88));
        if (a2)
          WebCore::ScrollSnapAnimatorState::adjustedScrollDestination(v15, a2, 0x100000000, (uint64_t)&v59, v18, v19, v56, v24);
        else
          v18 = WebCore::ScrollSnapAnimatorState::adjustedScrollDestination(v15, 0, LODWORD(v16) | 0x100000000, (uint64_t)&v59, v18, v19, v56, v24);
      }
      v36 = v18 - v16;
      v37 = v19 - v17;
      goto LABEL_34;
    }
  }
  else
  {
    v14 = *(int **)(a1 + 8);
  }
  v25 = v12 + *(float *)(a1 + 120);
  v26 = v13 + *(float *)(a1 + 124);
  v27 = (*(uint64_t (**)(int *))(*(_QWORD *)v14 + 424))(v14);
  v28 = (float)(int)v27;
  v29 = (float)SHIDWORD(v27);
  v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8));
  v31 = (float)(int)v30;
  v32 = (float)SHIDWORD(v30);
  if (v25 < (float)(int)v30)
    v31 = v25;
  if (v31 <= v28)
    v31 = v28;
  if (v26 < v32)
    v32 = v26;
  if (v32 <= v29)
    v32 = v29;
  v33 = *(float *)(a1 + 120);
  v34 = *(float *)(a1 + 124);
  if (v31 == v33 && v32 == v34)
    return 0;
  v36 = v31 - v33;
  v37 = v32 - v34;
LABEL_34:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 640))(*(_QWORD *)(a1 + 8)))
    v43 = (a3 & 2) == 0;
  else
    v43 = 0;
  if (v43)
  {
    v45 = *(_DWORD **)(a1 + 96);
    if (!v45
      || v45[4]
      || !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v45 + 40))(v45)
      || (v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 56))(*(_QWORD *)(a1 + 96)), !v47)
      || (v48 = *((float *)&v46 + 1),
          v49 = *(float *)&v46,
          v50 = *(_QWORD *)(a1 + 96),
          *(float *)&v59 = v36 + v49,
          *((float *)&v59 + 1) = v37 + v48,
          ((*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v50 + 24))(v50, &v59) & 1) == 0))
    {
      v59 = xmmword_1969F6380;
      *(_QWORD *)((char *)&v59 + 4) = __PAIR64__(LODWORD(v37), LODWORD(v36));
      v51 = *(WebCore::ScrollAnimator **)(a1 + 8);
      v52 = v37 + *(float *)(a1 + 124);
      *(float *)&v58 = v36 + *(float *)(a1 + 120);
      *((float *)&v58 + 1) = v52;
      WebCore::ScrollableArea::scrollToPositionWithAnimation(v51, (float *)&v58, (uint64_t)&v59);
    }
    return 1;
  }
  else
  {
    v44 = v37 + *(float *)(a1 + 124);
    *(float *)&v59 = v36 + *(float *)(a1 + 120);
    *((float *)&v59 + 1) = v44;
    return WebCore::ScrollAnimator::scrollToPositionWithoutAnimation((float32x2_t *)a1, (float *)&v59, 1);
  }
}

uint64_t WebCore::ScrollAnimator::scrollToPositionWithAnimation(uint64_t a1, float *a2, int a3)
{
  uint64_t v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  BOOL v16;

  if (a3)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 424))(*(_QWORD *)(a1 + 8));
    v6 = (float)(int)v5;
    v7 = (float)SHIDWORD(v5);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8));
    v9 = (float)(int)v8;
    if (*a2 < (float)(int)v8)
      v9 = *a2;
    if (v9 <= v6)
      v10 = v6;
    else
      v10 = v9;
    if (a2[1] >= (float)SHIDWORD(v8))
      v11 = (float)SHIDWORD(v8);
    else
      v11 = a2[1];
    if (v11 <= v7)
      v12 = v7;
    else
      v12 = v11;
  }
  else
  {
    v10 = *a2;
    v12 = a2[1];
  }
  v13 = *(float *)(a1 + 120);
  v14 = *(float *)(a1 + 124);
  v15 = *(_QWORD *)(a1 + 8);
  v16 = v10 == v13 && v12 == v14;
  if (v16 && !*(_BYTE *)(v15 + 47))
    return 0;
  else
    return WebCore::ScrollingEffectsController::startAnimatedScrollToDestination(a1 + 24, v13 + (float)*(int *)(v15 + 32), v14 + (float)*(int *)(v15 + 36), v10 + (float)*(int *)(v15 + 32), v12 + (float)*(int *)(v15 + 36));
}

WebCore::ScrollAnimationSmooth *WebCore::ScrollAnimator::retargetRunningAnimation(WebCore::ScrollAnimator *this, float32x2_t *a2)
{
  WebCore::ScrollAnimationSmooth *result;
  float32x2_t v3;

  v3 = vadd_f32(*a2, vcvt_f32_s32(*(int32x2_t *)(*((_QWORD *)this + 1) + 32)));
  result = (WebCore::ScrollAnimationSmooth *)*((_QWORD *)this + 12);
  if (result)
  {
    if (!*((_DWORD *)result + 4))
      return (WebCore::ScrollAnimationSmooth *)WebCore::ScrollAnimationSmooth::retargetActiveAnimation(result, (const WebCore::FloatPoint *)&v3);
  }
  return result;
}

uint64_t WebCore::ScrollAnimator::handleWheelEvent(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  char v22;
  WebCore::Scrollbar *v23;
  float v24;
  WebCore::Scrollbar *v25;
  float v26;
  unint64_t v27;
  int8x16_t v28;
  int8x16_t v29;

  v4 = *(_BYTE *)(a2 + 50);
  if (v4)
  {
    if (*(_BYTE *)(a2 + 92))
    {
      if (*(_BYTE *)(a2 + 92) != 8 || (v4 = *(_BYTE *)(a2 + 93)) != 0)
        v4 = 1;
    }
    else
    {
      v4 = *(_BYTE *)(a2 + 93) != 1;
    }
  }
  *(_BYTE *)(a1 + 117) = v4;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, a2) & 1) != 0)
    return 0;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8)))
    return WebCore::ScrollingEffectsController::handleWheelEvent(a1 + 24, (__int128 *)a2);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 392))(*(_QWORD *)(a1 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 400))(*(_QWORD *)(a1 + 8));
  v8 = v7;
  v9.i32[0] = 0;
  v10.i32[0] = *(_DWORD *)(a2 + 68);
  if (!v6)
    *(float *)v10.i32 = 0.0;
  if (v7)
    v9.i32[0] = *(_DWORD *)(a2 + 72);
  v28 = v9;
  v29 = v10;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 432))(*(_QWORD *)(a1 + 8));
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 416))(*(_QWORD *)(a1 + 8));
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 416))(*(_QWORD *)(a1 + 8));
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 424))(*(_QWORD *)(a1 + 8));
  v17 = v28;
  v16.i64[0] = v29.i64[0];
  if ((*(float *)v29.i32 >= 0.0 || (int)v11 - (int)v12 <= 0)
    && (*(float *)v29.i32 <= 0.0 || (int)v13 - (int)v14 <= 0)
    && (*(float *)v28.i32 >= 0.0 || SHIDWORD(v11) <= SHIDWORD(v12))
    && (*(float *)v28.i32 <= 0.0 || SHIDWORD(v13) <= SHIDWORD(v14)))
  {
    return 0;
  }
  if (*(_BYTE *)(a2 + 50))
    v22 = 3;
  else
    v22 = 1;
  if (*(float *)v28.i32 != 0.0)
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      v23 = (WebCore::Scrollbar *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 488))(*(_QWORD *)(a1 + 8));
      v24 = (float)SHIDWORD(v23) * 0.8;
      *(float *)v15.i32 = (float)SHIDWORD(v23) - (float)(int)WebCore::Scrollbar::maxOverlapBetweenPages(v23);
      if (v24 >= *(float *)v15.i32)
        *(float *)v15.i32 = v24;
      if (*(float *)v15.i32 < 1.0)
        *(float *)v15.i32 = 1.0;
      v16.i64[0] = 0x8000000080000000;
      v16.i64[1] = 0x8000000080000000;
      v17 = vbslq_s8(v16, v15, v28);
    }
    *(float *)v15.i32 = -(float)(*(float *)v17.i32 * *(float *)(v8 + 112));
    WebCore::ScrollAnimator::singleAxisScroll(a1, 1, v22, v15, *(double *)v16.i64, v17);
    v16.i64[0] = v29.i64[0];
  }
  if (*(float *)v16.i32 != 0.0)
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      v25 = (WebCore::Scrollbar *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 488))(*(_QWORD *)(a1 + 8));
      v26 = (float)(int)v25 * 0.8;
      *(float *)v15.i32 = (float)(int)v25 - (float)(int)WebCore::Scrollbar::maxOverlapBetweenPages(v25);
      if (v26 >= *(float *)v15.i32)
        *(float *)v15.i32 = v26;
      if (*(float *)v15.i32 < 1.0)
        *(float *)v15.i32 = 1.0;
      v27 = 0x8000000080000000;
      v16.i64[1] = 0x8000000080000000;
      v17 = vbslq_s8(v16, v15, v29);
      v16.i64[0] = v17.i64[0];
    }
    *(float *)v15.i32 = -(float)(*(float *)v16.i32 * *(float *)(v6 + 112));
    WebCore::ScrollAnimator::singleAxisScroll(a1, 0, v22, v15, *(double *)v16.i64, v17);
  }
  return 1;
}

uint64_t WebCore::ScrollAnimator::handleTouchEvent()
{
  return 0;
}

uint64_t WebCore::ScrollAnimator::notifyPositionChanged(WebCore::ScrollableArea **this, const WebCore::FloatSize *a2)
{
  uint64_t v4;
  WebCore::ScrollableArea *v5;
  const WebCore::FloatPoint *v6;
  unint64_t v8;

  v4 = WebCore::ScrollableArea::scrollbarsController(this[1]);
  (*(void (**)(uint64_t, const WebCore::FloatSize *))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = this[1];
  v8 = WebCore::roundedIntPoint((WebCore *)(this + 15), v6);
  WebCore::ScrollableArea::setScrollPositionFromAnimation(v5, (const WebCore::IntPoint *)&v8);
  return JSC::GCIncomingRefCounted<JSC::ArrayBuffer>::singletonFlag(this + 3);
}

float WebCore::ScrollAnimator::scrollOffset(WebCore::ScrollAnimator *this)
{
  float v1;
  int v2;
  int v3;

  v1 = roundf(*((float *)this + 30));
  v2 = 0x7FFFFFFF;
  v3 = 0x80000000;
  if (v1 > -2147500000.0)
    v3 = (int)v1;
  if (v1 < 2147500000.0)
    v2 = v3;
  return (float)(int)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + v2);
}

uint64_t WebCore::ScrollAnimator::allowsHorizontalScrolling(WebCore::ScrollAnimator *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 392))(*((_QWORD *)this + 1));
  if (result)
    return *(_BYTE *)(result + 136) != 0;
  return result;
}

uint64_t WebCore::ScrollAnimator::allowsVerticalScrolling(WebCore::ScrollAnimator *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 400))(*((_QWORD *)this + 1));
  if (result)
    return *(_BYTE *)(result + 136) != 0;
  return result;
}

uint64_t WebCore::ScrollAnimator::willStartAnimatedScroll(uint64_t this)
{
  *(_BYTE *)(*(_QWORD *)(this + 8) + 45) = 1;
  return this;
}

uint64_t WebCore::ScrollAnimator::didStopAnimatedScroll(WebCore::ScrollAnimator *this)
{
  _BYTE *v1;

  v1 = (_BYTE *)*((_QWORD *)this + 1);
  v1[45] = 0;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 472))(v1);
}

unint64_t WebCore::ScrollAnimator::adjustScrollPositionToBoundsIfNecessary(WebCore::ScrollAnimator *this)
{
  _BYTE *v2;
  char v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t result;
  float v15[2];

  v2 = (_BYTE *)*((_QWORD *)this + 1);
  v3 = v2[40];
  v2[40] = 1;
  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 416))(v2);
  v5 = v4;
  v6 = HIDWORD(v4);
  v7 = *((_QWORD *)this + 1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 424))(v7);
  v9 = v8;
  v10 = HIDWORD(v8);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 432))(v7);
  v12 = HIDWORD(v11);
  if (v5 >= (int)v11)
    v13 = v11;
  else
    v13 = v5;
  if (v9 > v13)
    v13 = v9;
  if ((int)v6 < SHIDWORD(v11))
    LODWORD(v12) = v6;
  if ((int)v10 > (int)v12)
    LODWORD(v12) = v10;
  v15[0] = (float)(v13 - v5);
  v15[1] = (float)((int)v12 - (int)v6);
  result = WebCore::ScrollAnimator::immediateScrollBy((unint64_t)this, v15, 1);
  *(_BYTE *)(*((_QWORD *)this + 1) + 40) = v3;
  return result;
}

unint64_t WebCore::ScrollAnimator::immediateScrollBy(unint64_t this, float *a2, int a3)
{
  uint64_t v3;
  _BYTE *v4;
  char v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  float v20;
  float v21[2];

  v3 = this;
  v4 = *(_BYTE **)(this + 8);
  v5 = v4[40];
  v4[40] = a3;
  v6 = *(float *)(this + 120);
  v7 = *(float *)(this + 124);
  v8 = v6 + *a2;
  v9 = v7 + a2[1];
  if (a3)
  {
    if (v8 > -2147500000.0)
      v10 = (int)v8;
    else
      v10 = 0x80000000;
    if (v8 < 2147500000.0)
      v11 = v10;
    else
      v11 = 0x7FFFFFFF;
    if (v9 > -2147500000.0)
      v12 = (int)v9;
    else
      v12 = 0x80000000;
    if (v9 < 2147500000.0)
      v13 = v12;
    else
      v13 = 0x7FFFFFFF;
    v14 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 424))(v4);
    v15 = v14;
    v16 = HIDWORD(v14);
    this = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 432))(v4);
    v17 = HIDWORD(this);
    if (v11 >= (int)this)
      v18 = this;
    else
      v18 = v11;
    if (v15 > v18)
      v18 = v15;
    if (v13 < SHIDWORD(this))
      LODWORD(v17) = v13;
    if ((int)v16 > (int)v17)
      LODWORD(v17) = v16;
    v8 = (float)v18;
    v9 = (float)(int)v17;
  }
  if (v8 != v6 || v9 != v7)
  {
    v20 = v9 - *(float *)(v3 + 124);
    v21[0] = v8 - *(float *)(v3 + 120);
    v21[1] = v20;
    *(float *)(v3 + 120) = v8;
    *(float *)(v3 + 124) = v9;
    WebCore::ScrollAnimator::notifyPositionChanged((WebCore::ScrollableArea **)v3, (const WebCore::FloatSize *)v21);
    this = WebCore::ScrollingEffectsController::updateActiveScrollSnapIndexForClientOffset(v3 + 24);
  }
  *(_BYTE *)(*(_QWORD *)(v3 + 8) + 40) = v5;
  return this;
}

float WebCore::ScrollAnimator::scrollExtents(WebCore::ScrollAnimator *this)
{
  uint64_t v2;
  int v3;

  v2 = *((_QWORD *)this + 1);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 496))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 528))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 536))(v2);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 488))(*((_QWORD *)this + 1));
  return (float)v3;
}

uint64_t WebCore::ScrollAnimator::pageScaleFactor(WebCore::ScrollAnimator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 720))(*((_QWORD *)this + 1));
}

uint64_t WebCore::ScrollAnimator::createTimer@<X0>(WTF::RunLoop *a1@<X0>, uint64_t *a2@<X1>, WTF::RunLoop::TimerBase **a3@<X8>)
{
  WTF::RunLoop *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  WTF::RunLoop::TimerBase *v15;
  _QWORD *v16;
  uint64_t result;

  v6 = (WTF::RunLoop *)WTF::RunLoop::current(a1);
  v7 = *a2;
  *a2 = 0;
  v8 = *((_QWORD *)a1 + 1);
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
    goto LABEL_11;
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = v8;
  v11 = *(unsigned int **)(v8 + 8);
  *(_QWORD *)(v8 + 8) = v9;
  if (!v11)
    goto LABEL_11;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (v9)
  {
LABEL_11:
    do
      v14 = __ldaxr((unsigned int *)v9);
    while (__stlxr(v14 + 1, (unsigned int *)v9));
  }
  v15 = (WTF::RunLoop::TimerBase *)WTF::fastMalloc((WTF *)0x20);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = &off_1E3405FE0;
  v16[1] = v7;
  v16[2] = v9;
  result = WTF::RunLoop::TimerBase::TimerBase(v15, v6);
  *(_QWORD *)v15 = off_1E3406008;
  *((_QWORD *)v15 + 3) = v16;
  *a3 = v15;
  return result;
}

uint64_t WebCore::ScrollAnimator::startAnimationCallback(uint64_t this, WebCore::ScrollingEffectsController *a2)
{
  if (!*(_BYTE *)(this + 136))
  {
    *(_BYTE *)(this + 136) = 1;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 8) + 736))(*(_QWORD *)(this + 8));
  }
  return this;
}

uint64_t WebCore::ScrollAnimator::stopAnimationCallback(uint64_t this, WebCore::ScrollingEffectsController *a2)
{
  *(_BYTE *)(this + 136) = 0;
  return this;
}

unsigned __int8 *WebCore::ScrollAnimator::deferWheelEventTestCompletionForReason(uint64_t a1, unint64_t a2, unint64_t a3, __int16 a4)
{
  unsigned __int8 *result;

  result = *(unsigned __int8 **)(a1 + 16);
  if (result)
    return WebCore::WheelEventTestMonitor::deferForReason(result, a2, a3, a4);
  return result;
}

uint64_t *WebCore::ScrollAnimator::removeWheelEventTestCompletionDeferralForReason(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  uint64_t *result;

  result = *(uint64_t **)(a1 + 16);
  if (result)
    return WebCore::WheelEventTestMonitor::removeDeferralForReason(result, a2, a3, a4);
  return result;
}

float WebCore::ScrollAnimator::scrollOffsetAdjustedForSnapping(uint64_t a1, float *a2, int a3)
{
  float v4;
  float v8;

  if (!*(_QWORD *)(a1 + 104))
    return *a2;
  WebCore::ScrollAnimator::scrollOffsetAdjustedForSnapping(a1, 0, a2, a3);
  v4 = v8;
  WebCore::ScrollAnimator::scrollOffsetAdjustedForSnapping(a1, 1, a2, a3);
  return v4;
}

void WebCore::ScrollAnimator::scrollOffsetAdjustedForSnapping(uint64_t a1, int a2, float *a3, int a4)
{
  uint64_t v5;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  int v13;
  int v14;
  int v15;
  float v16;
  _DWORD v17[4];

  v5 = *(_QWORD *)(a1 + 104);
  if (v5)
  {
    if (a4)
    {
      v7 = 0;
      v8 = *a3;
      v9 = a3[1];
      v10 = 0.0;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(float *)(a1 + 120) + (float)*(int *)(v11 + 32);
      v8 = *a3;
      v9 = a3[1];
      if (a2)
      {
        v12 = *(float *)(a1 + 124) + (float)*(int *)(v11 + 36);
        v10 = v9 - v12;
      }
      else
      {
        v10 = *a3 - v12;
      }
      v7 = LODWORD(v12) | 0x100000000;
    }
    v17[0] = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 160))(*(_QWORD *)(a1 + 88));
    v17[1] = v13;
    v17[2] = v14;
    v17[3] = v15;
    v16 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 152))(*(_QWORD *)(a1 + 88));
    WebCore::ScrollSnapAnimatorState::adjustedScrollDestination(v5, a2, v7, (uint64_t)v17, v8, v9, v10, v16);
  }
}

void WebCore::ScrollAnimator::scrollingNodeIDForTesting(WebCore::ScrollAnimator *this)
{
  _QWORD *v1;
  uint64_t IdentifierInternal;
  unint64_t v3;
  uint64_t v4;
  char v5;
  char **v6;
  char *v7;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v1[7] && !(*(uint64_t (**)(_QWORD))(*v1 + 296))(*((_QWORD *)this + 1)))
  {
    if (WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    {
      __break(0xC471u);
    }
    else
    {
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      v3 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
      if (v3 != -1)
      {
        v7 = &v5;
        v6 = &v7;
        std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
      }
      if ((WebCore::Process::globalIdentifier & 1) != 0)
      {
        v4 = WebCore::Process::globalIdentifier;
        v1[7] = IdentifierInternal;
        v1[8] = v4;
        return;
      }
    }
    __break(1u);
  }
}

uint64_t WebCore::ScrollAnimation::destinationOffset(WebCore::ScrollAnimation *this)
{
  return 0;
}

uint64_t WebCore::ScrollAnimation::clamping(WebCore::ScrollAnimation *this)
{
  return 1;
}

uint64_t WebCore::ScrollAnimationSmooth::destinationOffset(WebCore::ScrollAnimationSmooth *this)
{
  return *((_QWORD *)this + 7);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ScrollAnimator::createTimer(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = &off_1E3405FE0;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScrollAnimator::createTimer(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E3405FE0;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScrollAnimator::createTimer(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8));
  }
  return result;
}

void WebCore::ScrollingEffectsControllerTimer::~ScrollingEffectsControllerTimer(WebCore::ScrollingEffectsControllerTimer *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E3406008;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WTF::RunLoop::TimerBase::~TimerBase(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E3406008;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WTF::RunLoop::TimerBase::~TimerBase(this);
  WTF::fastFree(v3, v4);
}

uint64_t WebCore::ScrollingEffectsControllerTimer::fired(WebCore::ScrollingEffectsControllerTimer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
}

char *WTF::Vector<WebCore::PlatformWheelEvent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  WTF *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 128 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v21 = *(WTF **)a1;
        return (char *)v21 + 128 * ((uint64_t)(v3 - (_QWORD)v5) >> 7);
      }
      if (!(v10 >> 25))
      {
        v11 = WTF::fastMalloc((WTF *)(v10 << 7));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
        do
        {
          v14 = (_OWORD *)(v11 + v13);
          v15 = *(_OWORD *)((char *)v5 + v13);
          v16 = *(_OWORD *)((char *)v5 + v13 + 16);
          v17 = *(_OWORD *)((char *)v5 + v13 + 48);
          v14[2] = *(_OWORD *)((char *)v5 + v13 + 32);
          v14[3] = v17;
          *v14 = v15;
          v14[1] = v16;
          v18 = *(_OWORD *)((char *)v5 + v13 + 64);
          v19 = *(_OWORD *)((char *)v5 + v13 + 80);
          v20 = *(_OWORD *)((char *)v5 + v13 + 112);
          v14[6] = *(_OWORD *)((char *)v5 + v13 + 96);
          v14[7] = v20;
          v14[4] = v18;
          v14[5] = v19;
          v13 += 128;
        }
        while (v6 << 7 != v13);
        v21 = *(WTF **)a1;
        if (v5)
        {
          if (v21 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v12);
          v21 = *(WTF **)a1;
        }
        return (char *)v21 + 128 * ((uint64_t)(v3 - (_QWORD)v5) >> 7);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x1960DD8B0);
    }
  }
  v22 = *(unsigned int *)(a1 + 8);
  v23 = v22 + (v22 >> 2);
  if (v23 >= 0x10)
    v24 = v23 + 1;
  else
    v24 = 16;
  if (v24 <= a2)
    v25 = a2;
  else
    v25 = v24;
  if (v25 > v22)
  {
    if (v25 >> 25)
      goto LABEL_35;
    v26 = *(unsigned int *)(a1 + 12);
    v27 = (_OWORD *)WTF::fastMalloc((WTF *)(v25 << 7));
    *(_DWORD *)(a1 + 8) = v25;
    *(_QWORD *)a1 = v27;
    if ((_DWORD)v26)
    {
      v29 = v26 << 7;
      v30 = v5;
      do
      {
        v31 = *(_OWORD *)v30;
        v32 = *((_OWORD *)v30 + 1);
        v33 = *((_OWORD *)v30 + 3);
        v27[2] = *((_OWORD *)v30 + 2);
        v27[3] = v33;
        *v27 = v31;
        v27[1] = v32;
        v34 = *((_OWORD *)v30 + 4);
        v35 = *((_OWORD *)v30 + 5);
        v36 = *((_OWORD *)v30 + 7);
        v27[6] = *((_OWORD *)v30 + 6);
        v27[7] = v36;
        v27[4] = v34;
        v27[5] = v35;
        v27 += 8;
        v30 = (WTF *)((char *)v30 + 128);
        v29 -= 128;
      }
      while (v29);
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v28);
    }
  }
  return (char *)v3;
}

void WebCore::ScrollSnapAnimatorState::~ScrollSnapAnimatorState(WebCore::ScrollSnapAnimatorState *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E3406D00;
  v3 = *((_QWORD *)this + 14);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::~ScrollSnapOffsetsInfo((uint64_t)this + 24, a2);
}

{
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E3406D00;
  v3 = *((_QWORD *)this + 14);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::~ScrollSnapOffsetsInfo((uint64_t)this + 24, a2);
  WTF::fastFree(this, v4);
}

uint64_t WebCore::ScrollSnapAnimatorState::closestSnapPointForOffset(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, float a5)
{
  int v6;
  float v8;
  float v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  float v27;
  double v28;
  int v29;
  int v30;
  double v31;
  int v32;
  unint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46[2];

  v6 = (int)a2;
  v8 = (float)(int)a3 / a5;
  v9 = (float)SHIDWORD(a3) / a5;
  v10 = v8 * 64.0;
  v11 = 0x80000000;
  if (v10 > -2147483650.0)
    v11 = (int)v10;
  if (v10 < 2147483650.0)
    v12 = v11;
  else
    v12 = 0x7FFFFFFFLL;
  v13 = v9 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 0x7FFFFFFF00000000;
  }
  else if (v13 <= -2147483650.0)
  {
    v14 = 0x8000000000000000;
  }
  else
  {
    v14 = (unint64_t)(int)v13 << 32;
  }
  if ((_DWORD)a2)
    v15 = 48;
  else
    v15 = 32;
  if ((_DWORD)a2)
    v16 = a1 + 48;
  else
    v16 = a1 + 32;
  v17 = *(unsigned int *)(v16 + 12);
  if ((_DWORD)v17)
  {
    if (v17 >= 0x6666667)
    {
LABEL_48:
      __break(0xC471u);
      JUMPOUT(0x1960DDC00);
    }
    v18 = (WTF *)WTF::fastMalloc((WTF *)(40 * v17));
    v19 = *(unsigned int *)(v16 + 12);
    if ((_DWORD)v19)
    {
      v43 = v14;
      v44 = v12;
      v45 = v6;
      v20 = 0;
      v21 = *(_QWORD *)(a1 + v15);
      v22 = 40 * v19;
      do
      {
        v23 = (char *)v18 + v20;
        v24 = *(_OWORD *)(v21 + v20);
        v23[16] = *(_BYTE *)(v21 + v20 + 16);
        *(_OWORD *)v23 = v24;
        v25 = *(unsigned int *)(v21 + v20 + 36);
        *((_QWORD *)v23 + 3) = 0;
        *((_QWORD *)v23 + 4) = 0;
        *(_DWORD *)((char *)v18 + v20 + 36) = v25;
        if ((_DWORD)v25)
        {
          if (v25 >> 29)
            goto LABEL_48;
          v26 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
          *(_DWORD *)((char *)v18 + v20 + 32) = v25;
          *(_QWORD *)((char *)v18 + v20 + 24) = v26;
          memcpy(v26, *(const void **)(v21 + v20 + 24), 8 * *(unsigned int *)(v21 + v20 + 36));
        }
        v20 += 40;
      }
      while (v22 != v20);
      v6 = v45;
      v14 = v43;
      v12 = v44;
    }
  }
  else
  {
    v18 = 0;
  }
  v27 = *(float *)(a4 + 12);
  v28 = *(float *)(a4 + 8) * 64.0;
  if (v28 > -2147483650.0)
    v29 = (int)v28;
  else
    v29 = 0x80000000;
  if (v28 < 2147483650.0)
    v30 = v29;
  else
    v30 = 0x7FFFFFFF;
  v46[0] = v30;
  v31 = v27 * 64.0;
  if (v31 >= 2147483650.0)
  {
    v32 = 0x7FFFFFFF;
  }
  else if (v31 <= -2147483650.0)
  {
    v32 = 0x80000000;
  }
  else
  {
    v32 = (int)v31;
  }
  v46[1] = v32;
  if (!(_DWORD)v17)
  {
    v35 = 0;
    v40 = 0;
    v41 = 0;
    if (!v18)
      return v40 | v35 | v41;
LABEL_42:
    WTF::fastFree(v18, a2);
    return v40 | v35 | v41;
  }
  v33 = WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::closestSnapOffset<WebCore::LayoutSize,WebCore::LayoutPoint>(a1 + 24, v6, v46, v14 | v12, 0, 0.0);
  v34 = BYTE4(v33);
  v35 = HIDWORD(v33) & 0xFFFFFF00;
  v36 = (_QWORD)a2 << 32;
  v37 = 40 * v17;
  v38 = (char *)v18 + 24;
  do
  {
    v39 = *(WTF **)v38;
    if (*(_QWORD *)v38)
    {
      *(_QWORD *)v38 = 0;
      *((_DWORD *)v38 + 2) = 0;
      WTF::fastFree(v39, a2);
    }
    v38 += 40;
    v37 -= 40;
  }
  while (v37);
  v40 = v34;
  v41 = v36 & 0xFF00000000;
  if (v18)
    goto LABEL_42;
  return v40 | v35 | v41;
}

float WebCore::ScrollSnapAnimatorState::adjustedScrollDestination(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7, float a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  double v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  float v32;
  float v33;
  double v34;
  int v35;
  double v36;
  int v37;
  int v38;
  double v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  int v43;
  void *v44;
  uint64_t v45;
  float v46;
  char *v47;
  WTF *v48;
  int v50[2];

  if (a2)
    v11 = 48;
  else
    v11 = 32;
  if (a2)
    v12 = a1 + 48;
  else
    v12 = a1 + 32;
  v13 = *(unsigned int *)(v12 + 12);
  if ((_DWORD)v13)
  {
    if (v13 >= 0x6666667)
    {
LABEL_56:
      __break(0xC471u);
      JUMPOUT(0x1960DDF28);
    }
    v19 = WTF::fastMalloc((WTF *)(40 * v13));
    v20 = (WTF *)v19;
    v21 = *(unsigned int *)(v12 + 12);
    if ((_DWORD)v21)
    {
      v22 = (unsigned int *)(*(_QWORD *)(a1 + v11) + 36);
      v23 = v19 + 24;
      v24 = 40 * v21;
      do
      {
        v25 = *(_OWORD *)(v22 - 9);
        *(_BYTE *)(v23 - 8) = *((_BYTE *)v22 - 20);
        *(_OWORD *)(v23 - 24) = v25;
        v26 = *v22;
        *(_QWORD *)v23 = 0;
        *(_QWORD *)(v23 + 8) = 0;
        *(_DWORD *)(v23 + 12) = v26;
        if ((_DWORD)v26)
        {
          if (v26 >> 29)
            goto LABEL_56;
          v27 = (void *)WTF::fastMalloc((WTF *)(8 * v26));
          *(_DWORD *)(v23 + 8) = v26;
          *(_QWORD *)v23 = v27;
          memcpy(v27, *(const void **)(v22 - 3), 8 * *v22);
        }
        v22 += 10;
        v23 += 40;
        v24 -= 40;
      }
      while (v24);
    }
    if ((a3 & 0xFF00000000) != 0)
    {
      v28 = (float)(*(float *)&a3 / a8) * 64.0;
      if (v28 >= 2147483650.0)
      {
        v29 = 0x7FFFFFFF;
      }
      else if (v28 <= -2147483650.0)
      {
        v29 = 0x80000000;
      }
      else
      {
        v29 = (int)v28;
      }
      v30 = v29 & 0xFFFFFF00;
      v29 = v29;
      v31 = 0x100000000;
    }
    else
    {
      v29 = 0;
      v31 = 0;
      v30 = 0;
    }
    v34 = *(float *)(a4 + 8) * 64.0;
    if (v34 > -2147483650.0)
      v35 = (int)v34;
    else
      v35 = 0x80000000;
    if (v34 >= 2147483650.0)
      v35 = 0x7FFFFFFF;
    v36 = *(float *)(a4 + 12) * 64.0;
    if (v36 > -2147483650.0)
      v37 = (int)v36;
    else
      v37 = 0x80000000;
    if (v36 < 2147483650.0)
      v38 = v37;
    else
      v38 = 0x7FFFFFFF;
    v50[0] = v35;
    v50[1] = v38;
    v39 = (float)(a5 / a8) * 64.0;
    if (v39 >= 2147483650.0)
    {
      v40 = 0x7FFFFFFFLL;
    }
    else if (v39 <= -2147483650.0)
    {
      v40 = 0x80000000;
    }
    else
    {
      v40 = (int)v39;
    }
    v41 = (float)(a6 / a8) * 64.0;
    if (v41 >= 2147483650.0)
    {
      v42 = 0x7FFFFFFF00000000;
    }
    else if (v41 <= -2147483650.0)
    {
      v42 = 0x8000000000000000;
    }
    else
    {
      v42 = (unint64_t)(int)v41 << 32;
    }
    v43 = WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::closestSnapOffset<WebCore::LayoutSize,WebCore::LayoutPoint>(a1 + 24, a2, v50, v42 | v40, v31 | v30 | v29, a7);
    v45 = 0;
    v46 = (float)v43 * 0.015625;
    do
    {
      v47 = (char *)v20 + v45;
      v48 = *(WTF **)((char *)v20 + v45 + 24);
      if (v48)
      {
        *((_QWORD *)v47 + 3) = 0;
        *((_DWORD *)v47 + 8) = 0;
        WTF::fastFree(v48, v44);
      }
      v45 += 40;
    }
    while (40 * v13 != v45);
    v33 = v46 * a8;
    WTF::fastFree(v20, v44);
  }
  else
  {
    v32 = 0.0;
    if (!a2)
      v32 = a5;
    if (a2 == 1)
      return a6;
    else
      return v32;
  }
  return v33;
}

uint64_t WebCore::ScrollSnapAnimatorState::preserveCurrentTargetForAxis(WebCore::ScrollSnapAnimatorState *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  WTF *v30;
  WTF *v31;
  int v32;

  if (a2)
    v4 = 48;
  else
    v4 = 32;
  if (a2)
    v5 = (char *)a1 + 48;
  else
    v5 = (char *)a1 + 32;
  v6 = *((unsigned int *)v5 + 3);
  if ((_DWORD)v6)
  {
    v32 = a2;
    if (v6 >= 0x6666667)
    {
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x1960DE178);
    }
    v8 = WTF::fastMalloc((WTF *)(40 * v6));
    v9 = (WTF *)v8;
    v10 = *((unsigned int *)v5 + 3);
    if ((_DWORD)v10)
    {
      v11 = (unsigned int *)(*(_QWORD *)((char *)a1 + v4) + 36);
      v12 = v8 + 24;
      v13 = 40 * v10;
      do
      {
        v14 = *(_OWORD *)(v11 - 9);
        *(_BYTE *)(v12 - 8) = *((_BYTE *)v11 - 20);
        *(_OWORD *)(v12 - 24) = v14;
        v15 = *v11;
        *(_QWORD *)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        *(_DWORD *)(v12 + 12) = v15;
        if ((_DWORD)v15)
        {
          if (v15 >> 29)
            goto LABEL_40;
          v16 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
          *(_DWORD *)(v12 + 8) = v15;
          *(_QWORD *)v12 = v16;
          memcpy(v16, *(const void **)(v11 - 3), 8 * *v11);
        }
        v11 += 10;
        v12 += 40;
        v13 -= 40;
      }
      while (v13);
    }
    v17 = 0;
    v18 = (uint64_t)v9 + 40 * v6;
    while (1)
    {
      v19 = *(_QWORD *)((char *)v9 + v17 + 8);
      v20 = *(unsigned int *)((char *)v9 + v17 + 36);
      if ((_DWORD)v20)
      {
        if (v20 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1960DE180);
        }
        v21 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
        memcpy(v21, *(const void **)((char *)v9 + v17 + 24), 8 * *(unsigned int *)((char *)v9 + v17 + 36));
        WTF::fastFree((WTF *)v21, v22);
      }
      if (v19 == a3)
        break;
      v17 += 40;
      if (40 * v6 == v17)
      {
        v23 = 0;
        v24 = 0;
        a2 = v32;
        goto LABEL_27;
      }
    }
    v25 = (char *)v9 + v17;
    a2 = v32;
  }
  else
  {
    v9 = 0;
    v25 = 0;
    v18 = 40 * v6;
  }
  if (v25 == (char *)v18)
  {
    v23 = 0;
    v24 = 0;
  }
  else
  {
    v23 = (-858993459 * ((unint64_t)(v25 - (char *)v9) >> 3)) | 0x100000000;
    v24 = 1;
  }
LABEL_27:
  v26 = 104;
  if (!a2)
    v26 = 96;
  v27 = (char *)a1 + v26;
  v27[4] = BYTE4(v23);
  *(_DWORD *)v27 = v23;
  WebCore::ScrollSnapAnimatorState::updateCurrentlySnappedBoxes(a1);
  if ((_DWORD)v6)
  {
    v30 = v9;
    do
    {
      v31 = (WTF *)*((_QWORD *)v30 + 3);
      if (v31)
      {
        *((_QWORD *)v30 + 3) = 0;
        *((_DWORD *)v30 + 8) = 0;
        WTF::fastFree(v31, v28);
      }
      v30 = (WTF *)((char *)v30 + 40);
    }
    while (v30 != (WTF *)v18);
  }
  if (v9)
    WTF::fastFree(v9, v28);
  return v24;
}

uint64_t WebCore::ScrollSnapAnimatorState::currentlySnappedOffsetsForAxis(uint64_t result, char *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;

  v5 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  if (a3)
    v6 = 48;
  else
    v6 = 32;
  if (a3)
    v7 = a2 + 48;
  else
    v7 = a2 + 32;
  v8 = *((unsigned int *)v7 + 3);
  if ((_DWORD)v8)
  {
    if (v8 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1960DE3C0);
    }
    result = WTF::fastMalloc((WTF *)(40 * v8));
    v9 = (WTF *)result;
    v10 = *((unsigned int *)v7 + 3);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(_QWORD *)&a2[v6];
      v13 = 40 * v10;
      do
      {
        v14 = (char *)v9 + v11;
        v15 = *(_OWORD *)(v12 + v11);
        v14[16] = *(_BYTE *)(v12 + v11 + 16);
        *(_OWORD *)v14 = v15;
        v16 = *(unsigned int *)(v12 + v11 + 36);
        *((_QWORD *)v14 + 3) = 0;
        *((_QWORD *)v14 + 4) = 0;
        *(_DWORD *)((char *)v9 + v11 + 36) = v16;
        if ((_DWORD)v16)
        {
          if (v16 >> 29)
            goto LABEL_40;
          v17 = (void *)WTF::fastMalloc((WTF *)(8 * v16));
          *(_DWORD *)((char *)v9 + v11 + 32) = v16;
          *(_QWORD *)((char *)v9 + v11 + 24) = v17;
          result = (uint64_t)memcpy(v17, *(const void **)(v12 + v11 + 24), 8 * *(unsigned int *)(v12 + v11 + 36));
        }
        v11 += 40;
      }
      while (v13 != v11);
    }
  }
  else
  {
    v9 = 0;
  }
  v18 = 104;
  if (!a3)
    v18 = 96;
  v19 = *(_QWORD *)&a2[v18];
  if ((v19 & 0xFF00000000) == 0 || v19 >= v8)
  {
    if (!(_DWORD)v8)
      goto LABEL_30;
    goto LABEL_32;
  }
  result = WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, (unint64_t)v9 + 40 * v19);
  v21 = *(_DWORD *)(v5 + 12);
  v22 = *(_QWORD *)v5;
  v23 = *(_QWORD *)v5 + 40 * v21;
  v24 = *(_BYTE *)(result + 16);
  *(_OWORD *)v23 = *(_OWORD *)result;
  *(_BYTE *)(v23 + 16) = v24;
  v25 = *(unsigned int *)(result + 36);
  *(_QWORD *)(v23 + 24) = 0;
  *(_QWORD *)(v23 + 32) = 0;
  v26 = v23 + 24;
  *(_DWORD *)(v26 + 12) = v25;
  if ((_DWORD)v25)
  {
    if (v25 >> 29)
    {
LABEL_40:
      __break(0xC471u);
      JUMPOUT(0x1960DE3B8);
    }
    v27 = result;
    v28 = (void *)WTF::fastMalloc((WTF *)(8 * v25));
    *(_DWORD *)(v22 + 40 * v21 + 32) = v25;
    *(_QWORD *)v26 = v28;
    result = (uint64_t)memcpy(v28, *(const void **)(v27 + 24), 8 * *(unsigned int *)(v27 + 36));
  }
  ++*(_DWORD *)(v5 + 12);
  if ((_DWORD)v8)
  {
LABEL_32:
    v29 = 40 * v8;
    v30 = (char *)v9 + 24;
    do
    {
      result = *(_QWORD *)v30;
      if (*(_QWORD *)v30)
      {
        *(_QWORD *)v30 = 0;
        *((_DWORD *)v30 + 2) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v30 += 40;
      v29 -= 40;
    }
    while (v29);
  }
LABEL_30:
  if (v9)
    return WTF::fastFree(v9, a2);
  return result;
}

WTF *WebCore::ScrollSnapAnimatorState::updateCurrentlySnappedBoxes(WebCore::ScrollSnapAnimatorState *this)
{
  void *v2;
  WTF *v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _DWORD *v28;
  void *v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t i;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  char *v43;
  void *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  _DWORD *v66;
  void *v67;
  _DWORD *v68;
  unsigned int v69;
  uint64_t j;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  WTF *v80;
  WTF *result;
  uint64_t v82;
  char *v83;
  WTF *v84;
  uint64_t v85;
  char *v86;
  WTF *v87;
  WTF *v88;
  WTF *v89;
  char *v90;
  char *v91;
  WTF *v92;
  WTF *v93;
  uint64_t v94;
  WTF *v95;
  int v96;
  unsigned int v97;
  WTF *v98;
  int v99;
  unsigned int v100;
  uint64_t v101[3];
  __int128 v102;
  char v103;
  char *v104;
  int v105;
  int v106;

  WebCore::ScrollSnapAnimatorState::currentlySnappedOffsetsForAxis((uint64_t)&v98, (char *)this, 0);
  WebCore::ScrollSnapAnimatorState::currentlySnappedOffsetsForAxis((uint64_t)&v95, (char *)this, 1);
  v3 = v98;
  v94 = 0;
  if (v100)
  {
    v88 = (WTF *)((char *)v98 + 40 * v100);
    do
    {
      v102 = *(_OWORD *)v3;
      v103 = *((_BYTE *)v3 + 16);
      v4 = *((unsigned int *)v3 + 9);
      v104 = 0;
      v105 = 0;
      v106 = v4;
      if ((_DWORD)v4)
      {
        if (v4 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1960DEAA0);
        }
        v5 = (char *)WTF::fastMalloc((WTF *)(8 * v4));
        v105 = v4;
        v104 = v5;
        memcpy(v5, *((const void **)v3 + 3), 8 * *((unsigned int *)v3 + 9));
        if (*((_QWORD *)&v102 + 1))
        {
          v92 = v3;
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v101, &v94, (uint64_t *)&v102 + 1);
          v7 = &v5[8 * v4];
          v8 = v94;
          v90 = v5;
          v9 = (uint64_t *)v5;
          while (1)
          {
            v10 = *v9;
            if (*v9 >= (unint64_t)*((unsigned int *)this + 23))
            {
LABEL_103:
              __break(0xC471u);
              JUMPOUT(0x1960DEA90);
            }
            v11 = *((_QWORD *)this + 10);
            if (!v8)
            {
              v12 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x50);
              *v12 = xmmword_1968A5190;
              v8 = (uint64_t)(v12 + 1);
            }
            v13 = *(_DWORD *)(v8 - 8);
            v14 = *(_QWORD *)(v11 + 8 * v10);
            v15 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
            v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
            v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
            v18 = v13 & ((v17 >> 31) ^ v17);
            v19 = (_QWORD *)(v8 + 8 * v18);
            v20 = *v19;
            if (*v19)
            {
              v21 = 0;
              v22 = 1;
              while (v20 != v14)
              {
                if (v20 == -1)
                  v21 = v19;
                v18 = (v18 + v22) & v13;
                v19 = (_QWORD *)(v8 + 8 * v18);
                v20 = *v19;
                ++v22;
                if (!*v19)
                {
                  if (v21)
                  {
                    *v21 = 0;
                    --*(_DWORD *)(v8 - 16);
                    v14 = *(_QWORD *)(v11 + 8 * v10);
                    v19 = v21;
                  }
                  goto LABEL_18;
                }
              }
              goto LABEL_31;
            }
LABEL_18:
            *v19 = v14;
            v23 = *(_DWORD *)(v8 - 16);
            v24 = *(_DWORD *)(v8 - 12) + 1;
            *(_DWORD *)(v8 - 12) = v24;
            v25 = (v23 + v24);
            v26 = *(unsigned int *)(v8 - 4);
            if (v26 > 0x400)
            {
              if (v26 <= 2 * v25)
                goto LABEL_21;
            }
            else if (3 * v26 <= 4 * v25)
            {
              if ((_DWORD)v26)
LABEL_21:
                v27 = (_DWORD)v26 << (6 * v24 >= (2 * v26));
              else
                v27 = 8;
              v28 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v27 + 16));
              v30 = v28 + 4;
              v31 = v27 - 1;
              v28[2] = v27 - 1;
              v28[3] = v27;
              *v28 = 0;
              v28[1] = v24;
              if ((_DWORD)v26)
              {
                for (i = 0; i != v26; ++i)
                {
                  v33 = *(_QWORD *)(v8 + 8 * i);
                  if ((unint64_t)(v33 + 1) >= 2)
                  {
                    v34 = (v33 + ~(v33 << 32)) ^ ((unint64_t)(v33 + ~(v33 << 32)) >> 22);
                    v35 = 9 * ((v34 + ~(v34 << 13)) ^ ((v34 + ~(v34 << 13)) >> 8));
                    v36 = (v35 ^ (v35 >> 15)) + ~((v35 ^ (v35 >> 15)) << 27);
                    v37 = v31 & ((v36 >> 31) ^ v36);
                    v38 = 1;
                    do
                    {
                      v39 = v37;
                      v40 = *(_QWORD *)&v30[2 * v37];
                      v37 = (v37 + v38++) & v31;
                    }
                    while (v40);
                    *(_QWORD *)&v30[2 * v39] = v33;
                  }
                }
              }
              WTF::fastFree((WTF *)(v8 - 16), v29);
              v8 = (uint64_t)v30;
            }
LABEL_31:
            if (++v9 == (uint64_t *)v7)
            {
              v94 = v8;
              v5 = v90;
              v3 = v92;
              break;
            }
          }
        }
        WTF::fastFree((WTF *)v5, v6);
      }
      else if (*((_QWORD *)&v102 + 1))
      {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v101, &v94, (uint64_t *)&v102 + 1);
      }
      v3 = (WTF *)((char *)v3 + 40);
    }
    while (v3 != v88);
  }
  if (!v97)
    goto LABEL_79;
  v41 = v95;
  v89 = (WTF *)((char *)v95 + 40 * v97);
  do
  {
    v102 = *(_OWORD *)v41;
    v103 = *((_BYTE *)v41 + 16);
    v42 = *((unsigned int *)v41 + 9);
    v104 = 0;
    v105 = 0;
    v106 = v42;
    if (!(_DWORD)v42)
    {
      if (*((_QWORD *)&v102 + 1))
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v101, &v94, (uint64_t *)&v102 + 1);
      goto LABEL_75;
    }
    if (v42 >> 29)
      goto LABEL_103;
    v43 = (char *)WTF::fastMalloc((WTF *)(8 * v42));
    v105 = v42;
    v104 = v43;
    memcpy(v43, *((const void **)v41 + 3), 8 * *((unsigned int *)v41 + 9));
    if (!*((_QWORD *)&v102 + 1))
      goto LABEL_74;
    v93 = v41;
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::add(v101, &v94, (uint64_t *)&v102 + 1);
    v45 = &v43[8 * v42];
    v46 = v94;
    v91 = v43;
    v47 = v43;
    do
    {
      v48 = *(_QWORD *)v47;
      if (*(_QWORD *)v47 >= (unint64_t)*((unsigned int *)this + 23))
      {
        __break(0xC471u);
        JUMPOUT(0x1960DEA98);
      }
      v49 = *((_QWORD *)this + 10);
      if (!v46)
      {
        v50 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x50);
        *v50 = xmmword_1968A5190;
        v46 = (uint64_t)(v50 + 1);
      }
      v51 = *(_DWORD *)(v46 - 8);
      v52 = *(_QWORD *)(v49 + 8 * v48);
      v53 = (v52 + ~(v52 << 32)) ^ ((unint64_t)(v52 + ~(v52 << 32)) >> 22);
      v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
      v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
      v56 = v51 & ((v55 >> 31) ^ v55);
      v57 = (_QWORD *)(v46 + 8 * v56);
      v58 = *v57;
      if (!*v57)
      {
LABEL_57:
        *v57 = v52;
        v61 = *(_DWORD *)(v46 - 16);
        v62 = *(_DWORD *)(v46 - 12) + 1;
        *(_DWORD *)(v46 - 12) = v62;
        v63 = (v61 + v62);
        v64 = *(unsigned int *)(v46 - 4);
        if (v64 > 0x400)
        {
          if (v64 > 2 * v63)
            goto LABEL_70;
        }
        else
        {
          if (3 * v64 > 4 * v63)
            goto LABEL_70;
          if (!(_DWORD)v64)
          {
            v65 = 8;
            goto LABEL_62;
          }
        }
        v65 = (_DWORD)v64 << (6 * v62 >= (2 * v64));
LABEL_62:
        v66 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(8 * v65 + 16));
        v68 = v66 + 4;
        v69 = v65 - 1;
        v66[2] = v65 - 1;
        v66[3] = v65;
        *v66 = 0;
        v66[1] = v62;
        if ((_DWORD)v64)
        {
          for (j = 0; j != v64; ++j)
          {
            v71 = *(_QWORD *)(v46 + 8 * j);
            if ((unint64_t)(v71 + 1) >= 2)
            {
              v72 = (v71 + ~(v71 << 32)) ^ ((unint64_t)(v71 + ~(v71 << 32)) >> 22);
              v73 = 9 * ((v72 + ~(v72 << 13)) ^ ((v72 + ~(v72 << 13)) >> 8));
              v74 = (v73 ^ (v73 >> 15)) + ~((v73 ^ (v73 >> 15)) << 27);
              v75 = v69 & ((v74 >> 31) ^ v74);
              v76 = 1;
              do
              {
                v77 = v75;
                v78 = *(_QWORD *)&v68[2 * v75];
                v75 = (v75 + v76++) & v69;
              }
              while (v78);
              *(_QWORD *)&v68[2 * v77] = v71;
            }
          }
        }
        WTF::fastFree((WTF *)(v46 - 16), v67);
        v46 = (uint64_t)v68;
        goto LABEL_70;
      }
      v59 = 0;
      v60 = 1;
      while (v58 != v52)
      {
        if (v58 == -1)
          v59 = v57;
        v56 = (v56 + v60) & v51;
        v57 = (_QWORD *)(v46 + 8 * v56);
        v58 = *v57;
        ++v60;
        if (!*v57)
        {
          if (v59)
          {
            *v59 = 0;
            --*(_DWORD *)(v46 - 16);
            v52 = *(_QWORD *)(v49 + 8 * v48);
            v57 = v59;
          }
          goto LABEL_57;
        }
      }
LABEL_70:
      v47 += 8;
    }
    while (v47 != v45);
    v94 = v46;
    v43 = v91;
    v41 = v93;
LABEL_74:
    WTF::fastFree((WTF *)v43, v44);
LABEL_75:
    v41 = (WTF *)((char *)v41 + 40);
  }
  while (v41 != v89);
LABEL_79:
  v79 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = v94;
  if (v79)
    WTF::fastFree((WTF *)(v79 - 16), v2);
  v80 = v95;
  if (v97)
  {
    v82 = 40 * v97;
    v83 = (char *)v95 + 24;
    do
    {
      v84 = *(WTF **)v83;
      if (*(_QWORD *)v83)
      {
        *(_QWORD *)v83 = 0;
        *((_DWORD *)v83 + 2) = 0;
        WTF::fastFree(v84, v2);
      }
      v83 += 40;
      v82 -= 40;
    }
    while (v82);
    v80 = v95;
    if (v95)
      goto LABEL_97;
  }
  else
  {
    if (!v95)
      goto LABEL_83;
LABEL_97:
    v95 = 0;
    v96 = 0;
    WTF::fastFree(v80, v2);
  }
LABEL_83:
  result = v98;
  if (!v100)
  {
    if (!v98)
      return result;
LABEL_99:
    v98 = 0;
    v99 = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  v85 = 40 * v100;
  v86 = (char *)v98 + 24;
  do
  {
    v87 = *(WTF **)v86;
    if (*(_QWORD *)v86)
    {
      *(_QWORD *)v86 = 0;
      *((_DWORD *)v86 + 2) = 0;
      WTF::fastFree(v87, v2);
    }
    v86 += 40;
    v85 -= 40;
  }
  while (v85);
  result = v98;
  if (v98)
    goto LABEL_99;
  return result;
}

uint64_t WebCore::ScrollSnapAnimatorState::resnapAfterLayout(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  WTF *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  void *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  WTF *v79;
  uint64_t v80;
  char *v81;
  WTF *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;

  v9 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  v10 = *(unsigned int *)(a1 + 60);
  v88 = v10;
  if ((_DWORD)v10)
  {
    if (v10 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1960DF100);
    }
    v11 = (WTF *)WTF::fastMalloc((WTF *)(40 * v10));
    v12 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v12)
    {
      v84 = v9;
      v13 = 0;
      v14 = *(_QWORD *)(a1 + 48);
      v15 = 40 * v12;
      do
      {
        v16 = (char *)v11 + v13;
        v17 = *(_OWORD *)(v14 + v13);
        v16[16] = *(_BYTE *)(v14 + v13 + 16);
        *(_OWORD *)v16 = v17;
        v18 = *(unsigned int *)(v14 + v13 + 36);
        *((_QWORD *)v16 + 3) = 0;
        *((_QWORD *)v16 + 4) = 0;
        *(_DWORD *)((char *)v11 + v13 + 36) = v18;
        if ((_DWORD)v18)
        {
          if (v18 >> 29)
            goto LABEL_113;
          v19 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
          *(_DWORD *)((char *)v11 + v13 + 32) = v18;
          *(_QWORD *)((char *)v11 + v13 + 24) = v19;
          memcpy(v19, *(const void **)(v14 + v13 + 24), 8 * *(unsigned int *)(v14 + v13 + 36));
        }
        v13 += 40;
      }
      while (v15 != v13);
      v9 = v84;
    }
  }
  else
  {
    v11 = 0;
  }
  v20 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v20)
  {
    if (v20 >= 0x6666667)
    {
LABEL_113:
      __break(0xC471u);
      JUMPOUT(0x1960DF0E0);
    }
    v21 = (WTF *)WTF::fastMalloc((WTF *)(40 * v20));
    v22 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v22)
    {
      v85 = v9;
      v83 = a3;
      v87 = v20;
      v23 = 0;
      v24 = *(_QWORD *)(a1 + 32);
      v25 = 40 * v22;
      do
      {
        v26 = (char *)v21 + v23;
        v27 = *(_OWORD *)(v24 + v23);
        v26[16] = *(_BYTE *)(v24 + v23 + 16);
        *(_OWORD *)v26 = v27;
        v28 = *(unsigned int *)(v24 + v23 + 36);
        *((_QWORD *)v26 + 3) = 0;
        *((_QWORD *)v26 + 4) = 0;
        *(_DWORD *)((char *)v21 + v23 + 36) = v28;
        if ((_DWORD)v28)
        {
          if (v28 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1960DF0E8);
          }
          v29 = (void *)WTF::fastMalloc((WTF *)(8 * v28));
          *(_DWORD *)((char *)v21 + v23 + 32) = v28;
          *(_QWORD *)((char *)v21 + v23 + 24) = v29;
          memcpy(v29, *(const void **)(v24 + v23 + 24), 8 * *(unsigned int *)(v24 + v23 + 36));
        }
        v23 += 40;
      }
      while (v25 != v23);
      v20 = v87;
      a3 = v83;
      v9 = v85;
    }
  }
  else
  {
    v21 = 0;
  }
  v30 = *(uint64_t **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = 0;
  if ((v8 & 0xFF00000000) != 0 && *(unsigned int *)(a1 + 60) > (unint64_t)v8)
    goto LABEL_28;
  v31 = WebCore::ScrollSnapAnimatorState::closestSnapPointForOffset(a1, (void *)1, a2, a3, a4);
  v32 = *(_QWORD *)(a1 + 104);
  v33 = v32 & 0xFF00000000;
  if (!HIDWORD(v31) || !v33)
  {
    if ((HIDWORD(v31) != 0) != (v33 != 0))
      goto LABEL_26;
LABEL_28:
    v34 = 0;
    goto LABEL_29;
  }
  if ((_DWORD)v31 == (_DWORD)v32)
    goto LABEL_28;
LABEL_26:
  *(_DWORD *)(a1 + 104) = v31;
  *(_BYTE *)(a1 + 108) = BYTE4(v31);
  v34 = 1;
LABEL_29:
  if ((v9 & 0xFF00000000) != 0 && *(unsigned int *)(a1 + 44) > (unint64_t)v9)
    goto LABEL_38;
  v35 = WebCore::ScrollSnapAnimatorState::closestSnapPointForOffset(a1, 0, a2, a3, a4);
  v36 = *(_QWORD *)(a1 + 96);
  v37 = v36 & 0xFF00000000;
  if (!HIDWORD(v35) || !v37)
  {
    if ((HIDWORD(v35) != 0) != (v37 != 0))
      goto LABEL_34;
LABEL_36:
    v38 = 0;
    goto LABEL_37;
  }
  if ((_DWORD)v35 == (_DWORD)v36)
    goto LABEL_36;
LABEL_34:
  *(_DWORD *)(a1 + 96) = v35;
  *(_BYTE *)(a1 + 100) = BYTE4(v35);
  v38 = 1;
LABEL_37:
  v34 = v34 | v38;
LABEL_38:
  WebCore::ScrollSnapAnimatorState::updateCurrentlySnappedBoxes((WebCore::ScrollSnapAnimatorState *)a1);
  if (v30)
    v40 = *((_DWORD *)v30 - 3);
  else
    v40 = 0;
  v41 = *(_QWORD *)(a1 + 112);
  if (v41)
    LOBYTE(v41) = *(_DWORD *)(v41 - 12) > 1u;
  if (v40 >= 2 && (v41 & 1) == 0)
  {
    v86 = v34;
    v42 = (WTF *)((char *)v21 + 40 * v20);
    v43 = v21;
    if ((_DWORD)v20)
    {
      v43 = v21;
      while (1)
      {
        v44 = *((_QWORD *)v43 + 1);
        v45 = *((unsigned __int8 *)v43 + 16);
        v46 = *((unsigned int *)v43 + 9);
        if ((_DWORD)v46)
        {
          if (v46 >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1960DF0F0);
          }
          v47 = (void *)WTF::fastMalloc((WTF *)(8 * v46));
          memcpy(v47, *((const void **)v43 + 3), 8 * *((unsigned int *)v43 + 9));
          if (!v30)
            goto LABEL_57;
        }
        else
        {
          v47 = 0;
          if (!v30)
            goto LABEL_57;
        }
        v48 = *((_DWORD *)v30 - 2);
        v49 = (v44 + ~(v44 << 32)) ^ ((unint64_t)(v44 + ~(v44 << 32)) >> 22);
        v50 = 9 * ((v49 + ~(v49 << 13)) ^ ((v49 + ~(v49 << 13)) >> 8));
        v51 = (v50 ^ (v50 >> 15)) + ~((v50 ^ (v50 >> 15)) << 27);
        v52 = v48 & ((v51 >> 31) ^ v51);
        v53 = v30[v52];
        if (v53 != v44)
        {
          v54 = 1;
          while (v53)
          {
            v52 = (v52 + v54) & v48;
            v53 = v30[v52];
            ++v54;
            if (v53 == v44)
              goto LABEL_54;
          }
LABEL_57:
          v55 = 0;
          if (!v47)
            goto LABEL_58;
LABEL_55:
          WTF::fastFree((WTF *)v47, v39);
          goto LABEL_58;
        }
LABEL_54:
        v55 = v45 != 0;
        if (v47)
          goto LABEL_55;
LABEL_58:
        if (v55)
          break;
        v43 = (WTF *)((char *)v43 + 40);
        if (v43 == v42)
          goto LABEL_62;
      }
    }
    if (v43 == v42)
    {
LABEL_62:
      v56 = (WTF *)((char *)v11 + 40 * v88);
      v43 = v11;
      if ((_DWORD)v88)
      {
        v43 = v11;
        while (1)
        {
          v57 = *((_QWORD *)v43 + 1);
          v58 = *((unsigned __int8 *)v43 + 16);
          v59 = *((unsigned int *)v43 + 9);
          if ((_DWORD)v59)
          {
            if (v59 >> 29)
            {
              __break(0xC471u);
              JUMPOUT(0x1960DF0F8);
            }
            v60 = (void *)WTF::fastMalloc((WTF *)(8 * v59));
            memcpy(v60, *((const void **)v43 + 3), 8 * *((unsigned int *)v43 + 9));
            if (!v30)
              goto LABEL_74;
          }
          else
          {
            v60 = 0;
            if (!v30)
              goto LABEL_74;
          }
          v61 = *((_DWORD *)v30 - 2);
          v62 = (v57 + ~(v57 << 32)) ^ ((unint64_t)(v57 + ~(v57 << 32)) >> 22);
          v63 = 9 * ((v62 + ~(v62 << 13)) ^ ((v62 + ~(v62 << 13)) >> 8));
          v64 = (v63 ^ (v63 >> 15)) + ~((v63 ^ (v63 >> 15)) << 27);
          v65 = v61 & ((v64 >> 31) ^ v64);
          v66 = v30[v65];
          if (v66 != v57)
          {
            v67 = 1;
            while (v66)
            {
              v65 = (v65 + v67) & v61;
              v66 = v30[v65];
              ++v67;
              if (v66 == v57)
                goto LABEL_71;
            }
LABEL_74:
            v68 = 0;
            if (!v60)
              goto LABEL_75;
LABEL_72:
            WTF::fastFree((WTF *)v60, v39);
            goto LABEL_75;
          }
LABEL_71:
          v68 = v58 != 0;
          if (v60)
            goto LABEL_72;
LABEL_75:
          if (v68)
            break;
          v43 = (WTF *)((char *)v43 + 40);
          if (v43 == v56)
            goto LABEL_90;
        }
      }
      if (v43 == v56)
      {
LABEL_90:
        v74 = *((unsigned int *)v30 - 1);
        v75 = &v30[v74];
        if (*((_DWORD *)v30 - 3))
        {
          v69 = v30;
          v70 = v86;
          if ((_DWORD)v74)
          {
            v76 = 8 * v74;
            v69 = v30;
            while ((unint64_t)(*v69 + 1) <= 1)
            {
              ++v69;
              v76 -= 8;
              if (!v76)
              {
                v69 = v75;
                goto LABEL_81;
              }
            }
          }
          goto LABEL_81;
        }
        v69 = &v30[v74];
LABEL_80:
        v70 = v86;
LABEL_81:
        v71 = *v69;
        v72 = WebCore::ScrollSnapAnimatorState::preserveCurrentTargetForAxis((WebCore::ScrollSnapAnimatorState *)a1, 0, *v69);
        v34 = v70 | v72 | WebCore::ScrollSnapAnimatorState::preserveCurrentTargetForAxis((WebCore::ScrollSnapAnimatorState *)a1, 1, v71);
        WebCore::ScrollSnapAnimatorState::updateCurrentlySnappedBoxes((WebCore::ScrollSnapAnimatorState *)a1);
        goto LABEL_82;
      }
    }
    v69 = (uint64_t *)((char *)v43 + 8);
    goto LABEL_80;
  }
LABEL_82:
  if (v30)
    WTF::fastFree((WTF *)(v30 - 2), v39);
  if ((_DWORD)v20)
  {
    v77 = 40 * v20;
    v78 = (char *)v21 + 24;
    do
    {
      v79 = *(WTF **)v78;
      if (*(_QWORD *)v78)
      {
        *(_QWORD *)v78 = 0;
        *((_DWORD *)v78 + 2) = 0;
        WTF::fastFree(v79, v39);
      }
      v78 += 40;
      v77 -= 40;
    }
    while (v77);
  }
  if (v21)
  {
    WTF::fastFree(v21, v39);
    if (!(_DWORD)v88)
      goto LABEL_87;
  }
  else if (!(_DWORD)v88)
  {
    goto LABEL_87;
  }
  v80 = 40 * v88;
  v81 = (char *)v11 + 24;
  do
  {
    v82 = *(WTF **)v81;
    if (*(_QWORD *)v81)
    {
      *(_QWORD *)v81 = 0;
      *((_DWORD *)v81 + 2) = 0;
      WTF::fastFree(v82, v39);
    }
    v81 += 40;
    v80 -= 40;
  }
  while (v80);
LABEL_87:
  if (v11)
    WTF::fastFree(v11, v39);
  return v34;
}

uint64_t WebCore::ScrollSnapAnimatorState::setNearestScrollSnapIndexForOffset(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v8 = WebCore::ScrollSnapAnimatorState::closestSnapPointForOffset(a1, 0, a2, a3, a4);
  v9 = *(_QWORD *)(a1 + 96);
  v10 = v9 & 0xFF00000000;
  if (!HIDWORD(v8) || !v10)
  {
    if ((HIDWORD(v8) != 0) != (v10 != 0))
      goto LABEL_4;
LABEL_6:
    v11 = 0;
    goto LABEL_7;
  }
  if ((_DWORD)v8 == (_DWORD)v9)
    goto LABEL_6;
LABEL_4:
  *(_DWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 100) = BYTE4(v8);
  v11 = 1;
LABEL_7:
  v12 = WebCore::ScrollSnapAnimatorState::closestSnapPointForOffset(a1, (void *)1, a2, a3, a4);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = v13 & 0xFF00000000;
  if (!HIDWORD(v12) || !v14)
  {
    if ((HIDWORD(v12) != 0) != (v14 != 0))
      goto LABEL_10;
LABEL_12:
    v15 = 0;
    goto LABEL_13;
  }
  if ((_DWORD)v12 == (_DWORD)v13)
    goto LABEL_12;
LABEL_10:
  *(_DWORD *)(a1 + 104) = v12;
  *(_BYTE *)(a1 + 108) = BYTE4(v12);
  v15 = 1;
LABEL_13:
  v16 = v11 | v15;
  WebCore::ScrollSnapAnimatorState::updateCurrentlySnappedBoxes((WebCore::ScrollSnapAnimatorState *)a1);
  return v16;
}

WTF::TextStream *WebCore::operator<<(WTF::TextStream *a1, int a2)
{
  char v2;

  v2 = HIBYTE(a2);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if (!v2 || v2 == 1)
    WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a1);
  return a1;
}

uint64_t WebCore::ScrollableArea::ScrollableArea(uint64_t this)
{
  *(_QWORD *)this = &unk_1E3406698;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_WORD *)(this + 40) = 257;
  *(_BYTE *)(this + 42) = 1;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 43) = 0;
  *(_WORD *)(this + 47) = 0;
  return this;
}

WebCore::Widget *WebCore::ScrollView::addChild(WebCore::ScrollView *this, WebCore::Widget *a2)
{
  WebCore::Widget *result;
  uint64_t v5;
  WebCore::Widget *v6;

  (*(void (**)(WebCore::Widget *, WebCore::ScrollView *))(*(_QWORD *)a2 + 112))(a2, this);
  ++*((_DWORD *)a2 + 2);
  v6 = a2;
  WTF::HashTable<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::add((uint64_t *)this + 18, (uint64_t *)&v6, (uint64_t)&v5);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (WebCore::Widget *)(*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (*((_QWORD *)a2 + 5))
    return (WebCore::Widget *)WebCore::ScrollView::platformAddChild((id *)this, a2);
  return result;
}

uint64_t WebCore::ScrollView::removeChild(WebCore::ScrollView *this, WebCore::Widget *a2)
{
  uint64_t result;

  (*(void (**)(WebCore::Widget *, _QWORD))(*(_QWORD *)a2 + 112))(a2, 0);
  result = WTF::HashSet<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>((uint64_t *)this + 18, a2);
  if (*((_QWORD *)a2 + 5))
    return WebCore::ScrollView::platformRemoveChild(this, a2);
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = *(_DWORD *)(v2 - 8);
  v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  v8 = v4 & ((v7 >> 31) ^ v7);
  for (i = 1; ; v8 = (v10 + i++) & v4)
  {
    v10 = v8;
    v11 = *(_DWORD **)(v2 + 8 * v8);
    if (v11 != (_DWORD *)-1)
    {
      if (!v11)
        return 0;
      if (v11 == a2)
        break;
    }
  }
  if ((_DWORD)v10 == *(_DWORD *)(v2 - 4))
    return 0;
  *(_QWORD *)(v2 + 8 * v10) = 0;
  if (a2)
  {
    if (a2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a2 + 8))(a2);
    else
      --a2[2];
  }
  *(_QWORD *)(v2 + 8 * v10) = -1;
  ++*(_DWORD *)(*a1 - 16);
  v12 = *a1;
  if (*a1)
    v13 = *(_DWORD *)(v12 - 12) - 1;
  else
    v13 = -1;
  *(_DWORD *)(v12 - 12) = v13;
  v14 = *a1;
  if (*a1)
  {
    v15 = 6 * *(_DWORD *)(v14 - 12);
    v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9)
      WTF::HashTable<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::rehash(a1, v16 >> 1, 0);
  }
  return 1;
}

uint64_t WebCore::ScrollView::createScrollbar@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = a1 + 64;
  v6 = WTF::fastMalloc((WTF *)0xD0);
  result = WebCore::Scrollbar::Scrollbar(v6, v5, a2, 0, 0, 0);
  *a3 = result;
  return result;
}

uint64_t WebCore::Scrollbar::createNativeScrollbar@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;

  v8 = WTF::fastMalloc((WTF *)0xD0);
  result = WebCore::Scrollbar::Scrollbar(v8, a1, a2, a3, 0, 0);
  *a4 = result;
  return result;
}

uint64_t WebCore::ScrollView::scrollbarModes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)(a1 + 40))
    return WebCore::ScrollView::platformScrollbarModes(a1, a2, a3);
  *(_BYTE *)a2 = *(_BYTE *)(a1 + 168);
  *(_BYTE *)a3 = *(_BYTE *)(a1 + 169);
  return a1;
}

uint64_t WebCore::ScrollView::setCanHaveScrollbars(WebCore::ScrollView *this, int a2)
{
  int v2;
  int v3;
  int v5;
  WebCore::ScrollView *v6;
  __int16 v7;

  v7 = 0;
  if (*((_QWORD *)this + 5))
  {
    v5 = a2;
    v6 = this;
    WebCore::ScrollView::platformScrollbarModes((uint64_t)this, (uint64_t)&v7 + 1, (uint64_t)&v7);
    a2 = v5;
    this = v6;
    v2 = v7;
  }
  else
  {
    HIBYTE(v7) = *((_BYTE *)this + 168);
    v2 = *((unsigned __int8 *)this + 169);
    LOBYTE(v7) = *((_BYTE *)this + 169);
  }
  if (a2 && v2 == 1)
  {
    v2 = 0;
    LOBYTE(v7) = 0;
  }
  else if ((a2 & 1) == 0)
  {
    v2 = 1;
    v7 = 257;
    v3 = 1;
    return WebCore::ScrollView::setScrollbarModes((uint64_t)this, v3, v2, 0, 0);
  }
  v3 = HIBYTE(v7);
  if (HIBYTE(v7) == 1)
  {
    v3 = 0;
    HIBYTE(v7) = 0;
  }
  return WebCore::ScrollView::setScrollbarModes((uint64_t)this, v3, v2, 0, 0);
}

uint64_t WebCore::ScrollView::setPaintsEntireContents(uint64_t this, char a2)
{
  *(_BYTE *)(this + 322) = a2;
  return this;
}

uint64_t WebCore::ScrollView::contentsScrollPosition(WebCore::ScrollView *this)
{
  if (*((_QWORD *)this + 5))
    return WebCore::ScrollView::unobscuredContentRect((uint64_t)this, 0);
  else
    return (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
}

uint64_t WebCore::ScrollView::setContentsScrollPosition(WebCore::ScrollView *this, WebCore::IntPoint *a2, uint64_t a3)
{
  if (*((_QWORD *)this + 5))
    WebCore::ScrollView::setActualScrollPosition(this, a2);
  return (*(uint64_t (**)(WebCore::ScrollView *, WebCore::IntPoint *, uint64_t))(*(_QWORD *)this + 472))(this, a2, a3);
}

unint64_t WebCore::ScrollView::rootViewToContents(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  void *v9;
  double v10;
  CGFloat v11;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v15;
  float MaxX;
  unsigned int v17;
  CGRect v18;
  CGRect v19;

  v3 = WebCore::Widget::convertFromRootView(this, a2);
  v4 = HIDWORD(v3);
  if (*((_BYTE *)this + 312) != 1)
  {
    v5 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 8) + 704))((char *)this + 64))
    {
      v6 = *((_QWORD *)this + 20);
      if (!v6)
        goto LABEL_4;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
      {
        v9 = *(void **)(v6 + 40);
        if (v9)
        {
          if (objc_msgSend(*(id *)(v6 + 40), "conformsToProtocol:", &unk_1EE342188))
            v9 = (void *)objc_msgSend(v9, "superview");
          objc_msgSend(v9, "frame");
          v11 = v10;
          y = v18.origin.y;
          width = v18.size.width;
          height = v18.size.height;
          *(float *)&v10 = v10;
          v15 = vcvtms_s32_f32(*(float *)&v10);
          v18.origin.x = v11;
          MaxX = CGRectGetMaxX(v18);
          v17 = vcvtps_s32_f32(MaxX);
          v19.origin.x = v11;
          v19.origin.y = y;
          v19.size.width = width;
          v19.size.height = height;
          CGRectGetMaxY(v19);
          LODWORD(v6) = v17 - v15;
        }
        else
        {
          v6 = *(_QWORD *)(v6 + 56);
        }
        goto LABEL_4;
      }
    }
    LODWORD(v6) = 0;
LABEL_4:
    v7 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))((char *)this + 64);
    LODWORD(v3) = v5 + v3 - v6;
    LODWORD(v4) = HIDWORD(v5)
                + v4
                - (int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1)+ v7);
  }
  return v3 | ((unint64_t)v4 << 32);
}

uint64_t WebCore::Widget::boundsRect(WebCore::Widget *this)
{
  WebCore::Widget::frameRect(this);
  WebCore::Widget::frameRect(this);
  return 0;
}

float WebCore::ScrollView::unobscuredContentSize(WebCore::ScrollView *this)
{
  if (*((_BYTE *)this + 196))
    return *((float *)this + 43);
  else
    return 0.0;
}

id WebCore::ScrollView::unobscuredContentRectInternal(id *this, char a2)
{
  char *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  WebCore::Widget *v8;
  WebCore::Widget *v9;
  unint64_t v10;

  if (this[5])
  {
    v6 = WebCore::ScrollView::platformVisibleContentSize(this, a2) >> 32;
  }
  else
  {
    if ((a2 & 1) != 0)
      goto LABEL_5;
    v3 = (char *)(this + 8);
    if ((*((uint64_t (**)(char *))this[8] + 50))((char *)this + 64))
    {
      v8 = (WebCore::Widget *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 400))((char *)this + 64);
      if (((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v8 + 272))(v8) & 1) == 0)
        WebCore::Widget::frameRect(v8);
    }
    if (!(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 392))((char *)this + 64)
      || (v9 = (WebCore::Widget *)(*(uint64_t (**)(char *))(*(_QWORD *)v3 + 392))((char *)this + 64),
          ((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v9 + 272))(v9) & 1) != 0))
    {
LABEL_5:
      LODWORD(v4) = 0;
    }
    else
    {
      WebCore::Widget::frameRect(v9);
      v4 = HIDWORD(v10);
    }
    WebCore::Widget::frameRect((WebCore::Widget *)this);
    WebCore::Widget::frameRect((WebCore::Widget *)this);
    LODWORD(v6) = (int)(float)((float)(int)((v5 - v4) & ~((v5 - (int)v4) >> 31))
                             - (*((float (**)(id *, _QWORD))*this + 51))(this, 0));
  }
  ceilf((float)(1.0 / (*((float (**)(id *))*this + 53))(this)) * (float)(int)v6);
  return this[25];
}

uint64_t WebCore::ScrollView::visibleContentRectInternal(id *this, int a2, int a3)
{
  if (a3 == 1 && this[5])
    return WebCore::ScrollView::platformVisibleContentRect(this, a2);
  else
    return WebCore::ScrollView::unobscuredContentRect((uint64_t)this, a2);
}

unint64_t WebCore::ScrollView::frameRectShrunkByInset(WebCore::ScrollView *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v5;
  CGFloat v6;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  WebCore::ScrollView *v10;
  CGRect v11;
  CGRect v12;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v10 = this;
    if (objc_msgSend((id)v2, "conformsToProtocol:", &unk_1EE342188))
      v2 = objc_msgSend((id)v2, "superview");
    objc_msgSend((id)v2, "frame");
    v6 = v5;
    y = v11.origin.y;
    width = v11.size.width;
    height = v11.size.height;
    *(float *)&v5 = v5;
    LODWORD(v2) = vcvtms_s32_f32(*(float *)&v5);
    *(float *)&v5 = v11.origin.y;
    LODWORD(v1) = vcvtms_s32_f32(*(float *)&v5);
    v11.origin.x = v6;
    CGRectGetMaxX(v11);
    v12.origin.x = v6;
    v12.origin.y = y;
    v12.size.width = width;
    v12.size.height = height;
    CGRectGetMaxY(v12);
    v3 = v2 | (v1 << 32);
    this = v10;
  }
  else
  {
    v3 = *((_QWORD *)this + 6);
  }
  return v3 | ((unint64_t)((int)(*(float (**)(WebCore::ScrollView *, _QWORD))(*(_QWORD *)this + 408))(this, 0)+ HIDWORD(v3)) << 32);
}

uint64_t WebCore::ScrollView::useFixedLayout(WebCore::ScrollView *this)
{
  return *((unsigned __int8 *)this + 321);
}

uint64_t WebCore::ScrollView::availableContentSizeChanged(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;
  uint64_t v7;

  v4 = a1 + 64;
  result = WebCore::ScrollableArea::availableContentSizeChanged((WebCore::ScrollAnimator *)(a1 + 64));
  if (*(_QWORD *)(a1 + 40))
    v6 = 1;
  else
    v6 = a2 == 0;
  if (!v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 64) + 832))(v4, 0, 1);
    return WebCore::ScrollView::updateScrollbars(a1, (const WebCore::IntPoint *)&v7);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::availableContentSizeChanged(WebCore::ScrollAnimator *a1, int a2)
{
  uint64_t result;
  BOOL v5;
  uint64_t v6;

  result = WebCore::ScrollableArea::availableContentSizeChanged(a1);
  if (*((_QWORD *)a1 - 3))
    v5 = 1;
  else
    v5 = a2 == 0;
  if (!v5)
  {
    v6 = (*(uint64_t (**)(WebCore::ScrollAnimator *, _QWORD, uint64_t))(*(_QWORD *)a1 + 832))(a1, 0, 1);
    return WebCore::ScrollView::updateScrollbars((uint64_t)a1 - 64, (const WebCore::IntPoint *)&v6);
  }
  return result;
}

unint64_t WebCore::ScrollableArea::maximumScrollPosition(WebCore::ScrollableArea *this)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 496))(this);
  v3 = v2;
  v4 = HIDWORD(v2);
  v5 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 528))(this);
  v6 = v5 + (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 536))(this) + v4;
  v7 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 488))(this);
  return (((unint64_t)(v6 - HIDWORD(v7)) << 32) - (*((_QWORD *)this + 4) & 0xFFFFFFFF00000000)) | (v3 - (v7 + *((_QWORD *)this + 4)));
}

unint64_t `non-virtual thunk to'WebCore::ScrollView::maximumScrollPosition(WebCore::ScrollView *this)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)this + 496))(this);
  v3 = v2;
  v4 = HIDWORD(v2);
  v5 = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)this + 528))(this);
  v6 = v5 + (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)this + 536))(this) + v4;
  v7 = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)this + 488))(this);
  v8 = *((_QWORD *)this + 4);
  v9 = (((unint64_t)(v6 - HIDWORD(v7)) << 32) - (v8 & 0xFFFFFFFF00000000)) >> 32;
  return (v3 - ((_DWORD)v7 + (_DWORD)v8)) & ~((v3 - ((int)v7 + (int)v8)) >> 31) | ((unint64_t)(v9 & ~((int)v9 >> 31)) << 32);
}

unint64_t WebCore::ScrollView::adjustScrollPositionWithinRange(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 104) || *(_BYTE *)(a1 + 316))
    return *(_QWORD *)a2;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 424))(a1 + 64);
  v5 = v4;
  v6 = HIDWORD(v4);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 456))(a1);
  v8 = HIDWORD(v7);
  LODWORD(v9) = *a2;
  if (*a2 >= (int)v7)
    LODWORD(v9) = v7;
  if (v5 <= (int)v9)
    v9 = v9;
  else
    v9 = v5;
  if (a2[1] < SHIDWORD(v7))
    LODWORD(v8) = a2[1];
  if ((int)v6 <= (int)v8)
    v8 = v8;
  else
    v8 = v6;
  return v9 | (v8 << 32);
}

unint64_t WebCore::ScrollableArea::maximumScrollOffset(WebCore::ScrollableArea *this)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 496))(this);
  v3 = v2;
  v4 = HIDWORD(v2);
  v5 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 528))(this);
  v6 = v5 + (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 536))(this) + v4;
  v7 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 488))(this);
  return (v3 - v7) | ((unint64_t)(v6 - HIDWORD(v7)) << 32);
}

unint64_t WebCore::ScrollableArea::scrollPositionFromOffset(uint64_t a1, uint64_t a2)
{
  return (a2 - (*(_QWORD *)(a1 + 32) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (a2
                                                                                      - *(_QWORD *)(a1 + 32));
}

uint64_t WebCore::ScrollView::scrollOffsetChangedViaPlatformWidget(float32x2_t *this, float32x2_t *a2, float32x2_t *a3)
{
  uint64_t result;
  float32x2_t v7;
  int v8;
  float32x2_t *v9;
  float32x2_t v10;
  uint64_t v11;
  float32x2_t *v12;

  result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 640))(this);
  if ((_DWORD)result)
  {
    v7 = *a3;
    v8 = this[36].u8[4];
    *(float32x2_t *)((char *)this + 276) = *a2;
    *(float32x2_t *)((char *)this + 284) = v7;
    if (!v8)
      this[36].i8[4] = 1;
  }
  else
  {
    (*(void (**)(float32x2_t *, float32x2_t *, float32x2_t *))(*(_QWORD *)this + 648))(this, a2, a3);
    v9 = (float32x2_t *)this[10];
    if (!v9)
    {
      WebCore::ScrollAnimator::create((WebCore::ScrollAnimator *)&this[8], (uint64_t *)&v12);
      v9 = v12;
      v10 = this[10];
      this[10] = (float32x2_t)v12;
      if (v10)
      {
        (*(void (**)(float32x2_t))(**(_QWORD **)&v10 + 8))(v10);
        v9 = (float32x2_t *)this[10];
      }
    }
    v11 = (*(uint64_t (**)(float32x2_t *, _QWORD, uint64_t))(*(_QWORD *)&this[8] + 832))(this + 8, 0, 1);
    *(float *)&v12 = (float)(int)v11;
    *((float *)&v12 + 1) = (float)SHIDWORD(v11);
    return WebCore::ScrollAnimator::setCurrentPosition(v9, (float32x2_t *)&v12, 0);
  }
  return result;
}

uint64_t WebCore::ScrollView::scrollContents(int32x2_t *this, const WebCore::IntSize *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int32x2_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  int32x2_t v37;
  void *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int32x2_t v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  int v46;
  double v47;
  CGFloat v48;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v52;
  float MaxX;
  unsigned int v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  unsigned int v60;
  float MaxY;
  unint64_t v62;
  int32x2_t v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  unint64_t v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;

  result = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 312))(this);
  if (result)
  {
    v5 = result;
    *(_QWORD *)&v65 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 320))(this);
    *((_QWORD *)&v65 + 1) = v6;
    v7 = this + 8;
    v8 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)&this[8] + 488))(this + 8);
    v9 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)&this[8] + 488))(this + 8);
    v66 = 0;
    v67 = __PAIR64__(HIDWORD(v9), v8);
    v10 = WebCore::Widget::convertToRootView((WebCore::Widget *)this, (const WebCore::IntRect *)&v66);
    v12 = v11;
    v13 = HIDWORD(v11);
    if ((*(uint64_t (**)(int32x2_t *))(*(_QWORD *)&this[8] + 400))(this + 8)
      && (v35 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v7 + 400))(this + 8),
          ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 272))(v35) & 1) != 0)
      || (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v7 + 392))(this + 8)
      && (v45 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v7 + 392))(this + 8),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 272))(v45)))
    {
      if (*(_QWORD *)&this[20] && !(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v7 + 680))(this + 8))
      {
        v36 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)&this[8] + 704))(this + 8);
        v37 = this[20];
        v38 = *(void **)(*(_QWORD *)&v37 + 40);
        if (v38)
        {
          v46 = v36;
          if (objc_msgSend(*(id *)(*(_QWORD *)&v37 + 40), "conformsToProtocol:", &unk_1EE342188))
            v38 = (void *)objc_msgSend(v38, "superview");
          objc_msgSend(v38, "frame");
          v48 = v47;
          y = v68.origin.y;
          width = v68.size.width;
          height = v68.size.height;
          *(float *)&v47 = v47;
          v52 = vcvtms_s32_f32(*(float *)&v47);
          v68.origin.x = v48;
          MaxX = CGRectGetMaxX(v68);
          v54 = vcvtps_s32_f32(MaxX);
          v69.origin.x = v48;
          v69.origin.y = y;
          v69.size.width = width;
          v69.size.height = height;
          CGRectGetMaxY(v69);
          LODWORD(v39) = v54 - v52;
          v36 = v46;
        }
        else
        {
          v39 = *(_QWORD *)(*(_QWORD *)&v37 + 56);
        }
        v40 = (v12 - v39) & ~((int)(v12 - v39) >> 31);
        v41 = v39 + v10;
        v12 = v40;
        if (v36)
          v14 = v41;
        else
          v14 = v10;
      }
      else
      {
        v14 = v10;
      }
      if (*(_QWORD *)&this[19] && !(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v7 + 672))(this + 8))
      {
        v42 = this[19];
        v43 = *(void **)(*(_QWORD *)&v42 + 40);
        if (v43)
        {
          if (objc_msgSend(*(id *)(*(_QWORD *)&v42 + 40), "conformsToProtocol:", &unk_1EE342188))
            v43 = (void *)objc_msgSend(v43, "superview");
          objc_msgSend(v43, "frame");
          v56 = v55;
          v57 = v70.origin.y;
          v58 = v70.size.width;
          v59 = v70.size.height;
          *(float *)&v55 = v70.origin.y;
          v60 = vcvtms_s32_f32(*(float *)&v55);
          v70.origin.x = v56;
          CGRectGetMaxX(v70);
          v71.origin.x = v56;
          v71.origin.y = v57;
          v71.size.width = v58;
          v71.size.height = v59;
          MaxY = CGRectGetMaxY(v71);
          v44 = (unint64_t)(vcvtps_s32_f32(MaxY) - v60) << 32;
        }
        else
        {
          v44 = *(_QWORD *)(*(_QWORD *)&v42 + 56);
        }
        v13 = ((_DWORD)v13 - HIDWORD(v44)) & ~(((int)v13 - HIDWORD(v44)) >> 31);
      }
    }
    else
    {
      v14 = v10;
    }
    v66 = v10 & 0xFFFFFFFF00000000 | v14;
    v67 = v12 | (v13 << 32);
    v64 = v65;
    if ((int)v65 <= v14)
      v15 = v14;
    else
      v15 = v65;
    v16 = DWORD2(v64) + v65;
    if (SDWORD1(v65) <= SHIDWORD(v10))
      v17 = HIDWORD(v10);
    else
      v17 = DWORD1(v65);
    if ((int)(v12 + v14) < v16)
      v16 = v12 + v14;
    v18 = HIDWORD(v64) + DWORD1(v65);
    if ((int)v13 + HIDWORD(v10) < HIDWORD(v64) + DWORD1(v65))
      v18 = v13 + HIDWORD(v10);
    if (v15 >= v16 || v17 >= v18)
    {
      v15 = 0;
      v17 = 0;
      v16 = 0;
      v18 = 0;
    }
    *(_QWORD *)&v64 = __PAIR64__(v17, v15);
    DWORD2(v64) = v16 - v15;
    HIDWORD(v64) = v18 - v17;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 56))(v5, &v64);
    if (this[40].i8[0])
    {
      v19 = *(_DWORD *)a2;
      v20 = *((_DWORD *)a2 + 1);
      if (*(int *)a2 < 0)
        v19 = -v19;
      if (v20 < 0)
        v20 = -v20;
      if (v19 <= v20)
        v19 = v20;
      v21 = v19 + 16;
      v22 = vsub_s32(this[37], vdup_n_s32(v21));
      v23 = vadd_s32(v22, vdup_n_s32(2 * v21));
      v24 = vmax_s32(v22, *(int32x2_t *)&v65);
      v25 = vmin_s32(vadd_s32(*(int32x2_t *)((char *)&v65 + 8), *(int32x2_t *)&v65), v23);
      v26 = vcgt_s32(v25, v24);
      if ((v26.i32[0] & v26.i32[1] & 1) == 0)
      {
        v25 = 0;
        v24 = 0;
      }
      v62 = (unint64_t)v24;
      v63 = vsub_s32(v25, v24);
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v5 + 64))(v5, &v62);
    }
    v27 = (void *)this[5];
    if (v27)
    {
      if ((objc_msgSend((id)objc_msgSend(v27, "contentView"), "copiesOnScroll") & 1) == 0)
        goto LABEL_32;
    }
    else if (!this[39].i8[5])
    {
LABEL_32:
      (*(void (**)(int32x2_t *, __int128 *))(*(_QWORD *)this + 616))(this, &v64);
LABEL_33:
      WebCore::ScrollView::updateOverhangAreas((WebCore::ScrollView *)this);
      if (this[5])
      {
LABEL_46:
        v62 = 0;
        v63 = 0;
        return (*(uint64_t (**)(uint64_t, unint64_t *))(*(_QWORD *)v5 + 56))(v5, &v62);
      }
      v28 = (_QWORD *)this[18];
      if (v28)
      {
        v29 = *((unsigned int *)v28 - 1);
        v30 = &v28[v29];
        if (*((_DWORD *)v28 - 3))
        {
          v31 = v28;
          if ((_DWORD)v29)
          {
            v32 = 8 * v29;
            v31 = v28;
            while ((unint64_t)(*v31 + 1) <= 1)
            {
              ++v31;
              v32 -= 8;
              if (!v32)
              {
                v31 = v30;
                goto LABEL_41;
              }
            }
          }
          goto LABEL_41;
        }
        v31 = &v28[v29];
      }
      else
      {
        v31 = 0;
        v29 = 0;
      }
      v30 = &v28[v29];
      if (!v28)
      {
        v33 = 0;
LABEL_45:
        while (v31 != v33)
        {
          v34 = v31 + 1;
          (*(void (**)(_QWORD))(*(_QWORD *)*v31 + 136))(*v31);
          v31 = v30;
          if (v34 != v30)
          {
            v31 = v34;
            while ((unint64_t)(*v31 + 1) <= 1)
            {
              if (++v31 == v30)
              {
                v31 = v30;
                break;
              }
            }
          }
        }
        goto LABEL_46;
      }
LABEL_41:
      v33 = &v28[*((unsigned int *)v28 - 1)];
      goto LABEL_45;
    }
    v62 = -*(_DWORD *)a2 | ((unint64_t)-*((_DWORD *)a2 + 1) << 32);
    if (((*(uint64_t (**)(int32x2_t *, unint64_t *, unint64_t *, __int128 *))(*(_QWORD *)this + 608))(this, &v62, &v66, &v65) & 1) != 0)goto LABEL_33;
    goto LABEL_32;
  }
  return result;
}

uint64_t WebCore::ScrollView::setScrollPosition(uint64_t this, WebCore::IntPoint *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  WebCore::ScrollAnimator *v9;
  unint64_t v10;
  unint64_t v11;

  if (!*(_BYTE *)(this + 315))
  {
    v5 = this;
    v6 = this + 64;
    if (*(_BYTE *)(this + 109) == 1)
    {
      v9 = (WebCore::ScrollAnimator *)WebCore::ScrollableArea::scrollAnimator((WebCore::ScrollableArea *)(this + 64));
      WebCore::ScrollAnimator::cancelAnimations(v9);
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    }
    if (*(_QWORD *)(v5 + 40))
    {
      return WebCore::ScrollView::platformSetScrollPosition((id *)v5, a2);
    }
    else
    {
      if (*(_BYTE *)(v5 + 312) == 1 || *(_BYTE *)(a3 + 1) == 0)
        v10 = *(_QWORD *)a2;
      else
        v10 = WebCore::ScrollView::adjustScrollPositionWithinRange(v5, a2);
      v11 = v10;
      this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 + 64) + 832))(v6, 0, 1);
      if (*(_BYTE *)(v5 + 108) || ((_DWORD)v10 == (_DWORD)this ? (v8 = HIDWORD(v10) == HIDWORD(this)) : (v8 = 0), !v8))
      {
        this = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v6 + 56))(v6, &v11, a3);
        if ((this & 1) == 0)
          return WebCore::ScrollView::updateScrollbars(v5, (const WebCore::IntPoint *)&v11);
      }
    }
  }
  return this;
}

uint64_t WebCore::ScrollableArea::scroll(WebCore::ScrollableArea *a1, unsigned int a2, int a3, unsigned int a4)
{
  char v6;
  uint64_t v8;
  uint64_t result;
  int v10;
  float v11;
  _BOOL4 v12;
  float v13;
  float v14;
  uint64_t v15;
  int8x16_t v16;
  double v17;
  int8x16_t v18;

  if (a2 > 3)
    return 0;
  v6 = a2;
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 8 * qword_1969F6BC8[(char)a2]))();
  if (!v8)
    return 0;
  switch(a3)
  {
    case 0:
      v10 = *(_DWORD *)(v8 + 104);
      goto LABEL_9;
    case 1:
      v11 = (float)*(int *)(v8 + 108);
      if ((v6 & 0xFE) == 2)
      {
        v12 = 0;
      }
      else
      {
        (*(void (**)(WebCore::ScrollableArea *, float))(*(_QWORD *)a1 + 744))(a1, v11);
        v12 = 1;
      }
      goto LABEL_11;
    case 2:
      v10 = *(_DWORD *)(v8 + 92);
LABEL_9:
      v11 = (float)v10;
      goto LABEL_10;
    case 3:
      v11 = *(float *)(v8 + 112);
      goto LABEL_10;
    default:
      v11 = 0.0;
LABEL_10:
      v12 = (v6 & 0xFE) != 2;
LABEL_11:
      v13 = v11 * (float)a4;
      if ((v6 & 0xFD) != 0)
        v14 = v13;
      else
        v14 = -v13;
      v15 = WebCore::ScrollableArea::scrollAnimator(a1);
      *(float *)v16.i32 = v14;
      result = WebCore::ScrollAnimator::singleAxisScroll(v15, v12, 1, v16, v17, v18);
      break;
  }
  return result;
}

unint64_t WebCore::ScrollView::overhangAmount(WebCore::ScrollView *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  signed int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  v2 = (_QWORD *)((char *)this + 64);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 416))((char *)this + 64);
  v4 = v2[4];
  v5 = v4 + v3;
  v6 = (v4 & 0xFFFFFFFF00000000) + v3;
  v7 = HIDWORD(v6);
  if (v6 >= 0)
  {
    v8 = (unint64_t)(*(uint64_t (**)(_QWORD *))(*v2 + 496))(v2) >> 32;
    LODWORD(v8) = (*(uint64_t (**)(_QWORD *))(*v2 + 528))(v2) + v8;
    if ((_DWORD)v8 + (*(unsigned int (**)(_QWORD *))(*v2 + 536))(v2)
      && (v9 = (unint64_t)(*(uint64_t (**)(_QWORD *))(*v2 + 496))(v2) >> 32,
          v10 = (*(uint64_t (**)(_QWORD *))(*v2 + 528))(v2),
          v11 = v10 + (*(uint64_t (**)(_QWORD *))(*v2 + 536))(v2) + v9,
          (int)(v11 - ((unint64_t)(*(uint64_t (**)(_QWORD *))(*v2 + 488))(v2) >> 32)) < (int)v7))
    {
      v12 = (unint64_t)(*(uint64_t (**)(_QWORD *))(*v2 + 496))(v2) >> 32;
      v13 = (*(uint64_t (**)(_QWORD *))(*v2 + 528))(v2);
      v14 = (*(uint64_t (**)(_QWORD *))(*v2 + 536))(v2);
      LODWORD(v7) = v7
                  - (v13
                   + v14
                   + v12)
                  + ((unint64_t)(*(uint64_t (**)(_QWORD *))(*v2 + 488))(v2) >> 32);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if ((v5 & 0x80000000) == 0)
  {
    v15 = *((_DWORD *)this + 64);
    if (v15 && (int)(v15 - (*(uint64_t (**)(_QWORD *))(*v2 + 488))(v2)) < v5)
    {
      v16 = *((_QWORD *)this + 32);
      v5 = v5 - v16 + (*(uint64_t (**)(_QWORD *))(*((_QWORD *)this + 8) + 488))(v2);
    }
    else
    {
      v5 = 0;
    }
  }
  return v5 | ((unint64_t)v7 << 32);
}

unint64_t WebCore::ScrollableArea::scrollOffset(WebCore::ScrollableArea *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this);
  return ((*((_QWORD *)this + 4) & 0xFFFFFFFF00000000) + v2) & 0xFFFFFFFF00000000 | (*((_QWORD *)this + 4)
                                                                                       + v2);
}

unint64_t `non-virtual thunk to'WebCore::ScrollView::overhangAmount(WebCore::ScrollView *this)
{
  return WebCore::ScrollView::overhangAmount((WebCore::ScrollView *)((char *)this - 64));
}

uint64_t WebCore::Widget::invalidate(id *this)
{
  id v1;
  unsigned int v2;
  unint64_t v3;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  const CGRect *v9;
  uint64_t v10;
  id v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  const CGRect *v16;
  uint64_t v17;
  unsigned int v18;
  id *v19;
  CGRect v20;

  v1 = this[5];
  if (!v1)
  {
    v2 = *((_DWORD *)this + 14);
LABEL_3:
    v3 = (unint64_t)this[7];
    goto LABEL_4;
  }
  v19 = this;
  if (objc_msgSend(v1, "conformsToProtocol:", &unk_1EE342188))
    v1 = (id)objc_msgSend(v1, "superview");
  objc_msgSend(v1, "frame");
  v20.origin.x = v5;
  v20.origin.y = v6;
  v20.size.width = v7;
  v20.size.height = v8;
  WebCore::enclosingIntRect(&v20, v9);
  v17 = v10;
  v11 = v19[5];
  if (!v11)
  {
    v2 = v10;
    this = v19;
    goto LABEL_3;
  }
  if (objc_msgSend(v19[5], "conformsToProtocol:", &unk_1EE342188))
    v11 = (id)objc_msgSend(v11, "superview");
  objc_msgSend(v11, "frame", v17);
  v20.origin.x = v12;
  v20.origin.y = v13;
  v20.size.width = v14;
  v20.size.height = v15;
  WebCore::enclosingIntRect(&v20, v16);
  this = v19;
  v2 = v18;
LABEL_4:
  v20.origin.x = 0.0;
  *(_QWORD *)&v20.origin.y = v3 & 0xFFFFFFFF00000000 | v2;
  return (*((uint64_t (**)(id *, CGRect *))*this + 4))(this, &v20);
}

uint64_t WebCore::Scrollbar::setFrameRect(WebCore::Scrollbar *this, const WebCore::IntRect *a2)
{
  WebCore::Widget::setFrameRect(this, a2);
  return (*(uint64_t (**)(_QWORD, WebCore::Scrollbar *))(**((_QWORD **)this + 8) + 408))(*((_QWORD *)this + 8), this);
}

_DWORD *WebCore::Scrollbar::setProportion(_DWORD *this, int a2, int a3)
{
  if (this[22] != a2 || this[23] != a3)
  {
    this[22] = a2;
    this[23] = a3;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 312))(this);
  }
  return this;
}

uint64_t WebCore::ScrollView::frameRectsChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  if (*(_QWORD *)(this + 40))
    return this;
  v1 = *(_QWORD *)(this + 144);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = (_QWORD *)(v1 + 8 * v2);
    if (*(_DWORD *)(v1 - 12))
    {
      v4 = *(_QWORD **)(this + 144);
      if ((_DWORD)v2)
      {
        v5 = 8 * v2;
        v4 = *(_QWORD **)(this + 144);
        while ((unint64_t)(*v4 + 1) <= 1)
        {
          ++v4;
          v5 -= 8;
          if (!v5)
          {
            v4 = v3;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v4 = (_QWORD *)(v1 + 8 * v2);
  }
  else
  {
    v4 = 0;
    v2 = 0;
  }
  v3 = (_QWORD *)(v1 + 8 * v2);
LABEL_9:
  if (v1)
    v6 = (_QWORD *)(v1 + 8 * *(unsigned int *)(v1 - 4));
  else
    v6 = 0;
  while (v4 != v6)
  {
    v7 = v4 + 1;
    this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 136))(*v4);
    v4 = v3;
    if (v7 != v3)
    {
      v4 = v7;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        if (++v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ScrollView::invalidateScrollCornerRect(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(WebCore::ScrollView *, const WebCore::IntRect *))(*(_QWORD *)this + 32))(this, a2);
}

uint64_t WebCore::ScrollView::updateScrollbarSteps(uint64_t this)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  WebCore::Scrollbar *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = this;
  v2 = *(_DWORD **)(this + 152);
  if (v2)
  {
    v4 = this + 64;
    (*(void (**)(uint64_t))(*(_QWORD *)(this + 64) + 488))(this + 64);
    v5 = (WebCore::Scrollbar *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 488))(v1 + 64);
    this = WebCore::Scrollbar::pageStep(v5);
    v2[26] = 40;
    v2[27] = this;
    v2[28] = 1065353216;
  }
  v3 = *(_DWORD **)(v1 + 160);
  if (v3)
  {
    v7 = *(_QWORD *)(v1 + 64);
    v6 = v1 + 64;
    (*(void (**)(uint64_t))(v7 + 488))(v6);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 488))(v6);
    this = WebCore::Scrollbar::pageStep((WebCore::Scrollbar *)HIDWORD(v8));
    v3[26] = 40;
    v3[27] = this;
    v3[28] = 1065353216;
  }
  return this;
}

float WebCore::Scrollbar::setSteps(WebCore::Scrollbar *this, int a2, int a3, int a4)
{
  float result;

  *((_DWORD *)this + 26) = a2;
  *((_DWORD *)this + 27) = a3;
  result = 1.0 / (float)a4;
  *((float *)this + 28) = result;
  return result;
}

uint64_t WebCore::Scrollbar::pixelsPerLineStep(WebCore::Scrollbar *this)
{
  return 40;
}

uint64_t WebCore::Scrollbar::pageStep(WebCore::Scrollbar *this)
{
  int v1;
  int v2;
  int v3;
  uint64_t *v5;
  int v6;

  {
    v1 = WebCore::Scrollbar::maxOverlapBetweenPages(void)::maxOverlapBetweenPages;
  }
  else
  {
    v6 = (int)this;
    v5 = WebCore::ScrollbarTheme::theme(this);
    v1 = (*(uint64_t (**)(uint64_t *))(*v5 + 192))(v5);
    LODWORD(this) = v6;
    WebCore::Scrollbar::maxOverlapBetweenPages(void)::maxOverlapBetweenPages = v1;
  }
  v2 = llroundf((float)(int)this * 0.8);
  v3 = llroundf((float)((int)this - v1));
  if (v2 > v3)
    v3 = v2;
  if (v3 <= 1)
    return 1;
  else
    return v3;
}

uint64_t WebCore::ScrollableArea::hasOverlayScrollbars(WebCore::ScrollableArea *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  if ((*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 400))(this))
  {
    v3 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 400))(this);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3) & 1) != 0)
      return 1;
  }
  result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 392))(this);
  if (result)
  {
    v4 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 392))(this);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 272))(v4);
  }
  return result;
}

uint64_t WebCore::ScrollView::scrollContentsSlowPath(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(WebCore::ScrollView *))(*(_QWORD *)this + 312))(this);
  return (*(uint64_t (**)(uint64_t, const WebCore::IntRect *))(*(_QWORD *)v3 + 80))(v3, a2);
}

unint64_t WebCore::ScrollView::viewToContents(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  char *v4;
  uint64_t v5;
  WebCore::Widget *v6;
  float v7;
  int v9;

  if (*((_BYTE *)this + 312) != 1)
  {
    v4 = (char *)this + 64;
    v5 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v4 + 704))(v4))
    {
      v6 = (WebCore::Widget *)*((_QWORD *)this + 20);
      if (!v6)
        goto LABEL_4;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v6);
        LODWORD(v6) = v9;
        goto LABEL_4;
      }
    }
    LODWORD(v6) = 0;
LABEL_4:
    v7 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))(v4);
    return (*(_DWORD *)a2 + v5 - (_DWORD)v6) | ((unint64_t)(HIDWORD(v5)
                                                                                             - (int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1) + v7)
                                                                                             + *((_DWORD *)a2 + 1)) << 32);
  }
  return *(_QWORD *)a2;
}

unint64_t WebCore::ScrollView::contentsToView(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  char *v4;
  uint64_t v5;
  WebCore::Widget *v6;
  float v7;
  int v9;

  if (*((_BYTE *)this + 312) != 1)
  {
    v4 = (char *)this + 64;
    v5 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v4 + 704))(v4))
    {
      v6 = (WebCore::Widget *)*((_QWORD *)this + 20);
      if (!v6)
        goto LABEL_4;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v6);
        LODWORD(v6) = v9;
        goto LABEL_4;
      }
    }
    LODWORD(v6) = 0;
LABEL_4:
    v7 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))(v4);
    return (*(_DWORD *)a2 + (_DWORD)v6 - v5) | ((unint64_t)((int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1) + v7)
                                                                                             - HIDWORD(v5)
                                                                                             + *((_DWORD *)a2 + 1)) << 32);
  }
  return *(_QWORD *)a2;
}

void WebCore::ScrollView::viewToContents(WebCore::ScrollView *this, const WebCore::FloatPoint *a2, __n128 a3)
{
  char *v4;
  id *v5;
  id v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect v11;
  CGRect v12;

  if (*((_BYTE *)this + 312) != 1)
  {
    a3.n128_u64[0] = 0x4F0000004F000000;
    v4 = (char *)this + 64;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1, a3);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v4 + 704))(v4))
    {
      v5 = (id *)*((_QWORD *)this + 20);
      if (v5)
      {
        if (((*((uint64_t (**)(_QWORD))*v5 + 34))(*((_QWORD *)this + 20)) & 1) == 0)
        {
          v6 = v5[5];
          if (v6)
          {
            if (objc_msgSend(v5[5], "conformsToProtocol:", &unk_1EE342188))
              v6 = (id)objc_msgSend(v6, "superview");
            objc_msgSend(v6, "frame");
            x = v11.origin.x;
            y = v11.origin.y;
            width = v11.size.width;
            height = v11.size.height;
            CGRectGetMaxX(v11);
            v12.origin.x = x;
            v12.origin.y = y;
            v12.size.width = width;
            v12.size.height = height;
            CGRectGetMaxY(v12);
          }
        }
      }
    }
    (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 528))(v4);
    (*(void (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1);
  }
}

void WebCore::ScrollView::contentsToView(WebCore::ScrollView *this, const WebCore::FloatPoint *a2)
{
  char *v3;
  id *v4;
  id v5;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect v10;
  CGRect v11;

  if (*((_BYTE *)this + 312) != 1)
  {
    v3 = (char *)this + 64;
    (*(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v3 + 704))(v3))
    {
      v4 = (id *)*((_QWORD *)this + 20);
      if (v4)
      {
        if (((*((uint64_t (**)(_QWORD))*v4 + 34))(*((_QWORD *)this + 20)) & 1) == 0)
        {
          v5 = v4[5];
          if (v5)
          {
            if (objc_msgSend(v4[5], "conformsToProtocol:", &unk_1EE342188))
              v5 = (id)objc_msgSend(v5, "superview");
            objc_msgSend(v5, "frame");
            x = v10.origin.x;
            y = v10.origin.y;
            width = v10.size.width;
            height = v10.size.height;
            CGRectGetMaxX(v10);
            v11.origin.x = x;
            v11.origin.y = y;
            v11.size.width = width;
            v11.size.height = height;
            CGRectGetMaxY(v11);
          }
        }
      }
    }
    (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 528))(v3);
    (*(void (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1);
  }
}

unint64_t WebCore::ScrollView::viewToContents(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::Widget *v7;
  float v8;
  int v10;

  v2 = a2;
  v3 = HIDWORD(a2);
  if (*(_BYTE *)(a1 + 312) != 1)
  {
    v5 = a1 + 64;
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 704))(v5))
    {
      v7 = *(WebCore::Widget **)(a1 + 160);
      if (!v7)
        goto LABEL_4;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 272))(*(_QWORD *)(a1 + 160)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v7);
        LODWORD(v7) = v10;
        goto LABEL_4;
      }
    }
    LODWORD(v7) = 0;
LABEL_4:
    v8 = (float)(*(int (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 528))(v5);
    v2 = v6 + v2 - (_DWORD)v7;
    LODWORD(v3) = HIDWORD(v6)
                + v3
                - (int)(float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 408))(a1, 1) + v8);
  }
  return v2 | ((unint64_t)v3 << 32);
}

float WebCore::ScrollView::viewToContents(uint64_t a1, float a2)
{
  uint64_t v4;
  int v5;
  WebCore::Widget *v6;
  int v8;

  if (*(_BYTE *)(a1 + 312) != 1)
  {
    v4 = a1 + 64;
    v5 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 704))(v4))
    {
      v6 = *(WebCore::Widget **)(a1 + 160);
      if (!v6)
        goto LABEL_4;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 272))(*(_QWORD *)(a1 + 160)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v6);
        LODWORD(v6) = v8;
        goto LABEL_4;
      }
    }
    LODWORD(v6) = 0;
LABEL_4:
    (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 528))(v4);
    a2 = a2 + (float)(v5 - (int)v6);
    (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 408))(a1, 1);
  }
  return a2;
}

unint64_t WebCore::ScrollView::contentsToContainingViewContents(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::Widget *v11;
  float v12;
  unint64_t v13;
  uint64_t v14;
  WebCore::Widget *v15;
  float v16;
  uint64_t v18;
  uint64_t v19;
  WebCore::Widget *v20;
  float v21;
  int v22;
  int v23;
  int v24;
  _QWORD v25[2];

  LODWORD(v4) = a2;
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    v13 = HIDWORD(a2);
    if (*(_BYTE *)(a1 + 312) == 1)
      return v4 | ((unint64_t)v13 << 32);
    v18 = a1 + 64;
    v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 704))(a1 + 64))
    {
      v20 = *(WebCore::Widget **)(a1 + 160);
      if (!v20)
        goto LABEL_15;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v20 + 272))(*(_QWORD *)(a1 + 160)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v20);
        LODWORD(v20) = v24;
        goto LABEL_15;
      }
    }
    LODWORD(v20) = 0;
LABEL_15:
    v21 = (float)(*(int (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 528))(a1 + 64);
    LODWORD(v4) = v4 - v19 + (_DWORD)v20;
    LODWORD(v13) = v13
                 - HIDWORD(v19)
                 + (int)(float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 408))(a1, 1) + v21);
    return v4 | ((unint64_t)v13 << 32);
  }
  v8 = HIDWORD(a2);
  if (*(_BYTE *)(a1 + 312) == 1)
    goto LABEL_7;
  v9 = a1 + 64;
  v10 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(a1 + 64) + 832))(a1 + 64, 0, 1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 704))(a1 + 64))
  {
    v11 = *(WebCore::Widget **)(a1 + 160);
    if (!v11)
      goto LABEL_6;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v11 + 272))(*(_QWORD *)(a1 + 160)) & 1) == 0)
    {
      WebCore::Widget::frameRect(v11);
      LODWORD(v11) = v22;
      goto LABEL_6;
    }
  }
  LODWORD(v11) = 0;
LABEL_6:
  v12 = (float)(*(int (**)(uint64_t))(*(_QWORD *)(a1 + 64) + 528))(a1 + 64);
  LODWORD(v4) = v4 - v10 + (_DWORD)v11;
  LODWORD(v8) = v8
              - HIDWORD(v10)
              + (int)(float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 408))(a1, 1) + v12);
LABEL_7:
  v25[0] = v4 | ((unint64_t)v8 << 32);
  v25[1] = a3;
  v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 184))(a1, v25);
  v13 = HIDWORD(v4);
  if (*(_BYTE *)(v7 + 312) != 1)
  {
    v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 + 64) + 832))(v7 + 64, 0, 1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 704))(v7 + 64))
    {
      v15 = *(WebCore::Widget **)(v7 + 160);
      if (!v15)
        goto LABEL_10;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v15 + 272))(*(_QWORD *)(v7 + 160)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v15);
        LODWORD(v15) = v23;
        goto LABEL_10;
      }
    }
    LODWORD(v15) = 0;
LABEL_10:
    v16 = (float)(*(int (**)(uint64_t))(*(_QWORD *)(v7 + 64) + 528))(v7 + 64);
    LODWORD(v4) = v14 + v4 - (_DWORD)v15;
    LODWORD(v13) = HIDWORD(v14)
                 + v13
                 - (int)(float)((*(float (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 408))(v7, 1) + v16);
  }
  return v4 | ((unint64_t)v13 << 32);
}

void WebCore::ScrollView::rootViewToContents(WebCore::ScrollView *this, const WebCore::FloatPoint *a2)
{
  __n128 v3;
  int v4;
  _DWORD v5[2];

  v3.n128_f32[0] = WebCore::Widget::convertFromRootView(this, a2);
  v5[0] = v3.n128_u32[0];
  v5[1] = v4;
  WebCore::ScrollView::viewToContents(this, (const WebCore::FloatPoint *)v5, v3);
}

unint64_t WebCore::ScrollView::rootViewToContents(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  void *v8;
  double v9;
  CGFloat v10;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v14;
  float MaxX;
  unsigned int v16;
  CGRect v17;
  CGRect v18;

  v3 = WebCore::Widget::convertFromRootView(this, (uint64_t)a2);
  if (*((_BYTE *)this + 312) != 1)
  {
    v4 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    if ((*(unsigned int (**)(char *))(*((_QWORD *)this + 8) + 704))((char *)this + 64))
    {
      v5 = *((_QWORD *)this + 20);
      if (!v5)
        goto LABEL_4;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
      {
        v8 = *(void **)(v5 + 40);
        if (v8)
        {
          if (objc_msgSend(*(id *)(v5 + 40), "conformsToProtocol:", &unk_1EE342188))
            v8 = (void *)objc_msgSend(v8, "superview");
          objc_msgSend(v8, "frame");
          v10 = v9;
          y = v17.origin.y;
          width = v17.size.width;
          height = v17.size.height;
          *(float *)&v9 = v9;
          v14 = vcvtms_s32_f32(*(float *)&v9);
          v17.origin.x = v10;
          MaxX = CGRectGetMaxX(v17);
          v16 = vcvtps_s32_f32(MaxX);
          v18.origin.x = v10;
          v18.origin.y = y;
          v18.size.width = width;
          v18.size.height = height;
          CGRectGetMaxY(v18);
          LODWORD(v5) = v16 - v14;
        }
        else
        {
          v5 = *(_QWORD *)(v5 + 56);
        }
        goto LABEL_4;
      }
    }
    LODWORD(v5) = 0;
LABEL_4:
    v6 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))((char *)this + 64);
    return (v4 + v3 - v5) | ((unint64_t)(HIDWORD(v4)
                                                                          + HIDWORD(v3)
                                                                          - (int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1)+ v6)) << 32);
  }
  return v3;
}

uint64_t WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  unint64_t v8;
  void *v10;
  double v11;
  CGFloat v12;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v16;
  float MaxX;
  unsigned int v18;
  unint64_t v19;
  CGRect v20;
  CGRect v21;

  if (*((_BYTE *)this + 312) == 1)
  {
    v8 = *(_QWORD *)a2;
    goto LABEL_5;
  }
  v4 = (char *)this + 64;
  v5 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v4 + 704))((char *)this + 64))
  {
    v6 = *((_QWORD *)this + 20);
    if (!v6)
      goto LABEL_4;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
    {
      v10 = *(void **)(v6 + 40);
      if (v10)
      {
        if (objc_msgSend(*(id *)(v6 + 40), "conformsToProtocol:", &unk_1EE342188))
          v10 = (void *)objc_msgSend(v10, "superview");
        objc_msgSend(v10, "frame");
        v12 = v11;
        y = v20.origin.y;
        width = v20.size.width;
        height = v20.size.height;
        *(float *)&v11 = v11;
        v16 = vcvtms_s32_f32(*(float *)&v11);
        v20.origin.x = v12;
        MaxX = CGRectGetMaxX(v20);
        v18 = vcvtps_s32_f32(MaxX);
        v21.origin.x = v12;
        v21.origin.y = y;
        v21.size.width = width;
        v21.size.height = height;
        CGRectGetMaxY(v21);
        LODWORD(v6) = v18 - v16;
      }
      else
      {
        v6 = *(_QWORD *)(v6 + 56);
      }
      goto LABEL_4;
    }
  }
  LODWORD(v6) = 0;
LABEL_4:
  v7 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))((char *)this + 64);
  v8 = (*(_DWORD *)a2 + v6 - v5) | ((unint64_t)((int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1)+ v7)- HIDWORD(v5)+ *((_DWORD *)a2 + 1)) << 32);
LABEL_5:
  v19 = v8;
  return WebCore::Widget::convertToRootView(this, (uint64_t)&v19);
}

float WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this, const WebCore::FloatPoint *a2)
{
  int v3;
  int v4;
  _DWORD v6[2];

  WebCore::ScrollView::contentsToView(this, a2);
  v6[0] = v3;
  v6[1] = v4;
  return WebCore::Widget::convertToRootView(this, (const WebCore::FloatPoint *)v6);
}

float WebCore::ScrollView::rootViewToContents(WebCore::Widget **this, const WebCore::FloatRect *a2)
{
  float v3;
  int v4;
  WebCore::Widget *v5;
  int v7;

  v3 = WebCore::Widget::convertFromRootView((WebCore::Widget *)this, a2);
  if (*((_BYTE *)this + 312) != 1)
  {
    v4 = (*((uint64_t (**)(char *, _QWORD, uint64_t))this[8] + 104))((char *)this + 64, 0, 1);
    if ((*((unsigned int (**)(char *))this[8] + 88))((char *)this + 64))
    {
      v5 = this[20];
      if (!v5)
        goto LABEL_4;
      if (((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v5 + 272))(this[20]) & 1) == 0)
      {
        WebCore::Widget::frameRect(v5);
        LODWORD(v5) = v7;
        goto LABEL_4;
      }
    }
    LODWORD(v5) = 0;
LABEL_4:
    (*((uint64_t (**)(char *))this[8] + 66))((char *)this + 64);
    v3 = v3 + (float)(v4 - (int)v5);
    (*((float (**)(WebCore::Widget **, uint64_t))*this + 51))(this, 1);
  }
  return v3;
}

void WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this, float32x2_t *a2)
{
  float32x2_t v3;
  float32x2_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  int32x2_t v10;
  void *v11;
  double v12;
  CGFloat v13;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v17;
  float MaxX;
  unsigned int v19;
  _QWORD v20[2];
  CGRect v21;
  CGRect v22;

  v4 = *a2;
  v3 = a2[1];
  if (*((_BYTE *)this + 312) != 1)
  {
    v5 = (char *)this + 64;
    v6 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v5 + 704))((char *)this + 64))
    {
      v7 = *((_QWORD *)this + 20);
      if (!v7)
        goto LABEL_4;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
      {
        v11 = *(void **)(v7 + 40);
        if (v11)
        {
          if (objc_msgSend(*(id *)(v7 + 40), "conformsToProtocol:", &unk_1EE342188))
            v11 = (void *)objc_msgSend(v11, "superview");
          objc_msgSend(v11, "frame");
          v13 = v12;
          y = v21.origin.y;
          width = v21.size.width;
          height = v21.size.height;
          *(float *)&v12 = v12;
          v17 = vcvtms_s32_f32(*(float *)&v12);
          v21.origin.x = v13;
          MaxX = CGRectGetMaxX(v21);
          v19 = vcvtps_s32_f32(MaxX);
          v22.origin.x = v13;
          v22.origin.y = y;
          v22.size.width = width;
          v22.size.height = height;
          CGRectGetMaxY(v22);
          LODWORD(v7) = v19 - v17;
        }
        else
        {
          v7 = *(_QWORD *)(v7 + 56);
        }
        goto LABEL_4;
      }
    }
    LODWORD(v7) = 0;
LABEL_4:
    v8 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))((char *)this + 64);
    v9 = (int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1) + v8)
       - HIDWORD(v6);
    v10.i32[0] = v7 - v6;
    v10.i32[1] = v9;
    v4 = vadd_f32(v4, vcvt_f32_s32(v10));
  }
  v20[0] = v4;
  v20[1] = v3;
  WebCore::Widget::convertToRootView(this, (const WebCore::FloatRect *)v20);
}

void WebCore::ScrollView::rootViewToContents(WebCore::ScrollView *this@<X0>, const WebCore::FloatQuad *a2@<X1>, _DWORD *a3@<X8>)
{
  __int128 v5;
  const WebCore::FloatPoint *v6;
  __n128 v7;
  int v8;
  int v9;
  int v10;
  __n128 v11;
  int v12;
  int v13;
  int v14;
  __n128 v15;
  int v16;
  int v17;
  int v18;
  __n128 v19;
  int v20;
  int v21;
  int v22;
  unsigned __int32 v23;
  int v24;

  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *((_OWORD *)a3 + 1) = v5;
  v6 = (const WebCore::FloatPoint *)(a3 + 4);
  v7.n128_f32[0] = WebCore::Widget::convertFromRootView(this, (const WebCore::FloatPoint *)a3);
  v23 = v7.n128_u32[0];
  v24 = v8;
  WebCore::ScrollView::viewToContents(this, (const WebCore::FloatPoint *)&v23, v7);
  *a3 = v9;
  a3[1] = v10;
  v11.n128_f32[0] = WebCore::Widget::convertFromRootView(this, (const WebCore::FloatPoint *)(a3 + 2));
  v23 = v11.n128_u32[0];
  v24 = v12;
  WebCore::ScrollView::viewToContents(this, (const WebCore::FloatPoint *)&v23, v11);
  a3[2] = v13;
  a3[3] = v14;
  v15.n128_f32[0] = WebCore::Widget::convertFromRootView(this, v6);
  v23 = v15.n128_u32[0];
  v24 = v16;
  WebCore::ScrollView::viewToContents(this, (const WebCore::FloatPoint *)&v23, v15);
  a3[4] = v17;
  a3[5] = v18;
  v19.n128_f32[0] = WebCore::Widget::convertFromRootView(this, (const WebCore::FloatPoint *)(a3 + 6));
  v23 = v19.n128_u32[0];
  v24 = v20;
  WebCore::ScrollView::viewToContents(this, (const WebCore::FloatPoint *)&v23, v19);
  a3[6] = v21;
  a3[7] = v22;
}

void WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this@<X0>, const WebCore::FloatQuad *a2@<X1>, _DWORD *a3@<X8>)
{
  __int128 v5;
  const WebCore::FloatPoint *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *((_OWORD *)a3 + 1) = v5;
  v6 = (const WebCore::FloatPoint *)(a3 + 4);
  WebCore::ScrollView::contentsToView(this, (const WebCore::FloatPoint *)a3);
  v19 = v7;
  v20 = v8;
  *(float *)a3 = WebCore::Widget::convertToRootView(this, (const WebCore::FloatPoint *)&v19);
  a3[1] = v9;
  WebCore::ScrollView::contentsToView(this, (const WebCore::FloatPoint *)(a3 + 2));
  v19 = v10;
  v20 = v11;
  *((float *)a3 + 2) = WebCore::Widget::convertToRootView(this, (const WebCore::FloatPoint *)&v19);
  a3[3] = v12;
  WebCore::ScrollView::contentsToView(this, v6);
  v19 = v13;
  v20 = v14;
  *((float *)a3 + 4) = WebCore::Widget::convertToRootView(this, (const WebCore::FloatPoint *)&v19);
  a3[5] = v15;
  WebCore::ScrollView::contentsToView(this, (const WebCore::FloatPoint *)(a3 + 6));
  v19 = v16;
  v20 = v17;
  *((float *)a3 + 6) = WebCore::Widget::convertToRootView(this, (const WebCore::FloatPoint *)&v19);
  a3[7] = v18;
}

unint64_t WebCore::ScrollView::rootViewToTotalContents(WebCore::ScrollView *this, const WebCore::IntPoint *a2)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *((unsigned __int8 *)this + 312);
  v4 = WebCore::Widget::convertFromRootView(this, (uint64_t)a2);
  v5 = v4;
  if (v3 != 1)
  {
    v6 = HIDWORD(v4);
    v7 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    return (v7 + v5) | ((unint64_t)(HIDWORD(v7)
                                                                     + v6
                                                                     - (int)(*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1)) << 32);
  }
  return v5;
}

uint64_t WebCore::ScrollView::contentsToRootView(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  WebCore::Widget *v8;
  float v9;
  int v11;
  _QWORD v12[2];

  v4 = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1);
  v5 = HIDWORD(*(_QWORD *)a2);
  if (*((_BYTE *)this + 312) != 1)
  {
    v6 = (char *)this + 64;
    v7 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v6 + 704))((char *)this + 64))
    {
      v8 = (WebCore::Widget *)*((_QWORD *)this + 20);
      if (!v8)
        goto LABEL_4;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v8);
        LODWORD(v8) = v11;
        goto LABEL_4;
      }
    }
    LODWORD(v8) = 0;
LABEL_4:
    v9 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))((char *)this + 64);
    LODWORD(v4) = v4 - v7 + (_DWORD)v8;
    LODWORD(v5) = v5
                - HIDWORD(v7)
                + (int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1)+ v9);
  }
  v12[0] = v4 | ((unint64_t)v5 << 32);
  v12[1] = v3;
  return WebCore::Widget::convertToRootView(this, (const WebCore::IntRect *)v12);
}

unint64_t WebCore::ScrollView::windowToContents(WebCore::ScrollView *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  uint64_t v5;

  v5 = WebCore::Widget::convertFromContainingWindow(this, a2, a3);
  return WebCore::ScrollView::viewToContents(this, (const WebCore::IntPoint *)&v5);
}

uint64_t WebCore::ScrollView::contentsToWindow(WebCore::ScrollView *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  unint64_t v9;
  void *v11;
  double v12;
  CGFloat v13;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v17;
  float MaxX;
  unsigned int v19;
  unint64_t v20;
  CGRect v21;
  CGRect v22;

  if (*((_BYTE *)this + 312) == 1)
  {
    v9 = *(_QWORD *)a2;
    goto LABEL_5;
  }
  v5 = (char *)this + 64;
  v6 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
  if ((*(unsigned int (**)(char *))(*(_QWORD *)v5 + 704))((char *)this + 64))
  {
    v7 = *((_QWORD *)this + 20);
    if (!v7)
      goto LABEL_4;
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
    {
      v11 = *(void **)(v7 + 40);
      if (v11)
      {
        if (objc_msgSend(*(id *)(v7 + 40), "conformsToProtocol:", &unk_1EE342188))
          v11 = (void *)objc_msgSend(v11, "superview");
        objc_msgSend(v11, "frame");
        v13 = v12;
        y = v21.origin.y;
        width = v21.size.width;
        height = v21.size.height;
        *(float *)&v12 = v12;
        v17 = vcvtms_s32_f32(*(float *)&v12);
        v21.origin.x = v13;
        MaxX = CGRectGetMaxX(v21);
        v19 = vcvtps_s32_f32(MaxX);
        v22.origin.x = v13;
        v22.origin.y = y;
        v22.size.width = width;
        v22.size.height = height;
        CGRectGetMaxY(v22);
        LODWORD(v7) = v19 - v17;
      }
      else
      {
        v7 = *(_QWORD *)(v7 + 56);
      }
      goto LABEL_4;
    }
  }
  LODWORD(v7) = 0;
LABEL_4:
  v8 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))((char *)this + 64);
  v9 = (*(_DWORD *)a2 + v7 - v6) | ((unint64_t)((int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1)+ v8)- HIDWORD(v6)+ *((_DWORD *)a2 + 1)) << 32);
LABEL_5:
  v20 = v9;
  return WebCore::Widget::convertToContainingWindow(this, (const WebCore::IntPoint *)&v20, a3);
}

unint64_t WebCore::ScrollView::windowToContents(WebCore::Widget **this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WebCore::Widget *v7;
  float v8;
  int v10;

  v4 = WebCore::Widget::convertFromContainingWindow((WebCore::Widget *)this, a2, a3);
  v5 = HIDWORD(v4);
  if (*((_BYTE *)this + 312) != 1)
  {
    v6 = (*((uint64_t (**)(char *, _QWORD, uint64_t))this[8] + 104))((char *)this + 64, 0, 1);
    if ((*((unsigned int (**)(char *))this[8] + 88))((char *)this + 64))
    {
      v7 = this[20];
      if (!v7)
        goto LABEL_4;
      if (((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v7 + 272))(this[20]) & 1) == 0)
      {
        WebCore::Widget::frameRect(v7);
        LODWORD(v7) = v10;
        goto LABEL_4;
      }
    }
    LODWORD(v7) = 0;
LABEL_4:
    v8 = (float)(*((int (**)(char *))this[8] + 66))((char *)this + 64);
    LODWORD(v4) = v6 + v4 - (_DWORD)v7;
    LODWORD(v5) = HIDWORD(v6)
                + v5
                - (int)(float)((*((float (**)(WebCore::Widget **, uint64_t))*this + 51))(this, 1) + v8);
  }
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t WebCore::ScrollView::contentsToWindow(WebCore::ScrollView *this, const WebCore::IntRect *a2, const WebCore::IntRect *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  WebCore::Widget *v9;
  float v10;
  int v12;
  _QWORD v13[2];

  v5 = *(_QWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  v6 = HIDWORD(*(_QWORD *)a2);
  if (*((_BYTE *)this + 312) != 1)
  {
    v7 = (char *)this + 64;
    v8 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 8) + 832))((char *)this + 64, 0, 1);
    if ((*(unsigned int (**)(char *))(*(_QWORD *)v7 + 704))((char *)this + 64))
    {
      v9 = (WebCore::Widget *)*((_QWORD *)this + 20);
      if (!v9)
        goto LABEL_4;
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v9 + 272))(*((_QWORD *)this + 20)) & 1) == 0)
      {
        WebCore::Widget::frameRect(v9);
        LODWORD(v9) = v12;
        goto LABEL_4;
      }
    }
    LODWORD(v9) = 0;
LABEL_4:
    v10 = (float)(*(int (**)(char *))(*((_QWORD *)this + 8) + 528))((char *)this + 64);
    LODWORD(v5) = v5 - v8 + (_DWORD)v9;
    LODWORD(v6) = v6
                - HIDWORD(v8)
                + (int)(float)((*(float (**)(WebCore::ScrollView *, uint64_t))(*(_QWORD *)this + 408))(this, 1)+ v10);
  }
  v13[0] = v5 | ((unint64_t)v6 << 32);
  v13[1] = v4;
  return WebCore::Widget::convertToContainingWindow(this, (const WebCore::IntRect *)v13, a3);
}

unint64_t WebCore::ScrollView::contentsToScreen(id *this, const WebCore::IntRect *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v4 = (*((uint64_t (**)(id *))*this + 39))(this);
  if (this[5])
    return WebCore::ScrollView::platformContentsToScreen(this, a2);
  v6 = v4;
  if (!v4)
    return 0;
  v8[0] = WebCore::ScrollView::contentsToRootView((WebCore::ScrollView *)this, a2);
  v8[1] = v7;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 96))(v6, v8);
}

unint64_t WebCore::ScrollView::screenToContents(id *this, const WebCore::IntPoint *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v4 = (*((uint64_t (**)(id *))*this + 39))(this);
  if (this[5])
  {
    v4 = WebCore::ScrollView::platformScreenToContents(this, a2);
  }
  else
  {
    if (!v4)
    {
      v5 = 0;
      return v4 | v5;
    }
    v7 = (*(uint64_t (**)(unint64_t, const WebCore::IntPoint *))(*(_QWORD *)v4 + 88))(v4, a2);
    v4 = WebCore::ScrollView::rootViewToContents((WebCore::ScrollView *)this, (const WebCore::IntPoint *)&v7);
  }
  v5 = v4 & 0xFFFFFFFF00000000;
  return v4 | v5;
}

WebCore::Scrollbar *WebCore::ScrollView::scrollbarAtPoint(WebCore::ScrollView *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  WebCore::Scrollbar *result;
  unint64_t v6;
  int v7;
  unint64_t v8;
  WebCore::Scrollbar *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  char *v20;
  WebCore::Scrollbar *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  double v28;
  CGFloat v29;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  float MaxX;
  unsigned int v34;
  float MaxY;
  double v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  float v41;
  unsigned int v42;
  float v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  if (*((_QWORD *)this + 5))
    return 0;
  v6 = WebCore::Widget::convertFromContainingWindow(this, a2, a3);
  v7 = v6;
  v8 = HIDWORD(v6);
  v10 = (char *)this + 152;
  v9 = (WebCore::Scrollbar *)*((_QWORD *)this + 19);
  if (v9 && WebCore::Scrollbar::shouldParticipateInHitTesting(v9))
  {
    v11 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(*(_QWORD *)v10 + 40);
    if (v12)
    {
      if (objc_msgSend((id)v12, "conformsToProtocol:", &unk_1EE342188))
        v12 = objc_msgSend((id)v12, "superview");
      objc_msgSend((id)v12, "frame");
      v29 = v28;
      y = v44.origin.y;
      width = v44.size.width;
      height = v44.size.height;
      *(float *)&v28 = v28;
      LODWORD(v12) = vcvtms_s32_f32(*(float *)&v28);
      *(float *)&v28 = v44.origin.y;
      LODWORD(v3) = vcvtms_s32_f32(*(float *)&v28);
      v44.origin.x = v29;
      MaxX = CGRectGetMaxX(v44);
      v34 = vcvtps_s32_f32(MaxX);
      v45.origin.x = v29;
      v45.origin.y = y;
      v45.size.width = width;
      v45.size.height = height;
      MaxY = CGRectGetMaxY(v45);
      v13 = v12 | (v3 << 32);
      v14 = (v34 - v12) | ((unint64_t)(vcvtps_s32_f32(MaxY) - v3) << 32);
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 48);
      v14 = *(_QWORD *)(v11 + 56);
    }
    v15 = (int)v13 > v7 || (int)v14 + (int)v13 <= v7;
    v16 = HIDWORD(v13);
    v17 = !v15 && (int)v16 <= (int)v8;
    v18 = HIDWORD(v14) + v16;
    if (v17 && v18 > (int)v8)
      return *(WebCore::Scrollbar **)v10;
  }
  v21 = (WebCore::Scrollbar *)*((_QWORD *)this + 20);
  v20 = (char *)this + 160;
  result = v21;
  if (v21)
  {
    if (!WebCore::Scrollbar::shouldParticipateInHitTesting(result))
      return 0;
    v22 = *(_QWORD *)v20;
    v23 = *(_QWORD *)(*(_QWORD *)v20 + 40);
    if (v23)
    {
      if (objc_msgSend(*(id *)(*(_QWORD *)v20 + 40), "conformsToProtocol:", &unk_1EE342188))
        v23 = objc_msgSend((id)v23, "superview");
      objc_msgSend((id)v23, "frame");
      v37 = v36;
      v38 = v46.origin.y;
      v39 = v46.size.width;
      v40 = v46.size.height;
      *(float *)&v36 = v36;
      LODWORD(v23) = vcvtms_s32_f32(*(float *)&v36);
      *(float *)&v36 = v46.origin.y;
      LODWORD(v22) = vcvtms_s32_f32(*(float *)&v36);
      v46.origin.x = v37;
      v41 = CGRectGetMaxX(v46);
      v42 = vcvtps_s32_f32(v41);
      v47.origin.x = v37;
      v47.origin.y = v38;
      v47.size.width = v39;
      v47.size.height = v40;
      v43 = CGRectGetMaxY(v47);
      v24 = v23 | (v22 << 32);
      v25 = (v42 - v23) | ((unint64_t)(vcvtps_s32_f32(v43) - v22) << 32);
    }
    else
    {
      v24 = *(_QWORD *)(v22 + 48);
      v25 = *(_QWORD *)(v22 + 56);
    }
    if ((int)v24 > v7 || (int)v25 + (int)v24 <= v7)
      return 0;
    v27 = HIDWORD(v24);
    if ((int)v27 > (int)v8)
      return 0;
    v10 = v20;
    if (HIDWORD(v25) + (int)v27 <= (int)v8)
      return 0;
    return *(WebCore::Scrollbar **)v10;
  }
  return result;
}

uint64_t WebCore::Scrollbar::shouldParticipateInHitTesting(WebCore::Scrollbar *this)
{
  _QWORD *v2;
  uint64_t v3;
  void *v5;
  WTF *v6;
  uint64_t v7;
  _QWORD *v8;
  WTF *v9;

  if (!(*(unsigned int (**)(WebCore::Scrollbar *))(*(_QWORD *)this + 272))(this))
    return 1;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = v2[3];
  if (!v3)
  {
    if ((*(unsigned int (**)(_QWORD))(*v2 + 688))(*((_QWORD *)this + 8)))
    {
      v8 = v2;
      std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v9, (uint64_t)v2, (uint64_t *)&v8);
      v6 = v9;
      v9 = 0;
      v7 = v2[3];
      v2[3] = v6;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v9, v5);
    }
    else
    {
      (*(void (**)(_QWORD *))(*v2 + 304))(v2);
    }
    v3 = v2[3];
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E2F3CLL);
    }
  }
  return (*(uint64_t (**)(uint64_t, WebCore::Scrollbar *))(*(_QWORD *)v3 + 248))(v3, this);
}

unint64_t WebCore::ScrollView::convertChildToSelf(WebCore::ScrollView *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  double v11;
  double v12;
  double v13;
  double v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  float v19;
  float v20;
  CGFloat v21;
  void *v22;
  CGRect v23;

  v4 = a3;
  v5 = a2;
  v6 = HIDWORD(a3);
  if (*((_QWORD *)a1 + 19) != a2 && *((_QWORD *)a1 + 20) != a2)
  {
    v7 = WebCore::ScrollView::documentScrollPositionRelativeToViewOrigin(a1);
    v4 -= v7;
    v6 -= HIDWORD(v7);
  }
  v8 = *(void **)(v5 + 40);
  if (v8)
  {
    v22 = *(void **)(v5 + 40);
    if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v22, "superview"), "frame");
    else
      objc_msgSend(v22, "frame");
    v15 = v11;
    v16 = v12;
    v17 = v13;
    v18 = v14;
    v19 = v11;
    LODWORD(v5) = vcvtms_s32_f32(v19);
    v20 = v12;
    LODWORD(v3) = vcvtms_s32_f32(v20);
    v21 = v15;
    CGRectGetMaxX(*(CGRect *)(&v12 - 1));
    v23.origin.x = v15;
    v23.origin.y = v16;
    v23.size.width = v17;
    v23.size.height = v18;
    CGRectGetMaxY(v23);
    v9 = v5 | (v3 << 32);
  }
  else
  {
    v9 = *(_QWORD *)(v5 + 48);
  }
  return (v9 + (v6 << 32)) & 0xFFFFFFFF00000000 | (v9 + v4);
}

float WebCore::ScrollView::convertChildToSelf(WebCore::ScrollView *a1, uint64_t a2, float a3)
{
  float v3;
  void *v5;
  uint64_t v6;
  double v8;
  double v9;
  double v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  float v16;
  unsigned int v17;
  CGFloat v18;
  void *v19;
  CGRect v20;

  v3 = a3;
  if (*((_QWORD *)a1 + 19) != a2 && *((_QWORD *)a1 + 20) != a2)
    v3 = a3 - (float)(int)WebCore::ScrollView::documentScrollPositionRelativeToViewOrigin(a1);
  v5 = *(void **)(a2 + 40);
  if (v5)
  {
    v19 = *(void **)(a2 + 40);
    if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v19, "superview"), "frame");
    else
      objc_msgSend(v19, "frame");
    v12 = v8;
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v8;
    v17 = vcvtms_s32_f32(v16);
    v18 = v12;
    CGRectGetMaxX(*(CGRect *)(&v9 - 1));
    v20.origin.x = v12;
    v20.origin.y = v13;
    v20.size.width = v14;
    v20.size.height = v15;
    CGRectGetMaxY(v20);
    LODWORD(v6) = v17;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 48);
  }
  return v3 + (float)(int)v6;
}

unint64_t WebCore::ScrollView::convertSelfToChild(WebCore::ScrollView *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  double v11;
  double v12;
  double v13;
  double v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  float v19;
  float v20;
  CGFloat v21;
  void *v22;
  CGRect v23;

  v4 = a3;
  v5 = a2;
  v6 = HIDWORD(a3);
  if (*((_QWORD *)a1 + 19) != a2 && *((_QWORD *)a1 + 20) != a2)
  {
    v7 = WebCore::ScrollView::documentScrollPositionRelativeToViewOrigin(a1);
    v4 += v7;
    v6 += HIDWORD(v7);
  }
  v8 = *(void **)(v5 + 40);
  if (v8)
  {
    v22 = *(void **)(v5 + 40);
    if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v22, "superview"), "frame");
    else
      objc_msgSend(v22, "frame");
    v15 = v11;
    v16 = v12;
    v17 = v13;
    v18 = v14;
    v19 = v11;
    LODWORD(v5) = vcvtms_s32_f32(v19);
    v20 = v12;
    LODWORD(v3) = vcvtms_s32_f32(v20);
    v21 = v15;
    CGRectGetMaxX(*(CGRect *)(&v12 - 1));
    v23.origin.x = v15;
    v23.origin.y = v16;
    v23.size.width = v17;
    v23.size.height = v18;
    CGRectGetMaxY(v23);
    v9 = v5 | (v3 << 32);
  }
  else
  {
    v9 = *(_QWORD *)(v5 + 48);
  }
  return (v4 - v9) | ((unint64_t)(v6 - HIDWORD(v9)) << 32);
}

uint64_t WebCore::ScrollView::setScrollbarOverlayStyle(uint64_t a1, char a2)
{
  uint64_t v2;
  WebCore::ScrollableArea *v3;
  WebCore::ScrollbarTheme *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  WebCore::ScrollbarTheme *v9;
  uint64_t *v10;
  char *v11;

  v3 = (WebCore::ScrollableArea *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 64);
  *(_BYTE *)(a1 + 107) = a2;
  v4 = (WebCore::ScrollbarTheme *)(*(uint64_t (**)(uint64_t))(v2 + 392))(a1 + 64);
  if (v4)
  {
    v9 = v4;
    v10 = WebCore::ScrollbarTheme::theme(v4);
    (*(void (**)(uint64_t *, WebCore::ScrollbarTheme *))(*v10 + 80))(v10, v9);
  }
  v5 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)v3 + 400))(v3);
  if (v5)
  {
    v7 = v5;
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v8 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_8;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_13;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v8 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
    {
LABEL_8:
      (*(void (**)(uint64_t *, uint64_t))(*v8 + 80))(v8, v7);
      return WebCore::ScrollableArea::invalidateScrollbars(v3);
    }
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_13:
    *v11 = 1;
    goto LABEL_8;
  }
  return WebCore::ScrollableArea::invalidateScrollbars(v3);
}

uint64_t WebCore::ScrollableArea::setScrollbarOverlayStyle(WebCore::ScrollableArea *a1, char a2)
{
  WebCore::ScrollbarTheme *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  WebCore::ScrollbarTheme *v8;
  uint64_t *v9;
  char *v10;

  *((_BYTE *)a1 + 43) = a2;
  v3 = (WebCore::ScrollbarTheme *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)a1 + 392))(a1);
  if (v3)
  {
    v8 = v3;
    v9 = WebCore::ScrollbarTheme::theme(v3);
    (*(void (**)(uint64_t *, WebCore::ScrollbarTheme *))(*v9 + 80))(v9, v8);
  }
  v4 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)a1 + 400))(a1);
  if (v4)
  {
    v6 = v4;
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v7 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_8;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_13;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v7 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
    {
LABEL_8:
      (*(void (**)(uint64_t *, uint64_t))(*v7 + 80))(v7, v6);
      return WebCore::ScrollableArea::invalidateScrollbars(a1);
    }
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_13:
    *v10 = 1;
    goto LABEL_8;
  }
  return WebCore::ScrollableArea::invalidateScrollbars(a1);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::setScrollbarOverlayStyle(WebCore::ScrollableArea *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  char *v11;

  *((_BYTE *)a1 + 43) = a2;
  v3 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)a1 + 392))(a1);
  if (v3)
  {
    v8 = v3;
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v9 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_11;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_21;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v9 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
    {
LABEL_11:
      (*(void (**)(uint64_t *, uint64_t))(*v9 + 80))(v9, v8);
      goto LABEL_2;
    }
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_21:
    *v11 = 1;
    goto LABEL_11;
  }
LABEL_2:
  v4 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)a1 + 400))(a1);
  if (v4)
  {
    v6 = v4;
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        v7 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_7;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_16;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    v7 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
    {
LABEL_7:
      (*(void (**)(uint64_t *, uint64_t))(*v7 + 80))(v7, v6);
      return WebCore::ScrollableArea::invalidateScrollbars(a1);
    }
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_16:
    *v10 = 1;
    goto LABEL_7;
  }
  return WebCore::ScrollableArea::invalidateScrollbars(a1);
}

uint64_t WebCore::ScrollView::clipRectChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(this + 144);
  if (v1)
  {
    v2 = *(unsigned int *)(v1 - 4);
    v3 = (_QWORD *)(v1 + 8 * v2);
    if (*(_DWORD *)(v1 - 12))
    {
      v4 = *(_QWORD **)(this + 144);
      if ((_DWORD)v2)
      {
        v5 = 8 * v2;
        v4 = *(_QWORD **)(this + 144);
        while ((unint64_t)(*v4 + 1) <= 1)
        {
          ++v4;
          v5 -= 8;
          if (!v5)
          {
            v4 = v3;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v4 = (_QWORD *)(v1 + 8 * v2);
  }
  else
  {
    v4 = 0;
    v2 = 0;
  }
  v3 = (_QWORD *)(v1 + 8 * v2);
  if (v1)
  {
LABEL_8:
    v6 = (_QWORD *)(v1 + 8 * *(unsigned int *)(v1 - 4));
    goto LABEL_12;
  }
  v6 = 0;
LABEL_12:
  while (v4 != v6)
  {
    v7 = v4 + 1;
    this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 144))(*v4);
    v4 = v3;
    if (v7 != v3)
    {
      v4 = v7;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        if (++v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::ScrollView::repaintContentRectangle(uint64_t this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  signed int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  const WebCore::IntRect *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  __int128 v18;

  v2 = this;
  v18 = *(_OWORD *)a2;
  if (*(_BYTE *)(this + 322))
  {
    v11 = DWORD2(v18);
    v12 = HIDWORD(v18);
  }
  else
  {
    this = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(this + 64) + 832))(this + 64, 0, 1);
    if ((int)v18 <= (int)this)
      v5 = this;
    else
      v5 = v18;
    v6 = DWORD2(v18) + v18;
    if (SDWORD1(v18) <= SHIDWORD(this))
      v7 = HIDWORD(this);
    else
      v7 = DWORD1(v18);
    if (v3 + (int)this < v6)
      v6 = v3 + this;
    v8 = HIDWORD(v18) + DWORD1(v18);
    if (v4 + HIDWORD(this) < HIDWORD(v18) + DWORD1(v18))
      v8 = v4 + HIDWORD(this);
    v9 = v5 < v6 && v7 < v8;
    if (v9)
    {
      v10 = v7;
    }
    else
    {
      v5 = 0;
      v10 = 0;
    }
    if (!v9)
    {
      v6 = 0;
      v8 = 0;
    }
    *(_QWORD *)&v18 = __PAIR64__(v10, v5);
    v11 = v6 - v5;
    v12 = v8 - v10;
    *((_QWORD *)&v18 + 1) = __PAIR64__(v12, v11);
  }
  if (v11 >= 1 && v12 >= 1)
  {
    if (*(_QWORD *)(v2 + 40))
    {
      return WebCore::ScrollView::platformRepaintContentRectangle((id *)v2, (const WebCore::IntRect *)&v18);
    }
    else
    {
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 312))(v2);
      if (this)
      {
        v15 = this;
        v17[0] = WebCore::ScrollView::contentsToWindow((WebCore::ScrollView *)v2, (const WebCore::IntRect *)&v18, v14);
        v17[1] = v16;
        return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v15 + 64))(v15, v17);
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::scrollCornerRect(WebCore::ScrollView *this)
{
  return WebCore::ScrollView::scrollCornerRect((WebCore::ScrollView *)((char *)this - 64));
}

BOOL WebCore::ScrollView::isScrollCornerVisible(WebCore::ScrollView *this)
{
  int v1;
  int v2;

  WebCore::ScrollView::scrollCornerRect(this);
  return v2 > 0 && v1 > 0;
}

BOOL `non-virtual thunk to'WebCore::ScrollView::isScrollCornerVisible(WebCore::ScrollView *this)
{
  int v1;
  int v2;

  WebCore::ScrollView::scrollCornerRect((WebCore::ScrollView *)((char *)this - 64));
  return v2 > 0 && v1 > 0;
}

uint64_t WebCore::ScrollView::scrollbarStyleChanged(WebCore::ScrollView *a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v5 = (_QWORD *)((char *)a1 + 64);
  result = (*(uint64_t (**)(_QWORD *, _QWORD))(*((_QWORD *)a1 + 8) + 272))((_QWORD *)a1 + 8, 0);
  if (a3)
  {
    v7 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*((_QWORD *)a1 + 8) + 832))(v5, 0, 1);
    WebCore::ScrollView::updateScrollbars((uint64_t)a1, (const WebCore::IntPoint *)&v7);
    return WebCore::ScrollView::positionScrollbarLayers(a1);
  }
  return result;
}

uint64_t WebCore::ScrollableArea::scrollbarStyleChanged(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 272))(a1, 0);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::scrollbarStyleChanged(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 272))(a1, 0);
  if (a3)
  {
    v6 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 832))(a1, 0, 1);
    WebCore::ScrollView::updateScrollbars(a1 - 64, (const WebCore::IntPoint *)&v6);
    return WebCore::ScrollView::positionScrollbarLayers((WebCore::ScrollView *)(a1 - 64));
  }
  return result;
}

uint64_t WebCore::ScrollView::paintScrollCorner(WebCore::ScrollView *this, WebCore::GraphicsContext *a2, const WebCore::IntRect *a3)
{
  uint64_t *v6;

  v6 = WebCore::ScrollbarTheme::theme(this);
  return (*(uint64_t (**)(uint64_t *, char *, WebCore::GraphicsContext *, const WebCore::IntRect *))(*v6 + 112))(v6, (char *)this + 64, a2, a3);
}

uint64_t WebCore::ScrollView::paintScrollbar(WebCore::ScrollView *this, WebCore::GraphicsContext *a2, WebCore::Scrollbar *a3, const WebCore::IntRect *a4)
{
  return (*(uint64_t (**)(WebCore::Scrollbar *, WebCore::GraphicsContext *, const WebCore::IntRect *, _QWORD, _QWORD))(*(_QWORD *)a3 + 24))(a3, a2, a4, 0, 0);
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::invalidateScrollCornerRect(WebCore::ScrollView *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(char *, const WebCore::IntRect *))(*((_QWORD *)this - 8) + 32))((char *)this - 64, a2);
}

uint64_t WebCore::ScrollView::paintScrollbars(WebCore::ScrollView *this, WebCore::GraphicsContext *a2, const WebCore::IntRect *a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  if (*((_QWORD *)this + 19) && !(*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 672))((char *)this + 64))
    (*(void (**)(WebCore::ScrollView *, WebCore::GraphicsContext *, _QWORD, const WebCore::IntRect *))(*(_QWORD *)this + 496))(this, a2, *((_QWORD *)this + 19), a3);
  if (*((_QWORD *)this + 20) && !(*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 680))((char *)this + 64))
    (*(void (**)(WebCore::ScrollView *, WebCore::GraphicsContext *, _QWORD, const WebCore::IntRect *))(*(_QWORD *)this + 496))(this, a2, *((_QWORD *)this + 20), a3);
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this + 8) + 824))((char *)this + 64);
  if (!result)
  {
    v8[0] = WebCore::ScrollView::scrollCornerRect(this);
    v8[1] = v7;
    return (*(uint64_t (**)(WebCore::ScrollView *, WebCore::GraphicsContext *, _QWORD *))(*(_QWORD *)this
                                                                                                  + 488))(this, a2, v8);
  }
  return result;
}

unint64_t WebCore::ScrollableArea::scrollOffsetFromPosition(uint64_t a1, uint64_t a2)
{
  return ((*(_QWORD *)(a1 + 32) & 0xFFFFFFFF00000000) + a2) & 0xFFFFFFFF00000000 | (*(_QWORD *)(a1 + 32)
                                                                                      + a2);
}

uint64_t WebCore::ScrollView::paintOverhangAreas(WebCore::ScrollView *this, WebCore::GraphicsContext *a2, const WebCore::IntRect *a3, const WebCore::IntRect *a4, const WebCore::IntRect *a5)
{
  uint64_t *v10;
  char *v12;

  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v10 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(uint64_t (**)(uint64_t *, WebCore::ScrollView *, WebCore::GraphicsContext *, const WebCore::IntRect *, const WebCore::IntRect *, const WebCore::IntRect *))(*v10 + 128))(v10, this, a2, a3, a4, a5);
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_9:
      *v12 = 1;
      return (*(uint64_t (**)(uint64_t *, WebCore::ScrollView *, WebCore::GraphicsContext *, const WebCore::IntRect *, const WebCore::IntRect *, const WebCore::IntRect *))(*v10 + 128))(v10, this, a2, a3, a4, a5);
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v10 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_9;
  }
  return (*(uint64_t (**)(uint64_t *, WebCore::ScrollView *, WebCore::GraphicsContext *, const WebCore::IntRect *, const WebCore::IntRect *, const WebCore::IntRect *))(*v10 + 128))(v10, this, a2, a3, a4, a5);
}

BOOL WebCore::ScrollView::isPointInScrollbarCorner(WebCore::ScrollView *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unint64_t v46;
  const WebCore::IntPoint *v48;
  double v49;
  CGFloat v50;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v54;
  float MaxX;
  unsigned int v56;
  int v57;
  const WebCore::IntPoint *v58;
  double v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  unsigned int v64;
  float v65;
  unsigned int v66;
  const WebCore::IntPoint *v67;
  CGFloat v68;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  unsigned int v73;
  float MaxY;
  int v75;
  const WebCore::IntPoint *v76;
  CGFloat v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  unsigned int v82;
  float v83;
  unint64_t v84;
  int v85;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat v89;
  CGFloat v90;
  int v91;
  int v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  int v98;
  int v99;
  int v100;
  CGFloat v101;
  CGFloat v102;
  CGFloat v103;
  CGFloat v104;
  CGFloat v105;
  unsigned int v106;
  float v107;
  int v108;
  int v109;
  int v110;
  int v111;
  double v112;
  CGFloat v113;
  CGFloat v114;
  CGFloat v115;
  CGFloat v116;
  int v117;
  int v118;
  int v119;
  int v120;
  double v121;
  CGFloat v122;
  CGFloat v123;
  CGFloat v124;
  CGFloat v125;
  unsigned int v126;
  float v127;
  unsigned int v128;
  unint64_t v129;
  int v130;
  double v131;
  CGFloat v132;
  CGFloat v133;
  CGFloat v134;
  CGFloat v135;
  int v136;
  int v137;
  int v138;
  double v139;
  CGFloat v140;
  CGFloat v141;
  CGFloat v142;
  CGFloat v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  double v149;
  CGFloat v150;
  CGFloat v151;
  CGFloat v152;
  CGFloat v153;
  unsigned int v154;
  float v155;
  unsigned int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  CGFloat v161;
  CGFloat v162;
  CGFloat v163;
  CGFloat v164;
  CGFloat v165;
  int v166;
  int v167;
  int v168;
  int v169;
  CGFloat v170;
  CGFloat v171;
  CGFloat v172;
  CGFloat v173;
  CGFloat v174;
  unsigned int v175;
  float v176;
  CGRect v177;
  CGRect v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;
  CGRect v184;
  CGRect v185;
  CGRect v186;
  CGRect v187;
  CGRect v188;
  CGRect v189;
  CGRect v190;
  CGRect v191;
  CGRect v192;
  CGRect v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;
  CGRect v197;
  CGRect v198;
  CGRect v199;
  CGRect v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;
  CGRect v204;

  if (!*((_QWORD *)this + 19))
    goto LABEL_7;
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    v48 = a2;
    if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
      v4 = (void *)objc_msgSend(v4, "superview");
    objc_msgSend(v4, "frame");
    v50 = v49;
    y = v177.origin.y;
    width = v177.size.width;
    height = v177.size.height;
    *(float *)&v49 = v49;
    v54 = vcvtms_s32_f32(*(float *)&v49);
    v177.origin.x = v50;
    MaxX = CGRectGetMaxX(v177);
    v56 = vcvtps_s32_f32(MaxX);
    v178.origin.x = v50;
    v178.origin.y = y;
    v178.size.width = width;
    v178.size.height = height;
    CGRectGetMaxY(v178);
    LODWORD(v5) = v56 - v54;
    a2 = v48;
  }
  else
  {
    v5 = *((_QWORD *)this + 7);
  }
  v6 = *((_QWORD *)this + 19);
  v7 = *(void **)(v6 + 40);
  if (v7)
  {
    v57 = v5;
    v58 = a2;
    if (objc_msgSend(*(id *)(v6 + 40), "conformsToProtocol:", &unk_1EE342188))
      v7 = (void *)objc_msgSend(v7, "superview");
    objc_msgSend(v7, "frame");
    v60 = v59;
    v61 = v179.origin.y;
    v62 = v179.size.width;
    v63 = v179.size.height;
    *(float *)&v59 = v59;
    v64 = vcvtms_s32_f32(*(float *)&v59);
    v179.origin.x = v60;
    v65 = CGRectGetMaxX(v179);
    v66 = vcvtps_s32_f32(v65);
    v180.origin.x = v60;
    v180.origin.y = v61;
    v180.size.width = v62;
    v180.size.height = v63;
    CGRectGetMaxY(v180);
    LODWORD(v8) = v66 - v64;
    a2 = v58;
    LODWORD(v5) = v57;
  }
  else
  {
    v8 = *(_QWORD *)(v6 + 56);
  }
  if ((int)v5 <= (int)v8)
  {
LABEL_7:
    v9 = *((_QWORD *)this + 20);
    if (!v9)
      return v9;
    v10 = (void *)*((_QWORD *)this + 5);
    if (v10)
    {
      v67 = a2;
      if (objc_msgSend(*((id *)this + 5), "conformsToProtocol:", &unk_1EE342188))
        v10 = (void *)objc_msgSend(v10, "superview");
      objc_msgSend(v10, "frame");
      v69 = v68;
      v70 = v181.origin.y;
      v71 = v181.size.width;
      v72 = v181.size.height;
      *(float *)&v68 = v181.origin.y;
      v73 = vcvtms_s32_f32(*(float *)&v68);
      v181.origin.x = v69;
      CGRectGetMaxX(v181);
      v182.origin.x = v69;
      v182.origin.y = v70;
      v182.size.width = v71;
      v182.size.height = v72;
      MaxY = CGRectGetMaxY(v182);
      v11 = (unint64_t)(vcvtps_s32_f32(MaxY) - v73) << 32;
      a2 = v67;
    }
    else
    {
      v11 = *((_QWORD *)this + 7);
    }
    v12 = *((_QWORD *)this + 20);
    v13 = *(void **)(v12 + 40);
    if (v13)
    {
      v75 = HIDWORD(v11);
      v76 = a2;
      if (objc_msgSend(*(id *)(v12 + 40), "conformsToProtocol:", &unk_1EE342188))
        v13 = (void *)objc_msgSend(v13, "superview");
      objc_msgSend(v13, "frame");
      v78 = v77;
      v79 = v183.origin.y;
      v80 = v183.size.width;
      v81 = v183.size.height;
      *(float *)&v77 = v183.origin.y;
      v82 = vcvtms_s32_f32(*(float *)&v77);
      v183.origin.x = v78;
      CGRectGetMaxX(v183);
      v184.origin.x = v78;
      v184.origin.y = v79;
      v184.size.width = v80;
      v184.size.height = v81;
      v83 = CGRectGetMaxY(v184);
      v14 = (unint64_t)(vcvtps_s32_f32(v83) - v82) << 32;
      a2 = v76;
      HIDWORD(v11) = v75;
    }
    else
    {
      v14 = *(_QWORD *)(v12 + 56);
    }
    if (SHIDWORD(v11) <= SHIDWORD(v14))
      return 0;
  }
  v15 = WebCore::Widget::convertFromContainingWindow(this, a2, a3);
  v16 = HIDWORD(v15);
  v17 = *((_QWORD *)this + 19);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 40);
    if (v18)
    {
      v84 = HIDWORD(v15);
      v85 = v15;
      if (objc_msgSend(*(id *)(v17 + 40), "conformsToProtocol:", &unk_1EE342188))
        v18 = objc_msgSend((id)v18, "superview");
      objc_msgSend((id)v18, "frame");
      v87 = v86;
      v88 = v185.origin.y;
      v89 = v185.size.width;
      v90 = v185.size.height;
      *(float *)&v86 = v185.origin.y;
      LODWORD(v18) = vcvtms_s32_f32(*(float *)&v86);
      v185.origin.x = v87;
      CGRectGetMaxX(v185);
      v186.origin.x = v87;
      v186.origin.y = v88;
      v186.size.width = v89;
      v186.size.height = v90;
      CGRectGetMaxY(v186);
      v19 = v18 << 32;
      LODWORD(v15) = v85;
      LODWORD(v16) = v84;
    }
    else
    {
      v19 = *(_QWORD *)(v17 + 48);
    }
    v20 = *((_QWORD *)this + 19);
    v21 = *(_QWORD *)(v20 + 40);
    if (v21)
    {
      v91 = v16;
      v92 = v15;
      if (objc_msgSend(*(id *)(v20 + 40), "conformsToProtocol:", &unk_1EE342188))
        v21 = objc_msgSend((id)v21, "superview");
      objc_msgSend((id)v21, "frame");
      v94 = v93;
      v95 = v187.origin.y;
      v96 = v187.size.width;
      v97 = v187.size.height;
      *(float *)&v93 = v187.origin.y;
      LODWORD(v21) = vcvtms_s32_f32(*(float *)&v93);
      v187.origin.x = v94;
      CGRectGetMaxX(v187);
      v188.origin.x = v94;
      v188.origin.y = v95;
      v188.size.width = v96;
      v188.size.height = v97;
      CGRectGetMaxY(v188);
      v22 = v21 << 32;
      LODWORD(v15) = v92;
      LODWORD(v16) = v91;
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 48);
    }
    v23 = *((_QWORD *)this + 19);
    v24 = *(void **)(v23 + 40);
    if (v24)
    {
      v98 = HIDWORD(v22);
      v99 = v16;
      v100 = v15;
      if (objc_msgSend(*(id *)(v23 + 40), "conformsToProtocol:", &unk_1EE342188))
        v24 = (void *)objc_msgSend(v24, "superview");
      objc_msgSend(v24, "frame");
      v102 = v101;
      v103 = v189.origin.y;
      v104 = v189.size.width;
      v105 = v189.size.height;
      *(float *)&v101 = v189.origin.y;
      v106 = vcvtms_s32_f32(*(float *)&v101);
      v189.origin.x = v102;
      CGRectGetMaxX(v189);
      v190.origin.x = v102;
      v190.origin.y = v103;
      v190.size.width = v104;
      v190.size.height = v105;
      v107 = CGRectGetMaxY(v190);
      v25 = (unint64_t)(vcvtps_s32_f32(v107) - v106) << 32;
      LODWORD(v15) = v100;
      LODWORD(v16) = v99;
      HIDWORD(v22) = v98;
    }
    else
    {
      v25 = *(_QWORD *)(v23 + 56);
    }
    v26 = *((_QWORD *)this + 19);
    v27 = *(void **)(v26 + 40);
    if (v27)
    {
      v108 = HIDWORD(v25);
      v109 = HIDWORD(v22);
      v110 = v16;
      v111 = v15;
      if (objc_msgSend(*(id *)(v26 + 40), "conformsToProtocol:", &unk_1EE342188))
        v27 = (void *)objc_msgSend(v27, "superview");
      objc_msgSend(v27, "frame");
      v113 = v112;
      v114 = v191.origin.y;
      v115 = v191.size.width;
      v116 = v191.size.height;
      *(float *)&v112 = v112;
      LODWORD(v27) = vcvtms_s32_f32(*(float *)&v112);
      v191.origin.x = v113;
      CGRectGetMaxX(v191);
      v192.origin.x = v113;
      v192.origin.y = v114;
      v192.size.width = v115;
      v192.size.height = v116;
      CGRectGetMaxY(v192);
      LODWORD(v15) = v111;
      LODWORD(v16) = v110;
      HIDWORD(v22) = v109;
      HIDWORD(v25) = v108;
    }
    else
    {
      v27 = *(void **)(v26 + 48);
    }
    v28 = *((_QWORD *)this + 19);
    v29 = *(void **)(v28 + 40);
    if (v29)
    {
      v117 = HIDWORD(v25);
      v118 = HIDWORD(v22);
      v119 = v16;
      v120 = v15;
      if (objc_msgSend(*(id *)(v28 + 40), "conformsToProtocol:", &unk_1EE342188))
        v29 = (void *)objc_msgSend(v29, "superview");
      objc_msgSend(v29, "frame");
      v122 = v121;
      v123 = v193.origin.y;
      v124 = v193.size.width;
      v125 = v193.size.height;
      *(float *)&v121 = v121;
      v126 = vcvtms_s32_f32(*(float *)&v121);
      v193.origin.x = v122;
      v127 = CGRectGetMaxX(v193);
      v128 = vcvtps_s32_f32(v127);
      v194.origin.x = v122;
      v194.origin.y = v123;
      v194.size.width = v124;
      v194.size.height = v125;
      CGRectGetMaxY(v194);
      LODWORD(v30) = v128 - v126;
      LODWORD(v15) = v120;
      LODWORD(v16) = v119;
      HIDWORD(v22) = v118;
      HIDWORD(v25) = v117;
    }
    else
    {
      v30 = *(_QWORD *)(v28 + 56);
    }
    v9 = 0;
    if ((int)v16 > SHIDWORD(v19) && HIDWORD(v25) + HIDWORD(v22) > (int)v16)
      return (int)v30 + (int)v27 < (int)v15;
  }
  else
  {
    v32 = *((_QWORD *)this + 20);
    v33 = *(void **)(v32 + 40);
    if (v33)
    {
      v129 = HIDWORD(v15);
      v130 = v15;
      if (objc_msgSend(*(id *)(v32 + 40), "conformsToProtocol:", &unk_1EE342188))
        v33 = (void *)objc_msgSend(v33, "superview");
      objc_msgSend(v33, "frame");
      v132 = v131;
      v133 = v195.origin.y;
      v134 = v195.size.width;
      v135 = v195.size.height;
      *(float *)&v131 = v131;
      LODWORD(v34) = vcvtms_s32_f32(*(float *)&v131);
      v195.origin.x = v132;
      CGRectGetMaxX(v195);
      v196.origin.x = v132;
      v196.origin.y = v133;
      v196.size.width = v134;
      v196.size.height = v135;
      CGRectGetMaxY(v196);
      LODWORD(v15) = v130;
      LODWORD(v16) = v129;
    }
    else
    {
      v34 = *(_QWORD *)(v32 + 48);
    }
    v35 = *((_QWORD *)this + 20);
    v36 = *(void **)(v35 + 40);
    if (v36)
    {
      v136 = v34;
      v137 = v16;
      v138 = v15;
      if (objc_msgSend(*(id *)(v35 + 40), "conformsToProtocol:", &unk_1EE342188))
        v36 = (void *)objc_msgSend(v36, "superview");
      objc_msgSend(v36, "frame");
      v140 = v139;
      v141 = v197.origin.y;
      v142 = v197.size.width;
      v143 = v197.size.height;
      *(float *)&v139 = v139;
      v144 = vcvtms_s32_f32(*(float *)&v139);
      v197.origin.x = v140;
      CGRectGetMaxX(v197);
      v198.origin.x = v140;
      v198.origin.y = v141;
      v198.size.width = v142;
      v198.size.height = v143;
      CGRectGetMaxY(v198);
      LODWORD(v37) = v144;
      LODWORD(v15) = v138;
      LODWORD(v16) = v137;
      LODWORD(v34) = v136;
    }
    else
    {
      v37 = *(_QWORD *)(v35 + 48);
    }
    v38 = *((_QWORD *)this + 20);
    v39 = *(void **)(v38 + 40);
    if (v39)
    {
      v145 = v37;
      v146 = v34;
      v147 = v16;
      v148 = v15;
      if (objc_msgSend(*(id *)(v38 + 40), "conformsToProtocol:", &unk_1EE342188))
        v39 = (void *)objc_msgSend(v39, "superview");
      objc_msgSend(v39, "frame");
      v150 = v149;
      v151 = v199.origin.y;
      v152 = v199.size.width;
      v153 = v199.size.height;
      *(float *)&v149 = v149;
      v154 = vcvtms_s32_f32(*(float *)&v149);
      v199.origin.x = v150;
      v155 = CGRectGetMaxX(v199);
      v156 = vcvtps_s32_f32(v155);
      v200.origin.x = v150;
      v200.origin.y = v151;
      v200.size.width = v152;
      v200.size.height = v153;
      CGRectGetMaxY(v200);
      LODWORD(v40) = v156 - v154;
      LODWORD(v15) = v148;
      LODWORD(v16) = v147;
      LODWORD(v34) = v146;
      LODWORD(v37) = v145;
    }
    else
    {
      v40 = *(_QWORD *)(v38 + 56);
    }
    v41 = *((_QWORD *)this + 20);
    v42 = *(_QWORD *)(v41 + 40);
    if (v42)
    {
      v157 = v40;
      v158 = v37;
      v159 = v16;
      v160 = v15;
      if (objc_msgSend(*(id *)(v41 + 40), "conformsToProtocol:", &unk_1EE342188))
        v42 = objc_msgSend((id)v42, "superview");
      objc_msgSend((id)v42, "frame");
      v162 = v161;
      v163 = v201.origin.y;
      v164 = v201.size.width;
      v165 = v201.size.height;
      *(float *)&v161 = v201.origin.y;
      LODWORD(v42) = vcvtms_s32_f32(*(float *)&v161);
      v201.origin.x = v162;
      CGRectGetMaxX(v201);
      v202.origin.x = v162;
      v202.origin.y = v163;
      v202.size.width = v164;
      v202.size.height = v165;
      CGRectGetMaxY(v202);
      v43 = v42 << 32;
      LODWORD(v15) = v160;
      LODWORD(v16) = v159;
      LODWORD(v37) = v158;
      LODWORD(v40) = v157;
    }
    else
    {
      v43 = *(_QWORD *)(v41 + 48);
    }
    v44 = *((_QWORD *)this + 20);
    v45 = *(void **)(v44 + 40);
    if (v45)
    {
      v166 = v40;
      v167 = v37;
      v168 = v16;
      v169 = v15;
      if (objc_msgSend(*(id *)(v44 + 40), "conformsToProtocol:", &unk_1EE342188))
        v45 = (void *)objc_msgSend(v45, "superview");
      objc_msgSend(v45, "frame");
      v171 = v170;
      v172 = v203.origin.y;
      v173 = v203.size.width;
      v174 = v203.size.height;
      *(float *)&v170 = v203.origin.y;
      v175 = vcvtms_s32_f32(*(float *)&v170);
      v203.origin.x = v171;
      CGRectGetMaxX(v203);
      v204.origin.x = v171;
      v204.origin.y = v172;
      v204.size.width = v173;
      v204.size.height = v174;
      v176 = CGRectGetMaxY(v204);
      v46 = (unint64_t)(vcvtps_s32_f32(v176) - v175) << 32;
      LODWORD(v15) = v169;
      LODWORD(v16) = v168;
      LODWORD(v37) = v167;
      LODWORD(v40) = v166;
    }
    else
    {
      v46 = *(_QWORD *)(v44 + 56);
    }
    v9 = 0;
    if ((int)v15 > (int)v34 && (int)v40 + (int)v37 > (int)v15)
      return HIDWORD(v46) + HIDWORD(v43) < (int)v16;
  }
  return v9;
}

unint64_t WebCore::ScrollView::convertFromScrollbarToContainingView(WebCore::ScrollView *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  float v17;
  float v18;
  CGFloat v19;
  void *v20;
  CGRect v21;

  HIDWORD(v4) = HIDWORD(a2);
  v5 = *(_QWORD *)a3;
  v6 = (void *)*((_QWORD *)a2 + 5);
  if (v6)
  {
    v20 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v20, "superview"), "frame");
    else
      objc_msgSend(v20, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v9;
    LODWORD(v4) = vcvtms_s32_f32(v17);
    v18 = v10;
    LODWORD(v3) = vcvtms_s32_f32(v18);
    v19 = v13;
    CGRectGetMaxX(*(CGRect *)(&v10 - 1));
    v21.origin.x = v13;
    v21.origin.y = v14;
    v21.size.width = v15;
    v21.size.height = v16;
    CGRectGetMaxY(v21);
    v7 = v4 | (v3 << 32);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 6);
  }
  return (v7 + (v5 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v7 + v5);
}

unint64_t `non-virtual thunk to'WebCore::ScrollView::convertFromScrollbarToContainingView(WebCore::ScrollView *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  float v17;
  float v18;
  CGFloat v19;
  void *v20;
  CGRect v21;

  HIDWORD(v4) = HIDWORD(a2);
  v5 = *(_QWORD *)a3;
  v6 = (void *)*((_QWORD *)a2 + 5);
  if (v6)
  {
    v20 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v20, "superview"), "frame");
    else
      objc_msgSend(v20, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v9;
    LODWORD(v4) = vcvtms_s32_f32(v17);
    v18 = v10;
    LODWORD(v3) = vcvtms_s32_f32(v18);
    v19 = v13;
    CGRectGetMaxX(*(CGRect *)(&v10 - 1));
    v21.origin.x = v13;
    v21.origin.y = v14;
    v21.size.width = v15;
    v21.size.height = v16;
    CGRectGetMaxY(v21);
    v7 = v4 | (v3 << 32);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 6);
  }
  return (v7 + (v5 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v7 + v5);
}

unint64_t WebCore::ScrollView::convertFromContainingViewToScrollbar(WebCore::ScrollView *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  float v17;
  float v18;
  CGFloat v19;
  void *v20;
  CGRect v21;

  HIDWORD(v4) = HIDWORD(a2);
  v5 = *(_QWORD *)a3;
  v6 = (void *)*((_QWORD *)a2 + 5);
  if (v6)
  {
    v20 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v20, "superview"), "frame");
    else
      objc_msgSend(v20, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v9;
    LODWORD(v4) = vcvtms_s32_f32(v17);
    v18 = v10;
    LODWORD(v3) = vcvtms_s32_f32(v18);
    v19 = v13;
    CGRectGetMaxX(*(CGRect *)(&v10 - 1));
    v21.origin.x = v13;
    v21.origin.y = v14;
    v21.size.width = v15;
    v21.size.height = v16;
    CGRectGetMaxY(v21);
    v7 = v4 | (v3 << 32);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 6);
  }
  return (v5 - (v7 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v5 - v7);
}

unint64_t `non-virtual thunk to'WebCore::ScrollView::convertFromContainingViewToScrollbar(WebCore::ScrollView *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  float v17;
  float v18;
  CGFloat v19;
  void *v20;
  CGRect v21;

  HIDWORD(v4) = HIDWORD(a2);
  v5 = *(_QWORD *)a3;
  v6 = (void *)*((_QWORD *)a2 + 5);
  if (v6)
  {
    v20 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v20, "superview"), "frame");
    else
      objc_msgSend(v20, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v9;
    LODWORD(v4) = vcvtms_s32_f32(v17);
    v18 = v10;
    LODWORD(v3) = vcvtms_s32_f32(v18);
    v19 = v13;
    CGRectGetMaxX(*(CGRect *)(&v10 - 1));
    v21.origin.x = v13;
    v21.origin.y = v14;
    v21.size.width = v15;
    v21.size.height = v16;
    CGRectGetMaxY(v21);
    v7 = v4 | (v3 << 32);
  }
  else
  {
    v7 = *((_QWORD *)a2 + 6);
  }
  return (v5 - (v7 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v5 - v7);
}

unint64_t WebCore::ScrollView::convertFromScrollbarToContainingView(WebCore::ScrollView *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  float v17;
  float v18;
  CGFloat v19;
  void *v20;
  CGRect v21;

  v4 = *(_QWORD *)a3;
  v5 = (void *)*((_QWORD *)a2 + 5);
  if (v5)
  {
    HIDWORD(v8) = HIDWORD(a2);
    v20 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v20, "superview"), "frame");
    else
      objc_msgSend(v20, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v9;
    LODWORD(v8) = vcvtms_s32_f32(v17);
    v18 = v10;
    LODWORD(v3) = vcvtms_s32_f32(v18);
    v19 = v13;
    CGRectGetMaxX(*(CGRect *)(&v10 - 1));
    v21.origin.x = v13;
    v21.origin.y = v14;
    v21.size.width = v15;
    v21.size.height = v16;
    CGRectGetMaxY(v21);
    v6 = v8 | (v3 << 32);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 6);
  }
  return (v6 + (v4 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v6 + v4);
}

unint64_t `non-virtual thunk to'WebCore::ScrollView::convertFromScrollbarToContainingView(WebCore::ScrollView *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  float v17;
  float v18;
  CGFloat v19;
  void *v20;
  CGRect v21;

  v4 = *(_QWORD *)a3;
  v5 = (void *)*((_QWORD *)a2 + 5);
  if (v5)
  {
    HIDWORD(v8) = HIDWORD(a2);
    v20 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v20, "superview"), "frame");
    else
      objc_msgSend(v20, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v9;
    LODWORD(v8) = vcvtms_s32_f32(v17);
    v18 = v10;
    LODWORD(v3) = vcvtms_s32_f32(v18);
    v19 = v13;
    CGRectGetMaxX(*(CGRect *)(&v10 - 1));
    v21.origin.x = v13;
    v21.origin.y = v14;
    v21.size.width = v15;
    v21.size.height = v16;
    CGRectGetMaxY(v21);
    v6 = v8 | (v3 << 32);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 6);
  }
  return (v6 + (v4 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v6 + v4);
}

unint64_t WebCore::ScrollView::convertFromContainingViewToScrollbar(WebCore::ScrollView *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  float v17;
  float v18;
  CGFloat v19;
  void *v20;
  CGRect v21;

  v4 = *(_QWORD *)a3;
  v5 = (void *)*((_QWORD *)a2 + 5);
  if (v5)
  {
    HIDWORD(v8) = HIDWORD(a2);
    v20 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v20, "superview"), "frame");
    else
      objc_msgSend(v20, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v9;
    LODWORD(v8) = vcvtms_s32_f32(v17);
    v18 = v10;
    LODWORD(v3) = vcvtms_s32_f32(v18);
    v19 = v13;
    CGRectGetMaxX(*(CGRect *)(&v10 - 1));
    v21.origin.x = v13;
    v21.origin.y = v14;
    v21.size.width = v15;
    v21.size.height = v16;
    CGRectGetMaxY(v21);
    v6 = v8 | (v3 << 32);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 6);
  }
  return (v4 - (v6 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v4 - v6);
}

unint64_t `non-virtual thunk to'WebCore::ScrollView::convertFromContainingViewToScrollbar(WebCore::ScrollView *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  float v17;
  float v18;
  CGFloat v19;
  void *v20;
  CGRect v21;

  v4 = *(_QWORD *)a3;
  v5 = (void *)*((_QWORD *)a2 + 5);
  if (v5)
  {
    HIDWORD(v8) = HIDWORD(a2);
    v20 = (void *)*((_QWORD *)a2 + 5);
    if (objc_msgSend(v5, "conformsToProtocol:", &unk_1EE342188))
      objc_msgSend((id)objc_msgSend(v20, "superview"), "frame");
    else
      objc_msgSend(v20, "frame");
    v13 = v9;
    v14 = v10;
    v15 = v11;
    v16 = v12;
    v17 = v9;
    LODWORD(v8) = vcvtms_s32_f32(v17);
    v18 = v10;
    LODWORD(v3) = vcvtms_s32_f32(v18);
    v19 = v13;
    CGRectGetMaxX(*(CGRect *)(&v10 - 1));
    v21.origin.x = v13;
    v21.origin.y = v14;
    v21.size.width = v15;
    v21.size.height = v16;
    CGRectGetMaxY(v21);
    v6 = v8 | (v3 << 32);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 6);
  }
  return (v4 - (v6 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v4 - v6);
}

uint64_t WebCore::ScrollView::styleAndRenderTreeDidChange(WebCore::ScrollView *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 19);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 288))(v2);
  result = *((_QWORD *)this + 20);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 288))(result);
  return result;
}

uint64_t WebCore::ScrollView::debugDescription@<X0>(_QWORD *a1@<X8>)
{
  int v3;
  uint64_t result;
  _QWORD v5[2];
  _BYTE v6[16];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  v7 = v3;
  v5[0] = "ScrollView 0x";
  v5[1] = 14;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::HexNumberBuffer>((uint64_t)v5, (uint64_t)v6, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::ScrollView::debugDescription@<X0>(_QWORD *a1@<X8>)
{
  int v3;
  uint64_t result;
  _QWORD v5[2];
  _BYTE v6[16];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  WTF::Internal::appendHex();
  v7 = v3;
  v5[0] = "ScrollView 0x";
  v5[1] = 14;
  result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::HexNumberBuffer>((uint64_t)v5, (uint64_t)v6, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

uint64_t WebCore::ScrollableArea::setScrollbarsController(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF **std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;
  uint64_t v4;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 3);
    *((_QWORD *)v3 + 3) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    WTF::fastFree(v3, a2);
  }
  return a1;
}

uint64_t WebCore::ScrollbarsController::create@<X0>(WebCore::ScrollbarsController *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)result = off_1E3406B48;
  *(_QWORD *)(result + 8) = this;
  *(_BYTE *)(result + 16) = 1;
  *a2 = result;
  return result;
}

uint64_t WebCore::ScrollableArea::beginKeyboardScroll(_BYTE *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 72))(a1);
  if ((_DWORD)result)
    a1[45] = 1;
  return result;
}

uint64_t WebCore::ScrollableArea::endKeyboardScroll(WebCore::ScrollableArea *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 80))(this);
  if ((_DWORD)result)
    *((_BYTE *)this + 45) = 0;
  return result;
}

uint64_t WebCore::ScrollableArea::scrollToPositionWithAnimation(WebCore::ScrollAnimator *this, float *a2, uint64_t a3)
{
  WebCore::ScrollAnimator *v6;
  uint64_t v7;
  uint64_t result;
  float v9;
  float v10;
  char v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[12];
  char v22;
  uint64_t v23;

  if (*((_BYTE *)this + 45) == 1)
  {
    v6 = (WebCore::ScrollAnimator *)*((_QWORD *)this + 2);
    if (!v6)
    {
      WebCore::ScrollAnimator::create(this, (uint64_t *)v21);
      v6 = *(WebCore::ScrollAnimator **)v21;
      v7 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = *(_QWORD *)v21;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v6 = (WebCore::ScrollAnimator *)*((_QWORD *)this + 2);
      }
    }
    WebCore::ScrollAnimator::cancelAnimations(v6);
  }
  result = (*(uint64_t (**)(WebCore::ScrollAnimator *))(*(_QWORD *)this + 416))(this);
  v10 = *a2;
  v9 = a2[1];
  if (*a2 != (float)(int)result || v9 != (float)SHIDWORD(result))
  {
    v12 = *((_BYTE *)this + 44);
    *((_BYTE *)this + 44) = *(_BYTE *)a3;
    v13 = roundf(v10);
    v14 = 0x7FFFFFFFLL;
    v15 = 0x80000000;
    if (v13 > -2147500000.0)
      v15 = (int)v13;
    if (v13 < 2147500000.0)
      v14 = v15;
    v16 = roundf(v9);
    v17 = 0x7FFFFFFF00000000;
    v18 = 0x8000000000000000;
    if (v16 > -2147500000.0)
      v18 = (unint64_t)(int)v16 << 32;
    if (v16 < 2147500000.0)
      v17 = v18;
    v23 = v17 | v14;
    v21[0] = 1;
    v21[1] = *(_BYTE *)(a3 + 1);
    v21[2] = 1;
    v21[3] = *(_BYTE *)(a3 + 3);
    *(_QWORD *)&v21[4] = *(_QWORD *)(a3 + 4);
    v22 = *(_BYTE *)(a3 + 12);
    result = (*(uint64_t (**)(WebCore::ScrollAnimator *, uint64_t *, _BYTE *))(*(_QWORD *)this + 56))(this, &v23, v21);
    if ((result & 1) != 0)
      goto LABEL_23;
    v19 = *((_QWORD *)this + 2);
    if (!v19)
    {
      WebCore::ScrollAnimator::create(this, (uint64_t *)v21);
      v19 = *(_QWORD *)v21;
      v20 = *((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = *(_QWORD *)v21;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        v19 = *((_QWORD *)this + 2);
      }
    }
    result = WebCore::ScrollAnimator::scrollToPositionWithAnimation(v19, a2, *(unsigned __int8 *)(a3 + 1));
    if ((_DWORD)result)
LABEL_23:
      *((_BYTE *)this + 45) = 1;
    *((_BYTE *)this + 44) = v12;
  }
  return result;
}

uint64_t WebCore::ScrollableArea::scrollToOffsetWithoutAnimation(int32x2_t *this, float32x2_t *a2, int a3)
{
  float32x2_t *v5;
  int32x2_t v6;
  float32x2_t v8;
  float32x2_t *v9;

  v8 = vsub_f32(*a2, vcvt_f32_s32(this[4]));
  v5 = (float32x2_t *)this[2];
  if (!v5)
  {
    WebCore::ScrollAnimator::create((WebCore::ScrollAnimator *)this, (uint64_t *)&v9);
    v5 = v9;
    v6 = this[2];
    this[2] = (int32x2_t)v9;
    if (v6)
    {
      (*(void (**)(int32x2_t))(**(_QWORD **)&v6 + 8))(v6);
      v5 = (float32x2_t *)this[2];
    }
  }
  return WebCore::ScrollAnimator::scrollToPositionWithoutAnimation(v5, (float *)&v8, a3);
}

uint64_t WebCore::ScrollableArea::scrollToOffsetWithoutAnimation(WebCore::ScrollAnimator *this, int a2, float a3)
{
  float32x2_t *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unint64_t v13;

  v6 = (float32x2_t *)*((_QWORD *)this + 2);
  if (!v6)
  {
    WebCore::ScrollAnimator::create(this, (uint64_t *)&v13);
    v6 = (float32x2_t *)v13;
    v7 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v13;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 = (float32x2_t *)*((_QWORD *)this + 2);
    }
  }
  v8 = (float)*((int *)this + 8);
  v9 = (float)*((int *)this + 9);
  if (a2)
  {
    v10 = (float)(v6[15].f32[0] + v8) - v8;
    v11 = a3 - v9;
  }
  else
  {
    v10 = a3 - v8;
    v11 = (float)(v6[15].f32[1] + v9) - v9;
  }
  v13 = __PAIR64__(LODWORD(v11), LODWORD(v10));
  return WebCore::ScrollAnimator::scrollToPositionWithoutAnimation(v6, (float *)&v13, 1);
}

uint64_t WebCore::ScrollableArea::handleWheelEventForScrolling(WebCore::ScrollAnimator *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(WebCore::ScrollAnimator *))(*(_QWORD *)a1 + 592))(a1);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a1 + 2);
    if (!v5)
    {
      WebCore::ScrollAnimator::create(a1, &v7);
      v5 = v7;
      v6 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v7;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        v5 = *((_QWORD *)a1 + 2);
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 184))(v5, a2);
  }
  return result;
}

uint64_t WebCore::ScrollableArea::handleTouchEvent(WebCore::ScrollAnimator *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *((_QWORD *)this + 2);
  if (!v4)
  {
    WebCore::ScrollAnimator::create(this, &v7);
    v4 = v7;
    v5 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v7;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *((_QWORD *)this + 2);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 208))(v4, a2);
}

uint64_t WebCore::ScrollableArea::setScrollOffsetFromInternals(WebCore::ScrollableArea *this, const WebCore::IntPoint *a2)
{
  unint64_t v3;

  v3 = (*(_QWORD *)a2 - (*((_QWORD *)this + 4) & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (*(_QWORD *)a2
                                                                                                - *((_QWORD *)this + 4));
  return WebCore::ScrollableArea::setScrollPositionFromAnimation(this, (const WebCore::IntPoint *)&v3);
}

uint64_t WebCore::ScrollableArea::setScrollPositionFromAnimation(WebCore::ScrollableArea *this, const WebCore::IntPoint *a2)
{
  uint64_t result;
  _BYTE v5[2];
  __int16 v6;
  char v7;
  char v8;

  v5[0] = *((_BYTE *)this + 44);
  v5[1] = v5[0];
  v6 = 256;
  v7 = 0;
  v8 = 0;
  result = (*(uint64_t (**)(WebCore::ScrollableArea *, const WebCore::IntPoint *, _BYTE *))(*(_QWORD *)this + 56))(this, a2, v5);
  if ((result & 1) == 0)
    return WebCore::ScrollableArea::scrollPositionChanged(this, a2);
  return result;
}

uint64_t WebCore::ScrollableArea::willStartLiveResize(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  if (!*(_BYTE *)(this + 46))
  {
    v1 = (_QWORD *)this;
    *(_BYTE *)(this + 46) = 1;
    v2 = *(_QWORD *)(this + 24);
    if (v2)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
    if ((*(unsigned int (**)(_QWORD *))(*v1 + 688))(v1))
    {
      v5 = WTF::fastMalloc((WTF *)0x30);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E3406CB0;
      v6[1] = v1;
      v3 = 1;
      *(_BYTE *)(v5 + 16) = 1;
      *(_QWORD *)v5 = off_1E341C188;
      *(_QWORD *)(v5 + 8) = v1;
      *(_QWORD *)(v5 + 24) = v6;
      *(_QWORD *)(v5 + 32) = 0;
      *(_QWORD *)(v5 + 40) = 0;
      v4 = (_QWORD *)v1[3];
      v1[3] = v5;
      if (!v4)
      {
        v2 = v5;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
      }
    }
    else
    {
      v3 = 38;
      v4 = v1;
    }
    (*(void (**)(void))(*v4 + 8 * v3))();
    v2 = v1[3];
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E5858);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
  }
  return this;
}

uint64_t WebCore::ScrollableArea::willEndLiveResize(uint64_t this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (!*(_BYTE *)(this + 46))
    return this;
  v1 = (_QWORD *)this;
  *(_BYTE *)(this + 46) = 0;
  v2 = *(_QWORD *)(this + 24);
  if (!v2)
  {
    if ((*(unsigned int (**)(_QWORD *))(*v1 + 688))(v1))
    {
      v7 = WTF::fastMalloc((WTF *)0x30);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3406CB0;
      v8[1] = v1;
      v5 = 1;
      *(_BYTE *)(v7 + 16) = 1;
      *(_QWORD *)v7 = off_1E341C188;
      *(_QWORD *)(v7 + 8) = v1;
      *(_QWORD *)(v7 + 24) = v8;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      v6 = (_QWORD *)v1[3];
      v1[3] = v7;
      if (!v6)
      {
        v2 = v7;
        goto LABEL_3;
      }
    }
    else
    {
      v5 = 38;
      v6 = v1;
    }
    (*(void (**)(void))(*v6 + 8 * v5))();
    v2 = v1[3];
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E597CLL);
    }
  }
LABEL_3:
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 152))(v2);
  v3 = v1[2];
  if (!v3)
  {
    WebCore::ScrollAnimator::create((WebCore::ScrollAnimator *)v1, &v9);
    v3 = v9;
    v4 = v1[2];
    v1[2] = v9;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v3 = v1[2];
    }
  }
  this = *(_QWORD *)(v3 + 96);
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 48))(this);
  return this;
}

uint64_t WebCore::ScrollableArea::mouseEnteredContentArea(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  uint64_t v4;
  WebCore::ScrollableArea *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v6 = WTF::fastMalloc((WTF *)0x30);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3406CB0;
      v7[1] = this;
      v4 = 1;
      *(_BYTE *)(v6 + 16) = 1;
      *(_QWORD *)v6 = off_1E341C188;
      *(_QWORD *)(v6 + 8) = this;
      *(_QWORD *)(v6 + 24) = v7;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      v5 = (WebCore::ScrollableArea *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v6;
      if (!v5)
      {
        v2 = v6;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
      }
    }
    else
    {
      v4 = 38;
      v5 = this;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v4))();
    v2 = *((_QWORD *)this + 3);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E5A64);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
}

uint64_t WebCore::ScrollableArea::mouseExitedContentArea(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  uint64_t v4;
  WebCore::ScrollableArea *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v6 = WTF::fastMalloc((WTF *)0x30);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3406CB0;
      v7[1] = this;
      v4 = 1;
      *(_BYTE *)(v6 + 16) = 1;
      *(_QWORD *)v6 = off_1E341C188;
      *(_QWORD *)(v6 + 8) = this;
      *(_QWORD *)(v6 + 24) = v7;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      v5 = (WebCore::ScrollableArea *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v6;
      if (!v5)
      {
        v2 = v6;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
      }
    }
    else
    {
      v4 = 38;
      v5 = this;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v4))();
    v2 = *((_QWORD *)this + 3);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E5B34);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
}

uint64_t WebCore::ScrollableArea::mouseMovedInContentArea(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  uint64_t v4;
  WebCore::ScrollableArea *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v6 = WTF::fastMalloc((WTF *)0x30);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3406CB0;
      v7[1] = this;
      v4 = 1;
      *(_BYTE *)(v6 + 16) = 1;
      *(_QWORD *)v6 = off_1E341C188;
      *(_QWORD *)(v6 + 8) = this;
      *(_QWORD *)(v6 + 24) = v7;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      v5 = (WebCore::ScrollableArea *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v6;
      if (!v5)
      {
        v2 = v6;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
      }
    }
    else
    {
      v4 = 38;
      v5 = this;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v4))();
    v2 = *((_QWORD *)this + 3);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E5C04);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
}

uint64_t WebCore::ScrollableArea::mouseEnteredScrollbar(WebCore::ScrollableArea *this, WebCore::Scrollbar *a2)
{
  uint64_t v4;
  uint64_t v6;
  WebCore::ScrollableArea *v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *((_QWORD *)this + 3);
  if (!v4)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v8 = WTF::fastMalloc((WTF *)0x30);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3406CB0;
      v9[1] = this;
      v6 = 1;
      *(_BYTE *)(v8 + 16) = 1;
      *(_QWORD *)v8 = off_1E341C188;
      *(_QWORD *)(v8 + 8) = this;
      *(_QWORD *)(v8 + 24) = v9;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      v7 = (WebCore::ScrollableArea *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v8;
      if (!v7)
      {
        v4 = v8;
        return (*(uint64_t (**)(uint64_t, WebCore::Scrollbar *))(*(_QWORD *)v4 + 112))(v4, a2);
      }
    }
    else
    {
      v6 = 38;
      v7 = this;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v6))();
    v4 = *((_QWORD *)this + 3);
    if (!v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E5CE4);
    }
  }
  return (*(uint64_t (**)(uint64_t, WebCore::Scrollbar *))(*(_QWORD *)v4 + 112))(v4, a2);
}

uint64_t WebCore::ScrollableArea::contentAreaDidHide(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  uint64_t v4;
  WebCore::ScrollableArea *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v6 = WTF::fastMalloc((WTF *)0x30);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3406CB0;
      v7[1] = this;
      v4 = 1;
      *(_BYTE *)(v6 + 16) = 1;
      *(_QWORD *)v6 = off_1E341C188;
      *(_QWORD *)(v6 + 8) = this;
      *(_QWORD *)(v6 + 24) = v7;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      v5 = (WebCore::ScrollableArea *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v6;
      if (!v5)
      {
        v2 = v6;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 168))(v2);
      }
    }
    else
    {
      v4 = 38;
      v5 = this;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v4))();
    v2 = *((_QWORD *)this + 3);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E5DB4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 168))(v2);
}

uint64_t WebCore::ScrollableArea::didAddScrollbar(WebCore::ScrollAnimator *a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  WTF *v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  uint64_t v15;
  WebCore::ScrollAnimator *v16;
  WTF *v17;

  v4 = (_QWORD *)*((_QWORD *)a1 + 3);
  if (a3 == 1)
  {
    if (!v4)
    {
      if ((*(unsigned int (**)(WebCore::ScrollAnimator *))(*(_QWORD *)a1 + 688))(a1))
      {
        v16 = a1;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v17, (uint64_t)a1, (uint64_t *)&v16);
        v11 = v17;
        v17 = 0;
        v12 = *((_QWORD *)a1 + 3);
        *((_QWORD *)a1 + 3) = v11;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v17, v10);
      }
      else
      {
        (*(void (**)(WebCore::ScrollAnimator *))(*(_QWORD *)a1 + 304))(a1);
      }
      v4 = (_QWORD *)*((_QWORD *)a1 + 3);
      if (!v4)
      {
        __break(0xC471u);
        JUMPOUT(0x1960E5EFCLL);
      }
    }
    v5 = 24;
  }
  else
  {
    if (!v4)
    {
      if ((*(unsigned int (**)(WebCore::ScrollAnimator *))(*(_QWORD *)a1 + 688))(a1))
      {
        v16 = a1;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v17, (uint64_t)a1, (uint64_t *)&v16);
        v14 = v17;
        v17 = 0;
        v15 = *((_QWORD *)a1 + 3);
        *((_QWORD *)a1 + 3) = v14;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v17, v13);
      }
      else
      {
        (*(void (**)(WebCore::ScrollAnimator *))(*(_QWORD *)a1 + 304))(a1);
      }
      v4 = (_QWORD *)*((_QWORD *)a1 + 3);
      if (!v4)
      {
        __break(0xC471u);
        JUMPOUT(0x1960E5F48);
      }
    }
    v5 = 26;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
  v6 = (WTF *)*((_QWORD *)a1 + 2);
  if (!v6)
  {
    WebCore::ScrollAnimator::create(a1, (uint64_t *)&v17);
    v6 = v17;
    v7 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v17;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v6 = (WTF *)*((_QWORD *)a1 + 2);
    }
  }
  v8 = *((_QWORD *)v6 + 12);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
  return (*(uint64_t (**)(WebCore::ScrollAnimator *, _QWORD))(*(_QWORD *)a1 + 288))(a1, *((unsigned __int8 *)a1 + 43));
}

uint64_t WebCore::ScrollableArea::willRemoveScrollbar(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  void *v7;
  WTF *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  _QWORD *v13;
  WTF *v14;

  v4 = (_QWORD *)a1[3];
  if (a3 == 1)
  {
    if (!v4)
    {
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 688))(a1))
      {
        v13 = a1;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v14, (uint64_t)a1, (uint64_t *)&v13);
        v8 = v14;
        v14 = 0;
        v9 = a1[3];
        a1[3] = v8;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v14, v7);
      }
      else
      {
        (*(void (**)(_QWORD *))(*a1 + 304))(a1);
      }
      v4 = (_QWORD *)a1[3];
      if (!v4)
      {
        __break(0xC471u);
        JUMPOUT(0x1960E607CLL);
      }
    }
    v5 = 25;
  }
  else
  {
    if (!v4)
    {
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 688))(a1))
      {
        v13 = a1;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v14, (uint64_t)a1, (uint64_t *)&v13);
        v11 = v14;
        v14 = 0;
        v12 = a1[3];
        a1[3] = v11;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100](&v14, v10);
      }
      else
      {
        (*(void (**)(_QWORD *))(*a1 + 304))(a1);
      }
      v4 = (_QWORD *)a1[3];
      if (!v4)
      {
        __break(0xC471u);
        JUMPOUT(0x1960E60C8);
      }
    }
    v5 = 27;
  }
  return (*(uint64_t (**)(void))(*v4 + 8 * v5))();
}

uint64_t WebCore::ScrollableArea::contentsResized(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  WebCore::ScrollableArea *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
  {
    WebCore::ScrollAnimator::create(this, &v11);
    v2 = v11;
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v11;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v2 = *((_QWORD *)this + 2);
    }
  }
  v4 = *(_QWORD *)(v2 + 96);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
  if (!(*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
  {
    v7 = 38;
    v8 = this;
    goto LABEL_10;
  }
  v9 = WTF::fastMalloc((WTF *)0x30);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v10 = off_1E3406CB0;
  v10[1] = this;
  v7 = 1;
  *(_BYTE *)(v9 + 16) = 1;
  *(_QWORD *)v9 = off_1E341C188;
  *(_QWORD *)(v9 + 8) = this;
  *(_QWORD *)(v9 + 24) = v10;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  v8 = (WebCore::ScrollableArea *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v9;
  if (v8)
  {
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v8 + 8 * v7))();
    v5 = *((_QWORD *)this + 3);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E6208);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 144))(v9);
}

uint64_t WebCore::ScrollableArea::canShowNonOverlayScrollbars(WebCore::ScrollableArea *this)
{
  uint64_t *v3;
  char *v4;

  if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 144))(this) == 1
    && (*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 152))(this) == 1)
  {
    return 0;
  }
  {
    if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
    {
      v3 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
        return (*(unsigned int (**)(uint64_t *))(*v3 + 64))(v3) ^ 1;
      WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
LABEL_12:
      *v4 = 1;
      return (*(unsigned int (**)(uint64_t *))(*v3 + 64))(v3) ^ 1;
    }
  }
  else
  {
    WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
    *(_OWORD *)&byte_1ECE90A50 = 0u;
    qword_1ECE90A60 = 0;
    LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
    *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
    *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
    byte_1ECE90A56 = 1;
    *(_DWORD *)&algn_1ECE90A57 = 0;
    unk_1ECE90A5B = 0;
    byte_1ECE90A5D = 1;
    byte_1ECE90A5F = 1;
  }
  v3 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
  {
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
    goto LABEL_12;
  }
  return (*(unsigned int (**)(uint64_t *))(*v3 + 64))(v3) ^ 1;
}

uint64_t WebCore::ScrollableArea::invalidateScrollbars(WebCore::ScrollableArea *this)
{
  CGFloat v2;
  id *v3;
  uint64_t result;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  void *v12;
  CGFloat x;
  uint64_t v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  const CGRect *v19;
  uint64_t v20;
  void *v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  const CGRect *v26;
  uint64_t v27;
  unsigned int v28;
  WebCore::ScrollableArea *v29;
  CGRect v30;

  *(_QWORD *)&v30.origin.x = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 336))(this);
  v30.origin.y = v2;
  (*(void (**)(WebCore::ScrollableArea *, CGRect *))(*(_QWORD *)this + 344))(this, &v30);
  v3 = (id *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 392))(this);
  if (v3)
  {
    v10 = v3;
    WebCore::Widget::invalidate(v3);
    v11 = WebCore::ScrollableArea::scrollbarsController(this);
    (*(void (**)(uint64_t, id *))(*(_QWORD *)v11 + 224))(v11, v10);
  }
  result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 400))(this);
  if (result)
  {
    v5 = result;
    v6 = *(void **)(result + 40);
    if (v6)
    {
      if (objc_msgSend(*(id *)(result + 40), "conformsToProtocol:", &unk_1EE342188))
        v6 = (void *)objc_msgSend(v6, "superview");
      objc_msgSend(v6, "frame");
      v30.origin.x = v15;
      v30.origin.y = v16;
      v30.size.width = v17;
      v30.size.height = v18;
      WebCore::enclosingIntRect(&v30, v19);
      v27 = v20;
      v21 = *(void **)(v5 + 40);
      if (v21)
      {
        if (objc_msgSend(*(id *)(v5 + 40), "conformsToProtocol:", &unk_1EE342188))
          v21 = (void *)objc_msgSend(v21, "superview");
        objc_msgSend(v21, "frame", v27);
        v30.origin.x = v22;
        v30.origin.y = v23;
        v30.size.width = v24;
        v30.size.height = v25;
        WebCore::enclosingIntRect(&v30, v26);
        v7 = v28;
        goto LABEL_7;
      }
      v7 = v20;
    }
    else
    {
      v7 = *(_DWORD *)(result + 56);
    }
    v8 = *(_QWORD *)(v5 + 56);
LABEL_7:
    v30.origin.x = 0.0;
    *(_QWORD *)&v30.origin.y = v8 & 0xFFFFFFFF00000000 | v7;
    (*(void (**)(uint64_t, CGRect *))(*(_QWORD *)v5 + 32))(v5, &v30);
    v9 = *((_QWORD *)this + 3);
    if (!v9)
    {
      if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
      {
        v29 = this;
        std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>((uint64_t *)&v30, (uint64_t)this, (uint64_t *)&v29);
        x = v30.origin.x;
        v30.origin.x = 0.0;
        v14 = *((_QWORD *)this + 3);
        *((CGFloat *)this + 3) = x;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        std::unique_ptr<WebCore::ScrollbarsControllerMock>::~unique_ptr[abi:sn180100]((WTF **)&v30, v12);
      }
      else
      {
        (*(void (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 304))(this);
      }
      v9 = *((_QWORD *)this + 3);
      if (!v9)
      {
        __break(0xC471u);
        JUMPOUT(0x1960E64C0);
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 224))(v9, v5);
  }
  return result;
}

uint64_t WebCore::ScrollableArea::invalidateScrollCorner(WebCore::ScrollableArea *this, const WebCore::IntRect *a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 824))(this);
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 320))(v4);
  else
    return (*(uint64_t (**)(WebCore::ScrollableArea *, const WebCore::IntRect *))(*(_QWORD *)this + 816))(this, a2);
}

uint64_t WebCore::ScrollableArea::allowsHorizontalScrolling(WebCore::ScrollableArea *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 392))(this);
  if (result)
    return *(_BYTE *)(result + 136) != 0;
  return result;
}

uint64_t WebCore::ScrollableArea::allowsVerticalScrolling(WebCore::ScrollableArea *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 400))(this);
  if (result)
    return *(_BYTE *)(result + 136) != 0;
  return result;
}

uint64_t WebCore::ScrollableArea::horizontalScrollbarStateForTesting(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  uint64_t v4;
  WebCore::ScrollableArea *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v6 = WTF::fastMalloc((WTF *)0x30);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3406CB0;
      v7[1] = this;
      v4 = 1;
      *(_BYTE *)(v6 + 16) = 1;
      *(_QWORD *)v6 = off_1E341C188;
      *(_QWORD *)(v6 + 8) = this;
      *(_QWORD *)(v6 + 24) = v7;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      v5 = (WebCore::ScrollableArea *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v6;
      if (!v5)
      {
        v2 = v6;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 256))(v2);
      }
    }
    else
    {
      v4 = 38;
      v5 = this;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v4))();
    v2 = *((_QWORD *)this + 3);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E6730);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 256))(v2);
}

uint64_t WebCore::ScrollableArea::verticalScrollbarStateForTesting(WebCore::ScrollableArea *this)
{
  uint64_t v2;
  uint64_t v4;
  WebCore::ScrollableArea *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
  {
    if ((*(unsigned int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 688))(this))
    {
      v6 = WTF::fastMalloc((WTF *)0x30);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3406CB0;
      v7[1] = this;
      v4 = 1;
      *(_BYTE *)(v6 + 16) = 1;
      *(_QWORD *)v6 = off_1E341C188;
      *(_QWORD *)(v6 + 8) = this;
      *(_QWORD *)(v6 + 24) = v7;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 40) = 0;
      v5 = (WebCore::ScrollableArea *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = v6;
      if (!v5)
      {
        v2 = v6;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2);
      }
    }
    else
    {
      v4 = 38;
      v5 = this;
    }
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v4))();
    v2 = *((_QWORD *)this + 3);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E6810);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2);
}

void WebCore::ScrollableArea::scrollbarThumbColorStyle(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WebCore::ScrollableArea::scrollbarTrackColorStyle(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::ScrollableArea::scrollbarGutterStyle(WebCore::ScrollableArea *this)
{
  return 1;
}

uint64_t WebCore::ScrollableArea::snapOffsetsInfo(WebCore::ScrollableArea *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 104)) != 0)
    return v2 + 24;
  else
    return 0;
}

WTF *WebCore::ScrollableArea::setScrollSnapOffsetInfo(WebCore::ScrollableArea *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (!(*(_DWORD *)(a2 + 20) | *(_DWORD *)(a2 + 36)))
    return WebCore::ScrollableArea::clearSnapOffsets(this);
  v4 = *((_QWORD *)this + 2);
  if (!v4)
  {
    WebCore::ScrollAnimator::create(this, &v7);
    v4 = v7;
    v5 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v7;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v4 = *((_QWORD *)this + 2);
    }
  }
  return WebCore::ScrollingEffectsController::setSnapOffsetsInfo((WTF **)(v4 + 24), a2);
}

uint64_t WebCore::ScrollableArea::currentHorizontalSnapPointIndex(WebCore::ScrollableArea *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 104)) != 0)
    return *(_QWORD *)(v2 + 96);
  else
    return 0;
}

uint64_t WebCore::ScrollableArea::currentVerticalSnapPointIndex(WebCore::ScrollableArea *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 2);
  if (v1 && (v2 = *(_QWORD *)(v1 + 104)) != 0)
    return *(_QWORD *)(v2 + 104);
  else
    return 0;
}

WTF *WebCore::ScrollableArea::setCurrentHorizontalSnapPointIndex(WebCore::ScrollAnimator *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  WTF *result;
  uint64_t v7;

  v3 = *((_QWORD *)a1 + 2);
  if (!v3)
  {
    WebCore::ScrollAnimator::create(a1, &v7);
    v3 = v7;
    v5 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v7;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v3 = *((_QWORD *)a1 + 2);
    }
  }
  result = *(WTF **)(v3 + 104);
  if (result)
  {
    *((_DWORD *)result + 24) = a2;
    *((_BYTE *)result + 100) = BYTE4(a2);
    return WebCore::ScrollSnapAnimatorState::updateCurrentlySnappedBoxes(result);
  }
  return result;
}

WTF *WebCore::ScrollableArea::setCurrentVerticalSnapPointIndex(WebCore::ScrollAnimator *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  WTF *result;
  uint64_t v7;

  v3 = *((_QWORD *)a1 + 2);
  if (!v3)
  {
    WebCore::ScrollAnimator::create(a1, &v7);
    v3 = v7;
    v5 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v7;
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v3 = *((_QWORD *)a1 + 2);
    }
  }
  result = *(WTF **)(v3 + 104);
  if (result)
  {
    *((_DWORD *)result + 26) = a2;
    *((_BYTE *)result + 108) = BYTE4(a2);
    return WebCore::ScrollSnapAnimatorState::updateCurrentlySnappedBoxes(result);
  }
  return result;
}

void WebCore::ScrollableArea::doPostThumbMoveSnapping(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  float v10;
  int v11;
  int v12;
  int v13;
  float v14;
  unint64_t v15;
  int v16;
  float v17;
  int v18;
  int v19;
  int v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  int v37;
  int v38;
  int v39;

  v2 = a1[2];
  if (v2)
  {
    v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 416))(a1);
    v6 = a1[4];
    v7 = v6 + v5;
    v8 = ((v6 & 0xFFFFFFFF00000000) + v5) >> 32;
    v9 = *(_QWORD *)(v2 + 104);
    if (a2)
    {
      v10 = (float)(int)v8;
      if (v9)
      {
        v36 = (*(float (**)(_QWORD))(**(_QWORD **)(v2 + 88) + 160))(*(_QWORD *)(v2 + 88));
        v37 = v11;
        v38 = v12;
        v39 = v13;
        v14 = (*(float (**)(_QWORD))(**(_QWORD **)(v2 + 88) + 152))(*(_QWORD *)(v2 + 88));
        v10 = WebCore::ScrollSnapAnimatorState::adjustedScrollDestination(v9, 1, 0, (uint64_t)&v36, (float)v7, (float)(int)v8, 0.0, v14);
      }
      v15 = (int)v10;
      v16 = v7;
    }
    else
    {
      v17 = (float)v7;
      if (v9)
      {
        v36 = (*(float (**)(_QWORD))(**(_QWORD **)(v2 + 88) + 160))(*(_QWORD *)(v2 + 88));
        v37 = v18;
        v38 = v19;
        v39 = v20;
        v21 = (*(float (**)(_QWORD))(**(_QWORD **)(v2 + 88) + 152))(*(_QWORD *)(v2 + 88));
        v17 = WebCore::ScrollSnapAnimatorState::adjustedScrollDestination(v9, 0, 0, (uint64_t)&v36, (float)v7, (float)(int)v8, 0.0, v21);
      }
      v16 = (int)v17;
      v15 = v8;
    }
    if (v16 != v7 || (_DWORD)v15 != (_DWORD)v8)
    {
      v22 = a1[4];
      v23 = (float)(v16 - v22);
      v24 = (float)(int)(((v15 << 32) - (v22 & 0xFFFFFFFF00000000)) >> 32);
      v25 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 424))(*(_QWORD *)(v2 + 8));
      v26 = (float)(int)v25;
      v27 = (float)SHIDWORD(v25);
      v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8) + 432))(*(_QWORD *)(v2 + 8));
      v29 = (float)(int)v28;
      if (v23 < (float)(int)v28)
        v29 = v23;
      if (v29 <= v26)
        v30 = v26;
      else
        v30 = v29;
      if (v24 >= (float)SHIDWORD(v28))
        v31 = (float)SHIDWORD(v28);
      else
        v31 = v24;
      if (v31 <= v27)
        v32 = v27;
      else
        v32 = v31;
      v33 = *(float *)(v2 + 120);
      v34 = *(float *)(v2 + 124);
      v35 = *(_QWORD *)(v2 + 8);
      if (v30 != v33 || v32 != v34 || *(_BYTE *)(v35 + 47))
        WebCore::ScrollingEffectsController::startAnimatedScrollToDestination(v2 + 24, v33 + (float)*(int *)(v35 + 32), v34 + (float)*(int *)(v35 + 36), v30 + (float)*(int *)(v35 + 32), v32 + (float)*(int *)(v35 + 36));
    }
  }
}

uint64_t WebCore::ScrollableArea::isPinnedOnSide(uint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;

  switch(a2)
  {
    case 0:
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
      if (!v3 || !*(_BYTE *)(v3 + 136))
        goto LABEL_19;
      v4 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1) >> 32;
      v5 = (int)v4 <= (int)((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1) >> 32);
      goto LABEL_5;
    case 1:
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
      if (!v7 || !*(_BYTE *)(v7 + 136))
        goto LABEL_19;
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
      v9 = v8 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
      goto LABEL_15;
    case 2:
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
      if (!v10 || !*(_BYTE *)(v10 + 136))
        goto LABEL_19;
      v11 = (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1) >> 32;
      v9 = (int)v11 < (int)((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1) >> 32);
LABEL_15:
      result = !v9;
      break;
    case 3:
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
      if (v12 && *(_BYTE *)(v12 + 136))
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
        v5 = v13 <= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 424))(a1);
LABEL_5:
        result = v5;
      }
      else
      {
LABEL_19:
        result = 1;
      }
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

unint64_t WebCore::ScrollableArea::minimumScrollPosition(WebCore::ScrollableArea *this)
{
  return -*((_DWORD *)this + 8) - (*((_QWORD *)this + 4) & 0xFFFFFFFF00000000);
}

BOOL WebCore::ScrollableArea::scrolledToTop(WebCore::ScrollableArea *this)
{
  unint64_t v2;

  v2 = (unint64_t)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this) >> 32;
  return (int)v2 <= (int)((unint64_t)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this
                                                                                                 + 424))(this) >> 32);
}

BOOL WebCore::ScrollableArea::scrolledToBottom(WebCore::ScrollableArea *this)
{
  unint64_t v2;

  v2 = (unint64_t)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this) >> 32;
  return (int)v2 >= (int)((unint64_t)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this
                                                                                                 + 432))(this) >> 32);
}

BOOL WebCore::ScrollableArea::scrolledToLeft(WebCore::ScrollableArea *this)
{
  int v2;

  v2 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this);
  return v2 <= (*(int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 424))(this);
}

BOOL WebCore::ScrollableArea::scrolledToRight(WebCore::ScrollableArea *this)
{
  int v2;

  v2 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 416))(this);
  return v2 >= (*(int (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 432))(this);
}

uint64_t WebCore::ScrollableArea::visibleContentRectIncludingScrollbars(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 832))(a1, 1, a2);
}

unint64_t WebCore::ScrollableArea::visibleContentRectInternal(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  void *v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  if (a2)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 400))(a1);
    if (v3)
    {
      v4 = v3;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 272))(v3) & 1) == 0)
      {
        v11 = *(void **)(v4 + 40);
        if (v11)
        {
          if (objc_msgSend(*(id *)(v4 + 40), "conformsToProtocol:", &unk_1EE342188))
            v11 = (void *)objc_msgSend(v11, "superview");
          objc_msgSend(v11, "frame");
          x = v20.origin.x;
          y = v20.origin.y;
          width = v20.size.width;
          height = v20.size.height;
          CGRectGetMaxX(v20);
          v21.origin.x = x;
          v21.origin.y = y;
          v21.size.width = width;
          v21.size.height = height;
          CGRectGetMaxY(v21);
        }
      }
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
    if (v5)
    {
      v6 = v5;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5) & 1) == 0)
      {
        v7 = *(void **)(v6 + 40);
        if (v7)
        {
          if (objc_msgSend(*(id *)(v6 + 40), "conformsToProtocol:", &unk_1EE342188))
            v7 = (void *)objc_msgSend(v7, "superview");
          objc_msgSend(v7, "frame");
          v16 = v22.origin.x;
          v17 = v22.origin.y;
          v18 = v22.size.width;
          v19 = v22.size.height;
          CGRectGetMaxX(v22);
          v23.origin.x = v16;
          v23.origin.y = v17;
          v23.size.width = v18;
          v23.size.height = v19;
          CGRectGetMaxY(v23);
        }
      }
    }
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 416))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
  return v9 & 0xFFFFFFFF00000000 | v8;
}

unint64_t WebCore::ScrollableArea::constrainScrollPositionForOverhang(WebCore::ScrollableArea *this, const WebCore::LayoutRect *a2, const WebCore::LayoutSize *a3, const WebCore::LayoutPoint *a4, const WebCore::LayoutPoint *a5, int a6)
{
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;

  v6 = *(_DWORD *)a2;
  v7 = *((_DWORD *)a2 + 1);
  if (*(_DWORD *)a2 >= *((_DWORD *)this + 2))
    v8 = *((_DWORD *)this + 2);
  else
    v8 = *(_DWORD *)a2;
  if ((signed int)v7 >= *((_DWORD *)this + 3))
    v9 = *((_DWORD *)this + 3);
  else
    v9 = *((_DWORD *)a2 + 1);
  v10 = *(_DWORD *)a3 + *(_DWORD *)a4;
  if (__OFADD__(*(_DWORD *)a3, *(_DWORD *)a4))
    v10 = (*(_DWORD *)a3 >> 31) + 0x7FFFFFFF;
  v11 = *((_DWORD *)a3 + 1);
  v12 = *((_DWORD *)a4 + 1);
  v13 = __OFADD__(v11, v12);
  v14 = v11 + v12;
  if (v13)
    v14 = (v11 >> 31) + 0x7FFFFFFF;
  v15 = (_DWORD)a5 << 6;
  if ((int)a5 < -33554432)
    v15 = 0x80000000;
  if ((int)a5 <= 0x1FFFFFF)
    v16 = v15;
  else
    v16 = 0x7FFFFFFF;
  v17 = v14 - v16;
  if (__OFSUB__(v14, v16))
    v17 = (v14 >> 31) + 0x7FFFFFFF;
  v13 = __OFSUB__(v7, v16);
  v18 = v7 - v16;
  if (v13)
    v18 = (v7 >> 31) + 0x7FFFFFFF;
  if (a6 >= -33554432)
    v19 = a6 << 6;
  else
    v19 = 0x80000000;
  if (a6 > 0x1FFFFFF)
    v19 = 0x7FFFFFFF;
  v13 = __OFSUB__(v18, v19);
  v20 = v18 - v19;
  if (v13)
    v20 = (v18 >> 31) + 0x7FFFFFFF;
  v21 = v10 + v8;
  if (__OFADD__(v10, v8))
    v21 = (v10 >> 31) + 0x7FFFFFFF;
  v22 = v10 & ~(v10 >> 31);
  if (v6 < v21)
    v21 = *(_DWORD *)a2;
  v23 = v17 + v9;
  if (__OFADD__(v17, v9))
    v23 = (v17 >> 31) + 0x7FFFFFFF;
  if (v20 >= v23)
    v24 = v23;
  else
    v24 = v20;
  if ((int)v22 >= v21 || (v25 = v17 & ~(v17 >> 31), (int)v25 >= v24))
  {
    v21 = 0;
    v24 = 0;
    v22 = 0;
    v25 = 0;
  }
  v26 = v21 - v22;
  if (__OFSUB__(v21, v22))
    v26 = (v21 >> 31) + 0x7FFFFFFF;
  v27 = v24 - v25;
  if (__OFSUB__(v24, (_DWORD)v25))
    v27 = (v24 >> 31) + 0x7FFFFFFF;
  if (v8 == v26 && v9 == v27)
  {
    v28 = v22 | (unint64_t)(v25 << 32);
  }
  else
  {
    v29 = v22 + v8;
    if (__OFADD__(v22, v8))
      v29 = 0x7FFFFFFF;
    if (v6 >= v29)
      v6 = v29;
    v30 = v25 + v9;
    if (__OFADD__((_DWORD)v25, v9))
      v30 = 0x7FFFFFFF;
    if (v20 >= v30)
      v20 = v30;
    if ((int)v22 >= v6 || (int)v25 >= v20)
    {
      v6 = 0;
      v20 = 0;
      v22 = 0;
      v25 = 0;
    }
    v31 = v6 - v22;
    if (__OFSUB__(v6, v22))
      v31 = (v6 >> 31) + 0x7FFFFFFF;
    v32 = v20 - v25;
    if (__OFSUB__(v20, (_DWORD)v25))
      v32 = (v20 >> 31) + 0x7FFFFFFF;
    if (v31 < v8)
    {
      v33 = v8 - v31;
      if (__OFSUB__(v8, v31))
        v33 = (v8 >> 31) + 0x7FFFFFFF;
      if (v33 == 0x80000000)
        v34 = 0x7FFFFFFF;
      else
        v34 = -v33;
      v13 = __OFADD__(v22, v34);
      v22 += v34;
      if (v13)
        v22 = 0x7FFFFFFF;
    }
    if (v32 >= (int)v9)
    {
      v28 = (v25 << 32) | v22;
    }
    else
    {
      v13 = __OFSUB__(v9, v32);
      v35 = v9 - v32;
      if (v13)
        v35 = (v9 >> 31) + 0x7FFFFFFF;
      if (v35 == 0x80000000)
        v36 = 0x7FFFFFFF;
      else
        v36 = -v35;
      v13 = __OFADD__((_DWORD)v25, v36);
      v37 = (v25 + v36);
      if (v13)
        v37 = 0x7FFFFFFFLL;
      v28 = v22 | (unint64_t)(v37 << 32);
    }
  }
  v38 = HIDWORD(v28);
  v39 = *((_DWORD *)a4 + 1);
  v13 = __OFSUB__((_DWORD)v28, *(_DWORD *)a4);
  v40 = v28 - *(_DWORD *)a4;
  LODWORD(v28) = (v28 >> 31) + 0x7FFFFFFF;
  if (v13)
    v28 = v28;
  else
    v28 = v40;
  v13 = __OFSUB__((_DWORD)v38, v39);
  v41 = v38 - v39;
  LODWORD(v38) = (v38 >> 31) + 0x7FFFFFFF;
  if (v13)
    v38 = v38;
  else
    v38 = v41;
  return v28 | (v38 << 32);
}

unint64_t WebCore::ScrollableArea::constrainScrollPositionForOverhang(WebCore::ScrollableArea *this, const WebCore::LayoutPoint *a2)
{
  int32x4_t v4;
  uint64_t v5;
  int32x4_t v6;
  int8x16_t v7;
  int32x4_t v8;
  int8x16_t v9;
  unint64_t v10;
  __int32 v11;
  unint64_t v12;
  int v13;
  int v14;
  int32x2_t v15;
  int8x8_t v16;
  int8x8_t v17;
  int32x2_t v18;
  int8x8_t v19;
  const WebCore::LayoutPoint *v20;
  int v21;
  int8x8_t v23;
  int8x8_t v24;
  int8x16_t v25;

  v4.i64[0] = (*(uint64_t (**)(WebCore::ScrollableArea *, _QWORD, _QWORD))(*(_QWORD *)this + 832))(this, 0, 0);
  v4.i64[1] = v5;
  v6.i64[0] = 0xFE000000FE000000;
  v6.i64[1] = 0xFE000000FE000000;
  v7 = (int8x16_t)vcgtq_s32(v4, v6);
  v8.i64[0] = 0xFE000000FE000000;
  v8.i64[1] = 0xFE000000FE000000;
  v9.i64[0] = 0x8000000080000000;
  v9.i64[1] = 0x8000000080000000;
  v25 = vorrq_s8((int8x16_t)(*(_OWORD *)&v7 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v8, v4), v9, (int8x16_t)vshlq_n_s32(v4, 6uLL)), v7));
  v10 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 496))(this);
  v11 = v10;
  v12 = HIDWORD(v10);
  v13 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 528))(this);
  v14 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 536))(this);
  v15.i32[0] = v11;
  v15.i32[1] = v13 + v14 + v12;
  v16 = (int8x8_t)vcgt_s32(v15, (int32x2_t)0xFE000000FE000000);
  v17 = vorr_s8((int8x8_t)(*(_QWORD *)&v16 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v15), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v15, 6uLL)), v16));
  v18 = *(int32x2_t *)((char *)this + 32);
  v19 = (int8x8_t)vcgt_s32(v18, (int32x2_t)0xFE000000FE000000);
  v23 = vorr_s8((int8x8_t)(*(_QWORD *)&v19 & 0x7FFFFFFF7FFFFFFFLL), vbic_s8(vbsl_s8((int8x8_t)vcgt_s32((int32x2_t)0xFE000000FE000000, v18), (int8x8_t)0x8000000080000000, (int8x8_t)vshl_n_s32(v18, 6uLL)), v19));
  v24 = v17;
  v20 = (const WebCore::LayoutPoint *)(*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 528))(this);
  v21 = (*(uint64_t (**)(WebCore::ScrollableArea *))(*(_QWORD *)this + 536))(this);
  return WebCore::ScrollableArea::constrainScrollPositionForOverhang((WebCore::ScrollableArea *)&v25, (const WebCore::LayoutRect *)&v24, a2, (const WebCore::LayoutPoint *)&v23, v20, v21);
}

float *WebCore::ScrollableArea::computeScrollbarValueAndOverhang(float *this, float a2, float a3, float a4, float *a5, float *a6)
{
  float v6;
  float v7;

  *a5 = 0.0;
  if (a2 < 0.0)
  {
    *this = 0.0;
    v7 = -a2;
LABEL_7:
    *a5 = v7;
    return this;
  }
  if ((float)(a2 + a4) > a3)
  {
    *this = 1.0;
    v7 = (float)(a2 + a4) - a3;
    goto LABEL_7;
  }
  v6 = a3 - a4;
  if (v6 <= 0.0)
    *this = 0.0;
  else
    *this = a2 / v6;
  return this;
}

unint64_t WebCore::ScrollableArea::getRectToExposeForScrollIntoView(uint64_t a1, int *a2, unsigned int *a3, int *a4, int *a5, uint64_t a6)
{
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  signed int v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  signed int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v40;
  signed int v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  signed int v52;
  unsigned int v53;
  BOOL v54;
  int v55;
  int v56;
  signed int v57;
  signed int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  BOOL v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;

  v6 = a4[1];
  if (*(_BYTE *)(a6 + 16))
  {
    v7 = *(_DWORD *)a6;
    v8 = *(_DWORD *)(a6 + 8);
  }
  else
  {
    v7 = *a3;
    v8 = a3[2];
  }
  v9 = __OFADD__(v7, v8);
  v10 = v7 + v8;
  v11 = (v7 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v11 = v10;
  v12 = *a2;
  if (v11 >= *a2)
  {
    v13 = a2[2];
    v14 = v12 + v13;
    v15 = __OFADD__(v12, v13);
    v16 = (v12 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__(v12, v13))
      v16 = v12 + v13;
    if (v7 <= v16)
    {
      if (v15)
        v14 = (v12 >> 31) + 0x7FFFFFFF;
      v17 = *a3;
      v18 = a3[2];
      v19 = *a3 + v18;
      if (__OFADD__(*a3, v18))
        v19 = (*a3 >> 31) + 0x7FFFFFFF;
      if (v19 < v14)
        v14 = v19;
      if ((int)v12 > v17)
        v17 = *a2;
      v9 = __OFSUB__(v14, v17);
      v20 = v14 - v17;
      v21 = (v14 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v21 = v20;
      v22 = v21 & ~(v21 >> 31);
      if (v22 != v18 && (v22 >= 0x800 ? (v62 = *((_BYTE *)a4 + 12) == 0) : (v62 = 1), v62))
      {
        if (v22 == v13)
        {
          v6 = *a4;
          if (*a4 == 1)
            goto LABEL_26;
        }
        else if (v21 >= 1)
        {
          v6 = a4[2];
        }
      }
      else
      {
        v6 = *a4;
      }
    }
  }
  if (!v6)
    goto LABEL_26;
  if (v6 == 6)
  {
    v40 = *a3;
    v41 = a3[2];
    v42 = *a3 + v41;
    v43 = __OFADD__(*a3, v41);
    if (__OFADD__(v40, v41))
      v44 = (v40 >> 31) + 0x7FFFFFFF;
    else
      v44 = *a3 + v41;
    v45 = a2[2];
    v9 = __OFADD__(v12, v45);
    v46 = v12 + v45;
    v47 = (v12 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v47 = v46;
    if (v44 <= v47 || v41 >= v45)
    {
      v12 = *a3;
      goto LABEL_26;
    }
LABEL_63:
    v48 = (v40 >> 31) + 0x7FFFFFFF;
    if (!v43)
      v48 = v42;
    v49 = a2[2];
    v9 = __OFSUB__(v48, v49);
    v50 = v48 - v49;
    v12 = (v48 >> 31) + 0x7FFFFFFF;
    if (!v9)
      v12 = v50;
    goto LABEL_26;
  }
  if (v6 != 1)
  {
    if (v6 != 5)
    {
      v12 = *a3;
      goto LABEL_26;
    }
    v40 = *a3;
    v79 = a3[2];
    v42 = *a3 + v79;
    v43 = __OFADD__(*a3, v79);
    goto LABEL_63;
  }
  v63 = *a3;
  v64 = a3[2];
  v65 = a2[2];
  v9 = __OFSUB__(v64, v65);
  v66 = v64 - v65;
  v67 = (v64 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v67 = v66;
  v9 = __OFADD__(v63, v67 / 2);
  v68 = v63 + v67 / 2;
  v12 = (v63 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v12 = v68;
LABEL_26:
  v23 = a5[1];
  if (*(_BYTE *)(a6 + 16))
  {
    v24 = *(_DWORD *)(a6 + 4);
    v25 = *(_DWORD *)(a6 + 12);
  }
  else
  {
    v24 = a3[1];
    v25 = a3[3];
  }
  v9 = __OFADD__(v24, v25);
  v26 = v24 + v25;
  v27 = (v24 >> 31) + 0x7FFFFFFF;
  if (!v9)
    v27 = v26;
  v28 = a2[1];
  if (v27 >= (int)v28)
  {
    v29 = a2[3];
    v30 = v28 + v29;
    v31 = __OFADD__((_DWORD)v28, v29);
    v32 = (v28 >> 31) + 0x7FFFFFFF;
    if (!__OFADD__((_DWORD)v28, v29))
      v32 = v28 + v29;
    if (v24 <= v32)
    {
      if (v31)
        v30 = (v28 >> 31) + 0x7FFFFFFF;
      v33 = a3[1];
      v34 = a3[3];
      v35 = v33 + v34;
      if (__OFADD__(v33, v34))
        v35 = (v33 >> 31) + 0x7FFFFFFF;
      if (v35 < (int)v30)
        v30 = v35;
      if ((int)v28 > v33)
        v33 = a2[1];
      v9 = __OFSUB__(v30, v33);
      v36 = v30 - v33;
      v37 = (v30 >> 31) + 0x7FFFFFFF;
      if (!v9)
        v37 = v36;
      v38 = v37 & ~(v37 >> 31);
      if (v38 == v34)
      {
        v23 = *a5;
      }
      else if (v38 == v29)
      {
        v23 = *a5;
        if (*a5 == 1)
          return v12 | (unint64_t)(v28 << 32);
      }
      else if (v37 >= 1)
      {
        v23 = a5[2];
      }
    }
  }
  if (v23)
  {
    switch(v23)
    {
      case 6:
        v51 = a3[1];
        v52 = a3[3];
        v53 = v51 + v52;
        v54 = __OFADD__(v51, v52);
        if (__OFADD__(v51, v52))
          v55 = (v51 >> 31) + 0x7FFFFFFF;
        else
          v55 = v51 + v52;
        v56 = a2[3];
        v9 = __OFADD__((_DWORD)v28, v56);
        v57 = v28 + v56;
        v58 = (v28 >> 31) + 0x7FFFFFFF;
        if (!v9)
          v58 = v57;
        if (v55 <= v58 || v52 >= v56)
        {
          v28 = a3[1];
          return v12 | (unint64_t)(v28 << 32);
        }
        break;
      case 1:
        v69 = a3[3];
        v70 = a2[3];
        v9 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        v72 = (v69 >> 31) + 0x7FFFFFFF;
        if (!v9)
          v72 = v71;
        if (v72 >= 0)
          v73 = v72;
        else
          v73 = v72 + 1;
        v74 = v73 >> 1;
        v75 = a3[1];
        v76 = -(-v74 >> 6);
        v77 = (v74 + 63) >> 6;
        if (v72 >= -1)
          v78 = v77;
        else
          v78 = v76;
        v9 = __OFADD__(v75, v78 << 6);
        LODWORD(v28) = v75 + (v78 << 6);
        if (v9)
          v28 = (v75 >> 31) + 0x7FFFFFFF;
        else
          v28 = v28;
        return v12 | (unint64_t)(v28 << 32);
      case 3:
        v51 = a3[1];
        v80 = a3[3];
        v53 = v51 + v80;
        v54 = __OFADD__(v51, v80);
        break;
      default:
        v28 = a3[1];
        return v12 | (unint64_t)(v28 << 32);
    }
    v59 = (v51 >> 31) + 0x7FFFFFFF;
    if (!v54)
      v59 = v53;
    v60 = a2[3];
    v9 = __OFSUB__(v59, v60);
    v61 = v59 - v60;
    LODWORD(v28) = (v59 >> 31) + 0x7FFFFFFF;
    if (v9)
      v28 = v28;
    else
      v28 = v61;
  }
  return v12 | (unint64_t)(v28 << 32);
}

uint64_t WebCore::Scrollbar::Scrollbar(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, char a6)
{
  unint64_t StatusReg;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)a1 = off_1E34069F8;
  *(_QWORD *)(a1 + 64) = a2;
  *(_BYTE *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 73) = a4;
  if (!a5)
  {
    {
      if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
      {
        a5 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
          goto LABEL_5;
        WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
        goto LABEL_18;
      }
    }
    else
    {
      WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
      *(_OWORD *)&byte_1ECE90A50 = 0u;
      qword_1ECE90A60 = 0;
      LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
      *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
      *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
      byte_1ECE90A56 = 1;
      *(_DWORD *)&algn_1ECE90A57 = 0;
      unk_1ECE90A5B = 0;
      byte_1ECE90A5D = 1;
      byte_1ECE90A5F = 1;
    }
    a5 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      goto LABEL_5;
    WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_18:
    *v17 = 1;
  }
LABEL_5:
  *(_QWORD *)(a1 + 80) = a5;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_DWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 121) = 0;
  *(_QWORD *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_BYTE *)(a1 + 137) = a6;
  *(_QWORD *)(a1 + 144) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 168) = 0uLL;
  v9 = *(unsigned int **)(StatusReg + 736);
  if (!v9)
    v9 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  *(_QWORD *)(a1 + 184) = v9;
  *(_QWORD *)(a1 + 144) = off_1E31F7378;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = off_1E3406CD8;
  v11[1] = WebCore::Scrollbar::autoscrollTimerFired;
  v11[2] = 0;
  v11[3] = a1;
  *(_QWORD *)(a1 + 192) = v11;
  *(_BYTE *)(a1 + 200) = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 216))(*(_QWORD *)(a1 + 80), a1);
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80), a4, 1);
  v18 = 0;
  v19 = v12;
  v20 = v12;
  WebCore::Widget::setFrameRect((WebCore::Widget *)a1, (const WebCore::IntRect *)&v18);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 64) + 408))(*(_QWORD *)(a1 + 64), a1);
  v13 = *(_QWORD **)(a1 + 64);
  v14 = (*(uint64_t (**)(_QWORD *))(*v13 + 416))(v13);
  v15 = v13[4];
  if (*(_BYTE *)(a1 + 72) == 1)
  {
    v15 = ((v15 & 0xFFFFFFFF00000000) + v14) >> 32;
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    LODWORD(v15) = 0;
  }
  else
  {
    LODWORD(v15) = v15 + v14;
  }
  *(float *)(a1 + 96) = (float)(int)v15;
  return a1;
}

uint64_t WebCore::Scrollbar::autoscrollTimerFired(WebCore::Scrollbar *this)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(**((_QWORD **)this + 10) + 208))(*((_QWORD *)this + 10));
  return WebCore::Scrollbar::autoscrollPressedPart((uint64_t)this, v2);
}

void WebCore::Scrollbar::~Scrollbar(WebCore::Scrollbar *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;

  *(_QWORD *)this = off_1E34069F8;
  v2 = (WebCore::Scrollbar *)((char *)this + 144);
  if ((*((_QWORD *)this + 22) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 22) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::Scrollbar *)((char *)this + 144));
  }
  (*(void (**)(_QWORD, WebCore::Scrollbar *))(**((_QWORD **)this + 10) + 224))(*((_QWORD *)this + 10), this);
  *((_QWORD *)this + 18) = off_1E31F7378;
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  *(_QWORD *)this = off_1E3355608;
  v5 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, v4);
      else
        --*(_DWORD *)v8;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;

  *(_QWORD *)this = off_1E34069F8;
  v2 = (WebCore::Scrollbar *)((char *)this + 144);
  if ((*((_QWORD *)this + 22) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 22) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::Scrollbar *)((char *)this + 144));
  }
  (*(void (**)(_QWORD, WebCore::Scrollbar *))(**((_QWORD **)this + 10) + 224))(*((_QWORD *)this + 10), this);
  *((_QWORD *)this + 18) = off_1E31F7378;
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  *(_QWORD *)this = off_1E3355608;
  v5 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, v4);
      else
        --*(_DWORD *)v8;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  const void *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;

  *(_QWORD *)this = off_1E34069F8;
  v2 = (WebCore::Scrollbar *)((char *)this + 144);
  if ((*((_QWORD *)this + 22) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 22) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::Scrollbar *)((char *)this + 144));
  }
  (*(void (**)(_QWORD, WebCore::Scrollbar *))(**((_QWORD **)this + 10) + 224))(*((_QWORD *)this + 10), this);
  *((_QWORD *)this + 18) = off_1E31F7378;
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  *(_QWORD *)this = off_1E3355608;
  v5 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    CFRelease(v5);
  v6 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  v7 = *((_QWORD *)this + 2);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (WTF *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
        WTF::fastFree(v8, v4);
      else
        --*(_DWORD *)v8;
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
  WTF::fastFree(this, v4);
}

uint64_t WebCore::Scrollbar::updateThumb(WebCore::Scrollbar *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 10);
  (*(void (**)(uint64_t, WebCore::Scrollbar *, uint64_t))(*(_QWORD *)v2 + 104))(v2, this, 4);
  (*(void (**)(uint64_t, WebCore::Scrollbar *, uint64_t))(*(_QWORD *)v2 + 104))(v2, this, 8);
  return (*(uint64_t (**)(uint64_t, WebCore::Scrollbar *, uint64_t))(*(_QWORD *)v2 + 104))(v2, this, 16);
}

void WebCore::Scrollbar::paint(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  const CGRect *v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  void *v17;
  CGRect v18;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80)))
  {
    WebCore::Widget::invalidate((id *)a1);
  }
  else if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) & 1) == 0)
  {
    v6 = *(void **)(a1 + 40);
    if (v6)
    {
      v17 = *(void **)(a1 + 40);
      if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE342188))
        objc_msgSend((id)objc_msgSend(v17, "superview"), "frame");
      else
        objc_msgSend(v17, "frame");
      v18.origin.x = v13;
      v18.origin.y = v14;
      v18.size.width = v15;
      v18.size.height = v16;
      v7 = WebCore::enclosingIntRect(&v18, v12);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 56);
    }
    if ((int)v8 >= 1 && SHIDWORD(v8) >= 1)
    {
      v9 = a3[2];
      if (v9 >= 1)
      {
        v10 = a3[3];
        if (v10 >= 1 && *a3 + v9 > (int)v7 && *a3 < (int)v8 + (int)v7)
        {
          v11 = a3[1];
          if (v11 + v10 > SHIDWORD(v7)
            && v11 < HIDWORD(v8) + HIDWORD(v7)
            && ((*(uint64_t (**)(_QWORD, uint64_t, uint64_t, int *))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), a1, a2, a3) & 1) == 0)
          {
            WebCore::Widget::paint(a1, a2, a3);
          }
        }
      }
    }
  }
}

uint64_t WebCore::Scrollbar::autoscrollPressedPart(uint64_t result, double a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v12;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;

  v3 = result;
  v4 = *(_DWORD *)(result + 120);
  HIDWORD(v5) = v4;
  LODWORD(v5) = v4;
  switch((v5 >> 2))
  {
    case 0u:
    case 2u:
      return result;
    case 1u:
    case 4u:
      v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 80) + 176))(*(_QWORD *)(result + 80), result);
      v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 80) + 160))(*(_QWORD *)(v3 + 80), v3) + v6;
      v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 80) + 168))(*(_QWORD *)(v3 + 80), v3);
      v9 = *(_DWORD *)(v3 + 124);
      if (v9 < v7 || v9 >= v8 + v7)
      {
        v4 = *(_DWORD *)(v3 + 120);
        goto LABEL_7;
      }
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 80) + 104))(*(_QWORD *)(v3 + 80), v3, *(unsigned int *)(v3 + 120));
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 248))(v3, 8);
      break;
    default:
LABEL_7:
      v12 = v4 > 0x20 || ((1 << v4) & 0x100000012) == 0;
      if (v4 > 0x20 || ((1 << v4) & 0x100000012) == 0)
        v14 = 3;
      else
        v14 = 2;
      if (*(_BYTE *)(v3 + 72))
        v15 = v12;
      else
        v15 = v14;
      v16 = v4 - 1;
      v17 = v16 > 0x3F || ((1 << v16) & 0x8000000080000003) == 0;
      result = WebCore::ScrollableArea::scroll(*(WebCore::ScrollableArea **)(v3 + 64), v15, v17, 1u);
      if ((_DWORD)result)
        result = WebCore::Scrollbar::startTimerIfNeeded(v3, a2);
      break;
  }
  return result;
}

uint64_t WebCore::Scrollbar::startTimerIfNeeded(uint64_t result, double a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  double v11;

  v3 = result;
  v4 = *(_DWORD *)(result + 120);
  switch(v4)
  {
    case 0x10u:
      goto LABEL_4;
    case 8u:
      return result;
    case 4u:
LABEL_4:
      v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 80) + 176))(*(_QWORD *)(result + 80), result);
      v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 80) + 160))(*(_QWORD *)(v3 + 80), v3) + v5;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 80) + 168))(*(_QWORD *)(v3 + 80), v3);
      v7 = *(_DWORD *)(v3 + 124);
      v8 = v7 >= v6 && v7 < (int)result + v6;
      if (v8)
      {
        (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 80) + 104))(*(_QWORD *)(v3 + 80), v3, *(unsigned int *)(v3 + 120));
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 248))(v3, 8);
      }
      v4 = *(_DWORD *)(v3 + 120);
      break;
  }
  v8 = v4 > 0x20;
  v9 = (1 << v4) & 0x100000012;
  if (!v8 && v9 != 0)
  {
    if (*(float *)(v3 + 96) == 0.0)
      return result;
LABEL_17:
    *(_QWORD *)(v3 + 168) = 0;
    WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
    return WebCore::TimerBase::setNextFireTime(v3 + 144, a2 + v11);
  }
  if (*(float *)(v3 + 96) != (float)(*(_DWORD *)(v3 + 92) - *(_DWORD *)(v3 + 88)))
    goto LABEL_17;
  return result;
}

uint64_t WebCore::Scrollbar::moveThumb(WebCore::Scrollbar *this, int a2, int a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  int v11;
  int v12;
  int v13;
  uint64_t result;
  int v15;
  int v16;
  uint64_t v17;

  v5 = a2 - *((_DWORD *)this + 31);
  if (!a3)
  {
    if (*((_BYTE *)this + 128))
    {
      v5 = a2 - *((_DWORD *)this + 33);
      *((_BYTE *)this + 128) = 0;
    }
    v12 = (*(uint64_t (**)(_QWORD, WebCore::Scrollbar *))(**((_QWORD **)this + 10) + 160))(*((_QWORD *)this + 10), this);
    v13 = (*(uint64_t (**)(_QWORD, WebCore::Scrollbar *))(**((_QWORD **)this + 10) + 168))(*((_QWORD *)this + 10), this);
    result = (*(uint64_t (**)(_QWORD, WebCore::Scrollbar *))(**((_QWORD **)this + 10) + 184))(*((_QWORD *)this + 10), this);
    v15 = result - v13;
    if (v5 < 1)
    {
      if ((v5 & 0x80000000) == 0)
        return result;
      v16 = -v12;
      if (v5 > -v12)
        return WebCore::ScrollableArea::scrollToOffsetWithoutAnimation(*((WebCore::ScrollAnimator **)this + 8), *((unsigned __int8 *)this + 72), (float)((float)(v5 + v12) * (float)(*((_DWORD *)this + 23) - *((_DWORD *)this + 22))) / (float)v15);
    }
    else
    {
      v16 = v15 - v12;
      if (v5 < v15 - v12)
        return WebCore::ScrollableArea::scrollToOffsetWithoutAnimation(*((WebCore::ScrollAnimator **)this + 8), *((unsigned __int8 *)this + 72), (float)((float)(v5 + v12) * (float)(*((_DWORD *)this + 23) - *((_DWORD *)this + 22))) / (float)v15);
    }
    v5 = v16;
    if (!v16)
      return result;
    return WebCore::ScrollableArea::scrollToOffsetWithoutAnimation(*((WebCore::ScrollAnimator **)this + 8), *((unsigned __int8 *)this + 72), (float)((float)(v5 + v12) * (float)(*((_DWORD *)this + 23) - *((_DWORD *)this + 22))) / (float)v15);
  }
  if (*((_BYTE *)this + 128))
    v5 = a2 - *((_DWORD *)this + 33);
  *((_BYTE *)this + 128) = 1;
  v6 = *((_QWORD *)this + 8);
  v7 = *(_QWORD *)(v6 + 16);
  if (!v7)
  {
    WebCore::ScrollAnimator::create(*((WebCore::ScrollAnimator **)this + 8), &v17);
    v7 = v17;
    v8 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 16) = v17;
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v7 = *(_QWORD *)(v6 + 16);
    }
  }
  v9 = (float *)(v7 + 120);
  v10 = (float *)(v7 + 124);
  if (!*((_BYTE *)this + 72))
    v10 = v9;
  v11 = (int)(float)(*v10 + (float)v5);
  if (v5 < 1)
  {
    if (v5 < 0)
      v11 = (v5 + v11) & ~((v5 + v11) >> 31);
  }
  else
  {
    v11 += v5;
    if (*((_DWORD *)this + 23) - *((_DWORD *)this + 22) < v11)
      v11 = *((_DWORD *)this + 23) - *((_DWORD *)this + 22);
  }
  result = WebCore::ScrollableArea::scrollToOffsetWithoutAnimation(*((WebCore::ScrollAnimator **)this + 8), *((unsigned __int8 *)this + 72), (float)v11);
  *((_DWORD *)this + 33) = a2;
  return result;
}

uint64_t WebCore::Scrollbar::setHoveredPart(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  CGFloat v9;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unsigned int v13;
  float MaxX;
  unsigned int v15;
  double MaxY;
  void *v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  unsigned int v23;
  float v24;
  uint64_t v25;
  _QWORD v26[2];
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  v2 = *(_DWORD *)(result + 116);
  if (v2 != (_DWORD)a2)
  {
    v4 = result;
    if ((_DWORD)a2 && v2
      || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 80) + 96))(*(_QWORD *)(result + 80)),
          !(_DWORD)result))
    {
      if (!*(_DWORD *)(v4 + 120))
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 80) + 104))(*(_QWORD *)(v4 + 80), v4, a2);
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 80) + 104))(*(_QWORD *)(v4 + 80), v4, *(unsigned int *)(v4 + 116));
      }
      goto LABEL_11;
    }
    v5 = *(void **)(v4 + 40);
    if (v5)
    {
      if (objc_msgSend(*(id *)(v4 + 40), "conformsToProtocol:", &unk_1EE342188))
        v5 = (void *)objc_msgSend(v5, "superview");
      objc_msgSend(v5, "frame");
      v9 = v8;
      y = v27.origin.y;
      width = v27.size.width;
      height = v27.size.height;
      *(float *)&v8 = v8;
      v13 = vcvtms_s32_f32(*(float *)&v8);
      v27.origin.x = v9;
      MaxX = CGRectGetMaxX(v27);
      v15 = vcvtps_s32_f32(MaxX);
      v28.origin.x = v9;
      v28.origin.y = y;
      v28.size.width = width;
      v28.size.height = height;
      MaxY = CGRectGetMaxY(v28);
      v25 = v15 - v13;
      v17 = *(void **)(v4 + 40);
      if (v17)
      {
        if (objc_msgSend(*(id *)(v4 + 40), "conformsToProtocol:", &unk_1EE342188, MaxY))
          v17 = (void *)objc_msgSend(v17, "superview");
        objc_msgSend(v17, "frame");
        v19 = v18;
        v20 = v29.origin.y;
        v21 = v29.size.width;
        v22 = v29.size.height;
        *(float *)&v18 = v29.origin.y;
        v23 = vcvtms_s32_f32(*(float *)&v18);
        v29.origin.x = v19;
        CGRectGetMaxX(v29);
        v30.origin.x = v19;
        v30.origin.y = v20;
        v30.size.width = v21;
        v30.size.height = v22;
        v24 = CGRectGetMaxY(v30);
        v7 = (unint64_t)(vcvtps_s32_f32(v24) - v23) << 32;
        v6 = v25;
        goto LABEL_8;
      }
      v6 = v25;
    }
    else
    {
      v6 = *(unsigned int *)(v4 + 56);
    }
    v7 = *(_QWORD *)(v4 + 56);
LABEL_8:
    v26[0] = 0;
    v26[1] = v7 & 0xFFFFFFFF00000000 | v6;
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 32))(v4, v26);
LABEL_11:
    *(_DWORD *)(v4 + 116) = a2;
  }
  return result;
}

uint64_t WebCore::Scrollbar::setPressedPart(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);

  v3 = result;
  if (*(_DWORD *)(result + 120))
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 80) + 104))(*(_QWORD *)(result + 80), result);
  *(_DWORD *)(v3 + 120) = a2;
  if (a2)
  {
    v4 = *(uint64_t (**)(void))(**(_QWORD **)(v3 + 80) + 104);
  }
  else
  {
    if (!*(_DWORD *)(v3 + 116))
      return result;
    v4 = *(uint64_t (**)(void))(**(_QWORD **)(v3 + 80) + 104);
  }
  return v4();
}

uint64_t WebCore::Scrollbar::mouseEntered(WebCore::Scrollbar *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = v2[3];
  if (!v3)
  {
    if ((*(unsigned int (**)(_QWORD *))(*v2 + 688))(v2))
    {
      v7 = WTF::fastMalloc((WTF *)0x30);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3406CB0;
      v8[1] = v2;
      v5 = 1;
      *(_BYTE *)(v7 + 16) = 1;
      *(_QWORD *)v7 = off_1E341C188;
      *(_QWORD *)(v7 + 8) = v2;
      *(_QWORD *)(v7 + 24) = v8;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      v6 = (_QWORD *)v2[3];
      v2[3] = v7;
      if (!v6)
      {
        v3 = v7;
        return (*(uint64_t (**)(uint64_t, WebCore::Scrollbar *))(*(_QWORD *)v3 + 112))(v3, this);
      }
    }
    else
    {
      v5 = 38;
      v6 = v2;
    }
    (*(void (**)(void))(*v6 + 8 * v5))();
    v3 = v2[3];
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E8910);
    }
  }
  return (*(uint64_t (**)(uint64_t, WebCore::Scrollbar *))(*(_QWORD *)v3 + 112))(v3, this);
}

uint64_t WebCore::Scrollbar::mouseExited(WebCore::Scrollbar *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = v2[3];
  if (!v3)
  {
    if ((*(unsigned int (**)(_QWORD *))(*v2 + 688))(v2))
    {
      v7 = WTF::fastMalloc((WTF *)0x30);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3406CB0;
      v8[1] = v2;
      v5 = 1;
      *(_BYTE *)(v7 + 16) = 1;
      *(_QWORD *)v7 = off_1E341C188;
      *(_QWORD *)(v7 + 8) = v2;
      *(_QWORD *)(v7 + 24) = v8;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      v6 = (_QWORD *)v2[3];
      v2[3] = v7;
      if (!v6)
      {
        v3 = v7;
        goto LABEL_2;
      }
    }
    else
    {
      v5 = 38;
      v6 = v2;
    }
    (*(void (**)(void))(*v6 + 8 * v5))();
    v3 = v2[3];
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E8A0CLL);
    }
  }
LABEL_2:
  (*(void (**)(uint64_t, WebCore::Scrollbar *))(*(_QWORD *)v3 + 120))(v3, this);
  (*(void (**)(WebCore::Scrollbar *, _QWORD))(*(_QWORD *)this + 248))(this, 0);
  return 1;
}

uint64_t WebCore::Scrollbar::mouseUp(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;

  v4 = *(_DWORD *)(a1 + 120);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 256))(a1, 0);
  *(_DWORD *)(a1 + 124) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if ((*(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 144));
  }
  v5 = *(_QWORD **)(a1 + 64);
  v6 = v5[3];
  if (!v6)
  {
    if ((*(unsigned int (**)(_QWORD))(*v5 + 688))(*(_QWORD *)(a1 + 64)))
    {
      v17 = v4;
      v14 = WTF::fastMalloc((WTF *)0x30);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E3406CB0;
      v15[1] = v5;
      v10 = 1;
      *(_BYTE *)(v14 + 16) = 1;
      *(_QWORD *)v14 = off_1E341C188;
      *(_QWORD *)(v14 + 8) = v5;
      *(_QWORD *)(v14 + 24) = v15;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = 0;
      v11 = (_QWORD *)v5[3];
      v5[3] = v14;
      if (!v11)
      {
        v6 = v14;
        v4 = v17;
        goto LABEL_3;
      }
      v4 = v17;
    }
    else
    {
      v10 = 38;
      v11 = v5;
    }
    (*(void (**)(void))(*v11 + 8 * v10))();
    v6 = v5[3];
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E8B7CLL);
    }
  }
LABEL_3:
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 128))(v6, a1, 0);
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80), a1, a2 + 52))
  {
    goto LABEL_6;
  }
  v7 = *(_QWORD **)(a1 + 64);
  v8 = v7[3];
  if (!v8)
  {
    if ((*(unsigned int (**)(_QWORD))(*v7 + 688))(*(_QWORD *)(a1 + 64)))
    {
      v8 = WTF::fastMalloc((WTF *)0x30);
      v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v16 = off_1E3406CB0;
      v16[1] = v7;
      v12 = 1;
      *(_BYTE *)(v8 + 16) = 1;
      *(_QWORD *)v8 = off_1E341C188;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 24) = v16;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      v13 = (_QWORD *)v7[3];
      v7[3] = v8;
      if (!v13)
        goto LABEL_5;
    }
    else
    {
      v12 = 38;
      v13 = v7;
    }
    (*(void (**)(void))(*v13 + 8 * v12))();
    v8 = v7[3];
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E8BCCLL);
    }
  }
LABEL_5:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 120))(v8, a1);
LABEL_6:
  if (v4 == 8)
    WebCore::ScrollableArea::doPostThumbMoveSnapping(*(_QWORD **)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  return 1;
}

uint64_t WebCore::Scrollbar::mouseDown(uint64_t a1, uint64_t a2)
{
  const WebCore::IntPoint *v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  const WebCore::IntPoint *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  double v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;

  v4 = (const WebCore::IntPoint *)(a2 + 52);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 32))(*(_QWORD *)(a1 + 80), a1, a2 + 52);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 80) + 136))(*(_QWORD *)(a1 + 80), a1, a2, v5);
  if (!v6)
    return 1;
  v7 = v6;
  v8 = *(_QWORD **)(a1 + 64);
  v9 = v8[3];
  if (!v9)
  {
    if ((*(unsigned int (**)(_QWORD))(*v8 + 688))(*(_QWORD *)(a1 + 64)))
    {
      v22 = WTF::fastMalloc((WTF *)0x30);
      v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v23 = off_1E3406CB0;
      v23[1] = v8;
      v20 = 1;
      *(_BYTE *)(v22 + 16) = 1;
      *(_QWORD *)v22 = off_1E341C188;
      *(_QWORD *)(v22 + 8) = v8;
      *(_QWORD *)(v22 + 24) = v23;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 40) = 0;
      v21 = (_QWORD *)v8[3];
      v8[3] = v22;
      if (!v21)
      {
        v9 = v22;
        goto LABEL_3;
      }
    }
    else
    {
      v20 = 38;
      v21 = v8;
    }
    (*(void (**)(void))(*v21 + 8 * v20))();
    v9 = v8[3];
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x1960E8E84);
    }
  }
LABEL_3:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 128))(v9, a1, 1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, v5);
  v10 = *(unsigned __int8 *)(a1 + 72);
  v12 = WebCore::Widget::convertFromContainingWindow((WebCore::Widget *)a1, v4, v11);
  if (v10)
    v13 = HIDWORD(v12);
  else
    v13 = v12;
  if (v7 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 248))(a1, 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, 8);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 96);
    v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 176))(*(_QWORD *)(a1 + 80), a1);
    v15 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 160))(*(_QWORD *)(a1 + 80), a1) + v14;
    v16 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 80) + 168))(*(_QWORD *)(a1 + 80), a1);
    if (v16 >= 0)
      v17 = v16;
    else
      v17 = v16 + 1;
    *(_DWORD *)(a1 + 124) = v15 + (v17 >> 1);
    WebCore::Scrollbar::moveThumb((WebCore::Scrollbar *)a1, v13, 0);
  }
  else
  {
    *(_DWORD *)(a1 + 124) = v13;
    if (v7 == 3)
    {
      v18 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 200))(*(_QWORD *)(a1 + 80));
      WebCore::Scrollbar::autoscrollPressedPart(a1, v18);
    }
    else if (v7 == 2)
    {
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a1 + 96);
    }
  }
  return 1;
}

uint64_t WebCore::Scrollbar::isMockScrollbar(WebCore::Scrollbar *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 240))(*((_QWORD *)this + 10));
}

uint64_t WebCore::Scrollbar::convertToContainingView(WebCore::Scrollbar *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::Scrollbar *, const WebCore::IntRect *))(**((_QWORD **)this + 8)
                                                                                           + 360))(*((_QWORD *)this + 8), this, a2);
}

uint64_t WebCore::Scrollbar::convertFromContainingView(WebCore::Scrollbar *this, const WebCore::IntRect *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::Scrollbar *, const WebCore::IntRect *))(**((_QWORD **)this + 8)
                                                                                           + 368))(*((_QWORD *)this + 8), this, a2);
}

uint64_t WebCore::Scrollbar::convertToContainingView(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 376))(*(_QWORD *)(a1 + 64), a1, a2);
}

uint64_t WebCore::Scrollbar::convertFromContainingView(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 384))(*(_QWORD *)(a1 + 64), a1, a2);
}

uint64_t WebCore::ScrollbarTheme::handleMousePressEvent(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int v4;

  if (a4 == 8)
    v4 = 2;
  else
    v4 = 3;
  if (*(_BYTE *)(a3 + 48) == 2)
    return 0;
  else
    return v4;
}

uint64_t WebCore::ScrollbarThemeComposite::paint(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  _QWORD v47[2];
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v61 = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  v57 = 0;
  v58 = 0;
  v55 = 0;
  v56 = 0;
  if ((*(unsigned int (**)(WebCore::ScrollbarThemeComposite *))(*(_QWORD *)this + 248))(this))
  {
    v8 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, uint64_t, uint64_t))(*(_QWORD *)this + 264))(this, a2, 1, 1);
    v61 = v8;
    v62 = v9;
    v10 = *((_DWORD *)a4 + 2);
    v16 = v10 >= 1
       && (v11 = *((_DWORD *)a4 + 3), v11 >= 1)
       && ((int)v9 >= 1 ? (v12 = SHIDWORD(v9) < 1) : (v12 = 1),
           !v12
        && ((v13 = *(_DWORD *)a4 + v10, *(_DWORD *)a4 < (int)v8 + (int)v9) ? (v14 = v13 <= (int)v8) : (v14 = 1),
            !v14 && (v15 = *((_DWORD *)a4 + 1), v15 < HIDWORD(v8) + HIDWORD(v9))))
       && v15 + v11 > SHIDWORD(v8);
    v17 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, uint64_t, uint64_t))(*(_QWORD *)this + 264))(this, a2, 32, 1);
    v59 = v17;
    v60 = v18;
    v19 = *((_DWORD *)a4 + 2);
    if (v19 >= 1)
    {
      v20 = *((_DWORD *)a4 + 3);
      if (v20 >= 1 && (int)v18 >= 1 && SHIDWORD(v18) >= 1)
      {
        v21 = *(_DWORD *)a4 + v19;
        if (*(_DWORD *)a4 < (int)v17 + (int)v18 && v21 > (int)v17)
        {
          v23 = *((_DWORD *)a4 + 1);
          if (v23 < HIDWORD(v17) + HIDWORD(v18) && v23 + v20 > SHIDWORD(v17))
            v16 |= 0x20u;
        }
      }
    }
    v24 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, uint64_t, uint64_t))(*(_QWORD *)this + 272))(this, a2, 2, 1);
    v57 = v24;
    v58 = v25;
    v26 = *((_DWORD *)a4 + 2);
    if (v26 >= 1)
    {
      v27 = *((_DWORD *)a4 + 3);
      if (v27 >= 1
        && (int)v25 >= 1
        && SHIDWORD(v25) >= 1
        && *(_DWORD *)a4 < (int)v24 + (int)v25
        && *(_DWORD *)a4 + v26 > (int)v24)
      {
        v28 = *((_DWORD *)a4 + 1);
        if (v28 < HIDWORD(v24) + HIDWORD(v25) && v28 + v27 > SHIDWORD(v24))
          v16 |= 2u;
      }
    }
    v29 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, uint64_t, uint64_t))(*(_QWORD *)this + 272))(this, a2, 64, 1);
    v55 = v29;
    v56 = v30;
    v31 = *((_DWORD *)a4 + 2);
    if (v31 >= 1)
    {
      v32 = *((_DWORD *)a4 + 3);
      if (v32 >= 1
        && (int)v30 >= 1
        && SHIDWORD(v30) >= 1
        && *(_DWORD *)a4 < (int)v29 + (int)v30
        && *(_DWORD *)a4 + v31 > (int)v29)
      {
        v33 = *((_DWORD *)a4 + 1);
        if (v33 < HIDWORD(v29) + HIDWORD(v30) && v33 + v32 > SHIDWORD(v29))
          v16 |= 0x40u;
      }
    }
  }
  else
  {
    v16 = 0;
  }
  v53 = 0;
  v54 = 0;
  v51 = 0;
  v52 = 0;
  v49 = 0;
  v50 = 0;
  v34 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, uint64_t))(*(_QWORD *)this + 280))(this, a2, 1);
  v48[0] = v34;
  v48[1] = v35;
  v36 = *((_DWORD *)a4 + 2);
  if (v36 >= 1)
  {
    v37 = *((_DWORD *)a4 + 3);
    if (v37 >= 1
      && (int)v35 >= 1
      && SHIDWORD(v35) >= 1
      && *(_DWORD *)a4 < (int)v34 + (int)v35
      && *(_DWORD *)a4 + v36 > (int)v34)
    {
      v38 = *((_DWORD *)a4 + 1);
      v39 = v38 + v37 <= SHIDWORD(v34) ? v16 : v16 | 0x100;
      if (v38 < HIDWORD(v34) + HIDWORD(v35))
        v16 = v39;
    }
  }
  if ((*(unsigned int (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *))(*(_QWORD *)this + 256))(this, a2))
  {
    v47[0] = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD))(*(_QWORD *)this + 280))(this, a2, 0);
    v47[1] = v40;
    (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)this + 296))(this, a2, v47, &v53, &v51, &v49);
    v41 = *((_DWORD *)a4 + 2);
    if (v41 >= 1)
    {
      v42 = *((_DWORD *)a4 + 3);
      if (v42 >= 1)
      {
        if ((int)v52 >= 1
          && SHIDWORD(v52) >= 1
          && *(_DWORD *)a4 < (int)v51 + (int)v52
          && (int)v51 < *(_DWORD *)a4 + v41)
        {
          v43 = *((_DWORD *)a4 + 1);
          if (v43 < HIDWORD(v51) + HIDWORD(v52) && SHIDWORD(v51) < v43 + v42)
            v16 |= 8u;
        }
        if ((int)v54 >= 1
          && SHIDWORD(v54) >= 1
          && *(_DWORD *)a4 < (int)v53 + (int)v54
          && (int)v53 < *(_DWORD *)a4 + v41)
        {
          v44 = *((_DWORD *)a4 + 1);
          if (v44 < HIDWORD(v53) + HIDWORD(v54) && SHIDWORD(v53) < v44 + v42)
            v16 |= 4u;
        }
        if ((int)v50 >= 1
          && SHIDWORD(v50) >= 1
          && *(_DWORD *)a4 < (int)v49 + (int)v50
          && (int)v49 < *(_DWORD *)a4 + v41)
        {
          v45 = *((_DWORD *)a4 + 1);
          if (v45 < HIDWORD(v49) + HIDWORD(v50) && SHIDWORD(v49) < v45 + v42)
            v16 |= 0x10u;
        }
      }
    }
  }
  (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *))(*(_QWORD *)this + 312))(this, a3, a2);
  (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *))(*(_QWORD *)this + 328))(this, a3, a2);
  if ((v16 & 1) != 0)
  {
    (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *, uint64_t *, uint64_t))(*(_QWORD *)this + 352))(this, a3, a2, &v61, 1);
    if ((v16 & 0x20) == 0)
    {
LABEL_82:
      if ((v16 & 2) == 0)
        goto LABEL_83;
      goto LABEL_97;
    }
  }
  else if ((v16 & 0x20) == 0)
  {
    goto LABEL_82;
  }
  (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *, uint64_t *, uint64_t))(*(_QWORD *)this + 352))(this, a3, a2, &v59, 32);
  if ((v16 & 2) == 0)
  {
LABEL_83:
    if ((v16 & 0x40) == 0)
      goto LABEL_84;
    goto LABEL_98;
  }
LABEL_97:
  (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *, uint64_t *, uint64_t))(*(_QWORD *)this + 352))(this, a3, a2, &v57, 2);
  if ((v16 & 0x40) == 0)
  {
LABEL_84:
    if ((v16 & 0x100) == 0)
      goto LABEL_86;
    goto LABEL_85;
  }
LABEL_98:
  (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *, uint64_t *, uint64_t))(*(_QWORD *)this + 352))(this, a3, a2, &v55, 64);
  if ((v16 & 0x100) != 0)
LABEL_85:
    (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *, _QWORD *))(*(_QWORD *)this + 336))(this, a3, a2, v48);
LABEL_86:
  if ((v16 & 0x14) != 0)
  {
    if ((v16 & 4) != 0)
      (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *, uint64_t *, uint64_t))(*(_QWORD *)this + 344))(this, a3, a2, &v53, 4);
    if ((v16 & 0x10) != 0)
      (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *, uint64_t *, uint64_t))(*(_QWORD *)this + 344))(this, a3, a2, &v49, 16);
    (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *, _QWORD *))(*(_QWORD *)this + 120))(this, a3, a2, v48);
  }
  if ((v16 & 8) != 0)
    (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *, uint64_t *))(*(_QWORD *)this + 360))(this, a3, a2, &v51);
  (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::GraphicsContext *, WebCore::Scrollbar *))(*(_QWORD *)this + 320))(this, a3, a2);
  return 1;
}

uint64_t WebCore::ScrollbarThemeComposite::hitTest(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  char **v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  CGFloat v35;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MaxY;
  uint64_t v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  uint64_t v46;
  double v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  float MaxX;
  unsigned int v53;
  float v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[2];
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;

  if (!*((_BYTE *)a2 + 136))
    return 0;
  v6 = WebCore::Widget::convertFromContainingWindow(a2, a3, a3);
  v7 = v6;
  v8 = (void *)*((_QWORD *)a2 + 5);
  if (!v8)
  {
    v9 = *((_DWORD *)a2 + 12);
LABEL_4:
    v10 = *((_QWORD *)a2 + 6);
    goto LABEL_5;
  }
  v56 = v6;
  v3 = &selRef_setVideoElement_;
  if (objc_msgSend(v8, "conformsToProtocol:", &unk_1EE342188))
    v8 = (void *)objc_msgSend(v8, "superview");
  objc_msgSend(v8, "frame");
  v35 = v34;
  y = v65.origin.y;
  width = v65.size.width;
  height = v65.size.height;
  *(float *)&v34 = v34;
  v9 = vcvtms_s32_f32(*(float *)&v34);
  v65.origin.x = v35;
  CGRectGetMaxX(v65);
  v66.origin.x = v35;
  v66.origin.y = y;
  v66.size.width = width;
  v66.size.height = height;
  MaxY = CGRectGetMaxY(v66);
  v40 = *((_QWORD *)a2 + 5);
  if (!v40)
  {
    v7 = v56;
    goto LABEL_4;
  }
  if (objc_msgSend(*((id *)a2 + 5), "conformsToProtocol:", &unk_1EE342188, MaxY))
    v40 = objc_msgSend((id)v40, "superview");
  objc_msgSend((id)v40, "frame");
  v42 = v41;
  v43 = v67.origin.y;
  v44 = v67.size.width;
  v45 = v67.size.height;
  *(float *)&v41 = v67.origin.y;
  LODWORD(v40) = vcvtms_s32_f32(*(float *)&v41);
  v67.origin.x = v42;
  CGRectGetMaxX(v67);
  v68.origin.x = v42;
  v68.origin.y = v43;
  v68.size.width = v44;
  v68.size.height = v45;
  CGRectGetMaxY(v68);
  v10 = v40 << 32;
  v7 = v56;
LABEL_5:
  v11 = *((_QWORD *)a2 + 5);
  if (v11)
  {
    v55 = v9;
    v57 = HIDWORD(v10);
    v46 = v7;
    if (objc_msgSend((id)v11, "conformsToProtocol:", &unk_1EE342188))
      v11 = objc_msgSend((id)v11, "superview");
    objc_msgSend((id)v11, "frame");
    v48 = v47;
    v49 = v69.origin.y;
    v50 = v69.size.width;
    v51 = v69.size.height;
    *(float *)&v47 = v47;
    LODWORD(v11) = vcvtms_s32_f32(*(float *)&v47);
    *(float *)&v47 = v69.origin.y;
    LODWORD(v3) = vcvtms_s32_f32(*(float *)&v47);
    v69.origin.x = v48;
    MaxX = CGRectGetMaxX(v69);
    v53 = vcvtps_s32_f32(MaxX);
    v70.origin.x = v48;
    v70.origin.y = v49;
    v70.size.width = v50;
    v70.size.height = v51;
    v54 = CGRectGetMaxY(v70);
    v12 = v11 | ((_QWORD)v3 << 32);
    v13 = (v53 - v11) | ((unint64_t)(vcvtps_s32_f32(v54) - v3) << 32);
    v7 = v46;
    v9 = v55;
    HIDWORD(v10) = v57;
  }
  else
  {
    v12 = *((_QWORD *)a2 + 6);
    v13 = *((_QWORD *)a2 + 7);
  }
  result = 0;
  v15 = v9 + v7;
  if (v15 < (int)v12 || (int)v13 + (int)v12 <= v15)
    return result;
  v16 = HIDWORD(v10) + HIDWORD(v7);
  if (HIDWORD(v10) + HIDWORD(v7) < SHIDWORD(v12) || HIDWORD(v13) + HIDWORD(v12) <= v16)
    return 0;
  v17 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD))(*(_QWORD *)this + 280))(this, a2, 0);
  v64[0] = v17;
  v64[1] = v18;
  if (v15 < (int)v17 || (int)v18 + (int)v17 <= v15 || v16 < SHIDWORD(v17) || HIDWORD(v18) + HIDWORD(v17) <= v16)
  {
    v19 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, uint64_t, _QWORD))(*(_QWORD *)this + 264))(this, a2, 1, 0);
    if (v15 >= (int)v19 && v20 + (int)v19 > v15 && v16 >= SHIDWORD(v19) && v21 + HIDWORD(v19) > v16)
      return 1;
    v24 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, uint64_t, _QWORD))(*(_QWORD *)this + 264))(this, a2, 32, 0);
    if (v15 >= (int)v24 && v25 + (int)v24 > v15 && v16 >= SHIDWORD(v24) && v26 + HIDWORD(v24) > v16)
      return 32;
    v27 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, uint64_t, _QWORD))(*(_QWORD *)this + 272))(this, a2, 2, 0);
    if (v15 >= (int)v27 && v28 + (int)v27 > v15 && v16 >= SHIDWORD(v27) && v29 + HIDWORD(v27) > v16)
      return 2;
    v32 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, uint64_t, _QWORD))(*(_QWORD *)this + 272))(this, a2, 64, 0);
    result = 128;
    if (v15 >= (int)v32 && v30 + (int)v32 > v15)
    {
      v33 = HIDWORD(v32);
      if (v16 >= (int)v33)
      {
        v22 = v31 + (int)v33 <= v16;
        v23 = 64;
LABEL_50:
        if (v22)
          return result;
        else
          return v23;
      }
    }
  }
  else
  {
    v62 = 0;
    v63 = 0;
    v60 = 0;
    v61 = 0;
    v58 = 0;
    v59 = 0;
    (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)this + 296))(this, a2, v64, &v62, &v60, &v58);
    if ((int)v60 <= v15 && (int)v61 + (int)v60 > v15 && SHIDWORD(v60) <= v16 && HIDWORD(v61) + HIDWORD(v60) > v16)
      return 8;
    if ((int)v62 <= v15 && (int)v63 + (int)v62 > v15 && SHIDWORD(v62) <= v16 && HIDWORD(v63) + HIDWORD(v62) > v16)
      return 4;
    if ((int)v58 > v15 || (int)v59 + (int)v58 <= v15)
      return 256;
    result = 256;
    if (SHIDWORD(v58) <= v16)
    {
      v22 = HIDWORD(v59) + HIDWORD(v58) <= v16;
      v23 = 16;
      goto LABEL_50;
    }
  }
  return result;
}

uint64_t WebCore::ScrollbarThemeComposite::minimumThumbLength(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2)
{
  return (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, _QWORD, uint64_t))(*(_QWORD *)this + 40))(this, *((unsigned __int8 *)a2 + 73), 1);
}

uint64_t WebCore::ScrollbarThemeComposite::trackPosition(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2)
{
  WebCore::Scrollbar *v2;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  CGFloat v11;
  CGFloat v12;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  unint64_t v21;
  int v22;
  _QWORD v23[2];
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;

  v2 = a2;
  v23[0] = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD))(*(_QWORD *)this + 280))(this, a2, 0);
  v23[1] = v4;
  v5 = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD *))(*(_QWORD *)this + 368))(this, v2, v23);
  if (*((_BYTE *)v2 + 72))
  {
    v6 = (void *)*((_QWORD *)v2 + 5);
    if (v6)
    {
      v21 = v5;
      if (objc_msgSend(v6, "conformsToProtocol:", &unk_1EE342188))
        v6 = (void *)objc_msgSend(v6, "superview");
      objc_msgSend(v6, "frame");
      v12 = v11;
      y = v24.origin.y;
      width = v24.size.width;
      height = v24.size.height;
      *(float *)&v11 = v24.origin.y;
      LODWORD(v2) = vcvtms_s32_f32(*(float *)&v11);
      v24.origin.x = v12;
      CGRectGetMaxX(v24);
      v25.origin.x = v12;
      v25.origin.y = y;
      v25.size.width = width;
      v25.size.height = height;
      CGRectGetMaxY(v25);
      v7 = (_QWORD)v2 << 32;
      v5 = v21;
    }
    else
    {
      v7 = *((_QWORD *)v2 + 6);
    }
    v5 >>= 32;
    v8 = HIDWORD(v7);
  }
  else
  {
    v9 = (void *)*((_QWORD *)v2 + 5);
    if (v9)
    {
      v22 = v5;
      if (objc_msgSend(v9, "conformsToProtocol:", &unk_1EE342188))
        v9 = (void *)objc_msgSend(v9, "superview");
      objc_msgSend(v9, "frame");
      v17 = v16;
      v18 = v26.origin.y;
      v19 = v26.size.width;
      v20 = v26.size.height;
      *(float *)&v16 = v16;
      LODWORD(v8) = vcvtms_s32_f32(*(float *)&v16);
      v26.origin.x = v17;
      CGRectGetMaxX(v26);
      v27.origin.x = v17;
      v27.origin.y = v18;
      v27.size.width = v19;
      v27.size.height = v20;
      CGRectGetMaxY(v27);
      LODWORD(v5) = v22;
    }
    else
    {
      v8 = *((_QWORD *)v2 + 6);
    }
  }
  return (v5 - v8);
}

uint64_t WebCore::ScrollbarThemeComposite::thumbRect(WebCore::ScrollbarThemeComposite *this, WebCore::Scrollbar *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];
  _QWORD v8[2];
  _QWORD v9[2];

  if (!(*(unsigned int (**)(WebCore::ScrollbarThemeComposite *))(*(_QWORD *)this + 256))(this))
    return 0;
  v8[0] = (*(uint64_t (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD))(*(_QWORD *)this + 280))(this, a2, 0);
  v8[1] = v4;
  v7[0] = 0;
  v7[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v6[0] = 0;
  v6[1] = 0;
  (*(void (**)(WebCore::ScrollbarThemeComposite *, WebCore::Scrollbar *, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)this + 296))(this, a2, v8, v7, v9, v6);
  return v9[0];
}

unsigned int *WebCore::ScrollbarThemeComposite::paintOverhangAreas(WebCore::ScrollbarThemeComposite *this, WebCore::ScrollView *a2, WebCore::GraphicsContext *a3, const WebCore::IntRect *a4, const WebCore::IntRect *a5, const WebCore::IntRect *a6)
{
  void *v10;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  unsigned int *result;
  void *v23;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  float v42;
  float v43;

  v41 = 0x11040000FFFFFFFFLL;
  WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)&v41);
  if ((v41 & 0x8000000000000) != 0)
  {
    v36 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      WTF::fastFree((WTF *)v36, v10);
    }
  }
  if (*((int *)a4 + 2) >= 1 && *((_DWORD *)a4 + 3) >= 1)
  {
    v12 = *((_DWORD *)a4 + 1);
    v13 = *((_DWORD *)a6 + 1);
    if (*(_DWORD *)a4 <= *(_DWORD *)a6)
      v14 = *(_DWORD *)a6;
    else
      v14 = *(_DWORD *)a4;
    v15 = *((_DWORD *)a4 + 2) + *(_DWORD *)a4;
    v16 = *((_DWORD *)a6 + 3);
    if (v12 <= v13)
      v17 = *((_DWORD *)a6 + 1);
    else
      v17 = *((_DWORD *)a4 + 1);
    if (*((_DWORD *)a6 + 2) + *(_DWORD *)a6 < v15)
      v15 = *((_DWORD *)a6 + 2) + *(_DWORD *)a6;
    v18 = *((_DWORD *)a4 + 3) + v12;
    if (v16 + v13 < v18)
      v18 = v16 + v13;
    v19 = v14 < v15 && v17 < v18;
    if (v19)
      v20 = v14;
    else
      v20 = 0;
    if (v19)
      v21 = v17;
    else
      v21 = 0;
    if (!v19)
    {
      v15 = 0;
      v18 = 0;
    }
    *(float *)&v41 = (float)v20;
    *((float *)&v41 + 1) = (float)v21;
    v42 = (float)(v15 - v20);
    v43 = (float)(v18 - v21);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t *, uint64_t))(*(_QWORD *)a3 + 216))(a3, &v41, 1);
  }
  v41 = 0x11040000FFFFFFFFLL;
  result = (unsigned int *)WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)&v41);
  if ((v41 & 0x8000000000000) != 0)
  {
    result = (unsigned int *)(v41 & 0xFFFFFFFFFFFFLL);
    do
    {
      v39 = __ldaxr(result);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, result));
    if (!v40)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (*((int *)a5 + 2) >= 1 && *((_DWORD *)a5 + 3) >= 1)
  {
    v25 = *((_DWORD *)a5 + 1);
    v26 = *(_DWORD *)a6;
    v27 = *((_DWORD *)a6 + 1);
    if (*(_DWORD *)a5 <= *(_DWORD *)a6)
      v28 = *(_DWORD *)a6;
    else
      v28 = *(_DWORD *)a5;
    if (v25 <= v27)
      v29 = *((_DWORD *)a6 + 1);
    else
      v29 = *((_DWORD *)a5 + 1);
    v30 = *((_DWORD *)a5 + 2) + *(_DWORD *)a5;
    v31 = *((_DWORD *)a6 + 3);
    if (*((_DWORD *)a6 + 2) + v26 < v30)
      v30 = *((_DWORD *)a6 + 2) + v26;
    v32 = *((_DWORD *)a5 + 3) + v25;
    if (v31 + v27 < v32)
      v32 = v31 + v27;
    v33 = v28 < v30 && v29 < v32;
    if (v33)
      v34 = v28;
    else
      v34 = 0;
    if (v33)
      v35 = v29;
    else
      v35 = 0;
    if (!v33)
    {
      v30 = 0;
      v32 = 0;
    }
    *(float *)&v41 = (float)v34;
    *((float *)&v41 + 1) = (float)v35;
    v42 = (float)(v30 - v34);
    v43 = (float)(v32 - v35);
    return (unsigned int *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t *, uint64_t))(*(_QWORD *)a3 + 216))(a3, &v41, 1);
  }
  return result;
}

uint64_t WebCore::ScrollbarsController::ScrollbarsController(uint64_t this, WebCore::ScrollableArea *a2)
{
  *(_QWORD *)this = off_1E3406B48;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 1;
  return this;
}

{
  *(_QWORD *)this = off_1E3406B48;
  *(_QWORD *)(this + 8) = a2;
  *(_BYTE *)(this + 16) = 1;
  return this;
}

uint64_t WebCore::ScrollbarsController::didBeginScrollGesture(uint64_t this)
{
  *(_BYTE *)(this + 16) = 1;
  return this;
}

uint64_t WebCore::ScrollbarsController::didEndScrollGesture(uint64_t this)
{
  *(_BYTE *)(this + 16) = 1;
  return this;
}

uint64_t WebCore::ScrollbarsController::mayBeginScrollGesture(uint64_t this)
{
  *(_BYTE *)(this + 16) = 1;
  return this;
}

uint64_t WebCore::ScrollbarsController::updateScrollbarsThickness(WebCore::ScrollbarsController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 400))(*((_QWORD *)this + 1));
  if (v2)
  {
    v3 = v2;
    if (!*(_BYTE *)(v2 + 137))
    {
      {
        if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
        {
          v4 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
            goto LABEL_6;
          WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
          goto LABEL_21;
        }
      }
      else
      {
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
      }
      v4 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      {
LABEL_6:
        v5 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*v4 + 40))(v4, *(unsigned __int8 *)(v3 + 73), 1);
        v12 = 0;
        v13 = v5;
        v14 = v5;
        WebCore::Widget::setFrameRect((WebCore::Widget *)v3, (const WebCore::IntRect *)&v12);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 64) + 408))(*(_QWORD *)(v3 + 64), v3);
        goto LABEL_7;
      }
      WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_21:
      *v10 = 1;
      goto LABEL_6;
    }
  }
LABEL_7:
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 392))(*((_QWORD *)this + 1));
  if (result)
  {
    v7 = result;
    if (!*(_BYTE *)(result + 137))
    {
      {
        if (BYTE1(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings))
        {
          v8 = &WebCore::ScrollbarTheme::theme(void)::mockTheme;
            goto LABEL_12;
          WebCore::ScrollbarTheme::theme(void)::mockTheme = (uint64_t)off_1E341CAA8;
          goto LABEL_23;
        }
      }
      else
      {
        WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings = 0u;
        *(_OWORD *)&byte_1ECE90A50 = 0u;
        qword_1ECE90A60 = 0;
        LOBYTE(WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings) = 1;
        *((_QWORD *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 1) = 0;
        *(_QWORD *)((char *)&WebCore::DeprecatedGlobalSettings::shared(void)::deprecatedGlobalSettings + 14) = 0;
        byte_1ECE90A56 = 1;
        *(_DWORD *)&algn_1ECE90A57 = 0;
        unk_1ECE90A5B = 0;
        byte_1ECE90A5D = 1;
        byte_1ECE90A5F = 1;
      }
      v8 = &WebCore::ScrollbarTheme::nativeTheme(void)::theme;
      {
LABEL_12:
        v9 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*v8 + 40))(v8, *(unsigned __int8 *)(v7 + 73), 1);
        v12 = 0;
        v13 = v9;
        v14 = v9;
        WebCore::Widget::setFrameRect((WebCore::Widget *)v7, (const WebCore::IntRect *)&v12);
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 64) + 408))(*(_QWORD *)(v7 + 64), v7);
      }
      WebCore::ScrollbarTheme::nativeTheme(void)::theme = (uint64_t)off_1E3354BF8;
LABEL_23:
      *v11 = 1;
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t WebCore::ScrollbarTheme::buttonsPlacement(WebCore::ScrollbarTheme *this)
{
  return 1;
}

uint64_t WebCore::ScrollbarTheme::supportsControlTints(WebCore::ScrollbarTheme *this)
{
  return 0;
}

double WebCore::ScrollbarTheme::initialAutoscrollTimerDelay(WebCore::ScrollbarTheme *this)
{
  return 0.25;
}

double WebCore::ScrollbarTheme::autoscrollTimerDelay(WebCore::ScrollbarTheme *this)
{
  return 0.05;
}

float WebCore::ScrollView::topContentInset()
{
  return 0.0;
}

float WebCore::ScrollView::visibleContentScaleFactor(WebCore::ScrollView *this)
{
  return 1.0;
}

uint64_t WebCore::ScrollableArea::scrollAnimatorEnabled(WebCore::ScrollableArea *this)
{
  return 0;
}

unint64_t WebCore::ScrollableArea::convertFromScrollbarToContainingView(WebCore::ScrollableArea *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  WebCore::ScrollView *v4;

  v3 = *((_QWORD *)a2 + 4);
  if (v3 && (v4 = *(WebCore::ScrollView **)(v3 + 8)) != 0)
    return WebCore::ScrollView::convertChildToSelf(v4, (uint64_t)a2, *(_QWORD *)a3);
  else
    return *(_QWORD *)a3;
}

unint64_t WebCore::ScrollableArea::convertFromContainingViewToScrollbar(WebCore::ScrollableArea *this, const WebCore::Scrollbar *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  WebCore::ScrollView *v4;

  v3 = *((_QWORD *)a2 + 4);
  if (v3 && (v4 = *(WebCore::ScrollView **)(v3 + 8)) != 0)
    return WebCore::ScrollView::convertSelfToChild(v4, (uint64_t)a2, *(_QWORD *)a3);
  else
    return *(_QWORD *)a3;
}

unint64_t WebCore::ScrollableArea::convertFromScrollbarToContainingView(WebCore::ScrollableArea *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  WebCore::ScrollView *v4;

  v3 = *((_QWORD *)a2 + 4);
  if (v3 && (v4 = *(WebCore::ScrollView **)(v3 + 8)) != 0)
    return WebCore::ScrollView::convertChildToSelf(v4, (uint64_t)a2, *(_QWORD *)a3);
  else
    return *(_QWORD *)a3;
}

unint64_t WebCore::ScrollableArea::convertFromContainingViewToScrollbar(WebCore::ScrollableArea *this, const WebCore::Scrollbar *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  WebCore::ScrollView *v4;

  v3 = *((_QWORD *)a2 + 4);
  if (v3 && (v4 = *(WebCore::ScrollView **)(v3 + 8)) != 0)
    return WebCore::ScrollView::convertSelfToChild(v4, (uint64_t)a2, *(_QWORD *)a3);
  else
    return *(_QWORD *)a3;
}

uint64_t WebCore::ScrollableArea::horizontalScrollbar(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::verticalScrollbar(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollableArea::overhangAmount(WebCore::ScrollableArea *this)
{
  return 0;
}

uint64_t WebCore::ScrollbarsController::isScrollbarsControllerMock(WebCore::ScrollbarsController *this)
{
  return 0;
}

void WebCore::ScrollbarsController::horizontalScrollbarStateForTesting(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::Scrollbar::isScrollbar(WebCore::Scrollbar *this)
{
  return 1;
}

uint64_t WebCore::Scrollbar::isMacScrollbar(WebCore::Scrollbar *this)
{
  return 0;
}

_QWORD *std::make_unique[abi:sn180100]<WebCore::ScrollbarsControllerMock,WebCore::ScrollableArea &,WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  v6 = WTF::fastMalloc((WTF *)0x30);
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  v8 = *a3;
  *result = off_1E3406CB0;
  result[1] = v8;
  *(_BYTE *)(v6 + 16) = 1;
  *(_QWORD *)v6 = off_1E341C188;
  *(_QWORD *)(v6 + 8) = a2;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 24) = result;
  *a1 = v6;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ScrollableArea::internalCreateScrollbarsController(void)::$_0,void,WTF::String const&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 696))(*(_QWORD *)(a1 + 8));
}

unint64_t WTF::Vector<WebCore::SnapOffset<WebCore::LayoutUnit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = a2;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a2 || v4 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a2)
  {
    v8 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v9);
  }
  else
  {
    v5 = a2 - v4;
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, v7);
    return *(_QWORD *)a1 + v5;
  }
  return v2;
}

uint64_t *WTF::HashTable<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::rehash(result, 8u, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = 0;
  v10 = *a2;
  v11 = ~(*a2 << 32) + *a2;
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = (v13 >> 31) ^ v13;
  for (i = 1; ; ++i)
  {
    v16 = v14 & v8;
    v17 = (uint64_t *)(v6 + 8 * v16);
    v18 = *v17;
    if (!*v17)
    {
      if (v9)
      {
        *v9 = 0;
        --*(_DWORD *)(*v4 - 16);
        v10 = *a2;
        v17 = v9;
      }
      *a2 = 0;
      result = (uint64_t *)*v17;
      *v17 = v10;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        else
          --*((_DWORD *)result + 2);
      }
      v19 = *v4;
      if (*v4)
        v20 = *(_DWORD *)(v19 - 12) + 1;
      else
        v20 = 1;
      *(_DWORD *)(v19 - 12) = v20;
      v21 = *v4;
      if (*v4)
        v22 = *(_DWORD *)(v21 - 12);
      else
        v22 = 0;
      v23 = (*(_DWORD *)(v21 - 16) + v22);
      v24 = *(unsigned int *)(v21 - 4);
      if (v24 > 0x400)
      {
        if (v24 > 2 * v23)
          goto LABEL_18;
      }
      else if (3 * v24 > 4 * v23)
      {
LABEL_18:
        v25 = v21 + 8 * v24;
        v26 = 1;
        goto LABEL_19;
      }
      result = WTF::HashTable<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::expand(v4, v17);
      v17 = result;
      v21 = *v4;
      if (*v4)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_18;
    }
    if (v18 == -1)
    {
      v9 = (uint64_t *)(v6 + 8 * v16);
      goto LABEL_8;
    }
    if (v18 == v10)
      break;
LABEL_8:
    v14 = i + v16;
  }
  if ((v7 & 1) != 0)
    v27 = 0;
  else
    v27 = *(unsigned int *)(v6 - 4);
  v26 = 0;
  v25 = v6 + 8 * v27;
LABEL_19:
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v25;
  *(_BYTE *)(a3 + 16) = v26;
  return result;
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>,WTF::HashTraits<WTF::Ref<WebCore::Widget,WTF::RawPtrTraits<WebCore::Widget>,WTF::DefaultRefDerefTraits<WebCore::Widget>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t *v13;
  _QWORD *v14;
  _DWORD *v15;
  _QWORD *v16;

  v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if ((_DWORD)v7)
  {
    v7 = v7;
    v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v14 = WTF::HashTable<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>,WTF::HashTraits<WTF::RefPtr<WebCore::WebAnimation,WTF::RawPtrTraits<WebCore::WebAnimation>,WTF::DefaultRefDerefTraits<WebCore::WebAnimation>>>>::reinsert(*a1, v13);
          v15 = (_DWORD *)*v13;
          *v13 = 0;
          if (v15)
          {
            if (v15[2] == 1)
            {
              v16 = v14;
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
              v14 = v16;
            }
            else
            {
              --v15[2];
            }
          }
          if (v13 == a3)
            v11 = v14;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v13;
      --v7;
    }
    while (v7);
    goto LABEL_15;
  }
  result = 0;
  if (v6)
  {
LABEL_15:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v11;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::Scrollbar::*&)(void),WebCore::Scrollbar*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WebCore::ScrollingEffectsController::animationCallback(WebCore::ScrollingEffectsController *this, __n128 a2)
{
  uint64_t result;
  double v4;
  int v5;
  uint64_t v6;

  result = *((_QWORD *)this + 9);
  if (result)
  {
    v4 = a2.n128_f64[0];
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 40))(result))
      (*(void (**)(_QWORD, double))(**((_QWORD **)this + 9) + 64))(*((_QWORD *)this + 9), v4);
    result = *((_QWORD *)this + 9);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      if ((result & 1) == 0)
      {
        result = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  v5 = *((_BYTE *)this + 90) || *((_BYTE *)this + 92) || *((_QWORD *)this + 9) != 0;
  if (*((unsigned __int8 *)this + 89) != v5)
  {
    v6 = 32;
    if (v5)
      v6 = 24;
    result = (*(uint64_t (**)(__n128))(**((_QWORD **)this + 8) + v6))(a2);
    *((_BYTE *)this + 89) = v5;
  }
  return result;
}

uint64_t WebCore::ScrollingEffectsController::startAnimatedScrollToDestination(uint64_t a1, float a2, float a3, float a4, float a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _DWORD v11[2];
  _DWORD v12[2];

  *(float *)v12 = a2;
  *(float *)&v12[1] = a3;
  *(float *)v11 = a4;
  *(float *)&v11[1] = a5;
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v7 = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 20) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)v7 = off_1E3405E90;
  *(_QWORD *)(v7 + 8) = a1;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = &off_1E3347E18;
  *(_OWORD *)(v8 + 16) = xmmword_1968C1FC0;
  *(_OWORD *)(v8 + 32) = xmmword_1968C1FD0;
  *(_BYTE *)(v8 + 48) = 0;
  *(_QWORD *)(v7 + 64) = v8;
  v9 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v7 = *(_QWORD *)(a1 + 72);
  }
  if (!*(_DWORD *)(v7 + 16))
    return WebCore::ScrollAnimationSmooth::startAnimatedScrollToDestination((WebCore::ScrollAnimationSmooth *)v7, (const WebCore::FloatPoint *)v12, (const WebCore::FloatPoint *)v11);
  result = 96;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ScrollingEffectsController::handleWheelEvent(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  unsigned int v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WTF *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 *v25;
  uint64_t v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  WebCore::Scrollbar *v59;
  __n128 v60;
  float v61;
  float v62;
  __n128 v63;
  float v64;
  float v65;
  float v66;
  float v67;
  BOOL v68;
  BOOL v69;
  float v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  float v88;
  int v89;
  void *v90;
  uint64_t v91;
  int8x8_t v92;
  WTF *v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  float32x2_t v98;
  WTF *v99;
  int v100;
  BOOL v101;
  unsigned int v102;
  int v103;
  int v104;
  int v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  double v112;
  unsigned int v113;
  double v114;
  unsigned int v115;
  double v116;
  uint64_t v117;
  double v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  double v122;
  int v123;
  double v124;
  int v125;
  unint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  unsigned int v132;
  int v133;
  int v134;
  int8x8_t v135;
  float v136;
  int v137;
  _OWORD v138[8];
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    if (*(_DWORD *)(v4 + 16) == 1)
    {
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(v4 + 184);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v4 + 192);
      if (*(_BYTE *)(v4 + 20))
      {
        *(_BYTE *)(v4 + 20) = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 32))(*(_QWORD *)(v4 + 8));
      }
    }
  }
  v5 = (_QWORD *)(a1 + 8);
  if (!*((_BYTE *)a2 + 50))
  {
    *v5 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v9 = *(WTF **)(a1 + 24);
    if (v9)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v9, (void *)v4);
    }
    *(_QWORD *)(a1 + 56) = 0;
    goto LABEL_51;
  }
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    if (v6 + 1 != v7)
      goto LABEL_37;
    LODWORD(v8) = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 32);
    if (v6)
    {
      if (v6 != v8 - 1)
        goto LABEL_37;
    }
    else if ((_DWORD)v8)
    {
      v6 = 0;
      goto LABEL_37;
    }
  }
  v10 = v8;
  v11 = ((unint64_t)v8 >> 2) + v8;
  if (v11 <= 0xF)
    v11 = 15;
  if (v11 >= 0x1FFFFFF)
  {
    __break(0xC471u);
    JUMPOUT(0x1960EB498);
  }
  v12 = *(WTF **)(a1 + 24);
  v13 = v11 + 1;
  v14 = (_OWORD *)WTF::fastMalloc((WTF *)((v11 + 1) << 7));
  *(_DWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 24) = v14;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16);
  if (v15 <= v16)
  {
    if (v15 != v16)
    {
      v34 = &v14[8 * v15];
      v35 = (__int128 *)((char *)v12 + 128 * v15);
      v36 = (v16 << 7) - (v15 << 7);
      do
      {
        v37 = *v35;
        v38 = v35[1];
        v39 = v35[3];
        v34[2] = v35[2];
        v34[3] = v39;
        *v34 = v37;
        v34[1] = v38;
        v40 = v35[4];
        v41 = v35[5];
        v42 = v35[7];
        v34[6] = v35[6];
        v34[7] = v42;
        v34[4] = v40;
        v34[5] = v41;
        v34 += 8;
        v35 += 8;
        v36 -= 128;
      }
      while (v36);
    }
  }
  else
  {
    if (v16)
    {
      v17 = v16 << 7;
      v18 = v12;
      do
      {
        v19 = *(_OWORD *)v18;
        v20 = *((_OWORD *)v18 + 1);
        v21 = *((_OWORD *)v18 + 3);
        v14[2] = *((_OWORD *)v18 + 2);
        v14[3] = v21;
        *v14 = v19;
        v14[1] = v20;
        v22 = *((_OWORD *)v18 + 4);
        v23 = *((_OWORD *)v18 + 5);
        v24 = *((_OWORD *)v18 + 7);
        v14[6] = *((_OWORD *)v18 + 6);
        v14[7] = v24;
        v14[4] = v22;
        v14[5] = v23;
        v14 += 8;
        v18 = (WTF *)((char *)v18 + 128);
        v17 -= 128;
      }
      while (v17);
      v13 = *(_DWORD *)(a1 + 32);
      v15 = *(_QWORD *)(a1 + 8);
      v14 = *(_OWORD **)(a1 + 24);
    }
    if (v15 != v10)
    {
      v25 = (__int128 *)((char *)v12 + 128 * v15);
      v26 = (v15 << 7) - (v10 << 7);
      do
      {
        v27 = (_OWORD *)((char *)&v14[8 * (unint64_t)v13] + v26);
        v28 = *v25;
        v29 = v25[1];
        v30 = v25[3];
        v27[2] = v25[2];
        v27[3] = v30;
        *v27 = v28;
        v27[1] = v29;
        v31 = v25[4];
        v32 = v25[5];
        v33 = v25[7];
        v27[6] = v25[6];
        v27[7] = v33;
        v27[4] = v31;
        v27[5] = v32;
        v25 += 8;
        v26 += 128;
      }
      while (v26);
    }
    *v5 = v15 - v10 + v13;
  }
  if (v12)
  {
    if (*(WTF **)(a1 + 24) == v12)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
    }
    WTF::fastFree(v12, (void *)v4);
  }
  v6 = *(_QWORD *)(a1 + 16);
LABEL_37:
  v43 = (_OWORD *)(*(_QWORD *)(a1 + 24) + (v6 << 7));
  v44 = *a2;
  v45 = a2[1];
  v46 = a2[3];
  v43[2] = a2[2];
  v43[3] = v46;
  *v43 = v44;
  v43[1] = v45;
  v47 = a2[4];
  v48 = a2[5];
  v49 = a2[7];
  v43[6] = a2[6];
  v43[7] = v49;
  v43[4] = v47;
  v43[5] = v48;
  v50 = *(_QWORD *)(a1 + 16);
  if (v50 == *(unsigned int *)(a1 + 32) - 1)
    v51 = 0;
  else
    v51 = v50 + 1;
  *(_QWORD *)(a1 + 16) = v51;
  if (*((_BYTE *)a2 + 92))
  {
    if (*((_BYTE *)a2 + 92) != 8 || *((_BYTE *)a2 + 93))
      goto LABEL_51;
  }
  else if (*((_BYTE *)a2 + 93) != 1)
  {
    goto LABEL_51;
  }
  v52 = *(_DWORD **)(a1 + 72);
  if (v52 && v52[4] != 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 32))(v52);
    v53 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_51;
  v76 = *(_QWORD *)(a1 + 72);
  if (!v76)
  {
    v76 = WTF::fastMalloc((WTF *)0xC8);
    *(_DWORD *)(v76 + 16) = 1;
    *(_BYTE *)(v76 + 20) = 0;
    *(_QWORD *)(v76 + 24) = 0;
    *(_QWORD *)(v76 + 32) = 0;
    *(_QWORD *)v76 = off_1E3405E30;
    *(_QWORD *)(v76 + 8) = a1;
    *(_BYTE *)(v76 + 40) = 0;
    *(_BYTE *)(v76 + 96) = 0;
    *(_BYTE *)(v76 + 104) = 0;
    *(_BYTE *)(v76 + 160) = 0;
    *(_OWORD *)(v76 + 168) = 0u;
    *(_OWORD *)(v76 + 184) = 0u;
    v77 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = v76;
    if (v77)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
      v76 = *(_QWORD *)(a1 + 72);
    }
  }
  if (*(_DWORD *)(v76 + 16) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1960EAFA4);
  }
  while (1)
  {
    v86 = *(_QWORD *)(a1 + 8);
    if (v86 == *(_QWORD *)(a1 + 16))
      break;
    v78 = (__int128 *)(*(_QWORD *)(a1 + 24) + (v86 << 7));
    v79 = *v78;
    v80 = v78[1];
    v81 = v78[3];
    v138[2] = v78[2];
    v138[3] = v81;
    v138[0] = v79;
    v138[1] = v80;
    v82 = v78[4];
    v83 = v78[5];
    v84 = v78[7];
    v138[6] = v78[6];
    v138[7] = v84;
    v138[4] = v82;
    v138[5] = v83;
    if (v86 == *(unsigned int *)(a1 + 32) - 1)
      v85 = 0;
    else
      v85 = v86 + 1;
    *(_QWORD *)(a1 + 8) = v85;
    WebCore::ScrollAnimationKinetic::appendToScrollHistory(v76, (unint64_t)v138);
  }
  *(_QWORD *)&v138[0] = 0;
  v87 = *(float *)(a1 + 56);
  if (v87 != 0.0)
  {
    if (v87 < 0.0)
      v87 = -v87;
    if (v87 >= 0.00000011921)
      goto LABEL_146;
  }
  v88 = *(float *)(a1 + 60);
  if (v88 != 0.0)
  {
    if (v88 < 0.0)
      v88 = -v88;
    if (v88 >= 0.00000011921)
    {
LABEL_146:
      LODWORD(v138[0]) = WebCore::ScrollAnimationKinetic::accumulateVelocityFromPreviousGesture((WTF::MonotonicTime *)v76, (float *)(a1 + 48), (float *)(a1 + 56), *(double *)(a1 + 40));
      DWORD1(v138[0]) = v105;
      *(_QWORD *)(a1 + 56) = 0;
    }
  }
  if (*((_BYTE *)a2 + 92))
  {
    if (*((_BYTE *)a2 + 92) == 8 && !*((_BYTE *)a2 + 93))
    {
      v136 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 96))(*(_QWORD *)(a1 + 64));
      v137 = v89;
      v91 = *(unsigned int *)(v76 + 180);
      v92 = 0;
      if ((_DWORD)v91)
      {
        v93 = *(WTF **)(v76 + 168);
        v94 = *(double *)v93;
        v95 = *((double *)v93 + 16 * v91 - 16);
        if (v95 != *(double *)v93)
        {
          v96 = 0;
          v97 = v91 << 7;
          v98 = 0;
          do
          {
            v98 = vadd_f32(v98, *(float32x2_t *)((char *)v93 + v96 + 68));
            v96 += 128;
          }
          while (v97 != v96);
          if (*(_DWORD *)(v76 + 176))
          {
            *(_QWORD *)(v76 + 168) = 0;
            *(_QWORD *)(v76 + 176) = 0;
            WTF::fastFree(v93, v90);
          }
          v92 = (int8x8_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(vneg_f32(v98)), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v95 - v94), 0)));
        }
      }
LABEL_138:
      v135 = v92;
      v103 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 48))(*(_QWORD *)(a1 + 64));
      v104 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64));
      WebCore::ScrollAnimationKinetic::startAnimatedScrollWithInitialVelocity((WebCore::ScrollAnimationKinetic *)v76, (const WebCore::FloatPoint *)&v136, (const WebCore::FloatSize *)&v135, (const WebCore::FloatSize *)v138, v103, v104);
      return 1;
    }
  }
  else if (*((_BYTE *)a2 + 93) == 1)
  {
    if (*(_DWORD *)(v76 + 176))
    {
      if (*(_DWORD *)(v76 + 180))
        *(_DWORD *)(v76 + 180) = 0;
      v99 = *(WTF **)(v76 + 168);
      if (v99)
      {
        *(_QWORD *)(v76 + 168) = 0;
        *(_DWORD *)(v76 + 176) = 0;
        WTF::fastFree(v99, (void *)v4);
      }
    }
    v136 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 96))(*(_QWORD *)(a1 + 64));
    v137 = v100;
    if (*((_BYTE *)a2 + 92))
      v101 = 0;
    else
      v101 = *((_BYTE *)a2 + 93) == 1;
    v102 = v101;
    v92 = vand_s8(*(int8x8_t *)((char *)a2 + 76), (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v102), 0x1FuLL)));
    goto LABEL_138;
  }
LABEL_51:
  v54 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 96))(*(_QWORD *)(a1 + 64));
  v56 = v55;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 48))(*(_QWORD *)(a1 + 64)))
    v57 = *((float *)a2 + 17);
  else
    v57 = 0.0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 56))(*(_QWORD *)(a1 + 64)))
    v58 = *((float *)a2 + 18);
  else
    v58 = 0.0;
  v60.n128_f32[0] = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 160))(*(_QWORD *)(a1 + 64));
  v61 = v63.n128_f32[0];
  v63.n128_f32[0] = v60.n128_f32[0] - v62;
  v65 = v61 - v64;
  if (v63.n128_f32[0] >= 0.0)
    v66 = v63.n128_f32[0];
  else
    v66 = 0.0;
  if (v65 >= 0.0)
    v67 = v65;
  else
    v67 = 0.0;
  v68 = v57 >= 0.0 || v54 < v66;
  if (!v68 || v57 > 0.0 && v54 <= 0.0)
    v57 = 0.0;
  v69 = v58 >= 0.0 || v56 < v67;
  if (!v69 || v58 > 0.0 && v56 <= 0.0)
    v58 = 0.0;
  if (!*((_BYTE *)a2 + 48))
  {
    if (v57 != 0.0)
    {
      v70 = (float)(int)v60.n128_f32[0];
      v59 = (WebCore::Scrollbar *)WebCore::Scrollbar::maxOverlapBetweenPages(v59);
      v60.n128_f32[0] = v70 - (float)(int)v59;
      if ((float)(v70 * 0.8) >= v60.n128_f32[0])
        v60.n128_f32[0] = v70 * 0.8;
      if (v60.n128_f32[0] < 1.0)
        v60.n128_f32[0] = 1.0;
      if (v57 >= 0.0)
        v57 = v60.n128_f32[0];
      else
        v57 = -v60.n128_f32[0];
    }
    if (v58 != 0.0)
    {
      v71 = (float)(int)v61;
      v60.n128_f32[0] = v71 - (float)(int)WebCore::Scrollbar::maxOverlapBetweenPages(v59);
      if ((float)(v71 * 0.8) >= v60.n128_f32[0])
        v60.n128_f32[0] = v71 * 0.8;
      if (v60.n128_f32[0] < 1.0)
        v60.n128_f32[0] = 1.0;
      if (v58 >= 0.0)
        v58 = v60.n128_f32[0];
      else
        v58 = -v60.n128_f32[0];
    }
  }
  v60.n128_f32[0] = -v57;
  v63.n128_f32[0] = -v58;
  if (!*(_BYTE *)(a1 + 93))
  {
    v72 = *(_QWORD *)(a1 + 80);
    if (v72)
    {
      if (*(_DWORD *)(v72 + 44) || *(_DWORD *)(v72 + 60))
      {
        v106 = (*(float (**)(_QWORD, __n128, __n128))(**(_QWORD **)(a1 + 64) + 152))(*(_QWORD *)(a1 + 64), v60, v63);
        v107 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 96))(*(_QWORD *)(a1 + 64));
        v109 = v108;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 160))(*(_QWORD *)(a1 + 64));
        v112 = (float)(v107 / v106) * 64.0;
        if (v112 >= 2147483650.0)
        {
          v113 = 0x7FFFFFFF;
        }
        else if (v112 <= -2147483650.0)
        {
          v113 = 0x80000000;
        }
        else
        {
          v113 = (int)v112;
        }
        v114 = (float)(v109 / v106) * 64.0;
        if (v114 >= 2147483650.0)
        {
          v115 = 0x7FFFFFFF;
        }
        else if (v114 <= -2147483650.0)
        {
          v115 = 0x80000000;
        }
        else
        {
          v115 = (int)v114;
        }
        v116 = (float)((float)(v107 - v57) / v106) * 64.0;
        if (v116 >= 2147483650.0)
        {
          v117 = 0x7FFFFFFFLL;
        }
        else if (v116 <= -2147483650.0)
        {
          v117 = 0x80000000;
        }
        else
        {
          v117 = (int)v116;
        }
        v118 = (float)((float)(v109 - v58) / v106) * 64.0;
        if (v118 >= 2147483650.0)
        {
          v119 = 0x7FFFFFFF00000000;
        }
        else if (v118 <= -2147483650.0)
        {
          v119 = 0x8000000000000000;
        }
        else
        {
          v119 = (unint64_t)(int)v118 << 32;
        }
        v120 = *(_QWORD *)(a1 + 80);
        if (v120)
          v121 = v120 + 24;
        else
          v121 = 0;
        v122 = v110 * 64.0;
        if (v122 >= 2147483650.0)
        {
          v123 = 0x7FFFFFFF;
        }
        else if (v122 <= -2147483650.0)
        {
          v123 = 0x80000000;
        }
        else
        {
          v123 = (int)v122;
        }
        LODWORD(v138[0]) = v123;
        v124 = v111 * 64.0;
        if (v124 >= 2147483650.0)
        {
          v125 = 0x7FFFFFFF;
        }
        else if (v124 <= -2147483650.0)
        {
          v125 = 0x80000000;
        }
        else
        {
          v125 = (int)v124;
        }
        DWORD1(v138[0]) = v125;
        v126 = v119 | v117;
        v127 = WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::closestSnapOffset<WebCore::LayoutSize,WebCore::LayoutPoint>(v121, 0, (int *)v138, v119 | v117, v113 | 0x100000000, -v57);
        v128 = *(_QWORD *)(a1 + 80);
        if (v128)
          v129 = v128 + 24;
        else
          v129 = 0;
        if (v122 >= 2147483650.0)
        {
          v130 = 0x7FFFFFFF;
        }
        else if (v122 <= -2147483650.0)
        {
          v130 = 0x80000000;
        }
        else
        {
          v130 = (int)v122;
        }
        LODWORD(v138[0]) = v130;
        if (v124 >= 2147483650.0)
        {
          v131 = 0x7FFFFFFF;
        }
        else if (v124 <= -2147483650.0)
        {
          v131 = 0x80000000;
        }
        else
        {
          v131 = (int)v124;
        }
        DWORD1(v138[0]) = v131;
        v132 = WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::closestSnapOffset<WebCore::LayoutSize,WebCore::LayoutPoint>(v129, 1, (int *)v138, v126, v115 | 0x100000000, -v58);
        v133 = v127 - v113;
        if (__OFSUB__(v127, v113))
          v133 = (v127 >> 31) + 0x7FFFFFFF;
        v60.n128_f32[0] = v106 * (float)((float)v133 * 0.015625);
        v134 = v132 - v115;
        if (__OFSUB__(v132, v115))
          v134 = (v132 >> 31) + 0x7FFFFFFF;
        v63.n128_f32[0] = v106 * (float)((float)v134 * 0.015625);
      }
      else
      {
        v60.n128_f32[0] = -v57;
        v63.n128_f32[0] = -v58;
      }
    }
  }
  if (v60.n128_f32[0] == 0.0 && v63.n128_f32[0] == 0.0)
    return 0;
  v74 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v138[0] = __PAIR64__(v63.n128_u32[0], v60.n128_u32[0]);
  v73 = 1;
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v74 + 64))(v74, v138, 1);
  return v73;
}

uint64_t WebCore::ScrollingEffectsController::scrollAnimationDidUpdate(WebCore::ScrollingEffectsController *this, WebCore::ScrollAnimation *a2, const WebCore::FloatPoint *a3)
{
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v12[2];

  v6 = (*(float (**)(_QWORD))(**((_QWORD **)this + 8) + 96))(*((_QWORD *)this + 8));
  v8 = *((float *)a3 + 1) - v7;
  v12[0] = *(float *)a3 - v6;
  v12[1] = v8;
  v9 = *((_QWORD *)this + 8);
  v10 = (*(uint64_t (**)(WebCore::ScrollAnimation *))(*(_QWORD *)a2 + 16))(a2);
  return (*(uint64_t (**)(uint64_t, float *, uint64_t))(*(_QWORD *)v9 + 64))(v9, v12, v10);
}

uint64_t WebCore::ScrollingEffectsController::scrollAnimationWillStart(WebCore::ScrollingEffectsController *this, WebCore::ScrollAnimation *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 104))(*((_QWORD *)this + 8));
  if (*((_DWORD *)a2 + 4) == 4)
  {
    if (!*((_BYTE *)this + 92))
    {
      *((_BYTE *)this + 92) = 1;
      if (!*((_BYTE *)this + 89))
      {
        (*(void (**)(_QWORD, WebCore::ScrollingEffectsController *))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8), this);
        *((_BYTE *)this + 89) = 1;
      }
    }
    v4 = *((_QWORD *)this + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 80))(v4, v5, v6, 32);
  }
  else
  {
    v8 = *((_QWORD *)this + 8);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 80))(v8, v9, v10, 32);
    v11 = *((_BYTE *)this + 90) || *((_BYTE *)this + 92) || *((_QWORD *)this + 9) != 0;
    if (*((unsigned __int8 *)this + 89) != v11)
    {
      v12 = 32;
      if (v11)
        v12 = 24;
      result = (*(uint64_t (**)(void))(**((_QWORD **)this + 8) + v12))();
      *((_BYTE *)this + 89) = v11;
    }
  }
  return result;
}

uint64_t WebCore::ScrollingEffectsController::scrollAnimationDidEnd(WebCore::ScrollingEffectsController *this, WebCore::ScrollAnimation *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;

  v4 = *((_QWORD *)this + 10);
  if (v4 && *((_BYTE *)this + 91))
  {
    if (*(_DWORD *)(v4 + 16) != 2)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 72);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
        v17 = *((unsigned __int8 *)this + 91);
        *(_DWORD *)(v4 + 16) = 2;
        if (!v17)
          goto LABEL_14;
      }
      else
      {
        *(_DWORD *)(v4 + 16) = 2;
      }
    }
    v6 = *((_QWORD *)this + 8);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 88))(v6, v7, v8, 16);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 144))(*((_QWORD *)this + 8));
    if (*((_BYTE *)this + 91))
    {
      *((_BYTE *)this + 91) = 0;
      v9 = *((_BYTE *)this + 90) || *((_BYTE *)this + 92) || *((_QWORD *)this + 9) != 0;
      if (*((unsigned __int8 *)this + 89) != v9)
      {
        v10 = 32;
        if (v9)
          v10 = 24;
        (*(void (**)(void))(**((_QWORD **)this + 8) + v10))();
        *((_BYTE *)this + 89) = v9;
      }
    }
  }
LABEL_14:
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 112))(*((_QWORD *)this + 8));
  if (*((_DWORD *)a2 + 4) == 4)
  {
    if (!*((_BYTE *)this + 92))
      goto LABEL_26;
    *((_BYTE *)this + 92) = 0;
    if (!*((_BYTE *)this + 90))
      goto LABEL_21;
LABEL_20:
    v11 = 1;
    goto LABEL_22;
  }
  if (*((_BYTE *)this + 90) || *((_BYTE *)this + 92))
    goto LABEL_20;
LABEL_21:
  v11 = *((_QWORD *)this + 9) != 0;
LABEL_22:
  if (*((unsigned __int8 *)this + 89) != v11)
  {
    v12 = 32;
    if (v11)
      v12 = 24;
    (*(void (**)(void))(**((_QWORD **)this + 8) + v12))();
    *((_BYTE *)this + 89) = v11;
  }
LABEL_26:
  v13 = *((_QWORD *)this + 8);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 176))(v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v14, v15, 32);
}

uint64_t WebCore::ScrollingEffectsController::scrollExtentsForAnimation(WebCore::ScrollingEffectsController *this, WebCore::ScrollAnimation *a2)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 160))(*((_QWORD *)this + 8));
}

float WebCore::ScrollingEffectsController::overscrollAmount(WebCore::ScrollingEffectsController *this, WebCore::ScrollAnimation *a2)
{
  return 0.0;
}

uint64_t WebCore::ScrollingEffectsController::scrollOffset(WebCore::ScrollingEffectsController *this, WebCore::ScrollAnimation *a2)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 96))(*((_QWORD *)this + 8));
}

void WebCore::ScrollingEffectsController::~ScrollingEffectsController(WebCore::ScrollingEffectsController *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E3406D78;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;

  *(_QWORD *)this = &off_1E3406D78;
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::ShareableResourceHandle::ShareableResourceHandle(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;

  result = WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a4;
  return result;
}

{
  uint64_t result;

  result = WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a4;
  return result;
}

_QWORD *WebCore::ShareableResource::wrapInSharedBuffer@<X0>(WebCore::ShareableResource *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v4;
  _QWORD *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  _QWORD *result;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  do
    v4 = __ldaxr((unsigned int *)this);
  while (__stlxr(v4 + 1, (unsigned int *)this));
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E3406E28;
  v5[1] = this;
  v13 = v5;
  do
    v6 = __ldaxr((unsigned int *)this);
  while (__stlxr(v6 + 1, (unsigned int *)this));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E3406E50;
  v7[1] = this;
  v14 = v7;
  v8 = WTF::fastMalloc((WTF *)0x38);
  v15 = WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(v8, (uint64_t *)&v13);
  v9 = WTF::fastMalloc((WTF *)0x38);
  WebCore::SharedBuffer::SharedBuffer(v9, &v15);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v15, v10);
  v15 = 0;
  *a2 = v9;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v15, v11);
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  result = v13;
  if (v13)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

void *WebCore::ShareableResourceHandle::tryWrapInSharedBuffer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *result;
  WebCore::ShareableResource *v4;
  void *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  WebCore::ShareableResource *v13;

  result = WebCore::ShareableResource::map(a1, (uint64_t *)&v13);
  v4 = v13;
  if (v13)
  {
    result = WebCore::ShareableResource::wrapInSharedBuffer(v13, a2);
    v13 = 0;
    do
    {
      v6 = __ldaxr((unsigned int *)v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v4));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = (unsigned int *)*((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v8);
          WTF::fastFree(v11, v12);
        }
      }
      return (void *)WTF::fastFree(v4, v5);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

unsigned int *WebCore::ShareableResource::map@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *result;
  WebCore::SharedMemory *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  void *v16;
  WebCore::SharedMemory *v17;

  result = (unsigned int *)WebCore::SharedMemory::map(a1, 0, (uint64_t *)&v17);
  v5 = v17;
  if (v17)
  {
    v17 = 0;
    v7 = *(unsigned int *)(a1 + 16);
    v6 = *(unsigned int *)(a1 + 20);
    if ((unint64_t)(v6 + v7) > *((_QWORD *)v5 + 1))
    {
      *a2 = 0;
      do
      {
        v13 = __ldaxr((unsigned int *)v5);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)v5));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)v5);
        WebCore::SharedMemory::~SharedMemory(v5);
        WTF::fastFree(v15, v16);
      }
    }
    else
    {
      v8 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = v5;
      *(_DWORD *)(v8 + 16) = v7;
      *(_DWORD *)(v8 + 20) = v6;
      *a2 = v8;
    }
    result = (unsigned int *)v17;
    v17 = 0;
    if (result)
    {
      do
      {
        v9 = __ldaxr(result);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, result));
      if (!v10)
      {
        atomic_store(1u, result);
        WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)result);
        return (unsigned int *)WTF::fastFree(v11, v12);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::ShareableResource::create@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;

  if (a3 + (unint64_t)a2 > *(_QWORD *)(*a1 + 8))
  {
    result = 0;
  }
  else
  {
    result = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)result = 1;
    v9 = *a1;
    *a1 = 0;
    *(_QWORD *)(result + 8) = v9;
    *(_DWORD *)(result + 16) = a2;
    *(_DWORD *)(result + 20) = a3;
  }
  *a4 = result;
  return result;
}

void WebCore::ShareableResource::~ShareableResource(WebCore::ShareableResource *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  void *v6;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v2);
      WTF::fastFree(v5, v6);
    }
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WTF *v5;
  void *v6;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v2);
      WTF::fastFree(v5, v6);
    }
  }
}

void WebCore::ShareableResource::createHandle(WebCore::ShareableResource *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v7[8];
  uint64_t v8;
  char v9;

  WebCore::SharedMemory::createHandle(*((_QWORD *)this + 1), 0, (uint64_t)v7);
  if (v9)
  {
    v4 = *((_QWORD *)this + 2);
    WTF::MachSendRight::MachSendRight();
    *(_QWORD *)&v6 = v8;
    *((_QWORD *)&v6 + 1) = v4;
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 24) = 1;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v5);
    if (v9)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v7);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
}

double WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(WebCore::FragmentedSharedBuffer *this)
{
  double result;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *(_QWORD *)&result = 1;
  *((_QWORD *)this + 2) = 1;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *(_QWORD *)&result = 1;
  *((_QWORD *)this + 2) = 1;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t WebCore::FragmentedSharedBuffer::create@<X0>(WTF *a1@<X0>, WTF *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v6 + 24;
  *(_QWORD *)(v6 + 16) = 1;
  *(_BYTE *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  result = WebCore::FragmentedSharedBuffer::append(v6, a1, a2);
  *a3 = v6;
  return result;
}

uint64_t WebCore::FragmentedSharedBuffer::create@<X0>(const WebCore::FragmentedSharedBuffer **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v4 + 24;
  *(_QWORD *)(v4 + 16) = 1;
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  result = WebCore::FragmentedSharedBuffer::append((WebCore::FragmentedSharedBuffer *)v4, *a1);
  *a2 = v4;
  return result;
}

uint64_t WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(uint64_t a1, const WebCore::FragmentedSharedBuffer **a2)
{
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append((WebCore::FragmentedSharedBuffer *)a1, *a2);
  return a1;
}

{
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append((WebCore::FragmentedSharedBuffer *)a1, *a2);
  return a1;
}

double WebCore::FragmentedSharedBuffer::fromIPCData(uint64_t a1)
{
  uint64_t v1;
  double result;
  WebCore::FragmentedSharedBuffer *v3;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::FragmentedSharedBuffer *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(v3);
  }
  else
  {
    v5 = &v4;
    ((void (*)(char **, uint64_t))off_1E3406E68[v1])(&v5, a1 + 8);
  }
  return result;
}

uint64_t WebCore::DataSegment::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  *(_DWORD *)(result + 16) = v5;
  *(_DWORD *)(result + 24) = 2;
  *a2 = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 8) = v5;
  v6 = a1[1];
  a1[1] = 0;
  *(_QWORD *)(result + 16) = v6;
  *(_DWORD *)(result + 24) = 3;
  *a2 = result;
  return result;
}

{
  uint64_t result;
  uint64_t v5;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  v5 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 8) = v5;
  *(_DWORD *)(result + 24) = 1;
  *a2 = result;
  return result;
}

unsigned int **WTF::Ref<WebCore::DataSegment const,WTF::RawPtrTraits<WebCore::DataSegment const>,WTF::DefaultRefDerefTraits<WebCore::DataSegment const>>::~Ref(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  char v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3[6];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v7])(&v8, v3 + 2);
      v3[6] = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

void WebCore::FragmentedSharedBuffer::toIPCData(WebCore::FragmentedSharedBuffer *this@<X0>, uint64_t a2@<X8>)
{
  mach_vm_size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int *v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned __int8 v27;
  _QWORD *v28;
  uint64_t v29;

  v4 = *((_QWORD *)this + 6);
  if (v4 > 0xFFF)
  {
    WebCore::SharedMemory::allocate(v4, &v29);
    if (v29)
    {
      v19 = *(_QWORD *)(v29 + 8);
      v25 = *(uint64_t **)(v29 + 16);
      v26 = v19;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E3406F28;
      v20[1] = &v25;
      v28 = v20;
      WebCore::FragmentedSharedBuffer::forEachSegment((uint64_t)this, &v28);
      v21 = v28;
      v28 = 0;
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
      v22 = (unsigned int *)v29;
    }
    else
    {
      v22 = 0;
    }
    WebCore::SharedMemory::createHandle((uint64_t)v22, 0, (uint64_t)&v25);
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (v27)
    {
      WTF::MachSendRight::MachSendRight();
      *(_QWORD *)(a2 + 16) = v26;
      *(_BYTE *)(a2 + 24) = 1;
      v23 = v27;
      *(_DWORD *)(a2 + 32) = 0;
      if (v23)
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v25);
    }
    else
    {
      *(_DWORD *)(a2 + 32) = 0;
    }
    if (v22)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v22);
  }
  else
  {
    v5 = *((unsigned int *)this + 5);
    if ((_DWORD)v5)
    {
      if (v5 >> 28)
      {
LABEL_26:
        __break(0xC471u);
        return;
      }
      v6 = WTF::fastMalloc((WTF *)(16 * v5));
      v7 = *((unsigned int *)this + 5);
      if ((_DWORD)v7)
      {
        v24 = v5;
        v8 = 0;
        v9 = 0;
        v10 = 16 * v7;
        v11 = *((_QWORD *)this + 1) + 8;
        while (1)
        {
          v12 = *(_QWORD *)(v11 + v8);
          v13 = *(unsigned int *)(v12 + 24);
          if ((_DWORD)v13 == -1)
            break;
          v25 = &v29;
          v14 = ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v25, v12 + 8);
          v15 = *(unsigned int *)(v12 + 24);
          if ((_DWORD)v15 == -1)
            break;
          v16 = v14;
          v25 = &v29;
          v17 = ((uint64_t (*)(uint64_t **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v25, v12 + 8);
          v18 = (uint64_t *)(v6 + v8);
          *v18 = v16;
          v18[1] = v17;
          ++v9;
          v8 += 16;
          if (v10 == v8)
          {
            LODWORD(v5) = v24;
            goto LABEL_22;
          }
        }
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_26;
      }
      v9 = 0;
    }
    else
    {
      v9 = 0;
      v6 = 0;
    }
LABEL_22:
    *(_QWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 20) = v9;
    *(_DWORD *)(a2 + 32) = 1;
  }
}

mach_vm_size_t WebCore::SharedMemory::copyBuffer@<X0>(WebCore::SharedMemory *this@<X0>, _QWORD *a2@<X8>)
{
  mach_vm_size_t result;
  uint64_t v6;
  _QWORD *v7;
  mach_vm_size_t v8;
  _QWORD v9[2];
  uint64_t v10;

  result = *((_QWORD *)this + 6);
  if (result && (result = WebCore::SharedMemory::allocate(result, &v10), v10))
  {
    v6 = *(_QWORD *)(v10 + 8);
    v9[0] = *(_QWORD *)(v10 + 16);
    v9[1] = v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3406F28;
    v7[1] = v9;
    v8 = (mach_vm_size_t)v7;
    WebCore::FragmentedSharedBuffer::forEachSegment((uint64_t)this, &v8);
    result = v8;
    v8 = 0;
    if (result)
      result = (*(uint64_t (**)(mach_vm_size_t))(*(_QWORD *)result + 8))(result);
    *a2 = v10;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

WTF **WebCore::FragmentedSharedBuffer::copyData@<X0>(WTF **this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  WTF **v6;
  WTF **v7;

  v2 = (uint64_t)this;
  *a2 = 0;
  a2[1] = 0;
  v4 = (unint64_t)this[6];
  if (v4)
  {
    if (HIDWORD(v4))
    {
      __break(0xC471u);
      return this;
    }
    v5 = WTF::fastMalloc(this[6]);
    *((_DWORD *)a2 + 2) = v4;
    *a2 = v5;
  }
  v6 = (WTF **)WTF::fastMalloc((WTF *)0x10);
  *v6 = (WTF *)off_1E3406E88;
  v6[1] = (WTF *)a2;
  v7 = v6;
  WebCore::FragmentedSharedBuffer::forEachSegment(v2, &v7);
  this = v7;
  v7 = 0;
  if (this)
    return (WTF **)(*((uint64_t (**)(WTF **))*this + 1))(this);
  return this;
}

uint64_t WebCore::FragmentedSharedBuffer::forEachSegment(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  WTF *v30;
  unsigned int v31;
  _BYTE v32[23];
  char v33;
  _QWORD v34[5];

  v3 = result;
  v4 = *(unsigned int *)(result + 20);
  v30 = (WTF *)v32;
  v31 = v4;
  if (v4 >= 2)
  {
    if (v4 >> 28)
    {
LABEL_35:
      __break(0xC471u);
      return result;
    }
    result = WTF::fastMalloc((WTF *)(16 * v4));
    v5 = (WTF *)result;
    v30 = (WTF *)result;
    v4 = *(unsigned int *)(v3 + 20);
  }
  else
  {
    v5 = (WTF *)v32;
  }
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD **)(v3 + 8);
    v7 = &v6[2 * v4];
    do
    {
      *(_QWORD *)v5 = *v6;
      v8 = (unsigned int *)v6[1];
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      *((_QWORD *)v5 + 1) = v8;
      v5 = (WTF *)((char *)v5 + 16);
      v6 += 2;
    }
    while (v6 != v7);
    v5 = v30;
  }
  if (v31)
  {
    v10 = 16 * v31;
    v11 = MEMORY[0x1E0C809B0];
    v12 = (_QWORD *)((char *)v5 + 8);
    v13 = ___ZNK7WebCore11DataSegment7iterateEPK8__CFDataRKN3WTF8FunctionIFvNSt3__14spanIKhLm18446744073709551615EEEEEE_block_invoke;
    do
    {
      v14 = *v12;
      v15 = (void **)(*v12 + 8);
      v16 = *(unsigned int *)(*v12 + 24);
      if ((_DWORD)v16 == 1)
      {
        v17 = *v15;
        v34[0] = v11;
        v34[1] = 3221225472;
        v34[2] = v13;
        v34[3] = &__block_descriptor_40_e29_v40__0r_v8__NSRange_QQ_16_B32l;
        v34[4] = a2;
        result = objc_msgSend(v17, "enumerateByteRangesUsingBlock:", v34);
      }
      else
      {
        if ((_DWORD)v16 == -1
          || (v18 = v13,
              v19 = v11,
              v34[0] = &v33,
              v20 = ((uint64_t (*)(_QWORD *, void **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v16])(v34, v15), v21 = *(unsigned int *)(v14 + 24), (_DWORD)v21 == -1))
        {
          result = std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_35;
        }
        v22 = v20;
        v34[0] = &v33;
        v23 = ((uint64_t (*)(_QWORD *, void **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v21])(v34, v15);
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v22, v23);
        v11 = v19;
        v13 = v18;
      }
      v12 += 2;
      v10 -= 16;
    }
    while (v10);
    v24 = v30;
    do
    {
      v25 = (unsigned int *)*((_QWORD *)v24 + 1);
      *((_QWORD *)v24 + 1) = 0;
      if (v25)
      {
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          atomic_store(1u, v25);
          v29 = v25[6];
          if ((_DWORD)v29 != -1)
            ((void (*)(_QWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v29])(v34, v25 + 2);
          v25[6] = -1;
          result = WTF::fastFree((WTF *)v25, a2);
        }
      }
      v24 = (WTF *)((char *)v24 + 16);
    }
    while (v24 != (WTF *)((char *)v30 + 16 * v31));
    v5 = v30;
  }
  if (v32 != (_BYTE *)v5 && v5 != 0)
    return WTF::fastFree(v5, a2);
  return result;
}

WTF *WebCore::FragmentedSharedBuffer::takeData@<X0>(WTF *this@<X0>, WTF **a2@<X8>)
{
  uint64_t v2;
  int v4;
  void *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  _QWORD v13[2];

  v2 = (uint64_t)this;
  v4 = *((_DWORD *)this + 5);
  v5 = (char *)this + 8;
  *a2 = 0;
  a2[1] = 0;
  if (v4 != 1)
  {
    if (!v4)
      return this;
    goto LABEL_3;
  }
  v6 = *(unsigned int **)(*(_QWORD *)v5 + 8);
  if (v6[6])
  {
LABEL_3:
    this = (WTF *)WebCore::combineSegmentsData(v13, (uint64_t)v5, *((WTF **)this + 6));
    goto LABEL_4;
  }
  v8 = atomic_load(v6);
  if (v8 == 1)
  {
    if (*((_DWORD *)this + 5))
    {
      v9 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if (!*(_DWORD *)(v9 + 24))
      {
        v10 = *(WTF **)(v9 + 8);
        v11 = *(WTF **)(v9 + 16);
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        this = *a2;
        if (*a2)
          this = (WTF *)WTF::fastFree(this, v5);
        *a2 = v10;
        a2[1] = v11;
        goto LABEL_5;
      }
      this = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    __break(0xC471u);
    return this;
  }
  v12 = *a2;
  this = (WTF *)WebCore::combineSegmentsData(v13, (uint64_t)v5, *((WTF **)this + 6));
  if (v12)
    this = (WTF *)WTF::fastFree(v12, v5);
LABEL_4:
  *a2 = (WTF *)v13[0];
  a2[1] = (WTF *)v13[1];
LABEL_5:
  *(_QWORD *)(v2 + 48) = 0;
  if (*(_DWORD *)(v2 + 16))
  {
    v7 = *(unsigned int *)(v2 + 20);
    if ((_DWORD)v7)
    {
      WTF::VectorTypeOperations<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>::destruct(*(_QWORD *)(v2 + 8), (unsigned int **)(*(_QWORD *)(v2 + 8) + 16 * v7));
      *(_DWORD *)(v2 + 20) = 0;
    }
    this = *(WTF **)(v2 + 8);
    if ((WTF *)(v2 + 24) != this && this)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree(this, v5);
      this = *(WTF **)(v2 + 8);
    }
    if (!this)
    {
      *(_QWORD *)(v2 + 8) = v2 + 24;
      *(_DWORD *)(v2 + 16) = 1;
    }
  }
  return this;
}

uint64_t WebCore::FragmentedSharedBuffer::clear(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(this + 48) = 0;
  if (*(_DWORD *)(this + 16))
  {
    v2 = this;
    v3 = *(unsigned int *)(this + 20);
    if ((_DWORD)v3)
    {
      WTF::VectorTypeOperations<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>::destruct(*(_QWORD *)(this + 8), (unsigned int **)(*(_QWORD *)(this + 8) + 16 * v3));
      *(_DWORD *)(v2 + 20) = 0;
    }
    this = *(_QWORD *)(v2 + 8);
    if (v2 + 24 != this && this != 0)
    {
      *(_QWORD *)(v2 + 8) = 0;
      *(_DWORD *)(v2 + 16) = 0;
      WTF::fastFree((WTF *)this, a2);
      this = *(_QWORD *)(v2 + 8);
    }
    if (!this)
    {
      *(_QWORD *)(v2 + 8) = v2 + 24;
      *(_DWORD *)(v2 + 16) = 1;
    }
  }
  return this;
}

uint64_t WebCore::FragmentedSharedBuffer::getSegmentForPosition(WebCore::FragmentedSharedBuffer *this, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t result;

  if (*((_QWORD *)this + 6) <= a2)
  {
    result = 229;
    __break(0xC471u);
  }
  else
  {
    v2 = (_QWORD *)*((_QWORD *)this + 1);
    v3 = *((unsigned int *)this + 5);
    if ((_DWORD)v3)
    {
      do
      {
        v4 = v3 >> 1;
        v5 = &v2[2 * (v3 >> 1)];
        v7 = *v5;
        v6 = v5 + 2;
        v3 += ~(v3 >> 1);
        if (v7 > a2)
          v3 = v4;
        else
          v2 = v6;
      }
      while (v3);
    }
    else
    {
      v2 += 2 * v3;
    }
    return (uint64_t)(v2 - 2);
  }
  return result;
}

uint64_t WebCore::FragmentedSharedBuffer::getContiguousData@<X0>(WebCore::FragmentedSharedBuffer *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  size_t v4;
  uint64_t (**v5)();
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v12;
  _QWORD *SegmentForPosition;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  WTF *v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  size_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  WTF *v41;
  void *v42;
  uint64_t result;
  unsigned int *v44;
  unsigned int v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  WTF *v57;
  void *v58;
  WTF *v59;
  uint64_t v60;
  WTF *__src;
  uint64_t *v62;
  WTF *v63;
  uint64_t v64;
  char v65;
  unsigned int *v66;

  v7 = *((_QWORD *)this + 6);
  v8 = v7 > a2;
  v9 = v7 - a2;
  if (!v8)
  {
    result = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = result + 24;
    *(_QWORD *)(result + 16) = 1;
    *(_QWORD *)(result + 48) = 0;
    *(_BYTE *)(result + 40) = 1;
    *a4 = result;
    return result;
  }
  if (v9 >= a3)
    v12 = a3;
  else
    v12 = v9;
  SegmentForPosition = (_QWORD *)WebCore::FragmentedSharedBuffer::getSegmentForPosition(this, a2);
  v14 = SegmentForPosition[1];
  v15 = *(unsigned int *)(v14 + 24);
  if ((_DWORD)v15 == -1)
    goto LABEL_69;
  v4 = (size_t)SegmentForPosition;
  v16 = a2 - *SegmentForPosition;
  v63 = (WTF *)&v66;
  if (((uint64_t (*)(WTF **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v63, v14 + 8)- v16 < v12)
  {
    v64 = 0;
    if (HIDWORD(v12))
    {
      __break(0xC471u);
      goto LABEL_73;
    }
    v17 = (WTF *)WTF::fastMalloc((WTF *)v12);
    LODWORD(v64) = v12;
    v63 = v17;
    v18 = *(_QWORD *)(v4 + 8);
    v19 = *(unsigned int *)(v18 + 24);
    if ((_DWORD)v19 != -1)
    {
      v20 = v17;
      v5 = (uint64_t (**)())&v65;
      v66 = (unsigned int *)&v65;
      v21 = ((uint64_t (*)(unsigned int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v19])(&v66, v18 + 8);
      v22 = *(unsigned int *)(v18 + 24);
      if ((_DWORD)v22 != -1)
      {
        v23 = v21;
        v66 = (unsigned int *)&v65;
        v5 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix;
        v24 = ((uint64_t (*)(unsigned int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v22])(&v66, v18 + 8);
        if (v24 >= v16)
        {
          v25 = v24;
          v26 = v24 - v16;
          v62 = a4;
          if (v24 != v16)
          {
            if (v26 > v12)
            {
              v54 = v12 + (v12 >> 2);
              if (v54 >= 0x10)
                v55 = v54 + 1;
              else
                v55 = 16;
              if (v55 <= v26)
                v56 = v24 - v16;
              else
                v56 = v55;
              if (HIDWORD(v56))
              {
LABEL_75:
                __break(0xC471u);
                JUMPOUT(0x1960ECFB4);
              }
              v57 = (WTF *)WTF::fastMalloc((WTF *)v56);
              LODWORD(v64) = v56;
              v59 = v57;
              v63 = v57;
              if (v57 == v20)
              {
                v59 = 0;
                v63 = 0;
                LODWORD(v64) = 0;
              }
              WTF::fastFree(v20, v58);
              v20 = v59;
              v5 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix;
            }
            memcpy(v20, (const void *)(v23 + v16), v25 - v16);
            v27 = v26;
            HIDWORD(v64) = v26;
LABEL_15:
            if (v12 > v27)
            {
              v28 = v4 + 16;
              while (v28 != *((_QWORD *)this + 1) + 16 * *((unsigned int *)this + 5))
              {
                v29 = *(_QWORD *)(v28 + 8);
                v30 = *(unsigned int *)(v29 + 24);
                if ((_DWORD)v30 == -1)
                  goto LABEL_69;
                v4 = v12 - v27;
                v66 = (unsigned int *)&v65;
                v31 = ((uint64_t (*)(unsigned int **, uint64_t))v5[v30])(&v66, v29 + 8);
                if (v31 < v12 - v27)
                  v4 = v31;
                v32 = *(_QWORD *)(v28 + 8);
                v33 = *(unsigned int *)(v32 + 24);
                if ((_DWORD)v33 == -1)
                  goto LABEL_69;
                v66 = (unsigned int *)&v65;
                v34 = ((uint64_t (*)(unsigned int **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v33])(&v66, v32 + 8);
                v35 = *(unsigned int *)(v32 + 24);
                if ((_DWORD)v35 == -1)
                  goto LABEL_69;
                v36 = (const void *)v34;
                v66 = (unsigned int *)&v65;
                if (((uint64_t (*)(unsigned int **, uint64_t))v5[v35])(&v66, v32 + 8) < v4)
                  goto LABEL_73;
                if (v4)
                {
                  v37 = v4 + v27;
                  if (v4 + v27 > v64)
                  {
                    v38 = v64 + ((unint64_t)v64 >> 2);
                    if (v38 >= 0x10)
                      v39 = v38 + 1;
                    else
                      v39 = 16;
                    if (v39 <= v37)
                      v40 = v4 + v27;
                    else
                      v40 = v39;
                    if (HIDWORD(v40))
                      goto LABEL_74;
                    __src = v63;
                    v41 = (WTF *)WTF::fastMalloc((WTF *)v40);
                    LODWORD(v64) = v40;
                    v63 = v41;
                    memcpy(v41, __src, v27);
                    if (__src)
                    {
                      if (v41 == __src)
                      {
                        v63 = 0;
                        LODWORD(v64) = 0;
                      }
                      WTF::fastFree(__src, v42);
                    }
                  }
                  if (v37 < v27)
                    goto LABEL_75;
                  memcpy((char *)v63 + v27, v36, v4);
                  v27 = (v4 + v27);
                  HIDWORD(v64) = v37;
                }
                v5 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix;
                v28 += 16;
                if (v12 <= v27)
                  break;
              }
            }
            WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v63, v62);
            result = (uint64_t)v63;
            if (v63)
            {
              v63 = 0;
              LODWORD(v64) = 0;
              return WTF::fastFree((WTF *)result, v46);
            }
            return result;
          }
LABEL_70:
          v27 = 0;
          goto LABEL_15;
        }
LABEL_73:
        __break(1u);
LABEL_74:
        __break(0xC471u);
        JUMPOUT(0x1960ECFC4);
      }
    }
LABEL_69:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_70;
  }
  v44 = *(unsigned int **)(v4 + 8);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 + 1, v44));
  v66 = v44;
  WebCore::SharedBufferDataView::SharedBufferDataView(&v63, (uint64_t *)&v66, v16, v12, 1);
  result = (uint64_t)WebCore::SharedBufferDataView::createSharedBuffer((unsigned int **)&v63, a4);
  v47 = (unsigned int *)v63;
  v63 = 0;
  if (v47)
  {
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      atomic_store(1u, v47);
      v60 = v47[6];
      if ((_DWORD)v60 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v60])(&v65, v47 + 2);
      v47[6] = -1;
      result = WTF::fastFree((WTF *)v47, v46);
    }
  }
  v50 = v66;
  v66 = 0;
  if (v50)
  {
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, v50));
    if (!v52)
    {
      atomic_store(1u, v50);
      v53 = v50[6];
      if ((_DWORD)v53 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v53])(&v65, v50 + 2);
      v50[6] = -1;
      result = (uint64_t)v50;
      return WTF::fastFree((WTF *)result, v46);
    }
  }
  return result;
}

uint64_t WebCore::DataSegment::size(WebCore::DataSegment *this)
{
  uint64_t v1;
  WebCore::FragmentedSharedBuffer *v3;
  char v4;
  char *v5;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = (WebCore::FragmentedSharedBuffer *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FragmentedSharedBuffer::toHexString(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v5, (char *)this + 8);
  }
}

WTF::StringImpl *WebCore::FragmentedSharedBuffer::toHexString@<X0>(WebCore::FragmentedSharedBuffer *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  _QWORD *v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  char v14;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E3406EB0;
  v4[1] = &v11;
  v10 = v4;
  WebCore::FragmentedSharedBuffer::forEachSegment((uint64_t)this, &v10);
  v6 = v10;
  v10 = 0;
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v7 = v11;
  if (v11
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v11),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v11),
        (v7 = v11) != 0))
  {
    *(_DWORD *)v7 += 2;
  }
  *a2 = v7;
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer@<X0>(WebCore::FragmentedSharedBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  JSC::ArrayBuffer *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;

  v4 = (JSC::ArrayBuffer *)*((_QWORD *)this + 6);
  if ((unint64_t)v4 >> 32 || (result = JSC::ArrayBuffer::tryCreateUninitialized(v4), (v6 = v27) == 0))
  {
    result = WTFLogAlways();
    *a2 = 0;
  }
  else
  {
    v7 = *((unsigned int *)this + 5);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 16 * v7;
      v10 = *((_QWORD *)this + 1) + 8;
      v11 = MEMORY[0x1E0CC10F8];
      while (1)
      {
        v12 = *(_QWORD *)(v27 + 16);
        if (v12)
        {
          v13 = *(_QWORD *)(v11 + 56);
          if (v13)
          {
            if (*(_BYTE *)(v11 + 34) || !*MEMORY[0x1E0CC10F0])
              v12 = (v12 & 0x3FFFFFFFFLL) + v13;
          }
        }
        v14 = *(unsigned int *)(*(_QWORD *)v10 + 24);
        if ((_DWORD)v14 == -1)
          break;
        v15 = *(_QWORD *)v10 + 8;
        v29 = &v28;
        v16 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v29, v15);
        v17 = *(unsigned int *)(*(_QWORD *)v10 + 24);
        if ((_DWORD)v17 == -1)
          break;
        v18 = (const void *)v16;
        v19 = *(_QWORD *)v10 + 8;
        v29 = &v28;
        v20 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v17])(&v29, v19);
        memcpy((void *)(v12 + v8), v18, v20);
        v21 = *(unsigned int *)(*(_QWORD *)v10 + 24);
        if ((_DWORD)v21 == -1)
          break;
        v22 = *(_QWORD *)v10 + 8;
        v29 = &v28;
        result = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v21])(&v29, v22);
        v8 += result;
        v10 += 16;
        v9 -= 16;
        if (!v9)
        {
          v6 = v27;
          goto LABEL_17;
        }
      }
      std::__throw_bad_variant_access[abi:sn180100]();
      *(_QWORD *)(v26 + 8) = 3;
      a2[10] = 0;
      if ((a2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(a2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(a2 + 2));
      v24 = (WTF *)a2[1];
      if ((v24 & 1) == 0 && v24)
      {
        v25 = *(WTF **)v24;
        if (*(_QWORD *)v24)
        {
          *(_QWORD *)v24 = 0;
          *((_DWORD *)v24 + 2) = 0;
          WTF::fastFree(v25, v23);
        }
        WTF::fastFree(v24, v23);
      }
      return WTF::fastFree((WTF *)a2, v23);
    }
    else
    {
LABEL_17:
      *a2 = v6;
    }
  }
  return result;
}

uint64_t WebCore::DataSegment::data(WebCore::DataSegment *this)
{
  uint64_t v1;
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  char v6;
  char *v7;

  v1 = *((unsigned int *)this + 6);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::FragmentedSharedBuffer::append(v3, v4, v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v1])(&v7, (char *)this + 8);
  }
}

uint64_t WebCore::FragmentedSharedBuffer::append(uint64_t result, WTF *a2, WTF *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  char v21;
  WTF *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  char v28;

  v4 = result;
  v5 = *(_QWORD *)(result + 48);
  v26 = v5;
  if (!this)
  {
    v8 = 0;
    goto LABEL_12;
  }
  if ((unint64_t)this >> 32)
  {
    __break(0xC471u);
    return result;
  }
  v7 = WTF::fastMalloc(this);
  v8 = v7;
  if ((unint64_t)this < 8)
  {
    v9 = (_BYTE *)v7;
    v10 = a2;
    goto LABEL_21;
  }
  v9 = (_BYTE *)v7;
  v10 = a2;
  if ((unint64_t)(v7 - (_QWORD)a2) < 0x20)
    goto LABEL_21;
  if ((unint64_t)this < 0x20)
  {
    v11 = 0;
    goto LABEL_7;
  }
  v22 = 0;
  v11 = (WTF *)((unint64_t)this & 0xFFFFFFFFFFFFFFE0);
  do
  {
    v23 = (_OWORD *)((char *)v22 + v7);
    v24 = *(_OWORD *)((char *)v22 + (_QWORD)a2 + 16);
    *v23 = *(_OWORD *)((char *)v22 + (_QWORD)a2);
    v23[1] = v24;
    v22 = (WTF *)((char *)v22 + 32);
  }
  while (v11 != v22);
  if (this == v11)
    goto LABEL_12;
  if ((this & 0x18) == 0)
  {
    v10 = (WTF *)((char *)v11 + (_QWORD)a2);
    v9 = (char *)v11 + v7;
    do
    {
LABEL_21:
      v21 = *(_BYTE *)v10;
      v10 = (WTF *)((char *)v10 + 1);
      *v9++ = v21;
    }
    while (v10 != (WTF *)((char *)this + (_QWORD)a2));
    goto LABEL_12;
  }
LABEL_7:
  v12 = (WTF *)((unint64_t)this & 0xFFFFFFFFFFFFFFF8);
  v9 = (_BYTE *)(v7 + ((unint64_t)this & 0xFFFFFFFFFFFFFFF8));
  v10 = (WTF *)((char *)a2 + ((unint64_t)this & 0xFFFFFFFFFFFFFFF8));
  do
  {
    *(_QWORD *)((char *)v11 + v7) = *(_QWORD *)((char *)v11 + (_QWORD)a2);
    v11 = (WTF *)((char *)v11 + 8);
  }
  while (v12 != v11);
  if (this != v12)
    goto LABEL_21;
LABEL_12:
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 16) = (_DWORD)this;
  *(_DWORD *)(result + 20) = (_DWORD)this;
  *(_DWORD *)(result + 24) = 0;
  v27 = (WTF *)result;
  v14 = *(unsigned int *)(v4 + 20);
  if ((_DWORD)v14 == *(_DWORD *)(v4 + 16))
  {
    result = WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>(v4 + 8, (unint64_t)&v26);
  }
  else
  {
    v15 = (_QWORD *)(*(_QWORD *)(v4 + 8) + 16 * v14);
    *v15 = v5;
    v16 = v15 + 1;
    do
      v17 = __ldaxr((unsigned int *)result);
    while (__stlxr(v17 + 1, (unsigned int *)result));
    *v16 = result;
    ++*(_DWORD *)(v4 + 20);
  }
  v18 = (unsigned int *)v27;
  v27 = 0;
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      atomic_store(1u, v18);
      v25 = v18[6];
      if ((_DWORD)v25 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v25])(&v28, v18 + 2);
      v18[6] = -1;
      result = WTF::fastFree((WTF *)v18, v13);
    }
  }
  *(_QWORD *)(v4 + 48) += this;
  return result;
}

uint64_t WebCore::DataSegment::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t result;
  WTF *v6;
  WTF *v7;

  v4 = (void *)*(unsigned int *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) > v4)
  {
    v7 = *(WTF **)a1;
    if ((_DWORD)v4)
    {
      *(_DWORD *)(a1 + 8) = (_DWORD)v4;
      *(_QWORD *)a1 = WTF::fastRealloc(v7, v4);
    }
    else if (v7)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v7, v4);
    }
  }
  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  v6 = *(WTF **)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(result + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(result + 16) = (_DWORD)v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = 0;
  *(_QWORD *)(result + 20) = v6;
  *a2 = result;
  return result;
}

_BYTE *WebCore::FragmentedSharedBuffer::copy@<X0>(WebCore::FragmentedSharedBuffer *this@<X0>, uint64_t *a2@<X8>)
{
  _BYTE *result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  unsigned int **v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  _QWORD *v20;
  _BYTE *v21;
  _QWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  WTF *v37;
  uint64_t v38;
  _BYTE v39[16];
  unsigned int *v40;

  if (!*((_BYTE *)this + 40))
  {
    result = (_BYTE *)WTF::fastMalloc((WTF *)0x38);
    v6 = (uint64_t)result;
    *(_DWORD *)result = 1;
    *((_QWORD *)result + 1) = result + 24;
    *((_QWORD *)result + 2) = 1;
    result[40] = 0;
    *((_QWORD *)result + 6) = 0;
    *a2 = (uint64_t)result;
    *((_QWORD *)result + 6) = *((_QWORD *)this + 6);
    v37 = (WTF *)v39;
    v38 = 1;
    v7 = *((unsigned int *)this + 5);
    if (v7 >= 2)
    {
      if (v7 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      LODWORD(v38) = *((_DWORD *)this + 5);
      v37 = (WTF *)WTF::fastMalloc((WTF *)(16 * v7));
      LODWORD(v7) = *((_DWORD *)this + 5);
    }
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)*((_QWORD *)this + 1);
      v9 = &v8[2 * v7];
      do
      {
        v10 = *v8;
        v11 = (unsigned int *)v8[1];
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        v13 = (_QWORD *)((char *)v37 + 16 * HIDWORD(v38));
        *v13 = v10;
        v14 = (unsigned int **)(v13 + 1);
        do
          v15 = __ldaxr(v11);
        while (__stlxr(v15 + 1, v11));
        *v14 = v11;
        ++HIDWORD(v38);
        if (v11)
        {
          do
          {
            v16 = __ldaxr(v11);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v11));
          if (!v17)
          {
            atomic_store(1u, v11);
            v29 = v11[6];
            if ((_DWORD)v29 != -1)
              ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v29])(&v40, v11 + 2);
            v11[6] = -1;
            WTF::fastFree((WTF *)v11, v5);
          }
        }
        v8 += 2;
      }
      while (v8 != v9);
      v6 = *a2;
    }
    v18 = *(unsigned int *)(v6 + 20);
    v19 = *(WTF **)(v6 + 8);
    if ((_DWORD)v18)
    {
      WTF::VectorTypeOperations<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>::destruct((uint64_t)v19, (unsigned int **)v19 + 2 * v18);
      v19 = *(WTF **)(v6 + 8);
    }
    v20 = (_QWORD *)(v6 + 24);
    if (v19 != (WTF *)(v6 + 24))
    {
      if (v19)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        WTF::fastFree(v19, v5);
      }
      *(_QWORD *)(v6 + 8) = v20;
    }
    if (v37 == (WTF *)v39)
    {
      if (HIDWORD(v38))
      {
        v21 = &v39[16 * HIDWORD(v38)];
        v22 = v39;
        do
        {
          *v20 = *v22;
          v23 = (unsigned int *)v22[1];
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 + 1, v23));
          v20[1] = v23;
          v25 = (unsigned int *)v22[1];
          v22[1] = 0;
          if (v25)
          {
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              v30 = v25[6];
              if ((_DWORD)v30 != -1)
                ((void (*)(unsigned int **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v30])(&v40, v25 + 2);
              v25[6] = -1;
              WTF::fastFree((WTF *)v25, v5);
            }
          }
          v20 += 2;
          v22 += 2;
        }
        while (v22 != (_QWORD *)v21);
        result = v37;
        goto LABEL_27;
      }
    }
    else
    {
      *(_QWORD *)(v6 + 8) = v37;
    }
    result = v39;
LABEL_27:
    v28 = v38;
    HIDWORD(v38) = 0;
    *(_QWORD *)(v6 + 16) = v28;
    if (v39 != result)
    {
      if (result)
      {
        v37 = 0;
        LODWORD(v38) = 0;
        return (_BYTE *)WTF::fastFree((WTF *)result, v5);
      }
    }
    return result;
  }
  if (*((_DWORD *)this + 5))
  {
    v31 = *(unsigned int **)(*((_QWORD *)this + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    v40 = v31;
    v33 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v33, (WTF **)&v40);
    v37 = 0;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v37, v34);
    result = WTF::Ref<WebCore::DataSegment const,WTF::RawPtrTraits<WebCore::DataSegment const>,WTF::DefaultRefDerefTraits<WebCore::DataSegment const>>::~Ref(&v40, v35);
  }
  else
  {
    v33 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v33 = 1;
    *(_QWORD *)(v33 + 8) = v33 + 24;
    *(_QWORD *)(v33 + 16) = 1;
    *(_QWORD *)(v33 + 48) = 0;
    *(_BYTE *)(v33 + 40) = 1;
    v37 = 0;
    result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v37, v36);
  }
  *a2 = v33;
  return result;
}

uint64_t *WebCore::FragmentedSharedBuffer::forEachSegmentAsSharedBuffer(uint64_t a1, _QWORD *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  do
    v3 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v3 + 1, (unsigned int *)a1));
  v18 = a1;
  v4 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v4)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = v5 + 16 * v4;
    do
    {
      v7 = *(unsigned int **)(v5 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v16 = (WTF *)v7;
      v9 = WTF::fastMalloc((WTF *)0x38);
      v17 = WebCore::SharedBuffer::SharedBuffer(v9, &v16);
      (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a2 + 16))(*a2, &v17);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v17, v10);
      v11 = (unsigned int *)v16;
      v16 = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          v15 = v11[6];
          if ((_DWORD)v15 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v15])(&v19, v11 + 2);
          v11[6] = -1;
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      v5 += 16;
    }
    while (v5 != v6);
  }
  return WTF::Ref<WebCore::FragmentedSharedBuffer const,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer const>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer const>>::~Ref(&v18, a2);
}

uint64_t WebCore::FragmentedSharedBuffer::startsWith(uint64_t a1, char *a2, size_t a3)
{
  size_t v3;
  uint64_t v4;
  uint64_t v6;
  WebCore::DataSegment **i;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  const void *v11;
  int v12;
  int v13;

  if (!a3)
    return 1;
  v3 = a3;
  if (*(_QWORD *)(a1 + 48) < a3)
    return 0;
  v4 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v4)
    return 0;
  v6 = 16 * v4;
  for (i = (WebCore::DataSegment **)(*(_QWORD *)(a1 + 8) + 8); ; i += 2)
  {
    v8 = WebCore::DataSegment::size(*i);
    v9 = v8;
    if (v8 >= v3)
      v10 = v3;
    else
      v10 = v8;
    v11 = (const void *)WebCore::DataSegment::data(*i);
    if (memcmp(a2, v11, v10))
    {
      v12 = 0;
      v13 = 1;
      return v13 & v12;
    }
    if (v3 <= v9)
      break;
    v3 -= v10;
    a2 += v10;
    v6 -= 16;
    if (!v6)
    {
      v13 = 0;
      return v13 & v12;
    }
  }
  v13 = 1;
  v12 = 1;
  return v13 & v12;
}

unint64_t WebCore::FragmentedSharedBuffer::read@<X0>(unint64_t this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  size_t v5;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *SegmentForPosition;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  char v40;
  char *v41;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v7 = *(_QWORD *)(this + 48);
  v8 = v7 > a2;
  v9 = v7 - a2;
  if (!v8)
    return this;
  v10 = v9 >= a3 ? a3 : v9;
  if (!v10)
    return this;
  if (HIDWORD(v10))
  {
    __break(0xC471u);
    JUMPOUT(0x1960EDE24);
  }
  v12 = this;
  v13 = WTF::fastMalloc((WTF *)v10);
  *(_DWORD *)(a4 + 8) = v10;
  v14 = (_QWORD *)v13;
  *(_QWORD *)a4 = v13;
  SegmentForPosition = (_QWORD *)WebCore::FragmentedSharedBuffer::getSegmentForPosition((WebCore::FragmentedSharedBuffer *)v12, a2);
  v16 = SegmentForPosition[1];
  v17 = *(unsigned int *)(v16 + 24);
  if ((_DWORD)v17 == -1)
    goto LABEL_48;
  v4 = SegmentForPosition;
  v18 = a2 - *SegmentForPosition;
  v41 = &v40;
  v19 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v17])(&v41, v16 + 8);
  v5 = v10 >= v19 - v18 ? v19 - v18 : v10;
  v20 = v4[1];
  v21 = *(unsigned int *)(v20 + 24);
  if ((_DWORD)v21 == -1)
    goto LABEL_48;
  v41 = &v40;
  v22 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v21])(&v41, v20 + 8);
  v23 = *(unsigned int *)(v20 + 24);
  if ((_DWORD)v23 == -1)
    goto LABEL_48;
  v24 = v22;
  v41 = &v40;
  this = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v23])(&v41, v20 + 8);
  if (this < v18 || this - v18 < v5)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    this = std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_49;
  }
  if (v5)
  {
    this = (unint64_t)memcpy(v14, (const void *)(v24 + v18), v5);
    v25 = v5;
    *(_DWORD *)(a4 + 12) = v5;
    goto LABEL_18;
  }
LABEL_49:
  v25 = 0;
LABEL_18:
  v26 = (char *)(v10 - v5);
  if (v10 != v5)
  {
    v39 = *(_QWORD *)(v12 + 8) + 16 * *(unsigned int *)(v12 + 20);
    v27 = v4 + 2;
    do
    {
      if (v27 == (_QWORD *)v39)
        break;
      v28 = v27[1];
      v29 = *(unsigned int *)(v28 + 24);
      if ((_DWORD)v29 == -1)
        goto LABEL_48;
      v41 = &v40;
      v30 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v29])(&v41, v28 + 8);
      v12 = (unint64_t)v26 >= v30 ? v30 : (size_t)v26;
      v5 = v27[1];
      v31 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v31 == -1)
        goto LABEL_48;
      v4 = (_QWORD *)(v5 + 8);
      v41 = &v40;
      v32 = ((uint64_t (*)(char **, size_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v31])(&v41, v5 + 8);
      v33 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v33 == -1)
        goto LABEL_48;
      v10 = v32;
      v41 = &v40;
      this = ((uint64_t (*)(char **, size_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v33])(&v41, v5 + 8);
      if (this < v12)
        goto LABEL_47;
      if (v12)
      {
        v34 = v12 + v25;
        v35 = *(unsigned int *)(a4 + 8);
        if (v12 + v25 > v35)
        {
          v36 = v35 + (v35 >> 2);
          if (v36 >= 0x10)
            v37 = v36 + 1;
          else
            v37 = 16;
          if (v37 <= v34)
            v5 = v12 + v25;
          else
            v5 = v37;
          if (HIDWORD(v5))
          {
LABEL_52:
            __break(0xC471u);
            JUMPOUT(0x1960EDE1CLL);
          }
          v4 = (_QWORD *)WTF::fastMalloc((WTF *)v5);
          *(_DWORD *)(a4 + 8) = v5;
          *(_QWORD *)a4 = v4;
          memcpy(v4, v14, v25);
          if (v14)
          {
            if (v4 == v14)
            {
              v4 = 0;
              *(_QWORD *)a4 = 0;
              *(_DWORD *)(a4 + 8) = 0;
            }
            WTF::fastFree((WTF *)v14, v38);
          }
        }
        else
        {
          v4 = v14;
        }
        if (v34 < v25)
          goto LABEL_52;
        v14 = v4;
        this = (unint64_t)memcpy((char *)v4 + v25, (const void *)v10, v12);
        v25 = (v12 + v25);
        *(_DWORD *)(a4 + 12) = v34;
      }
      v27 += 2;
      v26 -= v12;
    }
    while (v26);
  }
  return this;
}

double WebCore::FragmentedSharedBuffer::copyTo(uint64_t a1, char *a2, unint64_t a3)
{
  return WebCore::FragmentedSharedBuffer::copyTo(a1, a2, a3, 0);
}

double WebCore::FragmentedSharedBuffer::copyTo(uint64_t a1, char *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  size_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  size_t v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = v4 > a4;
  v6 = v4 - a4;
  if (v5)
  {
    v7 = v6 >= a3 ? a3 : v6;
    if (v7)
    {
      v9 = *(_QWORD **)(a1 + 8);
      v10 = v9[1];
      v11 = *(unsigned int *)(v10 + 24);
      if ((_DWORD)v11 == -1)
        goto LABEL_31;
      v44 = &v43;
      if (((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v11])(&v44, v10 + 8) <= a4)
      {
        v14 = *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 20) - (_QWORD)v9;
        if (v14)
        {
          v15 = v14 >> 4;
          do
          {
            v16 = v15 >> 1;
            v17 = &v9[2 * (v15 >> 1)];
            v19 = *v17;
            v18 = v17 + 2;
            v15 += ~(v15 >> 1);
            if (v19 > a4)
              v15 = v16;
            else
              v9 = v18;
          }
          while (v15);
        }
        v9 -= 2;
      }
      v20 = v9[1];
      v21 = *(unsigned int *)(v20 + 24);
      if ((_DWORD)v21 == -1
        || ((v22 = a4 - *v9,
             v44 = &v43,
             v23 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v21])(&v44, v20 + 8), v24 = v23 - v22, v23 - v22 >= v7)? (v25 = v7): (v25 = v23 - v22), v26 = v9[1], v27 = *(unsigned int *)(v26 + 24), (_DWORD)v27 == -1))
      {
LABEL_31:
        v41 = std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::FragmentedSharedBuffer::operator==(v41, v42);
      }
      else
      {
        v44 = &v43;
        v28 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v27])(&v44, v26 + 8);
        memcpy(a2, (const void *)(v28 + v22), v25);
        if (v7 > v24)
        {
          v30 = v7 - v25;
          v31 = &a2[v25];
          v32 = v9 + 2;
          do
          {
            if (v32 == (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 20)))
              break;
            v33 = v32[1];
            v34 = *(unsigned int *)(v33 + 24);
            if ((_DWORD)v34 == -1)
              goto LABEL_31;
            v44 = &v43;
            v35 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v34])(&v44, v33 + 8);
            v36 = v32[1];
            v37 = *(unsigned int *)(v36 + 24);
            if ((_DWORD)v37 == -1)
              goto LABEL_31;
            v38 = v35;
            v39 = v35 >= v30 ? v30 : v35;
            v44 = &v43;
            v40 = (const void *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v37])(&v44, v36 + 8);
            memcpy(v31, v40, v39);
            v31 += v39;
            v32 += 2;
            v5 = v30 > v38;
            v30 -= v39;
          }
          while (v5);
        }
      }
    }
  }
  return result;
}

double WebCore::FragmentedSharedBuffer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  uint64_t v21;
  double result;
  size_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  WebCore::SharedBuffer *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;

  if (a1 != a2 && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48))
  {
    v3 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(a2 + 8);
      v8 = v6;
      while (v7 != *(_QWORD *)(a2 + 8) + 16 * *(unsigned int *)(a2 + 20))
      {
        v9 = *(unsigned int **)(v8 + 8);
        v10 = *(unsigned int **)(v7 + 8);
        if (v9 == v10 && (v5 | v4) == 0)
        {
          v5 = 0;
          v4 = 0;
          v8 += 16;
          v7 += 16;
        }
        else
        {
          v12 = v9[6];
          if ((_DWORD)v12 == -1)
            goto LABEL_28;
          v28 = a2;
          v29 = v8;
          v31 = &v30;
          v13 = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v31, v9 + 2);
          v14 = v10[6];
          if ((_DWORD)v14 == -1)
            goto LABEL_28;
          v15 = v13 - v5;
          v31 = &v30;
          v16 = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v31, v10 + 2);
          if (v16 - v4 < v15)
            v15 = v16 - v4;
          v17 = v9[6];
          if ((_DWORD)v17 == -1
            || (v31 = &v30,
                v18 = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v17])(&v31, v9 + 2), v19 = v10[6], (_DWORD)v19 == -1))
          {
LABEL_28:
            v27 = (WebCore::SharedBuffer *)std::__throw_bad_variant_access[abi:sn180100]();
            return WebCore::SharedBuffer::SharedBuffer(v27);
          }
          v20 = (const void *)(v18 + v5);
          v31 = &v30;
          v21 = ((uint64_t (*)(char **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v19])(&v31, v10 + 2);
          if (memcmp(v20, (const void *)(v21 + v4), v15))
            return result;
          v5 += v15;
          v23 = v15 + v4;
          v24 = WebCore::DataSegment::size((WebCore::DataSegment *)v9);
          v25 = v5 == v24;
          if (v5 == v24)
            v5 = 0;
          v8 = v29 + 16 * v25;
          v26 = WebCore::DataSegment::size((WebCore::DataSegment *)v10);
          v7 += 16 * (v23 == v26);
          if (v23 == v26)
            v4 = 0;
          else
            v4 = v23;
          v6 = *(_QWORD *)(a1 + 8);
          v3 = *(unsigned int *)(a1 + 20);
          a2 = v28;
        }
        if (v8 == v6 + 16 * v3)
          return result;
      }
    }
  }
  return result;
}

double WebCore::SharedBuffer::SharedBuffer(WebCore::SharedBuffer *this)
{
  double result;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *(_QWORD *)&result = 1;
  *((_QWORD *)this + 2) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 40) = 1;
  return result;
}

{
  double result;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *(_QWORD *)&result = 1;
  *((_QWORD *)this + 2) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 40) = 1;
  return result;
}

uint64_t WebCore::SharedBuffer::SharedBuffer(uint64_t a1, WTF **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  WTF *v8;
  uint64_t v9;
  _QWORD *v10;
  WTF **v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  WTF *v20;
  char v21;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v2 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = *((unsigned int *)*a2 + 6);
  if ((_DWORD)v3 == -1)
  {
    v18 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::SharedBuffer::SharedBuffer(v18);
  }
  else
  {
    v6 = (uint64_t)*a2 + 8;
    v19 = &v21;
    *(_QWORD *)(a1 + 48) = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v19, v6);
    v8 = *a2;
    *a2 = 0;
    v19 = 0;
    v20 = v8;
    v9 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 16))
    {
      WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>((uint64_t)v2, (unint64_t)&v19);
    }
    else
    {
      v10 = (_QWORD *)(*v2 + 16 * v9);
      *v10 = 0;
      v11 = (WTF **)(v10 + 1);
      do
        v12 = __ldaxr((unsigned int *)v8);
      while (__stlxr(v12 + 1, (unsigned int *)v8));
      *v11 = v8;
      ++*(_DWORD *)(a1 + 20);
    }
    v13 = (unsigned int *)v20;
    v20 = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        v17 = v13[6];
        if ((_DWORD)v17 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v17])(&v21, v13 + 2);
        v13[6] = -1;
        WTF::fastFree((WTF *)v13, v7);
      }
    }
    *(_BYTE *)(a1 + 40) = 1;
    return a1;
  }
}

uint64_t WebCore::SharedBuffer::SharedBuffer(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int **v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  char v18;

  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v4 = *a2;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(*a2 + 48);
  if (*(_DWORD *)(v4 + 20) == 1)
  {
    v16 = 0;
    v5 = *(unsigned int **)(*(_QWORD *)(v4 + 8) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v17 = (WTF *)v5;
    v7 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 16))
    {
      WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>((uint64_t)v3, (unint64_t)&v16);
    }
    else
    {
      v8 = (_QWORD *)(*v3 + 16 * v7);
      *v8 = v16;
      v9 = (unsigned int **)(v8 + 1);
      do
        v10 = __ldaxr(v5);
      while (__stlxr(v10 + 1, v5));
      *v9 = v5;
      ++*(_DWORD *)(a1 + 20);
    }
    v11 = (unsigned int *)v17;
    v17 = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        v15 = v11[6];
        if ((_DWORD)v15 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v15])(&v18, v11 + 2);
        v11[6] = -1;
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

{
  uint64_t result;

  result = WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(a1, a2);
  *(_BYTE *)(result + 40) = 1;
  return result;
}

{
  uint64_t result;

  result = WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(a1, a2);
  *(_BYTE *)(result + 40) = 1;
  return result;
}

void WebCore::SharedBuffer::createWithContentsOfFile(WTF::FileSystemImpl *this@<X0>, const WTF::String *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  int v14;
  char v15;

  if (a3)
  {
    LOBYTE(v12) = 0;
    MEMORY[0x19AEA49EC](&v13, this, a2, &v12);
    if ((_BYTE)v12)
    {
      v6 = WTF::fastMalloc((WTF *)0x38);
      v7 = WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(v6, (uint64_t *)&v13);
      *(_BYTE *)(v7 + 40) = 1;
      *a4 = v7;
      WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v13);
      return;
    }
    WTF::FileSystemImpl::MappedFileData::~MappedFileData((WTF::FileSystemImpl::MappedFileData *)&v13);
  }
  WTF::FileSystemImpl::readEntireFile(this, a2);
  if (v15)
  {
    WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v13, &v12);
    v8 = v12;
    v12 = 0;
    *a4 = v8;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v12, v9);
    if (v15)
    {
      v11 = v13;
      if (v13)
      {
        v13 = 0;
        v14 = 0;
        WTF::fastFree(v11, v10);
      }
    }
  }
  else
  {
    *a4 = 0;
  }
}

uint64_t WebCore::SharedBuffer::operator[](uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  char *v7;

  if (*(_QWORD *)(a1 + 48) <= a2 || !*(_DWORD *)(a1 + 20))
  {
    __break(0xC471u);
    JUMPOUT(0x1960EE6D4);
  }
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::DataSegment::create(v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v3])(&v7, v2 + 8)+ a2;
  }
}

BOOL WebCore::DataSegment::containsMappedFileData(WebCore::DataSegment *this)
{
  return *((_DWORD *)this + 6) == 2;
}

WebCore::SharedBufferBuilder *WebCore::SharedBufferBuilder::SharedBufferBuilder(WebCore::SharedBufferBuilder *this, unsigned int **a2)
{
  void *v3;
  unsigned int *v5;

  *(_QWORD *)this = 0;
  if (*a2)
  {
    v5 = *a2;
    *a2 = 0;
    WebCore::SharedBufferBuilder::initialize(this, &v5);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v5, v3);
  }
  return this;
}

{
  void *v3;
  unsigned int *v5;

  *(_QWORD *)this = 0;
  if (*a2)
  {
    v5 = *a2;
    *a2 = 0;
    WebCore::SharedBufferBuilder::initialize(this, &v5);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v5, v3);
  }
  return this;
}

uint64_t WebCore::SharedBufferBuilder::initialize(WebCore::SharedBufferBuilder *this, unsigned int **a2)
{
  unsigned int v4;
  unsigned int *v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  char v21;

  v4 = atomic_load(*a2);
  if (v4 != 1 || (v5 = *a2, *((_BYTE *)*a2 + 40)))
  {
    WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)this);
    return WebCore::FragmentedSharedBuffer::append(*(WebCore::FragmentedSharedBuffer **)this, (const WebCore::FragmentedSharedBuffer *)*a2);
  }
  else
  {
    *a2 = 0;
    result = *(_QWORD *)this;
    *(_QWORD *)this = v5;
    if (result)
    {
      do
      {
        v7 = __ldaxr((unsigned int *)result);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, (unsigned int *)result));
      if (!v8)
      {
        atomic_store(1u, (unsigned int *)result);
        v9 = *(unsigned int *)(result + 20);
        if ((_DWORD)v9)
        {
          v10 = *(_QWORD *)(result + 8);
          v11 = v10 + 16 * v9;
          do
          {
            v12 = *(unsigned int **)(v10 + 8);
            *(_QWORD *)(v10 + 8) = 0;
            if (v12)
            {
              do
              {
                v13 = __ldaxr(v12);
                v14 = v13 - 1;
              }
              while (__stlxr(v14, v12));
              if (!v14)
              {
                v19 = result;
                v20 = (WTF *)v12;
                atomic_store(1u, v12);
                v18 = v12[6];
                if ((_DWORD)v18 != -1)
                  ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v18])(&v21, (char *)v20 + 8);
                *((_DWORD *)v20 + 6) = -1;
                WTF::fastFree(v20, a2);
                result = v19;
              }
            }
            v10 += 16;
          }
          while (v10 != v11);
        }
        v15 = *(WTF **)(result + 8);
        if ((WTF *)(result + 24) != v15 && v15 != 0)
        {
          *(_QWORD *)(result + 8) = 0;
          *(_DWORD *)(result + 16) = 0;
          v17 = result;
          WTF::fastFree(v15, a2);
          result = v17;
        }
        return WTF::fastFree((WTF *)result, a2);
      }
    }
  }
  return result;
}

WebCore::SharedBufferBuilder *WebCore::SharedBufferBuilder::operator=(WebCore::SharedBufferBuilder *this, unsigned int **a2)
{
  unsigned int *v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v21;
  unsigned int **v22;
  unsigned int **v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int **v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  char v40;
  char v41;

  v3 = *a2;
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    if (v4)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v4);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v4));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v4);
        v12 = *(unsigned int *)(v4 + 20);
        if ((_DWORD)v12)
        {
          v13 = *(_QWORD *)(v4 + 8);
          v14 = v13 + 16 * v12;
          do
          {
            v15 = *(unsigned int **)(v13 + 8);
            *(_QWORD *)(v13 + 8) = 0;
            if (v15)
            {
              do
              {
                v16 = __ldaxr(v15);
                v17 = v16 - 1;
              }
              while (__stlxr(v17, v15));
              if (!v17)
              {
                v31 = v14;
                v32 = v13;
                v34 = (WTF *)v15;
                v36 = v4;
                atomic_store(1u, v15);
                v18 = v15[6];
                if ((_DWORD)v18 != -1)
                  ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v18])(&v41, v15 + 2);
                *((_DWORD *)v34 + 6) = -1;
                WTF::fastFree(v34, a2);
                v4 = v36;
                v14 = v31;
                v13 = v32;
              }
            }
            v13 += 16;
          }
          while (v13 != v14);
        }
        v19 = *(WTF **)(v4 + 8);
        if ((WTF *)(v4 + 24) != v19 && v19 != 0)
        {
          *(_QWORD *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
          v38 = v4;
          WTF::fastFree(v19, a2);
          v4 = v38;
        }
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    v39 = *a2;
    *a2 = 0;
    WebCore::SharedBufferBuilder::initialize(this, &v39);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v39, v8);
  }
  else if (v4)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v4);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v4));
    if (!v10)
    {
      atomic_store(1u, (unsigned int *)v4);
      v21 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v21)
      {
        v22 = *(unsigned int ***)(v4 + 8);
        v23 = &v22[2 * v21];
        do
        {
          v24 = v22[1];
          v22[1] = 0;
          if (v24)
          {
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              v33 = v23;
              v35 = (WTF *)v22;
              v37 = v4;
              atomic_store(1u, v24);
              v27 = v24[6];
              if ((_DWORD)v27 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v27])(&v40, v24 + 2);
              v24[6] = -1;
              WTF::fastFree((WTF *)v24, a2);
              v22 = (unsigned int **)v35;
              v4 = v37;
              v23 = v33;
            }
          }
          v22 += 2;
        }
        while (v22 != v23);
      }
      v28 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v28 && v28 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v30 = v4;
        WTF::fastFree(v28, a2);
        v4 = v30;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return this;
}

uint64_t WebCore::SharedBufferBuilder::tryCreateArrayBuffer@<X0>(WebCore::FragmentedSharedBuffer **this@<X0>, _QWORD *a2@<X8>)
{
  WebCore::FragmentedSharedBuffer *v2;

  v2 = *this;
  if (v2)
    return WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(v2, a2);
  else
    return JSC::ArrayBuffer::tryCreate();
}

uint64_t *WebCore::SharedBufferBuilder::takeAsContiguous@<X0>(WebCore::SharedBufferBuilder *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v7;

  v4 = *(_QWORD *)this;
  if (v4)
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    v4 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v4 = 1;
    *(_QWORD *)(v4 + 8) = v4 + 24;
    *(_QWORD *)(v4 + 16) = 1;
    *(_BYTE *)(v4 + 40) = 0;
    *(_QWORD *)(v4 + 48) = 0;
  }
  v7 = v4;
  WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v4, a2);
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v7, v5);
}

uint64_t *WebCore::SharedBufferBuilder::takeAsArrayBuffer@<X0>(WebCore::SharedBufferBuilder *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  WebCore::FragmentedSharedBuffer *v5;

  if (!*(_QWORD *)this)
    return (uint64_t *)JSC::ArrayBuffer::tryCreate();
  WebCore::SharedBufferBuilder::take(this, &v5);
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(v5, a2);
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v5, v3);
}

uint64_t WebCore::SharedBufferDataView::SharedBufferDataView(_QWORD *a1, uint64_t *a2, unint64_t a3, unint64_t a4, char a5)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  WebCore::SharedBufferDataView *v14;
  const WebCore::SharedBufferDataView *v15;
  unint64_t v16;
  char v17;
  char *v18;

  v5 = a3;
  v7 = *a2;
  *a2 = 0;
  *a1 = v7;
  a1[1] = a3;
  if (!a5)
  {
    v8 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v8 == -1)
    {
LABEL_11:
      v14 = (WebCore::SharedBufferDataView *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::SharedBufferDataView::SharedBufferDataView(v14, v15, v16);
    }
    v18 = &v17;
    a4 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v8])(&v18, v7 + 8)- a3;
    v7 = *a1;
    v5 = a1[1];
  }
  a1[2] = a4;
  v9 = *(unsigned int *)(v7 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_11;
  v18 = &v17;
  if (v5 >= ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v18, v7 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x1960EED48);
  }
  v10 = *(unsigned int *)(*a1 + 24);
  if ((_DWORD)v10 == -1)
    goto LABEL_11;
  v11 = a1[2];
  v12 = *a1 + 8;
  v18 = &v17;
  if (v11 > ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4sizeEvE3__0JZNKS9_4sizeEvE3__1ZNKS9_4sizeEvE3__2ZNKS9_4sizeEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v10])(&v18, v12)- a1[1])
  {
    __break(0xC471u);
    JUMPOUT(0x1960EED68);
  }
  return (uint64_t)a1;
}

WebCore::SharedBufferDataView *WebCore::SharedBufferDataView::SharedBufferDataView(WebCore::SharedBufferDataView *this, const WebCore::SharedBufferDataView *a2, unint64_t a3)
{
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  char v13;

  v4 = *(unsigned int **)a2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v12 = (WTF *)v4;
  WebCore::SharedBufferDataView::SharedBufferDataView(this, (uint64_t *)&v12, *((_QWORD *)a2 + 1), a3, 1);
  v7 = (unsigned int *)v12;
  v12 = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = v7[6];
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v11])(&v13, v7 + 2);
      v7[6] = -1;
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  return this;
}

{
  unsigned int *v4;
  unsigned int v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  WTF *v12;
  char v13;

  v4 = *(unsigned int **)a2;
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v12 = (WTF *)v4;
  WebCore::SharedBufferDataView::SharedBufferDataView(this, (uint64_t *)&v12, *((_QWORD *)a2 + 1), a3, 1);
  v7 = (unsigned int *)v12;
  v12 = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = v7[6];
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v11])(&v13, v7 + 2);
      v7[6] = -1;
      WTF::fastFree((WTF *)v7, v6);
    }
  }
  return this;
}

uint64_t *WebCore::utf8Buffer@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12[2];
  uint64_t v13;
  WTF *v14;
  uint64_t v15;

  if (*this)
  {
    v4 = 0;
    v5 = *(unsigned int *)(*this + 4);
    v6 = 3 * v5;
    v14 = 0;
    LODWORD(v15) = 0;
    HIDWORD(v15) = 3 * v5;
    if ((_DWORD)v5)
    {
      if (v5 >= 0x55555556)
      {
        __break(0xC471u);
        return this;
      }
      v7 = this;
      v8 = (WTF *)WTF::fastMalloc((WTF *)(3 * v5));
      LODWORD(v15) = v6;
      v14 = v8;
      if (!*v7 || (*(_BYTE *)(*v7 + 16) & 4) != 0)
        WTF::Unicode::convert();
      else
        WTF::Unicode::convert();
      v4 = v13;
      if (LOBYTE(v12[0]))
      {
        *a2 = 0;
LABEL_10:
        v14 = 0;
        LODWORD(v15) = 0;
        return (uint64_t *)WTF::fastFree(v8, v9);
      }
    }
  }
  else
  {
    v4 = 0;
    v14 = 0;
    v15 = 0;
  }
  HIDWORD(v15) = v4;
  WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v14, v12);
  v10 = v12[0];
  v12[0] = 0;
  *a2 = v10;
  this = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v12, v11);
  v8 = v14;
  if (v14)
    goto LABEL_10;
  return this;
}

WTF *WebCore::SharedBuffer::create@<X0>(WTF **a1@<X0>, _QWORD *a2@<X8>)
{
  return WebCore::FragmentedSharedBuffer::makeContiguous(*a1, a2);
}

uint64_t WebCore::SharedMemoryHandle::SharedMemoryHandle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(result + 8) = a3;
  if (!*(_DWORD *)result)
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

{
  uint64_t result;

  result = WTF::MachSendRight::MachSendRight();
  *(_QWORD *)(result + 8) = a3;
  if (!*(_DWORD *)result)
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::SharedMemory::copySpan@<X0>(mach_vm_size_t size@<X1>, uint64_t result@<X0>, _QWORD *a3@<X8>)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;

  if (size)
  {
    v5 = (const void *)result;
    result = WebCore::SharedMemory::allocate(size, &v7);
    v6 = v7;
    if (!v7)
    {
LABEL_5:
      *a3 = v6;
      return result;
    }
    if (*(_QWORD *)(v7 + 8) == size)
    {
      result = (uint64_t)memcpy(*(void **)(v7 + 16), v5, size);
      v6 = v7;
      goto LABEL_5;
    }
    result = 725;
    __break(0xC471u);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

_QWORD *WebCore::SharedMemory::createSharedBuffer@<X0>(WebCore::SharedMemory *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD *result;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  do
    v6 = __ldaxr((unsigned int *)this);
  while (__stlxr(v6 + 1, (unsigned int *)this));
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = &off_1E3406F50;
  v7[1] = this;
  v13 = v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E3406F78;
  v8[1] = a2;
  v14 = v8;
  v9 = WTF::fastMalloc((WTF *)0x38);
  v15 = WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(v9, (uint64_t *)&v13);
  v10 = WTF::fastMalloc((WTF *)0x38);
  *a3 = WebCore::SharedBuffer::SharedBuffer(v10, &v15);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v15, v11);
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  result = v13;
  if (v13)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  return result;
}

uint64_t WebCore::computeSharedStringHash(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v10;

  v2 = -1640531527;
  if (a2 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = (*(unsigned __int16 *)(a1 + 2 * v3 + 2) << 11) ^ ((v2 + *(unsigned __int16 *)(a1 + 2 * v3)) << 16) ^ (v2 + *(unsigned __int16 *)(a1 + 2 * v3));
      v2 = v4 + (v4 >> 11);
      v5 = v3 + 3;
      v3 += 2;
    }
    while (v5 < a2);
  }
  if ((a2 & 1) != 0)
  {
    v10 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
    v2 = ((v2 + v10) ^ ((v2 + v10) << 11)) + (((v2 + v10) ^ ((v2 + v10) << 11)) >> 17);
  }
  v6 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
  v8 = v7 ^ (v7 << 10);
  if (!v8)
    v8 = 0x800000;
  return v8 | ((v8 == -1) << 31);
}

uint64_t WTF::StringView::upconvertedCharacters<32ul>@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int8x16_t *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int16 v9;
  unint64_t v10;
  __int128 v11;
  char *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  char *v16;
  char *v17;
  char *v18;
  int8x16x2_t v19;
  int8x16x2_t v20;
  int8x16x2_t v21;

  v3 = *(int8x16_t **)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = (char *)(a2 + 16);
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 32;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v6 = v4;
  if ((v4 & 0xFF00000000) != 0)
  {
    if (v4 > 0x20uLL)
    {
      if (v4 <= 0x29uLL)
        v10 = 41;
      else
        v10 = v4;
      result = WTF::Vector<char16_t,32ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a2, v10);
      *(_DWORD *)(a2 + 12) = v4;
      v5 = *(char **)a2;
      if (v4 >= 0x40uLL)
      {
        v7 = &v5[2 * (v4 & 0xFFFFFFC0)];
        v11 = 0uLL;
        v12 = *(char **)a2;
        do
        {
          v19.val[0] = *v3;
          v13 = v3[1];
          v20.val[0] = v3[2];
          v14 = v3[3];
          v3 += 4;
          v15 = v14;
          v20.val[1] = 0uLL;
          v21.val[0] = v13;
          v19.val[1] = 0uLL;
          v16 = v12;
          vst2q_s8(v16, v19);
          v16 += 32;
          v21.val[1] = 0uLL;
          vst2q_s8(v16, v21);
          v17 = v12 + 64;
          vst2q_s8(v17, v20);
          v18 = v12 + 96;
          vst2q_s8(v18, *(int8x16x2_t *)(&v11 - 1));
          v12 += 128;
        }
        while (v12 != v7);
        goto LABEL_5;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = v4;
    }
    v7 = v5;
LABEL_5:
    v8 = &v5[2 * v4];
    while (v7 != v8)
    {
      v9 = v3->u8[0];
      v3 = (int8x16_t *)((char *)v3 + 1);
      *(_WORD *)v7 = v9;
      v7 += 2;
    }
    v3 = *(int8x16_t **)a2;
    v6 = *(unsigned int *)(a2 + 12);
  }
  *(_QWORD *)(a2 + 80) = v3;
  *(_QWORD *)(a2 + 88) = v6;
  return result;
}

WTF *WebCore::ScrollSnapOffsetsInfo<WebCore::LayoutUnit,WebCore::LayoutRect>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  WTF *v5;
  WTF *result;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  _OWORD *v19;
  void *v20;
  uint64_t v21;
  WTF *v22;
  __int128 v23;

  v4 = (unsigned int *)(a2 + 24);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = (WTF *)(a1 + 24);
  WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 8), (unsigned int *)(a2 + 8));
  result = WTF::Vector<WebCore::SnapOffset<float>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v5, v4);
  if (a2 == a1)
  {
LABEL_11:
    WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::ElementIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 56), (WTF *)(a2 + 56));
    return (WTF *)a1;
  }
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_DWORD *)(a2 + 52);
  if (v8 > v9)
  {
    *(_DWORD *)(a1 + 52) = v9;
    v8 = v9;
    goto LABEL_4;
  }
  v10 = *(_DWORD *)(a1 + 48);
  if (v9 <= v10)
  {
LABEL_4:
    if (v8)
    {
      memmove(*(void **)(a1 + 40), *(const void **)(a2 + 40), 16 * v8);
      v8 = *(_DWORD *)(a1 + 52);
    }
    v11 = *(unsigned int *)(a2 + 52);
    if (v8 != (_DWORD)v11)
    {
      v12 = (_OWORD *)(*(_QWORD *)(a1 + 40) + 16 * v8);
      v13 = (__int128 *)(*(_QWORD *)(a2 + 40) + 16 * v8);
      v14 = 16 * v11 - 16 * v8;
      do
      {
        v15 = *v13++;
        *v12++ = v15;
        v14 -= 16;
      }
      while (v14);
      v8 = *(_DWORD *)(a2 + 52);
    }
    *(_DWORD *)(a1 + 52) = v8;
    goto LABEL_11;
  }
  if (v10)
  {
    if (v8)
      *(_DWORD *)(a1 + 52) = 0;
    result = *(WTF **)(a1 + 40);
    if (result)
    {
      *(_QWORD *)(a1 + 40) = 0;
      *(_DWORD *)(a1 + 48) = 0;
      result = (WTF *)WTF::fastFree(result, v7);
      v10 = *(_DWORD *)(a1 + 48);
    }
  }
  v16 = *(unsigned int *)(a2 + 52);
  if (v10 >= v16)
  {
LABEL_27:
    v8 = *(_DWORD *)(a1 + 52);
    goto LABEL_4;
  }
  if (!(v16 >> 28))
  {
    v17 = *(WTF **)(a1 + 40);
    v18 = *(unsigned int *)(a1 + 52);
    v19 = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v16));
    *(_DWORD *)(a1 + 48) = v16;
    *(_QWORD *)(a1 + 40) = v19;
    if ((_DWORD)v18)
    {
      v21 = 16 * v18;
      v22 = v17;
      do
      {
        v23 = *(_OWORD *)v22;
        v22 = (WTF *)((char *)v22 + 16);
        *v19++ = v23;
        v21 -= 16;
      }
      while (v21);
    }
    if (v17)
    {
      if (*(WTF **)(a1 + 40) == v17)
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 0;
      }
      WTF::fastFree(v17, v20);
    }
    goto LABEL_27;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DataSegment::data(void)::$_0,WebCore::DataSegment::data(void)::$_1,WebCore::DataSegment::data(void)::$_2,WebCore::DataSegment::data(void)::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<__CFData const*>,WTF::FileSystemImpl::MappedFileData,WebCore::DataSegment::Provider> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

const UInt8 *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DataSegment::data(void)::$_0,WebCore::DataSegment::data(void)::$_1,WebCore::DataSegment::data(void)::$_2,WebCore::DataSegment::data(void)::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<__CFData const*>,WTF::FileSystemImpl::MappedFileData,WebCore::DataSegment::Provider> const&>(uint64_t a1, CFDataRef *a2)
{
  return CFDataGetBytePtr(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DataSegment::data(void)::$_0,WebCore::DataSegment::data(void)::$_1,WebCore::DataSegment::data(void)::$_2,WebCore::DataSegment::data(void)::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<__CFData const*>,WTF::FileSystemImpl::MappedFileData,WebCore::DataSegment::Provider> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DataSegment::data(void)::$_0,WebCore::DataSegment::data(void)::$_1,WebCore::DataSegment::data(void)::$_2,WebCore::DataSegment::data(void)::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<__CFData const*>,WTF::FileSystemImpl::MappedFileData,WebCore::DataSegment::Provider> const&>(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DataSegment::size(void)::$_0,WebCore::DataSegment::size(void)::$_1,WebCore::DataSegment::size(void)::$_2,WebCore::DataSegment::size(void)::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<__CFData const*>,WTF::FileSystemImpl::MappedFileData,WebCore::DataSegment::Provider> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

CFIndex std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DataSegment::size(void)::$_0,WebCore::DataSegment::size(void)::$_1,WebCore::DataSegment::size(void)::$_2,WebCore::DataSegment::size(void)::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<__CFData const*>,WTF::FileSystemImpl::MappedFileData,WebCore::DataSegment::Provider> const&>(uint64_t a1, CFDataRef *a2)
{
  return CFDataGetLength(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DataSegment::size(void)::$_0,WebCore::DataSegment::size(void)::$_1,WebCore::DataSegment::size(void)::$_2,WebCore::DataSegment::size(void)::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<__CFData const*>,WTF::FileSystemImpl::MappedFileData,WebCore::DataSegment::Provider> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::DataSegment::size(void)::$_0,WebCore::DataSegment::size(void)::$_1,WebCore::DataSegment::size(void)::$_2,WebCore::DataSegment::size(void)::$_3> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RetainPtr<__CFData const*>,WTF::FileSystemImpl::MappedFileData,WebCore::DataSegment::Provider> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
}

uint64_t WTF::VectorTypeOperations<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>::destruct(uint64_t result, unsigned int **a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if ((unsigned int **)result != a2)
  {
    v11 = v2;
    v12 = v3;
    v5 = (unsigned int **)result;
    do
    {
      v6 = v5[1];
      v5[1] = 0;
      if (v6)
      {
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          v9 = v6[6];
          if ((_DWORD)v9 != -1)
            ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v9])(&v10, v6 + 2);
          v6[6] = -1;
          result = WTF::fastFree((WTF *)v6, a2);
        }
      }
      v5 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ShareableResource::wrapInSharedBuffer(void)::$_0,unsigned char const*>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;

  v3 = a1[1];
  *a1 = &off_1E3406E28;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        v8 = v3;
        do
        {
          v9 = __ldaxr(v7);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v7));
        if (!v10)
        {
          atomic_store(1u, v7);
          WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v7);
          WTF::fastFree(v11, v12);
          v3 = v8;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShareableResource::wrapInSharedBuffer(void)::$_0,unsigned char const*>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3406E28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        v8 = v3;
        do
        {
          v9 = __ldaxr(v7);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v7));
        if (!v10)
        {
          atomic_store(1u, v7);
          WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v7);
          WTF::fastFree(v11, v12);
          v3 = v8;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unint64_t WTF::Detail::CallableWrapper<WebCore::ShareableResource::wrapInSharedBuffer(void)::$_0,unsigned char const*>::call(unint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(unsigned int *)(v1 + 16);
  if (*(_QWORD *)(v2 + 8) >= v3)
    return *(_QWORD *)(v2 + 16) + v3;
  __break(1u);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::ShareableResource::wrapInSharedBuffer(void)::$_1,unsigned long>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;

  v3 = a1[1];
  *a1 = &off_1E3406E50;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        v8 = v3;
        do
        {
          v9 = __ldaxr(v7);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v7));
        if (!v10)
        {
          atomic_store(1u, v7);
          WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v7);
          WTF::fastFree(v11, v12);
          v3 = v8;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShareableResource::wrapInSharedBuffer(void)::$_1,unsigned long>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v11;
  void *v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3406E50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        v8 = v3;
        do
        {
          v9 = __ldaxr(v7);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v7));
        if (!v10)
        {
          atomic_store(1u, v7);
          WebCore::SharedMemory::~SharedMemory((WebCore::SharedMemory *)v7);
          WTF::fastFree(v11, v12);
          v3 = v8;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::ShareableResource::wrapInSharedBuffer(void)::$_1,unsigned long>::call(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FragmentedSharedBuffer::fromIPCData(std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,WebCore::FragmentedSharedBuffer::fromIPCData(std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 8) > 0xFFFuLL && (WebCore::SharedMemory::map(a1, 0, &v10), v10))
  {
    v4 = *(WTF **)(v10 + 8);
    v3 = *(WTF **)(v10 + 16);
    v5 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 1;
    *(_BYTE *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v5, v3, v4);
    v11 = v5;
    v6 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v6, &v11);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v11, v7);
    v11 = 0;
    *(_QWORD *)a2 = v6;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v11, v8);
    v9 = (unsigned int *)v10;
    *(_BYTE *)(a2 + 8) = 1;
    v10 = 0;
    if (v9)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::FragmentedSharedBuffer::fromIPCData(std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)::$_0,WebCore::FragmentedSharedBuffer::fromIPCData(std::variant<std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::optional<WebCore::SharedMemoryHandle>,WTF::Vector<std::span<unsigned char const,18446744073709551615ul>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char v7;
  WTF **v8;
  WTF *v9;
  BOOL v10;
  unint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  WTF **v22;
  WTF **v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;

  v3 = *(unsigned int *)(a1 + 12);
  if (!(_DWORD)v3)
  {
    v18 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = v18 + 24;
    *(_QWORD *)(v18 + 16) = 1;
    *(_QWORD *)(v18 + 48) = 0;
    *(_BYTE *)(v18 + 40) = 1;
    v26 = 0;
    *(_QWORD *)a2 = v18;
    *(_BYTE *)(a2 + 8) = 1;
    goto LABEL_15;
  }
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *(WTF ***)a1;
  do
  {
    v9 = v8[v5 + 1];
    v10 = __CFADD__(v6, v9);
    v11 = (unint64_t)v9 + v6;
    if (v10)
      v7 = 1;
    if (!v10)
      v6 = v11;
    v5 += 2;
  }
  while (2 * v3 != v5);
  if (v7 || v6 > 0xFFF)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    return;
  }
  if ((_DWORD)v3 == 1)
  {
    v12 = *v8;
    v13 = v8[1];
    v14 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = v14 + 24;
    *(_QWORD *)(v14 + 16) = 1;
    *(_BYTE *)(v14 + 40) = 0;
    *(_QWORD *)(v14 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v14, v12, v13);
    v26 = v14;
    v15 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v15, &v26);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v26, v16);
    v26 = 0;
    *(_QWORD *)a2 = v15;
    *(_BYTE *)(a2 + 8) = 1;
LABEL_15:
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v26, v17);
    return;
  }
  v20 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v20 = 1;
  *(_QWORD *)(v20 + 8) = v20 + 24;
  *(_QWORD *)(v20 + 16) = 1;
  *(_BYTE *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 48) = 0;
  v21 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v21)
  {
    v22 = *(WTF ***)a1;
    v23 = &v22[2 * v21];
    do
    {
      v24 = *v22;
      v25 = v22[1];
      v22 += 2;
      WebCore::FragmentedSharedBuffer::append(v20, v24, v25);
    }
    while (v22 != v23);
  }
  v26 = 0;
  *(_QWORD *)a2 = v20;
  *(_BYTE *)(a2 + 8) = 1;
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v26, v19);
}

uint64_t WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int **v6;
  unsigned int v7;

  v3 = (_QWORD *)WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = (_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 12));
  v5 = (unsigned int *)v3[1];
  *v4 = *v3;
  v6 = (unsigned int **)(v4 + 1);
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  *v6 = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::FragmentedSharedBuffer::DataSegmentVectorEntry,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::FragmentedSharedBuffer::copyData(void)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(_QWORD *result, void *__src, size_t __n)
{
  uint64_t v5;
  size_t v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;

  if (__n)
  {
    v5 = result[1];
    v6 = *(unsigned int *)(v5 + 8);
    v7 = *(unsigned int *)(v5 + 12);
    v8 = __n + v7;
    if (__n + v7 > v6)
    {
      v10 = v6 + (v6 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v8)
        v12 = __n + v7;
      else
        v12 = v11;
      if (HIDWORD(v12))
        goto LABEL_17;
      v13 = *(void **)v5;
      v14 = (void *)WTF::fastMalloc((WTF *)v12);
      *(_DWORD *)(v5 + 8) = v12;
      *(_QWORD *)v5 = v14;
      memcpy(v14, v13, v7);
      if (v13)
      {
        if (*(void **)v5 == v13)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    v9 = *(unsigned int *)(v5 + 12);
    if (v8 >= v9)
    {
      result = memcpy((void *)(*(_QWORD *)v5 + v9), __src, __n);
      *(_DWORD *)(v5 + 12) = v8;
      return result;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x1960EFD54);
  }
  return result;
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::FragmentedSharedBuffer::toHexString(void)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(_BYTE *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BYTE *v5;
  WTF::StringBuilder *v6;
  int v7;
  unsigned __int8 *v8[2];
  __int128 v9;
  int v10;
  char v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v3 = a3;
    v5 = result;
    do
    {
      ++a2;
      v6 = (WTF::StringBuilder *)*((_QWORD *)v5 + 1);
      WTF::Internal::appendHex();
      v10 = v7;
      v11 = 48;
      v12 = 2;
      v13 = v9;
      v14 = v7;
      v8[0] = (unsigned __int8 *)&v11;
      v8[1] = (unsigned __int8 *)&v13;
      result = WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::HexNumberBuffer>,void>>(v6, v8);
      --v3;
    }
    while (v3);
  }
  return result;
}

_BYTE *WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::PaddingSpecification<WTF::HexNumberBuffer>,void>>(WTF::StringBuilder *a1, unsigned __int8 **a2)
{
  uint64_t v3;
  _BYTE *result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  __int16 v11;
  _WORD *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  char *v25;
  int8x16_t *v26;
  char *v27;
  char *v28;
  __int128 v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  int8x16x2_t v37;
  int8x16x2_t v38;
  int8x16x2_t v39;

  v3 = *((_QWORD *)a1 + 1);
  if ((v3 || (v3 = *(_QWORD *)a1) != 0) && (*(_BYTE *)(v3 + 16) & 4) == 0)
  {
    result = (_BYTE *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(a1);
    if (result)
    {
      v5 = a2[1];
      v8 = *((_DWORD *)v5 + 4);
      v6 = v5 + 16;
      v7 = v8;
      v9 = *((_DWORD *)*a2 + 1);
      if (v9 <= v8)
      {
        v10 = 0;
      }
      else
      {
        v10 = v9 - v7;
        v11 = **a2;
        v12 = result;
        v13 = v10;
        do
        {
          *v12++ = v11;
          --v13;
        }
        while (v13);
      }
      v25 = &result[2 * v10];
      v26 = (int8x16_t *)&v6[-v7];
      v27 = &v25[2 * v7];
      if (v7 >= 0x40)
      {
        v28 = &v25[2 * (v7 & 0xFFFFFFC0)];
        v29 = 0uLL;
        do
        {
          v37.val[0] = *v26;
          v30 = v26[1];
          v38.val[0] = v26[2];
          v31 = v26[3];
          v26 += 4;
          v32 = v31;
          v38.val[1] = 0uLL;
          v39.val[0] = v30;
          v37.val[1] = 0uLL;
          v33 = v25;
          vst2q_s8(v33, v37);
          v33 += 32;
          v39.val[1] = 0uLL;
          vst2q_s8(v33, v39);
          v34 = v25 + 64;
          vst2q_s8(v34, v38);
          v35 = v25 + 96;
          vst2q_s8(v35, *(int8x16x2_t *)(&v29 - 1));
          v25 += 128;
        }
        while (v25 != v28);
        v25 = v28;
      }
      while (v25 != v27)
      {
        v36 = v26->u8[0];
        v26 = (int8x16_t *)((char *)v26 + 1);
        *(_WORD *)v25 = v36;
        v25 += 2;
      }
    }
  }
  else
  {
    result = (_BYTE *)MEMORY[0x19AEA4824]();
    if (result)
    {
      v15 = *a2;
      v14 = a2[1];
      v18 = *((_DWORD *)v14 + 4);
      v16 = (unsigned int *)(v14 + 16);
      v17 = v18;
      v19 = *((_DWORD *)*a2 + 1);
      v20 = v19 >= v18;
      v21 = v19 - v18;
      if ((_DWORD)v21 != 0 && v20)
      {
        v22 = result;
        v23 = v21;
        do
        {
          *v22++ = *v15;
          --v23;
        }
        while (v23);
        v17 = *v16;
      }
      else
      {
        v21 = 0;
      }
      if (v17)
      {
        result += v21;
        v24 = (char *)v16 - v17;
        if (v17 == 1)
          *result = *v24;
        else
          return memcpy(result, v24, v17);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SharedBufferDataView::createSharedBuffer(void)::$_0,unsigned char const*>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  char v8;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3406ED8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3[6];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v7])(&v8, v3 + 2);
      v3[6] = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedBufferDataView::createSharedBuffer(void)::$_0,unsigned char const*>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  char v8;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3406ED8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = v3[6];
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_8[v7])(&v8, v3 + 2);
      v3[6] = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedBufferDataView::createSharedBuffer(void)::$_0,unsigned char const*>::call(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedBufferDataView::createSharedBuffer(void)::$_1,unsigned long>::call(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SharedMemory::copyBuffer(WebCore::FragmentedSharedBuffer const&)::$_0,void,std::span<unsigned char const,18446744073709551615ul>>::call(_QWORD *result, const void *a2, size_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  size_t v7;
  BOOL v8;
  size_t v9;

  v3 = result[1];
  if (*(_QWORD *)(v3 + 8) >= a3
    && (v5 = result,
        result = memcpy(*(void **)v3, a2, a3),
        v6 = (_QWORD *)v5[1],
        v7 = v6[1],
        v8 = v7 >= a3,
        v9 = v7 - a3,
        v8))
  {
    *v6 += a3;
    v6[1] = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SharedMemory::createSharedBuffer(unsigned long)::$_0,unsigned char const*>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;

  v2 = (unsigned int *)a1[1];
  *a1 = &off_1E3406F50;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedMemory::createSharedBuffer(unsigned long)::$_0,unsigned char const*>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3406F50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedMemory::createSharedBuffer(unsigned long)::$_0,unsigned char const*>::call(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedMemory::createSharedBuffer(unsigned long)::$_1,unsigned long>::call(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t WTF::SuperFastHash::computeHash<char16_t,WTF::StringHasher::DefaultConverter>(uint64_t a1, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v10;

  v2 = -1640531527;
  if (a2 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = ((v2 + *(unsigned __int16 *)(a1 + 2 * v3)) << 16) ^ (*(unsigned __int16 *)(a1 + 2 * v3 + 2) << 11) ^ (v2 + *(unsigned __int16 *)(a1 + 2 * v3));
      v2 = v4 + (v4 >> 11);
      v5 = v3 + 3;
      v3 += 2;
    }
    while (v5 < a2);
  }
  if ((a2 & 1) != 0)
  {
    v10 = *(unsigned __int16 *)(a1 + 2 * a2 - 2);
    v2 = ((v2 + v10) ^ ((v2 + v10) << 11)) + (((v2 + v10) ^ ((v2 + v10) << 11)) >> 17);
  }
  v6 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  v7 = (v6 ^ (4 * v6)) + ((v6 ^ (4 * v6)) >> 15);
  v8 = v7 ^ (v7 << 10);
  if (v8)
    return v8;
  else
    return 0x800000;
}

_BYTE *WTF::append<unsigned char,512ul>(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  _BYTE *result;
  _BYTE *v6;
  _BYTE *v7;
  unsigned __int128 v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = v3 + a3;
  if (v4 > *(unsigned int *)(a1 + 8))
  {
    v13 = a2;
    v14 = a1;
    v10 = v3 + a3;
    v11 = a3;
    v12 = *(unsigned int *)(a1 + 12);
    WTF::Vector<unsigned char,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((void **)a1, (WTF *)(v3 + a3));
    a3 = v11;
    v3 = v12;
    LODWORD(v4) = v10;
    a2 = v13;
    a1 = v14;
  }
  *(_DWORD *)(a1 + 12) = v4;
  result = (_BYTE *)(*(_QWORD *)a1 + v3);
  if ((a3 & 0xFF00000000) != 0)
  {
    if ((_DWORD)a3)
    {
      if ((_DWORD)a3 == 1)
        *result = *a2;
      else
        return memcpy(result, a2, a3);
    }
  }
  else
  {
    v6 = &result[a3];
    if (a3 >= 0x10)
    {
      v7 = &result[a3 & 0xFFFFFFF0];
      do
      {
        v8 = (unsigned __int128)vld2q_s8(a2);
        a2 += 32;
        *(_OWORD *)result = v8;
        result += 16;
      }
      while (result != v7);
      result = v7;
    }
    while (result != v6)
    {
      v9 = *a2;
      a2 += 2;
      *result++ = v9;
    }
  }
  return result;
}

void **WTF::Vector<unsigned char,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, WTF *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  size_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= (unint64_t)a2)
    v5 = (unint64_t)a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 0x201)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 512;
    }
    else
    {
      if (HIDWORD(v5))
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)v5);
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

unint64_t WebCore::cleanSlashDotDotSlashes<unsigned char>(unint64_t result, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  do
  {
    if (a2)
    {
      result = WTF::reverseFind<unsigned char>(*(_QWORD *)v3, v4, 47, a2 - 1);
      if (result == -1)
      {
        v4 = *(unsigned int *)(v3 + 12);
      }
      else
      {
        if (result < 4)
          goto LABEL_9;
        v4 = *(unsigned int *)(v3 + 12);
        if (result - 2 >= v4)
        {
          __break(0xC471u);
          JUMPOUT(0x1960F05F4);
        }
        if (*(_BYTE *)(*(_QWORD *)v3 + result - 2) != 58)
          goto LABEL_9;
        if (result - 1 >= v4)
        {
          __break(0xC471u);
          JUMPOUT(0x1960F05FCLL);
        }
        if (*(_BYTE *)(*(_QWORD *)v3 + result - 1) != 47)
        {
LABEL_9:
          if (result < a2 + 3)
          {
            do
            {
              if (result >= *(unsigned int *)(v3 + 12))
              {
LABEL_48:
                __break(0xC471u);
                JUMPOUT(0x1960F05ECLL);
              }
              *(_BYTE *)(*(_QWORD *)v3 + result++) = 0;
            }
            while (a2 + 3 != result);
          }
          goto LABEL_18;
        }
      }
    }
    if (a2 >= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x1960F0604);
    }
    *(_BYTE *)(*(_QWORD *)v3 + a2) = 0;
    if (a2 + 1 >= *(unsigned int *)(v3 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x1960F060CLL);
    }
    *(_BYTE *)(*(_QWORD *)v3 + a2 + 1) = 0;
    if (a2 + 2 >= *(unsigned int *)(v3 + 12))
    {
      __break(0xC471u);
      JUMPOUT(0x1960F0614);
    }
    *(_BYTE *)(*(_QWORD *)v3 + a2 + 2) = 0;
LABEL_18:
    v5 = *(_QWORD *)v3;
    v4 = *(unsigned int *)(v3 + 12);
    if (v4 < 4)
      break;
    a2 += 3;
    if (v4 - 3 <= a2)
      goto LABEL_37;
    while (*(_BYTE *)(v5 + a2) != 47
         || *(_BYTE *)(v5 + a2 + 1) != 46
         || *(_BYTE *)(v5 + a2 + 2) != 46
         || *(_BYTE *)(v5 + a2 + 3) != 47)
    {
      ++a2;
      if (6 - v4 + a2 == 3)
        goto LABEL_37;
    }
  }
  while (a2 != -1);
  if (!*(_DWORD *)(v3 + 12))
  {
    v6 = 0;
    goto LABEL_29;
  }
LABEL_37:
  v6 = 0;
  while (*(_BYTE *)(v5 + v6))
  {
    if (v4 == ++v6)
      return result;
  }
LABEL_29:
  if (v6 != v4)
  {
    v7 = v6 + 1;
    if (v6 + 1 < v4)
    {
      do
      {
        v8 = *(unsigned int *)(v3 + 12);
        if (v7 >= v8)
        {
          __break(0xC471u);
          JUMPOUT(0x1960F061CLL);
        }
        if (*(_BYTE *)(*(_QWORD *)v3 + v7))
        {
          if (v6 >= v8)
            goto LABEL_48;
          *(_BYTE *)(*(_QWORD *)v3 + v6++) = *(_BYTE *)(*(_QWORD *)v3 + v7);
        }
        ++v7;
      }
      while (v4 != v7);
    }
    *(_DWORD *)(v3 + 12) = v6;
  }
  return result;
}

uint64_t WebCore::cleanSlashDotSlashes<unsigned char>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(result + 12);
  do
  {
    if (a2 >= v2 || (*(_BYTE *)(*(_QWORD *)result + a2) = 0, a2 + 1 >= *(unsigned int *)(result + 12)))
    {
      __break(0xC471u);
      JUMPOUT(0x1960F06C8);
    }
    *(_BYTE *)(*(_QWORD *)result + a2 + 1) = 0;
    v2 = *(unsigned int *)(result + 12);
    if (v2 < 3)
      break;
    a2 += 2;
    if (v2 - 2 <= a2)
      break;
    v3 = *(_QWORD *)result;
    while (*(_BYTE *)(v3 + a2) != 47 || *(_BYTE *)(v3 + a2 + 1) != 46 || *(_BYTE *)(v3 + a2 + 2) != 47)
    {
      ++a2;
      if (4 - v2 + a2 == 2)
        return WebCore::squeezeOutNullCharacters<unsigned char>(result);
    }
  }
  while (a2 != -1);
  return WebCore::squeezeOutNullCharacters<unsigned char>(result);
}

uint64_t WebCore::squeezeOutNullCharacters<unsigned char>(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(unsigned int *)(result + 12);
  if ((_DWORD)v1)
  {
    v2 = 0;
    while (*(_BYTE *)(*(_QWORD *)result + v2))
    {
      if (v1 == ++v2)
        return result;
    }
  }
  else
  {
    v2 = 0;
  }
  if (v2 != v1)
  {
    v3 = v2 + 1;
    if (v2 + 1 < v1)
    {
      do
      {
        v4 = *(unsigned int *)(result + 12);
        if (v3 >= v4)
        {
LABEL_15:
          __break(0xC471u);
          JUMPOUT(0x1960F0754);
        }
        if (*(_BYTE *)(*(_QWORD *)result + v3))
        {
          if (v2 >= v4)
            goto LABEL_15;
          *(_BYTE *)(*(_QWORD *)result + v2++) = *(_BYTE *)(*(_QWORD *)result + v3);
        }
        ++v3;
      }
      while (v1 != v3);
    }
    *(_DWORD *)(result + 12) = v2;
  }
  return result;
}

uint64_t WTF::Vector<unsigned char,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>(uint64_t result, _BYTE *a2)
{
  uint64_t v3;
  unint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 > v4)
  {
    v9 = *(void **)result;
    if (v8 < 0x201)
    {
      v10 = (void *)(result + 16);
      *(_QWORD *)v3 = v3 + 16;
      *(_DWORD *)(v3 + 8) = 512;
    }
    else
    {
      if (HIDWORD(v8))
      {
        __break(0xC471u);
        JUMPOUT(0x1960F084CLL);
      }
      v10 = (void *)WTF::fastMalloc((WTF *)v8);
      *(_DWORD *)(v3 + 8) = v8;
      *(_QWORD *)v3 = v10;
    }
    result = (uint64_t)memcpy(v10, v9, v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
  }
  *(_BYTE *)(*(_QWORD *)v3 + (*(_DWORD *)(v3 + 12))++) = *a2;
  return result;
}

uint64_t WebCore::containsColonSlashSlash<char16_t>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (a2 < 3 || (_DWORD)a2 == 2)
    return 0;
  v2 = 0;
  while (a2 != v2)
  {
    v3 = v2 + 1;
    if (*(_WORD *)(result + 2 * v2) == 58)
    {
      if (a2 <= v3)
        break;
      if (*(_WORD *)(result + 2 * v2 + 2) == 47)
      {
        v4 = (v2 + 2);
        if (a2 <= v4)
          break;
        if (*(_WORD *)(result + 2 * v4) == 47)
          return 1;
      }
    }
    v2 = v3;
    if ((_DWORD)a2 - 2 == v3)
      return 0;
  }
  __break(1u);
  return result;
}

BOOL WebCore::needsTrailingSlash<char16_t>(_WORD *a1, unint64_t a2)
{
  int v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (a2 < 6
    || (*a1 & 0xFFDF) != 0x48
    || (a1[1] & 0xFFDF) != 0x54
    || (a1[2] & 0xFFDF) != 0x54
    || (a1[3] & 0xFFDF) != 0x50)
  {
    return 0;
  }
  v2 = (unsigned __int16)a1[4];
  if (v2 == 58)
  {
    v3 = 5;
    goto LABEL_11;
  }
  if ((v2 & 0xFFFFFFDF) != 0x53 || a1[5] != 58)
    return 0;
  v3 = 6;
LABEL_11:
  v4 = v3 + 1;
  if (a2 > v4 && a1[v3] == 47 && a1[v4] == 47)
    v3 += 2;
  v5 = v3;
  if (a2 > v3)
  {
    v6 = v3 + 1;
    do
    {
      if (a1[v5] == 47)
        break;
      v5 = v6;
    }
    while (a2 > v6++);
  }
  return a2 == v5;
}

uint64_t WTF::SuperFastHash::addCharacters<char16_t,WTF::StringHasher::DefaultConverter>(uint64_t result, unsigned __int16 *a2, unsigned int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  int v9;

  if (a3)
  {
    if (*(_BYTE *)(result + 6))
    {
      *(_BYTE *)(result + 6) = 0;
      v3 = *a2++;
      v4 = *(_DWORD *)result + *(unsigned __int16 *)(result + 4);
      *(_DWORD *)result = ((v3 << 11) ^ (v4 << 16) ^ v4) + (((v3 << 11) ^ (v4 << 16) ^ v4) >> 11);
      --a3;
    }
    if (a3 >= 2)
    {
      v5 = a3 >> 1;
      v6 = *(_DWORD *)result;
      v7 = a2;
      do
      {
        v8 = v6 + *v7;
        v9 = (v8 << 16) ^ (v7[1] << 11);
        v6 = (v9 ^ v8) + ((v9 ^ v8) >> 11);
        v7 += 2;
        --v5;
      }
      while (v5);
      a2 += 2 * (a3 >> 1);
      *(_DWORD *)result = v6;
    }
    if ((a3 & 1) != 0)
    {
      *(_WORD *)(result + 4) = *a2;
      *(_BYTE *)(result + 6) = 1;
    }
  }
  return result;
}

char *WTF::append<char16_t,512ul>(char *result, _OWORD *__src, uint64_t a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int8x16_t v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  int8x16x2_t v25;
  int8x16x2_t v26;
  int8x16x2_t v27;

  v5 = result;
  v6 = *((unsigned int *)result + 2);
  v7 = *((unsigned int *)result + 3);
  v8 = v7 + a3;
  if (v8 > v6)
  {
    v9 = v6 + (v6 >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 <= v8)
      v11 = v7 + a3;
    else
      v11 = v10;
    v12 = *(char **)result;
    if (v11 < 0x201)
    {
      v13 = result + 16;
      *(_QWORD *)v5 = v5 + 16;
      *((_DWORD *)v5 + 2) = 512;
    }
    else
    {
      if (v11 >> 31)
      {
        __break(0xC471u);
        return result;
      }
      v13 = (void *)WTF::fastMalloc((WTF *)(2 * v11));
      *((_DWORD *)v5 + 2) = v11;
      *(_QWORD *)v5 = v13;
    }
    memcpy(v13, v12, 2 * v7);
    if (v5 + 16 != v12 && v12)
    {
      if (*(char **)v5 == v12)
      {
        *(_QWORD *)v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
      }
      WTF::fastFree((WTF *)v12, v14);
    }
  }
  *((_DWORD *)v5 + 3) = v8;
  result = (char *)(*(_QWORD *)v5 + 2 * v7);
  if ((a3 & 0xFF00000000) != 0)
  {
    v15 = &result[2 * a3];
    if (a3 >= 0x40)
    {
      v16 = &result[2 * (a3 & 0xFFFFFFC0)];
      v17 = 0uLL;
      do
      {
        v25.val[0] = (int8x16_t)*__src;
        v18 = *((int8x16_t *)__src + 1);
        v26.val[0] = (int8x16_t)__src[2];
        v19 = __src[3];
        __src += 4;
        v20 = v19;
        v26.val[1] = 0uLL;
        v27.val[0] = v18;
        v25.val[1] = 0uLL;
        v21 = result;
        vst2q_s8(v21, v25);
        v21 += 32;
        v27.val[1] = 0uLL;
        vst2q_s8(v21, v27);
        v22 = result + 64;
        vst2q_s8(v22, v26);
        v23 = result + 96;
        vst2q_s8(v23, *(int8x16x2_t *)(&v17 - 1));
        result += 128;
      }
      while (result != v16);
      result = v16;
    }
    while (result != v15)
    {
      v24 = *(unsigned __int8 *)__src;
      __src = (_OWORD *)((char *)__src + 1);
      *(_WORD *)result = v24;
      result += 2;
    }
  }
  else if ((_DWORD)a3 == 1)
  {
    *(_WORD *)result = *(_WORD *)__src;
  }
  else if ((_DWORD)a3)
  {
    return (char *)memcpy(result, __src, 2 * a3);
  }
  return result;
}

uint64_t WebCore::cleanPath<char16_t>(uint64_t result, double a2, double a3, float a4)
{
  int16x8_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int16 *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int8 *v14;
  int16x8_t *v15;
  int16x8_t v16;
  int16x8_t *v17;
  int8x16_t v18;
  int16x8_t *v19;
  char *v20;
  int16x8_t v21;
  __int16 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int16x8_t *v26;
  uint64_t v27;
  __int16 *v28;
  unint64_t v29;
  unsigned __int16 *v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  _WORD *v39;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  __int16 *v44;
  unint64_t v45;
  unsigned __int16 *v46;
  int16x8_t *v47;
  uint64_t v48;
  unint64_t v49;
  _WORD *v50;
  unint64_t v51;
  unsigned __int16 *i;
  unint64_t v53;
  __int16 v54;
  int v55;
  unint64_t v56;
  __int16 v57;
  int v58;

  v4 = *(int16x8_t **)result;
  v5 = *(unsigned int *)(result + 12);
  if (v5 < 4)
    goto LABEL_8;
  v6 = 0;
  v7 = v5 - 3;
  v8 = &v4->i16[2];
  while (*(v8 - 2) != 47 || *(v8 - 1) != 46 || *v8 != 46 || v8[1] != 47)
  {
    ++v6;
    ++v8;
    if (v7 == v6)
      goto LABEL_8;
  }
  while (1)
  {
    if (!v6)
      goto LABEL_77;
    v34 = v6 - 1;
    if (v6 - 1 >= v5)
      v34 = v5 - 1;
    if (v34 >= v5)
      break;
    v35 = v4->u16[v34];
    if (v34 - 1 >= v5)
    {
      if (v35 != 47)
      {
        if (v34)
          break;
        goto LABEL_77;
      }
    }
    else if (v35 != 47)
    {
      while (v34)
      {
        v36 = v34 - 1;
        v37 = v4[-1].u16[v34-- + 7];
        if (v37 == 47)
          goto LABEL_72;
      }
LABEL_77:
      if (v6 >= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1960F11A8);
      }
      v4->i16[v6] = 0;
      if (v6 + 1 >= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1960F11B0);
      }
      v4->i16[v6 + 1] = 0;
      if (v6 + 2 >= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1960F11B8);
      }
      v4->i16[v6 + 2] = 0;
      v38 = v6 + 3;
      goto LABEL_86;
    }
    v36 = v34;
LABEL_72:
    if (v36 >= 4)
    {
      if (v36 - 2 >= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1960F1198);
      }
      if (v4->i16[v36 - 2] == 58)
      {
        if (v36 - 1 >= v5)
        {
          __break(0xC471u);
          JUMPOUT(0x1960F11A0);
        }
        if (v4->i16[v36 - 1] == 47)
          goto LABEL_77;
      }
    }
    v38 = v6 + 3;
    if (v36 < v6 + 3)
    {
      v39 = (_WORD *)(*(_QWORD *)result + 2 * v36);
      v40 = v6 - v36 + 3;
      v41 = v5 >= v36;
      v42 = v5 - v36;
      if (!v41)
        v42 = 0;
      do
      {
        if (!v42)
        {
LABEL_146:
          __break(0xC471u);
          JUMPOUT(0x1960F1168);
        }
        *v39++ = 0;
        --v42;
        --v40;
      }
      while (v40);
    }
LABEL_86:
    if (v7 > v38)
    {
      v43 = -(uint64_t)v38;
      v44 = &v4->i16[v38 + 2];
      while (*(v44 - 2) != 47 || *(v44 - 1) != 46 || *v44 != 46 || v44[1] != 47)
      {
        --v43;
        ++v44;
        if (3 - v5 == v43)
          goto LABEL_99;
      }
      v6 = -v43;
      if (v43 != 1)
        continue;
    }
    goto LABEL_99;
  }
  __break(1u);
LABEL_99:
  v45 = 0;
  v46 = &v4->u16[1];
  while (*(v46 - 1))
  {
    ++v45;
    ++v46;
    if (v5 == v45)
      goto LABEL_8;
  }
  if (v5 != v45)
  {
    if (v45 + 1 < v5)
    {
      v53 = ~v45 + v5;
      do
      {
        v55 = *v46++;
        v54 = v55;
        if (v55)
        {
          if (v45 >= v5)
          {
            __break(0xC471u);
            JUMPOUT(0x1960F1188);
          }
          v4->i16[v45++] = v54;
        }
        --v53;
      }
      while (v53);
    }
    *(_DWORD *)(result + 12) = v45;
    LODWORD(v5) = v45;
  }
LABEL_8:
  if (v5 < 2)
    return result;
  v9 = 0;
  v10 = v5;
  v11 = v5 - 1;
  while (v4->i16[v9] != 47 || v4->i16[v9 + 1] != 47)
  {
    if (v11 == ++v9)
      goto LABEL_13;
  }
  v15 = (int16x8_t *)((char *)v4 + 2 * v5);
  if (v5 > 0x1F)
  {
    v16.i64[0] = 0x23002300230023;
    v16.i64[1] = 0x23002300230023;
    v17 = v4;
    do
    {
      v18 = (int8x16_t)vceqq_s16(*v17, v16);
      LOWORD(a4) = vmaxvq_u16((uint16x8_t)v18);
      if (a4 != 0.0)
        goto LABEL_27;
      v19 = v17 + 1;
      v20 = &v17[1].i8[14];
      ++v17;
    }
    while (v20 < (char *)v15);
    if (v19 < v15)
    {
      v21.i64[0] = 0x23002300230023;
      v21.i64[1] = 0x23002300230023;
      v18 = (int8x16_t)vceqq_s16(v15[-1], v21);
      v21.i16[0] = vmaxvq_u16((uint16x8_t)v18);
      if (v21.i32[0])
      {
        v17 = v15 - 1;
LABEL_27:
        v22 = &v17->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v18))];
        goto LABEL_28;
      }
    }
    goto LABEL_34;
  }
  v24 = 2 * v5;
  v22 = (__int16 *)v4;
  while (*v22 != 35)
  {
    ++v22;
    v24 -= 2;
    if (!v24)
      goto LABEL_34;
  }
LABEL_28:
  if (v22 == (__int16 *)v15 || (v23 = ((char *)v22 - (char *)v4) >> 1, v23 + 1 <= 1))
LABEL_34:
    v23 = v5;
  while (2)
  {
    if (v9 < v23)
    {
      if (v9)
      {
        if (v9 - 1 >= v5)
        {
          __break(0xC471u);
          JUMPOUT(0x1960F1178);
        }
        if (v4->i16[v9 - 1] == 58)
        {
          v25 = v9 + 2;
LABEL_44:
          if (v11 <= v25)
            break;
          v27 = -(uint64_t)v25;
          v28 = &v4->i16[v25 + 1];
          while (*(v28 - 1) != 47 || *v28 != 47)
          {
            ++v28;
            if (1 - v5 == --v27)
              goto LABEL_51;
          }
          v9 = -v27;
          if (v27 == 1)
            break;
          continue;
        }
        if (v9 >= v5)
        {
          __break(0xC471u);
          JUMPOUT(0x1960F1180);
        }
        v25 = v9 + 1;
        v26 = (int16x8_t *)((char *)v4 + 2 * v9);
      }
      else
      {
        v25 = 1;
        v26 = v4;
      }
      v26->i16[0] = 0;
      goto LABEL_44;
    }
    break;
  }
LABEL_51:
  v29 = 0;
  v30 = &v4->u16[1];
  while (*(v30 - 1))
  {
    ++v29;
    ++v30;
    if (v5 == v29)
      goto LABEL_13;
  }
  if (v5 != v29)
  {
    if (v29 + 1 < v5)
    {
      v31 = ~v29 + v5;
      do
      {
        v33 = *v30++;
        v32 = v33;
        if (v33)
        {
          if (v29 >= v10)
          {
            __break(0xC471u);
            JUMPOUT(0x1960F1170);
          }
          v4->i16[v29++] = v32;
        }
        --v31;
      }
      while (v31);
    }
    *(_DWORD *)(result + 12) = v29;
    LODWORD(v5) = v29;
  }
LABEL_13:
  if (v5 >= 3)
  {
    v12 = 0;
    v13 = v5 - 2;
    while (1)
    {
      if (v4->i16[v12] == 47)
      {
        v14 = &v4->i8[2 * v12];
        if (*((_WORD *)v14 + 1) == 46 && *((_WORD *)v14 + 2) == 47)
          break;
      }
      if (v13 == ++v12)
        return result;
    }
    v47 = *(int16x8_t **)result;
    v48 = *(_QWORD *)result + 8;
    do
    {
      if (v12 >= v5)
      {
        __break(0xC471u);
        JUMPOUT(0x1960F11C0);
      }
      v47->i16[v12] = 0;
      if (v12 + 1 >= v5)
        goto LABEL_146;
      v47->i16[v12 + 1] = 0;
      if (v13 <= v12 + 2)
        break;
      v49 = v12 + 4;
      v50 = (_WORD *)(v48 + 2 * v12);
      while (*(v50 - 2) != 47 || *(v50 - 1) != 46 || *v50 != 47)
      {
        ++v49;
        ++v50;
        if (v5 == v49)
          goto LABEL_114;
      }
      v12 = v49 - 2;
    }
    while (v49 != 1);
LABEL_114:
    v51 = 0;
    for (i = &v47->u16[1]; *(i - 1); ++i)
    {
      if (v5 == ++v51)
        return result;
    }
    if (v5 != v51)
    {
      if (v51 + 1 < v5)
      {
        v56 = ~v51 + v5;
        do
        {
          v58 = *i++;
          v57 = v58;
          if (v58)
          {
            if (v51 >= v5)
            {
              __break(0xC471u);
              JUMPOUT(0x1960F1190);
            }
            v47->i16[v51++] = v57;
          }
          --v56;
        }
        while (v56);
      }
      *(_DWORD *)(result + 12) = v51;
    }
  }
  return result;
}

void **WTF::Vector<char16_t,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0,char16_t const>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    v6 = result;
    v7 = (void **)*result;
    v8 = *((unsigned int *)result + 3);
    if (v5 < 0x201)
    {
      v9 = result + 2;
      *v6 = v6 + 2;
      *((_DWORD *)v6 + 2) = 512;
    }
    else
    {
      if (v5 >> 31)
      {
        __break(0xC471u);
        return result;
      }
      v9 = (void *)WTF::fastMalloc((WTF *)(2 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
    }
    result = (void **)memcpy(v9, v7, 2 * v8);
    if (v6 + 2 != v7 && v7)
    {
      if (*v6 == v7)
      {
        *v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
      }
      return (void **)WTF::fastFree((WTF *)v7, v10);
    }
  }
  return result;
}

uint64_t WTF::Vector<char16_t,512ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,char>(uint64_t result, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  v6 = v4 + (v4 >> 2);
  if (v6 >= 0x10)
    v7 = v6 + 1;
  else
    v7 = 16;
  if (v7 <= v5 + 1)
    v8 = v5 + 1;
  else
    v8 = v7;
  if (v8 <= v4)
  {
LABEL_17:
    v12 = *(unsigned int *)(v3 + 12);
    *(_WORD *)(*(_QWORD *)v3 + 2 * v12) = *a2;
    *(_DWORD *)(v3 + 12) = v12 + 1;
    return result;
  }
  v9 = *(void **)result;
  if (v8 < 0x201)
  {
    v10 = (void *)(result + 16);
    *(_QWORD *)v3 = v3 + 16;
    *(_DWORD *)(v3 + 8) = 512;
    goto LABEL_12;
  }
  if (!(v8 >> 31))
  {
    v10 = (void *)WTF::fastMalloc((WTF *)(2 * v8));
    *(_DWORD *)(v3 + 8) = v8;
    *(_QWORD *)v3 = v10;
LABEL_12:
    result = (uint64_t)memcpy(v10, v9, 2 * v5);
    if ((void *)(v3 + 16) != v9 && v9)
    {
      if (*(void **)v3 == v9)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      result = WTF::fastFree((WTF *)v9, v11);
    }
    goto LABEL_17;
  }
  __break(0xC471u);
  return result;
}

WTF::MonotonicTime *WebCore::SimpleCaretAnimator::updateAnimationProperties(WebCore::SimpleCaretAnimator *this)
{
  double v2;
  double v3;
  unint64_t v4;
  void (**v5)(WebCore::RenderThemeIOS *__hidden);
  WTF::MonotonicTime *result;
  unsigned __int8 v7;
  __n128 v8;
  double v9;
  BOOL v10;
  double v11;
  uint64_t v12;

  WTF::MonotonicTime::now(this);
  v3 = v2;
  v4 = (unint64_t)&WebCore::MathMLNames::rspaceAttr;
    goto LABEL_17;
  v5 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  while (1)
  {
    *(double *)&result = COERCE_DOUBLE(((uint64_t (*)(uint64_t *))v5[33])(&WebCore::RenderTheme::singleton(void)::theme));
    v9 = *(double *)&result;
    v4 = v7;
    *((_BYTE *)this + 89) = v7 == 0;
    if (*((_BYTE *)this + 90) || !v7)
    {
      if (*((_BYTE *)this + 80))
        break;
    }
    v8.n128_f64[0] = v3 - *((double *)this + 12);
    if (v7)
      v10 = v8.n128_f64[0] < *(double *)&result;
    else
      v10 = 0;
    if (v10)
      return result;
    *((_BYTE *)this + 80) ^= 1u;
    *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(_QWORD, WebCore::SimpleCaretAnimator *, __n128))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), this, v8));
    *((double *)this + 12) = v3;
    if (v4)
      goto LABEL_14;
    __break(1u);
LABEL_17:
    v12 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    v5 = &off_1E335BC30;
    *(_QWORD *)v12 = &off_1E335BC30;
    *(_BYTE *)(v4 + 2784) = 1;
  }
  if (!v7)
    v9 = 0.0;
LABEL_14:
  *((_QWORD *)this + 6) = 0;
  WTF::MonotonicTime::now(result);
  *(double *)&result = COERCE_DOUBLE(WebCore::TimerBase::setNextFireTime((uint64_t)this + 24, v9 + v11));
  return result;
}

WTF::MonotonicTime *WebCore::SimpleCaretAnimator::start(WebCore::SimpleCaretAnimator *this)
{
  uint64_t v2;
  uint64_t v3;
  void (**v4)(WebCore::RenderThemeIOS *__hidden);
  double v5;
  unsigned __int8 v6;
  uint64_t v7;
  WTF::MonotonicTime *result;
  double v9;
  uint64_t v10;

  WTF::MonotonicTime::now(this);
  v3 = v2;
  *((_QWORD *)this + 12) = v2;
  {
    v4 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v10 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    v4 = &off_1E335BC30;
    *(_QWORD *)v10 = &off_1E335BC30;
  }
  v5 = COERCE_DOUBLE(((uint64_t (*)(uint64_t *))v4[33])(&WebCore::RenderTheme::singleton(void)::theme));
  *((_QWORD *)this + 2) = v3;
  *((_BYTE *)this + 88) = 1;
  v7 = v6;
  result = (WTF::MonotonicTime *)(*(uint64_t (**)(WebCore::SimpleCaretAnimator *, BOOL))(*(_QWORD *)this + 40))(this, v6 == 0);
  if (v7)
  {
    *((_QWORD *)this + 6) = 0;
    WTF::MonotonicTime::now(result);
    return (WTF::MonotonicTime *)WebCore::TimerBase::setNextFireTime((uint64_t)this + 24, v9 + v5);
  }
  return result;
}

WTF::StringImpl *WebCore::SimpleCaretAnimator::debugDescription(WebCore::SimpleCaretAnimator *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  char v7;
  int v8;
  __int16 v9;
  int v10;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  v8 = 0;
  v9 = 256;
  v10 = 0;
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::release((WTF::TextStream *)&v4);
  v2 = v5;
  v5 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v1);
    else
      *(_DWORD *)v2 -= 2;
  }
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

PAL::SleepDisablerCocoa **WebCore::SleepDisabler::SleepDisabler(PAL::SleepDisablerCocoa **a1, WTF::String *a2, int a3, PAL::SleepDisablerCocoa *a4, PAL::SleepDisablerCocoa *a5)
{
  uint64_t IdentifierInternal;
  PAL::SleepDisablerCocoa *v11;
  PAL::SleepDisablerCocoa *v12;

  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = a3;
  a1[3] = a4;
  a1[4] = a5;
  {
    if (WebCore::sleepDisablerClient(void)::client)
    {
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      a1[1] = (PAL::SleepDisablerCocoa *)IdentifierInternal;
      (*(void (**)(uint64_t, uint64_t, WTF::String *, BOOL, PAL::SleepDisablerCocoa *, PAL::SleepDisablerCocoa *))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client + 16))(WebCore::sleepDisablerClient(void)::client, IdentifierInternal, a2, a3 == 1, a4, a5);
      return a1;
    }
  }
  else
  {
    WebCore::sleepDisablerClient(void)::client = 0;
  }
  v11 = (PAL::SleepDisablerCocoa *)operator new();
  PAL::SleepDisablerCocoa::SleepDisablerCocoa(v11, a2, a3);
  v12 = *a1;
  *a1 = v11;
  if (v12)
    (*(void (**)(PAL::SleepDisablerCocoa *))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

{
  uint64_t IdentifierInternal;
  PAL::SleepDisablerCocoa *v11;
  PAL::SleepDisablerCocoa *v12;

  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = a3;
  a1[3] = a4;
  a1[4] = a5;
  {
    if (WebCore::sleepDisablerClient(void)::client)
    {
      IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
      a1[1] = (PAL::SleepDisablerCocoa *)IdentifierInternal;
      (*(void (**)(uint64_t, uint64_t, WTF::String *, BOOL, PAL::SleepDisablerCocoa *, PAL::SleepDisablerCocoa *))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client + 16))(WebCore::sleepDisablerClient(void)::client, IdentifierInternal, a2, a3 == 1, a4, a5);
      return a1;
    }
  }
  else
  {
    WebCore::sleepDisablerClient(void)::client = 0;
  }
  v11 = (PAL::SleepDisablerCocoa *)operator new();
  PAL::SleepDisablerCocoa::SleepDisablerCocoa(v11, a2, a3);
  v12 = *a1;
  *a1 = v11;
  if (v12)
    (*(void (**)(PAL::SleepDisablerCocoa *))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

void WebCore::SleepDisabler::~SleepDisabler(WebCore::SleepDisabler *this)
{
  uint64_t v2;

  {
    if (WebCore::sleepDisablerClient(void)::client)
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                              + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)this + 1), *((_QWORD *)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    WebCore::sleepDisablerClient(void)::client = 0;
  }
  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  {
    if (WebCore::sleepDisablerClient(void)::client)
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)WebCore::sleepDisablerClient(void)::client
                                                              + 24))(WebCore::sleepDisablerClient(void)::client, *((_QWORD *)this + 1), *((_QWORD *)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    WebCore::sleepDisablerClient(void)::client = 0;
  }
  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::StaticPasteboard::~StaticPasteboard(WebCore::StaticPasteboard *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    v4 = *((unsigned int *)this + 24);
    if ((_DWORD)v4)
    {
      v5 = (WTF::StringImpl **)*((_QWORD *)this + 11);
      do
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy(v6, a2);
          else
            *(_DWORD *)v6 -= 2;
        }
        ++v5;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree(v3, a2);
  }
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, a2);
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  *(_QWORD *)this = off_1E3354370;
  if (*((_BYTE *)this + 56))
  {
    WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v7);
    v9 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

{
  WTF *v2;
  void *v3;

  WebCore::StaticPasteboard::~StaticPasteboard(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::StaticPasteboard::hasData(WebCore::StaticPasteboard *this)
{
  return *((_DWORD *)this + 21) != 0;
}

uint64_t WebCore::StaticPasteboard::typesSafeForBindings@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(this + 84);
  if ((_DWORD)v3)
  {
    if (v3 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = this;
      this = WTF::fastMalloc((WTF *)(8 * v3));
      *(_DWORD *)(a2 + 8) = v3;
      *(_QWORD *)a2 = this;
      v6 = *(_DWORD *)(v5 + 84);
      if (v6)
      {
        v7 = *(_DWORD ***)(v5 + 72);
        v8 = *(unsigned int *)(v5 + 84);
        do
        {
          v9 = *v7;
          if (*v7)
            *v9 += 2;
          *(_QWORD *)this = v9;
          this += 8;
          v7 += 4;
          --v8;
        }
        while (v8);
        *(_DWORD *)(a2 + 12) = v6;
      }
    }
  }
  return this;
}

uint64_t WebCore::StaticPasteboard::typesForLegacyUnsafeBindings@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *(unsigned int *)(this + 84);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      this = WTF::fastMalloc((WTF *)(8 * v2));
      *(_DWORD *)(a2 + 8) = v2;
      *(_QWORD *)a2 = this;
      v5 = *(_DWORD *)(v4 + 84);
      if (v5)
      {
        v6 = *(_DWORD ***)(v4 + 72);
        v7 = *(unsigned int *)(v4 + 84);
        do
        {
          v8 = *v6;
          if (*v6)
            *v8 += 2;
          *(_QWORD *)this = v8;
          this += 8;
          v6 += 4;
          --v7;
        }
        while (v7);
        *(_DWORD *)(a2 + 12) = v5;
      }
    }
  }
  return this;
}

uint64_t WebCore::StaticPasteboard::readString@<X0>(uint64_t this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;

  v5 = *(unsigned int *)(this + 84);
  if (!(_DWORD)v5)
    goto LABEL_7;
  v7 = *(_QWORD *)(this + 72) + 16;
  v8 = 32 * v5;
  while (1)
  {
    this = WTF::equal(*(WTF **)(v7 - 16), *a2, a3);
    if ((_DWORD)this)
      break;
    v7 += 32;
    v8 -= 32;
    if (!v8)
      goto LABEL_7;
  }
  if (!*(_DWORD *)(v7 + 8))
  {
    v9 = *(_DWORD **)v7;
    if (*(_QWORD *)v7)
      *v9 += 2;
  }
  else
  {
LABEL_7:
    v9 = 0;
  }
  *a4 = v9;
  return this;
}

uint64_t WebCore::StaticPasteboard::readStringInCustomData@<X0>(uint64_t this@<X0>, const WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  v5 = *(unsigned int *)(this + 84);
  if ((_DWORD)v5)
  {
    v7 = (_DWORD **)(*(_QWORD *)(this + 72) + 8);
    v8 = 32 * v5;
    while (1)
    {
      this = WTF::equal((WTF *)*(v7 - 1), *a2, a3);
      if ((_DWORD)this)
        break;
      v7 += 4;
      v8 -= 32;
      if (!v8)
        goto LABEL_5;
    }
    v9 = *v7;
    if (*v7)
      *v9 += 2;
  }
  else
  {
LABEL_5:
    v9 = 0;
  }
  *a4 = v9;
  return this;
}

unsigned int *WebCore::StaticPasteboard::writeString(WebCore::StaticPasteboard *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  const WTF::StringImpl *v6;
  _DWORD *v7;
  unsigned int *result;
  unsigned int *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  _BYTE v12[24];

  WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::add((uint64_t)this + 88, a2, a3, (uint64_t)v12);
  v7 = *(_DWORD **)a3;
  if (v7)
    *v7 += 2;
  result = (unsigned int *)WebCore::PasteboardCustomData::addOrMoveEntryToEnd((WebCore::StaticPasteboard *)((char *)this + 64), a2, v6);
  v9 = result;
  v10 = result[6];
  if ((_DWORD)v10 == -1)
    goto LABEL_9;
  v11 = (WTF::StringImpl *)(result + 4);
  if ((_DWORD)v10)
  {
    result = (unsigned int *)((uint64_t (*)(_BYTE *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v10])(v12, v11);
LABEL_9:
    *((_QWORD *)v9 + 2) = v7;
    v9[6] = 0;
    return result;
  }
  result = *(unsigned int **)v11;
  *(_QWORD *)v11 = v7;
  if (result)
  {
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v11);
    else
      *result -= 2;
  }
  return result;
}

unsigned int *WebCore::StaticPasteboard::clear(WebCore::StaticPasteboard *this, WTF::StringImpl *a2)
{
  WTF *v3;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;

  v3 = (WTF *)*((_QWORD *)this + 11);
  if (v3)
  {
    v5 = *((unsigned int *)this + 24);
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *(_QWORD *)((char *)this + 101) = 0;
    if ((_DWORD)v5)
    {
      v6 = (WTF::StringImpl **)v3;
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        ++v6;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree(v3, a2);
  }
  *((_BYTE *)this + 112) = 0;
  return WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)this + 18, 0);
}

uint64_t WebCore::StaticPasteboard::clear(WebCore::StaticPasteboard *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  char *v5;
  WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  v5 = (char *)this + 88;
  v6 = (WTF::StringImpl *)WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 11, a2, a3);
  if ((WTF::StringImpl *)(*((_QWORD *)this + 11) + 8 * *((unsigned int *)this + 24)) != v6)
    WTF::RobinHoodHashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::remove((uint64_t)v5, v6);
  return WebCore::PasteboardCustomData::clear((uint64_t)this + 64, a2, v7);
}

uint64_t WebCore::StaticPasteboard::takeCustomData@<X0>(WebCore::StaticPasteboard *this@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF *v12;
  uint64_t v13;
  char v14;

  v12 = 0;
  v13 = 0;
  *(_OWORD *)a2 = *((_OWORD *)this + 4);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v2 = (char *)this + 72;
  v3 = *((_QWORD *)v2 + 1);
  *((_QWORD *)v2 + 1) = 0;
  *(_QWORD *)(a2 + 16) = v3;
  WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v2, (unsigned int *)&v12);
  if (HIDWORD(v13))
  {
    v5 = 32 * HIDWORD(v13);
    v6 = (char *)v12 + 16;
    do
    {
      v7 = *((unsigned int *)v6 + 2);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v7])(&v14, v6);
      *((_DWORD *)v6 + 2) = -1;
      v8 = (WTF::StringImpl *)*((_QWORD *)v6 - 1);
      *((_QWORD *)v6 - 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v4);
        else
          *(_DWORD *)v8 -= 2;
      }
      v9 = (WTF::StringImpl *)*((_QWORD *)v6 - 2);
      *((_QWORD *)v6 - 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v4);
        else
          *(_DWORD *)v9 -= 2;
      }
      v6 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  v10 = v12;
  if (v12)
  {
    v12 = 0;
    LODWORD(v13) = 0;
    WTF::fastFree(v10, v4);
  }
  return 0;
}

unsigned int *WebCore::StaticPasteboard::writeMarkup(WebCore::StaticPasteboard *this, const WTF::String *a2, const WTF::StringImpl *a3)
{
  WebCore::PasteboardCustomData *v3;
  _DWORD *v4;
  unsigned int *result;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;

  v3 = (WebCore::StaticPasteboard *)((char *)this + 64);
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  result = (unsigned int *)WebCore::PasteboardCustomData::addOrMoveEntryToEnd(v3, (const WTF::StringImpl **)&WebCore::textHTMLContentTypeAtomData, a3);
  v6 = result;
  v7 = result[6];
  if ((_DWORD)v7 == -1)
    goto LABEL_9;
  v8 = (WTF::StringImpl *)(result + 4);
  if ((_DWORD)v7)
  {
    result = (unsigned int *)((uint64_t (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v7])(&v9, v8);
LABEL_9:
    *((_QWORD *)v6 + 2) = v4;
    v6[6] = 0;
    return result;
  }
  result = *(unsigned int **)v8;
  *(_QWORD *)v8 = v4;
  if (result)
  {
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
    else
      *result -= 2;
  }
  return result;
}

unsigned int *WebCore::StaticPasteboard::writePlainText(uint64_t a1, _DWORD **a2, const WTF::StringImpl *a3)
{
  WebCore::PasteboardCustomData *v3;
  _DWORD *v4;
  unsigned int *result;
  unsigned int *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;

  v3 = (WebCore::PasteboardCustomData *)(a1 + 64);
  v4 = *a2;
  if (*a2)
    *v4 += 2;
  result = (unsigned int *)WebCore::PasteboardCustomData::addOrMoveEntryToEnd(v3, (const WTF::StringImpl **)&WebCore::textPlainContentTypeAtomData, a3);
  v6 = result;
  v7 = result[6];
  if ((_DWORD)v7 == -1)
    goto LABEL_9;
  v8 = (WTF::StringImpl *)(result + 4);
  if ((_DWORD)v7)
  {
    result = (unsigned int *)((uint64_t (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v7])(&v9, v8);
LABEL_9:
    *((_QWORD *)v6 + 2) = v4;
    v6[6] = 0;
    return result;
  }
  result = *(unsigned int **)v8;
  *(_QWORD *)v8 = v4;
  if (result)
  {
    if (*result == 2)
      return (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v8);
    else
      *result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::StaticPasteboard::write(uint64_t a1, _DWORD **a2)
{
  WebCore::PasteboardCustomData *v3;
  const WTF::StringImpl *v4;
  _DWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  char v13;

  v3 = (WebCore::PasteboardCustomData *)(a1 + 64);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v5 = *a2;
  if (v5)
    *v5 += 2;
  v6 = WebCore::PasteboardCustomData::addOrMoveEntryToEnd(v3, &v12, v4);
  v8 = v6;
  v9 = *(unsigned int *)(v6 + 24);
  if ((_DWORD)v9 == -1)
    goto LABEL_9;
  v7 = (WTF::StringImpl *)(v6 + 16);
  if ((_DWORD)v9)
  {
    ((void (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v9])(&v13, v7);
LABEL_9:
    *(_QWORD *)(v8 + 16) = v5;
    *(_DWORD *)(v8 + 24) = 0;
    goto LABEL_10;
  }
  v10 = *(WTF::StringImpl **)v7;
  *(_QWORD *)v7 = v5;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
LABEL_10:
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::StaticPasteboard::write(WebCore::StaticPasteboard *this, const WebCore::PasteboardImage *a2)
{
  _DWORD **v3;
  WTF::StringImpl *result;
  WebCore::PasteboardCustomData *v5;
  const WTF::StringImpl *v6;
  _DWORD *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;

  *((_BYTE *)this + 112) = 1;
  v3 = (_DWORD **)((char *)a2 + 8);
  result = (WTF::StringImpl *)WebCore::Pasteboard::canExposeURLToDOMWhenPasteboardContainsFiles((const WebCore::PasteboardImage *)((char *)a2 + 8), a2);
  if (!(_DWORD)result)
    return result;
  v5 = (WebCore::StaticPasteboard *)((char *)this + 64);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = *v3;
  if (v7)
    *v7 += 2;
  v8 = WebCore::PasteboardCustomData::addOrMoveEntryToEnd(v5, &v13, v6);
  v10 = v8;
  v11 = *(unsigned int *)(v8 + 24);
  if ((_DWORD)v11 != -1)
  {
    v9 = (WTF::StringImpl *)(v8 + 16);
    if (!(_DWORD)v11)
    {
      v12 = *(WTF::StringImpl **)v9;
      *(_QWORD *)v9 = v7;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      goto LABEL_11;
    }
    ((void (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v11])(&v14, v9);
  }
  *(_QWORD *)(v10 + 16) = v7;
  *(_DWORD *)(v10 + 24) = 0;
LABEL_11:
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WebCore::StaticPasteboard::write(unsigned int *this, const WebCore::PasteboardWebContent *a2, const WTF::StringImpl *a3)
{
  unsigned int *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = this;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
  if (v4)
    *(_DWORD *)v4 += 2;
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  if (v5)
    *(_DWORD *)v5 += 2;
  if (v4 && *((_DWORD *)v4 + 1))
  {
    *(_DWORD *)v4 += 2;
    this = (unsigned int *)WebCore::PasteboardCustomData::addOrMoveEntryToEnd((WebCore::PasteboardCustomData *)(this + 16), (const WTF::StringImpl **)&WebCore::textHTMLContentTypeAtomData, a3);
    v8 = this;
    v9 = this[6];
    if ((_DWORD)v9 != -1)
    {
      a2 = (const WebCore::PasteboardWebContent *)(this + 4);
      if (!(_DWORD)v9)
      {
        this = *(unsigned int **)a2;
        *(_QWORD *)a2 = v4;
        if (this)
        {
          if (*this == 2)
            this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          else
            *this -= 2;
        }
        goto LABEL_6;
      }
      this = (unsigned int *)((uint64_t (*)(char *, const WebCore::PasteboardWebContent *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v9])(&v10, a2);
    }
    *((_QWORD *)v8 + 2) = v4;
    v8[6] = 0;
  }
LABEL_6:
  if (!v5)
    goto LABEL_23;
  if (*((_DWORD *)v5 + 1))
  {
    *(_DWORD *)v5 += 2;
    this = (unsigned int *)WebCore::PasteboardCustomData::addOrMoveEntryToEnd((WebCore::PasteboardCustomData *)(v3 + 16), (const WTF::StringImpl **)&WebCore::textPlainContentTypeAtomData, a3);
    v6 = this;
    v7 = this[6];
    if ((_DWORD)v7 != -1)
    {
      a2 = (const WebCore::PasteboardWebContent *)(this + 4);
      if (!(_DWORD)v7)
      {
        this = *(unsigned int **)a2;
        *(_QWORD *)a2 = v5;
        if (this)
        {
          if (*this == 2)
            this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, a2);
          else
            *this -= 2;
        }
        goto LABEL_21;
      }
      this = (unsigned int *)((uint64_t (*)(char *, const WebCore::PasteboardWebContent *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6StringENS6_3RefIN7WebCore12SharedBufferENS6_12RawPtrTraitsISA_EENS6_21DefaultRefDerefTraitsISA_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v7])(&v11, a2);
    }
    *((_QWORD *)v6 + 2) = v5;
    v6[6] = 0;
  }
LABEL_21:
  if (*(_DWORD *)v5 == 2)
  {
    this = (unsigned int *)WTF::StringImpl::destroy(v5, a2);
    if (!v4)
      return this;
    goto LABEL_24;
  }
  *(_DWORD *)v5 -= 2;
LABEL_23:
  if (!v4)
    return this;
LABEL_24:
  if (*(_DWORD *)v4 == 2)
    return (unsigned int *)WTF::StringImpl::destroy(v4, a2);
  *(_DWORD *)v4 -= 2;
  return this;
}

uint64_t WebCore::SystemSoundManager::systemBeep(WebCore::SystemSoundManager *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void WebCore::Theme::controlFont(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[184] = 0;
}

float WebCore::Theme::controlSize@<S0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  float result;
  int *v7;
  int v8;
  int v9;

  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 6) = 0;
  v4 = *(unsigned __int8 *)(a1 + 4);
  *(_BYTE *)(a2 + 4) = v4;
  *(_BYTE *)(a2 + 5) = *(_BYTE *)(a1 + 5);
  if ((v4 - 2) >= 9)
  {
    if (v4 == 11)
    {
      *(_DWORD *)a2 = *(_DWORD *)a1;
      WebCore::Length::ref((int *)a2);
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 6);
    *(_BYTE *)(a2 + 6) = v5;
    if (v5)
      result = *(float *)a1;
    *(_DWORD *)a2 = *(_DWORD *)a1;
  }
  *(_DWORD *)(a2 + 8) = 0;
  v7 = (int *)(a2 + 8);
  *(_BYTE *)(a2 + 14) = 0;
  v8 = *(unsigned __int8 *)(a1 + 12);
  *(_BYTE *)(a2 + 12) = v8;
  *(_BYTE *)(a2 + 13) = *(_BYTE *)(a1 + 13);
  if ((v8 - 2) >= 9)
  {
    if (v8 == 11)
    {
      *v7 = *(_DWORD *)(a1 + 8);
      WebCore::Length::ref(v7);
    }
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 14);
    *(_BYTE *)(a2 + 14) = v9;
    if (v9)
    {
      result = *(float *)(a1 + 8);
      *(float *)v7 = result;
    }
    else
    {
      *v7 = *(_DWORD *)(a1 + 8);
    }
  }
  return result;
}

int *WebCore::Theme::minimumControlSize@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int *result;
  int v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;

  result = (int *)(*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 88))((_QWORD *)a5);
  if ((a2 & 0xFE) == 2)
  {
    v10 = *(unsigned __int8 *)(a3 + 4);
    v11 = (v10 - 7) < 4 || v10 == 0;
    if ((v11 || (v10 - 5) <= 1) && a5 != a4)
    {
      if (*(_BYTE *)(a5 + 4) == 11)
        result = WebCore::Length::deref((WebCore::Length *)a5);
      v12 = *(unsigned __int8 *)(a4 + 4);
      *(_BYTE *)(a5 + 4) = v12;
      *(_BYTE *)(a5 + 5) = *(_BYTE *)(a4 + 5);
      if (v12 <= 0xD)
      {
        v13 = 1 << v12;
        if ((v13 & 0x7FC) != 0)
        {
          *(_BYTE *)(a5 + 6) = *(_BYTE *)(a4 + 6);
          *(_DWORD *)a5 = *(_DWORD *)a4;
        }
        else if ((v13 & 0x3003) != 0)
        {
          *(_DWORD *)a5 = 0;
        }
        else
        {
          *(_DWORD *)a5 = *(_DWORD *)a4;
          result = WebCore::Length::ref((int *)a5);
        }
      }
    }
    v14 = *(unsigned __int8 *)(a3 + 12);
    v15 = (v14 - 7) < 4 || v14 == 0;
    if ((v15 || (v14 - 5) <= 1) && a5 != a4)
    {
      v16 = (_DWORD *)(a5 + 8);
      if (*(_BYTE *)(a5 + 12) == 11)
        result = WebCore::Length::deref((WebCore::Length *)(a5 + 8));
      v17 = *(unsigned __int8 *)(a4 + 12);
      *(_BYTE *)(a5 + 12) = v17;
      *(_BYTE *)(a5 + 13) = *(_BYTE *)(a4 + 13);
      if (v17 <= 0xD)
      {
        v18 = 1 << v17;
        if ((v18 & 0x7FC) != 0)
        {
          *(_BYTE *)(a5 + 14) = *(_BYTE *)(a4 + 14);
          *v16 = *(_DWORD *)(a4 + 8);
        }
        else if ((v18 & 0x3003) != 0)
        {
          *v16 = 0;
        }
        else
        {
          *v16 = *(_DWORD *)(a4 + 8);
          return WebCore::Length::ref((int *)(a5 + 8));
        }
      }
    }
  }
  return result;
}

void WebCore::Theme::minimumControlSize(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_WORD *)(a1 + 4) = 4;
  *(_BYTE *)(a1 + 6) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 4;
  *(_BYTE *)(a1 + 14) = 0;
}

WebCore::LengthBox *WebCore::Theme::controlBorder@<X0>(WebCore::LengthBox *a1@<X3>, int a2@<W1>, uint64_t a3@<X8>)
{
  WebCore::LengthBox *result;

  if ((a2 - 2) >= 3 && a2 != 15 && a2 != 9)
    return WebCore::LengthBox::LengthBox((WebCore::LengthBox *)a3, a1);
  *(_WORD *)(a3 + 4) = 4;
  *(_BYTE *)(a3 + 6) = 0;
  *(_DWORD *)a3 = 0;
  *(_WORD *)(a3 + 12) = 4;
  *(_BYTE *)(a3 + 14) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 20) = 4;
  *(_BYTE *)(a3 + 22) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 28) = 4;
  *(_BYTE *)(a3 + 30) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return result;
}

WebCore::LengthBox *WebCore::Theme::controlPadding@<X0>(WebCore::LengthBox *a1@<X3>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  WebCore::LengthBox *result;

  if (a2 > 0xA || ((1 << a2) & 0x60C) == 0)
    return WebCore::LengthBox::LengthBox((WebCore::LengthBox *)a3, a1);
  *(_WORD *)(a3 + 4) = 4;
  *(_BYTE *)(a3 + 6) = 0;
  *(_DWORD *)a3 = 0;
  *(_WORD *)(a3 + 12) = 4;
  *(_BYTE *)(a3 + 14) = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 20) = 4;
  *(_BYTE *)(a3 + 22) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 28) = 4;
  *(_BYTE *)(a3 + 30) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return result;
}

uint64_t WebCore::Theme::drawNamedImage(WebCore::Theme *this, const WTF::String *a2, WebCore::GraphicsContext *a3, float32x2_t *a4)
{
  uint64_t result;
  void *v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int32x2_t v21;
  float32x2_t v22;
  _BYTE v23[32];
  __int128 v24;
  int v25;
  int v26;
  int v27;
  _BYTE v28[32];
  __int128 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  result = MEMORY[0x19AEA53F4](*(_QWORD *)a2, "wireless-playback", 17);
  if (!(_DWORD)result)
    return result;
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
  v22 = (float32x2_t)0x11040000000000FFLL;
  WebCore::GraphicsContext::setFillColor(a3, (const WebCore::Color *)&v22);
  if ((*(_QWORD *)&v22 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(*(_QWORD *)&v22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v7);
    }
  }
  v22 = vdiv_f32(*a4, (float32x2_t)vdup_n_s32(0x42C80000u));
  (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)a3 + 632))(a3, &v22);
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a3 + 648))(a3, 8.0, 1.0);
  v27 = 0;
  *(_QWORD *)v28 = 0x426ACCCD426C0000;
  WebCore::Path::moveTo((WebCore::Path *)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x426ACCCD42686666;
  v20 = 0x4266CCCD4261999ALL;
  v21 = (int32x2_t)0x4269999A4264CCCDLL;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x4236000042280000;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x4267333341DCCCCDLL;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x426CCCCD41CF3333;
  v20 = 0x4265333341B00000;
  v21 = (int32x2_t)0x426C000041BB3333;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x425E666641A4CCCDLL;
  v20 = 0x424ECCCD41B40000;
  v21 = (int32x2_t)0x4254666641A66666;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x42153333421E0000;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x4210000042240000;
  v20 = 0x421533334232CCCDLL;
  v21 = (int32x2_t)0x42100000422CCCCDLL;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x424ECCCD4276CCCDLL;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x42546666427D999ALL;
  v20 = 0x426533334278CCCDLL;
  v21 = (int32x2_t)0x425ECCCD427E6666;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x4268CCCD42753333;
  v20 = 0x426ACCCD426C0000;
  v21 = (int32x2_t)0x426ACCCD42706666;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x426ACCCD426C0000;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  v8 = v27;
  if (v27 == 2)
  {
    if (!*(_QWORD *)v23)
      goto LABEL_20;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v23 + 200))(*(_QWORD *)v23) & 1) != 0)
      goto LABEL_21;
    v8 = v27;
  }
  else if (!v27)
  {
    goto LABEL_21;
  }
  if (v8 == 2)
  {
    if (*(_QWORD *)v23)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v23 + 208))(*(_QWORD *)v23) & 1) != 0)
        goto LABEL_21;
      if (v27 == 1)
      {
        v9 = v26;
        goto LABEL_18;
      }
    }
LABEL_20:
    v10 = WebCore::Path::ensureImpl((WebCore::Path *)&v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
    goto LABEL_21;
  }
  if (v8 != 1)
    goto LABEL_20;
  v9 = v26;
  if (v26 != 6 && v26 != 15)
  {
LABEL_18:
    if (v9 == 5)
    {
      *(_OWORD *)v28 = *(_OWORD *)v23;
      *(_QWORD *)&v28[13] = *(_QWORD *)&v23[13];
      *(_OWORD *)&v23[16] = *(_OWORD *)&v28[16];
      v24 = v29;
      *(_OWORD *)v23 = *(_OWORD *)v28;
      v25 = v30;
      v26 = 6;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_21:
  *(_QWORD *)v28 = 0x42C4000042280000;
  WebCore::Path::moveTo((WebCore::Path *)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x42C40000421F3333;
  v20 = 0x42BC666642180000;
  v21 = (int32x2_t)0x42C0999A42180000;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x422E666642180000;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x4226000042180000;
  v20 = 0x421F333342280000;
  v21 = vdup_n_s32(0x421F3333u);
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x421F33334230CCCDLL;
  v20 = 0x422E666642380000;
  v21 = (int32x2_t)0x4226000042380000;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x42BC666642380000;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x42C0999A42380000;
  v20 = 0x42C4000042280000;
  v21 = (int32x2_t)0x42C400004230CCCDLL;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x42C4000042280000;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  v11 = v27;
  if (v27 == 2)
  {
    if (!*(_QWORD *)v23)
      goto LABEL_38;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v23 + 200))(*(_QWORD *)v23) & 1) != 0)
      goto LABEL_39;
    v11 = v27;
  }
  else if (!v27)
  {
    goto LABEL_39;
  }
  if (v11 == 2)
  {
    if (*(_QWORD *)v23)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v23 + 208))(*(_QWORD *)v23) & 1) != 0)
        goto LABEL_39;
      if (v27 == 1)
      {
        v12 = v26;
        goto LABEL_36;
      }
    }
LABEL_38:
    v13 = WebCore::Path::ensureImpl((WebCore::Path *)&v22);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 120))(v13);
    goto LABEL_39;
  }
  if (v11 != 1)
    goto LABEL_38;
  v12 = v26;
  if (v26 != 6 && v26 != 15)
  {
LABEL_36:
    if (v12 == 5)
    {
      *(_OWORD *)v28 = *(_OWORD *)v23;
      *(_QWORD *)&v28[13] = *(_QWORD *)&v23[13];
      *(_OWORD *)&v23[16] = *(_OWORD *)&v28[16];
      v24 = v29;
      *(_OWORD *)v23 = *(_OWORD *)v28;
      v25 = v30;
      v26 = 6;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  *(_QWORD *)v28 = 0x4226666642A73333;
  WebCore::Path::moveTo((WebCore::Path *)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x4194CCCD42A73333;
  v20 = 1109917696;
  v21 = (int32x2_t)1115815936;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 1100480512;
  v20 = 0x422666663ECCCCCDLL;
  v21 = (int32x2_t)0x4194CCCD3ECCCCCDLL;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x4278CCCD3ECCCCCDLL;
  v20 = 0x42A53333420C0000;
  v21 = (int32x2_t)0x429E666641700000;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x42950000420C0000;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x428E666641A00000;
  v20 = 0x4226666641066666;
  v21 = (int32x2_t)0x4266CCCD41066666;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x41B8CCCD41066666;
  v20 = 0x4100000042280000;
  v21 = (int32x2_t)0x4100000041BC0000;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x4100000042720000;
  v20 = 0x4226666642970000;
  v21 = (int32x2_t)0x41B8CCCD42970000;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x4266CCCD42973333;
  v20 = 0x4295000042440000;
  v21 = (int32x2_t)0x428E666642800000;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x42A5333342440000;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  *(_QWORD *)v28 = 0x429E999A428A0000;
  v20 = 0x4226666642A73333;
  v21 = (int32x2_t)0x4278CCCD42A73333;
  WebCore::Path::addBezierCurveTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28, (const WebCore::FloatPoint *)&v21, (const WebCore::FloatPoint *)&v20);
  *(_QWORD *)v28 = 0x4226666642A73333;
  WebCore::Path::addLineTo((uint64_t)&v22, (const WebCore::FloatPoint *)v28);
  v14 = v27;
  if (v27 == 2)
  {
    if (!*(_QWORD *)v23)
      goto LABEL_56;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v23 + 200))(*(_QWORD *)v23) & 1) != 0)
      goto LABEL_57;
    v14 = v27;
  }
  else if (!v27)
  {
    goto LABEL_57;
  }
  if (v14 == 2)
  {
    if (!*(_QWORD *)v23)
      goto LABEL_56;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v23 + 208))(*(_QWORD *)v23) & 1) == 0)
    {
      if (v27 != 1)
        goto LABEL_56;
      v15 = v26;
LABEL_54:
      if (v15 == 5)
      {
        *(_OWORD *)v28 = *(_OWORD *)v23;
        *(_QWORD *)&v28[13] = *(_QWORD *)&v23[13];
        *(_OWORD *)&v23[16] = *(_OWORD *)&v28[16];
        v24 = v29;
        *(_OWORD *)v23 = *(_OWORD *)v28;
        v25 = v30;
        v26 = 6;
        goto LABEL_57;
      }
LABEL_56:
      v16 = WebCore::Path::ensureImpl((WebCore::Path *)&v22);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 120))(v16);
    }
  }
  else
  {
    if (v14 != 1)
      goto LABEL_56;
    v15 = v26;
    if (v26 != 6 && v26 != 15)
      goto LABEL_54;
  }
LABEL_57:
  (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)a3 + 176))(a3, &v22);
  if (v27 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34070E0[v27])(v28, v23);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
}

uint64_t WebCore::SimpleCaretAnimator::setVisible(uint64_t this, int a2)
{
  if ((((*(_BYTE *)(this + 80) == 0) ^ a2) & 1) == 0)
  {
    *(_BYTE *)(this + 80) = a2;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(this + 8) + 16))(*(_QWORD *)(this + 8), this);
  }
  return this;
}

uint64_t WebCore::StaticPasteboard::isStatic(WebCore::StaticPasteboard *this)
{
  return 1;
}

void WebCore::StaticPasteboard::readOrigin(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::StaticPasteboard::fileContentState(WebCore::StaticPasteboard *this)
{
  return *((unsigned __int8 *)this + 112);
}

uint64_t WebCore::StaticPasteboard::canSmartReplace(WebCore::StaticPasteboard *this)
{
  return 0;
}

_QWORD *WebCore::ThermalMitigationNotifier::ThermalMitigationNotifier(_QWORD *result)
{
  *result = 0;
  return result;
}

{
  *result = 0;
  return result;
}

void WebCore::ThermalMitigationNotifier::~ThermalMitigationNotifier(unsigned int **this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*this)
  {
    *((_QWORD *)*this + 1) = 0;
    v3 = *this;
    *this = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *this = 0;
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  if (*this)
  {
    *((_QWORD *)*this + 1) = 0;
    v3 = *this;
    *this = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *this = 0;
  }
}

uint64_t WebCore::ThermalMitigationNotifier::isThermalMitigationEnabled(WebCore::ThermalMitigationNotifier *this)
{
  return 0;
}

WebCore::ThreadGlobalData *WebCore::ThreadGlobalData::ThreadGlobalData(WebCore::ThreadGlobalData *this)
{
  _QWORD *v2;
  uint64_t v3;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E31F4A70;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v2 = 0;
  *((_QWORD *)this + 2) = v2;
  *(_QWORD *)this = off_1E3407108;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v3 + 28) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_WORD *)(v3 + 24) = 0;
  if (WTF::isUIThread((WTF *)v3))
  {
    {
      WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
      qword_1ECE90CE8 = 0;
    }
    WebCore::ThreadTimers::setSharedTimer((uint64_t **)v3, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
  }
  *((_QWORD *)this + 6) = v3;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_BYTE *)this + 88) = 0;
  return this;
}

{
  _QWORD *v2;
  uint64_t v3;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E31F4A70;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v2 = 0;
  *((_QWORD *)this + 2) = v2;
  *(_QWORD *)this = off_1E3407108;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v3 + 28) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)v3 = 0;
  *(_WORD *)(v3 + 24) = 0;
  if (WTF::isUIThread((WTF *)v3))
  {
    {
      WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
      qword_1ECE90CE8 = 0;
    }
    WebCore::ThreadTimers::setSharedTimer((uint64_t **)v3, (WebCore::SharedTimer *)&WebCore::MainThreadSharedTimer::singleton(void)::instance);
  }
  *((_QWORD *)this + 6) = v3;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_BYTE *)this + 88) = 0;
  return this;
}

void WebCore::ThreadGlobalData::~ThreadGlobalData(WebCore::ThreadGlobalData *this, WTF::StringImpl *a2)
{
  WebCore::FontCache *v3;
  WTF *v4;
  void *v5;
  WTF *v6;
  WTF::StringImpl **v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  WebCore::EventNames *v12;
  WTF *v13;
  void *v14;
  WebCore::CachedResourceRequestInitiatorTypes *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  WTF::StringImpl *v22;

  *(_QWORD *)this = off_1E3407108;
  v3 = (WebCore::FontCache *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    WebCore::FontCache::~FontCache(v3, a2);
    WTF::fastFree(v4, v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    v7 = *(WTF::StringImpl ***)v6;
    if (*(_QWORD *)v6)
    {
      v20 = *((unsigned int *)v7 - 1);
      if ((_DWORD)v20)
      {
        v21 = *(WTF::StringImpl ***)v6;
        do
        {
          v22 = *v21;
          if (*v21 != (WTF::StringImpl *)-1)
          {
            *v21 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, a2);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          ++v21;
          --v20;
        }
        while (v20);
      }
      WTF::fastFree((WTF *)(v7 - 2), a2);
    }
    WTF::fastFree(v6, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
  {
    if (*(_QWORD *)v8)
      WTF::fastFree((WTF *)(*(_QWORD *)v8 - 16), a2);
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 12);
    if ((_DWORD)v10)
      WTF::VectorTypeOperations<WTF::RefPtr<WebCore::ThreadTimerHeapItem,WTF::RawPtrTraits<WebCore::ThreadTimerHeapItem>,WTF::DefaultRefDerefTraits<WebCore::ThreadTimerHeapItem>>>::destruct(*(unsigned int **)v9, (void *)(*(_QWORD *)v9 + 8 * v10));
    v11 = *(unsigned int **)v9;
    if (*(_QWORD *)v9)
    {
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0;
      WTF::fastFree((WTF *)v11, a2);
    }
    WTF::fastFree((WTF *)v9, a2);
  }
  v12 = (WebCore::EventNames *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
  {
    WebCore::EventNames::~EventNames(v12, a2);
    WTF::fastFree(v13, v14);
  }
  v15 = (WebCore::CachedResourceRequestInitiatorTypes *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
  {
    WebCore::CachedResourceRequestInitiatorTypes::~CachedResourceRequestInitiatorTypes(v15, a2);
    WTF::fastFree(v16, v17);
  }
  *(_QWORD *)this = off_1E31F4A70;
  v18 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v18)
  {
    v19 = *(_QWORD *)v18;
    *(_QWORD *)v18 = 0;
    if (v19)
      ucnv_close();
    WTF::fastFree(v18, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::ThreadGlobalData::~ThreadGlobalData(this, a2);
  WTF::fastFree(v2, v3);
}

WebCore::FontCache **std::unique_ptr<WebCore::FontCache>::~unique_ptr[abi:sn180100](WebCore::FontCache **a1, WTF::StringImpl *a2)
{
  WebCore::FontCache *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::FontCache::~FontCache(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

WTF **std::unique_ptr<WebCore::QualifiedNameCache>::~unique_ptr[abi:sn180100](WTF **a1, void *a2)
{
  WTF *v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_QWORD *)v3)
      WTF::fastFree((WTF *)(*(_QWORD *)v3 - 16), a2);
    WTF::fastFree(v3, a2);
  }
  return a1;
}

WebCore::EventNames **std::unique_ptr<WebCore::EventNames>::~unique_ptr[abi:sn180100](WebCore::EventNames **a1, WTF::StringImpl *a2)
{
  WebCore::EventNames *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::EventNames::~EventNames(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

WebCore::CachedResourceRequestInitiatorTypes **std::unique_ptr<WebCore::CachedResourceRequestInitiatorTypes>::~unique_ptr[abi:sn180100](WebCore::CachedResourceRequestInitiatorTypes **a1, WTF::StringImpl *a2)
{
  WebCore::CachedResourceRequestInitiatorTypes *v3;
  WTF *v4;
  void *v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    WebCore::CachedResourceRequestInitiatorTypes::~CachedResourceRequestInitiatorTypes(v3, a2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

WebCore::CachedResourceRequestInitiatorTypes **std::unique_ptr<WebCore::CachedResourceRequestInitiatorTypes>::operator=[abi:sn180100](WebCore::CachedResourceRequestInitiatorTypes **a1, WTF::StringImpl *a2)
{
  WebCore::CachedResourceRequestInitiatorTypes *v3;
  WebCore::CachedResourceRequestInitiatorTypes *v4;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::CachedResourceRequestInitiatorTypes **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::CachedResourceRequestInitiatorTypes::~CachedResourceRequestInitiatorTypes(v4, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

WebCore::EventNames **std::unique_ptr<WebCore::EventNames>::operator=[abi:sn180100](WebCore::EventNames **a1, WTF::StringImpl *a2)
{
  WebCore::EventNames *v3;
  WebCore::EventNames *v4;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::EventNames **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::EventNames::~EventNames(v4, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

WTF **std::unique_ptr<WebCore::QualifiedNameCache>::operator=[abi:sn180100](WTF **a1, WTF **a2)
{
  WTF *v3;
  WTF *v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_QWORD *)v4)
      WTF::fastFree((WTF *)(*(_QWORD *)v4 - 16), a2);
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void WebCore::ThreadGlobalData::initializeMimeTypeRegistryThreadGlobalData(WebCore::ThreadGlobalData *this)
{
  WTF::StringImpl *v2;
  WTF *v3;
  WTF *v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF *v15;

  WebCore::MIMETypeRegistry::createMIMETypeRegistryThreadGlobalData(&v15);
  v3 = v15;
  v15 = 0;
  v4 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v3;
  if (v4)
  {
    v5 = *(WTF::StringImpl ***)v4;
    if (*(_QWORD *)v4)
    {
      v9 = *((unsigned int *)v5 - 1);
      if ((_DWORD)v9)
      {
        v10 = *(WTF::StringImpl ***)v4;
        do
        {
          v11 = *v10;
          if (*v10 != (WTF::StringImpl *)-1)
          {
            *v10 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v2);
              else
                *(_DWORD *)v11 -= 2;
            }
          }
          ++v10;
          --v9;
        }
        while (v9);
      }
      WTF::fastFree((WTF *)(v5 - 2), v2);
    }
    WTF::fastFree(v4, v2);
    v7 = v15;
    v15 = 0;
    if (v7)
    {
      v8 = *(WTF::StringImpl ***)v7;
      if (*(_QWORD *)v7)
      {
        v12 = *((unsigned int *)v8 - 1);
        if ((_DWORD)v12)
        {
          v13 = *(WTF::StringImpl ***)v7;
          do
          {
            v14 = *v13;
            if (*v13 != (WTF::StringImpl *)-1)
            {
              *v13 = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  WTF::StringImpl::destroy(v14, v6);
                else
                  *(_DWORD *)v14 -= 2;
              }
            }
            ++v13;
            --v12;
          }
          while (v12);
        }
        WTF::fastFree((WTF *)(v8 - 2), v6);
      }
      WTF::fastFree(v7, v6);
    }
  }
}

WebCore::FontCache **std::unique_ptr<WebCore::FontCache>::operator=[abi:sn180100](WebCore::FontCache **a1, WTF::StringImpl *a2)
{
  WebCore::FontCache *v3;
  WebCore::FontCache *v4;
  WTF *v5;
  void *v6;

  v3 = *(WebCore::FontCache **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    WebCore::FontCache::~FontCache(v4, a2);
    WTF::fastFree(v5, v6);
  }
  return a1;
}

unsigned int *WebCore::TimerBase::heapDeleteNullMin(uint64_t **a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;
  char v9;

  if (!*((_DWORD *)a1 + 3))
  {
    __break(0xC471u);
    JUMPOUT(0x1960F38F4);
  }
  v2 = **a1;
  if (*(_QWORD *)(v2 + 32))
  {
    __break(0xC471u);
    goto LABEL_12;
  }
  *(_QWORD *)(v2 + 8) = 0xFFF0000000000000;
  std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>((unsigned int *)*a1, &(*a1)[*((unsigned int *)a1 + 3)], (uint64_t)&v9, *((unsigned int *)a1 + 3));
  v4 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v4)
  {
    __break(0xC471u);
LABEL_12:
    JUMPOUT(0x1960F38DCLL);
  }
  v5 = v4 - 1;
  result = (unsigned int *)(*a1)[v4 - 1];
  (*a1)[v4 - 1] = 0;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)result, v3);
    }
  }
  *((_DWORD *)a1 + 3) = v5;
  return result;
}

unsigned int *WebCore::ThreadTimers::fireTimersInNestedEventLoop(uint64_t **this)
{
  unsigned int *result;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  double v9;
  __n128 v10;
  double v11;
  char v14;

  *((_BYTE *)this + 24) = 0;
  result = (unsigned int *)this[2];
  if (result)
  {
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 40))(result);
    this[4] = 0;
    if (this[2])
    {
      if (*((_DWORD *)this + 3))
      {
        while (1)
        {
          v3 = **this;
          if (*(_QWORD *)(v3 + 32))
            break;
          *(_QWORD *)(v3 + 8) = 0xFFF0000000000000;
          result = std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>((unsigned int *)*this, &(*this)[*((unsigned int *)this + 3)], (uint64_t)&v14, *((unsigned int *)this + 3));
          v5 = *((unsigned int *)this + 3);
          if (!(_DWORD)v5)
          {
            __break(0xC471u);
            return result;
          }
          v6 = v5 - 1;
          result = (unsigned int *)(*this)[v5 - 1];
          (*this)[v5 - 1] = 0;
          if (result)
          {
            do
            {
              v7 = __ldaxr(result);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, result));
            if (!v8)
            {
              atomic_store(1u, result);
              result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)result, v4);
            }
          }
          *((_DWORD *)this + 3) = v6;
          if (!v6)
            goto LABEL_13;
        }
        if (*((_BYTE *)this + 24))
          goto LABEL_13;
        v9 = *(double *)(v3 + 8);
        result = (unsigned int *)WTF::MonotonicTime::now((WTF::MonotonicTime *)result);
        v11 = *((double *)this + 4);
        if (v11 == 0.0 || v11 > v10.n128_f64[0] || v10.n128_f64[0] < v9)
        {
          *((double *)this + 4) = v9;
          v10.n128_f64[0] = v9 - v10.n128_f64[0];
          if (v10.n128_f64[0] < 0.0)
            v10.n128_f64[0] = 0.0;
          return (unsigned int *)(*(uint64_t (**)(uint64_t *, __n128))(*this[2] + 24))(this[2], v10);
        }
      }
      else
      {
LABEL_13:
        this[4] = 0;
        return (unsigned int *)(*(uint64_t (**)(uint64_t *))(*this[2] + 32))(this[2]);
      }
    }
  }
  return result;
}

uint64_t WebCore::shouldSuppressThreadSafetyCheck(WebCore *this)
{
  if ((webThreadStarted & 1) != 0)
    return 1;
  else
    return WTF::linkedOnOrAfterSDKWithBehavior() ^ 1;
}

uint64_t WebCore::TimerBase::heapDecreaseKey(uint64_t this, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  double v20;
  double v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;

  v2 = *(_QWORD *)(this + 32) & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    do
      v3 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v3 + 1, (unsigned int *)v2));
  }
  v4 = *(unsigned int *)(v2 + 40);
  v5 = 8 * v4 + 8;
  if (v5 < 9)
    goto LABEL_26;
  v6 = **(_QWORD **)(v2 + 24);
  v7 = v6 + 8 * v4;
  v8 = (((unint64_t)v5 >> 3) - 2) >> 1;
  v9 = v6 + 8 * v8;
  v10 = *(double *)(*(_QWORD *)v9 + 8);
  v11 = *(_QWORD *)v7;
  v12 = *(double *)(*(_QWORD *)v7 + 8);
  if (v12 == v10)
  {
    if ((*(_DWORD *)(*(_QWORD *)v9 + 16) - *(_DWORD *)(v11 + 16)) <= 0x7FFFFFFE)
      goto LABEL_6;
    do
    {
LABEL_26:
      v25 = __ldaxr((unsigned int *)v2);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v2));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v2);
      return bmalloc::api::isoDeallocate((bmalloc::api *)v2, a2);
    }
    return this;
  }
  if (v12 >= v10)
    goto LABEL_26;
  do
LABEL_6:
    v13 = __ldaxr((unsigned int *)v11);
  while (__stlxr(v13 + 1, (unsigned int *)v11));
  v14 = *(_QWORD *)v9;
  while (1)
  {
    v15 = v9;
    *(_QWORD *)v9 = 0;
    v16 = *(unsigned int **)v7;
    *(_QWORD *)v7 = v14;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        bmalloc::api::isoDeallocate((bmalloc::api *)v16, a2);
      }
    }
    v19 = *(_QWORD *)(*(_QWORD *)v7 + 24);
    if (v7 >= *(_QWORD *)v19 && v7 < *(_QWORD *)v19 + 8 * (unint64_t)*(unsigned int *)(v19 + 12))
      *(_DWORD *)(*(_QWORD *)v7 + 40) = (v7 - *(_QWORD *)v19) >> 3;
    if (!v8)
      break;
    v8 = (v8 - 1) >> 1;
    v9 = v6 + 8 * v8;
    v14 = *(_QWORD *)v9;
    v20 = *(double *)(*(_QWORD *)v9 + 8);
    v21 = *(double *)(v11 + 8);
    if (v21 == v20)
    {
      v7 = v15;
      if ((*(_DWORD *)(v14 + 16) - *(_DWORD *)(v11 + 16)) >= 0x7FFFFFFF)
        break;
    }
    else
    {
      v7 = v15;
      if (v21 >= v20)
        break;
    }
  }
  this = *(_QWORD *)v15;
  *(_QWORD *)v15 = v11;
  if (this)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)this);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)this));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)this);
      this = bmalloc::api::isoDeallocate((bmalloc::api *)this, a2);
    }
  }
  v24 = *(_QWORD *)(*(_QWORD *)v15 + 24);
  if (v15 >= *(_QWORD *)v24 && v15 < *(_QWORD *)v24 + 8 * (unint64_t)*(unsigned int *)(v24 + 12))
    *(_DWORD *)(*(_QWORD *)v15 + 40) = (v15 - *(_QWORD *)v24) >> 3;
  if (v2)
    goto LABEL_26;
  return this;
}

uint64_t WebCore::TimerBase::hasValidHeapPosition(WebCore::TimerBase *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;
  _BOOL8 v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  double v14;
  uint64_t v15;
  double v16;
  unsigned int v17;
  uint64_t v18;
  double v19;
  double v20;
  unsigned int v21;
  uint64_t v22;
  double v23;
  double v24;

  result = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
  if (!result)
    return 0;
  do
    v4 = __ldaxr((unsigned int *)result);
  while (__stlxr(v4 + 1, (unsigned int *)result));
  v5 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
  if (!v5 || *(_DWORD *)(v5 + 40) == -1)
    goto LABEL_5;
  v9 = *(uint64_t **)(result + 24);
  v10 = *(_DWORD *)(result + 40);
  v11 = *v9;
  v12 = *((_DWORD *)v9 + 3);
  if (!v10)
    goto LABEL_14;
  v13 = (v10 - 1) >> 1;
  if (v13 < v12)
  {
    v14 = *(double *)(v5 + 8);
    v15 = *(_QWORD *)(v11 + 8 * v13);
    v16 = *(double *)(v15 + 8);
    if (v16 == v14)
    {
      if ((*(_DWORD *)(v5 + 16) - *(_DWORD *)(v15 + 16)) > 0x7FFFFFFE)
        goto LABEL_5;
    }
    else if (v16 >= v14)
    {
      goto LABEL_5;
    }
LABEL_14:
    v17 = (2 * v10) | 1;
    if (v12 <= v17)
      goto LABEL_17;
    v18 = *(_QWORD *)(v11 + 8 * v17);
    v19 = *(double *)(v18 + 8);
    v20 = *(double *)(v5 + 8);
    if (v20 == v19)
    {
      if ((*(_DWORD *)(v18 + 16) - *(_DWORD *)(v5 + 16)) <= 0x7FFFFFFE)
      {
LABEL_17:
        v21 = 2 * v10 + 2;
        if (v12 <= v21)
        {
          v6 = 1;
        }
        else
        {
          v22 = *(_QWORD *)(v11 + 8 * v21);
          v23 = *(double *)(v22 + 8);
          v24 = *(double *)(v5 + 8);
          if (v24 == v23)
            v6 = (*(_DWORD *)(v22 + 16) - *(_DWORD *)(v5 + 16)) < 0x7FFFFFFF;
          else
            v6 = v24 < v23;
        }
        do
        {
LABEL_6:
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
        }
        return v6;
      }
    }
    else if (v20 < v19)
    {
      goto LABEL_17;
    }
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

unsigned int *WebCore::TimerBase::heapDelete(WebCore::TimerBase *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *result;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;

  v3 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    do
      v4 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v4 + 1, (unsigned int *)v3));
  }
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)(v3 + 8) = 0xFFF0000000000000;
  WebCore::TimerBase::heapDecreaseKey((uint64_t)this, a2);
  v6 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  result = std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(**(unsigned int ***)(v6 + 24), (void *)(**(_QWORD **)(v6 + 24) + 8 * *(unsigned int *)(*(_QWORD *)(v6 + 24) + 12)), (uint64_t)&v23, *(unsigned int *)(*(_QWORD *)(v6 + 24) + 12));
  do
  {
    v10 = __ldaxr((unsigned int *)v6);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, (unsigned int *)v6));
  if (!v11)
  {
    atomic_store(1u, (unsigned int *)v6);
    result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)v6, v9);
  }
  *(_QWORD *)(v3 + 8) = v5;
  do
  {
    v12 = __ldaxr((unsigned int *)v3);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, (unsigned int *)v3));
  if (!v13)
  {
    atomic_store(1u, (unsigned int *)v3);
    result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)v3, v9);
  }
  v14 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFLL;
  if (v14)
  {
    do
      v15 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v15 + 1, (unsigned int *)v14));
  }
  v16 = *(_QWORD *)(v14 + 24);
  v17 = *(unsigned int *)(v16 + 12);
  if ((_DWORD)v17)
  {
    v18 = v17 - 1;
    result = *(unsigned int **)(*(_QWORD *)v16 + 8 * (v17 - 1));
    *(_QWORD *)(*(_QWORD *)v16 + 8 * (v17 - 1)) = 0;
    if (result)
    {
      do
      {
        v19 = __ldaxr(result);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, result));
      if (!v20)
      {
        atomic_store(1u, result);
        result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)result, v9);
      }
    }
    *(_DWORD *)(v16 + 12) = v18;
    *(_DWORD *)(v14 + 40) = -1;
    do
    {
      v21 = __ldaxr((unsigned int *)v14);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v14));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v14);
      return (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)v14, v9);
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unsigned int *WebCore::TimerBase::fireTimersInNestedEventLoop(WebCore::TimerBase *this)
{
  uint64_t v1;

  v1 = WebCore::threadGlobalData(this);
  return WebCore::ThreadTimers::fireTimersInNestedEventLoop(*(uint64_t ***)(v1 + 48));
}

uint64_t WebCore::TimerBase::nextUnalignedFireInterval(WebCore::TimerBase *this)
{
  uint64_t result;
  double v3;
  double v4;

  result = WTF::MonotonicTime::now(this);
  v4 = *((double *)this + 2) - v3;
  if (v4 < 0.0)
    v4 = 0.0;
  if ((*(uint64_t *)&v4 <= -1 || ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(_QWORD *)&v4 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    result = 559;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::VideoDecoder::createLocalDecoder(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  int v10;
  uint64_t result;
  _BYTE v12[8];
  int v13;
  char v14;

  if (MEMORY[0x19AEA53F4](*a1, "vp8", 3))
  {
    v10 = 0;
    return WebCore::LibWebRTCVPXVideoDecoder::create(v10, a2, a3, a4, a5);
  }
  if (*a1)
  {
    if (WTF::StringImpl::startsWith())
    {
      v10 = 1;
      return WebCore::LibWebRTCVPXVideoDecoder::create(v10, a2, a3, a4, a5);
    }
    if (*a1)
    {
      if (WTF::StringImpl::startsWith())
      {
        v10 = 2;
        return WebCore::LibWebRTCVPXVideoDecoder::create(v10, a2, a3, a4, a5);
      }
      if (*a1 && WTF::StringImpl::startsWith())
      {
        v10 = 3;
        return WebCore::LibWebRTCVPXVideoDecoder::create(v10, a2, a3, a4, a5);
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = 1;
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)*a3 + 16))(*a3, v12);
  if (v13 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoDecoderEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v13])(&v14, v12);
  return result;
}

_QWORD *WebCore::VideoDecoder::VideoDecoder(_QWORD *this)
{
  *this = off_1E3407150;
  return this;
}

uint64_t WebCore::VideoEncoder::createLocalEncoder(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  int v12;
  uint64_t result;
  _BYTE v14[8];
  int v15;
  char v16;

  if (MEMORY[0x19AEA53F4](*a1, "vp8", 3))
  {
    v12 = 0;
    return WebCore::LibWebRTCVPXVideoEncoder::create(v12, a2, a3, a4, a5, a6);
  }
  if (*a1)
  {
    if (WTF::StringImpl::startsWith())
    {
      v12 = 1;
      return WebCore::LibWebRTCVPXVideoEncoder::create(v12, a2, a3, a4, a5, a6);
    }
    if (*a1)
    {
      if (WTF::StringImpl::startsWith())
      {
        v12 = 2;
        return WebCore::LibWebRTCVPXVideoEncoder::create(v12, a2, a3, a4, a5, a6);
      }
      if (*a1 && WTF::StringImpl::startsWith())
      {
        v12 = 3;
        return WebCore::LibWebRTCVPXVideoEncoder::create(v12, a2, a3, a4, a5, a6);
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v15 = 1;
  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)*a3 + 16))(*a3, v14);
  if (v15 != -1)
    return ((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoEncoderEEENS6_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v15])(&v16, v14);
  return result;
}

uint64_t WebCore::VideoFrame::VideoFrame(uint64_t result, uint64_t a2, uint64_t a3, char a4, __int16 a5, _QWORD *a6)
{
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3407190;
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = a3;
  *(_BYTE *)(result + 32) = a4;
  *(_WORD *)(result + 34) = a5;
  *(_QWORD *)(result + 36) = *a6;
  return result;
}

uint64_t WebCore::VideoFrame::isCV(WebCore::VideoFrame *this)
{
  return 0;
}

uint64_t WebCore::VideoFrame::pixelBuffer(WebCore::VideoFrame *this)
{
  return 0;
}

unsigned int *WTF::VectorTypeOperations<WTF::RefPtr<WebCore::ThreadTimerHeapItem,WTF::RawPtrTraits<WebCore::ThreadTimerHeapItem>,WTF::DefaultRefDerefTraits<WebCore::ThreadTimerHeapItem>>>::destruct(unsigned int *result, void *a2)
{
  unsigned int **v3;
  unsigned int v4;
  unsigned int v5;

  if (result != a2)
  {
    v3 = (unsigned int **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        do
        {
          v4 = __ldaxr(result);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, result));
        if (!v5)
        {
          atomic_store(1u, result);
          result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
        }
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

void WebCore::EventNames::~EventNames(WebCore::EventNames *this, WTF::StringImpl *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  WTF::StringImpl *v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  WTF::StringImpl *v162;
  WTF::StringImpl *v163;
  WTF::StringImpl *v164;
  WTF::StringImpl *v165;
  WTF::StringImpl *v166;
  WTF::StringImpl *v167;
  WTF::StringImpl *v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  WTF::StringImpl *v175;
  WTF::StringImpl *v176;
  WTF::StringImpl *v177;
  WTF::StringImpl *v178;
  WTF::StringImpl *v179;
  WTF::StringImpl *v180;
  WTF::StringImpl *v181;
  WTF::StringImpl *v182;
  WTF::StringImpl *v183;
  WTF::StringImpl *v184;
  WTF::StringImpl *v185;
  WTF::StringImpl *v186;
  WTF::StringImpl *v187;
  WTF::StringImpl *v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  WTF::StringImpl *v191;
  WTF::StringImpl *v192;
  WTF::StringImpl *v193;
  WTF::StringImpl *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  WTF::StringImpl *v200;
  WTF::StringImpl *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  WTF::StringImpl *v204;
  WTF::StringImpl *v205;
  WTF::StringImpl *v206;
  WTF::StringImpl *v207;
  WTF::StringImpl *v208;
  WTF::StringImpl *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  WTF::StringImpl *v220;
  WTF::StringImpl *v221;
  WTF::StringImpl *v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  WTF::StringImpl *v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  WTF::StringImpl *v233;
  WTF::StringImpl *v234;
  WTF::StringImpl *v235;
  WTF::StringImpl *v236;
  WTF::StringImpl *v237;
  WTF::StringImpl *v238;
  WTF::StringImpl *v239;
  WTF::StringImpl *v240;
  WTF::StringImpl *v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  WTF::StringImpl *v256;
  WTF::StringImpl *v257;
  WTF::StringImpl *v258;
  WTF::StringImpl *v259;
  WTF::StringImpl *v260;
  WTF::StringImpl *v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  WTF::StringImpl *v268;
  WTF::StringImpl *v269;
  WTF::StringImpl *v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  WTF::StringImpl *v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  WTF::StringImpl *v281;
  WTF::StringImpl *v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  WTF::StringImpl *v287;
  WTF::StringImpl *v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  WTF::StringImpl *v293;
  WTF::StringImpl *v294;
  WTF::StringImpl *v295;
  WTF::StringImpl *v296;
  WTF::StringImpl *v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  WTF::StringImpl *v301;
  WTF::StringImpl *v302;
  WTF::StringImpl *v303;
  WTF::StringImpl *v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  WTF::StringImpl *v317;
  WTF::StringImpl *v318;
  WTF::StringImpl *v319;
  WTF::StringImpl *v320;
  WTF::StringImpl *v321;
  WTF::StringImpl *v322;

  v3 = (WTF::StringImpl **)*((_QWORD *)this + 319);
  if (v3)
    WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::LegacyRenderSVGResourceContainer *,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::LegacyRenderSVGResourceContainer *>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)*((unsigned int *)this + 640));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 318);
  *((_QWORD *)this + 318) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 317);
  *((_QWORD *)this + 317) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 316);
  *((_QWORD *)this + 316) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 315);
  *((_QWORD *)this + 315) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 314);
  *((_QWORD *)this + 314) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 313);
  *((_QWORD *)this + 313) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)*((_QWORD *)this + 312);
  *((_QWORD *)this + 312) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 311);
  *((_QWORD *)this + 311) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 310);
  *((_QWORD *)this + 310) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 309);
  *((_QWORD *)this + 309) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 308);
  *((_QWORD *)this + 308) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 307);
  *((_QWORD *)this + 307) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (WTF::StringImpl *)*((_QWORD *)this + 306);
  *((_QWORD *)this + 306) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, a2);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 305);
  *((_QWORD *)this + 305) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (WTF::StringImpl *)*((_QWORD *)this + 304);
  *((_QWORD *)this + 304) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, a2);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 303);
  *((_QWORD *)this + 303) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 302);
  *((_QWORD *)this + 302) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, a2);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 301);
  *((_QWORD *)this + 301) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 300);
  *((_QWORD *)this + 300) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)this + 299);
  *((_QWORD *)this + 299) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, a2);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = (WTF::StringImpl *)*((_QWORD *)this + 298);
  *((_QWORD *)this + 298) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, a2);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (WTF::StringImpl *)*((_QWORD *)this + 297);
  *((_QWORD *)this + 297) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, a2);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = (WTF::StringImpl *)*((_QWORD *)this + 296);
  *((_QWORD *)this + 296) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, a2);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 295);
  *((_QWORD *)this + 295) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, a2);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = (WTF::StringImpl *)*((_QWORD *)this + 294);
  *((_QWORD *)this + 294) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, a2);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = (WTF::StringImpl *)*((_QWORD *)this + 293);
  *((_QWORD *)this + 293) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, a2);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = (WTF::StringImpl *)*((_QWORD *)this + 292);
  *((_QWORD *)this + 292) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, a2);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = (WTF::StringImpl *)*((_QWORD *)this + 291);
  *((_QWORD *)this + 291) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, a2);
    else
      *(_DWORD *)v31 -= 2;
  }
  v32 = (WTF::StringImpl *)*((_QWORD *)this + 290);
  *((_QWORD *)this + 290) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, a2);
    else
      *(_DWORD *)v32 -= 2;
  }
  v33 = (WTF::StringImpl *)*((_QWORD *)this + 289);
  *((_QWORD *)this + 289) = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, a2);
    else
      *(_DWORD *)v33 -= 2;
  }
  v34 = (WTF::StringImpl *)*((_QWORD *)this + 288);
  *((_QWORD *)this + 288) = 0;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, a2);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = (WTF::StringImpl *)*((_QWORD *)this + 287);
  *((_QWORD *)this + 287) = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, a2);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (WTF::StringImpl *)*((_QWORD *)this + 286);
  *((_QWORD *)this + 286) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, a2);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = (WTF::StringImpl *)*((_QWORD *)this + 285);
  *((_QWORD *)this + 285) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, a2);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (WTF::StringImpl *)*((_QWORD *)this + 284);
  *((_QWORD *)this + 284) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, a2);
    else
      *(_DWORD *)v38 -= 2;
  }
  v39 = (WTF::StringImpl *)*((_QWORD *)this + 283);
  *((_QWORD *)this + 283) = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, a2);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = (WTF::StringImpl *)*((_QWORD *)this + 282);
  *((_QWORD *)this + 282) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, a2);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = (WTF::StringImpl *)*((_QWORD *)this + 281);
  *((_QWORD *)this + 281) = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      WTF::StringImpl::destroy(v41, a2);
    else
      *(_DWORD *)v41 -= 2;
  }
  v42 = (WTF::StringImpl *)*((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2)
      WTF::StringImpl::destroy(v42, a2);
    else
      *(_DWORD *)v42 -= 2;
  }
  v43 = (WTF::StringImpl *)*((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, a2);
    else
      *(_DWORD *)v43 -= 2;
  }
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 278);
  *((_QWORD *)this + 278) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, a2);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = (WTF::StringImpl *)*((_QWORD *)this + 277);
  *((_QWORD *)this + 277) = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, a2);
    else
      *(_DWORD *)v45 -= 2;
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)this + 276);
  *((_QWORD *)this + 276) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, a2);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 275);
  *((_QWORD *)this + 275) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, a2);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = (WTF::StringImpl *)*((_QWORD *)this + 274);
  *((_QWORD *)this + 274) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, a2);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = (WTF::StringImpl *)*((_QWORD *)this + 273);
  *((_QWORD *)this + 273) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, a2);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = (WTF::StringImpl *)*((_QWORD *)this + 272);
  *((_QWORD *)this + 272) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, a2);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)this + 271);
  *((_QWORD *)this + 271) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, a2);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = (WTF::StringImpl *)*((_QWORD *)this + 270);
  *((_QWORD *)this + 270) = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, a2);
    else
      *(_DWORD *)v52 -= 2;
  }
  v53 = (WTF::StringImpl *)*((_QWORD *)this + 269);
  *((_QWORD *)this + 269) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, a2);
    else
      *(_DWORD *)v53 -= 2;
  }
  v54 = (WTF::StringImpl *)*((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, a2);
    else
      *(_DWORD *)v54 -= 2;
  }
  v55 = (WTF::StringImpl *)*((_QWORD *)this + 267);
  *((_QWORD *)this + 267) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, a2);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = (WTF::StringImpl *)*((_QWORD *)this + 266);
  *((_QWORD *)this + 266) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, a2);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = (WTF::StringImpl *)*((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, a2);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = (WTF::StringImpl *)*((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, a2);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = (WTF::StringImpl *)*((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, a2);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 262);
  *((_QWORD *)this + 262) = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, a2);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = (WTF::StringImpl *)*((_QWORD *)this + 261);
  *((_QWORD *)this + 261) = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, a2);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = (WTF::StringImpl *)*((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, a2);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = (WTF::StringImpl *)*((_QWORD *)this + 259);
  *((_QWORD *)this + 259) = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, a2);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = (WTF::StringImpl *)*((_QWORD *)this + 258);
  *((_QWORD *)this + 258) = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, a2);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = (WTF::StringImpl *)*((_QWORD *)this + 257);
  *((_QWORD *)this + 257) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, a2);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = (WTF::StringImpl *)*((_QWORD *)this + 256);
  *((_QWORD *)this + 256) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, a2);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 255);
  *((_QWORD *)this + 255) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, a2);
    else
      *(_DWORD *)v67 -= 2;
  }
  v68 = (WTF::StringImpl *)*((_QWORD *)this + 254);
  *((_QWORD *)this + 254) = 0;
  if (v68)
  {
    if (*(_DWORD *)v68 == 2)
      WTF::StringImpl::destroy(v68, a2);
    else
      *(_DWORD *)v68 -= 2;
  }
  v69 = (WTF::StringImpl *)*((_QWORD *)this + 253);
  *((_QWORD *)this + 253) = 0;
  if (v69)
  {
    if (*(_DWORD *)v69 == 2)
      WTF::StringImpl::destroy(v69, a2);
    else
      *(_DWORD *)v69 -= 2;
  }
  v70 = (WTF::StringImpl *)*((_QWORD *)this + 252);
  *((_QWORD *)this + 252) = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, a2);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = (WTF::StringImpl *)*((_QWORD *)this + 251);
  *((_QWORD *)this + 251) = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, a2);
    else
      *(_DWORD *)v71 -= 2;
  }
  v72 = (WTF::StringImpl *)*((_QWORD *)this + 250);
  *((_QWORD *)this + 250) = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2)
      WTF::StringImpl::destroy(v72, a2);
    else
      *(_DWORD *)v72 -= 2;
  }
  v73 = (WTF::StringImpl *)*((_QWORD *)this + 249);
  *((_QWORD *)this + 249) = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, a2);
    else
      *(_DWORD *)v73 -= 2;
  }
  v74 = (WTF::StringImpl *)*((_QWORD *)this + 248);
  *((_QWORD *)this + 248) = 0;
  if (v74)
  {
    if (*(_DWORD *)v74 == 2)
      WTF::StringImpl::destroy(v74, a2);
    else
      *(_DWORD *)v74 -= 2;
  }
  v75 = (WTF::StringImpl *)*((_QWORD *)this + 247);
  *((_QWORD *)this + 247) = 0;
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, a2);
    else
      *(_DWORD *)v75 -= 2;
  }
  v76 = (WTF::StringImpl *)*((_QWORD *)this + 246);
  *((_QWORD *)this + 246) = 0;
  if (v76)
  {
    if (*(_DWORD *)v76 == 2)
      WTF::StringImpl::destroy(v76, a2);
    else
      *(_DWORD *)v76 -= 2;
  }
  v77 = (WTF::StringImpl *)*((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = 0;
  if (v77)
  {
    if (*(_DWORD *)v77 == 2)
      WTF::StringImpl::destroy(v77, a2);
    else
      *(_DWORD *)v77 -= 2;
  }
  v78 = (WTF::StringImpl *)*((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v78)
  {
    if (*(_DWORD *)v78 == 2)
      WTF::StringImpl::destroy(v78, a2);
    else
      *(_DWORD *)v78 -= 2;
  }
  v79 = (WTF::StringImpl *)*((_QWORD *)this + 243);
  *((_QWORD *)this + 243) = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, a2);
    else
      *(_DWORD *)v79 -= 2;
  }
  v80 = (WTF::StringImpl *)*((_QWORD *)this + 242);
  *((_QWORD *)this + 242) = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, a2);
    else
      *(_DWORD *)v80 -= 2;
  }
  v81 = (WTF::StringImpl *)*((_QWORD *)this + 241);
  *((_QWORD *)this + 241) = 0;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy(v81, a2);
    else
      *(_DWORD *)v81 -= 2;
  }
  v82 = (WTF::StringImpl *)*((_QWORD *)this + 240);
  *((_QWORD *)this + 240) = 0;
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, a2);
    else
      *(_DWORD *)v82 -= 2;
  }
  v83 = (WTF::StringImpl *)*((_QWORD *)this + 239);
  *((_QWORD *)this + 239) = 0;
  if (v83)
  {
    if (*(_DWORD *)v83 == 2)
      WTF::StringImpl::destroy(v83, a2);
    else
      *(_DWORD *)v83 -= 2;
  }
  v84 = (WTF::StringImpl *)*((_QWORD *)this + 238);
  *((_QWORD *)this + 238) = 0;
  if (v84)
  {
    if (*(_DWORD *)v84 == 2)
      WTF::StringImpl::destroy(v84, a2);
    else
      *(_DWORD *)v84 -= 2;
  }
  v85 = (WTF::StringImpl *)*((_QWORD *)this + 237);
  *((_QWORD *)this + 237) = 0;
  if (v85)
  {
    if (*(_DWORD *)v85 == 2)
      WTF::StringImpl::destroy(v85, a2);
    else
      *(_DWORD *)v85 -= 2;
  }
  v86 = (WTF::StringImpl *)*((_QWORD *)this + 236);
  *((_QWORD *)this + 236) = 0;
  if (v86)
  {
    if (*(_DWORD *)v86 == 2)
      WTF::StringImpl::destroy(v86, a2);
    else
      *(_DWORD *)v86 -= 2;
  }
  v87 = (WTF::StringImpl *)*((_QWORD *)this + 235);
  *((_QWORD *)this + 235) = 0;
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, a2);
    else
      *(_DWORD *)v87 -= 2;
  }
  v88 = (WTF::StringImpl *)*((_QWORD *)this + 234);
  *((_QWORD *)this + 234) = 0;
  if (v88)
  {
    if (*(_DWORD *)v88 == 2)
      WTF::StringImpl::destroy(v88, a2);
    else
      *(_DWORD *)v88 -= 2;
  }
  v89 = (WTF::StringImpl *)*((_QWORD *)this + 233);
  *((_QWORD *)this + 233) = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 2)
      WTF::StringImpl::destroy(v89, a2);
    else
      *(_DWORD *)v89 -= 2;
  }
  v90 = (WTF::StringImpl *)*((_QWORD *)this + 232);
  *((_QWORD *)this + 232) = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, a2);
    else
      *(_DWORD *)v90 -= 2;
  }
  v91 = (WTF::StringImpl *)*((_QWORD *)this + 231);
  *((_QWORD *)this + 231) = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, a2);
    else
      *(_DWORD *)v91 -= 2;
  }
  v92 = (WTF::StringImpl *)*((_QWORD *)this + 230);
  *((_QWORD *)this + 230) = 0;
  if (v92)
  {
    if (*(_DWORD *)v92 == 2)
      WTF::StringImpl::destroy(v92, a2);
    else
      *(_DWORD *)v92 -= 2;
  }
  v93 = (WTF::StringImpl *)*((_QWORD *)this + 229);
  *((_QWORD *)this + 229) = 0;
  if (v93)
  {
    if (*(_DWORD *)v93 == 2)
      WTF::StringImpl::destroy(v93, a2);
    else
      *(_DWORD *)v93 -= 2;
  }
  v94 = (WTF::StringImpl *)*((_QWORD *)this + 228);
  *((_QWORD *)this + 228) = 0;
  if (v94)
  {
    if (*(_DWORD *)v94 == 2)
      WTF::StringImpl::destroy(v94, a2);
    else
      *(_DWORD *)v94 -= 2;
  }
  v95 = (WTF::StringImpl *)*((_QWORD *)this + 227);
  *((_QWORD *)this + 227) = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, a2);
    else
      *(_DWORD *)v95 -= 2;
  }
  v96 = (WTF::StringImpl *)*((_QWORD *)this + 226);
  *((_QWORD *)this + 226) = 0;
  if (v96)
  {
    if (*(_DWORD *)v96 == 2)
      WTF::StringImpl::destroy(v96, a2);
    else
      *(_DWORD *)v96 -= 2;
  }
  v97 = (WTF::StringImpl *)*((_QWORD *)this + 225);
  *((_QWORD *)this + 225) = 0;
  if (v97)
  {
    if (*(_DWORD *)v97 == 2)
      WTF::StringImpl::destroy(v97, a2);
    else
      *(_DWORD *)v97 -= 2;
  }
  v98 = (WTF::StringImpl *)*((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = 0;
  if (v98)
  {
    if (*(_DWORD *)v98 == 2)
      WTF::StringImpl::destroy(v98, a2);
    else
      *(_DWORD *)v98 -= 2;
  }
  v99 = (WTF::StringImpl *)*((_QWORD *)this + 223);
  *((_QWORD *)this + 223) = 0;
  if (v99)
  {
    if (*(_DWORD *)v99 == 2)
      WTF::StringImpl::destroy(v99, a2);
    else
      *(_DWORD *)v99 -= 2;
  }
  v100 = (WTF::StringImpl *)*((_QWORD *)this + 222);
  *((_QWORD *)this + 222) = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2)
      WTF::StringImpl::destroy(v100, a2);
    else
      *(_DWORD *)v100 -= 2;
  }
  v101 = (WTF::StringImpl *)*((_QWORD *)this + 221);
  *((_QWORD *)this + 221) = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, a2);
    else
      *(_DWORD *)v101 -= 2;
  }
  v102 = (WTF::StringImpl *)*((_QWORD *)this + 220);
  *((_QWORD *)this + 220) = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      WTF::StringImpl::destroy(v102, a2);
    else
      *(_DWORD *)v102 -= 2;
  }
  v103 = (WTF::StringImpl *)*((_QWORD *)this + 219);
  *((_QWORD *)this + 219) = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, a2);
    else
      *(_DWORD *)v103 -= 2;
  }
  v104 = (WTF::StringImpl *)*((_QWORD *)this + 218);
  *((_QWORD *)this + 218) = 0;
  if (v104)
  {
    if (*(_DWORD *)v104 == 2)
      WTF::StringImpl::destroy(v104, a2);
    else
      *(_DWORD *)v104 -= 2;
  }
  v105 = (WTF::StringImpl *)*((_QWORD *)this + 217);
  *((_QWORD *)this + 217) = 0;
  if (v105)
  {
    if (*(_DWORD *)v105 == 2)
      WTF::StringImpl::destroy(v105, a2);
    else
      *(_DWORD *)v105 -= 2;
  }
  v106 = (WTF::StringImpl *)*((_QWORD *)this + 216);
  *((_QWORD *)this + 216) = 0;
  if (v106)
  {
    if (*(_DWORD *)v106 == 2)
      WTF::StringImpl::destroy(v106, a2);
    else
      *(_DWORD *)v106 -= 2;
  }
  v107 = (WTF::StringImpl *)*((_QWORD *)this + 215);
  *((_QWORD *)this + 215) = 0;
  if (v107)
  {
    if (*(_DWORD *)v107 == 2)
      WTF::StringImpl::destroy(v107, a2);
    else
      *(_DWORD *)v107 -= 2;
  }
  v108 = (WTF::StringImpl *)*((_QWORD *)this + 214);
  *((_QWORD *)this + 214) = 0;
  if (v108)
  {
    if (*(_DWORD *)v108 == 2)
      WTF::StringImpl::destroy(v108, a2);
    else
      *(_DWORD *)v108 -= 2;
  }
  v109 = (WTF::StringImpl *)*((_QWORD *)this + 213);
  *((_QWORD *)this + 213) = 0;
  if (v109)
  {
    if (*(_DWORD *)v109 == 2)
      WTF::StringImpl::destroy(v109, a2);
    else
      *(_DWORD *)v109 -= 2;
  }
  v110 = (WTF::StringImpl *)*((_QWORD *)this + 212);
  *((_QWORD *)this + 212) = 0;
  if (v110)
  {
    if (*(_DWORD *)v110 == 2)
      WTF::StringImpl::destroy(v110, a2);
    else
      *(_DWORD *)v110 -= 2;
  }
  v111 = (WTF::StringImpl *)*((_QWORD *)this + 211);
  *((_QWORD *)this + 211) = 0;
  if (v111)
  {
    if (*(_DWORD *)v111 == 2)
      WTF::StringImpl::destroy(v111, a2);
    else
      *(_DWORD *)v111 -= 2;
  }
  v112 = (WTF::StringImpl *)*((_QWORD *)this + 210);
  *((_QWORD *)this + 210) = 0;
  if (v112)
  {
    if (*(_DWORD *)v112 == 2)
      WTF::StringImpl::destroy(v112, a2);
    else
      *(_DWORD *)v112 -= 2;
  }
  v113 = (WTF::StringImpl *)*((_QWORD *)this + 209);
  *((_QWORD *)this + 209) = 0;
  if (v113)
  {
    if (*(_DWORD *)v113 == 2)
      WTF::StringImpl::destroy(v113, a2);
    else
      *(_DWORD *)v113 -= 2;
  }
  v114 = (WTF::StringImpl *)*((_QWORD *)this + 208);
  *((_QWORD *)this + 208) = 0;
  if (v114)
  {
    if (*(_DWORD *)v114 == 2)
      WTF::StringImpl::destroy(v114, a2);
    else
      *(_DWORD *)v114 -= 2;
  }
  v115 = (WTF::StringImpl *)*((_QWORD *)this + 207);
  *((_QWORD *)this + 207) = 0;
  if (v115)
  {
    if (*(_DWORD *)v115 == 2)
      WTF::StringImpl::destroy(v115, a2);
    else
      *(_DWORD *)v115 -= 2;
  }
  v116 = (WTF::StringImpl *)*((_QWORD *)this + 206);
  *((_QWORD *)this + 206) = 0;
  if (v116)
  {
    if (*(_DWORD *)v116 == 2)
      WTF::StringImpl::destroy(v116, a2);
    else
      *(_DWORD *)v116 -= 2;
  }
  v117 = (WTF::StringImpl *)*((_QWORD *)this + 205);
  *((_QWORD *)this + 205) = 0;
  if (v117)
  {
    if (*(_DWORD *)v117 == 2)
      WTF::StringImpl::destroy(v117, a2);
    else
      *(_DWORD *)v117 -= 2;
  }
  v118 = (WTF::StringImpl *)*((_QWORD *)this + 204);
  *((_QWORD *)this + 204) = 0;
  if (v118)
  {
    if (*(_DWORD *)v118 == 2)
      WTF::StringImpl::destroy(v118, a2);
    else
      *(_DWORD *)v118 -= 2;
  }
  v119 = (WTF::StringImpl *)*((_QWORD *)this + 203);
  *((_QWORD *)this + 203) = 0;
  if (v119)
  {
    if (*(_DWORD *)v119 == 2)
      WTF::StringImpl::destroy(v119, a2);
    else
      *(_DWORD *)v119 -= 2;
  }
  v120 = (WTF::StringImpl *)*((_QWORD *)this + 202);
  *((_QWORD *)this + 202) = 0;
  if (v120)
  {
    if (*(_DWORD *)v120 == 2)
      WTF::StringImpl::destroy(v120, a2);
    else
      *(_DWORD *)v120 -= 2;
  }
  v121 = (WTF::StringImpl *)*((_QWORD *)this + 201);
  *((_QWORD *)this + 201) = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 2)
      WTF::StringImpl::destroy(v121, a2);
    else
      *(_DWORD *)v121 -= 2;
  }
  v122 = (WTF::StringImpl *)*((_QWORD *)this + 200);
  *((_QWORD *)this + 200) = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, a2);
    else
      *(_DWORD *)v122 -= 2;
  }
  v123 = (WTF::StringImpl *)*((_QWORD *)this + 199);
  *((_QWORD *)this + 199) = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 2)
      WTF::StringImpl::destroy(v123, a2);
    else
      *(_DWORD *)v123 -= 2;
  }
  v124 = (WTF::StringImpl *)*((_QWORD *)this + 198);
  *((_QWORD *)this + 198) = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 2)
      WTF::StringImpl::destroy(v124, a2);
    else
      *(_DWORD *)v124 -= 2;
  }
  v125 = (WTF::StringImpl *)*((_QWORD *)this + 197);
  *((_QWORD *)this + 197) = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, a2);
    else
      *(_DWORD *)v125 -= 2;
  }
  v126 = (WTF::StringImpl *)*((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 2)
      WTF::StringImpl::destroy(v126, a2);
    else
      *(_DWORD *)v126 -= 2;
  }
  v127 = (WTF::StringImpl *)*((_QWORD *)this + 195);
  *((_QWORD *)this + 195) = 0;
  if (v127)
  {
    if (*(_DWORD *)v127 == 2)
      WTF::StringImpl::destroy(v127, a2);
    else
      *(_DWORD *)v127 -= 2;
  }
  v128 = (WTF::StringImpl *)*((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v128)
  {
    if (*(_DWORD *)v128 == 2)
      WTF::StringImpl::destroy(v128, a2);
    else
      *(_DWORD *)v128 -= 2;
  }
  v129 = (WTF::StringImpl *)*((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = 0;
  if (v129)
  {
    if (*(_DWORD *)v129 == 2)
      WTF::StringImpl::destroy(v129, a2);
    else
      *(_DWORD *)v129 -= 2;
  }
  v130 = (WTF::StringImpl *)*((_QWORD *)this + 192);
  *((_QWORD *)this + 192) = 0;
  if (v130)
  {
    if (*(_DWORD *)v130 == 2)
      WTF::StringImpl::destroy(v130, a2);
    else
      *(_DWORD *)v130 -= 2;
  }
  v131 = (WTF::StringImpl *)*((_QWORD *)this + 191);
  *((_QWORD *)this + 191) = 0;
  if (v131)
  {
    if (*(_DWORD *)v131 == 2)
      WTF::StringImpl::destroy(v131, a2);
    else
      *(_DWORD *)v131 -= 2;
  }
  v132 = (WTF::StringImpl *)*((_QWORD *)this + 190);
  *((_QWORD *)this + 190) = 0;
  if (v132)
  {
    if (*(_DWORD *)v132 == 2)
      WTF::StringImpl::destroy(v132, a2);
    else
      *(_DWORD *)v132 -= 2;
  }
  v133 = (WTF::StringImpl *)*((_QWORD *)this + 189);
  *((_QWORD *)this + 189) = 0;
  if (v133)
  {
    if (*(_DWORD *)v133 == 2)
      WTF::StringImpl::destroy(v133, a2);
    else
      *(_DWORD *)v133 -= 2;
  }
  v134 = (WTF::StringImpl *)*((_QWORD *)this + 188);
  *((_QWORD *)this + 188) = 0;
  if (v134)
  {
    if (*(_DWORD *)v134 == 2)
      WTF::StringImpl::destroy(v134, a2);
    else
      *(_DWORD *)v134 -= 2;
  }
  v135 = (WTF::StringImpl *)*((_QWORD *)this + 187);
  *((_QWORD *)this + 187) = 0;
  if (v135)
  {
    if (*(_DWORD *)v135 == 2)
      WTF::StringImpl::destroy(v135, a2);
    else
      *(_DWORD *)v135 -= 2;
  }
  v136 = (WTF::StringImpl *)*((_QWORD *)this + 186);
  *((_QWORD *)this + 186) = 0;
  if (v136)
  {
    if (*(_DWORD *)v136 == 2)
      WTF::StringImpl::destroy(v136, a2);
    else
      *(_DWORD *)v136 -= 2;
  }
  v137 = (WTF::StringImpl *)*((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v137)
  {
    if (*(_DWORD *)v137 == 2)
      WTF::StringImpl::destroy(v137, a2);
    else
      *(_DWORD *)v137 -= 2;
  }
  v138 = (WTF::StringImpl *)*((_QWORD *)this + 184);
  *((_QWORD *)this + 184) = 0;
  if (v138)
  {
    if (*(_DWORD *)v138 == 2)
      WTF::StringImpl::destroy(v138, a2);
    else
      *(_DWORD *)v138 -= 2;
  }
  v139 = (WTF::StringImpl *)*((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v139)
  {
    if (*(_DWORD *)v139 == 2)
      WTF::StringImpl::destroy(v139, a2);
    else
      *(_DWORD *)v139 -= 2;
  }
  v140 = (WTF::StringImpl *)*((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v140)
  {
    if (*(_DWORD *)v140 == 2)
      WTF::StringImpl::destroy(v140, a2);
    else
      *(_DWORD *)v140 -= 2;
  }
  v141 = (WTF::StringImpl *)*((_QWORD *)this + 181);
  *((_QWORD *)this + 181) = 0;
  if (v141)
  {
    if (*(_DWORD *)v141 == 2)
      WTF::StringImpl::destroy(v141, a2);
    else
      *(_DWORD *)v141 -= 2;
  }
  v142 = (WTF::StringImpl *)*((_QWORD *)this + 180);
  *((_QWORD *)this + 180) = 0;
  if (v142)
  {
    if (*(_DWORD *)v142 == 2)
      WTF::StringImpl::destroy(v142, a2);
    else
      *(_DWORD *)v142 -= 2;
  }
  v143 = (WTF::StringImpl *)*((_QWORD *)this + 179);
  *((_QWORD *)this + 179) = 0;
  if (v143)
  {
    if (*(_DWORD *)v143 == 2)
      WTF::StringImpl::destroy(v143, a2);
    else
      *(_DWORD *)v143 -= 2;
  }
  v144 = (WTF::StringImpl *)*((_QWORD *)this + 178);
  *((_QWORD *)this + 178) = 0;
  if (v144)
  {
    if (*(_DWORD *)v144 == 2)
      WTF::StringImpl::destroy(v144, a2);
    else
      *(_DWORD *)v144 -= 2;
  }
  v145 = (WTF::StringImpl *)*((_QWORD *)this + 177);
  *((_QWORD *)this + 177) = 0;
  if (v145)
  {
    if (*(_DWORD *)v145 == 2)
      WTF::StringImpl::destroy(v145, a2);
    else
      *(_DWORD *)v145 -= 2;
  }
  v146 = (WTF::StringImpl *)*((_QWORD *)this + 176);
  *((_QWORD *)this + 176) = 0;
  if (v146)
  {
    if (*(_DWORD *)v146 == 2)
      WTF::StringImpl::destroy(v146, a2);
    else
      *(_DWORD *)v146 -= 2;
  }
  v147 = (WTF::StringImpl *)*((_QWORD *)this + 175);
  *((_QWORD *)this + 175) = 0;
  if (v147)
  {
    if (*(_DWORD *)v147 == 2)
      WTF::StringImpl::destroy(v147, a2);
    else
      *(_DWORD *)v147 -= 2;
  }
  v148 = (WTF::StringImpl *)*((_QWORD *)this + 174);
  *((_QWORD *)this + 174) = 0;
  if (v148)
  {
    if (*(_DWORD *)v148 == 2)
      WTF::StringImpl::destroy(v148, a2);
    else
      *(_DWORD *)v148 -= 2;
  }
  v149 = (WTF::StringImpl *)*((_QWORD *)this + 173);
  *((_QWORD *)this + 173) = 0;
  if (v149)
  {
    if (*(_DWORD *)v149 == 2)
      WTF::StringImpl::destroy(v149, a2);
    else
      *(_DWORD *)v149 -= 2;
  }
  v150 = (WTF::StringImpl *)*((_QWORD *)this + 172);
  *((_QWORD *)this + 172) = 0;
  if (v150)
  {
    if (*(_DWORD *)v150 == 2)
      WTF::StringImpl::destroy(v150, a2);
    else
      *(_DWORD *)v150 -= 2;
  }
  v151 = (WTF::StringImpl *)*((_QWORD *)this + 171);
  *((_QWORD *)this + 171) = 0;
  if (v151)
  {
    if (*(_DWORD *)v151 == 2)
      WTF::StringImpl::destroy(v151, a2);
    else
      *(_DWORD *)v151 -= 2;
  }
  v152 = (WTF::StringImpl *)*((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v152)
  {
    if (*(_DWORD *)v152 == 2)
      WTF::StringImpl::destroy(v152, a2);
    else
      *(_DWORD *)v152 -= 2;
  }
  v153 = (WTF::StringImpl *)*((_QWORD *)this + 169);
  *((_QWORD *)this + 169) = 0;
  if (v153)
  {
    if (*(_DWORD *)v153 == 2)
      WTF::StringImpl::destroy(v153, a2);
    else
      *(_DWORD *)v153 -= 2;
  }
  v154 = (WTF::StringImpl *)*((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v154)
  {
    if (*(_DWORD *)v154 == 2)
      WTF::StringImpl::destroy(v154, a2);
    else
      *(_DWORD *)v154 -= 2;
  }
  v155 = (WTF::StringImpl *)*((_QWORD *)this + 167);
  *((_QWORD *)this + 167) = 0;
  if (v155)
  {
    if (*(_DWORD *)v155 == 2)
      WTF::StringImpl::destroy(v155, a2);
    else
      *(_DWORD *)v155 -= 2;
  }
  v156 = (WTF::StringImpl *)*((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v156)
  {
    if (*(_DWORD *)v156 == 2)
      WTF::StringImpl::destroy(v156, a2);
    else
      *(_DWORD *)v156 -= 2;
  }
  v157 = (WTF::StringImpl *)*((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v157)
  {
    if (*(_DWORD *)v157 == 2)
      WTF::StringImpl::destroy(v157, a2);
    else
      *(_DWORD *)v157 -= 2;
  }
  v158 = (WTF::StringImpl *)*((_QWORD *)this + 164);
  *((_QWORD *)this + 164) = 0;
  if (v158)
  {
    if (*(_DWORD *)v158 == 2)
      WTF::StringImpl::destroy(v158, a2);
    else
      *(_DWORD *)v158 -= 2;
  }
  v159 = (WTF::StringImpl *)*((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v159)
  {
    if (*(_DWORD *)v159 == 2)
      WTF::StringImpl::destroy(v159, a2);
    else
      *(_DWORD *)v159 -= 2;
  }
  v160 = (WTF::StringImpl *)*((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v160)
  {
    if (*(_DWORD *)v160 == 2)
      WTF::StringImpl::destroy(v160, a2);
    else
      *(_DWORD *)v160 -= 2;
  }
  v161 = (WTF::StringImpl *)*((_QWORD *)this + 161);
  *((_QWORD *)this + 161) = 0;
  if (v161)
  {
    if (*(_DWORD *)v161 == 2)
      WTF::StringImpl::destroy(v161, a2);
    else
      *(_DWORD *)v161 -= 2;
  }
  v162 = (WTF::StringImpl *)*((_QWORD *)this + 160);
  *((_QWORD *)this + 160) = 0;
  if (v162)
  {
    if (*(_DWORD *)v162 == 2)
      WTF::StringImpl::destroy(v162, a2);
    else
      *(_DWORD *)v162 -= 2;
  }
  v163 = (WTF::StringImpl *)*((_QWORD *)this + 159);
  *((_QWORD *)this + 159) = 0;
  if (v163)
  {
    if (*(_DWORD *)v163 == 2)
      WTF::StringImpl::destroy(v163, a2);
    else
      *(_DWORD *)v163 -= 2;
  }
  v164 = (WTF::StringImpl *)*((_QWORD *)this + 158);
  *((_QWORD *)this + 158) = 0;
  if (v164)
  {
    if (*(_DWORD *)v164 == 2)
      WTF::StringImpl::destroy(v164, a2);
    else
      *(_DWORD *)v164 -= 2;
  }
  v165 = (WTF::StringImpl *)*((_QWORD *)this + 157);
  *((_QWORD *)this + 157) = 0;
  if (v165)
  {
    if (*(_DWORD *)v165 == 2)
      WTF::StringImpl::destroy(v165, a2);
    else
      *(_DWORD *)v165 -= 2;
  }
  v166 = (WTF::StringImpl *)*((_QWORD *)this + 156);
  *((_QWORD *)this + 156) = 0;
  if (v166)
  {
    if (*(_DWORD *)v166 == 2)
      WTF::StringImpl::destroy(v166, a2);
    else
      *(_DWORD *)v166 -= 2;
  }
  v167 = (WTF::StringImpl *)*((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0;
  if (v167)
  {
    if (*(_DWORD *)v167 == 2)
      WTF::StringImpl::destroy(v167, a2);
    else
      *(_DWORD *)v167 -= 2;
  }
  v168 = (WTF::StringImpl *)*((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v168)
  {
    if (*(_DWORD *)v168 == 2)
      WTF::StringImpl::destroy(v168, a2);
    else
      *(_DWORD *)v168 -= 2;
  }
  v169 = (WTF::StringImpl *)*((_QWORD *)this + 153);
  *((_QWORD *)this + 153) = 0;
  if (v169)
  {
    if (*(_DWORD *)v169 == 2)
      WTF::StringImpl::destroy(v169, a2);
    else
      *(_DWORD *)v169 -= 2;
  }
  v170 = (WTF::StringImpl *)*((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
      WTF::StringImpl::destroy(v170, a2);
    else
      *(_DWORD *)v170 -= 2;
  }
  v171 = (WTF::StringImpl *)*((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
      WTF::StringImpl::destroy(v171, a2);
    else
      *(_DWORD *)v171 -= 2;
  }
  v172 = (WTF::StringImpl *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
      WTF::StringImpl::destroy(v172, a2);
    else
      *(_DWORD *)v172 -= 2;
  }
  v173 = (WTF::StringImpl *)*((_QWORD *)this + 149);
  *((_QWORD *)this + 149) = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
      WTF::StringImpl::destroy(v173, a2);
    else
      *(_DWORD *)v173 -= 2;
  }
  v174 = (WTF::StringImpl *)*((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v174)
  {
    if (*(_DWORD *)v174 == 2)
      WTF::StringImpl::destroy(v174, a2);
    else
      *(_DWORD *)v174 -= 2;
  }
  v175 = (WTF::StringImpl *)*((_QWORD *)this + 147);
  *((_QWORD *)this + 147) = 0;
  if (v175)
  {
    if (*(_DWORD *)v175 == 2)
      WTF::StringImpl::destroy(v175, a2);
    else
      *(_DWORD *)v175 -= 2;
  }
  v176 = (WTF::StringImpl *)*((_QWORD *)this + 146);
  *((_QWORD *)this + 146) = 0;
  if (v176)
  {
    if (*(_DWORD *)v176 == 2)
      WTF::StringImpl::destroy(v176, a2);
    else
      *(_DWORD *)v176 -= 2;
  }
  v177 = (WTF::StringImpl *)*((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0;
  if (v177)
  {
    if (*(_DWORD *)v177 == 2)
      WTF::StringImpl::destroy(v177, a2);
    else
      *(_DWORD *)v177 -= 2;
  }
  v178 = (WTF::StringImpl *)*((_QWORD *)this + 144);
  *((_QWORD *)this + 144) = 0;
  if (v178)
  {
    if (*(_DWORD *)v178 == 2)
      WTF::StringImpl::destroy(v178, a2);
    else
      *(_DWORD *)v178 -= 2;
  }
  v179 = (WTF::StringImpl *)*((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v179)
  {
    if (*(_DWORD *)v179 == 2)
      WTF::StringImpl::destroy(v179, a2);
    else
      *(_DWORD *)v179 -= 2;
  }
  v180 = (WTF::StringImpl *)*((_QWORD *)this + 142);
  *((_QWORD *)this + 142) = 0;
  if (v180)
  {
    if (*(_DWORD *)v180 == 2)
      WTF::StringImpl::destroy(v180, a2);
    else
      *(_DWORD *)v180 -= 2;
  }
  v181 = (WTF::StringImpl *)*((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v181)
  {
    if (*(_DWORD *)v181 == 2)
      WTF::StringImpl::destroy(v181, a2);
    else
      *(_DWORD *)v181 -= 2;
  }
  v182 = (WTF::StringImpl *)*((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v182)
  {
    if (*(_DWORD *)v182 == 2)
      WTF::StringImpl::destroy(v182, a2);
    else
      *(_DWORD *)v182 -= 2;
  }
  v183 = (WTF::StringImpl *)*((_QWORD *)this + 139);
  *((_QWORD *)this + 139) = 0;
  if (v183)
  {
    if (*(_DWORD *)v183 == 2)
      WTF::StringImpl::destroy(v183, a2);
    else
      *(_DWORD *)v183 -= 2;
  }
  v184 = (WTF::StringImpl *)*((_QWORD *)this + 138);
  *((_QWORD *)this + 138) = 0;
  if (v184)
  {
    if (*(_DWORD *)v184 == 2)
      WTF::StringImpl::destroy(v184, a2);
    else
      *(_DWORD *)v184 -= 2;
  }
  v185 = (WTF::StringImpl *)*((_QWORD *)this + 137);
  *((_QWORD *)this + 137) = 0;
  if (v185)
  {
    if (*(_DWORD *)v185 == 2)
      WTF::StringImpl::destroy(v185, a2);
    else
      *(_DWORD *)v185 -= 2;
  }
  v186 = (WTF::StringImpl *)*((_QWORD *)this + 136);
  *((_QWORD *)this + 136) = 0;
  if (v186)
  {
    if (*(_DWORD *)v186 == 2)
      WTF::StringImpl::destroy(v186, a2);
    else
      *(_DWORD *)v186 -= 2;
  }
  v187 = (WTF::StringImpl *)*((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = 0;
  if (v187)
  {
    if (*(_DWORD *)v187 == 2)
      WTF::StringImpl::destroy(v187, a2);
    else
      *(_DWORD *)v187 -= 2;
  }
  v188 = (WTF::StringImpl *)*((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = 0;
  if (v188)
  {
    if (*(_DWORD *)v188 == 2)
      WTF::StringImpl::destroy(v188, a2);
    else
      *(_DWORD *)v188 -= 2;
  }
  v189 = (WTF::StringImpl *)*((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = 0;
  if (v189)
  {
    if (*(_DWORD *)v189 == 2)
      WTF::StringImpl::destroy(v189, a2);
    else
      *(_DWORD *)v189 -= 2;
  }
  v190 = (WTF::StringImpl *)*((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v190)
  {
    if (*(_DWORD *)v190 == 2)
      WTF::StringImpl::destroy(v190, a2);
    else
      *(_DWORD *)v190 -= 2;
  }
  v191 = (WTF::StringImpl *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v191)
  {
    if (*(_DWORD *)v191 == 2)
      WTF::StringImpl::destroy(v191, a2);
    else
      *(_DWORD *)v191 -= 2;
  }
  v192 = (WTF::StringImpl *)*((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v192)
  {
    if (*(_DWORD *)v192 == 2)
      WTF::StringImpl::destroy(v192, a2);
    else
      *(_DWORD *)v192 -= 2;
  }
  v193 = (WTF::StringImpl *)*((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v193)
  {
    if (*(_DWORD *)v193 == 2)
      WTF::StringImpl::destroy(v193, a2);
    else
      *(_DWORD *)v193 -= 2;
  }
  v194 = (WTF::StringImpl *)*((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v194)
  {
    if (*(_DWORD *)v194 == 2)
      WTF::StringImpl::destroy(v194, a2);
    else
      *(_DWORD *)v194 -= 2;
  }
  v195 = (WTF::StringImpl *)*((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v195)
  {
    if (*(_DWORD *)v195 == 2)
      WTF::StringImpl::destroy(v195, a2);
    else
      *(_DWORD *)v195 -= 2;
  }
  v196 = (WTF::StringImpl *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0;
  if (v196)
  {
    if (*(_DWORD *)v196 == 2)
      WTF::StringImpl::destroy(v196, a2);
    else
      *(_DWORD *)v196 -= 2;
  }
  v197 = (WTF::StringImpl *)*((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0;
  if (v197)
  {
    if (*(_DWORD *)v197 == 2)
      WTF::StringImpl::destroy(v197, a2);
    else
      *(_DWORD *)v197 -= 2;
  }
  v198 = (WTF::StringImpl *)*((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v198)
  {
    if (*(_DWORD *)v198 == 2)
      WTF::StringImpl::destroy(v198, a2);
    else
      *(_DWORD *)v198 -= 2;
  }
  v199 = (WTF::StringImpl *)*((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v199)
  {
    if (*(_DWORD *)v199 == 2)
      WTF::StringImpl::destroy(v199, a2);
    else
      *(_DWORD *)v199 -= 2;
  }
  v200 = (WTF::StringImpl *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v200)
  {
    if (*(_DWORD *)v200 == 2)
      WTF::StringImpl::destroy(v200, a2);
    else
      *(_DWORD *)v200 -= 2;
  }
  v201 = (WTF::StringImpl *)*((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v201)
  {
    if (*(_DWORD *)v201 == 2)
      WTF::StringImpl::destroy(v201, a2);
    else
      *(_DWORD *)v201 -= 2;
  }
  v202 = (WTF::StringImpl *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v202)
  {
    if (*(_DWORD *)v202 == 2)
      WTF::StringImpl::destroy(v202, a2);
    else
      *(_DWORD *)v202 -= 2;
  }
  v203 = (WTF::StringImpl *)*((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v203)
  {
    if (*(_DWORD *)v203 == 2)
      WTF::StringImpl::destroy(v203, a2);
    else
      *(_DWORD *)v203 -= 2;
  }
  v204 = (WTF::StringImpl *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v204)
  {
    if (*(_DWORD *)v204 == 2)
      WTF::StringImpl::destroy(v204, a2);
    else
      *(_DWORD *)v204 -= 2;
  }
  v205 = (WTF::StringImpl *)*((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v205)
  {
    if (*(_DWORD *)v205 == 2)
      WTF::StringImpl::destroy(v205, a2);
    else
      *(_DWORD *)v205 -= 2;
  }
  v206 = (WTF::StringImpl *)*((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v206)
  {
    if (*(_DWORD *)v206 == 2)
      WTF::StringImpl::destroy(v206, a2);
    else
      *(_DWORD *)v206 -= 2;
  }
  v207 = (WTF::StringImpl *)*((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v207)
  {
    if (*(_DWORD *)v207 == 2)
      WTF::StringImpl::destroy(v207, a2);
    else
      *(_DWORD *)v207 -= 2;
  }
  v208 = (WTF::StringImpl *)*((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v208)
  {
    if (*(_DWORD *)v208 == 2)
      WTF::StringImpl::destroy(v208, a2);
    else
      *(_DWORD *)v208 -= 2;
  }
  v209 = (WTF::StringImpl *)*((_QWORD *)this + 113);
  *((_QWORD *)this + 113) = 0;
  if (v209)
  {
    if (*(_DWORD *)v209 == 2)
      WTF::StringImpl::destroy(v209, a2);
    else
      *(_DWORD *)v209 -= 2;
  }
  v210 = (WTF::StringImpl *)*((_QWORD *)this + 112);
  *((_QWORD *)this + 112) = 0;
  if (v210)
  {
    if (*(_DWORD *)v210 == 2)
      WTF::StringImpl::destroy(v210, a2);
    else
      *(_DWORD *)v210 -= 2;
  }
  v211 = (WTF::StringImpl *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v211)
  {
    if (*(_DWORD *)v211 == 2)
      WTF::StringImpl::destroy(v211, a2);
    else
      *(_DWORD *)v211 -= 2;
  }
  v212 = (WTF::StringImpl *)*((_QWORD *)this + 110);
  *((_QWORD *)this + 110) = 0;
  if (v212)
  {
    if (*(_DWORD *)v212 == 2)
      WTF::StringImpl::destroy(v212, a2);
    else
      *(_DWORD *)v212 -= 2;
  }
  v213 = (WTF::StringImpl *)*((_QWORD *)this + 109);
  *((_QWORD *)this + 109) = 0;
  if (v213)
  {
    if (*(_DWORD *)v213 == 2)
      WTF::StringImpl::destroy(v213, a2);
    else
      *(_DWORD *)v213 -= 2;
  }
  v214 = (WTF::StringImpl *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v214)
  {
    if (*(_DWORD *)v214 == 2)
      WTF::StringImpl::destroy(v214, a2);
    else
      *(_DWORD *)v214 -= 2;
  }
  v215 = (WTF::StringImpl *)*((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v215)
  {
    if (*(_DWORD *)v215 == 2)
      WTF::StringImpl::destroy(v215, a2);
    else
      *(_DWORD *)v215 -= 2;
  }
  v216 = (WTF::StringImpl *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v216)
  {
    if (*(_DWORD *)v216 == 2)
      WTF::StringImpl::destroy(v216, a2);
    else
      *(_DWORD *)v216 -= 2;
  }
  v217 = (WTF::StringImpl *)*((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v217)
  {
    if (*(_DWORD *)v217 == 2)
      WTF::StringImpl::destroy(v217, a2);
    else
      *(_DWORD *)v217 -= 2;
  }
  v218 = (WTF::StringImpl *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v218)
  {
    if (*(_DWORD *)v218 == 2)
      WTF::StringImpl::destroy(v218, a2);
    else
      *(_DWORD *)v218 -= 2;
  }
  v219 = (WTF::StringImpl *)*((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v219)
  {
    if (*(_DWORD *)v219 == 2)
      WTF::StringImpl::destroy(v219, a2);
    else
      *(_DWORD *)v219 -= 2;
  }
  v220 = (WTF::StringImpl *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v220)
  {
    if (*(_DWORD *)v220 == 2)
      WTF::StringImpl::destroy(v220, a2);
    else
      *(_DWORD *)v220 -= 2;
  }
  v221 = (WTF::StringImpl *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v221)
  {
    if (*(_DWORD *)v221 == 2)
      WTF::StringImpl::destroy(v221, a2);
    else
      *(_DWORD *)v221 -= 2;
  }
  v222 = (WTF::StringImpl *)*((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v222)
  {
    if (*(_DWORD *)v222 == 2)
      WTF::StringImpl::destroy(v222, a2);
    else
      *(_DWORD *)v222 -= 2;
  }
  v223 = (WTF::StringImpl *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v223)
  {
    if (*(_DWORD *)v223 == 2)
      WTF::StringImpl::destroy(v223, a2);
    else
      *(_DWORD *)v223 -= 2;
  }
  v224 = (WTF::StringImpl *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v224)
  {
    if (*(_DWORD *)v224 == 2)
      WTF::StringImpl::destroy(v224, a2);
    else
      *(_DWORD *)v224 -= 2;
  }
  v225 = (WTF::StringImpl *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v225)
  {
    if (*(_DWORD *)v225 == 2)
      WTF::StringImpl::destroy(v225, a2);
    else
      *(_DWORD *)v225 -= 2;
  }
  v226 = (WTF::StringImpl *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v226)
  {
    if (*(_DWORD *)v226 == 2)
      WTF::StringImpl::destroy(v226, a2);
    else
      *(_DWORD *)v226 -= 2;
  }
  v227 = (WTF::StringImpl *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v227)
  {
    if (*(_DWORD *)v227 == 2)
      WTF::StringImpl::destroy(v227, a2);
    else
      *(_DWORD *)v227 -= 2;
  }
  v228 = (WTF::StringImpl *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v228)
  {
    if (*(_DWORD *)v228 == 2)
      WTF::StringImpl::destroy(v228, a2);
    else
      *(_DWORD *)v228 -= 2;
  }
  v229 = (WTF::StringImpl *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v229)
  {
    if (*(_DWORD *)v229 == 2)
      WTF::StringImpl::destroy(v229, a2);
    else
      *(_DWORD *)v229 -= 2;
  }
  v230 = (WTF::StringImpl *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v230)
  {
    if (*(_DWORD *)v230 == 2)
      WTF::StringImpl::destroy(v230, a2);
    else
      *(_DWORD *)v230 -= 2;
  }
  v231 = (WTF::StringImpl *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v231)
  {
    if (*(_DWORD *)v231 == 2)
      WTF::StringImpl::destroy(v231, a2);
    else
      *(_DWORD *)v231 -= 2;
  }
  v232 = (WTF::StringImpl *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v232)
  {
    if (*(_DWORD *)v232 == 2)
      WTF::StringImpl::destroy(v232, a2);
    else
      *(_DWORD *)v232 -= 2;
  }
  v233 = (WTF::StringImpl *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v233)
  {
    if (*(_DWORD *)v233 == 2)
      WTF::StringImpl::destroy(v233, a2);
    else
      *(_DWORD *)v233 -= 2;
  }
  v234 = (WTF::StringImpl *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v234)
  {
    if (*(_DWORD *)v234 == 2)
      WTF::StringImpl::destroy(v234, a2);
    else
      *(_DWORD *)v234 -= 2;
  }
  v235 = (WTF::StringImpl *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v235)
  {
    if (*(_DWORD *)v235 == 2)
      WTF::StringImpl::destroy(v235, a2);
    else
      *(_DWORD *)v235 -= 2;
  }
  v236 = (WTF::StringImpl *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v236)
  {
    if (*(_DWORD *)v236 == 2)
      WTF::StringImpl::destroy(v236, a2);
    else
      *(_DWORD *)v236 -= 2;
  }
  v237 = (WTF::StringImpl *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v237)
  {
    if (*(_DWORD *)v237 == 2)
      WTF::StringImpl::destroy(v237, a2);
    else
      *(_DWORD *)v237 -= 2;
  }
  v238 = (WTF::StringImpl *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v238)
  {
    if (*(_DWORD *)v238 == 2)
      WTF::StringImpl::destroy(v238, a2);
    else
      *(_DWORD *)v238 -= 2;
  }
  v239 = (WTF::StringImpl *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v239)
  {
    if (*(_DWORD *)v239 == 2)
      WTF::StringImpl::destroy(v239, a2);
    else
      *(_DWORD *)v239 -= 2;
  }
  v240 = (WTF::StringImpl *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v240)
  {
    if (*(_DWORD *)v240 == 2)
      WTF::StringImpl::destroy(v240, a2);
    else
      *(_DWORD *)v240 -= 2;
  }
  v241 = (WTF::StringImpl *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v241)
  {
    if (*(_DWORD *)v241 == 2)
      WTF::StringImpl::destroy(v241, a2);
    else
      *(_DWORD *)v241 -= 2;
  }
  v242 = (WTF::StringImpl *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v242)
  {
    if (*(_DWORD *)v242 == 2)
      WTF::StringImpl::destroy(v242, a2);
    else
      *(_DWORD *)v242 -= 2;
  }
  v243 = (WTF::StringImpl *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v243)
  {
    if (*(_DWORD *)v243 == 2)
      WTF::StringImpl::destroy(v243, a2);
    else
      *(_DWORD *)v243 -= 2;
  }
  v244 = (WTF::StringImpl *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v244)
  {
    if (*(_DWORD *)v244 == 2)
      WTF::StringImpl::destroy(v244, a2);
    else
      *(_DWORD *)v244 -= 2;
  }
  v245 = (WTF::StringImpl *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v245)
  {
    if (*(_DWORD *)v245 == 2)
      WTF::StringImpl::destroy(v245, a2);
    else
      *(_DWORD *)v245 -= 2;
  }
  v246 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v246)
  {
    if (*(_DWORD *)v246 == 2)
      WTF::StringImpl::destroy(v246, a2);
    else
      *(_DWORD *)v246 -= 2;
  }
  v247 = (WTF::StringImpl *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v247)
  {
    if (*(_DWORD *)v247 == 2)
      WTF::StringImpl::destroy(v247, a2);
    else
      *(_DWORD *)v247 -= 2;
  }
  v248 = (WTF::StringImpl *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v248)
  {
    if (*(_DWORD *)v248 == 2)
      WTF::StringImpl::destroy(v248, a2);
    else
      *(_DWORD *)v248 -= 2;
  }
  v249 = (WTF::StringImpl *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v249)
  {
    if (*(_DWORD *)v249 == 2)
      WTF::StringImpl::destroy(v249, a2);
    else
      *(_DWORD *)v249 -= 2;
  }
  v250 = (WTF::StringImpl *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v250)
  {
    if (*(_DWORD *)v250 == 2)
      WTF::StringImpl::destroy(v250, a2);
    else
      *(_DWORD *)v250 -= 2;
  }
  v251 = (WTF::StringImpl *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v251)
  {
    if (*(_DWORD *)v251 == 2)
      WTF::StringImpl::destroy(v251, a2);
    else
      *(_DWORD *)v251 -= 2;
  }
  v252 = (WTF::StringImpl *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v252)
  {
    if (*(_DWORD *)v252 == 2)
      WTF::StringImpl::destroy(v252, a2);
    else
      *(_DWORD *)v252 -= 2;
  }
  v253 = (WTF::StringImpl *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v253)
  {
    if (*(_DWORD *)v253 == 2)
      WTF::StringImpl::destroy(v253, a2);
    else
      *(_DWORD *)v253 -= 2;
  }
  v254 = (WTF::StringImpl *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v254)
  {
    if (*(_DWORD *)v254 == 2)
      WTF::StringImpl::destroy(v254, a2);
    else
      *(_DWORD *)v254 -= 2;
  }
  v255 = (WTF::StringImpl *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v255)
  {
    if (*(_DWORD *)v255 == 2)
      WTF::StringImpl::destroy(v255, a2);
    else
      *(_DWORD *)v255 -= 2;
  }
  v256 = (WTF::StringImpl *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v256)
  {
    if (*(_DWORD *)v256 == 2)
      WTF::StringImpl::destroy(v256, a2);
    else
      *(_DWORD *)v256 -= 2;
  }
  v257 = (WTF::StringImpl *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v257)
  {
    if (*(_DWORD *)v257 == 2)
      WTF::StringImpl::destroy(v257, a2);
    else
      *(_DWORD *)v257 -= 2;
  }
  v258 = (WTF::StringImpl *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v258)
  {
    if (*(_DWORD *)v258 == 2)
      WTF::StringImpl::destroy(v258, a2);
    else
      *(_DWORD *)v258 -= 2;
  }
  v259 = (WTF::StringImpl *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v259)
  {
    if (*(_DWORD *)v259 == 2)
      WTF::StringImpl::destroy(v259, a2);
    else
      *(_DWORD *)v259 -= 2;
  }
  v260 = (WTF::StringImpl *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v260)
  {
    if (*(_DWORD *)v260 == 2)
      WTF::StringImpl::destroy(v260, a2);
    else
      *(_DWORD *)v260 -= 2;
  }
  v261 = (WTF::StringImpl *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v261)
  {
    if (*(_DWORD *)v261 == 2)
      WTF::StringImpl::destroy(v261, a2);
    else
      *(_DWORD *)v261 -= 2;
  }
  v262 = (WTF::StringImpl *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v262)
  {
    if (*(_DWORD *)v262 == 2)
      WTF::StringImpl::destroy(v262, a2);
    else
      *(_DWORD *)v262 -= 2;
  }
  v263 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v263)
  {
    if (*(_DWORD *)v263 == 2)
      WTF::StringImpl::destroy(v263, a2);
    else
      *(_DWORD *)v263 -= 2;
  }
  v264 = (WTF::StringImpl *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v264)
  {
    if (*(_DWORD *)v264 == 2)
      WTF::StringImpl::destroy(v264, a2);
    else
      *(_DWORD *)v264 -= 2;
  }
  v265 = (WTF::StringImpl *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v265)
  {
    if (*(_DWORD *)v265 == 2)
      WTF::StringImpl::destroy(v265, a2);
    else
      *(_DWORD *)v265 -= 2;
  }
  v266 = (WTF::StringImpl *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v266)
  {
    if (*(_DWORD *)v266 == 2)
      WTF::StringImpl::destroy(v266, a2);
    else
      *(_DWORD *)v266 -= 2;
  }
  v267 = (WTF::StringImpl *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v267)
  {
    if (*(_DWORD *)v267 == 2)
      WTF::StringImpl::destroy(v267, a2);
    else
      *(_DWORD *)v267 -= 2;
  }
  v268 = (WTF::StringImpl *)*((_QWORD *)this + 54);
  *((_QWORD *)this + 54) = 0;
  if (v268)
  {
    if (*(_DWORD *)v268 == 2)
      WTF::StringImpl::destroy(v268, a2);
    else
      *(_DWORD *)v268 -= 2;
  }
  v269 = (WTF::StringImpl *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v269)
  {
    if (*(_DWORD *)v269 == 2)
      WTF::StringImpl::destroy(v269, a2);
    else
      *(_DWORD *)v269 -= 2;
  }
  v270 = (WTF::StringImpl *)*((_QWORD *)this + 52);
  *((_QWORD *)this + 52) = 0;
  if (v270)
  {
    if (*(_DWORD *)v270 == 2)
      WTF::StringImpl::destroy(v270, a2);
    else
      *(_DWORD *)v270 -= 2;
  }
  v271 = (WTF::StringImpl *)*((_QWORD *)this + 51);
  *((_QWORD *)this + 51) = 0;
  if (v271)
  {
    if (*(_DWORD *)v271 == 2)
      WTF::StringImpl::destroy(v271, a2);
    else
      *(_DWORD *)v271 -= 2;
  }
  v272 = (WTF::StringImpl *)*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v272)
  {
    if (*(_DWORD *)v272 == 2)
      WTF::StringImpl::destroy(v272, a2);
    else
      *(_DWORD *)v272 -= 2;
  }
  v273 = (WTF::StringImpl *)*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v273)
  {
    if (*(_DWORD *)v273 == 2)
      WTF::StringImpl::destroy(v273, a2);
    else
      *(_DWORD *)v273 -= 2;
  }
  v274 = (WTF::StringImpl *)*((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v274)
  {
    if (*(_DWORD *)v274 == 2)
      WTF::StringImpl::destroy(v274, a2);
    else
      *(_DWORD *)v274 -= 2;
  }
  v275 = (WTF::StringImpl *)*((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v275)
  {
    if (*(_DWORD *)v275 == 2)
      WTF::StringImpl::destroy(v275, a2);
    else
      *(_DWORD *)v275 -= 2;
  }
  v276 = (WTF::StringImpl *)*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v276)
  {
    if (*(_DWORD *)v276 == 2)
      WTF::StringImpl::destroy(v276, a2);
    else
      *(_DWORD *)v276 -= 2;
  }
  v277 = (WTF::StringImpl *)*((_QWORD *)this + 45);
  *((_QWORD *)this + 45) = 0;
  if (v277)
  {
    if (*(_DWORD *)v277 == 2)
      WTF::StringImpl::destroy(v277, a2);
    else
      *(_DWORD *)v277 -= 2;
  }
  v278 = (WTF::StringImpl *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v278)
  {
    if (*(_DWORD *)v278 == 2)
      WTF::StringImpl::destroy(v278, a2);
    else
      *(_DWORD *)v278 -= 2;
  }
  v279 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v279)
  {
    if (*(_DWORD *)v279 == 2)
      WTF::StringImpl::destroy(v279, a2);
    else
      *(_DWORD *)v279 -= 2;
  }
  v280 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v280)
  {
    if (*(_DWORD *)v280 == 2)
      WTF::StringImpl::destroy(v280, a2);
    else
      *(_DWORD *)v280 -= 2;
  }
  v281 = (WTF::StringImpl *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v281)
  {
    if (*(_DWORD *)v281 == 2)
      WTF::StringImpl::destroy(v281, a2);
    else
      *(_DWORD *)v281 -= 2;
  }
  v282 = (WTF::StringImpl *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v282)
  {
    if (*(_DWORD *)v282 == 2)
      WTF::StringImpl::destroy(v282, a2);
    else
      *(_DWORD *)v282 -= 2;
  }
  v283 = (WTF::StringImpl *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v283)
  {
    if (*(_DWORD *)v283 == 2)
      WTF::StringImpl::destroy(v283, a2);
    else
      *(_DWORD *)v283 -= 2;
  }
  v284 = (WTF::StringImpl *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v284)
  {
    if (*(_DWORD *)v284 == 2)
      WTF::StringImpl::destroy(v284, a2);
    else
      *(_DWORD *)v284 -= 2;
  }
  v285 = (WTF::StringImpl *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v285)
  {
    if (*(_DWORD *)v285 == 2)
      WTF::StringImpl::destroy(v285, a2);
    else
      *(_DWORD *)v285 -= 2;
  }
  v286 = (WTF::StringImpl *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v286)
  {
    if (*(_DWORD *)v286 == 2)
      WTF::StringImpl::destroy(v286, a2);
    else
      *(_DWORD *)v286 -= 2;
  }
  v287 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v287)
  {
    if (*(_DWORD *)v287 == 2)
      WTF::StringImpl::destroy(v287, a2);
    else
      *(_DWORD *)v287 -= 2;
  }
  v288 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v288)
  {
    if (*(_DWORD *)v288 == 2)
      WTF::StringImpl::destroy(v288, a2);
    else
      *(_DWORD *)v288 -= 2;
  }
  v289 = (WTF::StringImpl *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v289)
  {
    if (*(_DWORD *)v289 == 2)
      WTF::StringImpl::destroy(v289, a2);
    else
      *(_DWORD *)v289 -= 2;
  }
  v290 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v290)
  {
    if (*(_DWORD *)v290 == 2)
      WTF::StringImpl::destroy(v290, a2);
    else
      *(_DWORD *)v290 -= 2;
  }
  v291 = (WTF::StringImpl *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v291)
  {
    if (*(_DWORD *)v291 == 2)
      WTF::StringImpl::destroy(v291, a2);
    else
      *(_DWORD *)v291 -= 2;
  }
  v292 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v292)
  {
    if (*(_DWORD *)v292 == 2)
      WTF::StringImpl::destroy(v292, a2);
    else
      *(_DWORD *)v292 -= 2;
  }
  v293 = (WTF::StringImpl *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v293)
  {
    if (*(_DWORD *)v293 == 2)
      WTF::StringImpl::destroy(v293, a2);
    else
      *(_DWORD *)v293 -= 2;
  }
  v294 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v294)
  {
    if (*(_DWORD *)v294 == 2)
      WTF::StringImpl::destroy(v294, a2);
    else
      *(_DWORD *)v294 -= 2;
  }
  v295 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v295)
  {
    if (*(_DWORD *)v295 == 2)
      WTF::StringImpl::destroy(v295, a2);
    else
      *(_DWORD *)v295 -= 2;
  }
  v296 = (WTF::StringImpl *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v296)
  {
    if (*(_DWORD *)v296 == 2)
      WTF::StringImpl::destroy(v296, a2);
    else
      *(_DWORD *)v296 -= 2;
  }
  v297 = (WTF::StringImpl *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v297)
  {
    if (*(_DWORD *)v297 == 2)
      WTF::StringImpl::destroy(v297, a2);
    else
      *(_DWORD *)v297 -= 2;
  }
  v298 = (WTF::StringImpl *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v298)
  {
    if (*(_DWORD *)v298 == 2)
      WTF::StringImpl::destroy(v298, a2);
    else
      *(_DWORD *)v298 -= 2;
  }
  v299 = (WTF::StringImpl *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v299)
  {
    if (*(_DWORD *)v299 == 2)
      WTF::StringImpl::destroy(v299, a2);
    else
      *(_DWORD *)v299 -= 2;
  }
  v300 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v300)
  {
    if (*(_DWORD *)v300 == 2)
      WTF::StringImpl::destroy(v300, a2);
    else
      *(_DWORD *)v300 -= 2;
  }
  v301 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v301)
  {
    if (*(_DWORD *)v301 == 2)
      WTF::StringImpl::destroy(v301, a2);
    else
      *(_DWORD *)v301 -= 2;
  }
  v302 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v302)
  {
    if (*(_DWORD *)v302 == 2)
      WTF::StringImpl::destroy(v302, a2);
    else
      *(_DWORD *)v302 -= 2;
  }
  v303 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v303)
  {
    if (*(_DWORD *)v303 == 2)
      WTF::StringImpl::destroy(v303, a2);
    else
      *(_DWORD *)v303 -= 2;
  }
  v304 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v304)
  {
    if (*(_DWORD *)v304 == 2)
      WTF::StringImpl::destroy(v304, a2);
    else
      *(_DWORD *)v304 -= 2;
  }
  v305 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v305)
  {
    if (*(_DWORD *)v305 == 2)
      WTF::StringImpl::destroy(v305, a2);
    else
      *(_DWORD *)v305 -= 2;
  }
  v306 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v306)
  {
    if (*(_DWORD *)v306 == 2)
      WTF::StringImpl::destroy(v306, a2);
    else
      *(_DWORD *)v306 -= 2;
  }
  v307 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v307)
  {
    if (*(_DWORD *)v307 == 2)
      WTF::StringImpl::destroy(v307, a2);
    else
      *(_DWORD *)v307 -= 2;
  }
  v308 = (WTF::StringImpl *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v308)
  {
    if (*(_DWORD *)v308 == 2)
      WTF::StringImpl::destroy(v308, a2);
    else
      *(_DWORD *)v308 -= 2;
  }
  v309 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v309)
  {
    if (*(_DWORD *)v309 == 2)
      WTF::StringImpl::destroy(v309, a2);
    else
      *(_DWORD *)v309 -= 2;
  }
  v310 = (WTF::StringImpl *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v310)
  {
    if (*(_DWORD *)v310 == 2)
      WTF::StringImpl::destroy(v310, a2);
    else
      *(_DWORD *)v310 -= 2;
  }
  v311 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v311)
  {
    if (*(_DWORD *)v311 == 2)
      WTF::StringImpl::destroy(v311, a2);
    else
      *(_DWORD *)v311 -= 2;
  }
  v312 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v312)
  {
    if (*(_DWORD *)v312 == 2)
      WTF::StringImpl::destroy(v312, a2);
    else
      *(_DWORD *)v312 -= 2;
  }
  v313 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v313)
  {
    if (*(_DWORD *)v313 == 2)
      WTF::StringImpl::destroy(v313, a2);
    else
      *(_DWORD *)v313 -= 2;
  }
  v314 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v314)
  {
    if (*(_DWORD *)v314 == 2)
      WTF::StringImpl::destroy(v314, a2);
    else
      *(_DWORD *)v314 -= 2;
  }
  v315 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v315)
  {
    if (*(_DWORD *)v315 == 2)
      WTF::StringImpl::destroy(v315, a2);
    else
      *(_DWORD *)v315 -= 2;
  }
  v316 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v316)
  {
    if (*(_DWORD *)v316 == 2)
      WTF::StringImpl::destroy(v316, a2);
    else
      *(_DWORD *)v316 -= 2;
  }
  v317 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v317)
  {
    if (*(_DWORD *)v317 == 2)
      WTF::StringImpl::destroy(v317, a2);
    else
      *(_DWORD *)v317 -= 2;
  }
  v318 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v318)
  {
    if (*(_DWORD *)v318 == 2)
      WTF::StringImpl::destroy(v318, a2);
    else
      *(_DWORD *)v318 -= 2;
  }
  v319 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v319)
  {
    if (*(_DWORD *)v319 == 2)
      WTF::StringImpl::destroy(v319, a2);
    else
      *(_DWORD *)v319 -= 2;
  }
  v320 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v320)
  {
    if (*(_DWORD *)v320 == 2)
      WTF::StringImpl::destroy(v320, a2);
    else
      *(_DWORD *)v320 -= 2;
  }
  v321 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v321)
  {
    if (*(_DWORD *)v321 == 2)
      WTF::StringImpl::destroy(v321, a2);
    else
      *(_DWORD *)v321 -= 2;
  }
  v322 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v322)
  {
    if (*(_DWORD *)v322 == 2)
      WTF::StringImpl::destroy(v322, a2);
    else
      *(_DWORD *)v322 -= 2;
  }
}

void WebCore::CachedResourceRequestInitiatorTypes::~CachedResourceRequestInitiatorTypes(WebCore::CachedResourceRequestInitiatorTypes *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
}

unsigned int *std::__pop_heap[abi:sn180100]<std::_ClassicAlgPolicy,WebCore::TimerHeapLessThanFunction,WebCore::TimerHeapIterator>(unsigned int *result, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v4;
  unint64_t v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  double v17;
  double v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int *v33;
  double v34;
  unsigned int *v35;
  double v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int **v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  double v44;
  double v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int *v48;
  uint64_t *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t *v53;

  if (a4 <= 0)
  {
    __break(1u);
    goto LABEL_68;
  }
  if (a4 == 1)
    return result;
  v4 = result;
  v7 = *(unsigned int **)result;
  if (*(_QWORD *)result)
  {
    do
      v10 = __ldaxr(v7);
    while (__stlxr(v10 + 1, v7));
  }
  v11 = 0;
  v12 = (unint64_t)(a4 - 2) >> 1;
  v6 = (unsigned int **)result;
  do
  {
    v13 = (unint64_t)v6;
    v6 += v11 + 1;
    v14 = 2 * v11;
    v11 = (2 * v11) | 1;
    v15 = v14 + 2;
    if (v15 < a4)
    {
      v16 = v6[1];
      v17 = *((double *)*v6 + 1);
      v18 = *((double *)v16 + 1);
      if (v18 == v17)
      {
        if ((*v6)[4] - v16[4] > 0x7FFFFFFE)
          goto LABEL_10;
LABEL_9:
        ++v6;
        v11 = v15;
        goto LABEL_10;
      }
      if (v18 < v17)
        goto LABEL_9;
    }
LABEL_10:
    v19 = *v6;
    *v6 = 0;
    v20 = *(unsigned int **)v13;
    *(_QWORD *)v13 = v19;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        bmalloc::api::isoDeallocate((bmalloc::api *)v20, a2);
      }
    }
    v23 = *(_QWORD *)(*(_QWORD *)v13 + 24);
    if (v13 >= *(_QWORD *)v23 && v13 < *(_QWORD *)v23 + 8 * (unint64_t)*(unsigned int *)(v23 + 12))
      *(_DWORD *)(*(_QWORD *)v13 + 40) = (v13 - *(_QWORD *)v23) >> 3;
  }
  while (v11 <= v12);
  v5 = (unint64_t)a2 - 8;
  if (v6 != (unsigned int **)v5)
  {
    v24 = *(unsigned int **)v5;
    *(_QWORD *)v5 = 0;
    result = *v6;
    *v6 = v24;
    if (!result)
      goto LABEL_25;
    do
    {
      v25 = __ldaxr(result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, result));
    if (v26)
    {
LABEL_25:
      v27 = *((_QWORD *)*v6 + 3);
      if ((unint64_t)v6 >= *(_QWORD *)v27
        && (unint64_t)v6 < *(_QWORD *)v27 + 8 * (unint64_t)*(unsigned int *)(v27 + 12))
      {
        (*v6)[10] = ((unint64_t)v6 - *(_QWORD *)v27) >> 3;
      }
      result = *(unsigned int **)v5;
      *(_QWORD *)v5 = v7;
      if (result)
      {
        do
        {
          v28 = __ldaxr(result);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, result));
        if (!v29)
        {
          atomic_store(1u, result);
          result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
        }
      }
      v30 = *(_QWORD *)(*(_QWORD *)v5 + 24);
      if (v5 >= *(_QWORD *)v30 && v5 < *(_QWORD *)v30 + 8 * (unint64_t)*(unsigned int *)(v30 + 12))
        *(_DWORD *)(*(_QWORD *)v5 + 40) = (v5 - *(_QWORD *)v30) >> 3;
      v31 = (char *)(v6 + 1) - (char *)v4;
      if (v31 >= 9)
      {
        v32 = (((unint64_t)v31 >> 3) - 2) >> 1;
        v33 = &v4[2 * v32];
        v34 = *(double *)(*(_QWORD *)v33 + 8);
        v35 = *v6;
        v36 = *((double *)*v6 + 1);
        if (v36 == v34)
        {
          if (*(_DWORD *)(*(_QWORD *)v33 + 16) - v35[4] <= 0x7FFFFFFE)
            goto LABEL_38;
        }
        else if (v36 < v34)
        {
          do
LABEL_38:
            v37 = __ldaxr(v35);
          while (__stlxr(v37 + 1, v35));
          v38 = *(unsigned int **)v33;
          while (1)
          {
            v39 = (unsigned int **)v33;
            *(_QWORD *)v33 = 0;
            v40 = *v6;
            *v6 = v38;
            if (v40)
            {
              do
              {
                v41 = __ldaxr(v40);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, v40));
              if (!v42)
              {
                atomic_store(1u, v40);
                bmalloc::api::isoDeallocate((bmalloc::api *)v40, a2);
              }
            }
            v43 = *((_QWORD *)*v6 + 3);
            if ((unint64_t)v6 >= *(_QWORD *)v43
              && (unint64_t)v6 < *(_QWORD *)v43 + 8 * (unint64_t)*(unsigned int *)(v43 + 12))
            {
              (*v6)[10] = ((unint64_t)v6 - *(_QWORD *)v43) >> 3;
            }
            if (!v32)
              break;
            v32 = (v32 - 1) >> 1;
            v33 = &v4[2 * v32];
            v38 = *(unsigned int **)v33;
            v44 = *(double *)(*(_QWORD *)v33 + 8);
            v45 = *((double *)v35 + 1);
            if (v45 == v44)
            {
              v6 = v39;
              if (v38[4] - v35[4] >= 0x7FFFFFFF)
                break;
            }
            else
            {
              v6 = v39;
              if (v45 >= v44)
                break;
            }
          }
          result = *v39;
          *v39 = v35;
          if (result)
          {
            do
            {
              v46 = __ldaxr(result);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, result));
            if (!v47)
            {
              atomic_store(1u, result);
              result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
            }
          }
          v48 = *v39;
          v49 = (uint64_t *)*((_QWORD *)*v39 + 3);
          v50 = *v49;
          if ((unint64_t)v39 >= *v49
            && (unint64_t)v39 < v50 + 8 * (unint64_t)*((unsigned int *)v49 + 3))
          {
            v6 = v39;
            goto LABEL_65;
          }
        }
      }
      return result;
    }
LABEL_68:
    atomic_store(1u, result);
    bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
    goto LABEL_25;
  }
  result = *v6;
  *v6 = v7;
  if (result)
  {
    do
    {
      v51 = __ldaxr(result);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, result));
    if (!v52)
    {
      atomic_store(1u, result);
      result = (unsigned int *)bmalloc::api::isoDeallocate((bmalloc::api *)result, a2);
    }
  }
  v48 = *v6;
  v53 = (uint64_t *)*((_QWORD *)*v6 + 3);
  v50 = *v53;
  if ((unint64_t)v6 >= *v53 && (unint64_t)v6 < v50 + 8 * (unint64_t)*((unsigned int *)v53 + 3))
LABEL_65:
    v48[10] = ((unint64_t)v6 - v50) >> 3;
  return result;
}

void **WTF::Vector<WTF::RefPtr<WebCore::ThreadTimerHeapItem,WTF::RawPtrTraits<WebCore::ThreadTimerHeapItem>,WTF::DefaultRefDerefTraits<WebCore::ThreadTimerHeapItem>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(void **result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = *((unsigned int *)result + 2);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *result;
      v8 = *((unsigned int *)result + 3);
      v9 = (void *)WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v6 + 2) = v5;
      *v6 = v9;
      result = (void **)memcpy(v9, v7, 8 * v8);
      if (v7)
      {
        if (*v6 == v7)
        {
          *v6 = 0;
          *((_DWORD *)v6 + 2) = 0;
        }
        return (void **)WTF::fastFree((WTF *)v7, v10);
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoDecoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoDecoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoEncoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN7WebCore12VideoEncoderEEENS8_6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WTF::Persistence::Coder<WebCore::AppHighlightRangeData>::encodeForPersistence(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;

  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Encoder::operator<<();
  if (*(_DWORD *)(a2 + 28))
  {
    v4 = 0;
    v5 = 24;
    do
    {
      v6 = (unsigned int *)(*(_QWORD *)(a2 + 16) + v5);
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      MEMORY[0x19AEA46E0](a1, *v6);
      ++v4;
      v5 += 32;
    }
    while (v4 < *(unsigned int *)(a2 + 28));
  }
  MEMORY[0x19AEA46E0](a1, *(unsigned int *)(a2 + 32));
  WTF::Persistence::Encoder::operator<<();
  if (*(_DWORD *)(a2 + 52))
  {
    v7 = 0;
    v8 = 24;
    do
    {
      v9 = (unsigned int *)(*(_QWORD *)(a2 + 40) + v8);
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      MEMORY[0x19AEA46E0](a1, *v9);
      ++v7;
      v8 += 32;
    }
    while (v7 < *(unsigned int *)(a2 + 52));
  }
  JUMPOUT(0x19AEA46E0);
}

uint64_t WTF::Persistence::Coder<WebCore::AppHighlightRangeData>::decodeForPersistence@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[64] = 0;
  return result;
}

uint64_t WTF::Persistence::Decoder::operator>><WTF::Vector<WebCore::AppHighlightRangeData::NodePathComponent,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  char v7;
  uint64_t v8;
  char v9;

  LOBYTE(v8) = 0;
  v9 = 0;
  WTF::Persistence::Decoder::operator>>();
  LOBYTE(v6) = 0;
  v7 = 0;
  if (*(_BYTE *)(a2 + 16))
  {
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((unsigned int *)a2, v4);
    *(_BYTE *)(a2 + 16) = 0;
  }
  return a1;
}

uint64_t WTF::Persistence::Coder<WebCore::ImportedScriptAttributes>::encodeForPersistence()
{
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  return WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
}

void WTF::Persistence::Coder<WebCore::ImportedScriptAttributes>::decodeForPersistence(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  __int128 v12;
  __int128 v13;
  char v14;
  WTF::StringImpl *v15;
  char v16;
  char v17;

  LOBYTE(v11) = 0;
  v14 = 0;
  WTF::Persistence::Coder<WTF::URL>::decodeForPersistence();
  std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>((uint64_t)&v11, (uint64_t *)&v15);
  if (v17)
  {
    v5 = v15;
    v15 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  if (!v14)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    return;
  }
  LOBYTE(v15) = 0;
  v16 = 0;
  WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v15);
  if (v16)
  {
    if (!v14)
    {
      __break(1u);
      return;
    }
    v7 = v11;
    v11 = 0;
    v8 = v15;
    *(_QWORD *)a2 = v7;
    v9 = v12;
    *(_OWORD *)(a2 + 8) = v12;
    LODWORD(v12) = v9 & 0xFFFFFFFE;
    *(_OWORD *)(a2 + 24) = v13;
    *(_QWORD *)(a2 + 40) = v8;
    *(_BYTE *)(a2 + 48) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
    if (!v14)
      return;
  }
  v10 = v11;
  v11 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v6);
    else
      *(_DWORD *)v10 -= 2;
  }
}

uint64_t WTF::Persistence::Coder<WebCore::ImageResource>::encodeForPersistence()
{
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  return WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
}

WTF::StringImpl *WTF::Persistence::Coder<WebCore::ImageResource>::decodeForPersistence@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  WTF::StringImpl *v12;
  char v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *v16;
  char v17;

  LOBYTE(v16) = 0;
  v17 = 0;
  result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v16);
  if (!v17)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    return result;
  }
  LOBYTE(v14) = 0;
  v15 = 0;
  result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v14);
  if (v15)
  {
    LOBYTE(v12) = 0;
    v13 = 0;
    result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v12);
    if (v13)
    {
      LOBYTE(v10) = 0;
      v11 = 0;
      result = (WTF::StringImpl *)WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v10);
      if (v11)
      {
        if (!v17 || (v6 = v16, v16 = 0, !v15) || (v7 = v14, v14 = 0, !v13))
        {
          __break(1u);
          return result;
        }
        v8 = v12;
        v12 = 0;
        v9 = v10;
        *(_QWORD *)a2 = v6;
        *(_QWORD *)(a2 + 8) = v7;
        *(_QWORD *)(a2 + 16) = v8;
        *(_QWORD *)(a2 + 24) = v9;
        *(_BYTE *)(a2 + 32) = 1;
        goto LABEL_13;
      }
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
      if (v13)
      {
LABEL_13:
        result = v12;
        v12 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 32) = 0;
    }
    if (v15)
    {
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
    goto LABEL_20;
  }
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 32) = 0;
LABEL_20:
  if (v17)
  {
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::Persistence::Coder<WebCore::ResourceRequest>::encodeForPersistence(uint64_t a1, WebCore::ResourceRequest *this)
{
  uint64_t v4;
  unint64_t v5;

  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  MEMORY[0x19AEA46C8](a1, *((double *)this + 10));
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WTF::Persistence::Coder<WebCore::HTTPHeaderMap>::encodeForPersistence(a1, (uint64_t)this + 96);
  WTF::Persistence::Encoder::operator<<();
  if (*((_DWORD *)this + 35))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      ++v5;
      v4 += 8;
    }
    while (v5 < *((unsigned int *)this + 35));
  }
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WTF::Persistence::Encoder::operator<<();
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  MEMORY[0x19AEA46BC](a1, (*((unsigned __int8 *)this + 148) >> 1) & 1);
  WTF::Persistence::Encoder::operator<<();
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  MEMORY[0x19AEA46BC](a1, *((_BYTE *)this + 148) & 1);
  if ((*((_BYTE *)this + 184) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest(this);
    *((_BYTE *)this + 184) |= 1u;
  }
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  JUMPOUT(0x19AEA46BCLL);
}

void WTF::Persistence::Coder<WebCore::ResourceRequest>::decodeForPersistence(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  char v9;
  int v10;
  char v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  double v20;
  const WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  void *v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  CFTypeRef v38;
  WTF *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  _QWORD v49[4];
  WTF::StringImpl *v50[5];
  WTF::StringImpl *v51;
  __int128 v52;
  __int128 v53;
  WTF::StringImpl *v54;
  __int128 v55;
  __int128 v56;
  double v57;
  WTF::StringImpl *v58;
  unsigned int v59[8];
  __int128 v60;
  int v61;
  char v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  char v67;
  CFTypeRef cf;
  __int16 v69;
  __int16 v70;
  __int16 v71;
  WTF *v72;
  int v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  const WTF::StringImpl *v81;
  char v82;
  WTF::StringImpl *v83;
  char v84;
  double v85;
  char v86;
  WTF::StringImpl *v87;
  __int128 v88;
  __int128 v89;
  char v90;
  const WTF::StringImpl *v91;
  __int128 v92;
  __int128 v93;

  LOBYTE(v87) = 0;
  v90 = 0;
  WTF::Persistence::Coder<WTF::URL>::decodeForPersistence();
  std::__optional_storage_base<WTF::URL,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::URL,false>>((uint64_t)&v87, (uint64_t *)&v51);
  if ((_BYTE)v54)
  {
    v5 = v51;
    v51 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  if (v90)
  {
    LOBYTE(v85) = 0;
    v86 = 0;
    WTF::Persistence::Decoder::operator>>();
    if (v86
      && (LOBYTE(v83) = 0, v84 = 0, WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v83), v84))
    {
      LOBYTE(v81) = 0;
      v82 = 0;
      WTF::Persistence::Decoder::operator>><WTF::String,(void *)0>(a1, (uint64_t)&v81);
      if (v82)
      {
        LOBYTE(v76) = 0;
        v80 = 0;
        WTF::Persistence::Decoder::operator>><WebCore::HTTPHeaderMap,(void *)0>(a1, (uint64_t)&v76);
        if (v80)
        {
          LOBYTE(v72) = 0;
          v75 = 0;
          WTF::Persistence::VectorCoder<false,WTF::String,0ul>::decodeForPersistence<WTF::Persistence::Decoder>(&v51);
          std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((uint64_t)&v72, (WTF::StringImpl *)&v51);
          if (BYTE8(v52))
          {
            if (DWORD1(v52))
            {
              v43 = v51;
              v44 = 8 * DWORD1(v52);
              do
              {
                v45 = *(WTF::StringImpl **)v43;
                *(_QWORD *)v43 = 0;
                if (v45)
                {
                  if (*(_DWORD *)v45 == 2)
                    WTF::StringImpl::destroy(v45, v6);
                  else
                    *(_DWORD *)v45 -= 2;
                }
                v43 = (WTF::StringImpl *)((char *)v43 + 8);
                v44 -= 8;
              }
              while (v44);
            }
            v7 = v51;
            if (v51)
            {
              v51 = 0;
              LODWORD(v52) = 0;
              WTF::fastFree(v7, v6);
            }
          }
          if (!v75)
            goto LABEL_98;
          LOBYTE(v51) = 0;
          LOBYTE(v52) = 0;
          WTF::Persistence::Decoder::operator>>();
          if (!(_BYTE)v52)
            goto LABEL_98;
          v8 = v51;
          if (v51 >= 6u)
            goto LABEL_98;
          v71 = 0;
          WTF::Persistence::Decoder::operator>>();
          if (!HIBYTE(v71))
            goto LABEL_98;
          LOBYTE(v51) = 0;
          LOBYTE(v52) = 0;
          WTF::Persistence::Decoder::operator>>();
          if (!(_BYTE)v52)
            goto LABEL_98;
          v9 = (char)v51;
          if (v51 >= 3u)
            goto LABEL_98;
          v70 = 0;
          WTF::Persistence::Decoder::operator>>();
          if (!HIBYTE(v70))
            goto LABEL_98;
          LOBYTE(v51) = 0;
          LOBYTE(v52) = 0;
          WTF::Persistence::Decoder::operator>>();
          if (!(_BYTE)v52)
            goto LABEL_98;
          v10 = v51;
          if (v51 < 5u
            && (LOBYTE(v51) = 0, LOBYTE(v52) = 0, WTF::Persistence::Decoder::operator>>(), (_BYTE)v52)
            && (v11 = (char)v51, v51 <= 9u)
            && v51 != 5
            && (v69 = 0, WTF::Persistence::Decoder::operator>>(), HIBYTE(v69)))
          {
            v12 = &v51;
            v91 = 0;
            WTF::URL::invalidate((WTF::URL *)&v91);
            v13 = v91;
            if (v91)
              *(_DWORD *)v91 += 2;
            v51 = v13;
            v52 = v92;
            v53 = v93;
            v54 = 0;
            WTF::URL::invalidate((WTF::URL *)&v54);
            v57 = *(double *)&WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v58 = v50[0];
            memset(v59, 0, sizeof(v59));
            v60 = 0u;
            v61 = 0x10000;
            v15 = v62 & 0x80 | 4;
            v62 = v15;
            v63 = 0;
            v16 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
            if (*MEMORY[0x1E0CBF738])
            {
              *(_DWORD *)v16 += 2;
              v15 = v62;
            }
            v64 = v16;
            v65 = 0;
            LOBYTE(v66) = 0;
            BYTE4(v66) = 0;
            LOBYTE(v16) = v67 & 0xE0 | 5;
            v67 = (char)v16;
            v62 = v15 | 2;
            v17 = v91;
            v91 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v14);
              else
                *(_DWORD *)v17 -= 2;
            }
            cf = 0;
            v18 = v90;
            if (!v90)
              goto LABEL_143;
            if ((v67 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v51);
              v67 |= 1u;
            }
            v16 = v87;
            if (v87)
              *(_DWORD *)v87 += 2;
            v19 = v51;
            v51 = v16;
            if (v19)
            {
              LODWORD(v16) = *(_DWORD *)v19 - 2;
              if (*(_DWORD *)v19 == 2)
                WTF::StringImpl::destroy(v19, v14);
              else
                *(_DWORD *)v19 = (_DWORD)v16;
            }
            v52 = v88;
            v53 = v89;
            v62 &= ~0x20u;
            v67 &= ~2u;
            v18 = v86;
            if (!v86)
              goto LABEL_143;
            v20 = v85;
            WebCore::ResourceRequestBase::updateResourceRequest((WebCore::ResourceRequest *)&v51, 0);
            if (v57 != v20)
            {
              v57 = v20;
              v67 &= ~2u;
            }
            v50[0] = 0;
            WTF::URL::invalidate((WTF::URL *)v50);
            v18 = v84;
            if (!v84)
              goto LABEL_143;
            MEMORY[0x19AEA52F8](&v91, v50, &v83, 0);
            if ((v67 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v51);
              v67 |= 1u;
            }
            v23 = WTF::equal(v54, v91, v21);
            v24 = v91;
            if ((v23 & 1) == 0)
            {
              if (v91)
                *(_DWORD *)v91 += 2;
              v25 = v54;
              v54 = v24;
              if (v25)
              {
                LODWORD(v16) = *(_DWORD *)v25 - 2;
                if (*(_DWORD *)v25 == 2)
                {
                  WTF::StringImpl::destroy(v25, v22);
                  v24 = v91;
                }
                else
                {
                  *(_DWORD *)v25 = (_DWORD)v16;
                }
              }
              v55 = v92;
              v56 = v93;
              v67 &= ~2u;
            }
            v91 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v22);
              else
                *(_DWORD *)v24 -= 2;
            }
            v26 = v50[0];
            v50[0] = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v22);
              else
                *(_DWORD *)v26 -= 2;
            }
            v18 = v82;
            if (!v82)
              goto LABEL_143;
            WebCore::ResourceRequestBase::setHTTPMethod(&v51, &v81);
            v18 = v80;
            if (!v80)
              goto LABEL_143;
            v12 = (WTF::StringImpl **)v59;
            v27 = v76;
            v76 = 0;
            v49[0] = v27;
            v28 = v77;
            v77 = 0;
            v49[1] = v28;
            v29 = v78;
            v78 = 0;
            v49[2] = v29;
            v30 = v79;
            v79 = 0;
            v49[3] = v30;
            if ((v67 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v51);
              v67 |= 1u;
            }
            WebCore::HTTPHeaderMap::operator=(v59, (WTF::StringImpl *)v49);
            v67 &= ~2u;
            WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)v49, v31);
            v18 = v75;
            if (!v75)
              goto LABEL_143;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v60, (unsigned int *)&v72);
            v18 = v67;
            if ((v67 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v51);
              v18 = v67 | 1;
              v67 |= 1u;
            }
            if (v61 != v8)
            {
              LOBYTE(v61) = v8;
              v18 &= ~2u;
              v67 = v18;
            }
            LOBYTE(v16) = HIBYTE(v71);
            if (!HIBYTE(v71))
              goto LABEL_143;
            LODWORD(v12) = v71;
            if ((v18 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v51);
              v18 = v67 | 1;
              v67 |= 1u;
            }
            LOBYTE(v16) = v62;
            if (((_DWORD)v12 != 0) == ((v62 & 2) == 0))
            {
              LOBYTE(v16) = v62 & 0xFD | (2 * ((_DWORD)v12 != 0));
              v62 = (char)v16;
              v18 &= ~2u;
              v67 = v18;
            }
            BYTE1(v61) = v9;
            if (!HIBYTE(v70))
              goto LABEL_143;
            LODWORD(v12) = v70;
            if ((v18 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v51);
              v18 = v67 | 1;
              v67 |= 1u;
              LOBYTE(v16) = v62;
            }
            if (((_DWORD)v12 != 0) == ((v16 & 1) == 0))
              goto LABEL_144;
            if ((v18 & 1) == 0)
              goto LABEL_145;
            while (1)
            {
              if (BYTE2(v61) != v10)
              {
                BYTE2(v61) = v10;
                v18 &= ~2u;
                v67 = v18;
              }
              HIBYTE(v61) = v11;
              LOBYTE(v16) = HIBYTE(v69);
              if (HIBYTE(v69))
                break;
LABEL_143:
              __break(1u);
LABEL_144:
              v62 = v16 & 0xFE | v12;
              v18 &= ~2u;
              v67 = v18;
              if ((v18 & 1) == 0)
              {
LABEL_145:
                WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v51);
                v18 = v67 | 1;
                v67 |= 1u;
              }
            }
            v32 = v69;
            if ((v18 & 1) == 0)
            {
              WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)&v51);
              v18 = v67 | 1;
              v67 |= 1u;
            }
            if ((v32 != 0) == ((v62 & 4) == 0))
            {
              v62 = v62 & 0xFB | (4 * (v32 != 0));
              v67 = v18 & 0xFD;
            }
            WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)a2, (const WebCore::ResourceRequestBase::RequestData *)&v51);
            v34 = v63;
            if (v63)
              *v63 += 2;
            *(_QWORD *)(a2 + 152) = v34;
            v35 = v64;
            if (v64)
              *v64 += 2;
            *(_QWORD *)(a2 + 160) = v35;
            v36 = v65;
            if (v65)
              ++*v65;
            v37 = v66;
            *(_QWORD *)(a2 + 168) = v36;
            *(_QWORD *)(a2 + 176) = v37;
            *(_BYTE *)(a2 + 184) = v67;
            v38 = cf;
            *(_QWORD *)(a2 + 192) = cf;
            if (v38)
              CFRetain(v38);
            *(_BYTE *)(a2 + 200) = 1;
            WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v51, v33);
          }
          else
          {
LABEL_98:
            *(_BYTE *)a2 = 0;
            *(_BYTE *)(a2 + 200) = 0;
          }
          if (v75)
          {
            if (v74)
            {
              v46 = v72;
              v47 = 8 * v74;
              do
              {
                v48 = *(WTF::StringImpl **)v46;
                *(_QWORD *)v46 = 0;
                if (v48)
                {
                  if (*(_DWORD *)v48 == 2)
                    WTF::StringImpl::destroy(v48, v6);
                  else
                    *(_DWORD *)v48 -= 2;
                }
                v46 = (WTF *)((char *)v46 + 8);
                v47 -= 8;
              }
              while (v47);
            }
            v39 = v72;
            if (v72)
            {
              v72 = 0;
              v73 = 0;
              WTF::fastFree(v39, v6);
            }
          }
          if (v80)
            WebCore::HTTPHeaderMap::~HTTPHeaderMap((WebCore::HTTPHeaderMap *)&v76, v6);
        }
        else
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 200) = 0;
        }
        if (v82)
        {
          v40 = v81;
          v81 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v6);
            else
              *(_DWORD *)v40 -= 2;
          }
        }
      }
      else
      {
        *(_BYTE *)a2 = 0;
        *(_BYTE *)(a2 + 200) = 0;
      }
      if (v84)
      {
        v41 = v83;
        v83 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, v6);
          else
            *(_DWORD *)v41 -= 2;
        }
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 200) = 0;
    }
    if (v90)
    {
      v42 = v87;
      v87 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v6);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 200) = 0;
  }
}

void WTF::Persistence::Coder<WebCore::CertificateInfo>::encodeForPersistence(WTF::Persistence *a1)
{
  uint64_t v2;
  const __CFData *v3;
  const __CFData *v4;

  v2 = SecTrustSerialize();
  if (!v2)
    JUMPOUT(0x19AEA46BCLL);
  v3 = (const __CFData *)v2;
  MEMORY[0x19AEA46BC](a1, 1);
  WTF::Persistence::encodeCFData(a1, v3, v4);
  CFRelease(v3);
}

uint64_t WTF::Persistence::Coder<WebCore::NavigationPreloadState>::encodeForPersistence()
{
  MEMORY[0x19AEA46BC]();
  return WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
}

uint64_t WTF::Persistence::Coder<WebCore::NavigationPreloadState>::decodeForPersistence@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[16] = 0;
  return result;
}

uint64_t WTF::Persistence::Coder<WebCore::CrossOriginEmbedderPolicy>::encodeForPersistence()
{
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  WTF::Persistence::Encoder::operator<<();
  return WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
}

uint64_t WTF::Persistence::Coder<WebCore::ContentSecurityPolicyResponseHeaders>::encodeForPersistence(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  WTF::Persistence::Encoder::operator<<();
  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *a2;
    v5 = *a2 + 16 * v3;
    do
    {
      WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
      WTF::Persistence::Encoder::operator<<();
      v4 += 16;
    }
    while (v4 != v5);
  }
  return WTF::Persistence::Encoder::operator<<();
}

uint64_t WTF::Persistence::Coder<WebCore::ContentSecurityPolicyResponseHeaders>::decodeForPersistence@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = WTF::Persistence::Decoder::operator>>();
  *a1 = 0;
  a1[24] = 0;
  return result;
}

uint64_t WTF::Persistence::Coder<WebCore::ClientOrigin>::encodeForPersistence(uint64_t a1, uint64_t a2)
{
  WTF::Persistence::Coder<WebCore::SecurityOriginData>::encodeForPersistence(a1, a2);
  return WTF::Persistence::Coder<WebCore::SecurityOriginData>::encodeForPersistence(a1, a2 + 32);
}

uint64_t WTF::Persistence::Coder<WebCore::SecurityOriginData>::encodeForPersistence(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  char *v10;

  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
    goto LABEL_8;
  v10 = &v9;
  ((void (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_3[v2])(&v10);
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 == -1
    || (v10 = &v9,
        ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4hostEvEUlRKNS9_5TupleEE_JZNKS9_4hostEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_3[v5])(&v10, a2), WTF::Persistence::Coder<WTF::String>::encodeForPersistence(), v6 = *(unsigned int *)(a2 + 24), (_DWORD)v6 == -1))
  {
LABEL_8:
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    WTF::Persistence::Coder<WebCore::FetchOptions>::encodeForPersistence(v8);
  }
  v10 = &v9;
  if ((((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData4portEvEUlRKNS9_5TupleEE_JZNKS9_4portEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v6])(&v10, a2) & 0xFF0000) == 0)return MEMORY[0x19AEA46BC](a1, 0);
  MEMORY[0x19AEA46BC](a1, 1);
  return WTF::Persistence::Encoder::operator<<();
}

void WTF::Persistence::Coder<WebCore::FetchOptions>::encodeForPersistence()
{
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Encoder::operator<<();
  WTF::Persistence::Coder<WTF::String>::encodeForPersistence();
  JUMPOUT(0x19AEA46BCLL);
}

WTF::StringImpl *WTF::Persistence::Coder<WebCore::FetchOptions>::decodeForPersistence@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  _BYTE v4[7];
  WTF::StringImpl *v5[5];

  *(_WORD *)v4 = 512;
  *(_DWORD *)&v4[2] = 0;
  v4[6] = 0;
  memset(v5, 0, sizeof(v5));
  result = (WTF::StringImpl *)WebCore::FetchOptions::decodePersistent<WTF::Persistence::Decoder>();
  if ((_DWORD)result)
  {
    *(_DWORD *)a1 = *(_DWORD *)v4;
    *(_DWORD *)(a1 + 3) = *(_DWORD *)&v4[3];
    *(WTF::StringImpl **)(a1 + 8) = v5[0];
    *(_OWORD *)(a1 + 16) = *(_OWORD *)&v5[1];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v5[3];
    *(_BYTE *)(a1 + 48) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    result = v5[0];
    *(_BYTE *)(a1 + 48) = 0;
    if (v5[0])
    {
      if (*(_DWORD *)v5[0] == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v5[0], v3);
      else
        *(_DWORD *)v5[0] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::FetchOptions::decodePersistent<WTF::Persistence::Decoder>()
{
  WTF::Persistence::Decoder::operator>>();
  return 0;
}

uint64_t WebCore::Widget::parent(WebCore::Widget *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::Widget::protectedParent@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 32);
  if (v2)
  {
    v2 = *(_QWORD *)(v2 + 8);
    if (v2)
      ++*(_DWORD *)(v2 + 8);
  }
  *a2 = v2;
  return this;
}

WebCore::Widget *WebCore::Widget::root(WebCore::Widget *this)
{
  WebCore::Widget *v1;
  uint64_t i;
  WebCore::Widget *v3;

  v1 = this;
  for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)v3 + 4))
  {
    v3 = *(WebCore::Widget **)(i + 8);
    if (!v3)
      break;
    v1 = v3;
  }
  if (((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v1 + 72))(v1) & 1) == 0
    && !(*(unsigned int (**)(WebCore::Widget *))(*(_QWORD *)v1 + 80))(v1))
  {
    return 0;
  }
  return v1;
}

_QWORD *WebCore::Widget::removeFromParent(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = this[4];
  if (v1)
  {
    v2 = this;
    this = *(_QWORD **)(v1 + 8);
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *))(*this + 336))(this, v2);
  }
  return this;
}

uint64_t WebCore::Widget::setCursor(WebCore::Widget *this, const WebCore::Cursor *a2)
{
  WebCore::Widget *v3;
  uint64_t i;
  WebCore::Widget *v5;
  uint64_t v6;
  uint64_t result;

  v3 = this;
  for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)v5 + 4))
  {
    v5 = *(WebCore::Widget **)(i + 8);
    if (!v5)
      break;
    v3 = v5;
  }
  if (((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v3 + 72))(v3) & 1) != 0
    || (result = (*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v3 + 80))(v3), (_DWORD)result))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::Widget *))(*(_QWORD *)v3 + 720))(v3)
                                           + 24)
                               + 8)
                   + 48);
    return (*(uint64_t (**)(uint64_t, const WebCore::Cursor *))(*(_QWORD *)v6 + 136))(v6, a2);
  }
  return result;
}

uint64_t WebCore::Widget::convertFromRootView(WebCore::Widget *this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  WebCore::Widget *v4;
  uint64_t v5;
  _QWORD v7[2];

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return *(_QWORD *)a2;
  v4 = *(WebCore::Widget **)(v2 + 8);
  if (!v4)
    return *(_QWORD *)a2;
  v7[0] = WebCore::Widget::convertFromRootView(v4, a2);
  v7[1] = v5;
  return (*(uint64_t (**)(WebCore::Widget *, _QWORD *))(*(_QWORD *)this + 192))(this, v7);
}

float WebCore::Widget::convertFromRootView(WebCore::Widget *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  WebCore::Widget *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float result;
  _DWORD v10[4];

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return *(float *)a2;
  v4 = *(WebCore::Widget **)(v2 + 8);
  if (!v4)
    return *(float *)a2;
  WebCore::Widget::convertFromRootView(v4, a2);
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v7;
  v10[3] = v8;
  (*(void (**)(WebCore::Widget *, _DWORD *))(*(_QWORD *)this + 208))(this, v10);
  return result;
}

float WebCore::Widget::convertToRootView(WebCore::Widget *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  WebCore::Widget *v3;
  int v4;
  int v5;
  int v6;
  float result;
  _DWORD v8[4];

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return *(float *)a2;
  v3 = *(WebCore::Widget **)(v2 + 8);
  if (!v3)
    return *(float *)a2;
  v8[0] = (*(float (**)(WebCore::Widget *, const WebCore::FloatRect *))(*(_QWORD *)this + 200))(this, a2);
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  WebCore::Widget::convertToRootView(v3, (const WebCore::FloatRect *)v8);
  return result;
}

uint64_t WebCore::Widget::convertFromRootView(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = a1[4];
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return *(_QWORD *)a2;
  v5 = WebCore::Widget::convertFromRootView();
  return (*(uint64_t (**)(_QWORD *, uint64_t *))(*a1 + 224))(a1, &v5);
}

uint64_t WebCore::Widget::convertToRootView(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[4];
  if (!v2)
    return *(_QWORD *)a2;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return *(_QWORD *)a2;
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 216))(a1);
  return WebCore::Widget::convertToRootView(v3, &v5);
}

float WebCore::Widget::convertFromRootView(WebCore::Widget *this, const WebCore::FloatPoint *a2)
{
  uint64_t v2;
  WebCore::Widget *v4;
  int v5;
  int v6;
  float result;
  _DWORD v8[2];

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return *(float *)a2;
  v4 = *(WebCore::Widget **)(v2 + 8);
  if (!v4)
    return *(float *)a2;
  WebCore::Widget::convertFromRootView(v4, a2);
  v8[0] = v5;
  v8[1] = v6;
  (*(void (**)(WebCore::Widget *, _DWORD *))(*(_QWORD *)this + 240))(this, v8);
  return result;
}

float WebCore::Widget::convertToRootView(WebCore::Widget *this, const WebCore::FloatPoint *a2)
{
  uint64_t v2;
  WebCore::Widget *v3;
  int v4;
  float result;
  _DWORD v6[2];

  v2 = *((_QWORD *)this + 4);
  if (!v2)
    return *(float *)a2;
  v3 = *(WebCore::Widget **)(v2 + 8);
  if (!v3)
    return *(float *)a2;
  v6[0] = (*(float (**)(WebCore::Widget *, const WebCore::FloatPoint *))(*(_QWORD *)this + 232))(this, a2);
  v6[1] = v4;
  WebCore::Widget::convertToRootView(v3, (const WebCore::FloatPoint *)v6);
  return result;
}

uint64_t WebCore::Widget::convertFromContainingWindow(WebCore::Widget *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  uint64_t v4;
  WebCore::Widget *v5;
  uint64_t v7;

  v4 = *((_QWORD *)this + 4);
  if (!v4)
    return WebCore::Widget::convertFromContainingWindowToRoot(this, a2, a3);
  v5 = *(WebCore::Widget **)(v4 + 8);
  if (!v5)
    return WebCore::Widget::convertFromContainingWindowToRoot(this, a2, a3);
  v7 = WebCore::Widget::convertFromContainingWindow(v5, a2);
  return (*(uint64_t (**)(WebCore::Widget *, uint64_t *))(*(_QWORD *)this + 224))(this, &v7);
}

uint64_t WebCore::Widget::convertToContainingWindow(WebCore::Widget *this, const WebCore::IntPoint *a2, const WebCore::IntPoint *a3)
{
  uint64_t v3;
  WebCore::Widget *v4;
  uint64_t v6;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return WebCore::Widget::convertFromRootToContainingWindow(this, a2, a3);
  v4 = *(WebCore::Widget **)(v3 + 8);
  if (!v4)
    return WebCore::Widget::convertFromRootToContainingWindow(this, a2, a3);
  v6 = (*(uint64_t (**)(WebCore::Widget *, const WebCore::IntPoint *))(*(_QWORD *)this + 216))(this, a2);
  return WebCore::Widget::convertToContainingWindow(v4, (const WebCore::IntPoint *)&v6);
}

unint64_t WebCore::Widget::convertToContainingView(WebCore::Widget *this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  WebCore::ScrollView *v4;

  v2 = *((_QWORD *)this + 4);
  if (v2 && (v4 = *(WebCore::ScrollView **)(v2 + 8)) != 0)
    return WebCore::ScrollView::convertChildToSelf(v4, (uint64_t)this, *(_QWORD *)a2);
  else
    return *(_QWORD *)a2;
}

unint64_t WebCore::Widget::convertFromContainingView(WebCore::Widget *this, const WebCore::IntRect *a2)
{
  uint64_t v2;
  WebCore::ScrollView *v4;

  v2 = *((_QWORD *)this + 4);
  if (v2 && (v4 = *(WebCore::ScrollView **)(v2 + 8)) != 0)
    return WebCore::ScrollView::convertSelfToChild(v4, (uint64_t)this, *(_QWORD *)a2);
  else
    return *(_QWORD *)a2;
}

float WebCore::Widget::convertToContainingView(WebCore::Widget *this, const WebCore::FloatRect *a2, __n128 a3)
{
  float v3;
  int v4;
  int v5;
  int v6;
  int v7;
  float v8;
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD v15[4];

  v3 = *((float *)a2 + 1);
  v4 = (int)*(float *)a2;
  if (*(float *)a2 <= -2147500000.0)
    v4 = 0x80000000;
  if (*(float *)a2 < 2147500000.0)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  if (v3 > -2147500000.0)
    v6 = (int)v3;
  else
    v6 = 0x80000000;
  if (v3 < 2147500000.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  v15[0] = v5;
  v15[1] = v7;
  v8 = *((float *)a2 + 2);
  v9 = *((float *)a2 + 3);
  a3.n128_u64[0] = 0x4F0000004F000000;
  v10 = (int)v8;
  if (v8 <= -2147500000.0)
    v10 = 0x80000000;
  if (v8 < 2147500000.0)
    v11 = v10;
  else
    v11 = 0x7FFFFFFF;
  if (v9 > -2147500000.0)
    v12 = (int)v9;
  else
    v12 = 0x80000000;
  if (v9 < 2147500000.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v15[2] = v11;
  v15[3] = v13;
  return (float)(*(int (**)(WebCore::Widget *, _DWORD *, __n128))(*(_QWORD *)this + 184))(this, v15, a3);
}

float WebCore::Widget::convertFromContainingView(WebCore::Widget *this, const WebCore::FloatRect *a2, __n128 a3)
{
  float v3;
  int v4;
  int v5;
  int v6;
  int v7;
  float v8;
  float v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD v15[4];

  v3 = *((float *)a2 + 1);
  v4 = (int)*(float *)a2;
  if (*(float *)a2 <= -2147500000.0)
    v4 = 0x80000000;
  if (*(float *)a2 < 2147500000.0)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  if (v3 > -2147500000.0)
    v6 = (int)v3;
  else
    v6 = 0x80000000;
  if (v3 < 2147500000.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  v15[0] = v5;
  v15[1] = v7;
  v8 = *((float *)a2 + 2);
  v9 = *((float *)a2 + 3);
  a3.n128_u64[0] = 0x4F0000004F000000;
  v10 = (int)v8;
  if (v8 <= -2147500000.0)
    v10 = 0x80000000;
  if (v8 < 2147500000.0)
    v11 = v10;
  else
    v11 = 0x7FFFFFFF;
  if (v9 > -2147500000.0)
    v12 = (int)v9;
  else
    v12 = 0x80000000;
  if (v9 < 2147500000.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFF;
  v15[2] = v11;
  v15[3] = v13;
  return (float)(*(int (**)(WebCore::Widget *, _DWORD *, __n128))(*(_QWORD *)this + 192))(this, v15, a3);
}

unint64_t WebCore::Widget::convertToContainingView(WebCore::Widget *this, const WebCore::IntPoint *a2)
{
  uint64_t v2;
  WebCore::ScrollView *v4;

  v2 = *((_QWORD *)this + 4);
  if (v2 && (v4 = *(WebCore::ScrollView **)(v2 + 8)) != 0)
    return WebCore::ScrollView::convertChildToSelf(v4, (uint64_t)this, *(_QWORD *)a2);
  else
    return *(_QWORD *)a2;
}

unint64_t WebCore::Widget::convertFromContainingView(WebCore::Widget *this, const WebCore::IntPoint *a2)
{
  uint64_t v2;
  WebCore::ScrollView *v4;

  v2 = *((_QWORD *)this + 4);
  if (v2 && (v4 = *(WebCore::ScrollView **)(v2 + 8)) != 0)
    return WebCore::ScrollView::convertSelfToChild(v4, (uint64_t)this, *(_QWORD *)a2);
  else
    return *(_QWORD *)a2;
}

float WebCore::Widget::convertToContainingView(WebCore::Widget *this, const WebCore::FloatPoint *a2)
{
  uint64_t v2;
  WebCore::ScrollView *v4;

  v2 = *((_QWORD *)this + 4);
  if (v2 && (v4 = *(WebCore::ScrollView **)(v2 + 8)) != 0)
    return WebCore::ScrollView::convertChildToSelf(v4, (uint64_t)this, *(float *)a2);
  else
    return *(float *)a2;
}

float WebCore::Widget::convertFromContainingView(WebCore::Widget *this, const WebCore::FloatPoint *a2, __n128 a3)
{
  float v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _DWORD v9[2];

  v3 = *((float *)a2 + 1);
  a3.n128_u64[0] = 0x4F0000004F000000;
  v4 = (int)*(float *)a2;
  if (*(float *)a2 <= -2147500000.0)
    v4 = 0x80000000;
  if (*(float *)a2 < 2147500000.0)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  if (v3 > -2147500000.0)
    v6 = (int)v3;
  else
    v6 = 0x80000000;
  if (v3 < 2147500000.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  v9[0] = v5;
  v9[1] = v7;
  return (float)(*(int (**)(WebCore::Widget *, _DWORD *, __n128))(*(_QWORD *)this + 224))(this, v9, a3);
}

uint64_t WebCore::AcceleratedEffect::Keyframe::Keyframe(uint64_t a1, uint64_t a2, double a3)
{
  *(_QWORD *)a1 = off_1E3407270;
  *(double *)(a1 + 8) = a3;
  WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a1 + 16, a2);
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = off_1E3407270;
  *(double *)(a1 + 8) = a3;
  WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a1 + 16, a2);
  *(_DWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  return a1;
}

uint64_t WebCore::AcceleratedEffect::Keyframe::Keyframe(uint64_t a1, uint64_t a2, uint64_t *a3, __int16 a4, _WORD *a5, double a6)
{
  uint64_t v10;

  *(_QWORD *)a1 = off_1E3407270;
  *(double *)(a1 + 8) = a6;
  WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a1 + 16, a2);
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 264) = v10;
  *(_WORD *)(a1 + 272) = a4;
  *(_WORD *)(a1 + 274) = *a5;
  return a1;
}

{
  uint64_t v10;

  *(_QWORD *)a1 = off_1E3407270;
  *(double *)(a1 + 8) = a6;
  WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a1 + 16, a2);
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 264) = v10;
  *(_WORD *)(a1 + 272) = a4;
  *(_WORD *)(a1 + 274) = *a5;
  return a1;
}

uint64_t WebCore::AcceleratedEffect::Keyframe::clearProperty(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 274) &= ~a2;
  return result;
}

uint64_t WebCore::AcceleratedEffect::Keyframe::animatesProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::AcceleratedEffect::Keyframe *v4;
  uint64_t v5;
  uint64_t *v6;

  v5 = a1;
  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
  {
    v4 = (WebCore::AcceleratedEffect::Keyframe *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AcceleratedEffect::Keyframe::clone(v4);
  }
  else
  {
    v6 = &v5;
    return ((uint64_t (*)(uint64_t **, uint64_t))off_1E3407420[v2])(&v6, a2 + 8);
  }
}

void WebCore::AcceleratedEffect::Keyframe::clone(WebCore::AcceleratedEffect::Keyframe *this@<X0>, uint64_t a2@<X8>)
{
  __int16 v4;
  void (***v5)(_QWORD *__return_ptr);
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  void *v9;
  _QWORD v10[31];

  v4 = *((_WORD *)this + 137);
  v5 = (void (***)(_QWORD *__return_ptr))*((_QWORD *)this + 33);
  if (v5)
  {
    (**v5)(v10);
    v6 = v10[0];
  }
  else
  {
    v6 = 0;
  }
  v7 = *((_QWORD *)this + 1);
  WebCore::AcceleratedEffectValues::clone((WebCore::AcceleratedEffect::Keyframe *)((char *)this + 16), (uint64_t)v10);
  v8 = *((_WORD *)this + 136);
  *(_QWORD *)a2 = off_1E3407270;
  *(_QWORD *)(a2 + 8) = v7;
  WebCore::AcceleratedEffectValues::AcceleratedEffectValues(a2 + 16, (uint64_t)v10);
  *(_QWORD *)(a2 + 264) = v6;
  *(_WORD *)(a2 + 272) = v8;
  *(_WORD *)(a2 + 274) = v4;
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v10, v9);
}

uint64_t WebCore::AcceleratedEffectValues::clone@<X0>(WebCore::AcceleratedEffectValues *this@<X0>, uint64_t a2@<X8>)
{
  char v4;
  __int128 v5;
  __int128 v6;
  char v7;
  char v8;
  unsigned int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  char v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  unsigned int v51;
  int v52;
  unsigned __int8 v53;
  unsigned int v54;
  char v55;
  unsigned int v56;
  char v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  BOOL v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  char v72;
  unsigned int v73;
  char v74;
  unsigned int v75;
  unsigned __int8 v76;
  int v77;
  unsigned int v78;
  int v79;
  char v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  char v88;
  int v89;
  char v90;
  char v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned __int8 v99;
  char v100;
  char v101;
  int v102;
  unsigned __int8 v103;
  char v104;
  char v105;
  uint64_t v106;
  int v107;
  unsigned __int8 v108;
  char v109;
  char v110;
  int v111;
  unsigned __int8 v112;
  char v113;
  char v114;
  int v115;
  unsigned __int8 v116;
  char v117;
  char v118;
  int v119;
  unsigned __int8 v120;
  char v121;
  char v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[23];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 92))
  {
    v4 = *((_BYTE *)this + 4);
    v5 = *(_OWORD *)((char *)this + 53);
    v126 = *(_OWORD *)((char *)this + 37);
    v127 = v5;
    *(_OWORD *)v128 = *(_OWORD *)((char *)this + 69);
    *(_QWORD *)&v128[15] = *(_QWORD *)((char *)this + 84);
    v6 = *(_OWORD *)((char *)this + 21);
    v7 = 1;
    v124 = *(_OWORD *)((char *)this + 5);
    v125 = v6;
  }
  else
  {
    v4 = 0;
    v7 = 0;
  }
  v115 = 0;
  v118 = 0;
  v116 = *((_BYTE *)this + 100);
  v8 = *((_BYTE *)this + 101);
  v117 = v8;
  v9 = v116 - 2;
  v92 = v116;
  if (v9 >= 9)
  {
    if (v116 == 11)
    {
      v115 = *((_DWORD *)this + 24);
      v11 = v115;
      WebCore::Length::ref(&v115);
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
  }
  else
  {
    v118 = *((_BYTE *)this + 102);
    if (v118)
    {
      v11 = *((_DWORD *)this + 24);
      v115 = v11;
      v10 = 1;
    }
    else
    {
      v10 = 0;
      v115 = *((_DWORD *)this + 24);
      v11 = v115;
    }
  }
  v119 = 0;
  v122 = 0;
  v120 = *((_BYTE *)this + 108);
  v12 = *((_BYTE *)this + 109);
  v121 = v12;
  v87 = v120 - 2;
  v89 = v120;
  if (v87 >= 9)
  {
    if (v120 == 11)
    {
      v119 = *((_DWORD *)this + 26);
      v13 = v119;
      WebCore::Length::ref(&v119);
      v67 = 0;
    }
    else
    {
      v67 = 0;
      v13 = 0;
    }
  }
  else
  {
    v122 = *((_BYTE *)this + 110);
    if (v122)
    {
      v13 = *((_DWORD *)this + 26);
      v119 = v13;
      v67 = 1;
    }
    else
    {
      v67 = 0;
      v119 = *((_DWORD *)this + 26);
      v13 = v119;
    }
  }
  v14 = *((unsigned int *)this + 33);
  v68 = v10;
  v88 = v12;
  v77 = v14;
  if ((_DWORD)v14)
  {
    if (v14 >> 29)
    {
      __break(0xC471u);
      goto LABEL_127;
    }
    v15 = WTF::fastMalloc((WTF *)(8 * v14));
    if (*((_DWORD *)this + 33))
    {
      v16 = 0;
      do
      {
        v17 = v16;
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 15) + 8 * v16++) + 16))(&v106);
        *(_QWORD *)(v15 + 8 * v17) = v106;
      }
      while (v16 < *((unsigned int *)this + 33));
    }
    else
    {
      LODWORD(v16) = 0;
    }
  }
  else
  {
    LODWORD(v16) = 0;
    v15 = 0;
  }
  v18 = *((_QWORD *)this + 17);
  if (v18)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v18 + 16))(&v106);
    v86 = v106;
  }
  else
  {
    v86 = 0;
  }
  v19 = *((_QWORD *)this + 18);
  if (v19)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v19 + 16))(&v106);
    v85 = v106;
  }
  else
  {
    v85 = 0;
  }
  v20 = *((_QWORD *)this + 19);
  if (v20)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v20 + 16))(&v106);
    v84 = v106;
  }
  else
  {
    v84 = 0;
  }
  v21 = *((_QWORD *)this + 20);
  if (v21)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v21 + 16))(&v106);
    v83 = v106;
  }
  else
  {
    v83 = 0;
  }
  v111 = 0;
  v114 = 0;
  v112 = *((_BYTE *)this + 172);
  v22 = v112;
  v82 = *((unsigned __int8 *)this + 173);
  v113 = *((_BYTE *)this + 173);
  v81 = v112 - 2;
  v97 = v112;
  if (v81 >= 9)
  {
    if (v112 == 11)
    {
      v111 = *((_DWORD *)this + 42);
      v23 = v111;
      WebCore::Length::ref(&v111);
      v22 = v97;
      v66 = 0;
    }
    else
    {
      v66 = 0;
      v23 = 0;
    }
  }
  else
  {
    v114 = *((_BYTE *)this + 174);
    if (v114)
    {
      v23 = *((_DWORD *)this + 42);
      v111 = v23;
      v66 = 1;
    }
    else
    {
      v66 = 0;
      v111 = *((_DWORD *)this + 42);
      v23 = v111;
    }
  }
  LODWORD(v106) = 0;
  BYTE4(v106) = *((_BYTE *)this + 180);
  v24 = BYTE4(v106);
  v76 = *((_BYTE *)this + 181);
  *(_WORD *)((char *)&v106 + 5) = v76;
  v75 = BYTE4(v106) - 2;
  v96 = BYTE4(v106);
  if (v75 >= 9)
  {
    if (BYTE4(v106) == 11)
    {
      LODWORD(v106) = *((_DWORD *)this + 44);
      v25 = v106;
      WebCore::Length::ref((int *)&v106);
      v24 = v96;
      v22 = v97;
      v65 = 0;
    }
    else
    {
      v65 = 0;
      v25 = 0;
    }
  }
  else
  {
    BYTE6(v106) = *((_BYTE *)this + 182);
    if (BYTE6(v106))
    {
      v25 = *((_DWORD *)this + 44);
      LODWORD(v106) = v25;
      v65 = 1;
    }
    else
    {
      v65 = 0;
      LODWORD(v106) = *((_DWORD *)this + 44);
      v25 = v106;
    }
  }
  v107 = 0;
  v110 = 0;
  v108 = *((_BYTE *)this + 188);
  v26 = v108;
  v74 = *((_BYTE *)this + 189);
  v109 = v74;
  v73 = v108 - 2;
  v95 = v108;
  if (v73 >= 9)
  {
    if (v108 == 11)
    {
      v107 = *((_DWORD *)this + 46);
      v27 = v107;
      WebCore::Length::ref(&v107);
      v26 = v95;
      v24 = v96;
      v22 = v97;
      v64 = 0;
    }
    else
    {
      v64 = 0;
      v27 = 0;
    }
  }
  else
  {
    v110 = *((_BYTE *)this + 190);
    if (v110)
    {
      v27 = *((_DWORD *)this + 46);
      v107 = v27;
      v64 = 1;
    }
    else
    {
      v64 = 0;
      v107 = *((_DWORD *)this + 46);
      v27 = v107;
    }
  }
  v98 = 0;
  v101 = 0;
  v99 = *((_BYTE *)this + 196);
  v28 = v99;
  v72 = *((_BYTE *)this + 197);
  v100 = v72;
  v71 = v99 - 2;
  v94 = v99;
  if (v71 >= 9)
  {
    if (v99 == 11)
    {
      v98 = *((_DWORD *)this + 48);
      v29 = v98;
      WebCore::Length::ref(&v98);
      v28 = v94;
      v26 = v95;
      v24 = v96;
      v22 = v97;
      v63 = 0;
    }
    else
    {
      v63 = 0;
      v29 = 0;
    }
  }
  else
  {
    v101 = *((_BYTE *)this + 198);
    if (v101)
    {
      v29 = *((_DWORD *)this + 48);
      v98 = v29;
      v63 = 1;
    }
    else
    {
      v63 = 0;
      v98 = *((_DWORD *)this + 48);
      v29 = v98;
    }
  }
  v102 = 0;
  v105 = 0;
  v103 = *((_BYTE *)this + 204);
  v30 = v103;
  v104 = *((_BYTE *)this + 205);
  v70 = v103 - 2;
  v93 = v103;
  v80 = v104;
  if (v70 >= 9)
  {
    if (v103 == 11)
    {
      v102 = *((_DWORD *)this + 50);
      v31 = v102;
      WebCore::Length::ref(&v102);
      v30 = v93;
      v28 = v94;
      v26 = v95;
      v24 = v96;
      v22 = v97;
      v62 = 0;
    }
    else
    {
      v62 = 0;
      v31 = 0;
    }
  }
  else
  {
    v105 = *((_BYTE *)this + 206);
    if (v105)
    {
      v31 = *((_DWORD *)this + 50);
      v102 = v31;
      v62 = 1;
    }
    else
    {
      v62 = 0;
      v102 = *((_DWORD *)this + 50);
      v31 = v102;
    }
  }
  v69 = *((_QWORD *)this + 26);
  v32 = *((unsigned int *)this + 57);
  v90 = v8;
  v91 = v7;
  v79 = v32;
  v78 = v9;
  if ((_DWORD)v32)
  {
    if (v32 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1960FACE4);
    }
    v33 = WTF::fastMalloc((WTF *)(8 * v32));
    if (*((_DWORD *)this + 57))
    {
      v34 = 0;
      do
      {
        v35 = v34;
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 27) + 8 * v34++) + 16))(&v123);
        *(_QWORD *)(v33 + 8 * v35) = v123;
      }
      while (v34 < *((unsigned int *)this + 57));
    }
    else
    {
      LODWORD(v34) = 0;
    }
    v24 = v96;
    v22 = v97;
    v28 = v94;
    v26 = v95;
    v30 = v93;
  }
  else
  {
    v33 = 0;
    LODWORD(v34) = 0;
  }
  v36 = *((unsigned int *)this + 61);
  if (!(_DWORD)v36)
  {
    v38 = 0;
    LODWORD(v39) = 0;
    goto LABEL_81;
  }
  if (v36 >> 29)
  {
    __break(0xC471u);
LABEL_127:
    JUMPOUT(0x1960FACDCLL);
  }
  v37 = *((_DWORD *)this + 61);
  v38 = WTF::fastMalloc((WTF *)(8 * v36));
  LODWORD(v39) = *((_DWORD *)this + 61);
  if ((_DWORD)v39)
  {
    v39 = 0;
    do
    {
      v40 = v39;
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 29) + 8 * v39) + 16))(&v123);
      v39 = v40 + 1;
      *(_QWORD *)(v38 + 8 * v40) = v123;
    }
    while (v40 + 1 < (unint64_t)*((unsigned int *)this + 61));
  }
  v24 = v96;
  v22 = v97;
  v28 = v94;
  v26 = v95;
  v30 = v93;
  LODWORD(v36) = v37;
LABEL_81:
  *(_DWORD *)a2 = *(_DWORD *)this;
  v41 = v127;
  *(_OWORD *)(a2 + 37) = v126;
  *(_OWORD *)(a2 + 53) = v41;
  *(_OWORD *)(a2 + 69) = *(_OWORD *)v128;
  v42 = v125;
  *(_OWORD *)(a2 + 5) = v124;
  v43 = *((_BYTE *)this + 112);
  *(_BYTE *)(a2 + 4) = v4;
  *(_QWORD *)(a2 + 84) = *(_QWORD *)&v128[15];
  *(_OWORD *)(a2 + 21) = v42;
  *(_BYTE *)(a2 + 92) = v91;
  *(_WORD *)(a2 + 93) = v123;
  *(_BYTE *)(a2 + 95) = BYTE2(v123);
  *(_DWORD *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 102) = 0;
  *(_BYTE *)(a2 + 100) = v92;
  *(_BYTE *)(a2 + 101) = v90;
  if (v78 < 9)
  {
    *(_BYTE *)(a2 + 102) = v68;
    v44 = v89;
    v45 = v87;
    v47 = v85;
    v46 = v86;
    v49 = v83;
    v48 = v84;
    v51 = v81;
    result = v82;
LABEL_83:
    *(_DWORD *)(a2 + 96) = v11;
    goto LABEL_84;
  }
  v44 = v89;
  v45 = v87;
  v47 = v85;
  v46 = v86;
  v49 = v83;
  v48 = v84;
  v51 = v81;
  result = v82;
  if (v92 == 11)
    goto LABEL_83;
LABEL_84:
  *(_DWORD *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 110) = 0;
  *(_BYTE *)(a2 + 108) = v44;
  *(_BYTE *)(a2 + 109) = v88;
  if (v45 >= 9)
  {
    v52 = v77;
    if (v44 == 11)
      *(_DWORD *)(a2 + 104) = v13;
  }
  else
  {
    *(_BYTE *)(a2 + 110) = v67;
    *(_DWORD *)(a2 + 104) = v13;
    v52 = v77;
  }
  *(_BYTE *)(a2 + 112) = v43;
  *(_QWORD *)(a2 + 120) = v15;
  *(_DWORD *)(a2 + 128) = v52;
  *(_DWORD *)(a2 + 132) = v16;
  *(_QWORD *)(a2 + 136) = v46;
  *(_QWORD *)(a2 + 144) = v47;
  *(_QWORD *)(a2 + 152) = v48;
  *(_QWORD *)(a2 + 160) = v49;
  *(_DWORD *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 174) = 0;
  *(_BYTE *)(a2 + 172) = v22;
  *(_BYTE *)(a2 + 173) = result;
  if (v51 >= 9)
  {
    v61 = v22 == 11;
    v54 = v75;
    v53 = v76;
    v56 = v73;
    v55 = v74;
    v58 = v71;
    v57 = v72;
    v59 = v70;
    v60 = v69;
    if (v61)
      *(_DWORD *)(a2 + 168) = v23;
  }
  else
  {
    *(_BYTE *)(a2 + 174) = v66;
    *(_DWORD *)(a2 + 168) = v23;
    v54 = v75;
    v53 = v76;
    v56 = v73;
    v55 = v74;
    v58 = v71;
    v57 = v72;
    v59 = v70;
    v60 = v69;
  }
  *(_DWORD *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 182) = 0;
  *(_BYTE *)(a2 + 180) = v24;
  *(_BYTE *)(a2 + 181) = v53;
  if (v54 < 9)
  {
    *(_BYTE *)(a2 + 182) = v65;
LABEL_90:
    *(_DWORD *)(a2 + 176) = v25;
    goto LABEL_91;
  }
  if (v24 == 11)
    goto LABEL_90;
LABEL_91:
  *(_DWORD *)(a2 + 184) = 0;
  *(_BYTE *)(a2 + 190) = 0;
  *(_BYTE *)(a2 + 188) = v26;
  *(_BYTE *)(a2 + 189) = v55;
  if (v56 < 9)
  {
    *(_BYTE *)(a2 + 190) = v64;
LABEL_93:
    *(_DWORD *)(a2 + 184) = v27;
    goto LABEL_94;
  }
  if (v26 == 11)
    goto LABEL_93;
LABEL_94:
  *(_DWORD *)(a2 + 192) = 0;
  *(_BYTE *)(a2 + 198) = 0;
  *(_BYTE *)(a2 + 196) = v28;
  *(_BYTE *)(a2 + 197) = v57;
  if (v58 < 9)
  {
    *(_BYTE *)(a2 + 198) = v63;
LABEL_96:
    *(_DWORD *)(a2 + 192) = v29;
    goto LABEL_97;
  }
  if (v28 == 11)
    goto LABEL_96;
LABEL_97:
  *(_DWORD *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 206) = 0;
  *(_BYTE *)(a2 + 204) = v30;
  *(_BYTE *)(a2 + 205) = v80;
  if (v59 >= 9)
  {
    if (v30 != 11)
      goto LABEL_100;
  }
  else
  {
    *(_BYTE *)(a2 + 206) = v62;
  }
  *(_DWORD *)(a2 + 200) = v31;
LABEL_100:
  *(_QWORD *)(a2 + 208) = v60;
  *(_QWORD *)(a2 + 216) = v33;
  *(_DWORD *)(a2 + 224) = v79;
  *(_DWORD *)(a2 + 228) = v34;
  *(_QWORD *)(a2 + 232) = v38;
  *(_DWORD *)(a2 + 240) = v36;
  *(_DWORD *)(a2 + 244) = v39;
  return result;
}

_DWORD *WebCore::AcceleratedEffect::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t *a5@<X4>, _WORD *a6@<X5>, char a7@<W6>, uint64_t *a8@<X8>, double a9@<D0>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v20;
  _DWORD *result;
  uint64_t v22;
  uint64_t v23;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v20 = bmalloc::api::isoAllocate();
  result = *(_DWORD **)a1;
  *(_QWORD *)a1 = 0;
  v26 = *(_OWORD *)(a1 + 8);
  v27 = *(_OWORD *)(a1 + 24);
  v28 = *(_OWORD *)(a1 + 40);
  v29 = *(_OWORD *)(a1 + 56);
  *(_DWORD *)(v20 + 8) = 1;
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)v20 = &off_1E34072B8;
  if (result)
    ++result[2];
  *(_QWORD *)(v20 + 24) = result;
  *(_OWORD *)(v20 + 32) = v26;
  *(_OWORD *)(v20 + 48) = v27;
  *(_OWORD *)(v20 + 64) = v28;
  *(_OWORD *)(v20 + 80) = v29;
  *(_QWORD *)(v20 + 96) = 0;
  *(_QWORD *)(v20 + 104) = 0;
  v22 = *a2;
  *a2 = 0;
  *(_QWORD *)(v20 + 96) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(v20 + 104) = v22;
  LODWORD(v22) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(v20 + 108) = v22;
  *(_BYTE *)(v20 + 112) = a3;
  *(_BYTE *)(v20 + 113) = a4;
  v23 = *a5;
  *a5 = 0;
  *(_QWORD *)(v20 + 120) = v23;
  *(_WORD *)(v20 + 128) = *a6;
  *(_WORD *)(v20 + 130) = 0;
  *(_BYTE *)(v20 + 132) = a7;
  *(double *)(v20 + 136) = a9;
  *(_QWORD *)(v20 + 144) = a10;
  *(_QWORD *)(v20 + 152) = a11;
  *(_QWORD *)(v20 + 160) = a12;
  *(_QWORD *)(v20 + 168) = a13;
  *a8 = v20;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::AcceleratedEffect::clone@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  __int16 *v7;
  __int16 v8;
  void (***v9)(_OWORD *__return_ptr);
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  __int16 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  void (***v32)(__int128 *__return_ptr);
  uint64_t v33;
  _DWORD *v34;
  __int128 v35;
  __int128 v36;
  char v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int16 v47;
  unsigned int v48;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[2];
  int v57;
  __int16 v58;
  char v59;
  int v60;
  unsigned __int8 v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  int v69;
  __int16 v70;
  char v71;
  int v72;
  unsigned __int8 v73;
  char v74;
  char v75;
  int v76;
  unsigned __int8 v77;
  char v78;
  char v79;
  int v80;
  unsigned __int8 v81;
  char v82;
  char v83;
  int v84;
  unsigned __int8 v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  int v94;
  _OWORD v95[4];
  _OWORD v96[2];
  int v97;
  __int16 v98;
  char v99;
  int v100;
  unsigned __int8 v101;
  char v102;
  char v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  int v109;
  __int16 v110;
  char v111;
  int v112;
  unsigned __int8 v113;
  char v114;
  char v115;
  int v116;
  unsigned __int8 v117;
  char v118;
  char v119;
  int v120;
  unsigned __int8 v121;
  char v122;
  char v123;
  int v124;
  unsigned __int8 v125;
  char v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v2 = this;
  v3 = *(_DWORD *)(this + 108);
  if (v3)
  {
    if (v3 >= 0xEA0EA1)
    {
      __break(0xC471u);
      return this;
    }
    v4 = 280 * v3;
    v50 = WTF::fastMalloc((WTF *)(280 * v3));
    v48 = v4 / 0x118;
    if (*(_DWORD *)(v2 + 108))
    {
      v5 = 0;
      v6 = 274;
      while (1)
      {
        v7 = (__int16 *)(*(_QWORD *)(v2 + 96) + v6);
        v8 = *v7;
        v9 = *(void (****)(_OWORD *__return_ptr))(v7 - 5);
        if (v9)
        {
          (**v9)(v95);
          v10 = *(_DWORD **)&v95[0];
        }
        else
        {
          v10 = 0;
        }
        v11 = *(_QWORD *)(v7 - 133);
        WebCore::AcceleratedEffectValues::clone((WebCore::AcceleratedEffectValues *)(v7 - 129), (uint64_t)v95);
        v13 = *(v7 - 1);
        *(_QWORD *)&v51 = off_1E3407270;
        *((_QWORD *)&v51 + 1) = v11;
        v54 = v95[2];
        v55 = v95[3];
        v56[0] = v96[0];
        *(_OWORD *)((char *)v56 + 13) = *(_OWORD *)((char *)v96 + 13);
        v52 = v95[0];
        v53 = v95[1];
        v57 = 0;
        v59 = 0;
        v58 = v98;
        if (v98 - 2 < 9)
          break;
        if (v98 == 11)
        {
          v25 = v97;
          v97 = 0;
LABEL_36:
          v57 = v25;
        }
LABEL_11:
        LOBYTE(v98) = 0;
        v60 = 0;
        v63 = 0;
        v61 = v101;
        v62 = v102;
        if (v101 - 2 < 9)
        {
          v63 = v103;
          if (v103)
          {
            v60 = v100;
            goto LABEL_14;
          }
          v26 = v100;
          goto LABEL_38;
        }
        if (v101 == 11)
        {
          v26 = v100;
          v100 = 0;
LABEL_38:
          v60 = v26;
        }
LABEL_14:
        v101 = 0;
        v64 = v104;
        v65 = v105;
        v14 = v106;
        v105 = 0;
        v106 = 0;
        v66 = v14;
        v15 = v107;
        v107 = 0u;
        v67 = v15;
        v16 = v108;
        v108 = 0u;
        v68 = v16;
        v69 = 0;
        v71 = 0;
        v70 = v110;
        if (v110 - 2 < 9)
        {
          v71 = v111;
          if (v111)
          {
            v69 = v109;
            goto LABEL_17;
          }
          v27 = v109;
          goto LABEL_40;
        }
        if (v110 == 11)
        {
          v27 = v109;
          v109 = 0;
LABEL_40:
          v69 = v27;
        }
LABEL_17:
        LOBYTE(v110) = 0;
        v72 = 0;
        v75 = 0;
        v73 = v113;
        v74 = v114;
        if (v113 - 2 < 9)
        {
          v75 = v115;
          if (v115)
          {
            v72 = v112;
            goto LABEL_20;
          }
          v28 = v112;
          goto LABEL_42;
        }
        if (v113 == 11)
        {
          v28 = v112;
          v112 = 0;
LABEL_42:
          v72 = v28;
        }
LABEL_20:
        v113 = 0;
        v76 = 0;
        v79 = 0;
        v77 = v117;
        v78 = v118;
        if (v117 - 2 < 9)
        {
          v79 = v119;
          if (v119)
          {
            v76 = v116;
            goto LABEL_23;
          }
          v29 = v116;
          goto LABEL_44;
        }
        if (v117 == 11)
        {
          v29 = v116;
          v116 = 0;
LABEL_44:
          v76 = v29;
        }
LABEL_23:
        v117 = 0;
        v80 = 0;
        v83 = 0;
        v81 = v121;
        v82 = v122;
        if (v121 - 2 < 9)
        {
          v83 = v123;
          if (v123)
          {
            v80 = v120;
            goto LABEL_26;
          }
          v30 = v120;
          goto LABEL_46;
        }
        if (v121 == 11)
        {
          v30 = v120;
          v120 = 0;
LABEL_46:
          v80 = v30;
        }
LABEL_26:
        v121 = 0;
        v84 = 0;
        v87 = 0;
        v85 = v125;
        v86 = v126;
        if (v125 - 2 >= 9)
        {
          if (v125 != 11)
            goto LABEL_29;
          v31 = v124;
          v124 = 0;
          goto LABEL_48;
        }
        v87 = v127;
        if (!v127)
        {
          v31 = v124;
LABEL_48:
          v84 = v31;
          goto LABEL_29;
        }
        v84 = v124;
LABEL_29:
        v125 = 0;
        v17 = v129;
        v129 = 0;
        v88 = v128;
        v89 = v17;
        v18 = v130;
        v130 = 0;
        v90 = v18;
        v19 = v131;
        v131 = 0;
        v91 = v19;
        v20 = v132;
        v132 = 0;
        v92 = v20;
        v93 = v10;
        LOWORD(v94) = v13;
        HIWORD(v94) = v8;
        WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v95, v12);
        v21 = v50 + v6;
        *(_QWORD *)(v50 + v6 - 274) = off_1E3407270;
        *(_QWORD *)(v50 + v6 - 266) = *((_QWORD *)&v51 + 1);
        WebCore::AcceleratedEffectValues::AcceleratedEffectValues(v50 + v6 - 258, (uint64_t)&v52);
        v23 = v93;
        v93 = 0;
        *(_QWORD *)(v21 - 10) = v23;
        *(_DWORD *)(v21 - 2) = v94;
        v24 = v93;
        v93 = 0;
        if (v24)
        {
          if (v24[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
          else
            --v24[2];
        }
        ++v5;
        WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v52, v22);
        v6 += 280;
        if (v5 >= *(unsigned int *)(v2 + 108))
          goto LABEL_65;
      }
      v59 = v99;
      if (v99)
      {
        v57 = v97;
        goto LABEL_11;
      }
      v25 = v97;
      goto LABEL_36;
    }
    LODWORD(v5) = 0;
  }
  else
  {
    LODWORD(v5) = 0;
    v48 = 0;
    v50 = 0;
  }
LABEL_65:
  v32 = *(void (****)(__int128 *__return_ptr))(v2 + 120);
  if (v32)
  {
    (**v32)(&v51);
    v33 = v51;
  }
  else
  {
    v33 = 0;
  }
  v47 = *(_WORD *)(v2 + 128);
  v34 = *(_DWORD **)(v2 + 24);
  if (v34)
    ++v34[2];
  v35 = *(_OWORD *)(v2 + 48);
  v51 = *(_OWORD *)(v2 + 32);
  v52 = v35;
  v36 = *(_OWORD *)(v2 + 80);
  v53 = *(_OWORD *)(v2 + 64);
  v54 = v36;
  v37 = *(_BYTE *)(v2 + 112);
  v38 = *(_BYTE *)(v2 + 113);
  v39 = *(_BYTE *)(v2 + 132);
  v40 = *(_QWORD *)(v2 + 136);
  v41 = *(_QWORD *)(v2 + 144);
  v42 = *(_QWORD *)(v2 + 152);
  v44 = *(_QWORD *)(v2 + 160);
  v43 = *(_QWORD *)(v2 + 168);
  this = bmalloc::api::isoAllocate();
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E34072B8;
  if (v34)
    ++v34[2];
  *(_QWORD *)(this + 24) = v34;
  v45 = v52;
  *(_OWORD *)(this + 32) = v51;
  *(_OWORD *)(this + 48) = v45;
  v46 = v54;
  *(_OWORD *)(this + 64) = v53;
  *(_OWORD *)(this + 80) = v46;
  *(_QWORD *)(this + 96) = v50;
  *(_DWORD *)(this + 104) = v48;
  *(_DWORD *)(this + 108) = v5;
  *(_BYTE *)(this + 112) = v37;
  *(_BYTE *)(this + 113) = v38;
  *(_QWORD *)(this + 120) = v33;
  *(_WORD *)(this + 128) = v47;
  *(_WORD *)(this + 130) = 0;
  *(_BYTE *)(this + 132) = v39;
  *(_QWORD *)(this + 136) = v40;
  *(_QWORD *)(this + 144) = v41;
  *(_QWORD *)(this + 152) = v42;
  *(_QWORD *)(this + 160) = v44;
  *(_QWORD *)(this + 168) = v43;
  *a2 = this;
  if (v34)
  {
    if (v34[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
    else
      --v34[2];
  }
  return this;
}

uint64_t WebCore::AcceleratedEffect::copyWithProperties@<X0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = bmalloc::api::isoAllocate();
  result = WebCore::AcceleratedEffect::AcceleratedEffect(v6, a1, a2);
  *a3 = result;
  return result;
}

void WebCore::AcceleratedEffect::AcceleratedEffect(uint64_t a1, uint64_t a2, const WebCore::IntRect *a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  const WebCore::RenderStyle *v39;
  uint64_t v40;
  _DWORD *v41;
  __int16 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  _DWORD *v54;
  _DWORD *v55;
  _QWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  void *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  WebCore::AcceleratedEffect::Keyframe *v67;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[2];
  int v80;
  __int16 v81;
  char v82;
  int v83;
  __int16 v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  int v91;
  __int16 v92;
  char v93;
  int v94;
  __int16 v95;
  char v96;
  int v97;
  __int16 v98;
  char v99;
  int v100;
  __int16 v101;
  char v102;
  int v103;
  __int16 v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  _WORD v112[8];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  _OWORD v117[2];
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  _BYTE v122[24];
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  unsigned __int16 v128;
  int v129;
  uint64_t v130;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34072B8;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = &off_1E338CAA8;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  v72 = a1;
  *(_WORD *)(a1 + 32) = 4;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 40) = xmmword_1968A14C0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 112) = 2;
  v7 = a1 + 32;
  *(_QWORD *)(a1 + 120) = 0;
  v8 = (_DWORD **)(a1 + 120);
  *(_QWORD *)(v7 + 93) = 0;
  *(_QWORD *)(v7 + 104) = 0x3FF0000000000000;
  *(_BYTE *)(v7 + 112) = 0;
  *(_BYTE *)(v7 + 120) = 0;
  *(_BYTE *)(v7 + 128) = 0;
  *(_BYTE *)(v7 + 136) = 0;
  v9 = *(_QWORD *)(a2 + 24);
  if (v9)
    ++*(_DWORD *)(v9 + 8);
  v10 = *(_OWORD *)(a2 + 48);
  v74 = *(_OWORD *)(a2 + 32);
  v75 = v10;
  v11 = *(_OWORD *)(a2 + 80);
  v76 = *(_OWORD *)(a2 + 64);
  v77 = v11;
  *(_QWORD *)(v72 + 24) = v9;
  if (*(_DWORD *)(v6 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  else
    --*(_DWORD *)(v6 + 8);
  v12 = v75;
  *(_OWORD *)v7 = v74;
  *(_OWORD *)(v7 + 16) = v12;
  v13 = v77;
  *(_OWORD *)(v7 + 32) = v76;
  *(_OWORD *)(v7 + 48) = v13;
  *(_BYTE *)(v72 + 113) = *(_BYTE *)(a2 + 307);
  *(_BYTE *)(v72 + 112) = *(_BYTE *)(a2 + 305);
  v14 = *(_QWORD *)(a2 + 96);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      *(_BYTE *)(v72 + 132) = WebCore::WebAnimation::playState(*(WebCore::WebAnimation **)(v14 + 8)) == 2;
      *(double *)(v72 + 136) = *(double *)(v15 + 120) + 0.0;
      *(_QWORD *)(v72 + 160) = *(_QWORD *)(v15 + 104);
      *(_BYTE *)(v72 + 168) = 1;
      v16.n128_u64[0] = *(_QWORD *)(v15 + 96);
      *(_QWORD *)(v72 + 144) = v16.n128_u64[0];
      *(_BYTE *)(v72 + 152) = 1;
      if ((*(unsigned int (**)(uint64_t, __n128))(*(_QWORD *)v15 + 104))(v15, v16))
      {
        v17 = *(_DWORD **)(*(_QWORD *)(v15 + 216) + 96);
        if (v17)
        {
          ++v17[2];
          v18 = *v8;
          *v8 = v17;
          if (v18)
          {
            if (v18[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
            else
              --v18[2];
          }
        }
      }
    }
  }
  v19 = *(_QWORD *)(a2 + 120);
  if (!v19 || (v20 = *(_QWORD *)(v19 + 8)) == 0)
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 264) + 40) + 8);
  v21 = *(_DWORD *)(a2 + 156);
  if (!v21)
  {
LABEL_147:
    *(_WORD *)(v72 + 128) &= ~*a4;
    return;
  }
  v22 = *(_QWORD *)(v20 + 680);
  v23 = *(_QWORD *)(a2 + 144);
  v69 = (_QWORD *)(v7 + 64);
  v70 = v23 + 48 * v21;
  while (1)
  {
    v24 = *(_QWORD *)(v23 + 16);
    if (!v24)
    {
      v30 = 0;
      v25 = 0;
LABEL_32:
      v26 = v24 + 16 * v25;
      goto LABEL_34;
    }
    v25 = *(unsigned int *)(v24 - 4);
    v26 = v24 + 16 * v25;
    if (!*(_DWORD *)(v24 - 12))
    {
      v30 = v24 + 16 * v25;
      goto LABEL_32;
    }
    if ((_DWORD)v25)
      break;
    v30 = *(_QWORD *)(v23 + 16);
LABEL_34:
    v71 = v23;
    if (v24)
      v31 = v24 + 16 * *(unsigned int *)(v24 - 4);
    else
      v31 = 0;
    if (v31 != v30)
    {
      v32 = 0;
      while (2)
      {
        LOBYTE(v74) = 0;
        DWORD2(v74) = -1;
        v33 = *(unsigned int *)(v30 + 8);
        if ((_DWORD)v33 == -1)
          goto LABEL_151;
        ((void (*)(__int128 *, __int128 *, uint64_t))off_1E3407358[v33])(&v113, &v74, v30);
        DWORD2(v74) = v33;
        v130 = v22;
        *(_QWORD *)&v113 = &v130;
        if (!((unsigned int (*)(__int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore20CSSPropertyAnimation32animationOfPropertyIsAcceleratedERKNS_7variantIJNS8_13CSSPropertyIDENS6_10AtomStringEEEERKNS8_8SettingsEE3__0JZNS9_32animationOfPropertyIsAcceleratedESF_SI_E3__1EEEEEJRKNS0_6__implIJSB_SC_EEEEEEDcOT_DpOT0____fmatrix[v33])(&v113, &v74))goto LABEL_65;
        LOBYTE(v128) = 0;
        v129 = -1;
        v34 = DWORD2(v74);
        if (DWORD2(v74) == -1)
          goto LABEL_150;
        ((void (*)(__int128 *, unsigned __int16 *, __int128 *))off_1E3407358[DWORD2(v74)])(&v113, &v128, &v74);
        v129 = v34;
        if (v34)
          goto LABEL_150;
        if (v128 <= 0xD1u)
        {
          v35 = 2;
          switch(v128)
          {
            case 0xB2u:
              v35 = 512;
              break;
            case 0xB3u:
              v35 = 128;
              break;
            case 0xB4u:
              v35 = 64;
              break;
            case 0xB5u:
              v35 = 256;
              break;
            case 0xB6u:
              v35 = 1024;
              break;
            case 0xB7u:
              break;
            default:
              goto LABEL_62;
          }
LABEL_63:
          v129 = -1;
          if ((*a4 & (unsigned __int16)v35) == 0)
          {
            v32 |= v35;
            *(_WORD *)(v72 + 128) |= v35;
          }
LABEL_65:
          if (DWORD2(v74) != -1)
            ((void (*)(__int128 *, __int128 *))off_1E3407348[DWORD2(v74)])(&v113, &v74);
          v36 = v30 + 16;
          v30 = v26;
          if (v36 != v26)
          {
            v30 = v26;
            while (1)
            {
              v37 = *(unsigned int *)(v36 + 8);
              if ((_DWORD)v37 || *(_WORD *)v36 != 0)
              {
                if ((_DWORD)v37 == -1)
                  goto LABEL_150;
                *(_QWORD *)&v74 = &v113;
                v30 = v26;
                if (!((unsigned int (*)(__int128 *, uint64_t))off_1E3407440[v37])(&v74, v36))
                  break;
              }
              v36 += 16;
              if (v36 == v30)
                goto LABEL_79;
            }
            v30 = v36;
          }
LABEL_79:
          if (v30 == v31)
          {
            if (!v32)
              goto LABEL_114;
            v39 = *(const WebCore::RenderStyle **)(v71 + 24);
            if (v39)
            {
              WebCore::AcceleratedEffectValues::AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v113, v39, a3, 0);
            }
            else
            {
              v125 = 0;
              v123 = 0u;
              v124 = 0u;
              v119 = 1;
              v118 = 0u;
              v116 = 0u;
              memset(v117, 0, sizeof(v117));
              v114 = 0u;
              v115 = 0u;
              v113 = 0u;
              LODWORD(v113) = 1065353216;
              LODWORD(v118) = 0;
              *(_DWORD *)((char *)&v118 + 3) = 0;
              DWORD2(v118) = 0;
              *(_DWORD *)((char *)&v118 + 11) = 0;
              *(_DWORD *)((char *)&v123 + 3) = 0;
              LODWORD(v123) = 0;
              *(_DWORD *)((char *)&v123 + 11) = 0;
              DWORD2(v123) = 0;
              *(_DWORD *)((char *)&v124 + 3) = 0;
              LODWORD(v124) = 0;
              *(_DWORD *)((char *)&v124 + 11) = 0;
              DWORD2(v124) = 0;
              v121 = 0u;
              memset(v122, 0, sizeof(v122));
              v120 = 0u;
              v126 = 0u;
              v127 = 0u;
            }
            v40 = *(_QWORD *)(v71 + 8);
            v41 = *(_DWORD **)(v71 + 32);
            if (v41)
              ++v41[2];
            v42 = *(_WORD *)(v71 + 40);
            *(_QWORD *)&v74 = off_1E3407270;
            *((_QWORD *)&v74 + 1) = v40;
            v77 = v115;
            v78 = v116;
            v79[0] = v117[0];
            *(_OWORD *)((char *)v79 + 13) = *(_OWORD *)((char *)v117 + 13);
            v75 = v113;
            v76 = v114;
            v80 = 0;
            v82 = 0;
            v81 = WORD2(v118);
            if (BYTE4(v118) - 2 >= 9)
            {
              if (BYTE4(v118) == 11)
              {
                v60 = v118;
                LODWORD(v118) = 0;
                goto LABEL_119;
              }
            }
            else
            {
              v82 = BYTE6(v118);
              if (BYTE6(v118))
              {
                v80 = v118;
                goto LABEL_89;
              }
              v60 = v118;
LABEL_119:
              v80 = v60;
            }
LABEL_89:
            BYTE4(v118) = 0;
            v83 = 0;
            v85 = 0;
            v84 = WORD6(v118);
            if (BYTE12(v118) - 2 >= 9)
            {
              if (BYTE12(v118) == 11)
              {
                v61 = DWORD2(v118);
                DWORD2(v118) = 0;
                goto LABEL_121;
              }
            }
            else
            {
              v85 = BYTE14(v118);
              if (BYTE14(v118))
              {
                v83 = DWORD2(v118);
                goto LABEL_92;
              }
              v61 = DWORD2(v118);
LABEL_121:
              v83 = v61;
            }
LABEL_92:
            BYTE12(v118) = 0;
            v86 = v119;
            v43 = *((_QWORD *)&v120 + 1);
            v87 = v120;
            v120 = 0uLL;
            v88 = v43;
            v44 = v121;
            v121 = 0u;
            v89 = v44;
            v45 = *(_OWORD *)v122;
            *(_OWORD *)v122 = 0u;
            v90 = v45;
            v91 = 0;
            v93 = 0;
            v92 = *(_WORD *)&v122[20];
            if (v122[20] - 2 >= 9)
            {
              if (v122[20] == 11)
              {
                v62 = *(_DWORD *)&v122[16];
                *(_DWORD *)&v122[16] = 0;
                goto LABEL_123;
              }
            }
            else
            {
              v93 = v122[22];
              if (v122[22])
              {
                v91 = *(_DWORD *)&v122[16];
                goto LABEL_95;
              }
              v62 = *(_DWORD *)&v122[16];
LABEL_123:
              v91 = v62;
            }
LABEL_95:
            v122[20] = 0;
            v94 = 0;
            v96 = 0;
            v95 = WORD2(v123);
            if (BYTE4(v123) - 2 >= 9)
            {
              if (BYTE4(v123) == 11)
              {
                v63 = v123;
                LODWORD(v123) = 0;
                goto LABEL_125;
              }
            }
            else
            {
              v96 = BYTE6(v123);
              if (BYTE6(v123))
              {
                v94 = v123;
                goto LABEL_98;
              }
              v63 = v123;
LABEL_125:
              v94 = v63;
            }
LABEL_98:
            BYTE4(v123) = 0;
            v97 = 0;
            v99 = 0;
            v98 = WORD6(v123);
            if (BYTE12(v123) - 2 >= 9)
            {
              if (BYTE12(v123) == 11)
              {
                v64 = DWORD2(v123);
                DWORD2(v123) = 0;
                goto LABEL_127;
              }
            }
            else
            {
              v99 = BYTE14(v123);
              if (BYTE14(v123))
              {
                v97 = DWORD2(v123);
                goto LABEL_101;
              }
              v64 = DWORD2(v123);
LABEL_127:
              v97 = v64;
            }
LABEL_101:
            BYTE12(v123) = 0;
            v100 = 0;
            v102 = 0;
            v101 = WORD2(v124);
            if (BYTE4(v124) - 2 >= 9)
            {
              if (BYTE4(v124) == 11)
              {
                v65 = v124;
                LODWORD(v124) = 0;
                goto LABEL_129;
              }
            }
            else
            {
              v102 = BYTE6(v124);
              if (BYTE6(v124))
              {
                v100 = v124;
                goto LABEL_104;
              }
              v65 = v124;
LABEL_129:
              v100 = v65;
            }
LABEL_104:
            BYTE4(v124) = 0;
            v103 = 0;
            v105 = 0;
            v104 = WORD6(v124);
            if (BYTE12(v124) - 2 >= 9)
            {
              if (BYTE12(v124) != 11)
                goto LABEL_107;
              v66 = DWORD2(v124);
              DWORD2(v124) = 0;
            }
            else
            {
              v105 = BYTE14(v124);
              if (BYTE14(v124))
              {
                v103 = DWORD2(v124);
LABEL_107:
                BYTE12(v124) = 0;
                v106 = v125;
                v46 = *((_QWORD *)&v126 + 1);
                v107 = v126;
                v126 = 0uLL;
                v108 = v46;
                v47 = *((_QWORD *)&v127 + 1);
                v109 = v127;
                v127 = 0uLL;
                v110 = v47;
                v111 = v41;
                v112[0] = v42;
                v112[1] = v32;
                v48 = *(unsigned int *)(v72 + 108);
                if ((_DWORD)v48 == *(_DWORD *)(v72 + 104))
                {
                  v49 = WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v69, v48 + 1, (unint64_t)&v74);
                  v50 = v72;
                  v51 = (_QWORD *)(*(_QWORD *)(v72 + 96) + 280 * *(unsigned int *)(v72 + 108));
                  *v51 = off_1E3407270;
                  v51[1] = *(_QWORD *)(v49 + 8);
                  WebCore::AcceleratedEffectValues::AcceleratedEffectValues((uint64_t)(v51 + 2), v49 + 16);
                  v53 = *(_QWORD *)(v49 + 264);
                  *(_QWORD *)(v49 + 264) = 0;
                  v51[33] = v53;
                  v54 = v51 + 34;
                  v55 = (_DWORD *)(v49 + 272);
                }
                else
                {
                  v50 = v72;
                  v56 = (_QWORD *)(*v69 + 280 * v48);
                  *v56 = off_1E3407270;
                  v56[1] = v40;
                  WebCore::AcceleratedEffectValues::AcceleratedEffectValues((uint64_t)(v56 + 2), (uint64_t)&v75);
                  v57 = v111;
                  v111 = 0;
                  v56[33] = v57;
                  v54 = v56 + 34;
                  v55 = v112;
                }
                *v54 = *v55;
                ++*(_DWORD *)(v50 + 108);
                v58 = v111;
                v111 = 0;
                if (v58)
                {
                  if (v58[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 16))(v58);
                  else
                    --v58[2];
                }
                WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v75, v52);
                WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v113, v59);
                goto LABEL_114;
              }
              v66 = DWORD2(v124);
            }
            v103 = v66;
            goto LABEL_107;
          }
          continue;
        }
        break;
      }
      if (v128 > 0x11Bu)
      {
        if (v128 == 284)
        {
          v35 = 8;
          goto LABEL_63;
        }
        if (v128 == 351 || v128 == 451)
        {
          v35 = 4096;
          goto LABEL_63;
        }
      }
      else
      {
        switch(v128)
        {
          case 0xD2u:
            v35 = 16;
            goto LABEL_63;
          case 0xD6u:
            v35 = 32;
            goto LABEL_63;
          case 0x111u:
            v35 = 4;
            goto LABEL_63;
        }
      }
LABEL_62:
      v35 = 1;
      goto LABEL_63;
    }
LABEL_114:
    v23 = v71 + 48;
    if (v71 + 48 == v70)
      goto LABEL_147;
  }
  v27 = 16 * v25;
  while (1)
  {
    v28 = *(unsigned int *)(v24 + 8);
    if ((_DWORD)v28 || *(_WORD *)v24 != 0)
      break;
LABEL_26:
    v24 += 16;
    v27 -= 16;
    if (!v27)
    {
      v24 = v26;
LABEL_33:
      v30 = v24;
      v24 = *(_QWORD *)(v23 + 16);
      goto LABEL_34;
    }
  }
  if ((_DWORD)v28 != -1)
  {
    *(_QWORD *)&v74 = &v113;
    if (!((unsigned int (*)(__int128 *, uint64_t))off_1E3407440[v28])(&v74, v24))
      goto LABEL_33;
    goto LABEL_26;
  }
LABEL_150:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_151:
  v130 = v22;
  v67 = (WebCore::AcceleratedEffect::Keyframe *)std::__throw_bad_variant_access[abi:sn180100]();
  WebCore::AcceleratedEffect::Keyframe::~Keyframe(v67);
}

void WebCore::AcceleratedEffect::Keyframe::~Keyframe(WebCore::AcceleratedEffect::Keyframe *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffect::Keyframe *)((char *)this + 16), a2);
}

{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffect::Keyframe *)((char *)this + 16), a2);
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::AcceleratedEffect::AcceleratedEffect(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v6;
  _DWORD **v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  void *v20;
  _DWORD *v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  _DWORD *v38;
  __int16 *v39;
  _QWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _OWORD v51[4];
  _OWORD v52[2];
  int v53;
  __int16 v54;
  char v55;
  int v56;
  unsigned __int8 v57;
  char v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  int v65;
  __int16 v66;
  char v67;
  int v68;
  unsigned __int8 v69;
  char v70;
  char v71;
  int v72;
  unsigned __int8 v73;
  char v74;
  char v75;
  int v76;
  unsigned __int8 v77;
  char v78;
  char v79;
  int v80;
  unsigned __int8 v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (**v89)(WebCore::AcceleratedEffect::Keyframe *__hidden);
  uint64_t v90;
  _OWORD v91[4];
  _OWORD v92[2];
  int v93;
  __int16 v94;
  char v95;
  int v96;
  unsigned __int8 v97;
  char v98;
  char v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  int v105;
  __int16 v106;
  char v107;
  int v108;
  unsigned __int8 v109;
  char v110;
  char v111;
  int v112;
  unsigned __int8 v113;
  char v114;
  char v115;
  int v116;
  unsigned __int8 v117;
  char v118;
  char v119;
  int v120;
  unsigned __int8 v121;
  char v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _DWORD *v129;
  __int16 v130;
  __int16 v131;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E34072B8;
  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = &off_1E338CAA8;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = 4;
  *(_OWORD *)(a1 + 40) = xmmword_1968A14C0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_WORD *)(a1 + 112) = 2;
  *(_QWORD *)(a1 + 120) = 0;
  v7 = (_DWORD **)(a1 + 120);
  *(_QWORD *)(a1 + 125) = 0;
  *(_QWORD *)(a1 + 136) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  v8 = *(_QWORD *)(a2 + 24);
  if (v8)
    ++*(_DWORD *)(v8 + 8);
  *(_QWORD *)(a1 + 24) = v8;
  if (*(_DWORD *)(v6 + 8) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  else
    --*(_DWORD *)(v6 + 8);
  v9 = *(_OWORD *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 48) = v10;
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a2 + 132);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v12 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v12;
  v13 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v13;
  v14 = *(_DWORD **)(a2 + 120);
  if (v14)
    ++v14[2];
  v15 = *v7;
  *v7 = v14;
  if (v15)
  {
    if (v15[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
    else
      --v15[2];
  }
  v16 = *(_DWORD *)(a2 + 108);
  if (v16)
  {
    v17 = 280 * v16;
    for (i = *(_QWORD *)(a2 + 96) + 264; (*(_WORD *)(i + 10) & (unsigned __int16)*a3) == 0; i += 280)
    {
LABEL_43:
      v17 -= 280;
      if (!v17)
        return a1;
    }
    v19 = *(_QWORD *)(i - 256);
    WebCore::AcceleratedEffectValues::clone((WebCore::AcceleratedEffectValues *)(i - 248), (uint64_t)v51);
    v21 = *(_DWORD **)i;
    if (*(_QWORD *)i)
      ++v21[2];
    v22 = *(_WORD *)(i + 8);
    v23 = *(_WORD *)(i + 10);
    v24 = *a3;
    v89 = off_1E3407270;
    v90 = v19;
    v91[2] = v51[2];
    v91[3] = v51[3];
    v92[0] = v52[0];
    *(_OWORD *)((char *)v92 + 13) = *(_OWORD *)((char *)v52 + 13);
    v91[0] = v51[0];
    v91[1] = v51[1];
    v93 = 0;
    v95 = 0;
    v94 = v54;
    if (v54 - 2 >= 9)
    {
      if (v54 != 11)
      {
LABEL_18:
        LOBYTE(v54) = 0;
        v96 = 0;
        v99 = 0;
        v97 = v57;
        v98 = v58;
        if (v57 - 2 >= 9)
        {
          if (v57 != 11)
          {
LABEL_21:
            v57 = 0;
            v100 = v60;
            v101 = v61;
            v25 = v62;
            v61 = 0;
            v62 = 0;
            v102 = v25;
            v26 = v63;
            v63 = 0u;
            v103 = v26;
            v27 = v64;
            v64 = 0u;
            v104 = v27;
            v105 = 0;
            v107 = 0;
            v106 = v66;
            if (v66 - 2 >= 9)
            {
              if (v66 != 11)
              {
LABEL_24:
                LOBYTE(v66) = 0;
                v108 = 0;
                v111 = 0;
                v109 = v69;
                v110 = v70;
                if (v69 - 2 >= 9)
                {
                  if (v69 != 11)
                  {
LABEL_27:
                    v69 = 0;
                    v112 = 0;
                    v115 = 0;
                    v113 = v73;
                    v114 = v74;
                    if (v73 - 2 >= 9)
                    {
                      if (v73 != 11)
                      {
LABEL_30:
                        v73 = 0;
                        v116 = 0;
                        v119 = 0;
                        v117 = v77;
                        v118 = v78;
                        if (v77 - 2 >= 9)
                        {
                          if (v77 != 11)
                          {
LABEL_33:
                            v77 = 0;
                            v120 = 0;
                            v123 = 0;
                            v121 = v81;
                            v122 = v82;
                            if (v81 - 2 >= 9)
                            {
                              if (v81 != 11)
                                goto LABEL_36;
                              v49 = v80;
                              v80 = 0;
                            }
                            else
                            {
                              v123 = v83;
                              if (v83)
                              {
                                v120 = v80;
LABEL_36:
                                v28 = v24 & v23;
                                v81 = 0;
                                v29 = v85;
                                v85 = 0;
                                v124 = v84;
                                v125 = v29;
                                v30 = v86;
                                v86 = 0;
                                v126 = v30;
                                v31 = v87;
                                v87 = 0;
                                v127 = v31;
                                v32 = v88;
                                v88 = 0;
                                v128 = v32;
                                v129 = v21;
                                v130 = v22;
                                v131 = v28;
                                WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v51, v20);
                                *(_WORD *)(a1 + 128) |= v131;
                                v33 = *(unsigned int *)(a1 + 108);
                                if ((_DWORD)v33 == *(_DWORD *)(a1 + 104))
                                {
                                  v34 = WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 96, v33 + 1, (unint64_t)&v89);
                                  v35 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 280 * *(unsigned int *)(a1 + 108));
                                  *v35 = off_1E3407270;
                                  v35[1] = *(_QWORD *)(v34 + 8);
                                  WebCore::AcceleratedEffectValues::AcceleratedEffectValues((uint64_t)(v35 + 2), v34 + 16);
                                  v37 = *(_QWORD *)(v34 + 264);
                                  *(_QWORD *)(v34 + 264) = 0;
                                  v35[33] = v37;
                                  v38 = v35 + 34;
                                  v39 = (__int16 *)(v34 + 272);
                                }
                                else
                                {
                                  v40 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 280 * v33);
                                  *v40 = off_1E3407270;
                                  v40[1] = v90;
                                  WebCore::AcceleratedEffectValues::AcceleratedEffectValues((uint64_t)(v40 + 2), (uint64_t)v91);
                                  v41 = v129;
                                  v129 = 0;
                                  v40[33] = v41;
                                  v38 = v40 + 34;
                                  v39 = &v130;
                                }
                                *v38 = *(_DWORD *)v39;
                                ++*(_DWORD *)(a1 + 108);
                                v42 = v129;
                                v129 = 0;
                                if (v42)
                                {
                                  if (v42[2] == 1)
                                    (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 16))(v42);
                                  else
                                    --v42[2];
                                }
                                WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v91, v36);
                                goto LABEL_43;
                              }
                              v49 = v80;
                            }
                            v120 = v49;
                            goto LABEL_36;
                          }
                          v48 = v76;
                          v76 = 0;
                        }
                        else
                        {
                          v119 = v79;
                          if (v79)
                          {
                            v116 = v76;
                            goto LABEL_33;
                          }
                          v48 = v76;
                        }
                        v116 = v48;
                        goto LABEL_33;
                      }
                      v47 = v72;
                      v72 = 0;
                    }
                    else
                    {
                      v115 = v75;
                      if (v75)
                      {
                        v112 = v72;
                        goto LABEL_30;
                      }
                      v47 = v72;
                    }
                    v112 = v47;
                    goto LABEL_30;
                  }
                  v46 = v68;
                  v68 = 0;
                }
                else
                {
                  v111 = v71;
                  if (v71)
                  {
                    v108 = v68;
                    goto LABEL_27;
                  }
                  v46 = v68;
                }
                v108 = v46;
                goto LABEL_27;
              }
              v45 = v65;
              v65 = 0;
            }
            else
            {
              v107 = v67;
              if (v67)
              {
                v105 = v65;
                goto LABEL_24;
              }
              v45 = v65;
            }
            v105 = v45;
            goto LABEL_24;
          }
          v44 = v56;
          v56 = 0;
        }
        else
        {
          v99 = v59;
          if (v59)
          {
            v96 = v56;
            goto LABEL_21;
          }
          v44 = v56;
        }
        v96 = v44;
        goto LABEL_21;
      }
      v43 = v53;
      v53 = 0;
    }
    else
    {
      v95 = v55;
      if (v55)
      {
        v93 = v53;
        goto LABEL_18;
      }
      v43 = v53;
    }
    v93 = v43;
    goto LABEL_18;
  }
  return a1;
}

double WebCore::AcceleratedEffect::Keyframe::offset(WebCore::AcceleratedEffect::Keyframe *this)
{
  return *((double *)this + 1);
}

uint64_t WebCore::AcceleratedEffect::Keyframe::compositeOperation(WebCore::AcceleratedEffect::Keyframe *this)
{
  return *((unsigned __int16 *)this + 136);
}

void WebCore::AcceleratedEffect::apply(uint64_t a1, WebCore::AcceleratedEffectValues *a2, uint64_t a3, double a4)
{
  double v5;
  double v6;
  __n128 v8;
  double v9;
  unsigned __int8 v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  WTF *v43;
  _DWORD *v44;
  void *v45;
  _DWORD *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _BYTE v67[248];
  uint64_t v68;
  WTF *v69;
  int v70;
  unsigned int v71;
  __int16 v72;
  _OWORD v73[4];
  _OWORD v74[2];
  int v75;
  __int16 v76;
  char v77;
  int v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  int v87;
  unsigned __int8 v88;
  char v89;
  char v90;
  int v91;
  unsigned __int8 v92;
  char v93;
  char v94;
  int v95;
  unsigned __int8 v96;
  char v97;
  char v98;
  int v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  char v102;
  int v103;
  unsigned __int8 v104;
  unsigned __int8 v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[45];
  char v117;
  char v118;
  int v119;
  __int16 v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  int v127;
  unsigned __int8 v128;
  char v129;
  char v130;
  int v131;
  unsigned __int8 v132;
  char v133;
  char v134;
  int v135;
  unsigned __int8 v136;
  char v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  int v147;
  uint64_t (**v148)(WebCore::AcceleratedEffect::Keyframe *__hidden);
  uint64_t v149;
  _OWORD v150[4];
  _OWORD v151[2];
  int v152;
  __int16 v153;
  char v154;
  int v155;
  char v156;
  char v157;
  char v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  __int128 v163;
  int v164;
  __int16 v165;
  char v166;
  int v167;
  __int16 v168;
  char v169;
  int v170;
  unsigned __int8 v171;
  char v172;
  char v173;
  int v174;
  unsigned __int8 v175;
  char v176;
  char v177;
  int v178;
  unsigned __int8 v179;
  char v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  int v188;
  double v189[2];
  uint64_t (**v190)(WebCore::AcceleratedEffect::Keyframe *__hidden);
  char v191;
  char v192[8];
  __int16 v193[8];
  int v194;
  char v195[8];
  __int16 v196[8];
  int v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 168))
  {
    v5 = *(double *)(a1 + 160);
    v6 = *(double *)(a1 + 136);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 152))
      goto LABEL_138;
    v6 = *(double *)(a1 + 136);
    v5 = (a4 - *(double *)(a1 + 144)) * v6;
  }
  WebCore::AnimationEffectTiming::resolve((_QWORD *)(a1 + 24), v5, 1, (uint64_t)v189, v6);
  v9 = *(double *)&v190;
  if (*(_BYTE *)(a1 + 112) == 1)
  {
    v10 = *(_BYTE *)(a1 + 113);
    v148 = v190;
    LOBYTE(v149) = 0;
    *(_WORD *)((char *)&v149 + 1) = v10;
    *(_QWORD *)&v150[0] = 0;
    v11 = *(_DWORD *)(a1 + 108);
    if (v11)
    {
      v8.n128_u32[0] = *(_DWORD *)(a3 + 8);
      WebCore::blend(*(_WORD *)(a1 + 128) & (unsigned __int16)-*(_WORD *)(a1 + 128), (uint64_t)a2, *(_QWORD *)(a1 + 96) + 16, *(_QWORD *)(a1 + 96) + 16 + 280 * v11 - 280, (uint64_t)&v148, v8, *(float *)(a3 + 12));
      return;
    }
    __break(0xC471u);
LABEL_141:
    JUMPOUT(0x1960FD0E8);
  }
  WebCore::AcceleratedEffectValues::clone(a2, (uint64_t)&v112);
  v148 = off_1E3407270;
  v149 = 0;
  v150[2] = v114;
  v150[3] = v115;
  v151[0] = *(_OWORD *)v116;
  *(_OWORD *)((char *)v151 + 13) = *(_OWORD *)&v116[13];
  v150[0] = v112;
  v150[1] = v113;
  v152 = 0;
  v154 = 0;
  v153 = *(_WORD *)&v116[36];
  if (v116[36] - 2 < 9)
  {
    v154 = v116[38];
    if (v116[38])
    {
      v152 = *(_DWORD *)&v116[32];
      goto LABEL_11;
    }
    v47 = *(_DWORD *)&v116[32];
    goto LABEL_81;
  }
  if (v116[36] == 11)
  {
    v47 = *(_DWORD *)&v116[32];
    *(_DWORD *)&v116[32] = 0;
LABEL_81:
    v152 = v47;
  }
LABEL_11:
  v116[36] = 0;
  v155 = 0;
  v158 = 0;
  v156 = v116[44];
  v157 = v117;
  if (v116[44] - 2 < 9)
  {
    v158 = v118;
    if (v118)
    {
      v155 = *(_DWORD *)&v116[40];
      goto LABEL_14;
    }
    v48 = *(_DWORD *)&v116[40];
    goto LABEL_83;
  }
  if (v116[44] == 11)
  {
    v48 = *(_DWORD *)&v116[40];
    *(_DWORD *)&v116[40] = 0;
LABEL_83:
    v155 = v48;
  }
LABEL_14:
  v116[44] = 0;
  v159 = v119;
  v13 = v122;
  v122 = 0;
  v160 = v13;
  v14 = v123;
  v123 = 0;
  v161 = v14;
  v15 = v124;
  v124 = 0u;
  v162 = v15;
  v16 = v125;
  v125 = 0u;
  v163 = v16;
  v164 = 0;
  v166 = 0;
  v165 = WORD2(v126);
  if (BYTE4(v126) - 2 < 9)
  {
    v166 = BYTE6(v126);
    if (BYTE6(v126))
    {
      v164 = v126;
      goto LABEL_17;
    }
    v49 = v126;
    goto LABEL_85;
  }
  if (BYTE4(v126) == 11)
  {
    v49 = v126;
    LODWORD(v126) = 0;
LABEL_85:
    v164 = v49;
  }
LABEL_17:
  BYTE4(v126) = 0;
  v167 = 0;
  v169 = 0;
  v168 = WORD6(v126);
  if (BYTE12(v126) - 2 < 9)
  {
    v169 = BYTE14(v126);
    if (BYTE14(v126))
    {
      v167 = DWORD2(v126);
      goto LABEL_20;
    }
    v50 = DWORD2(v126);
    goto LABEL_87;
  }
  if (BYTE12(v126) == 11)
  {
    v50 = DWORD2(v126);
    DWORD2(v126) = 0;
LABEL_87:
    v167 = v50;
  }
LABEL_20:
  BYTE12(v126) = 0;
  v170 = 0;
  v173 = 0;
  v171 = v128;
  v172 = v129;
  if (v128 - 2 < 9)
  {
    v173 = v130;
    if (v130)
    {
      v170 = v127;
      goto LABEL_23;
    }
    v51 = v127;
    goto LABEL_89;
  }
  if (v128 == 11)
  {
    v51 = v127;
    v127 = 0;
LABEL_89:
    v170 = v51;
  }
LABEL_23:
  v128 = 0;
  v174 = 0;
  v177 = 0;
  v175 = v132;
  v176 = v133;
  if (v132 - 2 < 9)
  {
    v177 = v134;
    if (v134)
    {
      v174 = v131;
      goto LABEL_26;
    }
    v52 = v131;
    goto LABEL_91;
  }
  if (v132 == 11)
  {
    v52 = v131;
    v131 = 0;
LABEL_91:
    v174 = v52;
  }
LABEL_26:
  v132 = 0;
  v178 = 0;
  v181 = 0;
  v179 = v136;
  v180 = v137;
  if (v136 - 2 < 9)
  {
    v181 = v138;
    if (v138)
    {
      v178 = v135;
      goto LABEL_29;
    }
    v53 = v135;
    goto LABEL_93;
  }
  if (v136 == 11)
  {
    v53 = v135;
    v135 = 0;
LABEL_93:
    v178 = v53;
  }
LABEL_29:
  v136 = 0;
  v17 = v140;
  v140 = 0;
  v182 = v139;
  v183 = v17;
  v18 = v141;
  v141 = 0;
  v184 = v18;
  v19 = v142;
  v142 = 0;
  v185 = v19;
  v20 = v143;
  v143 = 0;
  v186 = v20;
  v187 = 0;
  v188 = 0;
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v112, v12);
  WebCore::AcceleratedEffectValues::clone(a2, (uint64_t)v73);
  *(_QWORD *)&v112 = off_1E3407270;
  *((_QWORD *)&v112 + 1) = 0x3FF0000000000000;
  v115 = v73[2];
  *(_OWORD *)v116 = v73[3];
  *(_OWORD *)&v116[16] = v74[0];
  *(_OWORD *)&v116[29] = *(_OWORD *)((char *)v74 + 13);
  v113 = v73[0];
  v114 = v73[1];
  v119 = 0;
  v121 = 0;
  v120 = v76;
  if (v76 - 2 < 9)
  {
    v121 = v77;
    if (v77)
    {
      v119 = v75;
      goto LABEL_32;
    }
    v54 = v75;
    goto LABEL_95;
  }
  if (v76 == 11)
  {
    v54 = v75;
    v75 = 0;
LABEL_95:
    v119 = v54;
  }
LABEL_32:
  LOBYTE(v76) = 0;
  LODWORD(v122) = 0;
  BYTE4(v122) = v79;
  *(_WORD *)((char *)&v122 + 5) = v80;
  if (v79 - 2 < 9)
  {
    BYTE6(v122) = v81;
    if (v81)
    {
      LODWORD(v122) = v78;
      goto LABEL_35;
    }
    v55 = v78;
    goto LABEL_97;
  }
  if (v79 == 11)
  {
    v55 = v78;
    v78 = 0;
LABEL_97:
    LODWORD(v122) = v55;
  }
LABEL_35:
  v79 = 0;
  LOBYTE(v123) = v82;
  *(_QWORD *)&v124 = v83;
  v22 = v84;
  v83 = 0;
  v84 = 0;
  *((_QWORD *)&v124 + 1) = v22;
  v23 = v85;
  v85 = 0u;
  v125 = v23;
  v24 = v86;
  v86 = 0u;
  v126 = v24;
  v127 = 0;
  v130 = 0;
  v128 = v88;
  v129 = v89;
  if (v88 - 2 < 9)
  {
    v130 = v90;
    if (v90)
    {
      v127 = v87;
      goto LABEL_38;
    }
    v56 = v87;
    goto LABEL_99;
  }
  if (v88 == 11)
  {
    v56 = v87;
    v87 = 0;
LABEL_99:
    v127 = v56;
  }
LABEL_38:
  v88 = 0;
  v131 = 0;
  v134 = 0;
  v132 = v92;
  v133 = v93;
  if (v92 - 2 < 9)
  {
    v134 = v94;
    if (v94)
    {
      v131 = v91;
      goto LABEL_41;
    }
    v57 = v91;
    goto LABEL_101;
  }
  if (v92 == 11)
  {
    v57 = v91;
    v91 = 0;
LABEL_101:
    v131 = v57;
  }
LABEL_41:
  v92 = 0;
  v135 = 0;
  v138 = 0;
  v136 = v96;
  v137 = v97;
  if (v96 - 2 < 9)
  {
    v138 = v98;
    if (v98)
    {
      v135 = v95;
      goto LABEL_44;
    }
    v58 = v95;
    goto LABEL_103;
  }
  if (v96 == 11)
  {
    v58 = v95;
    v95 = 0;
LABEL_103:
    v135 = v58;
  }
LABEL_44:
  v96 = 0;
  LODWORD(v139) = 0;
  BYTE4(v139) = v100;
  *(_WORD *)((char *)&v139 + 5) = v101;
  if (v100 - 2 < 9)
  {
    BYTE6(v139) = v102;
    if (v102)
    {
      LODWORD(v139) = v99;
      goto LABEL_47;
    }
    v59 = v99;
    goto LABEL_105;
  }
  if (v100 == 11)
  {
    v59 = v99;
    v99 = 0;
LABEL_105:
    LODWORD(v139) = v59;
  }
LABEL_47:
  v100 = 0;
  LODWORD(v140) = 0;
  BYTE4(v140) = v104;
  *(_WORD *)((char *)&v140 + 5) = v105;
  if (v104 - 2 < 9)
  {
    BYTE6(v140) = v106;
    if (v106)
    {
      LODWORD(v140) = v103;
      goto LABEL_50;
    }
    v60 = v103;
    goto LABEL_107;
  }
  if (v104 == 11)
  {
    v60 = v103;
    v103 = 0;
LABEL_107:
    LODWORD(v140) = v60;
  }
LABEL_50:
  v104 = 0;
  v25 = v108;
  v108 = 0;
  v141 = v107;
  v142 = v25;
  v26 = v109;
  v109 = 0;
  v143 = v26;
  v27 = v110;
  v110 = 0;
  v144 = v27;
  v28 = v111;
  v111 = 0;
  v145 = v28;
  v146 = 0;
  v147 = 0;
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v73, v21);
  v30 = *(_WORD *)(a1 + 128);
  if (v30)
  {
    while (1)
    {
      v72 = v30 & -v30;
      v196[0] = v72;
      v197 = 1;
      WebCore::KeyframeInterpolation::interpolationKeyframes(a1, (uint64_t)v195, &v148, &v112, (uint64_t)&v69, v9);
      if (v197 != -1)
        ((void (*)(_OWORD *, __int16 *))off_1E3407368[v197])(v73, v196);
      v197 = -1;
      v68 = 0;
      if (!v71)
      {
        __break(0xC471u);
        JUMPOUT(0x1960FD114);
      }
      v31 = *(_QWORD *)v69;
      v68 = v31;
      v32 = *((_QWORD *)v69 + v71 - 1);
      if (v31)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31) & 1) == 0)
          break;
      }
      WebCore::AcceleratedEffectValues::AcceleratedEffectValues((uint64_t)v73, v31 + 16);
      if (v32 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32) & 1) == 0)
      {
        __break(0xC471u);
LABEL_138:
        __break(1u);
      }
      WebCore::AcceleratedEffectValues::AcceleratedEffectValues((uint64_t)v67, v32 + 16);
      v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x38);
      *v33 = off_1E3407460;
      v33[1] = &v68;
      v33[2] = &v72;
      v33[3] = v73;
      v33[4] = &v148;
      v33[5] = a3;
      v33[6] = v67;
      v66 = v33;
      v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v34 = off_1E3407488;
      v65 = v34;
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
      *v35 = off_1E34074B0;
      v35[1] = &v72;
      v35[2] = a2;
      v35[3] = v73;
      v35[4] = v67;
      v35[5] = a3;
      v64 = v35;
      v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v36 = off_1E34074D8;
      v63 = v36;
      v193[0] = v72;
      v194 = 1;
      WebCore::KeyframeInterpolation::interpolateKeyframes(a1, (uint64_t)v192, (uint64_t **)&v69, &v66, &v65, (uint64_t)&v64, &v63, v9, v189[0], *(double *)(a1 + 72));
      if (v194 != -1)
        ((void (*)(char *, __int16 *))off_1E3407368[v194])(&v191, v193);
      v194 = -1;
      v38 = v63;
      v63 = 0;
      if (v38)
        (*(void (**)(_QWORD *))(*v38 + 8))(v38);
      v39 = v64;
      v64 = 0;
      if (v39)
        (*(void (**)(_QWORD *))(*v39 + 8))(v39);
      v40 = v65;
      v65 = 0;
      if (v40)
        (*(void (**)(_QWORD *))(*v40 + 8))(v40);
      v41 = v66;
      v66 = 0;
      if (v41)
        (*(void (**)(_QWORD *))(*v41 + 8))(v41);
      WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v67, v37);
      WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v73, v42);
      v43 = v69;
      if (v69)
      {
        v69 = 0;
        v70 = 0;
        WTF::fastFree(v43, v29);
      }
      v30 &= v30 - 1;
      if (!v30)
        goto LABEL_71;
    }
    __break(0xC471u);
    goto LABEL_141;
  }
LABEL_71:
  v44 = v146;
  v146 = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 16))(v44);
    else
      --v44[2];
  }
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)&v113, v29);
  v46 = v187;
  v187 = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 16))(v46);
    else
      --v46[2];
  }
  WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)v150, v45);
}

void WebCore::blend(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6, float a7)
{
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  WTF *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  double v35;
  int v36;
  __int32 v37;
  double v38;
  int v39;
  void *v40;
  uint64_t v41;
  WTF *v42;
  __n128 v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  __int8 v50;
  __int32 v51;
  char v52;
  __int8 v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  WTF *v59;
  double v60;
  double v61;
  float v62;
  double v63;
  float v64;
  unsigned int **v65;
  unsigned int **v66;
  unsigned int *v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int **v71;
  unsigned int **v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  char v80;
  char v81;
  __int8 v82;
  __int8 v83;
  __int8 v84;
  __int8 v85;
  unsigned int v86[2];
  uint64_t v87;
  int32x2_t v88;

  if (a1 > 127)
  {
    if (a1 <= 1023)
    {
      if (a1 == 128)
        goto LABEL_13;
      if (a1 != 256)
      {
        if (a1 != 512)
          return;
LABEL_13:
        WebCore::blend((unsigned __int8 *)(a3 + 168), (unsigned __int8 *)(a4 + 168), a5, (uint64_t)v86, a6);
        v14 = (_DWORD *)(a2 + 168);
        if ((unsigned int *)(a2 + 168) == v86)
        {
          if (LOBYTE(v86[1]) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v86[0]);
          }
          return;
        }
        if (*(_BYTE *)(a2 + 172) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v14);
        }
        v15 = LOBYTE(v86[1]);
        *(_WORD *)(a2 + 172) = v86[1];
        if (v15 - 2 >= 9)
        {
          if (v15 > 0xD)
            return;
          if (((1 << v15) & 0x3003) != 0)
          {
            *v14 = 0;
            return;
          }
          if (v15 != 11)
            return;
        }
        else
        {
          v16 = BYTE2(v86[1]);
          *(_BYTE *)(a2 + 174) = BYTE2(v86[1]);
          if (v16)
          {
            *v14 = v86[0];
            return;
          }
        }
        *v14 = v86[0];
        return;
      }
      WebCore::blend((unsigned __int8 *)(a3 + 176), (unsigned __int8 *)(a4 + 176), a5, (uint64_t)v86, a6);
      WebCore::blend((unsigned __int8 *)(a3 + 184), (unsigned __int8 *)(a4 + 184), a5, (uint64_t)&v88, v43);
      v44 = LOBYTE(v86[1]);
      v45 = LOBYTE(v86[1]) - 2;
      if (v45 >= 9)
      {
        if (LOBYTE(v86[1]) != 11)
        {
          v46 = 0;
          v47 = 0;
LABEL_65:
          v48 = v88.u8[4];
          v49 = v88.u8[4] - 2;
          if (v49 >= 9)
          {
            if (v88.u8[4] != 11)
            {
              v51 = 0;
              v50 = 0;
LABEL_68:
              v52 = BYTE1(v86[1]);
              v53 = v88.i8[5];
              if (*(_BYTE *)(a2 + 180) == 11)
              {
                v80 = v46;
                v81 = BYTE1(v86[1]);
                v82 = v50;
                v84 = v88.i8[5];
                v78 = v47;
                v79 = LOBYTE(v86[1]) - 2;
                v77 = LOBYTE(v86[1]);
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 176));
                v50 = v82;
                v53 = v84;
                v44 = v77;
                v47 = v78;
                v45 = v79;
                v46 = v80;
                v52 = v81;
              }
              *(_BYTE *)(a2 + 180) = v44;
              *(_BYTE *)(a2 + 181) = v52;
              if (v45 < 9)
              {
                *(_BYTE *)(a2 + 182) = v46;
LABEL_71:
                *(_DWORD *)(a2 + 176) = v47;
                goto LABEL_72;
              }
              if (v44 <= 0xD)
              {
                if (((1 << v44) & 0x3003) != 0)
                {
                  v47 = 0;
                  goto LABEL_71;
                }
                if (v44 == 11)
                  goto LABEL_71;
              }
LABEL_72:
              if (*(_BYTE *)(a2 + 188) == 11)
              {
                v83 = v50;
                v85 = v53;
                {
                  WebCore::calculationValues(void)::map = 1;
                  qword_1ECE90C98 = 0;
                }
                WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a2 + 184));
                v50 = v83;
                v53 = v85;
              }
              *(_BYTE *)(a2 + 188) = v48;
              *(_BYTE *)(a2 + 189) = v53;
              if (v49 >= 9)
              {
                if (v48 > 0xD)
                  return;
                if (((1 << v48) & 0x3003) != 0)
                {
                  *(_DWORD *)(a2 + 184) = 0;
                  return;
                }
                if (v48 != 11)
                  return;
              }
              else
              {
                *(_BYTE *)(a2 + 190) = v50;
              }
              *(_DWORD *)(a2 + 184) = v51;
              return;
            }
            v50 = 0;
          }
          else
          {
            v50 = v88.i8[6];
          }
          v51 = v88.i32[0];
          goto LABEL_68;
        }
        v46 = 0;
      }
      else
      {
        v46 = BYTE2(v86[1]);
      }
      v47 = v86[0];
      goto LABEL_65;
    }
    if (a1 != 1024)
    {
      if (a1 == 2048)
      {
        WebCore::FilterOperations::blend((unsigned int *)(a4 + 216), (unsigned int *)(a3 + 216), a5, (uint64_t)v86);
        v58 = *(unsigned int *)(a2 + 228);
        if ((_DWORD)v58)
        {
          v71 = *(unsigned int ***)(a2 + 216);
          v72 = &v71[v58];
          do
          {
            v73 = *v71;
            *v71 = 0;
            if (v73)
            {
              v74 = v73 + 2;
              do
              {
                v75 = __ldaxr(v74);
                v76 = v75 - 1;
              }
              while (__stlxr(v76, v74));
              if (!v76)
              {
                atomic_store(1u, v73 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 8))(v73);
              }
            }
            ++v71;
          }
          while (v71 != v72);
        }
        v59 = *(WTF **)(a2 + 216);
        if (v59)
        {
          *(_QWORD *)(a2 + 216) = 0;
          *(_DWORD *)(a2 + 224) = 0;
          WTF::fastFree(v59, v57);
        }
        *(_QWORD *)(a2 + 216) = *(_QWORD *)v86;
        *(_QWORD *)(a2 + 224) = v87;
      }
      else if (a1 == 4096)
      {
        WebCore::FilterOperations::blend((unsigned int *)(a4 + 232), (unsigned int *)(a3 + 232), a5, (uint64_t)v86);
        v20 = *(unsigned int *)(a2 + 244);
        if ((_DWORD)v20)
        {
          v65 = *(unsigned int ***)(a2 + 232);
          v66 = &v65[v20];
          do
          {
            v67 = *v65;
            *v65 = 0;
            if (v67)
            {
              v68 = v67 + 2;
              do
              {
                v69 = __ldaxr(v68);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, v68));
              if (!v70)
              {
                atomic_store(1u, v67 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v67 + 8))(v67);
              }
            }
            ++v65;
          }
          while (v65 != v66);
        }
        v21 = *(WTF **)(a2 + 232);
        if (v21)
        {
          *(_QWORD *)(a2 + 232) = 0;
          *(_DWORD *)(a2 + 240) = 0;
          WTF::fastFree(v21, v19);
        }
        *(_QWORD *)(a2 + 232) = *(_QWORD *)v86;
        *(_QWORD *)(a2 + 240) = v87;
      }
      return;
    }
    LODWORD(v28) = *(unsigned __int8 *)(a3 + 212);
    if ((_DWORD)v28 == *(unsigned __int8 *)(a4 + 212))
    {
      if (!*(_BYTE *)(a5 + 8))
      {
        v29 = *(float *)(a3 + 208);
        v30 = *(float *)(a4 + 208);
        if (*(_BYTE *)(a5 + 10) == 1)
        {
          v63 = *(double *)(a5 + 16);
          if (v63 != 0.0)
          {
            v64 = v63 * v30;
            v29 = v29 + v64;
            v30 = v30 + v64;
          }
        }
        v31 = v29 + v29;
        if (!*(_BYTE *)(a5 + 9))
          v31 = v29;
        v32 = v31 + (float)(v30 - v29) * *(double *)a5;
        v33 = -3.4028e38;
        if (v32 > -3.4028e38)
          v33 = v32;
        if (v32 >= 3.4028e38)
          v34 = 3.4028e38;
        else
          v34 = v33;
        goto LABEL_91;
      }
    }
    else
    {
      *(_WORD *)(a5 + 8) = 1;
      v60 = 0.0;
      if (*(double *)a5 >= 0.5)
        v60 = 1.0;
      *(double *)a5 = v60;
    }
    if (*(double *)a5 == 0.0)
      v28 = a3 + 208;
    else
      v28 = a4 + 208;
    v34 = *(float *)v28;
    LOBYTE(v28) = *(_BYTE *)(v28 + 4);
LABEL_91:
    *(float *)(a2 + 208) = v34;
    *(_BYTE *)(a2 + 212) = v28;
    return;
  }
  if (a1 > 15)
  {
    switch(a1)
    {
      case 16:
        v26 = *(_QWORD *)(a4 + 152);
        if (v26)
        {
          (*(void (**)(unsigned int *__return_ptr, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v26 + 64))(v86, v26, *(_QWORD *)(a3 + 152), a5, 0);
          v27 = *(_QWORD *)v86;
          *(_QWORD *)v86 = 0;
          v13 = *(_DWORD **)(a2 + 152);
          *(_QWORD *)(a2 + 152) = v27;
          if (v13)
            goto LABEL_78;
        }
        break;
      case 32:
        v54 = *(_QWORD *)(a4 + 144);
        if (v54)
        {
          (*(void (**)(unsigned int *__return_ptr, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v54 + 64))(v86, v54, *(_QWORD *)(a3 + 144), a5, 0);
          v55 = *(_QWORD *)v86;
          *(_QWORD *)v86 = 0;
          v13 = *(_DWORD **)(a2 + 144);
          *(_QWORD *)(a2 + 144) = v55;
          if (v13)
            goto LABEL_78;
        }
        break;
      case 64:
        v17 = *(_QWORD *)(a3 + 160);
        if (v17)
        {
          (*(void (**)(unsigned int *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 40))(v86, v17, *(_QWORD *)(a4 + 160), a5);
          v18 = *(_QWORD *)v86;
          *(_QWORD *)v86 = 0;
          v13 = *(_DWORD **)(a2 + 160);
          *(_QWORD *)(a2 + 160) = v18;
          if (v13)
            goto LABEL_78;
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 2:
        v22 = *(float *)a3;
        v23 = *(float *)a4;
        if (*(_BYTE *)(a5 + 10) == 1)
        {
          v61 = *(double *)(a5 + 16);
          if (v61 != 0.0)
          {
            v62 = v61 * v23;
            v22 = v22 + v62;
            v23 = v23 + v62;
          }
        }
        v24 = v22 + v22;
        if (!*(_BYTE *)(a5 + 9))
          v24 = v22;
        v25 = v24 + (float)(v23 - v22) * *(double *)a5;
        *(float *)a2 = v25;
        break;
      case 4:
        v35 = a6.n128_f32[0] * 64.0;
        if (v35 > -2147483650.0)
          v36 = (int)v35;
        else
          v36 = 0x80000000;
        if (v35 < 2147483650.0)
          v37 = v36;
        else
          v37 = 0x7FFFFFFF;
        v88.i32[0] = v37;
        v38 = a7 * 64.0;
        if (v38 >= 2147483650.0)
        {
          v39 = 0x7FFFFFFF;
        }
        else if (v38 <= -2147483650.0)
        {
          v39 = 0x80000000;
        }
        else
        {
          v39 = (int)v38;
        }
        v88.i32[1] = v39;
        WebCore::TransformOperations::blend(a4 + 120, (WebCore::TransformOperations *)(a3 + 120), &v88, (double *)a5, 0, (uint64_t)v86);
        v41 = *(unsigned int *)(a2 + 132);
        if ((_DWORD)v41)
          WTF::VectorDestructor<true,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>::destruct(*(_DWORD **)(a2 + 120), (_DWORD **)(*(_QWORD *)(a2 + 120) + 8 * v41));
        v42 = *(WTF **)(a2 + 120);
        if (v42)
        {
          *(_QWORD *)(a2 + 120) = 0;
          *(_DWORD *)(a2 + 128) = 0;
          WTF::fastFree(v42, v40);
        }
        *(_QWORD *)(a2 + 120) = *(_QWORD *)v86;
        *(_QWORD *)(a2 + 128) = v87;
        break;
      case 8:
        v11 = *(_QWORD *)(a4 + 136);
        if (!v11)
          return;
        (*(void (**)(unsigned int *__return_ptr, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v11 + 64))(v86, v11, *(_QWORD *)(a3 + 136), a5, 0);
        v12 = *(_QWORD *)v86;
        *(_QWORD *)v86 = 0;
        v13 = *(_DWORD **)(a2 + 136);
        *(_QWORD *)(a2 + 136) = v12;
        if (!v13)
          return;
LABEL_78:
        v56 = v13[2] - 1;
        if (v13[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
          v13 = *(_DWORD **)v86;
          *(_QWORD *)v86 = 0;
          if (!v13)
            return;
          v56 = v13[2] - 1;
          if (v13[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
            return;
          }
        }
        v13[2] = v56;
        return;
      default:
        return;
    }
  }
}

WTF *WebCore::AcceleratedEffect::validateFilters(WebCore::AcceleratedEffectValues const&,WTF::OptionSet<WebCore::AcceleratedEffectProperty> &)::$_2::operator()(uint64_t **a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  WTF *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 **v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 **v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  _WORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;

  v2 = (int)a2;
  v4 = a1[2];
  v5 = *a1;
  v6 = **a1;
  v46 = 0;
  v47 = 0;
  v7 = *(_DWORD *)(v6 + 108);
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_QWORD *)(v6 + 96);
    v11 = 280 * v7;
    while (1)
    {
      if ((*(_WORD *)(v10 + 274) & (unsigned __int16)v2) != 0)
      {
        if (!v9)
        {
          if (*(double *)(v10 + 8) == 0.0)
          {
            v9 = 0;
          }
          else
          {
            v12 = v5[1];
            v45 = v12;
            if ((_DWORD)v47)
            {
              v13 = 0;
              *(_QWORD *)v8 = v12;
            }
            else
            {
              v18 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v46, 1uLL, (unint64_t)&v45);
              v13 = HIDWORD(v47);
              *(_QWORD *)&v46[8 * HIDWORD(v47)] = *(_QWORD *)v18;
            }
            v9 = v13 + 1;
            HIDWORD(v47) = v9;
          }
        }
        v15 = v10 + 16;
        v45 = v10 + 16;
        v16 = v9;
        if (v9 != (_DWORD)v47)
        {
          v8 = v46;
LABEL_18:
          *(_QWORD *)&v8[8 * v16] = v15;
          goto LABEL_19;
        }
      }
      else
      {
        v14 = *(_DWORD *)(v6 + 108);
        if (!v14)
        {
LABEL_69:
          __break(0xC471u);
          JUMPOUT(0x1960FDCFCLL);
        }
        if (v10 != *(_QWORD *)(v6 + 96) + 280 * v14 - 280 || *(double *)(v10 + 8) != 1.0)
          goto LABEL_20;
        v15 = v5[1];
        v45 = v15;
        v16 = v9;
        if (v9 != (_DWORD)v47)
          goto LABEL_18;
      }
      v17 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(&v46, v9 + 1, (unint64_t)&v45);
      v9 = HIDWORD(v47);
      v8 = v46;
      *(_QWORD *)&v46[8 * HIDWORD(v47)] = *(_QWORD *)v17;
LABEL_19:
      HIDWORD(v47) = ++v9;
LABEL_20:
      v10 += 280;
      v11 -= 280;
      if (!v11)
      {
        result = (WTF *)v46;
        goto LABEL_23;
      }
    }
  }
  result = 0;
  v9 = 0;
LABEL_23:
  v20 = 0;
  v21 = 1;
  do
  {
    if (v21 - 1 >= (unint64_t)v9)
      goto LABEL_69;
    v22 = *((_QWORD *)result + v21 - 1);
    if (v2 == 4096)
    {
      v23 = v22 + 232;
      v24 = *((_QWORD *)result + v21) + 232;
    }
    else
    {
      v23 = v22 + 216;
      v24 = *((_QWORD *)result + v21) + 216;
    }
    v25 = *(unsigned __int8 ***)v23;
    v26 = *(unsigned int *)(v23 + 12);
    if ((_DWORD)v26)
    {
      v27 = 8 * v26;
      v28 = *(unsigned __int8 ***)v23;
      while ((*v28)[12])
      {
        ++v28;
        v27 -= 8;
        if (!v27)
          goto LABEL_32;
      }
LABEL_59:
      v41 = 0;
LABEL_60:
      if (!result)
        goto LABEL_62;
LABEL_61:
      result = (WTF *)WTF::fastFree(result, a2);
      goto LABEL_62;
    }
LABEL_32:
    v29 = *(unsigned __int8 **)v24;
    v30 = *(unsigned int *)(v24 + 12);
    if ((_DWORD)v30)
    {
      v31 = 8 * v30;
      a2 = *(unsigned __int8 **)v24;
      while (*(_BYTE *)(*(_QWORD *)a2 + 12))
      {
        a2 += 8;
        v31 -= 8;
        if (!v31)
          goto LABEL_36;
      }
      goto LABEL_59;
    }
LABEL_36:
    if (v30 >= v26)
      v32 = *(unsigned int *)(v23 + 12);
    else
      v32 = *(unsigned int *)(v24 + 12);
    if (v32)
    {
      do
      {
        a2 = *v25;
        v33 = *(_QWORD *)v29;
        if ((*v25 != 0) != (*(_QWORD *)v29 != 0))
          goto LABEL_59;
        if (a2 && v33 != 0)
        {
          a2 = (unsigned __int8 *)a2[12];
          if ((_DWORD)a2 != *(unsigned __int8 *)(v33 + 12))
            goto LABEL_59;
        }
        v29 += 8;
        ++v25;
      }
      while (--v32);
    }
    if (!v20 || (v35 = *(_DWORD *)(v20 + 12), v26 > v35))
    {
      v35 = *(_DWORD *)(v23 + 12);
      v20 = v23;
    }
    if (v30 > v35)
      v20 = v24;
    ++v21;
  }
  while (v21 != v9);
  v36 = *(unsigned int *)(v20 + 12);
  if ((_DWORD)v36)
  {
    v37 = *(_QWORD *)v20;
    v38 = v36 - 1;
    v39 = 8 * v36;
    v40 = v37;
    v41 = 1;
    while (*(_BYTE *)(*(_QWORD *)v40 + 12) != 11 || *(_QWORD *)v40 == *(_QWORD *)(v37 + 8 * v38))
    {
      v40 += 8;
      v39 -= 8;
      if (!v39)
        goto LABEL_60;
    }
    goto LABEL_59;
  }
  v41 = 1;
  if (result)
    goto LABEL_61;
LABEL_62:
  if ((v41 & 1) == 0)
  {
    *(_WORD *)a1[1] |= v2;
    *((_WORD *)v4 + 64) &= ~(_WORD)v2;
    *((_WORD *)v4 + 65) |= v2;
    v42 = *((_DWORD *)v4 + 27);
    if (v42)
    {
      v43 = 280 * v42;
      v44 = (_WORD *)(v4[12] + 274);
      do
      {
        *v44 &= ~(_WORD)v2;
        v44 += 140;
        v43 -= 280;
      }
      while (v43);
    }
  }
  return result;
}

unint64_t WebCore::AcceleratedEffect::keyframeAtIndex(unint64_t this, unint64_t a2)
{
  if (*(unsigned int *)(this + 108) > a2)
    return *(_QWORD *)(this + 96) + 280 * a2;
  __break(0xC471u);
  return this;
}

uint64_t WebCore::AcceleratedEffect::timingFunctionForKeyframe(WebCore::AcceleratedEffect *this, const WebCore::KeyframeInterpolation::Keyframe *a2)
{
  uint64_t result;
  char *v5;

  if (!(*(unsigned int (**)(const WebCore::KeyframeInterpolation::Keyframe *))(*(_QWORD *)a2 + 24))(a2))
    return 0;
  if (*((unsigned __int8 *)this + 112) > 1u)
  {
    v5 = (char *)a2 + 264;
    return *(_QWORD *)v5;
  }
  if (*((_BYTE *)this + 112) || (result = *((_QWORD *)a2 + 33)) == 0)
  {
    v5 = (char *)this + 120;
    return *(_QWORD *)v5;
  }
  return result;
}

WebCore::AcceleratedEffectValues *WebCore::AcceleratedEffect::isPropertyAdditiveOrCumulative(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebCore::AcceleratedEffectValues *v4;
  const WebCore::RenderStyle *v5;
  const WebCore::IntRect *v6;
  const WebCore::RenderLayerModelObject *v7;
  char v8;
  char *v9;

  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 == -1)
  {
    v4 = (WebCore::AcceleratedEffectValues *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::AcceleratedEffectValues::AcceleratedEffectValues(v4, v5, v6, v7);
  }
  else
  {
    v9 = &v8;
    return (WebCore::AcceleratedEffectValues *)((uint64_t (*)(char **, uint64_t))off_1E34074F0[v2])(&v9, a2 + 8);
  }
}

WebCore::AcceleratedEffectValues *WebCore::AcceleratedEffectValues::AcceleratedEffectValues(WebCore::AcceleratedEffectValues *this, const WebCore::RenderStyle *a2, const WebCore::IntRect *a3, const WebCore::RenderLayerModelObject *a4)
{
  WTF **v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v11;
  char v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const WebCore::RenderElement *v20;
  char v21;
  int v22;
  char v23;
  char v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v37;
  WebCore::TranslateTransformOperation *v38;
  _DWORD *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  int v48;
  unint64_t v49;
  float v50;
  char v51;
  unsigned int v52;
  unsigned __int8 v53;
  unsigned int v54;
  int v55;
  unint64_t v56;
  float v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  float v67;
  char v68;
  BOOL v69;
  float v70;
  char v71;
  float v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  float v78;
  float v79;
  unint64_t v80;
  unint64_t v81;
  const WebCore::RenderStyle *v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  unsigned int v86;
  char v87;
  unsigned int v88;
  char v89;
  int v90;
  int v91;
  unsigned int v92;
  char v93;
  unsigned int v94;
  char v95;
  unint64_t v96;
  float v97;
  int v98;
  unint64_t v99;
  float v100;
  float v101;
  float v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  float v106;
  float v107;
  char v108;
  float v109;
  int v110;
  unint64_t v111;
  float v112;
  float v113;
  uint64_t v114;
  unsigned int v115;
  char v116;
  unsigned int v117;
  char v118;
  int v119;
  int v120;
  unsigned int v121;
  char v122;
  unsigned int v123;
  char v124;
  unint64_t v125;
  float v126;
  int v127;
  unint64_t v128;
  float v129;
  float v130;
  float v131;
  unsigned int v132;
  unsigned int v133;
  char v134;
  float v135;
  char v136;
  float v137;
  float v138;
  int v139;
  unint64_t v140;
  float v141;
  float v142;
  const WebCore::RenderStyle *v143;
  unsigned __int8 *v144;
  uint64_t v145;
  unsigned __int8 *v146;
  _DWORD *v147;
  unsigned int v148;
  float v149;
  uint64_t v150;
  float v151;
  float v152;
  float v153;
  int v154;
  int v155;
  unsigned int v157;
  unint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unint64_t v162;
  unint64_t v163;
  unsigned int v164;
  unint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  float *v175;
  int v176;
  unsigned int v177;
  float *v178;
  unsigned int v179;
  float *v180;
  int v181;
  float *v182;
  unsigned int *v183;
  float *v184;
  float *v185;
  const WebCore::RenderStyle *v186;
  _BYTE v187[17];
  __int128 v188;
  _BYTE v189[31];
  char v190;
  char v191;
  char v192;
  float v193;
  unsigned __int8 v194;
  char v195;
  char v196;
  unsigned int v197;
  unsigned __int8 v198;
  char v199;
  char v200;
  float v201;
  unsigned __int8 v202;
  char v203;
  char v204;
  unsigned int v205;
  unsigned __int8 v206;
  char v207;
  char v208;
  float v209;
  char v210;
  char v211;
  char v212;
  float v213;
  char v214;
  unsigned __int8 v215;
  char v216;
  __int128 v217;
  __int128 v218;
  _OWORD v219[2];
  int v220;
  char v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 4) = 0;
  *((_BYTE *)this + 92) = 0;
  *((_DWORD *)this + 24) = 0;
  v185 = (float *)((char *)this + 96);
  *((_DWORD *)this + 26) = 0;
  v175 = (float *)((char *)this + 104);
  *(_DWORD *)((char *)this + 99) = 0;
  *(_DWORD *)((char *)this + 107) = 0;
  *((_BYTE *)this + 112) = 1;
  *(_OWORD *)((char *)this + 120) = 0u;
  v6 = (WTF **)((char *)this + 120);
  *((_DWORD *)this + 44) = 0;
  v178 = (float *)((char *)this + 176);
  *((_DWORD *)this + 46) = 0;
  v180 = (float *)((char *)this + 184);
  *(_DWORD *)((char *)this + 179) = 0;
  *((_DWORD *)this + 48) = 0;
  v184 = (float *)((char *)this + 192);
  *((_DWORD *)this + 50) = 0;
  v182 = (float *)((char *)this + 200);
  *(_DWORD *)((char *)this + 187) = 0;
  *(_DWORD *)((char *)this + 195) = 0;
  *(_DWORD *)((char *)this + 203) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_BYTE *)this + 212) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_QWORD *)((char *)this + 167) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  v183 = (unsigned int *)((char *)this + 216);
  *(_OWORD *)((char *)this + 232) = 0u;
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32);
  *(_DWORD *)this = *(_DWORD *)(v7 + 4);
  v9 = *((_DWORD *)a3 + 2);
  v8 = *((_DWORD *)a3 + 3);
  if (a4)
  {
    v11 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 40) + 44);
    if (v11 >= 5)
      v12 = 2;
    else
      v12 = 0x705020406uLL >> (8 * v11);
    v13 = (*(float (**)(const WebCore::RenderLayerModelObject *, _QWORD))(*(_QWORD *)a4 + 752))(a4, v12 & 7);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    WebCore::MotionPath::motionPathDataForRenderer(a4, v20, v187);
    v21 = v187[0];
    v217 = *(_OWORD *)&v187[1];
    v218 = v188;
    v219[0] = *(_OWORD *)v189;
    *(_OWORD *)((char *)v219 + 15) = *(_OWORD *)&v189[15];
    v22 = *((_BYTE *)a4 + 52) & 7;
    if (v22 == 4 && (*((_BYTE *)a4 + 53) & 1) == 0)
      v23 = 1;
    else
      v23 = (v22 == 4) & *((_BYTE *)a4 + 53);
    v24 = v190;
    v25 = *((unsigned __int8 *)this + 92);
    *((float *)this + 1) = v13;
    v26 = v218;
    *(_OWORD *)((char *)this + 21) = v217;
    *(_OWORD *)((char *)this + 37) = v26;
    *(_OWORD *)((char *)this + 53) = v219[0];
    *(_OWORD *)((char *)this + 68) = *(_OWORD *)((char *)v219 + 15);
    if (!v25)
      *((_BYTE *)this + 92) = 1;
    *((_DWORD *)this + 2) = v15;
    *((_DWORD *)this + 3) = v17;
    *((_DWORD *)this + 4) = v19;
    *((_BYTE *)this + 20) = v21;
    *((_BYTE *)this + 84) = v24;
    *((_BYTE *)this + 88) = v23;
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 32);
  }
  v27 = *(_QWORD *)(v7 + 40);
  v28 = (float)v9;
  *((_BYTE *)this + 112) = *(_BYTE *)(v27 + 44);
  v29 = (float)v8;
  *(float *)&v217 = (float)v9;
  *((float *)&v217 + 1) = (float)v8;
  v30 = *(unsigned int *)(v27 + 20);
  if ((_DWORD)v30)
  {
    if (v30 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1960FF220);
    }
    v31 = WTF::fastMalloc((WTF *)(8 * v30));
    if (*(_DWORD *)(v27 + 20))
    {
      v32 = 0;
      do
      {
        v33 = v32;
        v34 = *(_QWORD *)(*(_QWORD *)(v27 + 8) + 8 * v32);
        (*(void (**)(_BYTE *__return_ptr, uint64_t, __int128 *))(*(_QWORD *)v34 + 24))(v187, v34, &v217);
        ++v32;
        *(_QWORD *)(v31 + 8 * v33) = *(_QWORD *)v187;
      }
      while (v32 < *(unsigned int *)(v27 + 20));
    }
    else
    {
      LODWORD(v32) = 0;
    }
  }
  else
  {
    LODWORD(v32) = 0;
    v31 = 0;
  }
  v35 = *((unsigned int *)this + 33);
  v36 = (WTF *)*((_QWORD *)this + 15);
  if ((_DWORD)v35)
  {
    WTF::VectorDestructor<true,WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>>::destruct(v36, (_DWORD **)v36 + v35);
    v36 = *v6;
    if (!*v6)
      goto LABEL_20;
  }
  else if (!v36)
  {
    goto LABEL_20;
  }
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  WTF::fastFree(v36, a2);
LABEL_20:
  *((_QWORD *)this + 15) = v31;
  *((_DWORD *)this + 32) = v30;
  *((_DWORD *)this + 33) = v32;
  v37 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 40);
  v38 = *(WebCore::TranslateTransformOperation **)(v37 + 320);
  if (v38)
  {
    *(_QWORD *)&v217 = __PAIR64__(LODWORD(v29), LODWORD(v28));
    WebCore::TranslateTransformOperation::selfOrCopyWithResolvedCalculatedValues(v38, (const WebCore::FloatSize *)&v217, (uint64_t *)v187);
    v39 = (_DWORD *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = *(_QWORD *)v187;
    if (v39)
    {
      if (v39[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
      else
        --v39[2];
    }
    v37 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 40);
  }
  v40 = *(_QWORD *)(v37 + 312);
  if (v40)
  {
    ++*(_DWORD *)(v40 + 8);
    v41 = (_DWORD *)*((_QWORD *)this + 18);
    *((_QWORD *)this + 18) = v40;
    if (v41)
    {
      if (v41[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
      else
        --v41[2];
    }
  }
  v42 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 40) + 304);
  if (v42)
  {
    ++*(_DWORD *)(v42 + 8);
    v43 = (_DWORD *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 19) = v42;
    if (v43)
    {
      if (v43[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
      else
        --v43[2];
    }
  }
  v186 = a2;
  v44 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 40);
  v187[6] = 0;
  v187[4] = *(_BYTE *)(v44 + 28);
  v45 = v187[4];
  v46 = *(_BYTE *)(v44 + 29);
  v187[5] = v46;
  v47 = v187[4] - 2;
  if (v47 >= 9)
  {
    if (v187[4] == 11)
    {
      *(_DWORD *)v187 = *(_DWORD *)(v44 + 24);
      v73 = *(unsigned int *)v187;
      WebCore::Length::ref((int *)v187);
      v49 = v73;
      v48 = 0;
      goto LABEL_36;
    }
    v49 = 0;
    v48 = 0;
    v51 = 1;
    v50 = 0.0;
  }
  else
  {
    if (!*(_BYTE *)(v44 + 30))
    {
      v48 = 0;
      v49 = *(unsigned int *)(v44 + 24);
LABEL_36:
      v50 = *(float *)&v49;
      v51 = 1;
      goto LABEL_40;
    }
    v51 = 0;
    v50 = *(float *)(v44 + 24);
    v49 = LODWORD(v50);
    v48 = 1;
  }
LABEL_40:
  BYTE4(v217) = *(_BYTE *)(v44 + 36);
  v52 = BYTE4(v217);
  v53 = *(_BYTE *)(v44 + 37);
  *(_WORD *)((char *)&v217 + 5) = v53;
  v54 = BYTE4(v217) - 2;
  if (v54 >= 9)
  {
    if (BYTE4(v217) == 11)
    {
      v74 = *(unsigned int *)(v44 + 32);
      LODWORD(v217) = v74;
      v171 = v49;
      v75 = v48;
      WebCore::Length::ref((int *)&v217);
      v48 = v75;
      v56 = v74;
      v49 = v171;
      v55 = 0;
      goto LABEL_43;
    }
    v56 = 0;
    v55 = 0;
    v58 = 1;
    v57 = 0.0;
  }
  else
  {
    if (!*(_BYTE *)(v44 + 38))
    {
      v55 = 0;
      v56 = *(unsigned int *)(v44 + 32);
LABEL_43:
      v57 = *(float *)&v56;
      v58 = 1;
      goto LABEL_47;
    }
    v58 = 0;
    v57 = *(float *)(v44 + 32);
    v56 = LODWORD(v57);
    v55 = 1;
  }
LABEL_47:
  v209 = 0.0;
  v212 = 0;
  v210 = v45;
  v211 = v46;
  if (v47 >= 9)
  {
    if (v45 != 11)
    {
      v49 = 0;
      v48 = 0;
      v50 = 0.0;
      goto LABEL_50;
    }
    v48 = 0;
  }
  else
  {
    v212 = v48;
    if ((v51 & 1) == 0)
    {
      v209 = v50;
      v49 = LODWORD(v50);
      goto LABEL_50;
    }
  }
  v209 = *(float *)&v49;
  v50 = *(float *)&v49;
LABEL_50:
  v213 = 0.0;
  v216 = 0;
  v214 = v52;
  v215 = v53;
  if (v54 >= 9)
  {
    if (v52 == 11)
    {
      v213 = *(float *)&v56;
      v62 = v28;
      switch(v45)
      {
        case 0u:
        case 1u:
        case 9u:
          goto LABEL_98;
        case 3u:
LABEL_95:
          v79 = (float)SLODWORD(v50);
          if (v48)
            v79 = v50;
          v62 = (float)(v79 * v28) / 100.0;
          break;
        case 4u:
LABEL_60:
          if (v48)
            v62 = v50;
          else
            v62 = (float)(int)v49;
          break;
        case 0xBu:
          v76 = v49;
          v77 = v56;
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v209, v28);
          v56 = v77;
          v49 = v76;
          v62 = v78;
          break;
        default:
LABEL_291:
          v62 = 0.0;
          break;
      }
      goto LABEL_98;
    }
    v56 = 0;
    v55 = 0;
    v57 = 0.0;
  }
  else
  {
    v216 = v55;
    if ((v58 & 1) != 0)
    {
      v213 = *(float *)&v56;
      v57 = *(float *)&v56;
    }
    else
    {
      v213 = v57;
      v56 = LODWORD(v57);
    }
  }
  if (v45 == 11)
  {
    v59 = v56;
    v60 = v49;
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v209, v28);
    v62 = v61;
    v63 = v29;
    v49 = v60;
    v56 = v59;
    switch(v52)
    {
      case 0u:
      case 1u:
      case 9u:
        goto LABEL_99;
      case 2u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xAu:
      case 0xCu:
      case 0xDu:
        v63 = 0.0;
        break;
      case 3u:
        v72 = (float)SLODWORD(v57);
        if (v55)
          v72 = v57;
        v63 = (float)(v72 * v29) / 100.0;
        break;
      case 4u:
        v63 = (float)(int)v59;
        if (v55)
          v63 = v57;
        break;
      case 0xBu:
        goto LABEL_98;
      default:
        v63 = 0.0;
        v49 = v60;
        v56 = v59;
        break;
    }
    goto LABEL_99;
  }
  if (v52 == 11)
  {
    v62 = v28;
    switch(v45)
    {
      case 0u:
      case 1u:
      case 9u:
        break;
      case 3u:
        goto LABEL_95;
      case 4u:
        goto LABEL_60;
      default:
        goto LABEL_291;
    }
LABEL_98:
    v80 = v49;
    v81 = v56;
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v213, v29);
    v56 = v81;
    v49 = v80;
LABEL_99:
    v46 = 0;
    v53 = 0;
    v67 = v62;
    v70 = v63;
    v68 = 1;
    v64 = v45;
    v65 = v52;
    v45 = 4;
    v52 = 4;
    v71 = 1;
    goto LABEL_100;
  }
  v64 = 0;
  v65 = 0;
  v66 = v47 < 9;
  if (v47 >= 9)
    v67 = 0.0;
  else
    v67 = *(float *)&v49;
  if (v48)
    v68 = v66;
  else
    v68 = 0;
  v210 = 0;
  v69 = v54 < 9;
  if (v54 >= 9)
    v70 = 0.0;
  else
    v70 = *(float *)&v56;
  if (v55)
    v71 = v69;
  else
    v71 = 0;
  v214 = 0;
LABEL_100:
  if (*((_BYTE *)this + 100) == 11)
  {
    v168 = v64;
    v169 = v56;
    v172 = v49;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v185);
    v56 = v169;
    v49 = v172;
    v64 = v168;
  }
  *((_BYTE *)this + 100) = v45;
  *((_BYTE *)this + 101) = v46;
  if (v45 - 2 < 9)
  {
    *((_BYTE *)this + 102) = v68;
LABEL_103:
    *v185 = v67;
    goto LABEL_104;
  }
  if (v45 <= 0xD && ((1 << v45) & 0x3003) != 0)
  {
    v67 = 0.0;
    goto LABEL_103;
  }
LABEL_104:
  v82 = v186;
  if (*((_BYTE *)this + 108) == 11)
  {
    v161 = v64;
    v162 = v56;
    v163 = v49;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v175);
    v82 = v186;
    v49 = v163;
    v56 = v162;
    v64 = v161;
  }
  *((_BYTE *)this + 108) = v52;
  *((_BYTE *)this + 109) = v53;
  if (v52 - 2 < 9)
  {
    *((_BYTE *)this + 110) = v71;
LABEL_107:
    *v175 = v70;
    goto LABEL_108;
  }
  if (v52 <= 0xD && ((1 << v52) & 0x3003) != 0)
  {
    v70 = 0.0;
    goto LABEL_107;
  }
LABEL_108:
  if (v65 == 11)
  {
    v157 = v64;
    v158 = v49;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v56);
    v49 = v158;
    v64 = v157;
  }
  if (v64 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v49);
  }
  v83 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v82 + 1) + 40) + 328);
  if (v83)
    ++*(_DWORD *)(v83 + 8);
  v84 = (_DWORD *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = v83;
  if (v84)
  {
    if (v84[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v84 + 8))(v84);
    else
      --v84[2];
  }
  v85 = *(_QWORD *)(*((_QWORD *)v82 + 1) + 40);
  v201 = 0.0;
  v204 = 0;
  v202 = *(_BYTE *)(v85 + 412);
  v86 = v202;
  v87 = *(_BYTE *)(v85 + 413);
  v203 = v87;
  v88 = v202 - 2;
  if (v88 >= 9)
  {
    if (v202 == 11)
    {
      v201 = *(float *)(v85 + 408);
      *(float *)&v110 = v201;
      WebCore::Length::ref((int *)&v201);
      v89 = 0;
      v176 = v110;
      v90 = v110;
      goto LABEL_118;
    }
    v176 = 0;
    v89 = 0;
    v91 = 1;
    *(float *)&v90 = 0.0;
  }
  else
  {
    v204 = *(_BYTE *)(v85 + 414);
    v89 = v204;
    if (!v204)
    {
      v201 = *(float *)(v85 + 408);
      v176 = LODWORD(v201);
      *(float *)&v90 = v201;
LABEL_118:
      v91 = 1;
      goto LABEL_122;
    }
    v91 = 0;
    v90 = *(int *)(v85 + 408);
    v201 = *(float *)&v90;
    v176 = v90;
    v89 = 1;
  }
LABEL_122:
  v205 = 0;
  v208 = 0;
  v206 = *(_BYTE *)(v85 + 420);
  v92 = v206;
  v93 = *(_BYTE *)(v85 + 421);
  v207 = v93;
  v94 = v206 - 2;
  if (v94 >= 9)
  {
    if (v206 == 11)
    {
      v205 = *(_DWORD *)(v85 + 416);
      v111 = v205;
      WebCore::Length::ref((int *)&v205);
      v101 = v28;
      v96 = v111;
      switch(v86)
      {
        case 0u:
        case 1u:
        case 9u:
          goto LABEL_167;
        case 2u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 0xAu:
        case 0xCu:
        case 0xDu:
          goto LABEL_323;
        case 3u:
LABEL_164:
          v113 = (float)v90;
          if (!v91)
            v113 = *(float *)&v90;
          v101 = (float)(v113 * v28) / 100.0;
          break;
        case 4u:
LABEL_135:
          if (v91)
            v101 = (float)v176;
          else
            v101 = *(float *)&v90;
          break;
        case 0xBu:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v201, v28);
          v96 = v111;
          v101 = v112;
          break;
        default:
          v96 = v111;
LABEL_323:
          v101 = 0.0;
          break;
      }
      goto LABEL_167;
    }
    v96 = 0;
    v95 = 0;
    v98 = 1;
    v97 = 0.0;
  }
  else
  {
    v208 = *(_BYTE *)(v85 + 422);
    v95 = v208;
    if (v208)
    {
      v98 = 0;
      v97 = *(float *)(v85 + 416);
      v205 = LODWORD(v97);
      v96 = LODWORD(v97);
      v95 = 1;
    }
    else
    {
      v96 = *(unsigned int *)(v85 + 416);
      v205 = v96;
      v97 = *(float *)&v96;
      v98 = 1;
    }
  }
  if (v86 == 11)
  {
    v99 = v96;
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v201, v28);
    v101 = v100;
    v102 = v29;
    v96 = v99;
    switch(v92)
    {
      case 0u:
      case 1u:
      case 9u:
        break;
      case 2u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xAu:
      case 0xCu:
      case 0xDu:
        v102 = 0.0;
        break;
      case 3u:
        v109 = (float)SLODWORD(v97);
        if (!v98)
          v109 = v97;
        v102 = (float)(v109 * v29) / 100.0;
        break;
      case 4u:
        v102 = (float)(int)v99;
        if (!v98)
          v102 = v97;
        break;
      case 0xBu:
        goto LABEL_167;
      default:
        v102 = 0.0;
        goto LABEL_168;
    }
LABEL_169:
    v93 = 0;
    v87 = 0;
    v106 = v101;
    v107 = v102;
    v108 = 1;
    v103 = v86;
    v104 = v92;
    v92 = 4;
    v105 = 1;
    v86 = 4;
    goto LABEL_170;
  }
  if (v206 == 11)
  {
    v101 = v28;
    switch(v86)
    {
      case 0u:
      case 1u:
      case 9u:
        break;
      case 3u:
        goto LABEL_164;
      case 4u:
        goto LABEL_135;
      default:
        goto LABEL_323;
    }
LABEL_167:
    v99 = v96;
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v205, v29);
LABEL_168:
    v96 = v99;
    goto LABEL_169;
  }
  v103 = 0;
  v104 = 0;
  if (v88 < 9)
    v105 = v89;
  else
    v105 = 0;
  if (v88 >= 9)
    v106 = 0.0;
  else
    v106 = *(float *)&v176;
  v202 = 0;
  if (v94 >= 9)
    v107 = 0.0;
  else
    v107 = *(float *)&v96;
  if (v94 < 9)
    v108 = v95;
  else
    v108 = 0;
  v206 = 0;
LABEL_170:
  if (*((_BYTE *)this + 180) == 11)
  {
    v170 = v103;
    v173 = v96;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v178);
    v103 = v170;
    v96 = v173;
  }
  *((_BYTE *)this + 180) = v86;
  *((_BYTE *)this + 181) = v87;
  if (v86 - 2 < 9)
  {
    *((_BYTE *)this + 182) = v105;
LABEL_173:
    *v178 = v106;
    goto LABEL_174;
  }
  if (v86 <= 0xD && ((1 << v86) & 0x3003) != 0)
  {
    v106 = 0.0;
    goto LABEL_173;
  }
LABEL_174:
  if (*((_BYTE *)this + 188) == 11)
  {
    v164 = v103;
    v165 = v96;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v180);
    v96 = v165;
    v103 = v164;
  }
  *((_BYTE *)this + 188) = v92;
  *((_BYTE *)this + 189) = v93;
  if (v92 - 2 < 9)
  {
    *((_BYTE *)this + 190) = v108;
LABEL_177:
    *v180 = v107;
    goto LABEL_178;
  }
  if (v92 <= 0xD && ((1 << v92) & 0x3003) != 0)
  {
    v107 = 0.0;
    goto LABEL_177;
  }
LABEL_178:
  if (v104 == 11)
  {
    v159 = v103;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v96);
    v103 = v159;
  }
  if (v103 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v176);
  }
  v114 = *(_QWORD *)(*((_QWORD *)v186 + 1) + 40);
  v193 = 0.0;
  v196 = 0;
  v194 = *(_BYTE *)(v114 + 428);
  v115 = v194;
  v116 = *(_BYTE *)(v114 + 429);
  v195 = v116;
  v117 = v194 - 2;
  if (v117 >= 9)
  {
    if (v194 == 11)
    {
      v193 = *(float *)(v114 + 424);
      *(float *)&v139 = v193;
      WebCore::Length::ref((int *)&v193);
      v118 = 0;
      v181 = v139;
      v119 = v139;
      goto LABEL_183;
    }
    v181 = 0;
    v118 = 0;
    v120 = 1;
    *(float *)&v119 = 0.0;
  }
  else
  {
    v196 = *(_BYTE *)(v114 + 430);
    v118 = v196;
    if (!v196)
    {
      v193 = *(float *)(v114 + 424);
      v181 = LODWORD(v193);
      *(float *)&v119 = v193;
LABEL_183:
      v120 = 1;
      goto LABEL_187;
    }
    v120 = 0;
    v119 = *(int *)(v114 + 424);
    v193 = *(float *)&v119;
    v181 = v119;
    v118 = 1;
  }
LABEL_187:
  v197 = 0;
  v200 = 0;
  v198 = *(_BYTE *)(v114 + 436);
  v121 = v198;
  v122 = *(_BYTE *)(v114 + 437);
  v199 = v122;
  v123 = v198 - 2;
  if (v123 >= 9)
  {
    if (v198 == 11)
    {
      v197 = *(_DWORD *)(v114 + 432);
      v140 = v197;
      WebCore::Length::ref((int *)&v197);
      v130 = v28;
      v125 = v140;
      switch(v115)
      {
        case 0u:
        case 1u:
        case 9u:
          goto LABEL_231;
        case 2u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 0xAu:
        case 0xCu:
        case 0xDu:
          goto LABEL_325;
        case 3u:
LABEL_228:
          v142 = (float)v119;
          if (!v120)
            v142 = *(float *)&v119;
          v130 = (float)(v142 * v28) / 100.0;
          break;
        case 4u:
LABEL_200:
          if (v120)
            v130 = (float)v181;
          else
            v130 = *(float *)&v119;
          break;
        case 0xBu:
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v193, v28);
          v125 = v140;
          v130 = v141;
          break;
        default:
          v125 = v140;
LABEL_325:
          v130 = 0.0;
          break;
      }
      goto LABEL_231;
    }
    v125 = 0;
    v124 = 0;
    v127 = 1;
    v126 = 0.0;
  }
  else
  {
    v200 = *(_BYTE *)(v114 + 438);
    v124 = v200;
    if (v200)
    {
      v127 = 0;
      v126 = *(float *)(v114 + 432);
      v197 = LODWORD(v126);
      v125 = LODWORD(v126);
      v124 = 1;
    }
    else
    {
      v125 = *(unsigned int *)(v114 + 432);
      v197 = v125;
      v126 = *(float *)&v125;
      v127 = 1;
    }
  }
  if (v115 == 11)
  {
    v128 = v125;
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v193, v28);
    v130 = v129;
    v131 = v29;
    v125 = v128;
    switch(v121)
    {
      case 0u:
      case 1u:
      case 9u:
        break;
      case 2u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xAu:
      case 0xCu:
      case 0xDu:
        v131 = 0.0;
        break;
      case 3u:
        v138 = (float)SLODWORD(v126);
        if (!v127)
          v138 = v126;
        v131 = (float)(v138 * v29) / 100.0;
        break;
      case 4u:
        v131 = (float)(int)v128;
        if (!v127)
          v131 = v126;
        break;
      case 0xBu:
        goto LABEL_231;
      default:
        v131 = 0.0;
        goto LABEL_232;
    }
LABEL_233:
    v122 = 0;
    v116 = 0;
    v135 = v130;
    v137 = v131;
    v136 = 1;
    v132 = v115;
    v133 = v121;
    v121 = 4;
    v134 = 1;
    v115 = 4;
    goto LABEL_234;
  }
  if (v198 == 11)
  {
    v130 = v28;
    switch(v115)
    {
      case 0u:
      case 1u:
      case 9u:
        break;
      case 3u:
        goto LABEL_228;
      case 4u:
        goto LABEL_200;
      default:
        goto LABEL_325;
    }
LABEL_231:
    v128 = v125;
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v197, v29);
LABEL_232:
    v125 = v128;
    goto LABEL_233;
  }
  v132 = 0;
  v133 = 0;
  if (v117 < 9)
    v134 = v118;
  else
    v134 = 0;
  if (v117 >= 9)
    v135 = 0.0;
  else
    v135 = *(float *)&v181;
  v194 = 0;
  if (v123 < 9)
    v136 = v124;
  else
    v136 = 0;
  if (v123 >= 9)
    v137 = 0.0;
  else
    v137 = *(float *)&v125;
  v198 = 0;
LABEL_234:
  if (*((_BYTE *)this + 196) == 11)
  {
    v177 = v132;
    v179 = v125;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v184);
    v125 = v179;
    v132 = v177;
  }
  *((_BYTE *)this + 196) = v115;
  *((_BYTE *)this + 197) = v116;
  if (v115 - 2 < 9)
  {
    *((_BYTE *)this + 198) = v134;
LABEL_237:
    *v184 = v135;
    goto LABEL_238;
  }
  if (v115 <= 0xD && ((1 << v115) & 0x3003) != 0)
  {
    v135 = 0.0;
    goto LABEL_237;
  }
LABEL_238:
  if (*((_BYTE *)this + 204) == 11)
  {
    v166 = v132;
    v167 = v125;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v182);
    v125 = v167;
    v132 = v166;
  }
  *((_BYTE *)this + 204) = v121;
  *((_BYTE *)this + 205) = v122;
  if (v121 - 2 < 9)
  {
    *((_BYTE *)this + 206) = v136;
LABEL_241:
    *v182 = v137;
    goto LABEL_242;
  }
  if (v121 <= 0xD && ((1 << v121) & 0x3003) != 0)
  {
    v137 = 0.0;
    goto LABEL_241;
  }
LABEL_242:
  v143 = v186;
  if (v133 == 11)
  {
    v160 = v132;
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v125);
    v132 = v160;
  }
  v144 = (unsigned __int8 *)this + 168;
  if (v132 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v181);
  }
  v145 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v186 + 1) + 40) + 440);
  *((_DWORD *)this + 52) = v145;
  *((_BYTE *)this + 212) = BYTE4(v145);
  v146 = *(unsigned __int8 **)(*((_QWORD *)v186 + 1) + 40);
  v147 = v146 + 400;
  v148 = *((unsigned __int8 *)this + 172);
  if (v144 != v146 + 400)
  {
    if (v148 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v144);
      v143 = v186;
    }
    v148 = v146[404];
    *((_BYTE *)this + 172) = v148;
    *((_BYTE *)this + 173) = v146[405];
    if (v148 <= 0xD)
    {
      if (((1 << v148) & 0x7FC) != 0)
      {
        *((_BYTE *)this + 174) = v146[406];
        *(_DWORD *)v144 = *v147;
        goto LABEL_257;
      }
      if (((1 << v148) & 0x3003) != 0)
      {
        *(_DWORD *)v144 = 0;
      }
      else
      {
        *((_DWORD *)this + 42) = *v147;
        WebCore::Length::ref((int *)this + 42);
        v148 = *((unsigned __int8 *)this + 172);
      }
    }
  }
  if (v148 == 11 && *((_QWORD *)this + 20))
  {
    *(float *)v187 = v28;
    *(float *)&v187[4] = v29;
    WebCore::floatPointForLengthPoint(v185, (float *)v187);
    if (*((_BYTE *)this + 196))
    {
      v149 = (float)*((int *)a3 + 3);
      *(float *)v187 = (float)*((int *)a3 + 2);
      *(float *)&v187[4] = v149;
      WebCore::floatPointForLengthPoint(v184, (float *)v187);
    }
    v150 = *((_QWORD *)this + 20);
    v151 = (float)*((int *)a3 + 1);
    v152 = (float)*((int *)a3 + 2);
    v153 = (float)*((int *)a3 + 3);
    *(float *)v187 = (float)*(int *)a3;
    *(float *)&v187[4] = v151;
    *(float *)&v187[8] = v152;
    *(float *)&v187[12] = v153;
    v187[16] = 0;
    v191 = 0;
    v192 = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v150 + 48))(&v217, v150, v187);
    if (v221)
    {
      WebCore::Path::length((WebCore::Path *)&v217);
      v155 = v154;
    }
    else
    {
      v155 = 0;
    }
    if (*((_BYTE *)this + 172) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v144);
      v143 = v186;
    }
    *((_WORD *)this + 86) = 4;
    *((_BYTE *)this + 174) = 1;
    *((_DWORD *)this + 42) = v155;
    if (v221 && v220 != -1)
      ((void (*)(_BYTE *, char *))off_1E3407378[v220])(v187, (char *)&v217 + 8);
  }
LABEL_257:
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v183, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v143 + 1) + 32) + 32) + 8);
  WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)this + 58, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v143 + 1) + 40) + 72) + 8);
  return this;
}

void WebCore::AcceleratedEffectValues::computedTransformationMatrix(WebCore::AcceleratedEffectValues *this@<X0>, const WebCore::FloatRect *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_OWORD *)(a3 + 64) = xmmword_1969F6E20;
  *(_OWORD *)(a3 + 80) = unk_1969F6E30;
  *(_OWORD *)(a3 + 96) = xmmword_1969F6E40;
  *(_OWORD *)(a3 + 112) = unk_1969F6E50;
  *(_OWORD *)a3 = xmmword_1969F6DE0;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)algn_1969F6DF0;
  *(_OWORD *)(a3 + 32) = xmmword_1969F6E00;
  *(_OWORD *)(a3 + 48) = unk_1969F6E10;
  v6 = *((_QWORD *)this + 17);
  if (v6)
  {
    v15 = *((_QWORD *)a2 + 1);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 48))(v6, a3, &v15);
  }
  v7 = *((_QWORD *)this + 19);
  if (v7)
  {
    v15 = *((_QWORD *)a2 + 1);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, a3, &v15);
  }
  v8 = *((_QWORD *)this + 18);
  if (v8)
  {
    v15 = *((_QWORD *)a2 + 1);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, a3, &v15);
  }
  if (*((_BYTE *)this + 92) && *((_QWORD *)this + 20))
  {
    v9 = *(float *)a2;
    v10 = *((float *)a2 + 1);
    v14 = *((_QWORD *)a2 + 1);
    *(float *)&v15 = v9 + WebCore::floatPointForLengthPoint((_BYTE *)this + 96, (float *)&v14);
    *((float *)&v15 + 1) = v10 + v11;
    if (!*((_BYTE *)this + 92))
    {
      __break(1u);
      return;
    }
    WebCore::MotionPath::applyMotionPathTransform((float64x2_t *)a3, (uint64_t)this + 4, (float *)&v15, *((_QWORD *)this + 20), (_BYTE *)this + 192, (WebCore::AcceleratedEffectValues *)((char *)this + 168), (uint64_t)this + 208, *((unsigned __int8 *)this + 112));
  }
  v15 = *((_QWORD *)a2 + 1);
  if (*((_DWORD *)this + 33))
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(*((_QWORD *)this + 15) + 8 * v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, a3, &v15);
      ++v12;
    }
    while (v12 < *((unsigned int *)this + 33));
  }
}

uint64_t *WebCore::Animation::initialName(WebCore::Animation *this)
{
  uint64_t v2;

  {
    v2 = WebCore::noneAtomData;
    if (WebCore::noneAtomData)
      *(_DWORD *)WebCore::noneAtomData += 2;
    WebCore::Animation::initialName(void)::initialValue = v2;
    word_1ECE90D78 = 256;
  }
  return &WebCore::Animation::initialName(void)::initialValue;
}

uint64_t WebCore::Animation::fillTimeline(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6[8];
  int v7;
  uint64_t v8;

  v2 = result;
  v6[0] = 0;
  v7 = -1;
  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == -1)
  {
    v4 = *(unsigned int *)(result + 88);
    if ((_DWORD)v4 != -1)
    {
      result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E3407390[v4])(&v8, result + 80);
      *(_DWORD *)(v2 + 88) = -1;
    }
  }
  else
  {
    ((void (*)(uint64_t *, char *, uint64_t))off_1E34073A8[v3])(&v8, v6, a2);
    v7 = v3;
    v8 = v2 + 80;
    result = ((uint64_t (*)(uint64_t *))off_1E34073E8[v3])(&v8);
  }
  v5 = *(unsigned int *)(v2 + 112) | ((unint64_t)*(unsigned __int8 *)(v2 + 116) << 32) | 0x20000;
  *(_DWORD *)(v2 + 112) |= 0x20000u;
  if (v7 != -1)
  {
    result = ((uint64_t (*)(uint64_t *, char *))off_1E3407390[v7])(&v8, v6);
    v5 = *(unsigned int *)(v2 + 112) | ((unint64_t)*(unsigned __int8 *)(v2 + 116) << 32);
  }
  *(_BYTE *)(v2 + 116) = BYTE4(v5);
  *(_DWORD *)(v2 + 112) = v5 | 0x20000000;
  return result;
}

uint64_t WebCore::Animation::fillProperty(uint64_t result, char *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11[8];
  unsigned int v12;
  uint64_t v13;

  v2 = result;
  v3 = *a2;
  v10 = *a2;
  v11[0] = 0;
  v12 = -1;
  v4 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v4 == -1)
  {
    *(_BYTE *)(result + 8) = v3;
    v5 = *(unsigned int *)(result + 24);
    if ((_DWORD)v5 == -1)
    {
      v6 = (int *)(result + 112);
      v9 = *(unsigned int *)(result + 112) | ((unint64_t)*(unsigned __int8 *)(result + 116) << 32) | 0x10000;
      goto LABEL_8;
    }
    result = ((uint64_t (*)(uint64_t *, uint64_t))off_1E3407348[v5])(&v13, result + 16);
    *(_DWORD *)(v2 + 24) = -1;
  }
  else
  {
    ((void (*)(uint64_t *, char *, char *))off_1E3407358[v4])(&v13, v11, a2 + 8);
    v12 = v4;
    *(_BYTE *)(v2 + 8) = v10;
    v13 = v2 + 16;
    result = ((uint64_t (*)(uint64_t *))off_1E3407400[v4])(&v13);
  }
  v7 = *(_DWORD *)(v2 + 112);
  v6 = (int *)(v2 + 112);
  v8 = v12;
  v9 = v7 | ((unint64_t)*((unsigned __int8 *)v6 + 4) << 32) | 0x10000;
  *v6 = v7 | 0x10000;
  if ((_DWORD)v8 != -1)
  {
    result = ((uint64_t (*)(uint64_t *, char *))off_1E3407348[v8])(&v13, v11);
    v9 = *v6 | ((unint64_t)*((unsigned __int8 *)v6 + 4) << 32);
  }
LABEL_8:
  *((_BYTE *)v6 + 4) = BYTE4(v9);
  *v6 = v9 | 0x10000000;
  return result;
}

uint64_t WebCore::AcceleratedEffect::Keyframe::isAcceleratedEffectKeyframe(WebCore::AcceleratedEffect::Keyframe *this)
{
  return 1;
}

uint64_t WebCore::KeyframeInterpolation::Keyframe::isBlendingKeyframe(WebCore::KeyframeInterpolation::Keyframe *this)
{
  return 0;
}

uint64_t WebCore::AcceleratedEffect::compositeOperation(WebCore::AcceleratedEffect *this)
{
  return *((unsigned __int8 *)this + 113);
}

uint64_t WebCore::KeyframeInterpolation::iterationCompositeOperation(WebCore::KeyframeInterpolation *this)
{
  return 0;
}

uint64_t WebCore::AcceleratedEffect::numberOfKeyframes(WebCore::AcceleratedEffect *this)
{
  return *((unsigned int *)this + 27);
}

void WebCore::AcceleratedEffect::~AcceleratedEffect(WebCore::AcceleratedEffect *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::AcceleratedEffect::~AcceleratedEffect(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  _DWORD *v3;
  unsigned int v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  WTF *v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  *(_QWORD *)this = &off_1E34072B8;
  v3 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[2];
  }
  v4 = *((_DWORD *)this + 27);
  if (v4)
  {
    v5 = 280 * v4;
    v6 = (_DWORD **)(*((_QWORD *)this + 12) + 264);
    do
    {
      v7 = *v6;
      *v6 = 0;
      if (v7)
      {
        if (v7[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
        else
          --v7[2];
      }
      WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WebCore::AcceleratedEffectValues *)(v6 - 31), a2);
      v6 += 35;
      v5 -= 280;
    }
    while (v5);
  }
  v8 = (WTF *)*((_QWORD *)this + 12);
  if (v8)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
    else
      --v9[2];
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::AcceleratedEffectValues::AcceleratedEffectValues(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(result + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(result + 48) = v4;
  *(_OWORD *)(result + 64) = v5;
  *(_OWORD *)(result + 32) = v3;
  *(_DWORD *)(result + 96) = 0;
  *(_WORD *)(result + 101) = 0;
  v6 = *(unsigned __int8 *)(a2 + 100);
  *(_BYTE *)(result + 100) = v6;
  *(_BYTE *)(result + 101) = *(_BYTE *)(a2 + 101);
  if (v6 - 2 < 9)
  {
    v7 = *(unsigned __int8 *)(a2 + 102);
    *(_BYTE *)(result + 102) = v7;
    if (v7)
    {
      *(_DWORD *)(result + 96) = *(_DWORD *)(a2 + 96);
      goto LABEL_4;
    }
    v28 = *(_DWORD *)(a2 + 96);
    goto LABEL_24;
  }
  if (v6 <= 0xD)
  {
    if (((1 << v6) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 96) = 0;
    }
    else if (v6 == 11)
    {
      v28 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)(a2 + 96) = 0;
LABEL_24:
      *(_DWORD *)(result + 96) = v28;
    }
  }
LABEL_4:
  *(_BYTE *)(a2 + 100) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_WORD *)(result + 109) = 0;
  v8 = *(unsigned __int8 *)(a2 + 108);
  *(_BYTE *)(result + 108) = v8;
  *(_BYTE *)(result + 109) = *(_BYTE *)(a2 + 109);
  if (v8 - 2 < 9)
  {
    v9 = *(unsigned __int8 *)(a2 + 110);
    *(_BYTE *)(result + 110) = v9;
    if (v9)
    {
      *(_DWORD *)(result + 104) = *(_DWORD *)(a2 + 104);
      goto LABEL_7;
    }
    v29 = *(_DWORD *)(a2 + 104);
    goto LABEL_26;
  }
  if (v8 <= 0xD)
  {
    if (((1 << v8) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 104) = 0;
    }
    else if (v8 == 11)
    {
      v29 = *(_DWORD *)(a2 + 104);
      *(_DWORD *)(a2 + 104) = 0;
LABEL_26:
      *(_DWORD *)(result + 104) = v29;
    }
  }
LABEL_7:
  *(_BYTE *)(a2 + 108) = 0;
  *(_BYTE *)(result + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 128) = 0;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(result + 120) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(result + 128) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(result + 132) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(result + 136) = v11;
  v12 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(result + 144) = v12;
  v13 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(result + 152) = v13;
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(result + 160) = v14;
  *(_DWORD *)(result + 168) = 0;
  *(_BYTE *)(result + 173) = 0;
  *(_BYTE *)(result + 174) = 0;
  v15 = *(unsigned __int8 *)(a2 + 172);
  *(_BYTE *)(result + 172) = v15;
  *(_BYTE *)(result + 173) = *(_BYTE *)(a2 + 173);
  if (v15 - 2 < 9)
  {
    v16 = *(unsigned __int8 *)(a2 + 174);
    *(_BYTE *)(result + 174) = v16;
    if (v16)
    {
      *(_DWORD *)(result + 168) = *(_DWORD *)(a2 + 168);
      goto LABEL_10;
    }
    v30 = *(_DWORD *)(a2 + 168);
    goto LABEL_28;
  }
  if (v15 <= 0xD)
  {
    if (((1 << v15) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 168) = 0;
    }
    else if (v15 == 11)
    {
      v30 = *(_DWORD *)(a2 + 168);
      *(_DWORD *)(a2 + 168) = 0;
LABEL_28:
      *(_DWORD *)(result + 168) = v30;
    }
  }
LABEL_10:
  *(_BYTE *)(a2 + 172) = 0;
  *(_DWORD *)(result + 176) = 0;
  *(_WORD *)(result + 181) = 0;
  v17 = *(unsigned __int8 *)(a2 + 180);
  *(_BYTE *)(result + 180) = v17;
  *(_BYTE *)(result + 181) = *(_BYTE *)(a2 + 181);
  if (v17 - 2 < 9)
  {
    v18 = *(unsigned __int8 *)(a2 + 182);
    *(_BYTE *)(result + 182) = v18;
    if (v18)
    {
      *(_DWORD *)(result + 176) = *(_DWORD *)(a2 + 176);
      goto LABEL_13;
    }
    v31 = *(_DWORD *)(a2 + 176);
    goto LABEL_30;
  }
  if (v17 <= 0xD)
  {
    if (((1 << v17) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 176) = 0;
    }
    else if (v17 == 11)
    {
      v31 = *(_DWORD *)(a2 + 176);
      *(_DWORD *)(a2 + 176) = 0;
LABEL_30:
      *(_DWORD *)(result + 176) = v31;
    }
  }
LABEL_13:
  *(_BYTE *)(a2 + 180) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_WORD *)(result + 189) = 0;
  v19 = *(unsigned __int8 *)(a2 + 188);
  *(_BYTE *)(result + 188) = v19;
  *(_BYTE *)(result + 189) = *(_BYTE *)(a2 + 189);
  if (v19 - 2 < 9)
  {
    v20 = *(unsigned __int8 *)(a2 + 190);
    *(_BYTE *)(result + 190) = v20;
    if (v20)
    {
      *(_DWORD *)(result + 184) = *(_DWORD *)(a2 + 184);
      goto LABEL_16;
    }
    v32 = *(_DWORD *)(a2 + 184);
    goto LABEL_32;
  }
  if (v19 <= 0xD)
  {
    if (((1 << v19) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 184) = 0;
    }
    else if (v19 == 11)
    {
      v32 = *(_DWORD *)(a2 + 184);
      *(_DWORD *)(a2 + 184) = 0;
LABEL_32:
      *(_DWORD *)(result + 184) = v32;
    }
  }
LABEL_16:
  *(_BYTE *)(a2 + 188) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_WORD *)(result + 197) = 0;
  v21 = *(unsigned __int8 *)(a2 + 196);
  *(_BYTE *)(result + 196) = v21;
  *(_BYTE *)(result + 197) = *(_BYTE *)(a2 + 197);
  if (v21 - 2 < 9)
  {
    v22 = *(unsigned __int8 *)(a2 + 198);
    *(_BYTE *)(result + 198) = v22;
    if (v22)
    {
      *(_DWORD *)(result + 192) = *(_DWORD *)(a2 + 192);
      goto LABEL_19;
    }
    v33 = *(_DWORD *)(a2 + 192);
    goto LABEL_34;
  }
  if (v21 <= 0xD)
  {
    if (((1 << v21) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 192) = 0;
    }
    else if (v21 == 11)
    {
      v33 = *(_DWORD *)(a2 + 192);
      *(_DWORD *)(a2 + 192) = 0;
LABEL_34:
      *(_DWORD *)(result + 192) = v33;
    }
  }
LABEL_19:
  *(_BYTE *)(a2 + 196) = 0;
  *(_DWORD *)(result + 200) = 0;
  *(_WORD *)(result + 205) = 0;
  v23 = *(unsigned __int8 *)(a2 + 204);
  *(_BYTE *)(result + 204) = v23;
  *(_BYTE *)(result + 205) = *(_BYTE *)(a2 + 205);
  if (v23 - 2 >= 9)
  {
    if (v23 > 0xD)
      goto LABEL_22;
    if (((1 << v23) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 200) = 0;
      goto LABEL_22;
    }
    if (v23 != 11)
      goto LABEL_22;
    v34 = *(_DWORD *)(a2 + 200);
    *(_DWORD *)(a2 + 200) = 0;
    goto LABEL_36;
  }
  v24 = *(unsigned __int8 *)(a2 + 206);
  *(_BYTE *)(result + 206) = v24;
  if (!v24)
  {
    v34 = *(_DWORD *)(a2 + 200);
LABEL_36:
    *(_DWORD *)(result + 200) = v34;
    goto LABEL_22;
  }
  *(_DWORD *)(result + 200) = *(_DWORD *)(a2 + 200);
LABEL_22:
  *(_BYTE *)(a2 + 204) = 0;
  v25 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 208) = v25;
  v26 = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(result + 216) = v26;
  LODWORD(v26) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a2 + 224) = 0;
  *(_DWORD *)(result + 224) = v26;
  LODWORD(v26) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a2 + 228) = 0;
  *(_DWORD *)(result + 228) = v26;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  v27 = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(result + 232) = v27;
  LODWORD(v27) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a2 + 240) = 0;
  *(_DWORD *)(result + 240) = v27;
  LODWORD(v27) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = 0;
  *(_DWORD *)(result + 244) = v27;
  return result;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if ((unsigned int *)a2 != a1)
  {
    v4 = *(unsigned int *)(a2 + 12);
    if (a1[3] > v4)
    {
      WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v4);
    }
    else if (v4 > a1[2])
    {
      WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)a1, *(unsigned int *)(a2 + 12));
    }
    std::copy_n[abi:sn180100]<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>> const*,unsigned long,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>*,0>(*(unsigned int ***)a2, a1[3], *(unsigned int ***)a1);
    v5 = a1[3];
    v6 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5 != (_DWORD)v6)
    {
      v7 = *(_QWORD *)a2 + 8 * v6;
      v8 = (_QWORD *)(*(_QWORD *)a1 + 8 * v5);
      v9 = (_QWORD *)(*(_QWORD *)a2 + 8 * v5);
      do
      {
        v10 = *v9;
        v11 = (unsigned int *)(*v9 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
        *v8++ = v10;
        ++v9;
      }
      while (v9 != (_QWORD *)v7);
      LODWORD(v5) = *(_DWORD *)(a2 + 12);
    }
    a1[3] = v5;
  }
  return a1;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, uint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = a2;
  v3 = result;
  v4 = result[3];
  if (v4 != a2)
  {
    v5 = *(_QWORD *)result + 8 * v4;
    v6 = (unsigned int **)(*(_QWORD *)result + 8 * a2);
    do
    {
      result = *v6;
      *v6 = 0;
      if (result)
      {
        v7 = result + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, result + 2);
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        }
      }
      ++v6;
    }
    while (v6 != (unsigned int **)v5);
  }
  v3[3] = v2;
  return result;
}

unsigned int **std::copy_n[abi:sn180100]<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>> const*,unsigned long,WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>*,0>(unsigned int **a1, uint64_t a2, unsigned int **a3)
{
  unsigned int **v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  if (a2)
  {
    v4 = a1;
    v5 = &a1[a2];
    do
    {
      v6 = *v4;
      v7 = *v4 + 2;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
      v9 = *a3;
      *a3 = v6;
      if (v9)
      {
        v10 = v9 + 2;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
        {
          atomic_store(1u, v9 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      ++v4;
      ++a3;
    }
    while (v4 != v5);
  }
  return a3;
}

unsigned int *WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;

  if (result[2] > a2)
  {
    v3 = result;
    if (result[3] > a2)
      result = WTF::Vector<WTF::Ref<WebCore::FilterOperation,WTF::RawPtrTraits<WebCore::FilterOperation>,WTF::DefaultRefDerefTraits<WebCore::FilterOperation>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (v3[2])
      {
        v3[2] = a2;
        result = (unsigned int *)WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = v3[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = a2;
      *(_QWORD *)v3 = result;
      if (result != (unsigned int *)v4)
        result = (unsigned int *)memcpy(result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Animation::TimelineKeyword,WTF::AtomString,WebCore::Animation::TimelineKeyword::Ref<std::__variant_detail::_Trait::ScrollTimeline,WebCore::Animation::TimelineKeyword::RawPtrTraits<WebCore::Animation::TimelineKeyword::Ref>,WebCore::Animation::TimelineKeyword::DefaultRefDerefTraits<WebCore::Animation::TimelineKeyword::Ref>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Animation::TimelineKeyword,WTF::AtomString,WebCore::Animation::TimelineKeyword::Ref<std::__variant_detail::_Trait::ScrollTimeline,WebCore::Animation::TimelineKeyword::RawPtrTraits<WebCore::Animation::TimelineKeyword::Ref>,WebCore::Animation::TimelineKeyword::DefaultRefDerefTraits<WebCore::Animation::TimelineKeyword::Ref>>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Animation::TimelineKeyword,WTF::AtomString,WebCore::Animation::TimelineKeyword::Ref<std::__variant_detail::_Trait::ScrollTimeline,WebCore::Animation::TimelineKeyword::RawPtrTraits<WebCore::Animation::TimelineKeyword::Ref>,WebCore::Animation::TimelineKeyword::DefaultRefDerefTraits<WebCore::Animation::TimelineKeyword::Ref>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Animation::TimelineKeyword,WTF::AtomString,WebCore::Animation::TimelineKeyword::Ref<std::__variant_detail::_Trait::ScrollTimeline,WebCore::Animation::TimelineKeyword::RawPtrTraits<WebCore::Animation::TimelineKeyword::Ref>,WebCore::Animation::TimelineKeyword::DefaultRefDerefTraits<WebCore::Animation::TimelineKeyword::Ref>>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Animation::TimelineKeyword,WTF::AtomString,WebCore::Animation::TimelineKeyword::Ref<std::__variant_detail::_Trait::ScrollTimeline,WebCore::Animation::TimelineKeyword::RawPtrTraits<WebCore::Animation::TimelineKeyword::Ref>,WebCore::Animation::TimelineKeyword::DefaultRefDerefTraits<WebCore::Animation::TimelineKeyword::Ref>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Animation::TimelineKeyword,WTF::AtomString,WebCore::Animation::TimelineKeyword::Ref<std::__variant_detail::_Trait::ScrollTimeline,WebCore::Animation::TimelineKeyword::RawPtrTraits<WebCore::Animation::TimelineKeyword::Ref>,WebCore::Animation::TimelineKeyword::DefaultRefDerefTraits<WebCore::Animation::TimelineKeyword::Ref>>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

uint64_t WTF::Persistence::Decoder::operator>><WebCore::CertificateInfo,(void *)0>(uint64_t a1, uint64_t a2)
{
  const void *v4;
  __int16 v6;

  v6 = 0;
  WTF::Persistence::Decoder::operator>>();
  if (*(_BYTE *)(a2 + 8))
  {
    v4 = *(const void **)a2;
    *(_QWORD *)a2 = 0;
    if (v4)
      CFRelease(v4);
    *(_BYTE *)(a2 + 8) = 0;
  }
  return a1;
}

void std::__optional_storage_base<std::optional<WebCore::CertificateInfo>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::optional<WebCore::CertificateInfo>,false>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int8 *)(a1 + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      if (*(unsigned __int8 *)(a1 + 8) == *((unsigned __int8 *)a2 + 8))
      {
        if (*(_BYTE *)(a1 + 8))
        {
          v2 = *a2;
          *a2 = 0;
          v3 = *(const void **)a1;
          *(_QWORD *)a1 = v2;
          if (v3)
            CFRelease(v3);
        }
      }
      else if (*(_BYTE *)(a1 + 8))
      {
        v6 = *(const void **)a1;
        *(_QWORD *)a1 = 0;
        if (v6)
        {
          v9 = a1;
          CFRelease(v6);
          a1 = v9;
        }
        *(_BYTE *)(a1 + 8) = 0;
      }
      else
      {
        v7 = *a2;
        *a2 = 0;
        *(_QWORD *)a1 = v7;
        *(_BYTE *)(a1 + 8) = 1;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v4 = *(const void **)a1;
      *(_QWORD *)a1 = 0;
      if (v4)
      {
        v8 = a1;
        CFRelease(v4);
        a1 = v8;
      }
    }
    *(_BYTE *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 8) = 0;
    if (*((_BYTE *)a2 + 8))
    {
      v5 = *a2;
      *a2 = 0;
      *(_QWORD *)a1 = v5;
      *(_BYTE *)(a1 + 8) = 1;
    }
    *(_BYTE *)(a1 + 16) = 1;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AcceleratedEffect::Keyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::AcceleratedEffect::Keyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AcceleratedEffect::Keyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::AcceleratedEffect::Keyframe::animatesProperty(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>(uint64_t a1, _WORD *a2)
{
  return (unsigned __int16)(*(_WORD *)(**(_QWORD **)a1 + 274) & *a2) != 0;
}

unint64_t WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 280 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::AcceleratedEffect::Keyframe,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  _DWORD *v15;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xEA0EA1)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = *(WTF **)a1;
      v4 = *(_DWORD *)(a1 + 12);
      v5 = 280 * a2;
      v6 = WTF::fastMalloc((WTF *)(280 * a2));
      *(_DWORD *)(a1 + 8) = v5 / 0x118;
      *(_QWORD *)a1 = v6;
      if (v4)
      {
        v8 = v6;
        v9 = 0;
        v10 = 280 * v4;
        do
        {
          v11 = v8 + v9;
          *(_QWORD *)v11 = off_1E3407270;
          v12 = (char *)v3 + v9;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)((char *)v3 + v9 + 8);
          WebCore::AcceleratedEffectValues::AcceleratedEffectValues(v8 + v9 + 16, (uint64_t)v3 + v9 + 16);
          v14 = *(_QWORD *)((char *)v3 + v9 + 264);
          *((_QWORD *)v12 + 33) = 0;
          *(_QWORD *)(v11 + 264) = v14;
          *(_DWORD *)(v11 + 272) = *(_DWORD *)((char *)v3 + v9 + 272);
          v15 = *(_DWORD **)((char *)v3 + v9 + 264);
          *((_QWORD *)v12 + 33) = 0;
          if (v15)
          {
            if (v15[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
            else
              --v15[2];
          }
          WebCore::AcceleratedEffectValues::~AcceleratedEffectValues((WTF *)((char *)v3 + v9 + 16), v13);
          v9 += 280;
        }
        while (v10 != v9);
      }
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

void WTF::Detail::CallableWrapper<WebCore::AcceleratedEffect::apply(WTF::Seconds,WebCore::AcceleratedEffectValues &,WebCore::FloatRect const&)::$_1,void,WebCore::KeyframeInterpolation::Keyframe const&,WebCore::CompositeOperation>::call(uint64_t a1, double *a2, char a3)
{
  double v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  if (((*(uint64_t (**)(double *))(*(_QWORD *)a2 + 24))(a2) & 1) != 0)
  {
    v10 = 0x3FF0000000000000;
    v11 = 0;
    v12 = a3;
    v13 = 0;
    v14 = 0;
    v6 = a2[1];
    v7.n128_f64[0] = (****(double (*****)(_QWORD))(a1 + 8))(**(_QWORD **)(a1 + 8));
    v8 = *(_QWORD *)(a1 + 40);
    v9 = 48;
    if (v6 == v7.n128_f64[0])
      v9 = 24;
    v7.n128_u32[0] = *(_DWORD *)(v8 + 8);
    WebCore::blend(**(unsigned __int16 **)(a1 + 16), *(_QWORD *)(a1 + v9), *(_QWORD *)(a1 + 32) + 16, (uint64_t)(a2 + 2), (uint64_t)&v10, v7, *(float *)(v8 + 12));
  }
  else
  {
    __break(0xC471u);
  }
}

void WTF::Detail::CallableWrapper<WebCore::AcceleratedEffect::apply(WTF::Seconds,WebCore::AcceleratedEffectValues &,WebCore::FloatRect const&)::$_3,void,double,double,WebCore::IterationCompositeOperation>::call(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  unint64_t v3;
  __int16 v4;
  char v5;
  uint64_t v6;

  v3 = a2.n128_u64[0];
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v2 = *(_QWORD *)(a1 + 40);
  a2.n128_u32[0] = *(_DWORD *)(v2 + 8);
  WebCore::blend(**(unsigned __int16 **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)&v3, a2, *(float *)(v2 + 12));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AcceleratedEffect::apply(WTF::Seconds,WebCore::AcceleratedEffectValues &,WebCore::FloatRect const&)::$_4,BOOL>::call()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AcceleratedEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::AcceleratedEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>()
{
  return 0;
}

unsigned __int16 *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::AcceleratedEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_0,WebCore::AcceleratedEffect::isPropertyAdditiveOrCumulative(std::variant<std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::variant<WebCore::CSSPropertyID,WTF::AtomString>,WebCore::AcceleratedEffectProperty> &>(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned __int16 v3;
  unsigned __int16 v5;
  int v6;
  unsigned __int16 v7;

  v2 = *a2;
  if (v2 > 0x7F)
  {
    if (*a2 > 0x3FFu)
    {
      switch(v2)
      {
        case 0x400u:
          v3 = 182;
          goto LABEL_29;
        case 0x800u:
          v3 = 117;
          goto LABEL_29;
        case 0x1000u:
          v3 = 451;
          goto LABEL_29;
      }
    }
    else
    {
      switch(v2)
      {
        case 0x80u:
          v3 = 179;
          goto LABEL_29;
        case 0x100u:
          v3 = 181;
          goto LABEL_29;
        case 0x200u:
          v3 = 178;
          goto LABEL_29;
      }
    }
LABEL_28:
    v3 = 0;
    goto LABEL_29;
  }
  if (*a2 > 0xFu)
  {
    switch(v2)
    {
      case 0x10u:
        v3 = 210;
        goto LABEL_29;
      case 0x20u:
        v3 = 214;
        goto LABEL_29;
      case 0x40u:
        v3 = 180;
        goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v2 == 2)
  {
    v3 = 183;
    goto LABEL_29;
  }
  if (v2 == 4)
  {
    v3 = 273;
    goto LABEL_29;
  }
  if (v2 != 8)
    goto LABEL_28;
  v3 = 284;
LABEL_29:
  v5 = v3;
  v6 = 0;
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CSSPropertyAnimation::isPropertyAdditiveOrCumulative(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_0,WebCore::CSSPropertyAnimation::isPropertyAdditiveOrCumulative(std::variant<WebCore::CSSPropertyID,WTF::AtomString> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::CSSPropertyID,WTF::AtomString> const&>(&v7, &v5);
}

double WebCore::SpringSolver::solve(WebCore::SpringSolver *this, double a2)
{
  double v4;
  double v5;
  double v6;
  __double2 v7;
  double v8;

  v4 = *((double *)this + 1);
  if (v4 >= 1.0)
  {
    v5 = *((double *)this + 3) + *((double *)this + 4) * a2;
    v8 = exp(-(a2 * *(double *)this));
  }
  else
  {
    v5 = exp(-(a2 * v4) * *(double *)this);
    v6 = *((double *)this + 3);
    v7 = __sincos_stret(*((double *)this + 2) * a2);
    v8 = *((double *)this + 4) * v7.__sinval + v6 * v7.__cosval;
  }
  return 1.0 - v5 * v8;
}

uint64_t WebCore::TimingFunction::createFromCSSText@<X0>(WebCore::TimingFunction *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  int v9;
  int v10;
  const WebCore::CSSParserContext *v11;
  WTF::StringImpl *v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const WebCore::CSSValue *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  _DWORD *v24;
  WTF *v25;
  uint64_t v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[14];
  int v35;
  WTF::StringImpl *v36;
  char v37;
  char **v38;
  char *v39;

  result = WTF::fastMalloc((WTF *)0x60);
  v6 = result;
  *(_QWORD *)result = 0x900000001;
  v7 = (WTF *)(result + 32);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = result + 32;
  *(_QWORD *)(result + 24) = 4;
  v8 = *(_QWORD *)this;
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 4);
    *(_DWORD *)v8 += 2;
    if (v9 < 0 || (result = (v9 + 26), __OFADD__(v9, 26)))
    {
      v36 = 0;
      goto LABEL_59;
    }
    v10 = (*(unsigned __int8 *)(v8 + 16) >> 2) & 1;
  }
  else
  {
    v10 = 1;
    result = 26;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v10, (int8x16_t *)"animation-timing-function:", 0x1Au, v8, &v36);
  if (!v36)
  {
LABEL_59:
    __break(0xC471u);
    return result;
  }
  v28 = 0;
  WTF::URL::invalidate((WTF::URL *)&v28);
  v12 = v28;
  if (v28)
    *(_DWORD *)v28 += 2;
  v31 = v12;
  v32 = v29;
  v33 = v30;
  memset(v34, 0, sizeof(v34));
  v35 &= 0xC0000000;
  v13 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v13 != -1)
  {
    v39 = &v37;
    v38 = &v39;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  WebCore::MutableStyleProperties::parseDeclaration(v6, (WebCore::MutableStyleProperties *)&v36, (uint64_t)&v31, v11);
  v15 = *(WTF::StringImpl **)v34;
  *(_QWORD *)v34 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v31;
  v31 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v28;
  v28 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v36;
  v36 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v14);
      if (!v8)
        goto LABEL_25;
      goto LABEL_23;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (!v8)
    goto LABEL_25;
LABEL_23:
  if (*(_DWORD *)v8 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v8, v14);
  else
    *(_DWORD *)v8 -= 2;
LABEL_25:
  result = WebCore::StyleProperties::getPropertyCSSValue(v6, 55, &v28);
  v20 = v28;
  if (!v28)
  {
LABEL_39:
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    goto LABEL_40;
  }
  result = WebCore::TimingFunction::createFromCSSValue((uint64_t)v28, v19, (uint64_t *)&v39);
  if (!v39)
  {
    if (*(_DWORD *)v20 == 2)
      result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v19);
    else
      *(_DWORD *)v20 -= 2;
    goto LABEL_39;
  }
  *(_QWORD *)a2 = v39;
  *(_DWORD *)(a2 + 16) = 0;
  if (*(_DWORD *)v20 == 2)
    result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v19);
  else
    *(_DWORD *)v20 -= 2;
LABEL_40:
  if (*(_DWORD *)v6 == 1)
  {
    v21 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v21)
    {
      v22 = 16 * v21;
      v23 = (_DWORD **)(*(_QWORD *)(v6 + 16) + 8);
      do
      {
        v24 = *v23;
        *v23 = 0;
        if (v24)
        {
          if (*v24 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v24, v19);
          else
            *v24 -= 2;
        }
        v23 += 2;
        v22 -= 16;
      }
      while (v22);
    }
    v25 = *(WTF **)(v6 + 16);
    if (v7 != v25 && v25 != 0)
    {
      *(_QWORD *)(v6 + 16) = 0;
      *(_DWORD *)(v6 + 24) = 0;
      WTF::fastFree(v25, v19);
    }
    v27 = *(_QWORD *)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    return WTF::fastFree((WTF *)v6, v19);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return result;
}

uint64_t WebCore::LinearTimingFunction::create(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = &off_1E338CAA8;
  v5 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 28) = v5;
  if (!(_DWORD)v5)
    goto LABEL_2;
  v8 = result;
  if (!(v5 >> 28))
  {
    v6 = v5;
    v7 = (void *)WTF::fastMalloc((WTF *)(16 * v5));
    *(_DWORD *)(v8 + 24) = v6;
    *(_QWORD *)(v8 + 16) = v7;
    memcpy(v7, *(const void **)a2, 16 * *(unsigned int *)(a2 + 12));
    result = v8;
LABEL_2:
    *a1 = result;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::makeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(_QWORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t result;
  unsigned __int8 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12[2];
  uint64_t v13[2];
  uint64_t v14[2];
  uint64_t v15[2];

  v15[0] = (uint64_t)"cubic-bezier(";
  v15[1] = 14;
  v14[0] = (uint64_t)", ";
  v14[1] = 3;
  v13[0] = (uint64_t)", ";
  v13[1] = 3;
  v12[0] = (uint64_t)", ";
  v12[1] = 3;
  v10 = a3;
  v11 = a2;
  v8 = a5;
  v9 = a4;
  v7 = 41;
  result = WTF::tryMakeString<WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,WTF::ASCIILiteral,double,char>(v15, v14, v13, v12, a1, &v7);
  if (!*a1)
    __break(0xC471u);
  return result;
}

WebCore::AudioBus *WebCore::AudioBus::create@<X0>(WebCore::AudioBus *this@<X0>, unint64_t a2@<X1>, char a3@<W2>, WebCore::AudioBus **a4@<X8>)
{
  WebCore::AudioBus *result;
  WebCore::AudioBus *v9;

  if (this <= 0x20)
  {
    v9 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    result = WebCore::AudioBus::AudioBus(v9, this, a2, a3);
  }
  else
  {
    result = 0;
  }
  *a4 = result;
  return result;
}

WebCore::AudioBus *WebCore::AudioBus::AudioBus(WebCore::AudioBus *this, void *a2, unint64_t a3, char a4)
{
  int v4;
  WTF **v6;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  WTF **v25;
  void *v26;
  _QWORD *v28;
  WTF **v29;

  v4 = (int)a2;
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = 0;
  v6 = (WTF **)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 9) = 1065353216;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_DWORD *)this + 13) = 0;
  if (!(_DWORD)a2)
  {
    v10 = 0;
    goto LABEL_15;
  }
  if (a2 >> 29)
  {
    __break(0xC471u);
    goto LABEL_28;
  }
  v9 = (WTF *)(8 * a2);
  v10 = WTF::fastMalloc(v9);
  if ((a4 & 1) != 0)
  {
    if (a3)
    {
      v29 = v6;
      if (!(a3 >> 62))
      {
        v11 = 0;
        do
        {
          v12 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v12 = 0;
          v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v13 = 0;
          v13[1] = 0;
          WTF::fastAlignedFree(0, v14);
          v15 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
          *v13 = v15;
          v13[1] = a3;
          bzero(v15, 4 * a3);
          *(_QWORD *)(v12 + 8) = v13;
          *(_QWORD *)(v12 + 16) = a3;
          *(_BYTE *)(v12 + 24) = 1;
          *(_QWORD *)((char *)v11 + v10) = v12;
          v11 = (WTF *)((char *)v11 + 8);
        }
        while (v9 != v11);
        v6 = v29;
        goto LABEL_15;
      }
      *(_QWORD *)WTF::fastMalloc((WTF *)0x20) = 0;
      v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v28 = 0;
      v28[1] = 0;
      __break(0xC471u);
LABEL_28:
      JUMPOUT(0x1961013B0);
    }
    v18 = 0;
    do
    {
      v19 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v19 = 0;
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = 0;
      v20[1] = 0;
      *(_QWORD *)(v19 + 8) = v20;
      *(_QWORD *)(v19 + 16) = 0;
      *(_BYTE *)(v19 + 24) = 1;
      *(_QWORD *)((char *)v18 + v10) = v19;
      v18 = (WTF *)((char *)v18 + 8);
    }
    while (v9 != v18);
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = a3;
      *(_BYTE *)(v17 + 24) = 0;
      *(_QWORD *)((char *)v16 + v10) = v17;
      v16 = (WTF *)((char *)v16 + 8);
    }
    while (v9 != v16);
  }
LABEL_15:
  v21 = *((unsigned int *)this + 7);
  v22 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v21)
  {
    v23 = 8 * v21;
    do
    {
      v24 = *(WTF **)v22;
      *(_QWORD *)v22 = 0;
      if (v24)
      {
        v25 = (WTF **)*((_QWORD *)v24 + 1);
        *((_QWORD *)v24 + 1) = 0;
        if (v25)
        {
          WTF::fastAlignedFree(*v25, a2);
          WTF::fastFree((WTF *)v25, v26);
        }
        WTF::fastFree(v24, a2);
      }
      v22 = (WTF *)((char *)v22 + 8);
      v23 -= 8;
    }
    while (v23);
    v22 = *v6;
  }
  if (v22)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v22, a2);
  }
  *((_QWORD *)this + 2) = v10;
  *((_DWORD *)this + 6) = v4;
  *((_DWORD *)this + 7) = v4;
  *((_DWORD *)this + 8) = 0;
  return this;
}

uint64_t WebCore::AudioBus::setChannelMemory(uint64_t this, void *a2, float *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  WTF **v8;
  void *v9;

  if (*(_DWORD *)(this + 28) > a2)
  {
    v6 = this;
    v7 = *(_QWORD *)(*(_QWORD *)(this + 16) + 8 * a2);
    v8 = *(WTF ***)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    if (v8)
    {
      WTF::fastAlignedFree(*v8, a2);
      this = WTF::fastFree((WTF *)v8, v9);
    }
    *(_QWORD *)v7 = a3;
    *(_QWORD *)(v7 + 16) = a4;
    *(_BYTE *)(v7 + 24) = 0;
    *(_QWORD *)(v6 + 8) = a4;
  }
  return this;
}

void WebCore::AudioBus::createBufferFromRange(WebCore::AudioBus *this@<X0>, const WebCore::AudioBus *a2@<X1>, unsigned int a3@<W2>, WebCore::AudioBus **a4@<X8>)
{
  unint64_t v5;
  unint64_t v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  WebCore::AudioBus *v11;
  unint64_t i;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  size_t v20;

  v5 = a3 - a2;
  if (a3 <= a2 || (v7 = a3, *((_QWORD *)this + 1) < (unint64_t)a3))
  {
    *a4 = 0;
    return;
  }
  v8 = a2;
  v9 = (void *)*((unsigned int *)this + 7);
  if (v9 < 0x21)
  {
    v10 = WTF::fastMalloc((WTF *)0x38);
    v11 = WebCore::AudioBus::AudioBus((WebCore::AudioBus *)v10, v9, v5, 1);
    *a4 = v11;
    *((_DWORD *)v11 + 13) = *((_DWORD *)this + 13);
    if (!(_DWORD)v9)
      return;
  }
  else
  {
    v10 = 0;
    *a4 = 0;
    MEMORY[0x34] = *((_DWORD *)this + 13);
  }
  for (i = 0; (void *)i != v9; ++i)
  {
    if (i >= *(unsigned int *)(v10 + 28))
    {
      __break(0xC471u);
      JUMPOUT(0x1961015E8);
    }
    if (i >= *((unsigned int *)this + 7))
    {
      __break(0xC471u);
      JUMPOUT(0x1961015F0);
    }
    v13 = *(uint64_t **)(*((_QWORD *)this + 2) + 8 * i);
    if (v13)
    {
      if (v13[2] >= v7)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * i);
        if (!*((_BYTE *)v13 + 24) || !*(_BYTE *)(v14 + 24))
        {
          v15 = (_QWORD *)(v14 + 16);
          v16 = *(_QWORD *)(v14 + 16);
          if (v16 >= v5)
          {
            v17 = *v13;
            if (!*v13)
              v17 = *(_QWORD *)v13[1];
            *(_BYTE *)(v14 + 24) = 0;
            v18 = *(void **)v14;
            if (!*(_QWORD *)v14)
              v18 = **(void ***)(v14 + 8);
            if (*((_BYTE *)v13 + 24))
            {
              if (v16 == v5)
              {
                *(_BYTE *)(v14 + 24) = 1;
                v19 = *(_QWORD *)(v14 + 8);
                if (v19)
                {
                  v15 = (_QWORD *)(v19 + 8);
                  v14 = *(_QWORD *)(v14 + 8);
                }
                v18 = *(void **)v14;
                v20 = 4 * *v15;
              }
              else
              {
                v20 = 4 * v5;
              }
              bzero(v18, v20);
            }
            else
            {
              memcpy(v18, (const void *)(v17 + 4 * v8), 4 * v5);
            }
          }
        }
      }
    }
  }
}

void WebCore::AudioBus::copyFrom(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  void **v9;
  _QWORD *v10;

  if (a2 != a1)
  {
    v6 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v6)
    {
      for (i = 0; i < v6; ++i)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i);
        if (!*(_BYTE *)(v8 + 24))
        {
          *(_BYTE *)(v8 + 24) = 1;
          v9 = *(void ***)(v8 + 8);
          v10 = (_QWORD *)(v8 + 16);
          if (v9)
            v10 = v9 + 1;
          else
            v9 = (void **)v8;
          bzero(*v9, 4 * *v10);
          v6 = *(unsigned int *)(a1 + 28);
        }
      }
    }
    WebCore::AudioBus::sumFrom(a1, a2, a3);
  }
}

void WebCore::AudioBus::sumFrom(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  vDSP_Length v10;
  float *v11;
  const float *v12;
  float *v13;
  const float *v14;
  const float *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const float *v20;
  uint64_t v21;
  const float *v22;
  uint64_t v23;
  const float *v24;
  uint64_t v25;
  const float *v26;
  uint64_t v27;
  uint64_t v28;
  vDSP_Length v29;
  float *v30;
  const float *v31;
  uint64_t v32;
  uint64_t v33;
  const float *v34;
  uint64_t v35;
  const float *v36;
  uint64_t v37;
  const float *v38;
  uint64_t v39;
  const float *v40;
  uint64_t v41;
  const float *v42;
  uint64_t v43;
  const float *v44;
  uint64_t v45;
  const float *v46;
  uint64_t v47;
  float *v48;
  vDSP_Length v49;
  vDSP_Length v50;
  const float *v51;
  const float *v52;
  float *v53;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  const float *v58;
  uint64_t v59;
  const float *v60;
  uint64_t v61;
  const float *v62;
  uint64_t v63;
  const float *v64;
  int v65;
  uint64_t v66;
  float *v67;
  vDSP_Length v68;
  vDSP_Length v69;
  vDSP_Length v70;
  uint64_t v71;
  uint64_t v72;
  const float *v73;
  uint64_t v74;
  const float *v75;
  uint64_t v76;
  const float *v77;
  uint64_t v78;
  const float *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  float *v84;
  vDSP_Length v85;
  vDSP_Length v86;
  vDSP_Length v87;
  float *v88;
  const float *v89;
  const float *v90;
  unsigned int v91;
  vDSP_Length v92;
  float *v93;
  const float *v94;
  const void **v95;
  float *v96;
  const float *v97;
  const float *v98;
  const float **v99;
  float **v100;
  uint64_t v101;
  const float *v102;
  uint64_t v103;
  const float *v104;
  uint64_t v105;
  const float *v106;
  int v107;
  uint64_t v108;
  float *v109;
  uint64_t v110;
  uint64_t v111;
  vDSP_Length v112;
  float *v113;
  const float *v114;
  unsigned int v115;
  unsigned int v116;
  vDSP_Length v117;
  vDSP_Length v118;
  vDSP_Length v119;
  uint64_t v120;
  float *v121;
  uint64_t v122;
  uint64_t v123;
  vDSP_Length v124;
  float *v125;
  const float *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  vDSP_Length v132;
  float *v133;
  const float *v134;
  vDSP_Length v135;
  vDSP_Length v136;
  vDSP_Length v137;
  unsigned int v138;
  uint64_t v139;
  vDSP_Length v140;
  float *v141;
  const float *v142;
  float *v143;
  uint64_t v144;
  float *v145;
  vDSP_Length v146;
  vDSP_Length v147;
  uint64_t v148;
  uint64_t v149;
  vDSP_Length v150;
  float *v151;
  const float *v152;
  float *v153;
  const float *v154;
  const float *v155;
  float *v156;
  const float *v157;
  const float *v158;
  uint64_t v159;
  uint64_t v160;
  float *v161;
  const float *v162;
  const float *v163;
  float *v164;
  const float *v165;
  const float *v166;
  float *v167;
  const float *v168;
  const float *v169;
  unsigned int v170;
  unsigned int v171;
  float __B;

  if (a2 == a1)
    return;
  v5 = *(unsigned int *)(a2 + 28);
  v6 = *(_DWORD *)(a1 + 28);
  if (v6 == (_DWORD)v5)
  {
    if ((_DWORD)v5)
    {
      v7 = 0;
      while (v7 < *(unsigned int *)(a1 + 28))
      {
        if (v7 >= *(unsigned int *)(a2 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x196102800);
        }
        v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v7);
        if (v8)
        {
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v7);
          v10 = *(_QWORD *)(v9 + 16);
          if (*(_QWORD *)(v8 + 16) >= v10 && !*(_BYTE *)(v8 + 24))
          {
            if (*(_BYTE *)(v9 + 24))
            {
              *(_BYTE *)(v9 + 24) = 0;
              v11 = *(float **)v9;
              if (!*(_QWORD *)v9)
                v11 = **(float ***)(v9 + 8);
              v12 = *(const float **)v8;
              if (!*(_QWORD *)v8)
                v12 = **(const float ***)(v8 + 8);
              memcpy(v11, v12, 4 * v10);
            }
            else
            {
              v13 = *(float **)v9;
              v14 = *(const float **)v9;
              if (!*(_QWORD *)v9)
                v14 = **(const float ***)(v9 + 8);
              v15 = *(const float **)v8;
              if (!*(_QWORD *)v8)
                v15 = **(const float ***)(v8 + 8);
              *(_BYTE *)(v9 + 24) = 0;
              if (!v13)
                v13 = **(float ***)(v9 + 8);
              vDSP_vadd(v14, 1, v15, 1, v13, 1, v10);
            }
          }
        }
        if (v5 == ++v7)
          return;
      }
      __break(0xC471u);
LABEL_369:
      JUMPOUT(0x1961027F8);
    }
    return;
  }
  if (a3 == 1)
    goto LABEL_191;
  if (a3)
    return;
  if (v5 < v6)
  {
    if ((_DWORD)v5 == 1 && v6 == 2 || (_DWORD)v5 == 1 && v6 == 4)
    {
      if (*(_DWORD *)(a2 + 32))
        v16 = 0;
      else
        v16 = **(_QWORD **)(a2 + 16);
      if (*(_DWORD *)(a1 + 32))
      {
        v28 = 0;
        if (!v16)
          goto LABEL_157;
      }
      else
      {
        v28 = **(_QWORD **)(a1 + 16);
        if (!v16)
          goto LABEL_157;
      }
      v29 = *(_QWORD *)(v28 + 16);
      if (*(_QWORD *)(v16 + 16) >= v29 && !*(_BYTE *)(v16 + 24))
      {
        if (*(_BYTE *)(v28 + 24))
        {
          *(_BYTE *)(v28 + 24) = 0;
          v30 = *(float **)v28;
          if (!*(_QWORD *)v28)
            v30 = **(float ***)(v28 + 8);
          v31 = *(const float **)v16;
          if (!*(_QWORD *)v16)
            v31 = **(const float ***)(v16 + 8);
          memcpy(v30, v31, 4 * v29);
        }
        else
        {
          v88 = *(float **)v28;
          v89 = *(const float **)v28;
          if (!*(_QWORD *)v28)
            v89 = **(const float ***)(v28 + 8);
          v90 = *(const float **)v16;
          if (!*(_QWORD *)v16)
            v90 = **(const float ***)(v16 + 8);
          *(_BYTE *)(v28 + 24) = 0;
          if (!v88)
            v88 = **(float ***)(v28 + 8);
          vDSP_vadd(v89, 1, v90, 1, v88, 1, v29);
        }
      }
LABEL_157:
      if (*(_DWORD *)(a1 + 32))
      {
        v32 = 0;
      }
      else
      {
        v32 = 0;
        v91 = *(_DWORD *)(a1 + 28);
        if (v91 <= 6 && ((1 << v91) & 0x74) != 0)
          v32 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      }
      if (!v16)
        return;
      v92 = *(_QWORD *)(v32 + 16);
      if (*(_QWORD *)(v16 + 16) < v92 || *(_BYTE *)(v16 + 24))
        return;
      if (*(_BYTE *)(v32 + 24))
      {
        *(_BYTE *)(v32 + 24) = 0;
        v93 = *(float **)v32;
        if (!*(_QWORD *)v32)
          v93 = **(float ***)(v32 + 8);
        v94 = *(const float **)v16;
        if (*(_QWORD *)v16)
          goto LABEL_171;
        v95 = *(const void ***)(v16 + 8);
LABEL_170:
        v94 = (const float *)*v95;
LABEL_171:
        memcpy(v93, v94, 4 * v92);
        return;
      }
      v96 = *(float **)v32;
      v97 = *(const float **)v32;
      if (!*(_QWORD *)v32)
        v97 = **(const float ***)(v32 + 8);
      v98 = *(const float **)v16;
      if (!*(_QWORD *)v16)
      {
        v99 = *(const float ***)(v16 + 8);
LABEL_176:
        v98 = *v99;
        goto LABEL_177;
      }
      goto LABEL_177;
    }
    if ((_DWORD)v5 == 1 && v6 == 6)
    {
      if (*(_DWORD *)(a1 + 32))
        v32 = 0;
      else
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
      if (*(_DWORD *)(a2 + 32))
        return;
      v83 = **(_QWORD **)(a2 + 16);
      if (!v83)
        return;
      goto LABEL_351;
    }
    v55 = v6 == 4 || v6 == 6;
    if ((_DWORD)v5 == 2 && v55)
    {
      if (*(_DWORD *)(a1 + 32))
        v56 = 0;
      else
        v56 = **(_QWORD **)(a1 + 16);
      if (!*(_DWORD *)(a2 + 32))
      {
        v111 = **(_QWORD **)(a2 + 16);
        if (v111)
        {
          v112 = *(_QWORD *)(v56 + 16);
          if (*(_QWORD *)(v111 + 16) >= v112 && !*(_BYTE *)(v111 + 24))
          {
            if (*(_BYTE *)(v56 + 24))
            {
              *(_BYTE *)(v56 + 24) = 0;
              v113 = *(float **)v56;
              if (!*(_QWORD *)v56)
                v113 = **(float ***)(v56 + 8);
              v114 = *(const float **)v111;
              if (!*(_QWORD *)v111)
                v114 = **(const float ***)(v111 + 8);
              memcpy(v113, v114, 4 * v112);
            }
            else
            {
              v153 = *(float **)v56;
              v154 = *(const float **)v56;
              if (!*(_QWORD *)v56)
                v154 = **(const float ***)(v56 + 8);
              v155 = *(const float **)v111;
              if (!*(_QWORD *)v111)
                v155 = **(const float ***)(v111 + 8);
              *(_BYTE *)(v56 + 24) = 0;
              if (!v153)
                v153 = **(float ***)(v56 + 8);
              vDSP_vadd(v154, 1, v155, 1, v153, 1, v112);
            }
          }
        }
      }
      if (*(_DWORD *)(a1 + 32))
      {
        v32 = 0;
      }
      else
      {
        v32 = 0;
        v115 = *(_DWORD *)(a1 + 28);
        if (v115 <= 6 && ((1 << v115) & 0x74) != 0)
          v32 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      }
      if (*(_DWORD *)(a2 + 32))
        return;
      v116 = *(_DWORD *)(a2 + 28);
      if (v116 > 6)
        return;
      if (((1 << v116) & 0x74) == 0)
        return;
      v83 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
      if (!v83)
        return;
      goto LABEL_351;
    }
    if ((_DWORD)v5 == 4 && v6 == 6)
    {
      if (*(_DWORD *)(a1 + 32))
        v71 = 0;
      else
        v71 = **(_QWORD **)(a1 + 16);
      if (!*(_DWORD *)(a2 + 32))
      {
        v123 = **(_QWORD **)(a2 + 16);
        if (v123)
        {
          v124 = *(_QWORD *)(v71 + 16);
          if (*(_QWORD *)(v123 + 16) >= v124 && !*(_BYTE *)(v123 + 24))
          {
            if (*(_BYTE *)(v71 + 24))
            {
              *(_BYTE *)(v71 + 24) = 0;
              v125 = *(float **)v71;
              if (!*(_QWORD *)v71)
                v125 = **(float ***)(v71 + 8);
              v126 = *(const float **)v123;
              if (!*(_QWORD *)v123)
                v126 = **(const float ***)(v123 + 8);
              memcpy(v125, v126, 4 * v124);
            }
            else
            {
              v161 = *(float **)v71;
              v162 = *(const float **)v71;
              if (!*(_QWORD *)v71)
                v162 = **(const float ***)(v71 + 8);
              v163 = *(const float **)v123;
              if (!*(_QWORD *)v123)
                v163 = **(const float ***)(v123 + 8);
              *(_BYTE *)(v71 + 24) = 0;
              if (!v161)
                v161 = **(float ***)(v71 + 8);
              vDSP_vadd(v162, 1, v163, 1, v161, 1, v124);
            }
          }
        }
      }
      if (*(_DWORD *)(a1 + 32))
      {
        v120 = 0;
      }
      else
      {
        v120 = 0;
        v127 = *(_DWORD *)(a1 + 28);
        if (v127 <= 6 && ((1 << v127) & 0x74) != 0)
          v120 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
      }
      if (!*(_DWORD *)(a2 + 32))
      {
        v138 = *(_DWORD *)(a2 + 28);
        if (v138 <= 6 && ((1 << v138) & 0x74) != 0)
        {
          v139 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
          if (v139)
          {
            v140 = *(_QWORD *)(v120 + 16);
            if (*(_QWORD *)(v139 + 16) >= v140 && !*(_BYTE *)(v139 + 24))
            {
              if (*(_BYTE *)(v120 + 24))
              {
                *(_BYTE *)(v120 + 24) = 0;
                v141 = *(float **)v120;
                if (!*(_QWORD *)v120)
                  v141 = **(float ***)(v120 + 8);
                v142 = *(const float **)v139;
                if (!*(_QWORD *)v139)
                  v142 = **(const float ***)(v139 + 8);
                memcpy(v141, v142, 4 * v140);
              }
              else
              {
                v164 = *(float **)v120;
                v165 = *(const float **)v120;
                if (!*(_QWORD *)v120)
                  v165 = **(const float ***)(v120 + 8);
                v166 = *(const float **)v139;
                if (!*(_QWORD *)v139)
                  v166 = **(const float ***)(v139 + 8);
                *(_BYTE *)(v120 + 24) = 0;
                if (!v164)
                  v164 = **(float ***)(v120 + 8);
                vDSP_vadd(v165, 1, v166, 1, v164, 1, v140);
              }
            }
          }
        }
      }
      if (*(_DWORD *)(a1 + 32) || (v128 = *(_DWORD *)(a1 + 28) - 4, v128 > 2))
        v129 = 0;
      else
        v129 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v128 + 16);
      if (!*(_DWORD *)(a2 + 32))
      {
        v130 = *(_DWORD *)(a2 + 28) - 4;
        if (v130 <= 2)
        {
          v131 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v130 + 16);
          if (v131)
          {
            v132 = *(_QWORD *)(v129 + 16);
            if (*(_QWORD *)(v131 + 16) >= v132 && !*(_BYTE *)(v131 + 24))
            {
              if (*(_BYTE *)(v129 + 24))
              {
                *(_BYTE *)(v129 + 24) = 0;
                v133 = *(float **)v129;
                if (!*(_QWORD *)v129)
                  v133 = **(float ***)(v129 + 8);
                v134 = *(const float **)v131;
                if (!*(_QWORD *)v131)
                  v134 = **(const float ***)(v131 + 8);
                memcpy(v133, v134, 4 * v132);
              }
              else
              {
                v167 = *(float **)v129;
                v168 = *(const float **)v129;
                if (!*(_QWORD *)v129)
                  v168 = **(const float ***)(v129 + 8);
                v169 = *(const float **)v131;
                if (!*(_QWORD *)v131)
                  v169 = **(const float ***)(v131 + 8);
                *(_BYTE *)(v129 + 24) = 0;
                if (!v167)
                  v167 = **(float ***)(v129 + 8);
                vDSP_vadd(v168, 1, v169, 1, v167, 1, v132);
              }
            }
          }
        }
      }
      if (*(_DWORD *)(a1 + 32) || (v170 = *(_DWORD *)(a1 + 28) - 4, v170 > 2))
        v32 = 0;
      else
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v170 + 24);
      if (*(_DWORD *)(a2 + 32))
        return;
      v171 = *(_DWORD *)(a2 + 28) - 4;
      if (v171 > 2)
        return;
      v83 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v171 + 24);
      if (!v83)
        return;
LABEL_351:
      v92 = *(_QWORD *)(v32 + 16);
      if (*(_QWORD *)(v83 + 16) < v92 || *(_BYTE *)(v83 + 24))
        return;
      if (*(_BYTE *)(v32 + 24))
      {
        *(_BYTE *)(v32 + 24) = 0;
        v93 = *(float **)v32;
        if (!*(_QWORD *)v32)
          v93 = **(float ***)(v32 + 8);
        v94 = *(const float **)v83;
        if (*(_QWORD *)v83)
          goto LABEL_171;
        v95 = *(const void ***)(v83 + 8);
        goto LABEL_170;
      }
      v96 = *(float **)v32;
      v97 = *(const float **)v32;
      if (!*(_QWORD *)v32)
        v97 = **(const float ***)(v32 + 8);
      v98 = *(const float **)v83;
      if (!*(_QWORD *)v83)
      {
        v99 = *(const float ***)(v83 + 8);
        goto LABEL_176;
      }
LABEL_177:
      *(_BYTE *)(v32 + 24) = 0;
      if (!v96)
      {
        v100 = *(float ***)(v32 + 8);
LABEL_179:
        v96 = *v100;
        goto LABEL_180;
      }
      goto LABEL_180;
    }
LABEL_191:
    WebCore::AudioBus::discreteSumFrom(a1, a2);
    return;
  }
  if ((_DWORD)v5 == 2 && v6 == 1)
  {
    v17 = *(_DWORD *)(a2 + 32);
    if (v17)
      v18 = 0;
    else
      v18 = **(_QWORD **)(a2 + 16);
    v44 = *(const float **)v18;
    if (!*(_QWORD *)v18)
      v44 = **(const float ***)(v18 + 8);
    if (v17)
      v45 = 0;
    else
      v45 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
    v46 = *(const float **)v45;
    if (!*(_QWORD *)v45)
      v46 = **(const float ***)(v45 + 8);
    if (*(_DWORD *)(a1 + 32))
      v47 = 0;
    else
      v47 = **(_QWORD **)(a1 + 16);
    *(_BYTE *)(v47 + 24) = 0;
    v48 = *(float **)v47;
    if (!*(_QWORD *)v47)
      v48 = **(float ***)(v47 + 8);
    v49 = *(_QWORD *)(a1 + 8);
    __B = 0.5;
    vDSP_vsma(v44, 1, &__B, v48, 1, v48, 1, v49);
    v50 = *(_QWORD *)(a1 + 8);
    __B = 0.5;
    v51 = v46;
    v52 = v48;
    v53 = v48;
    goto LABEL_149;
  }
  if ((_DWORD)v5 == 4 && v6 == 1)
  {
    v19 = *(_QWORD *)(a2 + 16);
    v20 = **(const float ***)v19;
    if (!v20)
      v20 = **(const float ***)(*(_QWORD *)v19 + 8);
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(const float **)v21;
    if (!*(_QWORD *)v21)
      v22 = **(const float ***)(v21 + 8);
    v23 = *(_QWORD *)(v19 + 16);
    v24 = *(const float **)v23;
    if (!*(_QWORD *)v23)
      v24 = **(const float ***)(v23 + 8);
    v25 = *(_QWORD *)(v19 + 24);
    v26 = *(const float **)v25;
    if (!*(_QWORD *)v25)
      v26 = **(const float ***)(v25 + 8);
    if (*(_DWORD *)(a1 + 32))
      v27 = 0;
    else
      v27 = **(_QWORD **)(a1 + 16);
    *(_BYTE *)(v27 + 24) = 0;
    v67 = *(float **)v27;
    if (!*(_QWORD *)v27)
      v67 = **(float ***)(v27 + 8);
    v68 = *(_QWORD *)(a1 + 8);
    __B = 0.25;
    vDSP_vsma(v20, 1, &__B, v67, 1, v67, 1, v68);
    v69 = *(_QWORD *)(a1 + 8);
    __B = 0.25;
    vDSP_vsma(v22, 1, &__B, v67, 1, v67, 1, v69);
    v70 = *(_QWORD *)(a1 + 8);
    __B = 0.25;
    vDSP_vsma(v24, 1, &__B, v67, 1, v67, 1, v70);
    v50 = *(_QWORD *)(a1 + 8);
    __B = 0.25;
    v51 = v26;
LABEL_121:
    v52 = v67;
    v53 = v67;
LABEL_149:
    vDSP_vsma(v51, 1, &__B, v52, 1, v53, 1, v50);
    return;
  }
  if ((_DWORD)v5 == 6 && v6 == 1)
  {
    v33 = *(_QWORD *)(a2 + 16);
    v34 = **(const float ***)v33;
    if (!v34)
      v34 = **(const float ***)(*(_QWORD *)v33 + 8);
    v35 = *(_QWORD *)(v33 + 8);
    v36 = *(const float **)v35;
    if (!*(_QWORD *)v35)
      v36 = **(const float ***)(v35 + 8);
    v37 = *(_QWORD *)(v33 + 16);
    v38 = *(const float **)v37;
    if (!*(_QWORD *)v37)
      v38 = **(const float ***)(v37 + 8);
    v39 = *(_QWORD *)(v33 + 32);
    v40 = *(const float **)v39;
    if (!*(_QWORD *)v39)
      v40 = **(const float ***)(v39 + 8);
    v41 = *(_QWORD *)(v33 + 40);
    v42 = *(const float **)v41;
    if (!*(_QWORD *)v41)
      v42 = **(const float ***)(v41 + 8);
    if (*(_DWORD *)(a1 + 32))
      v43 = 0;
    else
      v43 = **(_QWORD **)(a1 + 16);
    *(_BYTE *)(v43 + 24) = 0;
    v84 = *(float **)v43;
    if (!*(_QWORD *)v43)
      v84 = **(float ***)(v43 + 8);
    v85 = *(_QWORD *)(a1 + 8);
    __B = 0.70711;
    vDSP_vsma(v34, 1, &__B, v84, 1, v84, 1, v85);
    v86 = *(_QWORD *)(a1 + 8);
    __B = 0.70711;
    vDSP_vsma(v36, 1, &__B, v84, 1, v84, 1, v86);
    vDSP_vadd(v38, 1, v84, 1, v84, 1, *(_QWORD *)(a1 + 8));
    v87 = *(_QWORD *)(a1 + 8);
    __B = 0.5;
    vDSP_vsma(v40, 1, &__B, v84, 1, v84, 1, v87);
    v50 = *(_QWORD *)(a1 + 8);
    __B = 0.5;
LABEL_148:
    v51 = v42;
    v52 = v84;
    v53 = v84;
    goto LABEL_149;
  }
  if ((_DWORD)v5 == 4 && v6 == 2)
  {
    v57 = *(_QWORD *)(a2 + 16);
    v58 = **(const float ***)v57;
    if (!v58)
      v58 = **(const float ***)(*(_QWORD *)v57 + 8);
    v59 = *(_QWORD *)(v57 + 8);
    v60 = *(const float **)v59;
    if (!*(_QWORD *)v59)
      v60 = **(const float ***)(v59 + 8);
    v61 = *(_QWORD *)(v57 + 16);
    v62 = *(const float **)v61;
    if (!*(_QWORD *)v61)
      v62 = **(const float ***)(v61 + 8);
    v63 = *(_QWORD *)(v57 + 24);
    v64 = *(const float **)v63;
    if (!*(_QWORD *)v63)
      v64 = **(const float ***)(v63 + 8);
    v65 = *(_DWORD *)(a1 + 32);
    if (v65)
      v66 = 0;
    else
      v66 = **(_QWORD **)(a1 + 16);
    *(_BYTE *)(v66 + 24) = 0;
    v109 = *(float **)v66;
    if (!*(_QWORD *)v66)
      v109 = **(float ***)(v66 + 8);
    if (v65)
      v110 = 0;
    else
      v110 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(v110 + 24) = 0;
    v67 = *(float **)v110;
    if (!*(_QWORD *)v110)
      v67 = **(float ***)(v110 + 8);
    v117 = *(_QWORD *)(a1 + 8);
    __B = 0.5;
    vDSP_vsma(v58, 1, &__B, v109, 1, v109, 1, v117);
    v118 = *(_QWORD *)(a1 + 8);
    __B = 0.5;
    vDSP_vsma(v62, 1, &__B, v109, 1, v109, 1, v118);
    v119 = *(_QWORD *)(a1 + 8);
    __B = 0.5;
    vDSP_vsma(v60, 1, &__B, v67, 1, v67, 1, v119);
    v50 = *(_QWORD *)(a1 + 8);
    __B = 0.5;
    v51 = v64;
    goto LABEL_121;
  }
  if ((_DWORD)v5 == 6 && v6 == 2)
  {
    v72 = *(_QWORD *)(a2 + 16);
    v73 = **(const float ***)v72;
    if (!v73)
      v73 = **(const float ***)(*(_QWORD *)v72 + 8);
    v74 = *(_QWORD *)(v72 + 8);
    v75 = *(const float **)v74;
    if (!*(_QWORD *)v74)
      v75 = **(const float ***)(v74 + 8);
    v76 = *(_QWORD *)(v72 + 16);
    v77 = *(const float **)v76;
    if (!*(_QWORD *)v76)
      v77 = **(const float ***)(v76 + 8);
    v78 = *(_QWORD *)(v72 + 32);
    v79 = *(const float **)v78;
    if (!*(_QWORD *)v78)
      v79 = **(const float ***)(v78 + 8);
    v80 = *(_QWORD *)(v72 + 40);
    v42 = *(const float **)v80;
    if (!*(_QWORD *)v80)
      v42 = **(const float ***)(v80 + 8);
    v81 = *(_DWORD *)(a1 + 32);
    if (v81)
      v82 = 0;
    else
      v82 = **(_QWORD **)(a1 + 16);
    *(_BYTE *)(v82 + 24) = 0;
    v121 = *(float **)v82;
    if (!*(_QWORD *)v82)
      v121 = **(float ***)(v82 + 8);
    if (v81)
      v122 = 0;
    else
      v122 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(v122 + 24) = 0;
    v84 = *(float **)v122;
    if (!*(_QWORD *)v122)
      v84 = **(float ***)(v122 + 8);
    vDSP_vadd(v73, 1, v121, 1, v121, 1, *(_QWORD *)(a1 + 8));
    v135 = *(_QWORD *)(a1 + 8);
    __B = 0.70711;
    vDSP_vsma(v77, 1, &__B, v121, 1, v121, 1, v135);
    v136 = *(_QWORD *)(a1 + 8);
    __B = 0.70711;
    vDSP_vsma(v79, 1, &__B, v121, 1, v121, 1, v136);
    vDSP_vadd(v75, 1, v84, 1, v84, 1, *(_QWORD *)(a1 + 8));
    v137 = *(_QWORD *)(a1 + 8);
    __B = 0.70711;
    vDSP_vsma(v77, 1, &__B, v84, 1, v84, 1, v137);
    v50 = *(_QWORD *)(a1 + 8);
    __B = 0.70711;
    goto LABEL_148;
  }
  if ((_DWORD)v5 != 6 || v6 != 4)
    goto LABEL_191;
  v101 = *(_QWORD *)(a2 + 16);
  v102 = **(const float ***)v101;
  if (!v102)
    v102 = **(const float ***)(*(_QWORD *)v101 + 8);
  v103 = *(_QWORD *)(v101 + 8);
  v104 = *(const float **)v103;
  if (!*(_QWORD *)v103)
    v104 = **(const float ***)(v103 + 8);
  v105 = *(_QWORD *)(v101 + 16);
  v106 = *(const float **)v105;
  if (!*(_QWORD *)v105)
    v106 = **(const float ***)(v105 + 8);
  v107 = *(_DWORD *)(a1 + 32);
  if (v107)
    v108 = 0;
  else
    v108 = **(_QWORD **)(a1 + 16);
  *(_BYTE *)(v108 + 24) = 0;
  v143 = *(float **)v108;
  if (!*(_QWORD *)v108)
    v143 = **(float ***)(v108 + 8);
  if (v107)
    v144 = 0;
  else
    v144 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  *(_BYTE *)(v144 + 24) = 0;
  v145 = *(float **)v144;
  if (!*(_QWORD *)v144)
    v145 = **(float ***)(v144 + 8);
  vDSP_vadd(v102, 1, v143, 1, v143, 1, *(_QWORD *)(a1 + 8));
  v146 = *(_QWORD *)(a1 + 8);
  __B = 0.70711;
  vDSP_vsma(v106, 1, &__B, v143, 1, v143, 1, v146);
  vDSP_vadd(v104, 1, v145, 1, v145, 1, *(_QWORD *)(a1 + 8));
  v147 = *(_QWORD *)(a1 + 8);
  __B = 0.70711;
  vDSP_vsma(v106, 1, &__B, v145, 1, v145, 1, v147);
  if (*(_DWORD *)(a1 + 28) <= 2u)
  {
    __break(0xC471u);
    JUMPOUT(0x196102808);
  }
  if (*(_DWORD *)(a2 + 28) <= 4u)
  {
    __break(0xC471u);
    JUMPOUT(0x196102810);
  }
  v148 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32);
  if (v148)
  {
    v149 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
    v150 = *(_QWORD *)(v149 + 16);
    if (*(_QWORD *)(v148 + 16) >= v150 && !*(_BYTE *)(v148 + 24))
    {
      if (*(_BYTE *)(v149 + 24))
      {
        *(_BYTE *)(v149 + 24) = 0;
        v151 = *(float **)v149;
        if (!*(_QWORD *)v149)
          v151 = **(float ***)(v149 + 8);
        v152 = *(const float **)v148;
        if (!*(_QWORD *)v148)
          v152 = **(const float ***)(v148 + 8);
        memcpy(v151, v152, 4 * v150);
      }
      else
      {
        v156 = *(float **)v149;
        v157 = *(const float **)v149;
        if (!*(_QWORD *)v149)
          v157 = **(const float ***)(v149 + 8);
        v158 = *(const float **)v148;
        if (!*(_QWORD *)v148)
          v158 = **(const float ***)(v148 + 8);
        *(_BYTE *)(v149 + 24) = 0;
        if (!v156)
          v156 = **(float ***)(v149 + 8);
        vDSP_vadd(v157, 1, v158, 1, v156, 1, v150);
      }
    }
  }
  if (*(_DWORD *)(a1 + 28) <= 3u)
  {
    __break(0xC471u);
    JUMPOUT(0x196102818);
  }
  if (*(_DWORD *)(a2 + 28) <= 5u)
  {
    __break(0xC471u);
    goto LABEL_369;
  }
  v159 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 40);
  if (v159)
  {
    v160 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
    v92 = *(_QWORD *)(v160 + 16);
    if (*(_QWORD *)(v159 + 16) >= v92 && !*(_BYTE *)(v159 + 24))
    {
      if (*(_BYTE *)(v160 + 24))
      {
        *(_BYTE *)(v160 + 24) = 0;
        v93 = *(float **)v160;
        if (!*(_QWORD *)v160)
          v93 = **(float ***)(v160 + 8);
        v94 = *(const float **)v159;
        if (*(_QWORD *)v159)
          goto LABEL_171;
        v95 = *(const void ***)(v159 + 8);
        goto LABEL_170;
      }
      v96 = *(float **)v160;
      v97 = *(const float **)v160;
      if (!*(_QWORD *)v160)
        v97 = **(const float ***)(v160 + 8);
      v98 = *(const float **)v159;
      if (!*(_QWORD *)v159)
        v98 = **(const float ***)(v159 + 8);
      *(_BYTE *)(v160 + 24) = 0;
      if (!v96)
      {
        v100 = *(float ***)(v160 + 8);
        goto LABEL_179;
      }
LABEL_180:
      vDSP_vadd(v97, 1, v98, 1, v96, 1, v92);
    }
  }
}

void WebCore::AudioBus::discreteSumFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  vDSP_Length v9;
  float *v10;
  const float *v11;
  float *v12;
  const float *v13;
  const float *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  vDSP_Length v19;
  float *v20;
  const float *v21;
  float *v22;
  const float *v23;
  const float *v24;

  v4 = *(unsigned int *)(a2 + 28);
  v5 = *(unsigned int *)(a1 + 28);
  if (v5 >= v4)
  {
    if ((_DWORD)v4)
      v15 = v5 > v4;
    else
      v15 = 0;
    if (v15)
    {
      v16 = 0;
      while (1)
      {
        if (v16 >= *(unsigned int *)(a1 + 28))
        {
          __break(0xC471u);
          JUMPOUT(0x196102A24);
        }
        if (v16 >= *(unsigned int *)(a2 + 28))
          break;
        v17 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v16);
        if (v17)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v16);
          v19 = *(_QWORD *)(v18 + 16);
          if (*(_QWORD *)(v17 + 16) >= v19 && !*(_BYTE *)(v17 + 24))
          {
            if (*(_BYTE *)(v18 + 24))
            {
              *(_BYTE *)(v18 + 24) = 0;
              v20 = *(float **)v18;
              if (!*(_QWORD *)v18)
                v20 = **(float ***)(v18 + 8);
              v21 = *(const float **)v17;
              if (!*(_QWORD *)v17)
                v21 = **(const float ***)(v17 + 8);
              memcpy(v20, v21, 4 * v19);
            }
            else
            {
              v22 = *(float **)v18;
              v23 = *(const float **)v18;
              if (!*(_QWORD *)v18)
                v23 = **(const float ***)(v18 + 8);
              v24 = *(const float **)v17;
              if (!*(_QWORD *)v17)
                v24 = **(const float ***)(v17 + 8);
              *(_BYTE *)(v18 + 24) = 0;
              if (!v22)
                v22 = **(float ***)(v18 + 8);
              vDSP_vadd(v23, 1, v24, 1, v22, 1, v19);
            }
          }
        }
        if (v4 == ++v16)
          return;
      }
LABEL_53:
      __break(0xC471u);
      JUMPOUT(0x196102A14);
    }
  }
  else if ((_DWORD)v5)
  {
    v6 = 0;
    while (v6 < *(unsigned int *)(a1 + 28))
    {
      if (v6 >= *(unsigned int *)(a2 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x196102A1CLL);
      }
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v6);
      if (v7)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v6);
        v9 = *(_QWORD *)(v8 + 16);
        if (*(_QWORD *)(v7 + 16) >= v9 && !*(_BYTE *)(v7 + 24))
        {
          if (*(_BYTE *)(v8 + 24))
          {
            *(_BYTE *)(v8 + 24) = 0;
            v10 = *(float **)v8;
            if (!*(_QWORD *)v8)
              v10 = **(float ***)(v8 + 8);
            v11 = *(const float **)v7;
            if (!*(_QWORD *)v7)
              v11 = **(const float ***)(v7 + 8);
            memcpy(v10, v11, 4 * v9);
          }
          else
          {
            v12 = *(float **)v8;
            v13 = *(const float **)v8;
            if (!*(_QWORD *)v8)
              v13 = **(const float ***)(v8 + 8);
            v14 = *(const float **)v7;
            if (!*(_QWORD *)v7)
              v14 = **(const float ***)(v7 + 8);
            *(_BYTE *)(v8 + 24) = 0;
            if (!v12)
              v12 = **(float ***)(v8 + 8);
            vDSP_vadd(v13, 1, v14, 1, v12, 1, v9);
          }
        }
      }
      if (v5 == ++v6)
        return;
    }
    goto LABEL_53;
  }
}

void WebCore::AudioBus::copyWithGainFrom(WebCore::AudioBus *this, const WebCore::AudioBus *a2, float a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  size_t v20;
  const void **v21;
  void **v22;
  void *v23;
  void *v24;
  const void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  vDSP_Length v30;
  float **v31;
  const float **v32;
  const float *v33;
  const float *v34;
  float *v35;
  size_t v36;
  void **v37;
  void *v38;
  float __B;
  _OWORD v40[16];
  _QWORD v41[34];

  v41[33] = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)this + 7);
  if (v4 == *((_DWORD *)a2 + 7) && (v5 = *((_QWORD *)this + 1), v5 <= *((_QWORD *)a2 + 1)))
  {
    if (*((_DWORD *)this + 7))
    {
      v11 = *((_QWORD *)a2 + 2);
      if (*(_BYTE *)(*(_QWORD *)v11 + 24))
      {
        v12 = 0;
        while (v4 - 1 != v12)
        {
          if (!*(unsigned __int8 *)(*(_QWORD *)(v11 + 8 + 8 * v12++) + 24))
          {
            if (v12 < v4)
              goto LABEL_17;
            break;
          }
        }
        v26 = 0;
        do
        {
          v27 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v26);
          if (!*(_BYTE *)(v27 + 24))
          {
            *(_BYTE *)(v27 + 24) = 1;
            v28 = *(_QWORD *)(v27 + 8);
            v29 = (_QWORD *)(v27 + 16);
            if (v28)
            {
              v29 = (_QWORD *)(v28 + 8);
              v27 = *(_QWORD *)(v27 + 8);
            }
            bzero(*(void **)v27, 4 * *v29);
            v4 = *((unsigned int *)this + 7);
          }
          ++v26;
        }
        while (v26 < v4);
      }
      else
      {
LABEL_17:
        if (v4 <= 0x20 && (this != a2 || a3 != 1.0))
        {
          v14 = 0;
          memset(v41, 0, 256);
          memset(v40, 0, sizeof(v40));
          v15 = *((_QWORD *)this + 2);
          do
          {
            v16 = *(uint64_t **)(v11 + 8 * v14);
            v17 = *v16;
            if (!*v16)
              v17 = *(_QWORD *)v16[1];
            v41[v14] = v17;
            v18 = *(uint64_t **)(v15 + 8 * v14);
            *((_BYTE *)v18 + 24) = 0;
            v19 = *v18;
            if (!*v18)
              v19 = *(_QWORD *)v18[1];
            *((_QWORD *)v40 + v14++) = v19;
          }
          while (v4 != v14);
          if (a3 == 1.0)
          {
            v20 = 4 * v5;
            v21 = (const void **)v41;
            v22 = (void **)v40;
            do
            {
              v24 = *v22++;
              v23 = v24;
              v25 = *v21++;
              memcpy(v23, v25, v20);
              --v4;
            }
            while (v4);
          }
          else if (a3 == 0.0)
          {
            v36 = 4 * v5;
            v37 = (void **)v40;
            do
            {
              v38 = *v37++;
              bzero(v38, v36);
              --v4;
            }
            while (v4);
          }
          else
          {
            v30 = v5;
            v31 = (float **)v40;
            v32 = (const float **)v41;
            do
            {
              v34 = *v32++;
              v33 = v34;
              v35 = *v31++;
              __B = a3;
              vDSP_vsmul(v33, 1, &__B, v35, 1, v30);
              --v4;
            }
            while (v4);
          }
        }
      }
    }
  }
  else if (*((_DWORD *)this + 7))
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v6);
      if (!*(_BYTE *)(v7 + 24))
      {
        *(_BYTE *)(v7 + 24) = 1;
        v8 = *(_QWORD *)(v7 + 8);
        v9 = (_QWORD *)(v7 + 16);
        if (v8)
        {
          v9 = (_QWORD *)(v8 + 8);
          v7 = *(_QWORD *)(v7 + 8);
        }
        bzero(*(void **)v7, 4 * *v9);
        v4 = *((unsigned int *)this + 7);
      }
      ++v6;
    }
    while (v6 < v4);
  }
}

void WebCore::AudioBus::copyWithSampleAccurateGainValuesFrom(uint64_t a1, uint64_t a2, const float *__B, vDSP_Length __N)
{
  unint64_t v7;
  unint64_t v8;
  vDSP_Length v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  const float *v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  unint64_t v21;
  unint64_t j;
  uint64_t v23;
  void **v24;
  _QWORD *v25;

  v7 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v7 == 1)
  {
    if (!__B)
      return;
    v8 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    if (*(_DWORD *)(a1 + 28) != (_DWORD)v7)
      return;
    if (!__B)
      return;
    v8 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(a1 + 8) > v8)
      return;
  }
  if (v8 < __N)
    return;
  v9 = __N;
  if (v8 != __N || v8 != *(_QWORD *)(a1 + 8))
  {
LABEL_16:
    if (!(_DWORD)v7)
    {
      __break(0xC471u);
      return;
    }
    v11 = **(_QWORD **)(a2 + 16);
    goto LABEL_18;
  }
  if ((_DWORD)v7)
  {
    v10 = *(uint64_t **)(a2 + 16);
    v11 = *v10;
    if (*(_BYTE *)(*v10 + 24))
    {
      v12 = 0;
      v13 = v10 + 1;
      while (v7 - 1 != v12)
      {
        if (!*(unsigned __int8 *)(v13[v12++] + 24))
        {
          if (v12 >= v7)
            goto LABEL_29;
          goto LABEL_16;
        }
      }
      goto LABEL_29;
    }
LABEL_18:
    v15 = *(const float **)v11;
    if (!*(_QWORD *)v11)
      v15 = **(const float ***)(v11 + 8);
    LODWORD(v16) = *(_DWORD *)(a1 + 28);
    if ((_DWORD)v16)
    {
      for (i = 0; i < v16; ++i)
      {
        if (*(_DWORD *)(a2 + 28) == (_DWORD)v16)
        {
          v18 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i);
          v15 = *(const float **)v18;
          if (!*(_QWORD *)v18)
            v15 = **(const float ***)(v18 + 8);
        }
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i);
        *(_BYTE *)(v19 + 24) = 0;
        v20 = *(float **)v19;
        if (!*(_QWORD *)v19)
          v20 = **(float ***)(v19 + 8);
        vDSP_vmul(v15, 1, __B, 1, v20, 1, v9);
        v16 = *(unsigned int *)(a1 + 28);
      }
    }
    return;
  }
LABEL_29:
  v21 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v21)
  {
    for (j = 0; j < v21; ++j)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * j);
      if (!*(_BYTE *)(v23 + 24))
      {
        *(_BYTE *)(v23 + 24) = 1;
        v24 = *(void ***)(v23 + 8);
        v25 = (_QWORD *)(v23 + 16);
        if (v24)
          v25 = v24 + 1;
        else
          v24 = (void **)v23;
        bzero(*v24, 4 * *v25);
        v21 = *(unsigned int *)(a1 + 28);
      }
    }
  }
}

void WebCore::AudioBus::createBySampleRateConverting(WebCore::AudioBus *this@<X0>, const WebCore::AudioBus *a2@<X1>, double a3@<D0>, WebCore::AudioBus **a4@<X8>)
{
  WebCore::AudioBus *v6;
  float v7;
  double v8;
  char *v9;
  int v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v16;
  unint64_t v17;
  WebCore::AudioBus *v18;
  WebCore::AudioBus *v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  float v33;
  unsigned int v34;
  unsigned int v35;
  WebCore::AudioBus *v36;

  if (!this || (v6 = this, v7 = *((float *)this + 13), v7 == 0.0))
  {
    *a4 = 0;
    return;
  }
  v8 = v7;
  v9 = (char *)*((unsigned int *)this + 7);
  if (v9 == (char *)1)
    v10 = 0;
  else
    v10 = (int)a2;
  if (v8 == a3)
  {
    if (v10)
      WebCore::AudioBus::createByMixingToMono(a4, this);
    else
      WebCore::AudioBus::createBufferFromRange(this, 0, *((_DWORD *)this + 2), a4);
    return;
  }
  v11 = v8 / a3;
  if (!(_DWORD)v9)
  {
LABEL_20:
    v17 = (unint64_t)((double)*((unint64_t *)this + 1) / v11);
    v18 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    v19 = WebCore::AudioBus::AudioBus(v18, v9, v17, 1);
    *a4 = v19;
    v20 = a3;
    *((float *)v19 + 13) = v20;
    return;
  }
  v12 = *((_QWORD *)this + 2);
  if (*(_BYTE *)(*(_QWORD *)v12 + 24))
  {
    v13 = 0;
    v14 = v12 + 8;
    while (v9 - 1 != (char *)v13)
    {
      if (!*(unsigned __int8 *)(*(_QWORD *)(v14 + 8 * v13++) + 24))
      {
        if (v13 >= (unint64_t)v9)
          goto LABEL_20;
        goto LABEL_17;
      }
    }
    goto LABEL_20;
  }
LABEL_17:
  if (v10)
  {
    WebCore::AudioBus::createByMixingToMono(&v36, this);
    v16 = (unsigned int *)v36;
    v9 = (char *)*((unsigned int *)v36 + 7);
    v6 = v36;
  }
  else
  {
    v16 = 0;
  }
  if (v9 >= 0x21)
  {
    v21 = 0;
    *a4 = 0;
    goto LABEL_25;
  }
  v22 = (unint64_t)((double)*((unint64_t *)v6 + 1) / v11);
  v21 = WTF::fastMalloc((WTF *)0x38);
  *a4 = WebCore::AudioBus::AudioBus((WebCore::AudioBus *)v21, v9, v22, 1);
  if ((_DWORD)v9)
  {
LABEL_25:
    v24 = 0;
    do
    {
      if (v24 >= *((unsigned int *)v6 + 7) || v24 >= *(unsigned int *)(v21 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x19610312CLL);
      }
      v25 = *(_QWORD *)(*((_QWORD *)v6 + 2) + 8 * v24);
      v26 = *(_QWORD *)v25;
      if (!*(_QWORD *)v25)
        v26 = **(_QWORD **)(v25 + 8);
      v27 = *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * v24);
      v28 = *(_QWORD *)(v25 + 16);
      *(_BYTE *)(v27 + 24) = 0;
      v29 = *(_QWORD *)v27;
      if (!*(_QWORD *)v27)
        v29 = **(_QWORD **)(v27 + 8);
      WebCore::SincResampler::processBuffer(v26, v28, v29, *(_QWORD *)(v27 + 16), v11);
      ++v24;
    }
    while (v9 != v24);
  }
  v30 = *(unsigned int *)(v21 + 28);
  if ((_DWORD)v30)
  {
    v31 = *(uint64_t **)(v21 + 16);
    do
    {
      v32 = *v31++;
      *(_BYTE *)(v32 + 24) = 0;
      --v30;
    }
    while (v30);
  }
  v33 = a3;
  *(float *)(v21 + 52) = v33;
  if (v16)
  {
    do
    {
      v34 = __ldaxr(v16);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v16));
    if (!v35)
    {
      atomic_store(1u, v16);
      v36 = (WebCore::AudioBus *)v16;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v36, v23);
    }
  }
}

void WebCore::AudioBus::createByMixingToMono(WebCore::AudioBus **this, const WebCore::AudioBus *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  WebCore::AudioBus *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  const float *v15;
  uint64_t v16;
  const float *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  float __C;

  v4 = *((unsigned int *)a2 + 7);
  if (!(_DWORD)v4)
  {
LABEL_10:
    v9 = *((_QWORD *)a2 + 1);
    v10 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    *this = WebCore::AudioBus::AudioBus(v10, (void *)1, v9, 1);
    return;
  }
  v5 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(*(_QWORD *)v5 + 24))
  {
    v6 = 0;
    v7 = v5 + 8;
    while (v4 - 1 != v6)
    {
      if (!*(unsigned __int8 *)(*(_QWORD *)(v7 + 8 * v6++) + 24))
      {
        if (v6 >= v4)
          goto LABEL_10;
        goto LABEL_7;
      }
    }
    goto LABEL_10;
  }
LABEL_7:
  if ((_DWORD)v4 == 2)
  {
    v11 = *((unsigned int *)a2 + 2);
    v12 = WTF::fastMalloc((WTF *)0x38);
    *this = WebCore::AudioBus::AudioBus((WebCore::AudioBus *)v12, (void *)1, v11, 1);
    v13 = *((_DWORD *)a2 + 7);
    if (!v13)
      goto LABEL_27;
    v14 = *((_QWORD *)a2 + 2);
    v15 = **(const float ***)v14;
    if (!v15)
      v15 = **(const float ***)(*(_QWORD *)v14 + 8);
    if (v13 <= 1)
    {
      __break(0xC471u);
      JUMPOUT(0x1961032E0);
    }
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(const float **)v16;
    if (!*(_QWORD *)v16)
      v17 = **(const float ***)(v16 + 8);
    if (!*(_DWORD *)(v12 + 28))
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x1961032D8);
    }
    v18 = **(_QWORD **)(v12 + 16);
    *(_BYTE *)(v18 + 24) = 0;
    v19 = *(float **)v18;
    if (!*(_QWORD *)v18)
      v19 = **(float ***)(v18 + 8);
    __C = 0.5;
    vDSP_vasm(v15, 1, v17, 1, &__C, v19, 1, v11);
    v20 = *(unsigned int *)(v12 + 28);
    if ((_DWORD)v20)
    {
      v21 = *(uint64_t **)(v12 + 16);
      do
      {
        v22 = *v21++;
        *(_BYTE *)(v22 + 24) = 0;
        --v20;
      }
      while (v20);
    }
    *(_DWORD *)(v12 + 52) = *((_DWORD *)a2 + 13);
  }
  else if ((_DWORD)v4 == 1)
  {
    WebCore::AudioBus::createBufferFromRange(a2, 0, *((_DWORD *)a2 + 2), this);
  }
  else
  {
    *this = 0;
  }
}

WTF **WebCore::AudioDSPKernelProcessor::initialize(WTF **this)
{
  WTF **v1;
  void *v2;
  int v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  if (!*((_BYTE *)this + 8))
  {
    v1 = this;
    this = (WTF **)(*((uint64_t (**)(WTF **))*this + 8))(this);
    v3 = (int)this;
    if ((_DWORD)this)
    {
      if (this >> 29)
      {
        __break(0xC471u);
        return this;
      }
      v4 = (WTF *)(8 * this);
      v5 = WTF::fastMalloc(v4);
      v6 = 0;
      do
      {
        this = (WTF **)(*((_QWORD *(**)(uint64_t *__return_ptr, WTF **))*v1 + 12))(&v10, v1);
        *(_QWORD *)((char *)v6 + v5) = v10;
        v6 = (WTF *)((char *)v6 + 8);
      }
      while (v4 != v6);
    }
    else
    {
      v5 = 0;
    }
    v7 = *((unsigned int *)v1 + 9);
    v8 = v1[3];
    if ((_DWORD)v7)
    {
      v9 = 8 * v7;
      do
      {
        this = *(WTF ***)v8;
        *(_QWORD *)v8 = 0;
        if (this)
          this = (WTF **)(*((uint64_t (**)(WTF **))*this + 1))(this);
        v8 = (WTF *)((char *)v8 + 8);
        v9 -= 8;
      }
      while (v9);
      v8 = v1[3];
    }
    if (v8)
    {
      v1[3] = 0;
      *((_DWORD *)v1 + 8) = 0;
      this = (WTF **)WTF::fastFree(v8, v2);
    }
    v1[3] = (WTF *)v5;
    *((_DWORD *)v1 + 8) = v3;
    *((_DWORD *)v1 + 9) = v3;
    *((_BYTE *)v1 + 8) = 1;
    *((_BYTE *)v1 + 40) = 1;
  }
  return this;
}

uint64_t WebCore::AudioDSPKernelProcessor::uninitialize(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(this + 8))
  {
    v2 = this;
    if (*(_DWORD *)(this + 32))
    {
      v3 = *(unsigned int *)(this + 36);
      if ((_DWORD)v3)
      {
        v4 = *(uint64_t **)(this + 24);
        v5 = 8 * v3;
        do
        {
          v6 = *v4;
          *v4 = 0;
          if (v6)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
          ++v4;
          v5 -= 8;
        }
        while (v5);
        *(_DWORD *)(v2 + 36) = 0;
      }
      this = *(_QWORD *)(v2 + 24);
      if (this)
      {
        *(_QWORD *)(v2 + 24) = 0;
        *(_DWORD *)(v2 + 32) = 0;
        this = WTF::fastFree((WTF *)this, a2);
      }
    }
    *(_BYTE *)(v2 + 8) = 0;
  }
  return this;
}

void WebCore::AudioDSPKernelProcessor::process(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  void **v12;
  _QWORD *v13;

  if (a2 && a3)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v6 = *(_DWORD *)(a2 + 28);
      if (v6 == *(_DWORD *)(a3 + 28) && v6 && *(_DWORD *)(a1 + 36) == v6)
      {
        v7 = 0;
        do
        {
          if (v7 >= *(unsigned int *)(a2 + 28) || v7 >= *(unsigned int *)(a3 + 28))
          {
            __break(0xC471u);
            JUMPOUT(0x1961035BCLL);
          }
          v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7);
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v7) + 24) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          ++v7;
        }
        while (v7 < *(unsigned int *)(a1 + 36));
      }
    }
    else
    {
      v9 = *(unsigned int *)(a3 + 28);
      if ((_DWORD)v9)
      {
        for (i = 0; i < v9; ++i)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * i);
          if (!*(_BYTE *)(v11 + 24))
          {
            *(_BYTE *)(v11 + 24) = 1;
            v12 = *(void ***)(v11 + 8);
            v13 = (_QWORD *)(v11 + 16);
            if (v12)
              v13 = v12 + 1;
            else
              v12 = (void **)v11;
            bzero(*v12, 4 * *v13);
            v9 = *(unsigned int *)(a3 + 28);
          }
        }
      }
    }
  }
}

uint64_t WebCore::AudioDSPKernelProcessor::processOnlyAudioParams(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  if (*(_BYTE *)(this + 8))
  {
    v2 = this;
    if (*(_DWORD *)(this + 36))
    {
      v4 = 0;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8 * v4);
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, a2);
        ++v4;
      }
      while (v4 < *(unsigned int *)(v2 + 36));
    }
  }
  return this;
}

uint64_t WebCore::AudioDSPKernelProcessor::reset(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(this + 8))
  {
    v1 = this;
    *(_BYTE *)(this + 40) = 1;
    if (*(_DWORD *)(this + 36))
    {
      v2 = 0;
      do
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8 * v2);
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
        ++v2;
      }
      while (v2 < *(unsigned int *)(v1 + 36));
    }
  }
  return this;
}

uint64_t WebCore::AudioDSPKernelProcessor::setNumberOfChannels(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2 && !*(_BYTE *)(this + 8))
    *(_DWORD *)(this + 12) = a2;
  return this;
}

double WebCore::AudioDSPKernelProcessor::tailTime(WebCore::AudioDSPKernelProcessor *this)
{
  double result;

  if (!*((_DWORD *)this + 9))
    return 0.0;
  (*(void (**)(_QWORD))(***((_QWORD ***)this + 3) + 40))(**((_QWORD **)this + 3));
  return result;
}

double WebCore::AudioDSPKernelProcessor::latencyTime(WebCore::AudioDSPKernelProcessor *this)
{
  double result;

  if (!*((_DWORD *)this + 9))
    return 0.0;
  (*(void (**)(_QWORD))(***((_QWORD ***)this + 3) + 48))(**((_QWORD **)this + 3));
  return result;
}

uint64_t WebCore::AudioDSPKernelProcessor::requiresTailProcessing(WebCore::AudioDSPKernelProcessor *this)
{
  return 1;
}

uint64_t WebCore::AudioDestinationResampler::AudioDestinationResampler(uint64_t a1, uint64_t a2, void *a3, float a4, float a5)
{
  unsigned __int8 *v10;
  int v12;
  WebCore::AudioBus *v13;
  WebCore::AudioBus *v14;
  WebCore::AudioBus *v15;
  WebCore::AudioBus *v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WebCore::MultiChannelResampler **v21;
  uint64_t v22;
  unsigned int *v23;
  void *v24;
  WebCore::MultiChannelResampler *v25;
  WTF *v26;
  void *v27;
  unsigned int *v29;

  *(_QWORD *)a1 = off_1E3407738;
  *(_BYTE *)(a1 + 8) = 0;
  v10 = (unsigned __int8 *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(float *)(a1 + 24) = a4;
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 8);
LABEL_5:
  *(_QWORD *)(a1 + 16) = a2;
  v12 = __ldxr(v10);
  if (v12 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v10))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
  *(_QWORD *)a1 = off_1E3407588;
  if (a3 < 0x21)
  {
    v13 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)(a1 + 32) = WebCore::AudioBus::AudioBus(v13, a3, 0x80uLL, 0);
    v14 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)(a1 + 40) = WebCore::AudioBus::AudioBus(v14, a3, 0x80uLL, 1);
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 12288;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    v15 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    v16 = WebCore::AudioBus::AudioBus(v15, a3, 0x3000uLL, 1);
    v18 = *(unsigned int **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v16;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        v29 = v18;
        WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v29, v17);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 12288;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
  }
  *(_QWORD *)(a1 + 96) = 0;
  v21 = (WebCore::MultiChannelResampler **)(a1 + 96);
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (a4 != a5)
  {
    v22 = WTF::fastMalloc((WTF *)0x30);
    v23 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = off_1E3407690;
    *((_QWORD *)v23 + 1) = a1;
    v29 = v23;
    WebCore::MultiChannelResampler::MultiChannelResampler(v22, a3, (void *)0x80, (uint64_t *)&v29, a4 / a5);
    if (v29)
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
    v25 = *v21;
    *v21 = (WebCore::MultiChannelResampler *)v22;
    if (v25)
    {
      WebCore::MultiChannelResampler::~MultiChannelResampler(v25, v24);
      WTF::fastFree(v26, v27);
    }
  }
  return a1;
}

void WebCore::AudioDestinationResampler::~AudioDestinationResampler(WebCore::AudioDestinationResampler *this, void *a2)
{
  uint64_t v3;
  WebCore::MultiChannelResampler *v4;
  WTF *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;

  *(_QWORD *)this = off_1E3407588;
  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WebCore::MultiChannelResampler *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
  {
    WebCore::MultiChannelResampler::~MultiChannelResampler(v4, a2);
    WTF::fastFree(v5, v6);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v16 = v7;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v16, a2);
    }
  }
  v10 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v16 = v10;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v16, a2);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      v16 = v13;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v16, a2);
    }
  }
}

uint64_t WebCore::AudioDestinationResampler::framesPerBuffer(WebCore::AudioDestinationResampler *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 5) + 8);
}

uint64_t WebCore::AudioDestinationResampler::start(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v6 = (unsigned __int8 *)(a1 + 120);
  if (__ldaxr((unsigned __int8 *)(a1 + 120)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 120);
LABEL_5:
  v8 = *a2;
  *a2 = 0;
  v9 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = __ldxr(v6);
  if (v10 == 1)
  {
    if (!__stlxr(0, v6))
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a3);
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a3);
}

uint64_t WebCore::AudioDestinationResampler::stop(unsigned __int8 *a1)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = a1 + 120;
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)a1 + 80))(a1);
  if (__ldaxr(v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  result = *((_QWORD *)a1 + 16);
  *((_QWORD *)a1 + 16) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

unsigned __int8 *WebCore::AudioDestinationResampler::setIsPlaying(unsigned __int8 *this, int a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v6;

  v2 = atomic_load(this + 136);
  if ((v2 & 1) != a2)
  {
    v3 = this;
    atomic_store(a2, this + 136);
    v4 = this + 8;
    if (__ldaxr(this + 8))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](this + 8);
LABEL_6:
    this = (unsigned __int8 *)*((_QWORD *)v3 + 2);
    if (this)
      this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
    v6 = __ldxr(v4);
    if (v6 == 1)
    {
      if (!__stlxr(0, v4))
        return this;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  return this;
}

uint64_t WebCore::AudioDestinationResampler::pullRendered(WebCore::AudioDestinationResampler *this, unint64_t a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  if (a2 >= 0x3000)
    v3 = 12288;
  else
    v3 = a2;
  v4 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_8;
  }
  MEMORY[0x19AEA534C]((char *)this + 48);
LABEL_8:
  WebCore::PushPullFIFO::pull((_QWORD *)this + 7, *((_QWORD *)this + 4), v3);
  v7 = v6;
  v8 = __ldxr(v4);
  if (v8 == 1)
  {
    if (!__stlxr(0, v4))
      return v7;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return v7;
}

BOOL WebCore::AudioDestinationResampler::render(uint64_t a1, unint64_t a2, double a3, double a4)
{
  unsigned __int8 *v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  _QWORD *v13;

  *(double *)(a1 + 104) = a3;
  *(double *)(a1 + 112) = a4;
  v6 = (unsigned __int8 *)(a1 + 120);
  while (1)
  {
    v7 = *v6;
    if ((v7 & 1) != 0)
      break;
    v8 = __ldaxr(v6);
    if (v8 == v7)
    {
      if (!__stxr(v7 | 1, v6))
      {
        if (*(_QWORD *)(a1 + 128))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v9 = &off_1E34076B8;
          v9[1] = a1;
          v9[2] = a2;
          v13 = v9;
          (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), &v13);
          v10 = v13;
          v13 = 0;
          if (v10)
            (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        }
        else
        {
          WebCore::AudioDestinationResampler::renderOnRenderingThreadIfPlaying(a1, a2);
        }
        v11 = __ldxr(v6);
        if (v11 == 1)
        {
          if (!__stlxr(0, v6))
            return (v7 & 1) == 0;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v6);
        return (v7 & 1) == 0;
      }
    }
    else
    {
      __clrex();
    }
  }
  return (v7 & 1) == 0;
}

uint64_t WebCore::AudioDestinationResampler::renderOnRenderingThreadIfPlaying(uint64_t this, unint64_t a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t *v9;
  uint64_t **v10;
  uint64_t v11;
  int v12;
  int v13;
  void (***v14)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  int v15;
  unint64_t v16;
  unint64_t i;
  uint64_t v18;
  void **v19;
  _QWORD *v20;
  int v22;

  v2 = atomic_load((unsigned __int8 *)(this + 136));
  if (a2 && (v2 & 1) != 0)
  {
    v4 = this;
    v5 = 0;
    v6 = this + 104;
    v7 = (unsigned __int8 *)(this + 8);
    v8 = (unsigned __int8 *)(this + 48);
    v9 = (unint64_t *)(this + 56);
    do
    {
      v10 = *(uint64_t ***)(v4 + 96);
      v11 = *(_QWORD *)(v4 + 40);
      if (v10)
      {
        WebCore::MultiChannelResampler::process(v10, *(WebCore::AudioBus **)(v4 + 40), 0x80uLL);
      }
      else
      {
        while (1)
        {
          v12 = *v7;
          if ((v12 & 1) != 0)
            break;
          v13 = __ldaxr(v7);
          if (v13 == v12)
          {
            if (!__stxr(v12 | 1, v7))
            {
              v14 = *(void (****)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v4 + 16);
              if (v14)
                (**v14)(*(_QWORD *)(v4 + 16), 0, v11, 128, v6);
              v15 = __ldxr(v7);
              if (v15 == 1)
              {
                if (!__stlxr(0, v7))
                {
                  if (v14)
                    goto LABEL_26;
                  break;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v7);
              if (v14)
                goto LABEL_26;
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
        v16 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v16)
        {
          for (i = 0; i < v16; ++i)
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v11 + 16) + 8 * i);
            if (!*(_BYTE *)(v18 + 24))
            {
              *(_BYTE *)(v18 + 24) = 1;
              v19 = *(void ***)(v18 + 8);
              v20 = (_QWORD *)(v18 + 16);
              if (v19)
                v20 = v19 + 1;
              else
                v19 = (void **)v18;
              bzero(*v19, 4 * *v20);
              v16 = *(unsigned int *)(v11 + 28);
            }
          }
        }
      }
LABEL_26:
      if (__ldaxr(v8))
      {
        __clrex();
      }
      else if (!__stxr(1u, v8))
      {
        goto LABEL_30;
      }
      MEMORY[0x19AEA534C](v8);
LABEL_30:
      this = (uint64_t)WebCore::PushPullFIFO::push(v9, *(_QWORD *)(v4 + 40));
      v22 = __ldxr(v8);
      if (v22 == 1)
      {
        if (!__stlxr(0, v8))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      this = WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_35:
      v5 += 128;
    }
    while (v5 < a2);
  }
  return this;
}

uint64_t WebCore::AudioHardwareListener::setCreationFunction(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  {
    WebCore::audioHardwareListenerCreationFunction(void)::creationFunction = 0;
  }
  v1 = *a1;
  *a1 = 0;
  result = WebCore::audioHardwareListenerCreationFunction(void)::creationFunction;
  WebCore::audioHardwareListenerCreationFunction(void)::creationFunction = v1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::AudioHardwareListener::resetCreationFunction(WebCore::AudioHardwareListener *this)
{
  _QWORD *v1;
  uint64_t result;

  {
    WebCore::audioHardwareListenerCreationFunction(void)::creationFunction = 0;
  }
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v1 = off_1E34076E0;
  result = WebCore::audioHardwareListenerCreationFunction(void)::creationFunction;
  WebCore::audioHardwareListenerCreationFunction(void)::creationFunction = (uint64_t)v1;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::AudioHardwareListener::create(WebCore::AudioHardwareListener *this, Client *a2)
{
  uint64_t v3;
  uint64_t v4;

  {
    v3 = WebCore::audioHardwareListenerCreationFunction(void)::creationFunction;
    if (WebCore::audioHardwareListenerCreationFunction(void)::creationFunction)
      return (*(uint64_t (**)(uint64_t, WebCore::AudioHardwareListener *))(*(_QWORD *)v3 + 16))(v3, this);
  }
  else
  {
    WebCore::audioHardwareListenerCreationFunction(void)::creationFunction = 0;
  }
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v3 = off_1E34076E0;
  v4 = WebCore::audioHardwareListenerCreationFunction(void)::creationFunction;
  WebCore::audioHardwareListenerCreationFunction(void)::creationFunction = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v3 = WebCore::audioHardwareListenerCreationFunction(void)::creationFunction;
  }
  return (*(uint64_t (**)(uint64_t, WebCore::AudioHardwareListener *))(*(_QWORD *)v3 + 16))(v3, this);
}

double WebCore::AudioHardwareListener::AudioHardwareListener(WebCore::AudioHardwareListener *this, Client *a2)
{
  double result;

  *(_QWORD *)this = &unk_1E34075F0;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)&result = 32;
  *(_OWORD *)((char *)this + 24) = xmmword_1969F6E80;
  return result;
}

uint64_t WebCore::AudioDestinationResampler::isPlaying(WebCore::AudioDestinationResampler *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 136);
  return v1 & 1;
}

float WebCore::AudioDestination::sampleRate(WebCore::AudioDestination *this)
{
  return *((float *)this + 6);
}

uint64_t WebCore::StepsTimingFunction::clone@<X0>(WebCore::StepsTimingFunction *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  int v5;
  __int16 v6;

  result = WTF::fastMalloc((WTF *)0x18);
  v5 = *((_DWORD *)this + 3);
  v6 = *((_WORD *)this + 8);
  *(_QWORD *)result = &off_1E3407620;
  *(_DWORD *)(result + 8) = 1;
  *(_DWORD *)(result + 12) = v5;
  *(_WORD *)(result + 16) = v6;
  *a2 = result;
  return result;
}

uint64_t WebCore::StepsTimingFunction::type(WebCore::StepsTimingFunction *this)
{
  return 2;
}

uint64_t WebCore::StepsTimingFunction::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((_DWORD)result != 2 || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  if (*(_BYTE *)(a1 + 17) && *(_BYTE *)(a2 + 17))
    return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 17) != 0) == (*(_BYTE *)(a2 + 17) != 0))
    return 1;
  if (*(_BYTE *)(a1 + 17))
  {
    if (*(_BYTE *)(a2 + 17))
      return 0;
    v5 = *(unsigned __int8 *)(a1 + 16);
    return v5 == 5;
  }
  if (*(_BYTE *)(a2 + 17))
  {
    v5 = *(unsigned __int8 *)(a2 + 16);
    return v5 == 5;
  }
  __break(1u);
  return result;
}

__n128 WebCore::SpringTimingFunction::clone@<Q0>(__n128 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  __n128 v6;

  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = &off_1E3407658;
  result = this[1];
  v6 = this[2];
  *(__n128 *)(v4 + 16) = result;
  *(__n128 *)(v4 + 32) = v6;
  *a2 = v4;
  return result;
}

uint64_t WebCore::SpringTimingFunction::type(WebCore::SpringTimingFunction *this)
{
  return 3;
}

BOOL WebCore::SpringTimingFunction::operator==(double *a1, double *a2)
{
  return (*(unsigned int (**)(double *))(*(_QWORD *)a2 + 24))(a2) == 3
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5];
}

void WTF::Detail::CallableWrapper<WebCore::AudioDestinationResampler::AudioDestinationResampler(WebCore::AudioIOCallback &,unsigned int,float,float)::$_0,void,WebCore::AudioBus *,unsigned long>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  void (***v7)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t);
  int v8;
  unint64_t v9;
  unint64_t i;
  uint64_t v11;
  void **v12;
  _QWORD *v13;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = (unsigned __int8 *)(v3 + 8);
  while (1)
  {
    v5 = *v4;
    if ((v5 & 1) != 0)
      break;
    v6 = __ldaxr(v4);
    if (v6 == v5)
    {
      if (!__stxr(v5 | 1, v4))
      {
        v7 = *(void (****)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v3 + 16);
        if (v7)
          (**v7)(v7, 0, a2, 128, v3 + 104);
        v8 = __ldxr(v4);
        if (v8 == 1)
        {
          if (!__stlxr(0, v4))
          {
            if (v7)
              return;
            break;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v4);
        if (v7)
          return;
        break;
      }
    }
    else
    {
      __clrex();
    }
  }
  v9 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v9)
  {
    for (i = 0; i < v9; ++i)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i);
      if (!*(_BYTE *)(v11 + 24))
      {
        *(_BYTE *)(v11 + 24) = 1;
        v12 = *(void ***)(v11 + 8);
        v13 = (_QWORD *)(v11 + 16);
        if (v12)
          v13 = v12 + 1;
        else
          v12 = (void **)v11;
        bzero(*v12, 4 * *v13);
        v9 = *(unsigned int *)(a2 + 28);
      }
    }
  }
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _OWORD *a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, char a6@<W5>, _QWORD *a7@<X8>)
{
  int v11;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  _BYTE *v18;
  size_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  int8x16_t v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  unsigned int v33;
  _WORD *v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  _WORD *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD v44[3];
  int8x16x2_t v45;
  int8x16x2_t v46;
  int8x16x2_t v47;

  v11 = result;
  v44[2] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v13 = v44[0];
        if (!v44[0])
          goto LABEL_44;
        v14 = (_BYTE *)(v44[0] + 20);
        *(_DWORD *)v44[0] = 2;
        *(_DWORD *)(v13 + 4) = v11;
        *(_QWORD *)(v13 + 8) = v13 + 20;
        *(_DWORD *)(v13 + 16) = 4;
        if (a4)
        {
          if (a4 == 1)
            *v14 = *(_BYTE *)a3;
          else
            result = (uint64_t)memcpy((void *)(v13 + 20), a3, a4);
        }
        v15 = 0;
        if ((a5 & 0x80000000) != 0)
        {
          v40 = -a5;
          do
          {
            *((_BYTE *)&v44[1] + v15-- + 4) = (v40 % 0xA) | 0x30;
            v17 = v40 > 9;
            v40 /= 0xAu;
          }
          while (v17);
          v41 = v15 + 12;
          v18 = (char *)&v44[1] + v15 + 4;
          *v18 = 45;
          if (v15 + 14 <= 14)
          {
            if (v41 <= 12)
              v41 = 12;
            v19 = v41 - v15 - 11;
            goto LABEL_13;
          }
        }
        else
        {
          v16 = a5;
          do
          {
            *((_BYTE *)&v44[1] + v15-- + 4) = (v16 % 0xA) | 0x30;
            v17 = v16 > 9;
            v16 /= 0xAu;
          }
          while (v17);
          if (v15 + 14 <= 13)
          {
            v18 = (char *)&v44[1] + v15 + 5;
            v19 = -v15;
LABEL_13:
            result = (uint64_t)memcpy(&v14[a4], v18, v19);
          }
        }
        if ((a5 & 0x80000000) != 0)
        {
          v42 = -a5;
          v20 = 1;
          do
          {
            ++v20;
            v35 = v42 >= 0xA;
            v42 /= 0xAu;
          }
          while (v35);
        }
        else
        {
          v20 = 0;
          do
          {
            ++v20;
            v17 = a5 > 9;
            a5 /= 0xAu;
          }
          while (v17);
        }
        v14[a4 + v20] = a6;
        goto LABEL_44;
      }
LABEL_47:
      v13 = 0;
      goto LABEL_44;
    }
LABEL_46:
    v13 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_44;
  }
  if (!(_DWORD)result)
    goto LABEL_46;
  if (result > 0x7FFFFFEF)
    goto LABEL_47;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v13 = v44[0];
  if (v44[0])
  {
    v21 = (char *)(v44[0] + 20);
    *(_DWORD *)v44[0] = 2;
    *(_DWORD *)(v13 + 4) = v11;
    *(_QWORD *)(v13 + 8) = v13 + 20;
    *(_DWORD *)(v13 + 16) = 0;
    v22 = v13 + 20 + 2 * a4;
    if ((a4 & 0xFFFFFFC0) != 0)
    {
      v23 = &v21[2 * (a4 & 0xFFFFFFC0)];
      v24 = 0uLL;
      do
      {
        v45.val[0] = (int8x16_t)*a3;
        v25 = *((int8x16_t *)a3 + 1);
        v46.val[0] = (int8x16_t)a3[2];
        v26 = a3[3];
        a3 += 4;
        v27 = v26;
        v46.val[1] = 0uLL;
        v47.val[0] = v25;
        v45.val[1] = 0uLL;
        v28 = v21;
        vst2q_s8(v28, v45);
        v28 += 32;
        v47.val[1] = 0uLL;
        vst2q_s8(v28, v47);
        v29 = v21 + 64;
        vst2q_s8(v29, v46);
        v30 = v21 + 96;
        vst2q_s8(v30, *(int8x16x2_t *)(&v24 - 1));
        v21 += 128;
      }
      while (v21 != v23);
      v21 = v23;
    }
    while (v21 != (char *)v22)
    {
      v31 = *(unsigned __int8 *)a3;
      a3 = (_OWORD *)((char *)a3 + 1);
      *(_WORD *)v21 = v31;
      v21 += 2;
    }
    if ((a5 & 0x80000000) != 0)
    {
      v36 = -a5;
      v37 = 12;
      do
      {
        *((_BYTE *)v44 + v37--) = (v36 % 0xA) | 0x30;
        v17 = v36 > 9;
        v36 /= 0xAu;
      }
      while (v17);
      *((_BYTE *)v44 + v37) = 45;
      if (v37 + 2 <= 14)
      {
        v38 = (_WORD *)(v13 + 20 + 2 * a4);
        do
        {
          *v38++ = *((unsigned __int8 *)v44 + v37);
          v17 = v37++ < 12;
        }
        while (v17);
      }
    }
    else
    {
      v32 = 0;
      v33 = a5;
      do
      {
        *((_BYTE *)&v44[1] + v32-- + 4) = (v33 % 0xA) | 0x30;
        v17 = v33 > 9;
        v33 /= 0xAu;
      }
      while (v17);
      if (v32 + 14 <= 13)
      {
        v34 = (_WORD *)(v13 + 20 + 2 * a4);
        do
        {
          *v34++ = *((unsigned __int8 *)&v44[1] + v32 + 5);
          v35 = __CFADD__(v32++, 1);
        }
        while (!v35);
      }
    }
    if ((a5 & 0x80000000) != 0)
    {
      v43 = -a5;
      v39 = 1;
      do
      {
        ++v39;
        v35 = v43 >= 0xA;
        v43 /= 0xAu;
      }
      while (v35);
    }
    else
    {
      v39 = 0;
      do
      {
        ++v39;
        v17 = a5 > 9;
        a5 /= 0xAu;
      }
      while (v17);
    }
    *(_WORD *)(v22 + 2 * v39) = a6;
  }
LABEL_44:
  *a7 = v13;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioDestinationResampler::render(double,WTF::MonotonicTime,unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34076B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioDestinationResampler::render(double,WTF::MonotonicTime,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34076B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioDestinationResampler::render(double,WTF::MonotonicTime,unsigned long)::$_0,void>::call(uint64_t a1)
{
  return WebCore::AudioDestinationResampler::renderOnRenderingThreadIfPlaying(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

double WTF::Detail::CallableWrapper<WebCore::AudioHardwareListener::resetCreationFunction(void)::$_0,WTF::Ref<WebCore::AudioHardwareListener,WTF::RawPtrTraits<WebCore::AudioHardwareListener>,WTF::DefaultRefDerefTraits<WebCore::AudioHardwareListener>>,WebCore::AudioHardwareListener::Client &>::call@<D0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)&result = 32;
  *(_OWORD *)(v4 + 24) = xmmword_1969F6E80;
  *(_DWORD *)(v4 + 40) = 1;
  *(_QWORD *)v4 = off_1E3407708;
  *(_QWORD *)(v4 + 8) = a1;
  *a2 = v4;
  return result;
}

uint64_t WebCore::AudioHardwareListener::resetCreationFunction(void)::$_0::operator() const(WebCore::AudioHardwareListener::Client &)::RefCountedAudioHardwareListener::ref(uint64_t result)
{
  ++*(_DWORD *)(result + 40);
  return result;
}

_DWORD *WebCore::AudioHardwareListener::resetCreationFunction(void)::$_0::operator() const(WebCore::AudioHardwareListener::Client &)::RefCountedAudioHardwareListener::deref(_DWORD *result)
{
  if (result[10] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 24))(result);
  --result[10];
  return result;
}

void WebCore::AudioUtilities::applyNoise(WebCore::AudioUtilities *this, float *a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  unsigned int v7;
  uint64_t i;
  __int16 v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  unsigned int v31;
  unsigned int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  std::string __token;
  _DWORD v41[627];
  std::random_device v42;

  v3 = MEMORY[0x1E0C80A78](this, a2);
  v6 = v5;
  *((_BYTE *)&__token.__r_.__value_.__s + 23) = 12;
  if (&__token <= (std::string *)"/dev/urandom" && (char *)&__token.__r_.__value_.__r.__words[1] + 4 > "/dev/urandom")
  {
    __break(1u);
  }
  else
  {
    v38 = v3;
    v39 = v4;
    strcpy((char *)&__token, "/dev/urandom");
    std::random_device::random_device(&v42, &__token);
    if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__token.__r_.__value_.__l.__data_);
    v7 = MEMORY[0x19AEA75D8](&v42);
    v41[0] = v7;
    for (i = 1; i != 624; ++i)
    {
      v7 = i + 1812433253 * (v7 ^ (v7 >> 30));
      v41[i] = v7;
    }
    v9 = WTF::weakRandomNumber<unsigned int>();
    memset_pattern16(&__token, &unk_1969F6F50, 0x2000uLL);
    v12 = v38;
    v11 = v39;
    if (v39)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 2048 - (v9 & 0x3FF);
      v37 = v16;
      do
      {
        v17 = *(float *)(v12 + 4 * v15);
        v18 = ~(COERCE__INT64(v17) << 32) + COERCE__INT64(v17);
        v19 = (v18 ^ (v18 >> 22)) + ~((v18 ^ (v18 >> 22)) << 13);
        v20 = (9 * (v19 ^ (v19 >> 8))) ^ ((9 * (v19 ^ (v19 >> 8))) >> 15);
        v21 = (((v20 + ~(v20 << 27)) >> 31) ^ ((_DWORD)v20 + ~((_DWORD)v20 << 27))) % v16;
        v22 = *((float *)&__token.__r_.__value_.__l.__data_ + v21);
        if (fabsf(v22) == INFINITY)
        {
          if (v14)
          {
            v14 = 0;
            v23 = v10;
          }
          else
          {
            v24 = v41[v13];
            do
            {
              v25 = (v13 + 1) % 0x270;
              v26 = v41[(v13 + 397) % 0x270] ^ ((v41[v25] & 0x7FFFFFFE | v24 & 0x80000000) >> 1) ^ ((int)(v41[v25] << 31) >> 31) & 0x9908B0DF;
              v41[v13] = v26;
              v27 = ((v26 ^ (v26 >> 11)) << 7) & 0x9D2C5680 ^ v26 ^ (v26 >> 11);
              v28 = (v27 << 15) & 0xEFC60000 ^ v27;
              if (v25 < 0x26F)
                v13 = v25 + 1;
              else
                v13 = v25 - 623;
              v24 = v41[v13];
              if (v25 >= 0xE3)
                v29 = -227;
              else
                v29 = 397;
              v30 = (float)(v28 ^ (v28 >> 18));
              v31 = v41[v29 + v25] ^ ((v24 & 0x7FFFFFFE | v41[v25] & 0x80000000) >> 1) ^ (v24 << 31 >> 31) & 0x9908B0DF;
              v32 = ((v31 ^ (v31 >> 11)) << 7) & 0x9D2C5680 ^ v31 ^ (v31 >> 11);
              v33 = (float)((float)(v30 * 2.3283e-10) * 2.0) + -1.0;
              v34 = (float)((float)((float)((v32 << 15) & 0xEFC60000 ^ v32 ^ (((v32 << 15) & 0xEFC60000 ^ v32) >> 18))
                                  * 2.3283e-10)
                          * 2.0)
                  + -1.0;
              v35 = (float)(v34 * v34) + (float)(v33 * v33);
              v41[v25] = v31;
            }
            while (v35 > 1.0 || v35 == 0.0);
            v36 = sqrtf((float)(logf((float)(v34 * v34) + (float)(v33 * v33)) * -2.0) / v35);
            v10 = v34 * v36;
            v23 = v33 * v36;
            v14 = 1;
            v12 = v38;
            v11 = v39;
            v16 = v37;
          }
          v22 = (float)(v23 * v6) + 1.0;
          *((float *)&__token.__r_.__value_.__l.__data_ + v21) = v22;
        }
        *(float *)(v12 + 4 * v15++) = v17 * v22;
      }
      while (v15 != v11);
    }
    std::random_device::~random_device(&v42);
  }
}

WebCore::Biquad *WebCore::Biquad::Biquad(WebCore::Biquad *this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  WTF::fastAlignedFree(0, a2);
  v3 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = 128;
  bzero(v3, 0x400uLL);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  WTF::fastAlignedFree(0, v4);
  v5 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = 128;
  bzero(v5, 0x400uLL);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  WTF::fastAlignedFree(0, v6);
  v7 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 4) = v7;
  *((_QWORD *)this + 5) = 128;
  bzero(v7, 0x400uLL);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  WTF::fastAlignedFree(0, v8);
  v9 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 6) = v9;
  *((_QWORD *)this + 7) = 128;
  bzero(v9, 0x400uLL);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  WTF::fastAlignedFree(0, v10);
  v11 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 8) = v11;
  *((_QWORD *)this + 9) = 128;
  bzero(v11, 0x400uLL);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  WTF::fastAlignedFree(0, v12);
  v13 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 10) = v13;
  *((_QWORD *)this + 11) = 1026;
  bzero(v13, 0x2010uLL);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  WTF::fastAlignedFree(0, v14);
  v15 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 12) = v15;
  *((_QWORD *)this + 13) = 1026;
  bzero(v15, 0x2010uLL);
  *((_BYTE *)this + 144) = 0;
  **(_QWORD **)this = 0x3FF0000000000000;
  **((_QWORD **)this + 2) = 0;
  **((_QWORD **)this + 4) = 0;
  **((_QWORD **)this + 6) = 0;
  **((_QWORD **)this + 8) = 0;
  v16 = (_QWORD *)*((_QWORD *)this + 10);
  *v16 = 0;
  v16[1] = 0;
  v17 = (_QWORD *)*((_QWORD *)this + 12);
  *v17 = 0;
  v17[1] = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  return this;
}

double WebCore::Biquad::process(double **this, float *a2, float *a3, unint64_t a4)
{
  unint64_t v4;
  float *v5;
  float64x2_t v8;
  double v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  float v20;
  float v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double *v32;
  unint64_t v33;
  float *v34;
  vDSP_Length v35;
  uint64_t v36;
  float v37;
  double *v38;
  vDSP_Length v39;
  double v40;
  float v41;
  float *v42;
  float v43;
  int8x8_t v44;
  float v45;
  double result;
  double *v47;
  double __B[6];

  v4 = a4;
  v5 = a3;
  __B[5] = *(double *)MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 144))
  {
    v8 = *((float64x2_t *)this + 7);
    v9 = *((double *)this + 16);
    v10 = (double *)(this + 17);
    v11 = *((double *)this + 17);
    if (a4)
    {
      v12 = *this;
      v13 = this[2];
      v14 = this[4];
      v15 = this[6];
      v16 = *((double *)this + 15);
      v17 = this[8];
      do
      {
        v18 = v16;
        v19 = v9;
        v16 = v8.f64[0];
        v20 = *a2++;
        v21 = v20;
        v22 = *v12++;
        v23 = v22;
        v24 = *v13++;
        v8.f64[0] = v21;
        v25 = v16 * v24 + v23 * v8.f64[0];
        v26 = *v14++;
        v27 = v25 + v26 * v18;
        v28 = *v15++;
        v29 = v27 - v28 * v19;
        v30 = *v17++;
        *(float *)&v29 = v29 - v30 * v11;
        *v5++ = *(float *)&v29;
        v9 = *(float *)&v29;
        v11 = v19;
        --v4;
      }
      while (v4);
      v8.f64[1] = v16;
    }
    else
    {
      v19 = *((double *)this + 17);
    }
    v44 = (int8x8_t)vcvt_f32_f64(v8);
    *((float64x2_t *)this + 7) = vcvtq_f64_f32((float32x2_t)vbic_s8(v44, (int8x8_t)vcgt_f32((float32x2_t)0x80000000800000, vabs_f32((float32x2_t)v44))));
    v45 = v9;
    if (fabsf(v45) < 1.1755e-38)
      v45 = 0.0;
    *((double *)this + 16) = v45;
    v43 = v19;
    if (fabsf(v43) < 1.1755e-38)
      v43 = 0.0;
  }
  else
  {
    v31 = this[10];
    v32 = this[12];
    *(_QWORD *)v31 = this[15];
    *((_QWORD *)v31 + 1) = this[14];
    v47 = (double *)(this + 17);
    *(_QWORD *)v32 = this[17];
    *((_QWORD *)v32 + 1) = this[16];
    __B[0] = **this;
    __B[1] = *this[2];
    __B[2] = *this[4];
    __B[3] = *this[6];
    __B[4] = *this[8];
    if (a4)
    {
      v33 = a4;
      v34 = a3;
      do
      {
        if (v33 >= 0x400)
          v35 = 1024;
        else
          v35 = v33;
        v36 = 2;
        do
        {
          v37 = *a2++;
          v31[v36++] = v37;
        }
        while (v36 - v35 != 2);
        vDSP_deq22D(v31, 1, __B, v32, 1, v35);
        *(_OWORD *)v31 = *(_OWORD *)&v31[v35];
        *(_OWORD *)v32 = *(_OWORD *)&v32[v35];
        v38 = v32 + 2;
        v39 = v35;
        do
        {
          v40 = *v38++;
          v41 = v40;
          *v34++ = v41;
          --v39;
        }
        while (v39);
        v33 -= v35;
      }
      while (v33);
    }
    this[14] = (double *)*((_QWORD *)v31 + 1);
    this[15] = *(double **)v31;
    v42 = &v5[v4];
    *((double *)this + 16) = *(v42 - 1);
    v43 = *(v42 - 2);
    v10 = v47;
  }
  result = v43;
  *v10 = result;
  return result;
}

void WebCore::Biquad::setLowShelfParams(WebCore::Biquad *this, uint64_t a2, double a3, double a4)
{
  double v6;
  double v7;
  double v8;
  __double2 v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (a3 <= 1.0)
    v6 = a3;
  else
    v6 = 1.0;
  v7 = 0.0;
  v8 = __exp10(a4 / 40.0);
  if (fmax(v6, 0.0) == 1.0)
  {
    *(double *)(*(_QWORD *)this + 8 * a2) = v8 * v8;
LABEL_9:
    *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) = 0;
    *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2) = 0;
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2) = 0;
    goto LABEL_10;
  }
  if (v6 <= 0.0)
  {
    *(_QWORD *)(*(_QWORD *)this + 8 * a2) = 0x3FF0000000000000;
    goto LABEL_9;
  }
  v9 = __sincos_stret(v6 * 3.14159265);
  v10 = sqrt(v8);
  v11 = (v10 + v10) * (v9.__sinval * 0.5 * sqrt((v8 + 1.0 / v8) * 0.0 + 2.0));
  v12 = v8 + 1.0 - (v8 + -1.0) * v9.__cosval;
  v13 = v8 + 1.0 + (v8 + -1.0) * v9.__cosval;
  v14 = 1.0 / (v13 + v11);
  *(double *)(*(_QWORD *)this + 8 * a2) = v14 * (v8 * (v12 + v11));
  *(double *)(*((_QWORD *)this + 2) + 8 * a2) = (v8 + v8) * (v8 + -1.0 - (v8 + 1.0) * v9.__cosval) * v14;
  *(double *)(*((_QWORD *)this + 4) + 8 * a2) = v14 * (v8 * (v12 - v11));
  *(double *)(*((_QWORD *)this + 6) + 8 * a2) = (v8 + -1.0 + (v8 + 1.0) * v9.__cosval) * -2.0 * v14;
  v7 = (v13 - v11) * v14;
LABEL_10:
  *(double *)(*((_QWORD *)this + 8) + 8 * a2) = v7;
}

void WebCore::Biquad::setHighShelfParams(WebCore::Biquad *this, uint64_t a2, double a3, double a4)
{
  double v6;
  double v7;
  double v8;
  double v9;
  __double2 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  if (a3 <= 1.0)
    v6 = a3;
  else
    v6 = 1.0;
  v7 = 0.0;
  v8 = __exp10(a4 / 40.0);
  if (fmax(v6, 0.0) == 1.0)
  {
    *(_QWORD *)(*(_QWORD *)this + 8 * a2) = 0x3FF0000000000000;
LABEL_9:
    *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) = 0;
    *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2) = 0;
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2) = 0;
    goto LABEL_10;
  }
  v9 = v8;
  if (v6 <= 0.0)
  {
    *(double *)(*(_QWORD *)this + 8 * a2) = v8 * v8;
    goto LABEL_9;
  }
  v10 = __sincos_stret(v6 * 3.14159265);
  v11 = sqrt(v9);
  v12 = (v11 + v11) * (v10.__sinval * 0.5 * sqrt((v9 + 1.0 / v9) * 0.0 + 2.0));
  v13 = v9 + 1.0 + (v9 + -1.0) * v10.__cosval;
  v14 = v9 + 1.0 - (v9 + -1.0) * v10.__cosval;
  v15 = 1.0 / (v14 + v12);
  *(double *)(*(_QWORD *)this + 8 * a2) = v15 * (v9 * (v13 + v12));
  *(double *)(*((_QWORD *)this + 2) + 8 * a2) = v9 * -2.0 * (v9 + -1.0 + (v9 + 1.0) * v10.__cosval) * v15;
  *(double *)(*((_QWORD *)this + 4) + 8 * a2) = v15 * (v9 * (v13 - v12));
  *(double *)(*((_QWORD *)this + 6) + 8 * a2) = (v9
                                               + -1.0
                                               - (v9 + 1.0) * v10.__cosval
                                               + v9
                                               + -1.0
                                               - (v9 + 1.0) * v10.__cosval)
                                              * v15;
  v7 = (v14 - v12) * v15;
LABEL_10:
  *(double *)(*((_QWORD *)this + 8) + 8 * a2) = v7;
}

void WebCore::Biquad::setPeakingParams(WebCore::Biquad *this, uint64_t a2, double a3, double a4, double a5)
{
  double v8;
  double v9;
  double v10;
  double v11;
  __double2 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  if (a3 <= 1.0)
    v8 = a3;
  else
    v8 = 1.0;
  v9 = __exp10(a5 / 40.0);
  v10 = 0.0;
  if (v8 <= 0.0)
    v11 = 0.0;
  else
    v11 = v8;
  if (v8 > 0.0 && v11 < 1.0)
  {
    if (a4 <= 0.0)
    {
      *(double *)(*(_QWORD *)this + 8 * a2) = v9 * v9;
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) = 0;
      *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2) = 0;
      *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2) = 0;
      v10 = 0.0;
    }
    else
    {
      v13 = __sincos_stret(v11 * 3.14159265);
      v14 = v13.__sinval / (a4 + a4);
      v15 = v14 * v9 + 1.0;
      v16 = 1.0 - v14 * v9;
      v17 = v14 / v9;
      *(double *)(*(_QWORD *)this + 8 * a2) = v15 * (1.0 / (v17 + 1.0));
      v18 = v13.__cosval * -2.0 * (1.0 / (v17 + 1.0));
      *(double *)(*((_QWORD *)this + 2) + 8 * a2) = v18;
      *(double *)(*((_QWORD *)this + 4) + 8 * a2) = v16 * (1.0 / (v17 + 1.0));
      *(double *)(*((_QWORD *)this + 6) + 8 * a2) = v18;
      v10 = (1.0 - v17) * (1.0 / (v17 + 1.0));
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)this + 8 * a2) = 0x3FF0000000000000;
    *(_QWORD *)(*((_QWORD *)this + 2) + 8 * a2) = 0;
    *(_QWORD *)(*((_QWORD *)this + 4) + 8 * a2) = 0;
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * a2) = 0;
  }
  *(double *)(*((_QWORD *)this + 8) + 8 * a2) = v10;
}

void WebCore::Biquad::getFrequencyResponse(double **this, unsigned int a2, float *a3, float *a4, float *a5)
{
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  float v13;
  float v15;
  __double2 v16;
  double v17;
  double v18;
  double v19;
  long double v20;
  long double v21;
  float v22;
  double v23;
  double v24[2];
  double v25;
  double v26;
  double v27[2];
  double cosval;
  double sinval;

  if (a2)
  {
    v23 = **this;
    v8 = *this[2];
    v9 = *this[4];
    v10 = *this[6];
    v11 = *this[8];
    v12 = a2;
    do
    {
      v13 = *a3;
      if (*a3 >= 0.0 && v13 <= 1.0)
      {
        v16 = __sincos_stret(v13 * -3.14159265);
        cosval = v16.__cosval;
        sinval = v16.__sinval;
        v25 = v8 + v9 * v16.__cosval;
        v26 = v9 * v16.__sinval;
        v27[0] = v23 + std::operator*[abi:sn180100]<double>(&v25, &cosval);
        v27[1] = v17;
        v24[0] = v10 + v11 * cosval;
        v24[1] = v11 * sinval;
        v25 = std::operator*[abi:sn180100]<double>(v24, &cosval) + 1.0;
        v26 = v18 + 0.0;
        v19 = std::operator/[abi:sn180100]<double>(v27, &v25);
        v21 = v20;
        v22 = hypot(v19, v20);
        *a4 = v22;
        v15 = atan2(v21, v19);
      }
      else
      {
        *a4 = nanf("");
        v15 = nanf("");
      }
      *a5++ = v15;
      ++a4;
      ++a3;
      --v12;
    }
    while (v12);
  }
}

double std::operator*[abi:sn180100]<double>(double *a1, double *a2)
{
  return *a1 * *a2 - a1[1] * a2[1];
}

double std::operator/[abi:sn180100]<double>(double *a1, long double *a2)
{
  double v2;
  int v3;
  double v4;
  long double v5;
  double v6;
  double v8;
  double v9;
  long double v10;
  double v11;
  long double __x;

  v8 = *a1;
  v9 = a1[1];
  v10 = a2[1];
  __x = *a2;
  v2 = logb(fmax(fabs(*a2), fabs(v10)));
  if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v3 = 0;
    v4 = v10;
  }
  else
  {
    v3 = (int)v2;
    __x = scalbn(__x, -(int)v2);
    v4 = scalbn(v10, -v3);
  }
  v11 = v4;
  v5 = v4 * v4 + __x * __x;
  v6 = scalbn((v9 * v4 + v8 * __x) / v5, -v3);
  scalbn((v9 * __x - v8 * v11) / v5, -v3);
  return v6;
}

double WebCore::Biquad::tailFrame(WebCore::Biquad *this, uint64_t a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  long double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  long double v31;
  double v32;
  double v33;
  double v34;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  int v41;
  double v42;
  int v43;
  double v44;
  double v46;
  double v47;
  double v48;
  float64x2_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  float64x2_t v54;
  float64x2_t v55;

  v4 = *(double *)(*((_QWORD *)this + 6) + 8 * a2);
  v5 = *(double *)(*((_QWORD *)this + 8) + 8 * a2);
  v6 = *(double *)(*(_QWORD *)this + 8 * a2);
  v7 = *(double *)(*((_QWORD *)this + 2) + 8 * a2);
  v8 = *(double *)(*((_QWORD *)this + 4) + 8 * a2);
  v9 = v5 * -4.0 + v4 * v4;
  if (v9 <= 0.0)
  {
    v18 = v4 * -0.5;
    if (v9 >= 0.0)
    {
      if (v18 == 0.0)
        return 2.0;
      v47 = (v18 * v7 + v18 * v6 * v18 + v8) / (v18 * v18);
      v48 = v8 + v8 + v7 * v18;
      if (v47 != 0.0 || (v17 = 0.0, v48 != 0.0))
      {
        v36 = log(v18);
        v37 = a3 + -1.0;
        if (a3 + -1.0 < 1.0)
        {
          __break(1u);
          return 0.0;
        }
        v38 = -(v36 + 1.0) / v36;
        if (v37 >= v38)
          v37 = -(v36 + 1.0) / v36;
        if (v38 >= 1.0)
          v39 = v37;
        else
          v39 = 1.0;
        v46 = v36;
        v40 = log(fabs(v48 + v18 * ((v39 + 1.0) * v47) * v18)) + (v39 + -2.0) * v36 + 10.3972077;
        v41 = 0;
        v42 = log(fabs(v48 + v18 * ((a3 + 1.0) * v47) * v18)) + (a3 + -2.0) * v46 + 10.3972077;
        v43 = 10;
        do
        {
          v17 = (v40 * a3 - v42 * v39) / (v40 - v42);
          if (vabdd_f64(a3, v39) < fabs(v39 + a3) * 0.5)
            break;
          v44 = log(fabs(v48 + v18 * (v47 * (v17 + 1.0)) * v18)) + (v17 + -2.0) * v46 + 10.3972077;
          if (v42 * v44 <= 0.0)
          {
            if (v40 * v44 <= 0.0)
              return v17;
            v40 = v44;
            v44 = v41 == 1 ? v42 * 0.5 : v42;
            v41 = 1;
            v39 = v17;
          }
          else
          {
            v41 = -1;
            a3 = (v40 * a3 - v42 * v39) / (v40 - v42);
          }
          v42 = v44;
          --v43;
        }
        while (v43);
      }
    }
    else
    {
      v19 = sqrt(-v9) * 0.5;
      v55.f64[0] = v4 * -0.5;
      v55.f64[1] = v19;
      v20 = -v19;
      v54.f64[0] = v4 * -0.5;
      v54.f64[1] = -v19;
      v21 = hypot(v4 * -0.5, v19);
      if (v21 != 1.0)
      {
        v22 = v18 * v6;
        v50 = v18 * v6;
        v51 = v6 * v19;
        v23 = std::operator*[abi:sn180100]<double>(&v50, v55.f64);
        v52 = v8 + v23 + v7 * v55.f64[0];
        v53 = v24 + v7 * v55.f64[1];
        v49.f64[0] = v18 - v55.f64[0];
        v49.f64[1] = v20 - v55.f64[1];
        v25 = std::operator/[abi:sn180100]<double>(&v52, (long double *)v49.f64);
        v27 = hypot(v25, v26);
        v50 = v22;
        v51 = v6 * v20;
        v28 = std::operator*[abi:sn180100]<double>(&v50, v54.f64);
        v52 = v8 + v28 + v7 * v54.f64[0];
        v53 = v29 + vmuld_lane_f64(v7, v54, 1);
        v49 = vsubq_f64(v54, v55);
        v30 = std::operator/[abi:sn180100]<double>(&v52, (long double *)v49.f64);
        v32 = hypot(v30, v31);
        v33 = log(0.0000305175781 / (v27 + v32));
        v34 = v33 / log(v21) + 1.0;
        if (v32 == 0.0 && v27 == 0.0)
          return 0.0;
        else
          return v34;
      }
      return a3;
    }
  }
  else
  {
    v10 = -v4;
    v11 = sqrt(v9);
    v12 = (v11 - v4) * 0.5;
    v13 = (v10 - v11) * 0.5;
    if (fabs(v12) < fabs(v13))
      v14 = v13;
    else
      v14 = v12;
    v15 = log(0.0000305175781/ (fabs((v8 + v7 * v14 + v6 * v14 * v14) / (v5 / v14 - v14))+ fabs((v8 + v7 * (v5 / v14) + v6 * (v5 / v14) * (v5 / v14)) / (v5 / v14 - v14))));
    v16 = v15 / log(fabs(v14)) + 1.0;
    v17 = 2147483650.0;
    if (v16 < 2147483650.0)
    {
      if (v16 > 0.0)
        return (double)(int)v16;
      return 0.0;
    }
  }
  return v17;
}

void WebCore::ConeEffect::gain(double *a1, float a2, float a3, float a4, float a5, float a6, float a7, double a8, double a9, float a10, float a11, float a12)
{
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;

  if ((a5 != 0.0 || a6 != 0.0 || a7 != 0.0) && (*a1 != 360.0 || a1[1] != 360.0))
  {
    v17 = a10 - a2;
    v18 = a11 - a3;
    v19 = a12 - a4;
    v20 = sqrtf((float)((float)(v18 * v18) + (float)(v17 * v17)) + (float)(v19 * v19));
    if (v20 != 0.0)
    {
      v17 = v17 / v20;
      v18 = v18 / v20;
      v19 = v19 / v20;
    }
    v21 = sqrtf((float)((float)(a6 * a6) + (float)(a5 * a5)) + (float)(a7 * a7));
    if (v21 != 0.0)
    {
      a5 = a5 / v21;
      a6 = a6 / v21;
      a7 = a7 / v21;
    }
    v22 = (float)((float)(v18 * a6) + (float)(v17 * a5)) + (float)(v19 * a7);
    v23 = v22;
    if (v22 <= -1.0)
      v23 = -1.0;
    if (v22 >= 1.0)
      v24 = 1.0;
    else
      v24 = v23;
    acos(v24);
  }
}

WebCore::DownSampler *WebCore::DownSampler::DownSampler(WebCore::DownSampler *this, unint64_t a2)
{
  uint64_t *v4;
  _OWORD *v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v22;
  int32x4_t v23;
  int64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  int8x16_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  int32x4_t v34;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t __x;
  float64x2_t __xa;
  long double v46;
  float64x2_t v47;
  float64x2_t v48;
  long double v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  long double v53;
  long double v54;
  float64x2_t v55;
  int8x16_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  int32x4_t v63;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  WTF::fastAlignedFree(0, (void *)a2);
  v5 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *v4 = (uint64_t)v5;
  *((_QWORD *)this + 2) = 128;
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  v5[28] = 0u;
  v5[29] = 0u;
  v5[30] = 0u;
  v5[31] = 0u;
  v7 = a2 >> 1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = a2 >> 1;
  v8 = a2 & 0xFFFFFFFFFFFFFFFELL;
  if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 0)
  {
    if (v8 >> 62)
    {
      __break(0xC471u);
      JUMPOUT(0x1961063ECLL);
    }
    WTF::fastAlignedFree(0, v6);
    v9 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *((_QWORD *)this + 4) = v9;
    *((_QWORD *)this + 5) = v8;
    bzero(v9, 8 * v7);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    if ((a2 & 0x8000000000000000) != 0
      || (WTF::fastAlignedFree(0, v10),
          v11 = (void *)WTF::fastAlignedMalloc((WTF *)0x20),
          *((_QWORD *)this + 6) = v11,
          *((_QWORD *)this + 7) = v7,
          bzero(v11, 4 * v7),
          *((_QWORD *)this + 8) = 0,
          *((_QWORD *)this + 9) = 0,
          a2 >> 61))
    {
      __break(0xC471u);
      JUMPOUT(0x196106108);
    }
    goto LABEL_7;
  }
  *((_OWORD *)this + 3) = 0uLL;
  *((_OWORD *)this + 4) = 0uLL;
  if (a2)
  {
LABEL_7:
    WTF::fastAlignedFree(0, v6);
    v12 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *((_QWORD *)this + 8) = v12;
    *((_QWORD *)this + 9) = 2 * a2;
    bzero(v12, 8 * a2);
  }
  v13 = 0;
  v42 = (float64x2_t)vdupq_n_s64(0x3F70000000000000uLL);
  v43 = (float64x2_t)vdupq_n_s64(0x3FF921FB54442D18uLL);
  v40 = (float64x2_t)vdupq_n_s64(0x3FDAE147AE147AE1uLL);
  v41 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
  v38 = (float64x2_t)vdupq_n_s64(0x3FB47AE147AE147BuLL);
  v39 = (float64x2_t)vdupq_n_s64(0x402921FB54442D18uLL);
  v14 = (int32x4_t)xmmword_1969F6F10;
  v15 = *v4;
  __asm
  {
    FMOV            V2.2D, #0.5
    FMOV            V1.2D, #-0.5
  }
  v36 = _Q1;
  v37 = _Q2;
  do
  {
    v63 = v14;
    v22.i64[0] = 0x7F0000007FLL;
    v22.i64[1] = 0x7F0000007FLL;
    v23 = vaddq_s32(v14, v22);
    v24.i64[0] = v23.i32[2];
    v24.i64[1] = v23.i32[3];
    v25 = vcvtq_f64_s64(v24);
    v24.i64[0] = v23.i32[0];
    v24.i64[1] = v23.i32[1];
    v58 = vmulq_f64(v25, v43);
    v60 = vmulq_f64(vcvtq_f64_s64(v24), v43);
    v56 = (int8x16_t)vceqzq_f64(v58);
    v49 = sin(v58.f64[1]);
    v26.f64[0] = sin(v58.f64[0]);
    v26.f64[1] = v49;
    v50 = v26;
    v46 = sin(v60.f64[1]);
    v27.f64[0] = sin(v60.f64[0]);
    v27.f64[1] = v46;
    v28 = (int8x16_t)vmulq_f64(vdivq_f64(v50, v58), v37);
    v59 = (float64x2_t)vbslq_s8((int8x16_t)vceqzq_f64(v60), (int8x16_t)v37, (int8x16_t)vmulq_f64(vdivq_f64(v27, v60), v37));
    v57 = (float64x2_t)vbslq_s8(v56, (int8x16_t)v37, v28);
    v24.i64[0] = v63.i32[2];
    v24.i64[1] = v63.i32[3];
    v29 = vcvtq_f64_s64(v24);
    v24.i64[0] = v63.i32[0];
    v24.i64[1] = v63.i32[1];
    v47 = vmulq_f64(vcvtq_f64_s64(v24), v42);
    v51 = vmulq_f64(v29, v42);
    v61 = vmulq_f64(v51, v41);
    __x = vmulq_f64(v47, v41);
    v53 = cos(__x.f64[1]);
    v30.f64[0] = cos(__x.f64[0]);
    v30.f64[1] = v53;
    __xa = v30;
    v54 = cos(v61.f64[1]);
    v31.f64[0] = cos(v61.f64[0]);
    v31.f64[1] = v54;
    v55 = vmlaq_f64(v40, v36, v31);
    v62 = vmulq_f64(v47, v39);
    v48 = vmulq_f64(v51, v39);
    v51.f64[0] = cos(v48.f64[1]);
    v32.f64[0] = cos(v48.f64[0]);
    v32.f64[1] = v51.f64[0];
    v52 = v32;
    v48.f64[0] = cos(v62.f64[1]);
    v33.f64[0] = cos(v62.f64[0]);
    v33.f64[1] = v48.f64[0];
    *(float32x4_t *)(v15 + ((4 * (v13 << 49 >> 49)) & 0x3FFFFFFF0)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vmlaq_f64(vmlaq_f64(v40, v36, __xa), v38, v33), v59)), vmulq_f64(vmlaq_f64(v55, v38, v52), v57));
    v13 = (v13 + 4);
    v34.i64[0] = 0x800000008;
    v34.i64[1] = 0x800000008;
    v14 = vaddq_s32(v63, v34);
  }
  while ((_DWORD)v13 != 128);
  return this;
}

_QWORD *WebCore::DownSampler::process(_QWORD *this, const float *a2, float *a3, unint64_t a4)
{
  _QWORD *v4;
  vDSP_Length v5;
  void *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  vDSP_Length v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  float v18;

  if (*this == a4)
  {
    v4 = this;
    v5 = a4 >> 1;
    if (a4 >> 1 == this[7] && this[2] == 128 && a4 >= 0x80 && this[9] == 2 * a4)
    {
      v7 = (void *)(this[8] + 4 * a4);
      v8 = 4 * a4;
      memcpy(v7, a2, 4 * a4);
      v9 = 0;
      v10 = 0;
      v11 = (_DWORD *)v4[6];
      do
      {
        v11[v10++] = *((_DWORD *)v7 + (v9 & 0xFFFFFFFE) - 1);
        v9 += 2;
      }
      while (v5 > v10);
      if (v4[3] == v5)
      {
        v12 = v4[2];
        if (v12 <= v5)
        {
          if (a3)
          {
            v13 = v4[1];
            if (v13)
            {
              v14 = v4[4];
              if (v14)
              {
                v15 = (void *)(v14 + 4 * v5);
                memcpy(v15, v11, 4 * v5);
                vDSP_conv((const float *)v15 - v12 + 1, 1, (const float *)(v13 + 4 * v12 - 4), -1, a3, 1, v5, v12);
                memcpy((void *)v4[4], v15, 4 * v5);
              }
            }
          }
        }
      }
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = a3[v17] + *((float *)v7 + (v16 & 0xFFFFFFFE) - 128) * 0.5;
        a3[v17++] = v18;
        v16 += 2;
      }
      while (v5 > v17);
      return memcpy((void *)v4[8], v7, v8);
    }
  }
  return this;
}

WebCore::DynamicsCompressor *WebCore::DynamicsCompressor::DynamicsCompressor(WebCore::DynamicsCompressor *this, float a2, void *a3)
{
  WTF *v6;
  unint64_t v12;
  uint64_t v13;
  float v14;
  void *v15;
  void *v16;
  WTF *v17;
  void *v18;
  void *v19;
  WTF *v20;

  *(_DWORD *)this = (_DWORD)a3;
  *((float *)this + 14) = a2;
  *((float *)this + 20) = a2;
  v6 = (WebCore::DynamicsCompressor *)((char *)this + 80);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 25) = 256;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0x10000000000;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)((char *)this + 132) = _Q0;
  *(_OWORD *)((char *)this + 148) = _Q0;
  *((_DWORD *)this + 41) = -1082130432;
  WebCore::DynamicsCompressorKernel::setNumberOfChannels((WebCore::DynamicsCompressor *)((char *)this + 80), a3);
  *(_QWORD *)((char *)this + 84) = 0x3F80000000000000;
  *((_DWORD *)this + 24) = 1065353216;
  if (*((_DWORD *)this + 29))
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v12);
      bzero(*(void **)v13, 4 * *(_QWORD *)(v13 + 8));
      ++v12;
    }
    while (v12 < *((unsigned int *)this + 29));
  }
  *((_QWORD *)this + 15) = 0x10000000000;
  *((_DWORD *)this + 32) = -1082130432;
  v14 = 1.0 - exp(-1.0 / (a2 * 0.324999988));
  *((float *)this + 23) = v14;
  v15 = (void *)WTF::fastMalloc((WTF *)(8 * a3));
  bzero(v15, 8 * a3);
  v17 = (WTF *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v15;
  if (v17)
    WTF::fastFree(v17, v16);
  v18 = (void *)WTF::fastMalloc((WTF *)(8 * a3));
  bzero(v18, 8 * a3);
  v20 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v18;
  if (v20)
    WTF::fastFree(v20, v19);
  WebCore::DynamicsCompressorKernel::setNumberOfChannels(v6, a3);
  *(_DWORD *)this = (_DWORD)a3;
  *(_OWORD *)((char *)this + 4) = xmmword_1969F6F20;
  *(_OWORD *)((char *)this + 20) = xmmword_1969F6F30;
  *((_DWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 36) = xmmword_1969F6F40;
  return this;
}

void WebCore::DynamicsCompressor::process(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v5;
  unsigned int v6;
  unint64_t v8;
  uint64_t v9;
  void **v10;
  _QWORD *v11;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void **v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v45;
  float v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  unsigned int v74;
  int8x8_t v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  BOOL v83;
  float v84;
  __int128 v85;
  float v86;
  float v87;
  float v88;
  float v89;
  int v90;
  int v91;
  uint64_t v92;
  _QWORD **v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  _QWORD **v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  float v117;
  float v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  __int128 v133;
  float v134;
  float v135;
  float v136;
  float v137;

  v5 = *(unsigned int *)(a3 + 28);
  v6 = *(_DWORD *)(a2 + 28);
  if (v5 != *(_DWORD *)a1 || v6 == 0)
  {
    if (*(_DWORD *)(a3 + 28))
    {
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v8);
        if (!*(_BYTE *)(v9 + 24))
        {
          *(_BYTE *)(v9 + 24) = 1;
          v10 = *(void ***)(v9 + 8);
          v11 = (_QWORD *)(v9 + 16);
          if (v10)
            v11 = v10 + 1;
          else
            v10 = (void **)v9;
          bzero(*v10, 4 * *v11);
          v5 = *(unsigned int *)(a3 + 28);
        }
        ++v8;
      }
      while (v8 < v5);
    }
  }
  else if (*(_DWORD *)(a3 + 28))
  {
    if (v5 == 2)
    {
      v14 = **(uint64_t ***)(a2 + 16);
      v15 = *v14;
      if (!*v14)
        v15 = *(_QWORD *)v14[1];
      **(_QWORD **)(a1 + 64) = v15;
      if (v6 < 2)
      {
        v18 = *(uint64_t **)(a1 + 64);
        v17 = *v18;
      }
      else
      {
        v16 = *(uint64_t **)(*(_QWORD *)(a2 + 16) + 8);
        v17 = *v16;
        if (!*v16)
          v17 = *(_QWORD *)v16[1];
        v18 = *(uint64_t **)(a1 + 64);
      }
      v18[1] = v17;
      v23 = **(uint64_t ***)(a3 + 16);
      *((_BYTE *)v23 + 24) = 0;
      v24 = *v23;
      if (!*v23)
        v24 = *(_QWORD *)v23[1];
      **(_QWORD **)(a1 + 72) = v24;
      v25 = *(uint64_t **)(*(_QWORD *)(a3 + 16) + 8);
      *((_BYTE *)v25 + 24) = 0;
      v26 = *v25;
      if (!*v25)
        v26 = *(_QWORD *)v25[1];
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) = v26;
      v28 = *(float *)(a1 + 4);
      v27 = *(float *)(a1 + 8);
      v29 = *(float *)(a1 + 12);
      v30 = *(float *)(a1 + 24);
      v31 = *(float *)(a1 + 44);
      v113 = *(float *)(a1 + 48);
      v114 = *(float *)(a1 + 20);
      v116 = *(float *)(a1 + 32);
      v118 = *(float *)(a1 + 28);
      v120 = *(float *)(a1 + 36);
      v122 = *(float *)(a1 + 40);
      v32 = *(_QWORD **)(a1 + 64);
      v33 = *(_QWORD **)(a1 + 72);
      v124 = *(float *)(a1 + 80);
      v126 = *(float *)(a1 + 16);
      if (*(float *)(a1 + 144) == v28 && *(float *)(a1 + 148) == v27 && *(float *)(a1 + 132) == v29)
      {
        v127 = *(float *)(a1 + 164);
        v58 = *(float *)(a1 + 152);
      }
      else
      {
        *(float *)(a1 + 144) = v28;
        v34 = __exp10f(v28 * 0.05);
        *(float *)(a1 + 148) = v27;
        v35 = 1.0 / v29;
        *(float *)(a1 + 132) = v29;
        *(float *)(a1 + 136) = 1.0 / v29;
        *(float *)(a1 + 140) = v34;
        v129 = v27;
        v36 = __exp10f((float)(v27 + *(float *)(a1 + 144)) * 0.05);
        v37 = *(float *)(a1 + 140);
        v38 = v36 * 1.001;
        v39 = log10f(v36);
        v40 = log10f(v38);
        v134 = v30;
        v131 = v28;
        v132 = v31;
        if (v37 <= v36)
        {
          v42 = v40 * 20.0;
          v43 = v36 - v37;
          v44 = (float)(v40 * 20.0) - (float)(v39 * 20.0);
          if (v37 <= v38)
          {
            v136 = v38 - v37;
            v41 = 5.0;
            v50 = 15;
            v51 = 0.1;
            v52 = 10000.0;
            do
            {
              v53 = v41;
              v54 = expf(-(float)(v41 * v43));
              v55 = log10f(v37 + (float)((float)(1.0 - v54) / v53)) * 20.0;
              v56 = expf(-(float)(v53 * v136));
              if ((float)((float)((float)(log10f(v37 + (float)((float)(1.0 - v56) / v53)) * 20.0) - v55) / v44) < v35)
                v52 = v53;
              else
                v51 = v53;
              v41 = sqrtf(v51 * v52);
              --v50;
            }
            while (v50);
          }
          else
          {
            v41 = 5.0;
            v45 = 15;
            v46 = 0.1;
            v47 = 10000.0;
            do
            {
              v48 = v41;
              v49 = expf(-(float)(v41 * v43));
              if ((float)((float)(v42 + (float)(log10f(v37 + (float)((float)(1.0 - v49) / v48)) * -20.0)) / v44) < v35)
                v47 = v48;
              else
                v46 = v48;
              v41 = sqrtf(v46 * v47);
              --v45;
            }
            while (v45);
          }
        }
        else if (v35 <= 1.0)
        {
          v41 = 9997.7;
        }
        else
        {
          v41 = 0.10001;
        }
        v127 = v41;
        *(float *)(a1 + 156) = v131 + v129;
        v57 = __exp10f((float)(v131 + v129) * 0.05);
        v58 = v57;
        *(float *)(a1 + 152) = v57;
        v59 = *(float *)(a1 + 140);
        v30 = v134;
        v31 = v132;
        if (v59 <= v57)
          v57 = v59 + (float)((float)(1.0 - expf(-(float)(v127 * (float)(v57 - v59)))) / v127);
        *(float *)(a1 + 160) = log10f(v57) * 20.0;
        *(float *)(a1 + 164) = v127;
      }
      v60 = 1.0;
      if (v58 <= 1.0)
      {
        v60 = __exp10f((float)(*(float *)(a1 + 160) + (float)(*(float *)(a1 + 136) * (float)(0.0 - *(float *)(a1 + 156))))* 0.05);
      }
      else
      {
        v61 = *(float *)(a1 + 140);
        if (v61 <= 1.0)
          v60 = v61 + (float)((float)(1.0 - expf(-(float)(v127 * (float)(1.0 - v61)))) / v127);
      }
      v62 = powf(1.0 / v60, 0.6);
      v63 = __exp10f(v31 * 0.05);
      if ((float)(v30 * *(float *)(a1 + 80)) >= 0x3FF)
        v64 = 1023;
      else
        v64 = (float)(v30 * *(float *)(a1 + 80));
      if (*(_DWORD *)(a1 + 100) != v64)
      {
        *(_DWORD *)(a1 + 100) = v64;
        if (*(_DWORD *)(a1 + 116))
        {
          v65 = 0;
          do
          {
            v66 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v65);
            bzero(*(void **)v66, 4 * *(_QWORD *)(v66 + 8));
            ++v65;
          }
          while (v65 < *(unsigned int *)(a1 + 116));
        }
        *(_DWORD *)(a1 + 120) = 0;
        *(_DWORD *)(a1 + 124) = v64;
      }
      if (a4 >= 0x20)
      {
        v67 = 0;
        v68 = 0;
        v69 = v116 * (float)(v114 * v124);
        v70 = v118 * (float)(v114 * v124);
        v71 = v120 * (float)(v114 * v124);
        v72 = v122 * (float)(v114 * v124);
        v73 = fmaxf(v126, 0.001) * v124;
        v130 = v124 * 0.0025;
        v125 = (float)((float)(v70 + (float)(v69 * 1.8432e-16)) + (float)(v71 * -1.9373e-16))
             + (float)(v72 * 8.8245e-18);
        v123 = (float)((float)((float)(v69 * 2.3306) + (float)(v70 * -1.5788)) + (float)(v71 * -0.91412))
             + (float)(v72 * 0.16237);
        v119 = (float)((float)((float)(v69 * -0.16942) + (float)(v70 * 0.087835)) + (float)(v71 * 0.085881))
             + (float)(v72 * -0.0042989);
        v121 = (float)((float)((float)(v69 * -1.2727) + (float)(v70 * 0.53341)) + (float)(v71 * 0.92589))
             + (float)(v72 * -0.18656);
        v115 = (float)((float)((float)(v69 * 0.11157) + (float)(v70 * -0.042417)) + (float)(v71 * -0.097647))
             + (float)(v72 * 0.028494);
        v117 = 1.0 / v73;
        v74 = a4 >> 5;
        v128 = v113 * (float)(v63 * v62);
        v75.i32[0] = *(_DWORD *)(a1 + 84);
        v76 = -1.0;
        do
        {
          v77 = fabsf(*(float *)v75.i32);
          if (v77 == INFINITY)
            v78 = 1.0;
          else
            v78 = *(float *)v75.i32;
          if (v77 == INFINITY)
            *(float *)(a1 + 84) = v78;
          v135 = v78;
          v79 = asinf(v78) / 1.5708;
          v137 = *(float *)(a1 + 88);
          v80 = log10f(v137 / v79) * 20.0;
          if (v79 <= v137)
          {
            if (fabsf(v80) == INFINITY)
              v87 = 1.0;
            else
              v87 = v80;
            v88 = *(float *)(a1 + 128);
            if (v88 == v76 || v88 < v87)
            {
              *(float *)(a1 + 128) = v87;
              v88 = v87;
            }
            if (v88 <= 0.5)
              v89 = 0.5;
            else
              v89 = 0.25 / v88;
            v86 = 1.0 - powf(v89, v117);
          }
          else
          {
            *(_DWORD *)(a1 + 128) = -1082130432;
            v76 = -1.0;
            if (fabsf(v80) == INFINITY)
              v80 = -1.0;
            v81 = fmaxf(v80, -12.0);
            v82 = (float)(v81 + 12.0) * 0.25;
            v83 = v81 < 0.0;
            v84 = 3.0;
            if (v83)
              v84 = v82;
            v86 = __exp10f((float)(5.0/ (float)((float)((float)((float)(v125 + (float)(v123 * v84))+ (float)(v121 * (float)(v84 * v84)))+ (float)(v119 * (float)(v84 * (float)(v84 * v84))))+ (float)(v115 * (float)((float)(v84 * v84) * (float)(v84 * v84)))))* 0.05);
            v135 = *(float *)(a1 + 84);
            v137 = *(float *)(a1 + 88);
          }
          v90 = 0;
          *(_QWORD *)&v85 = *(_QWORD *)(a1 + 120);
          v91 = *(_DWORD *)(a1 + 116);
          do
          {
            if (!v91)
              goto LABEL_127;
            v92 = (v67 + v90);
            v93 = *(_QWORD ***)(a1 + 104);
            v94 = *(float *)(*v32 + 4 * v92);
            *(float *)(**v93 + 4 * SDWORD1(v85)) = v94;
            if (v91 == 1)
              goto LABEL_127;
            if (v94 <= 0.0)
              v94 = -v94;
            v95 = fmaxf(v94, 0.0);
            v96 = *(float *)(v32[1] + 4 * v92);
            *(float *)(*v93[1] + 4 * SDWORD1(v85)) = v96;
            if (v96 <= 0.0)
              v96 = -v96;
            if (v95 < v96)
              v95 = v96;
            v97 = v95 <= 0.0 ? -v95 : v95;
            v133 = v85;
            if (*(float *)(a1 + 152) <= v97)
            {
              v100 = log10f(v97);
              v99 = __exp10f((float)(*(float *)(a1 + 160)+ (float)(*(float *)(a1 + 136) * (float)((float)(v100 * 20.0) - *(float *)(a1 + 156))))* 0.05);
            }
            else
            {
              v98 = *(float *)(a1 + 140);
              v99 = v97;
              if (v98 <= v97)
                v99 = v98 + (float)((float)(1.0 - expf((float)(v97 - v98) * (float)-v127)) / v127);
            }
            v101 = v99 / v97;
            if (v97 <= 0.0001)
              v102 = 1.0;
            else
              v102 = v101;
            v103 = log10f(v102);
            v104 = __exp10f((float)(fmaxf(v103 * -20.0, 2.0) / v130) * 0.05) + v76;
            if (v102 <= v135)
              v104 = 1.0;
            v105 = fminf(v135 + (float)((float)(v102 - v135) * v104), 1.0);
            if (fabsf(v105) == INFINITY)
              v105 = 1.0;
            v135 = v105;
            v106 = v137 + (float)((float)(v79 - v137) * v86);
            v107 = fminf(v86 * v137, 1.0);
            if (v86 >= 1.0)
              v106 = v107;
            v137 = v106;
            v108 = sinf(v106 * 1.5708);
            v109 = log10f(v108) * 20.0;
            v110 = *(float *)(a1 + 96);
            if (v109 >= v110)
              v109 = v110 + (float)((float)(v109 - v110) * *(float *)(a1 + 92));
            *((_QWORD *)&v85 + 1) = *((_QWORD *)&v133 + 1);
            *(float *)(a1 + 96) = v109;
            v91 = *(_DWORD *)(a1 + 116);
            if (!v91
              || (v111 = *(_QWORD ***)(a1 + 104),
                  v112 = (float)(1.0 - v113) + (float)(v128 * v108),
                  *(float *)(*v33 + 4 * v92) = v112 * *(float *)(**v111 + 4 * (int)v133),
                  v91 == 1))
            {
LABEL_127:
              __break(0xC471u);
              JUMPOUT(0x1961071B8);
            }
            *(float *)(v33[1] + 4 * v92) = v112 * *(float *)(*v111[1] + 4 * (int)v133);
            *(int8x8_t *)&v85 = vand_s8((int8x8_t)vadd_s32(*(int32x2_t *)&v133, (int32x2_t)0x100000001), (int8x8_t)0x300000003);
            ++v90;
          }
          while (v90 != 32);
          *(_QWORD *)(a1 + 120) = v85;
          v75 = vbic_s8((int8x8_t)__PAIR64__(LODWORD(v137), LODWORD(v135)), (int8x8_t)vcgt_f32((float32x2_t)0x80000000800000, vabs_f32((float32x2_t)__PAIR64__(LODWORD(v137), LODWORD(v135)))));
          *(int8x8_t *)(a1 + 84) = v75;
          ++v68;
          v67 += 32;
        }
        while (v68 != v74);
      }
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 96);
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v19);
        if (!*(_BYTE *)(v20 + 24))
        {
          *(_BYTE *)(v20 + 24) = 1;
          v21 = *(void ***)(v20 + 8);
          v22 = (_QWORD *)(v20 + 16);
          if (v21)
            v22 = v21 + 1;
          else
            v21 = (void **)v20;
          bzero(*v21, 4 * *v22);
          v5 = *(unsigned int *)(a3 + 28);
        }
        ++v19;
      }
      while (v19 < v5);
    }
  }
}

WTF *WebCore::DynamicsCompressorKernel::setNumberOfChannels(WTF *this, void *a2)
{
  unsigned int v2;
  int v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  WTF ***v11;
  uint64_t v12;
  WTF **v13;
  void *v14;

  v2 = *((_DWORD *)this + 9);
  if (v2 == (_DWORD)a2)
    return this;
  v3 = (int)a2;
  v4 = this;
  if ((_DWORD)a2)
  {
    if (a2 >> 29)
    {
      __break(0xC471u);
      return this;
    }
    v5 = (WTF *)(8 * a2);
    v6 = WTF::fastMalloc(v5);
    v7 = 0;
    do
    {
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = 0;
      v8[1] = 0;
      WTF::fastAlignedFree(0, v9);
      v10 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
      *v8 = v10;
      v8[1] = 1024;
      bzero(v10, 0x1000uLL);
      *(_QWORD *)((char *)v7 + v6) = v8;
      v7 = (WTF *)((char *)v7 + 8);
    }
    while (v5 != v7);
    v2 = *((_DWORD *)v4 + 9);
    if (!v2)
      goto LABEL_13;
    goto LABEL_9;
  }
  v6 = 0;
  if (v2)
  {
LABEL_9:
    v11 = (WTF ***)*((_QWORD *)v4 + 3);
    v12 = 8 * v2;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        WTF::fastAlignedFree(*v13, a2);
        WTF::fastFree((WTF *)v13, v14);
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
LABEL_13:
  this = (WTF *)*((_QWORD *)v4 + 3);
  if (this)
  {
    *((_QWORD *)v4 + 3) = 0;
    *((_DWORD *)v4 + 8) = 0;
    this = (WTF *)WTF::fastFree(this, a2);
  }
  *((_QWORD *)v4 + 3) = v6;
  *((_DWORD *)v4 + 8) = v3;
  *((_DWORD *)v4 + 9) = v3;
  return this;
}

void WebCore::EqualPowerPanner::pan(double a1, uint64_t a2, uint64_t a3, uint64_t a4, vDSP_Length a5)
{
  unsigned int v5;
  uint64_t v7;
  const float *v8;
  const float *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float *v15;
  BOOL v16;
  BOOL v17;
  double v19;
  __double2 v20;
  float cosval;
  float sinval;
  const float *v23;
  double v24;
  __double2 v25;
  float __B;

  if (a3)
  {
    v5 = *(_DWORD *)(a3 + 28);
    if (v5 - 1 <= 1 && a4 && *(_QWORD *)(a3 + 8) >= a5 && *(_DWORD *)(a4 + 28) == 2 && *(_QWORD *)(a4 + 8) >= a5)
    {
      v7 = *(_QWORD *)(a3 + 16);
      v8 = **(const float ***)v7;
      if (!v8)
        v8 = **(const float ***)(*(_QWORD *)v7 + 8);
      v9 = v8;
      if (v5 >= 2)
      {
        v10 = *(_QWORD *)(v7 + 8);
        v9 = *(const float **)v10;
        if (!*(_QWORD *)v10)
          v9 = **(const float ***)(v10 + 8);
      }
      v11 = *(uint64_t **)(a4 + 16);
      v12 = *v11;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(float **)v12;
      if (!*(_QWORD *)v12)
        v13 = **(float ***)(v12 + 8);
      v14 = v11[1];
      *(_BYTE *)(v14 + 24) = 0;
      v15 = *(float **)v14;
      if (!*(_QWORD *)v14)
        v15 = **(float ***)(v14 + 8);
      v16 = !v8 || v9 == 0;
      v17 = v16 || v13 == 0;
      if (!v17 && v15 != 0)
      {
        v19 = fmin(fmax(a1, -180.0), 180.0);
        if (v19 >= -90.0)
        {
          if (v19 > 90.0)
            v19 = 180.0 - v19;
        }
        else
        {
          v19 = -180.0 - v19;
        }
        if (v5 == 1)
        {
          v20 = __sincos_stret((v19 + 90.0) / 180.0 * 1.57079633);
          cosval = v20.__cosval;
          __B = cosval;
          vDSP_vsmul(v8, 1, &__B, v13, 1, a5);
          sinval = v20.__sinval;
          __B = sinval;
          v23 = v8;
        }
        else
        {
          v24 = v19 + 90.0;
          if (v19 > 0.0)
            v24 = v19;
          v25 = __sincos_stret(v24 / 90.0 * 1.57079633);
          if (v19 > 0.0)
          {
            __B = v25.__cosval;
            vDSP_vsmul(v8, 1, &__B, v13, 1, a5);
            __B = v25.__sinval;
            vDSP_vsma(v8, 1, &__B, v9, 1, v15, 1, a5);
            return;
          }
          __B = v25.__cosval;
          vDSP_vsma(v9, 1, &__B, v8, 1, v13, 1, a5);
          __B = v25.__sinval;
          v23 = v9;
        }
        vDSP_vsmul(v23, 1, &__B, v15, 1, a5);
      }
    }
  }
}

void WebCore::EqualPowerPanner::panWithSampleAccurateValues(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unsigned int v6;
  uint64_t v8;
  float *v9;
  float *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  double v18;
  double v19;
  float v20;
  __double2 v21;
  float v22;
  float v23;
  uint64_t v24;
  double v25;
  double v26;
  __double2 v27;
  float v28;
  float v29;
  float v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float v35;
  float v36;

  v6 = *(_DWORD *)(a4 + 28);
  if (v6)
  {
    v8 = *(_QWORD *)(a4 + 16);
    v9 = **(float ***)v8;
    if (!v9)
      v9 = **(float ***)(*(_QWORD *)v8 + 8);
    v10 = v9;
    if (v6 >= 2)
    {
      v11 = *(_QWORD *)(v8 + 8);
      v10 = *(float **)v11;
      if (!*(_QWORD *)v11)
        v10 = **(float ***)(v11 + 8);
    }
    v12 = *(uint64_t **)(a5 + 16);
    v13 = *v12;
    *(_BYTE *)(v13 + 24) = 0;
    v14 = *(float **)v13;
    if (!*(_QWORD *)v13)
      v14 = **(float ***)(v13 + 8);
    v15 = v12[1];
    *(_BYTE *)(v15 + 24) = 0;
    v16 = *(float **)v15;
    if (!*(_QWORD *)v15)
      v16 = **(float ***)(v15 + 8);
    if (v6 == 1)
    {
      if (a6 >= 1)
      {
        v17 = a6;
        do
        {
          if (*a2 <= 180.0)
            v18 = *a2;
          else
            v18 = 180.0;
          if (*a2 >= -180.0)
            v19 = v18;
          else
            v19 = -180.0;
          if (v19 >= -90.0)
          {
            if (v19 > 90.0)
              v19 = 180.0 - v19;
          }
          else
          {
            v19 = -180.0 - v19;
          }
          v20 = *v9++;
          v21 = __sincos_stret((v19 + 90.0) / 180.0 * 1.57079633);
          v22 = v21.__cosval * v20;
          *v14++ = v22;
          v23 = v21.__sinval * v20;
          *v16++ = v23;
          ++a2;
          --v17;
        }
        while (v17);
      }
    }
    else if (a6 >= 1)
    {
      v24 = a6;
      do
      {
        v25 = *a2;
        if (*a2 <= 180.0)
          v26 = *a2;
        else
          v26 = 180.0;
        if (v25 < -180.0)
          v26 = -180.0;
        if (v26 >= -90.0)
        {
          if (v26 > 90.0)
            v26 = 180.0 - v26;
        }
        else
        {
          v26 = -180.0 - v26;
        }
        if (v26 <= 0.0)
          v26 = v26 + 90.0;
        v27 = __sincos_stret(v26 / 90.0 * 1.57079633);
        v28 = *v9++;
        v29 = v28;
        v30 = *v10++;
        v31 = v29;
        v32 = v30 + v31 * v27.__sinval;
        v33 = v31 + v30 * v27.__cosval;
        v34 = v27.__sinval * v30;
        if (v25 > 0.0)
        {
          v33 = v27.__cosval * v31;
          v34 = v32;
        }
        v35 = v33;
        *v14++ = v35;
        v36 = v34;
        *v16++ = v36;
        ++a2;
        --v24;
      }
      while (v24);
    }
  }
  else
  {
    __break(0xC471u);
  }
}

WebCore::FFTFrame *WebCore::FFTConvolver::FFTConvolver(WebCore::FFTConvolver *this, unint64_t a2)
{
  WebCore::FFTFrame *result;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  result = WebCore::FFTFrame::FFTFrame(this, (void *)a2);
  *((_QWORD *)result + 8) = 0;
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 10) = 0;
  if (!a2)
  {
    *(_OWORD *)((char *)this + 104) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
    return this;
  }
  if (!(a2 >> 62))
  {
    WTF::fastAlignedFree(0, v5);
    v6 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *((_QWORD *)this + 9) = v6;
    *((_QWORD *)this + 10) = a2;
    bzero(v6, 4 * a2);
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    WTF::fastAlignedFree(0, v7);
    v8 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *((_QWORD *)this + 11) = v8;
    *((_QWORD *)this + 12) = a2;
    bzero(v8, 4 * a2);
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    if (a2 >= 2)
    {
      WTF::fastAlignedFree(0, v9);
      v10 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
      *((_QWORD *)this + 13) = v10;
      *((_QWORD *)this + 14) = a2 >> 1;
      bzero(v10, 4 * (a2 >> 1));
    }
    return this;
  }
  __break(0xC471u);
  return result;
}

void WebCore::FFTConvolver::process(WebCore::FFTConvolver *this, WebCore::FFTFrame *a2, const float *a3, float *a4, vDSP_Length a5)
{
  vDSP_Length v5;
  unint64_t v9;
  vDSP_Length v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  vDSP_Length v17;
  DSPComplex *v18;
  vDSP_Length v19;
  uint64_t v20;
  float __B;

  v5 = a5;
  v9 = *(unsigned int *)this;
  v10 = v9 >> 1;
  if (!((v9 >> 1) % a5) || !(a5 % v10))
  {
    if (v10 <= a5)
    {
      v11 = a5 / v10;
      if (a5 / v10 != 1)
        v5 = v9 >> 1;
    }
    else
    {
      v11 = 1;
    }
    v12 = 0;
    v20 = v9 & 0xFFFFFFFE;
    do
    {
      if (!&a3[v12])
        break;
      v13 = *((_QWORD *)this + 9);
      if (!v13)
        break;
      v14 = *((_QWORD *)this + 8);
      if (v14 + v5 > *((_QWORD *)this + 10))
        break;
      memcpy((void *)(v13 + 4 * v14), &a3[v12], 4 * v5);
      if (!&a4[v12])
        break;
      v15 = *((_QWORD *)this + 11);
      if (!v15)
        break;
      v16 = *((_QWORD *)this + 8);
      if (v16 + v5 > *((_QWORD *)this + 12))
        break;
      memcpy(&a4[v12], (const void *)(v15 + 4 * v16), 4 * v5);
      v17 = *((_QWORD *)this + 8) + v5;
      *((_QWORD *)this + 8) = v17;
      if (v17 == v10)
      {
        WebCore::FFTFrame::doFFT(this, *((DSPComplex **)this + 9));
        WebCore::FFTFrame::multiply(this, a2);
        v18 = (DSPComplex *)*((_QWORD *)this + 11);
        vDSP_fft_zrip(*((FFTSetup *)this + 1), (const DSPSplitComplex *)this + 1, 1, *((unsigned int *)this + 1), -1);
        vDSP_ztoc((const DSPSplitComplex *)this + 1, 1, v18, 2, (unint64_t)*(unsigned int *)this >> 1);
        v19 = *(unsigned int *)this;
        __B = 1.0 / (float)v19;
        vDSP_vsmul((const float *)v18, 1, &__B, (float *)v18, 1, v19);
        vDSP_vadd(*((const float **)this + 11), 1, *((const float **)this + 13), 1, *((float **)this + 11), 1, v10);
        if (*((_QWORD *)this + 12) != v20 || *((_QWORD *)this + 14) != v10)
          return;
        memcpy(*((void **)this + 13), (const void *)(*((_QWORD *)this + 11) + 4 * v10), 4 * v10);
        *((_QWORD *)this + 8) = 0;
      }
      v12 += v5;
      --v11;
    }
    while (v11);
  }
}

float WebCore::FFTFrame::multiply(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  vDSP_Length v4;
  float *v6;
  float v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float result;
  DSPSplitComplex v13;
  DSPSplitComplex __B;
  DSPSplitComplex __A;

  v2 = *(unsigned int *)a1;
  if (a1[5] < v2 >> 1)
  {
    __break(0xC471u);
    goto LABEL_14;
  }
  v4 = v2 >> 1;
  if (a1[7] < v2 >> 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196107B6CLL);
  }
  if (a2[5] < v4)
  {
    __break(0xC471u);
    JUMPOUT(0x196107B8CLL);
  }
  if (a2[7] < v4)
  {
    __break(0xC471u);
    JUMPOUT(0x196107BACLL);
  }
  v6 = (float *)a1[4];
  v7 = *v6;
  v8 = (float *)a1[6];
  v9 = *v8;
  v10 = (float *)a2[4];
  v11 = (float *)a2[6];
  __A.realp = v6;
  __A.imagp = v8;
  __B.realp = v10;
  __B.imagp = v11;
  v13.realp = v6;
  v13.imagp = v8;
  vDSP_zvmul(&__A, 1, &__B, 1, &v13, 1, v4, 1);
  if (!a2[5])
  {
    __break(0xC471u);
    JUMPOUT(0x196107BCCLL);
  }
  *(float *)a1[4] = v7 * *(float *)a2[4];
  if (!a2[7])
  {
    __break(0xC471u);
LABEL_14:
    JUMPOUT(0x196107B4CLL);
  }
  result = v9 * *(float *)a2[6];
  *(float *)a1[6] = result;
  return result;
}

void WebCore::FFTFrame::interpolateFrequencyComponents(uint64_t a1, uint64_t *a2, uint64_t a3, long double a4)
{
  uint64_t v4;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  long double v18;
  long double v19;
  long double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  double v26;
  double v27;
  _BOOL4 v28;
  _BOOL4 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  __double2 v36;
  float v37;
  float v38;
  double v39;
  double v40;
  double v42;
  double v43;
  double v44;
  double v45;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if (!a2[5])
  {
    __break(0xC471u);
    JUMPOUT(0x196108098);
  }
  if (!*(_QWORD *)(a3 + 40))
  {
    __break(0xC471u);
    JUMPOUT(0x1961080B8);
  }
  v40 = 1.0 - a4;
  v8 = **(float **)(a3 + 32) * a4 + (1.0 - a4) * *(float *)a2[4];
  **(float **)(a1 + 32) = v8;
  if (!a2[7])
  {
    __break(0xC471u);
    JUMPOUT(0x1961080D8);
  }
  if (!*(_QWORD *)(a3 + 56))
    goto LABEL_55;
  v9 = **(float **)(a3 + 48) * a4 + v40 * *(float *)a2[6];
  **(float **)(a1 + 48) = v9;
  if (v4 >= 4)
  {
    v10 = v4 >> 1;
    v39 = pow(a4, 0.75);
    v42 = pow(v40, 0.75);
    v11 = 1;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    while (a2[5] > v11)
    {
      if (a2[7] <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x196108038);
      }
      if (*(_QWORD *)(a3 + 40) <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x196108058);
      }
      if (*(_QWORD *)(a3 + 56) <= v11)
      {
        __break(0xC471u);
        JUMPOUT(0x196108078);
      }
      v44 = v12;
      v45 = v14;
      v15 = *(float *)(a2[4] + 4 * v11);
      v16 = *(float *)(a2[6] + 4 * v11);
      v17 = *(float *)(*(_QWORD *)(a3 + 32) + 4 * v11);
      v18 = *(float *)(*(_QWORD *)(a3 + 48) + 4 * v11);
      v19 = hypot(v15, v16);
      v20 = hypot(v17, v18);
      v21 = log10(v19) * 20.0;
      v22 = log10(v20) * 20.0;
      v23 = v21 - v22;
      v24 = 2.0;
      if (v11 > 0x10)
        v24 = 5.0;
      v25 = v21 < 0.0 && v23 < -v24;
      v27 = 1.0 - v42;
      v26 = v42;
      if (!v25)
      {
        v28 = v23 > v24;
        v29 = v22 < 0.0;
        if (v29 && v28)
          v26 = 1.0 - v39;
        else
          v26 = 1.0 - a4;
        if (v29 && v28)
          v27 = v39;
        else
          v27 = a4;
      }
      v43 = __exp10((v22 * v27 + v26 * v21) * 0.05);
      v12 = atan2(v16, v15);
      v30 = atan2(v18, v17);
      v31 = v12 - v44;
      v32 = v30 - v13;
      if (v12 - v44 > 3.14159265)
        v31 = v12 - v44 + -6.28318531;
      if (v31 < -3.14159265)
        v31 = v31 + 6.28318531;
      if (v32 > 3.14159265)
        v32 = v32 + -6.28318531;
      if (v32 < -3.14159265)
        v32 = v32 + 6.28318531;
      if (v31 - v32 <= 3.14159265)
      {
        if (v32 - v31 > 3.14159265)
          v31 = v31 + 6.28318531;
      }
      else
      {
        v32 = v32 + 6.28318531;
      }
      v33 = v45 + v27 * v32 + v26 * v31;
      if (v33 > 3.14159265)
        v33 = v33 + -6.28318531;
      if (v33 >= -3.14159265)
        v14 = v33;
      else
        v14 = v33 + 6.28318531;
      v34 = NAN;
      v35 = NAN;
      if ((*(_QWORD *)&v43 & 0x8000000000000000) == 0)
      {
        if (fabs(v14) == INFINITY)
        {
          v34 = NAN;
          if (fabs(v43) == INFINITY)
            v35 = v43;
          else
            v35 = NAN;
        }
        else
        {
          v36 = __sincos_stret(v14);
          v35 = v43 * v36.__cosval;
          v34 = v43 * v36.__sinval;
        }
      }
      v37 = v35;
      *(float *)(*(_QWORD *)(a1 + 32) + 4 * v11) = v37;
      v38 = v34;
      *(float *)(*(_QWORD *)(a1 + 48) + 4 * v11++) = v38;
      v13 = v30;
      if (v10 == v11)
        return;
    }
LABEL_55:
    __break(0xC471u);
    JUMPOUT(0x196108018);
  }
}

void WebCore::HRTFDatabaseLoader::createAndLoadAsynchronouslyIfNecessary(float a1@<S0>, uint64_t *a2@<X8>)
{
  double v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;
  double v18;

  {
    v5 = a1;
    if (WebCore::loaderMap(void)::loaderMap)
    {
      v6 = *(_DWORD *)(WebCore::loaderMap(void)::loaderMap - 8);
      v7 = (~(*(_QWORD *)&v5 << 32) + *(_QWORD *)&v5) ^ ((~(*(_QWORD *)&v5 << 32) + *(_QWORD *)&v5) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((unint64_t)(v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      v11 = *(double *)(WebCore::loaderMap(void)::loaderMap + 16 * v10);
      if (*(_QWORD *)&v11 == *(_QWORD *)&v5)
      {
LABEL_7:
        v13 = *(_DWORD **)(WebCore::loaderMap(void)::loaderMap + 16 * v10 + 8);
        if (v13)
        {
          ++*v13;
          *a2 = (uint64_t)v13;
          return;
        }
      }
      else
      {
        v12 = 1;
        while (v11 != INFINITY)
        {
          v10 = ((_DWORD)v10 + v12) & v6;
          v11 = *(double *)(WebCore::loaderMap(void)::loaderMap + 16 * v10);
          ++v12;
          if (*(_QWORD *)&v11 == *(_QWORD *)&v5)
            goto LABEL_7;
        }
      }
    }
  }
  else
  {
    WebCore::loaderMap(void)::loaderMap = 0;
    v5 = a1;
  }
  v14 = WTF::fastMalloc((WTF *)0x28);
  v15 = v14;
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(float *)(v14 + 32) = a1;
  *a2 = v14;
  {
    WebCore::loaderMap(void)::loaderMap = 0;
  }
  v18 = v5;
  v17 = v14;
  WTF::HashMap<double,WebCore::HRTFDatabaseLoader *,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<WebCore::HRTFDatabaseLoader *>,WTF::HashTableTraits>::add<WebCore::HRTFDatabaseLoader *>(&WebCore::loaderMap(void)::loaderMap, (uint64_t *)&v18, &v17, (uint64_t)v16);
  WebCore::HRTFDatabaseLoader::loadAsynchronously(v15);
}

uint64_t *WTF::HashMap<double,WebCore::HRTFDatabaseLoader *,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<WebCore::HRTFDatabaseLoader *>,WTF::HashTableTraits>::add<WebCore::HRTFDatabaseLoader *>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<double,WTF::KeyValuePair<double,WebCore::HRTFDatabaseLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<double,WebCore::HRTFDatabaseLoader *>>,WTF::DefaultHash<double>,WTF::HashMap<double,WebCore::HRTFDatabaseLoader *,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<WebCore::HRTFDatabaseLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<double>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2 + ~(*a2 << 32);
  v12 = 9
      * (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) ^ (((v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = (uint64_t *)(v8 + 16 * v14);
  v16 = *(double *)v15;
  v17 = *a2;
  if (*(double *)v15 != INFINITY)
  {
    v20 = 0;
    v21 = 1;
    do
    {
      if (*a2 == *(_QWORD *)&v16)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v29 = 0;
        v28 = v8 + 16 * v27;
        goto LABEL_31;
      }
      if (v16 == -INFINITY)
        v20 = v15;
      v14 = (v14 + v21) & v10;
      v15 = (uint64_t *)(v8 + 16 * v14);
      v16 = *(double *)v15;
      ++v21;
    }
    while (*(double *)v15 != INFINITY);
    if (v20)
    {
      *v20 = 0x7FF0000000000000;
      v20[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v17 = *a2;
      v15 = v20;
    }
  }
  *v15 = v17;
  v15[1] = *a3;
  v18 = *v6;
  if (*v6)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12);
  else
    v23 = 0;
  v24 = (*(_DWORD *)(v22 - 16) + v23);
  v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
      goto LABEL_26;
  }
  else if (3 * v25 <= 4 * v24)
  {
    if (!(_DWORD)v25)
    {
      v26 = 8;
      goto LABEL_27;
    }
LABEL_26:
    v26 = (_DWORD)v25 << (6 * *(_DWORD *)(v22 - 12) >= (2 * v25));
LABEL_27:
    result = (uint64_t *)WTF::HashTable<double,WTF::KeyValuePair<double,WebCore::HRTFDatabaseLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<double,WebCore::HRTFDatabaseLoader *>>,WTF::DefaultHash<double>,WTF::HashMap<double,WebCore::HRTFDatabaseLoader *,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<WebCore::HRTFDatabaseLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<double>>::rehash(v6, v26, (double *)v15);
    v15 = result;
    v22 = *v6;
    if (*v6)
      v25 = *(unsigned int *)(v22 - 4);
    else
      v25 = 0;
  }
  v28 = v22 + 16 * v25;
  v29 = 1;
LABEL_31:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t WebCore::HRTFDatabaseLoader::loadAsynchronously(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  WTF *v9;
  void *v10;
  uint64_t v11;
  WTF::Thread *v12;

  v1 = this;
  v2 = (unsigned __int8 *)(this + 16);
  if (__ldaxr((unsigned __int8 *)(this + 16)))
  {
    __clrex();
LABEL_4:
    this = MEMORY[0x19AEA534C](this + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v2))
    goto LABEL_4;
LABEL_5:
  if (!*(_QWORD *)(v1 + 8) && !*(_QWORD *)(v1 + 24))
  {
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E3407860;
    v4[1] = v1;
    v11 = (uint64_t)v4;
    WTF::Thread::create();
    v5 = *(unsigned int **)(v1 + 24);
    *(_QWORD *)(v1 + 24) = v12;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        WTF::Thread::~Thread((WTF::Thread *)v5);
        WTF::fastFree(v9, v10);
      }
    }
    this = v11;
    if (v11)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return this;
}

void WebCore::HRTFDatabaseLoader::~HRTFDatabaseLoader(WebCore::HRTFDatabaseLoader *this, void *a2)
{
  unsigned __int8 *v3;
  WTF::Thread *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;
  int v11;
  WTF **v12;
  unsigned int v13;
  double v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double *v18;
  double v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  WTF **v27;
  WTF *v28;
  void *v29;

  v3 = (unsigned __int8 *)this + 16;
  if (__ldaxr((unsigned __int8 *)this + 16))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 16);
LABEL_5:
  v5 = (WTF::Thread *)*((_QWORD *)this + 3);
  if (v5)
  {
    WTF::Thread::waitForCompletion(v5);
    v6 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::Thread::~Thread((WTF::Thread *)v6);
        WTF::fastFree(v9, v10);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v11 = __ldxr(v3);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_15;
  }
  if (__stlxr(0, v3))
LABEL_15:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  v12 = (WTF **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v12)
    std::default_delete<WebCore::HRTFDatabase>::operator()[abi:sn180100](v12, a2);
  {
    if (WebCore::loaderMap(void)::loaderMap)
    {
      v13 = *(_DWORD *)(WebCore::loaderMap(void)::loaderMap - 8);
      v14 = *((float *)this + 8);
      v15 = (~(*(_QWORD *)&v14 << 32) + *(_QWORD *)&v14) ^ ((~(*(_QWORD *)&v14 << 32) + *(_QWORD *)&v14) >> 22);
      v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
      v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
      LODWORD(v17) = v13 & ((v17 >> 31) ^ v17);
      v18 = (double *)(WebCore::loaderMap(void)::loaderMap + 16 * v17);
      v19 = *v18;
      if (*(_QWORD *)v18 != *(_QWORD *)&v14)
      {
        v20 = 1;
        while (v19 != INFINITY)
        {
          v17 = ((_DWORD)v17 + v20) & v13;
          v19 = *(double *)(WebCore::loaderMap(void)::loaderMap + 16 * v17);
          ++v20;
          if (*(_QWORD *)&v19 == *(_QWORD *)&v14)
          {
            v18 = (double *)(WebCore::loaderMap(void)::loaderMap + 16 * v17);
            goto LABEL_26;
          }
        }
        v18 = (double *)(WebCore::loaderMap(void)::loaderMap
                       + 16 * *(unsigned int *)(WebCore::loaderMap(void)::loaderMap - 4));
      }
LABEL_26:
      if ((double *)(WebCore::loaderMap(void)::loaderMap
                    + 16 * *(unsigned int *)(WebCore::loaderMap(void)::loaderMap - 4)) != v18)
      {
        *v18 = -INFINITY;
        ++*(_DWORD *)(WebCore::loaderMap(void)::loaderMap - 16);
        v21 = WebCore::loaderMap(void)::loaderMap ? *(_DWORD *)(WebCore::loaderMap(void)::loaderMap - 12) - 1 : -1;
        *(_DWORD *)(WebCore::loaderMap(void)::loaderMap - 12) = v21;
        if (WebCore::loaderMap(void)::loaderMap)
        {
          v22 = *(_DWORD *)(WebCore::loaderMap(void)::loaderMap - 4);
          if (6 * *(_DWORD *)(WebCore::loaderMap(void)::loaderMap - 12) < v22 && v22 >= 9)
            WTF::HashTable<double,WTF::KeyValuePair<double,WebCore::HRTFDatabaseLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<double,WebCore::HRTFDatabaseLoader *>>,WTF::DefaultHash<double>,WTF::HashMap<double,WebCore::HRTFDatabaseLoader *,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<WebCore::HRTFDatabaseLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<double>>::rehash(&WebCore::loaderMap(void)::loaderMap, v22 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebCore::loaderMap(void)::loaderMap = 0;
  }
  v24 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      atomic_store(1u, v24);
      WTF::Thread::~Thread((WTF::Thread *)v24);
      WTF::fastFree(v28, v29);
    }
  }
  v27 = (WTF **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v27)
    std::default_delete<WebCore::HRTFDatabase>::operator()[abi:sn180100](v27, a2);
}

void WebCore::HRTFElevation::clearCache(WebCore::HRTFElevation *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  int v11;
  unsigned int *v12;

  if (__ldaxr(WebCore::audioBusMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::audioBusMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::audioBusMapLock);
LABEL_5:
  {
    v3 = WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap;
    if (WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap)
    {
      WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap = 0;
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        for (i = 0; i != v4; ++i)
        {
          v6 = v3 + 16 * i;
          if (*(_QWORD *)v6 != -1)
          {
            v7 = *(unsigned int **)(v6 + 8);
            *(_QWORD *)(v6 + 8) = 0;
            if (v7)
            {
              do
              {
                v8 = __ldaxr(v7);
                v9 = v8 - 1;
              }
              while (__stlxr(v9, v7));
              if (!v9)
              {
                atomic_store(1u, v7);
                v12 = v7;
                WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v12, a2);
              }
            }
            v10 = *(WTF::StringImpl **)v6;
            *(_QWORD *)v6 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2)
                WTF::StringImpl::destroy(v10, (WTF::StringImpl *)a2);
              else
                *(_DWORD *)v10 -= 2;
            }
          }
        }
      }
      WTF::fastFree((WTF *)(v3 - 16), a2);
    }
  }
  else
  {
    WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap = 0;
  }
  v11 = __ldxr(WebCore::audioBusMapLock);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_25;
  }
  if (__stlxr(0, WebCore::audioBusMapLock))
LABEL_25:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::audioBusMapLock);
}

uint64_t WebCore::HRTFKernel::HRTFKernel(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  void *v4;
  WebCore::FFTFrame *v7;
  DSPComplex *v8;
  DSPComplex *v9;
  float v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  OpaqueFFTSetup *v14;
  unsigned int v15;
  double v16;
  WTF *v17;
  double v18;
  unint64_t v19;
  WTF *v20;
  WTF *v21;
  double v22;
  float v23;
  long double v24;
  float v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  unsigned int v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  long double v37;
  long double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  __double2 v44;
  float v45;
  float v46;
  void *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  unsigned int v54;
  WebCore::FFTFrame *v56;
  WebCore::FFTFrame *v57;
  void *v58;
  WTF **v59;
  void *v60;
  void *v61;
  unint64_t v62;
  DSPComplex *v63;
  void *v64;
  float v66;
  unsigned int __N;
  unsigned int __N_4;
  FFTSetup v70;
  DSPSplitComplex v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  uint64_t v75;
  float __B[3];

  v4 = (void *)a3;
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(float *)(a1 + 20) = a4;
  v7 = (WebCore::FFTFrame *)(a3 >> 1);
  *(_BYTE *)(a2 + 24) = 0;
  v8 = *(DSPComplex **)a2;
  v9 = *(DSPComplex **)a2;
  if (!*(_QWORD *)a2)
    v9 = **(DSPComplex ***)(a2 + 8);
  v10 = 0.0;
  if (*(_QWORD *)(a2 + 16) >= (unint64_t)v7)
  {
    v66 = a4;
    v72 = 0;
    v73 = 0;
    if ((_DWORD)v7)
    {
      v11 = (a3 >> 1);
      WTF::fastAlignedFree(0, (void *)a2);
      v12 = (WTF *)WTF::fastAlignedMalloc((WTF *)0x20);
      v72 = v12;
      v73 = v11;
      bzero(v12, 4 * v11);
      WTF::fastAlignedFree(0, v13);
      v74 = (WTF *)WTF::fastAlignedMalloc((WTF *)0x20);
      v75 = v11;
      bzero(v74, 4 * v11);
    }
    else
    {
      v12 = 0;
      v74 = 0;
      v75 = 0;
    }
    __N = v7;
    __N_4 = log2((double)v7);
    WebCore::FFTFrame::fftSetupForSize(v7);
    v70 = v14;
    v71.realp = (float *)v12;
    v71.imagp = (float *)v74;
    WebCore::FFTFrame::doFFT((WebCore::FFTFrame *)&__N, v9);
    v15 = __N;
    v16 = 0.0;
    v17 = v72;
    v18 = 0.0;
    if (__N >= 2)
    {
      v19 = (unint64_t)__N >> 1;
      v20 = v74;
      v21 = v72;
      v22 = 0.0;
      do
      {
        v23 = *(float *)v21;
        v21 = (WTF *)((char *)v21 + 4);
        v24 = v23;
        v25 = *(float *)v20;
        v20 = (WTF *)((char *)v20 + 4);
        v26 = hypot(v24, v25);
        v27 = atan2(v25, v24);
        v28 = v27 - v22;
        if (v27 - v22 < -3.14159265)
          v28 = v27 - v22 + 6.28318531;
        if (v28 > 3.14159265)
          v28 = v28 + -6.28318531;
        v18 = v18 + v26 * v28;
        v16 = v16 + v26;
        v22 = v27;
        --v19;
      }
      while (v19);
    }
    v29 = 6.28318531 / (double)v15;
    v30 = -v18 / v16 / v29;
    if (v30 <= 20.0)
      v31 = -v18 / v16 / v29;
    else
      v31 = v30 + -20.0;
    if (v15 >= 4)
    {
      v32 = v29 * v31;
      v33 = v15 >> 1;
      v34 = v74;
      v35 = v33;
      v36 = 1;
      do
      {
        v37 = *((float *)v17 + v36);
        v38 = *((float *)v34 + v36);
        v39 = hypot(v37, v38);
        v40 = atan2(v38, v37);
        v41 = NAN;
        v42 = NAN;
        if ((*(_QWORD *)&v39 & 0x8000000000000000) == 0)
        {
          v43 = v40 + (double)(int)v36 * v32;
          if (fabs(v43) == INFINITY)
          {
            v41 = NAN;
            if (fabs(v39) == INFINITY)
              v42 = v39;
            else
              v42 = NAN;
          }
          else
          {
            v44 = __sincos_stret(v43);
            v42 = v39 * v44.__cosval;
            v41 = v39 * v44.__sinval;
          }
        }
        v45 = v42;
        *((float *)v17 + v36) = v45;
        v46 = v41;
        *((float *)v34 + v36++) = v46;
      }
      while (v35 != v36);
    }
    *(_DWORD *)v17 = 0;
    v10 = v31;
    vDSP_fft_zrip(v70, &v71, 1, __N_4, -1);
    vDSP_ztoc(&v71, 1, v9, 2, (unint64_t)__N >> 1);
    __B[0] = 1.0 / (float)__N;
    vDSP_vsmul((const float *)v9, 1, __B, (float *)v9, 1, __N);
    WTF::fastAlignedFree(v74, v47);
    WTF::fastAlignedFree(v72, v48);
    v8 = *(DSPComplex **)a2;
    v4 = (void *)a3;
    a4 = v66;
  }
  *(float *)(a1 + 16) = v10;
  *(_BYTE *)(a2 + 24) = 0;
  if (!v8)
    v8 = **(DSPComplex ***)(a2 + 8);
  if ((unint64_t)v7 >= *(_QWORD *)(a2 + 16))
    v49 = *(_QWORD *)(a2 + 16);
  else
    v49 = (unint64_t)v7;
  v50 = (float)(a4 / 4410.0);
  v51 = v49 - v50;
  if (v49 > v50 && v49 > v51)
  {
    v52 = (v49 - v50);
    v53 = (float)v50;
    v54 = v49 - v50 + 1;
    do
    {
      *(&v8->real + v52) = *(&v8->real + v52) * (float)(1.0 - (float)((float)(unint64_t)(v52 - v51) / v53));
      v52 = v54;
    }
    while (v49 > v54++);
  }
  v56 = (WebCore::FFTFrame *)WTF::fastMalloc((WTF *)0x40);
  v57 = WebCore::FFTFrame::FFTFrame(v56, v4);
  v59 = *(WTF ***)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v57;
  if (v59)
  {
    WTF::fastAlignedFree(v59[6], v58);
    WTF::fastAlignedFree(v59[4], v60);
    WTF::fastFree((WTF *)v59, v61);
    v56 = *(WebCore::FFTFrame **)(a1 + 8);
  }
  v62 = *(unsigned int *)v56;
  if ((_DWORD)v62)
  {
    WTF::fastAlignedFree(0, v58);
    v63 = (DSPComplex *)WTF::fastAlignedMalloc((WTF *)0x20);
    bzero(v63, 4 * v62);
  }
  else
  {
    v63 = 0;
  }
  if (v49 <= v62)
    memcpy(v63, v8, 4 * v49);
  WebCore::FFTFrame::doFFT(v56, v63);
  WTF::fastAlignedFree((WTF *)v63, v64);
  return a1;
}

WebCore::HRTFPanner *WebCore::HRTFPanner::HRTFPanner(WebCore::HRTFPanner *this, float a2, WebCore::HRTFDatabaseLoader *a3)
{
  int v5;
  unint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  _OWORD *v10;
  void *v11;
  _OWORD *v12;
  void *v13;
  _OWORD *v14;
  void *v15;
  _OWORD *v16;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3407810;
  if (a3)
    ++*(_DWORD *)a3;
  *((_QWORD *)this + 2) = a3;
  *((float *)this + 6) = a2;
  *((_DWORD *)this + 7) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 36) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 52) = 0;
  v5 = 1 << log2((float)(a2 / 44100.0) * 256.0);
  *(_OWORD *)((char *)this + 56) = 0u;
  if (v5 <= 4)
    v5 = 4;
  v6 = (2 * v5);
  WebCore::FFTConvolver::FFTConvolver((WebCore::HRTFPanner *)((char *)this + 72), v6);
  WebCore::FFTConvolver::FFTConvolver((WebCore::HRTFPanner *)((char *)this + 192), v6);
  WebCore::FFTConvolver::FFTConvolver((WebCore::HRTFPanner *)((char *)this + 312), v6);
  WebCore::FFTConvolver::FFTConvolver((WebCore::HRTFPanner *)((char *)this + 432), v6);
  WebCore::DelayDSPKernel::DelayDSPKernel((WebCore::HRTFPanner *)((char *)this + 552), 0.002, a2, v7);
  WebCore::DelayDSPKernel::DelayDSPKernel((WebCore::HRTFPanner *)((char *)this + 648), 0.002, a2, v8);
  *(_OWORD *)((char *)this + 744) = 0u;
  WTF::fastAlignedFree(0, v9);
  v10 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 93) = v10;
  *((_QWORD *)this + 94) = 128;
  *v10 = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[9] = 0u;
  v10[10] = 0u;
  v10[11] = 0u;
  v10[12] = 0u;
  v10[13] = 0u;
  v10[14] = 0u;
  v10[15] = 0u;
  v10[16] = 0u;
  v10[17] = 0u;
  v10[18] = 0u;
  v10[19] = 0u;
  v10[20] = 0u;
  v10[21] = 0u;
  v10[22] = 0u;
  v10[23] = 0u;
  v10[24] = 0u;
  v10[25] = 0u;
  v10[26] = 0u;
  v10[27] = 0u;
  v10[28] = 0u;
  v10[29] = 0u;
  v10[30] = 0u;
  v10[31] = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  WTF::fastAlignedFree(0, v11);
  v12 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 95) = v12;
  *((_QWORD *)this + 96) = 128;
  *v12 = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  v12[7] = 0u;
  v12[8] = 0u;
  v12[9] = 0u;
  v12[10] = 0u;
  v12[11] = 0u;
  v12[12] = 0u;
  v12[13] = 0u;
  v12[14] = 0u;
  v12[15] = 0u;
  v12[16] = 0u;
  v12[17] = 0u;
  v12[18] = 0u;
  v12[19] = 0u;
  v12[20] = 0u;
  v12[21] = 0u;
  v12[22] = 0u;
  v12[23] = 0u;
  v12[24] = 0u;
  v12[25] = 0u;
  v12[26] = 0u;
  v12[27] = 0u;
  v12[28] = 0u;
  v12[29] = 0u;
  v12[30] = 0u;
  v12[31] = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  WTF::fastAlignedFree(0, v13);
  v14 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 97) = v14;
  *((_QWORD *)this + 98) = 128;
  *v14 = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[17] = 0u;
  v14[18] = 0u;
  v14[19] = 0u;
  v14[20] = 0u;
  v14[21] = 0u;
  v14[22] = 0u;
  v14[23] = 0u;
  v14[24] = 0u;
  v14[25] = 0u;
  v14[26] = 0u;
  v14[27] = 0u;
  v14[28] = 0u;
  v14[29] = 0u;
  v14[30] = 0u;
  v14[31] = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  WTF::fastAlignedFree(0, v15);
  v16 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *((_QWORD *)this + 99) = v16;
  *((_QWORD *)this + 100) = 128;
  *v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  v16[8] = 0u;
  v16[9] = 0u;
  v16[10] = 0u;
  v16[11] = 0u;
  v16[12] = 0u;
  v16[13] = 0u;
  v16[14] = 0u;
  v16[15] = 0u;
  v16[16] = 0u;
  v16[17] = 0u;
  v16[18] = 0u;
  v16[19] = 0u;
  v16[20] = 0u;
  v16[21] = 0u;
  v16[22] = 0u;
  v16[23] = 0u;
  v16[24] = 0u;
  v16[25] = 0u;
  v16[26] = 0u;
  v16[27] = 0u;
  v16[28] = 0u;
  v16[29] = 0u;
  v16[30] = 0u;
  v16[31] = 0u;
  return this;
}

void WebCore::HRTFPanner::~HRTFPanner(WTF **this, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  WebCore::HRTFDatabaseLoader *v33;
  WTF *v34;
  void *v35;

  WTF::fastAlignedFree(this[99], a2);
  WTF::fastAlignedFree(this[97], v3);
  WTF::fastAlignedFree(this[95], v4);
  WTF::fastAlignedFree(this[93], v5);
  WTF::fastAlignedFree(this[91], v6);
  WTF::fastAlignedFree(this[89], v7);
  WTF::fastAlignedFree(this[84], v8);
  WTF::fastAlignedFree(this[79], v9);
  WTF::fastAlignedFree(this[77], v10);
  WTF::fastAlignedFree(this[72], v11);
  WTF::fastAlignedFree(this[67], v12);
  WTF::fastAlignedFree(this[65], v13);
  WTF::fastAlignedFree(this[63], v14);
  WTF::fastAlignedFree(this[60], v15);
  WTF::fastAlignedFree(this[58], v16);
  WTF::fastAlignedFree(this[52], v17);
  WTF::fastAlignedFree(this[50], v18);
  WTF::fastAlignedFree(this[48], v19);
  WTF::fastAlignedFree(this[45], v20);
  WTF::fastAlignedFree(this[43], v21);
  WTF::fastAlignedFree(this[37], v22);
  WTF::fastAlignedFree(this[35], v23);
  WTF::fastAlignedFree(this[33], v24);
  WTF::fastAlignedFree(this[30], v25);
  WTF::fastAlignedFree(this[28], v26);
  WTF::fastAlignedFree(this[22], v27);
  WTF::fastAlignedFree(this[20], v28);
  WTF::fastAlignedFree(this[18], v29);
  WTF::fastAlignedFree(this[15], v30);
  WTF::fastAlignedFree(this[13], v31);
  v33 = this[2];
  this[2] = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 1)
    {
      WebCore::HRTFDatabaseLoader::~HRTFDatabaseLoader(v33, v32);
      WTF::fastFree(v34, v35);
    }
    else
    {
      --*(_DWORD *)v33;
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::HRTFPanner::~HRTFPanner(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::HRTFPanner::reset(void **this)
{
  bzero(this[22], 4 * (_QWORD)this[23]);
  this[17] = 0;
  bzero(this[37], 4 * (_QWORD)this[38]);
  this[32] = 0;
  bzero(this[52], 4 * (_QWORD)this[53]);
  this[47] = 0;
  bzero(this[67], 4 * (_QWORD)this[68]);
  this[62] = 0;
  bzero(this[72], 4 * (_QWORD)this[73]);
  bzero(this[84], 4 * (_QWORD)this[85]);
}

void WebCore::HRTFPanner::pan(WebCore::HRTFPanner *this, double a2, double a3, const WebCore::AudioBus *a4, WebCore::AudioBus *a5, unint64_t a6)
{
  unsigned int v8;
  BOOL v9;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _BOOL4 v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  double v24;
  double v25;
  int v26;
  unsigned int v27;
  double v28;
  float v29;
  float v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  double v34;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  unsigned int v42;
  uint64_t **v43;
  double v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  unsigned int v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  double v70;
  double v71;
  double v72;
  unsigned int v73;
  float *v74;
  uint64_t v75;
  BOOL hasSampleAccurateValues;
  uint64_t v77;
  char v78;
  float *v79;
  const float *v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  char v84;
  float v85;
  float *v86;
  float *v87;
  float *v88;
  float *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  float v95;
  uint64_t v96;
  float v97;
  float v98;
  BOOL v99;
  float v100;
  float v101;
  int v103;
  float v104;
  unint64_t i;
  uint64_t v106;
  void **v107;
  _QWORD *v108;
  WebCore::DelayDSPKernel *v109;
  WebCore::DelayDSPKernel *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  if (a4)
    v8 = *((_DWORD *)a4 + 7);
  else
    v8 = 0;
  if (a4)
    v9 = v8 == 0;
  else
    v9 = 1;
  v11 = v9 || v8 > 2;
  if (a5)
  {
    v12 = *((unsigned int *)a5 + 7);
    if ((_DWORD)v12 != 2)
      goto LABEL_153;
    if (*((_QWORD *)a5 + 1) < a6)
      v13 = 1;
    else
      v13 = v11;
    if ((v13 & 1) != 0)
      goto LABEL_152;
    v14 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    if (!v14 || a2 > 180.0 || a2 < -180.0)
      goto LABEL_152;
    if (*((_DWORD *)a4 + 8))
    {
      v15 = 0;
      v16 = 0;
      v17 = v8 > 1;
    }
    else
    {
      v15 = 0;
      v18 = *((_DWORD *)a4 + 7);
      if (v18 <= 6 && ((1 << v18) & 0x76) != 0)
        v15 = (uint64_t *)**((_QWORD **)a4 + 2);
      if (v8 <= 1)
      {
        v17 = 0;
        v16 = 0;
      }
      else
      {
        v16 = 0;
        v17 = 1;
        if (v18 <= 6 && ((1 << v18) & 0x74) != 0)
        {
          v16 = *(uint64_t **)(*((_QWORD *)a4 + 2) + 8);
          v17 = 1;
        }
      }
    }
    v19 = *v15;
    if (!*v15)
      v19 = *(_QWORD *)v15[1];
    v20 = v19;
    if (v17)
    {
      v20 = *v16;
      if (!*v16)
        v20 = *(_QWORD *)v16[1];
    }
    v21 = (uint64_t **)*((_QWORD *)a5 + 2);
    v22 = *v21;
    *((_BYTE *)v22 + 24) = 0;
    v120 = *v22;
    if (!*v22)
      v120 = *(_QWORD *)v22[1];
    v23 = v21[1];
    *((_BYTE *)v23 + 24) = 0;
    v119 = *v23;
    if (!*v23)
      v119 = *(_QWORD *)v23[1];
    if (a2 <= 0.0)
      v24 = -a2;
    else
      v24 = 360.0 - a2;
    v25 = v24 / 1.875;
    v26 = (int)v25;
    v27 = v26 & ~(v26 >> 31);
    if (v27 >= 0xBF)
      v27 = 191;
    if (!*((_BYTE *)this + 36))
    {
      *((_DWORD *)this + 8) = v27;
      *((_BYTE *)this + 36) = 1;
      *((double *)this + 5) = a3;
    }
    if (!*((_BYTE *)this + 52))
    {
      *((_DWORD *)this + 12) = v27;
      *((_BYTE *)this + 52) = 1;
      *((double *)this + 7) = a3;
    }
    v28 = 4096.0;
    if (*((float *)this + 6) <= 48000.0)
      v28 = 2048.0;
    v29 = *((float *)this + 16);
    if (v29 == 0.0 && !*((_DWORD *)this + 7) && (v27 != *((_DWORD *)this + 8) || *((double *)this + 5) != a3))
    {
      v30 = 1.0 / v28;
      *((float *)this + 17) = v30;
      *((_DWORD *)this + 12) = v27;
      *((_BYTE *)this + 52) = 1;
      *((double *)this + 7) = a3;
    }
    if (v29 == 1.0 && *((_DWORD *)this + 7) == 1 && (v27 != *((_DWORD *)this + 12) || *((double *)this + 7) != a3))
    {
      v31 = -1.0 / v28;
      *((float *)this + 17) = v31;
      *((_DWORD *)this + 8) = v27;
      *((_BYTE *)this + 36) = 1;
      *((double *)this + 5) = a3;
    }
    if ((a6 & 0x7FFFFFFF80) != 0)
    {
      v32 = 0;
      v33 = 0;
      v34 = v25 - (double)v26;
      if (v34 >= 1.0 || v34 < 0.0)
        v36 = 0.0;
      else
        v36 = v34;
      v37 = 1.0 - v36;
      v109 = (WebCore::HRTFPanner *)((char *)this + 648);
      v110 = (WebCore::HRTFPanner *)((char *)this + 552);
      v111 = (a6 >> 7);
      v112 = v20;
      v38 = 15.0;
      v113 = v19;
      v114 = v14;
      do
      {
        if (!*((_BYTE *)this + 36))
          goto LABEL_162;
        v39 = *(unsigned int *)(v14 + 12);
        if (!(_DWORD)v39)
        {
          if (!*((_BYTE *)this + 52))
          {
LABEL_162:
            __break(1u);
LABEL_170:
            __break(0xC471u);
            JUMPOUT(0x196109B00);
          }
LABEL_152:
          v12 = *((unsigned int *)a5 + 7);
LABEL_153:
          if (v12)
          {
            for (i = 0; i < v12; ++i)
            {
              v106 = *(_QWORD *)(*((_QWORD *)a5 + 2) + 8 * i);
              if (!*(_BYTE *)(v106 + 24))
              {
                *(_BYTE *)(v106 + 24) = 1;
                v107 = *(void ***)(v106 + 8);
                v108 = (_QWORD *)(v106 + 16);
                if (v107)
                  v108 = v107 + 1;
                else
                  v107 = (void **)v106;
                bzero(*v107, 4 * *v108);
                v12 = *((unsigned int *)a5 + 7);
              }
            }
          }
          return;
        }
        v40 = fmax(*((double *)this + 5), -45.0);
        if (v40 >= 90.0)
          v41 = 9.0;
        else
          v41 = (v40 + 45.0) / v38;
        if (v39 - 1 >= (unint64_t)(int)v41)
          v42 = (int)v41;
        else
          v42 = v39 - 1;
        if (v39 <= v42)
          goto LABEL_170;
        v43 = *(uint64_t ***)(*(_QWORD *)v14 + 8 * v42);
        v44 = 0.0;
        if (v43
          && (v45 = *((unsigned int *)this + 8),
              v46 = *v43,
              v47 = *((unsigned int *)*v43 + 3),
              v47 > v45))
        {
          v48 = v43[1];
          v49 = *((unsigned int *)v48 + 3);
          if (v49 <= v45)
          {
            __break(0xC471u);
            JUMPOUT(0x196109B28);
          }
          if ((_DWORD)v45 + 1 == (_DWORD)v47)
            v50 = 0;
          else
            v50 = v45 + 1;
          if (v47 <= v50)
          {
            __break(0xC471u);
            JUMPOUT(0x196109B30);
          }
          v51 = v50;
          if (v49 <= v50)
            goto LABEL_170;
          v52 = *v46;
          v53 = *(_QWORD *)(v52 + 8 * v45);
          v54 = *v48;
          v55 = *(_QWORD *)(v54 + 8 * v45);
          v44 = v36 * *(float *)(*(_QWORD *)(v52 + 8 * v51) + 16) + v37 * *(float *)(v53 + 16);
          v56 = v36 * *(float *)(*(_QWORD *)(v54 + 8 * v51) + 16) + v37 * *(float *)(v55 + 16);
        }
        else
        {
          v53 = 0;
          v55 = 0;
          v56 = 0.0;
        }
        if (!*((_BYTE *)this + 52))
          goto LABEL_162;
        v57 = fmax(*((double *)this + 7), -45.0);
        if (v57 >= 90.0)
          v58 = 9.0;
        else
          v58 = (v57 + 45.0) / v38;
        if (v39 - 1 >= (unint64_t)(int)v58)
          v59 = (int)v58;
        else
          v59 = v39 - 1;
        if (v39 <= v59)
        {
          __break(0xC471u);
          JUMPOUT(0x196109B08);
        }
        v60 = *(uint64_t ***)(*(_QWORD *)v14 + 8 * v59);
        if (!v60)
          goto LABEL_152;
        v61 = *((unsigned int *)this + 12);
        v62 = *v60;
        v63 = *((unsigned int *)*v60 + 3);
        if (v63 <= v61)
          goto LABEL_152;
        v64 = v60[1];
        v65 = *((unsigned int *)v64 + 3);
        if (v65 <= v61)
        {
          __break(0xC471u);
          JUMPOUT(0x196109B10);
        }
        if ((_DWORD)v61 + 1 == (_DWORD)v63)
          v66 = 0;
        else
          v66 = v61 + 1;
        if (v63 <= v66)
        {
          __break(0xC471u);
          JUMPOUT(0x196109B18);
        }
        if (v65 <= v66)
        {
          __break(0xC471u);
          JUMPOUT(0x196109B20);
        }
        if (!v53 || !v55)
          goto LABEL_152;
        v117 = v53;
        v118 = v55;
        v67 = *v62;
        v68 = *v64;
        v115 = *(_QWORD *)(v67 + 8 * v61);
        v116 = *(_QWORD *)(v68 + 8 * v61);
        v69 = *((float *)this + 16);
        v70 = (float)(1.0 - v69);
        v71 = v69;
        v72 = (v36 * *(float *)(*(_QWORD *)(v68 + 8 * v66) + 16) + v37 * *(float *)(v116 + 16)) * v71 + v70 * v56;
        v73 = (_DWORD)v33 << 7;
        v74 = (float *)(v120 + 4 * ((_DWORD)v33 << 7));
        *((double *)this + 76) = (v36 * *(float *)(*(_QWORD *)(v67 + 8 * v66) + 16) + v37 * *(float *)(v115 + 16))
                               * v71
                               + v70 * v44;
        *((double *)this + 88) = v72;
        if (v120 && v19 && *((_QWORD *)this + 73))
        {
          v75 = *((_QWORD *)this + 70);
          if (!v75)
            goto LABEL_116;
          hasSampleAccurateValues = WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v75 + 48));
          v77 = *((_QWORD *)this + 70);
          if (!v77)
            goto LABEL_116;
          v9 = *(_BYTE *)(*(_QWORD *)(v77 + 48) + 104) == 0;
          v78 = !hasSampleAccurateValues;
          if (!v9)
            v78 = 1;
          if ((v78 & 1) == 0)
            WebCore::DelayDSPKernel::processARate(v110, (const float *)(v19 + 4 * v73), v74, 0x80uLL);
          else
LABEL_116:
            WebCore::DelayDSPKernel::processKRate(v110, (const float *)(v19 + 4 * v73), v74, 0x80uLL);
        }
        v79 = (float *)(v119 + 4 * v73);
        if (v119 && v20 && *((_QWORD *)this + 85))
        {
          v80 = (const float *)(v20 + 4 * v73);
          v81 = *((_QWORD *)this + 82);
          if (!v81)
            goto LABEL_126;
          v82 = WebCore::AudioParam::hasSampleAccurateValues(*(WebCore::AudioParam **)(v81 + 48));
          v83 = *((_QWORD *)this + 82);
          if (!v83)
            goto LABEL_126;
          v9 = *(_BYTE *)(*(_QWORD *)(v83 + 48) + 104) == 0;
          v84 = !v82;
          if (!v9)
            v84 = 1;
          if ((v84 & 1) == 0)
            WebCore::DelayDSPKernel::processARate(v109, v80, v79, 0x80uLL);
          else
LABEL_126:
            WebCore::DelayDSPKernel::processKRate(v109, v80, v79, 0x80uLL);
        }
        v85 = *((float *)this + 17);
        if (v85 == 0.0)
        {
          v90 = *((_DWORD *)this + 7);
          v89 = v79;
          v87 = v79;
          v86 = (float *)(v120 + 4 * ((_DWORD)v33 << 7));
          v88 = v86;
          if (v90)
            goto LABEL_131;
        }
        else
        {
          v86 = (float *)*((_QWORD *)this + 93);
          v87 = (float *)*((_QWORD *)this + 95);
          v88 = (float *)*((_QWORD *)this + 97);
          v89 = (float *)*((_QWORD *)this + 99);
        }
        WebCore::FFTConvolver::process((WebCore::HRTFPanner *)((char *)this + 72), *(WebCore::FFTFrame **)(v117 + 8), v74, v86, 0x80uLL);
        WebCore::FFTConvolver::process((WebCore::HRTFPanner *)((char *)this + 192), *(WebCore::FFTFrame **)(v118 + 8), v79, v87, 0x80uLL);
        v90 = *((_DWORD *)this + 7);
LABEL_131:
        if (v85 != 0.0 || v90 == 1)
        {
          WebCore::FFTConvolver::process((WebCore::HRTFPanner *)((char *)this + 312), *(WebCore::FFTFrame **)(v115 + 8), v74, v88, 0x80uLL);
          WebCore::FFTConvolver::process((WebCore::HRTFPanner *)((char *)this + 432), *(WebCore::FFTFrame **)(v116 + 8), v79, v89, 0x80uLL);
        }
        v14 = v114;
        v38 = 15.0;
        if (v85 == 0.0)
          goto LABEL_149;
        v91 = 0;
        v92 = v32 >> 7;
        v93 = v119 + (v92 << 9);
        v94 = *((float *)this + 16);
        v95 = *((float *)this + 17);
        v96 = v120 + (v92 << 9);
        do
        {
          *(float *)(v96 + v91 * 4) = (float)(v94 * v88[v91]) + (float)((float)(1.0 - v94) * v86[v91]);
          *(float *)(v93 + v91 * 4) = (float)(v94 * v89[v91]) + (float)((float)(1.0 - v94) * v87[v91]);
          v94 = v95 + v94;
          ++v91;
        }
        while (v91 != 128);
        *((float *)this + 16) = v94;
        v97 = *((float *)this + 17);
        v98 = fabsf(v94 + -1.0);
        v99 = v97 > 0.0 && v98 < v97;
        if (v99)
        {
          v104 = 1.0;
          v103 = 1;
        }
        else
        {
          v99 = v97 < 0.0;
          v100 = fabsf(v94);
          v101 = -v97;
          if (!v99 || v100 >= v101)
            goto LABEL_149;
          v103 = 0;
          v104 = 0.0;
        }
        *((_DWORD *)this + 7) = v103;
        *((float *)this + 16) = v104;
        *((_DWORD *)this + 17) = 0;
LABEL_149:
        ++v33;
        v32 += 128;
        v20 = v112;
        v19 = v113;
      }
      while (v33 != v111);
    }
  }
}

void WebCore::HRTFPanner::panWithSampleAccurateValues(WebCore::HRTFPanner *this, double *a2, double *a3, const WebCore::AudioBus *a4, WebCore::AudioBus *a5, unint64_t a6)
{
  WebCore::HRTFPanner::pan(this, *a2, *a3, a4, a5, a6);
}

double WebCore::HRTFPanner::tailTime(WebCore::HRTFPanner *this)
{
  float v1;
  int v2;

  v1 = *((float *)this + 6);
  v2 = 1 << log2((float)(v1 / 44100.0) * 256.0);
  if (v2 <= 4)
    v2 = 4;
  return (double)v2 / v1 + 0.002;
}

double WebCore::HRTFPanner::latencyTime(WebCore::HRTFPanner *this)
{
  float v1;
  int v2;

  v1 = *((float *)this + 6);
  v2 = 1 << log2((float)(v1 / 44100.0) * 256.0);
  if (v2 <= 4)
    v2 = 4;
  return (double)v2 / v1;
}

uint64_t WebCore::HRTFPanner::requiresTailProcessing(WebCore::HRTFPanner *this)
{
  return 1;
}

double WebCore::EqualPowerPanner::tailTime(WebCore::EqualPowerPanner *this)
{
  return 0.0;
}

double WebCore::EqualPowerPanner::latencyTime(WebCore::EqualPowerPanner *this)
{
  return 0.0;
}

uint64_t WebCore::EqualPowerPanner::requiresTailProcessing(WebCore::EqualPowerPanner *this)
{
  return 0;
}

uint64_t std::default_delete<WebCore::HRTFDatabase>::operator()[abi:sn180100](WTF **this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;

  v3 = *((unsigned int *)this + 3);
  if ((_DWORD)v3)
  {
    v4 = *this;
    v5 = 8 * v3;
    do
    {
      v6 = *(WTF ***)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
      {
        v7 = v6[1];
        v6[1] = 0;
        if (v7)
          std::default_delete<WTF::Vector<WTF::RefPtr<WebCore::HRTFKernel,WTF::RawPtrTraits<WebCore::HRTFKernel>,WTF::DefaultRefDerefTraits<WebCore::HRTFKernel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v7, a2);
        v8 = *v6;
        *v6 = 0;
        if (v8)
          std::default_delete<WTF::Vector<WTF::RefPtr<WebCore::HRTFKernel,WTF::RawPtrTraits<WebCore::HRTFKernel>,WTF::DefaultRefDerefTraits<WebCore::HRTFKernel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v8, a2);
        WTF::fastFree((WTF *)v6, a2);
      }
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v9 = *this;
  if (*this)
  {
    *this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v9, a2);
  }
  return WTF::fastFree((WTF *)this, a2);
}

_DWORD *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;

  v2 = WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap;
  if (WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap)
  {
    v3 = *(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 4);
    v4 = *(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = (WTF::StringImpl **)(v2 + 16 * v7);
      v9 = *v8;
      if (*v8 != (WTF::StringImpl *)-1)
      {
        if (v9)
        {
          v15 = WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap;
          if (WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap)
            v16 = *(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 8);
          else
            v16 = 0;
          v17 = *((_DWORD *)v9 + 4);
          if (v17 < 0x100)
            v18 = WTF::StringImpl::hashSlowCase(v9);
          else
            v18 = v17 >> 8;
          v19 = 0;
          do
          {
            v20 = v18 & v16;
            v18 = ++v19 + v20;
          }
          while (*(_QWORD *)(v15 + 16 * v20));
          v21 = v15 + 16 * v20;
          v22 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              v32 = v22;
              WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v32, v6);
            }
          }
          v25 = *(WTF::StringImpl **)v21;
          *(_QWORD *)v21 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = *v8;
          *v8 = 0;
          *(_QWORD *)v21 = v26;
          v27 = v2 + 16 * v7;
          v28 = *(_QWORD *)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          *(_QWORD *)(v21 + 8) = v28;
          v29 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              atomic_store(1u, v29);
              v32 = v29;
              WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v32, v6);
            }
          }
          v14 = *v8;
          *v8 = 0;
          if (!v14)
            goto LABEL_37;
          if (*(_DWORD *)v14 == 2)
            goto LABEL_39;
          *(_DWORD *)v14 -= 2;
        }
        else
        {
          v10 = v2 + 16 * v7;
          v11 = *(unsigned int **)(v10 + 8);
          *(_QWORD *)(v10 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              atomic_store(1u, v11);
              v32 = v11;
              WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v32, v6);
            }
          }
          v14 = *v8;
          *v8 = 0;
          if (!v14)
            goto LABEL_37;
          if (*(_DWORD *)v14 == 2)
          {
LABEL_39:
            WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v6);
            goto LABEL_37;
          }
          *(_DWORD *)v14 -= 2;
        }
      }
LABEL_37:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

WTF *std::default_delete<WTF::Vector<WTF::RefPtr<WebCore::HRTFKernel,WTF::RawPtrTraits<WebCore::HRTFKernel>,WTF::DefaultRefDerefTraits<WebCore::HRTFKernel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](WTF *this, void *a2)
{
  WTF *v2;
  uint64_t v3;
  WTF **v4;
  uint64_t v5;
  WTF *v6;
  WTF **v7;
  void *v8;
  void *v9;
  WTF *v10;

  if (this)
  {
    v2 = this;
    v3 = *((unsigned int *)this + 3);
    if ((_DWORD)v3)
    {
      v4 = *(WTF ***)this;
      v5 = 8 * v3;
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 1)
          {
            v7 = (WTF **)*((_QWORD *)v6 + 1);
            *((_QWORD *)v6 + 1) = 0;
            if (v7)
            {
              WTF::fastAlignedFree(v7[6], a2);
              WTF::fastAlignedFree(v7[4], v8);
              WTF::fastFree((WTF *)v7, v9);
            }
            WTF::fastFree(v6, a2);
          }
          else
          {
            --*(_DWORD *)v6;
          }
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    v10 = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      WTF::fastFree(v10, a2);
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  return this;
}

_OWORD *WTF::HashTable<double,WTF::KeyValuePair<double,WebCore::HRTFDatabaseLoader *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<double,WebCore::HRTFDatabaseLoader *>>,WTF::DefaultHash<double>,WTF::HashMap<double,WebCore::HRTFDatabaseLoader *,WTF::DefaultHash<double>,WTF::HashTraits<double>,WTF::HashTraits<WebCore::HRTFDatabaseLoader *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<double>>::rehash(uint64_t *a1, unsigned int a2, double *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  double *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  double v24;
  _OWORD *v25;
  _OWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  if (a2)
  {
    v11 = a2;
    v12 = (_QWORD *)(v9 + 24);
    do
    {
      *(v12 - 1) = 0x7FF0000000000000;
      *v12 = 0;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (double *)(v6 + 16 * v13);
      if (fabs(*v15) != INFINITY)
      {
        v16 = *a1;
        if (*a1)
          v17 = *(_DWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = (~(*(_QWORD *)v15 << 32) + *(_QWORD *)v15) ^ ((~(*(_QWORD *)v15 << 32) + *(_QWORD *)v15) >> 22);
        v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((unint64_t)(v18 + ~(v18 << 13)) >> 8));
        v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
        v21 = v17 & ((v20 >> 31) ^ v20);
        v22 = 1;
        do
        {
          v23 = v21;
          v24 = *(double *)(v16 + 16 * v21);
          v21 = (v21 + v22++) & v17;
        }
        while (v24 != INFINITY);
        v25 = (_OWORD *)(v16 + 16 * v23);
        *v25 = *(_OWORD *)v15;
        if (v15 == a3)
          v14 = v25;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HRTFDatabaseLoader::loadAsynchronously(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  void *v4;
  int v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const WTF::StringImpl *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int i;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unsigned int v27;
  const char *v28;
  WebCore::AudioBus *v29;
  WTF::StringImpl *v30;
  const WTF::StringImpl *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  WTF::StringImpl **v37;
  int j;
  unsigned int v39;
  WTF::StringImpl **v40;
  WTF *v41;
  unsigned int v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  WTF::StringImpl *v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  WTF *v66;
  uint64_t v67;
  uint64_t v68;
  WTF *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  WTF **v78;
  void *v79;
  void *v80;
  WTF **v81;
  void *v82;
  void *v83;
  unsigned int v84;
  BOOL v85;
  unsigned int v86;
  void *v87;
  unint64_t v88;
  WTF **v89;
  WTF *v90;
  WTF *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  float v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  float v101;
  uint64_t v102;
  uint64_t v103;
  WTF *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float v109;
  float v110;
  float v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  int *v115;
  void *v116;
  int *v117;
  void *v118;
  void *v119;
  void *v120;
  float v121;
  float v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  void *v127;
  int *v128;
  void *v129;
  void *v130;
  void *v131;
  WTF **v132;
  void *v133;
  void *v134;
  double v135;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  FFTSetup fftsetup;
  int v141;
  float v142;
  void *v143;
  uint64_t v144;
  unint64_t v145;
  DSPComplex *v146;
  vDSP_Length v147;
  vDSP_Length v148;
  float *v149;
  float *v150;
  void *v151;
  double v152;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  FFTSetup v157;
  int v158;
  float v159;
  void *v160;
  uint64_t v161;
  unint64_t v162;
  DSPComplex *v163;
  vDSP_Length v164;
  vDSP_Length v165;
  float *v166;
  float *v167;
  void *v168;
  uint64_t v169;
  WTF *v170;
  WTF **v171;
  void *v172;
  void *v173;
  void *v174;
  void *v175;
  BOOL v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  unint64_t v181;
  unint64_t v182;
  float v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  WTF::StringImpl *v190;
  WebCore::AudioBus *v191;
  WTF::StringImpl *v192;
  uint64_t __B[2];

  v1 = *(_QWORD *)(result + 8);
  if (!*(_QWORD *)(v1 + 8))
  {
    v2 = WTF::fastMalloc((WTF *)0x18);
    v178 = v1;
    v3 = *(float *)(v1 + 32);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 12) = 10;
    v4 = (void *)WTF::fastMalloc((WTF *)0x50);
    *(_DWORD *)(v2 + 8) = 10;
    *(_QWORD *)v2 = v4;
    bzero(v4, 8 * *(unsigned int *)(v2 + 12));
    *(float *)(v2 + 16) = v3;
    v180 = v3;
    v183 = v3;
    v5 = 1 << log2((float)(v3 / 44100.0) * 256.0);
    if (v5 <= 4)
      v5 = 4;
    v181 = 0;
    v182 = (2 * v5);
    v185 = -45;
    v179 = v2;
    while (1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v7 = (WTF::StringImpl *)__B[0];
      v190 = (WTF::StringImpl *)__B[0];
      if ((-286331153 * v185 + 143165576) > 0x11111110)
      {
        v8 = 0;
        goto LABEL_137;
      }
      v9 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 12) = 192;
      v10 = (void *)WTF::fastMalloc((WTF *)0x600);
      *(_DWORD *)(v9 + 8) = 192;
      *(_QWORD *)v9 = v10;
      bzero(v10, 8 * *(unsigned int *)(v9 + 12));
      v11 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      *(_DWORD *)(v11 + 12) = 192;
      v12 = (void *)WTF::fastMalloc((WTF *)0x600);
      *(_DWORD *)(v11 + 8) = 192;
      *(_QWORD *)v11 = v12;
      bzero(v12, 8 * *(unsigned int *)(v11 + 12));
      v15 = 0;
      v16 = 0;
      v188 = v9;
      v189 = v11;
      do
      {
        if (WebCore::maxElevations[v16] >= v185)
          v17 = v185;
        else
          v17 = WebCore::maxElevations[v16];
        if (v15 >= *(unsigned int *)(v9 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19610B394);
        }
        if (v15 >= *(unsigned int *)(v11 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x19610B39CLL);
        }
        if ((-286331153 * v17 + 143165576) > 0x11111110 || (v17 + 45) > 0x87)
          goto LABEL_135;
        v184 = *(_QWORD *)v9;
        v186 = *(_QWORD *)v11;
        if (__ldaxr(WebCore::audioBusMapLock))
        {
          __clrex();
        }
        else if (!__stxr(1u, WebCore::audioBusMapLock))
        {
          goto LABEL_20;
        }
        MEMORY[0x19AEA534C](WebCore::audioBusMapLock);
LABEL_20:
        {
          v19 = WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap;
          if (WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap)
          {
            v20 = *(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 8);
            v21 = *((_DWORD *)v190 + 4);
            if (v21 < 0x100)
              v22 = WTF::StringImpl::hashSlowCase(v190);
            else
              v22 = v21 >> 8;
            for (i = 0; ; v22 = i + v24)
            {
              v24 = v22 & v20;
              v25 = *(WTF **)(v19 + 16 * v24);
              if (v25 != (WTF *)-1)
              {
                if (!v25)
                  goto LABEL_34;
                if ((WTF::equal(v25, v190, v14) & 1) != 0)
                  break;
              }
              ++i;
            }
            v26 = *(_QWORD *)(v19 + 16 * v24 + 8);
            if (v26)
            {
              do
                v27 = __ldaxr((unsigned int *)v26);
              while (__stlxr(v27 + 1, (unsigned int *)v26));
              goto LABEL_86;
            }
          }
        }
        else
        {
          WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap = 0;
        }
LABEL_34:
        WTF::String::utf8();
        if (v192)
          v29 = (WTF::StringImpl *)((char *)v192 + 16);
        else
          v29 = 0;
        WebCore::AudioBus::loadPlatformResource(v29, v28, 44100.0, __B);
        v30 = v192;
        v26 = __B[0];
        v192 = 0;
        __B[0] = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 1)
          {
            WTF::fastFree(v30, v13);
            if (!v26)
            {
LABEL_243:
              v177 = __ldxr(WebCore::audioBusMapLock);
              if (v177 == 1)
              {
                if (!__stlxr(0, WebCore::audioBusMapLock))
                  goto LABEL_135;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)WebCore::audioBusMapLock);
LABEL_135:
              std::default_delete<WTF::Vector<WTF::RefPtr<WebCore::HRTFKernel,WTF::RawPtrTraits<WebCore::HRTFKernel>,WTF::DefaultRefDerefTraits<WebCore::HRTFKernel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((WTF *)v11, v13);
              std::default_delete<WTF::Vector<WTF::RefPtr<WebCore::HRTFKernel,WTF::RawPtrTraits<WebCore::HRTFKernel>,WTF::DefaultRefDerefTraits<WebCore::HRTFKernel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100]((WTF *)v9, v87);
              v8 = 0;
              goto LABEL_136;
            }
            goto LABEL_41;
          }
          --*(_DWORD *)v30;
        }
        if (!v26)
          goto LABEL_243;
LABEL_41:
        WTF::String::isolatedCopy();
        do
          v32 = __ldaxr((unsigned int *)v26);
        while (__stlxr(v32 + 1, (unsigned int *)v26));
        v33 = WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap;
        if (WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap
          || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(8u),
              (v33 = WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap) != 0))
        {
          v34 = *(_DWORD *)(v33 - 8);
        }
        else
        {
          v34 = 0;
        }
        v35 = *((_DWORD *)v192 + 4);
        if (v35 < 0x100)
          v36 = WTF::StringImpl::hashSlowCase(v192);
        else
          v36 = v35 >> 8;
        v37 = 0;
        for (j = 1; ; ++j)
        {
          v39 = v36 & v34;
          v40 = (WTF::StringImpl **)(v33 + 16 * (v36 & v34));
          v41 = *v40;
          if (*v40 == (WTF::StringImpl *)-1)
          {
            v37 = (WTF::StringImpl **)(v33 + 16 * v39);
            goto LABEL_55;
          }
          if (!v41)
          {
            if (v37)
            {
              *v37 = 0;
              v37[1] = 0;
              --*(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 16);
              v40 = v37;
            }
            v44 = v192;
            v192 = 0;
            v45 = *v40;
            *v40 = v44;
            v9 = v188;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v13);
              else
                *(_DWORD *)v45 -= 2;
            }
            v46 = (unsigned int *)v40[1];
            v40[1] = (WTF::StringImpl *)v26;
            if (v46)
            {
              do
              {
                v47 = __ldaxr(v46);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, v46));
              if (!v48)
              {
                atomic_store(1u, v46);
                __B[0] = (uint64_t)v46;
                WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(__B, v13);
              }
            }
            if (WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap)
              v49 = *(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 12) + 1;
            else
              v49 = 1;
            *(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 12) = v49;
            if (WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap)
              v50 = *(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 12);
            else
              v50 = 0;
            v51 = (*(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 16) + v50);
            v52 = *(unsigned int *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 4);
            if (v52 <= 0x400)
            {
              if (3 * v52 > 4 * v51)
                goto LABEL_83;
              if ((_DWORD)v52)
LABEL_77:
                v53 = (_DWORD)v52 << (6 * *(_DWORD *)(WebCore::concatenatedImpulseResponsesMap(void)::audioBusMap - 12) >= (2 * v52));
              else
                v53 = 8;
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::AudioBus,WTF::RawPtrTraits<WebCore::AudioBus>,WTF::DefaultRefDerefTraits<WebCore::AudioBus>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v53);
              goto LABEL_83;
            }
            if (v52 > 2 * v51)
              goto LABEL_83;
            goto LABEL_77;
          }
          if (WTF::equal(v41, v192, v31))
            break;
LABEL_55:
          v36 = j + v39;
        }
        do
        {
          v42 = __ldaxr((unsigned int *)v26);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, (unsigned int *)v26));
        v9 = v188;
        if (!v43)
        {
          atomic_store(1u, (unsigned int *)v26);
          __B[0] = v26;
          WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(__B, v13);
        }
LABEL_83:
        v54 = v192;
        v192 = 0;
        v11 = v189;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v13);
          else
            *(_DWORD *)v54 -= 2;
        }
LABEL_86:
        v55 = __ldxr(WebCore::audioBusMapLock);
        if (v55 == 1)
        {
          if (!__stlxr(0, WebCore::audioBusMapLock))
            goto LABEL_91;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)WebCore::audioBusMapLock);
LABEL_91:
        if (*(_QWORD *)(v26 + 8) != 61440 || *(_DWORD *)(v26 + 28) != 2)
        {
          do
          {
            v84 = __ldaxr((unsigned int *)v26);
            v85 = --v84 == 0;
          }
          while (__stlxr(v84, (unsigned int *)v26));
          goto LABEL_133;
        }
        v56 = v17 + 360;
        if (v17 >= 0)
          v56 = v17;
        if (v56 <= 90)
          v57 = v56 / 0xFu;
        else
          v57 = v56 / 0xFu - 15;
        v58 = v57 + 10 * (15 * (int)v16 / 0xFu);
        if (v58 >= 0xF0)
        {
          do
          {
            v86 = __ldaxr((unsigned int *)v26);
            v85 = --v86 == 0;
          }
          while (__stlxr(v86, (unsigned int *)v26));
LABEL_133:
          if (v85)
          {
            atomic_store(1u, (unsigned int *)v26);
            __B[0] = v26;
            WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(__B, v13);
          }
          goto LABEL_135;
        }
        WebCore::AudioBus::createBufferFromRange((WebCore::AudioBus *)v26, (const WebCore::AudioBus *)(v58 << 8), (v58 << 8) + 256, &v192);
        WebCore::AudioBus::createBySampleRateConverting(v192, 0, v180, &v191);
        v59 = *((_DWORD *)v191 + 7);
        if (v59 == 1)
        {
          __break(0xC471u);
          JUMPOUT(0x19610B3A4);
        }
        if (!v59)
        {
          __break(0xC471u);
          JUMPOUT(0x19610B3ACLL);
        }
        v60 = (uint64_t *)*((_QWORD *)v191 + 2);
        v61 = *v60;
        v62 = v60[1];
        v63 = WTF::fastMalloc((WTF *)0x18);
        v64 = WebCore::HRTFKernel::HRTFKernel(v63, v61, v182, v183);
        v66 = *(WTF **)(v184 + 8 * v15);
        *(_QWORD *)(v184 + 8 * v15) = v64;
        if (v66)
        {
          if (*(_DWORD *)v66 == 1)
          {
            v78 = (WTF **)*((_QWORD *)v66 + 1);
            *((_QWORD *)v66 + 1) = 0;
            if (v78)
            {
              WTF::fastAlignedFree(v78[6], v65);
              WTF::fastAlignedFree(v78[4], v79);
              WTF::fastFree((WTF *)v78, v80);
            }
            WTF::fastFree(v66, v65);
          }
          else
          {
            --*(_DWORD *)v66;
          }
        }
        v67 = WTF::fastMalloc((WTF *)0x18);
        v68 = WebCore::HRTFKernel::HRTFKernel(v67, v62, v182, v183);
        v69 = *(WTF **)(v186 + 8 * v15);
        *(_QWORD *)(v186 + 8 * v15) = v68;
        v11 = v189;
        if (v69)
        {
          if (*(_DWORD *)v69 == 1)
          {
            v81 = (WTF **)*((_QWORD *)v69 + 1);
            *((_QWORD *)v69 + 1) = 0;
            if (v81)
            {
              WTF::fastAlignedFree(v81[6], v13);
              WTF::fastAlignedFree(v81[4], v82);
              WTF::fastFree((WTF *)v81, v83);
            }
            WTF::fastFree(v69, v13);
          }
          else
          {
            --*(_DWORD *)v69;
          }
        }
        v70 = (unsigned int *)v191;
        v191 = 0;
        if (v70)
        {
          do
          {
            v71 = __ldaxr(v70);
            v72 = v71 - 1;
          }
          while (__stlxr(v72, v70));
          if (!v72)
          {
            atomic_store(1u, v70);
            __B[0] = (uint64_t)v70;
            WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(__B, v13);
          }
        }
        v73 = (unsigned int *)v192;
        v192 = 0;
        if (v73)
        {
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
          {
            atomic_store(1u, v73);
            __B[0] = (uint64_t)v73;
            WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(__B, v13);
          }
        }
        do
        {
          v76 = __ldaxr((unsigned int *)v26);
          v77 = v76 - 1;
        }
        while (__stlxr(v77, (unsigned int *)v26));
        if (!v77)
        {
          atomic_store(1u, (unsigned int *)v26);
          __B[0] = v26;
          WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(__B, v13);
        }
        v15 += 8;
        ++v16;
      }
      while (v16 != 24);
      v92 = 0;
      v93 = 0;
      do
      {
        if (v93 >= 0xB8)
          v94 = (v93 - 184);
        else
          v94 = (v93 + 8);
        v95 = 1;
        v187 = v92;
        do
        {
          v96 = *(unsigned int *)(v9 + 12);
          if (v93 >= v96)
          {
            __break(0xC471u);
            JUMPOUT(0x19610B344);
          }
          if (v96 <= v94)
          {
            __break(0xC471u);
            JUMPOUT(0x19610B34CLL);
          }
          v97 = (float)v95 * 0.125;
          v98 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v93);
          v99 = *(_QWORD *)(*(_QWORD *)v9 + 8 * v94);
          if (v98)
            v100 = v99 == 0;
          else
            v100 = 1;
          if (v100 || (v101 = *(float *)(v98 + 20), v101 != *(float *)(v99 + 20)))
          {
            v102 = 0;
            goto LABEL_164;
          }
          v110 = *(float *)(v98 + 16);
          v111 = *(float *)(v99 + 16);
          v112 = *(uint64_t **)(v98 + 8);
          v113 = *(_QWORD *)(v99 + 8);
          v114 = *(unsigned int *)v112;
          v115 = (int *)WTF::fastMalloc((WTF *)0x40);
          v117 = v115;
          *((_QWORD *)v115 + 4) = 0;
          *((_QWORD *)v115 + 5) = 0;
          if ((_DWORD)v114)
          {
            WTF::fastAlignedFree(0, v116);
            v118 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
            *((_QWORD *)v117 + 4) = v118;
            *((_QWORD *)v117 + 5) = v114;
            bzero(v118, 4 * v114);
            *((_QWORD *)v117 + 6) = 0;
            *((_QWORD *)v117 + 7) = 0;
            WTF::fastAlignedFree(0, v119);
            v120 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
            *((_QWORD *)v117 + 6) = v120;
            *((_QWORD *)v117 + 7) = v114;
            bzero(v120, 4 * v114);
          }
          else
          {
            *((_QWORD *)v115 + 6) = 0;
            *((_QWORD *)v115 + 7) = 0;
          }
          *v117 = v114;
          v135 = log2((double)v114);
          v117[1] = v135;
          if (__ldaxr(WebCore::fftSetupsLock))
          {
            __clrex();
          }
          else if (!__stxr(1u, WebCore::fftSetupsLock))
          {
            goto LABEL_186;
          }
          MEMORY[0x19AEA534C](WebCore::fftSetupsLock);
LABEL_186:
          {
            v137 = dword_1EE2F86E4;
          }
          else
          {
            WebCore::fftSetups(void)::fftSetups = 0;
            *(_QWORD *)&dword_1EE2F86E0 = 0x1800000000;
            v174 = (void *)WTF::fastMalloc((WTF *)0xC0);
            dword_1EE2F86E0 = 24;
            WebCore::fftSetups(void)::fftSetups = (uint64_t)v174;
            v137 = dword_1EE2F86E4;
            if (dword_1EE2F86E4)
              bzero(v174, 8 * dword_1EE2F86E4);
          }
          v138 = (unint64_t)v135;
          if (v137 <= (unint64_t)v135)
          {
            __break(0xC471u);
            JUMPOUT(0x19610B374);
          }
          v139 = WebCore::fftSetups(void)::fftSetups;
          fftsetup = *(FFTSetup *)(WebCore::fftSetups(void)::fftSetups + 8 * v138);
          if (!fftsetup)
          {
            fftsetup = vDSP_create_fftsetup((unint64_t)v135, 0);
            *(_QWORD *)(v139 + 8 * v138) = fftsetup;
          }
          v141 = __ldxr(WebCore::fftSetupsLock);
          if (v141 == 1)
          {
            if (!__stlxr(0, WebCore::fftSetupsLock))
              goto LABEL_196;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)WebCore::fftSetupsLock);
LABEL_196:
          v142 = fminf(fmaxf(v97, 0.0), 1.0);
          *((_QWORD *)v117 + 1) = fftsetup;
          *((_QWORD *)v117 + 2) = *((_QWORD *)v117 + 4);
          *((_QWORD *)v117 + 3) = *((_QWORD *)v117 + 6);
          WebCore::FFTFrame::interpolateFrequencyComponents((uint64_t)v117, v112, v113, v142);
          v144 = *v117;
          v145 = *v117;
          if ((_DWORD)v144)
          {
            if ((v145 & 0x80000000) != 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19610B384);
            }
            WTF::fastAlignedFree(0, v143);
            v146 = (DSPComplex *)WTF::fastAlignedMalloc((WTF *)0x20);
            bzero(v146, 4 * v144);
          }
          else
          {
            v146 = 0;
          }
          vDSP_fft_zrip(*((FFTSetup *)v117 + 1), (const DSPSplitComplex *)v117 + 1, 1, v117[1], -1);
          vDSP_ztoc((const DSPSplitComplex *)v117 + 1, 1, v146, 2, (unint64_t)*v117 >> 1);
          v147 = *v117;
          *(float *)__B = 1.0 / (float)v147;
          vDSP_vsmul((const float *)v146, 1, (const float *)__B, (float *)v146, 1, v147);
          bzero((char *)v146 + 4 * (v145 >> 1), 4 * (v144 - (v145 >> 1)));
          v148 = (unint64_t)*v117 >> 1;
          vDSP_ctoz(v146, 2, (const DSPSplitComplex *)v117 + 1, 1, v148);
          vDSP_fft_zrip(*((FFTSetup *)v117 + 1), (const DSPSplitComplex *)v117 + 1, 1, v117[1], 1);
          if (*((_QWORD *)v117 + 5) < v148)
            goto LABEL_268;
          if (*((_QWORD *)v117 + 7) < v148)
          {
            __break(0xC471u);
            JUMPOUT(0x19610B31CLL);
          }
          v149 = (float *)*((_QWORD *)v117 + 4);
          LODWORD(__B[0]) = 1056964608;
          vDSP_vsmul(v149, 1, (const float *)__B, v149, 1, v148);
          v150 = (float *)*((_QWORD *)v117 + 6);
          LODWORD(__B[0]) = 1056964608;
          vDSP_vsmul(v150, 1, (const float *)__B, v150, 1, v148);
          WTF::fastAlignedFree((WTF *)v146, v151);
          v102 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v102 = 1;
          *(_QWORD *)(v102 + 8) = v117;
          *(float *)(v102 + 16) = (float)(v142 * v111) + (float)((float)(1.0 - v142) * v110);
          *(float *)(v102 + 20) = v101;
          v9 = v188;
          v11 = v189;
          v96 = *(unsigned int *)(v188 + 12);
          v92 = v187;
LABEL_164:
          if (v96 <= v93 + v95)
          {
            __break(0xC471u);
            JUMPOUT(0x19610B354);
          }
          v103 = *(_QWORD *)v9 + v92;
          v104 = *(WTF **)(v103 + 8 * v95);
          *(_QWORD *)(v103 + 8 * v95) = v102;
          if (v104)
          {
            if (*(_DWORD *)v104 == 1)
            {
              v132 = (WTF **)*((_QWORD *)v104 + 1);
              *((_QWORD *)v104 + 1) = 0;
              if (v132)
              {
                WTF::fastAlignedFree(v132[6], v13);
                WTF::fastAlignedFree(v132[4], v133);
                WTF::fastFree((WTF *)v132, v134);
              }
              WTF::fastFree(v104, v13);
            }
            else
            {
              --*(_DWORD *)v104;
            }
          }
          v105 = *(unsigned int *)(v11 + 12);
          if (v93 >= v105)
          {
            __break(0xC471u);
            JUMPOUT(0x19610B35CLL);
          }
          if (v105 <= v94)
          {
            __break(0xC471u);
            JUMPOUT(0x19610B364);
          }
          v106 = 0;
          v107 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v93);
          if (v107)
          {
            v108 = *(_QWORD *)(*(_QWORD *)v11 + 8 * v94);
            if (v108)
            {
              v109 = *(float *)(v107 + 20);
              if (v109 != *(float *)(v108 + 20))
              {
                v106 = 0;
                goto LABEL_225;
              }
              v121 = *(float *)(v107 + 16);
              v122 = *(float *)(v108 + 16);
              v123 = *(uint64_t **)(v107 + 8);
              v124 = *(_QWORD *)(v108 + 8);
              v125 = *(unsigned int *)v123;
              v126 = (int *)WTF::fastMalloc((WTF *)0x40);
              v128 = v126;
              *((_QWORD *)v126 + 4) = 0;
              *((_QWORD *)v126 + 5) = 0;
              if ((_DWORD)v125)
              {
                WTF::fastAlignedFree(0, v127);
                v129 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
                *((_QWORD *)v128 + 4) = v129;
                *((_QWORD *)v128 + 5) = v125;
                bzero(v129, 4 * v125);
                *((_QWORD *)v128 + 6) = 0;
                *((_QWORD *)v128 + 7) = 0;
                WTF::fastAlignedFree(0, v130);
                v131 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
                *((_QWORD *)v128 + 6) = v131;
                *((_QWORD *)v128 + 7) = v125;
                bzero(v131, 4 * v125);
              }
              else
              {
                *((_QWORD *)v126 + 6) = 0;
                *((_QWORD *)v126 + 7) = 0;
              }
              *v128 = v125;
              v152 = log2((double)v125);
              v128[1] = v152;
              if (__ldaxr(WebCore::fftSetupsLock))
              {
                __clrex();
                goto LABEL_207;
              }
              if (__stxr(1u, WebCore::fftSetupsLock))
LABEL_207:
                MEMORY[0x19AEA534C](WebCore::fftSetupsLock);
              {
                v154 = dword_1EE2F86E4;
              }
              else
              {
                WebCore::fftSetups(void)::fftSetups = 0;
                *(_QWORD *)&dword_1EE2F86E0 = 0x1800000000;
                v175 = (void *)WTF::fastMalloc((WTF *)0xC0);
                dword_1EE2F86E0 = 24;
                WebCore::fftSetups(void)::fftSetups = (uint64_t)v175;
                v154 = dword_1EE2F86E4;
                if (dword_1EE2F86E4)
                  bzero(v175, 8 * dword_1EE2F86E4);
              }
              v155 = (unint64_t)v152;
              if (v154 <= (unint64_t)v152)
              {
                __break(0xC471u);
                JUMPOUT(0x19610B37CLL);
              }
              v156 = WebCore::fftSetups(void)::fftSetups;
              v157 = *(FFTSetup *)(WebCore::fftSetups(void)::fftSetups + 8 * v155);
              if (!v157)
              {
                v157 = vDSP_create_fftsetup((unint64_t)v152, 0);
                *(_QWORD *)(v156 + 8 * v155) = v157;
              }
              v158 = __ldxr(WebCore::fftSetupsLock);
              if (v158 == 1)
              {
                if (!__stlxr(0, WebCore::fftSetupsLock))
                  goto LABEL_218;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)WebCore::fftSetupsLock);
LABEL_218:
              v159 = fminf(fmaxf(v97, 0.0), 1.0);
              *((_QWORD *)v128 + 1) = v157;
              *((_QWORD *)v128 + 2) = *((_QWORD *)v128 + 4);
              *((_QWORD *)v128 + 3) = *((_QWORD *)v128 + 6);
              WebCore::FFTFrame::interpolateFrequencyComponents((uint64_t)v128, v123, v124, v159);
              v161 = *v128;
              v162 = *v128;
              if ((_DWORD)v161)
              {
                if ((v162 & 0x80000000) != 0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19610B38CLL);
                }
                WTF::fastAlignedFree(0, v160);
                v163 = (DSPComplex *)WTF::fastAlignedMalloc((WTF *)0x20);
                bzero(v163, 4 * v161);
              }
              else
              {
                v163 = 0;
              }
              vDSP_fft_zrip(*((FFTSetup *)v128 + 1), (const DSPSplitComplex *)v128 + 1, 1, v128[1], -1);
              vDSP_ztoc((const DSPSplitComplex *)v128 + 1, 1, v163, 2, (unint64_t)*v128 >> 1);
              v164 = *v128;
              *(float *)__B = 1.0 / (float)v164;
              vDSP_vsmul((const float *)v163, 1, (const float *)__B, (float *)v163, 1, v164);
              bzero((char *)v163 + 4 * (v162 >> 1), 4 * (v161 - (v162 >> 1)));
              v165 = (unint64_t)*v128 >> 1;
              vDSP_ctoz(v163, 2, (const DSPSplitComplex *)v128 + 1, 1, v165);
              vDSP_fft_zrip(*((FFTSetup *)v128 + 1), (const DSPSplitComplex *)v128 + 1, 1, v128[1], 1);
              if (*((_QWORD *)v128 + 5) < v165)
              {
                __break(0xC471u);
                JUMPOUT(0x19610B2FCLL);
              }
              if (*((_QWORD *)v128 + 7) < v165)
              {
                __break(0xC471u);
                JUMPOUT(0x19610B33CLL);
              }
              v166 = (float *)*((_QWORD *)v128 + 4);
              LODWORD(__B[0]) = 1056964608;
              vDSP_vsmul(v166, 1, (const float *)__B, v166, 1, v165);
              v167 = (float *)*((_QWORD *)v128 + 6);
              LODWORD(__B[0]) = 1056964608;
              vDSP_vsmul(v167, 1, (const float *)__B, v167, 1, v165);
              WTF::fastAlignedFree((WTF *)v163, v168);
              v106 = WTF::fastMalloc((WTF *)0x18);
              *(_DWORD *)v106 = 1;
              *(_QWORD *)(v106 + 8) = v128;
              *(float *)(v106 + 16) = (float)(v159 * v122) + (float)((float)(1.0 - v159) * v121);
              *(float *)(v106 + 20) = v109;
              v9 = v188;
              v11 = v189;
              v105 = *(unsigned int *)(v189 + 12);
              v92 = v187;
            }
          }
LABEL_225:
          if (v105 <= v93 + v95)
          {
            __break(0xC471u);
            JUMPOUT(0x19610B36CLL);
          }
          v169 = *(_QWORD *)v11 + v92;
          v170 = *(WTF **)(v169 + 8 * v95);
          *(_QWORD *)(v169 + 8 * v95) = v106;
          if (v170)
          {
            if (*(_DWORD *)v170 == 1)
            {
              v171 = (WTF **)*((_QWORD *)v170 + 1);
              *((_QWORD *)v170 + 1) = 0;
              if (v171)
              {
                WTF::fastAlignedFree(v171[6], v13);
                WTF::fastAlignedFree(v171[4], v172);
                WTF::fastFree((WTF *)v171, v173);
              }
              WTF::fastFree(v170, v13);
            }
            else
            {
              --*(_DWORD *)v170;
            }
          }
          ++v95;
        }
        while (v95 != 8);
        v92 += 64;
        v176 = v93 >= 0xB8;
        v93 += 8;
      }
      while (!v176);
      v8 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v8 = v9;
      *(_QWORD *)(v8 + 8) = v11;
      *(double *)(v8 + 16) = (double)v185;
      *(float *)(v8 + 24) = v183;
LABEL_136:
      v7 = v190;
      v2 = v179;
LABEL_137:
      if (v7)
      {
        if (*(_DWORD *)v7 != 2)
        {
          *(_DWORD *)v7 -= 2;
          goto LABEL_140;
        }
        WTF::StringImpl::destroy(v7, v6);
        if (!v8)
        {
LABEL_248:
          result = *(_QWORD *)(v178 + 8);
          *(_QWORD *)(v178 + 8) = v2;
          if (result)
            return std::default_delete<WebCore::HRTFDatabase>::operator()[abi:sn180100]((WTF **)result, v6);
          return result;
        }
      }
      else
      {
LABEL_140:
        if (!v8)
          goto LABEL_248;
      }
      v88 = v181;
      if (v181 >= *(unsigned int *)(v2 + 12))
      {
LABEL_268:
        __break(0xC471u);
        JUMPOUT(0x19610B2DCLL);
      }
      v89 = *(WTF ***)(*(_QWORD *)v2 + 8 * v181);
      *(_QWORD *)(*(_QWORD *)v2 + 8 * v181) = v8;
      if (v89)
      {
        v90 = v89[1];
        v89[1] = 0;
        if (v90)
          std::default_delete<WTF::Vector<WTF::RefPtr<WebCore::HRTFKernel,WTF::RawPtrTraits<WebCore::HRTFKernel>,WTF::DefaultRefDerefTraits<WebCore::HRTFKernel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v90, v6);
        v91 = *v89;
        *v89 = 0;
        if (v91)
          std::default_delete<WTF::Vector<WTF::RefPtr<WebCore::HRTFKernel,WTF::RawPtrTraits<WebCore::HRTFKernel>,WTF::DefaultRefDerefTraits<WebCore::HRTFKernel>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator()[abi:sn180100](v91, v6);
        WTF::fastFree((WTF *)v89, v6);
        v88 = v181;
      }
      v185 += 15;
      v181 = v88 + 1;
      if (v88 == 9)
        goto LABEL_248;
    }
  }
  return result;
}

float WebCore::IIRFilter::process(WebCore::IIRFilter *this, const float *a2, float *a3, uint64_t a4, float result)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  int v19;
  int v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  unint64_t v31;
  double *v32;
  int v33;
  double v34;
  unint64_t v35;
  double *v36;
  int v37;
  double v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  unint64_t v45;
  double *v46;
  int v47;
  double v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  double *v52;
  double v53;
  double v54;
  unint64_t v55;
  double *v56;
  int v57;
  double v58;
  double v59;
  double v60;
  double v61;

  v6 = *((_QWORD *)this + 5);
  v5 = (uint64_t *)*((_QWORD *)this + 6);
  v7 = *((int *)v5 + 3);
  v8 = *(int *)(v6 + 12);
  if ((int)v8 >= (int)v7)
    v9 = *((_DWORD *)v5 + 3);
  else
    v9 = *(_DWORD *)(v6 + 12);
  if (a4)
  {
    v10 = *v5;
    v11 = *(double **)v6;
    v12 = *(_QWORD *)this;
    v13 = *((_QWORD *)this + 2);
    v14 = *((unsigned int *)this + 3);
    v15 = *((_QWORD *)this + 4);
    if ((int)v9 < 2)
    {
      if ((int)v7 <= (int)v8)
      {
        if ((int)v8 <= (int)v7)
        {
          while (v15 < v14)
          {
            v59 = *v11;
            v60 = *a2;
            *(double *)(v12 + 8 * v15) = v60;
            if (v15 >= *((unsigned int *)this + 7))
              break;
            v61 = v59 * v60;
            *(double *)(v13 + 8 * v15) = v61;
            v15 = ((_BYTE)v15 + 1) & 0x1F;
            *((_QWORD *)this + 4) = v15;
            result = v61;
            *a3++ = result;
            ++a2;
            if (!--a4)
              return result;
          }
        }
        else
        {
          v49 = 0;
          v50 = v8 - v7;
          v51 = -v7;
          v52 = &v11[v7];
          while (1)
          {
            v53 = a2[v49];
            v54 = *v11 * v53;
            v55 = v51 + v15;
            v56 = v52;
            v57 = v50;
            do
            {
              v58 = *v56++;
              v54 = v54 + v58 * *(double *)(v12 + 8 * (v55-- & 0x1F));
              --v57;
            }
            while (v57);
            if (v15 >= v14)
              break;
            *(double *)(v12 + 8 * v15) = v53;
            if (v15 >= *((unsigned int *)this + 7))
              break;
            *(double *)(v13 + 8 * v15) = v54;
            v15 = ((_BYTE)v15 + 1) & 0x1F;
            *((_QWORD *)this + 4) = v15;
            result = v54;
            a3[v49++] = result;
            if (v49 == a4)
              return result;
          }
        }
      }
      else
      {
        v39 = 0;
        v40 = v7 - v8;
        v41 = -v8;
        v42 = (double *)(v10 + 8 * v8);
        while (1)
        {
          v43 = a2[v39];
          v44 = *v11 * v43;
          v45 = v41 + v15;
          v46 = v42;
          v47 = v40;
          do
          {
            v48 = *v46++;
            v44 = v44 - v48 * *(double *)(v13 + 8 * (v45-- & 0x1F));
            --v47;
          }
          while (v47);
          if (v15 >= v14)
            break;
          *(double *)(v12 + 8 * v15) = v43;
          if (v15 >= *((unsigned int *)this + 7))
            break;
          *(double *)(v13 + 8 * v15) = v44;
          v15 = ((_BYTE)v15 + 1) & 0x1F;
          *((_QWORD *)this + 4) = v15;
          result = v44;
          a3[v39++] = result;
          if (v39 == a4)
            return result;
        }
      }
    }
    else
    {
      v16 = 0;
      v17 = -(uint64_t)v9;
      v18 = (double *)(v10 + 8);
      v19 = v8 - v9;
      v20 = v7 - v9;
      v21 = &v11[v9];
      v22 = (double *)(v10 + 8 * v9);
      while (1)
      {
        v23 = a2[v16];
        v24 = *v11 * v23;
        v25 = -1;
        v26 = v11 + 1;
        v27 = v18;
        do
        {
          v28 = *v26++;
          v29 = v28;
          v30 = *v27++;
          v24 = v24
              + v29 * *(double *)(v12 + 8 * (((_BYTE)v15 + (_BYTE)v25) & 0x1F))
              - v30 * *(double *)(v13 + 8 * (((_BYTE)v15 + (_BYTE)v25) & 0x1F));
          --v25;
        }
        while (v17 != v25);
        if ((int)v8 > (int)v7)
        {
          v31 = v17 + v15;
          v32 = v21;
          v33 = v19;
          do
          {
            v34 = *v32++;
            v24 = v24 + v34 * *(double *)(v12 + 8 * (v31-- & 0x1F));
            --v33;
          }
          while (v33);
        }
        if ((int)v7 > (int)v8)
        {
          v35 = v17 + v15;
          v36 = v22;
          v37 = v20;
          do
          {
            v38 = *v36++;
            v24 = v24 - v38 * *(double *)(v13 + 8 * (v35-- & 0x1F));
            --v37;
          }
          while (v37);
        }
        if (v15 >= v14)
          break;
        *(double *)(v12 + 8 * v15) = v23;
        if (v15 >= *((unsigned int *)this + 7))
          break;
        *(double *)(v13 + 8 * v15) = v24;
        v15 = ((_BYTE)v15 + 1) & 0x1F;
        *((_QWORD *)this + 4) = v15;
        result = v24;
        a3[v16++] = result;
        if (v16 == a4)
          return result;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x19610B684);
  }
  return result;
}

void WebCore::IIRFilter::getFrequencyResponse(WebCore::IIRFilter *this, unsigned int a2, const float *a3, float *a4, float *a5)
{
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v13;
  __double2 v14;
  uint64_t *v15;
  double v16;
  double v17;
  double v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t *v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  long double v30;
  long double v31;
  float v32;
  long double v33[2];
  double v34[2];

  if (a2)
  {
    v9 = 0;
    v10 = a2;
    do
    {
      v11 = a3[v9];
      if (v11 >= 0.0 && v11 <= 1.0)
      {
        v14 = __sincos_stret(v11 * -3.14159265);
        v15 = (uint64_t *)*((_QWORD *)this + 5);
        v16 = 0.0;
        v17 = 0.0;
        v18 = 0.0;
        v19 = *((_DWORD *)v15 + 3) - 1;
        if (v19 >= 0)
        {
          v20 = *v15;
          v17 = 0.0;
          v21 = 8 * v19;
          v18 = 0.0;
          do
          {
            v22 = v14.__cosval * v17 + v14.__sinval * v18;
            v18 = v14.__cosval * v18 - v14.__sinval * v17 + *(double *)(v20 + v21);
            v17 = v22 + 0.0;
            v21 -= 8;
          }
          while (v21 != -8);
        }
        v34[0] = v18;
        v34[1] = v17;
        v23 = (uint64_t *)*((_QWORD *)this + 6);
        v24 = 0.0;
        v25 = *((_DWORD *)v23 + 3) - 1;
        if (v25 >= 0)
        {
          v26 = *v23;
          v16 = 0.0;
          v27 = 8 * v25;
          v24 = 0.0;
          do
          {
            v28 = v14.__cosval * v16 + v14.__sinval * v24;
            v24 = v14.__cosval * v24 - v14.__sinval * v16 + *(double *)(v26 + v27);
            v16 = v28 + 0.0;
            v27 -= 8;
          }
          while (v27 != -8);
        }
        v33[0] = v24;
        v33[1] = v16;
        v29 = std::operator/[abi:sn180100]<double>(v34, v33);
        v31 = v30;
        v32 = hypot(v29, v30);
        a4[v9] = v32;
        v13 = atan2(v31, v29);
      }
      else
      {
        a4[v9] = nanf("");
        v13 = nanf("");
      }
      a5[v9++] = v13;
    }
    while (v9 != v10);
  }
}

double WebCore::IIRFilter::tailTime(WebCore::IIRFilter *this, double a2, void *a3)
{
  uint64_t v3;
  double v4;
  uint64_t v8;
  void *v9;
  float *v10;
  void *v11;
  float *v12;
  _DWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;
  int v20;
  void *v22;
  void *v23;
  uint64_t __C;

  v4 = 10.0;
  if (a2 != 0.0 && (_DWORD)a3 != 0)
  {
    LODWORD(v3) = vcvtpd_s64_f64(a2 * 10.0 * 0.0078125);
    if (!(_DWORD)v3)
      goto LABEL_17;
    WTF::fastAlignedFree(0, a3);
    v8 = WTF::fastAlignedMalloc((WTF *)0x20);
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 128) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 176) = 0u;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
    *(_OWORD *)(v8 + 224) = 0u;
    *(_OWORD *)(v8 + 240) = 0u;
    *(_OWORD *)(v8 + 256) = 0u;
    *(_OWORD *)(v8 + 272) = 0u;
    *(_OWORD *)(v8 + 288) = 0u;
    *(_OWORD *)(v8 + 304) = 0u;
    *(_OWORD *)(v8 + 320) = 0u;
    *(_OWORD *)(v8 + 336) = 0u;
    *(_OWORD *)(v8 + 352) = 0u;
    *(_OWORD *)(v8 + 368) = 0u;
    *(_OWORD *)(v8 + 384) = 0u;
    *(_OWORD *)(v8 + 400) = 0u;
    *(_OWORD *)(v8 + 416) = 0u;
    *(_OWORD *)(v8 + 432) = 0u;
    *(_OWORD *)(v8 + 448) = 0u;
    *(_OWORD *)(v8 + 464) = 0u;
    *(_OWORD *)(v8 + 480) = 0u;
    *(_OWORD *)(v8 + 496) = 0u;
    WTF::fastAlignedFree(0, v9);
    v10 = (float *)WTF::fastAlignedMalloc((WTF *)0x20);
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 6) = 0u;
    *((_OWORD *)v10 + 7) = 0u;
    *((_OWORD *)v10 + 8) = 0u;
    *((_OWORD *)v10 + 9) = 0u;
    *((_OWORD *)v10 + 10) = 0u;
    *((_OWORD *)v10 + 11) = 0u;
    *((_OWORD *)v10 + 12) = 0u;
    *((_OWORD *)v10 + 13) = 0u;
    *((_OWORD *)v10 + 14) = 0u;
    *((_OWORD *)v10 + 15) = 0u;
    *((_OWORD *)v10 + 16) = 0u;
    *((_OWORD *)v10 + 17) = 0u;
    *((_OWORD *)v10 + 18) = 0u;
    *((_OWORD *)v10 + 19) = 0u;
    *((_OWORD *)v10 + 20) = 0u;
    *((_OWORD *)v10 + 21) = 0u;
    *((_OWORD *)v10 + 22) = 0u;
    *((_OWORD *)v10 + 23) = 0u;
    *((_OWORD *)v10 + 24) = 0u;
    *((_OWORD *)v10 + 25) = 0u;
    *((_OWORD *)v10 + 26) = 0u;
    *((_OWORD *)v10 + 27) = 0u;
    *((_OWORD *)v10 + 28) = 0u;
    *((_OWORD *)v10 + 29) = 0u;
    *((_OWORD *)v10 + 30) = 0u;
    *((_OWORD *)v10 + 31) = 0u;
    if ((v3 & 0x80000000) != 0)
    {
LABEL_17:
      __break(0xC471u);
      JUMPOUT(0x19610BCA0);
    }
    v12 = v10;
    WTF::fastAlignedFree(0, v11);
    v13 = (_DWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
    bzero(v13, 4 * v3);
    *(_DWORD *)v8 = 1065353216;
    WebCore::IIRFilter::process(this, (const float *)v8, v12, 128, v14);
    LODWORD(__C) = 0;
    vDSP_maxmgv(v12, 1, (float *)&__C, 0x80uLL);
    v15 = *(float *)&__C;
    *v13 = __C;
    *(_DWORD *)v8 = 0;
    if (v3 >= 2)
    {
      v16 = v3 - 1;
      v17 = v13 + 1;
      do
      {
        WebCore::IIRFilter::process(this, (const float *)v8, v12, 128, v15);
        LODWORD(__C) = 0;
        vDSP_maxmgv(v12, 1, (float *)&__C, 0x80uLL);
        v15 = *(float *)&__C;
        *v17++ = __C;
        --v16;
      }
      while (v16);
    }
    __C = 0;
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((unsigned int *)this, &__C, *((unsigned int *)this + 3));
    __C = 0;
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill((unsigned int *)this + 4, &__C, *((unsigned int *)this + 7));
    *((_QWORD *)this + 4) = 0;
    v19 = (v3 - 1);
    v20 = v3;
    while (*(float *)&v13[v19] <= 0.000030518)
    {
      --v20;
      if (v19-- <= 0)
      {
        v20 = v3;
        break;
      }
    }
    v4 = (double)(unint64_t)((uint64_t)v20 << 7) / a2;
    WTF::fastAlignedFree((WTF *)v13, v18);
    WTF::fastAlignedFree((WTF *)v12, v22);
    WTF::fastAlignedFree((WTF *)v8, v23);
  }
  return v4;
}

uint64_t WebCore::MultiChannelResampler::MultiChannelResampler(uint64_t a1, void *a2, void *a3, uint64_t *a4, double a5)
{
  uint64_t v9;
  WebCore::AudioBus *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  WTF *v23;
  _QWORD *v25;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = (_DWORD)a2;
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  if (a2 <= 0x20)
  {
    v10 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)(a1 + 40) = WebCore::AudioBus::AudioBus(v10, a2, a3, 1);
    if (!(_DWORD)a2)
    {
      v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
    if (a2 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19610BD0CLL);
    }
  }
  v12 = WTF::fastMalloc((WTF *)(8 * a2));
  v13 = 0;
  do
  {
    v14 = WTF::fastMalloc((WTF *)0xA8);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v15 = off_1E3407C10;
    v15[1] = WebCore::MultiChannelResampler::provideInputForChannel;
    v15[2] = 0;
    v15[3] = a1;
    v15[4] = v13;
    v25 = v15;
    WebCore::SincResampler::SincResampler(v14, a3, (uint64_t *)&v25, a5);
    if (v25)
      (*(void (**)(_QWORD *))(*v25 + 8))(v25);
    *(_QWORD *)(v12 + 8 * v13++) = v14;
  }
  while (a2 != v13);
LABEL_9:
  v16 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v16)
  {
    v17 = *(uint64_t **)a1;
    v18 = 8 * v16;
    do
    {
      v19 = *v17;
      *v17 = 0;
      if (v19)
      {
        WTF::fastAlignedFree(*(WTF **)(v19 + 64), v11);
        v21 = *(_QWORD *)(v19 + 40);
        *(_QWORD *)(v19 + 40) = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        WTF::fastAlignedFree(*(WTF **)(v19 + 8), v20);
        WTF::fastFree((WTF *)v19, v22);
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  v23 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v23, v11);
  }
  *(_QWORD *)a1 = v12;
  *(_DWORD *)(a1 + 8) = (_DWORD)a2;
  *(_DWORD *)(a1 + 12) = (_DWORD)a2;
  return a1;
}

void WebCore::MultiChannelResampler::~MultiChannelResampler(WebCore::MultiChannelResampler *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  WTF *v14;
  unsigned int *v15;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v15 = v3;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v15, a2);
    }
  }
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((unsigned int *)this + 3);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)this;
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
      {
        WTF::fastAlignedFree(*(WTF **)(v10 + 64), a2);
        v12 = *(_QWORD *)(v10 + 40);
        *(_QWORD *)(v10 + 40) = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        WTF::fastAlignedFree(*(WTF **)(v10 + 8), v11);
        WTF::fastFree((WTF *)v10, v13);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v14 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v14, a2);
  }
}

void WebCore::MultiChannelResampler::process(uint64_t **this, WebCore::AudioBus *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*((_DWORD *)a2 + 7) == 1)
  {
    if (!*((_DWORD *)this + 3))
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x19610C088);
    }
    v6 = **this;
    v7 = **((_QWORD **)a2 + 2);
    *(_BYTE *)(v7 + 24) = 0;
    v8 = *(_QWORD *)v7;
    if (!*(_QWORD *)v7)
      v8 = **(_QWORD **)(v7 + 8);
    WebCore::SincResampler::process(v6, v8, *(_QWORD *)(v7 + 16), a3);
  }
  else
  {
    this[3] = 0;
    if (a3)
    {
      v9 = 0;
      while (1)
      {
        if (!*((_DWORD *)this + 3))
          goto LABEL_26;
        v10 = *(_QWORD *)(**this + 56) >= a3 - (unint64_t)v9 ? a3 - (_QWORD)v9 : *(_QWORD *)(**this + 56);
        if (*((_DWORD *)this + 4))
          break;
LABEL_21:
        v9 = (uint64_t *)((char *)v9 + v10);
        this[3] = v9;
        if ((unint64_t)v9 >= a3)
          return;
      }
      v11 = 0;
      while (1)
      {
        if (v11 >= *((unsigned int *)a2 + 7))
          goto LABEL_27;
        if (v11 >= *((unsigned int *)this + 3))
          break;
        v12 = *(uint64_t **)(*((_QWORD *)a2 + 2) + 8 * v11);
        v13 = (*this)[v11];
        *((_BYTE *)v12 + 24) = 0;
        v14 = *v12;
        if (!*v12)
          v14 = *(_QWORD *)v12[1];
        v15 = v12[2];
        v16 = (unint64_t)this[3];
        if (v15 < v16)
          goto LABEL_25;
        WebCore::SincResampler::process(v13, v14 + 4 * v16, v15 - v16, v10);
        if (++v11 >= *((unsigned int *)this + 4))
        {
          v9 = this[3];
          goto LABEL_21;
        }
      }
      __break(0xC471u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x19610C098);
    }
  }
}

_QWORD *WebCore::MultiChannelResampler::provideInputForChannel(_QWORD *result, void *__dst, unint64_t a3, unint64_t a4, unsigned int a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;

  v9 = result;
  if (!a5)
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD, unint64_t))(*(_QWORD *)result[4] + 16))(result[4], result[5], a4);
  if (a3 < a4)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v9[5];
  if (*(_DWORD *)(v10 + 28) > a5)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * a5);
    v12 = *(const void **)v11;
    if (!*(_QWORD *)v11)
      v12 = **(const void ***)(v11 + 8);
    if (*(_QWORD *)(v11 + 16) >= a4)
      return memcpy(__dst, v12, 4 * a4);
    goto LABEL_9;
  }
LABEL_10:
  __break(0xC471u);
  return result;
}

void WebCore::PlatformMediaSession::~PlatformMediaSession(WebCore::PlatformMediaSession *this, void *a2)
{
  uint64_t v3;
  WebCore::MediaSessionManageriOS *v4;
  WebCore::MediaSessionHelper *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _BYTE v13[24];

  *(_QWORD *)this = off_1E3407888;
  *((_QWORD *)this + 3) = &unk_1E3407950;
  if (*((_BYTE *)this + 72))
  {
    *((_BYTE *)this + 72) = 0;
    {
      v3 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      {
LABEL_10:
        (*(void (**)(uint64_t, WebCore::PlatformMediaSession *))(*(_QWORD *)v3 + 280))(v3, this);
        goto LABEL_11;
      }
    }
    else
    {
      WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
    }
    v4 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
    v5 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v4);
    {
      v6 = sharedHelperInstance(void)::helper;
      if (sharedHelperInstance(void)::helper)
      {
LABEL_7:
        WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v6 + 16, (_QWORD *)v4 + 50, (uint64_t)v13);
        v7 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v4;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          v4 = (WebCore::MediaSessionManageriOS *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        }
        (*(void (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)v4 + 136))(v4);
        v3 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        goto LABEL_10;
      }
    }
    else
    {
      sharedHelperInstance(void)::helper = 0;
    }
    WebCore::MediaSessionHelper::resetSharedHelper(v5);
    v6 = sharedHelperInstance(void)::helper;
    goto LABEL_7;
  }
LABEL_11:
  v8 = (WTF *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  uint64_t v2;
  void *v3;

  WebCore::PlatformMediaSession::~PlatformMediaSession(this, a2);
  if (*(_DWORD *)(v2 + 8))
  {
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

void sub_19610C468(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformMediaSession::setActive(uint64_t this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  WebCore::MediaSessionManageriOS *v4;
  WebCore::MediaSessionHelper *v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::MediaSessionManageriOS *v8;
  WebCore::MediaSessionHelper *v9;
  uint64_t v10;
  _BYTE v11[24];

  if (*(unsigned __int8 *)(this + 72) != a2)
  {
    *(_BYTE *)(this + 72) = a2;
    if (a2)
    {
      {
        v2 = (_QWORD *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
        {
          v3 = 34;
          return (*(uint64_t (**)(void))(*v2 + 8 * v3))();
        }
      }
      else
      {
        WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
      }
      v4 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
      v5 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v4);
      {
        v6 = sharedHelperInstance(void)::helper;
        if (sharedHelperInstance(void)::helper)
          goto LABEL_13;
      }
      else
      {
        sharedHelperInstance(void)::helper = 0;
      }
      WebCore::MediaSessionHelper::resetSharedHelper(v5);
      v6 = sharedHelperInstance(void)::helper;
LABEL_13:
      WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v6 + 16, (_QWORD *)v4 + 50, (uint64_t)v11);
      v7 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v4;
      v3 = 34;
      if (!v7)
        goto LABEL_21;
      goto LABEL_20;
    }
    {
      v2 = (_QWORD *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      {
        v3 = 35;
        return (*(uint64_t (**)(void))(*v2 + 8 * v3))();
      }
    }
    else
    {
      WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
    }
    v8 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
    v9 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v8);
    {
      v10 = sharedHelperInstance(void)::helper;
      if (sharedHelperInstance(void)::helper)
        goto LABEL_19;
    }
    else
    {
      sharedHelperInstance(void)::helper = 0;
    }
    WebCore::MediaSessionHelper::resetSharedHelper(v9);
    v10 = sharedHelperInstance(void)::helper;
LABEL_19:
    WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v10 + 16, (_QWORD *)v8 + 50, (uint64_t)v11);
    v7 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v8;
    v3 = 35;
    if (!v7)
    {
LABEL_21:
      (*(void (**)(uint64_t))(*(_QWORD *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager
                                      + 136))(WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager);
      v2 = (_QWORD *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      return (*(uint64_t (**)(void))(*v2 + 8 * v3))();
    }
LABEL_20:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    goto LABEL_21;
  }
  return this;
}

void sub_19610C63C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'WebCore::PlatformMediaSession::~PlatformMediaSession(WebCore::PlatformMediaSession *this, void *a2)
{
  WebCore::PlatformMediaSession::~PlatformMediaSession((WebCore::PlatformMediaSession *)((char *)this - 24), a2);
}

{
  WTF *v3;
  void *v4;

  WebCore::PlatformMediaSession::~PlatformMediaSession((WebCore::PlatformMediaSession *)((char *)this - 24), a2);
  if (*((_DWORD *)this - 4))
  {
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
  }
  else
  {
    WTF::fastFree(v3, v4);
  }
}

uint64_t WebCore::PlatformMediaSession::setState(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WebCore::MediaSessionManageriOS *v44;
  WebCore::MediaSessionHelper *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD v50[4];
  WTF::Logger *v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  __int128 buf;
  int v56;
  WTF::StringImpl *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(result + 48) != a2)
  {
    v2 = a2;
    v3 = result;
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 248))(*(_QWORD *)(result + 32));
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
    v7 = v6;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 32) + 256))(*(_QWORD *)(v3 + 32));
    v50[0] = v5;
    v50[1] = v7;
    v50[2] = "setState";
    v50[3] = v8;
    if (!*(_BYTE *)(v4 + 12))
      goto LABEL_75;
    result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v50);
    if ((_MergedGlobals_44[0] & 1) == 0)
    {
      _MergedGlobals_45 += 2;
      dword_1ECE7CEB0 += 2;
      qword_1EE337E60 = (uint64_t)&_MergedGlobals_45;
      unk_1EE337E68 = &dword_1ECE7CEB0;
      dword_1ECE7CED0 += 2;
      dword_1ECE7CEF0 += 2;
      qword_1EE337E70 = (uint64_t)&dword_1ECE7CED0;
      unk_1EE337E78 = &dword_1ECE7CEF0;
      dword_1ECE7CF10 += 2;
      qword_1EE337E80 = (uint64_t)&dword_1ECE7CF10;
      _MergedGlobals_44[0] = 1;
    }
    v10 = *(_QWORD *)&_MergedGlobals_44[8 * v2 + 8];
    if (v10)
      *(_DWORD *)v10 += 2;
    if (v53)
    {
      v11 = *((_DWORD *)v53 + 1);
      if (v10)
      {
LABEL_9:
        v12 = *(_DWORD *)(v10 + 4);
LABEL_10:
        if (((v12 | v11) & 0x80000000) == 0)
        {
          v13 = (v11 + v12);
          if (!__OFADD__(v11, v12))
          {
            if (v53)
            {
              v14 = *((_DWORD *)v53 + 4);
              v15 = (v14 >> 2) & 1;
              if (!v10 || (v14 & 4) == 0)
              {
LABEL_16:
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v13, v15, (uint64_t)v53, v10, &v54);
                if (v54)
                {
                  if (v10)
                  {
                    if (*(_DWORD *)v10 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v10, v9);
                    else
                      *(_DWORD *)v10 -= 2;
                  }
                  goto LABEL_20;
                }
LABEL_104:
                __break(0xC471u);
                return result;
              }
LABEL_15:
              v15 = (*(unsigned __int8 *)(v10 + 16) >> 2) & 1;
              goto LABEL_16;
            }
            if (v10)
              goto LABEL_15;
            if (!(_DWORD)v13)
            {
              v48 = MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
              goto LABEL_99;
            }
            if ((v13 & 0x80000000) == 0)
            {
              result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
              v48 = buf;
              if ((_QWORD)buf)
              {
                *(_DWORD *)buf = 2;
                *(_DWORD *)(v48 + 4) = v13;
                *(_QWORD *)(v48 + 8) = v48 + 20;
                *(_DWORD *)(v48 + 16) = 4;
LABEL_99:
                v54 = (WTF::StringImpl *)v48;
LABEL_20:
                v16 = v53;
                v53 = 0;
                if (v16)
                {
                  if (*(_DWORD *)v16 == 2)
                    WTF::StringImpl::destroy(v16, v9);
                  else
                    *(_DWORD *)v16 -= 2;
                }
                v17 = qword_1ECE7C4A0;
                v18 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v18)
                {
                  WTF::String::utf8();
                  v20 = v51 ? (char *)v51 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v20;
                  _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v18 = (uint64_t)v51;
                  v51 = 0;
                  if (v18)
                  {
                    if (*(_DWORD *)v18 == 1)
                      v18 = WTF::fastFree((WTF *)v18, v19);
                    else
                      --*(_DWORD *)v18;
                  }
                }
                if (WebCore::LogMedia)
                {
                  v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v22 = *v21;
                    if ((v22 & 1) != 0)
                      break;
                    v23 = __ldaxr(v21);
                    if (v23 == v22)
                    {
                      if (!__stxr(v22 | 1, v21))
                      {
                        v49 = v2;
                        v24 = WTF::Logger::observers((WTF::Logger *)v18);
                        v25 = *(unsigned int *)(v24 + 12);
                        if ((_DWORD)v25)
                        {
                          v26 = *(uint64_t **)v24;
                          v27 = *(_QWORD *)v24 + 8 * v25;
                          v28 = &_MergedGlobals_44[8 * v2];
                          do
                          {
                            v29 = *v26;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v50);
                            v56 = 0;
                            if ((_MergedGlobals_44[0] & 1) == 0)
                            {
                              _MergedGlobals_45 += 2;
                              dword_1ECE7CEB0 += 2;
                              qword_1EE337E60 = (uint64_t)&_MergedGlobals_45;
                              unk_1EE337E68 = &dword_1ECE7CEB0;
                              dword_1ECE7CED0 += 2;
                              dword_1ECE7CEF0 += 2;
                              qword_1EE337E70 = (uint64_t)&dword_1ECE7CED0;
                              unk_1EE337E78 = &dword_1ECE7CEF0;
                              dword_1ECE7CF10 += 2;
                              qword_1EE337E80 = (uint64_t)&dword_1ECE7CF10;
                              _MergedGlobals_44[0] = 1;
                            }
                            v30 = (WTF::StringImpl *)*((_QWORD *)v28 + 1);
                            if (v30)
                              *(_DWORD *)v30 += 2;
                            v57 = v30;
                            v51 = 0;
                            v52 = 0;
                            v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                            LODWORD(v52) = 2;
                            v51 = v31;
                            v32 = HIDWORD(v52);
                            *((_DWORD *)v31 + 4 * HIDWORD(v52)) = buf;
                            v33 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                            *((_DWORD *)v31 + 4 * (v32 + 1)) = v56;
                            v34 = v57;
                            if (v57)
                              *(_DWORD *)v57 += 2;
                            *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                            HIDWORD(v52) = v32 + 2;
                            (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v29 + 16))(v29, &WebCore::LogMedia, 0, &v51);
                            v35 = v51;
                            if (HIDWORD(v52))
                            {
                              v36 = 16 * HIDWORD(v52);
                              v37 = (WTF::StringImpl **)((char *)v51 + 8);
                              do
                              {
                                v38 = *v37;
                                *v37 = 0;
                                if (v38)
                                {
                                  if (*(_DWORD *)v38 == 2)
                                    WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                                  else
                                    *(_DWORD *)v38 -= 2;
                                }
                                v37 += 2;
                                v36 -= 16;
                              }
                              while (v36);
                              v35 = v51;
                            }
                            if (v35)
                            {
                              v51 = 0;
                              LODWORD(v52) = 0;
                              WTF::fastFree(v35, v19);
                            }
                            v39 = v57;
                            v57 = 0;
                            if (v39)
                            {
                              if (*(_DWORD *)v39 == 2)
                                WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                              else
                                *(_DWORD *)v39 -= 2;
                            }
                            v40 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v40)
                            {
                              if (*(_DWORD *)v40 == 2)
                                WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                              else
                                *(_DWORD *)v40 -= 2;
                            }
                            ++v26;
                          }
                          while (v26 != (uint64_t *)v27);
                        }
                        v41 = __ldxr(v21);
                        if (v41 == 1)
                        {
                          v2 = v49;
                          if (!__stlxr(0, v21))
                            break;
                        }
                        else
                        {
                          __clrex();
                          v2 = v49;
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v42 = v54;
                v54 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v42 -= 2;
                }
LABEL_75:
                *(_BYTE *)(v3 + 48) = v2;
                if (v2 == 2
                  && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 32) + 72))(*(_QWORD *)(v3 + 32)))
                {
                  *(_BYTE *)(v3 + 75) = 1;
                }
                {
                  v43 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
                  if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
                    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 160))(v43, v3);
                }
                else
                {
                  WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
                }
                v44 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
                v45 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v44);
                {
                  v46 = sharedHelperInstance(void)::helper;
                  if (sharedHelperInstance(void)::helper)
                  {
LABEL_83:
                    WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v46 + 16, (_QWORD *)v44 + 50, (uint64_t)&buf);
                    v47 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
                    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v44;
                    if (v47)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
                      v44 = (WebCore::MediaSessionManageriOS *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
                    }
                    (*(void (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)v44 + 136))(v44);
                    v43 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
                    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v43 + 160))(v43, v3);
                  }
                }
                else
                {
                  sharedHelperInstance(void)::helper = 0;
                }
                WebCore::MediaSessionHelper::resetSharedHelper(v45);
                v46 = sharedHelperInstance(void)::helper;
                goto LABEL_83;
              }
            }
          }
        }
        v54 = 0;
        goto LABEL_104;
      }
    }
    else
    {
      v11 = 0;
      if (v10)
        goto LABEL_9;
    }
    v12 = 0;
    goto LABEL_10;
  }
  return result;
}

void sub_19610CDC8(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformMediaSession::logger(WebCore::PlatformMediaSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
}

char *WebCore::PlatformMediaSession::logChannel(WebCore::PlatformMediaSession *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::PlatformMediaSession::logIdentifier(WebCore::PlatformMediaSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
}

WTF::StringImpl *WebCore::PlatformMediaSession::beginInterruption(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *result;
  WTF::String *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::String *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::Logger *v43;
  uint64_t v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  int v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  _QWORD v74[4];
  WTF::Logger *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  __int128 buf;
  const char *v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94;
  int v95;
  WTF::StringImpl *v96;
  int v97;
  WTF::StringImpl *v98;
  int v99;
  WTF::StringImpl *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v7 = v6;
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
  v74[0] = v5;
  v74[1] = v7;
  v74[2] = "beginInterruption";
  v74[3] = result;
  v9 = (WTF::String *)*(unsigned int *)(a1 + 68);
  if (*(_BYTE *)(v4 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v74);
    WTF::String::String((WTF::String *)&v80, "state = ");
    v10 = *(unsigned __int8 *)(a1 + 48);
    if ((_MergedGlobals_44[0] & 1) == 0)
    {
      _MergedGlobals_45 += 2;
      dword_1ECE7CEB0 += 2;
      qword_1EE337E60 = (uint64_t)&_MergedGlobals_45;
      unk_1EE337E68 = &dword_1ECE7CEB0;
      dword_1ECE7CED0 += 2;
      dword_1ECE7CEF0 += 2;
      qword_1EE337E70 = (uint64_t)&dword_1ECE7CED0;
      unk_1EE337E78 = &dword_1ECE7CEF0;
      dword_1ECE7CF10 += 2;
      qword_1EE337E80 = (uint64_t)&dword_1ECE7CF10;
      _MergedGlobals_44[0] = 1;
    }
    v11 = *(WTF::StringImpl **)&_MergedGlobals_44[8 * v10 + 8];
    if (v11)
      *(_DWORD *)v11 += 2;
    WTF::String::String((WTF::String *)&v79, ", interruption count = ");
    WTF::String::number(v9);
    WTF::String::String((WTF::String *)&v77, ", type = ");
    if ((byte_1EE337E59 & 1) == 0)
    {
      dword_1ECE7CF30 += 2;
      qword_1EE337EB0 = (uint64_t)&dword_1ECE7CF30;
      dword_1ECE7CF50 += 2;
      unk_1EE337EB8 = &dword_1ECE7CF50;
      dword_1ECE7CF70 += 2;
      unk_1EE337EC0 = &dword_1ECE7CF70;
      dword_1ECE7CF90 += 2;
      unk_1EE337EC8 = &dword_1ECE7CF90;
      dword_1ECE7CFB0 += 2;
      unk_1EE337ED0 = &dword_1ECE7CFB0;
      dword_1ECE7CFD0 += 2;
      unk_1EE337ED8 = &dword_1ECE7CFD0;
      dword_1ECE7CFF0 += 2;
      unk_1EE337EE0 = &dword_1ECE7CFF0;
      dword_1ECE7D010 += 2;
      unk_1EE337EE8 = &dword_1ECE7D010;
      byte_1EE337E59 = 1;
    }
    v12 = *(WTF::StringImpl **)&_MergedGlobals_44[8 * a2 + 88];
    if (v12)
      *(_DWORD *)v12 += 2;
    v87 = v11;
    *(_QWORD *)&buf = v81;
    v75 = v80;
    v85 = v78;
    v86 = v79;
    v83 = v12;
    v84 = v77;
    result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v75, (uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83, &v82);
    if (!v82)
    {
      __break(0xC471u);
      return result;
    }
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v13);
      else
        *(_DWORD *)v12 -= 2;
    }
    v14 = v77;
    v77 = 0;
    v15 = v9;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v16 = v78;
    v78 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v13);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v79;
    v79 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v13);
        if (v11)
        {
LABEL_24:
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v13);
          else
            *(_DWORD *)v11 -= 2;
        }
LABEL_26:
        v18 = v80;
        v80 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v13);
          else
            *(_DWORD *)v18 -= 2;
        }
        v19 = v81;
        v81 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v13);
          else
            *(_DWORD *)v19 -= 2;
        }
        v20 = qword_1ECE7C4A0;
        v21 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          WTF::String::utf8();
          v23 = v75 ? (char *)v75 + 16 : 0;
          LODWORD(buf) = 136446210;
          *(_QWORD *)((char *)&buf + 4) = v23;
          _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
          v21 = (uint64_t)v75;
          v75 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 1)
              v21 = WTF::fastFree((WTF *)v21, v22);
            else
              --*(_DWORD *)v21;
          }
        }
        if (WebCore::LogMedia)
        {
          v24 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
          while (1)
          {
            v25 = *v24;
            if ((v25 & 1) != 0)
              break;
            v26 = __ldaxr(v24);
            if (v26 == v25)
            {
              if (!__stxr(v25 | 1, v24))
              {
                v27 = WTF::Logger::observers((WTF::Logger *)v21);
                v28 = *(unsigned int *)(v27 + 12);
                if ((_DWORD)v28)
                {
                  v29 = *(uint64_t **)v27;
                  v73 = *(_QWORD *)v27 + 8 * v28;
                  do
                  {
                    v30 = *v29;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v74);
                    LODWORD(v89) = 0;
                    WTF::String::String((WTF::String *)&v90, "state = ");
                    v31 = *(unsigned __int8 *)(a1 + 48);
                    v91 = 0;
                    if ((_MergedGlobals_44[0] & 1) == 0)
                    {
                      _MergedGlobals_45 += 2;
                      dword_1ECE7CEB0 += 2;
                      qword_1EE337E60 = (uint64_t)&_MergedGlobals_45;
                      unk_1EE337E68 = &dword_1ECE7CEB0;
                      dword_1ECE7CED0 += 2;
                      dword_1ECE7CEF0 += 2;
                      qword_1EE337E70 = (uint64_t)&dword_1ECE7CED0;
                      unk_1EE337E78 = &dword_1ECE7CEF0;
                      dword_1ECE7CF10 += 2;
                      qword_1EE337E80 = (uint64_t)&dword_1ECE7CF10;
                      _MergedGlobals_44[0] = 1;
                    }
                    v32 = *(WTF::StringImpl **)&_MergedGlobals_44[8 * v31 + 8];
                    if (v32)
                      *(_DWORD *)v32 += 2;
                    v92 = v32;
                    v93 = 0;
                    WTF::String::String((WTF::String *)&v94, ", interruption count = ");
                    v95 = 0;
                    WTF::String::number(v15);
                    v97 = 0;
                    WTF::String::String((WTF::String *)&v98, ", type = ");
                    v99 = 0;
                    if ((byte_1EE337E59 & 1) == 0)
                    {
                      dword_1ECE7CF30 += 2;
                      qword_1EE337EB0 = (uint64_t)&dword_1ECE7CF30;
                      dword_1ECE7CF50 += 2;
                      unk_1EE337EB8 = &dword_1ECE7CF50;
                      dword_1ECE7CF70 += 2;
                      unk_1EE337EC0 = &dword_1ECE7CF70;
                      dword_1ECE7CF90 += 2;
                      unk_1EE337EC8 = &dword_1ECE7CF90;
                      dword_1ECE7CFB0 += 2;
                      unk_1EE337ED0 = &dword_1ECE7CFB0;
                      dword_1ECE7CFD0 += 2;
                      unk_1EE337ED8 = &dword_1ECE7CFD0;
                      dword_1ECE7CFF0 += 2;
                      unk_1EE337EE0 = &dword_1ECE7CFF0;
                      dword_1ECE7D010 += 2;
                      unk_1EE337EE8 = &dword_1ECE7D010;
                      byte_1EE337E59 = 1;
                    }
                    v33 = *(WTF::StringImpl **)&_MergedGlobals_44[8 * a2 + 88];
                    if (v33)
                      *(_DWORD *)v33 += 2;
                    v100 = v33;
                    v75 = 0;
                    v76 = 0;
                    v34 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                    LODWORD(v76) = 7;
                    v75 = v34;
                    v35 = HIDWORD(v76);
                    *((_DWORD *)v34 + 4 * HIDWORD(v76)) = buf;
                    v36 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v34 + 2 * v35 + 1) = v36;
                    *((_DWORD *)v34 + 4 * (v35 + 1)) = (_DWORD)v89;
                    v37 = v90;
                    if (v90)
                      *(_DWORD *)v90 += 2;
                    *((_QWORD *)v34 + 2 * (v35 + 1) + 1) = v37;
                    *((_DWORD *)v34 + 4 * (v35 + 2)) = v91;
                    v38 = v92;
                    if (v92)
                      *(_DWORD *)v92 += 2;
                    *((_QWORD *)v34 + 2 * (v35 + 2) + 1) = v38;
                    *((_DWORD *)v34 + 4 * (v35 + 3)) = v93;
                    v39 = v94;
                    if (v94)
                      *(_DWORD *)v94 += 2;
                    *((_QWORD *)v34 + 2 * (v35 + 3) + 1) = v39;
                    *((_DWORD *)v34 + 4 * (v35 + 4)) = v95;
                    v40 = v96;
                    if (v96)
                      *(_DWORD *)v96 += 2;
                    *((_QWORD *)v34 + 2 * (v35 + 4) + 1) = v40;
                    *((_DWORD *)v34 + 4 * (v35 + 5)) = v97;
                    v41 = v98;
                    if (v98)
                      *(_DWORD *)v98 += 2;
                    *((_QWORD *)v34 + 2 * (v35 + 5) + 1) = v41;
                    *((_DWORD *)v34 + 4 * (v35 + 6)) = v99;
                    v42 = v100;
                    if (v100)
                      *(_DWORD *)v100 += 2;
                    *((_QWORD *)v34 + 2 * (v35 + 6) + 1) = v42;
                    HIDWORD(v76) = v35 + 7;
                    (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, &WebCore::LogMedia, 0, &v75);
                    v43 = v75;
                    if (HIDWORD(v76))
                    {
                      v44 = 16 * HIDWORD(v76);
                      v45 = (WTF::StringImpl **)((char *)v75 + 8);
                      do
                      {
                        v46 = *v45;
                        *v45 = 0;
                        if (v46)
                        {
                          if (*(_DWORD *)v46 == 2)
                            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v22);
                          else
                            *(_DWORD *)v46 -= 2;
                        }
                        v45 += 2;
                        v44 -= 16;
                      }
                      while (v44);
                      v43 = v75;
                      v15 = v9;
                    }
                    if (v43)
                    {
                      v75 = 0;
                      LODWORD(v76) = 0;
                      WTF::fastFree(v43, v22);
                    }
                    v47 = v100;
                    v100 = 0;
                    if (v47)
                    {
                      if (*(_DWORD *)v47 == 2)
                        WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v47 -= 2;
                    }
                    v48 = v98;
                    v98 = 0;
                    if (v48)
                    {
                      if (*(_DWORD *)v48 == 2)
                        WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v48 -= 2;
                    }
                    v49 = v96;
                    v96 = 0;
                    if (v49)
                    {
                      if (*(_DWORD *)v49 == 2)
                        WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v49 -= 2;
                    }
                    v50 = v94;
                    v94 = 0;
                    if (v50)
                    {
                      if (*(_DWORD *)v50 == 2)
                        WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v50 -= 2;
                    }
                    v51 = v92;
                    v92 = 0;
                    if (v51)
                    {
                      if (*(_DWORD *)v51 == 2)
                        WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v51 -= 2;
                    }
                    v52 = v90;
                    v90 = 0;
                    if (v52)
                    {
                      if (*(_DWORD *)v52 == 2)
                        WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v52 -= 2;
                    }
                    v53 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v53)
                    {
                      if (*(_DWORD *)v53 == 2)
                        WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v22);
                      else
                        *(_DWORD *)v53 -= 2;
                    }
                    ++v29;
                  }
                  while (v29 != (uint64_t *)v73);
                }
                v54 = __ldxr(v24);
                if (v54 == 1)
                {
                  a2 = a2;
                  if (!__stlxr(0, v24))
                    break;
                }
                else
                {
                  __clrex();
                  a2 = a2;
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        result = v82;
        v82 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v22);
          else
            *(_DWORD *)result -= 2;
        }
        v9 = (WTF::String *)*(unsigned int *)(a1 + 68);
        goto LABEL_119;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (v11)
      goto LABEL_24;
    goto LABEL_26;
  }
LABEL_119:
  v55 = (_QWORD *)(a1 + 56);
  if ((_DWORD)v9)
  {
    v56 = 0;
    v57 = *v55;
    v58 = 2 * (_QWORD)v9;
    v59 = (unsigned __int8 *)(*v55 + 1);
    do
    {
      v60 = *v59;
      v59 += 2;
      if (!v60)
        ++v56;
      v58 -= 2;
    }
    while (v58);
    if (v56)
    {
      LOBYTE(buf) = a2;
      BYTE1(buf) = 1;
      if ((_DWORD)v9 != *(_DWORD *)(a1 + 64))
      {
        *(_WORD *)(v57 + 2 * (_QWORD)v9) = buf;
LABEL_138:
        ++*(_DWORD *)(a1 + 68);
        return result;
      }
      v61 = (unint64_t)v9 + 1;
      goto LABEL_132;
    }
  }
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 120))(*(_QWORD *)(a1 + 32), a2))
  {
    v62 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
    v65 = v64;
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
    *(_QWORD *)&buf = v63;
    *((_QWORD *)&buf + 1) = v65;
    v89 = "beginInterruption";
    v90 = result;
    if (*(_BYTE *)(v62 + 12))
      result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [61]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "returning early because client says to override interruption");
    LOBYTE(buf) = a2;
    BYTE1(buf) = 1;
    v66 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v66 != *(_DWORD *)(a1 + 64))
    {
      v67 = *v55;
      v68 = buf;
      goto LABEL_137;
    }
    v61 = v66 + 1;
LABEL_132:
    result = (WTF::StringImpl *)WTF::Vector<std::optional<WebCore::GPUTextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v61, (unint64_t)&buf);
    v66 = *(unsigned int *)(a1 + 68);
    v67 = *(_QWORD *)(a1 + 56);
    v68 = *(_WORD *)result;
LABEL_137:
    *(_WORD *)(v67 + 2 * v66) = v68;
    goto LABEL_138;
  }
  LOWORD(buf) = a2;
  v69 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v69 == *(_DWORD *)(a1 + 64))
  {
    v70 = WTF::Vector<std::optional<WebCore::GPUTextureFormat>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, v69 + 1, (unint64_t)&buf);
    v69 = *(unsigned int *)(a1 + 68);
    v71 = *(_QWORD *)(a1 + 56);
    v72 = *(_WORD *)v70;
  }
  else
  {
    v71 = *v55;
    v72 = buf;
  }
  *(_WORD *)(v71 + 2 * v69) = v72;
  ++*(_DWORD *)(a1 + 68);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 73) = 1;
  WebCore::PlatformMediaSession::setState(a1, 4);
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  *(_BYTE *)(a1 + 73) = 0;
  return result;
}

WTF::StringImpl *WebCore::PlatformMediaSession::endInterruption(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *result;
  WTF::String *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::Logger *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  int v63;
  _BOOL4 v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  BOOL v76;
  int v77;
  char v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  NSObject *v85;
  uint64_t v86;
  void *v87;
  char *v88;
  unsigned __int8 *v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  WTF::Logger *v99;
  uint64_t v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::Logger *v104;
  uint64_t v105;
  WTF::StringImpl **v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  WTF::StringImpl *v112;
  int v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD v117[3];
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::Logger *v130;
  uint64_t v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  __int128 buf;
  const char *v136;
  WTF::StringImpl *v137;
  int v138;
  WTF::StringImpl *v139;
  int v140;
  WTF::StringImpl *v141;
  int v142;
  WTF::StringImpl *v143;
  int v144;
  WTF::StringImpl *v145;
  int v146;
  WTF::StringImpl *v147;
  uint64_t v148;

  v2 = a1;
  v148 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 68);
  if ((_DWORD)v3)
  {
    v5 = *(_WORD *)(*(_QWORD *)(a1 + 56) + 2 * v3 - 2);
    *(_DWORD *)(a1 + 68) = v3 - 1;
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
    v9 = v8;
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 256))(*(_QWORD *)(v2 + 32));
    *(_QWORD *)&v117[1] = v7;
    v118 = v9;
    v119 = "endInterruption";
    v120 = (uint64_t)result;
    v11 = (WTF::String *)*(unsigned int *)(v2 + 68);
    if ((_DWORD)v11)
      v12 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 56) + 2 * (_QWORD)v11 - 2);
    else
      v12 = 0;
    v115 = v2;
    if (*(_BYTE *)(v6 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v117[1]);
      WTF::String::String((WTF::String *)&v125, "flags = ");
      v117[0] = a2;
      WTF::String::number((WTF::String *)a2);
      WTF::String::String((WTF::String *)&v123, ", interruption count = ");
      WTF::String::number(v11);
      WTF::String::String((WTF::String *)&v121, " type = ");
      if ((byte_1EE337E59 & 1) == 0)
      {
        dword_1ECE7CF30 += 2;
        qword_1EE337EB0 = (uint64_t)&dword_1ECE7CF30;
        dword_1ECE7CF50 += 2;
        unk_1EE337EB8 = &dword_1ECE7CF50;
        dword_1ECE7CF70 += 2;
        unk_1EE337EC0 = &dword_1ECE7CF70;
        dword_1ECE7CF90 += 2;
        unk_1EE337EC8 = &dword_1ECE7CF90;
        dword_1ECE7CFB0 += 2;
        unk_1EE337ED0 = &dword_1ECE7CFB0;
        dword_1ECE7CFD0 += 2;
        unk_1EE337ED8 = &dword_1ECE7CFD0;
        dword_1ECE7CFF0 += 2;
        unk_1EE337EE0 = &dword_1ECE7CFF0;
        dword_1ECE7D010 += 2;
        unk_1EE337EE8 = &dword_1ECE7D010;
        byte_1EE337E59 = 1;
      }
      v17 = *(WTF::StringImpl **)&_MergedGlobals_44[8 * v12 + 88];
      if (v17)
        *(_DWORD *)v17 += 2;
      v134 = v124;
      *(_QWORD *)&buf = v126;
      v132 = v122;
      v133 = v123;
      v129 = v121;
      v130 = v125;
      v128 = v17;
      WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v130, (uint64_t *)&v134, (uint64_t *)&v133, (uint64_t *)&v132, (uint64_t *)&v129, (uint64_t *)&v128, &v127);
      if (!v127)
        goto LABEL_245;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v18);
        else
          *(_DWORD *)v17 -= 2;
      }
      v19 = v121;
      v121 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v18);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = v122;
      v122 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v18);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = v123;
      v123 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v18);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = v124;
      v124 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v18);
        else
          *(_DWORD *)v22 -= 2;
      }
      v23 = v125;
      v125 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v18);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = v126;
      v126 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v18);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = qword_1ECE7C4A0;
      v26 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v26)
      {
        WTF::String::utf8();
        v28 = v130 ? (char *)v130 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v28;
        _os_log_impl(&dword_1940B8000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v26 = (uint64_t)v130;
        v130 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
            v26 = WTF::fastFree((WTF *)v26, v27);
          else
            --*(_DWORD *)v26;
        }
      }
      if (WebCore::LogMedia)
      {
        v29 = v12;
        v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v31 = *v30;
          if ((v31 & 1) != 0)
            break;
          v32 = __ldaxr(v30);
          if (v32 == v31)
          {
            if (!__stxr(v31 | 1, v30))
            {
              v114 = a2;
              v33 = WTF::Logger::observers((WTF::Logger *)v26);
              v34 = *(unsigned int *)(v33 + 12);
              if ((_DWORD)v34)
              {
                v35 = *(uint64_t **)v33;
                v116 = *(_QWORD *)v33 + 8 * v34;
                v36 = &_MergedGlobals_44[8 * v29];
                do
                {
                  v37 = *v35;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v117[1]);
                  LODWORD(v136) = 0;
                  WTF::String::String((WTF::String *)&v137, "flags = ");
                  v138 = 0;
                  WTF::String::number((WTF::String *)v117[0]);
                  v140 = 0;
                  WTF::String::String((WTF::String *)&v141, ", interruption count = ");
                  v142 = 0;
                  WTF::String::number(v11);
                  v144 = 0;
                  WTF::String::String((WTF::String *)&v145, " type = ");
                  v146 = 0;
                  if ((byte_1EE337E59 & 1) == 0)
                  {
                    dword_1ECE7CF30 += 2;
                    qword_1EE337EB0 = (uint64_t)&dword_1ECE7CF30;
                    dword_1ECE7CF50 += 2;
                    unk_1EE337EB8 = &dword_1ECE7CF50;
                    dword_1ECE7CF70 += 2;
                    unk_1EE337EC0 = &dword_1ECE7CF70;
                    dword_1ECE7CF90 += 2;
                    unk_1EE337EC8 = &dword_1ECE7CF90;
                    dword_1ECE7CFB0 += 2;
                    unk_1EE337ED0 = &dword_1ECE7CFB0;
                    dword_1ECE7CFD0 += 2;
                    unk_1EE337ED8 = &dword_1ECE7CFD0;
                    dword_1ECE7CFF0 += 2;
                    unk_1EE337EE0 = &dword_1ECE7CFF0;
                    dword_1ECE7D010 += 2;
                    unk_1EE337EE8 = &dword_1ECE7D010;
                    byte_1EE337E59 = 1;
                  }
                  v38 = (WTF::StringImpl *)*((_QWORD *)v36 + 11);
                  if (v38)
                    *(_DWORD *)v38 += 2;
                  v147 = v38;
                  v130 = 0;
                  v131 = 0;
                  v39 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x70);
                  LODWORD(v131) = 7;
                  v130 = v39;
                  v40 = HIDWORD(v131);
                  *((_DWORD *)v39 + 4 * HIDWORD(v131)) = buf;
                  v41 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v39 + 2 * v40 + 1) = v41;
                  *((_DWORD *)v39 + 4 * (v40 + 1)) = (_DWORD)v136;
                  v42 = v137;
                  if (v137)
                    *(_DWORD *)v137 += 2;
                  *((_QWORD *)v39 + 2 * (v40 + 1) + 1) = v42;
                  *((_DWORD *)v39 + 4 * (v40 + 2)) = v138;
                  v43 = v139;
                  if (v139)
                    *(_DWORD *)v139 += 2;
                  *((_QWORD *)v39 + 2 * (v40 + 2) + 1) = v43;
                  *((_DWORD *)v39 + 4 * (v40 + 3)) = v140;
                  v44 = v141;
                  if (v141)
                    *(_DWORD *)v141 += 2;
                  *((_QWORD *)v39 + 2 * (v40 + 3) + 1) = v44;
                  *((_DWORD *)v39 + 4 * (v40 + 4)) = v142;
                  v45 = v143;
                  if (v143)
                    *(_DWORD *)v143 += 2;
                  *((_QWORD *)v39 + 2 * (v40 + 4) + 1) = v45;
                  *((_DWORD *)v39 + 4 * (v40 + 5)) = v144;
                  v46 = v145;
                  if (v145)
                    *(_DWORD *)v145 += 2;
                  *((_QWORD *)v39 + 2 * (v40 + 5) + 1) = v46;
                  *((_DWORD *)v39 + 4 * (v40 + 6)) = v146;
                  v47 = v147;
                  if (v147)
                    *(_DWORD *)v147 += 2;
                  *((_QWORD *)v39 + 2 * (v40 + 6) + 1) = v47;
                  HIDWORD(v131) = v40 + 7;
                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v37 + 16))(v37, &WebCore::LogMedia, 0, &v130);
                  v48 = v130;
                  if (HIDWORD(v131))
                  {
                    v49 = 16 * HIDWORD(v131);
                    v50 = (WTF::StringImpl **)((char *)v130 + 8);
                    do
                    {
                      v51 = *v50;
                      *v50 = 0;
                      if (v51)
                      {
                        if (*(_DWORD *)v51 == 2)
                          WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v27);
                        else
                          *(_DWORD *)v51 -= 2;
                      }
                      v50 += 2;
                      v49 -= 16;
                    }
                    while (v49);
                    v48 = v130;
                  }
                  if (v48)
                  {
                    v130 = 0;
                    LODWORD(v131) = 0;
                    WTF::fastFree(v48, v27);
                  }
                  v52 = v147;
                  v147 = 0;
                  if (v52)
                  {
                    if (*(_DWORD *)v52 == 2)
                      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v52 -= 2;
                  }
                  v53 = v145;
                  v145 = 0;
                  if (v53)
                  {
                    if (*(_DWORD *)v53 == 2)
                      WTF::StringImpl::destroy(v53, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v53 -= 2;
                  }
                  v54 = v143;
                  v143 = 0;
                  if (v54)
                  {
                    if (*(_DWORD *)v54 == 2)
                      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v54 -= 2;
                  }
                  v55 = v141;
                  v141 = 0;
                  if (v55)
                  {
                    if (*(_DWORD *)v55 == 2)
                      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v55 -= 2;
                  }
                  v56 = v139;
                  v139 = 0;
                  if (v56)
                  {
                    if (*(_DWORD *)v56 == 2)
                      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v56 -= 2;
                  }
                  v57 = v137;
                  v137 = 0;
                  if (v57)
                  {
                    if (*(_DWORD *)v57 == 2)
                      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v57 -= 2;
                  }
                  v58 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v58)
                  {
                    if (*(_DWORD *)v58 == 2)
                      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v58 -= 2;
                  }
                  ++v35;
                }
                while (v35 != (uint64_t *)v116);
              }
              v59 = __ldxr(v30);
              if (v59 == 1)
              {
                a2 = v114;
                if (!__stlxr(0, v30))
                  break;
              }
              else
              {
                __clrex();
                a2 = v114;
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = v127;
      v127 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v27);
        else
          *(_DWORD *)result -= 2;
      }
      v11 = (WTF::String *)*(unsigned int *)(v2 + 68);
    }
    if ((_DWORD)v11)
    {
      v60 = 0;
      v61 = 2 * (_QWORD)v11;
      v62 = (unsigned __int8 *)(*(_QWORD *)(v2 + 56) + 1);
      do
      {
        v63 = *v62;
        v62 += 2;
        if (!v63)
          ++v60;
        v61 -= 2;
      }
      while (v61);
      v64 = v60 == 0;
    }
    else
    {
      v64 = 1;
    }
    if (!v64 || (v5 & 0x100) != 0)
      return result;
    v66 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 248))(*(_QWORD *)(v2 + 32));
    v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
    v69 = v68;
    v70 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 256))(*(_QWORD *)(v2 + 32));
    *(_QWORD *)&v117[1] = v67;
    v118 = v69;
    v119 = "endInterruption";
    v120 = v70;
    if (!*(_BYTE *)(v66 + 12))
    {
LABEL_220:
      v113 = *(unsigned __int8 *)(v2 + 49);
      *(_BYTE *)(v2 + 49) = 0;
      WebCore::PlatformMediaSession::setState(v2, v113);
      if (v113 == 1)
        (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
      return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 32) + 32))(*(_QWORD *)(v2 + 32), a2 & (v113 == 2));
    }
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v117[1]);
    WTF::String::String((WTF::String *)&v132, "restoring state ");
    v71 = *(unsigned __int8 *)(v2 + 49);
    if ((_MergedGlobals_44[0] & 1) == 0)
    {
      _MergedGlobals_45 += 2;
      dword_1ECE7CEB0 += 2;
      qword_1EE337E60 = (uint64_t)&_MergedGlobals_45;
      unk_1EE337E68 = &dword_1ECE7CEB0;
      dword_1ECE7CED0 += 2;
      dword_1ECE7CEF0 += 2;
      qword_1EE337E70 = (uint64_t)&dword_1ECE7CED0;
      unk_1EE337E78 = &dword_1ECE7CEF0;
      dword_1ECE7CF10 += 2;
      qword_1EE337E80 = (uint64_t)&dword_1ECE7CF10;
      _MergedGlobals_44[0] = 1;
    }
    v72 = *(_QWORD *)&_MergedGlobals_44[8 * v71 + 8];
    if (v72)
      *(_DWORD *)v72 += 2;
    if (v133)
    {
      v73 = *((_DWORD *)v133 + 1);
      if (v132)
        goto LABEL_136;
    }
    else
    {
      v73 = 0;
      if (v132)
      {
LABEL_136:
        v74 = *((_DWORD *)v132 + 1);
        if (v72)
        {
LABEL_137:
          v75 = *(_DWORD *)(v72 + 4);
LABEL_138:
          if ((v75 | v74) < 0
            || ((v76 = __OFADD__(v74, v75), v77 = v74 + v75, !v76) ? (v78 = 0) : (v78 = 1),
                v73 < 0 || (v78 & 1) != 0 || (v79 = (v73 + v77), __OFADD__(v73, v77))))
          {
            v134 = 0;
            goto LABEL_245;
          }
          if (v133 && (*((_BYTE *)v133 + 16) & 4) == 0)
          {
            v80 = 0;
            goto LABEL_152;
          }
          if (v132)
          {
            v81 = *((_DWORD *)v132 + 4);
            v80 = (v81 >> 2) & 1;
            if (!v72 || (v81 & 4) == 0)
            {
LABEL_152:
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v79, v80, v133, (uint64_t)v132, v72, &v134);
              if (v134)
              {
                if (v72)
                {
                  if (*(_DWORD *)v72 == 2)
                    WTF::StringImpl::destroy((WTF::StringImpl *)v72, v82);
                  else
                    *(_DWORD *)v72 -= 2;
                }
                goto LABEL_156;
              }
              goto LABEL_245;
            }
          }
          else if (!v72)
          {
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v79, 1, v133, 0, 0, &v134);
            if (v134)
            {
LABEL_156:
              v83 = v132;
              v132 = 0;
              if (v83)
              {
                if (*(_DWORD *)v83 == 2)
                  WTF::StringImpl::destroy(v83, v82);
                else
                  *(_DWORD *)v83 -= 2;
              }
              v84 = v133;
              v133 = 0;
              if (v84)
              {
                if (*(_DWORD *)v84 == 2)
                  WTF::StringImpl::destroy(v84, v82);
                else
                  *(_DWORD *)v84 -= 2;
              }
              v85 = qword_1ECE7C4A0;
              v86 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v86)
              {
                WTF::String::utf8();
                v88 = v130 ? (char *)v130 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v88;
                _os_log_impl(&dword_1940B8000, v85, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v86 = (uint64_t)v130;
                v130 = 0;
                if (v86)
                {
                  if (*(_DWORD *)v86 == 1)
                    v86 = WTF::fastFree((WTF *)v86, v87);
                  else
                    --*(_DWORD *)v86;
                }
              }
              if (WebCore::LogMedia)
              {
                v89 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v90 = *v89;
                  if ((v90 & 1) != 0)
                    break;
                  v91 = __ldaxr(v89);
                  if (v91 == v90)
                  {
                    if (!__stxr(v90 | 1, v89))
                    {
                      v92 = WTF::Logger::observers((WTF::Logger *)v86);
                      v93 = *(unsigned int *)(v92 + 12);
                      if ((_DWORD)v93)
                      {
                        v94 = *(uint64_t **)v92;
                        v95 = *(_QWORD *)v92 + 8 * v93;
                        do
                        {
                          v96 = *v94;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v117[1]);
                          LODWORD(v136) = 0;
                          WTF::String::String((WTF::String *)&v137, "restoring state ");
                          v97 = *(unsigned __int8 *)(v2 + 49);
                          v138 = 0;
                          if ((_MergedGlobals_44[0] & 1) == 0)
                          {
                            _MergedGlobals_45 += 2;
                            dword_1ECE7CEB0 += 2;
                            qword_1EE337E60 = (uint64_t)&_MergedGlobals_45;
                            unk_1EE337E68 = &dword_1ECE7CEB0;
                            dword_1ECE7CED0 += 2;
                            dword_1ECE7CEF0 += 2;
                            qword_1EE337E70 = (uint64_t)&dword_1ECE7CED0;
                            unk_1EE337E78 = &dword_1ECE7CEF0;
                            dword_1ECE7CF10 += 2;
                            qword_1EE337E80 = (uint64_t)&dword_1ECE7CF10;
                            _MergedGlobals_44[0] = 1;
                          }
                          v98 = *(WTF::StringImpl **)&_MergedGlobals_44[8 * v97 + 8];
                          if (v98)
                            *(_DWORD *)v98 += 2;
                          v139 = v98;
                          v130 = 0;
                          v131 = 0;
                          v99 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v131) = 3;
                          v130 = v99;
                          v100 = HIDWORD(v131);
                          *((_DWORD *)v99 + 4 * HIDWORD(v131)) = buf;
                          v101 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v99 + 2 * v100 + 1) = v101;
                          *((_DWORD *)v99 + 4 * (v100 + 1)) = (_DWORD)v136;
                          v102 = v137;
                          if (v137)
                            *(_DWORD *)v137 += 2;
                          *((_QWORD *)v99 + 2 * (v100 + 1) + 1) = v102;
                          *((_DWORD *)v99 + 4 * (v100 + 2)) = v138;
                          v103 = v139;
                          if (v139)
                            *(_DWORD *)v139 += 2;
                          *((_QWORD *)v99 + 2 * (v100 + 2) + 1) = v103;
                          HIDWORD(v131) = v100 + 3;
                          (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v96 + 16))(v96, &WebCore::LogMedia, 0, &v130);
                          v104 = v130;
                          if (HIDWORD(v131))
                          {
                            v105 = 16 * HIDWORD(v131);
                            v106 = (WTF::StringImpl **)((char *)v130 + 8);
                            do
                            {
                              v107 = *v106;
                              *v106 = 0;
                              if (v107)
                              {
                                if (*(_DWORD *)v107 == 2)
                                  WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v87);
                                else
                                  *(_DWORD *)v107 -= 2;
                              }
                              v106 += 2;
                              v105 -= 16;
                            }
                            while (v105);
                            v104 = v130;
                            v2 = v115;
                          }
                          if (v104)
                          {
                            v130 = 0;
                            LODWORD(v131) = 0;
                            WTF::fastFree(v104, v87);
                          }
                          v108 = v139;
                          v139 = 0;
                          if (v108)
                          {
                            if (*(_DWORD *)v108 == 2)
                              WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v87);
                            else
                              *(_DWORD *)v108 -= 2;
                          }
                          v109 = v137;
                          v137 = 0;
                          if (v109)
                          {
                            if (*(_DWORD *)v109 == 2)
                              WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v87);
                            else
                              *(_DWORD *)v109 -= 2;
                          }
                          v110 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v110)
                          {
                            if (*(_DWORD *)v110 == 2)
                              WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v87);
                            else
                              *(_DWORD *)v110 -= 2;
                          }
                          ++v94;
                        }
                        while (v94 != (uint64_t *)v95);
                      }
                      v111 = __ldxr(v89);
                      if (v111 == 1)
                      {
                        if (!__stlxr(0, v89))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v112 = v134;
              v134 = 0;
              if (v112)
              {
                if (*(_DWORD *)v112 == 2)
                  WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v87);
                else
                  *(_DWORD *)v112 -= 2;
              }
              goto LABEL_220;
            }
LABEL_245:
            __break(0xC471u);
            JUMPOUT(0x19610EA3CLL);
          }
          v80 = (*(unsigned __int8 *)(v72 + 16) >> 2) & 1;
          goto LABEL_152;
        }
LABEL_240:
        v75 = 0;
        goto LABEL_138;
      }
    }
    v74 = 0;
    if (v72)
      goto LABEL_137;
    goto LABEL_240;
  }
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  v16 = v15;
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 256))(*(_QWORD *)(v2 + 32));
  *(_QWORD *)&buf = v14;
  *((_QWORD *)&buf + 1) = v16;
  v136 = "endInterruption";
  v137 = result;
  if (*(_BYTE *)(v13 + 12))
    return (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "!! ignoring spurious interruption end !!");
  return result;
}

uint64_t WebCore::PlatformMediaSession::clientWillBeginAutoplaying(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  if (!*(_BYTE *)(this + 73))
  {
    v1 = this;
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 32) + 248))(*(_QWORD *)(this + 32));
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
    v5 = v4;
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 256))(*(_QWORD *)(v1 + 32));
    v11 = v3;
    v12 = v5;
    v13 = "clientWillBeginAutoplaying";
    v14 = v6;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [9],WebCore::PlatformMediaSessionState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v11, "state = ", (unsigned __int8 *)(v1 + 48));
    if (*(_BYTE *)(v1 + 48) == 4)
    {
      *(_BYTE *)(v1 + 49) = 1;
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 248))(*(_QWORD *)(v1 + 32));
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 144))(v1);
      v10 = v9;
      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 32) + 256))(*(_QWORD *)(v1 + 32));
      v11 = v8;
      v12 = v10;
      v13 = "clientWillBeginAutoplaying";
      v14 = this;
      if (*(_BYTE *)(v7 + 12))
        return WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v11, "      setting stateToRestore to \"Autoplaying\"");
    }
    else
    {
      return WebCore::PlatformMediaSession::setState(v1, 1);
    }
  }
  return this;
}

uint64_t WebCore::PlatformMediaSession::clientWillBeginPlayback(WebCore::PlatformMediaSession *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  WebCore::MediaSessionManageriOS *v10;
  WebCore::MediaSessionHelper *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  if (*((_BYTE *)this + 73))
    return 1;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v4 = (*(uint64_t (**)(WebCore::PlatformMediaSession *))(*(_QWORD *)this + 144))(this);
  v6 = v5;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v15[0] = v4;
  v15[1] = v6;
  v15[2] = "clientWillBeginPlayback";
  v15[3] = v7;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [9],WebCore::PlatformMediaSessionState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v15, "state = ", (unsigned __int8 *)this + 48);
  v8 = *((_BYTE *)this + 76);
  *((_BYTE *)this + 76) = 1;
  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
LABEL_7:
    v10 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
    v11 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v10);
    {
      v12 = sharedHelperInstance(void)::helper;
      if (sharedHelperInstance(void)::helper)
      {
LABEL_10:
        WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v12 + 16, (_QWORD *)v10 + 50, (uint64_t)v15);
        v13 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v10;
        if (v13)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          v10 = (WebCore::MediaSessionManageriOS *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        }
        (*(void (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)v10 + 136))(v10);
        v9 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        goto LABEL_13;
      }
    }
    else
    {
      sharedHelperInstance(void)::helper = 0;
    }
    WebCore::MediaSessionHelper::resetSharedHelper(v11);
    v12 = sharedHelperInstance(void)::helper;
    goto LABEL_10;
  }
  v9 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  if (!WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
    goto LABEL_7;
LABEL_13:
  v1 = (*(uint64_t (**)(uint64_t, WebCore::PlatformMediaSession *))(*(_QWORD *)v9 + 144))(v9, this);
  if ((v1 & 1) != 0)
  {
    *((_BYTE *)this + 49) = 2;
    WebCore::PlatformMediaSession::setState((uint64_t)this, 2);
  }
  else if (*((_BYTE *)this + 48) == 4)
  {
    *((_BYTE *)this + 49) = 2;
  }
  *((_BYTE *)this + 76) = v8;
  return v1;
}

void sub_19610ED50(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformMediaSession::processClientWillPausePlayback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  WebCore::MediaSessionManageriOS *v16;
  WebCore::MediaSessionHelper *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;

  if (*(_BYTE *)(a1 + 73))
    return 1;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v7 = v6;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
  v20 = v5;
  v21 = v7;
  v22 = "processClientWillPausePlayback";
  v23 = v8;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [9],WebCore::PlatformMediaSessionState>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v20, "state = ", (unsigned __int8 *)(a1 + 48));
  if (*(_BYTE *)(a1 + 48) != 4)
  {
    WebCore::PlatformMediaSession::setState(a1, 3);
    {
      v15 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
      if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      {
LABEL_16:
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 152))(v15, a1, a2);
        return 1;
      }
    }
    else
    {
      WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
    }
    v16 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
    v17 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v16);
    {
      v18 = sharedHelperInstance(void)::helper;
      if (sharedHelperInstance(void)::helper)
      {
LABEL_13:
        WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v18 + 16, (_QWORD *)v16 + 50, (uint64_t)&v20);
        v19 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v16;
        if (v19)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          v16 = (WebCore::MediaSessionManageriOS *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        }
        (*(void (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)v16 + 136))(v16);
        v15 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        goto LABEL_16;
      }
    }
    else
    {
      sharedHelperInstance(void)::helper = 0;
    }
    WebCore::MediaSessionHelper::resetSharedHelper(v17);
    v18 = sharedHelperInstance(void)::helper;
    goto LABEL_13;
  }
  *(_BYTE *)(a1 + 49) = 3;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 248))(*(_QWORD *)(a1 + 32));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v12 = v11;
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 256))(*(_QWORD *)(a1 + 32));
  v20 = v10;
  v21 = v12;
  v22 = "processClientWillPausePlayback";
  v23 = v13;
  if (*(_BYTE *)(v9 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v20, "      setting stateToRestore to \"Paused\"");
  return 0;
}

void sub_19610EF94(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformMediaSession::clientWillPausePlayback(WebCore::PlatformMediaSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v3 = (*(uint64_t (**)(WebCore::PlatformMediaSession *))(*(_QWORD *)this + 144))(this);
  v5 = v4;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v8[0] = v3;
  v8[1] = v5;
  v8[2] = "clientWillPausePlayback";
  v8[3] = v6;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  return WebCore::PlatformMediaSession::processClientWillPausePlayback((uint64_t)this, 0);
}

uint64_t WebCore::PlatformMediaSession::stopSession(WebCore::PlatformMediaSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::MediaSessionManageriOS *v8;
  WebCore::MediaSessionHelper *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 248))(*((_QWORD *)this + 4));
  v3 = (*(uint64_t (**)(WebCore::PlatformMediaSession *))(*(_QWORD *)this + 144))(this);
  v5 = v4;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4));
  v13[0] = v3;
  v13[1] = v5;
  v13[2] = "stopSession";
  v13[3] = v6;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4));
  {
    v7 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
    if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      return (*(uint64_t (**)(uint64_t, WebCore::PlatformMediaSession *))(*(_QWORD *)v7 + 280))(v7, this);
  }
  else
  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
  }
  v8 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
  v9 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v8);
  {
    sharedHelperInstance(void)::helper = 0;
    goto LABEL_7;
  }
  v10 = sharedHelperInstance(void)::helper;
  if (!sharedHelperInstance(void)::helper)
  {
LABEL_7:
    WebCore::MediaSessionHelper::resetSharedHelper(v9);
    v10 = sharedHelperInstance(void)::helper;
  }
  WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v10 + 16, (_QWORD *)v8 + 50, (uint64_t)v13);
  v11 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v8;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v8 = (WebCore::MediaSessionManageriOS *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  }
  (*(void (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)v8 + 136))(v8);
  v7 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  return (*(uint64_t (**)(uint64_t, WebCore::PlatformMediaSession *))(*(_QWORD *)v7 + 280))(v7, this);
}

void sub_19610F1CC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformMediaSession::didReceiveRemoteControlCommand(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[4];
  unsigned __int8 v13;

  v4 = a2;
  v13 = a2;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1[4] + 248))(a1[4]);
  v7 = ((uint64_t (*)(_QWORD **))(*a1)[18])(a1);
  v9 = v8;
  v10 = (*(uint64_t (**)(_QWORD *))(*a1[4] + 256))(a1[4]);
  v12[0] = v7;
  v12[1] = v9;
  v12[2] = "didReceiveRemoteControlCommand";
  v12[3] = v10;
  if (*(_BYTE *)(v6 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::PlatformMediaSessionRemoteControlCommandType>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v12, &v13);
    v4 = v13;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[4] + 56))(a1[4], v4, a3);
}

WTF::StringImpl *WebCore::PlatformMediaSession::isPlayingToWirelessPlaybackTargetChanged(WTF::StringImpl *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::MediaSessionManageriOS *v4;
  WebCore::MediaSessionHelper *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  if (*((unsigned __int8 *)this + 74) == a2)
    return this;
  v2 = (uint64_t)this;
  *((_BYTE *)this + 74) = a2;
  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
LABEL_4:
    v4 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
    v5 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v4);
    {
      v6 = sharedHelperInstance(void)::helper;
      if (sharedHelperInstance(void)::helper)
      {
LABEL_7:
        WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v6 + 16, (_QWORD *)v4 + 50, (uint64_t)v8);
        v7 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v4;
        if (v7)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          v4 = (WebCore::MediaSessionManageriOS *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        }
        this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)v4 + 136))(v4);
        v3 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
        goto LABEL_10;
      }
    }
    else
    {
      sharedHelperInstance(void)::helper = 0;
    }
    WebCore::MediaSessionHelper::resetSharedHelper(v5);
    v6 = sharedHelperInstance(void)::helper;
    goto LABEL_7;
  }
  v3 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  if (!WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
    goto LABEL_4;
LABEL_10:
  if (*(_BYTE *)(v3 + 50))
  {
    this = (WTF::StringImpl *)(***(uint64_t (****)(_QWORD))(v2 + 32))(*(_QWORD *)(v2 + 32));
    if ((*(_DWORD *)(v3 + 4 * this + 8) & 2) != 0 && *(_BYTE *)(v2 + 48) != 4)
      return WebCore::PlatformMediaSession::beginInterruption(v2, 2);
  }
  return this;
}

void sub_19610F3F0(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformMediaSession::canProduceAudioChanged(WebCore::PlatformMediaSession *this)
{
  uint64_t v1;
  WebCore::MediaSessionManageriOS *v2;
  WebCore::MediaSessionHelper *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  {
    v1 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
    if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
  }
  else
  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
  }
  v2 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
  v3 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v2);
  {
    sharedHelperInstance(void)::helper = 0;
    goto LABEL_5;
  }
  v4 = sharedHelperInstance(void)::helper;
  if (!sharedHelperInstance(void)::helper)
  {
LABEL_5:
    WebCore::MediaSessionHelper::resetSharedHelper(v3);
    v4 = sharedHelperInstance(void)::helper;
  }
  WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v4 + 16, (_QWORD *)v2 + 50, (uint64_t)v7);
  v5 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v2;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v2 = (WebCore::MediaSessionManageriOS *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  }
  (*(void (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)v2 + 136))(v2);
  v1 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
}

void sub_19610F500(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::PlatformMediaSession::clientCharacteristicsChanged(WebCore::PlatformMediaSession *this, uint64_t a2)
{
  uint64_t v4;
  WebCore::MediaSessionManageriOS *v5;
  WebCore::MediaSessionHelper *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  {
    v4 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
    if (WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager)
      return (*(uint64_t (**)(uint64_t, WebCore::PlatformMediaSession *, uint64_t))(*(_QWORD *)v4 + 176))(v4, this, a2);
  }
  else
  {
    WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = 0;
  }
  v5 = (WebCore::MediaSessionManageriOS *)WTF::fastMalloc((WTF *)0x1C0);
  v6 = WebCore::MediaSessionManageriOS::MediaSessionManageriOS(v5);
  {
    sharedHelperInstance(void)::helper = 0;
    goto LABEL_5;
  }
  v7 = sharedHelperInstance(void)::helper;
  if (!sharedHelperInstance(void)::helper)
  {
LABEL_5:
    WebCore::MediaSessionHelper::resetSharedHelper(v6);
    v7 = sharedHelperInstance(void)::helper;
  }
  WTF::WeakHashSet<WebCore::MediaSessionHelperClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::MediaSessionHelperClient>(v7 + 16, (_QWORD *)v5 + 50, (uint64_t)v10);
  v8 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager = (uint64_t)v5;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v5 = (WebCore::MediaSessionManageriOS *)WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  }
  (*(void (**)(WebCore::MediaSessionManageriOS *))(*(_QWORD *)v5 + 136))(v5);
  v4 = WebCore::sharedPlatformMediaSessionManager(void)::platformMediaSessionManager;
  return (*(uint64_t (**)(uint64_t, WebCore::PlatformMediaSession *, uint64_t))(*(_QWORD *)v4 + 176))(v4, this, a2);
}

void sub_19610F628(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'WebCore::PlatformMediaSession::logger(WebCore::PlatformMediaSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 248))(*((_QWORD *)this + 1));
}

uint64_t `non-virtual thunk to'WebCore::PlatformMediaSession::logIdentifier(WebCore::PlatformMediaSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 256))(*((_QWORD *)this + 1));
}

char *`non-virtual thunk to'WebCore::PlatformMediaSession::logChannel(WebCore::PlatformMediaSession *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::PlatformMediaSession::description@<X0>(WebCore::PlatformMediaSession *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  result = (***((uint64_t (****)(_QWORD))this + 4))(*((_QWORD *)this + 4));
  if ((byte_1EE337E5A & 1) == 0)
  {
    dword_1ECE7D030 += 2;
    unk_1EE337E88 = &dword_1ECE7D030;
    dword_1ECE7D050 += 2;
    unk_1EE337E90 = &dword_1ECE7D050;
    dword_1ECE7D070 += 2;
    unk_1EE337E98 = &dword_1ECE7D070;
    dword_1ECE7D090 += 2;
    unk_1EE337EA0 = &dword_1ECE7D090;
    dword_1ECE7D0B0 += 2;
    unk_1EE337EA8 = &dword_1ECE7D0B0;
    byte_1EE337E5A = 1;
  }
  v5 = *(WTF::StringImpl **)&_MergedGlobals_44[8 * result + 48];
  if (v5)
    *(_DWORD *)v5 += 2;
  v6 = *((unsigned __int8 *)this + 48);
  if ((_MergedGlobals_44[0] & 1) == 0)
  {
    _MergedGlobals_45 += 2;
    dword_1ECE7CEB0 += 2;
    qword_1EE337E60 = (uint64_t)&_MergedGlobals_45;
    unk_1EE337E68 = &dword_1ECE7CEB0;
    dword_1ECE7CED0 += 2;
    dword_1ECE7CEF0 += 2;
    qword_1EE337E70 = (uint64_t)&dword_1ECE7CED0;
    unk_1EE337E78 = &dword_1ECE7CEF0;
    dword_1ECE7CF10 += 2;
    qword_1EE337E80 = (uint64_t)&dword_1ECE7CF10;
    _MergedGlobals_44[0] = 1;
  }
  v7 = *(_QWORD *)&_MergedGlobals_44[8 * v6 + 8];
  if (v7)
    *(_DWORD *)v7 += 2;
  if (v5)
  {
    v8 = *((_DWORD *)v5 + 1);
    if (v7)
      goto LABEL_11;
LABEL_34:
    v9 = 0;
    goto LABEL_12;
  }
  v8 = 0;
  if (!v7)
    goto LABEL_34;
LABEL_11:
  v9 = *(_DWORD *)(v7 + 4);
  if (v9 < 0)
    goto LABEL_39;
LABEL_12:
  v10 = __OFADD__(v9, 2);
  v11 = v9 + 2;
  v12 = v10;
  if (v8 < 0)
    goto LABEL_39;
  if ((v12 & 1) != 0)
    goto LABEL_39;
  v13 = (v8 + v11);
  if (__OFADD__(v8, v11))
    goto LABEL_39;
  if (!v5)
  {
    if (v7)
    {
LABEL_21:
      v15 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
      goto LABEL_22;
    }
    if ((v13 & 0x80000000) == 0)
    {
      result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
      if (v17)
      {
        *(_DWORD *)v17 = 2;
        *(_DWORD *)(v17 + 4) = v13;
        *(_WORD *)(v17 + 20) = 8236;
        *(_QWORD *)(v17 + 8) = v17 + 20;
        *(_DWORD *)(v17 + 16) = 4;
        *a2 = v17;
        return result;
      }
    }
LABEL_39:
    *a2 = 0;
    goto LABEL_40;
  }
  v14 = *((_DWORD *)v5 + 4);
  v15 = (v14 >> 2) & 1;
  if (v7 && (v14 & 4) != 0)
    goto LABEL_21;
LABEL_22:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(v13, v15, (uint64_t)v5, (int8x16_t *)", ", 2u, v7, a2);
  if (!*a2)
  {
LABEL_40:
    __break(0xC471u);
    return result;
  }
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)v7, v16);
      if (!v5)
        return result;
      goto LABEL_27;
    }
    *(_DWORD *)v7 -= 2;
  }
  if (!v5)
    return result;
LABEL_27:
  if (*(_DWORD *)v5 == 2)
    return WTF::StringImpl::destroy(v5, v16);
  *(_DWORD *)v5 -= 2;
  return result;
}

uint64_t WebCore::PlatformMediaSessionClient::mediaSessionDuration(WebCore::PlatformMediaSessionClient *this)
{
  return *(_QWORD *)WTF::MediaTime::invalidTime(this);
}

void WebCore::PlatformMediaSessionClient::nowPlayingInfo(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[112] = 0;
}

WebCore::PlatformMediaSessionManager *WebCore::PlatformMediaSessionManager::PlatformMediaSessionManager(WebCore::PlatformMediaSessionManager *this)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t StatusReg;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E3407990;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_WORD *)this + 28) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 11) = 0;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v2 = 0;
  *((_QWORD *)this + 14) = v2;
  v3 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v3 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  v5 = *(unsigned int **)(StatusReg + 736);
  if (!v5)
    v5 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)v3 = off_1E31F7378;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v7 = off_1E3407C38;
  v7[1] = WebCore::PlatformMediaSessionManager::dumpSessionStates;
  v7[2] = 0;
  v7[3] = this;
  *(_QWORD *)(v3 + 48) = v7;
  *((_QWORD *)this + 15) = v3;
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v8 + 8) = 1;
  *(_BYTE *)(v8 + 12) = 1;
  *(_QWORD *)v8 = off_1E3407BF0;
  *(_QWORD *)(v8 + 16) = this;
  *(_QWORD *)(v8 + 24) = 0;
  *((_QWORD *)this + 16) = v8;
  return this;
}

WTF::StringImpl *WebCore::PlatformMediaSessionManager::dumpSessionStates(WebCore::PlatformMediaSessionManager *this)
{
  _QWORD *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  _QWORD v9[4];
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  char v13;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E3408138;
  v2[1] = &v10;
  v9[0] = v2;
  WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)this, v9);
  (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  v3 = *((_QWORD *)this + 16);
  v9[0] = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  v9[1] = v4;
  v9[2] = "dumpSessionStates";
  v9[3] = 0;
  v5 = v10;
  if (v10
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v10),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v10),
        (v5 = v10) != 0))
  {
    *(_DWORD *)v5 += 2;
  }
  v8 = v5;
  if (*(_BYTE *)(v3 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::String>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9, " Sessions:\n", (uint64_t *)&v8);
    v5 = v8;
  }
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v11;
  v11 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::PlatformMediaSessionManager::~PlatformMediaSessionManager(WebCore::PlatformMediaSessionManager *this, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int **v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *v20;
  uint64_t v21;
  uint64_t i;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  WTF *v43;
  unsigned int v44;
  unsigned int v45;

  *(_QWORD *)this = off_1E3407990;
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  v4 = *v3;
  *v3 = 0;
  if (v4)
  {
    *(_QWORD *)(v4 + 8) = 0;
    do
    {
      v44 = __ldaxr((unsigned int *)v4);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)v4));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  v5 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v9 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (WTF *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v10)
  {
    if (*(_QWORD *)v10)
    {
      *(_QWORD *)(*(_QWORD *)v10 + 8) = 0;
      v40 = *(unsigned int **)v10;
      *(_QWORD *)v10 = 0;
      if (v40)
      {
        do
        {
          v41 = __ldaxr(v40);
          v42 = v41 - 1;
        }
        while (__stlxr(v42, v40));
        if (!v42)
        {
          atomic_store(1u, v40);
          v43 = v10;
          WTF::fastFree((WTF *)v40, a2);
          v10 = v43;
        }
      }
    }
    else
    {
      *(_QWORD *)v10 = 0;
    }
    WTF::fastFree(v10, a2);
  }
  v11 = *((_QWORD *)this + 13);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v37 = (unsigned int *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v37)
    {
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        atomic_store(1u, v37);
        WTF::fastFree((WTF *)v37, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 13) = 0;
  }
  v12 = *((_QWORD *)this + 11);
  if (v12)
  {
    v21 = *(unsigned int *)(v12 - 4);
    if ((_DWORD)v21)
    {
      for (i = 0; i != v21; ++i)
      {
        v23 = *(unsigned int **)(v12 + 8 * i);
        if (v23 != (unsigned int *)-1)
        {
          *(_QWORD *)(v12 + 8 * i) = 0;
          if (v23)
          {
            do
            {
              v24 = __ldaxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
            {
              atomic_store(1u, v23);
              v26 = v12;
              v27 = v21;
              v28 = i;
              WTF::fastFree((WTF *)v23, a2);
              i = v28;
              v21 = v27;
              v12 = v26;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
  v13 = *((_QWORD *)this + 8);
  if (v13)
  {
    v29 = *(unsigned int *)(v13 - 4);
    if ((_DWORD)v29)
    {
      for (j = 0; j != v29; ++j)
      {
        v31 = *(unsigned int **)(v13 + 8 * j);
        if (v31 != (unsigned int *)-1)
        {
          *(_QWORD *)(v13 + 8 * j) = 0;
          if (v31)
          {
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              atomic_store(1u, v31);
              v34 = v13;
              v35 = v29;
              v36 = j;
              WTF::fastFree((WTF *)v31, a2);
              j = v36;
              v29 = v35;
              v13 = v34;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v13 - 16), a2);
  }
  v14 = *((unsigned int *)this + 11);
  if ((_DWORD)v14)
  {
    v15 = (unsigned int **)*((_QWORD *)this + 4);
    v16 = &v15[v14];
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, a2);
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
  v20 = (WTF *)*((_QWORD *)this + 4);
  if (v20)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v20, a2);
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::PlatformMediaSessionManager::~PlatformMediaSessionManager(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::PlatformMediaSessionManager::resetRestrictions(uint64_t this)
{
  *(_QWORD *)(this + 20) = 0;
  *(_QWORD *)(this + 12) = 0;
  return this;
}

uint64_t WebCore::PlatformMediaSessionManager::activeAudioSessionRequired(WebCore::PlatformMediaSessionManager *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = WTF::fastMalloc((WTF *)0x10);
  v3 = off_1E3407C60;
  *(_QWORD *)v2 = off_1E3407C60;
  v4 = *((unsigned int *)this + 11);
  if ((_DWORD)v4)
  {
    v5 = *((_QWORD *)this + 4);
    v6 = 8 * v4;
    while (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, *(_QWORD *)(*(_QWORD *)v5 + 8)))
    {
      v5 += 8;
      v6 -= 8;
      if (!v6)
      {
        v3 = *(uint64_t (***)())v2;
        goto LABEL_6;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    return 1;
  }
LABEL_6:
  ((void (*)(uint64_t))v3[1])(v2);
  v7 = *((_QWORD *)this + 8);
  if (!v7)
  {
    v8 = 0;
    v9 = 0;
LABEL_8:
    v10 = v8;
    v8 = v7 + 8 * v9;
    goto LABEL_9;
  }
  v9 = *(unsigned int *)(v7 - 4);
  v8 = v7 + 8 * v9;
  if (!*(_DWORD *)(v7 - 12))
    goto LABEL_8;
  if (!(_DWORD)v9)
  {
    v18 = 0;
    v10 = *((_QWORD *)this + 8);
    goto LABEL_54;
  }
  v17 = 8 * v9;
  v10 = *((_QWORD *)this + 8);
  while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
  {
    v10 += 8;
    v17 -= 8;
    if (!v17)
    {
      v10 = v8;
      break;
    }
  }
LABEL_9:
  if (!v7)
  {
    v11 = 0;
    goto LABEL_11;
  }
  v18 = *(unsigned int *)(v7 - 4);
LABEL_54:
  v11 = v7 + 8 * v18;
LABEL_11:
  if (v11 != v10)
  {
    while (!*(_QWORD *)(*(_QWORD *)v10 + 8))
    {
      v12 = v10 + 8;
      v10 = v8;
      if (v12 != v8)
      {
        v10 = v12;
        while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
        {
          v10 += 8;
          if (v10 == v8)
          {
            v10 = v8;
            break;
          }
        }
      }
      if (v10 == v11)
      {
        v10 = v11;
        break;
      }
    }
  }
  if (v7)
    v13 = v7 + 8 * *(unsigned int *)(v7 - 4);
  else
    v13 = 0;
  if (v10 != v13)
  {
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v10 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v10 + 8));
      if ((result & 1) != 0)
        return 1;
      v15 = v8;
      if (v10 + 8 != v8)
      {
        v15 = v10 + 8;
        while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
        {
          v15 += 8;
          if (v15 == v8)
          {
            v15 = v8;
            break;
          }
        }
      }
      v10 = v11;
      if (v15 != v11)
      {
        v10 = v15;
        if (!*(_QWORD *)(*(_QWORD *)v15 + 8))
        {
          while (1)
          {
            v16 = v10 + 8;
            v10 = v8;
            if (v16 != v8)
            {
              v10 = v16;
              while ((unint64_t)(*(_QWORD *)v10 + 1) <= 1)
              {
                v10 += 8;
                if (v10 == v8)
                {
                  v10 = v8;
                  break;
                }
              }
            }
            if (v10 == v11)
              break;
            if (*(_QWORD *)(*(_QWORD *)v10 + 8))
              goto LABEL_40;
          }
          v10 = v11;
        }
      }
LABEL_40:
      ++*((_DWORD *)this + 18);
      if (v10 == v13)
        return result;
    }
  }
  return 0;
}

void WebCore::PlatformMediaSessionManager::nowPlayingInfo(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[112] = 0;
}

uint64_t WebCore::PlatformMediaSessionManager::countActiveAudioCaptureSources(WebCore::PlatformMediaSessionManager *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;

  v2 = *((_QWORD *)this + 8);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v17 = 0;
    v5 = (uint64_t *)*((_QWORD *)this + 8);
    goto LABEL_48;
  }
  v16 = 8 * v4;
  v5 = (uint64_t *)*((_QWORD *)this + 8);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v16 -= 8;
    if (!v16)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v17 = *(unsigned int *)(v2 - 4);
LABEL_48:
  v6 = (uint64_t *)(v2 + 8 * v17);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  if (v5 == v8)
    return 0;
  LODWORD(v9) = 0;
  do
  {
    v11 = *v5;
    v10 = v5 + 1;
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 24))(*(_QWORD *)(v11 + 8));
    v13 = v3;
    if (v10 != v3)
    {
      v13 = v10;
      while ((unint64_t)(*v13 + 1) <= 1)
      {
        if (++v13 == v3)
        {
          v13 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v13 != v6)
    {
      v5 = v13;
      if (!*(_QWORD *)(*v13 + 8))
      {
        while (1)
        {
          v14 = v5 + 1;
          v5 = v3;
          if (v14 != v3)
          {
            v5 = v14;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_35;
        }
        v5 = v6;
      }
    }
LABEL_35:
    v9 = (v9 + v12);
    ++*((_DWORD *)this + 18);
  }
  while (v5 != v8);
  return v9;
}

uint64_t WebCore::PlatformMediaSessionManager::beginInterruption(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9[4];

  v4 = *(_QWORD *)(a1 + 128);
  v9[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v9[1] = v5;
  v9[2] = (uint64_t)"beginInterruption";
  v9[3] = 0;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  *(_WORD *)(a1 + 48) = a2 | 0x100;
  v6 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3407C88;
  v6[8] = a2;
  v9[0] = (uint64_t)v6;
  WebCore::PlatformMediaSessionManager::forEachSession(a1, v9);
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
  if (!*(_BYTE *)(a1 + 80))
  {
    *(_BYTE *)(a1 + 80) = 1;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3408070;
    v8[1] = a1;
    v9[0] = (uint64_t)v8;
    WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(a1, v9);
    result = v9[0];
    if (v9[0])
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
  }
  return result;
}

char *WebCore::PlatformMediaSessionManager::logChannel(WebCore::PlatformMediaSessionManager *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::PlatformMediaSessionManager::forEachSession(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  WTF *v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int **v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int **v15;
  uint64_t v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v2 = *(unsigned int *)(result + 44);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = result;
      v5 = WTF::fastMalloc((WTF *)(8 * v2));
      v7 = (WTF *)v5;
      v8 = *(unsigned int *)(v4 + 44);
      if ((_DWORD)v8)
      {
        v9 = *(unsigned int ***)(v4 + 32);
        v10 = &v9[v8];
        v11 = (unsigned int **)v5;
        do
        {
          v12 = *v9;
          if (*v9)
          {
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 + 1, v12));
          }
          *v11++ = v12;
          ++v9;
        }
        while (v9 != v10);
      }
      v14 = 0;
      v15 = (unsigned int **)(v5 + 8 * v2);
      do
      {
        v16 = *(_QWORD *)((char *)v7 + v14);
        if (v16)
        {
          v6 = *(void **)(v16 + 8);
          if (v6)
            (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
        }
        v14 += 8;
      }
      while (8 * v2 != v14);
      v17 = (unsigned int **)v7;
      do
      {
        v18 = *v17;
        *v17 = 0;
        if (v18)
        {
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, v6);
          }
        }
        ++v17;
      }
      while (v17 != v15);
      return WTF::fastFree(v7, v6);
    }
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::endInterruption(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _QWORD v8[4];

  v4 = *(_QWORD *)(a1 + 128);
  v8[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v8[1] = v5;
  v8[2] = "endInterruption";
  v8[3] = 0;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  *(_WORD *)(a1 + 48) = 0;
  v6 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v6 = off_1E3407CB0;
  v6[8] = a2;
  v8[0] = v6;
  WebCore::PlatformMediaSessionManager::forEachSession(a1, v8);
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v6 + 8))(v6);
}

unsigned int *WebCore::PlatformMediaSessionManager::addSession(WebCore::PlatformMediaSessionManager *this, WebCore::PlatformMediaSession *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *result;
  unsigned int *v22;
  uint64_t *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int **v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  uint64_t v46[4];

  v4 = *((_QWORD *)this + 16);
  v46[0] = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  v46[1] = v5;
  v46[2] = (uint64_t)"addSession";
  v46[3] = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)a2 + 4) + 256))(*((_QWORD *)a2 + 4));
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v46);
  v6 = (unsigned int *)((char *)this + 32);
  v7 = *((unsigned int *)this + 11);
  if ((_DWORD)v7 == *((_DWORD *)this + 10))
  {
    WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, v7 + 1);
    v7 = *((unsigned int *)this + 11);
    v8 = *((_QWORD *)this + 4);
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
      goto LABEL_58;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = a2;
    v11 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v9;
    if (!v11)
      goto LABEL_58;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, v10);
    }
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
    {
LABEL_58:
      do
        v14 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v14 + 1, (unsigned int *)v9));
    }
  }
  else
  {
    v8 = *(_QWORD *)v6;
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
      goto LABEL_59;
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = a2;
    v16 = (unsigned int *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v9;
    if (!v16)
      goto LABEL_59;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v15);
    }
    v9 = *((_QWORD *)a2 + 2);
    if (v9)
    {
LABEL_59:
      do
        v19 = __ldaxr((unsigned int *)v9);
      while (__stlxr(v19 + 1, (unsigned int *)v9));
    }
  }
  *(_QWORD *)(v8 + 8 * v7) = v9;
  ++*((_DWORD *)this + 11);
  if (*((_BYTE *)this + 49))
    WebCore::PlatformMediaSession::beginInterruption((uint64_t)a2, *((unsigned __int8 *)this + 48));
  v20 = *((_QWORD *)this + 16);
  result = (unsigned int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 4) + 248))(*((_QWORD *)a2 + 4));
  v22 = result;
  v23 = (uint64_t *)(v20 + 24);
  v24 = result + 2;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 + 1, v24));
  v26 = *v23;
  if (*v23
    || (result = (unsigned int *)WTF::HashTable<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>,WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>,WTF::HashTraits<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>,WTF::HashTraits<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>>::rehash(v23, 8u), (v26 = *v23) != 0))
  {
    v27 = *(_DWORD *)(v26 - 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = ((unint64_t)v22 + ~((_QWORD)v22 << 32)) ^ (((unint64_t)v22 + ~((_QWORD)v22 << 32)) >> 22);
  v29 = 9 * ((v28 + ~(v28 << 13)) ^ ((v28 + ~(v28 << 13)) >> 8));
  v30 = (v29 ^ (v29 >> 15)) + ~((v29 ^ (v29 >> 15)) << 27);
  v31 = v27 & ((v30 >> 31) ^ v30);
  v32 = (unsigned int **)(v26 + 8 * v31);
  v33 = *v32;
  if (!*v32)
  {
LABEL_34:
    *v32 = v22;
    v36 = *v23;
    if (*v23)
      v37 = *(_DWORD *)(v36 - 12) + 1;
    else
      v37 = 1;
    *(_DWORD *)(v36 - 12) = v37;
    v40 = *v23;
    if (*v23)
      v41 = *(_DWORD *)(v40 - 12);
    else
      v41 = 0;
    v42 = (*(_DWORD *)(v40 - 16) + v41);
    v43 = *(unsigned int *)(v40 - 4);
    if (v43 > 0x400)
    {
      if (v43 > 2 * v42)
        goto LABEL_50;
    }
    else
    {
      if (3 * v43 > 4 * v42)
        goto LABEL_50;
      if (!(_DWORD)v43)
      {
        v44 = 8;
        goto LABEL_49;
      }
    }
    v44 = (_DWORD)v43 << (6 * *(_DWORD *)(v40 - 12) >= (2 * v43));
LABEL_49:
    result = (unsigned int *)WTF::HashTable<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>,WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>,WTF::HashTraits<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>,WTF::HashTraits<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>>::rehash(v23, v44);
    goto LABEL_50;
  }
  v34 = 0;
  v35 = 1;
  while (v33 != v22)
  {
    if (v33 == (unsigned int *)-1)
      v34 = v32;
    v31 = (v31 + v35) & v27;
    v32 = (unsigned int **)(v26 + 8 * v31);
    v33 = *v32;
    ++v35;
    if (!*v32)
    {
      if (v34)
      {
        *v34 = 0;
        --*(_DWORD *)(*v23 - 16);
        v32 = v34;
      }
      goto LABEL_34;
    }
  }
  do
  {
    v38 = __ldaxr(v24);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v24));
  if (!v39)
  {
    atomic_store(1u, v22 + 2);
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
  }
LABEL_50:
  if (!*((_BYTE *)this + 80))
  {
    *((_BYTE *)this + 80) = 1;
    v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v45 = off_1E3408070;
    v45[1] = this;
    v46[0] = (uint64_t)v45;
    WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, v46);
    result = (unsigned int *)v46[0];
    if (v46[0])
      return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46[0] + 8))(v46[0]);
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::removeSession(WebCore::PlatformMediaSessionManager *this, WebCore::PlatformMediaSession *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  _QWORD *i;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::AudioSession *v18;
  uint64_t v19;
  WebCore::AudioSessionIOS *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  WebCore::AudioSession *v41;
  WebCore::AudioSession *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;

  v4 = *((_QWORD *)this + 16);
  v42 = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  v43 = v5;
  v44 = "removeSession";
  v45 = 0;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 4) + 256))(*((_QWORD *)a2 + 4));
  if (*(_BYTE *)(v4 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v42);
  v8 = *((unsigned int *)this + 11);
  if ((_DWORD)v8)
  {
    for (i = (_QWORD *)(*((_QWORD *)this + 4) + 8); ; ++i)
    {
      result = *(i - 1);
      if (result)
      {
        if (*(WebCore::PlatformMediaSession **)(result + 8) == a2)
          break;
      }
      if (!--v8)
        return result;
    }
    *(i - 1) = 0;
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      WTF::fastFree((WTF *)result, v7);
    }
    v12 = *((unsigned int *)this + 11);
    v13 = *((_QWORD *)this + 4) + 8 * v12;
    while (i != (_QWORD *)v13)
    {
      *(i - 1) = *i;
      *i++ = 0;
    }
    v14 = v12 - 1;
    *((_DWORD *)this + 11) = v12 - 1;
    if ((_DWORD)v12 == 1)
    {
LABEL_21:
      if ((WebCore::PlatformMediaSessionManager::activeAudioSessionRequired(this) & 1) == 0
        && *((_BYTE *)this + 57)
        && WebCore::deactivateAudioSession(void)::deactivate)
      {
        v17 = *((_QWORD *)this + 16);
        v18 = (WebCore::AudioSession *)(*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
        v42 = v18;
        v43 = v19;
        v44 = "maybeDeactivateAudioSession";
        v45 = 0;
        if (*(_BYTE *)(v17 + 12))
          v18 = (WebCore::AudioSession *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v42, "tried to set inactive AudioSession");
        v20 = WebCore::AudioSession::sharedSession(v18);
        WebCore::AudioSession::tryToSetActive(v20, 0);
        *((_BYTE *)this + 57) = 0;
      }
    }
    else
    {
      v15 = *((_QWORD *)this + 4);
      v16 = 8 * v14;
      while (!*(_QWORD *)v15 || !*(_QWORD *)(*(_QWORD *)v15 + 8))
      {
        v15 += 8;
        v16 -= 8;
        if (!v16)
          goto LABEL_21;
      }
    }
    v21 = *((_QWORD *)this + 16);
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 4) + 248))(*((_QWORD *)a2 + 4));
    v24 = *(_QWORD *)(v21 + 24);
    v23 = (uint64_t *)(v21 + 24);
    v22 = v24;
    if (v24)
    {
      v25 = *(_DWORD *)(v22 - 8);
      v26 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
      v29 = v25 & ((v28 >> 31) ^ v28);
      v30 = *(_QWORD *)(v22 + 8 * v29);
      if (v30 != result)
      {
        v31 = 1;
        while (v30)
        {
          v29 = ((_DWORD)v29 + v31) & v25;
          v30 = *(_QWORD *)(v22 + 8 * v29);
          ++v31;
          if (v30 == result)
            goto LABEL_34;
        }
        v29 = *(unsigned int *)(v22 - 4);
      }
LABEL_34:
      if (v29 != *(_DWORD *)(v22 - 4))
      {
        result = *(_QWORD *)(v22 + 8 * v29);
        *(_QWORD *)(v22 + 8 * v29) = -1;
        if (result)
        {
          v32 = (unsigned int *)(result + 8);
          do
          {
            v33 = __ldaxr(v32);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, v32));
          if (!v34)
          {
            atomic_store(1u, (unsigned int *)(result + 8));
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          }
        }
        ++*(_DWORD *)(*v23 - 16);
        v35 = *v23;
        if (*v23)
          v36 = *(_DWORD *)(v35 - 12) - 1;
        else
          v36 = -1;
        *(_DWORD *)(v35 - 12) = v36;
        v37 = *v23;
        if (*v23)
        {
          v38 = 6 * *(_DWORD *)(v37 - 12);
          v39 = *(_DWORD *)(v37 - 4);
          if (v38 < v39 && v39 >= 9)
            result = WTF::HashTable<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>,WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>,WTF::HashTraits<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>,WTF::HashTraits<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>>::rehash(v23, v39 >> 1);
        }
      }
    }
    if (!*((_BYTE *)this + 80))
    {
      *((_BYTE *)this + 80) = 1;
      v41 = (WebCore::AudioSession *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v41 = off_1E3408070;
      *((_QWORD *)v41 + 1) = this;
      v42 = v41;
      WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, (uint64_t *)&v42);
      result = (uint64_t)v42;
      if (v42)
        return (*(uint64_t (**)(WebCore::AudioSession *))(*(_QWORD *)v42 + 8))(v42);
    }
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::addRestriction(uint64_t result, unsigned int a2, int a3)
{
  *(_DWORD *)(result + 4 * a2 + 8) |= a3;
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::removeRestriction(uint64_t result, unsigned int a2, int a3)
{
  *(_DWORD *)(result + 4 * a2 + 8) &= ~a3;
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::restrictions(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 4 * a2 + 8);
}

uint64_t WebCore::PlatformMediaSessionManager::sessionWillBeginPlayback(WebCore::PlatformMediaSessionManager *this, WebCore::PlatformMediaSession *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  NSObject *v43;
  uint64_t v44;
  void *v45;
  char *v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::Logger *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::Logger *v60;
  uint64_t v61;
  WTF::StringImpl **v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  unsigned int v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  NSObject *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  WTF::Logger *v84;
  uint64_t v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::Logger *v89;
  uint64_t v90;
  WTF::StringImpl **v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  int v96;
  unsigned int v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  NSObject *v102;
  uint64_t v103;
  char *v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  WTF::Logger *v112;
  uint64_t v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::Logger *v117;
  uint64_t v118;
  WTF::StringImpl **v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  WTF::Logger *v132;
  uint64_t v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  __int128 buf;
  const char *v139;
  WTF::StringImpl *v140;
  int v141;
  WTF::StringImpl *v142[3];

  v142[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  (*(void (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 216))(this);
  v4 = *((_DWORD *)this + (***((unsigned int (****)(_QWORD))a2 + 4))(*((_QWORD *)a2 + 4)) + 2);
  if (*((_BYTE *)a2 + 48) == 4 && (v4 & 8) != 0)
  {
    v5 = *((_QWORD *)this + 16);
    v128 = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
    v129 = v6;
    v130 = "sessionWillBeginPlayback";
    v131 = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)a2 + 4) + 256))(*((_QWORD *)a2 + 4));
    if (*(_BYTE *)(v5 + 12))
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
      WTF::LogArgument<void const*>::toString();
      WTF::String::String((WTF::String *)&v134, " returning false because session.state() is Interrupted, and InterruptedPlaybackNotPermitted");
      if (v136)
      {
        v7 = *((_DWORD *)v136 + 1);
        if (v135)
          goto LABEL_6;
      }
      else
      {
        v7 = 0;
        if (v135)
        {
LABEL_6:
          v8 = *((_DWORD *)v135 + 1);
          if (v134)
          {
LABEL_7:
            v9 = *((_DWORD *)v134 + 1);
LABEL_8:
            if ((v9 | v8) < 0
              || ((v10 = __OFADD__(v8, v9), v11 = v8 + v9, !v10) ? (v12 = 0) : (v12 = 1),
                  v7 < 0 || (v12 & 1) != 0 || (v13 = (v7 + v11), __OFADD__(v7, v11))))
            {
              v137 = 0;
              goto LABEL_287;
            }
            if (v136 && (*((_BYTE *)v136 + 16) & 4) == 0)
            {
              v14 = 0;
              goto LABEL_59;
            }
            if (v135)
            {
              v38 = *((_DWORD *)v135 + 4);
              v14 = (v38 >> 2) & 1;
              if (v134 && (v38 & 4) != 0)
                goto LABEL_58;
            }
            else
            {
              if (v134)
              {
LABEL_58:
                v14 = (*((unsigned __int8 *)v134 + 16) >> 2) & 1;
                goto LABEL_59;
              }
              v14 = 1;
            }
LABEL_59:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v13, v14, v136, (uint64_t)v135, (uint64_t)v134, &v137);
            if (v137)
            {
              v40 = v134;
              v134 = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, v39);
                else
                  *(_DWORD *)v40 -= 2;
              }
              v41 = v135;
              v135 = 0;
              if (v41)
              {
                if (*(_DWORD *)v41 == 2)
                  WTF::StringImpl::destroy(v41, v39);
                else
                  *(_DWORD *)v41 -= 2;
              }
              v42 = v136;
              v136 = 0;
              if (v42)
              {
                if (*(_DWORD *)v42 == 2)
                  WTF::StringImpl::destroy(v42, v39);
                else
                  *(_DWORD *)v42 -= 2;
              }
              v43 = qword_1ECE7C4A0;
              v44 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v44)
              {
                WTF::String::utf8();
                v46 = v132 ? (char *)v132 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v46;
                _os_log_impl(&dword_1940B8000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v44 = (uint64_t)v132;
                v132 = 0;
                if (v44)
                {
                  if (*(_DWORD *)v44 == 1)
                    v44 = WTF::fastFree((WTF *)v44, v45);
                  else
                    --*(_DWORD *)v44;
                }
              }
              if (WebCore::LogMedia)
              {
                v47 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v48 = *v47;
                  if ((v48 & 1) != 0)
                    break;
                  v49 = __ldaxr(v47);
                  if (v49 == v48)
                  {
                    if (!__stxr(v48 | 1, v47))
                    {
                      v50 = WTF::Logger::observers((WTF::Logger *)v44);
                      v51 = *(unsigned int *)(v50 + 12);
                      if ((_DWORD)v51)
                      {
                        v52 = *(uint64_t **)v50;
                        v53 = *(_QWORD *)v50 + 8 * v51;
                        do
                        {
                          v54 = *v52;
                          LODWORD(buf) = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
                          LODWORD(v139) = 0;
                          WTF::LogArgument<void const*>::toString();
                          v141 = 0;
                          WTF::String::String((WTF::String *)v142, " returning false because session.state() is Interrupted, and InterruptedPlaybackNotPermitted");
                          v132 = 0;
                          v133 = 0;
                          v55 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                          LODWORD(v133) = 3;
                          v132 = v55;
                          v56 = HIDWORD(v133);
                          *((_DWORD *)v55 + 4 * HIDWORD(v133)) = buf;
                          v57 = *((_QWORD *)&buf + 1);
                          if (*((_QWORD *)&buf + 1))
                            **((_DWORD **)&buf + 1) += 2;
                          *((_QWORD *)v55 + 2 * v56 + 1) = v57;
                          *((_DWORD *)v55 + 4 * (v56 + 1)) = (_DWORD)v139;
                          v58 = v140;
                          if (v140)
                            *(_DWORD *)v140 += 2;
                          *((_QWORD *)v55 + 2 * (v56 + 1) + 1) = v58;
                          *((_DWORD *)v55 + 4 * (v56 + 2)) = v141;
                          v59 = v142[0];
                          if (v142[0])
                            *(_DWORD *)v142[0] += 2;
                          *((_QWORD *)v55 + 2 * (v56 + 2) + 1) = v59;
                          HIDWORD(v133) = v56 + 3;
                          (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v54 + 16))(v54, &WebCore::LogMedia, 0, &v132);
                          v60 = v132;
                          if (HIDWORD(v133))
                          {
                            v61 = 16 * HIDWORD(v133);
                            v62 = (WTF::StringImpl **)((char *)v132 + 8);
                            do
                            {
                              v63 = *v62;
                              *v62 = 0;
                              if (v63)
                              {
                                if (*(_DWORD *)v63 == 2)
                                  WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v45);
                                else
                                  *(_DWORD *)v63 -= 2;
                              }
                              v62 += 2;
                              v61 -= 16;
                            }
                            while (v61);
                            v60 = v132;
                          }
                          if (v60)
                          {
                            v132 = 0;
                            LODWORD(v133) = 0;
                            WTF::fastFree(v60, v45);
                          }
                          v64 = v142[0];
                          v142[0] = 0;
                          if (v64)
                          {
                            if (*(_DWORD *)v64 == 2)
                              WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v45);
                            else
                              *(_DWORD *)v64 -= 2;
                          }
                          v65 = v140;
                          v140 = 0;
                          if (v65)
                          {
                            if (*(_DWORD *)v65 == 2)
                              WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v45);
                            else
                              *(_DWORD *)v65 -= 2;
                          }
                          v66 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                          *((_QWORD *)&buf + 1) = 0;
                          if (v66)
                          {
                            if (*(_DWORD *)v66 == 2)
                              WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v45);
                            else
                              *(_DWORD *)v66 -= 2;
                          }
                          ++v52;
                        }
                        while (v52 != (uint64_t *)v53);
                      }
                      goto LABEL_238;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
LABEL_243:
              v125 = v137;
              v137 = 0;
              if (v125)
              {
                if (*(_DWORD *)v125 == 2)
                  WTF::StringImpl::destroy(v125, (WTF::StringImpl *)v45);
                else
                  *(_DWORD *)v125 -= 2;
              }
              return 0;
            }
            goto LABEL_287;
          }
LABEL_260:
          v9 = 0;
          goto LABEL_8;
        }
      }
      v8 = 0;
      if (v134)
        goto LABEL_7;
      goto LABEL_260;
    }
    return 0;
  }
  if ((WebCore::PlatformMediaSessionManager::maybeActivateAudioSession(this) & 1) == 0)
  {
    v29 = *((_QWORD *)this + 16);
    v128 = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
    v129 = v30;
    v130 = "sessionWillBeginPlayback";
    v131 = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)a2 + 4) + 256))(*((_QWORD *)a2 + 4));
    if (!*(_BYTE *)(v29 + 12))
      return 0;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v134, " returning false, failed to activate AudioSession");
    if (v136)
    {
      v31 = *((_DWORD *)v136 + 1);
      if (v135)
        goto LABEL_43;
    }
    else
    {
      v31 = 0;
      if (v135)
      {
LABEL_43:
        v32 = *((_DWORD *)v135 + 1);
        if (v134)
        {
LABEL_44:
          v33 = *((_DWORD *)v134 + 1);
LABEL_45:
          if ((v33 | v32) < 0
            || ((v10 = __OFADD__(v32, v33), v34 = v32 + v33, !v10) ? (v35 = 0) : (v35 = 1),
                v31 < 0 || (v35 & 1) != 0 || (v36 = (v31 + v34), __OFADD__(v31, v34))))
          {
            v137 = 0;
            goto LABEL_287;
          }
          if (v136 && (*((_BYTE *)v136 + 16) & 4) == 0)
          {
            v37 = 0;
            goto LABEL_182;
          }
          if (v135)
          {
            v97 = *((_DWORD *)v135 + 4);
            v37 = (v97 >> 2) & 1;
            if (v134 && (v97 & 4) != 0)
              goto LABEL_181;
          }
          else
          {
            if (v134)
            {
LABEL_181:
              v37 = (*((unsigned __int8 *)v134 + 16) >> 2) & 1;
              goto LABEL_182;
            }
            v37 = 1;
          }
LABEL_182:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v36, v37, v136, (uint64_t)v135, (uint64_t)v134, &v137);
          if (v137)
          {
            v99 = v134;
            v134 = 0;
            if (v99)
            {
              if (*(_DWORD *)v99 == 2)
                WTF::StringImpl::destroy(v99, v98);
              else
                *(_DWORD *)v99 -= 2;
            }
            v100 = v135;
            v135 = 0;
            if (v100)
            {
              if (*(_DWORD *)v100 == 2)
                WTF::StringImpl::destroy(v100, v98);
              else
                *(_DWORD *)v100 -= 2;
            }
            v101 = v136;
            v136 = 0;
            if (v101)
            {
              if (*(_DWORD *)v101 == 2)
                WTF::StringImpl::destroy(v101, v98);
              else
                *(_DWORD *)v101 -= 2;
            }
            v102 = qword_1ECE7C4A0;
            v103 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v103)
            {
              WTF::String::utf8();
              v104 = v132 ? (char *)v132 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v104;
              _os_log_impl(&dword_1940B8000, v102, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v103 = (uint64_t)v132;
              v132 = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 1)
                  v103 = WTF::fastFree((WTF *)v103, v45);
                else
                  --*(_DWORD *)v103;
              }
            }
            if (WebCore::LogMedia)
            {
              v47 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v105 = *v47;
                if ((v105 & 1) != 0)
                  break;
                v106 = __ldaxr(v47);
                if (v106 == v105)
                {
                  if (!__stxr(v105 | 1, v47))
                  {
                    v107 = WTF::Logger::observers((WTF::Logger *)v103);
                    v108 = *(unsigned int *)(v107 + 12);
                    if ((_DWORD)v108)
                    {
                      v109 = *(uint64_t **)v107;
                      v110 = *(_QWORD *)v107 + 8 * v108;
                      do
                      {
                        v111 = *v109;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
                        LODWORD(v139) = 0;
                        WTF::LogArgument<void const*>::toString();
                        v141 = 0;
                        WTF::String::String((WTF::String *)v142, " returning false, failed to activate AudioSession");
                        v132 = 0;
                        v133 = 0;
                        v112 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v133) = 3;
                        v132 = v112;
                        v113 = HIDWORD(v133);
                        *((_DWORD *)v112 + 4 * HIDWORD(v133)) = buf;
                        v114 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v112 + 2 * v113 + 1) = v114;
                        *((_DWORD *)v112 + 4 * (v113 + 1)) = (_DWORD)v139;
                        v115 = v140;
                        if (v140)
                          *(_DWORD *)v140 += 2;
                        *((_QWORD *)v112 + 2 * (v113 + 1) + 1) = v115;
                        *((_DWORD *)v112 + 4 * (v113 + 2)) = v141;
                        v116 = v142[0];
                        if (v142[0])
                          *(_DWORD *)v142[0] += 2;
                        *((_QWORD *)v112 + 2 * (v113 + 2) + 1) = v116;
                        HIDWORD(v133) = v113 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v111 + 16))(v111, &WebCore::LogMedia, 0, &v132);
                        v117 = v132;
                        if (HIDWORD(v133))
                        {
                          v118 = 16 * HIDWORD(v133);
                          v119 = (WTF::StringImpl **)((char *)v132 + 8);
                          do
                          {
                            v120 = *v119;
                            *v119 = 0;
                            if (v120)
                            {
                              if (*(_DWORD *)v120 == 2)
                                WTF::StringImpl::destroy(v120, (WTF::StringImpl *)v45);
                              else
                                *(_DWORD *)v120 -= 2;
                            }
                            v119 += 2;
                            v118 -= 16;
                          }
                          while (v118);
                          v117 = v132;
                        }
                        if (v117)
                        {
                          v132 = 0;
                          LODWORD(v133) = 0;
                          WTF::fastFree(v117, v45);
                        }
                        v121 = v142[0];
                        v142[0] = 0;
                        if (v121)
                        {
                          if (*(_DWORD *)v121 == 2)
                            WTF::StringImpl::destroy(v121, (WTF::StringImpl *)v45);
                          else
                            *(_DWORD *)v121 -= 2;
                        }
                        v122 = v140;
                        v140 = 0;
                        if (v122)
                        {
                          if (*(_DWORD *)v122 == 2)
                            WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v45);
                          else
                            *(_DWORD *)v122 -= 2;
                        }
                        v123 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v123)
                        {
                          if (*(_DWORD *)v123 == 2)
                            WTF::StringImpl::destroy(v123, (WTF::StringImpl *)v45);
                          else
                            *(_DWORD *)v123 -= 2;
                        }
                        ++v109;
                      }
                      while (v109 != (uint64_t *)v110);
                    }
LABEL_238:
                    v124 = __ldxr(v47);
                    if (v124 == 1)
                    {
                      if (!__stlxr(0, v47))
                        goto LABEL_243;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    goto LABEL_243;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            goto LABEL_243;
          }
LABEL_287:
          __break(0xC471u);
          JUMPOUT(0x196111BCCLL);
        }
LABEL_275:
        v33 = 0;
        goto LABEL_45;
      }
    }
    v32 = 0;
    if (v134)
      goto LABEL_44;
    goto LABEL_275;
  }
  if (*((_BYTE *)this + 49))
  {
    v15 = *((_QWORD *)this + 16);
    *(_QWORD *)&buf = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
    *((_QWORD *)&buf + 1) = v16;
    v139 = "endInterruption";
    v140 = 0;
    if (*(_BYTE *)(v15 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
    *((_WORD *)this + 24) = 0;
    v17 = (_BYTE *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v17 = off_1E3407CB0;
    v17[8] = 0;
    *(_QWORD *)&buf = v17;
    WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)this, &buf);
    (*(void (**)(_BYTE *))(*(_QWORD *)v17 + 8))(v17);
  }
  if ((v4 & 1) != 0)
  {
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v18 = off_1E3407CD8;
    v18[1] = a2;
    *(_QWORD *)&buf = v18;
    v19 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v19 = off_1E3407D00;
    v128 = v19;
    WebCore::PlatformMediaSessionManager::forEachMatchingSession((uint64_t)this, &buf, &v128);
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    (*(void (**)(_QWORD *))(*v18 + 8))(v18);
  }
  v20 = *((_QWORD *)this + 16);
  v128 = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  v129 = v21;
  v130 = "sessionWillBeginPlayback";
  v131 = 0;
  (*(void (**)(_QWORD))(**((_QWORD **)a2 + 4) + 256))(*((_QWORD *)a2 + 4));
  if (*(_BYTE *)(v20 + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v134, " returning true");
    if (v136)
    {
      v22 = *((_DWORD *)v136 + 1);
      if (v135)
        goto LABEL_28;
    }
    else
    {
      v22 = 0;
      if (v135)
      {
LABEL_28:
        v23 = *((_DWORD *)v135 + 1);
        if (v134)
        {
LABEL_29:
          v24 = *((_DWORD *)v134 + 1);
LABEL_30:
          if ((v24 | v23) < 0
            || ((v10 = __OFADD__(v23, v24), v25 = v23 + v24, !v10) ? (v26 = 0) : (v26 = 1),
                v22 < 0 || (v26 & 1) != 0 || (v27 = (v22 + v25), __OFADD__(v22, v25))))
          {
            v137 = 0;
            goto LABEL_285;
          }
          if (v136 && (*((_BYTE *)v136 + 16) & 4) == 0)
          {
            v28 = 0;
            goto LABEL_119;
          }
          if (v135)
          {
            v67 = *((_DWORD *)v135 + 4);
            v28 = (v67 >> 2) & 1;
            if (v134 && (v67 & 4) != 0)
              goto LABEL_118;
          }
          else
          {
            if (v134)
            {
LABEL_118:
              v28 = (*((unsigned __int8 *)v134 + 16) >> 2) & 1;
              goto LABEL_119;
            }
            v28 = 1;
          }
LABEL_119:
          WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v27, v28, v136, (uint64_t)v135, (uint64_t)v134, &v137);
          if (v137)
          {
            v69 = v134;
            v134 = 0;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2)
                WTF::StringImpl::destroy(v69, v68);
              else
                *(_DWORD *)v69 -= 2;
            }
            v70 = v135;
            v135 = 0;
            if (v70)
            {
              if (*(_DWORD *)v70 == 2)
                WTF::StringImpl::destroy(v70, v68);
              else
                *(_DWORD *)v70 -= 2;
            }
            v71 = v136;
            v136 = 0;
            if (v71)
            {
              if (*(_DWORD *)v71 == 2)
                WTF::StringImpl::destroy(v71, v68);
              else
                *(_DWORD *)v71 -= 2;
            }
            v72 = qword_1ECE7C4A0;
            v73 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v73)
            {
              WTF::String::utf8();
              v75 = v132 ? (char *)v132 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v75;
              _os_log_impl(&dword_1940B8000, v72, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v73 = (uint64_t)v132;
              v132 = 0;
              if (v73)
              {
                if (*(_DWORD *)v73 == 1)
                  v73 = WTF::fastFree((WTF *)v73, v74);
                else
                  --*(_DWORD *)v73;
              }
            }
            if (WebCore::LogMedia)
            {
              v76 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v77 = *v76;
                if ((v77 & 1) != 0)
                  break;
                v78 = __ldaxr(v76);
                if (v78 == v77)
                {
                  if (!__stxr(v77 | 1, v76))
                  {
                    v79 = WTF::Logger::observers((WTF::Logger *)v73);
                    v80 = *(unsigned int *)(v79 + 12);
                    if ((_DWORD)v80)
                    {
                      v81 = *(uint64_t **)v79;
                      v82 = *(_QWORD *)v79 + 8 * v80;
                      do
                      {
                        v83 = *v81;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v128);
                        LODWORD(v139) = 0;
                        WTF::LogArgument<void const*>::toString();
                        v141 = 0;
                        WTF::String::String((WTF::String *)v142, " returning true");
                        v132 = 0;
                        v133 = 0;
                        v84 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v133) = 3;
                        v132 = v84;
                        v85 = HIDWORD(v133);
                        *((_DWORD *)v84 + 4 * HIDWORD(v133)) = buf;
                        v86 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v84 + 2 * v85 + 1) = v86;
                        *((_DWORD *)v84 + 4 * (v85 + 1)) = (_DWORD)v139;
                        v87 = v140;
                        if (v140)
                          *(_DWORD *)v140 += 2;
                        *((_QWORD *)v84 + 2 * (v85 + 1) + 1) = v87;
                        *((_DWORD *)v84 + 4 * (v85 + 2)) = v141;
                        v88 = v142[0];
                        if (v142[0])
                          *(_DWORD *)v142[0] += 2;
                        *((_QWORD *)v84 + 2 * (v85 + 2) + 1) = v88;
                        HIDWORD(v133) = v85 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v83 + 16))(v83, &WebCore::LogMedia, 0, &v132);
                        v89 = v132;
                        if (HIDWORD(v133))
                        {
                          v90 = 16 * HIDWORD(v133);
                          v91 = (WTF::StringImpl **)((char *)v132 + 8);
                          do
                          {
                            v92 = *v91;
                            *v91 = 0;
                            if (v92)
                            {
                              if (*(_DWORD *)v92 == 2)
                                WTF::StringImpl::destroy(v92, (WTF::StringImpl *)v74);
                              else
                                *(_DWORD *)v92 -= 2;
                            }
                            v91 += 2;
                            v90 -= 16;
                          }
                          while (v90);
                          v89 = v132;
                        }
                        if (v89)
                        {
                          v132 = 0;
                          LODWORD(v133) = 0;
                          WTF::fastFree(v89, v74);
                        }
                        v93 = v142[0];
                        v142[0] = 0;
                        if (v93)
                        {
                          if (*(_DWORD *)v93 == 2)
                            WTF::StringImpl::destroy(v93, (WTF::StringImpl *)v74);
                          else
                            *(_DWORD *)v93 -= 2;
                        }
                        v94 = v140;
                        v140 = 0;
                        if (v94)
                        {
                          if (*(_DWORD *)v94 == 2)
                            WTF::StringImpl::destroy(v94, (WTF::StringImpl *)v74);
                          else
                            *(_DWORD *)v94 -= 2;
                        }
                        v95 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v95)
                        {
                          if (*(_DWORD *)v95 == 2)
                            WTF::StringImpl::destroy(v95, (WTF::StringImpl *)v74);
                          else
                            *(_DWORD *)v95 -= 2;
                        }
                        ++v81;
                      }
                      while (v81 != (uint64_t *)v82);
                    }
                    v96 = __ldxr(v76);
                    if (v96 == 1)
                    {
                      if (!__stlxr(0, v76))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v127 = v137;
            v137 = 0;
            if (v127)
            {
              if (*(_DWORD *)v127 == 2)
                WTF::StringImpl::destroy(v127, (WTF::StringImpl *)v74);
              else
                *(_DWORD *)v127 -= 2;
            }
            return 1;
          }
LABEL_285:
          __break(0xC471u);
          JUMPOUT(0x196111BD8);
        }
LABEL_272:
        v24 = 0;
        goto LABEL_30;
      }
    }
    v23 = 0;
    if (v134)
      goto LABEL_29;
    goto LABEL_272;
  }
  return 1;
}

uint64_t WebCore::PlatformMediaSessionManager::maybeActivateAudioSession(WebCore::PlatformMediaSessionManager *this)
{
  WebCore::AudioSession *active;
  WebCore::AudioSessionIOS *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const char *v7;
  uint64_t result;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl *v48;
  _QWORD v49[4];
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  __int128 buf;
  const char *v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60[3];

  v60[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  active = (WebCore::AudioSession *)WebCore::PlatformMediaSessionManager::activeAudioSessionRequired(this);
  if ((active & 1) != 0)
  {
    v3 = WebCore::AudioSession::sharedSession(active);
    *((_BYTE *)this + 57) = WebCore::AudioSession::tryToSetActive(v3, 1);
    v4 = *((_QWORD *)this + 16);
    v49[0] = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
    v49[1] = v5;
    v49[2] = "maybeActivateAudioSession";
    v49[3] = 0;
    v6 = *((unsigned __int8 *)this + 57);
    if (*((_BYTE *)this + 57))
      v7 = "successfully activated";
    else
      v7 = "failed to activate";
    if (!*(_BYTE *)(v4 + 12))
      return v6 != 0;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
    WTF::String::String((WTF::String *)&v53, v7);
    result = WTF::String::String((WTF::String *)&v52, " AudioSession");
    if (v54)
    {
      v9 = *((_DWORD *)v54 + 1);
      if (v53)
        goto LABEL_8;
    }
    else
    {
      v9 = 0;
      if (v53)
      {
LABEL_8:
        v10 = *((_DWORD *)v53 + 1);
        if (v52)
        {
LABEL_9:
          v11 = *((_DWORD *)v52 + 1);
LABEL_10:
          if ((v11 | v10) < 0
            || ((v12 = __OFADD__(v10, v11), v13 = v10 + v11, !v12) ? (v14 = 0) : (v14 = 1),
                v9 < 0 || (v14 & 1) != 0 || (result = (v9 + v13), __OFADD__(v9, v13))))
          {
            v55 = 0;
            goto LABEL_105;
          }
          if (v54 && (*((_BYTE *)v54 + 16) & 4) == 0)
          {
            v15 = 0;
            goto LABEL_27;
          }
          if (v53)
          {
            v18 = *((_DWORD *)v53 + 4);
            v15 = (v18 >> 2) & 1;
            if (v52 && (v18 & 4) != 0)
              goto LABEL_26;
          }
          else
          {
            if (v52)
            {
LABEL_26:
              v15 = (*((unsigned __int8 *)v52 + 16) >> 2) & 1;
              goto LABEL_27;
            }
            v15 = 1;
          }
LABEL_27:
          result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v15, v54, (uint64_t)v53, (uint64_t)v52, &v55);
          if (v55)
          {
            v20 = v52;
            v52 = 0;
            if (v20)
            {
              if (*(_DWORD *)v20 == 2)
                WTF::StringImpl::destroy(v20, v19);
              else
                *(_DWORD *)v20 -= 2;
            }
            v21 = v53;
            v53 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, v19);
              else
                *(_DWORD *)v21 -= 2;
            }
            v22 = v54;
            v54 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v19);
              else
                *(_DWORD *)v22 -= 2;
            }
            v23 = qword_1ECE7C4A0;
            v24 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v24)
            {
              WTF::String::utf8();
              v26 = v50 ? (char *)v50 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v26;
              _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v24 = (uint64_t)v50;
              v50 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 1)
                  v24 = WTF::fastFree((WTF *)v24, v25);
                else
                  --*(_DWORD *)v24;
              }
            }
            if (WebCore::LogMedia)
            {
              v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v28 = *v27;
                if ((v28 & 1) != 0)
                  break;
                v29 = __ldaxr(v27);
                if (v29 == v28)
                {
                  if (!__stxr(v28 | 1, v27))
                  {
                    v30 = WTF::Logger::observers((WTF::Logger *)v24);
                    v31 = *(unsigned int *)(v30 + 12);
                    if ((_DWORD)v31)
                    {
                      v32 = *(uint64_t **)v30;
                      v33 = *(_QWORD *)v30 + 8 * v31;
                      do
                      {
                        v34 = *v32;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
                        LODWORD(v57) = 0;
                        WTF::String::String((WTF::String *)&v58, v7);
                        v59 = 0;
                        WTF::String::String((WTF::String *)v60, " AudioSession");
                        v50 = 0;
                        v51 = 0;
                        v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v51) = 3;
                        v50 = v35;
                        v36 = HIDWORD(v51);
                        *((_DWORD *)v35 + 4 * HIDWORD(v51)) = buf;
                        v37 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v35 + 2 * v36 + 1) = v37;
                        *((_DWORD *)v35 + 4 * (v36 + 1)) = (_DWORD)v57;
                        v38 = v58;
                        if (v58)
                          *(_DWORD *)v58 += 2;
                        *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
                        *((_DWORD *)v35 + 4 * (v36 + 2)) = v59;
                        v39 = v60[0];
                        if (v60[0])
                          *(_DWORD *)v60[0] += 2;
                        *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
                        HIDWORD(v51) = v36 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, &WebCore::LogMedia, 0, &v50);
                        v40 = v50;
                        if (HIDWORD(v51))
                        {
                          v41 = 16 * HIDWORD(v51);
                          v42 = (WTF::StringImpl **)((char *)v50 + 8);
                          do
                          {
                            v43 = *v42;
                            *v42 = 0;
                            if (v43)
                            {
                              if (*(_DWORD *)v43 == 2)
                                WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v25);
                              else
                                *(_DWORD *)v43 -= 2;
                            }
                            v42 += 2;
                            v41 -= 16;
                          }
                          while (v41);
                          v40 = v50;
                        }
                        if (v40)
                        {
                          v50 = 0;
                          LODWORD(v51) = 0;
                          WTF::fastFree(v40, v25);
                        }
                        v44 = v60[0];
                        v60[0] = 0;
                        if (v44)
                        {
                          if (*(_DWORD *)v44 == 2)
                            WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v25);
                          else
                            *(_DWORD *)v44 -= 2;
                        }
                        v45 = v58;
                        v58 = 0;
                        if (v45)
                        {
                          if (*(_DWORD *)v45 == 2)
                            WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v25);
                          else
                            *(_DWORD *)v45 -= 2;
                        }
                        v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v46)
                        {
                          if (*(_DWORD *)v46 == 2)
                            WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
                          else
                            *(_DWORD *)v46 -= 2;
                        }
                        ++v32;
                      }
                      while (v32 != (uint64_t *)v33);
                    }
                    v47 = __ldxr(v27);
                    if (v47 == 1)
                    {
                      if (!__stlxr(0, v27))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v48 = v55;
            v55 = 0;
            if (v48)
            {
              if (*(_DWORD *)v48 == 2)
                WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
              else
                *(_DWORD *)v48 -= 2;
            }
            v6 = *((unsigned __int8 *)this + 57);
            return v6 != 0;
          }
LABEL_105:
          __break(0xC471u);
          return result;
        }
LABEL_101:
        v11 = 0;
        goto LABEL_10;
      }
    }
    v10 = 0;
    if (v52)
      goto LABEL_9;
    goto LABEL_101;
  }
  v16 = *((_QWORD *)this + 16);
  *(_QWORD *)&buf = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  *((_QWORD *)&buf + 1) = v17;
  v57 = "maybeActivateAudioSession";
  v58 = 0;
  if (*(_BYTE *)(v16 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [34]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf, "active audio session not required");
  return 1;
}

WTF::StringImpl *WebCore::PlatformMediaSessionManager::sessionWillEndPlayback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *result;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  NSObject *v45;
  uint64_t v46;
  void *v47;
  char *v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::Logger *v63;
  uint64_t v64;
  WTF::StringImpl **v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  int v72;
  uint64_t v73;
  _QWORD v74[4];
  WTF::Logger *v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  __int128 buf;
  const char *v87;
  WTF::StringImpl *v88;
  int v89;
  WTF::StringImpl *v90;
  int v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)&buf = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *((_QWORD *)&buf + 1) = v5;
  v87 = "sessionWillEndPlayback";
  v88 = 0;
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 256))(*(_QWORD *)(a2 + 32));
  v74[0] = result;
  if (*(_BYTE *)(v4 + 12))
    result = (WTF::StringImpl *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  v8 = *(unsigned int *)(a1 + 44);
  if (v8 >= 2)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = -1;
    v12 = -1;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v10 + 8 * v9) + 8);
      if (v13 == a2)
      {
        v12 = v9;
        result = (WTF::StringImpl *)v11;
      }
      else
      {
        result = (WTF::StringImpl *)v9;
        if (*(_BYTE *)(v13 + 48) != 2)
          break;
      }
      ++v9;
      v11 = (unint64_t)result;
    }
    while (v8 != v9);
    if (v11 != -1 && v12 != -1 && v12 <= v11)
    {
      v14 = (unsigned int **)(v10 + 8 * v12);
      v15 = *v14;
      *v14 = 0;
      if (v15)
      {
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v7);
        }
      }
      v18 = v14 + 1;
      v19 = *(unsigned int *)(a1 + 44);
      v20 = *(_QWORD *)(a1 + 32) + 8 * v19;
      while (v18 != (_QWORD *)v20)
      {
        *(v18 - 1) = *v18;
        *v18++ = 0;
      }
      v21 = (v19 - 1);
      *(_DWORD *)(a1 + 44) = v21;
      if ((_DWORD)v21 == *(_DWORD *)(a1 + 40))
      {
        WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a1 + 32), v21 + 1);
        v22 = *(unsigned int *)(a1 + 44);
        v23 = *(_QWORD *)(a1 + 32);
        v24 = *(_QWORD *)(a2 + 16);
        if (v24)
          goto LABEL_131;
        v24 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = a2;
        v26 = *(unsigned int **)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v24;
        if (!v26)
          goto LABEL_131;
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          WTF::fastFree((WTF *)v26, v25);
        }
        v24 = *(_QWORD *)(a2 + 16);
        if (v24)
        {
LABEL_131:
          do
            v29 = __ldaxr((unsigned int *)v24);
          while (__stlxr(v29 + 1, (unsigned int *)v24));
        }
        *(_QWORD *)(v23 + 8 * v22) = v24;
      }
      else
      {
        v30 = *(_QWORD *)(a1 + 32);
        v31 = *(_QWORD *)(a2 + 16);
        if (v31)
          goto LABEL_132;
        v31 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v31 = 1;
        *(_QWORD *)(v31 + 8) = a2;
        v33 = *(unsigned int **)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v31;
        if (!v33)
          goto LABEL_132;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
        {
          atomic_store(1u, v33);
          WTF::fastFree((WTF *)v33, v32);
        }
        v31 = *(_QWORD *)(a2 + 16);
        if (v31)
        {
LABEL_132:
          do
            v36 = __ldaxr((unsigned int *)v31);
          while (__stlxr(v36 + 1, (unsigned int *)v31));
        }
        *(_QWORD *)(v30 + 8 * v21) = v31;
      }
      ++*(_DWORD *)(a1 + 44);
      v37 = *(_QWORD *)(a1 + 128);
      result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v74[0] = result;
      v74[1] = v38;
      v74[2] = "sessionWillEndPlayback";
      v74[3] = 0;
      if (*(_BYTE *)(v37 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v74);
        WTF::String::String((WTF::String *)&v80, "session moved from index ");
        WTF::String::number((WTF::String *)v12);
        WTF::String::String((WTF::String *)&v78, " to ");
        WTF::String::number((WTF::String *)v11);
        v75 = v80;
        v85 = v79;
        *(_QWORD *)&buf = v81;
        v83 = v77;
        v84 = v78;
        result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v75, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83, &v82);
        if (v82)
        {
          v40 = v77;
          v77 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v39);
            else
              *(_DWORD *)v40 -= 2;
          }
          v41 = v78;
          v78 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, v39);
            else
              *(_DWORD *)v41 -= 2;
          }
          v42 = v79;
          v79 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2)
              WTF::StringImpl::destroy(v42, v39);
            else
              *(_DWORD *)v42 -= 2;
          }
          v43 = v80;
          v80 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2)
              WTF::StringImpl::destroy(v43, v39);
            else
              *(_DWORD *)v43 -= 2;
          }
          v44 = v81;
          v81 = 0;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v39);
            else
              *(_DWORD *)v44 -= 2;
          }
          v45 = qword_1ECE7C4A0;
          v46 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v46)
          {
            WTF::String::utf8();
            v48 = v75 ? (char *)v75 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v48;
            _os_log_impl(&dword_1940B8000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v46 = (uint64_t)v75;
            v75 = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 1)
                v46 = WTF::fastFree((WTF *)v46, v47);
              else
                --*(_DWORD *)v46;
            }
          }
          if (WebCore::LogMedia)
          {
            v49 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v50 = *v49;
              if ((v50 & 1) != 0)
                break;
              v51 = __ldaxr(v49);
              if (v51 == v50)
              {
                if (!__stxr(v50 | 1, v49))
                {
                  v52 = WTF::Logger::observers((WTF::Logger *)v46);
                  v53 = *(unsigned int *)(v52 + 12);
                  if ((_DWORD)v53)
                  {
                    v54 = *(uint64_t **)v52;
                    v73 = *(_QWORD *)v52 + 8 * v53;
                    do
                    {
                      v55 = *v54;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v74);
                      LODWORD(v87) = 0;
                      WTF::String::String((WTF::String *)&v88, "session moved from index ");
                      v89 = 0;
                      WTF::String::number((WTF::String *)v12);
                      v91 = 0;
                      WTF::String::String((WTF::String *)&v92, " to ");
                      v93 = 0;
                      WTF::String::number((WTF::String *)v11);
                      v75 = 0;
                      v76 = 0;
                      v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                      LODWORD(v76) = 5;
                      v75 = v56;
                      v57 = HIDWORD(v76);
                      *((_DWORD *)v56 + 4 * HIDWORD(v76)) = buf;
                      v58 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v56 + 2 * v57 + 1) = v58;
                      *((_DWORD *)v56 + 4 * (v57 + 1)) = (_DWORD)v87;
                      v59 = v88;
                      if (v88)
                        *(_DWORD *)v88 += 2;
                      *((_QWORD *)v56 + 2 * (v57 + 1) + 1) = v59;
                      *((_DWORD *)v56 + 4 * (v57 + 2)) = v89;
                      v60 = v90;
                      if (v90)
                        *(_DWORD *)v90 += 2;
                      *((_QWORD *)v56 + 2 * (v57 + 2) + 1) = v60;
                      *((_DWORD *)v56 + 4 * (v57 + 3)) = v91;
                      v61 = v92;
                      if (v92)
                        *(_DWORD *)v92 += 2;
                      *((_QWORD *)v56 + 2 * (v57 + 3) + 1) = v61;
                      *((_DWORD *)v56 + 4 * (v57 + 4)) = v93;
                      v62 = v94;
                      if (v94)
                        *(_DWORD *)v94 += 2;
                      *((_QWORD *)v56 + 2 * (v57 + 4) + 1) = v62;
                      HIDWORD(v76) = v57 + 5;
                      (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v55 + 16))(v55, &WebCore::LogMedia, 0, &v75);
                      v63 = v75;
                      if (HIDWORD(v76))
                      {
                        v64 = 16 * HIDWORD(v76);
                        v65 = (WTF::StringImpl **)((char *)v75 + 8);
                        do
                        {
                          v66 = *v65;
                          *v65 = 0;
                          if (v66)
                          {
                            if (*(_DWORD *)v66 == 2)
                              WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v47);
                            else
                              *(_DWORD *)v66 -= 2;
                          }
                          v65 += 2;
                          v64 -= 16;
                        }
                        while (v64);
                        v63 = v75;
                      }
                      if (v63)
                      {
                        v75 = 0;
                        LODWORD(v76) = 0;
                        WTF::fastFree(v63, v47);
                      }
                      v67 = v94;
                      v94 = 0;
                      if (v67)
                      {
                        if (*(_DWORD *)v67 == 2)
                          WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v47);
                        else
                          *(_DWORD *)v67 -= 2;
                      }
                      v68 = v92;
                      v92 = 0;
                      if (v68)
                      {
                        if (*(_DWORD *)v68 == 2)
                          WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v47);
                        else
                          *(_DWORD *)v68 -= 2;
                      }
                      v69 = v90;
                      v90 = 0;
                      if (v69)
                      {
                        if (*(_DWORD *)v69 == 2)
                          WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v47);
                        else
                          *(_DWORD *)v69 -= 2;
                      }
                      v70 = v88;
                      v88 = 0;
                      if (v70)
                      {
                        if (*(_DWORD *)v70 == 2)
                          WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v47);
                        else
                          *(_DWORD *)v70 -= 2;
                      }
                      v71 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v71)
                      {
                        if (*(_DWORD *)v71 == 2)
                          WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v47);
                        else
                          *(_DWORD *)v71 -= 2;
                      }
                      ++v54;
                    }
                    while (v54 != (uint64_t *)v73);
                  }
                  v72 = __ldxr(v49);
                  if (v72 == 1)
                  {
                    if (!__stlxr(0, v49))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          result = v82;
          v82 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v47);
            else
              *(_DWORD *)result -= 2;
          }
        }
        else
        {
          __break(0xC471u);
        }
      }
    }
  }
  return result;
}

double WebCore::PlatformMediaSessionManager::sessionStateChanged(WebCore::PlatformMediaSessionManager *this, WebCore::PlatformMediaSession *a2)
{
  WebCore::PlatformMediaSessionManager *v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  double v5;
  double result;
  WebCore::PlatformMediaSessionManager *v7;
  WebCore::PlatformMediaSessionManager *v8;

  v2 = this;
  if (*((_BYTE *)a2 + 48) == 2)
  {
    v3 = *(uint64_t (**)(void))(*(_QWORD *)this + 288);
LABEL_3:
    this = (WebCore::PlatformMediaSessionManager *)v3();
    goto LABEL_5;
  }
  if (!*((_BYTE *)this + 80))
  {
    *((_BYTE *)this + 80) = 1;
    v7 = (WebCore::PlatformMediaSessionManager *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E3408070;
    *((_QWORD *)v7 + 1) = v2;
    v8 = v7;
    WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)v2, (uint64_t *)&v8);
    this = v8;
    if (v8)
    {
      v3 = *(uint64_t (**)(void))(*(_QWORD *)v8 + 8);
      goto LABEL_3;
    }
  }
LABEL_5:
  v4 = *((_QWORD *)v2 + 15);
  if ((*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFLL) == 0
    || (result = *(double *)((*(_QWORD *)(v4 + 32) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
  {
    *(_QWORD *)(v4 + 24) = 0;
    WTF::MonotonicTime::now(this);
    WebCore::TimerBase::setNextFireTime(v4, v5 + 5.0);
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::setCurrentSession(WebCore::PlatformMediaSessionManager *this, WebCore::PlatformMediaSession *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  int v34;
  char v35;
  int v36;
  char v37;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  NSObject *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  WTF::Logger *v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::Logger *v62;
  uint64_t v63;
  WTF::StringImpl **v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  unsigned int v71;
  WTF::String *v72;
  _QWORD v73[4];
  WTF::Logger *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  __int128 buf;
  const char *v82;
  WTF::StringImpl *v83;
  int v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87[3];

  v87[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 16);
  *(_QWORD *)&buf = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  *((_QWORD *)&buf + 1) = v5;
  v82 = "setCurrentSession";
  v83 = 0;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 4) + 256))(*((_QWORD *)a2 + 4));
  v73[0] = result;
  if (*(_BYTE *)(v4 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&buf);
  v8 = *((unsigned int *)this + 11);
  if (v8 >= 2)
  {
    v9 = 0;
    v10 = (_QWORD *)(*((_QWORD *)this + 4) + 8);
    v11 = -v8;
    while (1)
    {
      result = *(v10 - 1);
      if (result)
      {
        if (*(WebCore::PlatformMediaSession **)(result + 8) == a2)
          break;
      }
      --v9;
      ++v10;
      if (v11 == v9)
        return result;
    }
    if (v9)
    {
      v72 = (WTF::String *)-v9;
      *(v10 - 1) = 0;
      do
      {
        v12 = __ldaxr((unsigned int *)result);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)result));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)result);
        WTF::fastFree((WTF *)result, v7);
      }
      v14 = *((unsigned int *)this + 11);
      v15 = *((_QWORD *)this + 4) + 8 * v14;
      while (v10 != (_QWORD *)v15)
      {
        *(v10 - 1) = *v10;
        *v10++ = 0;
      }
      v16 = (v14 - 1);
      *((_DWORD *)this + 11) = v16;
      if ((_DWORD)v16 == *((_DWORD *)this + 10))
      {
        WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)this + 8, v16 + 1);
        LODWORD(v16) = *((_DWORD *)this + 11);
      }
      v17 = (uint64_t *)*((_QWORD *)this + 4);
      if ((_DWORD)v16)
      {
        v18 = v16;
        do
        {
          v19 = &v17[v18];
          v20 = v17[v18 - 1];
          *(v19 - 1) = 0;
          *v19 = v20;
          --v18;
        }
        while (v18 * 8);
      }
      v21 = *((_QWORD *)a2 + 2);
      if (v21)
        goto LABEL_146;
      v21 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = a2;
      v23 = (unsigned int *)*((_QWORD *)a2 + 2);
      *((_QWORD *)a2 + 2) = v21;
      if (!v23)
        goto LABEL_146;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v22);
      }
      v21 = *((_QWORD *)a2 + 2);
      if (v21)
      {
LABEL_146:
        do
          v26 = __ldaxr((unsigned int *)v21);
        while (__stlxr(v26 + 1, (unsigned int *)v21));
      }
      *v17 = v21;
      ++*((_DWORD *)this + 11);
      v27 = *((_QWORD *)this + 16);
      result = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
      v73[0] = result;
      v73[1] = v28;
      v73[2] = "setCurrentSession";
      v73[3] = 0;
      if (*(_BYTE *)(v27 + 12))
      {
        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v73);
        WTF::String::String((WTF::String *)&v78, "session moved from index ");
        WTF::String::number(v72);
        result = WTF::String::String((WTF::String *)&v76, " to 0");
        if (v79)
          v29 = *((_DWORD *)v79 + 1);
        else
          v29 = 0;
        if (v78)
        {
          v30 = *((_DWORD *)v78 + 1);
          if (v77)
            goto LABEL_34;
        }
        else
        {
          v30 = 0;
          if (v77)
          {
LABEL_34:
            v31 = *((_DWORD *)v77 + 1);
            if (v76)
            {
LABEL_35:
              v32 = *((_DWORD *)v76 + 1);
LABEL_36:
              if ((v32 | v31) < 0
                || ((v33 = __OFADD__(v31, v32), v34 = v31 + v32, !v33) ? (v35 = 0) : (v35 = 1),
                    v30 < 0
                 || (v35 & 1) != 0
                 || ((v33 = __OFADD__(v30, v34), v36 = v30 + v34, !v33) ? (v37 = 0) : (v37 = 1),
                     v29 < 0 || (v37 & 1) != 0 || (result = (v29 + v36), __OFADD__(v29, v36)))))
              {
                v80 = 0;
                goto LABEL_143;
              }
              if (v79 && (*((_BYTE *)v79 + 16) & 4) == 0 || v78 && (*((_BYTE *)v78 + 16) & 4) == 0)
              {
                v38 = 0;
                goto LABEL_53;
              }
              if (v77)
              {
                v71 = *((_DWORD *)v77 + 4);
                v38 = (v71 >> 2) & 1;
                if (v76 && (v71 & 4) != 0)
                  goto LABEL_129;
              }
              else
              {
                if (v76)
                {
LABEL_129:
                  v38 = (*((unsigned __int8 *)v76 + 16) >> 2) & 1;
                  goto LABEL_53;
                }
                v38 = 1;
              }
LABEL_53:
              result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v38, (uint64_t)v79, v78, (uint64_t)v77, (uint64_t)v76, &v80);
              if (v80)
              {
                v40 = v76;
                v76 = 0;
                if (v40)
                {
                  if (*(_DWORD *)v40 == 2)
                    WTF::StringImpl::destroy(v40, v39);
                  else
                    *(_DWORD *)v40 -= 2;
                }
                v41 = v77;
                v77 = 0;
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2)
                    WTF::StringImpl::destroy(v41, v39);
                  else
                    *(_DWORD *)v41 -= 2;
                }
                v42 = v78;
                v78 = 0;
                if (v42)
                {
                  if (*(_DWORD *)v42 == 2)
                    WTF::StringImpl::destroy(v42, v39);
                  else
                    *(_DWORD *)v42 -= 2;
                }
                v43 = v79;
                v79 = 0;
                if (v43)
                {
                  if (*(_DWORD *)v43 == 2)
                    WTF::StringImpl::destroy(v43, v39);
                  else
                    *(_DWORD *)v43 -= 2;
                }
                v44 = qword_1ECE7C4A0;
                v45 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v45)
                {
                  WTF::String::utf8();
                  v47 = v74 ? (char *)v74 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v47;
                  _os_log_impl(&dword_1940B8000, v44, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v45 = (uint64_t)v74;
                  v74 = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 1)
                      v45 = WTF::fastFree((WTF *)v45, v46);
                    else
                      --*(_DWORD *)v45;
                  }
                }
                if (WebCore::LogMedia)
                {
                  v48 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v49 = *v48;
                    if ((v49 & 1) != 0)
                      break;
                    v50 = __ldaxr(v48);
                    if (v50 == v49)
                    {
                      if (!__stxr(v49 | 1, v48))
                      {
                        v51 = WTF::Logger::observers((WTF::Logger *)v45);
                        v52 = *(unsigned int *)(v51 + 12);
                        if ((_DWORD)v52)
                        {
                          v53 = *(uint64_t **)v51;
                          v54 = *(_QWORD *)v51 + 8 * v52;
                          do
                          {
                            v55 = *v53;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v73);
                            LODWORD(v82) = 0;
                            WTF::String::String((WTF::String *)&v83, "session moved from index ");
                            v84 = 0;
                            WTF::String::number(v72);
                            v86 = 0;
                            WTF::String::String((WTF::String *)v87, " to 0");
                            v74 = 0;
                            v75 = 0;
                            v56 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                            LODWORD(v75) = 4;
                            v74 = v56;
                            v57 = HIDWORD(v75);
                            *((_DWORD *)v56 + 4 * HIDWORD(v75)) = buf;
                            v58 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v56 + 2 * v57 + 1) = v58;
                            *((_DWORD *)v56 + 4 * (v57 + 1)) = (_DWORD)v82;
                            v59 = v83;
                            if (v83)
                              *(_DWORD *)v83 += 2;
                            *((_QWORD *)v56 + 2 * (v57 + 1) + 1) = v59;
                            *((_DWORD *)v56 + 4 * (v57 + 2)) = v84;
                            v60 = v85;
                            if (v85)
                              *(_DWORD *)v85 += 2;
                            *((_QWORD *)v56 + 2 * (v57 + 2) + 1) = v60;
                            *((_DWORD *)v56 + 4 * (v57 + 3)) = v86;
                            v61 = v87[0];
                            if (v87[0])
                              *(_DWORD *)v87[0] += 2;
                            *((_QWORD *)v56 + 2 * (v57 + 3) + 1) = v61;
                            HIDWORD(v75) = v57 + 4;
                            (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v55 + 16))(v55, &WebCore::LogMedia, 0, &v74);
                            v62 = v74;
                            if (HIDWORD(v75))
                            {
                              v63 = 16 * HIDWORD(v75);
                              v64 = (WTF::StringImpl **)((char *)v74 + 8);
                              do
                              {
                                v65 = *v64;
                                *v64 = 0;
                                if (v65)
                                {
                                  if (*(_DWORD *)v65 == 2)
                                    WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v46);
                                  else
                                    *(_DWORD *)v65 -= 2;
                                }
                                v64 += 2;
                                v63 -= 16;
                              }
                              while (v63);
                              v62 = v74;
                            }
                            if (v62)
                            {
                              v74 = 0;
                              LODWORD(v75) = 0;
                              WTF::fastFree(v62, v46);
                            }
                            v66 = v87[0];
                            v87[0] = 0;
                            if (v66)
                            {
                              if (*(_DWORD *)v66 == 2)
                                WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v46);
                              else
                                *(_DWORD *)v66 -= 2;
                            }
                            v67 = v85;
                            v85 = 0;
                            if (v67)
                            {
                              if (*(_DWORD *)v67 == 2)
                                WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v46);
                              else
                                *(_DWORD *)v67 -= 2;
                            }
                            v68 = v83;
                            v83 = 0;
                            if (v68)
                            {
                              if (*(_DWORD *)v68 == 2)
                                WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v46);
                              else
                                *(_DWORD *)v68 -= 2;
                            }
                            v69 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v69)
                            {
                              if (*(_DWORD *)v69 == 2)
                                WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v46);
                              else
                                *(_DWORD *)v69 -= 2;
                            }
                            ++v53;
                          }
                          while (v53 != (uint64_t *)v54);
                        }
                        v70 = __ldxr(v48);
                        if (v70 == 1)
                        {
                          if (!__stlxr(0, v48))
                            break;
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                result = (uint64_t)v80;
                v80 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v46);
                  else
                    *(_DWORD *)result -= 2;
                }
                return result;
              }
LABEL_143:
              __break(0xC471u);
              return result;
            }
LABEL_139:
            v32 = 0;
            goto LABEL_36;
          }
        }
        v31 = 0;
        if (v76)
          goto LABEL_35;
        goto LABEL_139;
      }
    }
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::applicationWillBecomeInactive(WebCore::PlatformMediaSessionManager *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[4];

  v2 = *((_QWORD *)this + 16);
  v8[0] = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  v8[1] = v3;
  v8[2] = "applicationWillBecomeInactive";
  v8[3] = 0;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E3407D28;
  v4[1] = this;
  v8[0] = v4;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E3407D50;
  v7 = v5;
  WebCore::PlatformMediaSessionManager::forEachMatchingSession((uint64_t)this, v8, &v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebCore::PlatformMediaSessionManager::applicationDidBecomeActive(WebCore::PlatformMediaSessionManager *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[4];

  v2 = *((_QWORD *)this + 16);
  v8[0] = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  v8[1] = v3;
  v8[2] = "applicationDidBecomeActive";
  v8[3] = 0;
  if (*(_BYTE *)(v2 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v8);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E3407D78;
  v4[1] = this;
  v8[0] = v4;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v5 = off_1E3407DA0;
  v7 = v5;
  WebCore::PlatformMediaSessionManager::forEachMatchingSession((uint64_t)this, v8, &v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
}

uint64_t WebCore::PlatformMediaSessionManager::applicationDidEnterBackground(WebCore::PlatformMediaSessionManager *this, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[4];
  char v8;

  v8 = a2;
  v3 = *((_QWORD *)this + 16);
  result = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  v7[0] = result;
  v7[1] = v5;
  v7[2] = "applicationDidEnterBackground";
  v7[3] = 0;
  if (*(_BYTE *)(v3 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7, "suspendedUnderLock: ");
  if (!*((_BYTE *)this + 50))
  {
    *((_BYTE *)this + 50) = 1;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = off_1E3407DC8;
    v6[1] = this;
    v6[2] = &v8;
    v7[0] = v6;
    WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)this, v7);
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::applicationWillEnterForeground(WebCore::PlatformMediaSessionManager *this, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  char v10;

  v10 = a2;
  v3 = *((_QWORD *)this + 16);
  result = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  v9[0] = result;
  v9[1] = v5;
  v9[2] = "applicationWillEnterForeground";
  v9[3] = 0;
  if (*(_BYTE *)(v3 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [11],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9, "suspendedUnderLock: ");
  if (*((_BYTE *)this + 50))
  {
    *((_BYTE *)this + 50) = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v6 = off_1E3407DF0;
    v6[1] = this;
    v6[2] = &v10;
    v9[0] = v6;
    v7 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v7 = off_1E3407E18;
    v8 = v7;
    WebCore::PlatformMediaSessionManager::forEachMatchingSession((uint64_t)this, v9, &v8);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::processWillSuspend(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::AudioSession *v6;
  uint64_t v7;
  WebCore::AudioSessionIOS *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;

  if (!*(_BYTE *)(this + 52))
  {
    v1 = this;
    *(_BYTE *)(this + 52) = 1;
    v2 = *(_QWORD *)(this + 128);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
    v10 = v3;
    v11 = "processWillSuspend";
    v12 = 0;
    if (*(_BYTE *)(v2 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v9);
    v4 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E3407E40;
    v9 = v4;
    WebCore::PlatformMediaSessionManager::forEachSession(v1, &v9);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (*(_BYTE *)(v1 + 57) && WebCore::deactivateAudioSession(void)::deactivate)
    {
      v5 = *(_QWORD *)(v1 + 128);
      v6 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
      v9 = (uint64_t)v6;
      v10 = v7;
      v11 = "maybeDeactivateAudioSession";
      v12 = 0;
      if (*(_BYTE *)(v5 + 12))
        v6 = (WebCore::AudioSession *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [35]>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v9, "tried to set inactive AudioSession");
      v8 = WebCore::AudioSession::sharedSession(v6);
      this = WebCore::AudioSession::tryToSetActive(v8, 0);
      *(_BYTE *)(v1 + 57) = 0;
    }
  }
  return this;
}

WebCore::PlatformMediaSessionManager *WebCore::PlatformMediaSessionManager::processDidResume(WebCore::PlatformMediaSessionManager *this)
{
  WebCore::PlatformMediaSessionManager *v1;
  uint64_t v2;
  uint64_t v3;

  if (*((_BYTE *)this + 52))
  {
    v1 = this;
    *((_BYTE *)this + 52) = 0;
    v2 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E3407E68;
    v3 = v2;
    WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)v1, &v3);
    this = (WebCore::PlatformMediaSessionManager *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (!*((_BYTE *)v1 + 57))
      return (WebCore::PlatformMediaSessionManager *)WebCore::PlatformMediaSessionManager::maybeActivateAudioSession(v1);
  }
  return this;
}

uint64_t WebCore::PlatformMediaSessionManager::setIsPlayingToAutomotiveHeadUnit(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[4];
  char v7;

  v7 = a2;
  if (*(unsigned __int8 *)(this + 53) != a2)
  {
    v2 = a2;
    v3 = this;
    v4 = *(_QWORD *)(this + 128);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
    v6[0] = this;
    v6[1] = v5;
    v6[2] = "setIsPlayingToAutomotiveHeadUnit";
    v6[3] = 0;
    if (*(_BYTE *)(v4 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
      v2 = v7;
    }
    *(_BYTE *)(v3 + 53) = v2;
  }
  return this;
}

uint64_t WebCore::PlatformMediaSessionManager::setSupportsSpatialAudioPlayback(uint64_t this, int a2)
{
  BOOL v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  unsigned __int8 v8;

  v8 = a2;
  if (*(_BYTE *)(this + 55))
    v2 = *(unsigned __int8 *)(this + 54) == a2;
  else
    v2 = 0;
  if (!v2)
  {
    v3 = a2;
    v4 = this;
    v5 = *(_QWORD *)(this + 128);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
    v7[0] = this;
    v7[1] = v6;
    v7[2] = "setSupportsSpatialAudioPlayback";
    v7[3] = 0;
    if (*(_BYTE *)(v5 + 12))
    {
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v7);
      v3 = v8;
    }
    *(_WORD *)(v4 + 54) = v3 | 0x100;
  }
  return this;
}

uint64_t WebCore::PlatformMediaSessionManager::supportsSpatialAudioPlaybackForConfiguration(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 54);
}

uint64_t WebCore::PlatformMediaSessionManager::sessionCanProduceAudioChanged(WebCore::PlatformMediaSessionManager *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6[4];

  v2 = *((_QWORD *)this + 16);
  result = (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)this + 24))(this);
  v6[0] = result;
  v6[1] = v4;
  v6[2] = (uint64_t)"sessionCanProduceAudioChanged";
  v6[3] = 0;
  if (*(_BYTE *)(v2 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v6);
  if (!*((_BYTE *)this + 56))
  {
    *((_BYTE *)this + 56) = 1;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E3407E90;
    v5[1] = this;
    v6[0] = (uint64_t)v5;
    WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread((uint64_t)this, v6);
    result = v6[0];
    if (v6[0])
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6[0] + 8))(v6[0]);
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t result;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;

  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E3408110;
  v4[1] = v3;
  v5 = *(uint64_t **)(a1 + 112);
  v6 = *v5;
  if (*v5)
    goto LABEL_14;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v5;
  v11 = (unsigned int *)*v5;
  *v5 = v6;
  if (!v11)
    goto LABEL_14;
  do
  {
    v12 = __ldaxr(v11);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v11));
  if (!v13)
  {
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, v10);
  }
  v6 = *v5;
  if (*v5)
  {
LABEL_14:
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
  }
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E3391560;
  v8[1] = v6;
  v8[2] = v4;
  v14 = v8;
  WTF::callOnMainThread();
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::processDidReceiveRemoteControlCommand(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD **v4;

  if (*(_DWORD *)(result + 44))
  {
    v3 = **(_QWORD **)(result + 32);
    if (v3)
    {
      v4 = *(_QWORD ***)(v3 + 8);
      if (v4)
      {
        result = (*(uint64_t (**)(_QWORD *))(*v4[4] + 48))(v4[4]);
        if ((_DWORD)result)
          return ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v4)[12])(v4, a2, a3);
      }
    }
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::processSystemWillSleep(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(this + 49))
  {
    v1 = this;
    v2 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E3407EB8;
    v3 = v2;
    WebCore::PlatformMediaSessionManager::forEachSession(v1, &v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return this;
}

uint64_t WebCore::PlatformMediaSessionManager::processSystemDidWake(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(this + 49))
  {
    v1 = this;
    v2 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v2 = off_1E3407EE0;
    v3 = v2;
    WebCore::PlatformMediaSessionManager::forEachSession(v1, &v3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return this;
}

uint64_t (***WebCore::PlatformMediaSessionManager::pauseAllMediaPlaybackForGroup(uint64_t a1, uint64_t a2))()
{
  uint64_t (***v4)();
  uint64_t (**v5)();
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (***result)();
  uint64_t (***v9)();
  _QWORD *v10;
  _QWORD *v11;

  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E3407F08;
  *v4 = off_1E3407F08;
  v9 = v4;
  if (a2)
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3408020;
    v6[1] = a2;
    v11 = v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3408048;
    v7[1] = &v9;
    v10 = v7;
    WebCore::PlatformMediaSessionManager::forEachMatchingSession(a1, &v11, &v10);
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    result = v9;
    v9 = 0;
    if (!result)
      return result;
    v5 = *result;
  }
  else
  {
    v9 = 0;
  }
  return (uint64_t (***)())v5[1]();
}

uint64_t WebCore::PlatformMediaSessionManager::mediaPlaybackIsPaused(uint64_t a1, uint64_t a2)
{
  uint64_t (***v4)();
  uint64_t (**v5)();
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (***v9)();
  unsigned __int8 v10;
  _QWORD *v11;
  _QWORD *v12;

  v10 = 0;
  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E3407F30;
  *v4 = off_1E3407F30;
  v4[1] = (uint64_t (**)())&v10;
  v9 = v4;
  if (!a2)
  {
    v9 = 0;
    goto LABEL_5;
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3408020;
  v6[1] = a2;
  v12 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3408048;
  v7[1] = &v9;
  v11 = v7;
  WebCore::PlatformMediaSessionManager::forEachMatchingSession(a1, &v12, &v11);
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    v5 = *v4;
LABEL_5:
    ((void (*)(uint64_t (***)()))v5[1])(v4);
  }
  return v10;
}

uint64_t WebCore::PlatformMediaSessionManager::stopAllMediaPlaybackForProcess(WebCore::PlatformMediaSessionManager *this)
{
  uint64_t v2;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v2 = off_1E3407F58;
  v4 = v2;
  WebCore::PlatformMediaSessionManager::forEachSession((uint64_t)this, &v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t (***WebCore::PlatformMediaSessionManager::suspendAllMediaPlaybackForGroup(uint64_t a1, uint64_t a2))()
{
  uint64_t (***v4)();
  uint64_t (**v5)();
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (***result)();
  uint64_t (***v9)();
  _QWORD *v10;
  _QWORD *v11;

  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E3407F80;
  *v4 = off_1E3407F80;
  v9 = v4;
  if (a2)
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3408020;
    v6[1] = a2;
    v11 = v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3408048;
    v7[1] = &v9;
    v10 = v7;
    WebCore::PlatformMediaSessionManager::forEachMatchingSession(a1, &v11, &v10);
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    result = v9;
    v9 = 0;
    if (!result)
      return result;
    v5 = *result;
  }
  else
  {
    v9 = 0;
  }
  return (uint64_t (***)())v5[1]();
}

uint64_t (***WebCore::PlatformMediaSessionManager::resumeAllMediaPlaybackForGroup(uint64_t a1, uint64_t a2))()
{
  uint64_t (***v4)();
  uint64_t (**v5)();
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (***result)();
  uint64_t (***v9)();
  _QWORD *v10;
  _QWORD *v11;

  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E3407FA8;
  *v4 = off_1E3407FA8;
  v9 = v4;
  if (a2)
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3408020;
    v6[1] = a2;
    v11 = v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3408048;
    v7[1] = &v9;
    v10 = v7;
    WebCore::PlatformMediaSessionManager::forEachMatchingSession(a1, &v11, &v10);
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    result = v9;
    v9 = 0;
    if (!result)
      return result;
    v5 = *result;
  }
  else
  {
    v9 = 0;
  }
  return (uint64_t (***)())v5[1]();
}

uint64_t (***WebCore::PlatformMediaSessionManager::suspendAllMediaBufferingForGroup(uint64_t a1, uint64_t a2))()
{
  uint64_t (***v4)();
  uint64_t (**v5)();
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (***result)();
  uint64_t (***v9)();
  _QWORD *v10;
  _QWORD *v11;

  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E3407FD0;
  *v4 = off_1E3407FD0;
  v9 = v4;
  if (a2)
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3408020;
    v6[1] = a2;
    v11 = v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3408048;
    v7[1] = &v9;
    v10 = v7;
    WebCore::PlatformMediaSessionManager::forEachMatchingSession(a1, &v11, &v10);
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    result = v9;
    v9 = 0;
    if (!result)
      return result;
    v5 = *result;
  }
  else
  {
    v9 = 0;
  }
  return (uint64_t (***)())v5[1]();
}

uint64_t (***WebCore::PlatformMediaSessionManager::resumeAllMediaBufferingForGroup(uint64_t a1, uint64_t a2))()
{
  uint64_t (***v4)();
  uint64_t (**v5)();
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (***result)();
  uint64_t (***v9)();
  _QWORD *v10;
  _QWORD *v11;

  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E3407FF8;
  *v4 = off_1E3407FF8;
  v9 = v4;
  if (a2)
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3408020;
    v6[1] = a2;
    v11 = v6;
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v7 = off_1E3408048;
    v7[1] = &v9;
    v10 = v7;
    WebCore::PlatformMediaSessionManager::forEachMatchingSession(a1, &v11, &v10);
    (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    result = v9;
    v9 = 0;
    if (!result)
      return result;
    v5 = *result;
  }
  else
  {
    v9 = 0;
  }
  return (uint64_t (***)())v5[1]();
}

uint64_t WebCore::PlatformMediaSessionManager::addAudioCaptureSource(uint64_t a1, _QWORD *a2)
{
  _BYTE v4[24];

  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(a1 + 64, a2, (uint64_t)v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
}

uint64_t WebCore::PlatformMediaSessionManager::removeAudioCaptureSource(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;

  result = WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(a1 + 64, a2);
  if (!*(_BYTE *)(a1 + 80))
  {
    *(_BYTE *)(a1 + 80) = 1;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E3408070;
    v4[1] = a1;
    v5 = v4;
    WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(a1, (uint64_t *)&v5);
    result = (uint64_t)v5;
    if (v5)
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::shouldDeactivateAudioSession(WebCore::PlatformMediaSessionManager *this)
{
  return WebCore::deactivateAudioSession(void)::deactivate;
}

uint64_t WebCore::PlatformMediaSessionManager::webMFormatReaderEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionManager::vorbisDecoderEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return WebCore::PlatformMediaSessionManager::m_vorbisDecoderEnabled;
}

uint64_t WebCore::PlatformMediaSessionManager::opusDecoderEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return WebCore::PlatformMediaSessionManager::m_opusDecoderEnabled;
}

uint64_t WebCore::PlatformMediaSessionManager::alternateWebMPlayerEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return WebCore::PlatformMediaSessionManager::m_alternateWebMPlayerEnabled;
}

uint64_t WebCore::PlatformMediaSessionManager::useSCContentSharingPicker(WebCore::PlatformMediaSessionManager *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionManager::shouldEnableVP9Decoder(WebCore::PlatformMediaSessionManager *this)
{
  return WebCore::PlatformMediaSessionManager::m_vp9DecoderEnabled;
}

uint64_t WebCore::PlatformMediaSessionManager::shouldEnableVP8Decoder(WebCore::PlatformMediaSessionManager *this)
{
  return WebCore::PlatformMediaSessionManager::m_vp8DecoderEnabled;
}

uint64_t WebCore::PlatformMediaSessionManager::setSWVPDecodersAlwaysEnabled(WebCore::PlatformMediaSessionManager *this)
{
  char v1;
  __int128 *v2;

  v1 = (char)this;
  WebCore::PlatformMediaSessionManager::m_swVPDecodersAlwaysEnabled = (char)this;
  v2 = WebCore::VP9TestingOverrides::singleton(this);
  return WebCore::VP9TestingOverrides::setSWVPDecodersAlwaysEnabled((uint64_t)v2, v1);
}

uint64_t WebCore::PlatformMediaSessionManager::swVPDecodersAlwaysEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return WebCore::PlatformMediaSessionManager::m_swVPDecodersAlwaysEnabled;
}

uint64_t WebCore::PlatformMediaSessionManager::mediaCapabilityGrantsEnabled(WebCore::PlatformMediaSessionManager *this)
{
  return WebCore::PlatformMediaSessionManager::s_mediaCapabilityGrantsEnabled;
}

WTF *WebCore::PlatformMediaSessionManager::bestEligibleSessionForRemoteControls@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  void *v7;
  void (*v8)(void);
  WTF *v9;
  WTF *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  WTF *result;
  _QWORD *v21;
  WTF *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;

  v24 = 0;
  v25 = 0;
  v22 = 0;
  v23 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E3408098;
  v6[1] = &v24;
  v6[2] = &v22;
  v21 = v6;
  WebCore::PlatformMediaSessionManager::forEachMatchingSession(a1, a2, &v21);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  if (HIDWORD(v25))
  {
    v8 = *(void (**)(void))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v24 + 8) + 32) + 232);
LABEL_5:
    v8();
    goto LABEL_6;
  }
  if (HIDWORD(v23))
  {
    v8 = *(void (**)(void))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)v22 + 8) + 32) + 232);
    goto LABEL_5;
  }
  *a3 = 0;
LABEL_6:
  if (HIDWORD(v23))
  {
    v9 = v22;
    v10 = (WTF *)((char *)v22 + 8 * HIDWORD(v23));
    do
    {
      v11 = *(unsigned int **)v9;
      *(_QWORD *)v9 = 0;
      if (v11)
      {
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v7);
        }
      }
      v9 = (WTF *)((char *)v9 + 8);
    }
    while (v9 != v10);
  }
  v14 = v22;
  if (v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    WTF::fastFree(v14, v7);
  }
  if (HIDWORD(v25))
  {
    v15 = v24;
    v16 = (WTF *)((char *)v24 + 8 * HIDWORD(v25));
    do
    {
      v17 = *(unsigned int **)v15;
      *(_QWORD *)v15 = 0;
      if (v17)
      {
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          atomic_store(1u, v17);
          WTF::fastFree((WTF *)v17, v7);
        }
      }
      v15 = (WTF *)((char *)v15 + 8);
    }
    while (v15 != v16);
  }
  result = v24;
  if (v24)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    return (WTF *)WTF::fastFree(result, v7);
  }
  return result;
}

void WebCore::PlatformMediaSessionManager::addNowPlayingMetadataObserver(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  char v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _OWORD v47[2];
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  __int16 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  __int128 v67;
  _BYTE v68[26];

  v4 = (uint64_t *)(a1 + 88);
  v5 = *(_DWORD *)(a1 + 100);
  v6 = *(_DWORD *)(a1 + 96) + 1;
  *(_DWORD *)(a1 + 96) = v6;
  if (v6 > v5)
  {
    v7 = *v4;
    if (!*v4)
    {
LABEL_3:
      v8 = 0;
      *(_DWORD *)(a1 + 96) = 0;
LABEL_4:
      v9 = v8;
LABEL_5:
      *(_DWORD *)(a1 + 100) = 2 * v9;
      goto LABEL_6;
    }
    v34 = *(unsigned int *)(v7 - 4);
    if (!(_DWORD)v34)
      goto LABEL_51;
    v35 = 0;
    do
    {
      while (1)
      {
        v36 = --v34;
        v37 = *(_QWORD *)(v7 + 8 * v34);
        if ((unint64_t)(v37 + 1) >= 2 && !*(_QWORD *)(v37 + 8))
          break;
        if (!(_DWORD)v34)
          goto LABEL_41;
      }
      *(_QWORD *)(v7 + 8 * v34) = 0;
      do
      {
        v38 = __ldaxr((unsigned int *)v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, (unsigned int *)v37));
      if (!v39)
      {
        atomic_store(1u, (unsigned int *)v37);
        v45 = v35;
        v44 = v34;
        v46 = v34;
        WTF::fastFree((WTF *)v37, a2);
        v36 = v46;
        v34 = v44;
        v35 = v45;
      }
      *(_QWORD *)(v7 + 8 * v36) = -1;
      ++v35;
    }
    while (v36);
LABEL_41:
    v7 = *v4;
    if (v35)
    {
      *(_DWORD *)(v7 - 16) += v35;
      v40 = *v4;
      if (*v4)
        v41 = *(_DWORD *)(v40 - 12);
      else
        v41 = 0;
      *(_DWORD *)(v40 - 12) = v41 - v35;
      v7 = *v4;
    }
    if (!v7)
      goto LABEL_3;
    v42 = *(_DWORD *)(v7 - 4);
    if (v42 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v42)
    {
LABEL_51:
      *(_DWORD *)(a1 + 96) = 0;
    }
    else
    {
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v4);
      v7 = *(_QWORD *)(a1 + 88);
      *(_DWORD *)(a1 + 96) = 0;
      if (!v7)
      {
        v8 = 0;
        goto LABEL_4;
      }
    }
    v8 = *(_DWORD *)(v7 - 12);
    v9 = 0x7FFFFFFF;
    if (v8 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v10 = *a2;
  if (!*a2)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = a2;
    v12 = (unsigned int *)*a2;
    *a2 = v10;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
      v10 = *a2;
    }
  }
  do
    v15 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v15 + 1, (unsigned int *)v10));
  do
    v16 = __ldaxr((unsigned int *)v10);
  while (__stlxr(v16 + 1, (unsigned int *)v10));
  *(_QWORD *)&v62 = v10;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v4, &v62, (uint64_t)&v56);
  v18 = (unsigned int *)v62;
  *(_QWORD *)&v62 = 0;
  if (!v18)
    goto LABEL_17;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
    if (!v10)
      goto LABEL_21;
  }
  else
  {
LABEL_17:
    if (!v10)
      goto LABEL_21;
  }
  do
  {
    v21 = __ldaxr((unsigned int *)v10);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v10));
  if (!v22)
  {
    atomic_store(1u, (unsigned int *)v10);
    WTF::fastFree((WTF *)v10, v17);
  }
LABEL_21:
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(&v56, a1);
  v49 = 0;
  memset(v47, 0, sizeof(v47));
  v48 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0x3FF0000000000000;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  if (!v61)
  {
    v28 = 0;
    LOBYTE(v64) = 0;
    v27 = v47;
    v62 = 0uLL;
    v63 = 0uLL;
    goto LABEL_25;
  }
  v23 = v56;
  v24 = v57;
  v56 = 0uLL;
  v57 = 0uLL;
  v62 = v23;
  v63 = v24;
  LOBYTE(v64) = 0;
  v66 = 0;
  if (v60)
  {
    v25 = v58;
    v58 = 0uLL;
    v64 = v25;
    v26 = v59;
    v59 = 0;
    v65 = v26;
    v27 = &v56;
    v28 = 1;
LABEL_25:
    v66 = v28;
    goto LABEL_27;
  }
  v27 = &v56;
LABEL_27:
  v29 = v27[4];
  v30 = v27[5];
  *(_OWORD *)&v68[10] = *(__int128 *)((char *)v27 + 90);
  v67 = v29;
  *(_OWORD *)v68 = v30;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2[1] + 16))(a2[1], &v62);
  WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)&v62, v31);
  WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)v47, v32);
  if (v61)
    WebCore::NowPlayingMetadata::~NowPlayingMetadata((WebCore::NowPlayingMetadata *)&v56, v33);
}

uint64_t WebCore::PlatformMediaSessionManager::removeNowPlayingMetadataObserver(uint64_t result, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  WTF *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (uint64_t *)(result + 88);
  v4 = *(_DWORD *)(result + 100);
  v5 = *(_DWORD *)(result + 96) + 1;
  *(_DWORD *)(result + 96) = v5;
  if (v5 > v4)
  {
    v6 = result;
    v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      LODWORD(v7) = 0;
      *(_DWORD *)(v6 + 96) = 0;
LABEL_4:
      v8 = v7;
LABEL_5:
      *(_DWORD *)(v6 + 100) = 2 * v8;
      goto LABEL_6;
    }
    v10 = *(unsigned int *)(v7 - 4);
    if (!(_DWORD)v10)
      goto LABEL_31;
    v11 = 0;
    do
    {
      while (1)
      {
        v12 = --v10;
        result = *(_QWORD *)(v7 + 8 * v10);
        if ((unint64_t)(result + 1) >= 2 && !*(_QWORD *)(result + 8))
          break;
        if (!(_DWORD)v10)
          goto LABEL_21;
      }
      *(_QWORD *)(v7 + 8 * v10) = 0;
      do
      {
        v13 = __ldaxr((unsigned int *)result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)result));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)result);
        v20 = v10;
        v21 = v7;
        v19 = v11;
        v22 = v10;
        result = WTF::fastFree((WTF *)result, a2);
        v7 = v21;
        v12 = v22;
        v10 = v20;
        v11 = v19;
      }
      *(_QWORD *)(v7 + 8 * v12) = -1;
      ++v11;
    }
    while (v12);
LABEL_21:
    v7 = *v3;
    if (v11)
    {
      *(_DWORD *)(v7 - 16) += v11;
      v15 = *v3;
      if (*v3)
        v16 = *(_DWORD *)(v15 - 12);
      else
        v16 = 0;
      *(_DWORD *)(v15 - 12) = v16 - v11;
      v7 = *v3;
    }
    if (!v7)
      goto LABEL_3;
    v17 = *(_DWORD *)(v7 - 4);
    if (v17 < 9 || 6 * *(_DWORD *)(v7 - 12) >= v17)
    {
LABEL_31:
      *(_DWORD *)(v6 + 96) = 0;
    }
    else
    {
      result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
      v7 = *(_QWORD *)(v6 + 88);
      *(_DWORD *)(v6 + 96) = 0;
      if (!v7)
        goto LABEL_4;
    }
    LODWORD(v7) = *(_DWORD *)(v7 - 12);
    v8 = 0x7FFFFFFF;
    if (v7 >= 0x7FFFFFFF)
      goto LABEL_5;
    goto LABEL_4;
  }
LABEL_6:
  v9 = (WTF *)*a2;
  if (*a2)
  {
    if (*((_QWORD *)v9 + 1))
      return WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(v3, v9);
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(uint64_t **result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t **v4;
  void *v5;
  WTF *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  _QWORD *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  int j;
  uint64_t v31;
  unsigned int **v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;

  if (*result)
  {
    v2 = *((unsigned int *)*result - 3);
    if ((_DWORD)v2)
    {
      if (v2 >> 29)
      {
        __break(0xC471u);
      }
      else
      {
        v4 = result;
        v6 = (WTF *)WTF::fastMalloc((WTF *)(8 * v2));
        v7 = *v4;
        if (*v4 && *((_DWORD *)v7 - 3))
        {
          v8 = *((unsigned int *)v7 - 1);
          if ((_DWORD)v8)
          {
            v9 = 8 * v8;
            for (i = *v4; (unint64_t)(*i + 1) <= 1; ++i)
            {
              v9 -= 8;
              if (!v9)
                return (uint64_t **)WTF::fastFree(v6, v5);
            }
          }
          else
          {
            i = *v4;
          }
          v11 = &v7[v8];
          if (i != v11)
          {
            v12 = 0;
            v13 = *i;
LABEL_15:
            v14 = *(uint64_t **)(v13 + 8);
            if (v14)
            {
              v15 = *v14;
              if (*v14)
                goto LABEL_51;
              v15 = WTF::fastCompactMalloc((WTF *)0x10);
              *(_DWORD *)v15 = 1;
              *(_QWORD *)(v15 + 8) = v14;
              v16 = (unsigned int *)*v14;
              *v14 = v15;
              if (!v16)
                goto LABEL_51;
              do
              {
                v17 = __ldaxr(v16);
                v18 = v17 - 1;
              }
              while (__stlxr(v18, v16));
              if (!v18)
              {
                atomic_store(1u, v16);
                WTF::fastFree((WTF *)v16, v5);
              }
              v15 = *v14;
              if (*v14)
              {
LABEL_51:
                do
                  v19 = __ldaxr((unsigned int *)v15);
                while (__stlxr(v19 + 1, (unsigned int *)v15));
              }
            }
            else
            {
              v15 = 0;
            }
            v20 = v12 + 1;
            *((_QWORD *)v6 + v12) = v15;
            while (++i != v11)
            {
              v13 = *i;
              if ((unint64_t)(*i + 1) > 1)
              {
                ++v12;
                if (i != v11)
                  goto LABEL_15;
                break;
              }
            }
            if (v20)
            {
              v21 = (_QWORD *)((char *)v6 + 8 * v20);
              v22 = v6;
              do
              {
                v23 = *(_QWORD *)v22;
                if (*(_QWORD *)v22)
                {
                  v5 = *(void **)(v23 + 8);
                  if (v5)
                  {
                    v24 = *v4;
                    if (*v4)
                    {
                      v25 = *((_DWORD *)v24 - 2);
                      v26 = (~(v23 << 32) + v23) ^ ((unint64_t)(~(v23 << 32) + v23) >> 22);
                      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
                      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
                      v29 = v25 & ((v28 >> 31) ^ v28);
                      for (j = 1; ; ++j)
                      {
                        v31 = v24[v29];
                        if (v31 != -1)
                        {
                          if (!v31)
                            goto LABEL_40;
                          if (v31 == v23)
                            break;
                        }
                        v29 = (v29 + j) & v25;
                      }
                      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
                    }
                  }
                }
LABEL_40:
                v22 = (WTF *)((char *)v22 + 8);
              }
              while (v22 != (WTF *)v21);
              v32 = (unsigned int **)v6;
              do
              {
                v33 = *v32;
                *v32 = 0;
                if (v33)
                {
                  do
                  {
                    v34 = __ldaxr(v33);
                    v35 = v34 - 1;
                  }
                  while (__stlxr(v35, v33));
                  if (!v35)
                  {
                    atomic_store(1u, v33);
                    WTF::fastFree((WTF *)v33, v5);
                  }
                }
                ++v32;
              }
              while (v32 != v21);
            }
          }
        }
        return (uint64_t **)WTF::fastFree(v6, v5);
      }
    }
  }
  return result;
}

uint64_t WebCore::PlatformMediaSessionManager::hasActiveNowPlayingSessionInGroup(uint64_t a1, uint64_t a2)
{
  uint64_t (***v4)();
  uint64_t (**v5)();
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (***v9)();
  unsigned __int8 v10;
  _QWORD *v11;
  _QWORD *v12;

  v10 = 0;
  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E34080E8;
  *v4 = off_1E34080E8;
  v4[1] = (uint64_t (**)())&v10;
  v9 = v4;
  if (!a2)
  {
    v9 = 0;
    goto LABEL_5;
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E3408020;
  v6[1] = a2;
  v12 = v6;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v7 = off_1E3408048;
  v7[1] = &v9;
  v11 = v7;
  WebCore::PlatformMediaSessionManager::forEachMatchingSession(a1, &v12, &v11);
  (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    v5 = *v4;
LABEL_5:
    ((void (*)(uint64_t (***)()))v5[1])(v4);
  }
  return v10;
}

WebCore::PushPullFIFO *WebCore::PushPullFIFO::PushPullFIFO(WebCore::PushPullFIFO *this, void *a2, unint64_t a3)
{
  unsigned int **v4;
  WebCore::AudioBus *v7;
  WebCore::AudioBus *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v14;

  *(_QWORD *)this = a3;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (unsigned int **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (a2 <= 0x20)
  {
    v7 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    v8 = WebCore::AudioBus::AudioBus(v7, a2, a3, 1);
    v10 = *v4;
    *v4 = (unsigned int *)v8;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        v14 = v10;
        WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v14, v9);
      }
    }
  }
  return this;
}

{
  unsigned int **v4;
  WebCore::AudioBus *v7;
  WebCore::AudioBus *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v14;

  *(_QWORD *)this = a3;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (unsigned int **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  if (a2 <= 0x20)
  {
    v7 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    v8 = WebCore::AudioBus::AudioBus(v7, a2, a3, 1);
    v10 = *v4;
    *v4 = (unsigned int *)v8;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        v14 = v10;
        WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v14, v9);
      }
    }
  }
  return this;
}

void WebCore::PushPullFIFO::~PushPullFIFO(WebCore::PushPullFIFO *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = v2;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v5, a2);
    }
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = v2;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v5, a2);
    }
  }
}

unint64_t *WebCore::PushPullFIFO::push(unint64_t *result, uint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char **v8;
  char *v9;
  char **v10;
  char *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = result;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = result[1];
  if (*(_DWORD *)(v4 + 28))
  {
    v6 = *result - result[4];
    if (v3 <= v6)
    {
      v12 = 0;
      while (1)
      {
        v13 = *(uint64_t **)(*(_QWORD *)(v4 + 16) + 8 * v12);
        *((_BYTE *)v13 + 24) = 0;
        v14 = *v13;
        if (!*v13)
          v14 = *(_QWORD *)v13[1];
        if (v12 >= *(unsigned int *)(a2 + 28))
          break;
        v15 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v12);
        v16 = *(const void **)v15;
        if (!*(_QWORD *)v15)
          v16 = **(const void ***)(v15 + 8);
        result = (unint64_t *)memcpy((void *)(v14 + 4 * v2[4]), v16, 4 * v3);
        ++v12;
        v4 = v2[1];
        if (v12 >= *(unsigned int *)(v4 + 28))
          goto LABEL_18;
      }
    }
    else
    {
      v7 = 0;
      while (1)
      {
        v8 = *(char ***)(*(_QWORD *)(v4 + 16) + 8 * v7);
        *((_BYTE *)v8 + 24) = 0;
        v9 = *v8;
        if (!*v8)
          v9 = *(char **)v8[1];
        if (v7 >= *(unsigned int *)(a2 + 28))
          break;
        v10 = *(char ***)(*(_QWORD *)(a2 + 16) + 8 * v7);
        v11 = *v10;
        if (!*v10)
          v11 = *(char **)v10[1];
        memcpy(&v9[4 * v2[4]], v11, 4 * v6);
        result = (unint64_t *)memcpy(v9, &v11[4 * v6], 4 * (v3 - v6));
        ++v7;
        v4 = v2[1];
        if (v7 >= *(unsigned int *)(v4 + 28))
          goto LABEL_18;
      }
    }
    __break(0xC471u);
  }
  else
  {
LABEL_18:
    v17 = *v2;
    v18 = (v2[4] + v3) % *v2;
    v2[4] = v18;
    v19 = v2[2];
    if (v3 > v17 - v19)
      v2[3] = v18;
    if (v17 >= v19 + v3)
      v17 = v19 + v3;
    v2[2] = v17;
  }
  return result;
}

void WebCore::PushPullFIFO::pull(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  char **v10;
  char *v11;
  char **v12;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char **v17;
  char *v18;
  unint64_t v19;
  char **v20;
  char *v21;
  char **v22;
  char *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;

  v4 = a1[1];
  v30 = a1[2];
  if (v30 >= a3)
    v5 = a3;
  else
    v5 = a1[2];
  if (*(_DWORD *)(v4 + 28))
  {
    v7 = *a1 - a1[3];
    v8 = 4 * (a3 - v5);
    if (v5 <= v7)
    {
      if (v30 >= a3)
      {
        v24 = 0;
        while (1)
        {
          v25 = *(uint64_t **)(*(_QWORD *)(v4 + 16) + 8 * v24);
          v26 = *v25;
          if (!*v25)
            v26 = *(_QWORD *)v25[1];
          if (v24 >= *(unsigned int *)(a2 + 28))
            break;
          v27 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v24);
          *(_BYTE *)(v27 + 24) = 0;
          v28 = *(void **)v27;
          if (!*(_QWORD *)v27)
            v28 = **(void ***)(v27 + 8);
          memcpy(v28, (const void *)(v26 + 4 * a1[3]), 4 * v5);
          ++v24;
          v4 = a1[1];
          if (v24 >= *(unsigned int *)(v4 + 28))
            goto LABEL_39;
        }
      }
      else
      {
        v14 = 0;
        while (1)
        {
          v15 = *(uint64_t **)(*(_QWORD *)(v4 + 16) + 8 * v14);
          v16 = *v15;
          if (!*v15)
            v16 = *(_QWORD *)v15[1];
          if (v14 >= *(unsigned int *)(a2 + 28))
            break;
          v17 = *(char ***)(*(_QWORD *)(a2 + 16) + 8 * v14);
          *((_BYTE *)v17 + 24) = 0;
          v18 = *v17;
          if (!*v17)
            v18 = *(char **)v17[1];
          memcpy(v18, (const void *)(v16 + 4 * a1[3]), 4 * v5);
          bzero(&v18[4 * v5], v8);
          ++v14;
          v4 = a1[1];
          if (v14 >= *(unsigned int *)(v4 + 28))
            goto LABEL_39;
        }
      }
    }
    else if (v30 >= a3)
    {
      v19 = 0;
      while (1)
      {
        v20 = *(char ***)(*(_QWORD *)(v4 + 16) + 8 * v19);
        v21 = *v20;
        if (!*v20)
          v21 = *(char **)v20[1];
        if (v19 >= *(unsigned int *)(a2 + 28))
          break;
        v22 = *(char ***)(*(_QWORD *)(a2 + 16) + 8 * v19);
        *((_BYTE *)v22 + 24) = 0;
        v23 = *v22;
        if (!*v22)
          v23 = *(char **)v22[1];
        memcpy(v23, &v21[4 * a1[3]], 4 * v7);
        memcpy(&v23[4 * v7], v21, 4 * (v5 - v7));
        ++v19;
        v4 = a1[1];
        if (v19 >= *(unsigned int *)(v4 + 28))
          goto LABEL_39;
      }
    }
    else
    {
      v9 = 0;
      while (1)
      {
        v10 = *(char ***)(*(_QWORD *)(v4 + 16) + 8 * v9);
        v11 = *v10;
        if (!*v10)
          v11 = *(char **)v10[1];
        if (v9 >= *(unsigned int *)(a2 + 28))
          break;
        v12 = *(char ***)(*(_QWORD *)(a2 + 16) + 8 * v9);
        *((_BYTE *)v12 + 24) = 0;
        v13 = *v12;
        if (!*v12)
          v13 = *(char **)v12[1];
        memcpy(v13, &v11[4 * a1[3]], 4 * v7);
        memcpy(&v13[4 * v7], v11, 4 * (v5 - v7));
        bzero(&v13[4 * v5], v8);
        ++v9;
        v4 = a1[1];
        if (v9 >= *(unsigned int *)(v4 + 28))
          goto LABEL_39;
      }
    }
    __break(0xC471u);
  }
  else
  {
LABEL_39:
    v29 = (a1[3] + v5) % *a1;
    a1[3] = v29;
    if (v30 < a3)
      a1[4] = v29;
    a1[2] -= v5;
  }
}

void WebCore::Reverb::Reverb(WebCore::Reverb *this, WebCore::AudioBus *a2, unint64_t a3, uint64_t a4, int a5, int a6)
{
  float v11;
  uint64_t v12;
  vDSP_Length v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  const float *v17;
  float v18;
  float v19;
  float __C;

  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  v11 = 1.0;
  if (!a6)
  {
LABEL_16:
    WebCore::Reverb::initialize(this, a2, a3, a4, a5, v11);
    return;
  }
  v12 = *((unsigned int *)a2 + 7);
  v13 = *((_QWORD *)a2 + 1);
  if (!(_DWORD)v12)
  {
    v15 = 0.0;
LABEL_10:
    v18 = sqrtf(v15 / (float)(v13 * v12));
    if (v18 == INFINITY || v18 < 0.000125)
      v18 = 0.000125;
    v11 = (float)(1.0 / v18) * 0.0012589;
    v19 = *((float *)a2 + 13);
    if (v19 != 0.0)
      v11 = v11 * (float)(44100.0 / v19);
    if (*((_DWORD *)a2 + 7) == 4)
      v11 = v11 * 0.5;
    goto LABEL_16;
  }
  v14 = 0;
  v15 = 0.0;
  while (*((_DWORD *)a2 + 7) > v14)
  {
    v16 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8 * v14);
    v17 = *(const float **)v16;
    if (!*(_QWORD *)v16)
      v17 = **(const float ***)(v16 + 8);
    __C = 0.0;
    vDSP_svesq(v17, 1, &__C, v13);
    v15 = v15 + __C;
    if (v12 == ++v14)
      goto LABEL_10;
  }
  __break(0xC471u);
}

uint64_t *WebCore::Reverb::initialize(WebCore::Reverb *this, WebCore::AudioBus *a2, unint64_t a3, uint64_t a4, int a5, float a6)
{
  unsigned int v12;
  uint64_t v13;
  char **v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  void **v22;
  uint64_t v23;
  WebCore::ReverbConvolver *v24;
  void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *result;
  WTF *v32;
  void *v33;
  WebCore::AudioBus *v34;
  void *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  WebCore::ReverbConvolver *v39;

  *(_QWORD *)this = *((_QWORD *)a2 + 1);
  v12 = *((_DWORD *)a2 + 7);
  *((_DWORD *)this + 2) = v12;
  if (v12 <= 2)
    v13 = 2;
  else
    v13 = v12;
  v14 = (char **)((char *)this + 16);
  if (*((_DWORD *)this + 6) < v13)
  {
    if (v13 >> 29)
    {
      __break(0xC471u);
LABEL_28:
      JUMPOUT(0x19611553CLL);
    }
    v15 = *v14;
    v16 = *((unsigned int *)this + 7);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    *((_DWORD *)this + 6) = v13;
    *((_QWORD *)this + 2) = v17;
    memcpy(v17, v15, 8 * v16);
    if (v15)
    {
      if (*v14 == v15)
      {
        *((_QWORD *)this + 2) = 0;
        *((_DWORD *)this + 6) = 0;
      }
      WTF::fastFree((WTF *)v15, v18);
    }
  }
  v19 = 0;
  v20 = 0;
  do
  {
    v21 = *((_DWORD *)this + 2) - 1;
    if (v21 >= v19)
      v21 = v19;
    if (*((_DWORD *)a2 + 7) <= v21)
    {
      __break(0xC471u);
      goto LABEL_28;
    }
    v22 = *(void ***)(*((_QWORD *)a2 + 2) + 8 * v21);
    v23 = WTF::fastMalloc((WTF *)0x90);
    v24 = (WebCore::ReverbConvolver *)WebCore::ReverbConvolver::ReverbConvolver(v23, v22, a3, a4, v20, a5, a6);
    v39 = v24;
    v26 = *((unsigned int *)this + 7);
    if ((_DWORD)v26 == *((_DWORD *)this + 6))
    {
      v27 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v26 + 1, (unint64_t)&v39);
      v26 = *((unsigned int *)this + 7);
      v28 = *((_QWORD *)this + 2);
      v29 = *(_QWORD *)v27;
      *(_QWORD *)v27 = 0;
      *(_QWORD *)(v28 + 8 * v26) = v29;
    }
    else
    {
      v30 = *v14;
      v39 = 0;
      *(_QWORD *)&v30[8 * v26] = v24;
    }
    *((_DWORD *)this + 7) = v26 + 1;
    result = (uint64_t *)v39;
    v39 = 0;
    if (result)
    {
      WebCore::ReverbConvolver::~ReverbConvolver((WebCore::ReverbConvolver *)result, v25);
      result = (uint64_t *)WTF::fastFree(v32, v33);
    }
    v20 += a3;
    ++v19;
  }
  while ((_DWORD)v13 != v19);
  if (*((_DWORD *)this + 2) == 4)
  {
    v34 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    result = (uint64_t *)WebCore::AudioBus::AudioBus(v34, (void *)2, 0x100uLL, 1);
    v36 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = result;
    if (v36)
    {
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v36);
        v39 = (WebCore::ReverbConvolver *)v36;
        return WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v39, v35);
      }
    }
  }
  return result;
}

void WebCore::Reverb::process(WebCore::Reverb *this, const WebCore::AudioBus *a2, WebCore::AudioBus *a3, vDSP_Length a4)
{
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  void **v8;
  _QWORD *v9;
  int v10;
  char ***v13;
  char **v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char **v25;
  char ***v26;
  char **v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  int v33;
  char **v34;
  char ***v35;
  char **v36;
  char **v37;
  unint64_t v38;
  uint64_t v39;
  void **v40;
  _QWORD *v41;

  v5 = *((unsigned int *)a3 + 7);
  if (v5 >= 3)
  {
    for (i = 0; i < v5; ++i)
    {
      v7 = *(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * i);
      if (!*(_BYTE *)(v7 + 24))
      {
        *(_BYTE *)(v7 + 24) = 1;
        v8 = *(void ***)(v7 + 8);
        v9 = (_QWORD *)(v7 + 16);
        if (v8)
          v9 = v8 + 1;
        else
          v8 = (void **)v7;
        bzero(*v8, 4 * *v9);
        v5 = *((unsigned int *)a3 + 7);
      }
    }
    return;
  }
  if (!*((_DWORD *)a3 + 7))
    goto LABEL_77;
  v10 = *((_DWORD *)a2 + 7);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x196115904);
  }
  v13 = (char ***)*((_QWORD *)a3 + 2);
  v14 = *v13;
  v15 = (uint64_t *)*((_QWORD *)a2 + 2);
  v16 = *v15;
  v17 = *((_DWORD *)this + 2);
  if (v10 != 2)
  {
    if (v5 == 2 && v10 == 1 && v17 == 2)
    {
      if (!*((_DWORD *)this + 7))
        goto LABEL_61;
      WebCore::ReverbConvolver::process(**((_QWORD **)this + 2), *v15, v14, a4);
      if (*((_DWORD *)a3 + 7) < 2u)
      {
        __break(0xC471u);
        JUMPOUT(0x196115924);
      }
      if (*((_DWORD *)this + 7) < 2u)
      {
LABEL_61:
        __break(0xC471u);
        JUMPOUT(0x19611590CLL);
      }
      v14 = *(char ***)(*((_QWORD *)a3 + 2) + 8);
      v20 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
LABEL_38:
      v21 = v16;
LABEL_39:
      WebCore::ReverbConvolver::process(v20, v21, v14, a4);
      return;
    }
    if (v10 == 1 && v17 == 1)
    {
      if (!*((_DWORD *)this + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x196115944);
      }
      v20 = **((_QWORD **)this + 2);
      goto LABEL_38;
    }
    if (v5 != 2 || v10 != 1 || v17 != 4)
      goto LABEL_51;
    v32 = *((_QWORD *)this + 4);
    v33 = *(_DWORD *)(v32 + 28);
    if (!v33)
    {
      __break(0xC471u);
      JUMPOUT(0x196115964);
    }
    if (v33 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x19611596CLL);
    }
    if (!*((_DWORD *)this + 7))
    {
      __break(0xC471u);
      JUMPOUT(0x196115974);
    }
    v34 = v13[1];
    v35 = *(char ****)(v32 + 16);
    v37 = *v35;
    v36 = v35[1];
    WebCore::ReverbConvolver::process(**((_QWORD **)this + 2), *v15, v14, a4);
    if (*((_DWORD *)this + 7) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x19611597CLL);
    }
    WebCore::ReverbConvolver::process(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v16, v34, a4);
    if (*((_DWORD *)this + 7) <= 2u)
    {
      __break(0xC471u);
      JUMPOUT(0x196115984);
    }
    WebCore::ReverbConvolver::process(*(_QWORD *)(*((_QWORD *)this + 2) + 16), v16, v37, a4);
    if (*((_DWORD *)this + 7) > 3u)
    {
      v29 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
      v30 = v16;
      v31 = v36;
LABEL_50:
      WebCore::ReverbConvolver::process(v29, v30, v31, a4);
      WebCore::AudioBus::sumFrom((uint64_t)a3, *((_QWORD *)this + 4), 0);
      return;
    }
LABEL_77:
    __break(0xC471u);
    JUMPOUT(0x1961158FCLL);
  }
  if (v5 == 2 && (v17 - 1) <= 1)
  {
    if (!*((_DWORD *)this + 7))
    {
      __break(0xC471u);
      JUMPOUT(0x196115914);
    }
    v18 = v15[1];
    v19 = v13[1];
    WebCore::ReverbConvolver::process(**((_QWORD **)this + 2), *v15, v14, a4);
    if (*((_DWORD *)this + 7) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x19611591CLL);
    }
    v20 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
    v21 = v18;
    v14 = v19;
    goto LABEL_39;
  }
  if (v5 == 2 && v17 == 4)
  {
    v22 = *((_QWORD *)this + 4);
    v23 = *(_DWORD *)(v22 + 28);
    if (!v23)
    {
      __break(0xC471u);
      JUMPOUT(0x19611592CLL);
    }
    if (v23 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x196115934);
    }
    if (!*((_DWORD *)this + 7))
    {
      __break(0xC471u);
      JUMPOUT(0x19611593CLL);
    }
    v24 = v15[1];
    v25 = v13[1];
    v26 = *(char ****)(v22 + 16);
    v28 = *v26;
    v27 = v26[1];
    WebCore::ReverbConvolver::process(**((_QWORD **)this + 2), *v15, v14, a4);
    if (*((_DWORD *)this + 7) <= 1u)
    {
      __break(0xC471u);
      JUMPOUT(0x19611594CLL);
    }
    WebCore::ReverbConvolver::process(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v16, v25, a4);
    if (*((_DWORD *)this + 7) <= 2u)
    {
      __break(0xC471u);
      JUMPOUT(0x196115954);
    }
    WebCore::ReverbConvolver::process(*(_QWORD *)(*((_QWORD *)this + 2) + 16), v24, v28, a4);
    if (*((_DWORD *)this + 7) <= 3u)
    {
      __break(0xC471u);
      JUMPOUT(0x19611595CLL);
    }
    v29 = *(_QWORD *)(*((_QWORD *)this + 2) + 24);
    v30 = v24;
    v31 = v27;
    goto LABEL_50;
  }
LABEL_51:
  v38 = 0;
  do
  {
    v39 = *(_QWORD *)(*((_QWORD *)a3 + 2) + 8 * v38);
    if (!*(_BYTE *)(v39 + 24))
    {
      *(_BYTE *)(v39 + 24) = 1;
      v40 = *(void ***)(v39 + 8);
      v41 = (_QWORD *)(v39 + 16);
      if (v40)
        v41 = v40 + 1;
      else
        v40 = (void **)v39;
      bzero(*v40, 4 * *v41);
      v5 = *((unsigned int *)a3 + 7);
    }
    ++v38;
  }
  while (v38 < v5);
}

uint64_t WebCore::PlatformMediaSession::isPlayingToWirelessPlaybackTarget(WebCore::PlatformMediaSession *this)
{
  return *((unsigned __int8 *)this + 74);
}

uint64_t WebCore::PlatformMediaSession::requiresPlaybackTargetRouteMonitoring(WebCore::PlatformMediaSession *this)
{
  return 0;
}

const char *WebCore::PlatformMediaSession::logClassName(WebCore::PlatformMediaSession *this)
{
  return "PlatformMediaSession";
}

uint64_t WebCore::PlatformMediaSession::isLongEnoughForMainContent(WebCore::PlatformMediaSession *this)
{
  return 0;
}

const char *`non-virtual thunk to'WebCore::PlatformMediaSession::logClassName(WebCore::PlatformMediaSession *this)
{
  return "PlatformMediaSession";
}

uint64_t WebCore::PlatformMediaSessionClient::canProduceAudio(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionClient::isSuspended(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionClient::isPlaying(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionClient::isAudible(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionClient::isNowPlayingEligible(WebCore::PlatformMediaSessionClient *this)
{
  return 0;
}

void WebCore::PlatformMediaSessionClient::selectBestMediaSession(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

const char *WebCore::PlatformMediaSessionManager::logClassName(WebCore::PlatformMediaSessionManager *this)
{
  return "PlatformMediaSessionManager";
}

uint64_t WebCore::PlatformMediaSessionManager::hasActiveNowPlayingSession(WebCore::PlatformMediaSessionManager *this)
{
  return 0;
}

void WebCore::PlatformMediaSessionManager::lastUpdatedNowPlayingTitle(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

double WebCore::PlatformMediaSessionManager::lastUpdatedNowPlayingDuration(WebCore::PlatformMediaSessionManager *this)
{
  return NAN;
}

double WebCore::PlatformMediaSessionManager::lastUpdatedNowPlayingElapsedTime(WebCore::PlatformMediaSessionManager *this)
{
  return NAN;
}

uint64_t WebCore::PlatformMediaSessionManager::lastUpdatedNowPlayingInfoUniqueIdentifier(WebCore::PlatformMediaSessionManager *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionManager::registeredAsNowPlayingApplication(WebCore::PlatformMediaSessionManager *this)
{
  return 0;
}

uint64_t WebCore::PlatformMediaSessionManager::haveEverRegisteredAsNowPlayingApplication(WebCore::PlatformMediaSessionManager *this)
{
  return 0;
}

void WebCore::PlatformMediaSessionManager::supportedCommands(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void WTF::AggregateLogger::~AggregateLogger(WTF::AggregateLogger *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = off_1E3407BF0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = *(unsigned int **)(v2 + 8 * i);
        if (v5 != (unsigned int *)-1)
        {
          *(_QWORD *)(v2 + 8 * i) = 0;
          if (v5)
          {
            v6 = v5 + 2;
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              atomic_store(1u, v5 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *(_QWORD *)this = off_1E3407BF0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = *(unsigned int **)(v3 + 8 * i);
        if (v6 != (unsigned int *)-1)
        {
          *(_QWORD *)(v3 + 8 * i) = 0;
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              atomic_store(1u, v6 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>,WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>,WTF::HashTraits<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>,WTF::HashTraits<WTF::RefPtr<WTF::Logger const,WTF::RawPtrTraits<WTF::Logger const>,WTF::DefaultRefDerefTraits<WTF::Logger const>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t i;
  unsigned int **v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int **v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v10 = (unsigned int **)(v4 + 8 * i);
      v11 = *v10;
      if (*v10 != (unsigned int *)-1)
      {
        if (v11)
        {
          v12 = *a1;
          if (*a1)
            v13 = *(_DWORD *)(v12 - 8);
          else
            v13 = 0;
          v14 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
          v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
          v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
          v17 = v13 & ((v16 >> 31) ^ v16);
          v18 = 1;
          do
          {
            v19 = v17;
            v20 = *(_QWORD *)(v12 + 8 * v17);
            v17 = (v17 + v18++) & v13;
          }
          while (v20);
          v21 = (unsigned int **)(v12 + 8 * v19);
          *v21 = 0;
          v22 = *v10;
          *v10 = 0;
          *v21 = v22;
          v23 = *v10;
          *v10 = 0;
          if (v23)
          {
            v24 = v23 + 2;
            do
            {
              v25 = __ldaxr(v24);
              v26 = v25 - 1;
            }
            while (__stlxr(v26, v24));
            if (!v26)
            {
              atomic_store(1u, v23 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
            }
          }
        }
        else
        {
          *v10 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

unsigned int *WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::fill(unsigned int *result, _QWORD *a2, unint64_t a3)
{
  unsigned int *v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = result;
  v6 = result[3];
  if (v6 <= a3)
  {
    v8 = result[2];
    if (v8 < a3)
    {
      if ((_DWORD)v8)
      {
        if ((_DWORD)v6)
          result[3] = 0;
        result = *(unsigned int **)result;
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)v5 = 0;
          v5[2] = 0;
          result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
          LODWORD(v8) = v5[2];
        }
      }
      if (v8 < a3)
      {
        if (a3 >> 29)
        {
          __break(0xC471u);
          return result;
        }
        v9 = *(_QWORD **)v5;
        v10 = v5[3];
        v11 = (void *)WTF::fastMalloc((WTF *)(8 * a3));
        v5[2] = a3;
        *(_QWORD *)v5 = v11;
        result = (unsigned int *)memcpy(v11, v9, 8 * v10);
        if (v9)
        {
          if (*(_QWORD **)v5 == v9)
          {
            *(_QWORD *)v5 = 0;
            v5[2] = 0;
          }
          result = (unsigned int *)WTF::fastFree((WTF *)v9, v12);
        }
      }
    }
    v7 = v5[3];
  }
  else
  {
    v7 = a3;
  }
  v13 = *(_QWORD **)v5;
  v14 = v7;
  if (v7)
  {
    v15 = v7 + 1;
    v16 = *(_QWORD **)v5;
    do
    {
      *v16++ = *a2;
      --v15;
    }
    while (v15 > 1);
  }
  if (v7 != a3)
  {
    v17 = &v13[v7];
    v18 = 8 * a3 - 8 * v14;
    do
    {
      *v17++ = *a2;
      v18 -= 8;
    }
    while (v18);
  }
  v5[3] = a3;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MultiChannelResampler::*)(std::span<float,18446744073709551615ul>,unsigned long,unsigned int),WebCore::MultiChannelResampler*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,unsigned long &>,void,std::span<float,18446744073709551615ul>,unsigned long>::call(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD);
  _QWORD *v6;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 8);
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 24) + (v4 >> 1));
  if ((v4 & 1) != 0)
    v5 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, _QWORD))(*v6 + v5);
  return v5(v6, a2, a3, a4, *(unsigned int *)(a1 + 32));
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [9],WebCore::PlatformMediaSessionState>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, unsigned __int8 *a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  int v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  unsigned __int8 *v50;
  WTF::Logger *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  uint8_t buf[4];
  _BYTE v58[12];
  int v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v54, a4);
  v50 = a5;
  v10 = *a5;
  if ((_MergedGlobals_44[0] & 1) == 0)
  {
    _MergedGlobals_45 += 2;
    dword_1ECE7CEB0 += 2;
    qword_1EE337E60 = (uint64_t)&_MergedGlobals_45;
    unk_1EE337E68 = &dword_1ECE7CEB0;
    dword_1ECE7CED0 += 2;
    dword_1ECE7CEF0 += 2;
    qword_1EE337E70 = (uint64_t)&dword_1ECE7CED0;
    unk_1EE337E78 = &dword_1ECE7CEF0;
    dword_1ECE7CF10 += 2;
    qword_1EE337E80 = (uint64_t)&dword_1ECE7CF10;
    _MergedGlobals_44[0] = 1;
  }
  v11 = *(_QWORD *)&_MergedGlobals_44[8 * v10 + 8];
  if (v11)
    *(_DWORD *)v11 += 2;
  if (v55)
  {
    v12 = *((_DWORD *)v55 + 1);
    if (v54)
      goto LABEL_7;
LABEL_99:
    v13 = 0;
    if (v11)
      goto LABEL_8;
LABEL_100:
    v14 = 0;
    goto LABEL_9;
  }
  v12 = 0;
  if (!v54)
    goto LABEL_99;
LABEL_7:
  v13 = *((_DWORD *)v54 + 1);
  if (!v11)
    goto LABEL_100;
LABEL_8:
  v14 = *(_DWORD *)(v11 + 4);
LABEL_9:
  if ((v14 | v13) < 0
    || ((v15 = __OFADD__(v13, v14), v16 = v13 + v14, !v15) ? (v17 = 0) : (v17 = 1),
        v12 < 0 || (v17 & 1) != 0 || (result = (v12 + v16), __OFADD__(v12, v16))))
  {
    v56 = 0;
    goto LABEL_105;
  }
  if (v55 && (*((_BYTE *)v55 + 16) & 4) == 0)
  {
    v18 = 0;
    goto LABEL_23;
  }
  if (v54)
  {
    v19 = *((_DWORD *)v54 + 4);
    v18 = (v19 >> 2) & 1;
    if (!v11 || (v19 & 4) == 0)
    {
LABEL_23:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v18, v55, (uint64_t)v54, v11, &v56);
      if (v56)
      {
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v11, v20);
          else
            *(_DWORD *)v11 -= 2;
        }
        goto LABEL_27;
      }
LABEL_105:
      __break(0xC471u);
      return result;
    }
LABEL_22:
    v18 = (*(unsigned __int8 *)(v11 + 16) >> 2) & 1;
    goto LABEL_23;
  }
  if (v11)
    goto LABEL_22;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, v55, 0, 0, &v56);
  if (!v56)
    goto LABEL_105;
LABEL_27:
  v21 = v54;
  v54 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v55;
  v55 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = *(NSObject **)(a1 + 32);
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v24)
  {
    WTF::String::utf8();
    v26 = v52 ? (char *)v52 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v58 = v26;
    _os_log_impl(&dword_1940B8000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v24 = (uint64_t)v52;
    v52 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        v24 = WTF::fastFree((WTF *)v24, v25);
      else
        --*(_DWORD *)v24;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v27 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v28 = *v27;
      if ((v28 & 1) != 0)
        break;
      v29 = __ldaxr(v27);
      if (v29 == v28)
      {
        if (!__stxr(v28 | 1, v27))
        {
          v30 = WTF::Logger::observers((WTF::Logger *)v24);
          v31 = *(unsigned int *)(v30 + 12);
          if ((_DWORD)v31)
          {
            v32 = *(uint64_t **)v30;
            v33 = *(_QWORD *)v30 + 8 * v31;
            do
            {
              v34 = *v32;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v59 = 0;
              WTF::String::String((WTF::String *)&v60, a4);
              v35 = *v50;
              v61 = 0;
              if ((_MergedGlobals_44[0] & 1) == 0)
              {
                _MergedGlobals_45 += 2;
                dword_1ECE7CEB0 += 2;
                qword_1EE337E60 = (uint64_t)&_MergedGlobals_45;
                unk_1EE337E68 = &dword_1ECE7CEB0;
                dword_1ECE7CED0 += 2;
                dword_1ECE7CEF0 += 2;
                qword_1EE337E70 = (uint64_t)&dword_1ECE7CED0;
                unk_1EE337E78 = &dword_1ECE7CEF0;
                dword_1ECE7CF10 += 2;
                qword_1EE337E80 = (uint64_t)&dword_1ECE7CF10;
                _MergedGlobals_44[0] = 1;
              }
              v36 = *(WTF::StringImpl **)&_MergedGlobals_44[8 * v35 + 8];
              if (v36)
                *(_DWORD *)v36 += 2;
              v62 = v36;
              v52 = 0;
              v53 = 0;
              v37 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v53) = 3;
              v52 = v37;
              v38 = HIDWORD(v53);
              *((_DWORD *)v37 + 4 * HIDWORD(v53)) = *(_DWORD *)buf;
              v39 = *(_QWORD *)&v58[4];
              if (*(_QWORD *)&v58[4])
                **(_DWORD **)&v58[4] += 2;
              *((_QWORD *)v37 + 2 * v38 + 1) = v39;
              *((_DWORD *)v37 + 4 * (v38 + 1)) = v59;
              v40 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 1) + 1) = v40;
              *((_DWORD *)v37 + 4 * (v38 + 2)) = v61;
              v41 = v62;
              if (v62)
                *(_DWORD *)v62 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 2) + 1) = v41;
              HIDWORD(v53) = v38 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v34 + 16))(v34, a1, a2, &v52);
              v42 = v52;
              if (HIDWORD(v53))
              {
                v43 = 16 * HIDWORD(v53);
                v44 = (WTF::StringImpl **)((char *)v52 + 8);
                do
                {
                  v45 = *v44;
                  *v44 = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2)
                      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v25);
                    else
                      *(_DWORD *)v45 -= 2;
                  }
                  v44 += 2;
                  v43 -= 16;
                }
                while (v43);
                v42 = v52;
              }
              if (v42)
              {
                v52 = 0;
                LODWORD(v53) = 0;
                WTF::fastFree(v42, v25);
              }
              v46 = v62;
              v62 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = v60;
              v60 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = *(WTF::StringImpl **)&v58[4];
              *(_QWORD *)&v58[4] = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v25);
                else
                  *(_DWORD *)v48 -= 2;
              }
              ++v32;
            }
            while (v32 != (uint64_t *)v33);
          }
          v49 = __ldxr(v27);
          if (v49 == 1)
          {
            if (!__stlxr(0, v27))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v56;
  v56 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v25);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::PlatformMediaSessionManager::*&)(void),WebCore::PlatformMediaSessionManager*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::activeAudioSessionRequired(void)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  BOOL v3;

  if ((***(unsigned int (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32)))
    v3 = *(_BYTE *)(a2 + 48) == 2;
  else
    v3 = 0;
  if (v3)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 72))(*(_QWORD *)(a2 + 32));
  else
    return 0;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::beginInterruption(WebCore::PlatformMediaSessionInterruptionType)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformMediaSession::beginInterruption(a2, *(unsigned __int8 *)(a1 + 8));
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::endInterruption(WebCore::PlatformMediaSessionEndInterruptionFlags)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformMediaSession::endInterruption(a2, *(_BYTE *)(a1 + 8));
}

unsigned int *WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  v2 = result[2];
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v5));
      v6[2] = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = result;
        v11 = (unsigned int **)v7;
        do
        {
          v12 = *v11;
          *v11 = 0;
          *(_QWORD *)v10 = v12;
          result = *v11;
          *v11 = 0;
          if (result)
          {
            do
            {
              v13 = __ldaxr(result);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, result));
            if (!v14)
            {
              atomic_store(1u, result);
              result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
            }
          }
          v10 += 2;
          ++v11;
        }
        while (v11 != (unsigned int **)((char *)v7 + 8 * v8));
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          v6[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::sessionWillBeginPlayback(WebCore::PlatformMediaSession &)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == a2 || *(_BYTE *)(a2 + 48) != 2)
    return 0;
  v6 = (***(uint64_t (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32));
  v7 = (***(uint64_t (****)(_QWORD))(v2 + 32))(*(_QWORD *)(v2 + 32));
  if (v7 != v6 && ((v6 & 0xFE) != 2 || (v7 & 0xFE) != 2))
    return 0;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 184))(*(_QWORD *)(a2 + 32));
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 184))(*(_QWORD *)(v2 + 32));
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11 || v9 != v10)
    return 1;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 192))(*(_QWORD *)(a2 + 32)) & 1) != 0)
    return 0;
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 192))(*(_QWORD *)(v2 + 32)) ^ 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::sessionWillBeginPlayback(WebCore::PlatformMediaSession &)::$_1,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 248))(*(_QWORD *)(a2 + 32));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
  v6 = v5;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 256))(*(_QWORD *)(a2 + 32));
  v9[0] = v4;
  v9[1] = v6;
  v9[2] = "pauseSession";
  v9[3] = v7;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  if (*(_BYTE *)(a2 + 48) == 4)
    *(_BYTE *)(a2 + 49) = 3;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 40))(*(_QWORD *)(a2 + 32));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::applicationWillBecomeInactive(void)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return (*(_DWORD *)(v2 + 4 * (***(unsigned int (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32)) + 8) >> 4) & 1;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::applicationWillBecomeInactive(void)::$_1,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformMediaSession::beginInterruption(a2, 6);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::applicationDidBecomeActive(void)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  return (*(_DWORD *)(v2 + 4 * (***(unsigned int (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32)) + 8) >> 4) & 1;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::applicationDidBecomeActive(void)::$_1,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformMediaSession::endInterruption(a2, 1u);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::applicationDidEnterBackground(BOOL)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  if (**(_BYTE **)(a1 + 16)
    && (*(_DWORD *)(v3 + 4 * (***(unsigned int (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32)) + 8) & 0x20) != 0)
  {
    v5 = 4;
    return WebCore::PlatformMediaSession::beginInterruption(a2, v5);
  }
  result = (WTF::StringImpl *)(***(uint64_t (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32));
  if ((*(_DWORD *)(v3 + 4 * result + 8) & 2) != 0)
  {
    v5 = 2;
    return WebCore::PlatformMediaSession::beginInterruption(a2, v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::applicationWillEnterForeground(BOOL)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (**(_BYTE **)(a1 + 16)
    && (*(_DWORD *)(v3 + 4 * (***(unsigned int (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32)) + 8) & 0x20) != 0)
  {
    return 1;
  }
  else
  {
    return (*(_DWORD *)(v3 + 4 * (***(unsigned int (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32)) + 8) >> 1) & 1;
  }
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::applicationWillEnterForeground(BOOL)::$_1,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformMediaSession::endInterruption(a2, 1u);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::processWillSuspend(void)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 200))(*(_QWORD *)(a2 + 32));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::processDidResume(void)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 200))(*(_QWORD *)(a2 + 32));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::sessionCanProduceAudioChanged(void)::$_0,void>::call(uint64_t a1)
{
  WebCore::PlatformMediaSessionManager *v1;

  v1 = *(WebCore::PlatformMediaSessionManager **)(a1 + 8);
  *((_BYTE *)v1 + 56) = 0;
  WebCore::PlatformMediaSessionManager::maybeActivateAudioSession(v1);
  return (*(uint64_t (**)(WebCore::PlatformMediaSessionManager *))(*(_QWORD *)v1 + 288))(v1);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::processSystemWillSleep(void)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformMediaSession::beginInterruption(a2, 1);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::processSystemDidWake(void)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformMediaSession::endInterruption(a2, 1u);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::pauseAllMediaPlaybackForGroup(WTF::ObjectIdentifierGeneric<WebCore::MediaSessionGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 248))(*(_QWORD *)(a2 + 32));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
  v6 = v5;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 256))(*(_QWORD *)(a2 + 32));
  v9[0] = v4;
  v9[1] = v6;
  v9[2] = "pauseSession";
  v9[3] = v7;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
  if (*(_BYTE *)(a2 + 48) == 4)
    *(_BYTE *)(a2 + 49) = 3;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 40))(*(_QWORD *)(a2 + 32));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::mediaPlaybackIsPaused(WTF::ObjectIdentifierGeneric<WebCore::MediaSessionGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48) == 3)
    **(_BYTE **)(result + 8) = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::stopAllMediaPlaybackForProcess(void)::$_0,void,WebCore::PlatformMediaSession &>::call(int a1, WebCore::PlatformMediaSession *this)
{
  return WebCore::PlatformMediaSession::stopSession(this);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::suspendAllMediaPlaybackForGroup(WTF::ObjectIdentifierGeneric<WebCore::MediaSessionGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformMediaSession::beginInterruption(a2, 7);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::resumeAllMediaPlaybackForGroup(WTF::ObjectIdentifierGeneric<WebCore::MediaSessionGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::PlatformMediaSession::endInterruption(a2, 1u);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::suspendAllMediaBufferingForGroup(WTF::ObjectIdentifierGeneric<WebCore::MediaSessionGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::resumeAllMediaBufferingForGroup(WTF::ObjectIdentifierGeneric<WebCore::MediaSessionGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
}

unint64_t WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

BOOL WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::forEachSessionInGroup(WTF::ObjectIdentifierGeneric<WebCore::MediaSessionGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WebCore::PlatformMediaSession &)> const&)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 184))(*(_QWORD *)(a2 + 32)) == *(_QWORD *)(a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::forEachSessionInGroup(WTF::ObjectIdentifierGeneric<WebCore::MediaSessionGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Function<void ()(WebCore::PlatformMediaSession &)> const&)::$_1,void,WebCore::PlatformMediaSession &>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 16))(**(_QWORD **)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::scheduleUpdateSessionState(void)::$_0,void>::call(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(a1 + 8);
  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 288))(v1);
  v1[80] = 0;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::bestEligibleSessionForRemoteControls(WTF::Function<BOOL ()(WebCore::PlatformMediaSession const&)> const&,WebCore::PlatformMediaSession::PlaybackControlsPurpose)::$_0,void,WebCore::PlatformMediaSession&>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 8))(*(_QWORD *)(a2 + 32));
  v5 = *(uint64_t **)(a1 + 8);
  v6 = (_DWORD *)v5 + 3;
  v7 = *((unsigned int *)v5 + 3);
  if ((_DWORD)result == 4)
  {
    if ((_DWORD)v7)
      return result;
    v8 = *(unsigned int **)(a1 + 16);
    v6 = v8 + 3;
    v9 = v8[3];
    if (v8[3] == v8[2])
    {
      WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, v9 + 1);
      v9 = v8[3];
      v10 = *(_QWORD *)v8;
      result = *(_QWORD *)(a2 + 16);
      if (result)
        goto LABEL_40;
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = a2;
      v12 = *(unsigned int **)(a2 + 16);
      *(_QWORD *)(a2 + 16) = result;
      if (!v12)
        goto LABEL_40;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
      result = *(_QWORD *)(a2 + 16);
      if (result)
      {
LABEL_40:
        do
          v15 = __ldaxr((unsigned int *)result);
        while (__stlxr(v15 + 1, (unsigned int *)result));
      }
    }
    else
    {
      v10 = *(_QWORD *)v8;
      result = *(_QWORD *)(a2 + 16);
      if (result)
        goto LABEL_41;
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = a2;
      v28 = *(unsigned int **)(a2 + 16);
      *(_QWORD *)(a2 + 16) = result;
      if (!v28)
        goto LABEL_41;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        atomic_store(1u, v28);
        WTF::fastFree((WTF *)v28, v27);
      }
      result = *(_QWORD *)(a2 + 16);
      if (result)
      {
LABEL_41:
        do
          v31 = __ldaxr((unsigned int *)result);
        while (__stlxr(v31 + 1, (unsigned int *)result));
      }
    }
  }
  else
  {
    if ((_DWORD)v7 != *((_DWORD *)v5 + 2))
    {
      v21 = *v5;
      result = *(_QWORD *)(a2 + 16);
      if (result)
        goto LABEL_42;
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = a2;
      v23 = *(unsigned int **)(a2 + 16);
      *(_QWORD *)(a2 + 16) = result;
      if (!v23)
        goto LABEL_42;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WTF::fastFree((WTF *)v23, v22);
      }
      result = *(_QWORD *)(a2 + 16);
      if (result)
      {
LABEL_42:
        do
          v26 = __ldaxr((unsigned int *)result);
        while (__stlxr(v26 + 1, (unsigned int *)result));
      }
      *(_QWORD *)(v21 + 8 * v7) = result;
      goto LABEL_37;
    }
    WTF::Vector<WTF::WeakPtr<WebCore::PlatformMediaSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(unsigned int **)(a1 + 8), v7 + 1);
    v9 = *((unsigned int *)v5 + 3);
    v10 = *v5;
    result = *(_QWORD *)(a2 + 16);
    if (result)
      goto LABEL_43;
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = a2;
    v17 = *(unsigned int **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = result;
    if (!v17)
      goto LABEL_43;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, v16);
    }
    result = *(_QWORD *)(a2 + 16);
    if (result)
    {
LABEL_43:
      do
        v20 = __ldaxr((unsigned int *)result);
      while (__stlxr(v20 + 1, (unsigned int *)result));
    }
  }
  *(_QWORD *)(v10 + 8 * v9) = result;
LABEL_37:
  ++*v6;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::nowPlayingMetadataChanged(WebCore::NowPlayingMetadata const&)::$_0,void,WTF::Observer<void ()(WebCore::NowPlayingMetadata const&)> &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::hasActiveNowPlayingSessionInGroup(WTF::ObjectIdentifierGeneric<WebCore::MediaSessionGroupIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t result, uint64_t a2)
{
  **(_BYTE **)(result + 8) |= *(_BYTE *)(a2 + 77);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3408110;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(WTF::Function<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3408110;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::enqueueTaskOnMainThread(WTF::Function<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PlatformMediaSessionManager::dumpSessionStates(void)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, _QWORD **a2)
{
  WTF::StringBuilder *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _WORD *v7;
  WTF::StringImpl *v8;
  char *v9;
  int8x16_t *v10;
  char *v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  __int128 v16;
  char *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int16 v24;
  char *v25;
  _WORD *v26;
  uint64_t v27;
  WTF::StringImpl *result;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  _DWORD __n[3];
  int8x16x2_t v32;
  int8x16x2_t v33;
  int8x16x2_t v34;

  *(_QWORD *)&__n[1] = *MEMORY[0x1E0C80C00];
  v3 = *(WTF::StringBuilder **)(a1 + 8);
  (*(void (**)(_QWORD *))(*a2[4] + 256))(a2[4]);
  WTF::Internal::appendHex();
  __n[0] = v4;
  ((void (*)(WTF::StringImpl **__return_ptr, _QWORD **))(*a2)[22])(&v29, a2);
  v5 = v29;
  v6 = *((_QWORD *)v3 + 1);
  if ((v6 || (v6 = *(_QWORD *)v3) != 0) && (*(_BYTE *)(v6 + 16) & 4) == 0 || v29 && (*((_BYTE *)v29 + 16) & 4) == 0)
  {
    v7 = (_WORD *)WTF::StringBuilder::extendBufferForAppendingWithUpconvert(v3);
    if (v7)
    {
      *v7 = 40;
      v9 = (char *)(v7 + 1);
      v10 = (int8x16_t *)((char *)__n - __n[0]);
      v11 = &v9[2 * __n[0]];
      if (__n[0] >= 0x40u)
      {
        v12 = &v9[2 * (__n[0] & 0xFFFFFFC0)];
        v16 = 0uLL;
        v17 = v9;
        do
        {
          v32.val[0] = *v10;
          v18 = v10[1];
          v33.val[0] = v10[2];
          v19 = v10[3];
          v10 += 4;
          v20 = v19;
          v33.val[1] = 0uLL;
          v34.val[0] = v18;
          v32.val[1] = 0uLL;
          v21 = v17;
          vst2q_s8(v21, v32);
          v21 += 32;
          v34.val[1] = 0uLL;
          vst2q_s8(v21, v34);
          v22 = v17 + 64;
          vst2q_s8(v22, v33);
          v23 = v17 + 96;
          vst2q_s8(v23, *(int8x16x2_t *)(&v16 - 1));
          v17 += 128;
        }
        while (v17 != v12);
      }
      else
      {
        v12 = v9;
      }
      while (v12 != v11)
      {
        v24 = v10->u8[0];
        v10 = (int8x16_t *)((char *)v10 + 1);
        *(_WORD *)v12 = v24;
        v12 += 2;
      }
      v25 = &v9[2 * __n[0]];
      *(_DWORD *)v25 = 3801129;
      *((_WORD *)v25 + 2) = 32;
      v26 = v25 + 6;
      v30 = v5;
      WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v30, v25 + 6);
      v27 = (uint64_t)v30;
      if (v30)
        v27 = *((unsigned int *)v30 + 1);
      v26[v27] = 10;
    }
  }
  else
  {
    v13 = (_BYTE *)MEMORY[0x19AEA4824](v3);
    if (v13)
    {
      *v13 = 40;
      v14 = v13 + 1;
      if (__n[0])
      {
        v15 = (char *)__n - __n[0];
        if (__n[0] == 1)
          *v14 = *v15;
        else
          memcpy(v13 + 1, v15, __n[0]);
      }
      WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(&v14[__n[0]], "): ", 3u, (uint64_t)v5, "\n", 1u);
    }
  }
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::String>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  int v17;
  unsigned int v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::Logger *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::Logger *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  WTF::StringImpl **v48;
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[4];
  _BYTE v56[12];
  int v57;
  WTF::StringImpl *v58;
  int v59;
  WTF::StringImpl *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::String::String((WTF::String *)&v52, a4);
  v48 = (WTF::StringImpl **)a5;
  v10 = *a5;
  if (*a5)
    *(_DWORD *)v10 += 2;
  if (v53)
  {
    v11 = *((_DWORD *)v53 + 1);
    if (v52)
      goto LABEL_5;
LABEL_95:
    v12 = 0;
    if (v10)
      goto LABEL_6;
LABEL_96:
    v13 = 0;
    goto LABEL_7;
  }
  v11 = 0;
  if (!v52)
    goto LABEL_95;
LABEL_5:
  v12 = *((_DWORD *)v52 + 1);
  if (!v10)
    goto LABEL_96;
LABEL_6:
  v13 = *(_DWORD *)(v10 + 4);
LABEL_7:
  if ((v13 | v12) < 0
    || ((v14 = __OFADD__(v12, v13), v15 = v12 + v13, !v14) ? (v16 = 0) : (v16 = 1),
        v11 < 0 || (v16 & 1) != 0 || (result = (v11 + v15), __OFADD__(v11, v15))))
  {
    v54 = 0;
    goto LABEL_101;
  }
  if (v53 && (*((_BYTE *)v53 + 16) & 4) == 0)
  {
    v17 = 0;
    goto LABEL_21;
  }
  if (v52)
  {
    v18 = *((_DWORD *)v52 + 4);
    v17 = (v18 >> 2) & 1;
    if (!v10 || (v18 & 4) == 0)
    {
LABEL_21:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v17, v53, (uint64_t)v52, v10, &v54);
      if (v54)
      {
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v10, v19);
          else
            *(_DWORD *)v10 -= 2;
        }
        goto LABEL_25;
      }
LABEL_101:
      __break(0xC471u);
      return result;
    }
LABEL_20:
    v17 = (*(unsigned __int8 *)(v10 + 16) >> 2) & 1;
    goto LABEL_21;
  }
  if (v10)
    goto LABEL_20;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, v53, 0, 0, &v54);
  if (!v54)
    goto LABEL_101;
LABEL_25:
  v20 = v52;
  v52 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v53;
  v53 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = *(NSObject **)(a1 + 32);
  v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v23)
  {
    WTF::String::utf8();
    v25 = v50 ? (char *)v50 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v56 = v25;
    _os_log_impl(&dword_1940B8000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v23 = (uint64_t)v50;
    v50 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
        v23 = WTF::fastFree((WTF *)v23, v24);
      else
        --*(_DWORD *)v23;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v26 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v27 = *v26;
      if ((v27 & 1) != 0)
        break;
      v28 = __ldaxr(v26);
      if (v28 == v27)
      {
        if (!__stxr(v27 | 1, v26))
        {
          v29 = WTF::Logger::observers((WTF::Logger *)v23);
          v30 = *(unsigned int *)(v29 + 12);
          if ((_DWORD)v30)
          {
            v31 = *(uint64_t **)v29;
            v32 = *(_QWORD *)v29 + 8 * v30;
            do
            {
              v33 = *v31;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v57 = 0;
              WTF::String::String((WTF::String *)&v58, a4);
              v59 = 0;
              v34 = *v48;
              if (*v48)
                *(_DWORD *)v34 += 2;
              v60 = v34;
              v50 = 0;
              v51 = 0;
              v35 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v51) = 3;
              v50 = v35;
              v36 = HIDWORD(v51);
              *((_DWORD *)v35 + 4 * HIDWORD(v51)) = *(_DWORD *)buf;
              v37 = *(_QWORD *)&v56[4];
              if (*(_QWORD *)&v56[4])
                **(_DWORD **)&v56[4] += 2;
              *((_QWORD *)v35 + 2 * v36 + 1) = v37;
              *((_DWORD *)v35 + 4 * (v36 + 1)) = v57;
              v38 = v58;
              if (v58)
                *(_DWORD *)v58 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 1) + 1) = v38;
              *((_DWORD *)v35 + 4 * (v36 + 2)) = v59;
              v39 = v60;
              if (v60)
                *(_DWORD *)v60 += 2;
              *((_QWORD *)v35 + 2 * (v36 + 2) + 1) = v39;
              HIDWORD(v51) = v36 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v33 + 16))(v33, a1, a2, &v50);
              v40 = v50;
              if (HIDWORD(v51))
              {
                v41 = 16 * HIDWORD(v51);
                v42 = (WTF::StringImpl **)((char *)v50 + 8);
                do
                {
                  v43 = *v42;
                  *v42 = 0;
                  if (v43)
                  {
                    if (*(_DWORD *)v43 == 2)
                      WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v24);
                    else
                      *(_DWORD *)v43 -= 2;
                  }
                  v42 += 2;
                  v41 -= 16;
                }
                while (v41);
                v40 = v50;
              }
              if (v40)
              {
                v50 = 0;
                LODWORD(v51) = 0;
                WTF::fastFree(v40, v24);
              }
              v44 = v60;
              v60 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v44 -= 2;
              }
              v45 = v58;
              v58 = 0;
              if (v45)
              {
                if (*(_DWORD *)v45 == 2)
                  WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v45 -= 2;
              }
              v46 = *(WTF::StringImpl **)&v56[4];
              *(_QWORD *)&v56[4] = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v24);
                else
                  *(_DWORD *)v46 -= 2;
              }
              ++v31;
            }
            while (v31 != (uint64_t *)v32);
          }
          v47 = __ldxr(v26);
          if (v47 == 1)
          {
            if (!__stlxr(0, v26))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v54;
  v54 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ReverbConvolver::ReverbConvolver(uint64_t a1, void **a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, float a7)
{
  unint64_t v9;
  __int128 v13;
  char *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  vDSP_Length v23;
  void *v24;
  uint64_t v25;
  void *v26;
  float ***v27;
  WebCore::FFTFrame *v28;
  WebCore::FFTFrame *v29;
  void *v30;
  WTF **v31;
  void *v32;
  void *v33;
  unint64_t v34;
  DSPComplex *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  WTF **v39;
  void *v40;
  float *v41;
  void *v42;
  _QWORD *v43;
  void *v44;
  WTF **v45;
  WTF **v46;
  void *v47;
  WTF **v48;
  float *v49;
  vDSP_Length v50;
  float *v51;
  vDSP_Length v52;
  WebCore::FFTConvolver *v53;
  WebCore::FFTFrame *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  WebCore::ReverbConvolverStage *v77;
  WTF *v78;
  void *v79;
  _QWORD *v80;
  WebCore::ReverbConvolverStage *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  WTF *v89;
  void *v90;
  WTF *v91;
  void *v92;
  size_t v93;
  uint64_t v94;
  char **v95;
  char *__src;
  size_t v97;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  vDSP_Length __N;
  _QWORD *v104;
  WebCore::ReverbConvolverStage *__B;

  v9 = a3;
  v13 = 0uLL;
  *(_OWORD *)(a1 + 16) = 0u;
  v95 = (char **)(a1 + 16);
  *(_OWORD *)a1 = 0u;
  v14 = (char *)a2[2];
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = v14;
  v102 = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  v15 = (unint64_t)&v14[a3];
  if (&v14[a3])
  {
    if (v15 >> 62)
    {
      __break(0xC471u);
LABEL_100:
      JUMPOUT(0x196117EC8);
    }
    WTF::fastAlignedFree(0, a2);
    v16 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *(_QWORD *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 48) = v15;
    bzero(v16, 4 * v15);
    v13 = 0uLL;
  }
  *(_OWORD *)(a1 + 72) = v13;
  *(_OWORD *)(a1 + 56) = v13;
  WTF::fastAlignedFree(0, a2);
  v17 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *(_QWORD *)(a1 + 72) = v17;
  *(_QWORD *)(a1 + 80) = 0x20000;
  bzero(v17, 0x80000uLL);
  *(_OWORD *)(a1 + 88) = xmmword_1969F7060;
  *(_BYTE *)(a1 + 120) = a6;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = 2048;
  __src = (char *)*a2;
  if (!*a2)
    __src = *(char **)a2[1];
  v18 = (unint64_t)a2[2];
  if (v18)
  {
    v19 = 0;
    v97 = 4 * v9;
    v93 = 8 * v9;
    v94 = 2 * v9;
    v20 = 128;
    v21 = a5 << 32;
    v99 = v9 << 32;
    v100 = v18;
    v101 = v9;
    while (1)
    {
      v22 = v20 >> 1;
      if (v19 + (v20 >> 1) <= v18)
        v23 = v20 >> 1;
      else
        v23 = v18 - v19;
      __N = v23;
      v25 = WTF::fastMalloc((WTF *)0x78);
      *(_OWORD *)v25 = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(_QWORD *)(v25 + 32) = v102;
      *(_QWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 80) = 0;
      *(_QWORD *)(v25 + 88) = 0;
      if (v9)
      {
        if (v9 >> 62)
        {
          __break(0xC471u);
          goto LABEL_100;
        }
        WTF::fastAlignedFree(0, v24);
        v26 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
        *(_QWORD *)(v25 + 80) = v26;
        *(_QWORD *)(v25 + 88) = v9;
        bzero(v26, v97);
      }
      *(_QWORD *)(v25 + 104) = 0;
      v27 = (float ***)(v25 + 104);
      *(_BYTE *)(v25 + 96) = v19 == 0;
      *(_QWORD *)(v25 + 112) = 0;
      if (v19)
      {
        v28 = (WebCore::FFTFrame *)WTF::fastMalloc((WTF *)0x40);
        v29 = WebCore::FFTFrame::FFTFrame(v28, (void *)v20);
        v31 = *(WTF ***)v25;
        *(_QWORD *)v25 = v29;
        if (v31)
        {
          WTF::fastAlignedFree(v31[6], v30);
          WTF::fastAlignedFree(v31[4], v32);
          WTF::fastFree((WTF *)v31, v33);
          v28 = *(WebCore::FFTFrame **)v25;
        }
        v34 = *(unsigned int *)v28;
        if ((_DWORD)v34)
        {
          WTF::fastAlignedFree(0, v30);
          v35 = (DSPComplex *)WTF::fastAlignedMalloc((WTF *)0x20);
          bzero(v35, 4 * v34);
        }
        else
        {
          v35 = 0;
        }
        if (__N <= v34)
          memcpy(v35, &__src[4 * v19], 4 * __N);
        WebCore::FFTFrame::doFFT(v28, v35);
        WTF::fastAlignedFree((WTF *)v35, v47);
        v9 = v101;
        if (a7 != 1.0)
        {
          v48 = *(WTF ***)v25;
          v49 = *(float **)(*(_QWORD *)v25 + 32);
          v50 = *(_QWORD *)(*(_QWORD *)v25 + 40);
          *(float *)&__B = a7;
          vDSP_vsmul(v49, 1, (const float *)&__B, v49, 1, v50);
          v52 = (vDSP_Length)v48[5];
          v51 = (float *)v48[6];
          *(float *)&__B = a7;
          vDSP_vsmul(v51, 1, (const float *)&__B, v51, 1, v52);
        }
        v53 = (WebCore::FFTConvolver *)WTF::fastMalloc((WTF *)0x78);
        v54 = WebCore::FFTConvolver::FFTConvolver(v53, v20);
        v45 = *(WTF ***)(v25 + 8);
        *(_QWORD *)(v25 + 8) = v54;
        if (!v45)
          goto LABEL_41;
        WTF::fastAlignedFree(v45[13], v42);
        WTF::fastAlignedFree(v45[11], v55);
        WTF::fastAlignedFree(v45[9], v56);
        WTF::fastAlignedFree(v45[6], v57);
        v46 = v45 + 4;
      }
      else
      {
        v37 = WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v37 = 0;
        *(_QWORD *)(v37 + 8) = 0;
        if (v20 >= 2)
        {
          if ((v20 & 0x8000000000000000) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196117EE0);
          }
          WTF::fastAlignedFree(0, v36);
          v38 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
          *(_QWORD *)v37 = v38;
          *(_QWORD *)(v37 + 8) = v22;
          bzero(v38, 4 * v22);
        }
        v39 = (WTF **)*v27;
        *v27 = (float **)v37;
        if (v39)
        {
          WTF::fastAlignedFree(*v39, v36);
          WTF::fastFree((WTF *)v39, v40);
          v37 = (uint64_t)*v27;
        }
        if (*(_QWORD *)(v37 + 8) >= (unint64_t)__N)
          memcpy(*(void **)v37, __src, 4 * __N);
        if (a7 != 1.0)
        {
          v41 = **v27;
          *(float *)&__B = a7;
          vDSP_vsmul(v41, 1, (const float *)&__B, v41, 1, __N);
        }
        v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
        v43[1] = 0;
        v43[2] = 0;
        v9 = v101;
        *v43 = v101;
        if (v101)
        {
          if (v101 >> 61)
          {
            __break(0xC471u);
            JUMPOUT(0x196117ED8);
          }
          WTF::fastAlignedFree(0, v42);
          v44 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
          v43[1] = v44;
          v43[2] = v94;
          bzero(v44, v93);
        }
        v45 = *(WTF ***)(v25 + 112);
        *(_QWORD *)(v25 + 112) = v43;
        if (!v45)
          goto LABEL_41;
        v46 = v45 + 1;
      }
      WTF::fastAlignedFree(*v46, v42);
      WTF::fastFree((WTF *)v45, v58);
LABEL_41:
      v59 = 0;
      if (*(_BYTE *)(v25 + 96))
        v60 = 1;
      else
        v60 = v22 > v19;
      if (v60)
        v61 = 0;
      else
        v61 = v20 >> 1;
      v62 = v19 - v61;
      if (v62)
      {
        if (v62 >= v22)
          v63 = v20 >> 1;
        else
          LODWORD(v63) = v62;
        v59 = (v21 >> 32) % (unint64_t)(int)v63;
      }
      if (v59 > v62)
        v59 = 0;
      *(_QWORD *)(v25 + 48) = v59;
      *(_QWORD *)(v25 + 56) = v62 - v59;
      if (v59 <= v20)
        v59 = v20;
      if (v59 <= v9)
        v64 = v9;
      else
        v64 = v59;
      *(_QWORD *)(v25 + 64) = 0;
      *(_QWORD *)(v25 + 72) = 0;
      if (v64 != *(_QWORD *)(v25 + 24))
      {
        if (v64 >> 62)
        {
          __break(0xC471u);
          JUMPOUT(0x196117ED0);
        }
        WTF::fastAlignedFree(*(WTF **)(v25 + 16), v42);
        v65 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
        *(_QWORD *)(v25 + 16) = v65;
        *(_QWORD *)(v25 + 24) = v64;
        bzero(v65, 4 * v64);
      }
      __B = (WebCore::ReverbConvolverStage *)v25;
      if (v19 > 0x3000 && *(_BYTE *)(a1 + 120))
      {
        v66 = *(unsigned int *)(a1 + 28);
        v18 = v100;
        if ((_DWORD)v66 == *(_DWORD *)(a1 + 24))
        {
          v67 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v95, v66 + 1, (unint64_t)&__B);
          v66 = *(unsigned int *)(a1 + 28);
          v68 = *(_QWORD *)(a1 + 16);
          v69 = *(_QWORD *)v67;
          *(_QWORD *)v67 = 0;
          *(_QWORD *)(v68 + 8 * v66) = v69;
        }
        else
        {
          v76 = *v95;
          __B = 0;
          *(_QWORD *)&v76[8 * v66] = v25;
        }
        *(_DWORD *)(a1 + 28) = v66 + 1;
        v75 = 2 * v20;
      }
      else
      {
        v70 = *(unsigned int *)(a1 + 12);
        v18 = v100;
        if ((_DWORD)v70 == *(_DWORD *)(a1 + 8))
        {
          v71 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a1, v70 + 1, (unint64_t)&__B);
          v70 = *(unsigned int *)(a1 + 12);
          v72 = *(char **)a1;
          v73 = *(_QWORD *)v71;
          *(_QWORD *)v71 = 0;
          *(_QWORD *)&v72[8 * v70] = v73;
        }
        else
        {
          v74 = *(char **)a1;
          __B = 0;
          *(_QWORD *)&v74[8 * v70] = v25;
        }
        *(_DWORD *)(a1 + 12) = v70 + 1;
        v75 = v20 << (v19 != 0);
        if (a6 && v75 >= *(_QWORD *)(a1 + 112))
          v75 = *(_QWORD *)(a1 + 112);
      }
      if (v75 >= *(_QWORD *)(a1 + 104))
        v20 = *(_QWORD *)(a1 + 104);
      else
        v20 = v75;
      v77 = __B;
      __B = 0;
      if (v77)
      {
        WebCore::ReverbConvolverStage::~ReverbConvolverStage(v77, v42);
        WTF::fastFree(v78, v79);
      }
      v19 += __N;
      v21 += v99;
      if (v19 >= v18)
      {
        a6 = *(unsigned __int8 *)(a1 + 120);
        break;
      }
    }
  }
  if (a6 && *(_DWORD *)(a1 + 28))
  {
    v80 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v80 = off_1E3408210;
    v80[1] = a1;
    v104 = v80;
    WTF::Thread::create();
    v81 = __B;
    __B = 0;
    v82 = *(unsigned int **)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v81;
    if (v82)
    {
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        atomic_store(1u, v82);
        WTF::Thread::~Thread((WTF::Thread *)v82);
        WTF::fastFree(v89, v90);
      }
      v85 = (unsigned int *)__B;
      __B = 0;
      if (v85)
      {
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          atomic_store(1u, v85);
          WTF::Thread::~Thread((WTF::Thread *)v85);
          WTF::fastFree(v91, v92);
        }
      }
    }
    if (v104)
      (*(void (**)(_QWORD *))(*v104 + 8))(v104);
  }
  return a1;
}

void WebCore::ReverbConvolver::~ReverbConvolver(WebCore::ReverbConvolver *this, void *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  WebCore::ReverbConvolverStage **v13;
  uint64_t v14;
  WebCore::ReverbConvolverStage *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  WebCore::ReverbConvolverStage **v20;
  uint64_t v21;
  WebCore::ReverbConvolverStage *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  WTF *v26;
  void *v27;
  _QWORD v28[2];
  char v29;
  _QWORD v30[3];

  if (!*((_BYTE *)this + 120) || !*((_QWORD *)this + 16))
    goto LABEL_15;
  *((_BYTE *)this + 136) = 1;
  v3 = (unsigned __int8 *)this + 138;
  if (__ldaxr((unsigned __int8 *)this + 138))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C]((char *)this + 138);
LABEL_7:
  *((_BYTE *)this + 137) = 1;
  v5 = atomic_load((unsigned __int8 *)this + 139);
  if ((v5 & 1) != 0)
  {
    v29 = 0;
    v28[0] = (char *)this + 139;
    v28[1] = &v29;
    v30[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
    v30[1] = v30;
    v30[2] = v28;
    WTF::ParkingLot::unparkOneImpl();
  }
  v6 = __ldxr(v3);
  if (v6 == 1)
  {
    if (!__stlxr(0, v3))
      goto LABEL_14;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::ReverbConvolver *)((char *)this + 138));
LABEL_14:
  WTF::Thread::waitForCompletion(*((WTF::Thread **)this + 16));
LABEL_15:
  v7 = (unsigned int *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::Thread::~Thread((WTF::Thread *)v7);
      WTF::fastFree(v26, v27);
    }
  }
  WTF::fastAlignedFree(*((WTF **)this + 9), a2);
  WTF::fastAlignedFree(*((WTF **)this + 5), v10);
  v12 = *((unsigned int *)this + 7);
  if ((_DWORD)v12)
  {
    v13 = (WebCore::ReverbConvolverStage **)*((_QWORD *)this + 2);
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      *v13 = 0;
      if (v15)
      {
        WebCore::ReverbConvolverStage::~ReverbConvolverStage(v15, v11);
        WTF::fastFree(v16, v17);
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v18 = (WTF *)*((_QWORD *)this + 2);
  if (v18)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v18, v11);
  }
  v19 = *((unsigned int *)this + 3);
  if ((_DWORD)v19)
  {
    v20 = *(WebCore::ReverbConvolverStage ***)this;
    v21 = 8 * v19;
    do
    {
      v22 = *v20;
      *v20 = 0;
      if (v22)
      {
        WebCore::ReverbConvolverStage::~ReverbConvolverStage(v22, v11);
        WTF::fastFree(v23, v24);
      }
      ++v20;
      v21 -= 8;
    }
    while (v21);
  }
  v25 = *(WTF **)this;
  if (*(_QWORD *)this)
  {
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 2) = 0;
    WTF::fastFree(v25, v11);
  }
}

void WebCore::ReverbConvolver::process(uint64_t a1, uint64_t a2, char **a3, vDSP_Length a4)
{
  char *v6;
  uint64_t v7;
  vDSP_Length v8;
  vDSP_Length v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float **v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t *v20;
  vDSP_Length v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  vDSP_Length v28;
  uint64_t v29;
  vDSP_Length v30;
  vDSP_Length v31;
  vDSP_Length v32;
  float *v34;
  vDSP_Length v35;
  unint64_t v36;
  vDSP_Length v37;
  vDSP_Length v39;
  vDSP_Length v40;
  char *v41;
  char *v42;
  size_t v43;
  vDSP_Length v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  unsigned __int8 v48;
  int v49;
  char *__dst;
  uint64_t __n;
  float *v52;
  _QWORD v53[2];
  char v54;
  _QWORD v55[3];

  if (a2 && a3 && *(_QWORD *)(a2 + 16) >= a4 && (unint64_t)a3[2] >= a4)
  {
    v52 = *(float **)a2;
    if (!*(_QWORD *)a2)
      v52 = **(float ***)(a2 + 8);
    *((_BYTE *)a3 + 24) = 0;
    v6 = *a3;
    if (!*a3)
      v6 = *(char **)a3[1];
    if (v52 && v6)
    {
      __dst = v6;
      v8 = *(_QWORD *)(a1 + 80);
      v7 = *(_QWORD *)(a1 + 88);
      __n = 4 * a4;
      if (v7 + a4 <= v8)
      {
        memcpy((void *)(*(_QWORD *)(a1 + 72) + 4 * v7), v52, __n);
        v9 = *(_QWORD *)(a1 + 88) + a4;
        if (v9 >= v8)
          v9 = 0;
        *(_QWORD *)(a1 + 88) = v9;
      }
      v10 = *(unsigned int *)(a1 + 12);
      if ((_DWORD)v10)
      {
        for (i = 0; i < v10; ++i)
        {
          v12 = *(_QWORD *)(*(_QWORD *)a1 + 8 * i);
          v13 = *(_QWORD *)(v12 + 48);
          if (v13)
          {
            v14 = *(_QWORD *)(v12 + 64);
            if (v14 + a4 <= *(_QWORD *)(v12 + 24) && *(_QWORD *)(v12 + 88) >= a4)
            {
              v15 = (float **)(v12 + 80);
              v16 = (float *)(*(_QWORD *)(v12 + 16) + 4 * v14);
              v17 = v16;
LABEL_23:
              if (*(_QWORD *)(v12 + 72) >= v13)
              {
                v18 = *v15;
                if (*(_BYTE *)(v12 + 96))
                {
                  v19 = *(_QWORD *)(v12 + 112);
                  if (*(_QWORD *)v19 == a4)
                  {
                    v20 = *(uint64_t **)(v12 + 104);
                    v21 = v20[1];
                    if (v21 <= a4)
                    {
                      v22 = *v20;
                      v23 = !v18 || v16 == 0;
                      if (!v23 && v22 != 0)
                      {
                        v25 = *(_QWORD *)(v19 + 8);
                        if (v25)
                        {
                          v26 = (void *)(v25 + 4 * a4);
                          memcpy(v26, v16, __n);
                          vDSP_conv((const float *)v26 - v21 + 1, 1, (const float *)(v22 + 4 * v21 - 4), -1, v18, 1, a4, v21);
                          memcpy(*(void **)(v19 + 8), v26, __n);
                        }
                      }
                    }
                  }
                }
                else
                {
                  WebCore::FFTConvolver::process(*(WebCore::FFTConvolver **)(v12 + 8), *(WebCore::FFTFrame **)v12, v16, v18, a4);
                }
                v27 = *(_QWORD *)(v12 + 32);
                v28 = *(_QWORD *)(v27 + 8);
                v29 = *(int *)(v12 + 40);
                v30 = (*(_QWORD *)(v12 + 56) + v29) % v28;
                *(_DWORD *)(v12 + 40) = (v29 + a4) % v28;
                v31 = v28 - v30;
                if (v28 - v30 >= a4)
                  v32 = a4;
                else
                  v32 = v28 - v30;
                if (v32 + v30 <= v28 && a4 - v32 <= v28)
                {
                  v34 = *(float **)v27;
                  vDSP_vadd(v18, 1, (const float *)(*(_QWORD *)v27 + 4 * v30), 1, (float *)(*(_QWORD *)v27 + 4 * v30), 1, v32);
                  if (v31 < a4)
                    vDSP_vadd(&v18[v32], 1, v34, 1, v34, 1, a4 - v32);
                }
              }
              else
              {
                *(_DWORD *)(v12 + 40) = (*(int *)(v12 + 40) + a4) % *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8);
              }
              if (*(_QWORD *)(v12 + 48))
              {
                memcpy(v17, v52, __n);
                v35 = *(_QWORD *)(v12 + 64) + a4;
                if (v35 >= *(_QWORD *)(v12 + 48))
                  v35 = 0;
                *(_QWORD *)(v12 + 64) = v35;
              }
              *(_QWORD *)(v12 + 72) += a4;
              v10 = *(unsigned int *)(a1 + 12);
            }
          }
          else if (*(_QWORD *)(v12 + 24) >= a4)
          {
            v17 = 0;
            v15 = (float **)(v12 + 16);
            v16 = v52;
            goto LABEL_23;
          }
        }
      }
      v37 = *(_QWORD *)(a1 + 48);
      v36 = *(_QWORD *)(a1 + 56);
      if (v37 >= a4 && v37 >= v36)
      {
        v39 = v37 - v36;
        if (v37 - v36 >= a4)
          v40 = a4;
        else
          v40 = v37 - v36;
        v41 = *(char **)(a1 + 40);
        memcpy(__dst, &v41[4 * v36], 4 * v40);
        bzero(&v41[4 * *(_QWORD *)(a1 + 56)], 4 * v40);
        if (v39 < a4)
        {
          v42 = &__dst[4 * v40];
          v43 = 4 * (a4 - v40);
          memcpy(v42, v41, v43);
          bzero(v41, v43);
        }
        v44 = *(_QWORD *)(a1 + 64) + a4;
        *(_QWORD *)(a1 + 56) = (*(_QWORD *)(a1 + 56) + a4) % v37;
        *(_QWORD *)(a1 + 64) = v44;
      }
      v45 = (unsigned __int8 *)(a1 + 138);
      while (1)
      {
        v46 = *v45;
        if ((v46 & 1) != 0)
          break;
        v47 = __ldaxr(v45);
        if (v47 == v46)
        {
          if (!__stxr(v46 | 1, v45))
          {
            *(_BYTE *)(a1 + 137) = 1;
            v48 = atomic_load((unsigned __int8 *)(a1 + 139));
            if ((v48 & 1) != 0)
            {
              v54 = 0;
              v53[0] = a1 + 139;
              v53[1] = &v54;
              v55[0] = WTF::ScopedLambdaRefFunctor<long ()(WTF::ParkingLot::UnparkResult),WTF::Condition::notifyOne(void)::{lambda(WTF::ParkingLot::UnparkResult)#1}>::implFunction;
              v55[1] = v55;
              v55[2] = v53;
              WTF::ParkingLot::unparkOneImpl();
            }
            v49 = __ldxr(v45);
            if (v49 == 1)
            {
              if (!__stlxr(0, v45))
                return;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 138));
            return;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
}

void WebCore::ReverbConvolverStage::~ReverbConvolverStage(WebCore::ReverbConvolverStage *this, void *a2)
{
  WTF **v3;
  void *v4;
  WTF **v5;
  void *v6;
  void *v7;
  void *v8;
  WTF **v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  WTF **v15;
  void *v16;
  void *v17;

  v3 = (WTF **)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
  {
    WTF::fastAlignedFree(v3[1], a2);
    WTF::fastFree((WTF *)v3, v4);
  }
  v5 = (WTF **)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    WTF::fastAlignedFree(*v5, a2);
    WTF::fastFree((WTF *)v5, v6);
  }
  WTF::fastAlignedFree(*((WTF **)this + 10), a2);
  WTF::fastAlignedFree(*((WTF **)this + 2), v7);
  v9 = (WTF **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    WTF::fastAlignedFree(v9[13], v8);
    WTF::fastAlignedFree(v9[11], v10);
    WTF::fastAlignedFree(v9[9], v11);
    WTF::fastAlignedFree(v9[6], v12);
    WTF::fastAlignedFree(v9[4], v13);
    WTF::fastFree((WTF *)v9, v14);
  }
  v15 = *(WTF ***)this;
  *(_QWORD *)this = 0;
  if (v15)
  {
    WTF::fastAlignedFree(v15[6], v8);
    WTF::fastAlignedFree(v15[4], v16);
    WTF::fastFree((WTF *)v15, v17);
  }
}

_DWORD *WebCore::SharedAudioDestinationAdapter::ensureAdapter@<X0>(void *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t v8;
  float v9;
  _DWORD *result;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WebCore::AudioBus *v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int8x8_t v27;
  int8x8_t v28;
  int32x2_t v29;
  int8x8_t v30;
  int32x2_t v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned __int32 v34;
  BOOL v35;
  _QWORD *v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;

  if ((_MergedGlobals_221 & 1) == 0)
  {
    qword_1ECE83B88 = 0;
    _MergedGlobals_221 = 1;
    v9 = a4;
    result = (_DWORD *)WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,float>>>,std::tuple<unsigned int,float>>(a1, LODWORD(a4));
    goto LABEL_5;
  }
  v8 = qword_1ECE83B88;
  v9 = a4;
  result = (_DWORD *)WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,float>>>,std::tuple<unsigned int,float>>(a1, LODWORD(a4));
  if (!v8)
  {
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v11 = (_DWORD *)(v8 + 24 * *(unsigned int *)(v8 - 4));
LABEL_6:
  if (v11 == result)
    goto LABEL_21;
  v12 = *((_QWORD *)result + 1);
  if (!v12)
    goto LABEL_21;
  v13 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_12;
  }
  result = (_DWORD *)MEMORY[0x19AEA534C](v12);
LABEL_12:
  if (*(_QWORD *)(v12 + 24))
    ++*(_QWORD *)(v12 + 8);
  else
    v13 = 0;
  v15 = __ldxr((unsigned __int8 *)v12);
  if (v15 != 1)
  {
    __clrex();
LABEL_20:
    result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v13)
      goto LABEL_18;
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)v12))
    goto LABEL_20;
  if (v13)
  {
LABEL_18:
    *a3 = v13;
    return result;
  }
LABEL_21:
  v16 = WTF::fastMalloc((WTF *)0x68);
  v17 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v17 = 0;
  *(_OWORD *)(v17 + 8) = xmmword_19689B170;
  *(_QWORD *)(v17 + 24) = v16;
  *(_QWORD *)v16 = &off_1E3408160;
  *(_QWORD *)(v16 + 8) = v17;
  *(_DWORD *)(v16 + 16) = (_DWORD)a1;
  *(float *)(v16 + 20) = a4;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 16))(*a2, v16);
  if (a1 <= 0x20)
  {
    v19 = (WebCore::AudioBus *)WTF::fastMalloc((WTF *)0x38);
    result = WebCore::AudioBus::AudioBus(v19, a1, 0x80uLL, 1);
  }
  else
  {
    result = 0;
  }
  *(_QWORD *)(v16 + 32) = result;
  *(_WORD *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = 0;
  *(_BYTE *)(v16 + 64) = 1;
  v20.n128_u64[1] = 0;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *a3 = v16;
  v21 = *(_QWORD *)(v16 + 8);
  if (!v21)
  {
    v23 = 0;
    goto LABEL_36;
  }
  if (__ldaxr((unsigned __int8 *)v21))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v21))
  {
    goto LABEL_29;
  }
  result = (_DWORD *)MEMORY[0x19AEA534C](v21);
LABEL_29:
  if (*(_QWORD *)(v21 + 24))
  {
    ++*(_QWORD *)(v21 + 16);
    v23 = v21;
  }
  else
  {
    v23 = 0;
  }
  v24 = __ldxr((unsigned __int8 *)v21);
  if (v24 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v21))
LABEL_35:
    result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v21);
LABEL_36:
  if ((_MergedGlobals_221 & 1) != 0)
  {
    v25 = qword_1ECE83B88;
    if (qword_1ECE83B88)
      goto LABEL_39;
  }
  else
  {
    qword_1ECE83B88 = 0;
    _MergedGlobals_221 = 1;
  }
  result = WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::rehash(8u, 0);
  v25 = qword_1ECE83B88;
  if (!qword_1ECE83B88)
  {
    v26 = 0;
    goto LABEL_40;
  }
LABEL_39:
  v26 = *(_DWORD *)(v25 - 8);
LABEL_40:
  v27 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(a1, LODWORD(v9)), (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(a1, LODWORD(v9)), 0xFuLL)));
  v28 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v27, 0xAuLL), v27), (int32x2_t)0x900000009);
  v29 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v28, 6uLL), v28);
  v30 = (int8x8_t)vadd_s32(v29, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v29, 0xBuLL)));
  v31 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v30, 0x10uLL), v30), (int32x2_t)0x109132F905AC73FELL);
  v20.n128_u64[0] = (unint64_t)vadd_s32(v31, vdup_lane_s32(v31, 1));
  v32 = v26 & ((0xD7862706ELL * (unint64_t)v20.n128_u32[0]) >> 4);
  v33 = (_QWORD *)(v25 + 24 * v32);
  v34 = *(_DWORD *)v33;
  v20.n128_u32[0] = *((_DWORD *)v33 + 1);
  if (*(_DWORD *)v33)
    v35 = 0;
  else
    v35 = v20.n128_f32[0] == INFINITY;
  if (v35)
    goto LABEL_56;
  v36 = 0;
  v37 = 1;
  do
  {
    if (v34 == (_DWORD)a1 && LODWORD(v9) == v20.n128_u32[0])
    {
      v49 = v33[1];
      v33[1] = v23;
      if (!v49)
        goto LABEL_95;
      if (__ldaxr((unsigned __int8 *)v49))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v49))
      {
LABEL_87:
        v51 = *(_QWORD *)(v49 + 16) - 1;
        *(_QWORD *)(v49 + 16) = v51;
        if (!v51)
        {
          v52 = *(_QWORD *)(v49 + 8);
          v53 = __ldxr((unsigned __int8 *)v49);
          if (v53 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v49))
            {
LABEL_93:
              if (!v52)
                result = (_DWORD *)WTF::fastFree((WTF *)v49, v18);
              goto LABEL_95;
            }
          }
          else
          {
            __clrex();
          }
          result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v49);
          goto LABEL_93;
        }
        v55 = __ldxr((unsigned __int8 *)v49);
        if (v55 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v49))
            goto LABEL_95;
        }
        else
        {
          __clrex();
        }
        result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v49);
LABEL_95:
        v33[2] = v16;
        return result;
      }
      result = (_DWORD *)MEMORY[0x19AEA534C](v49);
      goto LABEL_87;
    }
    if (v34 == -1)
      v36 = v33;
    v32 = (v32 + v37) & v26;
    v33 = (_QWORD *)(v25 + 24 * v32);
    v34 = *(_DWORD *)v33;
    v20.n128_u32[0] = *((_DWORD *)v33 + 1);
    ++v37;
    if (*(_DWORD *)v33)
      v38 = 0;
    else
      v38 = v20.n128_f32[0] == INFINITY;
  }
  while (!v38);
  if (v36)
  {
    v36[1] = 0;
    v36[2] = 0;
    *v36 = 0x7F80000000000000;
    --*(_DWORD *)(qword_1ECE83B88 - 16);
    v33 = v36;
  }
LABEL_56:
  *(_DWORD *)v33 = (_DWORD)a1;
  *((float *)v33 + 1) = a4;
  v39 = v33[1];
  v33[1] = v23;
  if (!v39)
    goto LABEL_69;
  if (__ldaxr((unsigned __int8 *)v39))
  {
    __clrex();
    goto LABEL_60;
  }
  if (__stxr(1u, (unsigned __int8 *)v39))
LABEL_60:
    result = (_DWORD *)MEMORY[0x19AEA534C](v39, v20);
  v41 = *(_QWORD *)(v39 + 16) - 1;
  *(_QWORD *)(v39 + 16) = v41;
  if (v41)
  {
    v54 = __ldxr((unsigned __int8 *)v39);
    if (v54 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v39))
        goto LABEL_69;
    }
    else
    {
      __clrex();
    }
    result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v39);
    goto LABEL_69;
  }
  v42 = *(_QWORD *)(v39 + 8);
  v43 = __ldxr((unsigned __int8 *)v39);
  if (v43 != 1)
  {
    __clrex();
LABEL_67:
    result = (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v39);
    if (!v42)
      goto LABEL_68;
    goto LABEL_69;
  }
  if (__stlxr(0, (unsigned __int8 *)v39))
    goto LABEL_67;
  if (!v42)
LABEL_68:
    result = (_DWORD *)WTF::fastFree((WTF *)v39, v18);
LABEL_69:
  v33[2] = v16;
  if (qword_1ECE83B88)
    v44 = *(_DWORD *)(qword_1ECE83B88 - 12) + 1;
  else
    v44 = 1;
  *(_DWORD *)(qword_1ECE83B88 - 12) = v44;
  if (qword_1ECE83B88)
    v45 = *(_DWORD *)(qword_1ECE83B88 - 12);
  else
    v45 = 0;
  v46 = (*(_DWORD *)(qword_1ECE83B88 - 16) + v45);
  v47 = *(unsigned int *)(qword_1ECE83B88 - 4);
  if (v47 > 0x400)
  {
    if (v47 <= 2 * v46)
    {
LABEL_78:
      v48 = (_DWORD)v47 << (6 * *(_DWORD *)(qword_1ECE83B88 - 12) >= (2 * v47));
      return WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::rehash(v48, (unsigned __int32 *)v33);
    }
  }
  else if (3 * v47 <= 4 * v46)
  {
    if ((_DWORD)v47)
      goto LABEL_78;
    v48 = 8;
    return WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::rehash(v48, (unsigned __int32 *)v33);
  }
  return result;
}

void WebCore::SharedAudioDestinationAdapter::~SharedAudioDestinationAdapter(WebCore::SharedAudioDestinationAdapter *this)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  unsigned __int8 *v18;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  uint64_t v40;
  WTF *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  uint64_t v50;
  WTF *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unsigned int *v57;

  *(_QWORD *)this = &off_1E3408160;
  v2 = *((_DWORD *)this + 4);
  v3 = *((_DWORD *)this + 5);
  if ((_MergedGlobals_221 & 1) == 0)
  {
    qword_1ECE83B88 = 0;
    _MergedGlobals_221 = 1;
    v5 = WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,float>>>,std::tuple<unsigned int,float>>(v2, v3);
    goto LABEL_6;
  }
  v4 = qword_1ECE83B88;
  v5 = WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,float>>>,std::tuple<unsigned int,float>>(v2, v3);
  if (!v4)
  {
LABEL_6:
    if (!v5)
      goto LABEL_32;
    v7 = 0;
    goto LABEL_8;
  }
  v7 = v4 + 24 * *(unsigned int *)(v4 - 4);
  if (v7 == v5)
    goto LABEL_32;
LABEL_8:
  if (v7 == v5)
    goto LABEL_32;
  *(_DWORD *)v5 = -1;
  v8 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = 0;
  if (!v8)
    goto LABEL_22;
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_14:
  v10 = *(_QWORD *)(v8 + 16) - 1;
  *(_QWORD *)(v8 + 16) = v10;
  if (!v10)
  {
    v11 = *(_QWORD *)(v8 + 8);
    v12 = __ldxr((unsigned __int8 *)v8);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          goto LABEL_22;
LABEL_21:
        WTF::fastFree((WTF *)v8, v6);
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      goto LABEL_22;
    goto LABEL_21;
  }
  v56 = __ldxr((unsigned __int8 *)v8);
  if (v56 != 1)
  {
    __clrex();
    goto LABEL_88;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_88:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_22:
  v13 = qword_1ECE83B88;
  ++*(_DWORD *)(qword_1ECE83B88 - 16);
  if (v13)
    v14 = *(_DWORD *)(v13 - 12) - 1;
  else
    v14 = -1;
  *(_DWORD *)(v13 - 12) = v14;
  if (qword_1ECE83B88)
  {
    v15 = *(_DWORD *)(qword_1ECE83B88 - 4);
    if (6 * *(_DWORD *)(qword_1ECE83B88 - 12) < v15 && v15 >= 9)
      WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::rehash(v15 >> 1, 0);
  }
LABEL_32:
  v17 = *((_QWORD *)this + 3);
  v18 = (unsigned __int8 *)(v17 + 8);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  if (__ldaxr((unsigned __int8 *)(v17 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_36;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_36:
  *(_QWORD *)(v17 + 16) = 0;
  v20 = __ldxr(v18);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_40;
  }
  if (__stlxr(0, v18))
LABEL_40:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  v22 = *((unsigned int *)this + 25);
  if ((_DWORD)v22)
  {
    v23 = (uint64_t *)*((_QWORD *)this + 11);
    v24 = &v23[v22];
    do
    {
      v25 = *v23;
      *v23 = 0;
      if (v25)
      {
        v26 = (unsigned int *)(v25 + 28);
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          atomic_store(1u, v26);
          v29 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v29 = off_1E34081E8;
          *((_QWORD *)v29 + 1) = v26;
          v57 = v29;
          WTF::ensureOnMainThread();
          v30 = (uint64_t)v57;
          v57 = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
      }
      ++v23;
    }
    while (v23 != v24);
  }
  v31 = (WTF *)*((_QWORD *)this + 11);
  if (v31)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v31, v21);
  }
  v32 = *((unsigned int *)this + 21);
  if ((_DWORD)v32)
  {
    v33 = (uint64_t *)*((_QWORD *)this + 9);
    v34 = &v33[v32];
    do
    {
      v35 = *v33;
      *v33 = 0;
      if (v35)
      {
        v36 = (unsigned int *)(v35 + 28);
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          v39 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v39 = off_1E34081E8;
          *((_QWORD *)v39 + 1) = v36;
          v57 = v39;
          WTF::ensureOnMainThread();
          v40 = (uint64_t)v57;
          v57 = 0;
          if (v40)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        }
      }
      ++v33;
    }
    while (v33 != v34);
  }
  v41 = (WTF *)*((_QWORD *)this + 9);
  if (v41)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v41, v21);
  }
  v42 = *((unsigned int *)this + 15);
  if ((_DWORD)v42)
  {
    v43 = (uint64_t *)*((_QWORD *)this + 6);
    v44 = &v43[v42];
    do
    {
      v45 = *v43;
      *v43 = 0;
      if (v45)
      {
        v46 = (unsigned int *)(v45 + 28);
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          atomic_store(1u, v46);
          v49 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v49 = off_1E34081E8;
          *((_QWORD *)v49 + 1) = v46;
          v57 = v49;
          WTF::ensureOnMainThread();
          v50 = (uint64_t)v57;
          v57 = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
        }
      }
      ++v43;
    }
    while (v43 != v44);
  }
  v51 = (WTF *)*((_QWORD *)this + 6);
  if (v51)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v51, v21);
  }
  v52 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v52)
  {
    do
    {
      v53 = __ldaxr(v52);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v52));
    if (!v54)
    {
      atomic_store(1u, v52);
      v57 = v52;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v57, v21);
    }
  }
  v55 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
}

{
  WTF *v1;
  void *v2;

  WebCore::SharedAudioDestinationAdapter::~SharedAudioDestinationAdapter(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::SharedAudioDestinationAdapter::configureRenderThread(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unsigned __int8 *v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v4 = *(unsigned __int8 *)(a1 + 40);
  v5 = *(_DWORD *)(a1 + 60);
  v6 = (unsigned __int8 *)(a1 + 41);
  if (__ldaxr((unsigned __int8 *)(a1 + 41)))
  {
    __clrex();
  }
  else
  {
    v8 = 1;
    if (!__stxr(1u, v6))
      goto LABEL_5;
  }
  v8 = 0;
LABEL_5:
  if (!v4)
  {
    v13 = v5 == 0;
    v5 = v5 != 0;
    v14 = v13;
    if ((v8 & 1) == 0)
      MEMORY[0x19AEA534C](a1 + 41);
    result = (uint64_t)WTF::Vector<WTF::RefPtr<WebCore::SharedAudioDestination,WTF::RawPtrTraits<WebCore::SharedAudioDestination>,WTF::DefaultRefDerefTraits<WebCore::SharedAudioDestination>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 72), (unsigned int *)(a1 + 48));
    *(_BYTE *)(a1 + 64) = 1;
LABEL_21:
    v15 = __ldxr(v6);
    if (v15 == 1)
    {
      if (!__stlxr(0, v6))
      {
        if (v5)
        {
LABEL_24:
          *(_BYTE *)(a1 + 40) = 1;
          v16 = *(_QWORD *)(a1 + 24);
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
          v21 = 0;
          (*(void (**)(uint64_t, _QWORD **, uint64_t *))(*(_QWORD *)v16 + 32))(v16, &v21, a2);
          v17 = v21;
          v21 = 0;
          if (v17)
            (*(void (**)(_QWORD *))(*v17 + 8))(v17);
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
        }
LABEL_29:
        if (v4)
        {
          *(_BYTE *)(a1 + 40) = 0;
          v18 = *(_QWORD *)(a1 + 24);
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v18 + 40))(v18, a2);
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        }
        else if (v14)
        {
          v19 = *a2;
          *a2 = 0;
          v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v20 = &off_1E3408260;
          v20[1] = v19;
          v21 = v20;
          WTF::callOnMainThread();
          result = (uint64_t)v21;
          v21 = 0;
          if (result)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v5)
      goto LABEL_24;
    goto LABEL_29;
  }
  if ((v8 & 1) == 0)
    MEMORY[0x19AEA534C](a1 + 41);
  result = (uint64_t)WTF::Vector<WTF::RefPtr<WebCore::SharedAudioDestination,WTF::RawPtrTraits<WebCore::SharedAudioDestination>,WTF::DefaultRefDerefTraits<WebCore::SharedAudioDestination>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 72), (unsigned int *)(a1 + 48));
  *(_BYTE *)(a1 + 64) = 1;
  if (!v5)
  {
    v14 = 0;
    goto LABEL_21;
  }
  v10 = *a2;
  *a2 = 0;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = &off_1E3408238;
  v11[1] = v10;
  v21 = v11;
  WTF::callOnMainThread();
  result = (uint64_t)v21;
  v21 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v12 = __ldxr(v6);
  if (v12 == 1)
  {
    if (!__stlxr(0, v6))
      return result;
  }
  else
  {
    __clrex();
  }
  return WTF::Lock::unlockSlow((WTF::Lock *)v6);
}

WTF *WTF::Vector<WTF::RefPtr<WebCore::SharedAudioDestination,WTF::RawPtrTraits<WebCore::SharedAudioDestination>,WTF::DefaultRefDerefTraits<WebCore::SharedAudioDestination>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(WTF *result, unsigned int *a2)
{
  WTF *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t *v26;
  WTF *v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;

  v2 = result;
  if (a2 == (unsigned int *)result)
    return v2;
  v4 = *((unsigned int *)result + 3);
  v5 = a2[3];
  if (v4 > v5)
  {
    v6 = *(_QWORD *)result + 8 * v4;
    v7 = (uint64_t *)(*(_QWORD *)result + 8 * v5);
    do
    {
      v8 = *v7;
      *v7 = 0;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 28);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v12 = off_1E34081E8;
          v12[1] = v9;
          v45 = v12;
          WTF::ensureOnMainThread();
          if (v45)
            (*(void (**)(_QWORD *))(*v45 + 8))(v45);
        }
      }
      ++v7;
    }
    while (v7 != (uint64_t *)v6);
    *((_DWORD *)v2 + 3) = v5;
    goto LABEL_33;
  }
  v13 = *((_DWORD *)result + 2);
  if (v5 <= v13)
    goto LABEL_32;
  if (v13)
  {
    if ((_DWORD)v4)
    {
      v14 = *(uint64_t **)result;
      v15 = *(_QWORD *)result + 8 * v4;
      do
      {
        v16 = *v14;
        *v14 = 0;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 28);
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v17);
            v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v20 = off_1E34081E8;
            v20[1] = v17;
            v46 = v20;
            WTF::ensureOnMainThread();
            if (v46)
              (*(void (**)(_QWORD *))(*v46 + 8))(v46);
          }
        }
        ++v14;
      }
      while (v14 != (uint64_t *)v15);
      *((_DWORD *)v2 + 3) = 0;
    }
    result = *(WTF **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      result = (WTF *)WTF::fastFree(result, a2);
    }
  }
  v21 = a2[3];
  if (*((_DWORD *)v2 + 2) >= v21)
  {
LABEL_32:
    v5 = *((unsigned int *)v2 + 3);
LABEL_33:
    v26 = *(uint64_t **)a2;
    v27 = *(WTF **)v2;
    if ((_DWORD)v5)
    {
      v28 = &v26[v5];
      do
      {
        v29 = *v26;
        if (*v26)
        {
          v30 = (unsigned int *)(v29 + 28);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
        }
        v32 = *(_QWORD *)v27;
        *(_QWORD *)v27 = v29;
        if (v32)
        {
          v33 = (unsigned int *)(v32 + 28);
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            atomic_store(1u, v33);
            v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v36 = off_1E34081E8;
            v36[1] = v33;
            v47 = v36;
            WTF::ensureOnMainThread();
            if (v47)
              (*(void (**)(_QWORD *))(*v47 + 8))(v47);
          }
        }
        ++v26;
        v27 = (WTF *)((char *)v27 + 8);
      }
      while (v26 != v28);
      v26 = *(uint64_t **)a2;
      v37 = *((_DWORD *)v2 + 3);
      v27 = *(WTF **)v2;
    }
    else
    {
      v37 = 0;
    }
    v38 = a2[3];
    if (v37 != (_DWORD)v38)
    {
      v39 = &v26[v38];
      v40 = (_QWORD *)((char *)v27 + 8 * v37);
      v41 = &v26[v37];
      do
      {
        v42 = *v41;
        if (*v41)
        {
          v43 = (unsigned int *)(v42 + 28);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 + 1, v43));
        }
        *v40++ = v42;
        ++v41;
      }
      while (v41 != v39);
      v37 = a2[3];
    }
    *((_DWORD *)v2 + 3) = v37;
    return v2;
  }
  if (!(v21 >> 29))
  {
    v22 = *(WTF **)v2;
    v23 = *((unsigned int *)v2 + 3);
    v24 = (void *)WTF::fastMalloc((WTF *)(8 * v21));
    *((_DWORD *)v2 + 2) = v21;
    *(_QWORD *)v2 = v24;
    memcpy(v24, v22, 8 * v23);
    if (v22)
    {
      if (*(WTF **)v2 == v22)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      WTF::fastFree(v22, v25);
    }
    goto LABEL_32;
  }
  __break(0xC471u);
  return result;
}

void WebCore::SharedAudioDestinationAdapter::render(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t *i;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  unsigned int *v43;

  v10 = (unsigned __int8 *)(a1 + 41);
  while (1)
  {
    v11 = *v10;
    if ((v11 & 1) != 0)
      break;
    v12 = __ldaxr(v10);
    if (v12 == v11)
    {
      if (!__stxr(v11 | 1, v10))
      {
        if (*(_BYTE *)(a1 + 64))
        {
          v13 = *(_QWORD *)(a1 + 88);
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 72);
          v14 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 72) = 0;
          *(_QWORD *)(a1 + 80) = 0;
          *(_BYTE *)(a1 + 64) = 0;
          v15 = *(_QWORD *)(a1 + 96);
          *(_QWORD *)(a1 + 96) = v14;
          v16 = (unsigned int *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v16 = &off_1E3408288;
          *((_QWORD *)v16 + 1) = v13;
          *((_QWORD *)v16 + 2) = v15;
          v43 = v16;
          WTF::callOnMainThread();
          v17 = (uint64_t)v43;
          v43 = 0;
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        v18 = __ldxr(v10);
        if (v18 == 1)
        {
          if (!__stlxr(0, v10))
            break;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v10);
        break;
      }
    }
    else
    {
      __clrex();
    }
  }
  v19 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v19)
  {
    v20 = *(uint64_t **)(a1 + 88);
    v21 = *v20;
    if (*v20)
    {
      v22 = (unsigned int *)(v21 + 28);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
      WebCore::SharedAudioDestination::sharedRender(v21, a2, a3, a4, a5);
      do
      {
        v24 = __ldaxr(v22);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v22));
      if (!v25)
      {
        atomic_store(1u, v22);
        v41 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v41 = off_1E34081E8;
        *((_QWORD *)v41 + 1) = v22;
        v43 = v41;
        WTF::ensureOnMainThread();
        v42 = (uint64_t)v43;
        v43 = 0;
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
    }
    else
    {
      WebCore::SharedAudioDestination::sharedRender(0, a2, a3, a4, a5);
    }
    if ((_DWORD)v19 != 1)
    {
      v26 = &v20[v19];
      for (i = v20 + 1; i != v26; ++i)
      {
        v28 = *i;
        if (*i)
        {
          v29 = (unsigned int *)(v28 + 28);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
        }
        v31 = *(unsigned int **)(a1 + 32);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 + 1, v31));
        WebCore::SharedAudioDestination::sharedRender(v28, a2, (uint64_t)v31, a4, a5);
        WebCore::AudioBus::sumFrom(a3, (uint64_t)v31, 0);
        do
        {
          v34 = __ldaxr(v31);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v31));
        if (v35)
        {
          if (v28)
            goto LABEL_34;
        }
        else
        {
          atomic_store(1u, v31);
          v43 = v31;
          WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v43, v33);
          if (v28)
          {
LABEL_34:
            v36 = (unsigned int *)(v28 + 28);
            do
            {
              v37 = __ldaxr(v36);
              v38 = v37 - 1;
            }
            while (__stlxr(v38, v36));
            if (!v38)
            {
              atomic_store(1u, v36);
              v39 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
              *(_QWORD *)v39 = off_1E34081E8;
              *((_QWORD *)v39 + 1) = v36;
              v43 = v39;
              WTF::ensureOnMainThread();
              v40 = (uint64_t)v43;
              v43 = 0;
              if (v40)
                (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            }
          }
        }
      }
    }
  }
}

void WebCore::SharedAudioDestination::sharedRender(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  unsigned __int8 *v9;
  int v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  void (***v21)(_QWORD, unsigned int *, uint64_t, uint64_t);
  int v22;
  unint64_t v23;
  unint64_t j;
  uint64_t v25;
  void **v26;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  unint64_t i;
  uint64_t v31;
  void **v32;
  _QWORD *v33;
  uint64_t v34;
  __int16 v35;
  char v36;
  __int128 v37;

  v9 = (unsigned __int8 *)(a1 + 32);
  do
  {
    while (1)
    {
      v10 = *v9;
      if ((v10 & 1) != 0)
      {
        v29 = *(unsigned int *)(a3 + 28);
        if ((_DWORD)v29)
        {
          for (i = 0; i < v29; ++i)
          {
            v31 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * i);
            if (!*(_BYTE *)(v31 + 24))
            {
              *(_BYTE *)(v31 + 24) = 1;
              v32 = *(void ***)(v31 + 8);
              v33 = (_QWORD *)(v31 + 16);
              if (v32)
                v33 = v32 + 1;
              else
                v32 = (void **)v31;
              bzero(*v32, 4 * *v33);
              v29 = *(unsigned int *)(a3 + 28);
            }
          }
        }
        return;
      }
      v11 = __ldaxr(v9);
      if (v11 == v10)
        break;
      __clrex();
    }
  }
  while (__stxr(v10 | 1, v9));
  if (*(_QWORD *)(a1 + 40))
  {
    v35 = 0;
    v36 = 0;
    v12 = (unsigned int *)(a1 + 28);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    if (a2)
    {
      do
        v14 = __ldaxr(a2);
      while (__stlxr(v14 + 1, a2));
    }
    if (a3)
    {
      do
        v15 = __ldaxr((unsigned int *)a3);
      while (__stlxr(v15 + 1, (unsigned int *)a3));
    }
    v37 = *a5;
    v16 = WTF::fastMalloc((WTF *)0x40);
    *(_QWORD *)v16 = &off_1E34082D8;
    *(_QWORD *)(v16 + 8) = a1;
    *(_QWORD *)(v16 + 16) = a2;
    *(_QWORD *)(v16 + 24) = a3;
    *(_QWORD *)(v16 + 32) = a4;
    *(_OWORD *)(v16 + 40) = v37;
    *(_QWORD *)(v16 + 56) = &v35;
    v34 = v16;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v34);
    v17 = v34;
    v34 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    *(_QWORD *)&v37 = 0x7FF0000000000000;
    DWORD2(v37) = 0;
    WTF::BinarySemaphore::waitUntil();
  }
  else
  {
    v18 = (unsigned __int8 *)(a1 + 8);
    while (1)
    {
      v19 = *v18;
      if ((v19 & 1) != 0)
        break;
      v20 = __ldaxr(v18);
      if (v20 == v19)
      {
        if (!__stxr(v19 | 1, v18))
        {
          v21 = *(void (****)(_QWORD, unsigned int *, uint64_t, uint64_t))(a1 + 16);
          if (v21)
            (**v21)(*(_QWORD *)(a1 + 16), a2, a3, a4);
          v22 = __ldxr(v18);
          if (v22 == 1)
          {
            if (!__stlxr(0, v18))
            {
              if (v21)
                goto LABEL_39;
              break;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v18);
          if (v21)
            goto LABEL_39;
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
    v23 = *(unsigned int *)(a3 + 28);
    if ((_DWORD)v23)
    {
      for (j = 0; j < v23; ++j)
      {
        v25 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * j);
        if (!*(_BYTE *)(v25 + 24))
        {
          *(_BYTE *)(v25 + 24) = 1;
          v26 = *(void ***)(v25 + 8);
          v27 = (_QWORD *)(v25 + 16);
          if (v26)
            v27 = v26 + 1;
          else
            v26 = (void **)v25;
          bzero(*v26, 4 * *v27);
          v23 = *(unsigned int *)(a3 + 28);
        }
      }
    }
  }
LABEL_39:
  v28 = __ldxr(v9);
  if (v28 == 1)
  {
    if (!__stlxr(0, v9))
      return;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
}

_DWORD *WebCore::SharedAudioDestination::create@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  _DWORD *result;

  v10 = WTF::fastMalloc((WTF *)0x40);
  v11 = v10;
  *(_QWORD *)v10 = off_1E3407738;
  *(_BYTE *)(v10 + 8) = 0;
  v12 = (unsigned __int8 *)(v10 + 8);
  *(_QWORD *)(v10 + 16) = 0;
  *(float *)(v10 + 24) = a5;
  if (__ldaxr((unsigned __int8 *)(v10 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v12))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v10 + 8);
LABEL_5:
  *(_QWORD *)(v11 + 16) = a1;
  v14 = __ldxr(v12);
  if (v14 == 1)
  {
    if (!__stlxr(0, v12))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_10:
  *(_DWORD *)(v11 + 28) = 1;
  *(_QWORD *)v11 = off_1E3408190;
  *(_BYTE *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_BYTE *)(v11 + 48) = 0;
  result = WebCore::SharedAudioDestinationAdapter::ensureAdapter(a2, a3, (uint64_t *)(v11 + 56), a5);
  *a4 = v11;
  return result;
}

void WebCore::SharedAudioDestination::~SharedAudioDestination(WebCore::SharedAudioDestination *this, void *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  if (*((_BYTE *)this + 48))
  {
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = off_1E34082B0;
    v15 = v3;
    WebCore::SharedAudioDestination::stop((uint64_t)this, (uint64_t *)&v15);
    v4 = (uint64_t)v15;
    v15 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_9:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (v9)
          goto LABEL_21;
LABEL_17:
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
        if (!v11)
          WTF::fastFree((WTF *)v6, a2);
        goto LABEL_21;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_21;
    goto LABEL_17;
  }
LABEL_21:
  v13 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

{
  WTF *v2;
  void *v3;

  WebCore::SharedAudioDestination::~SharedAudioDestination(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::SharedAudioDestination::isPlaying(WebCore::SharedAudioDestination *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t WebCore::SharedAudioDestination::stop(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t result;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;

  if (*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 48) = 0;
    v4 = (unsigned __int8 *)(a1 + 8);
    if (__ldaxr((unsigned __int8 *)(a1 + 8)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](a1 + 8);
LABEL_6:
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = __ldxr(v4);
    if (v7 == 1)
    {
      if (!__stlxr(0, v4))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 8));
  }
LABEL_13:
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_17:
  ++*(_QWORD *)(v9 + 8);
  v11 = __ldxr((unsigned __int8 *)v9);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)v9);
  v12 = *(unsigned int *)(v8 + 60);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(v8 + 48);
    if (*v13 == a1)
    {
      v14 = 0;
LABEL_29:
      v17 = &v13[v14];
      *v17 = 0;
      v18 = (unsigned int *)(a1 + 28);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v34 = off_1E34081E8;
        v34[1] = v18;
        v35 = v34;
        WTF::ensureOnMainThread();
        if (v35)
          (*(void (**)(_QWORD *))(*v35 + 8))(v35);
      }
      memmove(v17, v17 + 1, *(_QWORD *)(v8 + 48) + 8 * *(unsigned int *)(v8 + 60) - (_QWORD)(v17 + 1));
      --*(_DWORD *)(v8 + 60);
    }
    else
    {
      v14 = 0;
      v15 = v12 - 1;
      while (v15 != v14)
      {
        v16 = v13[++v14];
        if (v16 == a1)
          goto LABEL_29;
      }
    }
  }
  WebCore::SharedAudioDestinationAdapter::configureRenderThread(v8, a2);
  v22 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v22))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v22))
  {
    goto LABEL_37;
  }
  MEMORY[0x19AEA534C](v22);
LABEL_37:
  v24 = *(_QWORD *)(v22 + 8);
  v25 = v24 - 1;
  *(_QWORD *)(v22 + 8) = v24 - 1;
  if (v24 == 1)
  {
    v33 = *(_QWORD *)(v22 + 16);
    v26 = *(_QWORD *)(v22 + 24);
    *(_QWORD *)(v22 + 24) = 0;
    v27 = v33 != 0;
  }
  else
  {
    v26 = 0;
    v27 = 1;
  }
  v28 = __ldxr((unsigned __int8 *)v22);
  if (v28 != 1)
  {
    __clrex();
LABEL_44:
    WTF::Lock::unlockSlow((WTF::Lock *)v22);
    if (v25)
      goto LABEL_49;
    goto LABEL_45;
  }
  if (__stlxr(0, (unsigned __int8 *)v22))
    goto LABEL_44;
  if (v25)
    goto LABEL_49;
LABEL_45:
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  if (!v27)
    WTF::fastFree((WTF *)v22, v21);
LABEL_49:
  v29 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v29))
  {
    goto LABEL_53;
  }
  MEMORY[0x19AEA534C](a1 + 32);
LABEL_53:
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v32 = __ldxr(v29);
  if (v32 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 32));
  }
  if (__stlxr(0, v29))
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 32));
  return result;
}

uint64_t WebCore::SharedAudioDestination::start(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t result;
  int v10;
  unsigned __int8 *v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  void *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;

  v6 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 32);
LABEL_5:
  v8 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v6))
LABEL_11:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (*(_BYTE *)(a1 + 48))
    goto LABEL_24;
  *(_BYTE *)(a1 + 48) = 1;
  v11 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v11))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](a1 + 8);
LABEL_17:
  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v13 = __ldxr(v11);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_23;
  }
  if (__stlxr(0, v11))
LABEL_23:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 8));
LABEL_24:
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(v14 + 8);
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_28;
  }
  result = MEMORY[0x19AEA534C](v15);
LABEL_28:
  ++*(_QWORD *)(v15 + 8);
  v17 = __ldxr((unsigned __int8 *)v15);
  if (v17 != 1)
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stlxr(0, (unsigned __int8 *)v15))
LABEL_32:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v15);
  v18 = *(unsigned int *)(v14 + 60);
  if ((_DWORD)v18)
  {
    v19 = *(_QWORD **)(v14 + 48);
    v20 = *(unsigned int *)(v14 + 60);
    while (*v19 != a1)
    {
      ++v19;
      if (!--v20)
        goto LABEL_37;
    }
  }
  else
  {
LABEL_37:
    if ((_DWORD)v18 == *(_DWORD *)(v14 + 56))
    {
      v21 = v18 + (v18 >> 2);
      if (v21 >= 0x10)
        v22 = v21 + 1;
      else
        v22 = 16;
      if (v22 <= v18 + 1)
        v23 = v18 + 1;
      else
        v23 = v22;
      if (v23 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v24 = *(void **)(v14 + 48);
      v25 = (void *)WTF::fastMalloc((WTF *)(8 * v23));
      *(_DWORD *)(v14 + 56) = v23;
      *(_QWORD *)(v14 + 48) = v25;
      memcpy(v25, v24, 8 * v18);
      if (v24)
      {
        if (*(void **)(v14 + 48) == v24)
        {
          *(_QWORD *)(v14 + 48) = 0;
          *(_DWORD *)(v14 + 56) = 0;
        }
        WTF::fastFree((WTF *)v24, v26);
      }
      v27 = *(unsigned int *)(v14 + 60);
      v28 = *(_QWORD *)(v14 + 48);
      v29 = (unsigned int *)(a1 + 28);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
      v31 = *(_DWORD *)(v14 + 60);
      *(_QWORD *)(v28 + 8 * v27) = a1;
    }
    else
    {
      v32 = *(_QWORD *)(v14 + 48);
      v33 = (unsigned int *)(a1 + 28);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
      *(_QWORD *)(v32 + 8 * v18) = a1;
      v31 = *(_DWORD *)(v14 + 60);
    }
    *(_DWORD *)(v14 + 60) = v31 + 1;
  }
  result = WebCore::SharedAudioDestinationAdapter::configureRenderThread(v14, a3);
  v36 = *(_QWORD *)(v14 + 8);
  if (__ldaxr((unsigned __int8 *)v36))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v36))
  {
    goto LABEL_60;
  }
  result = MEMORY[0x19AEA534C](v36);
LABEL_60:
  v38 = *(_QWORD *)(v36 + 8);
  v39 = v38 - 1;
  *(_QWORD *)(v36 + 8) = v38 - 1;
  if (v38 == 1)
  {
    v43 = *(_QWORD *)(v36 + 16);
    v40 = *(_QWORD *)(v36 + 24);
    *(_QWORD *)(v36 + 24) = 0;
    v41 = v43 != 0;
  }
  else
  {
    v40 = 0;
    v41 = 1;
  }
  v42 = __ldxr((unsigned __int8 *)v36);
  if (v42 != 1)
  {
    __clrex();
LABEL_67:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v36);
    if (v39)
      return result;
    goto LABEL_68;
  }
  if (__stlxr(0, (unsigned __int8 *)v36))
    goto LABEL_67;
  if (v39)
    return result;
LABEL_68:
  if (v40)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
  if (!v41)
    return WTF::fastFree((WTF *)v36, v35);
  return result;
}

uint64_t WebCore::SharedAudioDestination::framesPerBuffer(WebCore::SharedAudioDestination *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 7) + 32) + 8);
}

void WebCore::SincResampler::SincResampler(uint64_t a1, void *a2, uint64_t *a3, double a4)
{
  int v5;
  uint64_t *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  double v22;
  unint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  float v34;
  double v35;
  double v36;

  v5 = (int)a2;
  *(double *)a1 = a4;
  *(_QWORD *)(a1 + 8) = 0;
  v7 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  WTF::fastAlignedFree(0, a2);
  v8 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *v7 = (uint64_t)v8;
  *(_QWORD *)(a1 + 16) = 1056;
  bzero(v8, 0x1080uLL);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = v5;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v11 = (v5 + 32);
  if (!(_DWORD)v11)
  {
    *(_OWORD *)(a1 + 80) = 0uLL;
    *(_OWORD *)(a1 + 96) = 0uLL;
LABEL_18:
    __break(1u);
    return;
  }
  WTF::fastAlignedFree(0, v9);
  v12 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v11;
  bzero(v12, 4 * v11);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v14;
  if (v14 <= 0xF)
    goto LABEL_18;
  v15 = v14 - 16;
  v16 = v13 + 64;
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v15;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v15;
  v17 = *(_DWORD *)(a1 + 32);
  v18 = (v17 - 32);
  if (v15 < v18)
    goto LABEL_18;
  *(_QWORD *)(a1 + 128) = v16 + 4 * v18;
  *(_QWORD *)(a1 + 136) = v15 - v18;
  v19 = (v17 - 16);
  v20 = v15 >= v19;
  v21 = v15 - v19;
  if (!v20)
    goto LABEL_18;
  v22 = *(double *)a1;
  v23 = (unint64_t)((double)v19 / *(double *)a1);
  *(_QWORD *)(a1 + 144) = v16 + 4 * v19;
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v23;
  if (v22 <= 1.0)
    v24 = 0.9;
  else
    v24 = 1.0 / v22 * 0.9;
  v25 = 0;
  v35 = v24 * 3.14159265;
  v36 = v24;
  v26 = *v7;
  do
  {
    v27 = 0;
    v28 = (double)v25 * 0.03125;
    do
    {
      v29 = v35 * ((double)((int)v27 - 16) - v28);
      if (v29 == 0.0)
        v30 = 1.0;
      else
        v30 = sin(v35 * ((double)((int)v27 - 16) - v28)) / v29;
      v31 = v36 * v30;
      v32 = ((double)(int)v27 - v28) * 0.03125;
      v33 = cos(v32 * 6.28318531) * -0.5 + 0.42;
      v34 = (v33 + cos(v32 * 12.5663706) * 0.08) * v31;
      *(float *)(v26 + 4 * v27++) = v34;
    }
    while (v27 != 32);
    ++v25;
    v26 += 128;
  }
  while (v25 != 33);
}

uint64_t WebCore::SincResampler::processBuffer(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, double a5)
{
  unint64_t v6;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  _BYTE v15[8];
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  _QWORD v19[2];

  v19[0] = a1;
  v19[1] = a2;
  if (a4 == (unint64_t)((double)a2 / a5))
  {
    v6 = a4;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = off_1E3408300;
    v8[1] = v19;
    v14 = v8;
    WebCore::SincResampler::SincResampler((uint64_t)v15, (void *)0x80, (uint64_t *)&v14, a5);
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    for (; v6; v6 -= v10)
    {
      if (v6 >= 0x80)
        v10 = 128;
      else
        v10 = v6;
      WebCore::SincResampler::process((uint64_t)v15, a3, v6, v10);
      a3 += 4 * v10;
    }
    WTF::fastAlignedFree(v18, v9);
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    return WTF::fastAlignedFree(v16, v11);
  }
  else
  {
    result = 206;
    __break(0xC471u);
  }
  return result;
}

void WebCore::SincResampler::process(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  int v4;
  unint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  double v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  const float *v19;
  const float *v20;
  const float *v21;
  float v22;
  _OWORD *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t __C;

  v4 = a4;
  if (*(_BYTE *)(a1 + 160))
  {
    if (!a4)
      return;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(unsigned int *)(a1 + 32));
    *(_BYTE *)(a1 + 160) = 1;
    if (!v4)
      return;
  }
  v8 = 0;
  while (1)
  {
    v9 = a3 <= v8 ? v8 : a3;
    v10 = *(double *)(a1 + 24);
    while (1)
    {
      v11 = (double)*(unint64_t *)(a1 + 48);
      if (v10 >= v11)
        break;
      v12 = (int)v10;
      v13 = v10 - (double)(int)v10;
      v14 = vcvtd_n_s64_f64(v13, 5uLL);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = (32 * v14);
      v17 = v15 >= v16;
      v18 = v15 - v16;
      if (!v17)
        goto LABEL_28;
      if (v18 <= 0x1F)
        goto LABEL_28;
      if (*(_QWORD *)(a1 + 104) < (unint64_t)v12)
        goto LABEL_28;
      v19 = (const float *)(*(_QWORD *)(a1 + 8) + 4 * v16);
      v20 = v19 + 32;
      v21 = (const float *)(*(_QWORD *)(a1 + 96) + 4 * v12);
      __C = 0;
      vDSP_dotpr(v21, 1, v19, 1, (float *)&__C + 1, 0x20uLL);
      vDSP_dotpr(v21, 1, v20, 1, (float *)&__C, 0x20uLL);
      if (v9 == v8)
        goto LABEL_28;
      v22 = v13 * 32.0 - (double)v14;
      *(float *)(a2 + 4 * v8++) = (float)(*(float *)&__C * v22) + (float)((float)(1.0 - v22) * *((float *)&__C + 1));
      v10 = *(double *)a1 + *(double *)(a1 + 24);
      *(double *)(a1 + 24) = v10;
      if (!--v4)
        return;
    }
    *(double *)(a1 + 24) = v10 - v11;
    if (*(_QWORD *)(a1 + 104) <= 0x1FuLL || *(_QWORD *)(a1 + 136) <= 0x1FuLL)
      break;
    v23 = *(_OWORD **)(a1 + 96);
    v24 = *(__int128 **)(a1 + 128);
    v25 = v24[7];
    v27 = v24[4];
    v26 = v24[5];
    v23[6] = v24[6];
    v23[7] = v25;
    v23[4] = v27;
    v23[5] = v26;
    v28 = *v24;
    v29 = v24[1];
    v30 = v24[3];
    v23[2] = v24[2];
    v23[3] = v30;
    *v23 = v28;
    v23[1] = v29;
    v31 = *(_QWORD *)(a1 + 80);
    if (v31 == *(_QWORD *)(a1 + 112))
    {
      v34 = *(_QWORD *)(a1 + 72);
      if (v34 <= 0x1F)
        break;
      v32 = v34 - 32;
      v35 = *(_QWORD *)(a1 + 64) + 128;
      *(_QWORD *)(a1 + 80) = v35;
      *(_QWORD *)(a1 + 88) = v34 - 32;
      v33 = *(_DWORD *)(a1 + 32);
      v36 = v33 - 32;
      if (v32 < v36)
        break;
      *(_QWORD *)(a1 + 128) = v35 + 4 * v36;
      *(_QWORD *)(a1 + 136) = v32 - v36;
      v37 = v33 - 16;
      v38 = v32 - v37;
      if (v32 < v37)
        break;
      v39 = v35 + 4 * v37;
      *(_QWORD *)(a1 + 144) = v39;
      *(_QWORD *)(a1 + 152) = v38;
      v40 = (v39 - v31) >> 2;
      v41 = (double)v40 / *(double *)a1;
      *(_QWORD *)(a1 + 48) = v40;
      *(_QWORD *)(a1 + 56) = (unint64_t)v41;
      v31 = v35;
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 88);
      v33 = *(_DWORD *)(a1 + 32);
    }
    (*(void (**)(_QWORD, uint64_t, unint64_t, _QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v31, v32, v33);
  }
LABEL_28:
  __break(1u);
}

void WebCore::StereoPanner::panWithSampleAccurateValues(uint64_t a1, uint64_t a2, float *a3, unint64_t a4)
{
  unsigned int v4;
  int v5;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  float *v15;
  BOOL v16;
  float v19;
  float v20;
  float v21;
  float v22;
  double v23;
  double v24;
  __double2 v25;
  float v26;
  float v27;
  float v28;
  float v29;
  double v30;
  double v31;
  double v32;
  __double2 v33;
  float v34;
  float v35;
  float v36;
  double v37;
  double v38;
  double v39;
  double v40;
  float v41;
  float v42;

  if (a1)
  {
    v4 = *(_DWORD *)(a1 + 28);
    if (v4 - 1 <= 1)
    {
      if (a2)
      {
        v5 = a4;
        if (*(_QWORD *)(a1 + 8) >= a4 && *(_DWORD *)(a2 + 28) == 2 && *(_QWORD *)(a2 + 8) >= a4)
        {
          v7 = *(_QWORD *)(a1 + 16);
          v8 = **(float ***)v7;
          if (!v8)
            v8 = **(float ***)(*(_QWORD *)v7 + 8);
          v9 = v8;
          if (v4 >= 2)
          {
            v10 = *(_QWORD *)(v7 + 8);
            v9 = *(float **)v10;
            if (!*(_QWORD *)v10)
              v9 = **(float ***)(v10 + 8);
          }
          v11 = *(uint64_t **)(a2 + 16);
          v12 = *v11;
          *(_BYTE *)(v12 + 24) = 0;
          v13 = *(float **)v12;
          if (!*(_QWORD *)v12)
            v13 = **(float ***)(v12 + 8);
          v14 = v11[1];
          *(_BYTE *)(v14 + 24) = 0;
          v15 = *(float **)v14;
          if (!*(_QWORD *)v14)
            v15 = **(float ***)(v14 + 8);
          if (v8)
            v16 = v9 == 0;
          else
            v16 = 1;
          if (!v16 && v13 != 0 && v15 != 0)
          {
            if (v4 == 1)
            {
              if ((_DWORD)a4)
              {
                do
                {
                  --v5;
                  v19 = *v8++;
                  v20 = v19;
                  v21 = *a3++;
                  v22 = v21;
                  v23 = v21;
                  if (v21 <= -1.0)
                    v23 = -1.0;
                  if (v22 >= 1.0)
                    v24 = 1.0;
                  else
                    v24 = v23;
                  v25 = __sincos_stret((v24 * 0.5 + 0.5) * 1.57079633);
                  v26 = v25.__cosval * v20;
                  *v13++ = v26;
                  v27 = v25.__sinval * v20;
                  *v15++ = v27;
                }
                while (v5);
              }
            }
            else if ((_DWORD)a4)
            {
              do
              {
                --v5;
                v28 = *a3++;
                v29 = v28;
                v30 = v28;
                if (v28 <= -1.0)
                  v30 = -1.0;
                if (v29 >= 1.0)
                  v31 = 1.0;
                else
                  v31 = v30;
                v32 = v31 + 1.0;
                if (v31 > 0.0)
                  v32 = v31;
                v33 = __sincos_stret(v32 * 1.57079633);
                v34 = *v8++;
                v35 = v34;
                v36 = *v9++;
                v37 = v35;
                v38 = v36 + v37 * v33.__sinval;
                v39 = v37 + v36 * v33.__cosval;
                v40 = v33.__sinval * v36;
                if (v31 > 0.0)
                {
                  v39 = v33.__cosval * v37;
                  v40 = v38;
                }
                v41 = v39;
                *v13++ = v41;
                v42 = v40;
                *v15++ = v42;
              }
              while (v5);
            }
          }
        }
      }
    }
  }
}

void WebCore::StereoPanner::panToTargetValue(uint64_t a1, uint64_t a2, vDSP_Length a3, float a4)
{
  unsigned int v4;
  uint64_t v6;
  const float *v7;
  const float *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float *v14;
  BOOL v15;
  BOOL v16;
  float v18;
  float v19;
  __double2 v20;
  float cosval;
  float sinval;
  const float *v23;
  float v24;
  __double2 v25;
  float __B;

  if (a1)
  {
    v4 = *(_DWORD *)(a1 + 28);
    if (v4 - 1 <= 1 && a2 && *(_QWORD *)(a1 + 8) >= a3 && *(_DWORD *)(a2 + 28) == 2 && *(_QWORD *)(a2 + 8) >= a3)
    {
      v6 = *(_QWORD *)(a1 + 16);
      v7 = **(const float ***)v6;
      if (!v7)
        v7 = **(const float ***)(*(_QWORD *)v6 + 8);
      v8 = v7;
      if (v4 >= 2)
      {
        v9 = *(_QWORD *)(v6 + 8);
        v8 = *(const float **)v9;
        if (!*(_QWORD *)v9)
          v8 = **(const float ***)(v9 + 8);
      }
      v10 = *(uint64_t **)(a2 + 16);
      v11 = *v10;
      *(_BYTE *)(v11 + 24) = 0;
      v12 = *(float **)v11;
      if (!*(_QWORD *)v11)
        v12 = **(float ***)(v11 + 8);
      v13 = v10[1];
      *(_BYTE *)(v13 + 24) = 0;
      v14 = *(float **)v13;
      if (!*(_QWORD *)v13)
        v14 = **(float ***)(v13 + 8);
      v15 = !v7 || v8 == 0;
      v16 = v15 || v12 == 0;
      if (!v16 && v14 != 0)
      {
        if (a4 > -1.0)
          v18 = a4;
        else
          v18 = -1.0;
        if (a4 >= 1.0)
          v19 = 1.0;
        else
          v19 = v18;
        if (v4 == 1)
        {
          v20 = __sincos_stret((v19 * 0.5 + 0.5) * 1.57079633);
          cosval = v20.__cosval;
          __B = cosval;
          vDSP_vsmul(v7, 1, &__B, v12, 1, a3);
          sinval = v20.__sinval;
          __B = sinval;
          v23 = v7;
LABEL_38:
          vDSP_vsmul(v23, 1, &__B, v14, 1, a3);
          return;
        }
        v24 = v19 + 1.0;
        if (v19 > 0.0)
          v24 = v19;
        v25 = __sincos_stret(v24 * 1.57079633);
        if (v19 <= 0.0)
        {
          __B = v25.__cosval;
          vDSP_vsma(v8, 1, &__B, v7, 1, v12, 1, a3);
          __B = v25.__sinval;
          v23 = v8;
          goto LABEL_38;
        }
        __B = v25.__cosval;
        vDSP_vsmul(v7, 1, &__B, v12, 1, a3);
        __B = v25.__sinval;
        vDSP_vsma(v7, 1, &__B, v8, 1, v14, 1, a3);
      }
    }
  }
}

WebCore::UpSampler *WebCore::UpSampler::UpSampler(WebCore::UpSampler *this, unint64_t a2)
{
  _QWORD *v4;
  _OWORD *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  int32x2_t v15;
  uint64x2_t v16;
  float *v17;
  int32x2_t v25;
  int64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  float64x2_t v30;
  float v31;
  float v32;
  int64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  int8x16_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  uint64x2_t v43;
  long double __x;
  float64x2_t __xa;
  float64x2_t __xb;
  long double v47;
  float64x2_t v48;
  int64x2_t v49;
  float64x2_t v50;
  int32x2_t v51;
  int64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  v4 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  WTF::fastAlignedFree(0, (void *)a2);
  v5 = (_OWORD *)WTF::fastAlignedMalloc((WTF *)0x20);
  *v4 = v5;
  *((_QWORD *)this + 2) = 128;
  *v5 = 0u;
  v5[1] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[22] = 0u;
  v5[23] = 0u;
  v5[24] = 0u;
  v5[25] = 0u;
  v5[26] = 0u;
  v5[27] = 0u;
  v5[28] = 0u;
  v5[29] = 0u;
  v5[30] = 0u;
  v5[31] = 0u;
  v7 = 2 * a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = a2;
  if (2 * a2)
  {
    if (v7 >> 62)
      goto LABEL_19;
    WTF::fastAlignedFree(0, v6);
    v8 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 5) = v7;
    bzero(v8, 8 * a2);
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  if (a2)
  {
    if (a2 >> 62)
    {
      __break(0xC471u);
      JUMPOUT(0x19611B030);
    }
    WTF::fastAlignedFree(0, v6);
    v9 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *((_QWORD *)this + 6) = v9;
    *((_QWORD *)this + 7) = a2;
    bzero(v9, 4 * a2);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    if (!(a2 >> 61))
    {
      WTF::fastAlignedFree(0, v10);
      v11 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
      *((_QWORD *)this + 8) = v11;
      *((_QWORD *)this + 9) = v7;
      bzero(v11, 8 * a2);
      goto LABEL_9;
    }
LABEL_19:
    __break(0xC471u);
    JUMPOUT(0x19611B028);
  }
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
LABEL_9:
  v12 = *((_QWORD *)this + 2);
  if ((int)v12 >= 1)
  {
    v13 = vdup_n_s32(-((int)v12 >> 1));
    v14 = (*((_QWORD *)this + 2) + 1) & 0x1FFFFFFFELL;
    v42 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)v12), 0);
    v43 = (uint64x2_t)vdupq_n_s64((unint64_t)*((_QWORD *)this + 2) - 1);
    v15 = (int32x2_t)0x100000000;
    v16 = (uint64x2_t)xmmword_19688B1A0;
    v17 = (float *)(*v4 + 4);
    __asm { FMOV            V0.2D, #0.5 }
    v53 = _Q0;
    v40 = (float64x2_t)vdupq_n_s64(0x401921FB54442D18uLL);
    v41 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
    __asm { FMOV            V0.2D, #1.0 }
    v38 = _Q0;
    v39 = (float64x2_t)vdupq_n_s64(0x3FDAE147AE147AE1uLL);
    __asm { FMOV            V2.2D, #-0.5 }
    v36 = (float64x2_t)vdupq_n_s64(0x402921FB54442D18uLL);
    v37 = _Q2;
    v34 = vdupq_n_s64(2uLL);
    v35 = (float64x2_t)vdupq_n_s64(0x3FB47AE147AE147BuLL);
    do
    {
      v49 = (int64x2_t)vcgeq_u64(v43, v16);
      v51 = vmovn_s64(v49);
      v52 = (int64x2_t)v16;
      v25 = vadd_s32(v13, v15);
      v26.i64[0] = v25.i32[0];
      v26.i64[1] = v25.i32[1];
      v54 = vmulq_f64(vaddq_f64(vcvtq_f64_s64(v26), v53), v41);
      __x = sin(v54.f64[1]);
      v27.f64[0] = sin(v54.f64[0]);
      v27.f64[1] = __x;
      v55 = (float64x2_t)vbslq_s8(vandq_s8((int8x16_t)v49, (int8x16_t)vceqzq_f64(v54)), v38, (int8x16_t)vdivq_f64(v27, v54));
      v26.i64[0] = v15.i32[0];
      v26.i64[1] = v15.i32[1];
      v50 = vdivq_f64(vaddq_f64(vcvtq_f64_s64(v26), v53), v42);
      __xa = vmulq_f64(v50, v40);
      v47 = cos(__xa.f64[1]);
      v28.f64[0] = cos(__xa.f64[0]);
      v28.f64[1] = v47;
      v48 = vmlaq_f64(v39, v37, v28);
      __xb = vmulq_f64(v50, v36);
      v50.f64[0] = cos(__xb.f64[1]);
      v29.f64[0] = cos(__xb.f64[0]);
      v29.f64[1] = v50.f64[0];
      v30 = vmlaq_f64(v48, v35, v29);
      if ((v51.i8[0] & 1) != 0)
      {
        v31 = vmulq_f64(v30, v55).f64[0];
        *(v17 - 1) = v31;
      }
      if ((v51.i8[4] & 1) != 0)
      {
        v32 = COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v30, v55).f64[1]);
        *v17 = v32;
      }
      v16 = (uint64x2_t)vaddq_s64(v52, v34);
      v15 = vadd_s32(v15, (int32x2_t)0x200000002);
      v17 += 2;
      v14 -= 2;
    }
    while (v14);
  }
  return this;
}

_QWORD *WebCore::UpSampler::process(_QWORD *this, const float *a2, float *a3, vDSP_Length a4)
{
  _QWORD *v5;
  void *v8;
  int v9;
  uint64_t v10;
  vDSP_Length v11;
  float *v12;
  vDSP_Length v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;

  if (*this == a4)
  {
    v5 = this;
    if (this[7] == a4 && this[2] == 128 && a4 >= 0x40 && this[9] == 2 * a4)
    {
      v8 = (void *)(this[8] + 4 * a4);
      memcpy(v8, a2, 4 * a4);
      v9 = 0;
      v10 = -64;
      do
      {
        a3[v9] = *((float *)v8 + v10);
        v11 = (v10++ + 65);
        v9 += 2;
      }
      while (v11 < a4);
      v12 = (float *)v5[6];
      if (v5[3] == a4)
      {
        v13 = v5[2];
        if (v13 <= a4)
        {
          if (v12)
          {
            if (a2)
            {
              v14 = v5[1];
              if (v14)
              {
                v15 = v5[4];
                if (v15)
                {
                  v16 = (void *)(v15 + 4 * a4);
                  memcpy(v16, a2, 4 * a4);
                  vDSP_conv((const float *)v16 - v13 + 1, 1, (const float *)(v14 + 4 * v13 - 4), -1, v12, 1, a4, v13);
                  memcpy((void *)v5[4], v16, 4 * a4);
                }
              }
            }
          }
        }
      }
      v17 = 0;
      v18 = 1;
      do
      {
        a3[v18] = v12[v17++];
        v18 += 2;
      }
      while (a4 > v17);
      return memcpy((void *)v5[8], v8, 4 * a4);
    }
  }
  return this;
}

uint64_t WebCore::SharedAudioDestination::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 28);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t WebCore::SharedAudioDestination::deref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = (unsigned int *)(this + 28);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v1);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34081E8;
    v4[1] = v1;
    v5 = (uint64_t)v4;
    WTF::ensureOnMainThread();
    this = v5;
    if (v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::SharedAudioDestination,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::SharedAudioDestination::~SharedAudioDestination((WebCore::SharedAudioDestination *)(*(_QWORD *)(a1 + 8) - 28), a2);
  return WTF::fastFree(v2, v3);
}

void WTF::Detail::CallableWrapper<WebCore::ReverbConvolver::ReverbConvolver(WebCore::AudioChannel *,unsigned long,unsigned long,unsigned long,BOOL,float)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float **v15;
  uint64_t v16;
  _OWORD *v17;
  float *v18;
  _QWORD *v19;
  uint64_t *v20;
  vDSP_Length v21;
  uint64_t v22;
  BOOL v23;
  const float *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  vDSP_Length v56;
  float *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unsigned __int8 *v76;
  uint64_t v77;
  _QWORD v78[3];
  uint64_t v79;
  uint64_t *v80;
  uint64_t *v81;

  v1 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v1 + 136))
  {
    v2 = (unsigned __int8 *)(v1 + 138);
    do
    {
      *(_BYTE *)(v1 + 137) = 0;
      while (1)
      {
        if (__ldaxr(v2))
        {
          __clrex();
LABEL_7:
          MEMORY[0x19AEA534C](v2);
          goto LABEL_8;
        }
        if (__stxr(1u, v2))
          goto LABEL_7;
LABEL_8:
        if (*(_BYTE *)(v1 + 137) || *(_BYTE *)(v1 + 136))
          break;
        v74 = 0x7FF0000000000000;
        v75 = 0;
        v79 = WTF::TimeWithDynamicClockType::nowWithSameClock((WTF::TimeWithDynamicClockType *)&v74);
        v80 = v4;
        if (WTF::TimeWithDynamicClockType::operator<())
        {
          v5 = __ldxr(v2);
          if (v5 == 1)
          {
            if (__stlxr(0, v2))
              goto LABEL_16;
          }
          else
          {
            __clrex();
LABEL_16:
            WTF::Lock::unlockSlow((WTF::Lock *)v2);
          }
        }
        else
        {
          v76 = v2;
          v77 = v1 + 139;
          v79 = (uint64_t)WTF::ScopedLambdaRefFunctor<BOOL ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#1}>::implFunction;
          v80 = &v79;
          v81 = &v77;
          v78[0] = WTF::ScopedLambdaRefFunctor<void ()(void),BOOL WTF::Condition::waitUntilUnchecked<WTF::Lock>(WTF::Lock &,WTF::TimeWithDynamicClockType const&)::{lambda(void)#2}>::implFunction;
          v78[1] = v78;
          v78[2] = &v76;
          WTF::ParkingLot::parkConditionallyImpl();
        }
      }
      v6 = __ldxr(v2);
      if (v6 != 1)
      {
        __clrex();
LABEL_21:
        WTF::Lock::unlockSlow((WTF::Lock *)v2);
        goto LABEL_22;
      }
      if (__stlxr(0, v2))
        goto LABEL_21;
LABEL_22:
      if (!*(_DWORD *)(v1 + 28))
        goto LABEL_70;
      v73 = *(_DWORD *)(v1 + 88);
LABEL_24:
      if (*(_DWORD *)(**(_QWORD **)(v1 + 16) + 44) != v73)
      {
        v7 = 0;
        while (1)
        {
          v8 = 0;
          v9 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v7);
          v10 = *(unsigned int *)(v9 + 44);
          v11 = *(__int128 **)(v1 + 72);
          if ((v10 & 0x80000000) == 0)
          {
            v12 = *(_QWORD *)(v1 + 80);
            if (v10 + 64 <= v12)
            {
              v11 = (__int128 *)((char *)v11 + 4 * v10);
              v8 = (v10 + 64) % v12;
            }
          }
          *(_DWORD *)(v9 + 44) = v8;
          if (!v11)
            goto LABEL_65;
          v13 = *(_QWORD *)(v9 + 48);
          if (v13)
          {
            v14 = *(_QWORD *)(v9 + 64);
            if ((unint64_t)(v14 + 64) <= *(_QWORD *)(v9 + 24) && *(_QWORD *)(v9 + 88) >= 0x40uLL)
            {
              v15 = (float **)(v9 + 80);
              v16 = *(_QWORD *)(v9 + 16) + 4 * v14;
              v17 = (_OWORD *)v16;
LABEL_36:
              if (*(_QWORD *)(v9 + 72) >= v13)
              {
                v18 = *v15;
                if (*(_BYTE *)(v9 + 96))
                {
                  v19 = *(_QWORD **)(v9 + 112);
                  if (*v19 == 64)
                  {
                    v20 = *(uint64_t **)(v9 + 104);
                    v21 = v20[1];
                    if (v21 <= 0x40)
                    {
                      v22 = *v20;
                      v23 = !v18 || v16 == 0;
                      if (!v23 && v22 != 0)
                      {
                        v25 = (const float *)v19[1];
                        if (v25)
                        {
                          v26 = *(_OWORD *)v16;
                          v27 = *(_OWORD *)(v16 + 16);
                          v28 = *(_OWORD *)(v16 + 48);
                          *((_OWORD *)v25 + 18) = *(_OWORD *)(v16 + 32);
                          *((_OWORD *)v25 + 19) = v28;
                          *((_OWORD *)v25 + 16) = v26;
                          *((_OWORD *)v25 + 17) = v27;
                          v29 = *(_OWORD *)(v16 + 64);
                          v30 = *(_OWORD *)(v16 + 80);
                          v31 = *(_OWORD *)(v16 + 112);
                          *((_OWORD *)v25 + 22) = *(_OWORD *)(v16 + 96);
                          *((_OWORD *)v25 + 23) = v31;
                          *((_OWORD *)v25 + 20) = v29;
                          *((_OWORD *)v25 + 21) = v30;
                          v32 = *(_OWORD *)(v16 + 128);
                          v33 = *(_OWORD *)(v16 + 144);
                          v34 = *(_OWORD *)(v16 + 176);
                          *((_OWORD *)v25 + 26) = *(_OWORD *)(v16 + 160);
                          *((_OWORD *)v25 + 27) = v34;
                          *((_OWORD *)v25 + 24) = v32;
                          *((_OWORD *)v25 + 25) = v33;
                          v35 = *(_OWORD *)(v16 + 192);
                          v36 = *(_OWORD *)(v16 + 208);
                          v37 = *(_OWORD *)(v16 + 240);
                          *((_OWORD *)v25 + 30) = *(_OWORD *)(v16 + 224);
                          *((_OWORD *)v25 + 31) = v37;
                          *((_OWORD *)v25 + 28) = v35;
                          *((_OWORD *)v25 + 29) = v36;
                          vDSP_conv(&v25[-v21 + 65], 1, (const float *)(v22 + 4 * v21 - 4), -1, v18, 1, 0x40uLL, v21);
                          v38 = (_OWORD *)v19[1];
                          v39 = *((_OWORD *)v25 + 16);
                          v40 = *((_OWORD *)v25 + 17);
                          v41 = *((_OWORD *)v25 + 19);
                          v38[2] = *((_OWORD *)v25 + 18);
                          v38[3] = v41;
                          *v38 = v39;
                          v38[1] = v40;
                          v42 = *((_OWORD *)v25 + 20);
                          v43 = *((_OWORD *)v25 + 21);
                          v44 = *((_OWORD *)v25 + 23);
                          v38[6] = *((_OWORD *)v25 + 22);
                          v38[7] = v44;
                          v38[4] = v42;
                          v38[5] = v43;
                          v45 = *((_OWORD *)v25 + 24);
                          v46 = *((_OWORD *)v25 + 25);
                          v47 = *((_OWORD *)v25 + 27);
                          v38[10] = *((_OWORD *)v25 + 26);
                          v38[11] = v47;
                          v38[8] = v45;
                          v38[9] = v46;
                          v48 = *((_OWORD *)v25 + 28);
                          v49 = *((_OWORD *)v25 + 29);
                          v50 = *((_OWORD *)v25 + 31);
                          v38[14] = *((_OWORD *)v25 + 30);
                          v38[15] = v50;
                          v38[12] = v48;
                          v38[13] = v49;
                        }
                      }
                    }
                  }
                }
                else
                {
                  WebCore::FFTConvolver::process(*(WebCore::FFTConvolver **)(v9 + 8), *(WebCore::FFTFrame **)v9, (const float *)v16, *v15, 0x40uLL);
                }
                v51 = *(_QWORD *)(v9 + 32);
                v52 = *(_QWORD *)(v51 + 8);
                v53 = *(int *)(v9 + 40);
                v54 = (*(_QWORD *)(v9 + 56) + v53) % v52;
                *(_DWORD *)(v9 + 40) = (v53 + 64) % v52;
                v55 = v52 - v54;
                if (v52 - v54 >= 0x40)
                  v56 = 64;
                else
                  v56 = v52 - v54;
                if (v56 + v54 <= v52 && 64 - v56 <= v52)
                {
                  v58 = *(float **)v51;
                  vDSP_vadd(v18, 1, (const float *)(*(_QWORD *)v51 + 4 * v54), 1, (float *)(*(_QWORD *)v51 + 4 * v54), 1, v56);
                  if (v55 <= 0x3F)
                    vDSP_vadd(&v18[v56], 1, v58, 1, v58, 1, 64 - v56);
                }
              }
              else
              {
                *(_DWORD *)(v9 + 40) = (unint64_t)(*(int *)(v9 + 40) + 64)
                                     % *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8);
              }
              if (*(_QWORD *)(v9 + 48))
              {
                v59 = *v11;
                v60 = v11[1];
                v61 = v11[3];
                v17[2] = v11[2];
                v17[3] = v61;
                *v17 = v59;
                v17[1] = v60;
                v62 = v11[4];
                v63 = v11[5];
                v64 = v11[7];
                v17[6] = v11[6];
                v17[7] = v64;
                v17[4] = v62;
                v17[5] = v63;
                v65 = v11[8];
                v66 = v11[9];
                v67 = v11[11];
                v17[10] = v11[10];
                v17[11] = v67;
                v17[8] = v65;
                v17[9] = v66;
                v68 = v11[12];
                v69 = v11[13];
                v70 = v11[15];
                v17[14] = v11[14];
                v17[15] = v70;
                v17[12] = v68;
                v17[13] = v69;
                v71 = *(_QWORD *)(v9 + 64) + 64;
                if (v71 >= *(_QWORD *)(v9 + 48))
                  v71 = 0;
                *(_QWORD *)(v9 + 64) = v71;
              }
              *(_QWORD *)(v9 + 72) += 64;
            }
          }
          else if (*(_QWORD *)(v9 + 24) >= 0x40uLL)
          {
            v17 = 0;
            v15 = (float **)(v9 + 16);
            v16 = (uint64_t)v11;
            goto LABEL_36;
          }
LABEL_65:
          ++v7;
          v72 = *(unsigned int *)(v1 + 28);
          if (v7 >= v72)
          {
            v2 = (unsigned __int8 *)(v1 + 138);
            if (!(_DWORD)v72)
            {
LABEL_70:
              __break(0xC471u);
              return;
            }
            goto LABEL_24;
          }
        }
      }
    }
    while (!*(_BYTE *)(v1 + 136));
  }
}

uint64_t WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::tuple<unsigned int,float>>>,std::tuple<unsigned int,float>>(unsigned int a1, unsigned int a2)
{
  int v2;
  int8x8_t v3;
  int8x8_t v4;
  int32x2_t v5;
  int8x8_t v6;
  int32x2_t v7;
  unsigned int v8;
  uint64_t v9;
  float v10;
  int v11;
  int v13;

  if (!qword_1ECE83B88)
    return 0;
  v2 = *(_DWORD *)(qword_1ECE83B88 - 8);
  v3 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(a1, a2), (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(a1, a2), 0xFuLL)));
  v4 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v3, 0xAuLL), v3), (int32x2_t)0x900000009);
  v5 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v4, 6uLL), v4);
  v6 = (int8x8_t)vadd_s32(v5, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v5, 0xBuLL)));
  v7 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v6, 0x10uLL), v6), (int32x2_t)0x109132F905AC73FELL);
  v8 = v2 & ((0xD7862706ELL * (unint64_t)vadd_s32(v7, vdup_lane_s32(v7, 1)).u32[0]) >> 4);
  v9 = qword_1ECE83B88 + 24 * v8;
  v11 = *(_DWORD *)v9;
  v10 = *(float *)(v9 + 4);
  if (*(_DWORD *)v9 != a1 || LODWORD(v10) != a2)
  {
    v13 = 1;
    while (v11 || v10 != INFINITY)
    {
      v8 = (v8 + v13) & v2;
      v9 = qword_1ECE83B88 + 24 * v8;
      v11 = *(_DWORD *)v9;
      v10 = *(float *)(v9 + 4);
      ++v13;
      if (*(_DWORD *)v9 == a1 && LODWORD(v10) == a2)
        return v9;
    }
    return qword_1ECE83B88 + 24 * *(unsigned int *)(qword_1ECE83B88 - 4);
  }
  return v9;
}

_DWORD *WTF::HashTable<std::tuple<unsigned int,float>,WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashMap<std::tuple<unsigned int,float>,WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>,WTF::DefaultHash<std::tuple<unsigned int,float>>,WTF::HashTraits<std::tuple<unsigned int,float>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::SharedAudioDestinationAdapter>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<unsigned int,float>>>::rehash(unsigned int a1, unsigned __int32 *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  _DWORD *result;
  void *v7;
  __n128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned __int32 *v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int8x8_t v21;
  int8x8_t v22;
  int32x2_t v23;
  int8x8_t v24;
  int32x2_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v55;

  v3 = qword_1ECE83B88;
  if (qword_1ECE83B88)
  {
    v4 = *(_DWORD *)(qword_1ECE83B88 - 4);
    v5 = *(_DWORD *)(qword_1ECE83B88 - 12);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  result = (_DWORD *)WTF::fastMalloc((WTF *)(24 * a1 + 16));
  if (a1)
  {
    v9 = a1;
    v10 = result + 6;
    do
    {
      *(v10 - 1) = 0x7F80000000000000;
      *v10 = 0;
      v10[1] = 0;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  qword_1ECE83B88 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE83B88 - 12) = v5;
  if (v4)
  {
    v11 = 0;
    v12 = 0;
    v13 = v4;
    v52 = v4;
    v53 = v3;
    while (1)
    {
      v14 = (unsigned __int32 *)(v3 + 24 * v11);
      if (*v14 == -1)
        goto LABEL_64;
      v8.n128_u32[0] = v14[1];
      if (*v14)
        v15 = 0;
      else
        v15 = v8.n128_f32[0] == INFINITY;
      if (!v15)
      {
        v16 = qword_1ECE83B88;
        v55 = v12;
        if (qword_1ECE83B88)
          v17 = *(_DWORD *)(qword_1ECE83B88 - 8);
        else
          v17 = 0;
        v8.n128_u32[1] = *v14;
        v21 = (int8x8_t)vadd_s32((int32x2_t)v8.n128_u64[0], (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)v8.n128_u64[0], 0xFuLL)));
        v22 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v21, 0xAuLL), v21), (int32x2_t)0x900000009);
        v23 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v22, 6uLL), v22);
        v24 = (int8x8_t)vadd_s32(v23, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v23, 0xBuLL)));
        v25 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v24, 0x10uLL), v24), (int32x2_t)0x109132F905AC73FELL);
        v8.n128_u64[0] = (unint64_t)vadd_s32(v25, vdup_lane_s32(v25, 1));
        v26 = v17 & ((0xD7862706ELL * (unint64_t)v8.n128_u32[0]) >> 4);
        v27 = 1;
        do
        {
          v28 = v26;
          v12 = (_DWORD *)(qword_1ECE83B88 + 24 * v26);
          v8.n128_u32[0] = v12[1];
          v26 = (v26 + v27++) & v17;
          if (*v12)
            v29 = 0;
          else
            v29 = v8.n128_f32[0] == INFINITY;
        }
        while (!v29);
        v30 = v28;
        v31 = qword_1ECE83B88 + 24 * v28;
        v34 = *(_QWORD *)(v31 + 8);
        v33 = (_QWORD *)(v31 + 8);
        v32 = v34;
        *v33 = 0;
        if (!v34)
          goto LABEL_49;
        if (__ldaxr((unsigned __int8 *)v32))
        {
          __clrex();
          goto LABEL_40;
        }
        if (__stxr(1u, (unsigned __int8 *)v32))
LABEL_40:
          MEMORY[0x19AEA534C](v32, v8);
        v39 = *(_QWORD *)(v32 + 16) - 1;
        *(_QWORD *)(v32 + 16) = v39;
        if (v39)
        {
          v50 = __ldxr((unsigned __int8 *)v32);
          if (v50 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v32))
              goto LABEL_49;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v32);
          goto LABEL_49;
        }
        v40 = *(_QWORD *)(v32 + 8);
        v41 = __ldxr((unsigned __int8 *)v32);
        if (v41 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v32))
          {
            if (!v40)
LABEL_48:
              WTF::fastFree((WTF *)v32, v7);
LABEL_49:
            *(_QWORD *)v12 = *(_QWORD *)v14;
            v3 = v53;
            v42 = v53 + 24 * v11;
            *v33 = *(_QWORD *)(v42 + 8);
            v43 = *(_QWORD *)(v42 + 16);
            *(_QWORD *)(v42 + 8) = 0;
            *(_QWORD *)(v42 + 16) = 0;
            *(_QWORD *)(v16 + 24 * v30 + 16) = v43;
            v44 = *(_QWORD *)(v42 + 8);
            *(_QWORD *)(v42 + 8) = 0;
            v13 = v52;
            if (!v44)
              goto LABEL_62;
            if (__ldaxr((unsigned __int8 *)v44))
            {
              __clrex();
              goto LABEL_53;
            }
            if (__stxr(1u, (unsigned __int8 *)v44))
LABEL_53:
              MEMORY[0x19AEA534C](v44, v8);
            v46 = *(_QWORD *)(v44 + 16) - 1;
            *(_QWORD *)(v44 + 16) = v46;
            if (v46)
            {
              v51 = __ldxr((unsigned __int8 *)v44);
              if (v51 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v44))
                  goto LABEL_62;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v44);
              goto LABEL_62;
            }
            v47 = *(_QWORD *)(v44 + 8);
            v48 = __ldxr((unsigned __int8 *)v44);
            if (v48 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v44))
              {
                if (!v47)
LABEL_61:
                  WTF::fastFree((WTF *)v44, v7);
LABEL_62:
                if (v14 != a2)
                  v12 = v55;
                goto LABEL_64;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v44);
            if (!v47)
              goto LABEL_61;
            goto LABEL_62;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v32);
        if (!v40)
          goto LABEL_48;
        goto LABEL_49;
      }
      v18 = v3 + 24 * v11;
      v19 = *(_QWORD *)(v18 + 8);
      *(_QWORD *)(v18 + 8) = 0;
      if (!v19)
        goto LABEL_64;
      if (__ldaxr((unsigned __int8 *)v19))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v19))
      {
        goto LABEL_31;
      }
      MEMORY[0x19AEA534C](v19, v8);
LABEL_31:
      v36 = *(_QWORD *)(v19 + 16) - 1;
      *(_QWORD *)(v19 + 16) = v36;
      if (v36)
      {
        v49 = __ldxr((unsigned __int8 *)v19);
        if (v49 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v19))
            goto LABEL_64;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v19);
        goto LABEL_64;
      }
      v37 = *(_QWORD *)(v19 + 8);
      v38 = __ldxr((unsigned __int8 *)v19);
      if (v38 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
          if (!v37)
            goto LABEL_38;
          goto LABEL_64;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      if (!v37)
LABEL_38:
        WTF::fastFree((WTF *)v19, v7);
LABEL_64:
      if (++v11 == v13)
        return (_DWORD *)WTF::fastFree((WTF *)(v3 - 16), v7);
    }
  }
  if (v3)
    return (_DWORD *)WTF::fastFree((WTF *)(v3 - 16), v7);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SharedAudioDestinationAdapter::configureRenderThread(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3408238;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedAudioDestinationAdapter::configureRenderThread(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3408238;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedAudioDestinationAdapter::configureRenderThread(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SharedAudioDestinationAdapter::configureRenderThread(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3408260;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedAudioDestinationAdapter::configureRenderThread(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3408260;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedAudioDestinationAdapter::configureRenderThread(WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedAudioDestinationAdapter::render(WebCore::AudioBus *,WebCore::AudioBus *,unsigned long,WebCore::AudioIOPosition const&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  WTF *v11;
  _QWORD *v13;

  *(_QWORD *)a1 = &off_1E3408288;
  v3 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 8);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 28);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E34081E8;
          v10[1] = v7;
          v13 = v10;
          WTF::ensureOnMainThread();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v11 = *(WTF **)(a1 + 8);
  if (v11)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v11, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedAudioDestinationAdapter::render(WebCore::AudioBus *,WebCore::AudioBus *,unsigned long,WebCore::AudioIOPosition const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v10;
  WTF *v11;
  _QWORD *v13;

  *(_QWORD *)this = &off_1E3408288;
  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 1);
    v5 = &v4[v3];
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
      {
        v7 = (unsigned int *)(v6 + 28);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v7);
          v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v10 = off_1E34081E8;
          v10[1] = v7;
          v13 = v10;
          WTF::ensureOnMainThread();
          if (v13)
            (*(void (**)(_QWORD *))(*v13 + 8))(v13);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  v11 = (WTF *)*((_QWORD *)this + 1);
  if (v11)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v11, a2);
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::SharedAudioDestination::sharedRender(WebCore::AudioBus *,WebCore::AudioBus *,unsigned long,WebCore::AudioIOPosition const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;

  *a1 = &off_1E34082D8;
  v3 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v16 = v3;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v16, a2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v16 = v6;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v16, a2);
    }
  }
  v9 = a1[1];
  a1[1] = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 28);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v14 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v14 = off_1E34081E8;
      *((_QWORD *)v14 + 1) = v10;
      v16 = v14;
      WTF::ensureOnMainThread();
      v15 = (uint64_t)v16;
      v16 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedAudioDestination::sharedRender(WebCore::AudioBus *,WebCore::AudioBus *,unsigned long,WebCore::AudioIOPosition const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;

  *(_QWORD *)this = &off_1E34082D8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v16 = v3;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v16, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v16 = v6;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v16, a2);
    }
  }
  v9 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 28);
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      v14 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v14 = off_1E34081E8;
      *((_QWORD *)v14 + 1) = v10;
      v16 = v14;
      WTF::ensureOnMainThread();
      v15 = (uint64_t)v16;
      v16 = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::SharedAudioDestination::sharedRender(WebCore::AudioBus *,WebCore::AudioBus *,unsigned long,WebCore::AudioIOPosition const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  void (***v9)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  int v10;
  unint64_t v11;
  unint64_t i;
  uint64_t v13;
  void **v14;
  _QWORD *v15;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = (unsigned __int8 *)(v3 + 8);
  while (1)
  {
    v7 = *v6;
    if ((v7 & 1) != 0)
      break;
    v8 = __ldaxr(v6);
    if (v8 == v7)
    {
      if (!__stxr(v7 | 1, v6))
      {
        v9 = *(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16);
        if (v9)
          (**v9)(v9, v2, v5, v4, a1 + 40);
        v10 = __ldxr(v6);
        if (v10 == 1)
        {
          if (!__stlxr(0, v6))
          {
            if (v9)
              return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 56));
            break;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v6);
        if (v9)
          return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 56));
        break;
      }
    }
    else
    {
      __clrex();
    }
  }
  v11 = *(unsigned int *)(v5 + 28);
  if ((_DWORD)v11)
  {
    for (i = 0; i < v11; ++i)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * i);
      if (!*(_BYTE *)(v13 + 24))
      {
        *(_BYTE *)(v13 + 24) = 1;
        v14 = *(void ***)(v13 + 8);
        v15 = (_QWORD *)(v13 + 16);
        if (v14)
          v15 = v14 + 1;
        else
          v14 = (void **)v13;
        bzero(*v14, 4 * *v15);
        v11 = *(unsigned int *)(v5 + 28);
      }
    }
  }
  return WTF::BinarySemaphore::signal(*(WTF::BinarySemaphore **)(a1 + 56));
}

void WTF::Detail::CallableWrapper<WebCore::SincResampler::processBuffer(std::span<float const,18446744073709551615ul>,std::span<float,18446744073709551615ul>,double)::$_0,void,std::span<float,18446744073709551615ul>,unsigned long>::call(uint64_t a1, char *__dst, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 8);
  if (v5 >= a4)
    v6 = a4;
  else
    v6 = *(_QWORD *)(v4 + 8);
  v7 = a3 - v6;
  if (a3 < v6)
    goto LABEL_14;
  memcpy(__dst, *(const void **)v4, 4 * v6);
  if (v5 < a4)
  {
    v11 = a4 - v6;
    if (a4 - v6 == -1)
    {
      v11 = v7;
    }
    else if (v7 < v11)
    {
      goto LABEL_14;
    }
    bzero(&__dst[4 * v6], 4 * v11);
  }
  v12 = *(_QWORD **)(a1 + 8);
  v13 = v12[1];
  v14 = v13 >= v6;
  v15 = v13 - v6;
  if (v14)
  {
    *v12 += 4 * v6;
    v12[1] = v15;
    return;
  }
LABEL_14:
  __break(1u);
}

void WebCore::AudioSession::~AudioSession(WebCore::AudioSession *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)this = off_1E3408328;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    v11 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v11)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(unsigned int **)(v6 + 8 * i);
        if (v13 != (unsigned int *)-1)
        {
          *(_QWORD *)(v6 + 8 * i) = 0;
          if (v13)
          {
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              atomic_store(1u, v13);
              v17 = i;
              v18 = v6;
              v16 = v11;
              WTF::fastFree((WTF *)v13, a2);
              v11 = v16;
              i = v17;
              v6 = v18;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::AudioSession::~AudioSession(this, a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebCore::AudioSession::addAudioSessionChangedObserver(uint64_t a1)
{
  unsigned int *result;
  _BYTE v3[24];

  if ((byte_1EE337EF2 & 1) == 0)
  {
    *(_QWORD *)&dword_1EE337F10 = 0;
    qword_1EE337F08 = 0;
    byte_1EE337EF2 = 1;
  }
  result = WTF::WeakHashSet<WTF::Observer<void ()(WebCore::AudioSession &)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(WebCore::AudioSession &)>>((uint64_t)v3, (_QWORD *)a1);
  {
    if (byte_1ECE90DC0)
      return (unsigned int *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), WebCore::sharedAudioSession(void)::session);
  }
  else
  {
    LOBYTE(WebCore::sharedAudioSession(void)::session) = 0;
    byte_1ECE90DC0 = 0;
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WTF::Observer<void ()(WebCore::AudioSession &)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WTF::Observer<void ()(WebCore::AudioSession &)>>(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  unsigned int *result;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;

  if (++dword_1EE337F10 > dword_1EE337F14)
  {
    _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetINS_8ObserverIFvRN7WebCore12AudioSessionEEEES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSO_(a1, a2);
    v4 = 0;
    dword_1EE337F10 = 0;
    if (qword_1EE337F08)
    {
      v4 = *(_DWORD *)(qword_1EE337F08 - 12);
      if (v4 > 0x7FFFFFFE)
        v4 = 0x7FFFFFFF;
    }
    dword_1EE337F14 = 2 * v4;
  }
  WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2, (uint64_t)a2);
  v5 = (unsigned int *)*a2;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  v14 = (WTF *)v5;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(&qword_1EE337F08, &v14, a1);
  result = (unsigned int *)v14;
  v14 = 0;
  if (result)
  {
    do
    {
      v12 = __ldaxr(result);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, result));
    if (!v13)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
  }
  if (v5)
  {
    do
    {
      v10 = __ldaxr(v5);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v5));
    if (!v11)
    {
      atomic_store(1u, v5);
      return (unsigned int *)WTF::fastFree((WTF *)v5, v8);
    }
  }
  return result;
}

uint64_t WebCore::AudioSession::tryToSetActive(WebCore::AudioSession *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  unsigned __int8 v18;

  v18 = (*(uint64_t (**)(WebCore::AudioSession *))(*(_QWORD *)this + 224))(this);
  v4 = (*(uint64_t (**)(WebCore::AudioSession *, uint64_t))(*(_QWORD *)this + 288))(this, a2);
  if ((_DWORD)v4)
  {
    if (!*((_QWORD *)this + 1))
    {
      v5 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v5 + 8) = 1;
      *(_QWORD *)v5 = off_1E335DEC0;
      *(_BYTE *)(v5 + 12) = 1;
      *(_QWORD *)(v5 + 16) = this;
      v6 = (unsigned int *)*((_QWORD *)this + 1);
      *((_QWORD *)this + 1) = v5;
      if (v6)
      {
        v7 = v6 + 2;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          atomic_store(1u, v6 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
        }
      }
    }
    v10 = *((_QWORD *)this + 1);
    v17[0] = "AudioSession";
    v17[1] = 13;
    v17[2] = "tryToSetActive";
    v17[3] = 0;
    if (*(_BYTE *)(v10 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [15],BOOL,char [19],BOOL>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v17, "is active = ", (uint64_t)this + 41, ", previousIsActive = ");
    v11 = v18;
    v12 = (*(uint64_t (**)(WebCore::AudioSession *))(*(_QWORD *)this + 224))(this);
    *((_BYTE *)this + 41) = a2;
    if (*((_BYTE *)this + 42) && (_DWORD)a2)
    {
      v13 = v11 != v12;
      v14 = WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v14 = off_1E3408588;
      *(_BYTE *)(v14 + 8) = v13;
      v17[0] = v14;
      WTF::callOnMainThread();
      v15 = v17[0];
      v17[0] = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    else if (v11 != v12)
    {
      WebCore::AudioSession::activeStateChanged((uint64_t)this);
    }
  }
  return v4;
}

uint64_t WebCore::AudioSession::logger(WebCore::AudioSession *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (!*((_QWORD *)this + 1))
  {
    v2 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v2 + 8) = 1;
    *(_QWORD *)v2 = off_1E335DEC0;
    *(_BYTE *)(v2 + 12) = 1;
    *(_QWORD *)(v2 + 16) = this;
    v3 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  return *((_QWORD *)this + 1);
}

char *WebCore::AudioSession::logChannel(WebCore::AudioSession *this)
{
  return &WebCore::LogMedia;
}

uint64_t WebCore::AudioSession::activeStateChanged(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 16);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v14 = 0;
    v5 = *(uint64_t **)(this + 16);
    goto LABEL_45;
  }
  v9 = 8 * v4;
  v5 = *(uint64_t **)(this + 16);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v9 -= 8;
    if (!v9)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v2 - 4);
LABEL_45:
  v6 = (uint64_t *)(v2 + 8 * v14);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 8) + 32))(*(_QWORD *)(v11 + 8));
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v1 + 24);
  }
  return this;
}

unsigned int *WebCore::AudioSession::addInterruptionObserver(WebCore::AudioSession *this, WebCore::AudioSessionInterruptionObserver *a2)
{
  _BYTE v3[24];

  return WTF::WeakHashSet<WebCore::JSVMClientDataClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::JSVMClientDataClient>((uint64_t)v3, (uint64_t)this + 16, (uint64_t)a2);
}

unsigned int **WebCore::AudioSession::removeInterruptionObserver(unsigned int **this, WTF **a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int **v6;
  unsigned int v7;
  unsigned int *v8;
  WTF *v9;

  v3 = (uint64_t *)(this + 2);
  v4 = *((_DWORD *)this + 7);
  v5 = *((_DWORD *)this + 6) + 1;
  *((_DWORD *)this + 6) = v5;
  if (v5 > v4)
  {
    v6 = this;
    this = _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetIN7WebCore20JSVMClientDataClientES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(this + 2, a2);
    v7 = 0;
    *((_DWORD *)v6 + 6) = 0;
    v8 = v6[2];
    if (v8)
    {
      v7 = *(v8 - 3);
      if (v7 > 0x7FFFFFFE)
        v7 = 0x7FFFFFFF;
    }
    *((_DWORD *)v6 + 7) = 2 * v7;
  }
  v9 = a2[1];
  if (v9)
  {
    if (*((_QWORD *)v9 + 1))
      return (unsigned int **)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(v3, v9);
  }
  return this;
}

void WebCore::AudioSession::beginInterruption(WebCore::AudioSession *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v22[4];

  if (!*((_QWORD *)this + 1))
  {
    v2 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v2 + 8) = 1;
    *(_QWORD *)v2 = off_1E335DEC0;
    *(_BYTE *)(v2 + 12) = 1;
    *(_QWORD *)(v2 + 16) = this;
    v3 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      }
    }
  }
  v7 = *((_QWORD *)this + 1);
  v22[0] = "AudioSession";
  v22[1] = 13;
  v22[2] = "beginInterruption";
  v22[3] = 0;
  if (*(_BYTE *)(v7 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v22);
  if (*((_BYTE *)this + 42))
  {
    v8 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v22[0]) = 0;
      _os_log_error_impl(&dword_1940B8000, v8, OS_LOG_TYPE_ERROR, "AudioSession::beginInterruption but session is already interrupted!", (uint8_t *)v22, 2u);
    }
    return;
  }
  *((_BYTE *)this + 42) = 1;
  v9 = *((_QWORD *)this + 2);
  if (!v9)
  {
    v10 = 0;
    v11 = 0;
LABEL_14:
    v12 = v10;
    v10 = (uint64_t *)(v9 + 8 * v11);
    goto LABEL_15;
  }
  v11 = *(unsigned int *)(v9 - 4);
  v10 = (uint64_t *)(v9 + 8 * v11);
  if (!*(_DWORD *)(v9 - 12))
    goto LABEL_14;
  if (!(_DWORD)v11)
  {
    v21 = 0;
    v12 = (uint64_t *)*((_QWORD *)this + 2);
    goto LABEL_56;
  }
  v16 = 8 * v11;
  v12 = (uint64_t *)*((_QWORD *)this + 2);
  while ((unint64_t)(*v12 + 1) <= 1)
  {
    ++v12;
    v16 -= 8;
    if (!v16)
    {
      v12 = v10;
      break;
    }
  }
LABEL_15:
  if (v9)
  {
    v21 = *(unsigned int *)(v9 - 4);
LABEL_56:
    v13 = (uint64_t *)(v9 + 8 * v21);
    goto LABEL_17;
  }
  v13 = 0;
LABEL_17:
  if (v13 != v12)
  {
    while (!*(_QWORD *)(*v12 + 8))
    {
      v14 = v12 + 1;
      v12 = v10;
      if (v14 != v10)
      {
        v12 = v14;
        while ((unint64_t)(*v12 + 1) <= 1)
        {
          if (++v12 == v10)
          {
            v12 = v10;
            break;
          }
        }
      }
      if (v12 == v13)
      {
        v12 = v13;
        break;
      }
    }
  }
  if (v9)
    v15 = (uint64_t *)(v9 + 8 * *(unsigned int *)(v9 - 4));
  else
    v15 = 0;
  while (v12 != v15)
  {
    v18 = *v12;
    v17 = v12 + 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(v18 + 8) + 16))(*(_QWORD *)(v18 + 8));
    v19 = v10;
    if (v17 != v10)
    {
      v19 = v17;
      while ((unint64_t)(*v19 + 1) <= 1)
      {
        if (++v19 == v10)
        {
          v19 = v10;
          break;
        }
      }
    }
    v12 = v13;
    if (v19 != v13)
    {
      v12 = v19;
      if (!*(_QWORD *)(*v19 + 8))
      {
        while (1)
        {
          v20 = v12 + 1;
          v12 = v10;
          if (v20 != v10)
          {
            v12 = v20;
            while ((unint64_t)(*v12 + 1) <= 1)
            {
              if (++v12 == v10)
              {
                v12 = v10;
                break;
              }
            }
          }
          if (v12 == v13)
            break;
          if (*(_QWORD *)(*v12 + 8))
            goto LABEL_51;
        }
        v12 = v13;
      }
    }
LABEL_51:
    ++*((_DWORD *)this + 6);
  }
}

void WebCore::AudioSession::endInterruption(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD v24[4];

  if (!*(_QWORD *)(a1 + 8))
  {
    v4 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v4 + 8) = 1;
    *(_QWORD *)v4 = off_1E335DEC0;
    *(_BYTE *)(v4 + 12) = 1;
    *(_QWORD *)(v4 + 16) = a1;
    v5 = *(unsigned int **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    if (v5)
    {
      v6 = v5 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v5 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  v24[0] = "AudioSession";
  v24[1] = 13;
  v24[2] = "endInterruption";
  v24[3] = 0;
  if (*(_BYTE *)(v9 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v24);
  if (!*(_BYTE *)(a1 + 42))
  {
    v17 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v24[0]) = 0;
      _os_log_error_impl(&dword_1940B8000, v17, OS_LOG_TYPE_ERROR, "AudioSession::endInterruption but session is already uninterrupted!", (uint8_t *)v24, 2u);
    }
    return;
  }
  *(_BYTE *)(a1 + 42) = 0;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v11 = 0;
    v12 = 0;
LABEL_12:
    v13 = v11;
    v11 = (uint64_t *)(v10 + 8 * v12);
    goto LABEL_13;
  }
  v12 = *(unsigned int *)(v10 - 4);
  v11 = (uint64_t *)(v10 + 8 * v12);
  if (!*(_DWORD *)(v10 - 12))
    goto LABEL_12;
  if (!(_DWORD)v12)
  {
    v23 = 0;
    v13 = *(uint64_t **)(a1 + 16);
    goto LABEL_56;
  }
  v18 = 8 * v12;
  v13 = *(uint64_t **)(a1 + 16);
  while ((unint64_t)(*v13 + 1) <= 1)
  {
    ++v13;
    v18 -= 8;
    if (!v18)
    {
      v13 = v11;
      break;
    }
  }
LABEL_13:
  if (v10)
  {
    v23 = *(unsigned int *)(v10 - 4);
LABEL_56:
    v14 = (uint64_t *)(v10 + 8 * v23);
    goto LABEL_15;
  }
  v14 = 0;
LABEL_15:
  if (v14 != v13)
  {
    while (!*(_QWORD *)(*v13 + 8))
    {
      v15 = v13 + 1;
      v13 = v11;
      if (v15 != v11)
      {
        v13 = v15;
        while ((unint64_t)(*v13 + 1) <= 1)
        {
          if (++v13 == v11)
          {
            v13 = v11;
            break;
          }
        }
      }
      if (v13 == v14)
      {
        v13 = v14;
        break;
      }
    }
  }
  if (v10)
    v16 = (uint64_t *)(v10 + 8 * *(unsigned int *)(v10 - 4));
  else
    v16 = 0;
  while (v13 != v16)
  {
    v20 = *v13;
    v19 = v13 + 1;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v20 + 8) + 24))(*(_QWORD *)(v20 + 8), a2);
    v21 = v11;
    if (v19 != v11)
    {
      v21 = v19;
      while ((unint64_t)(*v21 + 1) <= 1)
      {
        if (++v21 == v11)
        {
          v21 = v11;
          break;
        }
      }
    }
    v13 = v14;
    if (v21 != v14)
    {
      v13 = v21;
      if (!*(_QWORD *)(*v21 + 8))
      {
        while (1)
        {
          v22 = v13 + 1;
          v13 = v11;
          if (v22 != v11)
          {
            v13 = v22;
            while ((unint64_t)(*v13 + 1) <= 1)
            {
              if (++v13 == v11)
              {
                v13 = v11;
                break;
              }
            }
          }
          if (v13 == v14)
            break;
          if (*(_QWORD *)(*v13 + 8))
            goto LABEL_51;
        }
        v13 = v14;
      }
    }
LABEL_51:
    ++*(_DWORD *)(a1 + 24);
  }
}

uint64_t WebCore::AudioSession::setCategoryOverride(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD v9[4];

  if (*(unsigned __int8 *)(result + 40) != (_DWORD)a2)
  {
    v3 = result;
    if (!*(_QWORD *)(result + 8))
    {
      v4 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v4 + 8) = 1;
      *(_QWORD *)v4 = off_1E335DEC0;
      *(_BYTE *)(v4 + 12) = 1;
      *(_QWORD *)(v4 + 16) = v3;
      result = *(_QWORD *)(v3 + 8);
      *(_QWORD *)(v3 + 8) = v4;
      if (result)
      {
        v5 = (unsigned int *)(result + 8);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, (unsigned int *)(result + 8));
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
    }
    v8 = *(_QWORD *)(v3 + 8);
    v9[0] = "AudioSession";
    v9[1] = 13;
    v9[2] = "setCategoryOverride";
    v9[3] = 0;
    if (*(_BYTE *)(v8 + 12))
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v9);
    *(_BYTE *)(v3 + 40) = a2;
    if ((_DWORD)a2)
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 32))(v3, a2, 0, 0);
  }
  return result;
}

uint64_t WebCore::AudioSession::categoryOverride(WebCore::AudioSession *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t WebCore::AudioSession::category(WebCore::AudioSession *this)
{
  return 0;
}

uint64_t WebCore::AudioSession::mode(WebCore::AudioSession *this)
{
  return 0;
}

float WebCore::AudioSession::sampleRate(WebCore::AudioSession *this)
{
  return 0.0;
}

uint64_t WebCore::AudioSession::bufferSize(WebCore::AudioSession *this)
{
  return 0;
}

uint64_t WebCore::AudioSession::numberOfOutputChannels(WebCore::AudioSession *this)
{
  return 0;
}

uint64_t WebCore::AudioSession::maximumNumberOfOutputChannels(WebCore::AudioSession *this)
{
  return 0;
}

uint64_t WebCore::AudioSession::tryToSetActiveInternal(WebCore::AudioSession *this)
{
  return 1;
}

uint64_t WebCore::AudioSession::preferredBufferSize(WebCore::AudioSession *this)
{
  return 0;
}

uint64_t WebCore::AudioSession::routeSharingPolicy(WebCore::AudioSession *this)
{
  return 0;
}

void WebCore::AudioSession::routingContextUID(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

uint64_t WebCore::AudioDestination::create@<X0>(WebCore::AudioSession *a1@<X0>, int a2@<W2>, void *a3@<X3>, uint64_t *a4@<X8>, float a5@<S0>)
{
  WebCore::AudioSession *v7;
  WebCore::AudioSessionIOS *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v16;
  uint64_t v17;

  v7 = a1;
  if (a2)
    a1 = (WebCore::AudioSession *)WTFLogAlways();
  v9 = WebCore::AudioSession::sharedSession(a1);
  if ((*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v9 + 96))(v9) < (unint64_t)a3)
    WTFLogAlways();
  if (WebCore::AudioDestinationCocoa::createOverride)
    return WebCore::AudioDestinationCocoa::createOverride(v7, a5);
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v11 = off_1E34085B0;
  *(_DWORD *)(v11 + 8) = (_DWORD)a3;
  *(float *)(v11 + 12) = a5;
  v17 = v11;
  v12 = WTF::fastMalloc((WTF *)0x40);
  v13 = v12;
  *(_QWORD *)v12 = off_1E3407738;
  *(_BYTE *)(v12 + 8) = 0;
  v14 = (unsigned __int8 *)(v12 + 8);
  *(_QWORD *)(v12 + 16) = 0;
  *(float *)(v12 + 24) = a5;
  if (__ldaxr((unsigned __int8 *)(v12 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C](v12 + 8);
LABEL_11:
  *(_QWORD *)(v13 + 16) = v7;
  v16 = __ldxr(v14);
  if (v16 == 1)
  {
    if (!__stlxr(0, v14))
      goto LABEL_16;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
LABEL_16:
  *(_DWORD *)(v13 + 28) = 1;
  *(_QWORD *)v13 = off_1E3408190;
  *(_BYTE *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_BYTE *)(v13 + 48) = 0;
  WebCore::SharedAudioDestinationAdapter::ensureAdapter(a3, &v17, (uint64_t *)(v13 + 56), a5);
  *a4 = v13;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
}

uint64_t WebCore::AudioDestination::hardwareSampleRate(WebCore::AudioDestination *this)
{
  WebCore::AudioSessionIOS *v1;

  v1 = WebCore::AudioSession::sharedSession(this);
  return (*(uint64_t (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v1 + 72))(v1);
}

uint64_t WebCore::AudioDestinationCocoa::AudioDestinationCocoa(uint64_t a1, uint64_t a2, void *a3, float a4)
{
  WebCore::AudioSessionIOS *v8;
  float v9;
  WebCore::AudioSession *v10;
  WebCore::AudioSessionIOS *v11;
  float v12;
  const AudioComponentDescription *v13;
  PAL *Next;
  OpaqueAudioComponentInstance **v15;
  unsigned int v16;
  OpaqueAudioComponentInstance *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  WebCore::AudioSession *v21;
  WebCore::AudioSessionIOS *v22;
  int v24;
  double v25;
  __int128 v26;
  int v27;
  int v28;
  int v29;
  _QWORD v30[2];
  int v31;
  __int128 v32;
  int v33;

  v8 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)a1);
  v9 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v8 + 72))(v8);
  v10 = (WebCore::AudioSession *)WebCore::AudioDestinationResampler::AudioDestinationResampler(a1, a2, a3, a4, v9);
  *(_DWORD *)(a1 + 152) = 1;
  *(_QWORD *)a1 = off_1E3408460;
  *(_QWORD *)(a1 + 144) = &unk_1E34084D0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 144;
  v11 = WebCore::AudioSession::sharedSession(v10);
  v12 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v11 + 72))(v11);
  v32 = xmmword_19689B0F0;
  v33 = 0;
  Next = (PAL *)PAL::softLinkAudioToolboxAudioComponentFindNext(0, (OpaqueAudioComponent *)&v32, v13);
  PAL::softLinkAudioToolboxAudioComponentInstanceNew(Next, (OpaqueAudioComponent *)(a1 + 160), v15);
  v31 = 1;
  PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)(a1 + 160), (OpaqueAudioComponentInstance *)0x7D3, 2u, 0, &v31, (const void *)4, v16);
  PAL::softLinkAudioToolboxAudioUnitInitialize(*(PAL **)(a1 + 160), v17);
  v30[0] = WebCore::AudioOutputUnitAdaptor::inputProc;
  v30[1] = a1 + 160;
  PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)(a1 + 160), (OpaqueAudioComponentInstance *)0x17, 1u, 0, v30, (const void *)0x10, v18);
  v24 = 40;
  PAL::softLinkAudioToolboxAudioUnitGetProperty(*(PAL **)(a1 + 160), (OpaqueAudioComponentInstance *)8, 2u, 0, &v25, &v24, v19);
  v25 = v12;
  v26 = xmmword_19689B100;
  v27 = 4;
  v28 = (int)a3;
  v29 = 32;
  v21 = (WebCore::AudioSession *)PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)(a1 + 160), (OpaqueAudioComponentInstance *)8, 1u, 0, &v25, (const void *)0x28, v20);
  v22 = WebCore::AudioSession::sharedSession(v21);
  (*(void (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v22 + 112))(v22, 256);
  return a1;
}

{
  WebCore::AudioSessionIOS *v8;
  float v9;
  WebCore::AudioSession *v10;
  WebCore::AudioSessionIOS *v11;
  float v12;
  const AudioComponentDescription *v13;
  PAL *Next;
  OpaqueAudioComponentInstance **v15;
  unsigned int v16;
  OpaqueAudioComponentInstance *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  WebCore::AudioSession *v21;
  WebCore::AudioSessionIOS *v22;
  int v24;
  double v25;
  __int128 v26;
  int v27;
  int v28;
  int v29;
  _QWORD v30[2];
  int v31;
  __int128 v32;
  int v33;

  v8 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)a1);
  v9 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v8 + 72))(v8);
  v10 = (WebCore::AudioSession *)WebCore::AudioDestinationResampler::AudioDestinationResampler(a1, a2, a3, a4, v9);
  *(_DWORD *)(a1 + 152) = 1;
  *(_QWORD *)a1 = off_1E3408460;
  *(_QWORD *)(a1 + 144) = &unk_1E34084D0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 144;
  v11 = WebCore::AudioSession::sharedSession(v10);
  v12 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v11 + 72))(v11);
  v32 = xmmword_19689B0F0;
  v33 = 0;
  Next = (PAL *)PAL::softLinkAudioToolboxAudioComponentFindNext(0, (OpaqueAudioComponent *)&v32, v13);
  PAL::softLinkAudioToolboxAudioComponentInstanceNew(Next, (OpaqueAudioComponent *)(a1 + 160), v15);
  v31 = 1;
  PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)(a1 + 160), (OpaqueAudioComponentInstance *)0x7D3, 2u, 0, &v31, (const void *)4, v16);
  PAL::softLinkAudioToolboxAudioUnitInitialize(*(PAL **)(a1 + 160), v17);
  v30[0] = WebCore::AudioOutputUnitAdaptor::inputProc;
  v30[1] = a1 + 160;
  PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)(a1 + 160), (OpaqueAudioComponentInstance *)0x17, 1u, 0, v30, (const void *)0x10, v18);
  v24 = 40;
  PAL::softLinkAudioToolboxAudioUnitGetProperty(*(PAL **)(a1 + 160), (OpaqueAudioComponentInstance *)8, 2u, 0, &v25, &v24, v19);
  v25 = v12;
  v26 = xmmword_19689B100;
  v27 = 4;
  v28 = (int)a3;
  v29 = 32;
  v21 = (WebCore::AudioSession *)PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)(a1 + 160), (OpaqueAudioComponentInstance *)8, 1u, 0, &v25, (const void *)0x28, v20);
  v22 = WebCore::AudioSession::sharedSession(v21);
  (*(void (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v22 + 112))(v22, 256);
  return a1;
}

_QWORD *WebCore::AudioOutputUnitAdaptor::AudioOutputUnitAdaptor(_QWORD *result, uint64_t a2)
{
  *result = 0;
  result[1] = a2;
  return result;
}

{
  *result = 0;
  result[1] = a2;
  return result;
}

void WebCore::AudioDestinationCocoa::~AudioDestinationCocoa(WebCore::AudioDestinationCocoa *this, OpaqueAudioComponentInstance *a2)
{
  PAL *v3;

  *(_QWORD *)this = off_1E3408460;
  *((_QWORD *)this + 18) = &unk_1E34084D0;
  v3 = (PAL *)*((_QWORD *)this + 20);
  if (v3)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v3, a2);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(this, a2);
}

{
  PAL *v3;

  *(_QWORD *)this = off_1E3408460;
  *((_QWORD *)this + 18) = &unk_1E34084D0;
  v3 = (PAL *)*((_QWORD *)this + 20);
  if (v3)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v3, a2);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(this, a2);
}

{
  PAL *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E3408460;
  *((_QWORD *)this + 18) = &unk_1E34084D0;
  v3 = (PAL *)*((_QWORD *)this + 20);
  if (v3)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v3, a2);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(this, a2);
  WTF::fastFree(v4, v5);
}

void WebCore::AudioOutputUnitAdaptor::~AudioOutputUnitAdaptor(PAL **this, OpaqueAudioComponentInstance *a2)
{
  PAL *v2;

  v2 = *this;
  if (v2)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v2, a2);
}

{
  PAL *v2;

  v2 = *this;
  if (v2)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v2, a2);
}

void `non-virtual thunk to'WebCore::AudioDestinationCocoa::~AudioDestinationCocoa(WebCore::AudioDestinationCocoa *this, OpaqueAudioComponentInstance *a2)
{
  PAL *v3;
  WebCore::AudioDestinationResampler *v4;

  *(_QWORD *)this = &unk_1E34084D0;
  v3 = (PAL *)*((_QWORD *)this + 2);
  *((_QWORD *)this - 18) = off_1E3408460;
  v4 = (WebCore::AudioDestinationCocoa *)((char *)this - 144);
  if (v3)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v3, a2);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(v4, a2);
}

{
  PAL *v3;
  WebCore::AudioDestinationResampler *v4;
  WTF *v5;
  void *v6;

  *(_QWORD *)this = &unk_1E34084D0;
  v3 = (PAL *)*((_QWORD *)this + 2);
  *((_QWORD *)this - 18) = off_1E3408460;
  v4 = (WebCore::AudioDestinationCocoa *)((char *)this - 144);
  if (v3)
    PAL::softLinkAudioToolboxAudioComponentInstanceDispose(v3, a2);
  WebCore::AudioDestinationResampler::~AudioDestinationResampler(v4, a2);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::AudioDestinationCocoa::startRendering(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  int v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = PAL::softLinkAudioToolboxAudioOutputUnitStart(*(PAL **)(a1 + 160), a2);
  if (v4)
  {
    WTFLogAlways();
    goto LABEL_15;
  }
  v5 = atomic_load((unsigned __int8 *)(a1 + 136));
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 136));
    v6 = (unsigned __int8 *)(a1 + 8);
    if (__ldaxr((unsigned __int8 *)(a1 + 8)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](a1 + 8);
LABEL_8:
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = __ldxr(v6);
    if (v9 == 1)
    {
      if (!__stlxr(0, v6))
        goto LABEL_15;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 8));
  }
LABEL_15:
  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v11 = &off_1E34085D8;
  *(_QWORD *)(v11 + 8) = v10;
  *(_BYTE *)(v11 + 16) = v4 == 0;
  v13 = v11;
  WTF::callOnMainThread();
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

uint64_t WebCore::AudioOutputUnitAdaptor::start(PAL **this, OpaqueAudioComponentInstance *a2)
{
  uint64_t v2;

  v2 = PAL::softLinkAudioToolboxAudioOutputUnitStart(*this, a2);
  if ((_DWORD)v2)
    WTFLogAlways();
  return v2;
}

uint64_t WebCore::AudioDestinationCocoa::stopRendering(uint64_t a1, OpaqueAudioComponentInstance *a2)
{
  int v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = PAL::softLinkAudioToolboxAudioOutputUnitStop(*(PAL **)(a1 + 160), a2);
  if (v4)
    goto LABEL_14;
  v5 = atomic_load((unsigned __int8 *)(a1 + 136));
  if ((v5 & 1) == 0)
    goto LABEL_14;
  atomic_store(0, (unsigned __int8 *)(a1 + 136));
  v6 = (unsigned __int8 *)(a1 + 8);
  if (__ldaxr((unsigned __int8 *)(a1 + 8)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C](a1 + 8);
LABEL_7:
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, v6))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 8));
LABEL_14:
  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v11 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v11 = &off_1E3408600;
  *(_QWORD *)(v11 + 8) = v10;
  *(_BYTE *)(v11 + 16) = v4 == 0;
  v13 = v11;
  WTF::callOnMainThread();
  result = v13;
  if (v13)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return result;
}

uint64_t WebCore::AudioOutputUnitAdaptor::stop(PAL **this)
{
  return PAL::softLinkAudioToolboxAudioOutputUnitStop(*this, (OpaqueAudioComponentInstance *)PAL::softLinkAudioToolboxAudioOutputUnitStop);
}

uint64_t WebCore::AudioDestinationCocoa::render(WebCore::AudioDestinationCocoa *this, double a2, void *a3, int a4, AudioBufferList *a5)
{
  unint64_t v5;
  UInt32 v8;
  uint64_t mNumberBuffers;
  uint64_t v10;
  void **p_mData;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF **v17;
  void *v18;
  unsigned __int8 *v19;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _QWORD *v33;

  LODWORD(v5) = a4;
  v8 = *(_DWORD *)(*((_QWORD *)this + 4) + 28);
  if (v8 >= a5->mNumberBuffers)
    mNumberBuffers = a5->mNumberBuffers;
  else
    mNumberBuffers = v8;
  if ((_DWORD)mNumberBuffers)
  {
    v10 = 0;
    p_mData = &a5->mBuffers[0].mData;
    do
    {
      v12 = *((_DWORD *)p_mData - 1) >> 2;
      if (v12 >= v5)
        v13 = v5;
      else
        v13 = v12;
      v14 = *((_QWORD *)this + 4);
      if (*(_DWORD *)(v14 + 28) > v10)
      {
        v15 = *p_mData;
        v16 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8 * v10);
        v17 = *(WTF ***)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v17)
        {
          WTF::fastAlignedFree(*v17, a3);
          WTF::fastFree((WTF *)v17, v18);
        }
        *(_QWORD *)v16 = v15;
        *(_QWORD *)(v16 + 16) = v13;
        *(_BYTE *)(v16 + 24) = 0;
        *(_QWORD *)(v14 + 8) = v13;
      }
      p_mData += 2;
      ++v10;
    }
    while (mNumberBuffers != v10);
  }
  if (v5 >= 0x3000)
    v5 = 12288;
  else
    v5 = v5;
  v19 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C]((char *)this + 48);
LABEL_21:
  WebCore::PushPullFIFO::pull((_QWORD *)this + 7, *((_QWORD *)this + 4), v5);
  v22 = v21;
  v23 = __ldxr(v19);
  if (v23 == 1)
  {
    if (!__stlxr(0, v19))
      goto LABEL_26;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::AudioDestinationCocoa *)((char *)this + 48));
LABEL_26:
  WTF::MonotonicTime::fromMachAbsoluteTime((WTF::MonotonicTime *)a3);
  *((double *)this + 13) = a2;
  *((_QWORD *)this + 14) = v24;
  v25 = (unsigned __int8 *)this + 120;
  while (1)
  {
    v26 = *v25;
    if ((v26 & 1) != 0)
      break;
    v27 = __ldaxr(v25);
    if (v27 == v26)
    {
      if (!__stxr(v26 | 1, v25))
      {
        if (*((_QWORD *)this + 16))
        {
          (*(void (**)(WebCore::AudioDestinationCocoa *))(*(_QWORD *)this + 16))(this);
          v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v28 = &off_1E34076B8;
          v28[1] = this;
          v28[2] = v22;
          v33 = v28;
          (*(void (**)(_QWORD, _QWORD **))(**((_QWORD **)this + 16) + 16))(*((_QWORD *)this + 16), &v33);
          v29 = v33;
          v33 = 0;
          if (v29)
            (*(void (**)(_QWORD *))(*v29 + 8))(v29);
        }
        else
        {
          WebCore::AudioDestinationResampler::renderOnRenderingThreadIfPlaying((uint64_t)this, v22);
        }
        v30 = __ldxr(v25);
        if (v30 == 1)
        {
          if (!__stlxr(0, v25))
            break;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WebCore::AudioDestinationCocoa *)((char *)this + 120));
        break;
      }
    }
    else
    {
      __clrex();
    }
  }
  if ((v26 & 1) != 0)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::AudioDestinationCocoa::render(WebCore::AudioDestinationCocoa *this, double a2, void *a3, int a4, AudioBufferList *a5)
{
  unint64_t v5;
  UInt32 v8;
  uint64_t mNumberBuffers;
  uint64_t v10;
  void **p_mData;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  WTF **v17;
  void *v18;
  unsigned __int8 *v19;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  _QWORD *v33;

  LODWORD(v5) = a4;
  v8 = *(_DWORD *)(*((_QWORD *)this - 14) + 28);
  if (v8 >= a5->mNumberBuffers)
    mNumberBuffers = a5->mNumberBuffers;
  else
    mNumberBuffers = v8;
  if ((_DWORD)mNumberBuffers)
  {
    v10 = 0;
    p_mData = &a5->mBuffers[0].mData;
    do
    {
      v12 = *((_DWORD *)p_mData - 1) >> 2;
      if (v12 >= v5)
        v13 = v5;
      else
        v13 = v12;
      v14 = *((_QWORD *)this - 14);
      if (*(_DWORD *)(v14 + 28) > v10)
      {
        v15 = *p_mData;
        v16 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8 * v10);
        v17 = *(WTF ***)(v16 + 8);
        *(_QWORD *)(v16 + 8) = 0;
        if (v17)
        {
          WTF::fastAlignedFree(*v17, a3);
          WTF::fastFree((WTF *)v17, v18);
        }
        *(_QWORD *)v16 = v15;
        *(_QWORD *)(v16 + 16) = v13;
        *(_BYTE *)(v16 + 24) = 0;
        *(_QWORD *)(v14 + 8) = v13;
      }
      p_mData += 2;
      ++v10;
    }
    while (mNumberBuffers != v10);
  }
  if (v5 >= 0x3000)
    v5 = 12288;
  else
    v5 = v5;
  v19 = (unsigned __int8 *)this - 96;
  if (__ldaxr((unsigned __int8 *)this - 96))
  {
    __clrex();
  }
  else if (!__stxr(1u, v19))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C]((char *)this - 96);
LABEL_21:
  WebCore::PushPullFIFO::pull((_QWORD *)this - 11, *((_QWORD *)this - 14), v5);
  v22 = v21;
  v23 = __ldxr(v19);
  if (v23 == 1)
  {
    if (!__stlxr(0, v19))
      goto LABEL_26;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WebCore::AudioDestinationCocoa *)((char *)this - 96));
LABEL_26:
  WTF::MonotonicTime::fromMachAbsoluteTime((WTF::MonotonicTime *)a3);
  *((double *)this - 5) = a2;
  *((_QWORD *)this - 4) = v24;
  v25 = (unsigned __int8 *)this - 24;
  while (1)
  {
    v26 = *v25;
    if ((v26 & 1) != 0)
      break;
    v27 = __ldaxr(v25);
    if (v27 == v26)
    {
      if (!__stxr(v26 | 1, v25))
      {
        if (*((_QWORD *)this - 2))
        {
          (*(void (**)(char *))(*((_QWORD *)this - 18) + 16))((char *)this - 144);
          v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v28 = &off_1E34076B8;
          v28[1] = (char *)this - 144;
          v28[2] = v22;
          v33 = v28;
          (*(void (**)(_QWORD, _QWORD **))(**((_QWORD **)this - 2) + 16))(*((_QWORD *)this - 2), &v33);
          v29 = v33;
          v33 = 0;
          if (v29)
            (*(void (**)(_QWORD *))(*v29 + 8))(v29);
        }
        else
        {
          WebCore::AudioDestinationResampler::renderOnRenderingThreadIfPlaying((uint64_t)this - 144, v22);
        }
        v30 = __ldxr(v25);
        if (v30 == 1)
        {
          if (!__stlxr(0, v25))
            break;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WebCore::AudioDestinationCocoa *)((char *)this - 24));
        break;
      }
    }
    else
    {
      __clrex();
    }
  }
  if ((v26 & 1) != 0)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

_QWORD *WebCore::AudioFileReader::AudioFileReader(_QWORD *a1, WTF *a2, WTF *a3)
{
  PAL **v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  OpaqueAudioFileID **v10;
  void *v11;
  OpaqueExtAudioFile **v12;
  void *v14;

  *a1 = &off_1E34084F8;
  a1[1] = a2;
  a1[2] = a3;
  a1[3] = 0;
  v6 = (PAL **)(a1 + 3);
  a1[4] = 0;
  v7 = a1 + 4;
  a1[5] = 0;
  v8 = a1 + 5;
  v9 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v9 + 8) = 1;
  *(_QWORD *)v9 = off_1E335DEC0;
  *(_BYTE *)(v9 + 12) = 1;
  *(_QWORD *)(v9 + 16) = a1;
  a1[6] = v9;
  a1[7] = WTF::cryptographicallyRandomNumber<unsigned long long>();
  if ((unint64_t)a3 < 4
    || *(_BYTE *)a2 != 26
    || *((_BYTE *)a2 + 1) != 69
    || *((unsigned __int8 *)a2 + 2) != 223
    || *((unsigned __int8 *)a2 + 3) != 163
    || (WebCore::AudioFileReader::demuxWebMData((uint64_t)a1, a2, a3, (uint64_t *)&v14),
        v11 = v14,
        v14 = 0,
        std::unique_ptr<WebCore::AudioFileReaderWebMData>::reset[abi:sn180100](v8, v11),
        std::unique_ptr<WebCore::AudioFileReaderWebMData>::reset[abi:sn180100]((uint64_t *)&v14, 0),
        !a1[5]))
  {
    if (!PAL::softLinkAudioToolboxAudioFileOpenWithCallbacks((PAL *)a1, WebCore::AudioFileReader::readProc, 0, (int (*)(void *, uint64_t, unsigned int, const void *, unsigned int *))WebCore::AudioFileReader::getSizeProc, 0, 0, v6, v10)&& PAL::softLinkAudioToolboxExtAudioFileWrapAudioFileID(*v6, 0, v7, v12))
    {
      *v7 = 0;
    }
  }
  return a1;
}

void WebCore::AudioFileReader::demuxWebMData(uint64_t a1@<X0>, WTF *a2@<X1>, WTF *a3@<X2>, uint64_t *a4@<X8>)
{
  WebCore::SourceBufferParserWebM *v8;
  uint64_t v9;
  unsigned int *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  WebCore::SourceBufferParserWebM *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  WTF *v31;
  int v32;
  int v33;
  void *v34;
  WTF *v35;
  WTF *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  WTF *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52[2];
  __int128 v53;
  uint64_t v54;
  int v55;
  int v56;
  __int16 v57;
  unsigned int *v58;
  int v59;
  WTF *v60;
  uint64_t v61;
  unsigned int *v62;
  _BYTE v63[13];
  _BYTE v64[16];
  uint64_t v65;
  WebCore::SourceBufferParserWebM *v66;

  WebCore::SourceBufferParserWebM::create((uint64_t *)&v66);
  v8 = v66;
  if (v66)
  {
    v9 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v9 + 24;
    *(_QWORD *)(v9 + 16) = 1;
    *(_BYTE *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v9, a2, a3);
    v52[0] = v9;
    v10 = (unsigned int *)WTF::fastMalloc((WTF *)0x38);
    v65 = WebCore::SharedBuffer::SharedBuffer((uint64_t)v10, v52);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v52, v11);
    v64[0] = 0;
    v64[8] = 0;
    v62 = 0;
    *(_QWORD *)v63 = 0;
    *(_DWORD *)&v63[8] = 10000000;
    v63[12] = 1;
    v60 = 0;
    v61 = 0;
    WebCore::SourceBufferParserWebM::setLogger(v8, *(const WTF::Logger **)(a1 + 48), *(const void **)(a1 + 56));
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v12 = off_1E3408628;
    v12[1] = v63;
    v12[2] = v64;
    v12[3] = &v62;
    v13 = *((_QWORD *)v8 + 3);
    *((_QWORD *)v8 + 3) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = off_1E3408650;
    v14[1] = v64;
    v14[2] = &v60;
    v15 = *((_QWORD *)v8 + 4);
    *((_QWORD *)v8 + 4) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v16 = off_1E3408678;
    v17 = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 2) = v16;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v19 = off_1E34086A0;
    v19[1] = v64;
    v19[2] = &v62;
    v20 = *((_QWORD *)v8 + 11);
    *((_QWORD *)v8 + 11) = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    do
      v21 = __ldaxr(v10);
    while (__stlxr(v21 + 1, v10));
    v52[0] = 0;
    v58 = v10;
    v59 = 0;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v52, v18);
    v22 = v66;
    WebCore::SourceBufferParserWebM::appendData((uint64_t)v66, &v58, 0, &v57);
    v28 = 0;
    if (v62 && !HIBYTE(v57))
    {
      WebCore::SourceBufferParserWebM::flushPendingAudioSamples(v22, (uint64_t)v23, v24, v25, v26, v27);
      v29 = v65;
      v65 = 0;
      v30 = v62;
      *(_QWORD *)&v53 = *(_QWORD *)v63;
      *(_QWORD *)((char *)&v53 + 5) = *(_QWORD *)&v63[5];
      v31 = v60;
      v60 = 0;
      v32 = v61;
      v33 = HIDWORD(v61);
      v61 = 0;
      v62 = 0;
      v28 = WTF::fastMalloc((WTF *)0x30);
      v52[0] = 0;
      *(_QWORD *)v28 = v29;
      *(_QWORD *)(v28 + 8) = v30;
      *(_OWORD *)(v28 + 16) = v53;
      v54 = 0;
      *(_QWORD *)(v28 + 32) = v31;
      v55 = 0;
      *(_DWORD *)(v28 + 40) = v32;
      v56 = 0;
      *(_DWORD *)(v28 + 44) = v33;
      v52[1] = 0;
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v52, v34);
    }
    *a4 = v28;
    if (v59 != -1)
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v58, v23);
    if (HIDWORD(v61))
    {
      v35 = v60;
      v36 = (WTF *)((char *)v60 + 8 * HIDWORD(v61));
      do
      {
        v37 = *(unsigned int **)v35;
        *(_QWORD *)v35 = 0;
        if (v37)
        {
          v38 = v37 + 2;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            atomic_store(1u, v37 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
          }
        }
        v35 = (WTF *)((char *)v35 + 8);
      }
      while (v35 != v36);
    }
    v41 = v60;
    if (v60)
    {
      v60 = 0;
      LODWORD(v61) = 0;
      WTF::fastFree(v41, v23);
    }
    v42 = v62;
    v62 = 0;
    if (v42)
    {
      v43 = v42 + 2;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        atomic_store(1u, v42 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
      }
    }
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v65, v23);
    v46 = (uint64_t)v66;
    v66 = 0;
    if (v46)
    {
      v47 = (unsigned int *)(v46 + 8);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        atomic_store(1u, v47);
        v50 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v50 = off_1E32071E8;
        v50[1] = v47;
        v52[0] = (uint64_t)v50;
        WTF::ensureOnMainThread();
        v51 = v52[0];
        v52[0] = 0;
        if (v51)
          (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      }
    }
  }
  else
  {
    *a4 = 0;
  }
}

uint64_t WebCore::AudioFileReader::readProc(WebCore::AudioFileReader *this, char *a2, unsigned int a3, void *__dst, _DWORD *a5, unsigned int *a6)
{
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  size_t v10;

  v7 = *((_QWORD *)this + 2);
  v8 = v7 > (unint64_t)a2;
  v9 = v7 - (_QWORD)a2;
  if (v8)
  {
    if (v9 >= a3)
      v10 = a3;
    else
      v10 = v9;
    memcpy(__dst, &a2[*((_QWORD *)this + 1)], v10);
    if (a5)
      goto LABEL_9;
  }
  else
  {
    LODWORD(v10) = 0;
    if (a5)
LABEL_9:
      *a5 = v10;
  }
  return 0;
}

uint64_t WebCore::AudioFileReader::getSizeProc(WebCore::AudioFileReader *this, void *a2)
{
  return *((_QWORD *)this + 2);
}

void WebCore::AudioFileReader::~AudioFileReader(WebCore::AudioFileReader *this, OpaqueExtAudioFile *a2)
{
  PAL *v3;
  PAL *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34084F8;
  v3 = (PAL *)*((_QWORD *)this + 4);
  if (v3)
    PAL::softLinkAudioToolboxExtAudioFileDispose(v3, a2);
  *((_QWORD *)this + 4) = 0;
  v4 = (PAL *)*((_QWORD *)this + 3);
  if (v4)
    PAL::softLinkAudioToolboxAudioFileClose(v4, a2);
  *((_QWORD *)this + 3) = 0;
  v5 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  std::unique_ptr<WebCore::AudioFileReaderWebMData>::reset[abi:sn180100]((uint64_t *)this + 5, 0);
}

{
  PAL *v3;
  PAL *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)this = &off_1E34084F8;
  v3 = (PAL *)*((_QWORD *)this + 4);
  if (v3)
    PAL::softLinkAudioToolboxExtAudioFileDispose(v3, a2);
  *((_QWORD *)this + 4) = 0;
  v4 = (PAL *)*((_QWORD *)this + 3);
  if (v4)
    PAL::softLinkAudioToolboxAudioFileClose(v4, a2);
  *((_QWORD *)this + 3) = 0;
  v5 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    v6 = v5 + 2;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v5 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  std::unique_ptr<WebCore::AudioFileReaderWebMData>::reset[abi:sn180100]((uint64_t *)this + 5, 0);
  JUMPOUT(0x19AEA7644);
}

void WebCore::AudioFileReader::getPacketDescriptions(WebCore::AudioFileReader *this, opaqueCMSampleBuffer *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  NSObject *v7;
  const char *v8;
  unint64_t mStartOffset;
  WTF *v10;
  unint64_t *v11;
  opaqueCMSampleBuffer *v12;
  NSObject *v13;
  void *v14;
  const char *v15;
  unint64_t v16;
  uint8_t v17[8];
  AudioStreamPacketDescription v18;

  v18.mStartOffset = 0;
  if (PAL::softLinkCoreMediaCMSampleBufferGetAudioStreamPacketDescriptions(a2, 0, 0, &v18, a5))
  {
    v7 = qword_1ECE7CD10;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v17 = 0;
      v8 = "Unable to get packet description list size";
LABEL_7:
      _os_log_fault_impl(&dword_1940B8000, v7, OS_LOG_TYPE_FAULT, v8, v17, 2u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  mStartOffset = v18.mStartOffset;
  if (v18.mStartOffset > 0xFuLL)
  {
    if (HIDWORD(v18.mStartOffset))
    {
      __break(0xC471u);
      return;
    }
    v10 = (WTF *)WTF::fastMalloc((WTF *)(v18.mStartOffset & 0xFFFFFFFFFFFFFFF0));
    if (PAL::softLinkCoreMediaCMSampleBufferGetAudioStreamPacketDescriptions(a2, (opaqueCMSampleBuffer *)v18.mStartOffset, (unint64_t)v10, 0, v11))
    {
      v13 = qword_1ECE7CD10;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
      {
LABEL_19:
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        WTF::fastFree(v10, v14);
        return;
      }
      *(_WORD *)v17 = 0;
      v15 = "Unable to get packet description list";
    }
    else
    {
      v16 = mStartOffset >> 4;
      if (mStartOffset >> 4 == PAL::softLinkCoreMediaCMSampleBufferGetNumSamples(a2, v12))
      {
        *(_QWORD *)this = v10;
        *((_DWORD *)this + 2) = v16;
        *((_DWORD *)this + 3) = v16;
        return;
      }
      v13 = qword_1ECE7CD10;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
        goto LABEL_19;
      *(_WORD *)v17 = 0;
      v15 = "Unhandled CMSampleBuffer structure";
    }
    _os_log_fault_impl(&dword_1940B8000, v13, OS_LOG_TYPE_FAULT, v15, v17, 2u);
    goto LABEL_19;
  }
  v7 = qword_1ECE7CD10;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v17 = 0;
    v8 = "No packet description found.";
    goto LABEL_7;
  }
LABEL_8:
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

uint64_t WebCore::AudioFileReader::logger(WebCore::AudioFileReader *this)
{
  return *((_QWORD *)this + 6);
}

char *WebCore::AudioFileReader::logChannel(WebCore::AudioFileReader *this)
{
  return &WebCore::LogMedia;
}

const char *WebCore::AudioFileReader::logClassName(WebCore::AudioFileReader *this)
{
  return "AudioFileReaderCocoa";
}

uint64_t WebCore::AudioFileReader::logIdentifier(WebCore::AudioFileReader *this)
{
  return *((_QWORD *)this + 7);
}

void WebCore::passthroughInputDataCallback(WebCore *this, OpaqueAudioConverter *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  uint64_t v6;
  AudioStreamPacketDescription *v7;
  unsigned int mDataByteSize;
  uint64_t v9;
  uint64_t v10;
  AudioStreamPacketDescription *v11;
  char *v12;
  NSObject *v13;
  uint8_t v14[16];

  if (a2 && a3 && a5)
  {
    v6 = *((unsigned int *)a5 + 8);
    v7 = a5[3];
    mDataByteSize = v7->mDataByteSize;
    if (mDataByteSize == (_DWORD)v6)
    {
      *(_DWORD *)a2 = 0;
    }
    else if (mDataByteSize <= v6)
    {
      *(_DWORD *)a2 = 0;
    }
    else
    {
      if (a4)
      {
        *(_OWORD *)(a5 + 5) = *(_OWORD *)(v7->mStartOffset + 16 * v6);
        a5[5] = 0;
        *(_QWORD *)&a4->mNumberBuffers = a5 + 5;
        v7 = a5[3];
        mDataByteSize = v7->mDataByteSize;
      }
      a3[2] = *(_DWORD *)a5;
      if (mDataByteSize <= v6)
      {
        __break(0xC471u);
      }
      else
      {
        v9 = v7->mStartOffset + 16 * v6;
        v10 = *(unsigned int *)(v9 + 12);
        a3[3] = v10;
        v11 = a5[1];
        v12 = (char *)v11 + *(_QWORD *)v9;
        *((_QWORD *)a3 + 2) = v12;
        if (&v12[v10] <= (char *)v11 + *((unsigned int *)a5 + 1))
        {
          *(_DWORD *)a2 = 1;
          ++*((_DWORD *)a5 + 8);
        }
        else
        {
          v13 = qword_1ECE7CD10;
          if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)v14 = 0;
            _os_log_fault_impl(&dword_1940B8000, v13, OS_LOG_TYPE_FAULT, "Nonsensical data structure, aborting", v14, 2u);
          }
        }
      }
    }
  }
}

void WebCore::AudioFileReader::createBus(WebCore::AudioFileReader *this@<X0>, float a2@<S0>, opaqueCMSampleBuffer *a3@<X1>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  opaqueCMSampleBuffer *v14;
  PAL *FormatDescription;
  const opaqueCMFormatDescription *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  void *v22;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  PAL *v28;
  int Property;
  BOOL v30;
  NSObject *v31;
  uint64_t v32;
  PAL *v33;
  const opaqueCMFormatDescription *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  NSObject *v38;
  const char *v39;
  double mSampleRate;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  void *v46;
  OpaqueAudioConverter **v47;
  const void *v48;
  unsigned int *v49;
  unsigned int v50;
  int v51;
  void *v52;
  void *v53;
  void *v54;
  NSObject *v55;
  void *v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  void **v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  opaqueCMSampleBuffer *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  NSObject *v73;
  AudioBufferList *v74;
  uint64_t v75;
  PAL *v76;
  unint64_t *v77;
  uint64_t MagicCookie;
  const void *v79;
  BOOL v80;
  int v81;
  const void *v82;
  const void *v83;
  WTF::MediaTime *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  int v92;
  NSObject *v93;
  OpaqueAudioConverter *v94;
  unint64_t v95;
  uint64_t v96;
  unsigned __int8 v97;
  NSObject *v98;
  int v99;
  unsigned int v100;
  int8x16_t *v101;
  int32x2_t v102;
  int64x2_t v103;
  int8x16_t v104;
  WTF::MediaTime *v105;
  double v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  int8x16_t *v111;
  int32x2_t v112;
  int64x2_t v113;
  int8x16_t v114;
  uint64_t v115;
  _OWORD *v116;
  __int128 v117;
  uint64_t v118;
  void *v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  WTF::String *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t mFramesPerPacket;
  uint64_t v144;
  uint64_t v145;
  WTF::StringImpl *v146;
  WTF::StringImpl *v147;
  WTF::StringImpl *v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150;
  WTF *v151;
  uint64_t v152;
  WTF::StringImpl **v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  WTF::StringImpl *v158;
  WTF::StringImpl *v159;
  WTF::StringImpl *v160;
  WTF::StringImpl *v161;
  int v162;
  WTF::StringImpl *v163;
  uint64_t v164;
  unint64_t v165;
  PAL *v166;
  const __CFAllocator *v167;
  unint64_t v168;
  const __CFAllocator *v169;
  OpaqueCMBlockBuffer *v170;
  int DataLength;
  char **v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t *v175;
  uint64_t v176;
  uint8_t *v177;
  NSObject *v178;
  const char *v179;
  uint64_t v180;
  int v181;
  AudioStreamPacketDescription *v182;
  uint64_t v183;
  unint64_t v184;
  NSObject *v185;
  const __CFAllocator *v186;
  int v187;
  uint64_t *v188;
  _QWORD *v189;
  uint64_t v190;
  int v191;
  BOOL v192;
  int v193;
  uint64_t v194;
  unint64_t v195;
  void **v196;
  char *v197;
  int v198;
  NSObject *v199;
  uint64_t v201;
  WTF *v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  float *v207;
  float *v208;
  float *v209;
  float v210;
  float v211;
  float v212;
  void *v213;
  void *v214;
  unsigned int v215;
  unsigned int v216;
  OpaqueCMBlockBuffer **v217;
  int v218;
  int v219;
  int v220;
  unsigned int *v221;
  uint64_t v222;
  unint64_t v223;
  WTF::String *v224[2];
  WTF::String *v225;
  uint64_t v226;
  int v227;
  unsigned int v228;
  WTF::String *v229;
  void *v230;
  WTF::String *v231;
  AudioStreamBasicDescription v232;
  __int128 v233;
  __int128 v234;
  uint64_t v235;
  char v236;
  uint8_t v237[16];
  const char *v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  AudioStreamBasicDescription v243;
  WTF::StringImpl *v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  WTF::StringImpl *v247;
  WTF::StringImpl *v248;
  WTF::StringImpl *v249;
  WTF::StringImpl *v250;
  uint64_t v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  uint8_t v254[8];
  uint8_t v255[8];
  uint8_t buf[16];
  __int128 v257;
  uint64_t v258;
  WTF::StringImpl *v259;
  uint64_t v260;
  WTF::StringImpl *v261;
  int v262;
  WTF::StringImpl *v263;
  int v264;
  WTF::StringImpl *v265;
  int v266;
  WTF::StringImpl *v267;
  uint64_t v268;

  v5 = (int)a3;
  v268 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v233 = 0;
  v9 = *((_QWORD *)this + 5);
  if (v9)
  {
    v10 = *(unsigned int *)(v9 + 44);
    if (!(_DWORD)v10)
    {
      v38 = qword_1ECE7CD10;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        v39 = "No sample demuxed from webm container";
        goto LABEL_39;
      }
      goto LABEL_44;
    }
    v11 = 0;
    v12 = *(_QWORD *)(v9 + 32);
    v13 = v12 + 8 * v10;
    while (1)
    {
      v14 = *(opaqueCMSampleBuffer **)(*(_QWORD *)v12 + 16);
      if (!v14)
      {
        v38 = qword_1ECE7CD10;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          v39 = "Impossible memory corruption encountered";
          goto LABEL_39;
        }
        goto LABEL_44;
      }
      FormatDescription = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(*(PAL **)(*(_QWORD *)v12 + 16), a3);
      if (!FormatDescription)
        break;
      v17 = PAL::softLinkCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription[0](FormatDescription, v16);
      if (!v17)
      {
        v38 = qword_1ECE7CD10;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          v39 = "Unable to retrieve asbd from format description";
LABEL_39:
          _os_log_fault_impl(&dword_1940B8000, v38, OS_LOG_TYPE_FAULT, v39, buf, 2u);
        }
        goto LABEL_44;
      }
      v21 = v17;
      WebCore::AudioFileReader::getPacketDescriptions((WebCore::AudioFileReader *)buf, v14, v18, v19, v20);
      v23 = *(_DWORD *)&buf[12];
      if (*(_DWORD *)&buf[12])
      {
        v24 = 16 * *(unsigned int *)&buf[12];
        v25 = (unsigned int *)(*(_QWORD *)buf + 8);
        do
        {
          v27 = *v25;
          v25 += 4;
          v26 = v27;
          if (!v27)
            v26 = *(unsigned int *)(v21 + 20);
          v11 += v26;
          v24 -= 16;
        }
        while (v24);
      }
      if (*(_QWORD *)buf)
        WTF::fastFree(*(WTF **)buf, a3);
      if (!v23)
        goto LABEL_44;
      v12 += 8;
      if (v12 == v13)
        goto LABEL_26;
    }
    v38 = qword_1ECE7CD10;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      v39 = "Unable to retrieve format descriptiong from sample";
      goto LABEL_39;
    }
LABEL_44:
    *a5 = 0;
    return;
  }
  v28 = (PAL *)*((_QWORD *)this + 4);
  if (!v28)
    goto LABEL_44;
  *(_DWORD *)buf = 8;
  Property = PAL::softLinkAudioToolboxExtAudioFileGetProperty(v28, (OpaqueExtAudioFile *)0x2366726D, buf, (unsigned int *)&v233, a4);
  v11 = v233;
  if (Property)
    v30 = 1;
  else
    v30 = (uint64_t)v233 <= 0;
  if (v30)
  {
    v31 = qword_1ECE7CD10;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
    {
      LOWORD(v232.mSampleRate) = 0;
      _os_log_fault_impl(&dword_1940B8000, v31, OS_LOG_TYPE_FAULT, "Unable to retrieve number of frames in content (unsupported?", (uint8_t *)&v232, 2u);
    }
    v11 = -1;
  }
LABEL_26:
  if (v11 <= 0)
    goto LABEL_44;
  v32 = *((_QWORD *)this + 5);
  if (v32)
  {
    if (!*(_DWORD *)(v32 + 44))
      goto LABEL_44;
    v33 = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(*(PAL **)(**(_QWORD **)(v32 + 32) + 16), a3);
    if (!v33)
      goto LABEL_44;
    v35 = PAL::softLinkCoreMediaCMAudioFormatDescriptionGetStreamBasicDescription[0](v33, v34);
    v36 = *(_QWORD *)(v35 + 32);
    v37 = *(_OWORD *)(v35 + 16);
    v233 = *(_OWORD *)v35;
    v234 = v37;
  }
  else
  {
    LODWORD(v232.mSampleRate) = 40;
    if (PAL::softLinkAudioToolboxExtAudioFileGetProperty(*((PAL **)this + 4), (OpaqueExtAudioFile *)0x66666D74, &v232, (unsigned int *)buf, v22))goto LABEL_44;
    v233 = *(_OWORD *)buf;
    v234 = v257;
    v36 = v258;
  }
  v235 = v36;
  v236 = 1;
  if (DWORD2(v233) == 1633771875 || DWORD2(v233) == 1096107074)
    goto LABEL_44;
  *(_QWORD *)&v232.mSampleRate = v233;
  v232.mChannelsPerFrame = HIDWORD(v234);
  v232.mReserved = HIDWORD(v235);
  v232.mBytesPerFrame = 4;
  *(_OWORD *)&v232.mFormatID = xmmword_19689B100;
  v232.mBitsPerChannel = 32;
  if (a2 == 0.0)
  {
    mSampleRate = v232.mSampleRate;
  }
  else
  {
    mSampleRate = a2;
    v232.mSampleRate = a2;
  }
  v41 = HIDWORD(v234);
  v42 = (uint64_t)(mSampleRate / *(double *)&v233 * (double)v11);
  if (v5)
    v43 = 1;
  else
    v43 = HIDWORD(v234);
  if (v43 <= 0x20)
  {
    v44 = WTF::fastMalloc((WTF *)0x38);
    WebCore::AudioBus::AudioBus((WebCore::AudioBus *)v44, (void *)v43, v42, 1);
    mSampleRate = v232.mSampleRate;
  }
  else
  {
    v44 = 0;
  }
  v45 = mSampleRate;
  *(float *)(v44 + 52) = v45;
  if ((unint64_t)(v41 - 1) > 0xFFFFFFFFFFFFFFELL
    || (WTF::tryFastCalloc((WTF *)1), (v49 = *(unsigned int **)buf) == 0))
  {
    v55 = qword_1ECE7CD10;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v41;
      _os_log_fault_impl(&dword_1940B8000, v55, OS_LOG_TYPE_FAULT, "tryCreateAudioBufferList(%ld) returned null", buf, 0xCu);
    }
    *a5 = 0;
    goto LABEL_331;
  }
  **(_DWORD **)buf = v41;
  v50 = 4 * v42;
  if ((_DWORD)v41 == 2)
    v51 = v5;
  else
    v51 = 0;
  v231 = (WTF::String *)v42;
  if (v51 == 1)
  {
    if (v42)
    {
      if (v42 >> 62)
      {
        __break(0xC471u);
        JUMPOUT(0x196120690);
      }
      WTF::fastAlignedFree(0, v46);
      v52 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
      bzero(v52, 4 * v42);
      WTF::fastAlignedFree(0, v53);
      v54 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
      bzero(v54, 4 * v42);
    }
    else
    {
      v52 = 0;
      v54 = 0;
    }
    v49[2] = 1;
    v49[3] = v50;
    *((_QWORD *)v49 + 2) = v52;
    v49[6] = 1;
    v49[7] = v50;
    *((_QWORD *)v49 + 4) = v54;
  }
  else
  {
    if ((_DWORD)v41 != 1 && (v5 & 1) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196120654);
    }
    if ((_DWORD)v41)
    {
      v57 = v51;
      v58 = 0;
      v59 = *(_DWORD *)(v44 + 28);
      v60 = v49 + 4;
      do
      {
        if (v59 <= v58)
        {
          __break(0xC471u);
          JUMPOUT(0x196120680);
        }
        v61 = *(_QWORD *)(*(_QWORD *)(v44 + 16) + 8 * v58);
        if (!*(_BYTE *)(v61 + 24))
        {
          *(_BYTE *)(v61 + 24) = 1;
          v62 = *(void ***)(v61 + 8);
          v63 = (_QWORD *)(v61 + 16);
          if (v62)
            v63 = v62 + 1;
          else
            v62 = (void **)v61;
          bzero(*v62, 4 * *v63);
          v59 = *(_DWORD *)(v44 + 28);
        }
        *((_DWORD *)v60 - 2) = 1;
        *((_DWORD *)v60 - 1) = v50;
        if (v59 <= v58)
        {
          __break(0xC471u);
          JUMPOUT(0x196120688);
        }
        v64 = *(uint64_t **)(*(_QWORD *)(v44 + 16) + 8 * v58);
        *((_BYTE *)v64 + 24) = 0;
        v65 = *v64;
        if (!*v64)
          v65 = *(_QWORD *)v64[1];
        *v60 = v65;
        v60 += 2;
        ++v58;
      }
      while (v41 != v58);
      v54 = 0;
      v52 = 0;
      v51 = v57;
      v42 = (unint64_t)v231;
    }
    else
    {
      v54 = 0;
      v52 = 0;
    }
  }
  v66 = *v49;
  if ((_DWORD)v66)
  {
    if (!*((_QWORD *)v49 + 2))
    {
LABEL_96:
      v73 = qword_1ECE7CD10;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1940B8000, v73, OS_LOG_TYPE_FAULT, "Generated buffer in AudioFileReader::createBus() did not pass validation", buf, 2u);
      }
      goto LABEL_99;
    }
    v67 = (unint64_t)&v49[4 * v66 + 2];
    v68 = v49 + 6;
    if ((unint64_t)(v49 + 6) < v67)
    {
      while (*((_QWORD *)v68 + 1) && v49[3] == v68[1])
      {
        v68 += 4;
        if ((unint64_t)v68 >= v67)
          goto LABEL_91;
      }
      goto LABEL_96;
    }
  }
LABEL_91:
  if (!*((_QWORD *)this + 5))
  {
    if (PAL::softLinkAudioToolboxExtAudioFileSetProperty(*((PAL **)this + 4), (OpaqueExtAudioFile *)0x63666D74, 0x28u, &v232, v48))
    {
LABEL_99:
      *a5 = 0;
      goto LABEL_330;
    }
    v87 = 0;
    if ((_DWORD)v41)
    {
      while (1)
      {
        v88 = v42 >= 0xFFFFFFFF ? -1 : v42;
        *(_DWORD *)buf = v88;
        if (PAL::softLinkAudioToolboxExtAudioFileRead(*((PAL **)this + 4), (OpaqueExtAudioFile *)buf, v49, v74))break;
        v89 = *(unsigned int *)buf;
        v87 += *(unsigned int *)buf;
        if ((unint64_t)v231 < v87)
          goto LABEL_334;
        v90 = v49 + 4;
        v91 = v41;
        do
        {
          *((_DWORD *)v90 - 1) = 4 * ((_DWORD)v231 - v87);
          v92 = *(_DWORD *)buf;
          *v90 += 4 * *(unsigned int *)buf;
          v90 += 2;
          --v91;
        }
        while (v91);
        v42 -= v89;
        if (!v92)
          goto LABEL_315;
      }
LABEL_134:
      *a5 = 0;
      goto LABEL_330;
    }
    do
    {
      if (v42 >= 0xFFFFFFFF)
        v99 = -1;
      else
        v99 = v42;
      *(_DWORD *)buf = v99;
      if (PAL::softLinkAudioToolboxExtAudioFileRead(*((PAL **)this + 4), (OpaqueExtAudioFile *)buf, v49, v74))goto LABEL_134;
      v87 += *(unsigned int *)buf;
      if (v87 > (unint64_t)v231)
      {
LABEL_334:
        WTFCrashWithInfoImpl(624, "/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/platform/audio/cocoa/AudioFileReaderCocoa.cpp", "RefPtr<AudioBus> WebCore::AudioFileReader::createBus(float, BOOL)");
        goto LABEL_352;
      }
      v42 -= *(unsigned int *)buf;
    }
    while (*(_DWORD *)buf);
LABEL_315:
    v203 = *(_QWORD *)(v44 + 8);
    if (v203 < v87)
    {
      __break(0xC471u);
      JUMPOUT(0x196120678);
    }
    if (v203 != v87)
    {
      v204 = *(unsigned int *)(v44 + 28);
      if ((_DWORD)v204)
      {
        v205 = *(_QWORD *)(v44 + 16);
        while (*(_QWORD *)(*(_QWORD *)v205 + 16) >= v87)
        {
          *(_QWORD *)(*(_QWORD *)v205 + 16) = v87;
          v205 += 8;
          if (!--v204)
            goto LABEL_321;
        }
        goto LABEL_352;
      }
LABEL_321:
      *(_QWORD *)(v44 + 8) = v87;
    }
    if (v51)
    {
      if (!*(_DWORD *)(v44 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1961206A0);
      }
      v206 = **(_QWORD **)(v44 + 16);
      *(_BYTE *)(v206 + 24) = 0;
      v207 = *(float **)v206;
      if (!*(_QWORD *)v206)
        v207 = **(float ***)(v206 + 8);
      if (v87)
      {
        v208 = (float *)v52;
        v209 = (float *)v54;
        do
        {
          v210 = *v208++;
          v211 = v210;
          v212 = *v209++;
          *v207++ = (float)(v211 + v212) * 0.5;
          --v87;
        }
        while (v87);
      }
    }
    *a5 = v44;
    v44 = 0;
    goto LABEL_330;
  }
  v243.mSampleRate = 0.0;
  if (PAL::softLinkAudioToolboxAudioConverterNew((PAL *)&v233, &v232, &v243, v47))
  {
    v70 = v52;
    v71 = qword_1ECE7CD10;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1940B8000, v71, OS_LOG_TYPE_FAULT, "Unable to create decoder", buf, 2u);
    }
    goto LABEL_95;
  }
  v75 = *((_QWORD *)this + 5);
  if (!*(_DWORD *)(v75 + 44))
  {
    __break(0xC471u);
    JUMPOUT(0x196120698);
  }
  v76 = (PAL *)PAL::softLinkCoreMediaCMSampleBufferGetFormatDescription(*(PAL **)(**(_QWORD **)(v75 + 32) + 16), v69);
  v70 = v52;
  if (!v76)
  {
    v98 = qword_1ECE7CD10;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1940B8000, v98, OS_LOG_TYPE_FAULT, "Unable to retrieve format description from first sample", buf, 2u);
    }
    v97 = 0;
    v96 = 0;
    v95 = 0;
    goto LABEL_313;
  }
  v242 = 0;
  MagicCookie = PAL::softLinkCoreMediaCMAudioFormatDescriptionGetMagicCookie(v76, (const opaqueCMFormatDescription *)&v242, v77);
  if (MagicCookie)
    v80 = v242 == 0;
  else
    v80 = 1;
  if (!v80)
    PAL::softLinkAudioToolboxAudioConverterSetProperty(*(PAL **)&v243.mSampleRate, (OpaqueAudioConverter *)0x646D6763, v242, MagicCookie, v79);
  v81 = HIDWORD(v234);
  if ((unint64_t)HIDWORD(v234) - 1 > 0xFFFFFFFFFFFFFFELL || (WTF::tryFastCalloc((WTF *)1), !*(_QWORD *)buf))
  {
    v93 = qword_1ECE7CD10;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1940B8000, v93, OS_LOG_TYPE_FAULT, "Unable to create decoder", buf, 2u);
    }
    v95 = 0;
    v96 = 0;
    v97 = 0;
    goto LABEL_313;
  }
  v221 = *(unsigned int **)buf;
  **(_DWORD **)buf = v81;
  v241 = 0;
  PAL::softLinkAudioToolboxAudioConverterSetProperty(*(PAL **)&v243.mSampleRate, (OpaqueAudioConverter *)0x7072696D, 8u, &v241, v82);
  v240 = 2;
  v84 = (WTF::MediaTime *)PAL::softLinkAudioToolboxAudioConverterSetProperty(*(PAL **)&v243.mSampleRate, (OpaqueAudioConverter *)0x70726D6D, 4u, &v240, v83);
  v85 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*(_BYTE *)(v85 + 328))
    v86 = *(_QWORD *)(v85 + 320);
  else
    v86 = 0;
  v100 = *(unsigned __int8 *)(v85 + 328) == 0;
  v101 = (int8x16_t *)WTF::MediaTime::zeroTime(v84);
  v102 = vdup_n_s32(v100);
  v103.i64[0] = v102.u32[0];
  v103.i64[1] = v102.u32[1];
  v104 = (int8x16_t)vdupq_n_s64(0x13B9ACA00uLL);
  v226 = v104.i64[1];
  v104.i64[0] = v86;
  *(int8x16_t *)buf = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v103, 0x3FuLL)), *v101, v104);
  v105 = (WTF::MediaTime *)WTF::MediaTime::toDouble((WTF::MediaTime *)buf);
  v107 = v106 * v232.mSampleRate;
  v108 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (*(_BYTE *)(v108 + 328))
    v109 = *(_QWORD *)(v108 + 320);
  else
    v109 = 0;
  v228 = v107;
  v110 = *(unsigned __int8 *)(v108 + 328) == 0;
  v111 = (int8x16_t *)WTF::MediaTime::zeroTime(v105);
  v112 = vdup_n_s32(v110);
  v113.i64[0] = v112.u32[0];
  v113.i64[1] = v112.u32[1];
  v114.i64[1] = v226;
  v114.i64[0] = v109;
  *(int8x16_t *)v237 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v113, 0x3FuLL)), *v111, v114);
  v115 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if ((*(_BYTE *)(v115 + 1196) & 1) == 0
    || (v116 = (_OWORD *)(v115 + 1184),
        *(_QWORD *)buf = 0,
        *(_DWORD *)&buf[8] = 10000000,
        buf[12] = 1,
        v111 = (int8x16_t *)WTF::MediaTime::compare((WTF::MediaTime *)(v115 + 1184), (const WTF::MediaTime *)buf),
        (_DWORD)v111 == -1))
  {
    v117 = *(_OWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v111);
  }
  else
  {
    *(_OWORD *)v224 = *v116;
    WTF::MediaTime::zeroTime((WTF::MediaTime *)v111);
    v117 = *(_OWORD *)v224;
  }
  *(_OWORD *)&v243.mFormatID = v117;
  *(_QWORD *)buf = WTF::MediaTime::operator+();
  *(_QWORD *)&buf[8] = v118;
  WTF::MediaTime::toDouble((WTF::MediaTime *)buf);
  v225 = (WTF::String *)(0.5 - ((double)v228 - v120 * v232.mSampleRate));
  v121 = *((_QWORD *)this + 6);
  v122 = *((_QWORD *)this + 7);
  *(_QWORD *)v237 = "AudioFileReaderCocoa";
  *(_QWORD *)&v237[8] = 21;
  v238 = "decodeWebMData";
  v239 = v122;
  v229 = (WTF::String *)v54;
  v230 = v70;
  v227 = v51;
  if (*(_BYTE *)(v121 + 12) && WebCore::LogMedia && byte_1ECE7C490 >= 3u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v237);
    WTF::String::String((WTF::String *)&v248, "Will drop ");
    WTF::String::number((WTF::String *)v228);
    WTF::String::String((WTF::String *)&v246, " leading and ");
    WTF::String::number(v225);
    WTF::String::String((WTF::String *)&v244, " trailing frames out of ");
    WTF::String::number((WTF::String *)v42);
    *(_QWORD *)buf = v249;
    *(_QWORD *)&v243.mFormatID = v248;
    *(_QWORD *)v255 = v247;
    v253 = v245;
    *(_QWORD *)v254 = v246;
    v251 = *(_QWORD *)&v243.mBitsPerChannel;
    v252 = v244;
    WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)&v243.mFormatID, (uint64_t *)v255, (uint64_t *)v254, (uint64_t *)&v253, (uint64_t *)&v252, &v251, &v250);
    if (v250)
    {
      v124 = *(WTF::StringImpl **)&v243.mBitsPerChannel;
      *(_QWORD *)&v243.mBitsPerChannel = 0;
      if (v124)
      {
        if (*(_DWORD *)v124 == 2)
          WTF::StringImpl::destroy(v124, v123);
        else
          *(_DWORD *)v124 -= 2;
      }
      v125 = v244;
      v244 = 0;
      if (v125)
      {
        if (*(_DWORD *)v125 == 2)
          WTF::StringImpl::destroy(v125, v123);
        else
          *(_DWORD *)v125 -= 2;
      }
      v126 = v245;
      v245 = 0;
      if (v126)
      {
        if (*(_DWORD *)v126 == 2)
          WTF::StringImpl::destroy(v126, v123);
        else
          *(_DWORD *)v126 -= 2;
      }
      v127 = v246;
      v246 = 0;
      if (v127)
      {
        if (*(_DWORD *)v127 == 2)
          WTF::StringImpl::destroy(v127, v123);
        else
          *(_DWORD *)v127 -= 2;
      }
      v128 = v247;
      v247 = 0;
      if (v128)
      {
        if (*(_DWORD *)v128 == 2)
          WTF::StringImpl::destroy(v128, v123);
        else
          *(_DWORD *)v128 -= 2;
      }
      v129 = v248;
      v248 = 0;
      if (v129)
      {
        if (*(_DWORD *)v129 == 2)
          WTF::StringImpl::destroy(v129, v123);
        else
          *(_DWORD *)v129 -= 2;
      }
      v130 = v249;
      v249 = 0;
      if (v130)
      {
        if (*(_DWORD *)v130 == 2)
          WTF::StringImpl::destroy(v130, v123);
        else
          *(_DWORD *)v130 -= 2;
      }
      v131 = qword_1ECE7C4A0;
      v132 = os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v132)
      {
        WTF::String::utf8();
        v133 = *(_QWORD *)&v243.mFormatID ? *(_QWORD *)&v243.mFormatID + 16 : 0;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v133;
        _os_log_impl(&dword_1940B8000, v131, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v132 = *(_QWORD *)&v243.mFormatID;
        *(_QWORD *)&v243.mFormatID = 0;
        if (v132)
        {
          if (*(_DWORD *)v132 == 1)
            v132 = WTF::fastFree((WTF *)v132, v119);
          else
            --*(_DWORD *)v132;
        }
      }
      if (WebCore::LogMedia && byte_1ECE7C490 >= 3u)
      {
        v134 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v135 = *v134;
          if ((v135 & 1) != 0)
            break;
          v136 = __ldaxr(v134);
          if (v136 == v135)
          {
            if (!__stxr(v135 | 1, v134))
            {
              v137 = WTF::Logger::observers((WTF::Logger *)v132);
              v138 = *(unsigned int *)(v137 + 12);
              v139 = v231;
              if ((_DWORD)v138)
              {
                v140 = *(uint64_t **)v137;
                v222 = *(_QWORD *)v137 + 8 * v138;
                do
                {
                  v141 = *v140;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v237);
                  LODWORD(v257) = 0;
                  WTF::String::String((WTF::String *)((char *)&v257 + 8), "Will drop ");
                  LODWORD(v258) = 0;
                  WTF::String::number((WTF::String *)v228);
                  LODWORD(v260) = 0;
                  WTF::String::String((WTF::String *)&v261, " leading and ");
                  v262 = 0;
                  WTF::String::number(v225);
                  v264 = 0;
                  WTF::String::String((WTF::String *)&v265, " trailing frames out of ");
                  v266 = 0;
                  WTF::String::number(v139);
                  *(_QWORD *)&v243.mFormatID = 0;
                  *(_QWORD *)&v243.mBytesPerPacket = 0;
                  v142 = WTF::fastMalloc((WTF *)0x70);
                  v243.mBytesPerPacket = 7;
                  *(_QWORD *)&v243.mFormatID = v142;
                  mFramesPerPacket = v243.mFramesPerPacket;
                  *(_DWORD *)(v142 + 16 * v243.mFramesPerPacket) = *(_DWORD *)buf;
                  v144 = *(_QWORD *)&buf[8];
                  if (*(_QWORD *)&buf[8])
                    **(_DWORD **)&buf[8] += 2;
                  *(_QWORD *)(v142 + 16 * mFramesPerPacket + 8) = v144;
                  *(_DWORD *)(v142 + 16 * (mFramesPerPacket + 1)) = v257;
                  v145 = *((_QWORD *)&v257 + 1);
                  if (*((_QWORD *)&v257 + 1))
                    **((_DWORD **)&v257 + 1) += 2;
                  *(_QWORD *)(v142 + 16 * (mFramesPerPacket + 1) + 8) = v145;
                  *(_DWORD *)(v142 + 16 * (mFramesPerPacket + 2)) = v258;
                  v146 = v259;
                  if (v259)
                    *(_DWORD *)v259 += 2;
                  *(_QWORD *)(v142 + 16 * (mFramesPerPacket + 2) + 8) = v146;
                  *(_DWORD *)(v142 + 16 * (mFramesPerPacket + 3)) = v260;
                  v147 = v261;
                  if (v261)
                    *(_DWORD *)v261 += 2;
                  *(_QWORD *)(v142 + 16 * (mFramesPerPacket + 3) + 8) = v147;
                  *(_DWORD *)(v142 + 16 * (mFramesPerPacket + 4)) = v262;
                  v148 = v263;
                  if (v263)
                    *(_DWORD *)v263 += 2;
                  *(_QWORD *)(v142 + 16 * (mFramesPerPacket + 4) + 8) = v148;
                  *(_DWORD *)(v142 + 16 * (mFramesPerPacket + 5)) = v264;
                  v149 = v265;
                  if (v265)
                    *(_DWORD *)v265 += 2;
                  *(_QWORD *)(v142 + 16 * (mFramesPerPacket + 5) + 8) = v149;
                  *(_DWORD *)(v142 + 16 * (mFramesPerPacket + 6)) = v266;
                  v150 = v267;
                  if (v267)
                    *(_DWORD *)v267 += 2;
                  *(_QWORD *)(v142 + 16 * (mFramesPerPacket + 6) + 8) = v150;
                  v243.mFramesPerPacket = mFramesPerPacket + 7;
                  (*(void (**)(uint64_t, char *, uint64_t, AudioFormatID *))(*(_QWORD *)v141 + 16))(v141, &WebCore::LogMedia, 3, &v243.mFormatID);
                  v151 = *(WTF **)&v243.mFormatID;
                  if (v243.mFramesPerPacket)
                  {
                    v152 = 16 * v243.mFramesPerPacket;
                    v153 = (WTF::StringImpl **)(*(_QWORD *)&v243.mFormatID + 8);
                    do
                    {
                      v154 = *v153;
                      *v153 = 0;
                      if (v154)
                      {
                        if (*(_DWORD *)v154 == 2)
                          WTF::StringImpl::destroy(v154, (WTF::StringImpl *)v119);
                        else
                          *(_DWORD *)v154 -= 2;
                      }
                      v153 += 2;
                      v152 -= 16;
                    }
                    while (v152);
                    v151 = *(WTF **)&v243.mFormatID;
                    v139 = v231;
                  }
                  if (v151)
                  {
                    *(_QWORD *)&v243.mFormatID = 0;
                    v243.mBytesPerPacket = 0;
                    WTF::fastFree(v151, v119);
                  }
                  v155 = v267;
                  v267 = 0;
                  if (v155)
                  {
                    if (*(_DWORD *)v155 == 2)
                      WTF::StringImpl::destroy(v155, (WTF::StringImpl *)v119);
                    else
                      *(_DWORD *)v155 -= 2;
                  }
                  v156 = v265;
                  v265 = 0;
                  if (v156)
                  {
                    if (*(_DWORD *)v156 == 2)
                      WTF::StringImpl::destroy(v156, (WTF::StringImpl *)v119);
                    else
                      *(_DWORD *)v156 -= 2;
                  }
                  v157 = v263;
                  v263 = 0;
                  if (v157)
                  {
                    if (*(_DWORD *)v157 == 2)
                      WTF::StringImpl::destroy(v157, (WTF::StringImpl *)v119);
                    else
                      *(_DWORD *)v157 -= 2;
                  }
                  v158 = v261;
                  v261 = 0;
                  if (v158)
                  {
                    if (*(_DWORD *)v158 == 2)
                      WTF::StringImpl::destroy(v158, (WTF::StringImpl *)v119);
                    else
                      *(_DWORD *)v158 -= 2;
                  }
                  v159 = v259;
                  v259 = 0;
                  if (v159)
                  {
                    if (*(_DWORD *)v159 == 2)
                      WTF::StringImpl::destroy(v159, (WTF::StringImpl *)v119);
                    else
                      *(_DWORD *)v159 -= 2;
                  }
                  v160 = (WTF::StringImpl *)*((_QWORD *)&v257 + 1);
                  *((_QWORD *)&v257 + 1) = 0;
                  if (v160)
                  {
                    if (*(_DWORD *)v160 == 2)
                      WTF::StringImpl::destroy(v160, (WTF::StringImpl *)v119);
                    else
                      *(_DWORD *)v160 -= 2;
                  }
                  v161 = *(WTF::StringImpl **)&buf[8];
                  *(_QWORD *)&buf[8] = 0;
                  if (v161)
                  {
                    if (*(_DWORD *)v161 == 2)
                      WTF::StringImpl::destroy(v161, (WTF::StringImpl *)v119);
                    else
                      *(_DWORD *)v161 -= 2;
                  }
                  ++v140;
                }
                while (v140 != (uint64_t *)v222);
              }
              v162 = __ldxr(v134);
              if (v162 == 1)
              {
                if (!__stlxr(0, v134))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v163 = v250;
      v250 = 0;
      if (v163)
      {
        if (*(_DWORD *)v163 == 2)
          WTF::StringImpl::destroy(v163, (WTF::StringImpl *)v119);
        else
          *(_DWORD *)v163 -= 2;
      }
      v70 = v230;
      v42 = (unint64_t)v231;
      goto LABEL_248;
    }
LABEL_352:
    __break(0xC471u);
    JUMPOUT(0x1961205CCLL);
  }
LABEL_248:
  v164 = *((_QWORD *)this + 5);
  v96 = 1;
  if (!*(_DWORD *)(v164 + 44))
  {
    v97 = 0;
    v95 = 0;
    goto LABEL_312;
  }
  v165 = 0;
  v223 = 0;
  v220 = 0;
  do
  {
    v166 = *(PAL **)(*(_QWORD *)(*(_QWORD *)(v164 + 32) + 8 * v165) + 16);
    v167 = (const __CFAllocator *)PAL::softLinkCoreMediaCMSampleBufferGetDataBuffer[0](v166, (opaqueCMSampleBuffer *)v119);
    v169 = v167;
    if (v167)
      CFRetain(v167);
    if (!PAL::softLinkCoreMediaCMBlockBufferIsRangeContiguous(v169, 0, 0, v168))
    {
      *(_QWORD *)buf = 0;
      if (PAL::softLinkCoreMediaCMBlockBufferCreateContiguous(0, v169, 0, 0, 0, 0, 0, buf, v217))
      {
        v180 = qword_1ECE7CD10;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)v237 = 0;
          v177 = v237;
          v178 = v180;
          v179 = "failed to create contiguous block buffer";
          goto LABEL_302;
        }
LABEL_258:
        v181 = 1;
        goto LABEL_296;
      }
      v186 = *(const __CFAllocator **)buf;
      if (v169)
        CFRelease(v169);
      v169 = v186;
      v42 = (unint64_t)v231;
    }
    DataLength = PAL::softLinkCoreMediaCMBlockBufferGetDataLength(v169, v170);
    *(_QWORD *)&v243.mFormatID = 0;
    if (PAL::softLinkCoreMediaCMBlockBufferGetDataPointer(v169, 0, 0, 0, (unint64_t *)&v243.mFormatID, v172))
    {
      v176 = qword_1ECE7CD10;
      if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        v177 = buf;
        v178 = v176;
        v179 = "Unable to retrieve data";
LABEL_302:
        _os_log_fault_impl(&dword_1940B8000, v178, OS_LOG_TYPE_FAULT, v179, v177, 2u);
        goto LABEL_258;
      }
      goto LABEL_258;
    }
    WebCore::AudioFileReader::getPacketDescriptions((WebCore::AudioFileReader *)v237, v166, v173, v174, v175);
    if (*(_DWORD *)&v237[12])
    {
      v183 = HIDWORD(v234);
      *(_DWORD *)buf = HIDWORD(v234);
      *(_DWORD *)&buf[4] = DataLength;
      *(_QWORD *)&buf[8] = *(_QWORD *)&v243.mFormatID;
      LOBYTE(v257) = v165 == *(unsigned int *)(*((_QWORD *)this + 5) + 44) - 1;
      *((_QWORD *)&v257 + 1) = v237;
      LODWORD(v258) = 0;
      v259 = 0;
      v260 = 0;
      v184 = v223;
      if (v223 <= v42)
      {
        v187 = v42 - v220;
        if ((v42 - v220) >= 0x1FFFFFFF)
          v187 = 0x1FFFFFFF;
        *(_DWORD *)v255 = v187;
        v188 = (uint64_t *)(v49 + 4);
        v189 = v221 + 4;
        if (HIDWORD(v234))
        {
          do
          {
            *((_DWORD *)v189 - 2) = 1;
            *((_DWORD *)v189 - 1) = 4 * *(_DWORD *)v255;
            v190 = *v188;
            v188 += 2;
            *v189 = v190 + 4 * v223;
            v189 += 2;
            --v183;
          }
          while (v183);
        }
        v191 = PAL::softLinkAudioToolboxAudioConverterFillComplexBuffer(*(PAL **)&v243.mSampleRate, (OpaqueAudioConverter *)WebCore::passthroughInputDataCallback, (int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *))buf, v255, v221, 0, v182);
        if (v191)
          v192 = v191 == 1297039698;
        else
          v192 = 1;
        if (v192)
        {
          v193 = *(_DWORD *)v255;
          if (v228)
          {
            v218 = v191;
            v217 = (OpaqueCMBlockBuffer **)*(unsigned int *)v255;
            if (*(_DWORD *)v255 >= v228)
              v194 = v228;
            else
              v194 = *(unsigned int *)v255;
            if (v232.mChannelsPerFrame)
            {
              v195 = 0;
              v196 = (void **)(v221 + 4);
              do
              {
                v197 = (char *)*v196;
                v196 += 2;
                memmove(v197, &v197[4 * v194], 4 * (*(_DWORD *)v255 - v194));
                ++v195;
              }
              while (v195 < v232.mChannelsPerFrame);
              v198 = *(_DWORD *)v255;
            }
            else
            {
              v198 = *(_DWORD *)v255;
            }
            v228 -= v194;
            v201 = (v198 - v194);
            v184 = v223;
            v191 = v218;
            v193 = (int)v217;
          }
          else
          {
            v228 = 0;
            v201 = *(unsigned int *)v255;
          }
          v220 += v193;
          v184 += v201;
          v42 = (unint64_t)v231;
        }
        else
        {
          v219 = v191;
          v199 = qword_1ECE7CD10;
          if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)v254 = 0;
            _os_log_fault_impl(&dword_1940B8000, v199, OS_LOG_TYPE_FAULT, "Error decoding data", v254, 2u);
          }
          v191 = v219;
        }
        v223 = v184;
        if (v191 == 1297039698 || !v191)
        {
          v181 = 0;
          goto LABEL_294;
        }
      }
      else
      {
        v185 = qword_1ECE7CD10;
        if (os_log_type_enabled((os_log_t)qword_1ECE7CD10, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)v255 = 0;
          _os_log_fault_impl(&dword_1940B8000, v185, OS_LOG_TYPE_FAULT, "Decoded more frames than first calculated, no available space left", v255, 2u);
        }
      }
    }
    v181 = 1;
LABEL_294:
    v202 = *(WTF **)v237;
    if (*(_QWORD *)v237)
    {
      *(_QWORD *)v237 = 0;
      *(_DWORD *)&v237[8] = 0;
      WTF::fastFree(v202, v119);
    }
LABEL_296:
    if (v169)
      CFRelease(v169);
    if (v181)
    {
      v97 = 0;
      v96 = 0;
      v95 = 0;
      goto LABEL_311;
    }
    ++v165;
    v164 = *((_QWORD *)this + 5);
  }
  while (v165 < *(unsigned int *)(v164 + 44));
  if (v223 > v225)
    v97 = v223 - (_BYTE)v225;
  else
    v97 = 0;
  v96 = 1;
  if (v223 > v225)
    v95 = (v223 - (_QWORD)v225) & 0xFFFFFFFFFFFFFF00;
  else
    v95 = 0;
LABEL_311:
  v54 = v229;
  v70 = v230;
  v51 = v227;
LABEL_312:
  WTF::fastFree((WTF *)v221, v119);
LABEL_313:
  PAL::softLinkAudioToolboxAudioConverterDispose(*(PAL **)&v243.mSampleRate, v94);
  if (v96)
  {
    v87 = v95 & 0xFFFFFFFFFFFFFF00 | v97;
    v52 = v70;
    goto LABEL_315;
  }
LABEL_95:
  *a5 = 0;
  v52 = v70;
LABEL_330:
  WTF::fastAlignedFree((WTF *)v54, v72);
  WTF::fastAlignedFree((WTF *)v52, v213);
  WTF::fastFree((WTF *)v49, v214);
  if (v44)
  {
    do
    {
LABEL_331:
      v215 = __ldaxr((unsigned int *)v44);
      v216 = v215 - 1;
    }
    while (__stlxr(v216, (unsigned int *)v44));
    if (!v216)
    {
      atomic_store(1u, (unsigned int *)v44);
      *(_QWORD *)buf = v44;
      WTF::ThreadSafeRefCounted<WebCore::AudioBus,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf, v56);
    }
  }
}

uint64_t WebCore::AudioOutputUnitAdaptor::inputProc(WebCore::AudioOutputUnitAdaptor *this, void *a2, unsigned int *a3, const AudioTimeStamp *a4, uint64_t a5, uint64_t a6, AudioBufferList *a7, __n128 a8)
{
  uint64_t v8;

  if (a3)
  {
    a8.n128_u64[0] = *(_QWORD *)a3;
    v8 = *((_QWORD *)a3 + 1);
  }
  else
  {
    v8 = 0;
    a8.n128_u64[0] = 0;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), v8, a5, a6, a8);
}

void WebCore::AudioSampleBufferList::applyGain(unsigned int *a1, int a2, float a3)
{
  unint64_t v3;
  uint64_t i;
  unsigned int *v6;
  unint64_t v7;
  __int16 *v8;
  unint64_t v9;
  unint64_t j;
  unsigned int *v11;
  unint64_t v12;
  int *v13;
  unint64_t v14;
  unint64_t v15;
  const float **v16;
  unint64_t v17;
  double v18;
  double **v19;
  double *v20;
  double v21;
  float __B;

  __B = a3;
  v3 = *a1;
  if ((_DWORD)v3)
  {
    switch(a2)
    {
      case 1:
        for (i = 0; i != v3; ++i)
        {
          v6 = &a1[4 * i];
          v7 = v6[3];
          if (v7 >= 2)
          {
            v8 = (__int16 *)*((_QWORD *)v6 + 2);
            v9 = v7 >> 1;
            do
            {
              *v8 = (int)(float)((float)*v8 * a3);
              ++v8;
              --v9;
            }
            while (v9);
          }
        }
        break;
      case 2:
        for (j = 0; j < v3; ++j)
        {
          v11 = &a1[4 * j];
          v12 = v11[3];
          if (v12 >= 4)
          {
            v13 = (int *)*((_QWORD *)v11 + 2);
            v14 = v12 >> 2;
            do
            {
              *v13 = (int)(float)((float)*v13 * a3);
              ++v13;
              --v14;
            }
            while (v14);
            v3 = *a1;
          }
        }
        break;
      case 3:
        v15 = 0;
        v16 = (const float **)(a1 + 4);
        do
        {
          vDSP_vsmul(*v16, 1, &__B, (float *)*v16, 1, (unint64_t)*((unsigned int *)v16 - 1) >> 2);
          ++v15;
          v16 += 2;
        }
        while (v15 < *a1);
        break;
      case 4:
        v17 = 0;
        v18 = a3;
        v19 = (double **)(a1 + 4);
        do
        {
          v20 = *v19;
          v21 = v18;
          vDSP_vsmulD(v20, 1, &v21, v20, 1, (unint64_t)*((unsigned int *)v19 - 1) >> 3);
          ++v17;
          v19 += 2;
        }
        while (v17 < *a1);
        break;
      default:
        return;
    }
  }
}

void WebCore::AudioSampleBufferList::applyGain(WebCore::AudioSampleBufferList *this, float a2)
{
  unsigned int *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(*((_QWORD *)this + 17) + 40);
  v4 = *((_DWORD *)this + 20);
  if (!v4)
  {
    if (*((_DWORD *)this + 6) != 1819304813)
      goto LABEL_24;
    if (*((_DWORD *)this + 9) != 1)
      goto LABEL_24;
    v5 = *((_DWORD *)this + 10);
    if (v5 != *((_DWORD *)this + 8))
      goto LABEL_24;
    v6 = *((_DWORD *)this + 11);
    if (!v6)
      goto LABEL_24;
    v7 = *((_DWORD *)this + 7);
    if ((v7 & 2) != 0)
      goto LABEL_24;
    v8 = *((_DWORD *)this + 12);
    if ((v8 & 7) != 0)
      goto LABEL_24;
    v9 = v8 >> 3;
    if ((v7 & 0x20) != 0)
      v6 = 1;
    if (v5 % v6 || v5 / v6 != v9)
      goto LABEL_24;
    if ((*((_DWORD *)this + 7) & 0x1F85) == 4)
    {
      if (v9 == 2)
      {
        v4 = 1;
        goto LABEL_27;
      }
      if (v9 == 4)
      {
        v4 = 2;
        goto LABEL_27;
      }
    }
    else if ((*((_DWORD *)this + 7) & 0x1F85) == 1)
    {
      if (v9 == 4)
      {
        v4 = 3;
        goto LABEL_27;
      }
      if (v9 == 8)
      {
        v4 = 4;
LABEL_27:
        *((_DWORD *)this + 20) = v4;
        goto LABEL_2;
      }
    }
LABEL_24:
    v4 = 0;
  }
LABEL_2:
  WebCore::AudioSampleBufferList::applyGain(v3, v4, a2);
}

void WebCore::mixBuffers(uint64_t a1, uint64_t a2, int a3, vDSP_Length __N)
{
  unsigned int *v7;
  uint64_t v8;
  uint64_t i;
  _WORD *v10;
  __int16 *v11;
  vDSP_Length v12;
  __int16 v13;
  _DWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  switch(a3)
  {
    case 1:
      if (__N)
      {
        v7 = *(unsigned int **)(a1 + 40);
        v8 = *v7;
        if ((_DWORD)v8)
        {
          for (i = 0; i != v8; ++i)
          {
            v10 = *(_WORD **)&v7[4 * i + 4];
            v11 = *(__int16 **)(a2 + 16 * i + 16);
            v12 = __N;
            do
            {
              v13 = *v11++;
              *v10++ += v13;
              --v12;
            }
            while (v12);
          }
        }
      }
      break;
    case 2:
      v14 = *(_DWORD **)(a1 + 40);
      LODWORD(v15) = *v14;
      if (*v14)
      {
        v16 = 0;
        v17 = 4;
        do
        {
          v18 = (uint64_t)&v14[v17 - 2];
          if (v15 <= v16)
            v18 = 0;
          vDSP_vaddi(*(const int **)(v18 + 8), 1, *(const int **)(a2 + v17 * 4), 1, *(int **)(v18 + 8), 1, __N);
          ++v16;
          v14 = *(_DWORD **)(a1 + 40);
          v15 = *v14;
          v17 += 4;
        }
        while (v16 < v15);
      }
      break;
    case 3:
      v19 = *(_DWORD **)(a1 + 40);
      LODWORD(v20) = *v19;
      if (*v19)
      {
        v21 = 0;
        v22 = 4;
        do
        {
          v23 = (uint64_t)&v19[v22 - 2];
          if (v20 <= v21)
            v23 = 0;
          vDSP_vadd(*(const float **)(v23 + 8), 1, *(const float **)(a2 + v22 * 4), 1, *(float **)(v23 + 8), 1, __N);
          ++v21;
          v19 = *(_DWORD **)(a1 + 40);
          v20 = *v19;
          v22 += 4;
        }
        while (v21 < v20);
      }
      break;
    case 4:
      v24 = *(_DWORD **)(a1 + 40);
      LODWORD(v25) = *v24;
      if (*v24)
      {
        v26 = 0;
        v27 = 4;
        do
        {
          v28 = (uint64_t)&v24[v27 - 2];
          if (v25 <= v26)
            v28 = 0;
          vDSP_vaddD(*(const double **)(v28 + 8), 1, *(const double **)(a2 + v27 * 4), 1, *(double **)(v28 + 8), 1, __N);
          ++v26;
          v24 = *(_DWORD **)(a1 + 40);
          v25 = *v24;
          v27 += 4;
        }
        while (v26 < v25);
      }
      break;
    default:
      return;
  }
}

uint64_t WebCore::AudioSampleBufferList::mixFrom(WebCore::AudioSampleBufferList *this, const AudioBufferList *a2, vDSP_Length __N)
{
  uint64_t v4;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  if (*((_QWORD *)this + 13) < __N)
    return 4294967246;
  v4 = *((_QWORD *)this + 17);
  if (a2->mNumberBuffers > **(_DWORD **)(v4 + 40))
    return 4294967246;
  v7 = *((_DWORD *)this + 20);
  if (!v7)
  {
    if (*((_DWORD *)this + 6) != 1819304813)
      goto LABEL_26;
    if (*((_DWORD *)this + 9) != 1)
      goto LABEL_26;
    v8 = *((_DWORD *)this + 10);
    if (v8 != *((_DWORD *)this + 8))
      goto LABEL_26;
    v9 = *((_DWORD *)this + 11);
    if (!v9)
      goto LABEL_26;
    v10 = *((_DWORD *)this + 7);
    if ((v10 & 2) != 0)
      goto LABEL_26;
    v11 = *((_DWORD *)this + 12);
    if ((v11 & 7) != 0)
      goto LABEL_26;
    v12 = v11 >> 3;
    if ((v10 & 0x20) != 0)
      v9 = 1;
    if (v8 % v9 || v8 / v9 != v12)
      goto LABEL_26;
    if ((*((_DWORD *)this + 7) & 0x1F85) == 4)
    {
      if (v12 == 2)
      {
        v7 = 1;
        goto LABEL_30;
      }
      if (v12 == 4)
      {
        v7 = 2;
        goto LABEL_30;
      }
    }
    else if ((*((_DWORD *)this + 7) & 0x1F85) == 1)
    {
      if (v12 == 4)
      {
        v7 = 3;
        goto LABEL_30;
      }
      if (v12 == 8)
      {
        v7 = 4;
LABEL_30:
        *((_DWORD *)this + 20) = v7;
        goto LABEL_27;
      }
    }
LABEL_26:
    v7 = 0;
  }
LABEL_27:
  WebCore::mixBuffers(v4, (uint64_t)a2, v7, __N);
  return 0;
}

void WebCore::AudioSampleBufferList::zeroABL(WebCore::AudioSampleBufferList *this, size_t a2)
{
  unint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)this)
  {
    v4 = 0;
    v5 = 16;
    do
    {
      bzero(*(void **)((char *)this + v5), a2);
      ++v4;
      v5 += 16;
    }
    while (v4 < *(unsigned int *)this);
  }
}

uint64_t WebCore::AudioSampleBufferList::copyFrom(WebCore::AudioSampleBufferList *this, const AudioBufferList *a2, uint64_t a3, OpaqueAudioConverter *a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  AudioStreamPacketDescription *v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v16;
  NSObject *v17;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  _QWORD v27[3];
  int v28;
  unsigned int v29[10];
  uint8_t buf[4];
  WebCore::AudioSampleBufferList *v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  unsigned int *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0xBFF0000000000000;
  *((_QWORD *)this + 13) = 0;
  v8 = *((_QWORD *)this + 17);
  v9 = *(void **)(v8 + 40);
  if (!v9)
  {
    v9 = operator new(*(_QWORD *)(v8 + 8));
    v10 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v9;
    if (v10)
    {
      MEMORY[0x19AEA7644](v10, 0x1080C404ACF7207);
      v9 = *(void **)(v8 + 40);
    }
  }
  memcpy(v9, *(const void **)(v8 + 32), *(_QWORD *)(v8 + 8));
  v28 = 40;
  PAL::softLinkAudioToolboxAudioConverterGetProperty(a4, (OpaqueAudioConverter *)0x61636964, &v28, v29, v11);
  v27[0] = a2;
  v27[1] = a3;
  v27[2] = v29[4];
  v26 = *((_QWORD *)this + 14);
  v13 = PAL::softLinkAudioToolboxAudioConverterFillComplexBuffer(a4, (OpaqueAudioConverter *)WebCore::audioConverterFromABLCallback, (int (*)(OpaqueAudioConverter *, unsigned int *, AudioBufferList *, AudioStreamPacketDescription **, void *))v27, &v26, *(unsigned int **)(*((_QWORD *)this + 17) + 40), 0, v12);
  v25 = v13;
  if (v13 == 560820082 || v13 == 0)
  {
    result = 0;
    *((_QWORD *)this + 13) = v26;
  }
  else
  {
    v16 = v13;
    v17 = qword_1ECE7C4A0;
    if (os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218754;
      v31 = this;
      v32 = 1024;
      v33 = v16;
      v34 = 1040;
      v35 = 4;
      v36 = 2080;
      v37 = &v25;
      _os_log_error_impl(&dword_1940B8000, v17, OS_LOG_TYPE_ERROR, "AudioSampleBufferList::copyFrom(%p) AudioConverterFillComplexBuffer returned error %d (%.4s)", buf, 0x22u);
    }
    v19 = v26;
    v20 = *((_QWORD *)this + 14);
    if (v20 < v26)
      v19 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 13) = v19;
    v21 = *(_DWORD **)(*((_QWORD *)this + 17) + 40);
    if (*v21)
    {
      v22 = 0;
      v23 = v20 * *((unsigned int *)this + 8);
      v24 = 4;
      do
      {
        bzero(*(void **)&v21[v24], v23);
        ++v22;
        v24 += 4;
      }
      while (v22 < *v21);
    }
    return v25;
  }
  return result;
}

uint64_t WebCore::audioConverterFromABLCallback(WebCore *this, OpaqueAudioConverter *a2, unsigned int *a3, AudioBufferList *a4, AudioStreamPacketDescription **a5, void *a6)
{
  uint64_t result;
  AudioStreamPacketDescription *v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  AudioStreamPacketDescription *v11;
  SInt64 mStartOffset;

  result = 2003329396;
  if (a2 && a3 && a5)
  {
    v7 = a5[1];
    if (v7)
    {
      *(_DWORD *)a2 = (_DWORD)v7;
      v8 = *a3;
      if ((_DWORD)v8)
      {
        v9 = *((_DWORD *)a5 + 4) * (_DWORD)v7;
        v10 = a3 + 4;
        v11 = *a5 + 1;
        do
        {
          mStartOffset = v11->mStartOffset;
          ++v11;
          *(_QWORD *)v10 = mStartOffset;
          *(v10 - 1) = v9;
          v10 += 4;
          --v8;
        }
        while (v8);
      }
      result = 0;
      a5[1] = 0;
    }
    else
    {
      *(_DWORD *)a2 = 0;
      return 560820082;
    }
  }
  return result;
}

unint64_t *WebCore::AudioSampleBufferList::copyFrom(_QWORD *a1, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t *result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;

  a1[11] = 0;
  a1[12] = 0xBFF0000000000000;
  a1[13] = 0;
  v10 = a1[17];
  v11 = *(void **)(v10 + 40);
  if (!v11)
  {
    v11 = operator new(*(_QWORD *)(v10 + 8));
    v12 = *(_QWORD *)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v11;
    if (v12)
    {
      MEMORY[0x19AEA7644](v12, 0x1080C404ACF7207);
      v11 = *(void **)(v10 + 40);
    }
  }
  memcpy(v11, *(const void **)(v10 + 32), *(_QWORD *)(v10 + 8));
  v13 = *(unsigned int **)(a1[17] + 40);
  result = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 24))(a2);
  do
  {
    do
      v15 = atomic_load(result);
    while ((v15 & 1) != 0);
    v16 = result[1];
    v17 = result[2];
    __dmb(9u);
  }
  while (v15 != *result);
  v18 = a2[10];
  if (v16 >= ~v18)
    v19 = ~v18;
  else
    v19 = v16;
  v20 = __CFADD__(v16, v18);
  v21 = v16 + v18;
  if (v20)
    v21 = -1;
  if (v21 < v19)
  {
    __break(1u);
  }
  else
  {
    if (v21 >= v17)
      v21 = v17;
    if (v17 >= v19)
      v22 = v21;
    else
      v22 = v19;
    WebCore::CARingBuffer::fetchInternal((uint64_t)a2, v13, a3, a4, a5, v19, v22);
    a1[13] = a3;
    return 0;
  }
  return result;
}

double WebCore::audioStreamBasicDescriptionForAudioBus@<D0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WebCore::AudioSessionIOS *v5;
  double result;
  int v7;

  *(_QWORD *)(a2 + 32) = 32;
  v5 = WebCore::AudioSession::sharedSession(this);
  *(double *)a2 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v5 + 72))(v5);
  *(_QWORD *)&result = 0x296C70636DLL;
  *(_OWORD *)(a2 + 8) = xmmword_19689B100;
  v7 = *((_DWORD *)this + 7);
  *(_DWORD *)(a2 + 24) = 4;
  *(_DWORD *)(a2 + 28) = v7;
  return result;
}

uint64_t WebCore::AudioDestinationCocoa::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 152);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t WebCore::AudioDestinationCocoa::deref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = (unsigned int *)(this + 152);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v1);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E3408538;
    v4[1] = v1;
    v5 = (uint64_t)v4;
    WTF::ensureOnMainThread();
    this = v5;
    if (v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return this;
}

uint64_t *std::unique_ptr<WebCore::AudioFileReaderWebMData>::reset[abi:sn180100](uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int **v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  WTF *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  void *v16;

  v2 = *result;
  *result = (uint64_t)a2;
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 44);
    if ((_DWORD)v3)
    {
      v4 = *(unsigned int ***)(v2 + 32);
      v5 = &v4[v3];
      do
      {
        v6 = *v4;
        *v4 = 0;
        if (v6)
        {
          v7 = v6 + 2;
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v6 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
          }
        }
        ++v4;
      }
      while (v4 != v5);
    }
    v10 = *(WTF **)(v2 + 32);
    if (v10)
    {
      *(_QWORD *)(v2 + 32) = 0;
      *(_DWORD *)(v2 + 40) = 0;
      WTF::fastFree(v10, a2);
    }
    v11 = *(unsigned int **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v11)
    {
      v12 = v11 + 2;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v11 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
      }
    }
    v15 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v2, a2);
    return (uint64_t *)WTF::fastFree((WTF *)v15, v16);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::AudioDestinationCocoa,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 152) + 8))(*(_QWORD *)(a1 + 8) - 152);
}

_DWORD *WTF::Mapper<WTF::WeakHashSet<WTF::Observer<void ()(WebCore::AudioSession &)>,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::forEach(WTF::Function<void ()(WTF::Observer<void ()(WebCore::AudioSession &)>&)> const&)::{lambda(WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>> const&)#1},WTF::Vector<WTF::WeakPtr<WTF::Observer<void ()(WebCore::AudioSession &)>,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits> &,void>::map(_DWORD *result)
{
  _DWORD *v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int **v10;
  uint64_t v11;

  v1 = result;
  if (qword_1EE337F08)
  {
    v6 = *(unsigned int *)(qword_1EE337F08 - 12);
    if ((_DWORD)v6)
    {
      if (v6 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v7 = WTF::fastMalloc((WTF *)(8 * v6));
      v1[2] = v6;
      *(_QWORD *)v1 = v7;
    }
  }
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((_QWORD **)&qword_1EE337F08);
  v2 = (char *)result;
  v4 = v3;
  if (qword_1EE337F08)
    v5 = qword_1EE337F08 + 8 * *(unsigned int *)(qword_1EE337F08 - 4);
  else
    v5 = 0;
  if ((_DWORD *)v5 != result)
  {
    do
    {
      v10 = *(unsigned int ***)(*(_QWORD *)v2 + 8);
      if (v10)
      {
        result = WTF::WeakPtrFactory<WebCore::MediaKeySystemClient,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(*(unsigned int **)(*(_QWORD *)v2 + 8), *(_QWORD *)(*(_QWORD *)v2 + 8));
        v8 = *v10;
        if (*v10)
        {
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = v1[3];
      *(_QWORD *)(*(_QWORD *)v1 + 8 * v11) = v8;
      v1[3] = v11 + 1;
      while (1)
      {
        v2 += 8;
        if (v2 == v4)
          break;
        if ((unint64_t)(*(_QWORD *)v2 + 1) > 1)
          goto LABEL_19;
      }
      v2 = v4;
LABEL_19:
      ;
    }
    while (v2 != (char *)v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioSession::setSharedSession(WTF::UniqueRef<WebCore::AudioSession> &&)::$_0,void,WTF::Observer<void ()(WebCore::AudioSession&)> &>::call(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = (unint64_t)&dword_1ECE90000;
  {
    v2 = byte_1ECE90DC0;
    if (byte_1ECE90DC0)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8), WebCore::sharedAudioSession(void)::session);
    __break(1u);
  }
  LOBYTE(WebCore::sharedAudioSession(void)::session) = 0;
  byte_1ECE90DC0 = 0;
  *(_BYTE *)(v2 + 3528) = 1;
  __break(1u);
  return result;
}

void _ZN3WTF9HashTableINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEES7_NS_17IdentityExtractorENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EESC_E8removeIfIZNS_11WeakHashSetINS_8ObserverIFvRN7WebCore12AudioSessionEEEES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSO_(uint64_t a1, void *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int **v6;
  uint64_t v8;
  int v9;
  unsigned int v10;

  v2 = qword_1EE337F08;
  if (qword_1EE337F08)
  {
    v3 = *(_DWORD *)(qword_1EE337F08 - 4);
    if (v3)
    {
      v4 = 0;
      v5 = v3 - 1;
      do
      {
        v6 = (unsigned int **)(v2 + 8 * v5);
        if ((unint64_t)*v6 + 1 >= 2 && !*((_QWORD *)*v6 + 1))
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v6, a2);
          ++v4;
        }
      }
      while ((unint64_t)v5--);
      v8 = qword_1EE337F08;
      if (v4)
      {
        *(_DWORD *)(qword_1EE337F08 - 16) += v4;
        if (qword_1EE337F08)
          v9 = *(_DWORD *)(qword_1EE337F08 - 12);
        else
          v9 = 0;
        *(_DWORD *)(qword_1EE337F08 - 12) = v9 - v4;
        v8 = qword_1EE337F08;
      }
      if (v8)
      {
        v10 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v10 && v10 >= 9)
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(&qword_1EE337F08);
      }
    }
  }
}

WebCore::AudioSessionIOS *WTF::Detail::CallableWrapper<WebCore::AudioSession::tryToSetActive(BOOL)::$_0,void>::call(WebCore::AudioSession *a1)
{
  WebCore::AudioSessionIOS *result;
  uint64_t v3;
  BOOL v4;

  result = WebCore::AudioSession::sharedSession(a1);
  v3 = (uint64_t)result;
  if (*((_BYTE *)result + 42))
    v4 = *((_BYTE *)result + 41) == 0;
  else
    v4 = 1;
  if (!v4)
    result = (WebCore::AudioSessionIOS *)(*(uint64_t (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)result + 176))(result, 1);
  if (*((_BYTE *)a1 + 8))
    return (WebCore::AudioSessionIOS *)WebCore::AudioSession::activeStateChanged(v3);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioDestination::create(WebCore::AudioIOCallback &,WTF::String const&,unsigned int,unsigned int,float)::$_0,WTF::Ref<WebCore::AudioDestination,WTF::RawPtrTraits<WebCore::AudioDestination>,WTF::DefaultRefDerefTraits<WebCore::AudioDestination>>,WebCore::AudioIOCallback &>::call@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  float v8;
  WebCore::AudioSessionIOS *v9;
  float v10;
  WebCore::AudioSession *v11;
  WebCore::AudioSessionIOS *v12;
  float v13;
  const AudioComponentDescription *v14;
  PAL *Next;
  OpaqueAudioComponentInstance **v16;
  unsigned int v17;
  OpaqueAudioComponentInstance *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  WebCore::AudioSession *v22;
  WebCore::AudioSessionIOS *v23;
  uint64_t result;
  int v25;
  double v26;
  __int128 v27;
  int v28;
  int v29;
  int v30;
  _QWORD v31[2];
  int v32;
  __int128 v33;
  int v34;

  v6 = WTF::fastMalloc((WTF *)0xB0);
  v7 = (void *)*(unsigned int *)(a1 + 8);
  v8 = *(float *)(a1 + 12);
  v9 = WebCore::AudioSession::sharedSession((WebCore::AudioSession *)v6);
  v10 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v9 + 72))(v9);
  v11 = (WebCore::AudioSession *)WebCore::AudioDestinationResampler::AudioDestinationResampler(v6, a2, v7, v8, v10);
  *(_DWORD *)(v6 + 152) = 1;
  *(_QWORD *)v6 = off_1E3408460;
  *(_QWORD *)(v6 + 144) = &unk_1E34084D0;
  *(_QWORD *)(v6 + 160) = 0;
  *(_QWORD *)(v6 + 168) = v6 + 144;
  v12 = WebCore::AudioSession::sharedSession(v11);
  v13 = (*(float (**)(WebCore::AudioSessionIOS *))(*(_QWORD *)v12 + 72))(v12);
  v33 = xmmword_19689B0F0;
  v34 = 0;
  Next = (PAL *)PAL::softLinkAudioToolboxAudioComponentFindNext(0, (OpaqueAudioComponent *)&v33, v14);
  PAL::softLinkAudioToolboxAudioComponentInstanceNew(Next, (OpaqueAudioComponent *)(v6 + 160), v16);
  v32 = 1;
  PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)(v6 + 160), (OpaqueAudioComponentInstance *)0x7D3, 2u, 0, &v32, (const void *)4, v17);
  PAL::softLinkAudioToolboxAudioUnitInitialize(*(PAL **)(v6 + 160), v18);
  v31[0] = WebCore::AudioOutputUnitAdaptor::inputProc;
  v31[1] = v6 + 160;
  PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)(v6 + 160), (OpaqueAudioComponentInstance *)0x17, 1u, 0, v31, (const void *)0x10, v19);
  v25 = 40;
  PAL::softLinkAudioToolboxAudioUnitGetProperty(*(PAL **)(v6 + 160), (OpaqueAudioComponentInstance *)8, 2u, 0, &v26, &v25, v20);
  v26 = v13;
  v27 = xmmword_19689B100;
  v28 = 4;
  v29 = (int)v7;
  v30 = 32;
  v22 = (WebCore::AudioSession *)PAL::softLinkAudioToolboxAudioUnitSetProperty(*(PAL **)(v6 + 160), (OpaqueAudioComponentInstance *)8, 1u, 0, &v26, (const void *)0x28, v21);
  v23 = WebCore::AudioSession::sharedSession(v22);
  result = (*(uint64_t (**)(WebCore::AudioSessionIOS *, uint64_t))(*(_QWORD *)v23 + 112))(v23, 256);
  *a3 = v6;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioDestinationCocoa::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34085D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioDestinationCocoa::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34085D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioDestinationCocoa::startRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioDestinationCocoa::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3408600;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioDestinationCocoa::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3408600;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioDestinationCocoa::stopRendering(WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::AudioFileReader::demuxWebMData(std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::SourceBufferPrivateClient::InitializationSegment &&>::call(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v2 = *((unsigned int *)a2 + 7);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = (unsigned int **)(a2[2] + 8);
    v5 = 16 * v2;
    while (!*v4)
    {
      v4 += 2;
      v5 -= 16;
      if (!v5)
        return result;
    }
    v6 = (_QWORD *)*((_QWORD *)result + 1);
    v7 = *a2;
    *(_QWORD *)((char *)v6 + 5) = *(uint64_t *)((char *)a2 + 5);
    *v6 = v7;
    v8 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)*v4 + 48))(*v4);
    v9 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v9 = v8;
    *(_BYTE *)(v9 + 8) = 1;
    v10 = *v4;
    if (*v4)
    {
      v11 = v10 + 2;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v13 = (unsigned int **)*((_QWORD *)v3 + 3);
    result = *v13;
    *v13 = v10;
    if (result)
    {
      v14 = result + 2;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, result + 2);
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

char *WTF::Detail::CallableWrapper<WebCore::AudioFileReader::demuxWebMData(std::span<unsigned char const,18446744073709551615ul>)::$_1,void,WTF::Ref<WebCore::MediaSampleAVFObjC,WTF::RawPtrTraits<WebCore::MediaSampleAVFObjC>,WTF::DefaultRefDerefTraits<WebCore::MediaSampleAVFObjC>> &&,unsigned long long,WTF::String const&>::call(char *result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v3 + 8) && *(_QWORD *)v3 == a3)
  {
    v4 = (uint64_t *)a2;
    v5 = *((_QWORD *)result + 2);
    v6 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v6 == *(_DWORD *)(v5 + 8))
    {
      result = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*((char ***)result + 2), v6 + 1, a2);
      v4 = (uint64_t *)result;
      v6 = *(unsigned int *)(v5 + 12);
    }
    v7 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    v8 = *v4;
    *v4 = 0;
    *v7 = v8;
    *(_DWORD *)(v5 + 12) = v6 + 1;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioFileReader::demuxWebMData(std::span<unsigned char const,18446744073709551615ul>)::$_2,void,WTF::Function<void ()(void)> &&>::call(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioFileReader::demuxWebMData(std::span<unsigned char const,18446744073709551615ul>)::$_3,void,unsigned long long,WTF::MediaTime const&>::call(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  if (*(_BYTE *)(v3 + 8))
  {
    v4 = **(_QWORD **)(result + 16);
    if (v4)
    {
      if (*(_QWORD *)v3 == a2)
      {
        v5 = *a3;
        *(_QWORD *)(v4 + 1189) = *(uint64_t *)((char *)a3 + 5);
        *(_QWORD *)(v4 + 1184) = v5;
      }
    }
  }
  return result;
}

__n128 WebCore::CAAudioStreamDescription::CAAudioStreamDescription(WebCore::CAAudioStreamDescription *this, const AudioStreamBasicDescription *a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)this = off_1E34087C0;
  result = *(__n128 *)&a2->mSampleRate;
  v3 = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 5) = *(_QWORD *)&a2->mBitsPerChannel;
  *(_OWORD *)((char *)this + 24) = v3;
  *(__n128 *)((char *)this + 8) = result;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 18) = 0;
  return result;
}

{
  __n128 result;
  __int128 v3;

  *(_QWORD *)this = off_1E34087C0;
  result = *(__n128 *)&a2->mSampleRate;
  v3 = *(_OWORD *)&a2->mBytesPerPacket;
  *((_QWORD *)this + 5) = *(_QWORD *)&a2->mBitsPerChannel;
  *(_OWORD *)((char *)this + 24) = v3;
  *(__n128 *)((char *)this + 8) = result;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_DWORD *)this + 18) = 0;
  return result;
}

uint64_t WebCore::CAAudioStreamDescription::CAAudioStreamDescription(uint64_t result, int a2, int a3, int a4, double a5)
{
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)result = off_1E34087C0;
  *(_DWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 28) = 1;
  *(_DWORD *)(result + 36) = a2;
  *(double *)(result + 8) = a5;
  *(_QWORD *)(result + 16) = 0x86C70636DLL;
  *(_DWORD *)(result + 44) = 0;
  *(_DWORD *)(result + 48) = 0;
  v5 = a3 - 1;
  if ((a3 - 1) > 3)
  {
    v8 = 0;
    v7 = 40;
  }
  else
  {
    v6 = dword_1969F70A0[v5];
    v7 = dword_1969F70B0[v5];
    v8 = dword_1969F70C0[v5];
    *(_DWORD *)(result + 20) = v6;
  }
  *(_DWORD *)(result + 40) = 8 * v8;
  if (a4)
    v8 *= a2;
  else
    *(_DWORD *)(result + 20) = v7;
  *(_DWORD *)(result + 24) = v8;
  *(_DWORD *)(result + 32) = v8;
  return result;
}

{
  int v5;
  int v6;
  int v7;
  int v8;

  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)result = off_1E34087C0;
  *(_DWORD *)(result + 64) = 0;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 28) = 1;
  *(_DWORD *)(result + 36) = a2;
  *(double *)(result + 8) = a5;
  *(_QWORD *)(result + 16) = 0x86C70636DLL;
  *(_DWORD *)(result + 44) = 0;
  *(_DWORD *)(result + 48) = 0;
  v5 = a3 - 1;
  if ((a3 - 1) > 3)
  {
    v8 = 0;
    v7 = 40;
  }
  else
  {
    v6 = dword_1969F70A0[v5];
    v7 = dword_1969F70B0[v5];
    v8 = dword_1969F70C0[v5];
    *(_DWORD *)(result + 20) = v6;
  }
  *(_DWORD *)(result + 40) = 8 * v8;
  if (a4)
    v8 *= a2;
  else
    *(_DWORD *)(result + 20) = v7;
  *(_DWORD *)(result + 24) = v8;
  *(_DWORD *)(result + 32) = v8;
  return result;
}

uint64_t WebCore::CAAudioStreamDescription::platformDescription(WebCore::CAAudioStreamDescription *this)
{
  uint64_t result;

  *((_DWORD *)this + 12) = 1;
  result = (uint64_t)this + 48;
  *(_QWORD *)(result + 8) = result - 40;
  *(_DWORD *)(result + 16) = 1;
  return result;
}

uint64_t WebCore::CAAudioStreamDescription::format(WebCore::CAAudioStreamDescription *this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *((unsigned int *)this + 18);
  if (!(_DWORD)v1)
  {
    if (*((_DWORD *)this + 4) != 1819304813)
      return 0;
    if (*((_DWORD *)this + 7) != 1)
      return 0;
    v2 = *((_DWORD *)this + 8);
    if (v2 != *((_DWORD *)this + 6))
      return 0;
    v3 = *((_DWORD *)this + 9);
    if (!v3)
      return 0;
    v4 = *((_DWORD *)this + 5);
    if ((v4 & 2) != 0)
      return 0;
    v5 = *((_DWORD *)this + 10);
    if ((v5 & 7) != 0)
      return 0;
    v6 = v5 >> 3;
    if ((v4 & 0x20) != 0)
      v3 = 1;
    if (v2 % v3 || v2 / v3 != v6)
      return 0;
    if ((*((_DWORD *)this + 5) & 0x1F85) == 4)
    {
      if (v6 == 2)
      {
        v1 = 1;
        goto LABEL_27;
      }
      if (v6 == 4)
      {
        v1 = 2;
        goto LABEL_27;
      }
    }
    else if ((*((_DWORD *)this + 5) & 0x1F85) == 1)
    {
      if (v6 == 4)
      {
        v1 = 3;
        goto LABEL_27;
      }
      if (v6 == 8)
      {
        v1 = 4;
LABEL_27:
        *((_DWORD *)this + 18) = v1;
        return v1;
      }
    }
    return 0;
  }
  return v1;
}

BOOL WebCore::CAAudioStreamDescription::isNativeEndian(WebCore::CAAudioStreamDescription *this)
{
  return *((_DWORD *)this + 4) == 1819304813 && (*((_BYTE *)this + 20) & 2) == 0;
}

uint64_t WebCore::CAAudioStreamDescription::numberOfInterleavedChannels(WebCore::CAAudioStreamDescription *this)
{
  if ((*((_BYTE *)this + 20) & 0x20) != 0)
    return 1;
  else
    return *((unsigned int *)this + 9);
}

double WebCore::CAAudioStreamDescription::sampleRate(WebCore::CAAudioStreamDescription *this)
{
  return *((double *)this + 1);
}

BOOL WebCore::CAAudioStreamDescription::isPCM(WebCore::CAAudioStreamDescription *this)
{
  return *((_DWORD *)this + 4) == 1819304813;
}

BOOL WebCore::CAAudioStreamDescription::isInterleaved(WebCore::CAAudioStreamDescription *this)
{
  return (*((_BYTE *)this + 20) & 0x20) == 0;
}

uint64_t WebCore::CAAudioStreamDescription::isSignedInteger(WebCore::CAAudioStreamDescription *this)
{
  if (*((_DWORD *)this + 4) == 1819304813)
    return (*((unsigned __int8 *)this + 20) >> 2) & 1;
  else
    return 0;
}

uint64_t WebCore::CAAudioStreamDescription::isFloat(WebCore::CAAudioStreamDescription *this)
{
  if (*((_DWORD *)this + 4) == 1819304813)
    return *((_BYTE *)this + 20) & 1;
  else
    return 0;
}

uint64_t WebCore::CAAudioStreamDescription::numberOfChannelStreams(WebCore::CAAudioStreamDescription *this)
{
  if ((*((_BYTE *)this + 20) & 0x20) != 0)
    return *((unsigned int *)this + 9);
  else
    return 1;
}

uint64_t WebCore::CAAudioStreamDescription::numberOfChannels(WebCore::CAAudioStreamDescription *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t WebCore::CAAudioStreamDescription::sampleWordSize(WebCore::CAAudioStreamDescription *this)
{
  unsigned int v1;
  unsigned int v2;

  v1 = *((_DWORD *)this + 8);
  if (!v1)
    return 0;
  if ((*((_BYTE *)this + 20) & 0x20) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = *((_DWORD *)this + 9);
    if (!v2)
      return 0;
  }
  return v1 / v2;
}

uint64_t WebCore::CAAudioStreamDescription::bytesPerFrame(WebCore::CAAudioStreamDescription *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t WebCore::CAAudioStreamDescription::bytesPerPacket(WebCore::CAAudioStreamDescription *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebCore::CAAudioStreamDescription::formatFlags(WebCore::CAAudioStreamDescription *this)
{
  return *((unsigned int *)this + 5);
}

BOOL WebCore::CAAudioStreamDescription::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) == *(double *)a2
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 32);
}

uint64_t WebCore::CAAudioStreamDescription::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::CAAudioStreamDescription *v7;

  if (*(_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 1)
    return 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (*(_DWORD *)(v4 + 16) == 1)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (*(double *)(a1 + 8) == *(double *)v5
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(v5 + 8)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(v5 + 12)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(v5 + 16)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(v5 + 20)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(v5 + 24)
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(v5 + 28))
    {
      return *(_DWORD *)(a1 + 40) == *(_DWORD *)(v5 + 32);
    }
    return 0;
  }
  v7 = (WebCore::CAAudioStreamDescription *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::CAAudioStreamDescription::streamDescription(v7);
}

uint64_t WebCore::CAAudioStreamDescription::streamDescription(WebCore::CAAudioStreamDescription *this)
{
  return (uint64_t)this + 8;
}

{
  return (uint64_t)this + 8;
}

WebCore::CARingBuffer *WebCore::CARingBuffer::CARingBuffer(WebCore::CARingBuffer *this, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v8;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E34086C8;
  *((_DWORD *)this + 5) = a4;
  if (a4)
  {
    if (a4 >> 29)
    {
LABEL_6:
      __break(0xC471u);
      JUMPOUT(0x1961220C0);
    }
    v8 = WTF::fastMalloc((WTF *)(8 * a4));
    *((_DWORD *)this + 4) = a4;
    *((_QWORD *)this + 1) = v8;
  }
  *((_DWORD *)this + 6) = a4;
  *((_QWORD *)this + 4) = a2;
  *((_DWORD *)this + 10) = a3;
  if (!is_mul_ok(a2, a3))
    goto LABEL_6;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = a2 * a3;
  return this;
}

unint64_t WebCore::CARingBuffer::computeCapacityBytes@<X0>(unint64_t this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  uint64_t v4;

  v3 = !is_mul_ok(this, a2);
  v4 = this * a2;
  if (!is_mul_ok(this, a2))
    v4 = 0;
  *(_QWORD *)(a3 + 8) = v4;
  *(_BYTE *)a3 = v3;
  return this;
}

void WebCore::CARingBuffer::~CARingBuffer(WebCore::CARingBuffer *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34086C8;
  v3 = (WTF *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

unint64_t WebCore::CARingBuffer::computeSizeForBuffers@<X0>(unint64_t this@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (is_mul_ok(this, a2) && is_mul_ok(this * a2, a3))
  {
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = this * a2 * a3;
  }
  else
  {
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)a4 = 1;
  }
  return this;
}

uint64_t WebCore::CARingBuffer::initialize(WebCore::CARingBuffer *this)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(WebCore::CARingBuffer *))(*(_QWORD *)this + 16))(this);
  v3 = *((unsigned int *)this + 5);
  if ((_DWORD)v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    v5 = *((_QWORD *)this + 6);
    v6 = 8 * v3;
    do
    {
      *v4++ = result;
      result += v5;
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

uint64_t WebCore::CARingBuffer::getStoreTimeBounds(WebCore::CARingBuffer *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t WebCore::CARingBuffer::store(WebCore::CARingBuffer *this, const AudioBufferList *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t *v25;
  void **v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  void *v32;
  size_t v33;
  uint64_t v34;
  size_t v35;
  uint64_t *v36;
  AudioBuffer *mBuffers;
  void **p_mData;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  void *v42;
  const void *v43;
  void *v44;
  size_t v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  size_t mDataByteSize;
  BOOL v50;
  size_t v51;
  size_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  void *v64;

  if (!a3)
    return 0;
  v5 = *((unsigned int *)this + 10);
  if (v5 < a3)
    return 1;
  v9 = a4 + a3;
  v10 = *((_QWORD *)this + 7);
  if (v10 <= a4)
  {
    if (v9 - v10 <= v5)
    {
      v13 = *((_QWORD *)this + 8);
    }
    else
    {
      v12 = v9 - v5;
      if (v9 - v5 <= *((_QWORD *)this + 8))
        v13 = *((_QWORD *)this + 8);
      else
        v13 = v9 - v5;
      v14 = (unint64_t *)(*(uint64_t (**)(WebCore::CARingBuffer *))(*(_QWORD *)this + 24))(this);
      v5 = (*v14)++;
      __dmb(0xBu);
      v14[1] = v12;
      v14[2] = v13;
      atomic_store(v5 + 2, v14);
      *((_QWORD *)this + 7) = v12;
      *((_QWORD *)this + 8) = v13;
      LODWORD(v5) = *((_DWORD *)this + 10);
    }
    if (v13 < a4)
    {
      v15 = *((_QWORD *)this + 4);
      v16 = v15 * (v13 % v5);
      v17 = a4 % v5 * v15;
      if (v17 <= v16)
      {
        v56 = *((unsigned int *)this + 5);
        if ((_DWORD)v56)
        {
          v57 = *((_QWORD *)this + 6) - v16;
          v58 = (uint64_t *)*((_QWORD *)this + 1);
          v59 = 8 * v56;
          do
          {
            v60 = *v58++;
            bzero((void *)(v60 + v16), v57);
            v59 -= 8;
          }
          while (v59);
          v61 = *((unsigned int *)this + 5);
          if ((_DWORD)v61)
          {
            v62 = (void **)*((_QWORD *)this + 1);
            v63 = 8 * v61;
            do
            {
              v64 = *v62++;
              bzero(v64, v17);
              v63 -= 8;
            }
            while (v63);
          }
        }
      }
      else
      {
        v18 = *((unsigned int *)this + 5);
        if ((_DWORD)v18)
        {
          v19 = (uint64_t *)*((_QWORD *)this + 1);
          v20 = 8 * v18;
          do
          {
            v21 = *v19++;
            bzero((void *)(v21 + v16), v17 - v16);
            v20 -= 8;
          }
          while (v20);
        }
      }
      goto LABEL_20;
    }
  }
  else
  {
    v11 = (unint64_t *)(*(uint64_t (**)(WebCore::CARingBuffer *))(*(_QWORD *)this + 24))(this);
    v5 = (*v11)++;
    __dmb(0xBu);
    v11[1] = a4;
    v11[2] = a4;
    atomic_store(v5 + 2, v11);
    *((_QWORD *)this + 7) = a4;
    *((_QWORD *)this + 8) = a4;
    LODWORD(v5) = *((_DWORD *)this + 10);
  }
  v17 = *((_QWORD *)this + 4) * (a4 % v5);
LABEL_20:
  v22 = *((_QWORD *)this + 4) * (v9 % *((unsigned int *)this + 10));
  v23 = v22 - v17;
  if (v22 <= v17)
  {
    v34 = *((unsigned int *)this + 5);
    if ((_DWORD)v34)
    {
      v35 = *((_QWORD *)this + 6) - v17;
      v36 = (uint64_t *)*((_QWORD *)this + 1);
      mBuffers = a2->mBuffers;
      p_mData = &a2->mBuffers[0].mData;
      v39 = 8 * v34;
      do
      {
        v40 = *((unsigned int *)p_mData - 1);
        v41 = *v36++;
        v42 = (void *)(v41 + v17);
        v44 = *p_mData;
        p_mData += 2;
        v43 = v44;
        if (v40 >= v35)
          v45 = v35;
        else
          v45 = v40;
        memcpy(v42, v43, v45);
        v39 -= 8;
      }
      while (v39);
      v46 = *((unsigned int *)this + 5);
      if ((_DWORD)v46)
      {
        v47 = (void **)*((_QWORD *)this + 1);
        v48 = 8 * v46;
        do
        {
          mDataByteSize = mBuffers->mDataByteSize;
          v50 = mDataByteSize >= v35;
          v51 = mDataByteSize - v35;
          if (v50)
          {
            if (v51 >= v22)
              v52 = v22;
            else
              v52 = v51;
            memcpy(*v47, (char *)mBuffers->mData + v35, v52);
            ++mBuffers;
          }
          ++v47;
          v48 -= 8;
        }
        while (v48);
      }
    }
  }
  else
  {
    v24 = *((unsigned int *)this + 5);
    if ((_DWORD)v24)
    {
      v25 = (uint64_t *)*((_QWORD *)this + 1);
      v26 = &a2->mBuffers[0].mData;
      v27 = 8 * v24;
      do
      {
        v28 = *((unsigned int *)v26 - 1);
        v29 = *v25++;
        v30 = (void *)(v29 + v17);
        v32 = *v26;
        v26 += 2;
        v31 = v32;
        if (v28 >= v23)
          v33 = v23;
        else
          v33 = v28;
        memcpy(v30, v31, v33);
        v27 -= 8;
      }
      while (v27);
    }
  }
  v53 = *((_QWORD *)this + 7);
  v54 = (unint64_t *)(*(uint64_t (**)(WebCore::CARingBuffer *))(*(_QWORD *)this + 24))(this);
  result = 0;
  v55 = (*v54)++;
  __dmb(0xBu);
  v54[1] = v53;
  v54[2] = v9;
  atomic_store(v55 + 2, v54);
  *((_QWORD *)this + 7) = v53;
  *((_QWORD *)this + 8) = v9;
  return result;
}

unint64_t WebCore::CARingBuffer::getFetchTimeBounds(WebCore::CARingBuffer *this)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t result;
  BOOL v7;
  unint64_t v8;

  v2 = (unint64_t *)(*(uint64_t (**)(WebCore::CARingBuffer *))(*(_QWORD *)this + 24))(this);
  do
  {
    do
      v3 = atomic_load(v2);
    while ((v3 & 1) != 0);
    v4 = v2[1];
    __dmb(9u);
  }
  while (v3 != *v2);
  v5 = *((unsigned int *)this + 10);
  if (v4 >= ~v5)
    result = ~v5;
  else
    result = v4;
  v7 = __CFADD__(v4, v5);
  v8 = v4 + v5;
  if (v7)
    v8 = -1;
  if (v8 < result)
    __break(1u);
  return result;
}

unint64_t *WebCore::CARingBuffer::fetchIfHasEnoughData(unsigned int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  unint64_t *result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL8 v20;

  result = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  do
  {
    do
      v11 = atomic_load(result);
    while ((v11 & 1) != 0);
    v12 = result[1];
    v13 = result[2];
    __dmb(9u);
  }
  while (v11 != *result);
  v14 = a1[10];
  if (v12 >= ~v14)
    v15 = ~v14;
  else
    v15 = v12;
  v16 = __CFADD__(v12, v14);
  v17 = v12 + v14;
  if (v16)
    v17 = -1;
  if (v17 < v15)
  {
    __break(1u);
  }
  else
  {
    if (v17 >= v13)
      v17 = v13;
    if (v13 >= v15)
      v18 = v17;
    else
      v18 = v15;
    v20 = v15 <= a4 && a4 + a3 <= v18;
    if (v20)
      WebCore::CARingBuffer::fetchInternal((uint64_t)a1, a2, a3, a4, a5, v15, v18);
    return (unint64_t *)v20;
  }
  return result;
}

void WebCore::CARingBuffer::fetchInternal(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int a5, unint64_t a6, unint64_t a7)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  void **v16;
  unsigned int v17;
  size_t v18;
  void *v19;
  void *v20;
  size_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  void **v28;
  unsigned int v29;
  size_t v30;
  void *v31;
  void *v32;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  size_t v37;
  unsigned int *v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  BOOL v42;
  size_t v43;
  size_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  if (a3)
  {
    if (a7 < a6)
    {
      __break(1u);
      return;
    }
    v9 = a4 + a3;
    if (a7 >= a4)
      v10 = a4;
    else
      v10 = a7;
    if (a6 <= a4)
      v11 = v10;
    else
      v11 = a6;
    if (a7 >= v9)
      v12 = a4 + a3;
    else
      v12 = a7;
    if (v9 >= a6)
      v13 = v12;
    else
      v13 = a6;
    v14 = v13 - v11;
    if (v13 != v11)
    {
      v22 = a5;
      v23 = *(_QWORD *)(a1 + 32);
      v24 = v11 - a4;
      v25 = v23 * (v11 - a4);
      if (v25)
      {
        if (v25 >= v23 * a3)
          v26 = v23 * a3;
        else
          v26 = v23 * (v11 - a4);
        v27 = *(_QWORD *)(a1 + 32);
        if ((int)*a2 >= 1)
        {
          v55 = v23 * (v11 - a4);
          v28 = (void **)(a2 + 4);
          v29 = *a2 + 1;
          do
          {
            v30 = *((unsigned int *)v28 - 1);
            v32 = *v28;
            v28 += 2;
            v31 = v32;
            if (v30 >= v26)
              v33 = v26;
            else
              v33 = v30;
            bzero(v31, v33);
            --v29;
          }
          while (v29 > 1);
          v27 = *(_QWORD *)(a1 + 32);
          v22 = a5;
          v14 = v13 - v11;
          v25 = v55;
        }
      }
      else
      {
        v27 = *(_QWORD *)(a1 + 32);
      }
      v34 = v9 - v13;
      if (v9 != v13)
      {
        v35 = v25;
        v36 = v23 * (v14 + v24);
        v37 = v27 * v34;
        v38 = a2 + 2;
        v39 = *a2;
        while (1)
        {
          v40 = __OFSUB__(v39--, 1);
          if (v39 < 0 != v40)
            break;
          v41 = v38[1];
          v42 = v41 >= v36;
          v43 = v41 - v36;
          if (v42)
          {
            if (v43 >= v37)
              v44 = v37;
            else
              v44 = v43;
            bzero((void *)(*((_QWORD *)v38 + 1) + v36), v44);
            v38 += 4;
          }
        }
        v27 = *(_QWORD *)(a1 + 32);
        v25 = v35;
      }
      v45 = *(unsigned int *)(a1 + 40);
      v46 = v11 % v45 * v27;
      v47 = v13 % v45 * v27;
      v48 = v47 - v46;
      if (v47 <= v46)
      {
        v52 = *(_QWORD *)(a1 + 48);
        v53 = v52 - v46;
        v54 = a1 + 8;
        WebCore::FetchABL(a2, v25, v54, v46, v52 - v46, v22, v47 == 0);
        if (!v47)
          return;
        v51 = v53 + v25;
        v50 = a2;
        v49 = v54;
        v46 = 0;
        v48 = v47;
      }
      else
      {
        v49 = a1 + 8;
        v50 = a2;
        v51 = v25;
      }
      WebCore::FetchABL(v50, v51, v49, v46, v48, v22, 1);
      return;
    }
    if ((int)*a2 >= 1)
    {
      v15 = *(_QWORD *)(a1 + 32) * a3;
      v16 = (void **)(a2 + 4);
      v17 = *a2 + 1;
      do
      {
        v18 = *((unsigned int *)v16 - 1);
        v20 = *v16;
        v16 += 2;
        v19 = v20;
        if (v18 >= v15)
          v21 = v15;
        else
          v21 = v18;
        bzero(v19, v21);
        --v17;
      }
      while (v17 > 1);
    }
  }
}

void WebCore::CARingBuffer::fetch(unsigned int *a1, unsigned int *a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;

  v10 = (unint64_t *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  do
  {
    do
      v11 = atomic_load(v10);
    while ((v11 & 1) != 0);
    v12 = v10[1];
    v13 = v10[2];
    __dmb(9u);
  }
  while (v11 != *v10);
  v14 = a1[10];
  if (v12 >= ~v14)
    v15 = ~v14;
  else
    v15 = v12;
  v16 = __CFADD__(v12, v14);
  v17 = v12 + v14;
  if (v16)
    v17 = -1;
  if (v17 < v15)
  {
    __break(1u);
  }
  else
  {
    if (v17 >= v13)
      v17 = v13;
    if (v13 >= v15)
      v18 = v17;
    else
      v18 = v15;
    WebCore::CARingBuffer::fetchInternal((uint64_t)a1, a2, a3, a4, a5, v15, v18);
  }
}

unsigned int *WebCore::FetchABL(unsigned int *result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unsigned int a6, int a7)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t i;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  unint64_t v13;
  int v14;

  v7 = *(_DWORD *)(a3 + 12);
  if (v7 >= *result)
    v8 = *result;
  else
    v8 = v7;
  if ((_DWORD)v8)
  {
    for (i = 0; i != v8; ++i)
    {
      if (i >= *(unsigned int *)(a3 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x196122A6CLL);
      }
      v10 = &result[4 * i];
      v12 = v10[3];
      v11 = v10 + 3;
      v13 = v12 - a2;
      if (v12 >= a2)
      {
        if (v13 >= a5)
          v14 = a5;
        else
          v14 = v13;
        if (a6 <= 4)
          __asm { BR              X8 }
        if (a7)
          *v11 = v14 + a2;
      }
    }
  }
  return result;
}

void WebCore::InProcessCARingBuffer::allocate(WebCore::InProcessCARingBuffer *this@<X0>, const WebCore::CAAudioStreamDescription *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  WTF **v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  uint64_t v26;
  _QWORD v27[4];

  v27[3] = *MEMORY[0x1E0C80C00];
  v4 = ((_DWORD)a2 - 1) | (((_DWORD)a2 - 1) >> 1) | ((((_DWORD)a2 - 1) | (((_DWORD)a2 - 1) >> 1)) >> 2);
  v5 = v4 | (v4 >> 4) | ((v4 | (v4 >> 4)) >> 8);
  v6 = (v5 | HIWORD(v5)) + 1;
  v7 = *((unsigned int *)this + 8);
  if ((*((_BYTE *)this + 20) & 0x20) != 0)
    v8 = *((unsigned int *)this + 9);
  else
    v8 = 1;
  v9 = v7 * (unint64_t)v6;
  if (!is_mul_ok(v9, v8))
  {
    v10 = qword_1ECE7C4A0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_FAULT))
    {
LABEL_6:
      *a3 = 0;
      return;
    }
    LOWORD(v27[0]) = 0;
    v23 = "InProcessCARingBuffer::allocate: Overflowed when trying to compute the storage size";
    v24 = v10;
    v25 = 2;
LABEL_37:
    _os_log_fault_impl(&dword_1940B8000, v24, OS_LOG_TYPE_FAULT, v23, (uint8_t *)v27, v25);
    goto LABEL_6;
  }
  v11 = v9 * v8;
  if (v9 * v8)
  {
    if (HIDWORD(v11) || (WTF::tryFastMalloc((WTF *)(v9 * v8)), (v12 = (WTF *)v27[0]) == 0))
    {
      v26 = qword_1ECE7C4A0;
      if (!os_log_type_enabled((os_log_t)qword_1ECE7C4A0, OS_LOG_TYPE_FAULT))
        goto LABEL_6;
      LODWORD(v27[0]) = 134217984;
      *(_QWORD *)((char *)v27 + 4) = v9 * v8;
      v23 = "InProcessCARingBuffer::allocate: Failed to allocate buffer of the requested size: %lu";
      v24 = v26;
      v25 = 12;
      goto LABEL_37;
    }
    LODWORD(v13) = v9 * v8;
  }
  else
  {
    v12 = 0;
    LODWORD(v13) = 0;
  }
  if (v11 > v13)
  {
    v14 = v13 + ((unint64_t)v13 >> 2);
    if (v14 >= 0x10)
      v15 = v14 + 1;
    else
      v15 = 16;
    if (v15 <= v11)
      v13 = v9 * v8;
    else
      v13 = v15;
    if (HIDWORD(v13))
      goto LABEL_40;
    v16 = WTF::fastMalloc((WTF *)v13);
    if (v12)
    {
      if ((WTF *)v16 == v12)
        v18 = 0;
      else
        v18 = (WTF *)v16;
      if ((WTF *)v16 == v12)
        LODWORD(v13) = 0;
      WTF::fastFree(v12, v17);
      v12 = v18;
    }
    else
    {
      v12 = (WTF *)v16;
    }
  }
  v19 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)(v19 + 8) = 0;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)v19 = off_1E34086C8;
  *(_DWORD *)(v19 + 20) = v8;
  if ((_DWORD)v8)
  {
    if (!(v8 >> 29))
    {
      v20 = (WTF **)WTF::fastMalloc((WTF *)(8 * v8));
      *(_DWORD *)(v19 + 16) = v8;
      *(_QWORD *)(v19 + 8) = v20;
      v21 = *(_DWORD *)(v19 + 20);
      goto LABEL_32;
    }
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x196122CF8);
  }
  v21 = 0;
  v20 = 0;
LABEL_32:
  *(_DWORD *)(v19 + 24) = v8;
  *(_QWORD *)(v19 + 32) = v7;
  *(_DWORD *)(v19 + 40) = v6;
  *(_QWORD *)(v19 + 48) = v9;
  *(_QWORD *)(v19 + 56) = 0;
  *(_QWORD *)v19 = off_1E34086F8;
  *(_QWORD *)(v19 + 64) = 0;
  *(_QWORD *)(v19 + 72) = v12;
  *(_DWORD *)(v19 + 80) = v13;
  *(_DWORD *)(v19 + 84) = v11;
  *(_QWORD *)(v19 + 96) = 0;
  *(_QWORD *)(v19 + 104) = 0;
  *(_QWORD *)(v19 + 88) = 0;
  *a3 = v19;
  if (v21)
  {
    v22 = 8 * v21;
    do
    {
      *v20++ = v12;
      v12 = (WTF *)((char *)v12 + v9);
      v22 -= 8;
    }
    while (v22);
  }
}

uint64_t WebCore::InProcessCARingBuffer::InProcessCARingBuffer(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E34086C8;
  *(_DWORD *)(a1 + 20) = a4;
  if (a4)
  {
    if (a4 >> 29)
    {
LABEL_6:
      __break(0xC471u);
      JUMPOUT(0x196122DDCLL);
    }
    v10 = WTF::fastMalloc((WTF *)(8 * a4));
    *(_DWORD *)(a1 + 16) = a4;
    *(_QWORD *)(a1 + 8) = v10;
  }
  *(_DWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a3;
  if (!is_mul_ok(a2, a3))
    goto LABEL_6;
  *(_QWORD *)(a1 + 48) = a2 * a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E34086F8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 72) = v11;
  LODWORD(v11) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(a1 + 80) = v11;
  LODWORD(v11) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(a1 + 84) = v11;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E34086C8;
  *(_DWORD *)(a1 + 20) = a4;
  if (a4)
  {
    if (a4 >> 29)
    {
LABEL_6:
      __break(0xC471u);
      JUMPOUT(0x196122EC0);
    }
    v10 = WTF::fastMalloc((WTF *)(8 * a4));
    *(_DWORD *)(a1 + 16) = a4;
    *(_QWORD *)(a1 + 8) = v10;
  }
  *(_DWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a3;
  if (!is_mul_ok(a2, a3))
    goto LABEL_6;
  *(_QWORD *)(a1 + 48) = a2 * a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E34086F8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 72) = v11;
  LODWORD(v11) = *((_DWORD *)a5 + 2);
  *((_DWORD *)a5 + 2) = 0;
  *(_DWORD *)(a1 + 80) = v11;
  LODWORD(v11) = *((_DWORD *)a5 + 3);
  *((_DWORD *)a5 + 3) = 0;
  *(_DWORD *)(a1 + 84) = v11;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void WebCore::InProcessCARingBuffer::~InProcessCARingBuffer(WebCore::InProcessCARingBuffer *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E34086C8;
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E34086C8;
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  v3 = (WTF *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v3, a2);
  }
  *(_QWORD *)this = off_1E34086C8;
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

WebCore::WebAudioBufferList *WebCore::WebAudioBufferList::WebAudioBufferList(WebCore::WebAudioBufferList *this, const WebCore::CAAudioStreamDescription *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  void *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  void *v15;
  uint64_t v16;

  *(_QWORD *)this = off_1E3408728;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 8);
  if ((*((_DWORD *)a2 + 5) & 0x20) != 0)
    v3 = 1;
  else
    v3 = *((_DWORD *)a2 + 9);
  *((_DWORD *)this + 5) = v3;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v4 = *((_DWORD *)a2 + 5);
  v5 = *((_DWORD *)a2 + 9);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *((_DWORD *)a2 + 9);
  if ((v4 & 0x20) != 0)
    v7 = v5;
  else
    v7 = 1;
  if ((v4 & 0x20) != 0)
    v8 = v6;
  else
    v8 = 1;
  v9 = (16 * v8) | 8;
  *((_QWORD *)this + 1) = v9;
  v10 = operator new(v9);
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v10;
  if (v11)
  {
    MEMORY[0x19AEA7644](v11, 0x1080C404ACF7207);
    v10 = (void *)*((_QWORD *)this + 4);
  }
  bzero(v10, *((_QWORD *)this + 1));
  v12 = (_DWORD *)*((_QWORD *)this + 4);
  *v12 = v7;
  if ((_DWORD)v7)
  {
    v13 = *((_DWORD *)this + 5);
    v14 = v12 + 2;
    do
    {
      *v14 = v13;
      v14 += 4;
      --v7;
    }
    while (v7);
  }
  v15 = (void *)*((_QWORD *)this + 5);
  if (!v15)
  {
    v15 = operator new(*((_QWORD *)this + 1));
    v16 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v15;
    if (v16)
    {
      MEMORY[0x19AEA7644](v16, 0x1080C404ACF7207);
      v15 = (void *)*((_QWORD *)this + 5);
    }
  }
  memcpy(v15, *((const void **)this + 4), *((_QWORD *)this + 1));
  return this;
}

WebCore::WebAudioBufferList *WebCore::WebAudioBufferList::WebAudioBufferList(WebCore::WebAudioBufferList *this, const WebCore::CAAudioStreamDescription *a2, unint64_t a3)
{
  WebCore::WebAudioBufferList *v5;

  v5 = WebCore::WebAudioBufferList::WebAudioBufferList(this, a2);
  WebCore::WebAudioBufferList::setSampleCount(v5, a3);
  return this;
}

{
  WebCore::WebAudioBufferList *v5;

  v5 = WebCore::WebAudioBufferList::WebAudioBufferList(this, a2);
  WebCore::WebAudioBufferList::setSampleCount(v5, a3);
  return this;
}

_QWORD *WebCore::WebAudioBufferList::setSampleCount(_QWORD *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  char *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;

  if (a2)
  {
    v2 = (uint64_t)this;
    if (this[3] != a2 && is_mul_ok(a2, *((unsigned int *)this + 5)))
    {
      v3 = a2 * *((unsigned int *)this + 5);
      v4 = *((unsigned int *)this + 4);
      if (is_mul_ok(v4, v3))
      {
        v5 = *(unsigned int *)this[4];
        v6 = v4 * v3;
        if (is_mul_ok(v5, v4 * v3))
        {
          v7 = v5 * v6;
          this[3] = a2;
          v8 = *((unsigned int *)this + 17);
          if (v5 * v6 > v8)
          {
            v9 = *((unsigned int *)this + 16);
            if (v7 > v9)
            {
              v10 = v9 + (v9 >> 2);
              if (v10 >= 0x10)
                v11 = v10 + 1;
              else
                v11 = 16;
              if (v11 <= v7)
                v12 = v5 * v6;
              else
                v12 = v11;
              if (HIDWORD(v12))
              {
                __break(0xC471u);
                return this;
              }
              v13 = (void *)this[7];
              v14 = (void *)WTF::fastMalloc((WTF *)v12);
              *(_DWORD *)(v2 + 64) = v12;
              *(_QWORD *)(v2 + 56) = v14;
              memcpy(v14, v13, v8);
              if (v13)
              {
                if (*(void **)(v2 + 56) == v13)
                {
                  *(_QWORD *)(v2 + 56) = 0;
                  *(_DWORD *)(v2 + 64) = 0;
                }
                WTF::fastFree((WTF *)v13, v15);
              }
            }
          }
          *(_DWORD *)(v2 + 68) = v7;
          v16 = *(char **)(v2 + 56);
          bzero(v16, v7);
          v17 = *(_DWORD **)(v2 + 32);
          if (*v17)
          {
            v18 = 0;
            v19 = 0;
            do
            {
              *(_QWORD *)&v17[v18 + 4] = v16;
              v17 = *(_DWORD **)(v2 + 32);
              v17[v18 + 3] = v6;
              v16 += v6;
              ++v19;
              v18 += 4;
            }
            while (v19 < *v17);
          }
          v20 = *(void **)(v2 + 40);
          if (!v20)
          {
            v20 = operator new(*(_QWORD *)(v2 + 8));
            v21 = *(_QWORD *)(v2 + 40);
            *(_QWORD *)(v2 + 40) = v20;
            if (v21)
            {
              MEMORY[0x19AEA7644](v21, 0x1080C404ACF7207);
              v20 = *(void **)(v2 + 40);
            }
          }
          return memcpy(v20, *(const void **)(v2 + 32), *(_QWORD *)(v2 + 8));
        }
      }
    }
  }
  return this;
}

BOOL WebCore::WebAudioBufferList::isSupportedDescription(WebCore::WebAudioBufferList *this, unint64_t a2)
{
  int v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v7;

  v2 = *((_DWORD *)this + 5);
  v3 = *((_DWORD *)this + 9);
  if ((v2 & 0x20) != 0)
    v4 = 1;
  else
    v4 = v3;
  if ((v2 & 0x20) != 0)
    v5 = v3;
  else
    v5 = 1;
  if (is_mul_ok(a2, v4) && (v7 = a2 * v4, is_mul_ok(*((unsigned int *)this + 8), v7)))
    return ((unint64_t)v5 * (unsigned __int128)(*((unsigned int *)this + 8) * v7)) >> 64 == 0;
  else
    return 0;
}

void WebCore::WebAudioBufferList::zeroFlatBuffer(void **this)
{
  bzero(this[7], *((unsigned int *)this + 17));
}

WebCore::FFTFrame *WebCore::FFTFrame::FFTFrame(WebCore::FFTFrame *this, void *a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  if ((_DWORD)a2)
  {
    WTF::fastAlignedFree(0, a2);
    v4 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *((_QWORD *)this + 4) = v4;
    *((_QWORD *)this + 5) = a2;
    bzero(v4, 4 * a2);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    WTF::fastAlignedFree(0, v5);
    v6 = (void *)WTF::fastAlignedMalloc((WTF *)0x20);
    *((_QWORD *)this + 6) = v6;
    *((_QWORD *)this + 7) = a2;
    bzero(v6, 4 * a2);
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
  }
  *(_DWORD *)this = (_DWORD)a2;
  *((_DWORD *)this + 1) = log2((double)a2);
  WebCore::FFTFrame::fftSetupForSize((WebCore::FFTFrame *)a2);
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 1) = v8;
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 3) = *((_QWORD *)this + 6);
  return this;
}

void WebCore::FFTFrame::fftSetupForSize(WebCore::FFTFrame *this)
{
  double v1;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  void *v7;

  v1 = log2((double)this);
  if (__ldaxr(WebCore::fftSetupsLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::fftSetupsLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::fftSetupsLock);
LABEL_5:
  v3 = (unint64_t)v1;
  {
    v4 = dword_1EE2F86E4;
  }
  else
  {
    WebCore::fftSetups(void)::fftSetups = 0;
    *(_QWORD *)&dword_1EE2F86E0 = 0x1800000000;
    v7 = (void *)WTF::fastMalloc((WTF *)0xC0);
    dword_1EE2F86E0 = 24;
    WebCore::fftSetups(void)::fftSetups = (uint64_t)v7;
    v4 = dword_1EE2F86E4;
    if (dword_1EE2F86E4)
      bzero(v7, 8 * dword_1EE2F86E4);
  }
  if (v4 <= v3)
  {
    __break(0xC471u);
    return;
  }
  v5 = WebCore::fftSetups(void)::fftSetups;
  if (!*(_QWORD *)(WebCore::fftSetups(void)::fftSetups + 8 * v3))
    *(_QWORD *)(v5 + 8 * v3) = vDSP_create_fftsetup((unint64_t)v1, 0);
  v6 = __ldxr(WebCore::fftSetupsLock);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, WebCore::fftSetupsLock))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::fftSetupsLock);
}

void WebCore::FFTFrame::doFFT(WebCore::FFTFrame *this, DSPComplex *__C)
{
  unint64_t v3;
  const DSPSplitComplex *v4;
  float *v5;
  float *v6;
  float __B;
  float v8;

  v3 = *(unsigned int *)this;
  v4 = (const DSPSplitComplex *)((char *)this + 16);
  vDSP_ctoz(__C, 2, (const DSPSplitComplex *)this + 1, 1, v3 >> 1);
  vDSP_fft_zrip(*((FFTSetup *)this + 1), v4, 1, *((unsigned int *)this + 1), 1);
  if (*((_QWORD *)this + 5) < v3 >> 1 || *((_QWORD *)this + 7) < v3 >> 1)
  {
    __break(0xC471u);
    JUMPOUT(0x196123610);
  }
  v5 = (float *)*((_QWORD *)this + 4);
  __B = 0.5;
  vDSP_vsmul(v5, 1, &__B, v5, 1, v3 >> 1);
  v6 = (float *)*((_QWORD *)this + 6);
  v8 = 0.5;
  vDSP_vsmul(v6, 1, &v8, v6, 1, v3 >> 1);
}

uint64_t WebCore::CalcExpressionBlendLength::CalcExpressionBlendLength(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  WebCore::Length *v7;
  unsigned int v8;
  int v9;
  _DWORD *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v19;
  int v20;

  *(_BYTE *)(a1 + 8) = 6;
  *(_QWORD *)a1 = off_1E3408750;
  *(_DWORD *)(a1 + 12) = 0;
  v7 = (WebCore::Length *)(a1 + 12);
  *(_WORD *)(a1 + 17) = 0;
  v8 = *(unsigned __int8 *)(a2 + 4);
  *(_BYTE *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 5);
  if (v8 <= 0xD)
  {
    v9 = 1 << v8;
    if ((v9 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 6);
      *(_DWORD *)v7 = *(_DWORD *)a2;
    }
    else if ((v9 & 0x3003) != 0)
    {
      *(_DWORD *)v7 = 0;
    }
    else
    {
      *(_DWORD *)v7 = *(_DWORD *)a2;
      WebCore::Length::ref((int *)(a1 + 12));
    }
  }
  *(_DWORD *)(a1 + 20) = 0;
  v10 = (_DWORD *)(a1 + 20);
  *(_WORD *)(a1 + 25) = 0;
  v11 = *(unsigned __int8 *)(a3 + 4);
  *(_BYTE *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a3 + 5);
  if (v11 <= 0xD)
  {
    v12 = 1 << v11;
    if ((v12 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 26) = *(_BYTE *)(a3 + 6);
      *v10 = *(_DWORD *)a3;
    }
    else if ((v12 & 0x3003) != 0)
    {
      *v10 = 0;
    }
    else
    {
      *v10 = *(_DWORD *)a3;
      WebCore::Length::ref((int *)(a1 + 20));
    }
  }
  *(double *)(a1 + 32) = a4;
  if (*(_BYTE *)(a1 + 16) == 11)
  {
    v13 = *(_QWORD *)(WebCore::Length::calculationValue(v7) + 8);
    if (v13)
    {
      if (*(_BYTE *)(v13 + 8) == 6 && v13 != a1)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 12));
        v15 = *(unsigned __int8 *)(v13 + 16);
        *(_BYTE *)(a1 + 16) = v15;
        *(_BYTE *)(a1 + 17) = *(_BYTE *)(v13 + 17);
        if (v15 <= 0xD)
        {
          v16 = 1 << v15;
          if ((v16 & 0x7FC) != 0)
          {
            *(_BYTE *)(a1 + 18) = *(_BYTE *)(v13 + 18);
            *(_DWORD *)v7 = *(_DWORD *)(v13 + 12);
          }
          else if ((v16 & 0x3003) != 0)
          {
            *(_DWORD *)v7 = 0;
          }
          else
          {
            *(_DWORD *)v7 = *(_DWORD *)(v13 + 12);
            WebCore::Length::ref((int *)v7);
          }
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 24) == 11)
  {
    v17 = *(_QWORD *)(WebCore::Length::calculationValue((WebCore::Length *)(a1 + 20)) + 8);
    if (v17)
    {
      if (*(_BYTE *)(v17 + 8) == 6 && v17 != a1)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(a1 + 20));
        v19 = *(unsigned __int8 *)(v17 + 24);
        *(_BYTE *)(a1 + 24) = v19;
        *(_BYTE *)(a1 + 25) = *(_BYTE *)(v17 + 25);
        if (v19 <= 0xD)
        {
          v20 = 1 << v19;
          if ((v20 & 0x7FC) != 0)
          {
            *(_BYTE *)(a1 + 26) = *(_BYTE *)(v17 + 26);
            *v10 = *(_DWORD *)(v17 + 20);
          }
          else if ((v20 & 0x3003) != 0)
          {
            *v10 = 0;
          }
          else
          {
            *v10 = *(_DWORD *)(v17 + 20);
            WebCore::Length::ref((int *)(a1 + 20));
          }
        }
      }
    }
  }
  return a1;
}

float WebCore::CalcExpressionBlendLength::evaluate(WebCore::CalcExpressionBlendLength *this, float a2)
{
  double v2;
  float *v3;
  double v4;
  float v5;
  float v6;
  float *v7;
  float v8;
  float v10;
  double *v11;
  double v12;
  float v13;
  float v14;
  double v15;
  double v16;

  v2 = *((double *)this + 4);
  v3 = (float *)((char *)this + 12);
  v4 = v2;
  v5 = a2;
  switch(*((_BYTE *)this + 16))
  {
    case 0:
    case 1:
    case 9:
      goto LABEL_9;
    case 3:
      v6 = *((float *)this + 3);
      if (!*((_BYTE *)this + 18))
        v6 = (float)SLODWORD(v6);
      v5 = (float)(v6 * a2) / 100.0;
      goto LABEL_8;
    case 4:
      if (*((_BYTE *)this + 18))
        v5 = *v3;
      else
        v5 = (float)*(int *)v3;
      goto LABEL_8;
    case 0xB:
      v11 = (double *)this;
      v13 = a2;
      v15 = *((double *)this + 4);
      WebCore::Length::nonNanCalculatedValue((WebCore::CalcExpressionBlendLength *)((char *)this + 12), a2);
      v2 = v15;
      this = (WebCore::CalcExpressionBlendLength *)v11;
      v5 = v10;
      a2 = v13;
      v4 = v11[4];
      goto LABEL_9;
    default:
      v5 = 0.0;
LABEL_8:
      v4 = *((double *)this + 4);
LABEL_9:
      v7 = (float *)((char *)this + 20);
      switch(*((_BYTE *)this + 24))
      {
        case 0:
        case 1:
        case 9:
          return v4 * a2 + (1.0 - v2) * v5;
        case 3:
          v8 = *((float *)this + 5);
          if (!*((_BYTE *)this + 26))
            v8 = (float)SLODWORD(v8);
          a2 = (float)(v8 * a2) / 100.0;
          break;
        case 4:
          if (*((_BYTE *)this + 26))
            a2 = *v7;
          else
            a2 = (float)*(int *)v7;
          break;
        case 0xB:
          v14 = v5;
          v16 = v2;
          v12 = v4;
          WebCore::Length::nonNanCalculatedValue((WebCore::CalcExpressionBlendLength *)((char *)this + 20), a2);
          v4 = v12;
          v2 = v16;
          v5 = v14;
          break;
        default:
          a2 = 0.0;
          break;
      }
      return v4 * a2 + (1.0 - v2) * v5;
  }
}

uint64_t WebCore::CalcExpressionBlendLength::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;
  float v4;
  int v5;
  float v6;
  float v7;
  char isCalculatedEqual;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(a2 + 8) != 6)
    return 0;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != *(unsigned __int8 *)(a2 + 16) || (*(_BYTE *)(a1 + 17) != 0) != (*(_BYTE *)(a2 + 17) != 0))
    return 0;
  if (v2 != 13)
  {
    if (v2 == 11)
    {
      v10 = a2;
      v11 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 12), (const WebCore::Length *)(a2 + 12));
      a2 = v10;
      a1 = v11;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      v3 = *(float *)(a1 + 12);
      if (!*(_BYTE *)(a1 + 18))
        v3 = (float)SLODWORD(v3);
      v4 = *(float *)(a2 + 12);
      if (!*(_BYTE *)(a2 + 18))
        v4 = (float)SLODWORD(v4);
      if (v3 != v4)
        return 0;
    }
  }
  v5 = *(unsigned __int8 *)(a1 + 24);
  if (v5 != *(unsigned __int8 *)(a2 + 24) || (*(_BYTE *)(a1 + 25) != 0) != (*(_BYTE *)(a2 + 25) != 0))
    return 0;
  if (v5 == 13)
    return 1;
  if (v5 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 20), (const WebCore::Length *)(a2 + 20));
  v6 = *(float *)(a1 + 20);
  if (!*(_BYTE *)(a1 + 26))
    v6 = (float)*(int *)(a1 + 20);
  v7 = *(float *)(a2 + 20);
  if (!*(_BYTE *)(a2 + 26))
    v7 = (float)SLODWORD(v7);
  return v6 == v7;
}

int *WebCore::CalcExpressionBlendLength::dump(WebCore::CalcExpressionBlendLength *this, WTF::TextStream *a2)
{
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  int *result;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  char v16;
  char v17;

  v3 = WTF::TextStream::operator<<();
  v14 = 0;
  v17 = 0;
  v15 = *((_BYTE *)this + 16);
  v4 = v15;
  v16 = *((_BYTE *)this + 17);
  if (v15 - 2 >= 9)
  {
    v5 = 0;
    if (v15 == 11)
    {
      v5 = (void *)*((unsigned int *)this + 3);
      v14 = *((_DWORD *)this + 3);
      WebCore::Length::ref((int *)&v14);
    }
  }
  else
  {
    v17 = *((_BYTE *)this + 18);
    if (v17)
    {
      v14 = *((_DWORD *)this + 3);
      v5 = (void *)v14;
    }
    else
    {
      v5 = (void *)*((unsigned int *)this + 3);
      v14 = *((_DWORD *)this + 3);
    }
  }
  WebCore::operator<<(v3, (WebCore::Length *)&v14);
  v6 = WTF::TextStream::operator<<();
  v10 = 0;
  v13 = 0;
  v11 = *((_BYTE *)this + 24);
  v7 = v11;
  v12 = *((_BYTE *)this + 25);
  if (v11 - 2 >= 9)
  {
    v8 = 0;
    if (v11 == 11)
    {
      v8 = (void *)*((unsigned int *)this + 5);
      v10 = *((_DWORD *)this + 5);
      WebCore::Length::ref((int *)&v10);
    }
  }
  else
  {
    v13 = *((_BYTE *)this + 26);
    if (v13)
    {
      v10 = *((_DWORD *)this + 5);
      v8 = (void *)v10;
    }
    else
    {
      v8 = (void *)*((unsigned int *)this + 5);
      v10 = *((_DWORD *)this + 5);
    }
  }
  WebCore::operator<<(v6, (WebCore::Length *)&v10);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  result = (int *)WTF::TextStream::operator<<();
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v8);
  }
  if (v4 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v5);
  }
  return result;
}

float WebCore::CalcExpressionInversion::evaluate(WebCore::CalcExpressionInversion *this, float a2)
{
  return 1.0 / (*(float (**)(_QWORD, float))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), a2);
}

uint64_t WebCore::CalcExpressionInversion::dump(WebCore::CalcExpressionInversion *this, WTF::TextStream *a2)
{
  uint64_t v3;

  WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), v3);
  return WTF::TextStream::operator<<();
}

uint64_t WebCore::CalcExpressionInversion::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 8) == 5)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  else
    return 0;
}

uint64_t WebCore::InProcessCARingBuffer::data(WebCore::InProcessCARingBuffer *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t WebCore::InProcessCARingBuffer::timeBoundsBuffer(WebCore::InProcessCARingBuffer *this)
{
  return (uint64_t)this + 88;
}

void WebCore::CalcExpressionBlendLength::~CalcExpressionBlendLength(WebCore::CalcExpressionBlendLength *this)
{
  if (*((_BYTE *)this + 24) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 5));
  }
  if (*((_BYTE *)this + 16) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 3));
  }
}

void WebCore::CalcExpressionBlendLength::~CalcExpressionBlendLength(WebCore::CalcExpressionBlendLength *this, void *a2)
{
  if (*((_BYTE *)this + 24) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 5));
  }
  if (*((_BYTE *)this + 16) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 3));
  }
  WTF::fastFree(this, a2);
}

void WebCore::CalcExpressionInversion::~CalcExpressionInversion(WebCore::CalcExpressionInversion *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::CalcExpressionInversion::~CalcExpressionInversion(WebCore::CalcExpressionInversion *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

void WebCore::WebAudioBufferList::~WebAudioBufferList(WebCore::WebAudioBufferList *this, void *a2)
{
  WTF *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (WTF *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    MEMORY[0x19AEA7644](v5, 0x1080C404ACF7207);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    MEMORY[0x19AEA7644](v6, 0x1080C404ACF7207);
}

{
  WTF *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (WTF *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
    MEMORY[0x19AEA7644](v5, 0x1080C404ACF7207);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    MEMORY[0x19AEA7644](v6, 0x1080C404ACF7207);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebAudioBufferList::kind(WebCore::WebAudioBufferList *this)
{
  return 1;
}

float WebCore::CalcExpressionLength::evaluate(WebCore::CalcExpressionLength *this, float result)
{
  float *v2;
  float v3;

  v2 = (float *)((char *)this + 12);
  switch(*((_BYTE *)this + 16))
  {
    case 0:
    case 1:
    case 9:
      return result;
    case 3:
      v3 = *((float *)this + 3);
      if (!*((_BYTE *)this + 18))
        v3 = (float)SLODWORD(v3);
      result = (float)(v3 * result) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 18))
        result = *v2;
      else
        result = (float)*(int *)v2;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue((WebCore::CalcExpressionLength *)((char *)this + 12), result);
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

uint64_t WebCore::CalcExpressionLength::operator==(unsigned __int8 *a1, float *a2)
{
  int v2;
  float v3;
  float v4;

  if (*((_BYTE *)a2 + 8) != 2)
    return 0;
  v2 = a1[16];
  if (v2 != *((unsigned __int8 *)a2 + 16) || (a1[17] != 0) != (*((_BYTE *)a2 + 17) != 0))
    return 0;
  if (v2 == 13)
    return 1;
  if (v2 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 12), (const WebCore::Length *)(a2 + 3));
  v3 = *((float *)a1 + 3);
  if (!a1[18])
    v3 = (float)*((int *)a1 + 3);
  v4 = a2[3];
  if (!*((_BYTE *)a2 + 18))
    v4 = (float)SLODWORD(v4);
  return v3 == v4;
}

int *WebCore::CalcExpressionLength::dump(WebCore::CalcExpressionLength *this, WTF::TextStream *a2)
{
  void *v4;
  int v5;
  unsigned __int8 v6;
  char v7;
  char v8;

  v5 = 0;
  v8 = 0;
  v6 = *((_BYTE *)this + 16);
  v7 = *((_BYTE *)this + 17);
  if (v6 - 2 < 9)
  {
    v8 = *((_BYTE *)this + 18);
    v5 = *((_DWORD *)this + 3);
    return (int *)WebCore::operator<<((uint64_t)a2, (WebCore::Length *)&v5);
  }
  if (v6 != 11)
    return (int *)WebCore::operator<<((uint64_t)a2, (WebCore::Length *)&v5);
  v4 = (void *)*((unsigned int *)this + 3);
  v5 = *((_DWORD *)this + 3);
  WebCore::Length::ref(&v5);
  WebCore::operator<<((uint64_t)a2, (WebCore::Length *)&v5);
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v4);
}

float WebCore::CalcExpressionNegation::evaluate(WebCore::CalcExpressionNegation *this, float a2)
{
  return -(*(float (**)(_QWORD, float))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), a2);
}

uint64_t WebCore::CalcExpressionNegation::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 8) == 4)
    return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
  else
    return 0;
}

uint64_t WebCore::CalcExpressionNegation::dump(WebCore::CalcExpressionNegation *this, WTF::TextStream *a2)
{
  uint64_t v3;

  v3 = WTF::TextStream::operator<<();
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), v3);
  return WTF::TextStream::operator<<();
}

float WebCore::CalcExpressionNumber::evaluate(WebCore::CalcExpressionNumber *this, float a2)
{
  return *((float *)this + 3);
}

uint64_t WebCore::CalcExpressionNumber::dump(WebCore::CalcExpressionNumber *this, WTF::TextStream *a2)
{
  return WTF::TextStream::operator<<();
}

BOOL WebCore::CalcExpressionNumber::operator==(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 8) == 1 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
}

float WebCore::CalcExpressionOperation::evaluate(WebCore::CalcExpressionOperation *this, __n128 a2)
{
  float v2;
  double v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  float v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  double v19;
  unint64_t v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  float v38;
  float v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  BOOL v49;
  double v50;
  double v51;
  float v52;
  float v53;
  float v54;
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  BOOL v76;
  BOOL v77;
  double v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  float v83;
  float v84;
  float v85;
  float v86;
  long double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  float v93;
  float v94;
  float v95;
  double v97;
  double v98;
  float v99;
  float v100;
  float v101;
  float v102;
  double v103;

  v2 = a2.n128_f32[0];
  v4 = 0.0;
  if (*((_BYTE *)this + 32) == 43)
  {
    v5 = *((unsigned int *)this + 7);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)*((_QWORD *)this + 2);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        v4 = v4 + (*(float (**)(uint64_t, float))(*(_QWORD *)v8 + 16))(v8, v2);
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    switch(*((_BYTE *)this + 32))
    {
      case 0:
        if (!*((_DWORD *)this + 7))
          goto LABEL_131;
        v10 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        v11 = *((unsigned int *)this + 7);
        if ((_DWORD)v11)
        {
          v12 = (_QWORD *)*((_QWORD *)this + 2);
          v13 = 8 * v11;
          do
          {
            (*(void (**)(_QWORD, float))(*(_QWORD *)*v12 + 16))(*v12, v2);
            if (v14 < v10)
              v10 = v14;
            ++v12;
            v13 -= 8;
          }
          while (v13);
        }
        return v10;
      case 1:
        if (!*((_DWORD *)this + 7))
          goto LABEL_131;
        v10 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        v35 = *((unsigned int *)this + 7);
        if ((_DWORD)v35)
        {
          v36 = (_QWORD *)*((_QWORD *)this + 2);
          v37 = 8 * v35;
          do
          {
            (*(void (**)(_QWORD, float))(*(_QWORD *)*v36 + 16))(*v36, v2);
            if (v10 < v38)
              v10 = v38;
            ++v36;
            v37 -= 8;
          }
          while (v37);
        }
        return v10;
      case 2:
        if (*((_DWORD *)this + 7) != 3)
          goto LABEL_131;
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124F90);
        }
        v31 = v30;
        (*(void (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        if (*((_DWORD *)this + 7) <= 2u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124F98);
        }
        v33 = v32;
        (*(void (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 16) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 16), v2);
        if (v25 >= v33)
          v25 = v33;
        if (v25 <= v31)
          return v31;
        return v25;
      case 3:
        if (*((_DWORD *)this + 7) != 2)
          goto LABEL_131;
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124FB8);
        }
        v68 = v67;
        v69 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        return powf(v68, v69);
      case 4:
        if (*((_DWORD *)this + 7) != 1)
          goto LABEL_131;
        return sqrtf((*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]));
      case 5:
        v40 = *((unsigned int *)this + 7);
        if (!(_DWORD)v40)
          goto LABEL_131;
        if ((_DWORD)v40 == 1)
          return fabsf((*(float (**)(_QWORD, __n128))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2));
        v41 = (uint64_t *)*((_QWORD *)this + 2);
        v42 = 8 * v40;
        do
        {
          v43 = *v41++;
          v44 = (*(float (**)(uint64_t, float))(*(_QWORD *)v43 + 16))(v43, v2);
          v4 = v4 + (float)(v44 * v44);
          v42 -= 8;
        }
        while (v42);
        return sqrt(v4);
      case 6:
        if (*((_DWORD *)this + 7) != 1)
          goto LABEL_131;
        v70 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        return sinf(v70);
      case 7:
        if (*((_DWORD *)this + 7) != 1)
          goto LABEL_131;
        v34 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        return cosf(v34);
      case 8:
        if (*((_DWORD *)this + 7) != 1)
          goto LABEL_131;
        v18 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        v19 = fmod(v18, 6.28318531);
        if (v19 < 0.0)
          v19 = v19 + 6.28318531;
        if (v19 == 1.57079633)
        {
          *(double *)&v20 = INFINITY;
          return *(double *)&v20;
        }
        if (v19 == 4.71238898)
        {
          *(double *)&v20 = -INFINITY;
          return *(double *)&v20;
        }
        return tan(v19);
      case 9:
        if (*((_DWORD *)this + 7) != 1)
          goto LABEL_131;
        v29 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        return expf(v29);
      case 0xA:
        v55 = *((_DWORD *)this + 7);
        if (v55 == 2)
        {
          (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
          if (*((_DWORD *)this + 7) <= 1u)
          {
            __break(0xC471u);
            JUMPOUT(0x196124FD8);
          }
          v23 = logf(v99);
          v100 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
          v24 = logf(v100);
          return v23 / v24;
        }
        else
        {
          if (v55 != 1)
            goto LABEL_131;
          v56 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
          return logf(v56);
        }
      case 0xB:
        if (*((_DWORD *)this + 7) != 1)
          goto LABEL_131;
        v83 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        v16 = asinf(v83);
        return v16 * 57.296;
      case 0xC:
        if (*((_DWORD *)this + 7) != 1)
          goto LABEL_131;
        v17 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        v16 = acosf(v17);
        return v16 * 57.296;
      case 0xD:
        if (*((_DWORD *)this + 7) != 1)
          goto LABEL_131;
        v15 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        v16 = atanf(v15);
        return v16 * 57.296;
      case 0xE:
        if (*((_DWORD *)this + 7) != 2)
          goto LABEL_131;
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124FA8);
        }
        v53 = v52;
        v54 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        v16 = atan2f(v53, v54);
        return v16 * 57.296;
      case 0xF:
        if (*((_DWORD *)this + 7) == 1)
          return fabsf((*(float (**)(_QWORD, __n128))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2));
        goto LABEL_131;
      case 0x10:
        if (*((_DWORD *)this + 7) != 1)
          goto LABEL_131;
        v75 = (*(float (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        v76 = v75 < 0.0;
        v77 = v75 <= 0.0;
        v78 = v75;
        if (v76)
          v78 = -1.0;
        if (v77)
          return v78;
        else
          return 1.0;
      case 0x11:
        if (*((_DWORD *)this + 7) != 2)
          goto LABEL_131;
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124FC0);
        }
        v72 = v71;
        v73 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        if (fabsf(v73) == INFINITY)
        {
          v74 = v73;
          if ((LODWORD(v73) ^ LODWORD(v72)) < 0)
          {
LABEL_131:
            *(double *)&v20 = NAN;
            return *(double *)&v20;
          }
        }
        else
        {
          v74 = v73;
        }
        v101 = fmodf(v72, v73);
        v102 = -0.0;
        if ((LODWORD(v74) ^ LODWORD(v101)) < 0)
          v102 = v73;
        return v101 + v102;
      case 0x12:
        if (*((_DWORD *)this + 7) != 2)
          goto LABEL_131;
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124F88);
        }
        v27 = v26;
        v28 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        if (v28 == 0.0)
          goto LABEL_131;
        return fmodf(v27, v28);
      case 0x13:
        goto LABEL_131;
      case 0x14:
        if (*((_DWORD *)this + 7) != 2)
          goto LABEL_131;
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124FC8);
        }
        v58 = v84;
        v85 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        v86 = fabsf(v85);
        if (fabsf(v58) != INFINITY && v86 == INFINITY)
          goto LABEL_140;
        v88 = v58;
        v89 = v85;
        v49 = fmod(v88, v85) == 0.0;
        v90 = v88;
        v91 = v88;
        if (!v49)
        {
          v92 = fabs(v89);
          v90 = v92 * floor(v88 / v92);
          v91 = v92 + v90;
        }
        if (vabdd_f64(v91, v88) <= (float)(v86 * 0.5))
          return v91;
        else
          return v90;
      case 0x15:
        if (*((_DWORD *)this + 7) != 2)
          goto LABEL_131;
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124FA0);
        }
        v46 = v45;
        v47 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        v48 = fabsf(v47);
        v49 = fabsf(v46) != INFINITY && v48 == INFINITY;
        if (!v49)
        {
          v4 = v46;
          v50 = v47;
          if (fmod(v4, v47) != 0.0)
          {
            v51 = fabs(v50);
            return v51 + v51 * floor(v4 / v51);
          }
          return v4;
        }
        v103 = INFINITY;
        if (v46 < 0.0)
          v103 = -0.0;
        goto LABEL_151;
      case 0x16:
        if (*((_DWORD *)this + 7) != 2)
          goto LABEL_131;
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124FD0);
        }
        v46 = v93;
        v94 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        v95 = fabsf(v94);
        if (fabsf(v46) != INFINITY && v95 == INFINITY)
        {
          v103 = -INFINITY;
          if (v46 >= 0.0)
            v103 = 0.0;
LABEL_151:
          if (v46 == 0.0)
            v4 = v46;
          else
            v4 = v103;
        }
        else
        {
          v4 = v46;
          v97 = v94;
          if (fmod(v4, v94) != 0.0)
          {
            v98 = fabs(v97);
            v4 = v98 * floor(v4 / v98);
          }
        }
        break;
      case 0x17:
        if (*((_DWORD *)this + 7) != 2)
          goto LABEL_131;
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124FB0);
        }
        v58 = v57;
        v59 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        v60 = fabsf(v59);
        if (fabsf(v58) != INFINITY && v60 == INFINITY)
        {
LABEL_140:
          if (v58 >= 0.0)
            return 0.0;
          else
            return -0.0;
        }
        else
        {
          v62 = v58;
          v63 = v59;
          if (fmod(v62, v59) == 0.0)
          {
            v66 = v62;
          }
          else
          {
            v64 = fabs(v63);
            v65 = floor(v62 / v64);
            v62 = v64 * v65;
            v66 = v64 + v64 * v65;
          }
          if (fabs(v66) >= fabs(v62))
            return v62;
          else
            return v66;
        }
      case 0x2A:
        v79 = *((unsigned int *)this + 7);
        if ((_DWORD)v79)
        {
          v80 = (uint64_t *)*((_QWORD *)this + 2);
          v81 = 8 * v79;
          v4 = 1.0;
          do
          {
            v82 = *v80++;
            v4 = v4 * (*(float (**)(uint64_t, float))(*(_QWORD *)v82 + 16))(v82, v2);
            v81 -= 8;
          }
          while (v81);
        }
        else
        {
          return 1.0;
        }
        return v4;
      case 0x2D:
        if (!*((_DWORD *)this + 7))
        {
          __break(0xC471u);
          JUMPOUT(0x196124F70);
        }
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124F78);
        }
        return v39
             - (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
      case 0x2F:
        v21 = *((_DWORD *)this + 7);
        if (v21 == 1)
          goto LABEL_131;
        if (!v21)
        {
          __break(0xC471u);
          JUMPOUT(0x196124F68);
        }
        (*(void (**)(_QWORD, float))(***((_QWORD ***)this + 2) + 16))(**((_QWORD **)this + 2), a2.n128_f32[0]);
        if (*((_DWORD *)this + 7) <= 1u)
        {
          __break(0xC471u);
          JUMPOUT(0x196124F80);
        }
        v23 = v22;
        v24 = (*(float (**)(_QWORD, float))(**(_QWORD **)(*((_QWORD *)this + 2) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 2) + 8), v2);
        return v23 / v24;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t WebCore::CalcExpressionOperation::operator==(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  if (*(_BYTE *)(a2 + 8) != 3)
    return 0;
  v3 = result;
  if (*(unsigned __int8 *)(result + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  if (*(unsigned __int8 *)(result + 33) != *(unsigned __int8 *)(a2 + 33))
    return 0;
  v4 = *(_DWORD *)(result + 28);
  if (v4 != *(_DWORD *)(a2 + 28))
    return 0;
  if (!v4)
    return 1;
  v5 = 0;
  while (v5 < *(unsigned int *)(a2 + 28))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v5);
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(v6, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v5));
    if ((result & 1) != 0 && ++v5 < *(unsigned int *)(v3 + 28))
      continue;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::CalcExpressionOperation::dump(WebCore::CalcExpressionOperation *this, WTF::TextStream *a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v4 = *((unsigned __int8 *)this + 32);
  if (v4 > 1)
  {
    if (!*((_DWORD *)this + 7))
    {
      __break(0xC471u);
      JUMPOUT(0x196125278);
    }
    WTF::TextStream::operator<<();
    v8 = WTF::TextStream::operator<<();
    WebCore::operator<<(v8, *((unsigned __int8 *)this + 32));
    WTF::TextStream::operator<<();
    if (*((_DWORD *)this + 7) <= 1u)
      goto LABEL_14;
    return WTF::TextStream::operator<<();
  }
  else
  {
    WebCore::operator<<((uint64_t)a2, v4);
    WTF::TextStream::operator<<();
    v5 = *((unsigned int *)this + 7);
    if ((_DWORD)v5)
    {
      v6 = 0;
      while (v6 < *((unsigned int *)this + 7))
      {
        WTF::TextStream::operator<<();
        if (v6 < v5 - 1)
          WTF::TextStream::operator<<();
        if (v5 == ++v6)
          return WTF::TextStream::operator<<();
      }
LABEL_14:
      __break(0xC471u);
      JUMPOUT(0x196125270);
    }
    return WTF::TextStream::operator<<();
  }
}

uint64_t WebCore::CalculationValue::create@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  result = WTF::fastMalloc((WTF *)0x18);
  v7 = *a1;
  *a1 = 0;
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2 == 1;
  *a3 = result;
  return result;
}

void WebCore::CalculationValue::~CalculationValue(WebCore::CalculationValue *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

float WebCore::CalculationValue::evaluate(WebCore::CalculationValue *this, float a2)
{
  float result;
  BOOL v4;

  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1), a2);
  if (*((_BYTE *)this + 16))
    v4 = result < 0.0;
  else
    v4 = 0;
  if (v4)
    return 0.0;
  return result;
}

void WebCore::CalcExpressionLength::~CalcExpressionLength(WebCore::CalcExpressionLength *this)
{
  if (*((_BYTE *)this + 16) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 3));
  }
}

void WebCore::CalcExpressionLength::~CalcExpressionLength(WebCore::CalcExpressionLength *this, void *a2)
{
  if (*((_BYTE *)this + 16) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 3));
  }
  WTF::fastFree(this, a2);
}

void WebCore::CalcExpressionNegation::~CalcExpressionNegation(WebCore::CalcExpressionNegation *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::CalcExpressionNegation::~CalcExpressionNegation(WebCore::CalcExpressionNegation *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

void WebCore::CalcExpressionOperation::~CalcExpressionOperation(WebCore::CalcExpressionOperation *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 2);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 2);
    v5 = 8 * v3;
    do
    {
      v6 = *v4;
      *v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 2);
  if (v7)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v7, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::KeyedDecoder::decoder@<X0>(const UInt8 *a1@<X0>, CFIndex a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x140);
  result = WebCore::KeyedDecoderCF::KeyedDecoderCF(v6, a1, a2);
  *a3 = result;
  return result;
}

uint64_t WebCore::KeyedDecoderCF::KeyedDecoderCF(uint64_t a1, const UInt8 *a2, CFIndex a3)
{
  char **v4;
  const __CFAllocator *v5;
  const __CFData *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  CFTypeID v9;
  const __CFDictionary *v10;
  const void *v11;
  CFDictionaryRef v12;
  uint64_t v13;
  char *v14;
  CFDictionaryRef v16;

  *(_QWORD *)a1 = off_1E3408AA0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  v4 = (char **)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 16;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_QWORD *)(a1 + 168) = 16;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v7 = (const __CFDictionary *)CFPropertyListCreateWithData(v5, v6, 0, 0, 0);
  v8 = v7;
  if (v7 && (v9 = CFGetTypeID(v7), v9 == CFDictionaryGetTypeID()))
  {
    v10 = 0;
    v11 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v12 = v8;
    v8 = 0;
    if (!v11)
      goto LABEL_7;
  }
  else
  {
    v12 = CFDictionaryCreate(v5, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v11 = *(const void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v12;
    v10 = v8;
    if (!v11)
      goto LABEL_7;
  }
  CFRelease(v11);
  v12 = *(CFDictionaryRef *)(a1 + 8);
  v8 = v10;
LABEL_7:
  v16 = v12;
  v13 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v13 == *(_DWORD *)(a1 + 24))
  {
    v14 = WTF::Vector<__CFDictionary const*,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v13 + 1, (unint64_t)&v16);
    v13 = *(unsigned int *)(a1 + 28);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v13) = *(_QWORD *)v14;
  }
  else
  {
    *(_QWORD *)&(*v4)[8 * v13] = v12;
  }
  *(_DWORD *)(a1 + 28) = v13 + 1;
  if (v8)
    CFRelease(v8);
  if (v6)
    CFRelease(v6);
  return a1;
}

void WebCore::KeyedDecoderCF::~KeyedDecoderCF(WebCore::KeyedDecoderCF *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v6;
  const void *v8;

  v3 = (WTF *)*((_QWORD *)this + 38);
  if (v3)
  {
    *((_QWORD *)this + 38) = 0;
    *((_DWORD *)this + 78) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 20);
  if ((WebCore::KeyedDecoderCF *)((char *)this + 176) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::KeyedDecoderCF *)((char *)this + 32) != v6 && v6 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v6, a2);
  }
  v8 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    CFRelease(v8);
}

{
  WTF *v3;
  WTF *v4;
  WTF *v6;
  const void *v8;

  v3 = (WTF *)*((_QWORD *)this + 38);
  if (v3)
  {
    *((_QWORD *)this + 38) = 0;
    *((_DWORD *)this + 78) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 20);
  if ((WebCore::KeyedDecoderCF *)((char *)this + 176) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v4, a2);
  }
  v6 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::KeyedDecoderCF *)((char *)this + 32) != v6 && v6 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v6, a2);
  }
  v8 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    CFRelease(v8);
  WTF::fastFree(this, a2);
}

BOOL WebCore::KeyedDecoderCF::decodeBytes(_BOOL8 result, WTF::String *this, const UInt8 **a3)
{
  uint64_t v3;
  const __CFDictionary *v5;
  const __CFData *Value;
  const __CFData *v7;
  CFTypeID v8;
  const UInt8 *BytePtr;
  CFIndex Length;
  void *key;

  v3 = *(unsigned int *)(result + 28);
  if ((_DWORD)v3)
  {
    v5 = *(const __CFDictionary **)(*(_QWORD *)(result + 16) + 8 * v3 - 8);
    WTF::String::createCFString(this);
    Value = (const __CFData *)CFDictionaryGetValue(v5, key);
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFDataGetTypeID())
        v7 = 0;
    }
    if (key)
      CFRelease(key);
    if (v7)
    {
      BytePtr = CFDataGetBytePtr(v7);
      Length = CFDataGetLength(v7);
      *a3 = BytePtr;
      a3[1] = (const UInt8 *)Length;
    }
    return v7 != 0;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

BOOL WebCore::KeyedDecoderCF::decodeBool(_BOOL8 this, const WTF::String *a2, BOOL *a3)
{
  uint64_t v3;
  const __CFDictionary *v5;
  const __CFBoolean *Value;
  const __CFBoolean *v7;
  CFTypeID v8;
  void *key;

  v3 = *(unsigned int *)(this + 28);
  if ((_DWORD)v3)
  {
    v5 = *(const __CFDictionary **)(*(_QWORD *)(this + 16) + 8 * v3 - 8);
    WTF::String::createCFString(a2);
    Value = (const __CFBoolean *)CFDictionaryGetValue(v5, key);
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFBooleanGetTypeID())
        v7 = 0;
    }
    if (key)
      CFRelease(key);
    if (v7)
      *a3 = CFBooleanGetValue(v7) != 0;
    return v7 != 0;
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

BOOL WebCore::KeyedDecoderCF::decodeInt32(_BOOL8 this, const WTF::String *a2, int *a3)
{
  uint64_t v3;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  void *key;

  v3 = *(unsigned int *)(this + 28);
  if ((_DWORD)v3)
  {
    v5 = *(const __CFDictionary **)(*(_QWORD *)(this + 16) + 8 * v3 - 8);
    WTF::String::createCFString(a2);
    Value = (const __CFNumber *)CFDictionaryGetValue(v5, key);
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFNumberGetTypeID())
        v7 = 0;
    }
    if (key)
      CFRelease(key);
    return v7 && CFNumberGetValue(v7, kCFNumberSInt32Type, a3) != 0;
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

BOOL WebCore::KeyedDecoderCF::decodeInt64(_BOOL8 this, const WTF::String *a2, uint64_t *a3)
{
  uint64_t v3;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  void *key;

  v3 = *(unsigned int *)(this + 28);
  if ((_DWORD)v3)
  {
    v5 = *(const __CFDictionary **)(*(_QWORD *)(this + 16) + 8 * v3 - 8);
    WTF::String::createCFString(a2);
    Value = (const __CFNumber *)CFDictionaryGetValue(v5, key);
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFNumberGetTypeID())
        v7 = 0;
    }
    if (key)
      CFRelease(key);
    return v7 && CFNumberGetValue(v7, kCFNumberSInt64Type, a3) != 0;
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

BOOL WebCore::KeyedDecoderCF::decodeFloat(_BOOL8 this, const WTF::String *a2, float *a3)
{
  uint64_t v3;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  void *key;

  v3 = *(unsigned int *)(this + 28);
  if ((_DWORD)v3)
  {
    v5 = *(const __CFDictionary **)(*(_QWORD *)(this + 16) + 8 * v3 - 8);
    WTF::String::createCFString(a2);
    Value = (const __CFNumber *)CFDictionaryGetValue(v5, key);
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFNumberGetTypeID())
        v7 = 0;
    }
    if (key)
      CFRelease(key);
    return v7 && CFNumberGetValue(v7, kCFNumberFloatType, a3) != 0;
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

BOOL WebCore::KeyedDecoderCF::decodeDouble(_BOOL8 this, const WTF::String *a2, double *a3)
{
  uint64_t v3;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  void *key;

  v3 = *(unsigned int *)(this + 28);
  if ((_DWORD)v3)
  {
    v5 = *(const __CFDictionary **)(*(_QWORD *)(this + 16) + 8 * v3 - 8);
    WTF::String::createCFString(a2);
    Value = (const __CFNumber *)CFDictionaryGetValue(v5, key);
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFNumberGetTypeID())
        v7 = 0;
    }
    if (key)
      CFRelease(key);
    return v7 && CFNumberGetValue(v7, kCFNumberDoubleType, a3) != 0;
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

BOOL WebCore::KeyedDecoderCF::decodeString(_BOOL8 this, const WTF::String *a2, WTF::StringImpl **a3)
{
  uint64_t v3;
  const __CFDictionary *v5;
  const void *Value;
  const void *v7;
  void *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  void *key;

  v3 = *(unsigned int *)(this + 28);
  if ((_DWORD)v3)
  {
    v5 = *(const __CFDictionary **)(*(_QWORD *)(this + 16) + 8 * v3 - 8);
    WTF::String::createCFString(a2);
    Value = CFDictionaryGetValue(v5, key);
    v7 = WTF::dynamic_cf_cast<__CFString const*>(Value);
    v8 = key;
    key = 0;
    if (v8)
      CFRelease(v8);
    if (!v7)
      return v7 != 0;
    MEMORY[0x19AEA5508](&key, v7);
    v10 = (WTF::StringImpl *)key;
    key = 0;
    v11 = *a3;
    *a3 = v10;
    if (!v11)
      return v7 != 0;
    v12 = *(_DWORD *)v11 - 2;
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, v9);
      v11 = (WTF::StringImpl *)key;
      key = 0;
      if (!v11)
        return v7 != 0;
      v12 = *(_DWORD *)v11 - 2;
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v13);
        return v7 != 0;
      }
    }
    *(_DWORD *)v11 = v12;
    return v7 != 0;
  }
  __break(0xC471u);
  return this;
}

BOOL WebCore::KeyedDecoderCF::beginObject(_BOOL8 this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  char **v4;
  const __CFDictionary *v5;
  void *Value;
  void *v7;
  CFTypeID v8;
  void *v9;
  uint64_t v10;
  char *v11;
  void *key;

  v2 = *(unsigned int *)(this + 28);
  if ((_DWORD)v2)
  {
    v3 = this;
    v4 = (char **)(this + 16);
    v5 = *(const __CFDictionary **)(*(_QWORD *)(this + 16) + 8 * v2 - 8);
    WTF::String::createCFString(a2);
    Value = (void *)CFDictionaryGetValue(v5, key);
    v7 = Value;
    if (Value)
    {
      v8 = CFGetTypeID(Value);
      if (v8 != CFDictionaryGetTypeID())
        v7 = 0;
    }
    v9 = key;
    key = 0;
    if (v9)
      CFRelease(v9);
    key = v7;
    if (v7)
    {
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10 == *(_DWORD *)(v3 + 24))
      {
        v11 = WTF::Vector<__CFDictionary const*,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v4, v10 + 1, (unint64_t)&key);
        v10 = *(unsigned int *)(v3 + 28);
        *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8 * v10) = *(_QWORD *)v11;
      }
      else
      {
        *(_QWORD *)&(*v4)[8 * v10] = v7;
      }
      *(_DWORD *)(v3 + 28) = v10 + 1;
    }
    return v7 != 0;
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

uint64_t WebCore::KeyedDecoderCF::endObject(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 28);
  if (v1)
    *(_DWORD *)(this + 28) = v1 - 1;
  else
    __break(0xC471u);
  return this;
}

uint64_t WebCore::KeyedDecoderCF::beginArray(WebCore::KeyedDecoderCF *this, const WTF::String *a2)
{
  uint64_t v2;
  const __CFDictionary *v4;
  const void *Value;
  void *v6;
  void *v7;
  CFIndex i;
  const void *ValueAtIndex;
  CFTypeID v10;
  char **v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD *v22;
  void *key;

  v2 = *((unsigned int *)this + 7);
  if (!(_DWORD)v2)
  {
    __break(0xC471u);
    goto LABEL_30;
  }
  v4 = *(const __CFDictionary **)(*((_QWORD *)this + 2) + 8 * v2 - 8);
  WTF::String::createCFString(a2);
  Value = CFDictionaryGetValue(v4, key);
  v6 = (void *)WTF::dynamic_cf_cast<__CFArray const*>(Value);
  v7 = key;
  key = 0;
  if (v7)
    CFRelease(v7);
  key = v6;
  if (!v6)
    return 0;
  for (i = 0; i < CFArrayGetCount((CFArrayRef)v6); ++i)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v6, i);
    v10 = CFGetTypeID(ValueAtIndex);
    if (v10 != CFDictionaryGetTypeID())
      return 0;
  }
  v12 = (char **)((char *)this + 160);
  v13 = *((unsigned int *)this + 43);
  if ((_DWORD)v13 == *((_DWORD *)this + 42))
  {
    v14 = WTF::Vector<__CFDictionary const*,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v12, v13 + 1, (unint64_t)&key);
    v13 = *((unsigned int *)this + 43);
    *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v13) = *(_QWORD *)v14;
  }
  else
  {
    *(_QWORD *)&(*v12)[8 * v13] = v6;
  }
  *((_DWORD *)this + 43) = v13 + 1;
  v15 = *((unsigned int *)this + 79);
  if ((_DWORD)v15 == *((_DWORD *)this + 78))
  {
    v16 = v15 + (v15 >> 2);
    if (v16 >= 0x10)
      v17 = v16 + 1;
    else
      v17 = 16;
    if (v17 <= v15 + 1)
      v18 = v15 + 1;
    else
      v18 = v17;
    if (!(v18 >> 29))
    {
      v19 = (void *)*((_QWORD *)this + 38);
      v20 = (void *)WTF::fastMalloc((WTF *)(8 * v18));
      *((_DWORD *)this + 78) = v18;
      *((_QWORD *)this + 38) = v20;
      memcpy(v20, v19, 8 * v15);
      if (v19)
      {
        if (*((void **)this + 38) == v19)
        {
          *((_QWORD *)this + 38) = 0;
          *((_DWORD *)this + 78) = 0;
        }
        WTF::fastFree((WTF *)v19, v21);
      }
      v15 = *((unsigned int *)this + 79);
      v22 = (_QWORD *)(*((_QWORD *)this + 38) + 8 * v15);
      goto LABEL_23;
    }
    __break(0xC471u);
LABEL_30:
    JUMPOUT(0x196126094);
  }
  v22 = (_QWORD *)(*((_QWORD *)this + 38) + 8 * v15);
LABEL_23:
  *v22 = 0;
  *((_DWORD *)this + 79) = v15 + 1;
  return 1;
}

BOOL WebCore::KeyedDecoderCF::beginArrayElement(WebCore::KeyedDecoderCF *this)
{
  uint64_t v1;
  uint64_t v3;
  CFIndex v4;
  CFIndex Count;
  uint64_t v6;
  uint64_t v7;
  const __CFArray *v8;
  uint64_t v9;
  CFIndex v10;
  const void *ValueAtIndex;
  const void *v12;
  CFTypeID v13;
  char **v14;
  uint64_t v15;
  char *v16;
  const void *v18;

  v1 = *((unsigned int *)this + 79);
  if (!(_DWORD)v1)
  {
    __break(0xC471u);
    JUMPOUT(0x1961261D0);
  }
  v3 = *((unsigned int *)this + 43);
  if (!(_DWORD)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x1961261D8);
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 38) + 8 * v1 - 8);
  Count = CFArrayGetCount(*(CFArrayRef *)(*((_QWORD *)this + 20) + 8 * v3 - 8));
  if (v4 < Count)
  {
    v6 = *((unsigned int *)this + 43);
    if (!(_DWORD)v6)
    {
      __break(0xC471u);
      JUMPOUT(0x1961261E0);
    }
    v7 = *((unsigned int *)this + 79);
    if (!(_DWORD)v7
      || (v8 = *(const __CFArray **)(*((_QWORD *)this + 20) + 8 * v6 - 8),
          v9 = *((_QWORD *)this + 38) + 8 * v7,
          v10 = *(_QWORD *)(v9 - 8),
          *(_QWORD *)(v9 - 8) = v10 + 1,
          ValueAtIndex = CFArrayGetValueAtIndex(v8, v10),
          (v12 = ValueAtIndex) != 0)
      && (v13 = CFGetTypeID(ValueAtIndex), v13 != CFDictionaryGetTypeID()))
    {
      __break(0xC471u);
      JUMPOUT(0x1961261C8);
    }
    v18 = v12;
    v14 = (char **)((char *)this + 16);
    v15 = *((unsigned int *)this + 7);
    if ((_DWORD)v15 == *((_DWORD *)this + 6))
    {
      v16 = WTF::Vector<__CFDictionary const*,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v14, v15 + 1, (unint64_t)&v18);
      v15 = *((unsigned int *)this + 7);
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v15) = *(_QWORD *)v16;
    }
    else
    {
      *(_QWORD *)&(*v14)[8 * v15] = v12;
    }
    *((_DWORD *)this + 7) = v15 + 1;
  }
  return v4 < Count;
}

uint64_t WebCore::KeyedDecoderCF::endArrayElement(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 28);
  if (v1)
    *(_DWORD *)(this + 28) = v1 - 1;
  else
    __break(0xC471u);
  return this;
}

uint64_t WebCore::KeyedDecoderCF::endArray(uint64_t this)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(this + 172);
  if (!v1 || (*(_DWORD *)(this + 172) = v1 - 1, (v2 = *(_DWORD *)(this + 316)) == 0))
  {
    __break(0xC471u);
    JUMPOUT(0x196126230);
  }
  *(_DWORD *)(this + 316) = v2 - 1;
  return this;
}

double WebCore::KeyedEncoder::encoder@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  CFMutableDictionaryRef Mutable;
  double result;

  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x130);
  *v3 = off_1E3408B38;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3[4] = Mutable;
  v3[1] = Mutable;
  v3[2] = v3 + 4;
  v3[20] = v3 + 22;
  v3[21] = 16;
  *(_QWORD *)&result = 0x100000010;
  v3[3] = 0x100000010;
  *a1 = v3;
  return result;
}

void WebCore::KeyedEncoderCF::~KeyedEncoderCF(WebCore::KeyedEncoderCF *this, void *a2)
{
  WTF *v3;
  WTF *v5;
  const void *v7;

  v3 = (WTF *)*((_QWORD *)this + 20);
  if ((WebCore::KeyedEncoderCF *)((char *)this + 176) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v3, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::KeyedEncoderCF *)((char *)this + 32) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  v7 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    CFRelease(v7);
}

{
  WTF *v3;
  WTF *v5;
  const void *v7;

  v3 = (WTF *)*((_QWORD *)this + 20);
  if ((WebCore::KeyedEncoderCF *)((char *)this + 176) != v3 && v3 != 0)
  {
    *((_QWORD *)this + 20) = 0;
    *((_DWORD *)this + 42) = 0;
    WTF::fastFree(v3, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 2);
  if ((WebCore::KeyedEncoderCF *)((char *)this + 32) != v5 && v5 != 0)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  v7 = (const void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    CFRelease(v7);
  WTF::fastFree(this, a2);
}

void WebCore::KeyedEncoderCF::encodeBytes(uint64_t a1, WTF::String *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6;
  uint64_t v7;
  CFDataRef v8;
  __CFDictionary *v9;
  void *key;

  v6 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  v7 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v7)
  {
    v8 = v6;
    v9 = *(__CFDictionary **)(*(_QWORD *)(a1 + 16) + 8 * v7 - 8);
    WTF::String::createCFString(a2);
    CFDictionarySetValue(v9, key, v8);
    if (key)
      CFRelease(key);
    if (v8)
      CFRelease(v8);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::encodeBool(WebCore::KeyedEncoderCF *this, const WTF::String *a2, int a3)
{
  uint64_t v3;
  __CFDictionary *v5;
  const void **v6;
  void *key;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v5 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v3 - 8);
    WTF::String::createCFString(a2);
    v6 = (const void **)MEMORY[0x1E0C9AE50];
    if (!a3)
      v6 = (const void **)MEMORY[0x1E0C9AE40];
    CFDictionarySetValue(v5, key, *v6);
    if (key)
      CFRelease(key);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::encodeUInt32(WebCore::KeyedEncoderCF *this, const WTF::String *a2, int a3)
{
  CFNumberRef v5;
  uint64_t v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  void *key;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6)
  {
    v7 = v5;
    v8 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v6 - 8);
    WTF::String::createCFString(a2);
    CFDictionarySetValue(v8, key, v7);
    if (key)
      CFRelease(key);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::encodeUInt64(WebCore::KeyedEncoderCF *this, const WTF::String *a2, uint64_t a3)
{
  CFNumberRef v5;
  uint64_t v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  void *key;
  uint64_t valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6)
  {
    v7 = v5;
    v8 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v6 - 8);
    WTF::String::createCFString(a2);
    CFDictionarySetValue(v8, key, v7);
    if (key)
      CFRelease(key);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::encodeInt32(WebCore::KeyedEncoderCF *this, const WTF::String *a2, int a3)
{
  CFNumberRef v5;
  uint64_t v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  void *key;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6)
  {
    v7 = v5;
    v8 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v6 - 8);
    WTF::String::createCFString(a2);
    CFDictionarySetValue(v8, key, v7);
    if (key)
      CFRelease(key);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::encodeInt64(WebCore::KeyedEncoderCF *this, const WTF::String *a2, uint64_t a3)
{
  CFNumberRef v5;
  uint64_t v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  void *key;
  uint64_t valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6)
  {
    v7 = v5;
    v8 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v6 - 8);
    WTF::String::createCFString(a2);
    CFDictionarySetValue(v8, key, v7);
    if (key)
      CFRelease(key);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::encodeFloat(WebCore::KeyedEncoderCF *this, const WTF::String *a2, float a3)
{
  CFNumberRef v5;
  uint64_t v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  void *key;
  float valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberFloatType, &valuePtr);
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6)
  {
    v7 = v5;
    v8 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v6 - 8);
    WTF::String::createCFString(a2);
    CFDictionarySetValue(v8, key, v7);
    if (key)
      CFRelease(key);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::encodeDouble(WebCore::KeyedEncoderCF *this, const WTF::String *a2, double a3)
{
  CFNumberRef v5;
  uint64_t v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  void *key;
  double valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6)
  {
    v7 = v5;
    v8 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v6 - 8);
    WTF::String::createCFString(a2);
    CFDictionarySetValue(v8, key, v7);
    if (key)
      CFRelease(key);
    if (v7)
      CFRelease(v7);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::encodeString(WebCore::KeyedEncoderCF *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v3;
  __CFDictionary *v5;
  void *value;
  CFTypeRef cf;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v5 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v3 - 8);
    WTF::String::createCFString(a2);
    WTF::String::createCFString(a3);
    CFDictionarySetValue(v5, cf, value);
    if (value)
      CFRelease(value);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::beginObject(WebCore::KeyedEncoderCF *this, const WTF::String *a2)
{
  CFMutableDictionaryRef Mutable;
  uint64_t v5;
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  void *v8;
  uint64_t v9;
  char *v10;
  void *key;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5)
  {
    v6 = Mutable;
    v7 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v5 - 8);
    WTF::String::createCFString(a2);
    CFDictionarySetValue(v7, key, v6);
    v8 = key;
    key = 0;
    if (v8)
      CFRelease(v8);
    key = v6;
    v9 = *((unsigned int *)this + 7);
    if ((_DWORD)v9 == *((_DWORD *)this + 6))
    {
      v10 = WTF::Vector<__CFDictionary const*,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)this + 2, v9 + 1, (unint64_t)&key);
      v9 = *((unsigned int *)this + 7);
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v9) = *(_QWORD *)v10;
    }
    else
    {
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v9) = v6;
    }
    *((_DWORD *)this + 7) = v9 + 1;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebCore::KeyedEncoderCF::endObject(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 28);
  if (v1)
    *(_DWORD *)(this + 28) = v1 - 1;
  else
    __break(0xC471u);
  return this;
}

void WebCore::KeyedEncoderCF::beginArray(WebCore::KeyedEncoderCF *this, const WTF::String *a2)
{
  CFMutableArrayRef Mutable;
  uint64_t v5;
  CFMutableArrayRef v6;
  __CFDictionary *v7;
  void *v8;
  char **v9;
  uint64_t v10;
  char *v11;
  void *key;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v5 = *((unsigned int *)this + 7);
  if ((_DWORD)v5)
  {
    v6 = Mutable;
    v7 = *(__CFDictionary **)(*((_QWORD *)this + 2) + 8 * v5 - 8);
    WTF::String::createCFString(a2);
    CFDictionarySetValue(v7, key, v6);
    v8 = key;
    key = 0;
    if (v8)
      CFRelease(v8);
    v9 = (char **)((char *)this + 160);
    key = v6;
    v10 = *((unsigned int *)this + 43);
    if ((_DWORD)v10 == *((_DWORD *)this + 42))
    {
      v11 = WTF::Vector<__CFDictionary const*,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v9, v10 + 1, (unint64_t)&key);
      v10 = *((unsigned int *)this + 43);
      *(_QWORD *)(*((_QWORD *)this + 20) + 8 * v10) = *(_QWORD *)v11;
    }
    else
    {
      *(_QWORD *)&(*v9)[8 * v10] = v6;
    }
    *((_DWORD *)this + 43) = v10 + 1;
    if (v6)
      CFRelease(v6);
  }
  else
  {
    __break(0xC471u);
  }
}

void WebCore::KeyedEncoderCF::beginArrayElement(WebCore::KeyedEncoderCF *this)
{
  CFMutableDictionaryRef Mutable;
  uint64_t v3;
  CFMutableDictionaryRef v4;
  char **v5;
  uint64_t v6;
  char *v7;
  CFMutableDictionaryRef v8;

  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v3 = *((unsigned int *)this + 43);
  if ((_DWORD)v3)
  {
    v4 = Mutable;
    CFArrayAppendValue(*(CFMutableArrayRef *)(*((_QWORD *)this + 20) + 8 * v3 - 8), Mutable);
    v5 = (char **)((char *)this + 16);
    v8 = v4;
    v6 = *((unsigned int *)this + 7);
    if ((_DWORD)v6 == *((_DWORD *)this + 6))
    {
      v7 = WTF::Vector<__CFDictionary const*,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5, v6 + 1, (unint64_t)&v8);
      v6 = *((unsigned int *)this + 7);
      *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v6) = *(_QWORD *)v7;
    }
    else
    {
      *(_QWORD *)&(*v5)[8 * v6] = v4;
    }
    *((_DWORD *)this + 7) = v6 + 1;
    if (v4)
      CFRelease(v4);
  }
  else
  {
    __break(0xC471u);
  }
}

uint64_t WebCore::KeyedEncoderCF::endArrayElement(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 28);
  if (v1)
    *(_DWORD *)(this + 28) = v1 - 1;
  else
    __break(0xC471u);
  return this;
}

uint64_t WebCore::KeyedEncoderCF::endArray(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 172);
  if (v1)
    *(_DWORD *)(this + 172) = v1 - 1;
  else
    __break(0xC471u);
  return this;
}

void WebCore::KeyedEncoderCF::finishEncoding(CFPropertyListRef *this@<X0>, uint64_t *a2@<X8>)
{
  CFDataRef Data;
  CFDataRef v4;
  CFIndex v5;
  uint64_t v6;
  void *v7;
  void *v8;
  CFIndex v9;

  Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], this[1], kCFPropertyListBinaryFormat_v1_0, 0, 0);
  if (Data)
  {
    v4 = Data;
    v5 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = v5 + 24;
    *(_QWORD *)(v5 + 16) = 1;
    *(_BYTE *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v5, v4);
    v9 = v5;
    v6 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v6, &v9);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v9, v7);
    v9 = 0;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v9, v8);
    CFRelease(v4);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
}

char *WebCore::MainThreadSharedTimer::shouldSetupPowerObserver(WebCore::MainThreadSharedTimer *this)
{
  return &WebCore::MainThreadSharedTimer::shouldSetupPowerObserver(void)::setup;
}

void WebCore::MainThreadSharedTimer::restartSharedTimer(WebCore::MainThreadSharedTimer *this)
{
  _BYTE v1[8];

  if ((_MergedGlobals_222 & 1) != 0)
  {
    if (qword_1ECE83BE8)
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      CFRunLoopTimerSetNextFireDate((CFRunLoopTimerRef)qword_1ECE83BE8, 1.79769313e308);
      WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)v1);
      (*(void (**)(uint64_t))(*(_QWORD *)qword_1ECE90CE8 + 16))(qword_1ECE90CE8);
      WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)v1);
    }
  }
  else
  {
    qword_1ECE83BE8 = 0;
    _MergedGlobals_222 = 1;
  }
}

void WebCore::MainThreadSharedTimer::invalidate(WebCore::MainThreadSharedTimer *this)
{
  const void *v1;

  if ((_MergedGlobals_222 & 1) != 0)
  {
    if (qword_1ECE83BE8)
    {
      CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_1ECE83BE8);
      if ((_MergedGlobals_222 & 1) != 0)
      {
        v1 = (const void *)qword_1ECE83BE8;
        qword_1ECE83BE8 = 0;
        if (v1)
          CFRelease(v1);
      }
      else
      {
        _MergedGlobals_222 = 1;
        qword_1ECE83BE8 = 0;
      }
    }
  }
  else
  {
    qword_1ECE83BE8 = 0;
    _MergedGlobals_222 = 1;
  }
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceSetDisplayType(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceDisplayType a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceSetDisplayType(MACaptionAppearanceDomain,MACaptionAppearanceDisplayType)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceSetDisplayType(MACaptionAppearanceDomain,MACaptionAppearanceDisplayType)::once, &__block_literal_global_109_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceSetDisplayType(this, a2, (MACaptionAppearanceDisplayType)WebCore::softLinkMediaAccessibilityMACaptionAppearanceSetDisplayType);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceCopyForegroundColor(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceCopyForegroundColor(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceCopyForegroundColor(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once, &__block_literal_global_112_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyForegroundColor(this, a2, (MACaptionAppearanceBehavior *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyForegroundColor);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceCopyBackgroundColor(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceCopyBackgroundColor(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceCopyBackgroundColor(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once, &__block_literal_global_115_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyBackgroundColor(this, a2, (MACaptionAppearanceBehavior *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyBackgroundColor);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceCopyWindowColor(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceCopyWindowColor(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceCopyWindowColor(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once, &__block_literal_global_118);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyWindowColor(this, a2, (MACaptionAppearanceBehavior *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyWindowColor);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceGetForegroundOpacity(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceGetForegroundOpacity(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceGetForegroundOpacity(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once, &__block_literal_global_121_1);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetForegroundOpacity(this, a2, (MACaptionAppearanceBehavior *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetForegroundOpacity);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceGetBackgroundOpacity(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceGetBackgroundOpacity(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceGetBackgroundOpacity(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once, &__block_literal_global_124);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetBackgroundOpacity(this, a2, (MACaptionAppearanceBehavior *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetBackgroundOpacity);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceGetWindowOpacity(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceGetWindowOpacity(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceGetWindowOpacity(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once, &__block_literal_global_127_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetWindowOpacity(this, a2, (MACaptionAppearanceBehavior *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetWindowOpacity);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceGetWindowRoundedCornerRadius(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceGetWindowRoundedCornerRadius(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceGetWindowRoundedCornerRadius(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once, &__block_literal_global_130_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetWindowRoundedCornerRadius(this, a2, (MACaptionAppearanceBehavior *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetWindowRoundedCornerRadius);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceCopyFontDescriptorForStyle(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3, MACaptionAppearanceFontStyle a4)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceCopyFontDescriptorForStyle(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *,MACaptionAppearanceFontStyle)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceCopyFontDescriptorForStyle(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *,MACaptionAppearanceFontStyle)::once, &__block_literal_global_133_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyFontDescriptorForStyle(this, a2, a3, (MACaptionAppearanceFontStyle)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyFontDescriptorForStyle);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceGetRelativeCharacterSize(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceGetRelativeCharacterSize(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceGetRelativeCharacterSize(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once, &__block_literal_global_136_1);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetRelativeCharacterSize(this, a2, (MACaptionAppearanceBehavior *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetRelativeCharacterSize);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceGetTextEdgeStyle(WebCore *this, MACaptionAppearanceDomain a2, MACaptionAppearanceBehavior *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceGetTextEdgeStyle(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceGetTextEdgeStyle(MACaptionAppearanceDomain,MACaptionAppearanceBehavior *)::once, &__block_literal_global_139_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetTextEdgeStyle(this, a2, (MACaptionAppearanceBehavior *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetTextEdgeStyle);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceAddSelectedLanguage(WebCore *this, MACaptionAppearanceDomain a2, const __CFString *a3)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceAddSelectedLanguage(MACaptionAppearanceDomain,__CFString const*)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceAddSelectedLanguage(MACaptionAppearanceDomain,__CFString const*)::once, &__block_literal_global_142_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceAddSelectedLanguage(this, a2, (const __CFString *)WebCore::softLinkMediaAccessibilityMACaptionAppearanceAddSelectedLanguage);
}

uint64_t WebCore::initMediaAccessibilityMACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics(WebCore *this, MACaptionAppearanceDomain a2)
{
  if (WebCore::initMediaAccessibilityMACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics(MACaptionAppearanceDomain)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics(MACaptionAppearanceDomain)::once, &__block_literal_global_148_0);
  return WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics(this, (MACaptionAppearanceDomain)WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics);
}

uint64_t WebCore::initMediaAccessibilityMAAudibleMediaPrefCopyPreferDescriptiveVideo(WebCore *this)
{
  if (WebCore::initMediaAccessibilityMAAudibleMediaPrefCopyPreferDescriptiveVideo(void)::once != -1)
    dispatch_once(&WebCore::initMediaAccessibilityMAAudibleMediaPrefCopyPreferDescriptiveVideo(void)::once, &__block_literal_global_151_0);
  return WebCore::softLinkMediaAccessibilityMAAudibleMediaPrefCopyPreferDescriptiveVideo((WebCore *)WebCore::softLinkMediaAccessibilityMAAudibleMediaPrefCopyPreferDescriptiveVideo);
}

WebCore::FragmentedSharedBuffer *WebCore::FragmentedSharedBuffer::FragmentedSharedBuffer(WebCore::FragmentedSharedBuffer *this, const __CFData *a2)
{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 1;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0;
  WebCore::FragmentedSharedBuffer::append((CFIndex)this, a2);
  return this;
}

{
  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 1;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0;
  WebCore::FragmentedSharedBuffer::append((CFIndex)this, a2);
  return this;
}

uint64_t ___ZN7WebCore16CoreVideoLibraryEb_block_invoke(uint64_t a1)
{
  uint64_t result;
  BOOL v3;

  result = (uint64_t)dlopen("/System/Library/Frameworks/CoreVideo.framework/CoreVideo", 2);
  WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary = result;
  if (*(_BYTE *)(a1 + 32))
    v3 = 0;
  else
    v3 = result == 0;
  if (v3)
  {
    result = 33;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::initCoreVideoCVBufferCopyAttachments(WebCore *this, __CVBuffer *a2, CVAttachmentMode a3)
{
  if (WebCore::initCoreVideoCVBufferCopyAttachments(__CVBuffer *,CVAttachmentMode)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVBufferCopyAttachments(__CVBuffer *,CVAttachmentMode)::once, &__block_literal_global_154);
  return WebCore::softLinkCoreVideoCVBufferCopyAttachments(this, a2, (CVAttachmentMode)WebCore::softLinkCoreVideoCVBufferCopyAttachments);
}

uint64_t WebCore::initCoreVideoCVBufferGetAttachment(WebCore *this, __CVBuffer *a2, const __CFString *a3, CVAttachmentMode *a4)
{
  if (WebCore::initCoreVideoCVBufferGetAttachment(__CVBuffer *,__CFString const*,CVAttachmentMode *)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVBufferGetAttachment(__CVBuffer *,__CFString const*,CVAttachmentMode *)::once, &__block_literal_global_157_0);
  return WebCore::softLinkCoreVideoCVBufferGetAttachment(this, a2, a3, (CVAttachmentMode *)WebCore::softLinkCoreVideoCVBufferGetAttachment);
}

uint64_t WebCore::initCoreVideoCVBufferRemoveAttachment(WebCore *this, __CVBuffer *a2, const __CFString *a3)
{
  if (WebCore::initCoreVideoCVBufferRemoveAttachment(__CVBuffer *,__CFString const*)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVBufferRemoveAttachment(__CVBuffer *,__CFString const*)::once, &__block_literal_global_163_0);
  return WebCore::softLinkCoreVideoCVBufferRemoveAttachment(this, a2, (const __CFString *)WebCore::softLinkCoreVideoCVBufferRemoveAttachment);
}

uint64_t WebCore::initCoreVideoCVBufferSetAttachment(WebCore *this, __CVBuffer *a2, const __CFString *a3, const void *a4, CVAttachmentMode a5)
{
  if (WebCore::initCoreVideoCVBufferSetAttachment(__CVBuffer *,__CFString const*,void const*,CVAttachmentMode)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVBufferSetAttachment(__CVBuffer *,__CFString const*,void const*,CVAttachmentMode)::once, &__block_literal_global_166);
  return WebCore::softLinkCoreVideoCVBufferSetAttachment(this, a2, a3, a4, (CVAttachmentMode)WebCore::softLinkCoreVideoCVBufferSetAttachment);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetTypeID(WebCore *this)
{
  if (WebCore::initCoreVideoCVPixelBufferGetTypeID(void)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetTypeID(void)::once, &__block_literal_global_169_0);
  return WebCore::softLinkCoreVideoCVPixelBufferGetTypeID((WebCore *)WebCore::softLinkCoreVideoCVPixelBufferGetTypeID);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetWidth(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetWidth(__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetWidth(__CVBuffer *)::once, &__block_literal_global_172);
  return WebCore::softLinkCoreVideoCVPixelBufferGetWidth(this, (__CVBuffer *)WebCore::softLinkCoreVideoCVPixelBufferGetWidth);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetWidthOfPlane(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetWidthOfPlane(__CVBuffer *,unsigned long)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetWidthOfPlane(__CVBuffer *,unsigned long)::once, &__block_literal_global_175_0);
  return WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane(this, a2, (unint64_t)WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetHeight(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetHeight(__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetHeight(__CVBuffer *)::once, &__block_literal_global_178);
  return WebCore::softLinkCoreVideoCVPixelBufferGetHeight(this, (__CVBuffer *)WebCore::softLinkCoreVideoCVPixelBufferGetHeight);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetHeightOfPlane(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetHeightOfPlane(__CVBuffer *,unsigned long)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetHeightOfPlane(__CVBuffer *,unsigned long)::once, &__block_literal_global_181_0);
  return WebCore::softLinkCoreVideoCVPixelBufferGetHeightOfPlane(this, a2, (unint64_t)WebCore::softLinkCoreVideoCVPixelBufferGetHeightOfPlane);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetBaseAddress(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetBaseAddress(__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetBaseAddress(__CVBuffer *)::once, &__block_literal_global_184);
  return WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddress(this, (__CVBuffer *)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddress);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetBytesPerRow(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetBytesPerRow(__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetBytesPerRow(__CVBuffer *)::once, &__block_literal_global_187_0);
  return WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRow(this, (__CVBuffer *)WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRow);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetBytesPerRowOfPlane(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetBytesPerRowOfPlane(__CVBuffer *,unsigned long)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetBytesPerRowOfPlane(__CVBuffer *,unsigned long)::once, &__block_literal_global_190);
  return WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane(this, a2, (unint64_t)WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetPixelFormatType(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetPixelFormatType(__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetPixelFormatType(__CVBuffer *)::once, &__block_literal_global_193_0);
  return WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType(this, (__CVBuffer *)WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetPlaneCount(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetPlaneCount(__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetPlaneCount(__CVBuffer *)::once, &__block_literal_global_196);
  return WebCore::softLinkCoreVideoCVPixelBufferGetPlaneCount(this, (__CVBuffer *)WebCore::softLinkCoreVideoCVPixelBufferGetPlaneCount);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetBaseAddressOfPlane(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetBaseAddressOfPlane(__CVBuffer *,unsigned long)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetBaseAddressOfPlane(__CVBuffer *,unsigned long)::once, &__block_literal_global_199_0);
  return WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane(this, a2, (unint64_t)WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane);
}

uint64_t WebCore::initCoreVideoCVPixelBufferLockBaseAddress(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferLockBaseAddress(__CVBuffer *,unsigned long long)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferLockBaseAddress(__CVBuffer *,unsigned long long)::once, &__block_literal_global_202);
  return WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress(this, a2, (unint64_t)WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress);
}

uint64_t WebCore::initCoreVideoCVPixelBufferUnlockBaseAddress(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferUnlockBaseAddress(__CVBuffer *,unsigned long long)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferUnlockBaseAddress(__CVBuffer *,unsigned long long)::once, &__block_literal_global_205_0);
  return WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress(this, a2, (unint64_t)WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress);
}

uint64_t WebCore::initCoreVideoCVPixelBufferPoolCreate(WebCore *this, const __CFAllocator *a2, const __CFDictionary *a3, const __CFDictionary *a4, __CVPixelBufferPool **a5)
{
  if (WebCore::initCoreVideoCVPixelBufferPoolCreate(__CFAllocator const*,__CFDictionary const*,__CFDictionary const*,__CVPixelBufferPool **)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferPoolCreate(__CFAllocator const*,__CFDictionary const*,__CFDictionary const*,__CVPixelBufferPool **)::once, &__block_literal_global_208);
  return WebCore::softLinkCoreVideoCVPixelBufferPoolCreate(this, a2, a3, a4, (__CVPixelBufferPool **)WebCore::softLinkCoreVideoCVPixelBufferPoolCreate);
}

uint64_t WebCore::initCoreVideoCVPixelBufferPoolCreatePixelBuffer(WebCore *this, const __CFAllocator *a2, __CVPixelBufferPool *a3, __CVBuffer **a4)
{
  if (WebCore::initCoreVideoCVPixelBufferPoolCreatePixelBuffer(__CFAllocator const*,__CVPixelBufferPool *,__CVBuffer **)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferPoolCreatePixelBuffer(__CFAllocator const*,__CVPixelBufferPool *,__CVBuffer **)::once, &__block_literal_global_211);
  return WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBuffer(this, a2, a3, (__CVBuffer **)WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBuffer);
}

uint64_t WebCore::initCoreVideoCVPixelBufferPoolCreatePixelBufferWithAuxAttributes(WebCore *this, const __CFAllocator *a2, __CVPixelBufferPool *a3, const __CFDictionary *a4, __CVBuffer **a5)
{
  if (WebCore::initCoreVideoCVPixelBufferPoolCreatePixelBufferWithAuxAttributes(__CFAllocator const*,__CVPixelBufferPool *,__CFDictionary const*,__CVBuffer **)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferPoolCreatePixelBufferWithAuxAttributes(__CFAllocator const*,__CVPixelBufferPool *,__CFDictionary const*,__CVBuffer **)::once, &__block_literal_global_214);
  return WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBufferWithAuxAttributes(this, a2, a3, a4, (__CVBuffer **)WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBufferWithAuxAttributes);
}

uint64_t WebCore::initCoreVideoCVPixelBufferGetIOSurface(WebCore *this, __CVBuffer *a2)
{
  if (WebCore::initCoreVideoCVPixelBufferGetIOSurface(__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferGetIOSurface(__CVBuffer *)::once, &__block_literal_global_217);
  return WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface(this, (__CVBuffer *)WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface);
}

uint64_t WebCore::initCoreVideoCVImageBufferCreateColorSpaceFromAttachments(WebCore *this, const __CFDictionary *a2)
{
  if (WebCore::initCoreVideoCVImageBufferCreateColorSpaceFromAttachments(__CFDictionary const*)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVImageBufferCreateColorSpaceFromAttachments(__CFDictionary const*)::once, &__block_literal_global_220);
  return WebCore::softLinkCoreVideoCVImageBufferCreateColorSpaceFromAttachments(this, (const __CFDictionary *)WebCore::softLinkCoreVideoCVImageBufferCreateColorSpaceFromAttachments);
}

uint64_t WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(WebCore *this)
{
  if (WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once != -1)
    dispatch_once(&WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::once, &__block_literal_global_13_3);
  return WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey;
}

uint64_t ___ZN7WebCore46get_CoreVideo_kCVPixelBufferPixelFormatTypeKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVPixelBufferPixelFormatTypeKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(void)::constantCoreVideokCVPixelBufferPixelFormatTypeKey = *(_QWORD *)result;
  }
  else
  {
    result = 61;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore51get_CoreVideo_kCVPixelBufferCGImageCompatibilityKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVPixelBufferCGImageCompatibilityKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVPixelBufferCGImageCompatibilityKey(void)::constantCoreVideokCVPixelBufferCGImageCompatibilityKey = *(_QWORD *)result;
  }
  else
  {
    result = 63;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore36get_CoreVideo_kCVPixelBufferWidthKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVPixelBufferWidthKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVPixelBufferWidthKey(void)::constantCoreVideokCVPixelBufferWidthKey = *(_QWORD *)result;
  }
  else
  {
    result = 65;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore37get_CoreVideo_kCVPixelBufferHeightKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVPixelBufferHeightKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVPixelBufferHeightKey(void)::constantCoreVideokCVPixelBufferHeightKey = *(_QWORD *)result;
  }
  else
  {
    result = 66;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore50get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVPixelBufferIOSurfacePropertiesKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVPixelBufferIOSurfacePropertiesKey(void)::constantCoreVideokCVPixelBufferIOSurfacePropertiesKey = *(_QWORD *)result;
  }
  else
  {
    result = 69;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore53get_CoreVideo_kCVPixelBufferPoolMinimumBufferCountKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVPixelBufferPoolMinimumBufferCountKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVPixelBufferPoolMinimumBufferCountKey(void)::constantCoreVideokCVPixelBufferPoolMinimumBufferCountKey = *(_QWORD *)result;
  }
  else
  {
    result = 70;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore54get_CoreVideo_kCVPixelBufferPoolAllocationThresholdKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVPixelBufferPoolAllocationThresholdKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVPixelBufferPoolAllocationThresholdKey(void)::constantCoreVideokCVPixelBufferPoolAllocationThresholdKey = *(_QWORD *)result;
  }
  else
  {
    result = 71;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore42get_CoreVideo_kCVImageBufferYCbCrMatrixKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrixKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrixKey(void)::constantCoreVideokCVImageBufferYCbCrMatrixKey = *(_QWORD *)result;
  }
  else
  {
    result = 72;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore51get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_ITU_R_709_2");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_709_2(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_709_2 = *(_QWORD *)result;
  }
  else
  {
    result = 73;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore51get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_601_4Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_ITU_R_601_4");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_ITU_R_601_4(void)::constantCoreVideokCVImageBufferYCbCrMatrix_ITU_R_601_4 = *(_QWORD *)result;
  }
  else
  {
    result = 74;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore55get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferYCbCrMatrix_SMPTE_240M_1995");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferYCbCrMatrix_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferYCbCrMatrix_SMPTE_240M_1995 = *(_QWORD *)result;
  }
  else
  {
    result = 75;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore51get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferColorPrimaries_EBU_3213");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_EBU_3213(void)::constantCoreVideokCVImageBufferColorPrimaries_EBU_3213 = *(_QWORD *)result;
  }
  else
  {
    result = 76;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore54get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferColorPrimaries_ITU_R_709_2");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_ITU_R_709_2(void)::constantCoreVideokCVImageBufferColorPrimaries_ITU_R_709_2 = *(_QWORD *)result;
  }
  else
  {
    result = 77;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore50get_CoreVideo_kCVImageBufferColorPrimaries_SMPTE_CEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferColorPrimaries_SMPTE_C");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferColorPrimaries_SMPTE_C(void)::constantCoreVideokCVImageBufferColorPrimaries_SMPTE_C = *(_QWORD *)result;
  }
  else
  {
    result = 78;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore45get_CoreVideo_kCVImageBufferColorPrimariesKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferColorPrimariesKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferColorPrimariesKey(void)::constantCoreVideokCVImageBufferColorPrimariesKey = *(_QWORD *)result;
  }
  else
  {
    result = 79;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore47get_CoreVideo_kCVImageBufferTransferFunctionKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferTransferFunctionKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferTransferFunctionKey(void)::constantCoreVideokCVImageBufferTransferFunctionKey = *(_QWORD *)result;
  }
  else
  {
    result = 80;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore56get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferTransferFunction_ITU_R_709_2");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferTransferFunction_ITU_R_709_2(void)::constantCoreVideokCVImageBufferTransferFunction_ITU_R_709_2 = *(_QWORD *)result;
  }
  else
  {
    result = 81;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore60get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995Ev_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferTransferFunction_SMPTE_240M_1995");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferTransferFunction_SMPTE_240M_1995(void)::constantCoreVideokCVImageBufferTransferFunction_SMPTE_240M_1995 = *(_QWORD *)result;
  }
  else
  {
    result = 82;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore43get_CoreVideo_kCVImageBufferCGColorSpaceKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferCGColorSpaceKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferCGColorSpaceKey(void)::constantCoreVideokCVImageBufferCGColorSpaceKey = *(_QWORD *)result;
  }
  else
  {
    result = 86;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore44get_CoreVideo_kCVImageBufferCleanApertureKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVImageBufferCleanApertureKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVImageBufferCleanApertureKey(void)::constantCoreVideokCVImageBufferCleanApertureKey = *(_QWORD *)result;
  }
  else
  {
    result = 88;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore52get_CoreVideo_kCVPixelBufferOpenGLESCompatibilityKeyEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "kCVPixelBufferOpenGLESCompatibilityKey");
  if (result)
  {
    WebCore::get_CoreVideo_kCVPixelBufferOpenGLESCompatibilityKey(void)::constantCoreVideokCVPixelBufferOpenGLESCompatibilityKey = *(_QWORD *)result;
  }
  else
  {
    result = 95;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::initCoreVideoCVPixelBufferCreate(WebCore *this, const __CFAllocator *a2, unint64_t a3, unint64_t a4, unsigned int a5, const __CFDictionary *a6, __CVBuffer **a7)
{
  if (WebCore::initCoreVideoCVPixelBufferCreate(__CFAllocator const*,unsigned long,unsigned long,unsigned int,__CFDictionary const*,__CVBuffer **)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferCreate(__CFAllocator const*,unsigned long,unsigned long,unsigned int,__CFDictionary const*,__CVBuffer **)::once, &__block_literal_global_223);
  return WebCore::softLinkCoreVideoCVPixelBufferCreate(this, a2, a3, a4, a5, a6, (__CVBuffer **)WebCore::softLinkCoreVideoCVPixelBufferCreate);
}

uint64_t WebCore::initCoreVideoCVPixelBufferCreateWithBytes(WebCore *this, const __CFAllocator *a2, unint64_t a3, unint64_t a4, unsigned int a5, void *a6, unint64_t a7, void (*a8)(void *, const void *), void *a9, const __CFDictionary *a10, __CVBuffer **a11)
{
  if (WebCore::initCoreVideoCVPixelBufferCreateWithBytes(__CFAllocator const*,unsigned long,unsigned long,unsigned int,void *,unsigned long,void (*)(void *,void const*),void *,__CFDictionary const*,__CVBuffer **)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferCreateWithBytes(__CFAllocator const*,unsigned long,unsigned long,unsigned int,void *,unsigned long,void (*)(void *,void const*),void *,__CFDictionary const*,__CVBuffer **)::once, &__block_literal_global_226_0);
  return WebCore::softLinkCoreVideoCVPixelBufferCreateWithBytes(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t WebCore::initCoreVideoCVPixelBufferCreateWithIOSurface(WebCore *this, const __CFAllocator *a2, __IOSurface *a3, const __CFDictionary *a4, __CVBuffer **a5)
{
  if (WebCore::initCoreVideoCVPixelBufferCreateWithIOSurface(__CFAllocator const*,__IOSurface *,__CFDictionary const*,__CVBuffer **)::once != -1)
    dispatch_once(&WebCore::initCoreVideoCVPixelBufferCreateWithIOSurface(__CFAllocator const*,__IOSurface *,__CFDictionary const*,__CVBuffer **)::once, &__block_literal_global_229_0);
  return WebCore::softLinkCoreVideoCVPixelBufferCreateWithIOSurface(this, a2, a3, a4, (__CVBuffer **)WebCore::softLinkCoreVideoCVPixelBufferCreateWithIOSurface);
}

void WebCore::createAudioSampleBuffer(_QWORD *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, const opaqueCMFormatDescription *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  const __CFAllocator *v10;
  opaqueCMSampleBuffer *v11;
  int v12;
  void *v13;
  BOOL v14;
  void *v16;
  const AudioBufferList *v17;
  WebCore *v18;
  __CFNotificationCenter *v19;
  void *v20;
  const __CFString *v21;
  const void *v22;
  const __CFDictionary *v23;
  void *v24;
  __int128 v25;
  uint64_t v26;

  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (*(_DWORD *)(v9 + 16) == 1)
  {
    v10 = *(const __CFAllocator **)(v9 + 8);
    *(_QWORD *)&v25 = 0;
    v11 = (opaqueCMSampleBuffer *)*MEMORY[0x1E0C9AE00];
    v12 = ((uint64_t (*)(PAL *__hidden, const __CFAllocator *, const AudioStreamBasicDescription *, unint64_t, const AudioChannelLayout *, unint64_t, const void *, const __CFDictionary *))PAL::softLinkCoreMediaCMAudioFormatDescriptionCreate)((PAL *)*MEMORY[0x1E0C9AE00], v10, 0, 0, 0, 0, 0, (const __CFDictionary *)&v25);
    v13 = (void *)v25;
    if (v12)
      v14 = 1;
    else
      v14 = (_QWORD)v25 == 0;
    if (v14)
    {
      *a5 = 0;
    }
    else
    {
      v24 = 0;
      v25 = *a3;
      v26 = *((_QWORD *)a3 + 2);
      if (((uint64_t (*)(PAL *__hidden, const __CFAllocator *, OpaqueCMBlockBuffer *, unsigned __int8, int (*)(opaqueCMSampleBuffer *, void *), void *, const opaqueCMFormatDescription *, uint64_t, CMTime *, const AudioStreamPacketDescription *))PAL::softLinkCoreMediaCMAudioSampleBufferCreateWithPacketDescriptions)(v11, 0, 0, 0, 0, v13, a4, (uint64_t)&v25, 0, (const AudioStreamPacketDescription *)&v24))
      {
        *a5 = 0;
      }
      else
      {
        v16 = v24;
        if ((*(unsigned int (**)(_QWORD *))(*a1 + 16))(a1) != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x196128DDCLL);
        }
        if (PAL::softLinkCoreMediaCMSampleBufferSetDataBufferFromAudioBufferList((PAL *)v16, v11, v11, 0, a1[5], v17))
        {
          *a5 = 0;
          if (v16)
            CFRelease(v16);
        }
        else
        {
          *a5 = v16;
        }
      }
      CFRelease(v13);
    }
  }
  else
  {
    v18 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::applicationDidBecomeActive(v18, v19, v20, v21, v22, v23);
  }
}

void WebCore::applicationDidBecomeActive(WebCore *this, __CFNotificationCenter *a2, void *a3, const __CFString *a4, const void *a5, const __CFDictionary *a6)
{
  WebThreadRun(__block_literal_global_104_0);
}

void ___ZN7WebCoreL26applicationDidBecomeActiveEP22__CFNotificationCenterPvPK10__CFStringPKvPK14__CFDictionary_block_invoke()
{
  _BYTE v0[8];

  if ((_MergedGlobals_222 & 1) != 0)
  {
    if (qword_1ECE83BE8)
    {
      {
        WebCore::MainThreadSharedTimer::singleton(void)::instance = (uint64_t)off_1E3405B50;
        qword_1ECE90CE8 = 0;
      }
      CFRunLoopTimerSetNextFireDate((CFRunLoopTimerRef)qword_1ECE83BE8, 1.79769313e308);
      WTF::AutodrainedPool::AutodrainedPool((WTF::AutodrainedPool *)v0);
      (*(void (**)(uint64_t))(*(_QWORD *)qword_1ECE90CE8 + 16))(qword_1ECE90CE8);
      WTF::AutodrainedPool::~AutodrainedPool((WTF::AutodrainedPool *)v0);
    }
  }
  else
  {
    qword_1ECE83BE8 = 0;
    _MergedGlobals_222 = 1;
  }
}

uint64_t ___ZN7WebCoreL55initMediaAccessibilityMACaptionAppearanceSetDisplayTypeE25MACaptionAppearanceDomain30MACaptionAppearanceDisplayType_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceSetDisplayType");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceSetDisplayType = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceDisplayType))result;
  if (!result)
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL60initMediaAccessibilityMACaptionAppearanceCopyForegroundColorE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceCopyForegroundColor");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyForegroundColor = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *))result;
  if (!result)
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL60initMediaAccessibilityMACaptionAppearanceCopyBackgroundColorE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceCopyBackgroundColor");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyBackgroundColor = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *))result;
  if (!result)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL56initMediaAccessibilityMACaptionAppearanceCopyWindowColorE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceCopyWindowColor");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyWindowColor = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *))result;
  if (!result)
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL61initMediaAccessibilityMACaptionAppearanceGetForegroundOpacityE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceGetForegroundOpacity");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetForegroundOpacity = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *))result;
  if (!result)
  {
    result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL61initMediaAccessibilityMACaptionAppearanceGetBackgroundOpacityE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceGetBackgroundOpacity");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetBackgroundOpacity = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *))result;
  if (!result)
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL57initMediaAccessibilityMACaptionAppearanceGetWindowOpacityE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceGetWindowOpacity");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetWindowOpacity = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *))result;
  if (!result)
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL69initMediaAccessibilityMACaptionAppearanceGetWindowRoundedCornerRadiusE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceGetWindowRoundedCornerRadius");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetWindowRoundedCornerRadius = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *))result;
  if (!result)
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL67initMediaAccessibilityMACaptionAppearanceCopyFontDescriptorForStyleE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior28MACaptionAppearanceFontStyle_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceCopyFontDescriptorForStyle");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyFontDescriptorForStyle = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *, MACaptionAppearanceFontStyle))result;
  if (!result)
  {
    result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL65initMediaAccessibilityMACaptionAppearanceGetRelativeCharacterSizeE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceGetRelativeCharacterSize");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetRelativeCharacterSize = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *))result;
  if (!result)
  {
    result = 51;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL57initMediaAccessibilityMACaptionAppearanceGetTextEdgeStyleE25MACaptionAppearanceDomainP27MACaptionAppearanceBehavior_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceGetTextEdgeStyle");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceGetTextEdgeStyle = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, MACaptionAppearanceBehavior *))result;
  if (!result)
  {
    result = 52;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL60initMediaAccessibilityMACaptionAppearanceAddSelectedLanguageE25MACaptionAppearanceDomainPK10__CFString_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceAddSelectedLanguage");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceAddSelectedLanguage = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain, const __CFString *))result;
  if (!result)
  {
    result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL84initMediaAccessibilityMACaptionAppearanceCopyPreferredCaptioningMediaCharacteristicsE25MACaptionAppearanceDomain_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics");
  WebCore::softLinkMediaAccessibilityMACaptionAppearanceCopyPreferredCaptioningMediaCharacteristics = (uint64_t (*)(WebCore *__hidden, MACaptionAppearanceDomain))result;
  if (!result)
  {
    result = 55;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL66initMediaAccessibilityMAAudibleMediaPrefCopyPreferDescriptiveVideoEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore25MediaAccessibilityLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_8;
  v2 = 0;
  if (WebCore::MediaAccessibilityLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::MediaAccessibilityLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::MediaAccessibilityLibrary(BOOL)::frameworkLibrary, "MAAudibleMediaPrefCopyPreferDescriptiveVideo");
  WebCore::softLinkMediaAccessibilityMAAudibleMediaPrefCopyPreferDescriptiveVideo = (uint64_t (*)(WebCore *__hidden))result;
  if (!result)
  {
    result = 61;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(unsigned int *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  char v6;

  v2 = this;
  do
  {
    v3 = __ldaxr(this);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, this));
  if (!v4)
  {
    atomic_store(1u, this);
    v5 = this[6];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_9[v5])(&v6, this + 2);
    v2[6] = -1;
    return (unsigned int *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

uint64_t ___ZN7WebCoreL36initCoreVideoCVBufferCopyAttachmentsEP10__CVBuffer16CVAttachmentMode_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVBufferCopyAttachments");
  WebCore::softLinkCoreVideoCVBufferCopyAttachments = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, CVAttachmentMode))result;
  if (!result)
  {
    result = 36;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL34initCoreVideoCVBufferGetAttachmentEP10__CVBufferPK10__CFStringP16CVAttachmentMode_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVBufferGetAttachment");
  WebCore::softLinkCoreVideoCVBufferGetAttachment = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, const __CFString *, CVAttachmentMode *))result;
  if (!result)
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL37initCoreVideoCVBufferRemoveAttachmentEP10__CVBufferPK10__CFString_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVBufferRemoveAttachment");
  WebCore::softLinkCoreVideoCVBufferRemoveAttachment = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, const __CFString *))result;
  if (!result)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL34initCoreVideoCVBufferSetAttachmentEP10__CVBufferPK10__CFStringPKv16CVAttachmentMode_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVBufferSetAttachment");
  WebCore::softLinkCoreVideoCVBufferSetAttachment = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, const __CFString *, const void *, CVAttachmentMode))result;
  if (!result)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL35initCoreVideoCVPixelBufferGetTypeIDEv_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetTypeID");
  WebCore::softLinkCoreVideoCVPixelBufferGetTypeID = (uint64_t (*)(WebCore *__hidden))result;
  if (!result)
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL34initCoreVideoCVPixelBufferGetWidthEP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetWidth");
  WebCore::softLinkCoreVideoCVPixelBufferGetWidth = (uint64_t (*)(WebCore *__hidden, __CVBuffer *))result;
  if (!result)
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL41initCoreVideoCVPixelBufferGetWidthOfPlaneEP10__CVBufferm_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetWidthOfPlane");
  WebCore::softLinkCoreVideoCVPixelBufferGetWidthOfPlane = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, unint64_t))result;
  if (!result)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL35initCoreVideoCVPixelBufferGetHeightEP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetHeight");
  WebCore::softLinkCoreVideoCVPixelBufferGetHeight = (uint64_t (*)(WebCore *__hidden, __CVBuffer *))result;
  if (!result)
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL42initCoreVideoCVPixelBufferGetHeightOfPlaneEP10__CVBufferm_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetHeightOfPlane");
  WebCore::softLinkCoreVideoCVPixelBufferGetHeightOfPlane = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, unint64_t))result;
  if (!result)
  {
    result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL40initCoreVideoCVPixelBufferGetBaseAddressEP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetBaseAddress");
  WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddress = (uint64_t (*)(WebCore *__hidden, __CVBuffer *))result;
  if (!result)
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL40initCoreVideoCVPixelBufferGetBytesPerRowEP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetBytesPerRow");
  WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRow = (uint64_t (*)(WebCore *__hidden, __CVBuffer *))result;
  if (!result)
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL47initCoreVideoCVPixelBufferGetBytesPerRowOfPlaneEP10__CVBufferm_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetBytesPerRowOfPlane");
  WebCore::softLinkCoreVideoCVPixelBufferGetBytesPerRowOfPlane = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, unint64_t))result;
  if (!result)
  {
    result = 49;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL44initCoreVideoCVPixelBufferGetPixelFormatTypeEP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetPixelFormatType");
  WebCore::softLinkCoreVideoCVPixelBufferGetPixelFormatType = (uint64_t (*)(WebCore *__hidden, __CVBuffer *))result;
  if (!result)
  {
    result = 50;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL39initCoreVideoCVPixelBufferGetPlaneCountEP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetPlaneCount");
  WebCore::softLinkCoreVideoCVPixelBufferGetPlaneCount = (uint64_t (*)(WebCore *__hidden, __CVBuffer *))result;
  if (!result)
  {
    result = 51;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL47initCoreVideoCVPixelBufferGetBaseAddressOfPlaneEP10__CVBufferm_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetBaseAddressOfPlane");
  WebCore::softLinkCoreVideoCVPixelBufferGetBaseAddressOfPlane = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, unint64_t))result;
  if (!result)
  {
    result = 52;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL41initCoreVideoCVPixelBufferLockBaseAddressEP10__CVBuffery_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferLockBaseAddress");
  WebCore::softLinkCoreVideoCVPixelBufferLockBaseAddress = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, unint64_t))result;
  if (!result)
  {
    result = 53;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL43initCoreVideoCVPixelBufferUnlockBaseAddressEP10__CVBuffery_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferUnlockBaseAddress");
  WebCore::softLinkCoreVideoCVPixelBufferUnlockBaseAddress = (uint64_t (*)(WebCore *__hidden, __CVBuffer *, unint64_t))result;
  if (!result)
  {
    result = 54;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL36initCoreVideoCVPixelBufferPoolCreateEPK13__CFAllocatorPK14__CFDictionaryS5_PP19__CVPixelBufferPool_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferPoolCreate");
  WebCore::softLinkCoreVideoCVPixelBufferPoolCreate = (uint64_t (*)(WebCore *__hidden, const __CFAllocator *, const __CFDictionary *, const __CFDictionary *, __CVPixelBufferPool **))result;
  if (!result)
  {
    result = 55;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL47initCoreVideoCVPixelBufferPoolCreatePixelBufferEPK13__CFAllocatorP19__CVPixelBufferPoolPP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferPoolCreatePixelBuffer");
  WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBuffer = (uint64_t (*)(WebCore *__hidden, const __CFAllocator *, __CVPixelBufferPool *, __CVBuffer **))result;
  if (!result)
  {
    result = 56;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL64initCoreVideoCVPixelBufferPoolCreatePixelBufferWithAuxAttributesEPK13__CFAllocatorP19__CVPixelBufferPoolPK14__CFDictionaryPP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferPoolCreatePixelBufferWithAuxAttributes");
  WebCore::softLinkCoreVideoCVPixelBufferPoolCreatePixelBufferWithAuxAttributes = (uint64_t (*)(WebCore *__hidden, const __CFAllocator *, __CVPixelBufferPool *, const __CFDictionary *, __CVBuffer **))result;
  if (!result)
  {
    result = 57;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL38initCoreVideoCVPixelBufferGetIOSurfaceEP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferGetIOSurface");
  WebCore::softLinkCoreVideoCVPixelBufferGetIOSurface = (uint64_t (*)(WebCore *__hidden, __CVBuffer *))result;
  if (!result)
  {
    result = 58;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL57initCoreVideoCVImageBufferCreateColorSpaceFromAttachmentsEPK14__CFDictionary_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVImageBufferCreateColorSpaceFromAttachments");
  WebCore::softLinkCoreVideoCVImageBufferCreateColorSpaceFromAttachments = (uint64_t (*)(WebCore *__hidden, const __CFDictionary *))result;
  if (!result)
  {
    result = 59;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL32initCoreVideoCVPixelBufferCreateEPK13__CFAllocatormmjPK14__CFDictionaryPP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferCreate");
  WebCore::softLinkCoreVideoCVPixelBufferCreate = (uint64_t (*)(WebCore *__hidden, const __CFAllocator *, unint64_t, unint64_t, unsigned int, const __CFDictionary *, __CVBuffer **))result;
  if (!result)
  {
    result = 104;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL41initCoreVideoCVPixelBufferCreateWithBytesEPK13__CFAllocatormmjPvmPFvS3_PKvES3_PK14__CFDictionaryPP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferCreateWithBytes");
  WebCore::softLinkCoreVideoCVPixelBufferCreateWithBytes = (uint64_t (*)(WebCore *__hidden, const __CFAllocator *, unint64_t, unint64_t, unsigned int, void *, unint64_t, void (*)(void *, const void *), void *, const __CFDictionary *, __CVBuffer **))result;
  if (!result)
  {
    result = 105;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL45initCoreVideoCVPixelBufferCreateWithIOSurfaceEPK13__CFAllocatorP11__IOSurfacePK14__CFDictionaryPP10__CVBuffer_block_invoke()
{
  uint64_t result;
  _QWORD block[4];
  char v2;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN7WebCore16CoreVideoLibraryEb_block_invoke;
  block[3] = &__block_descriptor_tmp_11_2;
  v2 = 0;
  if (WebCore::CoreVideoLibrary(BOOL)::once != -1)
    dispatch_once(&WebCore::CoreVideoLibrary(BOOL)::once, block);
  result = (uint64_t)dlsym((void *)WebCore::CoreVideoLibrary(BOOL)::frameworkLibrary, "CVPixelBufferCreateWithIOSurface");
  WebCore::softLinkCoreVideoCVPixelBufferCreateWithIOSurface = (uint64_t (*)(WebCore *__hidden, const __CFAllocator *, __IOSurface *, const __CFDictionary *, __CVBuffer **))result;
  if (!result)
  {
    result = 106;
    __break(0xC471u);
  }
  return result;
}

char *WTF::Vector<__CFDictionary const*,16ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(char **a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;

  v3 = a3;
  v5 = *a1;
  if ((unint64_t)*a1 <= a3)
  {
    v6 = *((unsigned int *)a1 + 3);
    if ((unint64_t)&v5[8 * v6] > a3)
    {
      v7 = *((unsigned int *)a1 + 2);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v19 = *a1;
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
      if (v10 < 0x11)
      {
        v11 = (char *)(a1 + 2);
        *a1 = (char *)(a1 + 2);
        *((_DWORD *)a1 + 2) = 16;
        goto LABEL_31;
      }
      if (!(v10 >> 29))
      {
        v11 = (char *)WTF::fastMalloc((WTF *)(8 * v10));
        *((_DWORD *)a1 + 2) = v10;
        *a1 = v11;
LABEL_31:
        memcpy(v11, v5, 8 * v6);
        v19 = *a1;
        if (a1 + 2 != (char **)v5 && v5)
        {
          if (v19 == v5)
          {
            *a1 = 0;
            *((_DWORD *)a1 + 2) = 0;
          }
          WTF::fastFree((WTF *)v5, v20);
          v19 = *a1;
        }
        return &v19[8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3)];
      }
LABEL_38:
      __break(0xC471u);
      JUMPOUT(0x19612AAD4);
    }
  }
  v12 = *((unsigned int *)a1 + 2);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= a2)
    v15 = a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *((unsigned int *)a1 + 3);
    if (v15 < 0x11)
    {
      v17 = (char *)(a1 + 2);
      *a1 = (char *)(a1 + 2);
      *((_DWORD *)a1 + 2) = 16;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_38;
      v17 = (char *)WTF::fastMalloc((WTF *)(8 * v15));
      *((_DWORD *)a1 + 2) = v15;
      *a1 = v17;
    }
    memcpy(v17, v5, 8 * v16);
    if (a1 + 2 != (char **)v5 && v5)
    {
      if (*a1 == v5)
      {
        *a1 = 0;
        *((_DWORD *)a1 + 2) = 0;
      }
      WTF::fastFree((WTF *)v5, v18);
    }
  }
  return (char *)v3;
}

uint64_t WebCore::initVideoToolboxVTSessionCopyProperty(WebCore *this, const void *a2, const __CFString *a3, const __CFAllocator *a4, void *a5)
{
  if (WebCore::initVideoToolboxVTSessionCopyProperty(void const*,__CFString const*,__CFAllocator const*,void *)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTSessionCopyProperty(void const*,__CFString const*,__CFAllocator const*,void *)::once, &__block_literal_global_82_2);
  return WebCore::softLinkVideoToolboxVTSessionCopyProperty(this, a2, a3, a4, WebCore::softLinkVideoToolboxVTSessionCopyProperty);
}

uint64_t WebCore::initVideoToolboxVTSessionSetProperties(WebCore *this, const void *a2, const __CFDictionary *a3)
{
  if (WebCore::initVideoToolboxVTSessionSetProperties(void const*,__CFDictionary const*)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTSessionSetProperties(void const*,__CFDictionary const*)::once, &__block_literal_global_85_1);
  return WebCore::softLinkVideoToolboxVTSessionSetProperties(this, a2, (const __CFDictionary *)WebCore::softLinkVideoToolboxVTSessionSetProperties);
}

uint64_t WebCore::initVideoToolboxVTDecompressionSessionCreate(WebCore *this, const __CFAllocator *a2, const opaqueCMFormatDescription *a3, const __CFDictionary *a4, const __CFDictionary *a5, const VTDecompressionOutputCallbackRecord *a6, OpaqueVTDecompressionSession **a7)
{
  if (WebCore::initVideoToolboxVTDecompressionSessionCreate(__CFAllocator const*,opaqueCMFormatDescription const*,__CFDictionary const*,__CFDictionary const*,VTDecompressionOutputCallbackRecord const*,OpaqueVTDecompressionSession **)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTDecompressionSessionCreate(__CFAllocator const*,opaqueCMFormatDescription const*,__CFDictionary const*,__CFDictionary const*,VTDecompressionOutputCallbackRecord const*,OpaqueVTDecompressionSession **)::once, &__block_literal_global_88_0);
  return WebCore::softLinkVideoToolboxVTDecompressionSessionCreate(this, a2, a3, a4, a5, a6, (OpaqueVTDecompressionSession **)WebCore::softLinkVideoToolboxVTDecompressionSessionCreate);
}

uint64_t WebCore::initVideoToolboxVTDecompressionSessionInvalidate(WebCore *this, OpaqueVTDecompressionSession *a2)
{
  if (WebCore::initVideoToolboxVTDecompressionSessionInvalidate(OpaqueVTDecompressionSession *)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTDecompressionSessionInvalidate(OpaqueVTDecompressionSession *)::once, &__block_literal_global_91_0);
  return WebCore::softLinkVideoToolboxVTDecompressionSessionInvalidate(this, (OpaqueVTDecompressionSession *)WebCore::softLinkVideoToolboxVTDecompressionSessionInvalidate);
}

uint64_t WebCore::initVideoToolboxVTDecompressionSessionCanAcceptFormatDescription(WebCore *this, OpaqueVTDecompressionSession *a2, const opaqueCMFormatDescription *a3)
{
  if (WebCore::initVideoToolboxVTDecompressionSessionCanAcceptFormatDescription(OpaqueVTDecompressionSession *,opaqueCMFormatDescription const*)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTDecompressionSessionCanAcceptFormatDescription(OpaqueVTDecompressionSession *,opaqueCMFormatDescription const*)::once, &__block_literal_global_94_0);
  return WebCore::softLinkVideoToolboxVTDecompressionSessionCanAcceptFormatDescription(this, a2, (const opaqueCMFormatDescription *)WebCore::softLinkVideoToolboxVTDecompressionSessionCanAcceptFormatDescription);
}

uint64_t WebCore::initVideoToolboxVTDecompressionSessionWaitForAsynchronousFrames(WebCore *this, OpaqueVTDecompressionSession *a2)
{
  if (WebCore::initVideoToolboxVTDecompressionSessionWaitForAsynchronousFrames(OpaqueVTDecompressionSession *)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTDecompressionSessionWaitForAsynchronousFrames(OpaqueVTDecompressionSession *)::once, &__block_literal_global_97_0);
  return WebCore::softLinkVideoToolboxVTDecompressionSessionWaitForAsynchronousFrames(this, (OpaqueVTDecompressionSession *)WebCore::softLinkVideoToolboxVTDecompressionSessionWaitForAsynchronousFrames);
}

uint64_t WebCore::initVideoToolboxVTDecompressionSessionDecodeFrameWithOutputHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (WebCore::initVideoToolboxVTDecompressionSessionDecodeFrameWithOutputHandler(OpaqueVTDecompressionSession *,opaqueCMSampleBuffer *,unsigned int,unsigned int *,void({block_pointer})(int,unsigned int,__CVBuffer *,CMTime,CMTime))::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTDecompressionSessionDecodeFrameWithOutputHandler(OpaqueVTDecompressionSession *,opaqueCMSampleBuffer *,unsigned int,unsigned int *,void({block_pointer})(int,unsigned int,__CVBuffer *,CMTime,CMTime))::once, &__block_literal_global_100_1);
  return WebCore::softLinkVideoToolboxVTDecompressionSessionDecodeFrameWithOutputHandler(a1, a2, a3, a4, a5);
}

uint64_t WebCore::initVideoToolboxVTDecompressionSessionDecodeFrame(WebCore *this, OpaqueVTDecompressionSession *a2, opaqueCMSampleBuffer *a3, unsigned int a4, void *a5, unsigned int *a6)
{
  if (WebCore::initVideoToolboxVTDecompressionSessionDecodeFrame(OpaqueVTDecompressionSession *,opaqueCMSampleBuffer *,unsigned int,void *,unsigned int *)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTDecompressionSessionDecodeFrame(OpaqueVTDecompressionSession *,opaqueCMSampleBuffer *,unsigned int,void *,unsigned int *)::once, &__block_literal_global_103_0);
  return WebCore::softLinkVideoToolboxVTDecompressionSessionDecodeFrame(this, a2, a3, a4, a5, (unsigned int *)WebCore::softLinkVideoToolboxVTDecompressionSessionDecodeFrame);
}

uint64_t WebCore::initVideoToolboxVTImageRotationSessionCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (WebCore::initVideoToolboxVTImageRotationSessionCreate(__CFAllocator const*,unsigned int,OpaqueVTImageRotationSession **)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTImageRotationSessionCreate(__CFAllocator const*,unsigned int,OpaqueVTImageRotationSession **)::once, &__block_literal_global_106_1);
  return WebCore::softLinkVideoToolboxVTImageRotationSessionCreate(a1, a2, a3);
}

uint64_t WebCore::initVideoToolboxVTImageRotationSessionSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (WebCore::initVideoToolboxVTImageRotationSessionSetProperty(OpaqueVTImageRotationSession *,__CFString const*,void const*)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTImageRotationSessionSetProperty(OpaqueVTImageRotationSession *,__CFString const*,void const*)::once, &__block_literal_global_109_1);
  return WebCore::softLinkVideoToolboxVTImageRotationSessionSetProperty(a1, a2, a3);
}

uint64_t WebCore::initVideoToolboxVTImageRotationSessionTransferImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (WebCore::initVideoToolboxVTImageRotationSessionTransferImage(OpaqueVTImageRotationSession *,__CVBuffer *,__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTImageRotationSessionTransferImage(OpaqueVTImageRotationSession *,__CVBuffer *,__CVBuffer *)::once, &__block_literal_global_112_1);
  return WebCore::softLinkVideoToolboxVTImageRotationSessionTransferImage(a1, a2, a3);
}

BOOL WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(WebCore *this)
{
  _BOOL8 result;

    return WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded != 0;
  result = WebCore::init_VideoToolbox_VTIsHardwareDecodeSupported(this);
  WebCore::canLoad_VideoToolbox_VTIsHardwareDecodeSupported(void)::loaded = result;
  return result;
}

uint64_t WebCore::softLink_VideoToolbox_VTIsHardwareDecodeSupported(WebCore *this)
{
  return WebCore::softLinkVideoToolboxVTIsHardwareDecodeSupported(this);
}

uint64_t WebCore::softLink_VideoToolbox_VTRegisterSupplementalVideoDecoderIfAvailable(WebCore *this)
{
  return WebCore::softLinkVideoToolboxVTRegisterSupplementalVideoDecoderIfAvailable(this);
}

uint64_t WebCore::initVideoToolboxVTSelectAndCreateVideoDecoderInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (WebCore::initVideoToolboxVTSelectAndCreateVideoDecoderInstance(unsigned int,__CFAllocator const*,__CFDictionary const*,OpaqueVTVideoDecoder *)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTSelectAndCreateVideoDecoderInstance(unsigned int,__CFAllocator const*,__CFDictionary const*,OpaqueVTVideoDecoder *)::once, &__block_literal_global_115_1);
  return WebCore::softLinkVideoToolboxVTSelectAndCreateVideoDecoderInstance(a1, a2, a3, a4);
}

uint64_t ___ZN7WebCore83get_VideoToolbox_kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoderEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder(void)::constantVideoToolboxkVTVideoDecoderSpecification_EnableHardwareAcceleratedVideoDecoder = *(_QWORD *)result;
  }
  else
  {
    result = 57;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore53get_VideoToolbox_kVTDecompressionPropertyKey_RealTimeEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTDecompressionPropertyKey_RealTime");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTDecompressionPropertyKey_RealTime(void)::constantVideoToolboxkVTDecompressionPropertyKey_RealTime = *(_QWORD *)result;
  }
  else
  {
    result = 59;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore75get_VideoToolbox_kVTDecompressionPropertyKey_SuggestedQualityOfServiceTiersEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTDecompressionPropertyKey_SuggestedQualityOfServiceTiers");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTDecompressionPropertyKey_SuggestedQualityOfServiceTiers(void)::constantVideoToolboxkVTDecompressionPropertyKey_SuggestedQualityOfServiceTiers = *(_QWORD *)result;
  }
  else
  {
    result = 60;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore68get_VideoToolbox_kVTImageRotationPropertyKey_EnableHighSpeedTransferEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTImageRotationPropertyKey_EnableHighSpeedTransfer");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_EnableHighSpeedTransfer(void)::constantVideoToolboxkVTImageRotationPropertyKey_EnableHighSpeedTransfer = *(_QWORD *)result;
  }
  else
  {
    result = 61;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore70get_VideoToolbox_kVTImageRotationPropertyKey_FlipHorizontalOrientationEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTImageRotationPropertyKey_FlipHorizontalOrientation");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_FlipHorizontalOrientation(void)::constantVideoToolboxkVTImageRotationPropertyKey_FlipHorizontalOrientation = *(_QWORD *)result;
  }
  else
  {
    result = 62;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore68get_VideoToolbox_kVTImageRotationPropertyKey_FlipVerticalOrientationEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTImageRotationPropertyKey_FlipVerticalOrientation");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTImageRotationPropertyKey_FlipVerticalOrientation(void)::constantVideoToolboxkVTImageRotationPropertyKey_FlipVerticalOrientation = *(_QWORD *)result;
  }
  else
  {
    result = 63;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::initVideoToolboxVTPixelTransferSessionCreate(WebCore *this, const __CFAllocator *a2, OpaqueVTPixelTransferSession **a3)
{
  if (WebCore::initVideoToolboxVTPixelTransferSessionCreate(__CFAllocator const*,OpaqueVTPixelTransferSession **)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTPixelTransferSessionCreate(__CFAllocator const*,OpaqueVTPixelTransferSession **)::once, &__block_literal_global_118_0);
  return WebCore::softLinkVideoToolboxVTPixelTransferSessionCreate(this, a2, (OpaqueVTPixelTransferSession **)WebCore::softLinkVideoToolboxVTPixelTransferSessionCreate);
}

uint64_t WebCore::initVideoToolboxVTPixelTransferSessionTransferImage(WebCore *this, OpaqueVTPixelTransferSession *a2, __CVBuffer *a3, __CVBuffer *a4)
{
  if (WebCore::initVideoToolboxVTPixelTransferSessionTransferImage(OpaqueVTPixelTransferSession *,__CVBuffer *,__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTPixelTransferSessionTransferImage(OpaqueVTPixelTransferSession *,__CVBuffer *,__CVBuffer *)::once, &__block_literal_global_121_2);
  return WebCore::softLinkVideoToolboxVTPixelTransferSessionTransferImage(this, a2, a3, (__CVBuffer *)WebCore::softLinkVideoToolboxVTPixelTransferSessionTransferImage);
}

uint64_t WebCore::initVideoToolboxVTSessionSetProperty(WebCore *this, const void *a2, const __CFString *a3, const void *a4)
{
  if (WebCore::initVideoToolboxVTSessionSetProperty(void const*,__CFString const*,void const*)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTSessionSetProperty(void const*,__CFString const*,void const*)::once, &__block_literal_global_124_0);
  return WebCore::softLinkVideoToolboxVTSessionSetProperty(this, a2, a3, WebCore::softLinkVideoToolboxVTSessionSetProperty);
}

uint64_t ___ZN7WebCore56get_VideoToolbox_kVTPixelTransferPropertyKey_ScalingModeEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTPixelTransferPropertyKey_ScalingMode");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_ScalingMode(void)::constantVideoToolboxkVTPixelTransferPropertyKey_ScalingMode = *(_QWORD *)result;
  }
  else
  {
    result = 68;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore36get_VideoToolbox_kVTScalingMode_TrimEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTScalingMode_Trim");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTScalingMode_Trim(void)::constantVideoToolboxkVTScalingMode_Trim = *(_QWORD *)result;
  }
  else
  {
    result = 70;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore78get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransferEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer(void)::constantVideoToolboxkVTPixelTransferPropertyKey_EnableHardwareAcceleratedTransfer = *(_QWORD *)result;
  }
  else
  {
    result = 72;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore68get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHighSpeedTransferEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTPixelTransferPropertyKey_EnableHighSpeedTransfer");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_EnableHighSpeedTransfer(void)::constantVideoToolboxkVTPixelTransferPropertyKey_EnableHighSpeedTransfer = *(_QWORD *)result;
  }
  else
  {
    result = 73;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCore53get_VideoToolbox_kVTPixelTransferPropertyKey_RealTimeEv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "kVTPixelTransferPropertyKey_RealTime");
  if (result)
  {
    WebCore::get_VideoToolbox_kVTPixelTransferPropertyKey_RealTime(void)::constantVideoToolboxkVTPixelTransferPropertyKey_RealTime = *(_QWORD *)result;
  }
  else
  {
    result = 74;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::initVideoToolboxVTPixelBufferConformerCreateWithAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (WebCore::initVideoToolboxVTPixelBufferConformerCreateWithAttributes(__CFAllocator const*,__CFDictionary const*,OpaqueVTPixelBufferConformer **)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTPixelBufferConformerCreateWithAttributes(__CFAllocator const*,__CFDictionary const*,OpaqueVTPixelBufferConformer **)::once, &__block_literal_global_127_1);
  return WebCore::softLinkVideoToolboxVTPixelBufferConformerCreateWithAttributes(a1, a2, a3);
}

uint64_t WebCore::initVideoToolboxVTPixelBufferConformerIsConformantPixelBuffer(uint64_t a1, uint64_t a2)
{
  if (WebCore::initVideoToolboxVTPixelBufferConformerIsConformantPixelBuffer(OpaqueVTPixelBufferConformer *,__CVBuffer *)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTPixelBufferConformerIsConformantPixelBuffer(OpaqueVTPixelBufferConformer *,__CVBuffer *)::once, &__block_literal_global_130_1);
  return WebCore::softLinkVideoToolboxVTPixelBufferConformerIsConformantPixelBuffer(a1, a2);
}

uint64_t WebCore::initVideoToolboxVTPixelBufferConformerCopyConformedPixelBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (WebCore::initVideoToolboxVTPixelBufferConformerCopyConformedPixelBuffer(OpaqueVTPixelBufferConformer *,__CVBuffer *,unsigned char,__CVBuffer **)::once != -1)
    dispatch_once(&WebCore::initVideoToolboxVTPixelBufferConformerCopyConformedPixelBuffer(OpaqueVTPixelBufferConformer *,__CVBuffer *,unsigned char,__CVBuffer **)::once, &__block_literal_global_133_1);
  return WebCore::softLinkVideoToolboxVTPixelBufferConformerCopyConformedPixelBuffer(a1, a2, a3, a4);
}

void std::call_once[abi:sn180100]<WebCore::CDMFactory::registeredFactories(void)::$_0>(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = atomic_load(&WebCore::CDMFactory::registeredFactories(void)::once);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = a1;
    std::__call_once(&WebCore::CDMFactory::registeredFactories(void)::once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CDMFactory::registeredFactories(void)::$_0 &&>>);
  }
}

void WebCore::CDMFactory::registerFactory(WebCore::CDMFactory *this, WebCore::CDMFactory *a2)
{
  unint64_t v3;
  int v4;
  _QWORD *v5;
  int v6;
  char v7;
  WebCore::CDMFactory **v8;
  WebCore::CDMFactory *v9;

  {
    WebCore::CDMFactory::registeredFactories(void)::factories = 0;
    *(_QWORD *)&dword_1EE2F8AB8 = 0;
  }
  v3 = atomic_load(&WebCore::CDMFactory::registeredFactories(void)::once);
  if (v3 != -1)
  {
    v9 = (WebCore::CDMFactory *)&v7;
    v8 = &v9;
    std::__call_once(&WebCore::CDMFactory::registeredFactories(void)::once, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CDMFactory::registeredFactories(void)::$_0 &&>>);
  }
  v9 = this;
  v4 = dword_1EE2F8ABC;
  if (dword_1EE2F8ABC == dword_1EE2F8AB8)
  {
    v5 = (_QWORD *)WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(dword_1EE2F8ABC + 1, (unint64_t)&v9);
    v6 = dword_1EE2F8ABC;
    *(_QWORD *)(WebCore::CDMFactory::registeredFactories(void)::factories + 8 * dword_1EE2F8ABC) = *v5;
    v4 = v6;
  }
  else
  {
    *(_QWORD *)(WebCore::CDMFactory::registeredFactories(void)::factories + 8 * dword_1EE2F8ABC) = this;
  }
  dword_1EE2F8ABC = v4 + 1;
}

void WebCore::CDMFactory::unregisterFactory(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  int v4;
  char *v5;
  int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  char **v15;
  char *v16;

  {
    WebCore::CDMFactory::registeredFactories(void)::factories = 0;
    *(_QWORD *)&dword_1EE2F8AB8 = 0;
  }
  v2 = atomic_load(&WebCore::CDMFactory::registeredFactories(void)::once);
  if (v2 != -1)
  {
    v16 = &v14;
    v15 = &v16;
    std::__call_once(&WebCore::CDMFactory::registeredFactories(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CDMFactory::registeredFactories(void)::$_0 &&>>);
  }
  v3 = (char *)WebCore::CDMFactory::registeredFactories(void)::factories;
  v4 = dword_1EE2F8ABC;
  v5 = (char *)(WebCore::CDMFactory::registeredFactories(void)::factories + 8 * dword_1EE2F8ABC);
  if (dword_1EE2F8ABC)
  {
    v6 = 0;
    v7 = WebCore::CDMFactory::registeredFactories(void)::factories;
    v8 = (char *)(WebCore::CDMFactory::registeredFactories(void)::factories + 8 * dword_1EE2F8ABC);
    v9 = v8;
    do
    {
      if (*(_QWORD *)v3 == a1)
      {
        v10 = v3;
        if (v9 != (char *)(WebCore::CDMFactory::registeredFactories(void)::factories
                          + 8 * dword_1EE2F8ABC))
        {
          if (v3 == v8)
          {
            v10 = v9;
          }
          else
          {
            v11 = v7 - (_QWORD)v8;
            memmove(v9, v8, v7 - (_QWORD)v8);
            v10 = &v9[v11];
          }
        }
        v8 = v3 + 8;
        ++v6;
        v9 = v10;
      }
      v3 += 8;
      v7 += 8;
    }
    while (v3 < v5);
    v3 = (char *)WebCore::CDMFactory::registeredFactories(void)::factories;
    v12 = dword_1EE2F8ABC;
    v4 = dword_1EE2F8ABC;
    v5 = v9;
  }
  else
  {
    v12 = 0;
    v6 = 0;
    v8 = (char *)WebCore::CDMFactory::registeredFactories(void)::factories;
  }
  v13 = &v3[8 * v12];
  if (v8 != v13)
  {
    memmove(v5, v8, v13 - v8);
    v4 = dword_1EE2F8ABC;
  }
  dword_1EE2F8ABC = v4 - v6;
}

uint64_t WTF::LogArgument<WebCore::CDMKeySystemConfiguration>::toString(uint64_t a1)
{
  const WTF::String *v2;
  WTF::StringImpl *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  const WTF::String *v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  char **v16;
  uint64_t v17;
  char *v18;
  char *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  void *v37;
  WTF::StringImpl *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  void *v44;
  WTF::StringImpl **v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  void *v62;
  WTF::StringImpl *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  void *v69;
  WTF::StringImpl **v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  const WTF::String *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  const WTF::String *v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  const WTF::String *v103;
  uint64_t v104;
  unsigned __int8 *v105;
  uint64_t v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  WTF::StringImpl *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  WTF::StringImpl *v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  uint64_t result;
  _DWORD **v128;
  uint64_t v129;
  _DWORD *v130;
  _DWORD **v131;
  uint64_t v132;
  _DWORD *v133;
  _DWORD **v134;
  uint64_t v135;
  _DWORD *v136;
  _DWORD **v137;
  uint64_t v138;
  _DWORD *v139;
  _DWORD **v140;
  uint64_t v141;
  _DWORD *v142;
  _DWORD **v143;
  uint64_t v144;
  _DWORD *v145;
  _DWORD **v146;
  uint64_t v147;
  _DWORD *v148;
  WTF::JSONImpl::Value *v149;
  WTF::StringImpl *v150;
  WTF::StringImpl *v151;
  WTF::StringImpl *v152;
  WTF::StringImpl *v153;
  WTF::StringImpl *v154;
  WTF::StringImpl *v155;
  WTF::StringImpl *v156;
  WTF::StringImpl *v157;
  __int16 v158;

  WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)a1);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)a1, v2);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v149 + 2, &v154, (const WTF::StringImpl *)&v155, (uint64_t)&v156);
  if ((_BYTE)v158)
  {
    v4 = (uint64_t *)((char *)v149 + 24);
    v5 = *((unsigned int *)v149 + 9);
    if ((_DWORD)v5 == *((_DWORD *)v149 + 8))
    {
      v128 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v4, v5 + 1, (unint64_t)&v154);
      v5 = *((unsigned int *)v149 + 9);
      v129 = *((_QWORD *)v149 + 3);
      v130 = *v128;
      if (*v128)
        *v130 += 2;
      *(_QWORD *)(v129 + 8 * v5) = v130;
    }
    else
    {
      v6 = *v4;
      v7 = v154;
      if (v154)
        *(_DWORD *)v154 += 2;
      *(_QWORD *)(v6 + 8 * v5) = v7;
    }
    *((_DWORD *)v149 + 9) = v5 + 1;
  }
  v8 = v155;
  v155 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v8;
  }
  v9 = v154;
  v154 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      v9 = (WTF::StringImpl *)WTF::StringImpl::destroy(v9, v3);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::JSONImpl::Array::create(v9);
  v11 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v11)
  {
    v12 = *(WTF::StringImpl ***)(a1 + 8);
    v13 = 8 * v11;
    do
    {
      v14 = *v12;
      if (*v12)
        *(_DWORD *)v14 += 2;
      v155 = v14;
      v15 = v154;
      v16 = (char **)((char *)v154 + 16);
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v155, v10);
      v17 = *((unsigned int *)v15 + 7);
      if ((_DWORD)v17 == *((_DWORD *)v15 + 6))
      {
        v18 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v16, v17 + 1, (unint64_t)&v156);
        v17 = *((unsigned int *)v15 + 7);
        v19 = (char *)*((_QWORD *)v15 + 2);
        v20 = *(WTF::StringImpl **)v18;
        *(_QWORD *)v18 = 0;
      }
      else
      {
        v19 = *v16;
        v20 = v156;
        v156 = 0;
      }
      *(_QWORD *)&v19[8 * v17] = v20;
      *((_DWORD *)v15 + 7) = v17 + 1;
      v21 = v156;
      v156 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v21;
      }
      v22 = v155;
      v155 = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v10);
        else
          *(_DWORD *)v22 -= 2;
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v23 = v154;
  v154 = 0;
  v155 = v156;
  v153 = v23;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v149 + 2, &v155, (const WTF::StringImpl *)&v153, (uint64_t)&v156);
  if ((_BYTE)v158)
  {
    v25 = (uint64_t *)((char *)v149 + 24);
    v26 = *((unsigned int *)v149 + 9);
    if ((_DWORD)v26 == *((_DWORD *)v149 + 8))
    {
      v131 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v25, v26 + 1, (unint64_t)&v155);
      v26 = *((unsigned int *)v149 + 9);
      v132 = *((_QWORD *)v149 + 3);
      v133 = *v131;
      if (*v131)
        *v133 += 2;
      *(_QWORD *)(v132 + 8 * v26) = v133;
    }
    else
    {
      v27 = *v25;
      v28 = v155;
      if (v155)
        *(_DWORD *)v155 += 2;
      *(_QWORD *)(v27 + 8 * v26) = v28;
    }
    *((_DWORD *)v149 + 9) = v26 + 1;
  }
  v29 = v153;
  v153 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v29;
  }
  v30 = v155;
  v155 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      v30 = (WTF::StringImpl *)WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  WTF::JSONImpl::Array::create(v30);
  v31 = *(_DWORD *)(a1 + 36);
  if (v31)
  {
    v32 = *(_QWORD *)(a1 + 24);
    v33 = v32 + 24 * v31;
    do
    {
      v34 = *(WTF::StringImpl **)v32;
      if (*(_QWORD *)v32)
        *(_DWORD *)v34 += 2;
      v156 = v34;
      v35 = *(WTF::StringImpl **)(v32 + 8);
      if (v35)
        *(_DWORD *)v35 += 2;
      v157 = v35;
      v158 = *(_WORD *)(v32 + 16);
      v36 = v153;
      WebCore::toJSONObject((WTF::JSONImpl::Object *)&v155, (unsigned __int8 *)&v156);
      v38 = v155;
      v155 = 0;
      v39 = *((unsigned int *)v36 + 7);
      if ((_DWORD)v39 == *((_DWORD *)v36 + 6))
      {
        v40 = v39 + (v39 >> 2);
        if (v40 >= 0x10)
          v41 = v40 + 1;
        else
          v41 = 16;
        if (v41 <= v39 + 1)
          v42 = v39 + 1;
        else
          v42 = v41;
        if (v42 >> 29)
        {
          __break(0xC471u);
          goto LABEL_263;
        }
        v43 = (void *)*((_QWORD *)v36 + 2);
        v44 = (void *)WTF::fastMalloc((WTF *)(8 * v42));
        *((_DWORD *)v36 + 6) = v42;
        *((_QWORD *)v36 + 2) = v44;
        memcpy(v44, v43, 8 * v39);
        if (v43)
        {
          if (*((void **)v36 + 2) == v43)
          {
            *((_QWORD *)v36 + 2) = 0;
            *((_DWORD *)v36 + 6) = 0;
          }
          WTF::fastFree((WTF *)v43, v37);
        }
        v39 = *((unsigned int *)v36 + 7);
        v45 = (WTF::StringImpl **)(*((_QWORD *)v36 + 2) + 8 * v39);
      }
      else
      {
        v45 = (WTF::StringImpl **)(*((_QWORD *)v36 + 2) + 8 * v39);
      }
      *v45 = v38;
      *((_DWORD *)v36 + 7) = v39 + 1;
      v46 = v155;
      v155 = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v46;
      }
      v47 = v157;
      v157 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v37);
        else
          *(_DWORD *)v47 -= 2;
      }
      v48 = v156;
      v156 = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v37);
        else
          *(_DWORD *)v48 -= 2;
      }
      v32 += 24;
    }
    while (v32 != v33);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v155 = v156;
  v152 = v153;
  v153 = 0;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v149 + 2, &v155, (const WTF::StringImpl *)&v152, (uint64_t)&v156);
  if ((_BYTE)v158)
  {
    v50 = (uint64_t *)((char *)v149 + 24);
    v51 = *((unsigned int *)v149 + 9);
    if ((_DWORD)v51 == *((_DWORD *)v149 + 8))
    {
      v134 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v50, v51 + 1, (unint64_t)&v155);
      v51 = *((unsigned int *)v149 + 9);
      v135 = *((_QWORD *)v149 + 3);
      v136 = *v134;
      if (*v134)
        *v136 += 2;
      *(_QWORD *)(v135 + 8 * v51) = v136;
    }
    else
    {
      v52 = *v50;
      v53 = v155;
      if (v155)
        *(_DWORD *)v155 += 2;
      *(_QWORD *)(v52 + 8 * v51) = v53;
    }
    *((_DWORD *)v149 + 9) = v51 + 1;
  }
  v54 = v152;
  v152 = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v54;
  }
  v55 = v155;
  v155 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      v55 = (WTF::StringImpl *)WTF::StringImpl::destroy(v55, v49);
    else
      *(_DWORD *)v55 -= 2;
  }
  WTF::JSONImpl::Array::create(v55);
  v56 = *(_DWORD *)(a1 + 52);
  if (v56)
  {
    v57 = *(_QWORD *)(a1 + 40);
    v58 = v57 + 24 * v56;
    do
    {
      v59 = *(WTF::StringImpl **)v57;
      if (*(_QWORD *)v57)
        *(_DWORD *)v59 += 2;
      v156 = v59;
      v60 = *(WTF::StringImpl **)(v57 + 8);
      if (v60)
        *(_DWORD *)v60 += 2;
      v157 = v60;
      v158 = *(_WORD *)(v57 + 16);
      v61 = v152;
      WebCore::toJSONObject((WTF::JSONImpl::Object *)&v155, (unsigned __int8 *)&v156);
      v63 = v155;
      v155 = 0;
      v64 = *((unsigned int *)v61 + 7);
      if ((_DWORD)v64 == *((_DWORD *)v61 + 6))
      {
        v65 = v64 + (v64 >> 2);
        if (v65 >= 0x10)
          v66 = v65 + 1;
        else
          v66 = 16;
        if (v66 <= v64 + 1)
          v67 = v64 + 1;
        else
          v67 = v66;
        if (v67 >> 29)
        {
          __break(0xC471u);
LABEL_263:
          JUMPOUT(0x19612C6F4);
        }
        v68 = (void *)*((_QWORD *)v61 + 2);
        v69 = (void *)WTF::fastMalloc((WTF *)(8 * v67));
        *((_DWORD *)v61 + 6) = v67;
        *((_QWORD *)v61 + 2) = v69;
        memcpy(v69, v68, 8 * v64);
        if (v68)
        {
          if (*((void **)v61 + 2) == v68)
          {
            *((_QWORD *)v61 + 2) = 0;
            *((_DWORD *)v61 + 6) = 0;
          }
          WTF::fastFree((WTF *)v68, v62);
        }
        v64 = *((unsigned int *)v61 + 7);
        v70 = (WTF::StringImpl **)(*((_QWORD *)v61 + 2) + 8 * v64);
      }
      else
      {
        v70 = (WTF::StringImpl **)(*((_QWORD *)v61 + 2) + 8 * v64);
      }
      *v70 = v63;
      *((_DWORD *)v61 + 7) = v64 + 1;
      v71 = v155;
      v155 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v71;
      }
      v72 = v157;
      v157 = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
          WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v62);
        else
          *(_DWORD *)v72 -= 2;
      }
      v73 = v156;
      v156 = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, (WTF::StringImpl *)v62);
        else
          *(_DWORD *)v73 -= 2;
      }
      v57 += 24;
    }
    while (v57 != v58);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v155 = v156;
  v151 = v152;
  v152 = 0;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v149 + 2, &v155, (const WTF::StringImpl *)&v151, (uint64_t)&v156);
  if ((_BYTE)v158)
  {
    v75 = (uint64_t *)((char *)v149 + 24);
    v76 = *((unsigned int *)v149 + 9);
    if ((_DWORD)v76 == *((_DWORD *)v149 + 8))
    {
      v137 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v75, v76 + 1, (unint64_t)&v155);
      v76 = *((unsigned int *)v149 + 9);
      v138 = *((_QWORD *)v149 + 3);
      v139 = *v137;
      if (*v137)
        *v139 += 2;
      *(_QWORD *)(v138 + 8 * v76) = v139;
    }
    else
    {
      v77 = *v75;
      v78 = v155;
      if (v155)
        *(_DWORD *)v155 += 2;
      *(_QWORD *)(v77 + 8 * v76) = v78;
    }
    *((_DWORD *)v149 + 9) = v76 + 1;
  }
  v79 = v151;
  v151 = 0;
  if (v79)
  {
    if (*(_DWORD *)v79 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v79;
  }
  v80 = v155;
  v155 = 0;
  if (v80)
  {
    if (*(_DWORD *)v80 == 2)
      WTF::StringImpl::destroy(v80, v74);
    else
      *(_DWORD *)v80 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v151 = v156;
  v82 = *(unsigned __int8 *)(a1 + 56);
  {
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_0::operator() const(void)::impl;
    unk_1EE2F47D0 = &WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F47D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_2::operator() const(void)::impl;
  }
  v83 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::CDMRequirement)::values[v82];
  if (v83)
    *(_DWORD *)v83 += 2;
  v150 = v83;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v150, v81);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v149 + 2, &v151, (const WTF::StringImpl *)&v155, (uint64_t)&v156);
  if ((_BYTE)v158)
  {
    v85 = (uint64_t *)((char *)v149 + 24);
    v86 = *((unsigned int *)v149 + 9);
    if ((_DWORD)v86 == *((_DWORD *)v149 + 8))
    {
      v140 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v85, v86 + 1, (unint64_t)&v151);
      v86 = *((unsigned int *)v149 + 9);
      v141 = *((_QWORD *)v149 + 3);
      v142 = *v140;
      if (*v140)
        *v142 += 2;
      *(_QWORD *)(v141 + 8 * v86) = v142;
    }
    else
    {
      v87 = *v85;
      v88 = v151;
      if (v151)
        *(_DWORD *)v151 += 2;
      *(_QWORD *)(v87 + 8 * v86) = v88;
    }
    *((_DWORD *)v149 + 9) = v86 + 1;
  }
  v89 = v155;
  v155 = 0;
  if (v89)
  {
    if (*(_DWORD *)v89 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v89;
  }
  v90 = v150;
  v150 = 0;
  if (v90)
  {
    if (*(_DWORD *)v90 == 2)
      WTF::StringImpl::destroy(v90, v84);
    else
      *(_DWORD *)v90 -= 2;
  }
  v91 = v151;
  v151 = 0;
  if (v91)
  {
    if (*(_DWORD *)v91 == 2)
      WTF::StringImpl::destroy(v91, v84);
    else
      *(_DWORD *)v91 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v151 = v156;
  v93 = *(unsigned __int8 *)(a1 + 57);
  {
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_0::operator() const(void)::impl;
    unk_1EE2F47D0 = &WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F47D8 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMRequirement)::$_2::operator() const(void)::impl;
  }
  v94 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::CDMRequirement)::values[v93];
  if (v94)
    *(_DWORD *)v94 += 2;
  v150 = v94;
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v150, v92);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v149 + 2, &v151, (const WTF::StringImpl *)&v155, (uint64_t)&v156);
  if ((_BYTE)v158)
  {
    v96 = (uint64_t *)((char *)v149 + 24);
    v97 = *((unsigned int *)v149 + 9);
    if ((_DWORD)v97 == *((_DWORD *)v149 + 8))
    {
      v143 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v96, v97 + 1, (unint64_t)&v151);
      v97 = *((unsigned int *)v149 + 9);
      v144 = *((_QWORD *)v149 + 3);
      v145 = *v143;
      if (*v143)
        *v145 += 2;
      *(_QWORD *)(v144 + 8 * v97) = v145;
    }
    else
    {
      v98 = *v96;
      v99 = v151;
      if (v151)
        *(_DWORD *)v151 += 2;
      *(_QWORD *)(v98 + 8 * v97) = v99;
    }
    *((_DWORD *)v149 + 9) = v97 + 1;
  }
  v100 = v155;
  v155 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v100;
  }
  v101 = v150;
  v150 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, v95);
    else
      *(_DWORD *)v101 -= 2;
  }
  v102 = v151;
  v151 = 0;
  if (v102)
  {
    if (*(_DWORD *)v102 == 2)
      v102 = (WTF::StringImpl *)WTF::StringImpl::destroy(v102, v95);
    else
      *(_DWORD *)v102 -= 2;
  }
  WTF::JSONImpl::Array::create(v102);
  v104 = *(unsigned int *)(a1 + 76);
  if ((_DWORD)v104)
  {
    v105 = *(unsigned __int8 **)(a1 + 64);
    do
    {
      v106 = *v105;
      {
        WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_0::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_1::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::CDMSessionType)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_0::operator() const(void)::impl;
        unk_1EE2F4770 = &WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_1::operator() const(void)::impl;
        WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_2::operator() const(void)::impl += 2;
        qword_1EE2F4778 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMSessionType)::$_2::operator() const(void)::impl;
      }
      v107 = v155;
      v108 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::CDMSessionType)::values[v106];
      if (v108)
        *(_DWORD *)v108 += 2;
      v151 = v108;
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v151, v103);
      v109 = *((unsigned int *)v107 + 7);
      if ((_DWORD)v109 == *((_DWORD *)v107 + 6))
      {
        v110 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v107 + 2, v109 + 1, (unint64_t)&v156);
        v109 = *((unsigned int *)v107 + 7);
        v111 = *((_QWORD *)v107 + 2);
        v112 = *(WTF::StringImpl **)v110;
        *(_QWORD *)v110 = 0;
      }
      else
      {
        v111 = *((_QWORD *)v107 + 2);
        v112 = v156;
        v156 = 0;
      }
      *(_QWORD *)(v111 + 8 * v109) = v112;
      *((_DWORD *)v107 + 7) = v109 + 1;
      v113 = v156;
      v156 = 0;
      if (v113)
      {
        if (*(_DWORD *)v113 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v113;
      }
      v114 = v151;
      v151 = 0;
      if (v114)
      {
        if (*(_DWORD *)v114 == 2)
          WTF::StringImpl::destroy(v114, v103);
        else
          *(_DWORD *)v114 -= 2;
      }
      ++v105;
      --v104;
    }
    while (v104);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v115 = v155;
  v155 = 0;
  v150 = v115;
  v151 = v156;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v149 + 2, &v151, (const WTF::StringImpl *)&v150, (uint64_t)&v156);
  if ((_BYTE)v158)
  {
    v117 = (uint64_t *)((char *)v149 + 24);
    v118 = *((unsigned int *)v149 + 9);
    if ((_DWORD)v118 == *((_DWORD *)v149 + 8))
    {
      v146 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v117, v118 + 1, (unint64_t)&v151);
      v118 = *((unsigned int *)v149 + 9);
      v147 = *((_QWORD *)v149 + 3);
      v148 = *v146;
      if (*v146)
        *v148 += 2;
      *(_QWORD *)(v147 + 8 * v118) = v148;
    }
    else
    {
      v119 = *v117;
      v120 = v151;
      if (v151)
        *(_DWORD *)v151 += 2;
      *(_QWORD *)(v119 + 8 * v118) = v120;
    }
    *((_DWORD *)v149 + 9) = v118 + 1;
  }
  v121 = v150;
  v150 = 0;
  if (v121)
  {
    if (*(_DWORD *)v121 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v121;
  }
  v122 = v151;
  v151 = 0;
  if (v122)
  {
    if (*(_DWORD *)v122 == 2)
      WTF::StringImpl::destroy(v122, v116);
    else
      *(_DWORD *)v122 -= 2;
  }
  v123 = v155;
  v155 = 0;
  if (v123)
  {
    if (*(_DWORD *)v123 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v123;
  }
  v124 = v152;
  v152 = 0;
  if (v124)
  {
    if (*(_DWORD *)v124 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v124;
  }
  v125 = v153;
  v153 = 0;
  if (v125)
  {
    if (*(_DWORD *)v125 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v125;
  }
  v126 = v154;
  v154 = 0;
  if (v126)
  {
    if (*(_DWORD *)v126 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v126;
  }
  WTF::JSONImpl::Value::toJSONString(v149);
  result = (uint64_t)v149;
  if (v149)
  {
    if (*(_DWORD *)v149 == 1)
      return WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v149;
  }
  return result;
}

_QWORD *WebCore::CDMPrivate::CDMPrivate(_QWORD *this)
{
  *this = off_1E3409F58;
  this[1] = 0;
  return this;
}

void WebCore::CDMPrivate::~CDMPrivate(WebCore::CDMPrivate *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void WebCore::CDMPrivate::getSupportedConfiguration(_QWORD *a1, uint64_t a2, int a3, uint64_t *a4)
{
  void *v4;
  __int16 v5;
  uint64_t v6;

  v5 = 0;
  v6 = 0;
  WebCore::CDMPrivate::doSupportedConfigurationStep(a1, a2, &v5, a3, a4);
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v4);
}

void WebCore::CDMPrivate::doSupportedConfigurationStep(_QWORD *a1, uint64_t a2, _BYTE *a3, int a4, uint64_t *a5)
{
  WTF *v10;
  uint64_t v11;
  int **v12;
  int **v13;
  int *v14;
  int v15;
  WTF::StringImpl **v16;
  uint64_t v17;
  WTF *v18;
  int *v19;
  _BOOL4 v20;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;
  uint64_t v25;
  _DWORD **v26;
  WTF *v27;
  _DWORD *v28;
  int v29;
  WTF *v30;
  int *v31;
  WTF *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  WTF *v37;
  uint64_t v38;
  void *v39;
  int v40;
  WTF *v41;
  unsigned __int8 *v42;
  void *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  WTF *v51;
  void *v52;
  void *v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl **v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF *v61;
  uint64_t v62;
  WTF::StringImpl **v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF *v66;
  uint64_t v67;
  WTF::StringImpl **v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF *v71;
  WTF *v72;
  uint64_t v73;
  WTF::StringImpl **v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  BOOL v77;
  int v78;
  void *v79;
  uint64_t v80;
  void *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (**v88)();
  int v89;
  uint64_t (*v90)();
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  WTF *v94;
  WTF *v95;
  void *v96;
  uint64_t v97;
  WTF::StringImpl *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  WebCore::CDMKeySystemConfiguration *v103;
  uint64_t v104;
  size_t __n;
  WTF *v106[2];
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  WTF *v110;
  uint64_t v111;
  __int16 v112;
  void *v113;
  uint64_t v114;
  unsigned __int8 v115;
  WTF *v116[2];
  WTF *v117[2];
  WTF *v118[2];
  WTF *v119;
  __int16 v120;
  void *__dst;
  uint64_t v122;
  char v123;
  WTF *v124;
  WTF *v125;
  char v126;
  int *v127;

  v119 = 0;
  *(_OWORD *)v117 = 0u;
  *(_OWORD *)v118 = 0u;
  *(_OWORD *)v116 = 0u;
  v120 = 257;
  __dst = 0;
  v122 = 0;
  v10 = *(WTF **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v10 += 2;
  v116[0] = v10;
  v11 = *(unsigned int *)(a2 + 20);
  if (!(_DWORD)v11)
    goto LABEL_46;
  v124 = 0;
  v125 = 0;
  v12 = *(int ***)(a2 + 8);
  v13 = &v12[v11];
  do
  {
    v14 = *v12;
    if (!*v12)
      goto LABEL_34;
    v15 = *v14 + 2;
    *v14 = v15;
    v127 = v14;
    if (!v14[1])
    {
      v127 = 0;
      goto LABEL_32;
    }
    (*(void (**)(WTF **__return_ptr, _QWORD *))(*a1 + 32))(v106, a1);
    if (HIDWORD(v106[1]))
    {
      v16 = (WTF::StringImpl **)v106[0];
      v17 = HIDWORD(v106[1]) - 1;
      v18 = v106[0];
      do
      {
        v19 = *(int **)v18;
        v18 = (WTF *)((char *)v18 + 8);
        v20 = v19 == v127;
      }
      while (v19 != v127 && v17-- != 0);
      v22 = 8 * HIDWORD(v106[1]);
      do
      {
        v23 = *v16;
        *v16 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
            WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v23 -= 2;
        }
        ++v16;
        v22 -= 8;
      }
      while (v22);
    }
    else
    {
      v20 = 0;
    }
    v24 = v106[0];
    if (v106[0])
    {
      v106[0] = 0;
      LODWORD(v106[1]) = 0;
      WTF::fastFree(v24, (void *)a2);
      if (v20)
      {
LABEL_25:
        v25 = HIDWORD(v125);
        if (HIDWORD(v125) == (_DWORD)v125)
        {
          v26 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v124, HIDWORD(v125) + 1, (unint64_t)&v127);
          v25 = HIDWORD(v125);
          v27 = v124;
          v28 = *v26;
          if (*v26)
            *v28 += 2;
          *((_QWORD *)v27 + v25) = v28;
        }
        else
        {
          v30 = v124;
          v31 = v127;
          if (v127)
            *v127 += 2;
          *((_QWORD *)v30 + v25) = v31;
        }
        HIDWORD(v125) = v25 + 1;
      }
    }
    else if (v20)
    {
      goto LABEL_25;
    }
    v14 = v127;
    v127 = 0;
    if (!v14)
      goto LABEL_34;
    v15 = *v14;
LABEL_32:
    v29 = v15 - 2;
    if (v29)
      *v14 = v29;
    else
      WTF::StringImpl::destroy((WTF::StringImpl *)v14, (WTF::StringImpl *)a2);
LABEL_34:
    ++v12;
  }
  while (v12 != v13);
  if (!HIDWORD(v125))
  {
    LOBYTE(v106[0]) = 0;
    v115 = 0;
    v37 = v124;
    if (v124)
    {
      v124 = 0;
      LODWORD(v125) = 0;
      WTF::fastFree(v37, (void *)a2);
    }
LABEL_69:
    WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v116, (void *)a2);
LABEL_70:
    v38 = *a5;
    LOBYTE(v116[0]) = 0;
    v123 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v38 + 16))(v38, v116);
    if (v123)
      WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v116, v39);
    goto LABEL_200;
  }
  v32 = v116[1];
  if (HIDWORD(v117[0]))
  {
    v97 = 8 * HIDWORD(v117[0]);
    do
    {
      v98 = *(WTF::StringImpl **)v32;
      *(_QWORD *)v32 = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
          WTF::StringImpl::destroy(v98, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v98 -= 2;
      }
      v32 = (WTF *)((char *)v32 + 8);
      v97 -= 8;
    }
    while (v97);
    v32 = v116[1];
    if (v116[1])
      goto LABEL_212;
  }
  else
  {
    if (!v116[1])
      goto LABEL_45;
LABEL_212:
    v116[1] = 0;
    LODWORD(v117[0]) = 0;
    WTF::fastFree(v32, (void *)a2);
  }
LABEL_45:
  v116[1] = v124;
  v117[0] = v125;
LABEL_46:
  if (*a3)
    v33 = 2;
  else
    v33 = 1;
  if (*(_BYTE *)(a2 + 56) == 1)
    v34 = v33;
  else
    v34 = *(unsigned __int8 *)(a2 + 56);
  if (v34 == 2)
  {
    if (!(*(unsigned int (**)(_QWORD *, WTF **, _BYTE *))(*a1 + 72))(a1, v116, a3))
      goto LABEL_66;
  }
  else if (!v34 && (*(unsigned int (**)(_QWORD *, WTF **, _BYTE *))(*a1 + 72))(a1, v116, a3) == 2)
  {
LABEL_66:
    LOBYTE(v106[0]) = 0;
    v115 = 0;
    goto LABEL_69;
  }
  LOBYTE(v120) = v34;
  if (a3[1])
    v35 = 2;
  else
    v35 = 1;
  if (*(_BYTE *)(a2 + 57) == 1)
    v36 = v35;
  else
    v36 = *(unsigned __int8 *)(a2 + 57);
  if (v36 == 2)
  {
    if (!(*(unsigned int (**)(_QWORD *, WTF **, _BYTE *))(*a1 + 80))(a1, v116, a3))
      goto LABEL_66;
  }
  else if (!v36 && (*(unsigned int (**)(_QWORD *, WTF **, _BYTE *))(*a1 + 80))(a1, v116, a3) == 2)
  {
    goto LABEL_66;
  }
  v40 = a4;
  HIBYTE(v120) = v36;
  v41 = (WTF *)*(unsigned int *)(a2 + 76);
  if (!(_DWORD)v41)
  {
    v44 = 1;
    v42 = (unsigned __int8 *)WTF::fastMalloc((WTF *)1);
    *v42 = 0;
    v46 = v42 + 1;
    v45 = 1;
LABEL_77:
    v47 = HIBYTE(v120);
    v48 = v42;
    while ((v47 != 2 || *v48 - 1 > 1)
         && ((*(uint64_t (**)(_QWORD *, unsigned __int8 *, WTF **))(*a1 + 56))(a1, v48, v116) & 1) != 0)
    {
      v47 = HIBYTE(v120);
      if (HIBYTE(v120) == 1)
      {
        if (*v48 - 1 > 1)
        {
          v47 = 1;
        }
        else
        {
          v47 = 0;
          HIBYTE(v120) = 0;
        }
      }
      if (++v48 == v46)
        goto LABEL_86;
    }
    goto LABEL_179;
  }
  v42 = (unsigned __int8 *)WTF::fastMalloc(v41);
  memcpy(v42, *(const void **)(a2 + 64), *(unsigned int *)(a2 + 76));
  v44 = *(unsigned int *)(a2 + 76);
  v45 = *(_DWORD *)(a2 + 76);
  v46 = &v42[v44];
  if ((_DWORD)v44)
    goto LABEL_77;
  v44 = 0;
LABEL_86:
  if (HIDWORD(v122) <= v45)
  {
    v50 = v122;
    if (v45 > v122)
    {
      if ((_DWORD)v122)
      {
        if (HIDWORD(v122))
          HIDWORD(v122) = 0;
        v51 = (WTF *)__dst;
        if (__dst)
        {
          __dst = 0;
          LODWORD(v122) = 0;
          WTF::fastFree(v51, v43);
          v50 = v122;
        }
      }
      if (v50 < v45)
      {
        v52 = __dst;
        __n = HIDWORD(v122);
        v53 = (void *)WTF::fastMalloc((WTF *)v44);
        LODWORD(v122) = v45;
        __dst = v53;
        memcpy(v53, v52, __n);
        if (v52)
        {
          if (__dst == v52)
          {
            __dst = 0;
            LODWORD(v122) = 0;
          }
          WTF::fastFree((WTF *)v52, v54);
        }
      }
    }
    v49 = HIDWORD(v122);
  }
  else
  {
    HIDWORD(v122) = v45;
    v49 = v45;
  }
  v55 = (char *)__dst;
  if (v49)
  {
    memmove(__dst, v42, v49);
    v56 = HIDWORD(v122);
    v55 = (char *)__dst;
  }
  else
  {
    v56 = 0;
  }
  memcpy(&v55[v56], &v42[v56], v46 - &v42[v56]);
  HIDWORD(v122) = v45;
  if (*(_DWORD *)(a2 + 52))
  {
    WebCore::CDMPrivate::getSupportedCapabilitiesForAudioVideoType((uint64_t)&v124, (uint64_t)a1, 1, a2 + 40, (WebCore::CDMKeySystemConfiguration *)v116, (uint64_t)a3);
    if (v126)
    {
      if (HIDWORD(v119))
      {
        v57 = 24 * HIDWORD(v119);
        v58 = (WTF::StringImpl **)((char *)v118[1] + 8);
        do
        {
          v59 = *v58;
          *v58 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v43);
            else
              *(_DWORD *)v59 -= 2;
          }
          v60 = *(v58 - 1);
          *(v58 - 1) = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v43);
            else
              *(_DWORD *)v60 -= 2;
          }
          v58 += 3;
          v57 -= 24;
        }
        while (v57);
      }
      v61 = v118[1];
      if (v118[1])
      {
        v118[1] = 0;
        LODWORD(v119) = 0;
        WTF::fastFree(v61, v43);
      }
      v118[1] = v124;
      v119 = v125;
      goto LABEL_136;
    }
    goto LABEL_179;
  }
  if (!*(_DWORD *)(a2 + 36))
    goto LABEL_179;
  if (HIDWORD(v119))
  {
    v62 = 24 * HIDWORD(v119);
    v63 = (WTF::StringImpl **)((char *)v118[1] + 8);
    do
    {
      v64 = *v63;
      *v63 = 0;
      if (v64)
      {
        if (*(_DWORD *)v64 == 2)
          WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v43);
        else
          *(_DWORD *)v64 -= 2;
      }
      v65 = *(v63 - 1);
      *(v63 - 1) = 0;
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v43);
        else
          *(_DWORD *)v65 -= 2;
      }
      v63 += 3;
      v62 -= 24;
    }
    while (v62);
  }
  v66 = v118[1];
  if (v118[1])
  {
    v118[1] = 0;
    LODWORD(v119) = 0;
    WTF::fastFree(v66, v43);
  }
  v118[1] = 0;
  v119 = 0;
LABEL_136:
  if (*(_DWORD *)(a2 + 36))
  {
    WebCore::CDMPrivate::getSupportedCapabilitiesForAudioVideoType((uint64_t)&v124, (uint64_t)a1, 0, a2 + 24, (WebCore::CDMKeySystemConfiguration *)v116, (uint64_t)a3);
    if (!v126)
      goto LABEL_179;
    if (HIDWORD(v118[0]))
    {
      v67 = 24 * HIDWORD(v118[0]);
      v68 = (WTF::StringImpl **)((char *)v117[1] + 8);
      do
      {
        v69 = *v68;
        *v68 = 0;
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, (WTF::StringImpl *)v43);
          else
            *(_DWORD *)v69 -= 2;
        }
        v70 = *(v68 - 1);
        *(v68 - 1) = 0;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2)
            WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v43);
          else
            *(_DWORD *)v70 -= 2;
        }
        v68 += 3;
        v67 -= 24;
      }
      while (v67);
    }
    v71 = v117[1];
    if (v117[1])
    {
      v117[1] = 0;
      LODWORD(v118[0]) = 0;
      WTF::fastFree(v71, v43);
    }
    v117[1] = v124;
    v118[0] = v125;
  }
  else
  {
    v72 = v117[1];
    if (HIDWORD(v118[0]))
    {
      v73 = 24 * HIDWORD(v118[0]);
      v74 = (WTF::StringImpl **)((char *)v117[1] + 8);
      do
      {
        v75 = *v74;
        *v74 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2)
            WTF::StringImpl::destroy(v75, (WTF::StringImpl *)v43);
          else
            *(_DWORD *)v75 -= 2;
        }
        v76 = *(v74 - 1);
        *(v74 - 1) = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, (WTF::StringImpl *)v43);
          else
            *(_DWORD *)v76 -= 2;
        }
        v74 += 3;
        v73 -= 24;
      }
      while (v73);
      v72 = v117[1];
    }
    if (v72)
    {
      v117[1] = 0;
      LODWORD(v118[0]) = 0;
      WTF::fastFree(v72, v43);
    }
    v117[1] = 0;
    v118[0] = 0;
  }
  if (v120 == 1)
    LOBYTE(v120) = 2 * ((*(unsigned int (**)(_QWORD *, WTF **, _BYTE *))(*a1 + 72))(a1, v116, a3) != 0);
  if (HIBYTE(v120) == 1)
    HIBYTE(v120) = 2 * ((*(unsigned int (**)(_QWORD *, WTF **, _BYTE *))(*a1 + 80))(a1, v116, a3) != 0);
  if (((*(uint64_t (**)(_QWORD *, WTF **))(*a1 + 40))(a1, v116) & 1) != 0
    && (HIBYTE(v120) ? (v77 = v120 == 0) : (v77 = 1), !v77 || v40))
  {
    v93 = *(_OWORD *)v116;
    v116[0] = 0;
    v116[1] = 0;
    *(_OWORD *)v106 = v93;
    *(WTF **)&v93 = v117[0];
    v117[0] = 0;
    v107 = v93;
    v94 = v117[1];
    v117[1] = 0;
    v108 = v94;
    *(WTF **)&v93 = v118[0];
    v118[0] = 0;
    v109 = v93;
    v95 = v118[1];
    v118[1] = 0;
    v110 = v95;
    *(_QWORD *)&v93 = v119;
    v119 = 0;
    v111 = v93;
    v112 = v120;
    v96 = __dst;
    __dst = 0;
    v113 = v96;
    *(_QWORD *)&v93 = v122;
    v122 = 0;
    v114 = v93;
    v115 = 1;
  }
  else
  {
LABEL_179:
    LOBYTE(v106[0]) = 0;
    v115 = 0;
  }
  WTF::fastFree((WTF *)v42, v43);
  v78 = v115;
  WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v116, v79);
  if (!v78)
    goto LABEL_70;
  v80 = a1[1];
  if (v80)
    goto LABEL_216;
  v80 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v80 = 1;
  *(_QWORD *)(v80 + 8) = a1;
  v82 = (unsigned int *)a1[1];
  a1[1] = v80;
  if (!v82)
    goto LABEL_216;
  do
  {
    v83 = __ldaxr(v82);
    v84 = v83 - 1;
  }
  while (__stlxr(v84, v82));
  if (!v84)
  {
    atomic_store(1u, v82);
    WTF::fastFree((WTF *)v82, v81);
  }
  v80 = a1[1];
  if (v80)
  {
LABEL_216:
    do
      v85 = __ldaxr((unsigned int *)v80);
    while (__stlxr(v85 + 1, (unsigned int *)v80));
  }
  v86 = *a5;
  *a5 = 0;
  if (v115)
  {
    v87 = WTF::fastMalloc((WTF *)0x20);
    v88 = &off_1E340A828;
    *(_QWORD *)v87 = &off_1E340A828;
    *(_QWORD *)(v87 + 8) = v80;
    *(_QWORD *)(v87 + 16) = v86;
    *(_BYTE *)(v87 + 24) = v40;
    v89 = v112;
    if ((_BYTE)v112)
      goto LABEL_190;
    if (((*(uint64_t (**)(_QWORD *, WTF **))(*a1 + 88))(a1, v106) & 1) != 0)
    {
      v89 = v112;
      v88 = *(uint64_t (***)())v87;
      if (!(_BYTE)v112 && (v40 & 1) == 0)
      {
        *a3 = 1;
        goto LABEL_198;
      }
LABEL_190:
      v90 = v88[2];
      v91 = v87;
      if (v89 == 2)
        v92 = 2;
      else
        v92 = 1;
    }
    else
    {
      *a3 = 1;
      v88 = *(uint64_t (***)())v87;
LABEL_198:
      v90 = v88[2];
      v91 = v87;
      v92 = 0;
    }
    ((void (*)(uint64_t, uint64_t, WTF **, _BYTE *))v90)(v91, v92, v106, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
LABEL_200:
    if (v115)
      WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v106, v39);
  }
  else
  {
    v99 = std::__throw_bad_optional_access[abi:sn180100]();
    WebCore::CDMPrivate::getSupportedCapabilitiesForAudioVideoType(v99, v100, v101, v102, v103, v104);
  }
}

void WebCore::CDMPrivate::getSupportedCapabilitiesForAudioVideoType(uint64_t a1, uint64_t a2, int a3, uint64_t a4, WebCore::CDMKeySystemConfiguration *a5, uint64_t a6)
{
  WTF::StringImpl *v9;
  unsigned int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  const WTF::StringImpl *v13;
  int v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  BOOL v20;
  WTF::StringImpl *v21;
  double v22;
  double v23;
  float v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  const WebCore::MediaEngineSupportParameters *v27;
  double v28;
  double v29;
  float v30;
  void *v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl **v38;
  _WORD *v39;
  const WTF::StringImpl *v40;
  unint64_t i;
  char v42;
  char v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  _WORD *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  unsigned int v74;
  WTF::StringImpl *v75;
  WTF *v76;
  int v77;
  char v78;
  uint64_t v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v87;
  int v88;
  unsigned int v89;
  uint64_t v90[5];
  __int16 v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  WTF::StringImpl *v105;
  char v106[8];
  uint64_t v107[3];
  WTF::StringImpl *v108;
  char v109;
  WTF::StringImpl **v110;
  uint64_t v111;
  _BYTE v112[24];
  uint64_t v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  unsigned int v118;

  WebCore::CDMKeySystemConfiguration::CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v112, a5);
  v110 = 0;
  v111 = 0;
  v10 = *(_DWORD *)(a4 + 12);
  if (!v10)
  {
    v76 = 0;
LABEL_122:
    v78 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_123;
  }
  v11 = *(WTF::StringImpl ***)a4;
  v12 = &v11[3 * v10];
  do
  {
    v13 = v11[1];
    if (v13)
      *(_DWORD *)v13 += 2;
    if (!*v11 || !*((_DWORD *)*v11 + 1))
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 16) = 0;
      v14 = 1;
      goto LABEL_7;
    }
    WebCore::ParsedContentType::create(v11, 0, (uint64_t)v106);
    if (!v109)
    {
      v14 = 3;
      goto LABEL_7;
    }
    v15 = v108;
    if (v108)
      *(_DWORD *)v108 += 2;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v105 = v87;
    v17 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>>,WTF::String>(v107, &v105, v16);
    if (v17)
    {
      v18 = (WTF::StringImpl *)*((_QWORD *)v17 + 1);
      if (v18)
        *(_DWORD *)v18 += 2;
    }
    else
    {
      v18 = 0;
    }
    v19 = v105;
    v105 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v9);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (!v109)
    {
LABEL_139:
      __break(1u);
      return;
    }
    if (v107[0])
    {
      v74 = *(_DWORD *)(v107[0] - 12);
      if (v18)
      {
        if (v74 > (*((_DWORD *)v18 + 1) != 0))
        {
          v14 = 3;
LABEL_91:
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v9);
          else
            *(_DWORD *)v18 -= 2;
          goto LABEL_93;
        }
        v20 = 0;
      }
      else
      {
        if (v74)
        {
          v14 = 3;
          goto LABEL_93;
        }
        v20 = 1;
      }
    }
    else
    {
      v20 = v18 == 0;
    }
    if (!v13 || !*((_DWORD *)v13 + 1))
    {
LABEL_27:
      v87 = 0;
      LOBYTE(v88) = 0;
      v90[0] = 0;
      WTF::URL::invalidate((WTF::URL *)v90);
      v91 = 0;
      v92 = 0;
      v96 = 0;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v100 = 0;
      v101 = 0;
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      if (!v109)
        goto LABEL_139;
      v25 = v108;
      if (v108)
        *(_DWORD *)v108 += 2;
      v26 = v87;
      v87 = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v21);
        else
          *(_DWORD *)v26 -= 2;
      }
      LOBYTE(v88) = 0;
      if ((WebCore::MediaPlayer::supportsType((WebCore::MediaPlayer *)&v87, v21, v22, v23, v24)
         || (LOBYTE(v91) = 1,
             WebCore::MediaPlayer::supportsType((WebCore::MediaPlayer *)&v87, v27, v28, v29, v30)))
        && (*(unsigned int (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)a2 + 48))(a2, v112, a6))
      {
        v32 = HIDWORD(v111);
        if (HIDWORD(v111) == (_DWORD)v111)
        {
          v33 = WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v110, HIDWORD(v111) + 1, (unint64_t)v11);
          v34 = HIDWORD(v111);
          v35 = v110;
          v36 = *(WTF::StringImpl **)v33;
          if (*(_QWORD *)v33)
            *(_DWORD *)v36 += 2;
          v35[3 * v34] = v36;
          v37 = *(WTF::StringImpl **)(v33 + 8);
          if (v37)
            *(_DWORD *)v37 += 2;
          v38 = &v35[3 * v34];
          v38[1] = v37;
          v39 = v38 + 2;
        }
        else
        {
          v47 = v110;
          v48 = *v11;
          if (*v11)
            *(_DWORD *)v48 += 2;
          v47[3 * v32] = v48;
          v49 = v11[1];
          if (v49)
            *(_DWORD *)v49 += 2;
          v50 = &v47[3 * v32];
          v50[1] = v49;
          v39 = v50 + 2;
          v33 = (unint64_t)v11;
        }
        *v39 = *(_WORD *)(v33 + 16);
        ++HIDWORD(v111);
        if (a3 == 1)
        {
          v51 = v118;
          if (v118 == v117)
          {
            v52 = WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v116, v118 + 1, (unint64_t)v11);
            v53 = v118;
            v54 = v116;
            v55 = *(_DWORD **)v52;
            if (*(_QWORD *)v52)
              *v55 += 2;
            *(_QWORD *)(v54 + 24 * v53) = v55;
            v56 = *(_DWORD **)(v52 + 8);
            if (v56)
              *v56 += 2;
            v57 = v54 + 24 * v53;
            *(_QWORD *)(v57 + 8) = v56;
            v58 = (_WORD *)(v57 + 16);
          }
          else
          {
            v65 = v116;
            v66 = *v11;
            if (*v11)
              *(_DWORD *)v66 += 2;
            *(_QWORD *)(v65 + 24 * v51) = v66;
            v67 = v11[1];
            if (v67)
              *(_DWORD *)v67 += 2;
            v68 = v65 + 24 * v51;
            *(_QWORD *)(v68 + 8) = v67;
            v58 = (_WORD *)(v68 + 16);
            v52 = (unint64_t)v11;
          }
          v69 = &v118;
        }
        else
        {
          v59 = v115;
          if (v115 == v114)
          {
            v52 = WTF::Vector<WebCore::CDMMediaCapability,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v113, v115 + 1, (unint64_t)v11);
            v60 = v115;
            v61 = v113;
            v62 = *(_DWORD **)v52;
            if (*(_QWORD *)v52)
              *v62 += 2;
            *(_QWORD *)(v61 + 24 * v60) = v62;
            v63 = *(_DWORD **)(v52 + 8);
            if (v63)
              *v63 += 2;
            v64 = v61 + 24 * v60;
            *(_QWORD *)(v64 + 8) = v63;
            v58 = (_WORD *)(v64 + 16);
          }
          else
          {
            v70 = v113;
            v71 = *v11;
            if (*v11)
              *(_DWORD *)v71 += 2;
            *(_QWORD *)(v70 + 24 * v59) = v71;
            v72 = v11[1];
            if (v72)
              *(_DWORD *)v72 += 2;
            v73 = v70 + 24 * v59;
            *(_QWORD *)(v73 + 8) = v72;
            v58 = (_WORD *)(v73 + 16);
            v52 = (unint64_t)v11;
          }
          v69 = &v115;
        }
        v14 = 0;
        *v58 = *(_WORD *)(v52 + 16);
        ++*v69;
      }
      else
      {
        v14 = 3;
      }
      WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v87, v31);
      if (v20)
        goto LABEL_93;
      goto LABEL_91;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(_QWORD *)a2 + 64))(&v87, a2);
    if (v89)
    {
      for (i = 0; i < v89; ++i)
      {
        v42 = WTF::equal(*((WTF **)v87 + i), v13, v40);
        if ((v42 & 1) != 0)
          break;
      }
      v43 = v42 ^ 1;
      if (v89)
      {
        v44 = v87;
        v45 = 8 * v89;
        do
        {
          v46 = *(WTF::StringImpl **)v44;
          *(_QWORD *)v44 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
            {
              v83 = v45;
              v84 = v44;
              WTF::StringImpl::destroy(v46, v9);
              v45 = v83;
              v44 = v84;
            }
            else
            {
              *(_DWORD *)v46 -= 2;
            }
          }
          v44 = (WTF::StringImpl *)((char *)v44 + 8);
          v45 -= 8;
        }
        while (v45);
      }
    }
    else
    {
      v43 = 1;
    }
    v75 = v87;
    if (v87)
    {
      v87 = 0;
      v88 = 0;
      WTF::fastFree(v75, v9);
      if ((v43 & 1) == 0)
        goto LABEL_27;
    }
    else if ((v43 & 1) == 0)
    {
      goto LABEL_27;
    }
    v14 = 3;
    if (!v20)
      goto LABEL_91;
LABEL_93:
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v9);
      else
        *(_DWORD *)v15 -= 2;
    }
    if (v109)
      WebCore::ParsedContentType::~ParsedContentType((WebCore::ParsedContentType *)v106, v9);
LABEL_7:
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v9);
        if (!v14)
          goto LABEL_12;
        goto LABEL_11;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (!v14)
      goto LABEL_12;
LABEL_11:
    if (v14 != 3)
    {
      v76 = (WTF *)v110;
      if (HIDWORD(v111))
      {
        v79 = 24 * HIDWORD(v111);
        v80 = v110 + 1;
        do
        {
          v81 = *v80;
          *v80 = 0;
          if (v81)
          {
            if (*(_DWORD *)v81 == 2)
              WTF::StringImpl::destroy(v81, v9);
            else
              *(_DWORD *)v81 -= 2;
          }
          v82 = *(v80 - 1);
          *(v80 - 1) = 0;
          if (v82)
          {
            if (*(_DWORD *)v82 == 2)
              WTF::StringImpl::destroy(v82, v9);
            else
              *(_DWORD *)v82 -= 2;
          }
          v80 += 3;
          v79 -= 24;
        }
        while (v79);
        v76 = (WTF *)v110;
      }
      goto LABEL_124;
    }
LABEL_12:
    v11 += 3;
  }
  while (v11 != v12);
  v77 = HIDWORD(v111);
  v76 = (WTF *)v110;
  if (!HIDWORD(v111))
    goto LABEL_122;
  *(_QWORD *)a1 = v110;
  HIDWORD(v111) = 0;
  *(_DWORD *)(a1 + 8) = v111;
  *(_DWORD *)(a1 + 12) = v77;
  v78 = 1;
  v76 = 0;
LABEL_123:
  *(_BYTE *)(a1 + 16) = v78;
LABEL_124:
  if (v76)
  {
    v110 = 0;
    LODWORD(v111) = 0;
    WTF::fastFree(v76, v9);
  }
  WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)v112, v9);
}

uint64_t *WebCore::CDMProxyFactory::registeredFactories(WebCore::CDMProxyFactory *this)
{
  if ((byte_1EE33811A & 1) == 0)
  {
    *(_QWORD *)&dword_1EE338140 = 0;
    qword_1EE338138 = 0;
    byte_1EE33811A = 1;
  }
  return &qword_1EE338138;
}

_QWORD *WebCore::CDMProxyFactory::registerFactory(_QWORD *this, WebCore::CDMProxyFactory *a2)
{
  uint64_t v2;
  _QWORD *v3;

  if ((byte_1EE33811A & 1) != 0)
  {
    v2 = dword_1EE338144;
    v3 = this;
    if (dword_1EE338144 != dword_1EE338140)
    {
      *(_QWORD *)(qword_1EE338138 + 8 * dword_1EE338144) = this;
      goto LABEL_5;
    }
  }
  else
  {
    v2 = 0;
    *(_QWORD *)&dword_1EE338140 = 0;
    qword_1EE338138 = 0;
    byte_1EE33811A = 1;
    v3 = this;
  }
  this = (_QWORD *)WTF::Vector<WebCore::CDMProxyFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2 + 1, (unint64_t)&v3);
  LODWORD(v2) = dword_1EE338144;
  *(_QWORD *)(qword_1EE338138 + 8 * dword_1EE338144) = *this;
LABEL_5:
  dword_1EE338144 = v2 + 1;
  return this;
}

void *WebCore::CDMProxyFactory::unregisterFactory(void *this, WebCore::CDMProxyFactory *a2)
{
  void **v2;
  int v3;
  void **v4;
  void *v5;
  int v6;
  uint64_t v7;
  void **v8;
  char *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((byte_1EE33811A & 1) != 0)
  {
    v2 = (void **)qword_1EE338138;
    v3 = dword_1EE338144;
    v4 = (void **)(qword_1EE338138 + 8 * dword_1EE338144);
    if (dword_1EE338144)
    {
      v5 = this;
      v6 = 0;
      v7 = qword_1EE338138;
      v8 = (void **)(qword_1EE338138 + 8 * dword_1EE338144);
      v9 = (char *)v8;
      do
      {
        if (*v2 == v5)
        {
          v10 = v2;
          if (v9 != (char *)(qword_1EE338138 + 8 * dword_1EE338144))
          {
            if (v2 == v8)
            {
              v10 = (void **)v9;
            }
            else
            {
              v11 = v7 - (_QWORD)v8;
              this = memmove(v9, v8, v7 - (_QWORD)v8);
              v10 = (void **)&v9[v11];
            }
          }
          v8 = v2 + 1;
          ++v6;
          v9 = (char *)v10;
        }
        ++v2;
        v7 += 8;
      }
      while (v2 < v4);
      v2 = (void **)qword_1EE338138;
      v12 = dword_1EE338144;
      v3 = dword_1EE338144;
      v4 = (void **)v9;
    }
    else
    {
      v12 = 0;
      v6 = 0;
      v8 = (void **)qword_1EE338138;
    }
  }
  else
  {
    v12 = 0;
    v3 = 0;
    v2 = 0;
    v4 = 0;
    v8 = 0;
    v6 = 0;
    *(_QWORD *)&dword_1EE338140 = 0;
    qword_1EE338138 = 0;
    byte_1EE33811A = 1;
  }
  v13 = &v2[v12];
  if (v8 != v13)
  {
    this = memmove(v4, v8, (char *)v13 - (char *)v8);
    v3 = dword_1EE338144;
  }
  dword_1EE338144 = v3 - v6;
  return this;
}

uint64_t WebCore::CDMProxyFactory::createCDMProxyForKeySystem@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *a2 = 0;
  if ((byte_1EE33811A & 1) != 0)
  {
    if (dword_1EE338144)
    {
      v3 = this;
      v4 = (_QWORD *)qword_1EE338138;
      v5 = 8 * dword_1EE338144;
      while (1)
      {
        v6 = *v4;
        this = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 24))(*v4, v3);
        if ((_DWORD)this)
          break;
        ++v4;
        v5 -= 8;
        if (!v5)
          return this;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v3);
    }
  }
  else
  {
    *(_QWORD *)&dword_1EE338140 = 0;
    qword_1EE338138 = 0;
    byte_1EE33811A = 1;
  }
  return this;
}

uint64_t WebCore::CDMUtilities::parseJSONObject(uint64_t this, const WebCore::SharedBuffer *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  unsigned int v7;
  _DWORD *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;

  v2 = (_QWORD *)this;
  if (HIDWORD(*((_QWORD *)a2 + 6)))
  {
    *(_QWORD *)this = 0;
    return this;
  }
  if (*((_DWORD *)a2 + 5))
  {
    v3 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8);
    v4 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v4 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_26;
    }
    v11 = (WTF::StringImpl *)&v10;
    ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v11, v3 + 8);
  }
  WTF::String::String();
  WTF::JSONImpl::Value::parseJSON();
  v6 = v10;
  if (!v10)
  {
    *v2 = 0;
    goto LABEL_16;
  }
  v7 = v10[1];
  if (v7 < 5 || v7 == 6)
  {
    v9 = 0;
    goto LABEL_13;
  }
  if (v7 != 5)
  {
LABEL_26:
    this = 490;
    __break(0xC471u);
    return this;
  }
  ++*v10;
  v9 = v6;
LABEL_13:
  *v2 = v9;
  v10 = 0;
  if (*v6 == 1)
    WTF::JSONImpl::Value::operator delete();
  else
    --*v6;
LABEL_16:
  this = (uint64_t)v11;
  v11 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v5);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

_QWORD *WebCore::CDMFactoryClearKey::createCDM@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *result = off_1E340A0A0;
  result[1] = 0;
  *a1 = result;
  return result;
}

BOOL WebCore::CDMFactoryClearKey::supportsKeySystem(WebCore::CDMFactoryClearKey *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;

  v2 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || *(_DWORD *)(v2 + 4) != 15)
    return 0;
  v4 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 16) & 4) == 0)
  {
    if ((*(_WORD *)v4 & 0xFFDF) == 0x4F
      && (*(_WORD *)(v4 + 2) & 0xFFDF) == 0x52
      && (*(_WORD *)(v4 + 4) & 0xFFDF) == 0x47
      && (*(_WORD *)(v4 + 6) & 0xFFDF) == 0xE
      && (*(_WORD *)(v4 + 8) & 0xFFDF) == 0x57
      && (*(_WORD *)(v4 + 10) & 0xFFDF) == 0x13
      && (*(_WORD *)(v4 + 12) & 0xFFDF) == 0xE
      && (*(_WORD *)(v4 + 14) & 0xFFDF) == 0x43
      && (*(_WORD *)(v4 + 16) & 0xFFDF) == 0x4C
      && (*(_WORD *)(v4 + 18) & 0xFFDF) == 0x45
      && (*(_WORD *)(v4 + 20) & 0xFFDF) == 0x41
      && (*(_WORD *)(v4 + 22) & 0xFFDF) == 0x52
      && (*(_WORD *)(v4 + 24) & 0xFFDF) == 0x4B
      && (*(_WORD *)(v4 + 26) & 0xFFDF) == 0x45)
    {
      v5 = *(unsigned __int16 *)(v4 + 28);
      return (v5 & 0xFFFFFFDF) == 89;
    }
    return 0;
  }
  if ((*(_BYTE *)v4 & 0xDF) != 0x4F
    || (*(_BYTE *)(v4 + 1) & 0xDF) != 0x52
    || (*(_BYTE *)(v4 + 2) & 0xDF) != 0x47
    || (*(_BYTE *)(v4 + 3) & 0xDF) != 0xE
    || (*(_BYTE *)(v4 + 4) & 0xDF) != 0x57
    || (*(_BYTE *)(v4 + 5) & 0xDF) != 0x13
    || (*(_BYTE *)(v4 + 6) & 0xDF) != 0xE
    || (*(_BYTE *)(v4 + 7) & 0xDF) != 0x43
    || (*(_BYTE *)(v4 + 8) & 0xDF) != 0x4C
    || (*(_BYTE *)(v4 + 9) & 0xDF) != 0x45
    || (*(_BYTE *)(v4 + 10) & 0xDF) != 0x41
    || (*(_BYTE *)(v4 + 11) & 0xDF) != 0x52
    || (*(_BYTE *)(v4 + 12) & 0xDF) != 0x4B
    || (*(_BYTE *)(v4 + 13) & 0xDF) != 0x45)
  {
    return 0;
  }
  v5 = *(unsigned __int8 *)(v4 + 14);
  return (v5 & 0xFFFFFFDF) == 89;
}

void WebCore::CDMPrivateClearKey::~CDMPrivateClearKey(WebCore::CDMPrivateClearKey *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WTF::fastFree(this, a2);
}

_QWORD *WebCore::CDMPrivateClearKey::supportedInitDataTypes@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _QWORD *result;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;

  {
    v3 = (WTF::StringImpl *)WebCore::InitDataRegistry::keyidsName(void)::sinf;
    if (!WebCore::InitDataRegistry::keyidsName(void)::sinf)
      goto LABEL_4;
    goto LABEL_3;
  }
  WTF::AtomStringImpl::add();
  v3 = (WTF::StringImpl *)v9;
  WebCore::InitDataRegistry::keyidsName(void)::sinf = v9;
  if (v9)
LABEL_3:
    *(_DWORD *)v3 += 2;
LABEL_4:
  {
    v4 = (WTF::StringImpl *)WebCore::InitDataRegistry::cencName(void)::sinf;
    if (!WebCore::InitDataRegistry::cencName(void)::sinf)
      goto LABEL_7;
    goto LABEL_6;
  }
  WTF::AtomStringImpl::add();
  v4 = (WTF::StringImpl *)v9;
  WebCore::InitDataRegistry::cencName(void)::sinf = v9;
  if (v9)
LABEL_6:
    *(_DWORD *)v4 += 2;
LABEL_7:
  {
    v5 = (WTF::StringImpl *)WebCore::InitDataRegistry::webmName(void)::sinf;
    if (!WebCore::InitDataRegistry::webmName(void)::sinf)
      goto LABEL_10;
    goto LABEL_9;
  }
  WTF::AtomStringImpl::add();
  v5 = (WTF::StringImpl *)v9;
  WebCore::InitDataRegistry::webmName(void)::sinf = v9;
  if (v9)
LABEL_9:
    *(_DWORD *)v5 += 2;
LABEL_10:
  *(_QWORD *)(a1 + 8) = 3;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)a1 = result;
  if (v3)
    *(_DWORD *)v3 += 2;
  *result = v3;
  if (v4)
    *(_DWORD *)v4 += 2;
  result[1] = v4;
  if (v5)
  {
    v8 = *(_DWORD *)v5;
    *(_DWORD *)v5 += 2;
    result[2] = v5;
    *(_DWORD *)(a1 + 12) = 3;
    if (v8)
      *(_DWORD *)v5 = v8;
    else
      result = (_QWORD *)WTF::StringImpl::destroy(v5, v7);
  }
  else
  {
    result[2] = 0;
    *(_DWORD *)(a1 + 12) = 3;
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      result = (_QWORD *)WTF::StringImpl::destroy(v4, v7);
      if (!v3)
        return result;
      goto LABEL_21;
    }
    *(_DWORD *)v4 -= 2;
  }
  if (!v3)
    return result;
LABEL_21:
  if (*(_DWORD *)v3 == 2)
    return (_QWORD *)WTF::StringImpl::destroy(v3, v7);
  *(_DWORD *)v3 -= 2;
  return result;
}

BOOL WebCore::CDMPrivateClearKey::supportsConfiguration(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;

  if (!*(_BYTE *)(a2 + 56))
    return 0;
  if (*(_BYTE *)(a2 + 57))
    return 1;
  v3 = *(unsigned int *)(a2 + 76);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(unsigned __int8 **)(a2 + 64);
  v5 = v3 - 1;
  do
  {
    v6 = *v4++;
    result = v6 == 2;
  }
  while (v6 != 2 && v5-- != 0);
  return result;
}

BOOL WebCore::CDMPrivateClearKey::supportsConfigurationWithRestrictions(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _BOOL8 result;
  BOOL v5;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;

  result = 0;
  v5 = *(_BYTE *)(a2 + 56) == 1 && *a3 != 0;
  if (*(_BYTE *)(a2 + 56) && !v5)
  {
    if (*(_BYTE *)(a2 + 57) == 1 && a3[1] != 0)
      return 0;
    if (*(_BYTE *)(a2 + 57))
      return 1;
    v7 = *(unsigned int *)(a2 + 76);
    if ((_DWORD)v7)
    {
      v8 = *(unsigned __int8 **)(a2 + 64);
      v9 = v7 - 1;
      do
      {
        v10 = *v8++;
        result = v10 == 2;
      }
      while (v10 != 2 && v9-- != 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL WebCore::CDMPrivateClearKey::supportsSessionTypeWithConfiguration(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;

  if ((*a2 | 2) != 2 || !*(_BYTE *)(a3 + 56))
    return 0;
  if (*(_BYTE *)(a3 + 57))
    return 1;
  v4 = *(unsigned int *)(a3 + 76);
  if (!(_DWORD)v4)
    return 0;
  v5 = *(unsigned __int8 **)(a3 + 64);
  v6 = v4 - 1;
  do
  {
    v7 = *v5++;
    result = v7 == 2;
  }
  while (v7 != 2 && v6-- != 0);
  return result;
}

_QWORD *WebCore::CDMPrivateClearKey::supportedRobustnesses@<X0>(uint64_t a1@<X8>)
{
  WTF::StringImpl *v3;
  _QWORD *result;
  WTF::StringImpl *v5;
  int v6;

  v3 = (WTF::StringImpl *)*MEMORY[0x1E0CBF3B8];
  if (*MEMORY[0x1E0CBF3B8])
    *(_DWORD *)v3 += 2;
  *(_QWORD *)(a1 + 8) = 1;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *(_QWORD *)a1 = result;
  if (v3)
  {
    v6 = *(_DWORD *)v3;
    *(_DWORD *)v3 += 2;
    *result = v3;
    *(_DWORD *)(a1 + 12) = 1;
    if (v6)
      *(_DWORD *)v3 = v6;
    else
      return (_QWORD *)WTF::StringImpl::destroy(v3, v5);
  }
  else
  {
    *result = 0;
    *(_DWORD *)(a1 + 12) = 1;
  }
  return result;
}

uint64_t WebCore::CDMPrivateClearKey::distinctiveIdentifiersRequirement(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (*a3)
    return 2;
  else
    return 1;
}

uint64_t WebCore::CDMPrivateClearKey::persistentStateRequirement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a3 + 1))
    return 2;
  else
    return 1;
}

uint64_t WebCore::CDMPrivateClearKey::distinctiveIdentifiersAreUniquePerOriginAndClearable()
{
  return 0;
}

WTF::StringImpl *WebCore::CDMPrivateClearKey::createInstance@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  unsigned int **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  unsigned int *v19;

  v3 = WTF::fastMalloc((WTF *)0x38);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(v3 + 8) = 1;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  v5 = (unsigned int **)(v3 + 24);
  *(_QWORD *)v3 = off_1E340A760;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_DWORD *)(v3 + 48) = 0;
  if ((byte_1EE33811A & 1) == 0)
  {
    *(_QWORD *)&dword_1EE338140 = 0;
    qword_1EE338138 = 0;
    byte_1EE33811A = 1;
    goto LABEL_24;
  }
  if (dword_1EE338144)
  {
    v6 = (_QWORD *)qword_1EE338138;
    v7 = 8 * dword_1EE338144;
    while (1)
    {
      v8 = *v6;
      if ((*(unsigned int (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*v6 + 24))(*v6, &v18))
        break;
      ++v6;
      v7 -= 8;
      if (!v7)
        goto LABEL_6;
    }
    (*(void (**)(unsigned int **__return_ptr, uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(&v19, v8, &v18);
    v9 = v19;
  }
  else
  {
LABEL_6:
    v9 = 0;
  }
  v10 = *v5;
  *v5 = v9;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
    v9 = *v5;
  }
  if (v9)
  {
    v14 = (unsigned __int8 *)(v9 + 3);
    if (__ldaxr((unsigned __int8 *)v9 + 12))
    {
      __clrex();
    }
    else if (!__stxr(1u, v14))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v9 + 3);
LABEL_19:
    *((_QWORD *)v9 + 2) = v3;
    v16 = __ldxr(v14);
    if (v16 == 1)
    {
      if (!__stlxr(0, v14))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v9 + 3));
  }
LABEL_24:
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  *(_QWORD *)v3 = off_1E340A148;
  *a1 = v3;
  return result;
}

uint64_t WebCore::CDMPrivateClearKey::supportsServerCertificates(WebCore::CDMPrivateClearKey *this)
{
  return 0;
}

uint64_t WebCore::CDMPrivateClearKey::supportsSessions(WebCore::CDMPrivateClearKey *this)
{
  return 1;
}

BOOL WebCore::CDMPrivateClearKey::supportsInitData(WebCore::CDMPrivateClearKey *this, const WTF::AtomString *a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v3;
  int v7;
  uint64_t v8;
  int v9;
  unint64_t KeyidsLocationFromCencInitData;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;

  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    return 0;
  v7 = *(_DWORD *)(v3 + 4);
  if (v7 == 6)
  {
    v13 = *(_QWORD *)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      if ((*(_BYTE *)v13 & 0xDF) != 0x4B
        || (*(_BYTE *)(v13 + 1) & 0xDF) != 0x45
        || (*(_BYTE *)(v13 + 2) & 0xDF) != 0x59
        || (*(_BYTE *)(v13 + 3) & 0xDF) != 0x49
        || (*(_BYTE *)(v13 + 4) & 0xDF) != 0x44)
      {
        return 0;
      }
      v14 = *(unsigned __int8 *)(v13 + 5);
    }
    else
    {
      if ((*(_WORD *)v13 & 0xFFDF) != 0x4B
        || (*(_WORD *)(v13 + 2) & 0xFFDF) != 0x45
        || (*(_WORD *)(v13 + 4) & 0xFFDF) != 0x59
        || (*(_WORD *)(v13 + 6) & 0xFFDF) != 0x49
        || (*(_WORD *)(v13 + 8) & 0xFFDF) != 0x44)
      {
        return 0;
      }
      v14 = *(unsigned __int16 *)(v13 + 10);
    }
    if ((v14 & 0xFFFFFFDF) != 0x53)
      return 0;
    WebCore::CDMUtilities::parseJSONObject((uint64_t)&v15, a3);
    if (v15)
    {
      if (*v15 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v15;
      return 1;
    }
    v3 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
      return 0;
    v7 = *(_DWORD *)(v3 + 4);
  }
  if (v7 != 4)
    return 0;
  v8 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v8 & 0xDF) != 0x43 || (*(_BYTE *)(v8 + 1) & 0xDF) != 0x45 || (*(_BYTE *)(v8 + 2) & 0xDF) != 0x4E)
      goto LABEL_16;
    v9 = *(unsigned __int8 *)(v8 + 3);
  }
  else
  {
    if ((*(_WORD *)v8 & 0xFFDF) != 0x43
      || (*(_WORD *)(v8 + 2) & 0xFFDF) != 0x45
      || (*(_WORD *)(v8 + 4) & 0xFFDF) != 0x4E)
    {
      goto LABEL_16;
    }
    v9 = *(unsigned __int16 *)(v8 + 6);
  }
  if ((v9 & 0xFFFFFFDF) == 0x43)
  {
    KeyidsLocationFromCencInitData = WebCore::extractKeyidsLocationFromCencInitData(a3, a2);
    if (HIDWORD(KeyidsLocationFromCencInitData) && (_DWORD)KeyidsLocationFromCencInitData)
      return 1;
    v3 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2 || *(_DWORD *)(v3 + 4) != 4)
      return 0;
  }
LABEL_16:
  v11 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v3 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v11 & 0xDF) != 0x57 || (*(_BYTE *)(v11 + 1) & 0xDF) != 0x45 || (*(_BYTE *)(v11 + 2) & 0xDF) != 0x42)
      return 0;
    v12 = *(unsigned __int8 *)(v11 + 3);
  }
  else
  {
    if ((*(_WORD *)v11 & 0xFFDF) != 0x57
      || (*(_WORD *)(v11 + 2) & 0xFFDF) != 0x45
      || (*(_WORD *)(v11 + 4) & 0xFFDF) != 0x42)
    {
      return 0;
    }
    v12 = *(unsigned __int16 *)(v11 + 6);
  }
  return (v12 & 0xFFFFFFDF) == 0x4D && *((_QWORD *)a3 + 6);
}

uint64_t *WebCore::CDMPrivateClearKey::sanitizeResponse@<X0>(const WebCore::SharedBuffer *a1@<X1>, uint64_t **a2@<X8>)
{
  uint64_t *result;
  uint64_t *v6;
  void *v7;
  uint64_t *v8;

  WebCore::CDMUtilities::parseJSONObject((uint64_t)&v8, a1);
  result = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v8;
    WebCore::FragmentedSharedBuffer::makeContiguous(a1, &v8);
    v6 = v8;
    v8 = 0;
    *a2 = v6;
    return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v8, v7);
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebCore::CDMPrivateClearKey::sanitizeSessionId@<X0>(const WTF::String *a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _DWORD *v9;
  char v10;

  v5 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
  {
    v6 = 0;
    v7 = 0;
    goto LABEL_3;
  }
  v6 = *((_QWORD *)v5 + 1);
  v7 = v5[1];
  if ((v5[4] & 4) != 0)
  {
LABEL_3:
    result = WTF::parseInteger<unsigned int,unsigned char>(v6, v7, 10, 0);
    goto LABEL_4;
  }
  result = WTF::parseInteger<unsigned int,char16_t>(v6, v7, 10, 0);
LABEL_4:
  if ((result & 0xFF00000000) != 0)
  {
    v9 = *(_DWORD **)a1;
    if (*(_QWORD *)a1)
      *v9 += 2;
    *(_QWORD *)a2 = v9;
    v10 = 1;
  }
  else
  {
    v10 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 8) = v10;
  return result;
}

void WebCore::CDMInstanceProxy::~CDMInstanceProxy(WebCore::CDMInstanceProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  *(_QWORD *)this = off_1E340A760;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (!v3)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v16 = __ldxr((unsigned __int8 *)v3);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
LABEL_14:
  v8 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    v9 = v8 + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v8 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  v12 = *((_QWORD *)this + 2);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

void WebCore::CDMInstanceClearKey::~CDMInstanceClearKey(WebCore::CDMInstanceClearKey *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CDMInstanceProxy::~CDMInstanceProxy(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::CDMInstanceClearKey::initializeWithConfiguration(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, (a3 | a4) ^ 1u);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WebCore::CDMInstanceClearKey::setServerCertificate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *WebCore::CDMInstanceClearKey::keySystem(WebCore::CDMInstanceClearKey *this)
{
  if ((byte_1EE33811C & 1) == 0)
  {
    WebCore::CDMInstanceClearKey::keySystem(void)::$_0::operator() const(void)::impl += 2;
    qword_1EE338128 = &WebCore::CDMInstanceClearKey::keySystem(void)::$_0::operator() const(void)::impl;
    byte_1EE33811C = 1;
  }
  return &qword_1EE338128;
}

uint64_t WebCore::CDMInstanceClearKey::createSession@<X0>(WebCore::CDMInstanceClearKey *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t result;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)v4 = off_1E340A6F0;
  *(_QWORD *)(v4 + 16) = 0;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v4;
  v7 = *(unsigned int **)(v4 + 16);
  *(_QWORD *)(v4 + 16) = v6;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v5);
    }
  }
  *(_QWORD *)v4 = off_1E340A000;
  result = *((_QWORD *)this + 2);
  if (result)
    goto LABEL_15;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = this;
  v12 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = result;
  if (!v12)
    goto LABEL_15;
  do
  {
    v13 = __ldaxr(v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v12));
  if (!v14)
  {
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v11);
  }
  result = *((_QWORD *)this + 2);
  if (result)
  {
LABEL_15:
    do
      v15 = __ldaxr((unsigned int *)result);
    while (__stlxr(v15 + 1, (unsigned int *)result));
  }
  *(_QWORD *)v4 = off_1E340A1C0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 24) = result;
  v16 = WebCore::keyStoreBaseNextID(void)::nextID++;
  *(_DWORD *)(v4 + 48) = v16;
  *a2 = v4;
  return result;
}

unsigned int *WebCore::CDMInstanceSessionClearKey::requestLicense(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, unint64_t *a4, WebCore **a5, uint64_t *a6)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WebCore *v22;
  WTF::JSONImpl::Value *v23;
  void *v24;
  WTF::JSONImpl::Value *v25;
  void *v26;
  uint64_t v27;
  unsigned int *result;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  WebCore *v33;
  unint64_t KeyidsLocationFromCencInitData;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  WTF::JSONImpl::Array *v40;
  WTF::StringImpl *v41;
  const WTF::String *v42;
  uint64_t v43;
  char *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  void *v48;
  WTF::JSONImpl::Value *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF *v58;
  WTF *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::JSONImpl::Value *v66;
  WTF::StringImpl *v67;
  void *v68;
  uint64_t v69;
  int v70;
  WebCore *v71;
  void *v72;
  uint64_t v73;
  WTF::JSONImpl::Array *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  uint64_t v77;
  const WTF::String *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::JSONImpl::Value *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF *v95;
  WTF *v96;
  uint64_t v97;
  void *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::JSONImpl::Value *v102;
  WTF::StringImpl *v103;
  void *v104;
  _DWORD **v105;
  uint64_t v106;
  _DWORD *v107;
  _DWORD **v108;
  uint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  WTF::StringImpl *v112;
  WTF *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  WTF::JSONImpl::Value *v120;

  WTF::String::number((WTF::String *)++WebCore::CDMInstanceSessionClearKey::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::s_sessionIdValue);
  v11 = v112;
  v112 = 0;
  v12 = (WTF::StringImpl *)*((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = v11;
  if (v12)
  {
    v13 = *(_DWORD *)v12 - 2;
    if (*(_DWORD *)v12 == 2)
    {
      WTF::StringImpl::destroy(v12, v10);
      v12 = v112;
      v112 = 0;
      if (!v12)
        goto LABEL_4;
      v13 = *(_DWORD *)v12 - 2;
      if (*(_DWORD *)v12 == 2)
      {
        v12 = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v10);
        goto LABEL_4;
      }
    }
    *(_DWORD *)v12 = v13;
  }
LABEL_4:
  v14 = *a4;
  if (!*a4 || *(_DWORD *)(v14 + 4) != 4)
    goto LABEL_5;
  v31 = *(_QWORD *)(v14 + 8);
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v31 & 0xDF) == 0x43 && (*(_BYTE *)(v31 + 1) & 0xDF) == 0x45 && (*(_BYTE *)(v31 + 2) & 0xDF) == 0x4E)
    {
      v32 = *(unsigned __int8 *)(v31 + 3);
LABEL_27:
      if ((v32 & 0xFFFFFFDF) == 0x43)
      {
        v33 = *a5;
        KeyidsLocationFromCencInitData = WebCore::extractKeyidsLocationFromCencInitData(*a5, v10);
        v35 = KeyidsLocationFromCencInitData;
        if ((_DWORD)KeyidsLocationFromCencInitData
          && (v36 = HIDWORD(KeyidsLocationFromCencInitData), HIDWORD(KeyidsLocationFromCencInitData)))
        {
          if (*((_DWORD *)v33 + 5))
          {
            v37 = *(_QWORD *)(*((_QWORD *)v33 + 1) + 8);
            v38 = *(unsigned int *)(v37 + 24);
            if ((_DWORD)v38 == -1)
              goto LABEL_162;
            v112 = (WTF::StringImpl *)&v120;
            KeyidsLocationFromCencInitData = ((uint64_t (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v38])(&v112, v37 + 8);
          }
          v39 = *((_QWORD *)v33 + 6);
          v40 = (WTF::JSONImpl::Array *)WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)KeyidsLocationFromCencInitData);
          v12 = (WTF::StringImpl *)WTF::JSONImpl::Array::create(v40);
          do
          {
            if (v39 < v36 || (v14 = v39 - v36, v14 <= 0xF))
            {
              __break(1u);
              goto LABEL_144;
            }
            v41 = v119;
            WTF::base64EncodeToString();
            WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v118, v42);
            v43 = *((unsigned int *)v41 + 7);
            if ((_DWORD)v43 == *((_DWORD *)v41 + 6))
            {
              v44 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v41 + 2, v43 + 1, (unint64_t)&v112);
              v43 = *((unsigned int *)v41 + 7);
              v31 = *((_QWORD *)v41 + 2);
              v45 = *(WTF::StringImpl **)v44;
              *(_QWORD *)v44 = 0;
            }
            else
            {
              v31 = *((_QWORD *)v41 + 2);
              v45 = v112;
              v112 = 0;
            }
            *(_QWORD *)(v31 + 8 * v43) = v45;
            v14 = (v43 + 1);
            *((_DWORD *)v41 + 7) = v14;
            v46 = v112;
            v112 = 0;
            if (v46)
            {
              v14 = (*(_DWORD *)v46 - 1);
              if (*(_DWORD *)v46 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                *(_DWORD *)v46 = v14;
            }
            v12 = v118;
            v118 = 0;
            if (v12)
            {
              v14 = (*(_DWORD *)v12 - 2);
              if (*(_DWORD *)v12 == 2)
                v12 = (WTF::StringImpl *)WTF::StringImpl::destroy(v12, v10);
              else
                *(_DWORD *)v12 = v14;
            }
            LODWORD(v36) = v36 + 16;
            --v35;
          }
          while (v35);
          v49 = v120;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v50 = v119;
          v118 = v112;
          v119 = 0;
          v117 = v50;
          WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v49 + 2, &v118, (const WTF::StringImpl *)&v117, (uint64_t)&v112);
          if ((_BYTE)v114)
          {
            v52 = (uint64_t *)((char *)v49 + 24);
            v53 = *((unsigned int *)v49 + 9);
            if ((_DWORD)v53 == *((_DWORD *)v49 + 8))
            {
              v108 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v52, v53 + 1, (unint64_t)&v118);
              v53 = *((unsigned int *)v49 + 9);
              v109 = *((_QWORD *)v49 + 3);
              v110 = *v108;
              if (*v108)
                *v110 += 2;
              *(_QWORD *)(v109 + 8 * v53) = v110;
            }
            else
            {
              v54 = *v52;
              v55 = v118;
              if (v118)
                *(_DWORD *)v118 += 2;
              *(_QWORD *)(v54 + 8 * v53) = v55;
            }
            *((_DWORD *)v49 + 9) = v53 + 1;
          }
          v56 = v117;
          v117 = 0;
          if (v56)
          {
            if (*(_DWORD *)v56 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v56;
          }
          v57 = v118;
          v118 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v51);
            else
              *(_DWORD *)v57 -= 2;
          }
          WTF::JSONImpl::Value::toJSONString(v120);
          WTF::String::utf8();
          if (v118)
          {
            v58 = (WTF::StringImpl *)((char *)v118 + 16);
            v59 = (WTF *)*((_QWORD *)v118 + 1);
          }
          else
          {
            v59 = 0;
            v58 = 0;
          }
          v60 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)v60 = 1;
          *(_QWORD *)(v60 + 8) = v60 + 24;
          *(_QWORD *)(v60 + 16) = 1;
          *(_BYTE *)(v60 + 40) = 0;
          *(_QWORD *)(v60 + 48) = 0;
          WebCore::FragmentedSharedBuffer::append(v60, v58, v59);
          v112 = (WTF::StringImpl *)v60;
          v61 = WTF::fastMalloc((WTF *)0x38);
          v116 = WebCore::SharedBuffer::SharedBuffer(v61, (uint64_t *)&v112);
          WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v112, v62);
          v63 = v118;
          v118 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 1)
              WTF::fastFree(v63, v48);
            else
              --*(_DWORD *)v63;
          }
          v64 = v117;
          v117 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v48);
            else
              *(_DWORD *)v64 -= 2;
          }
          v65 = v119;
          v119 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v65;
          }
          v66 = v120;
          v120 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v66;
          }
          v47 = v116;
        }
        else
        {
          v47 = WTF::fastMalloc((WTF *)0x38);
          *(_DWORD *)v47 = 1;
          *(_QWORD *)(v47 + 8) = v47 + 24;
          *(_QWORD *)(v47 + 16) = 1;
          *(_QWORD *)(v47 + 48) = 0;
          *(_BYTE *)(v47 + 40) = 1;
        }
        v116 = 0;
        v67 = *a5;
        *a5 = (WebCore *)v47;
        v112 = v67;
        WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v112, v48);
        v12 = (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v116, v68);
        v14 = *a4;
        if (!*a4 || *(_DWORD *)(v14 + 4) != 4)
          goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_144:
    if ((*(_WORD *)v31 & 0xFFDF) == 0x43
      && (*(_WORD *)(v31 + 2) & 0xFFDF) == 0x45
      && (*(_WORD *)(v31 + 4) & 0xFFDF) == 0x4E)
    {
      v32 = *(unsigned __int16 *)(v31 + 6);
      goto LABEL_27;
    }
  }
  v69 = *(_QWORD *)(v14 + 8);
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    if ((*(_BYTE *)v69 & 0xDF) != 0x57 || (*(_BYTE *)(v69 + 1) & 0xDF) != 0x45 || (*(_BYTE *)(v69 + 2) & 0xDF) != 0x42)
      goto LABEL_5;
    v70 = *(unsigned __int8 *)(v69 + 3);
  }
  else
  {
    if ((*(_WORD *)v69 & 0xFFDF) != 0x57
      || (*(_WORD *)(v69 + 2) & 0xFFDF) != 0x45
      || (*(_WORD *)(v69 + 4) & 0xFFDF) != 0x42)
    {
      goto LABEL_5;
    }
    v70 = *(unsigned __int16 *)(v69 + 6);
  }
  if ((v70 & 0xFFFFFFDF) == 0x4D)
  {
    v71 = *a5;
    if ((unint64_t)(*((_QWORD *)*a5 + 6) - 0x100000000) <= 0xFFFFFFFF00000000)
    {
      v73 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v73 = 1;
      *(_QWORD *)(v73 + 8) = v73 + 24;
      *(_QWORD *)(v73 + 16) = 1;
      *(_QWORD *)(v73 + 48) = 0;
      *(_BYTE *)(v73 + 40) = 1;
LABEL_128:
      v116 = 0;
      v103 = *a5;
      *a5 = (WebCore *)v73;
      v112 = v103;
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v112, v72);
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v116, v104);
      goto LABEL_5;
    }
    v74 = (WTF::JSONImpl::Array *)WTF::JSONImpl::Object::create(v12);
    WTF::JSONImpl::Array::create(v74);
    v75 = v119;
    if (!*((_DWORD *)v71 + 5))
    {
LABEL_93:
      WTF::base64EncodeToString();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v118, v78);
      v80 = *((unsigned int *)v75 + 7);
      if ((_DWORD)v80 == *((_DWORD *)v75 + 6))
      {
        v81 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v75 + 2, v80 + 1, (unint64_t)&v112);
        v80 = *((unsigned int *)v75 + 7);
        v82 = *((_QWORD *)v75 + 2);
        v83 = *(WTF::StringImpl **)v81;
        *(_QWORD *)v81 = 0;
      }
      else
      {
        v82 = *((_QWORD *)v75 + 2);
        v83 = v112;
        v112 = 0;
      }
      *(_QWORD *)(v82 + 8 * v80) = v83;
      *((_DWORD *)v75 + 7) = v80 + 1;
      v84 = v112;
      v112 = 0;
      if (v84)
      {
        if (*(_DWORD *)v84 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v84;
      }
      v85 = v118;
      v118 = 0;
      if (v85)
      {
        if (*(_DWORD *)v85 == 2)
          WTF::StringImpl::destroy(v85, v79);
        else
          *(_DWORD *)v85 -= 2;
      }
      v86 = v120;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v87 = v119;
      v118 = v112;
      v119 = 0;
      v117 = v87;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v86 + 2, &v118, (const WTF::StringImpl *)&v117, (uint64_t)&v112);
      if ((_BYTE)v114)
      {
        v89 = (uint64_t *)((char *)v86 + 24);
        v90 = *((unsigned int *)v86 + 9);
        if ((_DWORD)v90 == *((_DWORD *)v86 + 8))
        {
          v105 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v89, v90 + 1, (unint64_t)&v118);
          v90 = *((unsigned int *)v86 + 9);
          v106 = *((_QWORD *)v86 + 3);
          v107 = *v105;
          if (*v105)
            *v107 += 2;
          *(_QWORD *)(v106 + 8 * v90) = v107;
        }
        else
        {
          v91 = *v89;
          v92 = v118;
          if (v118)
            *(_DWORD *)v118 += 2;
          *(_QWORD *)(v91 + 8 * v90) = v92;
        }
        *((_DWORD *)v86 + 9) = v90 + 1;
      }
      v93 = v117;
      v117 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v93;
      }
      v94 = v118;
      v118 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
          WTF::StringImpl::destroy(v94, v88);
        else
          *(_DWORD *)v94 -= 2;
      }
      WTF::JSONImpl::Value::toJSONString(v120);
      WTF::String::utf8();
      if (v118)
      {
        v95 = (WTF::StringImpl *)((char *)v118 + 16);
        v96 = (WTF *)*((_QWORD *)v118 + 1);
      }
      else
      {
        v96 = 0;
        v95 = 0;
      }
      v97 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v97 = 1;
      *(_QWORD *)(v97 + 8) = v97 + 24;
      *(_QWORD *)(v97 + 16) = 1;
      *(_BYTE *)(v97 + 40) = 0;
      *(_QWORD *)(v97 + 48) = 0;
      WebCore::FragmentedSharedBuffer::append(v97, v95, v96);
      v112 = (WTF::StringImpl *)v97;
      v73 = WTF::fastMalloc((WTF *)0x38);
      v116 = WebCore::SharedBuffer::SharedBuffer(v73, (uint64_t *)&v112);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v112, v98);
      v99 = v118;
      v118 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 1)
          WTF::fastFree(v99, v72);
        else
          --*(_DWORD *)v99;
      }
      v100 = v117;
      v117 = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
          WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v72);
        else
          *(_DWORD *)v100 -= 2;
      }
      v101 = v119;
      v119 = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v101;
      }
      v102 = v120;
      v120 = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v102;
      }
      goto LABEL_128;
    }
    v76 = *(_QWORD *)(*((_QWORD *)v71 + 1) + 8);
    v77 = *(unsigned int *)(v76 + 24);
    if ((_DWORD)v77 != -1)
    {
      v112 = (WTF::StringImpl *)&v118;
      ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v77])(&v112, v76 + 8);
      goto LABEL_93;
    }
LABEL_162:
    v111 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)WebCore::CDMInstanceSessionClearKey::updateLicense(v111);
  }
LABEL_5:
  v112 = a1;
  v15 = *((_QWORD *)a1 + 2);
  if (v15)
    goto LABEL_165;
  v15 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = a1;
  v17 = (unsigned int *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v15;
  if (!v17)
    goto LABEL_165;
  do
  {
    v18 = __ldaxr(v17);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v17));
  if (!v19)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  v15 = *((_QWORD *)a1 + 2);
  if (v15)
  {
LABEL_165:
    do
      v20 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v20 + 1, (unsigned int *)v15));
  }
  v21 = *a6;
  *a6 = 0;
  v22 = *a5;
  *a5 = 0;
  v23 = (WTF::JSONImpl::Value *)WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v23 = off_1E340A870;
  *((_QWORD *)v23 + 1) = v112;
  *((_QWORD *)v23 + 2) = v15;
  v113 = 0;
  v114 = 0;
  *((_QWORD *)v23 + 3) = v21;
  *((_QWORD *)v23 + 4) = v22;
  v115 = 0;
  v120 = v23;
  WTF::callOnMainThread();
  v25 = v120;
  v120 = 0;
  if (v25)
    (*(void (**)(WTF::JSONImpl::Value *))(*(_QWORD *)v25 + 8))(v25);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v115, v24);
  v27 = v114;
  v114 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  result = (unsigned int *)v113;
  v113 = 0;
  if (result)
  {
    do
    {
      v29 = __ldaxr(result);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, result));
    if (!v30)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v26);
    }
  }
  return result;
}

unsigned int *WebCore::CDMInstanceSessionClearKey::updateLicense(_QWORD *a1, uint64_t a2, uint64_t a3, const WebCore::SharedBuffer **a4, WTF *a5)
{
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  void *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  uint64_t *v25;
  int i;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WTF::StringImpl *v33;
  const WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  WTF *v49;
  unsigned int *result;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  WTF::JSONImpl::ObjectBase **v54;
  WTF::JSONImpl::ObjectBase **v55;
  WTF::JSONImpl::ObjectBase *v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  _BOOL4 v60;
  uint64_t v61;
  int v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  WTF::StringImpl *v78;
  WTF *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned __int8 *v89;
  WTF *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 *v105;
  size_t v106;
  unsigned int v107;
  size_t v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  size_t v134;
  unsigned int v135;
  size_t v136;
  unsigned __int8 *v137;
  int v138;
  int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  int v143;
  int v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  WTF *v148;
  unsigned int *v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v159;
  unsigned int v160;
  uint64_t v162;
  unsigned __int8 *v163;
  unsigned __int8 v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t k;
  uint64_t v169;
  uint64_t v170;
  unsigned int *v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  WTF *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  WTF *v179;
  uint64_t v180;
  uint64_t v181;
  const void *v182;
  uint64_t v183;
  size_t v184;
  unsigned int v185;
  uint64_t v186;
  unsigned __int8 *v187;
  int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  int v193;
  int v194;
  uint64_t v195;
  int v196;
  unsigned int v197;
  WTF *v198;
  uint64_t v199;
  const void *v200;
  size_t v201;
  unsigned int v202;
  uint64_t v203;
  unsigned __int8 *v204;
  int v205;
  unsigned int v206;
  unsigned int v207;
  int v208;
  unsigned int v209;
  uint64_t v210;
  int v211;
  _QWORD *v212;
  int v213;
  uint64_t v214;
  unsigned int *v215;
  unsigned int *v216;
  unsigned int v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  unint64_t v224;
  unsigned int v225;
  uint64_t v226;
  unsigned int *v227;
  unsigned int *v228;
  unsigned int v229;
  _QWORD *v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t *v237;
  int v239;
  WTF *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  const void *v250;
  size_t v251;
  unsigned int v252;
  uint64_t v253;
  unsigned __int8 *v254;
  int v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  int v260;
  int v261;
  uint64_t v262;
  int v263;
  unsigned int v264;
  unsigned int *v265;
  unsigned int v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  char v270;
  unsigned int *v271;
  WTF *v272;
  const void **v273;
  void *v274;
  const void **v275;
  int v276;
  WTF *v277;
  void *v278;
  uint64_t v279;
  uint64_t *v280;
  WTF **v281;
  int v282;
  int v283;
  WTF *v284;
  uint64_t v285;
  const void *v286;
  size_t v287;
  unsigned int v288;
  uint64_t v289;
  unsigned __int8 *v290;
  int v291;
  int v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  int v296;
  int v297;
  uint64_t v298;
  int v299;
  WTF *v300;
  void *v301;
  unsigned int v302;
  WTF *v303;
  uint64_t v304;
  uint64_t v305;
  _DWORD *v306;
  uint64_t v307;
  int *v308;
  uint64_t v309;
  int *v310;
  int *v311;
  uint64_t v312;
  const void *v313;
  size_t v314;
  unsigned int v315;
  uint64_t v316;
  unsigned __int8 *v317;
  int v318;
  unsigned int v319;
  unsigned int v320;
  int v321;
  unsigned int v322;
  uint64_t v323;
  int v324;
  _QWORD *v325;
  int v326;
  unsigned int *v327;
  uint64_t v328;
  uint64_t v329;
  unsigned int *v330;
  unsigned int v331;
  unsigned int v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  unint64_t v338;
  unsigned int v339;
  unsigned int *v340;
  unsigned int *v341;
  unsigned int v342;
  unsigned int v343;
  uint64_t v344;
  unsigned int v345;
  unsigned int v346;
  unint64_t v347;
  double v348;
  double v349;
  uint64_t v350;
  _OWORD *v351;
  _OWORD *v352;
  int v353;
  int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  int *v358;
  int v359;
  int *v360;
  int v361;
  int v362;
  uint64_t v363;
  unint64_t v364;
  unsigned int v365;
  _DWORD *v366;
  void *v367;
  uint64_t j;
  int v369;
  int v370;
  unsigned int v371;
  unsigned int v372;
  uint64_t v373;
  int *v374;
  uint64_t v375;
  unsigned int v376;
  unsigned int v377;
  unsigned int *v378;
  unsigned int v379;
  unsigned int v380;
  uint64_t v381;
  unsigned int v382;
  _DWORD *v383;
  int *v384;
  int *v385;
  uint64_t v386;
  int *v387;
  int v388;
  int v389;
  unsigned int v390;
  unsigned int v391;
  uint64_t v392;
  int *v393;
  uint64_t v394;
  unsigned __int8 *v395;
  unsigned __int8 v396;
  int v397;
  void *v398;
  WTF::StringImpl *v399;
  uint64_t v400;
  uint64_t *v401;
  WTF::StringImpl *v402;
  uint64_t v403;
  uint64_t *v404;
  unsigned int **v405;
  unsigned int *v406;
  unsigned int *v407;
  unsigned int v408;
  unsigned int v409;
  unsigned __int8 *v410;
  uint64_t v411;
  int v412;
  unsigned int **v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  unsigned int *v418;
  unsigned __int8 *v419;
  WTF::Lock *v420;
  uint64_t v421;
  char v422;
  uint64_t v423;
  uint64_t v424;
  unsigned int **v425;
  WTF::StringImpl *v426;
  uint64_t *v427;
  WTF *v428;
  const void **v429;
  int *v430;
  _QWORD *v431;
  _DWORD *v432;
  WTF *v433[2];
  WTF *v434;
  uint64_t v435;
  unsigned int *v436;
  WTF::StringImpl *v437;
  uint64_t v438;
  char v439;
  WTF::StringImpl *v440;
  WTF::StringImpl *v441;
  uint64_t v442;
  WTF::StringImpl *v443;
  uint64_t v444;
  char v445;

  v7 = a1;
  v8 = a1[2];
  if (v8)
    goto LABEL_635;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = v7;
  v10 = (unsigned int *)v7[2];
  v7[2] = v8;
  if (!v10)
    goto LABEL_635;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v8 = v7[2];
  if (v8)
  {
LABEL_635:
    do
      v13 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v13 + 1, (unsigned int *)v8));
  }
  v433[0] = (WTF *)v8;
  v433[1] = a5;
  WebCore::CDMUtilities::parseJSONObject((uint64_t)&v432, *a4);
  v14 = v432;
  if (!v432)
  {
    LOBYTE(v443) = 0;
    v445 = 0;
    WebCore::CDMInstanceSessionClearKey::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator()(v433, 0, (uint64_t)&v443, 0);
    if (!v445)
      goto LABEL_61;
    v23 = v443;
    if (HIDWORD(v444))
    {
      v24 = 16 * HIDWORD(v444);
      v25 = (uint64_t *)v443;
      do
      {
        v25 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v25, v22)+ 2;
        v24 -= 16;
      }
      while (v24);
    }
LABEL_58:
    if (!v23)
      goto LABEL_61;
    v49 = v23;
    goto LABEL_60;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v17 = v443;
  v18 = *((_QWORD *)v14 + 2);
  if (!v18)
  {
LABEL_27:
    if (!v17)
      goto LABEL_30;
LABEL_28:
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
    goto LABEL_30;
  }
  v19 = *(_DWORD *)(v18 - 8);
  v20 = *((_DWORD *)v443 + 4);
  if (v20 < 0x100)
    v21 = WTF::StringImpl::hashSlowCase(v443);
  else
    v21 = v20 >> 8;
  for (i = 0; ; v21 = i + v27)
  {
    v27 = v21 & v19;
    v28 = *(WTF **)(v18 + 16 * v27);
    if (v28 == (WTF *)-1)
      goto LABEL_22;
    if (!v28)
      break;
    if ((WTF::equal(v28, v17, v16) & 1) != 0)
    {
      v18 += 16 * v27;
      goto LABEL_27;
    }
LABEL_22:
    ++i;
  }
  v29 = *((_QWORD *)v14 + 2);
  if (!v29)
  {
    v18 = 0;
    if (!v17)
      goto LABEL_30;
    goto LABEL_28;
  }
  v18 = v29 + 16 * *(unsigned int *)(v29 - 4);
  if (v17)
    goto LABEL_28;
LABEL_30:
  v30 = *((_QWORD *)v14 + 2);
  if (v30)
    v30 += 16 * *(unsigned int *)(v30 - 4);
  v431 = v7;
  if (v30 == v18)
    goto LABEL_34;
  v31 = *(_QWORD *)(v18 + 8);
  v32 = *(_DWORD *)(v31 + 4);
  if (v32 < 6)
    goto LABEL_34;
  if (v32 != 6)
  {
    __break(0xC471u);
LABEL_628:
    __break(1u);
LABEL_629:
    __break(0xC471u);
    JUMPOUT(0x1961317C8);
  }
  ++*(_DWORD *)v31;
  v434 = 0;
  v435 = 0;
  v53 = *(unsigned int *)(v31 + 28);
  if (!(_DWORD)v53)
  {
    v239 = 0;
    LODWORD(v14) = 0;
    v240 = 0;
    goto LABEL_183;
  }
  v54 = *(WTF::JSONImpl::ObjectBase ***)(v31 + 16);
  v55 = &v54[v53];
  while (2)
  {
    v56 = *v54;
    v57 = *((_DWORD *)*v54 + 1);
    if (v57 == 5)
    {
      ++*(_DWORD *)v56;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v437 = v443;
      WTF::JSONImpl::ObjectBase::getString(v56, (const WTF::String *)&v437);
      v58 = v437;
      v437 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v15);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = (WTF::StringImpl *)v442;
      if (!v442)
      {
        if (*(_DWORD *)v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v56;
        goto LABEL_160;
      }
      if (*(_DWORD *)(v442 + 4) != 3)
      {
LABEL_84:
        v60 = 0;
        v442 = 0;
        goto LABEL_85;
      }
      v61 = *(_QWORD *)(v442 + 8);
      if ((*(_BYTE *)(v442 + 16) & 4) != 0)
      {
        if ((*(_BYTE *)v61 & 0xDF) != 0x4F || (*(_BYTE *)(v61 + 1) & 0xDF) != 0x43)
          goto LABEL_84;
        v62 = *(unsigned __int8 *)(v61 + 2);
      }
      else
      {
        if ((*(_WORD *)v61 & 0xFFDF) != 0x4F || (*(_WORD *)(v61 + 2) & 0xFFDF) != 0x43)
          goto LABEL_84;
        v62 = *(unsigned __int16 *)(v61 + 4);
      }
      if ((v62 & 0xFFFFFFDF) != 0x54)
        goto LABEL_84;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v437 = v443;
      WTF::JSONImpl::ObjectBase::getString(v56, (const WTF::String *)&v437);
      v63 = v437;
      v437 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v15);
        else
          *(_DWORD *)v63 -= 2;
      }
      if (v441)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v437 = v443;
        WTF::JSONImpl::ObjectBase::getString(v56, (const WTF::String *)&v437);
        v64 = v437;
        v437 = 0;
        if (v64)
        {
          if (*(_DWORD *)v64 == 2)
            WTF::StringImpl::destroy(v64, v15);
          else
            *(_DWORD *)v64 -= 2;
        }
        if (v440)
        {
          WTF::base64Decode();
          if (v445)
          {
            WTF::base64Decode();
            v60 = v439 != 0;
            if (v439)
            {
              LODWORD(v14) = "k";
              if (!v445)
                goto LABEL_628;
              v426 = v437;
              v437 = 0;
              v65 = v438;
              v438 = 0;
              v66 = WTF::fastMalloc((WTF *)0x38);
              *(_DWORD *)(v66 + 8) = 1;
              *(_QWORD *)v66 = off_1E340A6D0;
              *(_BYTE *)(v66 + 12) = 0;
              v67 = v443;
              v443 = 0;
              *(_QWORD *)(v66 + 16) = v67;
              v68 = v444;
              v444 = 0;
              *(_QWORD *)(v66 + 24) = v68;
              *(_QWORD *)(v66 + 32) = v426;
              *(_QWORD *)(v66 + 40) = v65;
              *(_DWORD *)(v66 + 48) = 0;
              v436 = (unsigned int *)v66;
              v69 = HIDWORD(v435);
              if (HIDWORD(v435) == (_DWORD)v435)
              {
                v70 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v434, HIDWORD(v435) + 1, (unint64_t)&v436);
                v71 = HIDWORD(v435);
                v72 = v434;
                v73 = *(_QWORD *)v70;
                *(_QWORD *)v70 = 0;
                *((_QWORD *)v72 + v71) = v73;
                v74 = v436;
                HIDWORD(v435) = v71 + 1;
                v436 = 0;
                if (v74)
                {
                  v75 = v74 + 2;
                  do
                  {
                    v76 = __ldaxr(v75);
                    v77 = v76 - 1;
                  }
                  while (__stlxr(v77, v75));
                  if (!v77)
                  {
                    atomic_store(1u, v74 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v74 + 8))(v74);
                  }
                }
              }
              else
              {
                *((_QWORD *)v434 + HIDWORD(v435)) = v66;
                HIDWORD(v435) = v69 + 1;
              }
              if (v439)
              {
                v78 = v437;
                if (v437)
                {
                  v437 = 0;
                  LODWORD(v438) = 0;
                  WTF::fastFree(v78, v15);
                }
              }
            }
            if (v445)
            {
              v79 = v443;
              if (v443)
              {
                v443 = 0;
                LODWORD(v444) = 0;
                WTF::fastFree(v79, v15);
              }
            }
          }
          else
          {
            v60 = 0;
          }
          v80 = v440;
          v440 = 0;
          if (v80)
          {
            if (*(_DWORD *)v80 == 2)
              WTF::StringImpl::destroy(v80, v15);
            else
              *(_DWORD *)v80 -= 2;
          }
        }
        else
        {
          v60 = 0;
        }
        v81 = v441;
        v441 = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v15);
          else
            *(_DWORD *)v81 -= 2;
        }
      }
      else
      {
        v60 = 0;
      }
      v59 = (WTF::StringImpl *)v442;
      v442 = 0;
      if (v59)
      {
LABEL_85:
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v15);
        else
          *(_DWORD *)v59 -= 2;
      }
      if (*(_DWORD *)v56 == 1)
      {
        WTF::JSONImpl::Value::operator delete();
        if (!v60)
          goto LABEL_160;
      }
      else
      {
        --*(_DWORD *)v56;
        if (!v60)
          goto LABEL_160;
      }
      if (++v54 == v55)
      {
        v239 = 0;
        v240 = v434;
        LODWORD(v14) = HIDWORD(v435);
        goto LABEL_183;
      }
      continue;
    }
    break;
  }
  if (v57 > 6 || v57 == 5)
  {
    __break(0xC471u);
    JUMPOUT(0x196131828);
  }
LABEL_160:
  v240 = v434;
  if (HIDWORD(v435))
  {
    v92 = (WTF *)((char *)v434 + 8 * HIDWORD(v435));
    LODWORD(v14) = 1;
    do
    {
      v93 = *(unsigned int **)v240;
      *(_QWORD *)v240 = 0;
      if (v93)
      {
        v94 = v93 + 2;
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          atomic_store(1u, v93 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v93 + 8))(v93);
        }
      }
      v240 = (WTF *)((char *)v240 + 8);
    }
    while (v240 != v92);
    v240 = v434;
  }
  if (v240)
  {
    WTF::fastFree(v240, v15);
    v240 = 0;
  }
  v239 = 1;
LABEL_183:
  if (*(_DWORD *)v31 != 1)
  {
    --*(_DWORD *)v31;
    if (v239)
      goto LABEL_185;
LABEL_298:
    v425 = (unsigned int **)((char *)v240 + 8 * v14);
    v412 = (int)v14;
    v413 = (unsigned int **)v240;
    if (!(_DWORD)v14)
    {
      LOBYTE(v437) = 0;
      v439 = 0;
      goto LABEL_608;
    }
    v422 = 0;
    v178 = v7 + 5;
    v179 = v240;
    v420 = (WTF::Lock *)(v7 + 5);
    while (2)
    {
      v180 = *(_QWORD *)v179;
      v181 = *v178;
      v428 = v179;
      if (*v178)
      {
        v182 = *(const void **)(v180 + 16);
        v183 = v180;
        v184 = *(unsigned int *)(v180 + 28);
        v185 = -1640531527;
        if ((_DWORD)v184)
        {
          v186 = *(unsigned int *)(v180 + 28);
          v187 = *(unsigned __int8 **)(v180 + 16);
          do
          {
            v188 = *v187++;
            v185 = ((v185 + v188) ^ ((v185 + v188) << 16)) + (((v185 + v188) ^ ((v185 + v188) << 16)) >> 11);
            --v186;
          }
          while (v186);
        }
        v189 = 0;
        v190 = *(_DWORD *)(v181 - 8);
        v191 = (v185 ^ (8 * v185)) + ((v185 ^ (8 * v185)) >> 5);
        v192 = (v191 ^ (4 * v191)) + ((v191 ^ (4 * v191)) >> 15);
        v193 = v192 ^ (v192 << 10);
        if (!v193)
          v193 = 0x800000;
        while (1)
        {
          v194 = v193 & v190;
          v195 = v181 + 24 * (v193 & v190);
          v196 = *(_DWORD *)(v195 + 12);
          if (v196 == (_DWORD)v184 && !memcmp(*(const void **)v195, v182, v184))
            break;
          if (!v196)
          {
            v197 = *(_DWORD *)(v181 - 4);
            v195 = v181 + 24 * v197;
            goto LABEL_314;
          }
          v193 = ++v189 + v194;
        }
        v197 = *(_DWORD *)(v181 - 4);
LABEL_314:
        v180 = v183;
        v198 = v428;
        if (v195 == v181 + 24 * v197)
        {
          v178 = (uint64_t *)v420;
        }
        else
        {
          v199 = *(_QWORD *)(v195 + 16);
          v178 = (uint64_t *)v420;
          if (v199 == v183)
            goto LABEL_356;
        }
      }
      else
      {
        WTF::HashTable<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v178, 8u);
        v181 = *v178;
        if (*v178)
          v190 = *(_DWORD *)(v181 - 8);
        else
          v190 = 0;
      }
      v200 = *(const void **)(v180 + 16);
      v423 = v180;
      v201 = *(unsigned int *)(v180 + 28);
      v202 = -1640531527;
      if ((_DWORD)v201)
      {
        v203 = *(unsigned int *)(v180 + 28);
        v204 = *(unsigned __int8 **)(v180 + 16);
        do
        {
          v205 = *v204++;
          v202 = ((v202 + v205) ^ ((v202 + v205) << 16)) + (((v202 + v205) ^ ((v202 + v205) << 16)) >> 11);
          --v203;
        }
        while (v203);
      }
      v206 = (v202 ^ (8 * v202)) + ((v202 ^ (8 * v202)) >> 5);
      v207 = (v206 ^ (4 * v206)) + ((v206 ^ (4 * v206)) >> 15);
      v208 = v207 ^ (v207 << 10);
      if (!v208)
        v208 = 0x800000;
      v209 = v208 & v190;
      v210 = v181 + 24 * (v208 & v190);
      v211 = *(_DWORD *)(v210 + 12);
      if (v211)
      {
        v212 = 0;
        v213 = 1;
        while (v211 != (_DWORD)v201 || memcmp(*(const void **)v210, v200, v201))
        {
          if (v211 == -1)
            v212 = (_QWORD *)v210;
          v209 = (v209 + v213) & v190;
          v210 = v181 + 24 * v209;
          v211 = *(_DWORD *)(v210 + 12);
          ++v213;
          if (!v211)
          {
            v178 = (uint64_t *)v420;
            if (v212)
            {
              *v212 = 0;
              v212[1] = 0;
              v212[2] = 0;
              --*(_DWORD *)(*(_QWORD *)v420 - 16);
              v210 = (uint64_t)v212;
            }
            goto LABEL_333;
          }
        }
        v198 = v428;
        v226 = *(_QWORD *)v428;
        *(_QWORD *)v428 = 0;
        v227 = *(unsigned int **)(v210 + 16);
        *(_QWORD *)(v210 + 16) = v226;
        if (v227)
        {
          v228 = v227 + 2;
          v178 = (uint64_t *)v420;
          do
            v229 = __ldaxr(v228);
          while (__stlxr(v229 - 1, v228));
          v422 = 1;
          if (v229 == 1)
          {
            atomic_store(1u, v227 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v227 + 8))(v227);
          }
        }
        else
        {
          v422 = 1;
          v178 = (uint64_t *)v420;
        }
LABEL_356:
        v179 = (WTF *)((char *)v198 + 8);
        v230 = v431;
        if (v179 == (WTF *)v425)
        {
          LOBYTE(v437) = 0;
          v439 = 0;
          if ((v422 & 1) == 0)
            goto LABEL_608;
          v231 = v431[3];
          do
            v232 = __ldaxr((unsigned int *)v231);
          while (__stlxr(v232 + 1, (unsigned int *)v231));
          v233 = *(_QWORD *)(v231 + 8);
          do
          {
            v234 = __ldaxr((unsigned int *)v231);
            v235 = v234 - 1;
          }
          while (__stlxr(v235, (unsigned int *)v231));
          if (!v235)
          {
            atomic_store(1u, (unsigned int *)v231);
            WTF::fastFree((WTF *)v231, v15);
          }
          v236 = *(_QWORD *)(v233 + 24);
          v237 = (uint64_t *)v420;
          if (!v236)
            goto LABEL_600;
          if (__ldaxr((unsigned __int8 *)(v236 + 24)))
          {
            __clrex();
            goto LABEL_376;
          }
          if (__stxr(1u, (unsigned __int8 *)(v236 + 24)))
LABEL_376:
            MEMORY[0x19AEA534C](v236 + 24);
          v241 = *(_QWORD *)v420;
          v410 = (unsigned __int8 *)(v236 + 24);
          v411 = v236;
          if (*(_QWORD *)v420)
          {
            v242 = *(unsigned int *)(v241 - 4);
            v243 = v241 + 24 * v242;
            if (*(_DWORD *)(v241 - 12))
            {
              v244 = *(_QWORD *)v420;
              if ((_DWORD)v242)
              {
                v245 = 24 * v242;
                v244 = *(_QWORD *)v420;
                do
                {
                  if ((*(_DWORD *)(v244 + 12) + 1) > 1)
                    goto LABEL_387;
                  v244 += 24;
                  v245 -= 24;
                }
                while (v245);
                v244 = v243;
              }
LABEL_387:
              if (v241)
                v246 = v241 + 24 * *(unsigned int *)(v241 - 4);
              else
                v246 = 0;
              if (v246 != v244)
              {
                v247 = (uint64_t *)(v236 + 32);
                v414 = v246;
                v415 = v243;
                v416 = (uint64_t *)(v236 + 32);
                while (1)
                {
                  v248 = *v247;
                  if (*v247)
                  {
                    v249 = *(_QWORD *)(v244 + 16);
                    v250 = *(const void **)(v249 + 16);
                    v251 = *(unsigned int *)(v249 + 28);
                    v252 = -1640531527;
                    if ((_DWORD)v251)
                    {
                      v253 = *(unsigned int *)(v249 + 28);
                      v254 = *(unsigned __int8 **)(v249 + 16);
                      do
                      {
                        v255 = *v254++;
                        v252 = ((v252 + v255) ^ ((v252 + v255) << 16)) + (((v252 + v255) ^ ((v252 + v255) << 16)) >> 11);
                        --v253;
                      }
                      while (v253);
                    }
                    v256 = 0;
                    v257 = *(_DWORD *)(v248 - 8);
                    v258 = (v252 ^ (8 * v252)) + ((v252 ^ (8 * v252)) >> 5);
                    v259 = (v258 ^ (4 * v258)) + ((v258 ^ (4 * v258)) >> 15);
                    v260 = v259 ^ (v259 << 10);
                    if (!v260)
                      v260 = 0x800000;
                    while (1)
                    {
                      v261 = v260 & v257;
                      v262 = v248 + 24 * (v260 & v257);
                      v263 = *(_DWORD *)(v262 + 12);
                      if (v263 == (_DWORD)v251 && !memcmp(*(const void **)v262, v250, v251))
                        break;
                      if (!v263)
                      {
                        v264 = *(_DWORD *)(v248 - 4);
                        v262 = v248 + 24 * v264;
                        goto LABEL_404;
                      }
                      v260 = ++v256 + v261;
                    }
                    v264 = *(_DWORD *)(v248 - 4);
LABEL_404:
                    v230 = v431;
                    if (v262 == v248 + 24 * v264)
                    {
                      v248 = 0;
                    }
                    else
                    {
                      v248 = *(_QWORD *)(v262 + 16);
                      if (v248)
                      {
                        v265 = (unsigned int *)(v248 + 8);
                        do
                          v266 = __ldaxr(v265);
                        while (__stlxr(v266 + 1, v265));
                        v249 = *(_QWORD *)(v244 + 16);
                      }
                    }
                    if (!v249)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x1961317E8);
                    }
                  }
                  v267 = *((_DWORD *)v230 + 12);
                  v268 = WTF::fastMalloc((WTF *)0x40);
                  v269 = *(_QWORD *)(v244 + 16);
                  v270 = *(_BYTE *)(v269 + 12);
                  LODWORD(v434) = v267;
                  *(_DWORD *)(v268 + 8) = 1;
                  v271 = (unsigned int *)(v268 + 8);
                  *(_QWORD *)v268 = off_1E340A6D0;
                  *(_BYTE *)(v268 + 12) = v270;
                  v272 = (WTF *)*(unsigned int *)(v269 + 28);
                  *(_QWORD *)(v268 + 16) = 0;
                  v273 = (const void **)(v268 + 16);
                  *(_QWORD *)(v268 + 24) = 0;
                  *(_DWORD *)(v268 + 28) = (_DWORD)v272;
                  if ((_DWORD)v272)
                  {
                    v274 = (void *)WTF::fastMalloc(v272);
                    *(_DWORD *)(v268 + 24) = (_DWORD)v272;
                    *(_QWORD *)(v268 + 16) = v274;
                    memcpy(v274, *(const void **)(v269 + 16), *(unsigned int *)(v269 + 28));
                  }
                  *(_BYTE *)(v268 + 32) = 0;
                  v275 = (const void **)(v268 + 32);
                  *(_DWORD *)(v268 + 48) = -1;
                  v276 = *(_DWORD *)(v269 + 48);
                  v418 = (unsigned int *)v248;
                  if (v276 != -1)
                  {
                    v277 = (WTF *)*(unsigned int *)(v269 + 44);
                    *v275 = 0;
                    *(_QWORD *)(v268 + 40) = 0;
                    *(_DWORD *)(v268 + 44) = (_DWORD)v277;
                    if ((_DWORD)v277)
                    {
                      v278 = (void *)WTF::fastMalloc(v277);
                      *(_DWORD *)(v268 + 40) = (_DWORD)v277;
                      *(_QWORD *)(v268 + 32) = v278;
                      memcpy(v278, *(const void **)(v269 + 32), *(unsigned int *)(v269 + 44));
                    }
                    *(_DWORD *)(v268 + 48) = v276;
                  }
                  *(_QWORD *)v268 = off_1E340A6B0;
                  v279 = v268;
                  *(_QWORD *)(v268 + 56) = 0;
                  v280 = (uint64_t *)(v268 + 56);
                  WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::add(v280, (int *)&v434, (uint64_t)&v443);
                  v417 = v279;
                  if (v248)
                    break;
                  v285 = *v416;
                  v429 = v273;
                  if (*v416)
                  {
                    v286 = *(const void **)(v417 + 16);
                    v287 = *(unsigned int *)(v417 + 28);
                    v288 = -1640531527;
                    if ((_DWORD)v287)
                    {
                      v289 = *(unsigned int *)(v417 + 28);
                      v290 = *(unsigned __int8 **)(v417 + 16);
                      do
                      {
                        v291 = *v290++;
                        v288 = ((v288 + v291) ^ ((v288 + v291) << 16)) + (((v288 + v291) ^ ((v288 + v291) << 16)) >> 11);
                        --v289;
                      }
                      while (v289);
                    }
                    v292 = 0;
                    v293 = *(_DWORD *)(v285 - 8);
                    v294 = (v288 ^ (8 * v288)) + ((v288 ^ (8 * v288)) >> 5);
                    v295 = (v294 ^ (4 * v294)) + ((v294 ^ (4 * v294)) >> 15);
                    v296 = v295 ^ (v295 << 10);
                    if (!v296)
                      v296 = 0x800000;
                    while (1)
                    {
                      v297 = v296 & v293;
                      v298 = v285 + 24 * (v296 & v293);
                      v299 = *(_DWORD *)(v298 + 12);
                      if (v299 == (_DWORD)v287 && !memcmp(*(const void **)v298, v286, v287))
                        break;
                      if (!v299)
                      {
                        v302 = *(_DWORD *)(v285 - 4);
                        v298 = v285 + 24 * v302;
                        goto LABEL_451;
                      }
                      v296 = ++v292 + v297;
                    }
                    v302 = *(_DWORD *)(v285 - 4);
LABEL_451:
                    if (v298 == v285 + 24 * v302)
                    {
                      v304 = v417;
                    }
                    else
                    {
                      v312 = *(_QWORD *)(v298 + 16);
                      v304 = v417;
                      if (v312 == v417)
                        goto LABEL_547;
                    }
                  }
                  else
                  {
                    WTF::HashTable<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v416, 8u);
                    v285 = *v416;
                    v304 = v417;
                    if (*v416)
                      v293 = *(_DWORD *)(v285 - 8);
                    else
                      v293 = 0;
                  }
                  v313 = *(const void **)(v304 + 16);
                  v314 = *(unsigned int *)(v304 + 28);
                  v315 = -1640531527;
                  if ((_DWORD)v314)
                  {
                    v316 = *(unsigned int *)(v304 + 28);
                    v317 = *(unsigned __int8 **)(v304 + 16);
                    do
                    {
                      v318 = *v317++;
                      v315 = ((v315 + v318) ^ ((v315 + v318) << 16)) + (((v315 + v318) ^ ((v315 + v318) << 16)) >> 11);
                      --v316;
                    }
                    while (v316);
                  }
                  v319 = (v315 ^ (8 * v315)) + ((v315 ^ (8 * v315)) >> 5);
                  v320 = (v319 ^ (4 * v319)) + ((v319 ^ (4 * v319)) >> 15);
                  v321 = v320 ^ (v320 << 10);
                  if (!v321)
                    v321 = 0x800000;
                  v322 = v321 & v293;
                  v323 = v285 + 24 * (v321 & v293);
                  v324 = *(_DWORD *)(v323 + 12);
                  if (!v324)
                  {
                    v247 = v416;
                    goto LABEL_471;
                  }
                  v325 = 0;
                  v326 = 1;
                  do
                  {
                    if (v324 == (_DWORD)v314 && !memcmp(*(const void **)v323, v313, v314))
                    {
                      v340 = *(unsigned int **)(v323 + 16);
                      v247 = v416;
                      *(_QWORD *)(v323 + 16) = v417;
                      v230 = v431;
                      v237 = (uint64_t *)v420;
                      v329 = v414;
                      v328 = v415;
                      if (v340)
                      {
                        v341 = v340 + 2;
                        do
                        {
                          v342 = __ldaxr(v341);
                          v343 = v342 - 1;
                        }
                        while (__stlxr(v343, v341));
                        if (!v343)
                        {
                          atomic_store(1u, v340 + 2);
                          (*(void (**)(unsigned int *))(*(_QWORD *)v340 + 8))(v340);
                        }
                      }
                      goto LABEL_550;
                    }
                    if (v324 == -1)
                      v325 = (_QWORD *)v323;
                    v322 = (v322 + v326) & v293;
                    v323 = v285 + 24 * v322;
                    v324 = *(_DWORD *)(v323 + 12);
                    ++v326;
                  }
                  while (v324);
                  v247 = v416;
                  if (v325)
                  {
                    *v325 = 0;
                    v325[1] = 0;
                    v325[2] = 0;
                    --*(_DWORD *)(*v416 - 16);
                    v323 = (uint64_t)v325;
                  }
LABEL_471:
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v323, v429);
                  v327 = *(unsigned int **)(v323 + 16);
                  *(_QWORD *)(v323 + 16) = v417;
                  v230 = v431;
                  v237 = (uint64_t *)v420;
                  v329 = v414;
                  v328 = v415;
                  if (v327)
                  {
                    v330 = v327 + 2;
                    do
                    {
                      v331 = __ldaxr(v330);
                      v332 = v331 - 1;
                    }
                    while (__stlxr(v332, v330));
                    if (!v332)
                    {
                      atomic_store(1u, v327 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v327 + 8))(v327);
                    }
                  }
                  v333 = *v247;
                  if (*v247)
                    v334 = *(_DWORD *)(v333 - 12) + 1;
                  else
                    v334 = 1;
                  *(_DWORD *)(v333 - 12) = v334;
                  v335 = *v247;
                  if (*v247)
                    v336 = *(_DWORD *)(v335 - 12);
                  else
                    v336 = 0;
                  v337 = (*(_DWORD *)(v335 - 16) + v336);
                  v338 = *(unsigned int *)(v335 - 4);
                  if (v338 > 0x400)
                  {
                    if (v338 <= 2 * v337)
                    {
LABEL_485:
                      v339 = (_DWORD)v338 << (6 * *(_DWORD *)(v335 - 12) >= (2 * v338));
                      goto LABEL_492;
                    }
                  }
                  else if (3 * v338 <= 4 * v337)
                  {
                    if ((_DWORD)v338)
                      goto LABEL_485;
                    v339 = 8;
LABEL_492:
                    WTF::HashTable<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v247, v339);
                  }
LABEL_550:
                  if (v418)
                  {
                    v378 = v418 + 2;
                    do
                    {
                      v379 = __ldaxr(v378);
                      v380 = v379 - 1;
                    }
                    while (__stlxr(v380, v378));
                    if (!v380)
                    {
                      atomic_store(1u, v418 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v418 + 8))(v418);
                    }
                  }
                  v381 = v244 + 24;
                  v244 = v328;
                  if (v381 != v328)
                  {
                    v244 = v381;
                    do
                    {
                      if ((*(_DWORD *)(v244 + 12) + 1) > 1)
                        goto LABEL_560;
                      v244 += 24;
                    }
                    while (v244 != v328);
                    v244 = v328;
                  }
LABEL_560:
                  if (v244 == v329)
                    goto LABEL_593;
                }
                *(_BYTE *)(v248 + 12) = *(_BYTE *)(v279 + 12);
                v281 = (WTF **)(v248 + 32);
                v282 = *(_DWORD *)(v248 + 48);
                v283 = *(_DWORD *)(v279 + 48);
                if (v282 == -1)
                {
                  if (v283 != -1)
                    goto LABEL_434;
                }
                else if (v283 == -1)
                {
                  v303 = *v281;
                  if (*v281)
                  {
                    *(_QWORD *)(v248 + 32) = 0;
                    *(_DWORD *)(v248 + 40) = 0;
                    WTF::fastFree(v303, v15);
                  }
                  *(_DWORD *)(v248 + 48) = -1;
                }
                else if (v282)
                {
                  v284 = *v281;
                  if (*v281)
                  {
                    *(_QWORD *)(v248 + 32) = 0;
                    *(_DWORD *)(v248 + 40) = 0;
                    WTF::fastFree(v284, v15);
                  }
LABEL_434:
                  *(_DWORD *)(v248 + 48) = -1;
                  v300 = (WTF *)*(unsigned int *)(v279 + 44);
                  *v281 = 0;
                  *(_QWORD *)(v248 + 40) = 0;
                  *(_DWORD *)(v248 + 44) = (_DWORD)v300;
                  if ((_DWORD)v300)
                  {
                    v301 = (void *)WTF::fastMalloc(v300);
                    *(_DWORD *)(v248 + 40) = (_DWORD)v300;
                    *(_QWORD *)(v248 + 32) = v301;
                    memcpy(v301, *(const void **)(v279 + 32), *(unsigned int *)(v279 + 44));
                  }
                  *(_DWORD *)(v248 + 48) = 0;
                }
                else
                {
                  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v248 + 32, v275);
                }
                v305 = *(_QWORD *)(v248 + 56);
                if (!v305)
                {
                  v306 = 0;
                  goto LABEL_446;
                }
                v344 = *(unsigned int *)(v305 - 12);
                if ((_DWORD)v344)
                {
                  v345 = (v344 - 1) | ((v344 - 1) >> 1) | ((((_DWORD)v344 - 1) | ((v344 - 1) >> 1)) >> 2);
                  v346 = v345 | (v345 >> 4) | ((v345 | (v345 >> 4)) >> 8);
                  v347 = (v346 | HIWORD(v346)) + 1;
                  if (v347 > 0x400)
                  {
                    if (v347 <= 2 * v344)
                    {
LABEL_498:
                      LODWORD(v347) = 2 * v347;
                      if (v347 <= 0x400)
                        goto LABEL_499;
                    }
                    v348 = (double)v344;
                    v349 = (double)v347 * 0.416666667;
                  }
                  else
                  {
                    if (3 * v347 <= 4 * v344)
                      goto LABEL_498;
LABEL_499:
                    v348 = (double)v344;
                    v349 = (double)v347 * 0.604166667;
                  }
                  if (v349 <= v348)
                    LODWORD(v347) = 2 * v347;
                  if (v347 <= 8)
                    v382 = 8;
                  else
                    v382 = v347;
                  v383 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(4 * v382 + 16));
                  v383[2] = v382 - 1;
                  v383[3] = v382;
                  *v383 = 0;
                  v383[1] = v344;
                  v384 = *(int **)(v248 + 56);
                  if (!v384)
                  {
                    v385 = 0;
                    v386 = 0;
                    goto LABEL_573;
                  }
                  v386 = *(v384 - 1);
                  v387 = &v384[v386];
                  if (*(v384 - 3))
                  {
                    v385 = *(int **)(v248 + 56);
                    if ((_DWORD)v386)
                    {
                      v394 = 4 * v386;
                      v385 = *(int **)(v248 + 56);
                      do
                      {
                        if ((*v385 + 1) > 1)
                          goto LABEL_574;
                        ++v385;
                        v394 -= 4;
                      }
                      while (v394);
                      v385 = v387;
                    }
                  }
                  else
                  {
                    v385 = &v384[v386];
LABEL_573:
                    v387 = &v384[v386];
                  }
LABEL_574:
                  if (v384)
                    v384 += *(v384 - 1);
                  v306 = v383 + 4;
                  while (v385 != v384)
                  {
                    v388 = 0;
                    v389 = *v385;
                    v390 = 9 * ((v389 + ~(v389 << 15)) ^ ((v389 + ~(v389 << 15)) >> 10));
                    v391 = ((v390 ^ (v390 >> 6)) + ~((v390 ^ (v390 >> 6)) << 11)) ^ (((v390 ^ (v390 >> 6))
                                                                                    + ~((v390 ^ (v390 >> 6)) << 11)) >> 16);
                    do
                    {
                      v392 = v391 & (v382 - 1);
                      v391 = ++v388 + v392;
                    }
                    while (v306[v392]);
                    v306[v392] = v389;
                    v393 = v385 + 1;
                    v385 = v387;
                    if (v393 != v387)
                    {
                      v385 = v393;
                      do
                      {
                        if ((*v385 + 1) > 1)
                          goto LABEL_584;
                        ++v385;
                      }
                      while (v385 != v387);
                      v385 = v387;
                    }
LABEL_584:
                    ;
                  }
                }
                else
                {
                  v306 = 0;
                }
LABEL_446:
                v307 = *v280;
                if (!*v280)
                {
                  v308 = 0;
                  v309 = 0;
                  goto LABEL_448;
                }
                v309 = *(unsigned int *)(v307 - 4);
                v310 = (int *)(v307 + 4 * v309);
                if (*(_DWORD *)(v307 - 12))
                {
                  v308 = (int *)v307;
                  if ((_DWORD)v309)
                  {
                    v350 = 4 * v309;
                    v308 = (int *)v307;
                    do
                    {
                      if ((*v308 + 1) > 1)
                        goto LABEL_506;
                      ++v308;
                      v350 -= 4;
                    }
                    while (v350);
                    v308 = v310;
                  }
LABEL_506:
                  if (!v307)
                    goto LABEL_507;
LABEL_449:
                  v311 = (int *)(v307 + 4 * *(unsigned int *)(v307 - 4));
                }
                else
                {
                  v308 = (int *)(v307 + 4 * v309);
LABEL_448:
                  v310 = (int *)(v307 + 4 * v309);
                  if (v307)
                    goto LABEL_449;
LABEL_507:
                  v311 = 0;
                }
                if (v311 != v308)
                {
                  v430 = v311;
                  do
                  {
                    v351 = v306;
                    if (!v306)
                    {
                      v352 = (_OWORD *)WTF::fastZeroedMalloc((WTF *)0x30);
                      *v352 = xmmword_1968A5190;
                      v351 = v352 + 1;
                    }
                    v353 = *((_DWORD *)v351 - 2);
                    v354 = *v308;
                    v355 = 9 * ((v354 + ~(v354 << 15)) ^ ((v354 + ~(v354 << 15)) >> 10));
                    v356 = (v355 ^ (v355 >> 6)) + ~((v355 ^ (v355 >> 6)) << 11);
                    v357 = (v356 ^ HIWORD(v356)) & v353;
                    v358 = (int *)v351 + v357;
                    v359 = *v358;
                    if (!*v358)
                      goto LABEL_520;
                    v360 = 0;
                    v361 = 1;
                    do
                    {
                      if (v359 == v354)
                      {
                        v306 = v351;
                        goto LABEL_536;
                      }
                      if (v359 == -1)
                        v360 = v358;
                      v357 = (v357 + v361) & v353;
                      v358 = (int *)v351 + v357;
                      v359 = *v358;
                      ++v361;
                    }
                    while (*v358);
                    if (v360)
                    {
                      *v360 = 0;
                      --*((_DWORD *)v351 - 4);
                      *v360 = *v308;
                      goto LABEL_521;
                    }
LABEL_520:
                    *v358 = v354;
LABEL_521:
                    v362 = *((_DWORD *)v351 - 3) + 1;
                    *((_DWORD *)v351 - 3) = v362;
                    v363 = (*((_DWORD *)v351 - 4) + v362);
                    v364 = *((unsigned int *)v351 - 1);
                    if (v364 > 0x400)
                    {
                      if (v364 <= 2 * v363)
                        goto LABEL_526;
LABEL_523:
                      v306 = v351;
                      v311 = v430;
                    }
                    else
                    {
                      if (3 * v364 > 4 * v363)
                        goto LABEL_523;
                      if ((_DWORD)v364)
LABEL_526:
                        v365 = (_DWORD)v364 << (6 * v362 >= (2 * v364));
                      else
                        v365 = 8;
                      v366 = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(4 * v365 + 16));
                      v306 = v366 + 4;
                      v366[2] = v365 - 1;
                      v366[3] = v365;
                      *v366 = 0;
                      v366[1] = v362;
                      v311 = v430;
                      if ((_DWORD)v364)
                      {
                        for (j = 0; j != v364; ++j)
                        {
                          v369 = *((_DWORD *)v351 + j);
                          if ((v369 + 1) >= 2)
                          {
                            v370 = 0;
                            v371 = 9 * ((v369 + ~(v369 << 15)) ^ ((v369 + ~(v369 << 15)) >> 10));
                            v372 = ((v371 ^ (v371 >> 6)) + ~((v371 ^ (v371 >> 6)) << 11)) ^ (((v371 ^ (v371 >> 6))
                                                                                            + ~((v371 ^ (v371 >> 6)) << 11)) >> 16);
                            do
                            {
                              v373 = v372 & (v365 - 1);
                              v372 = ++v370 + v373;
                            }
                            while (v306[v373]);
                            v306[v373] = v369;
                          }
                        }
                      }
                      WTF::fastFree((WTF *)(v351 - 1), v367);
                    }
LABEL_536:
                    v374 = v308 + 1;
                    v308 = v310;
                    if (v374 != v310)
                    {
                      v308 = v374;
                      do
                      {
                        if ((*v308 + 1) > 1)
                          goto LABEL_541;
                        ++v308;
                      }
                      while (v308 != v310);
                      v308 = v310;
                    }
LABEL_541:
                    ;
                  }
                  while (v308 != v311);
                }
                v304 = v417;
                v375 = *(_QWORD *)(v248 + 56);
                *(_QWORD *)(v248 + 56) = v306;
                if (v375)
                  WTF::fastFree((WTF *)(v375 - 16), v15);
                do
                {
LABEL_547:
                  v376 = __ldaxr(v271);
                  v377 = v376 - 1;
                }
                while (__stlxr(v377, v271));
                v230 = v431;
                v237 = (uint64_t *)v420;
                v329 = v414;
                v328 = v415;
                v247 = v416;
                if (!v377)
                {
                  atomic_store(1u, (unsigned int *)(v304 + 8));
                  (*(void (**)(uint64_t))(*(_QWORD *)v304 + 8))(v304);
                }
                goto LABEL_550;
              }
LABEL_593:
              v395 = (unsigned __int8 *)(v411 + 25);
              v396 = atomic_load((unsigned __int8 *)(v411 + 25));
              if ((v396 & 1) != 0)
              {
                atomic_store(0, v395);
                WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v395, v15);
              }
              v397 = __ldxr(v410);
              if (v397 == 1)
              {
                if (!__stlxr(0, v410))
                  goto LABEL_600;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v410);
LABEL_600:
              WebCore::KeyStoreBase<WebCore::KeyHandle>::convertToJSKeyStatusVector((uint64_t *)&v443, *v237);
              if (v439)
              {
                v399 = v437;
                if (HIDWORD(v438))
                {
                  v400 = 16 * HIDWORD(v438);
                  v401 = (uint64_t *)v437;
                  do
                  {
                    v401 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v401, v398)+ 2;
                    v400 -= 16;
                  }
                  while (v400);
                }
                if (v399)
                  WTF::fastFree(v399, v398);
                v437 = v443;
                v438 = v444;
              }
              else
              {
                v437 = v443;
                v438 = v444;
                v439 = 1;
              }
LABEL_608:
              WebCore::CDMInstanceSessionClearKey::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator()(v433, 0, (uint64_t)&v437, 1);
              if (v439)
              {
                v402 = v437;
                if (HIDWORD(v438))
                {
                  v403 = 16 * HIDWORD(v438);
                  v404 = (uint64_t *)v437;
                  do
                  {
                    v404 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v404, v22)+ 2;
                    v403 -= 16;
                  }
                  while (v403);
                }
                if (v402)
                  WTF::fastFree(v402, v22);
              }
              if (v412)
              {
                v405 = v413;
                do
                {
                  v406 = *v405;
                  *v405 = 0;
                  if (v406)
                  {
                    v407 = v406 + 2;
                    do
                    {
                      v408 = __ldaxr(v407);
                      v409 = v408 - 1;
                    }
                    while (__stlxr(v409, v407));
                    if (!v409)
                    {
                      atomic_store(1u, v406 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v406 + 8))(v406);
                    }
                  }
                  ++v405;
                }
                while (v405 != v425);
              }
              v49 = (WTF *)v413;
              if (!v413)
                goto LABEL_61;
LABEL_60:
              WTF::fastFree(v49, v22);
              goto LABEL_61;
            }
            v244 = v241 + 24 * v242;
          }
          else
          {
            v244 = 0;
            LODWORD(v242) = 0;
          }
          v243 = v241 + 24 * v242;
          goto LABEL_387;
        }
        continue;
      }
      break;
    }
LABEL_333:
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v210, (const void **)(v423 + 16));
    v198 = v428;
    v214 = *(_QWORD *)v428;
    *(_QWORD *)v428 = 0;
    v215 = *(unsigned int **)(v210 + 16);
    *(_QWORD *)(v210 + 16) = v214;
    if (v215)
    {
      v216 = v215 + 2;
      do
      {
        v217 = __ldaxr(v216);
        v218 = v217 - 1;
      }
      while (__stlxr(v218, v216));
      if (!v218)
      {
        atomic_store(1u, v215 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v215 + 8))(v215);
      }
    }
    v219 = *v178;
    if (*v178)
      v220 = *(_DWORD *)(v219 - 12) + 1;
    else
      v220 = 1;
    *(_DWORD *)(v219 - 12) = v220;
    v221 = *v178;
    if (*v178)
      v222 = *(_DWORD *)(v221 - 12);
    else
      v222 = 0;
    v223 = (*(_DWORD *)(v221 - 16) + v222);
    v224 = *(unsigned int *)(v221 - 4);
    if (v224 > 0x400)
    {
      if (v224 <= 2 * v223)
      {
LABEL_347:
        v225 = (_DWORD)v224 << (6 * *(_DWORD *)(v221 - 12) >= (2 * v224));
        goto LABEL_354;
      }
    }
    else if (3 * v224 <= 4 * v223)
    {
      if ((_DWORD)v224)
        goto LABEL_347;
      v225 = 8;
LABEL_354:
      WTF::HashTable<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v178, v225);
    }
    v422 = 1;
    goto LABEL_356;
  }
  WTF::JSONImpl::Value::operator delete();
  if (!v239)
    goto LABEL_298;
LABEL_185:
  v14 = v432;
LABEL_34:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v35 = v443;
  v36 = *((_QWORD *)v14 + 2);
  if (!v36)
  {
LABEL_47:
    if (!v35)
      goto LABEL_50;
LABEL_48:
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
    goto LABEL_50;
  }
  v37 = *(_DWORD *)(v36 - 8);
  v38 = *((_DWORD *)v443 + 4);
  if (v38 < 0x100)
    v39 = WTF::StringImpl::hashSlowCase(v443);
  else
    v39 = v38 >> 8;
  v40 = 0;
  while (2)
  {
    v41 = v39 & v37;
    v42 = *(WTF **)(v36 + 16 * v41);
    if (v42 == (WTF *)-1)
    {
LABEL_42:
      v39 = ++v40 + v41;
      continue;
    }
    break;
  }
  if (v42)
  {
    if ((WTF::equal(v42, v35, v34) & 1) != 0)
    {
      v36 += 16 * v41;
      goto LABEL_47;
    }
    goto LABEL_42;
  }
  v43 = *((_QWORD *)v14 + 2);
  if (!v43)
  {
    v36 = 0;
    if (!v35)
      goto LABEL_50;
    goto LABEL_48;
  }
  v36 = v43 + 16 * *(unsigned int *)(v43 - 4);
  if (v35)
    goto LABEL_48;
LABEL_50:
  v44 = *((_QWORD *)v14 + 2);
  if (v44)
    v44 += 16 * *(unsigned int *)(v44 - 4);
  if (v44 != v36)
  {
    v45 = *(_DWORD **)(v36 + 8);
    v46 = v45[1];
    if (v46 >= 6)
    {
      if (v46 != 6)
        goto LABEL_629;
      v82 = (*v45)++;
      if (v82)
        *v45 = v82;
      else
        WTF::JSONImpl::Value::operator delete();
      v83 = v7[3];
      do
        v84 = __ldaxr((unsigned int *)v83);
      while (__stlxr(v84 + 1, (unsigned int *)v83));
      v85 = *(_QWORD *)(v83 + 8);
      do
      {
        v86 = __ldaxr((unsigned int *)v83);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, (unsigned int *)v83));
      if (!v87)
      {
        atomic_store(1u, (unsigned int *)v83);
        WTF::fastFree((WTF *)v83, v33);
      }
      v88 = *(_QWORD *)(v85 + 24);
      if (!v88)
        goto LABEL_279;
      v421 = *(_QWORD *)(v85 + 24);
      v89 = (unsigned __int8 *)(v88 + 24);
      if (__ldaxr((unsigned __int8 *)(v88 + 24)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v89))
      {
        goto LABEL_172;
      }
      MEMORY[0x19AEA534C](v89);
LABEL_172:
      v419 = v89;
      v97 = v7[5];
      if (v97)
      {
        v98 = *(unsigned int *)(v97 - 4);
        v99 = v97 + 24 * v98;
        if (*(_DWORD *)(v97 - 12))
        {
          v100 = v7[5];
          if ((_DWORD)v98)
          {
            v101 = 24 * v98;
            v100 = v7[5];
            while ((*(_DWORD *)(v100 + 12) + 1) <= 1)
            {
              v100 += 24;
              v101 -= 24;
              if (!v101)
              {
                v100 = v99;
                break;
              }
            }
          }
LABEL_188:
          if (v97)
            v102 = v97 + 24 * *(unsigned int *)(v97 - 4);
          else
            v102 = 0;
          if (v102 == v100)
            goto LABEL_272;
          v427 = (uint64_t *)(v421 + 32);
          v103 = *(_QWORD *)(v421 + 32);
          if (!v103)
          {
            do
            {
              v162 = v100 + 24;
              v100 = v99;
              if (v162 != v99)
              {
                v100 = v162;
                while ((*(_DWORD *)(v100 + 12) + 1) <= 1)
                {
                  v100 += 24;
                  if (v100 == v99)
                  {
                    v100 = v99;
                    break;
                  }
                }
              }
            }
            while (v100 != v102);
LABEL_272:
            v163 = (unsigned __int8 *)(v421 + 25);
            v164 = atomic_load((unsigned __int8 *)(v421 + 25));
            if ((v164 & 1) != 0)
            {
              atomic_store(0, v163);
              WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v163, v33);
            }
            v165 = __ldxr(v419);
            if (v165 == 1)
            {
              if (!__stlxr(0, v419))
                goto LABEL_279;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v419);
LABEL_279:
            v166 = v7[5];
            if (v166)
            {
              v7[5] = 0;
              v167 = *(unsigned int *)(v166 - 4);
              if ((_DWORD)v167)
              {
                for (k = 0; k != v167; ++k)
                {
                  v169 = v166 + 24 * k;
                  if (*(_DWORD *)(v169 + 12) != -1)
                  {
                    v170 = v166 + 24 * k;
                    v171 = *(unsigned int **)(v170 + 16);
                    *(_QWORD *)(v170 + 16) = 0;
                    if (v171)
                    {
                      v172 = v171 + 2;
                      do
                      {
                        v173 = __ldaxr(v172);
                        v174 = v173 - 1;
                      }
                      while (__stlxr(v174, v172));
                      if (!v174)
                      {
                        atomic_store(1u, v171 + 2);
                        (*(void (**)(unsigned int *))(*(_QWORD *)v171 + 8))(v171);
                      }
                    }
                    v175 = *(WTF **)v169;
                    if (*(_QWORD *)v169)
                    {
                      *(_QWORD *)v169 = 0;
                      *(_DWORD *)(v169 + 8) = 0;
                      WTF::fastFree(v175, v33);
                    }
                  }
                }
              }
              WTF::fastFree((WTF *)(v166 - 16), v33);
            }
            LOBYTE(v443) = 0;
            v445 = 0;
            WebCore::CDMInstanceSessionClearKey::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator()(v433, 1, (uint64_t)&v443, 1);
            if (!v445)
              goto LABEL_61;
            v23 = v443;
            if (HIDWORD(v444))
            {
              v176 = 16 * HIDWORD(v444);
              v177 = (uint64_t *)v443;
              do
              {
                v177 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v177, v22)+ 2;
                v176 -= 16;
              }
              while (v176);
            }
            goto LABEL_58;
          }
          v424 = v102;
LABEL_194:
          v104 = *(_QWORD *)(v100 + 16);
          v105 = *(unsigned __int8 **)(v104 + 16);
          v106 = *(unsigned int *)(v104 + 28);
          v107 = -1640531527;
          if ((_DWORD)v106)
          {
            v108 = v106;
            v109 = v105;
            do
            {
              v110 = *v109++;
              v107 = ((v107 + v110) ^ ((v107 + v110) << 16)) + (((v107 + v110) ^ ((v107 + v110) << 16)) >> 11);
              --v108;
            }
            while (v108);
          }
          v111 = 0;
          v112 = *(_DWORD *)(v103 - 8);
          v113 = (v107 ^ (8 * v107)) + ((v107 ^ (8 * v107)) >> 5);
          v114 = (v113 ^ (4 * v113)) + ((v113 ^ (4 * v113)) >> 15);
          v115 = v114 ^ (v114 << 10);
          if (!v115)
            v115 = 0x800000;
          while (1)
          {
            v116 = v115 & v112;
            v117 = v103 + 24 * (v115 & v112);
            v118 = *(_DWORD *)(v117 + 12);
            if (v118 == (_DWORD)v106 && !memcmp(*(const void **)v117, v105, v106))
              break;
            if (!v118)
            {
              v119 = *(_DWORD *)(v103 - 4);
              v117 = v103 + 24 * v119;
              goto LABEL_205;
            }
            v115 = ++v111 + v116;
          }
          v119 = *(_DWORD *)(v103 - 4);
LABEL_205:
          v7 = v431;
          v120 = v424;
          if (v117 == v103 + 24 * v119)
            goto LABEL_250;
          v121 = *(_QWORD *)(v117 + 16);
          if (!v121)
            goto LABEL_629;
          v122 = (uint64_t *)(v121 + 56);
          v123 = *(_QWORD *)(v121 + 56);
          if (v123)
          {
            v124 = *((_DWORD *)v431 + 12);
            v125 = *(_DWORD *)(v123 - 8);
            v126 = 9 * ((v124 + ~(v124 << 15)) ^ ((v124 + ~(v124 << 15)) >> 10));
            v127 = v125 & (((v126 ^ (v126 >> 6)) + ~((v126 ^ (v126 >> 6)) << 11)) ^ (((v126 ^ (v126 >> 6))
                                                                                    + ~((v126 ^ (v126 >> 6)) << 11)) >> 16));
            v128 = *(_DWORD *)(v123 + 4 * v127);
            if (v128 != v124)
            {
              v129 = 1;
              while (v128)
              {
                v127 = ((_DWORD)v127 + v129) & v125;
                v128 = *(_DWORD *)(v123 + 4 * v127);
                ++v129;
                if (v128 == v124)
                  goto LABEL_214;
              }
              v127 = *(unsigned int *)(v123 - 4);
            }
LABEL_214:
            if (v127 != *(_DWORD *)(v123 - 4))
            {
              v130 = -1;
              *(_DWORD *)(v123 + 4 * v127) = -1;
              ++*(_DWORD *)(*v122 - 16);
              v131 = *v122;
              if (*v122)
                v130 = *(_DWORD *)(v131 - 12) - 1;
              *(_DWORD *)(v131 - 12) = v130;
              v123 = *v122;
              if (!*v122)
                goto LABEL_220;
              v160 = *(_DWORD *)(v123 - 4);
              if (6 * *(_DWORD *)(v123 - 12) < v160 && v160 >= 9)
              {
                WTF::HashTable<unsigned int,unsigned int,WTF::IdentityExtractor,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned int>>::rehash(v122, v160 >> 1, 0);
                v121 = *(_QWORD *)(v117 + 16);
                v123 = *(_QWORD *)(v121 + 56);
                if (!v123)
                {
                  v7 = v431;
                  v120 = v424;
                  goto LABEL_220;
                }
                v7 = v431;
                v120 = v424;
              }
            }
            if (*(_DWORD *)(v123 - 12))
              goto LABEL_250;
          }
LABEL_220:
          v132 = *v427;
          if (!*v427)
            goto LABEL_250;
          v133 = *(unsigned __int8 **)(v121 + 16);
          v134 = *(unsigned int *)(v121 + 28);
          v135 = -1640531527;
          if ((_DWORD)v134)
          {
            v136 = v134;
            v137 = v133;
            do
            {
              v138 = *v137++;
              v135 = ((v135 + v138) ^ ((v135 + v138) << 16)) + (((v135 + v138) ^ ((v135 + v138) << 16)) >> 11);
              --v136;
            }
            while (v136);
          }
          v139 = 0;
          v140 = *(_DWORD *)(v132 - 8);
          v141 = (v135 ^ (8 * v135)) + ((v135 ^ (8 * v135)) >> 5);
          v142 = (v141 ^ (4 * v141)) + ((v141 ^ (4 * v141)) >> 15);
          v143 = v142 ^ (v142 << 10);
          if (!v143)
            v143 = 0x800000;
          while (1)
          {
            v144 = v143 & v140;
            v145 = v132 + 24 * (v143 & v140);
            v146 = *(_DWORD *)(v145 + 12);
            if (v146 == (_DWORD)v134 && !memcmp(*(const void **)v145, v133, v134))
              break;
            if (!v146)
            {
              v147 = *(_DWORD *)(v132 - 4);
              v145 = v132 + 24 * v147;
              goto LABEL_232;
            }
            v143 = ++v139 + v144;
          }
          v147 = *(_DWORD *)(v132 - 4);
LABEL_232:
          v7 = v431;
          v120 = v424;
          if (v132 + 24 * v147 != v145)
          {
            v148 = *(WTF **)v145;
            if (*(_QWORD *)v145)
            {
              *(_QWORD *)v145 = 0;
              *(_DWORD *)(v145 + 8) = 0;
              WTF::fastFree(v148, v33);
            }
            *(_QWORD *)v145 = 0;
            *(_QWORD *)(v145 + 8) = 0;
            *(_DWORD *)(v145 + 12) = -1;
            v149 = *(unsigned int **)(v145 + 16);
            *(_QWORD *)(v145 + 16) = 0;
            if (v149)
            {
              v150 = v149 + 2;
              do
              {
                v151 = __ldaxr(v150);
                v152 = v151 - 1;
              }
              while (__stlxr(v152, v150));
              if (!v152)
              {
                atomic_store(1u, v149 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v149 + 8))(v149);
              }
            }
            ++*(_DWORD *)(*v427 - 16);
            v153 = *v427;
            if (*v427)
              v154 = *(_DWORD *)(v153 - 12) - 1;
            else
              v154 = -1;
            *(_DWORD *)(v153 - 12) = v154;
            v155 = *v427;
            if (*v427)
            {
              v156 = 6 * *(_DWORD *)(v155 - 12);
              v157 = *(_DWORD *)(v155 - 4);
              if (v156 < v157 && v157 >= 9)
                WTF::HashTable<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(v427, v157 >> 1);
            }
          }
          while (1)
          {
LABEL_250:
            v159 = v100 + 24;
            v100 = v99;
            if (v159 != v99)
            {
              v100 = v159;
              while ((*(_DWORD *)(v100 + 12) + 1) <= 1)
              {
                v100 += 24;
                if (v100 == v99)
                {
                  v100 = v99;
                  break;
                }
              }
            }
            if (v100 == v120)
              goto LABEL_272;
            v103 = *v427;
            if (*v427)
              goto LABEL_194;
          }
        }
        v100 = v97 + 24 * v98;
      }
      else
      {
        v100 = 0;
        LODWORD(v98) = 0;
      }
      v99 = v97 + 24 * v98;
      goto LABEL_188;
    }
  }
  LOBYTE(v443) = 0;
  v445 = 0;
  WebCore::CDMInstanceSessionClearKey::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator()(v433, 0, (uint64_t)&v443, 0);
  if (v445)
  {
    v23 = v443;
    if (HIDWORD(v444))
    {
      v47 = 16 * HIDWORD(v444);
      v48 = (uint64_t *)v443;
      do
      {
        v48 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v48, v22)+ 2;
        v47 -= 16;
      }
      while (v47);
    }
    goto LABEL_58;
  }
LABEL_61:
  if (v432)
  {
    if (*v432 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v432;
  }
  result = (unsigned int *)v433[0];
  v433[0] = 0;
  if (result)
  {
    do
    {
      v51 = __ldaxr(result);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, result));
    if (!v52)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v22);
    }
  }
  return result;
}

uint64_t *WebCore::CDMInstanceSessionClearKey::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator()(_QWORD *a1, char a2, uint64_t a3, int a4)
{
  unsigned int v4;
  int v5;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  WTF *v20;
  uint64_t v21;
  void *v22;
  uint64_t *result;
  uint64_t v24;
  uint64_t *v25;

  if (*a1)
    v10 = *(_QWORD *)(*a1 + 8);
  else
    v10 = 0;
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
    goto LABEL_26;
  v11 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = v10;
  v13 = *(unsigned int **)(v10 + 16);
  *(_QWORD *)(v10 + 16) = v11;
  if (!v13)
    goto LABEL_26;
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (!v15)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
LABEL_26:
    do
      v16 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v16 + 1, (unsigned int *)v11));
  }
  v17 = (uint64_t *)a1[1];
  v18 = *v17;
  *v17 = 0;
  v19 = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a3 + 16))
  {
    v20 = *(WTF **)a3;
    v5 = *(_DWORD *)(a3 + 8);
    v4 = *(_DWORD *)(a3 + 12);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    v20 = 0;
  }
  v21 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v21 = &off_1E340A7D8;
  *(_QWORD *)(v21 + 8) = v11;
  *(_QWORD *)(v21 + 16) = v18;
  *(_BYTE *)(v21 + 24) = a2;
  *(_BYTE *)(v21 + 32) = 0;
  *(_BYTE *)(v21 + 48) = 0;
  if (v19)
  {
    *(_QWORD *)(v21 + 32) = v20;
    *(_DWORD *)(v21 + 40) = v5;
    *(_DWORD *)(v21 + 44) = v4;
    *(_BYTE *)(v21 + 48) = 1;
    v4 = 0;
    v20 = 0;
  }
  *(_DWORD *)(v21 + 56) = a4;
  v25 = (uint64_t *)v21;
  WTF::callOnMainThread();
  result = v25;
  if (v25)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v25 + 8))(v25);
  if (v19)
  {
    if (v4)
    {
      v24 = 16 * v4;
      result = (uint64_t *)v20;
      do
      {
        result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(result, v22)+ 2;
        v24 -= 16;
      }
      while (v24);
    }
    if (v20)
      return (uint64_t *)WTF::fastFree(v20, v22);
  }
  return result;
}

uint64_t *WebCore::KeyStoreBase<WebCore::KeyHandle>::convertToJSKeyStatusVector(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v2 = result;
  *result = 0;
  result[1] = 0;
  if (!a2)
  {
    v5 = 0;
    LODWORD(v3) = 0;
LABEL_10:
    v4 = a2 + 24 * v3;
    goto LABEL_11;
  }
  v3 = *(unsigned int *)(a2 - 4);
  v4 = a2 + 24 * v3;
  if (!*(_DWORD *)(a2 - 12))
  {
    v5 = a2 + 24 * v3;
    goto LABEL_10;
  }
  v5 = a2;
  if ((_DWORD)v3)
  {
    v6 = 24 * v3;
    v5 = a2;
    while ((*(_DWORD *)(v5 + 12) + 1) <= 1)
    {
      v5 += 24;
      v6 -= 24;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_11:
  if (a2)
    v7 = a2 + 24 * *(unsigned int *)(a2 - 4);
  else
    v7 = 0;
  while (v5 != v7)
  {
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(WTF **)(v8 + 16);
    v10 = (WTF *)*(unsigned int *)(v8 + 28);
    v11 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = v11 + 24;
    *(_QWORD *)(v11 + 16) = 1;
    *(_BYTE *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v11, v9, v10);
    v26 = v11;
    v12 = WTF::fastMalloc((WTF *)0x38);
    v25 = WebCore::SharedBuffer::SharedBuffer(v12, &v26);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v26, v13);
    v15 = *(_BYTE *)(*(_QWORD *)(v5 + 16) + 12);
    v16 = v25;
    v25 = 0;
    v26 = v16;
    v27 = v15;
    v17 = *((unsigned int *)v2 + 3);
    if ((_DWORD)v17 == *((_DWORD *)v2 + 2))
    {
      v18 = WTF::Vector<WebCore::FrameRateRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v2, v17 + 1, (unint64_t)&v26);
      v17 = *((unsigned int *)v2 + 3);
      v19 = *v2 + 16 * v17;
      v20 = *(_QWORD *)v18;
      *(_QWORD *)v18 = 0;
      *(_QWORD *)v19 = v20;
      *(_BYTE *)(v19 + 8) = v18[8];
    }
    else
    {
      v21 = (char *)*v2;
      v26 = 0;
      v22 = &v21[16 * v17];
      *(_QWORD *)v22 = v16;
      v22[8] = v15;
    }
    *((_DWORD *)v2 + 3) = v17 + 1;
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v26, v14);
    result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v25, v23);
    v24 = v5 + 24;
    v5 = v4;
    if (v24 != v4)
    {
      v5 = v24;
      while ((*(_DWORD *)(v5 + 12) + 1) <= 1)
      {
        v5 += 24;
        if (v5 == v4)
        {
          v5 = v4;
          break;
        }
      }
    }
  }
  return result;
}

WTF *WebCore::CDMInstanceSessionClearKey::loadSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  WTF *result;
  _QWORD *v21;
  WTF *v22;
  uint64_t v23;

  WebCore::KeyStoreBase<WebCore::KeyHandle>::convertToJSKeyStatusVector((uint64_t *)&v22, *(_QWORD *)(a1 + 40));
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    goto LABEL_17;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a1;
  v9 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (!v9)
    goto LABEL_17;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v8);
  }
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
LABEL_17:
    do
      v12 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v12 + 1, (unsigned int *)v7));
  }
  v13 = *a5;
  *a5 = 0;
  v14 = v22;
  v15 = v23;
  v22 = 0;
  v23 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v16 = &off_1E340A898;
  v16[1] = v7;
  v16[2] = v13;
  v16[3] = v14;
  v16[4] = v15;
  v21 = v16;
  WTF::callOnMainThread();
  if (v21)
    (*(void (**)(_QWORD *))(*v21 + 8))(v21);
  if (HIDWORD(v23))
  {
    v18 = (uint64_t *)v22;
    v19 = 16 * HIDWORD(v23);
    do
    {
      v18 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v18, v17)+ 2;
      v19 -= 16;
    }
    while (v19);
  }
  result = v22;
  if (v22)
  {
    v22 = 0;
    LODWORD(v23) = 0;
    return (WTF *)WTF::fastFree(result, v17);
  }
  return result;
}

uint64_t WebCore::CDMInstanceSessionClearKey::closeSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  _QWORD *v14;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    goto LABEL_12;
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = a1;
  v7 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (!v7)
    goto LABEL_12;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v6);
  }
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
LABEL_12:
    do
      v10 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v10 + 1, (unsigned int *)v4));
  }
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E340A8C0;
  v12[1] = v4;
  v12[2] = v11;
  v14 = v12;
  WTF::callOnMainThread();
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

WTF *WebCore::CDMInstanceSessionClearKey::removeSessionData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  _BYTE *v14;
  WTF::JSONImpl::Array *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  const WTF::String *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::JSONImpl::Value *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  WTF::StringImpl *v47;
  void *v48;
  void *v49;
  WTF *v50;
  WTF::StringImpl *v51;
  WTF::JSONImpl::Value *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  uint64_t v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  WTF *v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  WTF *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  WTF::JSONImpl::Value *v76;
  void *v77;
  void *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  WTF *result;
  unsigned int v84;
  unsigned int v85;
  _DWORD **v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  WTF *v96;
  WTF *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF *v101;
  uint64_t v102;
  uint64_t v103[2];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  WTF::JSONImpl::Value *v108;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    goto LABEL_135;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a1;
  v8 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (!v8)
    goto LABEL_135;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
LABEL_135:
    do
      v11 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v11 + 1, (unsigned int *)v6));
  }
  v12 = WebCore::KeyStoreBase<WebCore::KeyHandle>::convertToJSKeyStatusVector((uint64_t *)&v101, *(_QWORD *)(a1 + 40));
  if (HIDWORD(v102))
  {
    v13 = 16 * HIDWORD(v102);
    v14 = (char *)v101 + 8;
    do
    {
      *v14 = 2;
      v14 += 16;
      v13 -= 16;
    }
    while (v13);
  }
  v15 = (WTF::JSONImpl::Array *)WTF::JSONImpl::Object::create((WTF::JSONImpl::Object *)v12);
  WTF::JSONImpl::Array::create(v15);
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    v18 = v16 + 24 * v17;
    if (*(_DWORD *)(v16 - 12))
    {
      v19 = *(_QWORD *)(a1 + 40);
      if ((_DWORD)v17)
      {
        v20 = 24 * v17;
        v19 = *(_QWORD *)(a1 + 40);
        while ((*(_DWORD *)(v19 + 12) + 1) <= 1)
        {
          v19 += 24;
          v20 -= 24;
          if (!v20)
          {
            v19 = v18;
            goto LABEL_18;
          }
        }
      }
      goto LABEL_18;
    }
    v19 = v16 + 24 * v17;
  }
  else
  {
    v19 = 0;
    LODWORD(v17) = 0;
  }
  v18 = v16 + 24 * v17;
  if (v16)
  {
LABEL_18:
    v21 = v16 + 24 * *(unsigned int *)(v16 - 4);
    goto LABEL_23;
  }
  v21 = 0;
LABEL_23:
  while (v19 != v21)
  {
    v22 = v100;
    WTF::base64EncodeToString();
    WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v99, v23);
    v25 = *((unsigned int *)v22 + 7);
    if ((_DWORD)v25 == *((_DWORD *)v22 + 6))
    {
      v26 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v22 + 2, v25 + 1, (unint64_t)v103);
      v25 = *((unsigned int *)v22 + 7);
      v27 = *((_QWORD *)v22 + 2);
      v28 = *(_QWORD *)v26;
      *(_QWORD *)v26 = 0;
    }
    else
    {
      v27 = *((_QWORD *)v22 + 2);
      v28 = v103[0];
      v103[0] = 0;
    }
    *(_QWORD *)(v27 + 8 * v25) = v28;
    *((_DWORD *)v22 + 7) = v25 + 1;
    v29 = (_DWORD *)v103[0];
    v103[0] = 0;
    if (v29)
    {
      if (*v29 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v29;
    }
    v30 = v99;
    v99 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v24);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = v19 + 24;
    v19 = v18;
    if (v31 != v18)
    {
      v19 = v31;
      while ((*(_DWORD *)(v19 + 12) + 1) <= 1)
      {
        v19 += 24;
        if (v19 == v18)
        {
          v19 = v18;
          break;
        }
      }
    }
  }
  v32 = v108;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v33 = v100;
  v99 = (WTF::StringImpl *)v103[0];
  v100 = 0;
  v98 = v33;
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)v32 + 2, &v99, (const WTF::StringImpl *)&v98, (uint64_t)v103);
  if ((_BYTE)v104)
  {
    v35 = (uint64_t *)((char *)v32 + 24);
    v36 = *((unsigned int *)v32 + 9);
    if ((_DWORD)v36 == *((_DWORD *)v32 + 8))
    {
      v86 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v36 + 1, (unint64_t)&v99);
      v36 = *((unsigned int *)v32 + 9);
      v87 = *((_QWORD *)v32 + 3);
      v88 = *v86;
      if (*v86)
        *v88 += 2;
      *(_QWORD *)(v87 + 8 * v36) = v88;
    }
    else
    {
      v37 = *v35;
      v38 = v99;
      if (v99)
        *(_DWORD *)v99 += 2;
      *(_QWORD *)(v37 + 8 * v36) = v38;
    }
    *((_DWORD *)v32 + 9) = v36 + 1;
  }
  v39 = v98;
  v98 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v39;
  }
  v40 = v99;
  v99 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v34);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = v100;
  v100 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v41;
  }
  WTF::JSONImpl::Value::toJSONString(v108);
  WTF::String::utf8();
  if (v98)
  {
    v42 = (WTF *)((char *)v98 + 16);
    v43 = (WTF *)*((_QWORD *)v98 + 1);
  }
  else
  {
    v43 = 0;
    v42 = 0;
  }
  v44 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v44 = 1;
  *(_QWORD *)(v44 + 8) = v44 + 24;
  *(_QWORD *)(v44 + 16) = 1;
  *(_BYTE *)(v44 + 40) = 0;
  *(_QWORD *)(v44 + 48) = 0;
  WebCore::FragmentedSharedBuffer::append(v44, v42, v43);
  v103[0] = v44;
  v45 = WTF::fastMalloc((WTF *)0x38);
  v99 = (WTF::StringImpl *)WebCore::SharedBuffer::SharedBuffer(v45, v103);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v103, v46);
  v47 = v99;
  v99 = 0;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v99, v48);
  v50 = v98;
  v98 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 1)
      WTF::fastFree(v50, v49);
    else
      --*(_DWORD *)v50;
  }
  v51 = v100;
  v100 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v49);
    else
      *(_DWORD *)v51 -= 2;
  }
  v52 = v108;
  v108 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v52;
  }
  v53 = *(_QWORD *)(a1 + 40);
  if (v53)
  {
    *(_QWORD *)(a1 + 40) = 0;
    v54 = *(unsigned int *)(v53 - 4);
    if ((_DWORD)v54)
    {
      for (i = 0; i != v54; ++i)
      {
        v56 = v53 + 24 * i;
        if (*(_DWORD *)(v56 + 12) != -1)
        {
          v57 = v53 + 24 * i;
          v58 = *(unsigned int **)(v57 + 16);
          *(_QWORD *)(v57 + 16) = 0;
          if (v58)
          {
            v59 = v58 + 2;
            do
            {
              v60 = __ldaxr(v59);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v59));
            if (!v61)
            {
              atomic_store(1u, v58 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
            }
          }
          v62 = *(WTF **)v56;
          if (*(_QWORD *)v56)
          {
            *(_QWORD *)v56 = 0;
            *(_DWORD *)(v56 + 8) = 0;
            WTF::fastFree(v62, v49);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v53 - 16), v49);
  }
  do
    v63 = __ldaxr((unsigned int *)v47);
  while (__stlxr(v63 + 1, (unsigned int *)v47));
  v100 = 0;
  if (v6)
    v64 = *(_QWORD *)(v6 + 8);
  else
    v64 = 0;
  v65 = *(_QWORD *)(v64 + 16);
  if (v65)
    goto LABEL_136;
  v65 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v65 = 1;
  *(_QWORD *)(v65 + 8) = v64;
  v67 = *(unsigned int **)(v64 + 16);
  *(_QWORD *)(v64 + 16) = v65;
  if (!v67)
    goto LABEL_136;
  do
  {
    v68 = __ldaxr(v67);
    v69 = v68 - 1;
  }
  while (__stlxr(v69, v67));
  if (!v69)
  {
    atomic_store(1u, v67);
    WTF::fastFree((WTF *)v67, v66);
  }
  v65 = *(_QWORD *)(v64 + 16);
  if (v65)
  {
LABEL_136:
    do
      v70 = __ldaxr((unsigned int *)v65);
    while (__stlxr(v70 + 1, (unsigned int *)v65));
  }
  v71 = *a4;
  *a4 = 0;
  v72 = v101;
  v101 = 0;
  v107 = 1;
  v73 = v102;
  v102 = 0;
  v74 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v74 = off_1E340A800;
  *(_QWORD *)(v74 + 8) = v65;
  v103[0] = 0;
  v103[1] = 0;
  *(_QWORD *)(v74 + 16) = v71;
  *(_QWORD *)(v74 + 24) = v72;
  v104 = 0;
  v105 = 0;
  *(_QWORD *)(v74 + 32) = v73;
  v106 = 0;
  *(_QWORD *)(v74 + 40) = v47;
  *(_DWORD *)(v74 + 48) = 1;
  v108 = (WTF::JSONImpl::Value *)v74;
  WTF::callOnMainThread();
  v76 = v108;
  v108 = 0;
  if (v76)
    (*(void (**)(WTF::JSONImpl::Value *))(*(_QWORD *)v76 + 8))(v76);
  WebCore::CDMInstanceSessionClearKey::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::{lambda(void)#1}::~((uint64_t)v103, v75);
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v100, v77);
  if (v47)
  {
    do
    {
      v79 = __ldaxr((unsigned int *)v47);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, (unsigned int *)v47));
    if (!v80)
    {
      atomic_store(1u, (unsigned int *)v47);
      v89 = *((unsigned int *)v47 + 5);
      if ((_DWORD)v89)
      {
        v90 = *((_QWORD *)v47 + 1);
        v91 = v90 + 16 * v89;
        do
        {
          v92 = *(unsigned int **)(v90 + 8);
          *(_QWORD *)(v90 + 8) = 0;
          if (v92)
          {
            do
            {
              v93 = __ldaxr(v92);
              v94 = v93 - 1;
            }
            while (__stlxr(v94, v92));
            if (!v94)
            {
              atomic_store(1u, v92);
              v95 = v92[6];
              if ((_DWORD)v95 != -1)
                ((void (*)(uint64_t *, unsigned int *))off_1E340A840[v95])(v103, v92 + 2);
              v92[6] = -1;
              WTF::fastFree((WTF *)v92, v78);
            }
          }
          v90 += 16;
        }
        while (v90 != v91);
      }
      v96 = (WTF *)*((_QWORD *)v47 + 1);
      if ((WTF::StringImpl *)((char *)v47 + 24) != v96 && v96 != 0)
      {
        *((_QWORD *)v47 + 1) = 0;
        *((_DWORD *)v47 + 4) = 0;
        WTF::fastFree(v96, v78);
      }
      WTF::fastFree(v47, v78);
    }
  }
  if (HIDWORD(v102))
  {
    v81 = (uint64_t *)v101;
    v82 = 16 * HIDWORD(v102);
    do
    {
      v81 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v81, v78)+ 2;
      v82 -= 16;
    }
    while (v82);
  }
  result = v101;
  if (v101)
  {
    v101 = 0;
    LODWORD(v102) = 0;
    result = (WTF *)WTF::fastFree(result, v78);
  }
  if (v6)
  {
    do
    {
      v84 = __ldaxr((unsigned int *)v6);
      v85 = v84 - 1;
    }
    while (__stlxr(v85, (unsigned int *)v6));
    if (!v85)
    {
      atomic_store(1u, (unsigned int *)v6);
      return (WTF *)WTF::fastFree((WTF *)v6, v78);
    }
  }
  return result;
}

void WebCore::CDMInstanceSessionClearKey::~CDMInstanceSessionClearKey(WebCore::CDMInstanceSessionClearKey *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::CDMInstanceSessionClearKey::~CDMInstanceSessionClearKey(this, a2);
  WTF::fastFree(v2, v3);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  WTF *v12;
  WTF::StringImpl *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = v3 + 24 * i;
        if (*(_DWORD *)(v6 + 12) != -1)
        {
          v7 = v3 + 24 * i;
          v8 = *(unsigned int **)(v7 + 16);
          *(_QWORD *)(v7 + 16) = 0;
          if (v8)
          {
            v9 = v8 + 2;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
            {
              atomic_store(1u, v8 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
            }
          }
          v12 = *(WTF **)v6;
          if (*(_QWORD *)v6)
          {
            *(_QWORD *)v6 = 0;
            *(_DWORD *)(v6 + 8) = 0;
            WTF::fastFree(v12, a2);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)this = off_1E340A000;
  v14 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v14)
  {
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      WTF::fastFree((WTF *)v14, a2);
    }
  }
  v17 = *((_QWORD *)this + 2);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::CDMInstanceClearKey::implementationType(WebCore::CDMInstanceClearKey *this)
{
  return 1;
}

BOOL WebCore::CDMInstanceProxy::isWaitingForKey(WebCore::CDMInstanceProxy *this)
{
  signed int v1;

  v1 = atomic_load((unsigned int *)this + 12);
  return v1 > 0;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::$_0 &&>>()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  const void *v3;

  if (byte_1EE33811D == 1)
  {
    if (!qword_1EE338130)
      return;
  }
  else
  {
    qword_1EE338130 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore", 2);
    byte_1EE33811D = 1;
    if (!qword_1EE338130)
      return;
  }
  v0 = _MergedGlobals_47();
  if (v0)
  {
    v1 = (const void *)v0;
    v2 = off_1ECE7D218();
    v3 = (const void *)WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::scanner;
    WebCore::TelephoneNumberDetector::phoneNumbersScanner(void)::scanner = v2;
    if (v3)
      CFRelease(v3);
    CFRelease(v1);
  }
}

uint64_t initDDDFAScannerFirstResultInUnicharArray(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t (*v11)();

  if (byte_1EE33811D == 1)
  {
    v10 = (void *)qword_1EE338130;
  }
  else
  {
    v10 = dlopen("/System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore", 2);
    qword_1EE338130 = (uint64_t)v10;
    byte_1EE33811D = 1;
  }
  v11 = (uint64_t (*)())dlsym(v10, "DDDFAScannerFirstResultInUnicharArray");
  softLinkDDDFAScannerFirstResultInUnicharArray[0] = v11;
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x19613272CLL);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v11)(a1, a2, a3, a4, a5);
}

uint64_t ___ZN7WebCoreL37initVideoToolboxVTSessionCopyPropertyEPKvPK10__CFStringPK13__CFAllocatorPv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTSessionCopyProperty");
  WebCore::softLinkVideoToolboxVTSessionCopyProperty = (uint64_t (*)(WebCore *__hidden, const void *, const __CFString *, const __CFAllocator *, void *))result;
  if (!result)
  {
    result = 38;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL38initVideoToolboxVTSessionSetPropertiesEPKvPK14__CFDictionary_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTSessionSetProperties");
  WebCore::softLinkVideoToolboxVTSessionSetProperties = (uint64_t (*)(WebCore *__hidden, const void *, const __CFDictionary *))result;
  if (!result)
  {
    result = 39;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL44initVideoToolboxVTDecompressionSessionCreateEPK13__CFAllocatorPK25opaqueCMFormatDescriptionPK14__CFDictionaryS8_PK35VTDecompressionOutputCallbackRecordPP28OpaqueVTDecompressionSession_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTDecompressionSessionCreate");
  WebCore::softLinkVideoToolboxVTDecompressionSessionCreate = (uint64_t (*)(WebCore *__hidden, const __CFAllocator *, const opaqueCMFormatDescription *, const __CFDictionary *, const __CFDictionary *, const VTDecompressionOutputCallbackRecord *, OpaqueVTDecompressionSession **))result;
  if (!result)
  {
    result = 40;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL48initVideoToolboxVTDecompressionSessionInvalidateEP28OpaqueVTDecompressionSession_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTDecompressionSessionInvalidate");
  WebCore::softLinkVideoToolboxVTDecompressionSessionInvalidate = (uint64_t (*)(WebCore *__hidden, OpaqueVTDecompressionSession *))result;
  if (!result)
  {
    result = 41;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL64initVideoToolboxVTDecompressionSessionCanAcceptFormatDescriptionEP28OpaqueVTDecompressionSessionPK25opaqueCMFormatDescription_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTDecompressionSessionCanAcceptFormatDescription");
  WebCore::softLinkVideoToolboxVTDecompressionSessionCanAcceptFormatDescription = (uint64_t (*)(WebCore *__hidden, OpaqueVTDecompressionSession *, const opaqueCMFormatDescription *))result;
  if (!result)
  {
    result = 42;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL63initVideoToolboxVTDecompressionSessionWaitForAsynchronousFramesEP28OpaqueVTDecompressionSession_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTDecompressionSessionWaitForAsynchronousFrames");
  WebCore::softLinkVideoToolboxVTDecompressionSessionWaitForAsynchronousFrames = (uint64_t (*)(WebCore *__hidden, OpaqueVTDecompressionSession *))result;
  if (!result)
  {
    result = 43;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL66initVideoToolboxVTDecompressionSessionDecodeFrameWithOutputHandlerEP28OpaqueVTDecompressionSessionP20opaqueCMSampleBufferjPjU13block_pointerFvijP10__CVBuffer6CMTimeS7_E_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTDecompressionSessionDecodeFrameWithOutputHandler");
  WebCore::softLinkVideoToolboxVTDecompressionSessionDecodeFrameWithOutputHandler = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL49initVideoToolboxVTDecompressionSessionDecodeFrameEP28OpaqueVTDecompressionSessionP20opaqueCMSampleBufferjPvPj_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTDecompressionSessionDecodeFrame");
  WebCore::softLinkVideoToolboxVTDecompressionSessionDecodeFrame = (uint64_t (*)(WebCore *__hidden, OpaqueVTDecompressionSession *, opaqueCMSampleBuffer *, unsigned int, void *, unsigned int *))result;
  if (!result)
  {
    result = 45;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL44initVideoToolboxVTImageRotationSessionCreateEPK13__CFAllocatorjPP28OpaqueVTImageRotationSession_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTImageRotationSessionCreate");
  WebCore::softLinkVideoToolboxVTImageRotationSessionCreate = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 46;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL49initVideoToolboxVTImageRotationSessionSetPropertyEP28OpaqueVTImageRotationSessionPK10__CFStringPKv_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTImageRotationSessionSetProperty");
  WebCore::softLinkVideoToolboxVTImageRotationSessionSetProperty = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 47;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL51initVideoToolboxVTImageRotationSessionTransferImageEP28OpaqueVTImageRotationSessionP10__CVBufferS3__block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTImageRotationSessionTransferImage");
  WebCore::softLinkVideoToolboxVTImageRotationSessionTransferImage = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 48;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL53initVideoToolboxVTSelectAndCreateVideoDecoderInstanceEjPK13__CFAllocatorPK14__CFDictionaryP20OpaqueVTVideoDecoder_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTSelectAndCreateVideoDecoderInstance");
  WebCore::softLinkVideoToolboxVTSelectAndCreateVideoDecoderInstance = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 56;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL44initVideoToolboxVTPixelTransferSessionCreateEPK13__CFAllocatorPP28OpaqueVTPixelTransferSession_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTPixelTransferSessionCreate");
  WebCore::softLinkVideoToolboxVTPixelTransferSessionCreate = (uint64_t (*)(WebCore *__hidden, const __CFAllocator *, OpaqueVTPixelTransferSession **))result;
  if (!result)
  {
    result = 65;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL51initVideoToolboxVTPixelTransferSessionTransferImageEP28OpaqueVTPixelTransferSessionP10__CVBufferS3__block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTPixelTransferSessionTransferImage");
  WebCore::softLinkVideoToolboxVTPixelTransferSessionTransferImage = (uint64_t (*)(WebCore *__hidden, OpaqueVTPixelTransferSession *, __CVBuffer *, __CVBuffer *))result;
  if (!result)
  {
    result = 66;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL36initVideoToolboxVTSessionSetPropertyEPKvPK10__CFStringS1__block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTSessionSetProperty");
  WebCore::softLinkVideoToolboxVTSessionSetProperty = (uint64_t (*)(WebCore *__hidden, const void *, const __CFString *, const void *))result;
  if (!result)
  {
    result = 67;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL58initVideoToolboxVTPixelBufferConformerCreateWithAttributesEPK13__CFAllocatorPK14__CFDictionaryPP28OpaqueVTPixelBufferConformer_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTPixelBufferConformerCreateWithAttributes");
  WebCore::softLinkVideoToolboxVTPixelBufferConformerCreateWithAttributes = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 93;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL61initVideoToolboxVTPixelBufferConformerIsConformantPixelBufferEP28OpaqueVTPixelBufferConformerP10__CVBuffer_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTPixelBufferConformerIsConformantPixelBuffer");
  WebCore::softLinkVideoToolboxVTPixelBufferConformerIsConformantPixelBuffer = (uint64_t (*)(_QWORD, _QWORD))result;
  if (!result)
  {
    result = 94;
    __break(0xC471u);
  }
  return result;
}

uint64_t ___ZN7WebCoreL62initVideoToolboxVTPixelBufferConformerCopyConformedPixelBufferEP28OpaqueVTPixelBufferConformerP10__CVBufferhPS3__block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)WebCore::VideoToolboxLibrary(0);
  result = (uint64_t)dlsym(v0, "VTPixelBufferConformerCopyConformedPixelBuffer");
  WebCore::softLinkVideoToolboxVTPixelBufferConformerCopyConformedPixelBuffer = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))result;
  if (!result)
  {
    result = 95;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::toJSONObject(WTF::JSONImpl::Object *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  const WTF::String *v5;
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  const WTF::String *v14;
  WTF::StringImpl *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *result;
  uint64_t v22;
  const WTF::String *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  _DWORD **v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD **v41;
  uint64_t v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  _DWORD *v46;
  _QWORD v47[2];
  char v48;

  WTF::JSONImpl::Object::create(a1);
  v4 = *(_QWORD *)a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)a2, v5);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v4 + 16), &v45, (const WTF::StringImpl *)&v46, (uint64_t)v47);
  if (v48)
  {
    v7 = (uint64_t *)(v4 + 24);
    v8 = *(unsigned int *)(v4 + 36);
    if ((_DWORD)v8 == *(_DWORD *)(v4 + 32))
    {
      v35 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v45);
      v8 = *(unsigned int *)(v4 + 36);
      v36 = *(_QWORD *)(v4 + 24);
      v37 = *v35;
      if (*v35)
        *v37 += 2;
      *(_QWORD *)(v36 + 8 * v8) = v37;
    }
    else
    {
      v9 = *v7;
      v10 = v45;
      if (v45)
        *(_DWORD *)v45 += 2;
      *(_QWORD *)(v9 + 8 * v8) = v10;
    }
    *(_DWORD *)(v4 + 36) = v8 + 1;
  }
  v11 = v46;
  v46 = 0;
  if (v11)
  {
    if (*v11 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v11;
  }
  v12 = v45;
  v45 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v6);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(_QWORD *)a1;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v45 = (WTF::StringImpl *)v47[0];
  WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)(a2 + 8), v14);
  WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v13 + 16), &v45, (const WTF::StringImpl *)&v46, (uint64_t)v47);
  if (v48)
  {
    v16 = (uint64_t *)(v13 + 24);
    v17 = *(unsigned int *)(v13 + 36);
    if ((_DWORD)v17 == *(_DWORD *)(v13 + 32))
    {
      v38 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v16, v17 + 1, (unint64_t)&v45);
      v17 = *(unsigned int *)(v13 + 36);
      v39 = *(_QWORD *)(v13 + 24);
      v40 = *v38;
      if (*v38)
        *v40 += 2;
      *(_QWORD *)(v39 + 8 * v17) = v40;
    }
    else
    {
      v18 = *v16;
      v19 = v45;
      if (v45)
        *(_DWORD *)v45 += 2;
      *(_QWORD *)(v18 + 8 * v17) = v19;
    }
    *(_DWORD *)(v13 + 36) = v17 + 1;
  }
  v20 = v46;
  v46 = 0;
  if (v20)
  {
    if (*v20 == 1)
      WTF::JSONImpl::Value::operator delete();
    else
      --*v20;
  }
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  if (a2[17])
  {
    v22 = *(_QWORD *)a1;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (a2[17])
    {
      v24 = a2[16];
      v25 = &unk_1EE2F4000;
      v26 = WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::values;
      {
LABEL_28:
        v27 = (WTF::StringImpl *)v26[v24];
        if (v27)
          *(_DWORD *)v27 += 2;
        v44 = v27;
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v44, v23);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v22 + 16), &v45, (const WTF::StringImpl *)&v46, (uint64_t)v47);
        if (v48)
        {
          v29 = (uint64_t *)(v22 + 24);
          v30 = *(unsigned int *)(v22 + 36);
          if ((_DWORD)v30 == *(_DWORD *)(v22 + 32))
          {
            v41 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v29, v30 + 1, (unint64_t)&v45);
            v30 = *(unsigned int *)(v22 + 36);
            v42 = *(_QWORD *)(v22 + 24);
            v43 = *v41;
            if (*v41)
              *v43 += 2;
            *(_QWORD *)(v42 + 8 * v30) = v43;
          }
          else
          {
            v31 = *v29;
            v32 = v45;
            if (v45)
              *(_DWORD *)v45 += 2;
            *(_QWORD *)(v31 + 8 * v30) = v32;
          }
          *(_DWORD *)(v22 + 36) = v30 + 1;
        }
        v33 = v46;
        v46 = 0;
        if (v33)
        {
          if (*v33 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v33;
        }
        v34 = v44;
        v44 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v28);
          else
            *(_DWORD *)v34 -= 2;
        }
        result = v45;
        v45 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v28);
          else
            *(_DWORD *)result -= 2;
        }
        return result;
      }
    }
    else
    {
      std::__throw_bad_optional_access[abi:sn180100]();
    }
    WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_1::operator() const(void)::impl += 2;
    *v26 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_0::operator() const(void)::impl;
    v26[1] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::CDMEncryptionScheme)::$_1::operator() const(void)::impl;
    v25[1888] = 1;
    goto LABEL_28;
  }
  return result;
}

void WebCore::ReferenceAwareKeyHandle::~ReferenceAwareKeyHandle(WebCore::ReferenceAwareKeyHandle *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;

  *(_QWORD *)this = off_1E340A6B0;
  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  *(_QWORD *)this = off_1E340A6D0;
  if (*((_DWORD *)this + 12) != -1)
  {
    v4 = (WTF *)*((_QWORD *)this + 4);
    if (v4)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  *((_DWORD *)this + 12) = -1;
  v5 = (WTF *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;

  *(_QWORD *)this = off_1E340A6B0;
  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  *(_QWORD *)this = off_1E340A6D0;
  if (*((_DWORD *)this + 12) != -1)
  {
    v4 = (WTF *)*((_QWORD *)this + 4);
    if (v4)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  *((_DWORD *)this + 12) = -1;
  v5 = (WTF *)*((_QWORD *)this + 2);
  if (v5)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v5, a2);
  }
  WTF::fastFree(this, a2);
}

void WebCore::KeyHandle::~KeyHandle(WebCore::KeyHandle *this, void *a2)
{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E340A6D0;
  if (*((_DWORD *)this + 12) != -1)
  {
    v3 = (WTF *)*((_QWORD *)this + 4);
    if (v3)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  *((_DWORD *)this + 12) = -1;
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  WTF *v3;
  WTF *v4;

  *(_QWORD *)this = off_1E340A6D0;
  if (*((_DWORD *)this + 12) != -1)
  {
    v3 = (WTF *)*((_QWORD *)this + 4);
    if (v3)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  *((_DWORD *)this + 12) = -1;
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::extractKeyidsLocationFromCencInitData(WebCore *this, const WebCore::SharedBuffer *a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::CDMInstanceProxy *v22;
  char v23;
  char *v24;

  v2 = *((_QWORD *)this + 6);
  if (v2 - 0x100000000 < 0xFFFFFFFF00000001)
    goto LABEL_23;
  if (*((_DWORD *)this + 5))
  {
    v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    v5 = *(unsigned int *)(v4 + 24);
    if ((_DWORD)v5 == -1)
    {
      v22 = (WebCore::CDMInstanceProxy *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::CDMInstanceProxy::~CDMInstanceProxy(v22);
    }
    v24 = &v23;
    v6 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v5])(&v24, v4 + 8);
    v2 = *((_QWORD *)this + 6);
  }
  else
  {
LABEL_26:
    v6 = 0;
  }
  if (v2 < 0x1D)
  {
LABEL_23:
    v17 = 0;
    v20 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 12;
    while (1)
    {
      v9 = (v7 + 2);
      if (v2 <= v9)
        goto LABEL_25;
      v10 = (v7 + 3);
      if (v2 <= v10)
        goto LABEL_25;
      v11 = *(unsigned __int8 *)(v6 + v10) | (*(unsigned __int8 *)(v6 + v9) << 8);
      if (!v11)
        goto LABEL_23;
      if (v2 <= v8)
        goto LABEL_25;
      v12 = (uint64_t *)(v6 + v8);
      v14 = *v12;
      v13 = v12[1];
      if (v14 == 0x24DB2C0ECEF7710 && v13 == 0x4BFBE2521E3CE3ACLL)
        break;
      v7 += v11;
      v8 = v7 + 12;
      if (v7 + 28 >= v2)
        goto LABEL_23;
    }
    v16 = (v7 + 31);
    if (v16 >= v2)
      goto LABEL_23;
    if (v2 <= v16)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v17 = *(unsigned __int8 *)(v6 + v16);
    v18 = v7 + 32;
    if (v18 + 16 * (_DWORD)v17 >= v2)
      v19 = 0;
    else
      v19 = v18;
    v20 = v19 << 32;
  }
  return v20 | v17;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>)::{lambda(void)#1},void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)a1 = &off_1E340A7D8;
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(unsigned int *)(a1 + 44);
    if ((_DWORD)v3)
    {
      v4 = *(uint64_t **)(a1 + 32);
      v5 = 16 * v3;
      do
      {
        v4 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v4, a2)+ 2;
        v5 -= 16;
      }
      while (v5);
    }
    v6 = *(WTF **)(a1 + 32);
    if (v6)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E340A7D8;
  if (*((_BYTE *)this + 48))
  {
    v3 = *((unsigned int *)this + 11);
    if ((_DWORD)v3)
    {
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = 16 * v3;
      do
      {
        v4 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v4, a2)+ 2;
        v5 -= 16;
      }
      while (v5);
    }
    v6 = (WTF *)*((_QWORD *)this + 4);
    if (v6)
    {
      *((_QWORD *)this + 4) = 0;
      *((_DWORD *)this + 10) = 0;
      WTF::fastFree(v6, a2);
    }
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::updateLicense(WTF::String const&,WebCore::CDMSessionType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::__1<double> &&,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(BOOL,std::optional<WTF::Vector<WTF::CompletionHandler::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,std::__1<WTF::Vector<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>)::{lambda(void)#1},void>::call(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _BYTE v6[8];
  uint64_t v7;
  char v8;
  _BYTE v9[16];

  v1 = result[1];
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *((unsigned __int8 *)result + 24);
    v9[0] = 0;
    v9[8] = 0;
    v6[0] = 0;
    v8 = 0;
    v3 = *((unsigned int *)result + 14);
    v4 = result[2];
    result[2] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, _BYTE *, _BYTE *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v2, result + 4, v9, v6, v3);
    result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v8)
      return WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v7, v5);
  }
  return result;
}

uint64_t WebCore::CDMInstanceSessionClearKey::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::{lambda(void)#1}::~(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v15 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v15)
      {
        v16 = *(_QWORD *)(v3 + 8);
        v17 = v16 + 16 * v15;
        do
        {
          v18 = *(unsigned int **)(v16 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v27 = v17;
              v28 = v16;
              v26 = v3;
              atomic_store(1u, v18);
              v21 = v18;
              v22 = v18[6];
              if ((_DWORD)v22 != -1)
                ((void (*)(char *, unsigned int *))off_1E340A840[v22])(&v29, v18 + 2);
              v21[6] = -1;
              WTF::fastFree((WTF *)v21, a2);
              v3 = v26;
              v17 = v27;
              v16 = v28;
            }
          }
          v16 += 16;
        }
        while (v16 != v17);
      }
      v23 = *(WTF **)(v3 + 8);
      if ((WTF *)(v3 + 24) != v23 && v23 != 0)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        v25 = v3;
        WTF::fastFree(v23, a2);
        v3 = v25;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(a1 + 16);
    v8 = 16 * v6;
    do
    {
      v7 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v7, a2)+ 2;
      v8 -= 16;
    }
    while (v8);
  }
  v9 = *(WTF **)(a1 + 16);
  if (v9)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E340A800;
  WebCore::CDMInstanceSessionClearKey::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::{lambda(void)#1}::~((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E340A800;
  WebCore::CDMInstanceSessionClearKey::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::{lambda(void)#1}::~((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::removeSessionData(WTF::String const&,WebCore::CDMSessionType,WTF::CompletionHandler<void ()(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0::operator() const(WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *(unsigned int *)(result + 48);
      v3 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, result + 24, result + 40, v2);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return result;
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CDMFactory::registeredFactories(void)::$_0 &&>>()
{
  WebCore::CDMFactory::platformRegisterFactories((WebCore::CDMFactoryClearKey *)&WebCore::CDMFactory::registeredFactories(void)::factories);
}

unint64_t WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = a2;
  if (WebCore::CDMFactory::registeredFactories(void)::factories <= a2
    && WebCore::CDMFactory::registeredFactories(void)::factories + 8 * (unint64_t)dword_1EE2F8ABC > a2)
  {
    v7 = a2 - WebCore::CDMFactory::registeredFactories(void)::factories;
    v8 = dword_1EE2F8AB8 + ((unint64_t)dword_1EE2F8AB8 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a1)
      v10 = a1;
    else
      v10 = v9;
    WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&WebCore::CDMFactory::registeredFactories(void)::factories, v10);
    return WebCore::CDMFactory::registeredFactories(void)::factories + v7;
  }
  else
  {
    v4 = dword_1EE2F8AB8 + ((unint64_t)dword_1EE2F8AB8 >> 2);
    if (v4 >= 0x10)
      v5 = v4 + 1;
    else
      v5 = 16;
    if (v5 <= a1)
      v6 = a1;
    else
      v6 = v5;
    WTF::Vector<WebCore::CDMFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&WebCore::CDMFactory::registeredFactories(void)::factories, v6);
  }
  return v2;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMPrivate::doSupportedConfigurationStep(WebCore::CDMKeySystemConfiguration &&,WebCore::CDMRestrictions &&,WebCore::CDMPrivate::LocalStorageAccess,WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&)::$_0,void,WebCore::CDMPrivate::ConsentStatus,WebCore::CDMKeySystemConfiguration &,WebCore::CDMRestrictions>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E340A828;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMPrivate::doSupportedConfigurationStep(WebCore::CDMKeySystemConfiguration &&,WebCore::CDMRestrictions &&,WebCore::CDMPrivate::LocalStorageAccess,WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&)::$_0,void,WebCore::CDMPrivate::ConsentStatus,WebCore::CDMKeySystemConfiguration &,WebCore::CDMRestrictions>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E340A828;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::CDMPrivate::doSupportedConfigurationStep(WebCore::CDMKeySystemConfiguration &&,WebCore::CDMRestrictions &&,WebCore::CDMPrivate::LocalStorageAccess,WTF::Function<void ()(std::optional<WebCore::CDMKeySystemConfiguration>)> &&)::$_0,void,WebCore::CDMPrivate::ConsentStatus,WebCore::CDMKeySystemConfiguration &,WebCore::CDMRestrictions>::call(uint64_t a1, int a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  WebCore::CDMKeySystemConfiguration *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0)
  {
    if (!a2)
    {
      WebCore::CDMPrivate::doSupportedConfigurationStep(v5, a3, a4, *(unsigned __int8 *)(a1 + 24), a1 + 16);
      return;
    }
    v6 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = 0;
    v7 = *((_QWORD *)a3 + 5);
    *((_QWORD *)a3 + 5) = 0;
    v21 = *((_WORD *)a3 + 28);
    v8 = v21;
    v9 = *((_QWORD *)a3 + 8);
    *((_QWORD *)a3 + 8) = 0;
    v24 = 1;
    v15 = 0u;
    v10 = *a3;
    *a3 = 0u;
    v11 = *(_QWORD *)(a1 + 16);
    v25 = v10;
    v16 = 0;
    *(_QWORD *)&v10 = *((_QWORD *)a3 + 2);
    *((_QWORD *)a3 + 2) = 0;
    v26 = v10;
    v17 = 0;
    v27 = v6;
    v18 = 0;
    *(_QWORD *)&v10 = *((_QWORD *)a3 + 4);
    *((_QWORD *)a3 + 4) = 0;
    v28 = v10;
    v19 = 0;
    v29 = v7;
    v20 = 0;
    *(_QWORD *)&v10 = *((_QWORD *)a3 + 6);
    *((_QWORD *)a3 + 6) = 0;
    v30 = v10;
    v31 = v8;
    v22 = 0;
    v32 = v9;
    v23 = 0;
    *(_QWORD *)&v10 = *((_QWORD *)a3 + 9);
    *((_QWORD *)a3 + 9) = 0;
    v33 = v10;
    v34 = 1;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 16))(v11, &v25);
    if (v34)
      WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration((WebCore::CDMKeySystemConfiguration *)&v25, v12);
    v13 = (WebCore::CDMKeySystemConfiguration *)&v15;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    LOBYTE(v25) = 0;
    v34 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v14 + 16))(v14, &v25);
    if (!v34)
      return;
    v13 = (WebCore::CDMKeySystemConfiguration *)&v25;
  }
  WebCore::CDMKeySystemConfiguration::~CDMKeySystemConfiguration(v13, v12);
}

uint64_t WTF::Vector<WebCore::CDMProxyFactory *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;

  v2 = a2;
  v3 = (void *)qword_1EE338138;
  if (qword_1EE338138 <= a2)
  {
    v4 = dword_1EE338144;
    if (qword_1EE338138 + 8 * (unint64_t)dword_1EE338144 > a2)
    {
      v5 = dword_1EE338140 + ((unint64_t)dword_1EE338140 >> 2);
      if (v5 >= 0x10)
        v6 = v5 + 1;
      else
        v6 = 16;
      if (v6 <= a1)
        v7 = a1;
      else
        v7 = v6;
      if (v7 <= dword_1EE338140)
      {
        v10 = qword_1EE338138;
        return v10 + 8 * ((uint64_t)(v2 - (_QWORD)v3) >> 3);
      }
      if (!(v7 >> 29))
      {
        v8 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
        dword_1EE338140 = v7;
        qword_1EE338138 = (uint64_t)v8;
        memcpy(v8, v3, 8 * v4);
        v10 = qword_1EE338138;
        if (v3)
        {
          if ((void *)qword_1EE338138 == v3)
          {
            qword_1EE338138 = 0;
            dword_1EE338140 = 0;
          }
          WTF::fastFree((WTF *)v3, v9);
          v10 = qword_1EE338138;
        }
        return v10 + 8 * ((uint64_t)(v2 - (_QWORD)v3) >> 3);
      }
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x196133DD8);
    }
  }
  v11 = dword_1EE338140 + ((unint64_t)dword_1EE338140 >> 2);
  if (v11 >= 0x10)
    v12 = v11 + 1;
  else
    v12 = 16;
  if (v12 <= a1)
    v13 = a1;
  else
    v13 = v12;
  if (v13 > dword_1EE338140)
  {
    if (v13 >> 29)
      goto LABEL_30;
    v14 = dword_1EE338144;
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
    dword_1EE338140 = v13;
    qword_1EE338138 = (uint64_t)v15;
    memcpy(v15, v3, 8 * v14);
    if (v3)
    {
      if ((void *)qword_1EE338138 == v3)
      {
        qword_1EE338138 = 0;
        dword_1EE338140 = 0;
      }
      WTF::fastFree((WTF *)v3, v16);
    }
  }
  return v2;
}

uint64_t WTF::HashTable<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashMap<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>,WTF::DefaultHash<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTraits<WTF::RefPtr<WebCore::ReferenceAwareKeyHandle,WTF::RawPtrTraits<WebCore::ReferenceAwareKeyHandle>,WTF::DefaultRefDerefTraits<WebCore::ReferenceAwareKeyHandle>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  WTF *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = v5;
    while (1)
    {
      v11 = (unsigned __int8 **)(v4 + 24 * v9);
      v12 = *((unsigned int *)v11 + 3);
      if ((_DWORD)v12 != -1)
      {
        if ((_DWORD)v12)
        {
          v19 = *a1;
          if (*a1)
            v20 = *(_DWORD *)(v19 - 8);
          else
            v20 = 0;
          v21 = *v11;
          v22 = -1640531527;
          do
          {
            v23 = *v21++;
            v22 = ((v22 + v23) ^ ((v22 + v23) << 16)) + (((v22 + v23) ^ ((v22 + v23) << 16)) >> 11);
            --v12;
          }
          while (v12);
          v24 = (v22 ^ (8 * v22)) + ((v22 ^ (8 * v22)) >> 5);
          v25 = (v24 ^ (4 * v24)) + ((v24 ^ (4 * v24)) >> 15);
          v26 = v25 ^ (v25 << 10);
          if (v26)
            v27 = v26;
          else
            v27 = 0x800000;
          do
          {
            v28 = v27 & v20;
            v29 = v19 + 24 * (v27 & v20);
            LODWORD(v12) = v12 + 1;
            v27 = v12 + (v27 & v20);
          }
          while (*(_DWORD *)(v29 + 12));
          v30 = v19 + 24 * v28;
          v33 = *(unsigned int **)(v30 + 16);
          v32 = (_QWORD *)(v30 + 16);
          v31 = v33;
          *v32 = 0;
          if (v33)
          {
            v34 = v31 + 2;
            do
            {
              v35 = __ldaxr(v34);
              v36 = v35 - 1;
            }
            while (__stlxr(v36, v34));
            if (!v36)
            {
              atomic_store(1u, v31 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
            }
          }
          v37 = *(WTF **)v29;
          if (*(_QWORD *)v29)
          {
            *(_QWORD *)v29 = 0;
            *(_DWORD *)(v29 + 8) = 0;
            WTF::fastFree(v37, v8);
          }
          *(_QWORD *)v29 = 0;
          *(_QWORD *)(v29 + 8) = 0;
          v38 = *v11;
          *v11 = 0;
          *(_QWORD *)v29 = v38;
          LODWORD(v38) = *((_DWORD *)v11 + 2);
          *((_DWORD *)v11 + 2) = 0;
          *(_DWORD *)(v29 + 8) = (_DWORD)v38;
          LODWORD(v38) = *((_DWORD *)v11 + 3);
          *((_DWORD *)v11 + 3) = 0;
          *(_DWORD *)(v29 + 12) = (_DWORD)v38;
          v39 = v4 + 24 * v9;
          v40 = *(_QWORD *)(v39 + 16);
          *(_QWORD *)(v39 + 16) = 0;
          *v32 = v40;
          v41 = *(unsigned int **)(v39 + 16);
          *(_QWORD *)(v39 + 16) = 0;
          if (v41)
          {
            v42 = v41 + 2;
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v41 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
            }
          }
          v18 = (WTF *)*v11;
          if (!*v11)
            goto LABEL_38;
        }
        else
        {
          v13 = v4 + 24 * v9;
          v14 = *(unsigned int **)(v13 + 16);
          *(_QWORD *)(v13 + 16) = 0;
          if (v14)
          {
            v15 = v14 + 2;
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v14 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
            }
          }
          v18 = (WTF *)*v11;
          if (!*v11)
            goto LABEL_38;
        }
        *v11 = 0;
        *((_DWORD *)v11 + 2) = 0;
        WTF::fastFree(v18, v8);
      }
LABEL_38:
      if (++v9 == v10)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = off_1E340A870;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 4, a2);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0,void>::~CallableWrapper(uint64_t *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *a1 = (uint64_t)off_1E340A870;
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(a1 + 4, a2);
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, v3);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::requestLicense(WebCore::CDMSessionType,WebCore::CDMKeyGroupingStrategy,WTF::AtomString const&,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&,WTF::CompletionHandler<void ()(WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &,WTF::String const&,BOOL,WebCore::CDMInstanceSession::SuccessValue)> &&)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[2];
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = result[1] + 32;
      v3 = result[3];
      result[3] = 0;
      (*(void (**)(uint64_t, _QWORD *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 16))(v3, result + 4, v2, 0, 1);
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)a1 = &off_1E340A898;
  v3 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 24);
    v5 = 16 * v3;
    do
    {
      v4 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v4, a2)+ 2;
      v5 -= 16;
    }
    while (v5);
  }
  v6 = *(WTF **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E340A898;
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 3);
    v5 = 16 * v3;
    do
    {
      v4 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v4, a2)+ 2;
      v5 -= 16;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::loadSession(WebCore::CDMSessionType,WTF::String const&,WTF::String const&,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<std::pair<WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::CDMKeyStatus>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::optional<double> &&,std::optional<std::pair<WebCore::CDMMessageType,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>> &&,WebCore::CDMInstanceSession::SuccessValue,WebCore::CDMInstanceSessionLoadFailure)> &&)::$_0,void>::call(void *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE v7[8];
  uint64_t v8;
  char v9;
  _BYTE v10[16];
  WTF *v11;
  uint64_t v12;
  char v13;

  v1 = *((_QWORD *)result + 1);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = *((_QWORD *)result + 2);
    v11 = (WTF *)*((_QWORD *)result + 3);
    v13 = 1;
    v3 = *((_QWORD *)result + 4);
    *((_QWORD *)result + 3) = 0;
    *((_QWORD *)result + 4) = 0;
    v12 = v3;
    v10[0] = 0;
    v10[8] = 0;
    v7[0] = 0;
    v9 = 0;
    *((_QWORD *)result + 2) = 0;
    (*(void (**)(uint64_t, WTF **, _BYTE *, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, &v11, v10, v7, 1, 0);
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (v9)
      result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v8, v4);
    if (v13)
    {
      if (HIDWORD(v12))
      {
        v5 = (uint64_t *)v11;
        v6 = 16 * HIDWORD(v12);
        do
        {
          v5 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v5, v4)+ 2;
          v6 -= 16;
        }
        while (v6);
      }
      result = v11;
      if (v11)
      {
        v11 = 0;
        LODWORD(v12) = 0;
        return (void *)WTF::fastFree((WTF *)result, v4);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E340A8C0;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E340A8C0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CDMInstanceSessionClearKey::closeSession(WTF::String const&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  return result;
}

uint64_t *WebCore::EmptyGamepadProvider::platformGamepads(WebCore::EmptyGamepadProvider *this)
{
  if ((_MergedGlobals_223 & 1) == 0)
  {
    qword_1ECE83BF8 = 0;
    unk_1ECE83C00 = 0;
    _MergedGlobals_223 = 1;
  }
  return &qword_1ECE83BF8;
}

uint64_t WebCore::EmptyGamepadProvider::playEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;

  v6 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t WebCore::EmptyGamepadProvider::stopEffects(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WebCore::GamepadProvider::dispatchPlatformGamepadInputActivity(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  if (!v2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = v3;
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v3 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
    goto LABEL_3;
  if (!(_DWORD)v4)
  {
    v14 = 0;
    v5 = *(uint64_t **)(this + 8);
    goto LABEL_45;
  }
  v9 = 8 * v4;
  v5 = *(uint64_t **)(this + 8);
  while ((unint64_t)(*v5 + 1) <= 1)
  {
    ++v5;
    v9 -= 8;
    if (!v9)
    {
      v5 = v3;
      break;
    }
  }
LABEL_4:
  if (!v2)
  {
    v6 = 0;
    goto LABEL_6;
  }
  v14 = *(unsigned int *)(v2 - 4);
LABEL_45:
  v6 = (uint64_t *)(v2 + 8 * v14);
LABEL_6:
  if (v6 != v5)
  {
    while (!*(_QWORD *)(*v5 + 8))
    {
      v7 = v5 + 1;
      v5 = v3;
      if (v7 != v3)
      {
        v5 = v7;
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          if (++v5 == v3)
          {
            v5 = v3;
            break;
          }
        }
      }
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v2)
    v8 = (uint64_t *)(v2 + 8 * *(unsigned int *)(v2 - 4));
  else
    v8 = 0;
  while (v5 != v8)
  {
    v11 = *v5;
    v10 = v5 + 1;
    this = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 8) + 32))(*(_QWORD *)(v11 + 8), *(unsigned __int8 *)(v1 + 24));
    v12 = v3;
    if (v10 != v3)
    {
      v12 = v10;
      while ((unint64_t)(*v12 + 1) <= 1)
      {
        if (++v12 == v3)
        {
          v12 = v3;
          break;
        }
      }
    }
    v5 = v6;
    if (v12 != v6)
    {
      v5 = v12;
      if (!*(_QWORD *)(*v12 + 8))
      {
        while (1)
        {
          v13 = v5 + 1;
          v5 = v3;
          if (v13 != v3)
          {
            v5 = v13;
            while ((unint64_t)(*v5 + 1) <= 1)
            {
              if (++v5 == v3)
              {
                v5 = v3;
                break;
              }
            }
          }
          if (v5 == v6)
            break;
          if (*(_QWORD *)(*v5 + 8))
            goto LABEL_40;
        }
        v5 = v6;
      }
    }
LABEL_40:
    ++*(_DWORD *)(v1 + 16);
  }
  *(_BYTE *)(v1 + 24) = 0;
  return this;
}

void WebCore::EmptyGamepadProvider::~EmptyGamepadProvider(WebCore::EmptyGamepadProvider *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33485A0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = *(unsigned int **)(v2 + 8 * i);
        if (v5 != (unsigned int *)-1)
        {
          *(_QWORD *)(v2 + 8 * i) = 0;
          if (v5)
          {
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              atomic_store(1u, v5);
              v9 = i;
              v10 = v2;
              v8 = v3;
              WTF::fastFree((WTF *)v5, a2);
              v3 = v8;
              i = v9;
              v2 = v10;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = off_1E33485A0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = *(unsigned int **)(v2 + 8 * i);
        if (v5 != (unsigned int *)-1)
        {
          *(_QWORD *)(v2 + 8 * i) = 0;
          if (v5)
          {
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              atomic_store(1u, v5);
              v9 = i;
              v10 = v2;
              v8 = v3;
              WTF::fastFree((WTF *)v5, a2);
              v3 = v8;
              i = v9;
              v2 = v10;
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v2 - 16), a2);
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::parseAV1CodecParameters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t result;
  uint64_t *v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  char v56;
  char v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  __int16 v65;
  char v66;

  v63 = a1;
  v64 = a2;
  v65 = 46;
  v66 = 0;
  v59 = &v63;
  v60 = 0;
  v62 = (_DWORD)a2 == 0;
  result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v59);
  v14 = (uint64_t *)v60;
  if (v60 == (_DWORD)v64 && v62)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    return result;
  }
  v16 = (unint64_t)v59;
  v17 = *((unsigned int *)v59 + 2);
  if (v17 <= v60)
    goto LABEL_16;
  LODWORD(v18) = v61;
  if (v17 - v60 <= v61)
  {
    if (!v60)
    {
      v18 = v59[1];
      goto LABEL_15;
    }
    LODWORD(v18) = v17 - v60;
  }
  v19 = *((unsigned __int8 *)v59 + 12);
  v18 = v18;
  v20 = v17 - v60;
  if (*((_BYTE *)v59 + 12))
  {
    if (v20 < v18)
      goto LABEL_199;
    v18 = v18 | 0x100000000;
  }
  else if (v20 < v18)
  {
    goto LABEL_199;
  }
LABEL_15:
  if ((v18 & 0xFF00000000) == 0)
  {
    WTF::String::String();
    goto LABEL_17;
  }
LABEL_16:
  WTF::String::String();
LABEL_17:
  v3 = v58;
  result = MEMORY[0x19AEA53F4](v58, "av01", 4);
  if (!(_DWORD)result)
    goto LABEL_47;
  result = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(result + 8) == (_DWORD)v64)
  {
    if (*(_BYTE *)(result + 16))
      goto LABEL_47;
  }
  v14 = v59;
  v16 = v60;
  v22 = *((unsigned int *)v59 + 2);
  if (v22 <= v60)
  {
    v25 = 0;
    v24 = "";
    goto LABEL_30;
  }
  LODWORD(v23) = v61;
  if (v22 - v60 <= v61)
  {
    if (!v60)
    {
      v24 = (const char *)*v59;
      v23 = v59[1];
      goto LABEL_29;
    }
    LODWORD(v23) = v22 - v60;
  }
  v19 = *((unsigned __int8 *)v59 + 12);
  v23 = v23;
  v20 = v22 - v60;
  if (*((_BYTE *)v59 + 12))
  {
    if (v20 < v23)
      goto LABEL_199;
    v24 = (const char *)(*v59 + v60);
    v23 = v23 | 0x100000000;
  }
  else
  {
    if (v20 < v23)
      goto LABEL_199;
    v24 = (const char *)(*v59 + 2 * v60);
  }
LABEL_29:
  v25 = v23;
  if ((v23 & 0xFF00000000) != 0)
  {
LABEL_30:
    result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v24, v25, 10, 0);
    goto LABEL_32;
  }
  result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v24, v23, 10, 0);
LABEL_32:
  v4 = result;
  if (result > 2u)
    goto LABEL_47;
  if (!BYTE1(result))
    goto LABEL_47;
  result = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(result + 8) == (_DWORD)v64)
  {
    if (*(_BYTE *)(result + 16))
      goto LABEL_47;
  }
  v14 = v59;
  v16 = v60;
  v26 = *((unsigned int *)v59 + 2);
  if (v26 <= v60)
    goto LABEL_47;
  LODWORD(v27) = v61;
  if (v26 - v60 <= v61)
  {
    if (!v60)
    {
      v5 = *v59;
      v27 = v59[1];
      goto LABEL_46;
    }
    LODWORD(v27) = v26 - v60;
  }
  v19 = *((unsigned __int8 *)v59 + 12);
  v27 = v27;
  v20 = v26 - v60;
  if (*((_BYTE *)v59 + 12))
  {
    if (v20 < v27)
      goto LABEL_199;
    v5 = *v59 + v60;
    v27 = v27 | 0x100000000;
  }
  else
  {
    if (v20 < v27)
      goto LABEL_199;
    v5 = *v59 + 2 * v60;
  }
LABEL_46:
  if (v27 < 3)
    goto LABEL_47;
  v6 = (v27 - 1);
  if ((v27 & 0xFF00000000) != 0)
  {
    result = WTF::parseInteger<unsigned char,unsigned char>(v5, v6, 10, 0);
    if ((unsigned __int16)result < 0x100u)
      goto LABEL_47;
    v9 = result;
    if (result > 0x17u)
      goto LABEL_47;
    v28 = *(unsigned __int8 *)(v5 + v6);
  }
  else
  {
    result = WTF::parseInteger<unsigned char,char16_t>(v5, v6, 10, 0);
    if ((unsigned __int16)result < 0x100u)
      goto LABEL_47;
    v9 = result;
    if (result > 0x17u)
      goto LABEL_47;
    v28 = *(unsigned __int16 *)(v5 + 2 * v6);
  }
  if (v28 == 77)
  {
    v10 = 0;
  }
  else
  {
    if (v28 != 72)
      goto LABEL_47;
    v10 = 1;
  }
  result = WTF::StringView::SplitResult::Iterator::operator++();
  if (*(_DWORD *)(result + 8) != (_DWORD)v64 || !*(_BYTE *)(result + 16))
  {
    v14 = v59;
    v16 = v60;
    v29 = *((unsigned int *)v59 + 2);
    if (v29 <= v60)
    {
      v32 = 0;
      v31 = "";
      goto LABEL_77;
    }
    LODWORD(v30) = v61;
    if (v29 - v60 <= v61)
    {
      if (!v60)
      {
        v31 = (const char *)*v59;
        v30 = v59[1];
        goto LABEL_76;
      }
      LODWORD(v30) = v29 - v60;
    }
    v19 = *((unsigned __int8 *)v59 + 12);
    v30 = v30;
    v20 = v29 - v60;
    if (*((_BYTE *)v59 + 12))
    {
      if (v20 < v30)
        goto LABEL_199;
      v31 = (const char *)(*v59 + v60);
      v30 = v30 | 0x100000000;
    }
    else
    {
      if (v20 < v30)
        goto LABEL_199;
      v31 = (const char *)(*v59 + 2 * v60);
    }
LABEL_76:
    v32 = v30;
    if ((v30 & 0xFF00000000) == 0)
    {
      result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v31, v30, 10, 0);
      goto LABEL_79;
    }
LABEL_77:
    result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v31, v32, 10, 0);
LABEL_79:
    LOBYTE(v5) = result;
    if (result > 0xCu || !BYTE1(result))
      goto LABEL_47;
    result = WTF::StringView::SplitResult::Iterator::operator++();
    if (*(_DWORD *)(result + 8) == (_DWORD)v64 && *(_BYTE *)(result + 16))
    {
      *(_QWORD *)a3 = v58;
      *(_BYTE *)(a3 + 8) = v4;
      *(_BYTE *)(a3 + 9) = v9;
      *(_BYTE *)(a3 + 10) = v10;
      *(_BYTE *)(a3 + 11) = v5;
      *(_DWORD *)(a3 + 12) = 16870912;
LABEL_90:
      *(_WORD *)(a3 + 16) = 1;
LABEL_131:
      *(_BYTE *)(a3 + 24) = 1;
      return result;
    }
    v14 = v59;
    v16 = v60;
    v33 = *((unsigned int *)v59 + 2);
    if (v33 <= v60)
    {
      v36 = 0;
      v35 = "";
      goto LABEL_97;
    }
    LODWORD(v34) = v61;
    if (v33 - v60 <= v61)
    {
      if (!v60)
      {
        v35 = (const char *)*v59;
        v34 = v59[1];
        goto LABEL_96;
      }
      LODWORD(v34) = v33 - v60;
    }
    v19 = *((unsigned __int8 *)v59 + 12);
    v34 = v34;
    v20 = v33 - v60;
    if (*((_BYTE *)v59 + 12))
    {
      if (v20 < v34)
        goto LABEL_199;
      v35 = (const char *)(*v59 + v60);
      v34 = v34 | 0x100000000;
    }
    else
    {
      if (v20 < v34)
        goto LABEL_199;
      v35 = (const char *)(*v59 + 2 * v60);
    }
LABEL_96:
    v36 = v34;
    if ((v34 & 0xFF00000000) == 0)
    {
      result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v35, v34, 10, 0);
      goto LABEL_99;
    }
LABEL_97:
    result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v35, v36, 10, 0);
LABEL_99:
    LOBYTE(v6) = result;
    if (result > 1u || !BYTE1(result))
      goto LABEL_47;
    result = WTF::StringView::SplitResult::Iterator::operator++();
    if (*(_DWORD *)(result + 8) == (_DWORD)v64 && *(_BYTE *)(result + 16))
    {
      *(_QWORD *)a3 = v58;
      *(_BYTE *)(a3 + 8) = v4;
      *(_BYTE *)(a3 + 9) = v9;
      *(_BYTE *)(a3 + 10) = v10;
      *(_BYTE *)(a3 + 11) = v5;
      *(_BYTE *)(a3 + 12) = v6;
      *(_DWORD *)(a3 + 13) = 16843118;
      goto LABEL_109;
    }
    v14 = v59;
    v16 = v60;
    v37 = *((unsigned int *)v59 + 2);
    if (v37 <= v60)
    {
      v40 = 0;
      v39 = "";
      goto LABEL_116;
    }
    LODWORD(v38) = v61;
    if (v37 - v60 <= v61)
    {
      if (!v60)
      {
        v39 = (const char *)*v59;
        v38 = v59[1];
        goto LABEL_115;
      }
      LODWORD(v38) = v37 - v60;
    }
    v19 = *((unsigned __int8 *)v59 + 12);
    v38 = v38;
    v20 = v37 - v60;
    if (*((_BYTE *)v59 + 12))
    {
      if (v20 < v38)
        goto LABEL_199;
      v39 = (const char *)(*v59 + v60);
      v38 = v38 | 0x100000000;
    }
    else
    {
      if (v20 < v38)
        goto LABEL_199;
      v39 = (const char *)(*v59 + 2 * v60);
    }
LABEL_115:
    v40 = v38;
    if ((v38 & 0xFF00000000) == 0)
    {
      result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v39, v38, 10, 0);
      goto LABEL_118;
    }
LABEL_116:
    result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v39, v40, 10, 0);
LABEL_118:
    v7 = result;
    if (!BYTE1(result)
      || (result - 100 > 0xC || ((1 << (result - 100)) & 0x1C01) == 0) && (_BYTE)result)
    {
      goto LABEL_47;
    }
    result = WTF::StringView::SplitResult::Iterator::operator++();
    if (*(_DWORD *)(result + 8) == (_DWORD)v64 && *(_BYTE *)(result + 16))
    {
      *(_QWORD *)a3 = v58;
      *(_BYTE *)(a3 + 8) = v4;
      *(_BYTE *)(a3 + 9) = v9;
      *(_BYTE *)(a3 + 10) = v10;
      *(_BYTE *)(a3 + 11) = v5;
      *(_BYTE *)(a3 + 12) = v6;
      *(_BYTE *)(a3 + 13) = v7;
      *(_DWORD *)(a3 + 14) = 65793;
      goto LABEL_131;
    }
    v14 = v59;
    v16 = v60;
    v41 = *((unsigned int *)v59 + 2);
    if (v41 <= v60)
    {
      v44 = 0;
      v43 = "";
      goto LABEL_137;
    }
    LODWORD(v42) = v61;
    if (v41 - v60 <= v61)
    {
      if (!v60)
      {
        v43 = (const char *)*v59;
        v42 = v59[1];
        goto LABEL_136;
      }
      LODWORD(v42) = v41 - v60;
    }
    v19 = *((unsigned __int8 *)v59 + 12);
    v42 = v42;
    v20 = v41 - v60;
    if (*((_BYTE *)v59 + 12))
    {
      if (v20 < v42)
        goto LABEL_199;
      v43 = (const char *)(*v59 + v60);
      v42 = v42 | 0x100000000;
    }
    else
    {
      if (v20 < v42)
        goto LABEL_199;
      v43 = (const char *)(*v59 + 2 * v60);
    }
LABEL_136:
    v44 = v42;
    if ((v42 & 0xFF00000000) == 0)
    {
      result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v43, v42, 10, 0);
LABEL_139:
      if (!BYTE1(result))
        goto LABEL_47;
      v11 = result;
      if ((result > 6u || ((1 << result) & 0x76) == 0)
        && result != 7
        && (result & 0xFC) != 8
        && result != 22
        && result != 12)
      {
        goto LABEL_47;
      }
      result = WTF::StringView::SplitResult::Iterator::operator++();
      if (*(_DWORD *)(result + 8) != (_DWORD)v64 || !*(_BYTE *)(result + 16))
      {
        v14 = v59;
        v16 = v60;
        v45 = *((unsigned int *)v59 + 2);
        if (v45 <= v60)
        {
          v48 = 0;
          v47 = "";
          goto LABEL_156;
        }
        LODWORD(v46) = v61;
        if (v45 - v60 <= v61)
        {
          if (!v60)
          {
            v47 = (const char *)*v59;
            v46 = v59[1];
            goto LABEL_155;
          }
          LODWORD(v46) = v45 - v60;
        }
        v19 = *((unsigned __int8 *)v59 + 12);
        v46 = v46;
        v20 = v45 - v60;
        if (*((_BYTE *)v59 + 12))
        {
          if (v20 < v46)
            goto LABEL_199;
          v47 = (const char *)(*v59 + v60);
          v46 = v46 | 0x100000000;
        }
        else
        {
          if (v20 < v46)
            goto LABEL_199;
          v47 = (const char *)(*v59 + 2 * v60);
        }
LABEL_155:
        v48 = v46;
        if ((v46 & 0xFF00000000) == 0)
        {
          result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v47, v46, 10, 0);
LABEL_158:
          if (!BYTE1(result))
            goto LABEL_47;
          v8 = result;
          if (result != 1
            && result != 2
            && result - 4 > 0xE)
          {
            goto LABEL_47;
          }
          result = WTF::StringView::SplitResult::Iterator::operator++();
          if (*(_DWORD *)(result + 8) != (_DWORD)v64 || !*(_BYTE *)(result + 16))
          {
            v14 = v59;
            v16 = v60;
            v49 = *((unsigned int *)v59 + 2);
            if (v49 <= v60)
            {
              v52 = 0;
              v51 = "";
              goto LABEL_182;
            }
            LODWORD(v50) = v61;
            if (v49 - v60 <= v61)
            {
              if (!v60)
              {
                v51 = (const char *)*v59;
                v50 = v59[1];
                goto LABEL_181;
              }
              LODWORD(v50) = v49 - v60;
            }
            v19 = *((unsigned __int8 *)v59 + 12);
            v50 = v50;
            v20 = v49 - v60;
            if (*((_BYTE *)v59 + 12))
            {
              if (v20 < v50)
                goto LABEL_199;
              v51 = (const char *)(*v59 + v60);
              v50 = v50 | 0x100000000;
            }
            else
            {
              if (v20 < v50)
                goto LABEL_199;
              v51 = (const char *)(*v59 + 2 * v60);
            }
LABEL_181:
            v52 = v50;
            if ((v50 & 0xFF00000000) == 0)
            {
              result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v51, v50, 10, 0);
LABEL_184:
              if (!BYTE1(result))
                goto LABEL_47;
              v57 = result;
              if (result > 2u && result - 4 > 0xA)
                goto LABEL_47;
              result = WTF::StringView::SplitResult::Iterator::operator++();
              if (*(_DWORD *)(result + 8) == (_DWORD)v64)
              {
                if (*(_BYTE *)(result + 16))
                  goto LABEL_47;
              }
              v14 = v59;
              v16 = v60;
              v20 = *((unsigned int *)v59 + 2);
              if (v20 <= v60)
              {
                v55 = 0;
                v54 = "";
              }
              else
              {
                LODWORD(v53) = v61;
                v19 = v20 - v60;
                if (v20 - v60 <= v61)
                  goto LABEL_200;
                while (1)
                {
                  v19 = *((unsigned __int8 *)v14 + 12);
                  v53 = v53;
                  v20 -= v16;
                  if (*((_BYTE *)v14 + 12))
                  {
                    if (v20 >= v53)
                    {
                      v54 = (const char *)(*v14 + v16);
                      v53 = v53 | 0x100000000;
                      goto LABEL_202;
                    }
                  }
                  else if (v20 >= v53)
                  {
                    v54 = (const char *)(*v14 + 2 * v16);
                    goto LABEL_202;
                  }
LABEL_199:
                  __break(1u);
LABEL_200:
                  if (!(_DWORD)v16)
                    break;
                  LODWORD(v53) = v19;
                }
                v54 = (const char *)*v14;
                v53 = v14[1];
LABEL_202:
                v55 = v53;
                if ((v53 & 0xFF00000000) == 0)
                {
                  result = WTF::parseInteger<unsigned char,char16_t>((uint64_t)v54, v53, 10, 0);
                  goto LABEL_205;
                }
              }
              result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v54, v55, 10, 0);
LABEL_205:
              v56 = result;
              if (result <= 1u)
              {
                if (BYTE1(result))
                {
                  result = WTF::StringView::SplitResult::Iterator::operator++();
                  if (*(_DWORD *)(result + 8) == (_DWORD)v64)
                  {
                    if (*(_BYTE *)(result + 16))
                    {
                      *(_QWORD *)a3 = v3;
                      *(_BYTE *)(a3 + 8) = v4;
                      *(_BYTE *)(a3 + 9) = v9;
                      *(_BYTE *)(a3 + 10) = v10;
                      *(_BYTE *)(a3 + 11) = v5;
                      *(_BYTE *)(a3 + 12) = v6;
                      *(_BYTE *)(a3 + 13) = v7;
                      *(_BYTE *)(a3 + 14) = v11;
                      *(_BYTE *)(a3 + 15) = v8;
                      *(_BYTE *)(a3 + 16) = v57;
                      *(_BYTE *)(a3 + 17) = v56;
                      goto LABEL_131;
                    }
                  }
                }
              }
              goto LABEL_47;
            }
LABEL_182:
            result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v51, v52, 10, 0);
            goto LABEL_184;
          }
          *(_QWORD *)a3 = v58;
          *(_BYTE *)(a3 + 8) = v4;
          *(_BYTE *)(a3 + 9) = v9;
          *(_BYTE *)(a3 + 10) = v10;
          *(_BYTE *)(a3 + 11) = v5;
          *(_BYTE *)(a3 + 12) = v6;
          *(_BYTE *)(a3 + 13) = v7;
          *(_BYTE *)(a3 + 14) = v11;
          *(_BYTE *)(a3 + 15) = v8;
          goto LABEL_90;
        }
LABEL_156:
        result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v47, v48, 10, 0);
        goto LABEL_158;
      }
      *(_QWORD *)a3 = v58;
      *(_BYTE *)(a3 + 8) = v4;
      *(_BYTE *)(a3 + 9) = v9;
      *(_BYTE *)(a3 + 10) = v10;
      *(_BYTE *)(a3 + 11) = v5;
      *(_BYTE *)(a3 + 12) = v6;
      *(_BYTE *)(a3 + 13) = v7;
      *(_BYTE *)(a3 + 14) = v11;
      *(_WORD *)(a3 + 15) = 257;
LABEL_109:
      *(_BYTE *)(a3 + 17) = 0;
      goto LABEL_131;
    }
LABEL_137:
    result = WTF::parseInteger<unsigned char,unsigned char>((uint64_t)v43, v44, 10, 0);
    goto LABEL_139;
  }
LABEL_47:
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, v21);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::createAV1CodecParametersString@<X0>(uint64_t a1@<X0>, WTF::StringImpl **a2@<X8>)
{
  unsigned __int8 v4;
  uint8x8_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  char v13;
  char v14;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 1;
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  WTF::StringBuilder::append();
  v14 = 46;
  WTF::StringBuilder::append();
  v4 = *(_BYTE *)(a1 + 11);
  WTF::StringBuilder::append();
  v14 = (v4 % 0xAu) | 0x30;
  WTF::StringBuilder::append();
  v5.i32[0] = *(_DWORD *)(a1 + 12);
  if (vmovn_s16((int16x8_t)vmovl_u8(v5)).u32[0] != 16870912 || *(_BYTE *)(a1 + 16) != 1 || *(_BYTE *)(a1 + 17))
  {
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    WTF::StringBuilder::append();
    v14 = 46;
    WTF::StringBuilder::append();
    v14 = (*(_BYTE *)(a1 + 17) % 0xAu) | 0x30;
    WTF::StringBuilder::append();
  }
  WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v10);
  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v10);
  v7 = v10;
  if (v10)
    *(_DWORD *)v10 += 2;
  *a2 = v7;
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

BOOL WebCore::validateAV1PerLevelConstraints(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;

  v4 = WebCore::perLevelConstraints((WebCore *)a1);
  if (qword_1ECE83C10)
  {
    v5 = *(_DWORD *)(qword_1ECE83C10 - 8);
    v6 = a1[9];
    v7 = 9 * ((~(v6 << 15) + v6) ^ ((~(v6 << 15) + v6) >> 10));
    v8 = (v7 ^ (v7 >> 6)) + ~((v7 ^ (v7 >> 6)) << 11);
    v9 = (v8 ^ HIWORD(v8)) & v5;
    v10 = (unsigned __int8 *)(qword_1ECE83C10 + 40 * v9);
    v11 = *v10;
    if (v11 != v6)
    {
      v12 = 1;
      while (v11 != 255)
      {
        v9 = (v9 + v12) & v5;
        v10 = (unsigned __int8 *)(qword_1ECE83C10 + 40 * v9);
        v11 = *v10;
        ++v12;
        if (v11 == v6)
          goto LABEL_9;
      }
      v10 = (unsigned __int8 *)(qword_1ECE83C10 + 40 * *(unsigned int *)(qword_1ECE83C10 - 4));
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_9:
  WebCore::perLevelConstraints((WebCore *)v4);
  v13 = qword_1ECE83C10;
  if (qword_1ECE83C10)
    v13 = qword_1ECE83C10 + 40 * *(unsigned int *)(qword_1ECE83C10 - 4);
  if (v10 == (unsigned __int8 *)v13)
    return 0;
  v14 = 36;
  if (!a1[10])
    v14 = 32;
  v15 = *(_DWORD *)(a2 + 8);
  if (v15 > *((_DWORD *)v10 + 3))
    return 0;
  v16 = *(_DWORD *)(a2 + 12);
  return v16 <= *((_DWORD *)v10 + 4)
      && v16 * v15 <= *((_DWORD *)v10 + 2)
      && *(double *)(a2 + 24) <= *((double *)v10 + 3)
      && *(_QWORD *)(a2 + 16) <= (unint64_t)*(unsigned int *)&v10[v14];
}

uint64_t *WebCore::perLevelConstraints(WebCore *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4[24];
  _BYTE v5[8];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9[8];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char v13[8];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17[8];
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21[8];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25[8];
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29[8];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33[8];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37[8];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  char v41[8];
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char v45[8];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  char v49[8];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char v53[8];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char v57[8];
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if ((_MergedGlobals_224 & 1) == 0)
  {
    v5[0] = 0;
    *(_QWORD *)&v6 = 0x80000024000;
    DWORD2(v6) = 1152;
    v7 = 0x403E000000000000;
    v8 = 1572864;
    v9[0] = 1;
    *(_QWORD *)&v10 = 0xB0000044100;
    DWORD2(v10) = 1584;
    v11 = 0x403E000000000000;
    v12 = 3145728;
    v13[0] = 4;
    *(_QWORD *)&v14 = 0x1100000A2900;
    DWORD2(v14) = 2448;
    v15 = 0x403E000000000000;
    v16 = 6291456;
    v17[0] = 5;
    *(_QWORD *)&v18 = 0x158000104040;
    DWORD2(v18) = 3096;
    v19 = 0x403E000000000000;
    v20 = 10485760;
    v21[0] = 8;
    *(_QWORD *)&v22 = 0x180000240000;
    DWORD2(v22) = 3456;
    v23 = 0x403E000000000000;
    v24 = 0x1E0000000C00000;
    v25[0] = 9;
    *(_QWORD *)&v26 = 0x180000240000;
    DWORD2(v26) = 3456;
    v27 = 0x404E000000000000;
    v28 = 0x320000001400000;
    v29[0] = 12;
    *(_QWORD *)&v30 = 0x200000880000;
    DWORD2(v30) = 4352;
    v31 = 0x403E000000000000;
    v32 = 0x640000001E00000;
    v33[0] = 13;
    *(_QWORD *)&v34 = 0x200000880000;
    DWORD2(v34) = 4352;
    v35 = 0x404E000000000000;
    v36 = 0xA00000002800000;
    v37[0] = 14;
    *(_QWORD *)&v38 = 0x200000880000;
    DWORD2(v38) = 4352;
    v39 = 0x405E000000000000;
    v40 = 0xF00000003C00000;
    v41[0] = 15;
    *(_QWORD *)&v42 = 0x200000880000;
    DWORD2(v42) = 4352;
    v43 = 0x405E000000000000;
    v44 = 0xF00000003C00000;
    v45[0] = 16;
    *(_QWORD *)&v46 = 0x400002200000;
    DWORD2(v46) = 8704;
    v47 = 0x403E000000000000;
    v48 = 0xF00000003C00000;
    v49[0] = 17;
    *(_QWORD *)&v50 = 0x400002200000;
    DWORD2(v50) = 8704;
    v51 = 0x404E000000000000;
    v52 = 0x1E00000006400000;
    v53[0] = 18;
    *(_QWORD *)&v54 = 0x400002200000;
    DWORD2(v54) = 8704;
    v55 = 0x405E000000000000;
    v56 = 0x320000000A000000;
    v57[0] = 19;
    *(_QWORD *)&v58 = 0x400002200000;
    DWORD2(v58) = 8704;
    v59 = 0x405E000000000000;
    v60 = 0x320000000A000000;
    v2 = WTF::fastMalloc((WTF *)0x510);
    *(_OWORD *)v2 = xmmword_1969F71B0;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_BYTE *)(v2 + 56) = -1;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_BYTE *)(v2 + 96) = -1;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_BYTE *)(v2 + 136) = -1;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_BYTE *)(v2 + 176) = -1;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 200) = 0u;
    *(_BYTE *)(v2 + 216) = -1;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_BYTE *)(v2 + 256) = -1;
    *(_BYTE *)(v2 + 296) = -1;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_BYTE *)(v2 + 336) = -1;
    *(_BYTE *)(v2 + 376) = -1;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 400) = 0u;
    *(_BYTE *)(v2 + 416) = -1;
    *(_BYTE *)(v2 + 456) = -1;
    *(_OWORD *)(v2 + 464) = 0u;
    *(_OWORD *)(v2 + 480) = 0u;
    *(_BYTE *)(v2 + 496) = -1;
    *(_BYTE *)(v2 + 536) = -1;
    *(_OWORD *)(v2 + 544) = 0u;
    *(_OWORD *)(v2 + 560) = 0u;
    *(_BYTE *)(v2 + 576) = -1;
    *(_BYTE *)(v2 + 616) = -1;
    *(_OWORD *)(v2 + 624) = 0u;
    *(_OWORD *)(v2 + 640) = 0u;
    *(_BYTE *)(v2 + 656) = -1;
    *(_BYTE *)(v2 + 696) = -1;
    *(_OWORD *)(v2 + 704) = 0u;
    *(_OWORD *)(v2 + 720) = 0u;
    *(_BYTE *)(v2 + 736) = -1;
    *(_BYTE *)(v2 + 776) = -1;
    *(_OWORD *)(v2 + 784) = 0u;
    *(_OWORD *)(v2 + 800) = 0u;
    *(_BYTE *)(v2 + 816) = -1;
    *(_BYTE *)(v2 + 856) = -1;
    *(_OWORD *)(v2 + 864) = 0u;
    *(_OWORD *)(v2 + 880) = 0u;
    *(_BYTE *)(v2 + 896) = -1;
    *(_BYTE *)(v2 + 936) = -1;
    *(_OWORD *)(v2 + 944) = 0u;
    *(_OWORD *)(v2 + 960) = 0u;
    *(_BYTE *)(v2 + 976) = -1;
    *(_BYTE *)(v2 + 1016) = -1;
    *(_OWORD *)(v2 + 1040) = 0u;
    *(_OWORD *)(v2 + 1024) = 0u;
    *(_BYTE *)(v2 + 1056) = -1;
    *(_BYTE *)(v2 + 1096) = -1;
    *(_OWORD *)(v2 + 1120) = 0u;
    *(_OWORD *)(v2 + 1104) = 0u;
    *(_BYTE *)(v2 + 1136) = -1;
    *(_BYTE *)(v2 + 1176) = -1;
    *(_OWORD *)(v2 + 1200) = 0u;
    *(_OWORD *)(v2 + 1184) = 0u;
    *(_BYTE *)(v2 + 1216) = -1;
    *(_BYTE *)(v2 + 1256) = -1;
    *(_OWORD *)(v2 + 1280) = 0u;
    *(_OWORD *)(v2 + 1264) = 0u;
    *(_BYTE *)(v2 + 16) = -1;
    *(_OWORD *)(v2 + 264) = 0u;
    *(_OWORD *)(v2 + 280) = 0u;
    *(_OWORD *)(v2 + 344) = 0u;
    *(_OWORD *)(v2 + 360) = 0u;
    *(_OWORD *)(v2 + 424) = 0u;
    *(_OWORD *)(v2 + 440) = 0u;
    *(_OWORD *)(v2 + 504) = 0u;
    *(_OWORD *)(v2 + 520) = 0u;
    *(_OWORD *)(v2 + 584) = 0u;
    *(_OWORD *)(v2 + 600) = 0u;
    *(_OWORD *)(v2 + 664) = 0u;
    *(_OWORD *)(v2 + 680) = 0u;
    *(_OWORD *)(v2 + 744) = 0u;
    *(_OWORD *)(v2 + 760) = 0u;
    *(_OWORD *)(v2 + 824) = 0u;
    *(_OWORD *)(v2 + 840) = 0u;
    *(_OWORD *)(v2 + 904) = 0u;
    *(_OWORD *)(v2 + 920) = 0u;
    *(_OWORD *)(v2 + 984) = 0u;
    *(_OWORD *)(v2 + 1000) = 0u;
    *(_OWORD *)(v2 + 1064) = 0u;
    *(_OWORD *)(v2 + 1080) = 0u;
    *(_OWORD *)(v2 + 1144) = 0u;
    *(_OWORD *)(v2 + 1160) = 0u;
    *(_OWORD *)(v2 + 1224) = 0u;
    *(_OWORD *)(v2 + 1240) = 0u;
    v3 = v2 + 16;
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v5, &v6);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v9, &v10);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v13, &v14);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v17, &v18);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v21, &v22);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v25, &v26);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v29, &v30);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v33, &v34);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v37, &v38);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v41, &v42);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v45, &v46);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v49, &v50);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v53, &v54);
    WTF::HashMap<WebCore::AV1ConfigurationLevel,WebCore::AV1PerLevelConstraints,WTF::IntHash<WebCore::AV1ConfigurationLevel>,WTF::StrongEnumHashTraits<WebCore::AV1ConfigurationLevel>,WTF::HashTraits<WebCore::AV1PerLevelConstraints>,WTF::HashTableTraits>::add<WebCore::AV1PerLevelConstraints const&>(v4, &v3, v57, &v58);
    qword_1ECE83C10 = v3;
    _MergedGlobals_224 = 1;
  }
  return &qword_1ECE83C10;
}

WebCore::FragmentedSharedBuffer *WebCore::parseAV1DecoderConfigurationRecord@<X0>(WebCore::FragmentedSharedBuffer *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  char v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  WTF *v14;
  char v15;
  char v16;
  char v17;
  WebCore::FragmentedSharedBuffer *v18;
  char v19;
  _QWORD *v20;

  if (*((_QWORD *)this + 6) <= 3uLL
    || (this = (WebCore::FragmentedSharedBuffer *)WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer(this, &v20), !v20))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    return this;
  }
  v19 = 1;
  JSC::DataView::create();
  v4 = JSC::DataView::get<unsigned char>((uint64_t)v18, 1, 0, &v19);
  v5 = v19;
  if (!v19)
    goto LABEL_9;
  v6 = v4;
  if (v4 >= 0x60)
    goto LABEL_8;
  v7 = v4 & 0x1F;
  if ((v4 & 0x1F) >= 0x18)
    goto LABEL_8;
  v8 = JSC::DataView::get<unsigned char>((uint64_t)v18, 2, 0, &v19);
  v5 = v19;
  if (v19)
  {
    if ((v8 & 0x60) != 0x20)
    {
      if ((v8 & 0x40) != 0)
        v15 = 10;
      else
        v15 = 8;
      if ((v8 & 0x60) == 0x60)
        v16 = 12;
      else
        v16 = v15;
      v17 = ((int)(v8 << 28) >> 31) & 0x64 | 0xA;
      if ((v8 & 4) == 0)
        v17 = ((int)(v8 << 28) >> 31) & 0x64;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = v6 >> 5;
      *(_BYTE *)(a2 + 9) = v7;
      *(_BYTE *)(a2 + 10) = v8 >> 7;
      *(_BYTE *)(a2 + 11) = v16;
      *(_BYTE *)(a2 + 12) = v8 & 0x10;
      *(_BYTE *)(a2 + 13) = v17 + (v8 & 2);
      *(_DWORD *)(a2 + 14) = 65793;
      v5 = 1;
      goto LABEL_10;
    }
LABEL_8:
    v5 = 0;
  }
LABEL_9:
  *(_BYTE *)a2 = 0;
LABEL_10:
  *(_BYTE *)(a2 + 24) = v5;
  this = v18;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      this = (WebCore::FragmentedSharedBuffer *)JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v18;
  }
  v9 = v20;
  v20 = 0;
  if (v9)
  {
    v10 = *(_DWORD *)v9 == 2;
    *(_DWORD *)v9 -= 2;
    if (v10)
    {
      v11 = v9[10];
      if (v11)
      {
        *(_QWORD *)(v11 + 8) = 3;
        v9[10] = 0;
      }
      if ((v9[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v9 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v9 + 2));
      v13 = (WTF *)v9[1];
      if ((v13 & 1) == 0 && v13)
      {
        v14 = *(WTF **)v13;
        if (*(_QWORD *)v13)
        {
          *(_QWORD *)v13 = 0;
          *((_DWORD *)v13 + 2) = 0;
          WTF::fastFree(v14, v12);
        }
        WTF::fastFree(v13, v12);
      }
      return (WebCore::FragmentedSharedBuffer *)WTF::fastFree((WTF *)v9, v12);
    }
  }
  return this;
}

uint64_t JSC::DataView::get<unsigned char>(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 + 1;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = MEMORY[0x1E0CC10F8];
  if (!a4)
  {
    if (!v5)
      goto LABEL_18;
    v11 = *(_QWORD *)(v5 + 16);
    if (v11)
    {
      if ((v12 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v11 & 0x3FFFFFFFFLL) + v12)
      {
        v13 = *(_BYTE *)(a1 + 6);
        if ((v13 & 3) == 0)
        {
          v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_18;
        }
        if (*(_BYTE *)(v5 + 64) && (v27 = *(_QWORD *)(v5 + 32)) != 0)
        {
          v19 = atomic_load((unint64_t *)(v27 + 32));
          v13 = *(_BYTE *)(a1 + 6);
        }
        else
        {
          v19 = *(_QWORD *)(v5 + 48);
        }
        v20 = *(_QWORD *)(a1 + 8);
        if ((v13 & 4) == 0)
        {
          if (*(_QWORD *)(a1 + 16) + v20 <= v19 && v19 >= v20)
            v5 = 0;
          else
            v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_18;
        }
        v18 = v19 >= v20;
        v24 = v19 - v20;
        if (!v18)
        {
          if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
            LOBYTE(v25) = 0;
          else
            v25 = qword_1969F71D0[(char)(*(_BYTE *)(a1 + 4) - 4)];
          v5 = (-1 << v25) & v24;
LABEL_18:
          if (v4 > v5)
          {
            __break(0xC471u);
            JUMPOUT(0x196136A8CLL);
          }
          goto LABEL_21;
        }
      }
    }
    v5 = 0;
    goto LABEL_18;
  }
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 16);
    if (v7)
    {
      if ((v8 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v7 & 0x3FFFFFFFFLL) + v8)
      {
        v9 = *(_BYTE *)(a1 + 6);
        if ((v9 & 3) == 0)
        {
          v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_9;
        }
        if (*(_BYTE *)(v5 + 64) && (v26 = *(_QWORD *)(v5 + 32)) != 0)
        {
          v16 = atomic_load((unint64_t *)(v26 + 32));
          v9 = *(_BYTE *)(a1 + 6);
        }
        else
        {
          v16 = *(_QWORD *)(v5 + 48);
        }
        v17 = *(_QWORD *)(a1 + 8);
        if ((v9 & 4) == 0)
        {
          v18 = *(_QWORD *)(a1 + 16) + v17 <= v16 && v16 >= v17;
          if (v18)
            v5 = 0;
          else
            v5 = *(_QWORD *)(a1 + 16);
          goto LABEL_9;
        }
        v18 = v16 >= v17;
        v22 = v16 - v17;
        if (!v18)
        {
          if ((*(_BYTE *)(a1 + 4) - 4) > 7u)
            LOBYTE(v23) = 0;
          else
            v23 = qword_1969F71D0[(char)(*(_BYTE *)(a1 + 4) - 4)];
          v5 = (-1 << v23) & v22;
          goto LABEL_9;
        }
      }
    }
    v5 = 0;
  }
LABEL_9:
  if (v4 > v5)
  {
    result = 0;
    *a4 = 0;
    return result;
  }
  *a4 = 1;
LABEL_21:
  v14 = *(_QWORD *)(v6 + 56);
  if (v14 && (*(_BYTE *)(v6 + 34) || !*MEMORY[0x1E0CC10F0]))
    v15 = (*(_QWORD *)(a1 + 24) & 0x3FFFFFFFFLL) + v14;
  else
    v15 = *(_QWORD *)(a1 + 24);
  return *(unsigned __int8 *)(v15 + a2);
}

uint64_t WebCore::framesPerSecondNearestFullSpeed(uint64_t this)
{
  if (this >= 0x3D)
    return (float)((float)this / (float)(this / 0x3C));
  return this;
}

uint64_t WebCore::preferredFramesPerSecond(char a1, uint64_t a2, int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  if ((a1 & 2) != 0)
  {
    v5 = 0;
    v4 = 0;
    v3 = 0;
  }
  else
  {
    if ((a2 & 0xFF00000000) != 0 && (_DWORD)a2 != 60)
    {
      if (a3 && a2 >= 0x3D)
        LODWORD(a2) = (float)((float)a2 / (float)(a2 / 0x3C));
      v3 = (a2 >> ((a1 & 0xD) != 0)) & 0xFFFFFF00;
      v4 = (a2 >> ((a1 & 0xD) != 0));
    }
    else
    {
      v3 = 0;
      if ((a1 & 0xD) != 0)
        v4 = 30;
      else
        v4 = 60;
    }
    v5 = 0x100000000;
  }
  return v5 | v3 | v4;
}

unsigned int WebCore::preferredFramesPerSecondFromInterval(double a1)
{
  if (a1 == 0.015)
    return 60;
  if (a1 == 0.03)
    return 30;
  return vcvtad_u64_f64(1.0 / a1);
}

uint64_t WebCore::operator<<(uint64_t a1, _BYTE *a2)
{
  int v3;
  int v5;
  int v6;

  v3 = *a2;
  if (!*a2)
    goto LABEL_11;
  v5 = v3 & -v3;
  switch(v5)
  {
    case 1:
    case 2:
    case 4:
    case 8:
      goto LABEL_4;
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    default:
      if (v5 == 16)
LABEL_4:
        WTF::TextStream::operator<<();
      break;
  }
  v6 = (v3 - 1) & v3;
  if (v6)
  {
    do
    {
      WTF::TextStream::operator<<();
      switch(v6 & -(char)v6)
      {
        case 1:
        case 2:
        case 4:
        case 8:
          goto LABEL_8;
        case 3:
        case 5:
        case 6:
        case 7:
          break;
        default:
          if ((v6 & -(char)v6) == 0x10)
LABEL_8:
            WTF::TextStream::operator<<();
          break;
      }
      LOBYTE(v6) = (v6 - 1) & v6;
    }
    while ((_BYTE)v6);
  }
  if (!*a2)
LABEL_11:
    WTF::TextStream::operator<<();
  return a1;
}

{
  uint64_t v3;

  if (!*a2 || *a2 == 1)
    WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  if ((unint64_t)(char)a2[1] <= 4)
    WTF::TextStream::operator<<();
  v3 = WTF::TextStream::operator<<();
  return WebCore::operator<<(v3);
}

{
  uint64_t v4;

  WTF::TextStream::operator<<();
  if ((unint64_t)(char)*a2 <= 5)
    WTF::TextStream::operator<<();
  switch(*a2)
  {
    case 2:
    case 3:
      v4 = WTF::TextStream::operator<<();
      WTF::streamSizedContainer<WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v4, (uint64_t)(a2 + 24));
      break;
    case 4:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      goto LABEL_7;
    case 5:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
LABEL_7:
      WTF::TextStream::operator<<();
      WTF::TextStream::operator<<();
      break;
    default:
      return a1;
  }
  return a1;
}

WebCore::BifurcatedGraphicsContext *WebCore::BifurcatedGraphicsContext::BifurcatedGraphicsContext(WebCore::BifurcatedGraphicsContext *this, WebCore::GraphicsContext *a2, WebCore::GraphicsContext *a3)
{
  int v7;

  v7 = 0;
  *(_QWORD *)this = off_1E340BA10;
  WebCore::GraphicsContextState::GraphicsContextState((uint64_t)this + 8, &v7, 0);
  *((_QWORD *)this + 44) = (char *)this + 368;
  *((_QWORD *)this + 45) = 1;
  *((_BYTE *)this + 716) &= 0xFCu;
  *((_DWORD *)this + 178) = 0;
  *(_QWORD *)this = off_1E340A940;
  *((_BYTE *)this + 717) = 0;
  *((_QWORD *)this + 90) = a2;
  *((_QWORD *)this + 91) = a3;
  return this;
}

{
  int v7;

  v7 = 0;
  *(_QWORD *)this = off_1E340BA10;
  WebCore::GraphicsContextState::GraphicsContextState((uint64_t)this + 8, &v7, 0);
  *((_QWORD *)this + 44) = (char *)this + 368;
  *((_QWORD *)this + 45) = 1;
  *((_BYTE *)this + 716) &= 0xFCu;
  *((_DWORD *)this + 178) = 0;
  *(_QWORD *)this = off_1E340A940;
  *((_BYTE *)this + 717) = 0;
  *((_QWORD *)this + 90) = a2;
  *((_QWORD *)this + 91) = a3;
  return this;
}

void WebCore::BifurcatedGraphicsContext::~BifurcatedGraphicsContext(WebCore::BifurcatedGraphicsContext *this, void *a2)
{
  unsigned int v3;
  WTF *v4;

  *(_QWORD *)this = off_1E340BA10;
  v3 = *((_DWORD *)this + 91);
  if (v3)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v3));
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::BifurcatedGraphicsContext *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::BifurcatedGraphicsContext *)((char *)this + 8), a2);
}

{
  unsigned int v3;
  WTF *v4;

  *(_QWORD *)this = off_1E340BA10;
  v3 = *((_DWORD *)this + 91);
  if (v3)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v3));
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::BifurcatedGraphicsContext *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::BifurcatedGraphicsContext *)((char *)this + 8), a2);
}

{
  unsigned int v3;
  WTF *v4;
  void *v6;

  *(_QWORD *)this = off_1E340BA10;
  v3 = *((_DWORD *)this + 91);
  if (v3)
    WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct(*((unsigned int **)this + 44), (unsigned int *)(*((_QWORD *)this + 44) + 344 * v3));
  v4 = (WTF *)*((_QWORD *)this + 44);
  if ((WebCore::BifurcatedGraphicsContext *)((char *)this + 368) != v4 && v4 != 0)
  {
    *((_QWORD *)this + 44) = 0;
    *((_DWORD *)this + 90) = 0;
    WTF::fastFree(v4, a2);
  }
  WebCore::GraphicsContextState::~GraphicsContextState((WebCore::BifurcatedGraphicsContext *)((char *)this + 8), a2);
  WTF::fastFree(this, v6);
}

uint64_t WebCore::BifurcatedGraphicsContext::hasPlatformContext(WebCore::BifurcatedGraphicsContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 16))(*((_QWORD *)this + 90));
}

uint64_t WebCore::BifurcatedGraphicsContext::platformContext(WebCore::BifurcatedGraphicsContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 24))(*((_QWORD *)this + 90));
}

uint64_t WebCore::BifurcatedGraphicsContext::colorSpace(WebCore::BifurcatedGraphicsContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 90) + 32))(*((_QWORD *)this + 90));
}

uint64_t WebCore::BifurcatedGraphicsContext::save(uint64_t a1, uint64_t a2)
{
  WebCore::GraphicsContext::save(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 720) + 96))(*(_QWORD *)(a1 + 720), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 96))(*(_QWORD *)(a1 + 728), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::restore(uint64_t a1, void *a2)
{
  WebCore::GraphicsContext::restore(a1, a2);
  (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 720) + 104))(*(_QWORD *)(a1 + 720), a2);
  return (*(uint64_t (**)(_QWORD, void *))(**(_QWORD **)(a1 + 728) + 104))(*(_QWORD *)(a1 + 728), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawRect(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2, float a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 144))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *, float))(**((_QWORD **)this + 91) + 144))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawLine(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 152))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatPoint *, const WebCore::FloatPoint *))(**((_QWORD **)this + 91) + 152))(*((_QWORD *)this + 91), a2, a3);
}

uint64_t WebCore::BifurcatedGraphicsContext::drawEllipse(WebCore::BifurcatedGraphicsContext *this, const WebCore::FloatRect *a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 160))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD, const WebCore::FloatRect *))(**((_QWORD **)this + 91) + 160))(*((_QWORD *)this + 91), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::applyStrokePattern(WebCore::BifurcatedGraphicsContext *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 112))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 112))(*((_QWORD *)this + 91));
}

uint64_t WebCore::BifurcatedGraphicsContext::applyFillPattern(WebCore::BifurcatedGraphicsContext *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 120))(*((_QWORD *)this + 90));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 91) + 120))(*((_QWORD *)this + 91));
}

uint64_t WebCore::BifurcatedGraphicsContext::drawPath(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 192))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 192))(*(_QWORD *)(a1 + 728), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::fillPath(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 176))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 176))(*(_QWORD *)(a1 + 728), a2);
}

uint64_t WebCore::BifurcatedGraphicsContext::strokePath(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 720) + 184))(*(_QWORD *)(a1 + 720));
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 728) + 184))(*(_QWORD *)(a1 + 728), a2);
}

uint64_t *WebCore::BifurcatedGraphicsContext::beginTransparencyLayer(WebCore::BifurcatedGraphicsContext *this, float a2)
{
  ++*((_DWORD *)this + 178);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 90) + 592))(*((_QWORD *)this + 90));
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 91) + 592))(*((_QWORD *)this + 91), a2);
  return WebCore::GraphicsContext::save((uint64_t)this, 2);
}

